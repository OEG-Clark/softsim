{"home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR_CenterRefine.log_string": [[107, 111], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["None"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "DUMP_DIR", ")", ":", "os", ".", "mkdir", "(", "DUMP_DIR", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR_CenterRefine.my_worker_init_fn": [[114, 116], ["numpy.random.seed", "numpy.random.get_state"], "function", ["None"], ["def", "my_worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR_CenterRefine.get_current_lr": [[227, 233], ["enumerate"], "function", ["None"], ["def", "get_current_lr", "(", "epoch", ")", ":", "\n", "    ", "lr", "=", "BASE_LEARNING_RATE", "\n", "for", "i", ",", "lr_decay_epoch", "in", "enumerate", "(", "LR_DECAY_STEPS", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epoch", ":", "\n", "            ", "lr", "*=", "LR_DECAY_RATES", "[", "i", "]", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR_CenterRefine.adjust_learning_rate": [[234, 238], ["train_Votenet_BR_CenterRefine.get_current_lr"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.get_current_lr"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "lr", "=", "get_current_lr", "(", "epoch", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR_CenterRefine.train_one_epoch": [[248, 289], ["train_Votenet_BR_CenterRefine.adjust_learning_rate", "bnm_scheduler.step", "net.train", "enumerate", "zip", "optimizer.zero_grad", "net", "net", "criterion", "loss.backward", "optimizer.step", "itertools.cycle", "batch_data_label_S[].to", "batch_data_label_T[].to", "train_Votenet_BR_CenterRefine.log_string", "sorted", "end_points_S[].item", "stat_dict.keys", "train_Votenet_BR_CenterRefine.log_string"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.adjust_learning_rate", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.train", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string"], ["def", "train_one_epoch", "(", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "adjust_learning_rate", "(", "optimizer", ",", "EPOCH_CNT", ")", "\n", "bnm_scheduler", ".", "step", "(", ")", "# decay BN momentum", "\n", "net", ".", "train", "(", ")", "# set model to training mode", "\n", "for", "batch_idx", ",", "(", "batch_data_label_S", ",", "batch_data_label_T", ")", "in", "enumerate", "(", "zip", "(", "TRAIN_DATALOADER_S", ",", "cycle", "(", "TRAIN_DATALOADER_T", ")", ")", ")", ":", "\n", "        ", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "batch_data_label_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "batch_data_label_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "\n", "# Forward pass", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "inputs_S", "=", "{", "'point_clouds'", ":", "batch_data_label_S", "[", "'point_clouds'", "]", "}", "\n", "inputs_T", "=", "{", "'point_clouds'", ":", "batch_data_label_T", "[", "'point_clouds'", "]", "}", "\n", "end_points_S", "=", "net", "(", "inputs_S", ",", "batch_data_label_S", "[", "'center_label'", "]", ",", "batch_data_label_S", "[", "'sem_cls_label'", "]", ")", "\n", "end_points_T", "=", "net", "(", "inputs_T", ",", "batch_data_label_T", "[", "'center_label'", "]", ",", "batch_data_label_T", "[", "'sem_cls_label'", "]", ")", "\n", "\n", "# Compute loss and gradients, update parameters.", "\n", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_S", ")", "\n", "end_points_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_T", ")", "\n", "end_points_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", "\n", "", "loss", ",", "end_points_S", ",", "_", "=", "criterion", "(", "end_points_S", ",", "end_points_T", ",", "EPOCH_CNT", ",", "DATASET_CONFIG", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "for", "key", "in", "end_points_S", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "stat_dict", "[", "key", "]", "+=", "end_points_S", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "batch_interval", "=", "10", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "batch_interval", "==", "0", ":", "\n", "            ", "log_string", "(", "' ---- batch: %03d ----'", "%", "(", "batch_idx", "+", "1", ")", ")", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "log_string", "(", "'mean %s: %f'", "%", "(", "key", ",", "stat_dict", "[", "key", "]", "/", "batch_interval", ")", ")", "\n", "stat_dict", "[", "key", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR_CenterRefine.evaluate_one_epoch": [[290, 338], ["ap_helper.APCalculator", "ap_helper.APCalculator", "net.eval", "enumerate", "print", "ap_helper.APCalculator.compute_metrics", "print", "ap_helper.APCalculator.compute_metrics", "zip", "ap_helper.parse_predictions", "ap_helper.parse_groundtruths", "ap_helper.APCalculator.step", "ap_helper.parse_predictions", "ap_helper.parse_groundtruths", "ap_helper.APCalculator.step", "train_Votenet_BR_CenterRefine.log_string", "train_Votenet_BR_CenterRefine.log_string", "print", "batch_data_label_S[].to", "batch_data_label_T[].to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "net"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.compute_metrics", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.compute_metrics", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_groundtruths", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_groundtruths", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string"], ["", "", "", "", "def", "evaluate_one_epoch", "(", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "ap_calculator_S", "=", "APCalculator", "(", "ap_iou_thresh", "=", "FLAGS", ".", "ap_iou_thresh", ",", "\n", "class2type_map", "=", "DATASET_CONFIG", ".", "class2type", ")", "\n", "ap_calculator_T", "=", "APCalculator", "(", "ap_iou_thresh", "=", "FLAGS", ".", "ap_iou_thresh", ",", "\n", "class2type_map", "=", "DATASET_CONFIG", ".", "class2type", ")", "\n", "net", ".", "eval", "(", ")", "# set model to eval mode (for bn and dp)", "\n", "for", "batch_idx", ",", "(", "batch_data_label_S", ",", "batch_data_label_T", ")", "in", "enumerate", "(", "zip", "(", "TEST_DATALOADER_S", ",", "TEST_DATALOADER_T", ")", ")", ":", "\n", "        ", "if", "batch_idx", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Eval batch: %d'", "%", "(", "batch_idx", ")", ")", "\n", "", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "batch_data_label_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "batch_data_label_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "\n", "# Forward pass", "\n", "", "inputs_S", "=", "{", "'point_clouds'", ":", "batch_data_label_S", "[", "'point_clouds'", "]", "}", "\n", "inputs_T", "=", "{", "'point_clouds'", ":", "batch_data_label_T", "[", "'point_clouds'", "]", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "end_points_S", "=", "net", "(", "inputs_S", ")", "\n", "end_points_T", "=", "net", "(", "inputs_T", ")", "\n", "\n", "# Compute loss", "\n", "", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_S", ")", "\n", "end_points_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_T", ")", "\n", "end_points_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", "\n", "#loss, end_points_S, end_points_T = criterion(end_points_S, end_points_T, DATASET_CONFIG)", "\n", "\n", "", "batch_pred_map_cls_S", "=", "parse_predictions", "(", "end_points_S", ",", "CONFIG_DICT", ")", "\n", "batch_gt_map_cls_S", "=", "parse_groundtruths", "(", "end_points_S", ",", "CONFIG_DICT", ")", "\n", "ap_calculator_S", ".", "step", "(", "batch_pred_map_cls_S", ",", "batch_gt_map_cls_S", ")", "\n", "batch_pred_map_cls_T", "=", "parse_predictions", "(", "end_points_T", ",", "CONFIG_DICT", ")", "\n", "batch_gt_map_cls_T", "=", "parse_groundtruths", "(", "end_points_T", ",", "CONFIG_DICT", ")", "\n", "ap_calculator_T", ".", "step", "(", "batch_pred_map_cls_T", ",", "batch_gt_map_cls_T", ")", "\n", "\n", "\n", "# Evaluate average precision", "\n", "", "print", "(", "\"================= Source =================\"", ")", "\n", "metrics_dict_S", "=", "ap_calculator_S", ".", "compute_metrics", "(", ")", "\n", "for", "key", "in", "metrics_dict_S", ":", "\n", "        ", "log_string", "(", "'eval %s: %f'", "%", "(", "key", ",", "metrics_dict_S", "[", "key", "]", ")", ")", "\n", "", "print", "(", "\"================= Target =================\"", ")", "\n", "metrics_dict_T", "=", "ap_calculator_T", ".", "compute_metrics", "(", ")", "\n", "for", "key", "in", "metrics_dict_T", ":", "\n", "        ", "log_string", "(", "'eval %s: %f'", "%", "(", "key", ",", "metrics_dict_T", "[", "key", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR_CenterRefine.train": [[340, 366], ["range", "train_Votenet_BR_CenterRefine.log_string", "train_Votenet_BR_CenterRefine.log_string", "train_Votenet_BR_CenterRefine.log_string", "train_Votenet_BR_CenterRefine.log_string", "numpy.random.seed", "train_Votenet_BR_CenterRefine.train_one_epoch", "torch.save", "torch.save", "torch.save", "str", "train_Votenet_BR_CenterRefine.evaluate_one_epoch", "optimizer.state_dict", "net.module.state_dict", "os.path.join", "train_Votenet_BR_CenterRefine.get_current_lr", "bnm_scheduler.lmbd", "datetime.datetime.now", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.train_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.evaluate_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.get_current_lr", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "", "def", "train", "(", "start_epoch", ")", ":", "\n", "    ", "global", "EPOCH_CNT", "\n", "min_loss", "=", "1e10", "\n", "loss", "=", "0", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "MAX_EPOCH", ")", ":", "\n", "        ", "EPOCH_CNT", "=", "epoch", "\n", "log_string", "(", "'**** EPOCH %03d ****'", "%", "(", "epoch", ")", ")", "\n", "log_string", "(", "'Current learning rate: %f'", "%", "(", "get_current_lr", "(", "epoch", ")", ")", ")", "\n", "log_string", "(", "'Current BN decay momentum: %f'", "%", "(", "bnm_scheduler", ".", "lmbd", "(", "bnm_scheduler", ".", "last_epoch", ")", ")", ")", "\n", "log_string", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "# Reset numpy seed.", "\n", "# REF: https://github.com/pytorch/pytorch/issues/5059", "\n", "np", ".", "random", ".", "seed", "(", ")", "\n", "\n", "train_one_epoch", "(", ")", "\n", "if", "EPOCH_CNT", "==", "0", "or", "EPOCH_CNT", "%", "10", "==", "9", ":", "# Eval every 10 epochs", "\n", "            ", "evaluate_one_epoch", "(", ")", "\n", "# Save checkpoint", "\n", "", "save_dict", "=", "{", "'epoch'", ":", "epoch", "+", "1", "-", "10", ",", "# after training one epoch, the start_epoch should be epoch+1", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "try", ":", "# with nn.DataParallel() the net is added as a submodule of DataParallel", "\n", "            ", "save_dict", "[", "'model_state_dict'", "]", "=", "net", ".", "module", ".", "state_dict", "(", ")", "\n", "", "except", ":", "\n", "            ", "save_dict", "[", "'model_state_dict'", "]", "=", "net", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'train_BR.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_WSB.log_string": [[103, 107], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["None"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "DUMP_DIR", ")", ":", "os", ".", "mkdir", "(", "DUMP_DIR", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_WSB.my_worker_init_fn": [[110, 112], ["numpy.random.seed", "numpy.random.get_state"], "function", ["None"], ["def", "my_worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_WSB.get_current_lr": [[192, 198], ["enumerate"], "function", ["None"], ["def", "get_current_lr", "(", "epoch", ")", ":", "\n", "    ", "lr", "=", "BASE_LEARNING_RATE", "\n", "for", "i", ",", "lr_decay_epoch", "in", "enumerate", "(", "LR_DECAY_STEPS", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epoch", ":", "\n", "            ", "lr", "*=", "LR_DECAY_RATES", "[", "i", "]", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_WSB.adjust_learning_rate": [[199, 203], ["train_Votenet_WSB.get_current_lr"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.get_current_lr"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "lr", "=", "get_current_lr", "(", "epoch", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_WSB.train_one_epoch": [[212, 246], ["train_Votenet_WSB.adjust_learning_rate", "bnm_scheduler.step", "net.train", "enumerate", "optimizer.zero_grad", "net", "criterion", "loss.backward", "optimizer.step", "batch_data_label[].to", "train_Votenet_WSB.log_string", "sorted", "end_points[].item", "stat_dict.keys", "train_Votenet_WSB.log_string"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.adjust_learning_rate", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.train", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string"], ["def", "train_one_epoch", "(", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "adjust_learning_rate", "(", "optimizer", ",", "EPOCH_CNT", ")", "\n", "bnm_scheduler", ".", "step", "(", ")", "# decay BN momentum", "\n", "net", ".", "train", "(", ")", "# set model to training mode", "\n", "for", "batch_idx", ",", "batch_data_label", "in", "enumerate", "(", "TRAIN_DATALOADER", ")", ":", "\n", "        ", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "batch_data_label", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "\n", "# Forward pass", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "inputs", "=", "{", "'point_clouds'", ":", "batch_data_label", "[", "'point_clouds'", "]", "}", "\n", "end_points", "=", "net", "(", "inputs", ")", "\n", "\n", "# Compute loss and gradients, update parameters.", "\n", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points", ")", "\n", "end_points", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", "\n", "", "loss", ",", "end_points", "=", "criterion", "(", "end_points", ",", "DATASET_CONFIG", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "for", "key", "in", "end_points", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "batch_interval", "=", "20", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "batch_interval", "==", "0", ":", "\n", "            ", "log_string", "(", "' ---- batch: %03d ----'", "%", "(", "batch_idx", "+", "1", ")", ")", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "log_string", "(", "'mean %s: %f'", "%", "(", "key", ",", "stat_dict", "[", "key", "]", "/", "batch_interval", ")", ")", "\n", "stat_dict", "[", "key", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_WSB.evaluate_one_epoch": [[247, 294], ["ap_helper.APCalculator", "net.eval", "enumerate", "sorted", "ap_helper.APCalculator.compute_metrics", "criterion", "ap_helper.parse_predictions", "ap_helper.parse_groundtruths", "ap_helper.APCalculator.step", "stat_dict.keys", "train_Votenet_WSB.log_string", "train_Votenet_WSB.log_string", "float", "print", "batch_data_label[].to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "MODEL.dump_results", "end_points[].item", "float"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.compute_metrics", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_groundtruths", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.dump_results"], ["", "", "", "", "def", "evaluate_one_epoch", "(", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "ap_calculator", "=", "APCalculator", "(", "ap_iou_thresh", "=", "FLAGS", ".", "ap_iou_thresh", ",", "\n", "class2type_map", "=", "DATASET_CONFIG", ".", "class2type", ")", "\n", "net", ".", "eval", "(", ")", "# set model to eval mode (for bn and dp)", "\n", "for", "batch_idx", ",", "batch_data_label", "in", "enumerate", "(", "TEST_DATALOADER", ")", ":", "\n", "        ", "if", "batch_idx", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Eval batch: %d'", "%", "(", "batch_idx", ")", ")", "\n", "", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "batch_data_label", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "\n", "# Forward pass", "\n", "", "inputs", "=", "{", "'point_clouds'", ":", "batch_data_label", "[", "'point_clouds'", "]", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "end_points", "=", "net", "(", "inputs", ")", "\n", "\n", "# Compute loss", "\n", "", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points", ")", "\n", "end_points", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", "\n", "", "loss", ",", "end_points", "=", "criterion", "(", "end_points", ",", "DATASET_CONFIG", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "for", "key", "in", "end_points", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "batch_pred_map_cls", "=", "parse_predictions", "(", "end_points", ",", "CONFIG_DICT", ")", "\n", "batch_gt_map_cls", "=", "parse_groundtruths", "(", "end_points", ",", "CONFIG_DICT", ")", "\n", "ap_calculator", ".", "step", "(", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", "\n", "\n", "# Dump evaluation results for visualization", "\n", "if", "FLAGS", ".", "dump_results", "and", "batch_idx", "==", "0", "and", "EPOCH_CNT", "%", "10", "==", "0", ":", "\n", "            ", "MODEL", ".", "dump_results", "(", "end_points", ",", "DUMP_DIR", ",", "DATASET_CONFIG", ")", "\n", "\n", "# Log statistics", "\n", "", "", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "log_string", "(", "'eval mean %s: %f'", "%", "(", "key", ",", "stat_dict", "[", "key", "]", "/", "(", "float", "(", "batch_idx", "+", "1", ")", ")", ")", ")", "\n", "\n", "# Evaluate average precision", "\n", "", "metrics_dict", "=", "ap_calculator", ".", "compute_metrics", "(", ")", "\n", "for", "key", "in", "metrics_dict", ":", "\n", "        ", "log_string", "(", "'eval %s: %f'", "%", "(", "key", ",", "metrics_dict", "[", "key", "]", ")", ")", "\n", "\n", "", "mean_loss", "=", "stat_dict", "[", "'loss'", "]", "/", "float", "(", "batch_idx", "+", "1", ")", "\n", "return", "mean_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_WSB.train": [[296, 320], ["range", "train_Votenet_WSB.log_string", "train_Votenet_WSB.log_string", "train_Votenet_WSB.log_string", "train_Votenet_WSB.log_string", "numpy.random.seed", "train_Votenet_WSB.train_one_epoch", "torch.save", "torch.save", "torch.save", "str", "train_Votenet_WSB.evaluate_one_epoch", "optimizer.state_dict", "net.module.state_dict", "os.path.join", "train_Votenet_WSB.get_current_lr", "bnm_scheduler.lmbd", "datetime.datetime.now", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.train_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.evaluate_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.get_current_lr", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "def", "train", "(", "start_epoch", ")", ":", "\n", "    ", "global", "EPOCH_CNT", "\n", "min_loss", "=", "1e10", "\n", "loss", "=", "0", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "MAX_EPOCH", ")", ":", "\n", "        ", "EPOCH_CNT", "=", "epoch", "\n", "log_string", "(", "'**** EPOCH %03d ****'", "%", "(", "epoch", ")", ")", "\n", "log_string", "(", "'Current learning rate: %f'", "%", "(", "get_current_lr", "(", "epoch", ")", ")", ")", "\n", "log_string", "(", "'Current BN decay momentum: %f'", "%", "(", "bnm_scheduler", ".", "lmbd", "(", "bnm_scheduler", ".", "last_epoch", ")", ")", ")", "\n", "log_string", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "np", ".", "random", ".", "seed", "(", ")", "\n", "train_one_epoch", "(", ")", "\n", "if", "EPOCH_CNT", "==", "0", "or", "EPOCH_CNT", "%", "10", "==", "9", ":", "# Eval every 10 epochs", "\n", "            ", "loss", "=", "evaluate_one_epoch", "(", ")", "\n", "# Save checkpoint", "\n", "", "save_dict", "=", "{", "'epoch'", ":", "epoch", "+", "1", ",", "# after training one epoch, the start_epoch should be epoch+1", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss'", ":", "loss", ",", "\n", "}", "\n", "try", ":", "# with nn.DataParallel() the net is added as a submodule of DataParallel", "\n", "            ", "save_dict", "[", "'model_state_dict'", "]", "=", "net", ".", "module", ".", "state_dict", "(", ")", "\n", "", "except", ":", "\n", "            ", "save_dict", "[", "'model_state_dict'", "]", "=", "net", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'checkpoint.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR.set_random_seed": [[72, 80], ["numpy.random.seed", "random.seed", "str", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_random_seed", "(", "seed_value", ")", ":", "\n", "    ", "import", "random", "\n", "np", ".", "random", ".", "seed", "(", "seed_value", ")", "\n", "random", ".", "seed", "(", "seed_value", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed_value", ")", "\n", "torch", ".", "manual_seed", "(", "seed_value", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed_value", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR.log_string": [[119, 123], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["None"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "DUMP_DIR", ")", ":", "os", ".", "mkdir", "(", "DUMP_DIR", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR.my_worker_init_fn": [[126, 128], ["numpy.random.seed", "numpy.random.get_state"], "function", ["None"], ["def", "my_worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR.get_current_lr": [[241, 247], ["enumerate"], "function", ["None"], ["def", "get_current_lr", "(", "epoch", ")", ":", "\n", "    ", "lr", "=", "BASE_LEARNING_RATE", "\n", "for", "i", ",", "lr_decay_epoch", "in", "enumerate", "(", "LR_DECAY_STEPS", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epoch", ":", "\n", "            ", "lr", "*=", "LR_DECAY_RATES", "[", "i", "]", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR.adjust_learning_rate": [[248, 252], ["train_Votenet_BR.get_current_lr"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.get_current_lr"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "lr", "=", "get_current_lr", "(", "epoch", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR.train_one_epoch": [[262, 303], ["train_Votenet_BR.adjust_learning_rate", "bnm_scheduler.step", "net.train", "enumerate", "optimizer.zero_grad", "net", "net", "criterion", "loss.backward", "optimizer.step", "zip", "zip", "batch_data_label_S[].to", "batch_data_label_T[].to", "train_Votenet_BR.log_string", "sorted", "itertools.cycle", "itertools.cycle", "end_points_S[].item", "stat_dict.keys", "train_Votenet_BR.log_string"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.adjust_learning_rate", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.train", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string"], ["def", "train_one_epoch", "(", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "adjust_learning_rate", "(", "optimizer", ",", "EPOCH_CNT", ")", "\n", "bnm_scheduler", ".", "step", "(", ")", "# decay BN momentum", "\n", "net", ".", "train", "(", ")", "# set model to training mode", "\n", "for", "batch_idx", ",", "(", "batch_data_label_S", ",", "batch_data_label_T", ")", "in", "enumerate", "(", "zip", "(", "cycle", "(", "TRAIN_DATALOADER_S", ")", ",", "TRAIN_DATALOADER_T", ")", "if", "TRAIN_cycle_S", "else", "zip", "(", "TRAIN_DATALOADER_S", ",", "cycle", "(", "TRAIN_DATALOADER_T", ")", ")", ")", ":", "\n", "        ", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "batch_data_label_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "batch_data_label_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "\n", "# Forward pass", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "inputs_S", "=", "{", "'point_clouds'", ":", "batch_data_label_S", "[", "'point_clouds'", "]", "}", "\n", "inputs_T", "=", "{", "'point_clouds'", ":", "batch_data_label_T", "[", "'point_clouds'", "]", "}", "\n", "end_points_S", "=", "net", "(", "inputs_S", ")", "\n", "end_points_T", "=", "net", "(", "inputs_T", ")", "\n", "\n", "# Compute loss and gradients, update parameters.", "\n", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_S", ")", "\n", "end_points_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_T", ")", "\n", "end_points_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", "\n", "", "loss", ",", "end_points_S", ",", "_", "=", "criterion", "(", "end_points_S", ",", "end_points_T", ",", "DATASET_CONFIG", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "for", "key", "in", "end_points_S", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "stat_dict", "[", "key", "]", "+=", "end_points_S", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "batch_interval", "=", "10", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "batch_interval", "==", "0", ":", "\n", "            ", "log_string", "(", "' ---- batch: %03d ----'", "%", "(", "batch_idx", "+", "1", ")", ")", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "log_string", "(", "'mean %s: %f'", "%", "(", "key", ",", "stat_dict", "[", "key", "]", "/", "batch_interval", ")", ")", "\n", "stat_dict", "[", "key", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR.evaluate_one_epoch": [[304, 354], ["ap_helper.APCalculator", "ap_helper.APCalculator", "net.eval", "enumerate", "print", "ap_helper.APCalculator.compute_metrics", "print", "ap_helper.APCalculator.compute_metrics", "criterion", "ap_helper.parse_predictions", "ap_helper.parse_groundtruths", "ap_helper.APCalculator.step", "ap_helper.parse_predictions", "ap_helper.parse_groundtruths", "ap_helper.APCalculator.step", "train_Votenet_BR.log_string", "train_Votenet_BR.log_string", "zip", "zip", "print", "batch_data_label_S[].to", "batch_data_label_T[].to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "net", "open().write", "itertools.cycle", "itertools.cycle", "open", "os.path.join"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.compute_metrics", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.compute_metrics", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_groundtruths", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_groundtruths", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string"], ["", "", "", "", "def", "evaluate_one_epoch", "(", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "ap_calculator_S", "=", "APCalculator", "(", "ap_iou_thresh", "=", "FLAGS", ".", "ap_iou_thresh", ",", "\n", "class2type_map", "=", "DATASET_CONFIG", ".", "class2type", ")", "\n", "ap_calculator_T", "=", "APCalculator", "(", "ap_iou_thresh", "=", "FLAGS", ".", "ap_iou_thresh", ",", "\n", "class2type_map", "=", "DATASET_CONFIG", ".", "class2type", ")", "\n", "net", ".", "eval", "(", ")", "# set model to eval mode (for bn and dp)", "\n", "for", "batch_idx", ",", "(", "batch_data_label_S", ",", "batch_data_label_T", ")", "in", "enumerate", "(", "zip", "(", "cycle", "(", "TEST_DATALOADER_S", ")", ",", "TEST_DATALOADER_T", ")", "if", "TEST_cycle_S", "else", "zip", "(", "TEST_DATALOADER_S", ",", "cycle", "(", "TEST_DATALOADER_T", ")", ")", ")", ":", "\n", "        ", "if", "batch_idx", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Eval batch: %d'", "%", "(", "batch_idx", ")", ")", "\n", "", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "batch_data_label_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "batch_data_label_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "\n", "# Forward pass", "\n", "", "inputs_S", "=", "{", "'point_clouds'", ":", "batch_data_label_S", "[", "'point_clouds'", "]", "}", "\n", "inputs_T", "=", "{", "'point_clouds'", ":", "batch_data_label_T", "[", "'point_clouds'", "]", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "end_points_S", "=", "net", "(", "inputs_S", ")", "\n", "end_points_T", "=", "net", "(", "inputs_T", ")", "\n", "\n", "# Compute loss", "\n", "", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_S", ")", "\n", "end_points_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_T", ")", "\n", "end_points_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", "\n", "", "loss", ",", "end_points_S", ",", "end_points_T", "=", "criterion", "(", "end_points_S", ",", "end_points_T", ",", "DATASET_CONFIG", ")", "\n", "\n", "batch_pred_map_cls_S", "=", "parse_predictions", "(", "end_points_S", ",", "CONFIG_DICT", ")", "\n", "batch_gt_map_cls_S", "=", "parse_groundtruths", "(", "end_points_S", ",", "CONFIG_DICT", ")", "\n", "ap_calculator_S", ".", "step", "(", "batch_pred_map_cls_S", ",", "batch_gt_map_cls_S", ")", "\n", "batch_pred_map_cls_T", "=", "parse_predictions", "(", "end_points_T", ",", "CONFIG_DICT", ")", "\n", "batch_gt_map_cls_T", "=", "parse_groundtruths", "(", "end_points_T", ",", "CONFIG_DICT", ")", "\n", "ap_calculator_T", ".", "step", "(", "batch_pred_map_cls_T", ",", "batch_gt_map_cls_T", ")", "\n", "\n", "\n", "# Evaluate average precision", "\n", "", "print", "(", "\"================= Source =================\"", ")", "\n", "metrics_dict_S", "=", "ap_calculator_S", ".", "compute_metrics", "(", ")", "\n", "for", "key", "in", "metrics_dict_S", ":", "\n", "        ", "log_string", "(", "'eval %s: %f'", "%", "(", "key", ",", "metrics_dict_S", "[", "key", "]", ")", ")", "\n", "", "print", "(", "\"================= Target =================\"", ")", "\n", "metrics_dict_T", "=", "ap_calculator_T", ".", "compute_metrics", "(", ")", "\n", "for", "key", "in", "metrics_dict_T", ":", "\n", "        ", "log_string", "(", "'eval %s: %f'", "%", "(", "key", ",", "metrics_dict_T", "[", "key", "]", ")", ")", "\n", "if", "'mAP'", "in", "key", ":", "\n", "            ", "open", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'Eval_mAP.txt'", ")", ",", "'a'", ")", ".", "write", "(", "'eval %s: %f%%\\n'", "%", "(", "key", ",", "metrics_dict_T", "[", "key", "]", "*", "100", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_BR.train": [[356, 381], ["open().write", "range", "train_Votenet_BR.log_string", "train_Votenet_BR.log_string", "train_Votenet_BR.log_string", "train_Votenet_BR.log_string", "numpy.random.seed", "train_Votenet_BR.train_one_epoch", "torch.save", "torch.save", "torch.save", "open", "time.asctime", "str", "train_Votenet_BR.evaluate_one_epoch", "optimizer.state_dict", "net.module.state_dict", "os.path.join", "os.path.join", "train_Votenet_BR.get_current_lr", "bnm_scheduler.lmbd", "datetime.datetime.now", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.train_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.evaluate_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.get_current_lr", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "", "", "def", "train", "(", "start_epoch", ")", ":", "\n", "    ", "global", "EPOCH_CNT", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'Eval_mAP.txt'", ")", ",", "'a'", ")", ".", "write", "(", "'\\nStart at %s.\\n'", "%", "(", "time", ".", "asctime", "(", ")", ")", ")", "\n", "min_loss", "=", "1e10", "\n", "loss", "=", "0", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "MAX_EPOCH", ")", ":", "\n", "        ", "EPOCH_CNT", "=", "epoch", "\n", "log_string", "(", "'**** EPOCH %03d ****'", "%", "(", "epoch", ")", ")", "\n", "log_string", "(", "'Current learning rate: %f'", "%", "(", "get_current_lr", "(", "epoch", ")", ")", ")", "\n", "log_string", "(", "'Current BN decay momentum: %f'", "%", "(", "bnm_scheduler", ".", "lmbd", "(", "bnm_scheduler", ".", "last_epoch", ")", ")", ")", "\n", "log_string", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "np", ".", "random", ".", "seed", "(", ")", "\n", "\n", "train_one_epoch", "(", ")", "\n", "if", "EPOCH_CNT", "==", "0", "or", "EPOCH_CNT", "%", "10", "==", "9", ":", "# Eval every 10 epochs", "\n", "            ", "evaluate_one_epoch", "(", ")", "\n", "# Save checkpoint", "\n", "", "save_dict", "=", "{", "'epoch'", ":", "epoch", "+", "1", ",", "# after training one epoch, the start_epoch should be epoch+1", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", "\n", "}", "\n", "try", ":", "# with nn.DataParallel() the net is added as a submodule of DataParallel", "\n", "            ", "save_dict", "[", "'model_state_dict'", "]", "=", "net", ".", "module", ".", "state_dict", "(", ")", "\n", "", "except", ":", "\n", "            ", "save_dict", "[", "'model_state_dict'", "]", "=", "net", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'train_BR.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string": [[102, 106], ["LOG_FOUT.write", "LOG_FOUT.flush", "print"], "function", ["None"], ["def", "log_string", "(", "out_str", ")", ":", "\n", "    ", "LOG_FOUT", ".", "write", "(", "out_str", "+", "'\\n'", ")", "\n", "LOG_FOUT", ".", "flush", "(", ")", "\n", "print", "(", "out_str", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "DUMP_DIR", ")", ":", "os", ".", "mkdir", "(", "DUMP_DIR", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.my_worker_init_fn": [[109, 111], ["numpy.random.seed", "numpy.random.get_state"], "function", ["None"], ["def", "my_worker_init_fn", "(", "worker_id", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.get_current_lr": [[191, 197], ["enumerate"], "function", ["None"], ["def", "get_current_lr", "(", "epoch", ")", ":", "\n", "    ", "lr", "=", "BASE_LEARNING_RATE", "\n", "for", "i", ",", "lr_decay_epoch", "in", "enumerate", "(", "LR_DECAY_STEPS", ")", ":", "\n", "        ", "if", "epoch", ">=", "lr_decay_epoch", ":", "\n", "            ", "lr", "*=", "LR_DECAY_RATES", "[", "i", "]", "\n", "", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.adjust_learning_rate": [[198, 202], ["train_Votenet_FSB.get_current_lr"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.get_current_lr"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "lr", "=", "get_current_lr", "(", "epoch", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.train_one_epoch": [[211, 245], ["train_Votenet_FSB.adjust_learning_rate", "bnm_scheduler.step", "net.train", "enumerate", "optimizer.zero_grad", "net", "criterion", "loss.backward", "optimizer.step", "batch_data_label[].to", "train_Votenet_FSB.log_string", "sorted", "end_points[].item", "stat_dict.keys", "train_Votenet_FSB.log_string"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.adjust_learning_rate", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.train", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string"], ["def", "train_one_epoch", "(", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "adjust_learning_rate", "(", "optimizer", ",", "EPOCH_CNT", ")", "\n", "bnm_scheduler", ".", "step", "(", ")", "# decay BN momentum", "\n", "net", ".", "train", "(", ")", "# set model to training mode", "\n", "for", "batch_idx", ",", "batch_data_label", "in", "enumerate", "(", "TRAIN_DATALOADER", ")", ":", "\n", "        ", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "batch_data_label", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "\n", "# Forward pass", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "inputs", "=", "{", "'point_clouds'", ":", "batch_data_label", "[", "'point_clouds'", "]", "}", "\n", "end_points", "=", "net", "(", "inputs", ")", "\n", "\n", "# Compute loss and gradients, update parameters.", "\n", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points", ")", "\n", "end_points", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", "\n", "", "loss", ",", "end_points", "=", "criterion", "(", "end_points", ",", "DATASET_CONFIG", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "for", "key", "in", "end_points", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "batch_interval", "=", "20", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "batch_interval", "==", "0", ":", "\n", "            ", "log_string", "(", "' ---- batch: %03d ----'", "%", "(", "batch_idx", "+", "1", ")", ")", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "log_string", "(", "'mean %s: %f'", "%", "(", "key", ",", "stat_dict", "[", "key", "]", "/", "batch_interval", ")", ")", "\n", "stat_dict", "[", "key", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.evaluate_one_epoch": [[246, 293], ["ap_helper.APCalculator", "net.eval", "enumerate", "sorted", "ap_helper.APCalculator.compute_metrics", "criterion", "ap_helper.parse_predictions", "ap_helper.parse_groundtruths", "ap_helper.APCalculator.step", "stat_dict.keys", "train_Votenet_FSB.log_string", "train_Votenet_FSB.log_string", "float", "print", "batch_data_label[].to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "net", "MODEL.dump_results", "end_points[].item", "float"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.compute_metrics", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_groundtruths", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.dump_results"], ["", "", "", "", "def", "evaluate_one_epoch", "(", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "ap_calculator", "=", "APCalculator", "(", "ap_iou_thresh", "=", "FLAGS", ".", "ap_iou_thresh", ",", "\n", "class2type_map", "=", "DATASET_CONFIG", ".", "class2type", ")", "\n", "net", ".", "eval", "(", ")", "# set model to eval mode (for bn and dp)", "\n", "for", "batch_idx", ",", "batch_data_label", "in", "enumerate", "(", "TEST_DATALOADER", ")", ":", "\n", "        ", "if", "batch_idx", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'Eval batch: %d'", "%", "(", "batch_idx", ")", ")", "\n", "", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "batch_data_label", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", ".", "to", "(", "device", ")", "\n", "\n", "# Forward pass", "\n", "", "inputs", "=", "{", "'point_clouds'", ":", "batch_data_label", "[", "'point_clouds'", "]", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "end_points", "=", "net", "(", "inputs", ")", "\n", "\n", "# Compute loss", "\n", "", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points", ")", "\n", "end_points", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", "\n", "", "loss", ",", "end_points", "=", "criterion", "(", "end_points", ",", "DATASET_CONFIG", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "for", "key", "in", "end_points", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "batch_pred_map_cls", "=", "parse_predictions", "(", "end_points", ",", "CONFIG_DICT", ")", "\n", "batch_gt_map_cls", "=", "parse_groundtruths", "(", "end_points", ",", "CONFIG_DICT", ")", "\n", "ap_calculator", ".", "step", "(", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", "\n", "\n", "# Dump evaluation results for visualization", "\n", "if", "FLAGS", ".", "dump_results", "and", "batch_idx", "==", "0", "and", "EPOCH_CNT", "%", "10", "==", "0", ":", "\n", "            ", "MODEL", ".", "dump_results", "(", "end_points", ",", "DUMP_DIR", ",", "DATASET_CONFIG", ")", "\n", "\n", "# Log statistics", "\n", "", "", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "log_string", "(", "'eval mean %s: %f'", "%", "(", "key", ",", "stat_dict", "[", "key", "]", "/", "(", "float", "(", "batch_idx", "+", "1", ")", ")", ")", ")", "\n", "\n", "# Evaluate average precision", "\n", "", "metrics_dict", "=", "ap_calculator", ".", "compute_metrics", "(", ")", "\n", "for", "key", "in", "metrics_dict", ":", "\n", "        ", "log_string", "(", "'eval %s: %f'", "%", "(", "key", ",", "metrics_dict", "[", "key", "]", ")", ")", "\n", "\n", "", "mean_loss", "=", "stat_dict", "[", "'loss'", "]", "/", "float", "(", "batch_idx", "+", "1", ")", "\n", "return", "mean_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.train": [[295, 319], ["range", "train_Votenet_FSB.log_string", "train_Votenet_FSB.log_string", "train_Votenet_FSB.log_string", "train_Votenet_FSB.log_string", "numpy.random.seed", "train_Votenet_FSB.train_one_epoch", "torch.save", "torch.save", "torch.save", "str", "train_Votenet_FSB.evaluate_one_epoch", "optimizer.state_dict", "net.module.state_dict", "os.path.join", "train_Votenet_FSB.get_current_lr", "bnm_scheduler.lmbd", "datetime.datetime.now", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.train_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.evaluate_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.get_current_lr", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "def", "train", "(", "start_epoch", ")", ":", "\n", "    ", "global", "EPOCH_CNT", "\n", "min_loss", "=", "1e10", "\n", "loss", "=", "0", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "MAX_EPOCH", ")", ":", "\n", "        ", "EPOCH_CNT", "=", "epoch", "\n", "log_string", "(", "'**** EPOCH %03d ****'", "%", "(", "epoch", ")", ")", "\n", "log_string", "(", "'Current learning rate: %f'", "%", "(", "get_current_lr", "(", "epoch", ")", ")", ")", "\n", "log_string", "(", "'Current BN decay momentum: %f'", "%", "(", "bnm_scheduler", ".", "lmbd", "(", "bnm_scheduler", ".", "last_epoch", ")", ")", ")", "\n", "log_string", "(", "str", "(", "datetime", ".", "now", "(", ")", ")", ")", "\n", "np", ".", "random", ".", "seed", "(", ")", "\n", "train_one_epoch", "(", ")", "\n", "if", "EPOCH_CNT", "==", "0", "or", "EPOCH_CNT", "%", "10", "==", "9", ":", "# Eval every 10 epochs", "\n", "            ", "loss", "=", "evaluate_one_epoch", "(", ")", "\n", "# Save checkpoint", "\n", "", "save_dict", "=", "{", "'epoch'", ":", "epoch", "+", "1", ",", "# after training one epoch, the start_epoch should be epoch+1", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss'", ":", "loss", ",", "\n", "}", "\n", "try", ":", "# with nn.DataParallel() the net is added as a submodule of DataParallel", "\n", "            ", "save_dict", "[", "'model_state_dict'", "]", "=", "net", ".", "module", ".", "state_dict", "(", ")", "\n", "", "except", ":", "\n", "            ", "save_dict", "[", "'model_state_dict'", "]", "=", "net", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "save_dict", ",", "os", ".", "path", ".", "join", "(", "LOG_DIR", ",", "'checkpoint.tar'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.nms.nms_2d": [[15, 45], ["numpy.argsort", "pick.append", "range", "numpy.delete", "max", "max", "min", "min", "print", "suppress.append"], "function", ["None"], ["y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "x2", "=", "boxes", "[", ":", ",", "2", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "score", "=", "boxes", "[", ":", ",", "4", "]", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "\n", "I", "=", "np", ".", "argsort", "(", "score", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "suppress", "=", "[", "last", "-", "1", "]", "\n", "for", "pos", "in", "range", "(", "last", "-", "1", ")", ":", "\n", "            ", "j", "=", "I", "[", "pos", "]", "\n", "xx1", "=", "max", "(", "x1", "[", "i", "]", ",", "x1", "[", "j", "]", ")", "\n", "yy1", "=", "max", "(", "y1", "[", "i", "]", ",", "y1", "[", "j", "]", ")", "\n", "xx2", "=", "min", "(", "x2", "[", "i", "]", ",", "x2", "[", "j", "]", ")", "\n", "yy2", "=", "min", "(", "y2", "[", "i", "]", ",", "y2", "[", "j", "]", ")", "\n", "w", "=", "xx2", "-", "xx1", "\n", "h", "=", "yy2", "-", "yy1", "\n", "if", "(", "w", ">", "0", "and", "h", ">", "0", ")", ":", "\n", "                ", "o", "=", "w", "*", "h", "/", "area", "[", "j", "]", "\n", "print", "(", "'Overlap is'", ",", "o", ")", "\n", "if", "(", "o", ">", "overlap_threshold", ")", ":", "\n", "                    ", "suppress", ".", "append", "(", "pos", ")", "\n", "", "", "", "I", "=", "np", ".", "delete", "(", "I", ",", "suppress", ")", "\n", "", "return", "pick", "\n", "\n", "", "def", "nms_2d_faster", "(", "boxes", ",", "overlap_threshold", ",", "old_type", "=", "False", ")", ":", "\n", "    ", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.nms.nms_2d_faster": [[47, 79], ["numpy.argsort", "pick.append", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.delete", "numpy.concatenate", "numpy.where"], "function", ["None"], ["x2", "=", "boxes", "[", ":", ",", "2", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "score", "=", "boxes", "[", ":", ",", "4", "]", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "\n", "\n", "I", "=", "np", ".", "argsort", "(", "score", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "\n", "w", "=", "np", ".", "maximum", "(", "0", ",", "xx2", "-", "xx1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0", ",", "yy2", "-", "yy1", ")", "\n", "\n", "if", "old_type", ":", "\n", "            ", "o", "=", "(", "w", "*", "h", ")", "/", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "inter", "=", "w", "*", "h", "\n", "o", "=", "inter", "/", "(", "area", "[", "i", "]", "+", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "-", "inter", ")", "\n", "\n", "", "I", "=", "np", ".", "delete", "(", "I", ",", "np", ".", "concatenate", "(", "(", "[", "last", "-", "1", "]", ",", "np", ".", "where", "(", "o", ">", "overlap_threshold", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "\n", "", "def", "nms_3d_faster", "(", "boxes", ",", "overlap_threshold", ",", "old_type", "=", "False", ")", ":", "\n", "    ", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.nms.nms_3d_faster": [[81, 118], ["numpy.argsort", "pick.append", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.delete", "numpy.concatenate", "numpy.where"], "function", ["None"], ["x2", "=", "boxes", "[", ":", ",", "3", "]", "\n", "y2", "=", "boxes", "[", ":", ",", "4", "]", "\n", "z2", "=", "boxes", "[", ":", ",", "5", "]", "\n", "score", "=", "boxes", "[", ":", ",", "6", "]", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "*", "(", "z2", "-", "z1", ")", "\n", "\n", "I", "=", "np", ".", "argsort", "(", "score", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz1", "=", "np", ".", "maximum", "(", "z1", "[", "i", "]", ",", "z1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz2", "=", "np", ".", "minimum", "(", "z2", "[", "i", "]", ",", "z2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "\n", "l", "=", "np", ".", "maximum", "(", "0", ",", "xx2", "-", "xx1", ")", "\n", "w", "=", "np", ".", "maximum", "(", "0", ",", "yy2", "-", "yy1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0", ",", "zz2", "-", "zz1", ")", "\n", "\n", "if", "old_type", ":", "\n", "            ", "o", "=", "(", "l", "*", "w", "*", "h", ")", "/", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "inter", "=", "l", "*", "w", "*", "h", "\n", "o", "=", "inter", "/", "(", "area", "[", "i", "]", "+", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "-", "inter", ")", "\n", "\n", "", "I", "=", "np", ".", "delete", "(", "I", ",", "np", ".", "concatenate", "(", "(", "[", "last", "-", "1", "]", ",", "np", ".", "where", "(", "o", ">", "overlap_threshold", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "\n", "", "def", "nms_3d_faster_samecls", "(", "boxes", ",", "overlap_threshold", ",", "old_type", "=", "False", ")", ":", "\n", "    ", "x1", "=", "boxes", "[", ":", ",", "0", "]", "\n", "y1", "=", "boxes", "[", ":", ",", "1", "]", "\n", "z1", "=", "boxes", "[", ":", ",", "2", "]", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.nms.nms_3d_faster_samecls": [[120, 161], ["numpy.argsort", "pick.append", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "numpy.maximum", "numpy.delete", "numpy.concatenate", "numpy.where"], "function", ["None"], ["y2", "=", "boxes", "[", ":", ",", "4", "]", "\n", "z2", "=", "boxes", "[", ":", ",", "5", "]", "\n", "score", "=", "boxes", "[", ":", ",", "6", "]", "\n", "cls", "=", "boxes", "[", ":", ",", "7", "]", "\n", "area", "=", "(", "x2", "-", "x1", ")", "*", "(", "y2", "-", "y1", ")", "*", "(", "z2", "-", "z1", ")", "\n", "\n", "I", "=", "np", ".", "argsort", "(", "score", ")", "\n", "pick", "=", "[", "]", "\n", "while", "(", "I", ".", "size", "!=", "0", ")", ":", "\n", "        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy1", "=", "np", ".", "maximum", "(", "y1", "[", "i", "]", ",", "y1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz1", "=", "np", ".", "maximum", "(", "z1", "[", "i", "]", ",", "z1", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "yy2", "=", "np", ".", "minimum", "(", "y2", "[", "i", "]", ",", "y2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "zz2", "=", "np", ".", "minimum", "(", "z2", "[", "i", "]", ",", "z2", "[", "I", "[", ":", "last", "-", "1", "]", "]", ")", "\n", "cls1", "=", "cls", "[", "i", "]", "\n", "cls2", "=", "cls", "[", "I", "[", ":", "last", "-", "1", "]", "]", "\n", "\n", "l", "=", "np", ".", "maximum", "(", "0", ",", "xx2", "-", "xx1", ")", "\n", "w", "=", "np", ".", "maximum", "(", "0", ",", "yy2", "-", "yy1", ")", "\n", "h", "=", "np", ".", "maximum", "(", "0", ",", "zz2", "-", "zz1", ")", "\n", "\n", "if", "old_type", ":", "\n", "            ", "o", "=", "(", "l", "*", "w", "*", "h", ")", "/", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "inter", "=", "l", "*", "w", "*", "h", "\n", "o", "=", "inter", "/", "(", "area", "[", "i", "]", "+", "area", "[", "I", "[", ":", "last", "-", "1", "]", "]", "-", "inter", ")", "\n", "", "o", "=", "o", "*", "(", "cls1", "==", "cls2", ")", "\n", "\n", "I", "=", "np", ".", "delete", "(", "I", ",", "np", ".", "concatenate", "(", "(", "[", "last", "-", "1", "]", ",", "np", ".", "where", "(", "o", ">", "overlap_threshold", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "\n", "\n", "", "def", "nms_crnr_dist", "(", "boxes", ",", "conf", ",", "overlap_threshold", ")", ":", "\n", "\n", "    ", "I", "=", "np", ".", "argsort", "(", "conf", ")", "\n", "pick", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.nms.nms_crnr_dist": [[163, 178], ["numpy.argsort", "pick.append", "numpy.delete", "scores.append", "numpy.concatenate", "pc_util.bbox_corner_dist_measure", "numpy.where", "numpy.array"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.bbox_corner_dist_measure"], ["        ", "last", "=", "I", ".", "size", "\n", "i", "=", "I", "[", "-", "1", "]", "\n", "pick", ".", "append", "(", "i", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "for", "ind", "in", "I", "[", ":", "-", "1", "]", ":", "\n", "            ", "scores", ".", "append", "(", "bbox_corner_dist_measure", "(", "boxes", "[", "i", ",", ":", "]", ",", "boxes", "[", "ind", ",", ":", "]", ")", ")", "\n", "\n", "", "I", "=", "np", ".", "delete", "(", "I", ",", "np", ".", "concatenate", "(", "(", "[", "last", "-", "1", "]", ",", "np", ".", "where", "(", "np", ".", "array", "(", "scores", ")", ">", "overlap_threshold", ")", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "return", "pick", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "a", "=", "np", ".", "random", ".", "random", "(", "(", "100", ",", "5", ")", ")", "\n", "print", "(", "nms_2d", "(", "a", ",", "0.9", ")", ")", "\n", "print", "(", "nms_2d_faster", "(", "a", ",", "0.9", ")", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.random_sampling": [[42, 51], ["numpy.random.choice"], "function", ["None"], ["        ", "return", "pc", "[", "choices", "]", ",", "choices", "\n", "", "else", ":", "\n", "        ", "return", "pc", "[", "choices", "]", "\n", "\n", "# ----------------------------------------", "\n", "# Point Cloud/Volume Conversions", "\n", "# ----------------------------------------", "\n", "\n", "", "", "def", "point_cloud_to_volume_batch", "(", "point_clouds", ",", "vsize", "=", "12", ",", "radius", "=", "1.0", ",", "flatten", "=", "True", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.point_cloud_to_volume_batch": [[57, 72], ["range", "pc_util.point_cloud_to_volume", "numpy.vstack", "numpy.concatenate", "numpy.squeeze", "vol_list.append", "vol_list.append", "point_cloud_to_volume.flatten", "numpy.expand_dims", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.point_cloud_to_volume"], ["if", "flatten", ":", "\n", "            ", "vol_list", ".", "append", "(", "vol", ".", "flatten", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "vol_list", ".", "append", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "vol", ",", "-", "1", ")", ",", "0", ")", ")", "\n", "", "", "if", "flatten", ":", "\n", "        ", "return", "np", ".", "vstack", "(", "vol_list", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "vol_list", ",", "0", ")", "\n", "\n", "\n", "", "", "def", "point_cloud_to_volume", "(", "points", ",", "vsize", ",", "radius", "=", "1.0", ")", ":", "\n", "    ", "\"\"\" input is Nx3 points.\n        output is vsize*vsize*vsize\n        assumes points are in range [-radius, radius]\n    \"\"\"", "\n", "vol", "=", "np", ".", "zeros", "(", "(", "vsize", ",", "vsize", ",", "vsize", ")", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.point_cloud_to_volume": [[74, 85], ["numpy.zeros", "locations.astype.astype", "float"], "function", ["None"], ["locations", "=", "(", "points", "+", "radius", ")", "/", "voxel", "\n", "locations", "=", "locations", ".", "astype", "(", "int", ")", "\n", "vol", "[", "locations", "[", ":", ",", "0", "]", ",", "locations", "[", ":", ",", "1", "]", ",", "locations", "[", ":", ",", "2", "]", "]", "=", "1.0", "\n", "return", "vol", "\n", "\n", "", "def", "volume_to_point_cloud", "(", "vol", ")", ":", "\n", "    ", "\"\"\" vol is occupancy grid (value = 0 or 1) of size vsize*vsize*vsize\n        return Nx3 numpy array.\n    \"\"\"", "\n", "vsize", "=", "vol", ".", "shape", "[", "0", "]", "\n", "assert", "(", "vol", ".", "shape", "[", "1", "]", "==", "vsize", "and", "vol", ".", "shape", "[", "1", "]", "==", "vsize", ")", "\n", "points", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.volume_to_point_cloud": [[87, 103], ["range", "numpy.vstack", "range", "len", "numpy.zeros", "range", "np.vstack.append", "numpy.array"], "function", ["None"], ["        ", "for", "b", "in", "range", "(", "vsize", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "vsize", ")", ":", "\n", "                ", "if", "vol", "[", "a", ",", "b", ",", "c", "]", "==", "1", ":", "\n", "                    ", "points", ".", "append", "(", "np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", ")", "\n", "", "", "", "", "if", "len", "(", "points", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "0", ",", "3", ")", ")", "\n", "", "points", "=", "np", ".", "vstack", "(", "points", ")", "\n", "return", "points", "\n", "\n", "", "def", "point_cloud_to_volume_v2_batch", "(", "point_clouds", ",", "vsize", "=", "12", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" Input is BxNx3 a batch of point cloud\n        Output is BxVxVxVxnum_samplex3\n        Added on Feb 19\n    \"\"\"", "\n", "vol_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "point_clouds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "vol", "=", "point_cloud_to_volume_v2", "(", "point_clouds", "[", "b", ",", ":", ",", ":", "]", ",", "vsize", ",", "radius", ",", "num_sample", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.point_cloud_to_volume_v2_batch": [[105, 115], ["range", "numpy.concatenate", "pc_util.point_cloud_to_volume_v2", "vol_list.append", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.point_cloud_to_volume_v2"], ["", "return", "np", ".", "concatenate", "(", "vol_list", ",", "0", ")", "\n", "\n", "", "def", "point_cloud_to_volume_v2", "(", "points", ",", "vsize", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" input is Nx3 points\n        output is vsize*vsize*vsize*num_sample*3\n        assumes points are in range [-radius, radius]\n        samples num_sample points in each voxel, if there are less than\n        num_sample points, replicate the points\n        Added on Feb 19\n    \"\"\"", "\n", "vol", "=", "np", ".", "zeros", "(", "(", "vsize", ",", "vsize", ",", "vsize", ",", "num_sample", ",", "3", ")", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.point_cloud_to_volume_v2": [[117, 154], ["numpy.zeros", "locations.astype.astype", "range", "range", "float", "tuple", "loc2pc[].append", "range", "range", "numpy.zeros", "numpy.vstack", "pc_util.random_sampling", "numpy.lib.pad", "numpy.array"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.random_sampling"], ["locations", "=", "(", "points", "+", "radius", ")", "/", "voxel", "\n", "locations", "=", "locations", ".", "astype", "(", "int", ")", "\n", "loc2pc", "=", "{", "}", "\n", "for", "n", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "loc", "=", "tuple", "(", "locations", "[", "n", ",", ":", "]", ")", "\n", "if", "loc", "not", "in", "loc2pc", ":", "\n", "            ", "loc2pc", "[", "loc", "]", "=", "[", "]", "\n", "", "loc2pc", "[", "loc", "]", ".", "append", "(", "points", "[", "n", ",", ":", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "vsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "vsize", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "vsize", ")", ":", "\n", "                ", "if", "(", "i", ",", "j", ",", "k", ")", "not", "in", "loc2pc", ":", "\n", "                    ", "vol", "[", "i", ",", "j", ",", "k", ",", ":", ",", ":", "]", "=", "np", ".", "zeros", "(", "(", "num_sample", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                    ", "pc", "=", "loc2pc", "[", "(", "i", ",", "j", ",", "k", ")", "]", "# a list of (3,) arrays", "\n", "pc", "=", "np", ".", "vstack", "(", "pc", ")", "# kx3", "\n", "# Sample/pad to num_sample points", "\n", "if", "pc", ".", "shape", "[", "0", "]", ">", "num_sample", ":", "\n", "                        ", "pc", "=", "random_sampling", "(", "pc", ",", "num_sample", ",", "False", ")", "\n", "", "elif", "pc", ".", "shape", "[", "0", "]", "<", "num_sample", ":", "\n", "                        ", "pc", "=", "np", ".", "lib", ".", "pad", "(", "pc", ",", "(", "(", "0", ",", "num_sample", "-", "pc", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "# Normalize", "\n", "", "pc_center", "=", "(", "np", ".", "array", "(", "[", "i", ",", "j", ",", "k", "]", ")", "+", "0.5", ")", "*", "voxel", "-", "radius", "\n", "pc", "=", "(", "pc", "-", "pc_center", ")", "/", "voxel", "# shift and scale", "\n", "vol", "[", "i", ",", "j", ",", "k", ",", ":", ",", ":", "]", "=", "pc", "\n", "", "", "", "", "return", "vol", "\n", "\n", "", "def", "point_cloud_to_image_batch", "(", "point_clouds", ",", "imgsize", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" Input is BxNx3 a batch of point cloud\n        Output is BxIxIxnum_samplex3\n        Added on Feb 19\n    \"\"\"", "\n", "img_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "point_clouds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "img", "=", "point_cloud_to_image", "(", "point_clouds", "[", "b", ",", ":", ",", ":", "]", ",", "imgsize", ",", "radius", ",", "num_sample", ")", "\n", "img_list", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "img_list", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.point_cloud_to_image_batch": [[156, 166], ["range", "numpy.concatenate", "pc_util.point_cloud_to_image", "img_list.append", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.point_cloud_to_image"], ["\n", "", "def", "point_cloud_to_image", "(", "points", ",", "imgsize", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" input is Nx3 points\n        output is imgsize*imgsize*num_sample*3\n        assumes points are in range [-radius, radius]\n        samples num_sample points in each pixel, if there are less than\n        num_sample points, replicate the points\n        Added on Feb 19\n    \"\"\"", "\n", "img", "=", "np", ".", "zeros", "(", "(", "imgsize", ",", "imgsize", ",", "num_sample", ",", "3", ")", ")", "\n", "pixel", "=", "2", "*", "radius", "/", "float", "(", "imgsize", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.point_cloud_to_image": [[168, 201], ["numpy.zeros", "locations.astype.astype", "range", "range", "float", "tuple", "loc2pc[].append", "range", "numpy.zeros", "numpy.vstack", "pc_util.random_sampling", "numpy.lib.pad", "numpy.array"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.random_sampling"], ["locations", "=", "locations", ".", "astype", "(", "int", ")", "\n", "loc2pc", "=", "{", "}", "\n", "for", "n", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "loc", "=", "tuple", "(", "locations", "[", "n", ",", ":", "]", ")", "\n", "if", "loc", "not", "in", "loc2pc", ":", "\n", "            ", "loc2pc", "[", "loc", "]", "=", "[", "]", "\n", "", "loc2pc", "[", "loc", "]", ".", "append", "(", "points", "[", "n", ",", ":", "]", ")", "\n", "", "for", "i", "in", "range", "(", "imgsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "imgsize", ")", ":", "\n", "            ", "if", "(", "i", ",", "j", ")", "not", "in", "loc2pc", ":", "\n", "                ", "img", "[", "i", ",", "j", ",", ":", ",", ":", "]", "=", "np", ".", "zeros", "(", "(", "num_sample", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                ", "pc", "=", "loc2pc", "[", "(", "i", ",", "j", ")", "]", "\n", "pc", "=", "np", ".", "vstack", "(", "pc", ")", "\n", "if", "pc", ".", "shape", "[", "0", "]", ">", "num_sample", ":", "\n", "                    ", "pc", "=", "random_sampling", "(", "pc", ",", "num_sample", ",", "False", ")", "\n", "", "elif", "pc", ".", "shape", "[", "0", "]", "<", "num_sample", ":", "\n", "                    ", "pc", "=", "np", ".", "lib", ".", "pad", "(", "pc", ",", "(", "(", "0", ",", "num_sample", "-", "pc", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "", "pc_center", "=", "(", "np", ".", "array", "(", "[", "i", ",", "j", "]", ")", "+", "0.5", ")", "*", "pixel", "-", "radius", "\n", "pc", "[", ":", ",", "0", ":", "2", "]", "=", "(", "pc", "[", ":", ",", "0", ":", "2", "]", "-", "pc_center", ")", "/", "pixel", "\n", "img", "[", "i", ",", "j", ",", ":", ",", ":", "]", "=", "pc", "\n", "", "", "", "return", "img", "\n", "# ----------------------------------------", "\n", "# Point cloud IO", "\n", "# ----------------------------------------", "\n", "\n", "", "def", "read_ply", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ point cloud from filename PLY file \"\"\"", "\n", "plydata", "=", "PlyData", ".", "read", "(", "filename", ")", "\n", "pc", "=", "plydata", "[", "'vertex'", "]", ".", "data", "\n", "pc_array", "=", "np", ".", "array", "(", "[", "[", "x", ",", "y", ",", "z", "]", "for", "x", ",", "y", ",", "z", "in", "pc", "]", ")", "\n", "return", "pc_array", "\n", "\n", "", "def", "write_ply", "(", "points", ",", "filename", ",", "text", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.read_ply": [[207, 213], ["PlyData.read", "numpy.array"], "function", ["None"], ["\n", "", "def", "write_ply_color", "(", "points", ",", "labels", ",", "filename", ",", "num_classes", "=", "None", ",", "colormap", "=", "pyplot", ".", "cm", ".", "jet", ")", ":", "\n", "    ", "\"\"\" Color (N,3) points with labels (N) within range 0 ~ num_classes-1 as OBJ file \"\"\"", "\n", "labels", "=", "labels", ".", "astype", "(", "int", ")", "\n", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "if", "num_classes", "is", "None", ":", "\n", "        ", "num_classes", "=", "np", ".", "max", "(", "labels", ")", "+", "1", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply": [[215, 221], ["numpy.array", "PlyElement.describe", "PlyData().write", "range", "PlyData"], "function", ["None"], ["        ", "assert", "(", "num_classes", ">", "np", ".", "max", "(", "labels", ")", ")", "\n", "\n", "", "vertex", "=", "[", "]", "\n", "#colors = [pyplot.cm.jet(i/float(num_classes)) for i in range(num_classes)]    ", "\n", "colors", "=", "[", "colormap", "(", "i", "/", "float", "(", "num_classes", ")", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "c", "=", "colors", "[", "labels", "[", "i", "]", "]", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply_color": [[223, 244], ["labels.astype.astype", "range", "numpy.array", "PlyElement.describe", "PlyData().write", "colormap", "np.array.append", "numpy.max", "numpy.max", "range", "int", "PlyData", "float"], "function", ["None"], ["vertex", ".", "append", "(", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ",", "c", "[", "0", "]", ",", "c", "[", "1", "]", ",", "c", "[", "2", "]", ")", ")", "\n", "", "vertex", "=", "np", ".", "array", "(", "vertex", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", ",", "(", "'red'", ",", "'u1'", ")", ",", "(", "'green'", ",", "'u1'", ")", ",", "(", "'blue'", ",", "'u1'", ")", "]", ")", "\n", "\n", "el", "=", "PlyElement", ".", "describe", "(", "vertex", ",", "'vertex'", ",", "comments", "=", "[", "'vertices'", "]", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "text", "=", "True", ")", ".", "write", "(", "filename", ")", "\n", "\n", "", "def", "write_ply_rgb", "(", "points", ",", "colors", ",", "out_filename", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "\"\"\" Color (N,3) points with RGB colors (N,3) within range [0,255] as OBJ file \"\"\"", "\n", "colors", "=", "colors", ".", "astype", "(", "int", ")", "\n", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "fout", "=", "open", "(", "out_filename", ",", "'w'", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "c", "=", "colors", "[", "i", ",", ":", "]", "\n", "fout", ".", "write", "(", "'v %f %f %f %d %d %d\\n'", "%", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ",", "c", "[", "0", "]", ",", "c", "[", "1", "]", ",", "c", "[", "2", "]", ")", ")", "\n", "", "fout", ".", "close", "(", ")", "\n", "\n", "# ----------------------------------------", "\n", "# Simple Point cloud and Volume Renderers", "\n", "# ----------------------------------------", "\n", "\n", "", "def", "pyplot_draw_point_cloud", "(", "points", ",", "output_filename", ")", ":", "\n", "    ", "\"\"\" points is a Nx3 numpy array \"\"\"", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply_rgb": [[246, 255], ["colors.astype.astype", "open", "range", "open.close", "open.write"], "function", ["None"], ["fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "scatter", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "'x'", ")", "\n", "ax", ".", "set_ylabel", "(", "'y'", ")", "\n", "ax", ".", "set_zlabel", "(", "'z'", ")", "\n", "#savefig(output_filename)", "\n", "\n", "", "def", "pyplot_draw_volume", "(", "vol", ",", "output_filename", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.pyplot_draw_point_cloud": [[261, 270], ["plt.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel"], "function", ["None"], ["# ----------------------------------------", "\n", "# Simple Point manipulations", "\n", "# ----------------------------------------", "\n", "", "def", "rotate_point_cloud", "(", "points", ",", "rotation_matrix", "=", "None", ")", ":", "\n", "    ", "\"\"\" Input: (n,3), Output: (n,3) \"\"\"", "\n", "# Rotate in-place around Z axis.", "\n", "if", "rotation_matrix", "is", "None", ":", "\n", "        ", "rotation_angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "sinval", ",", "cosval", "=", "np", ".", "sin", "(", "rotation_angle", ")", ",", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "sinval", ",", "0", "]", ",", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.pyplot_draw_volume": [[273, 279], ["pc_util.volume_to_point_cloud", "pc_util.pyplot_draw_point_cloud"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.volume_to_point_cloud", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.pyplot_draw_point_cloud"], ["", "ctr", "=", "points", ".", "mean", "(", "axis", "=", "0", ")", "\n", "rotated_data", "=", "np", ".", "dot", "(", "points", "-", "ctr", ",", "rotation_matrix", ")", "+", "ctr", "\n", "return", "rotated_data", ",", "rotation_matrix", "\n", "\n", "", "def", "rotate_pc_along_y", "(", "pc", ",", "rot_angle", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.rotate_point_cloud": [[284, 296], ["points.mean", "numpy.array", "numpy.dot", "numpy.sin", "numpy.cos", "numpy.random.uniform"], "function", ["None"], ["pc", "[", ":", ",", "[", "0", ",", "2", "]", "]", "=", "np", ".", "dot", "(", "pc", "[", ":", ",", "[", "0", ",", "2", "]", "]", ",", "np", ".", "transpose", "(", "rotmat", ")", ")", "\n", "return", "pc", "\n", "\n", "", "def", "roty", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the y-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "0", ",", "s", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "s", ",", "0", ",", "c", "]", "]", ")", "\n", "\n", "", "def", "roty_batch", "(", "t", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.rotate_pc_along_y": [[298, 307], ["numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "numpy.transpose"], "function", ["None"], ["\n", "input_shape", "=", "t", ".", "shape", "\n", "output", "=", "np", ".", "zeros", "(", "tuple", "(", "list", "(", "input_shape", ")", "+", "[", "3", ",", "3", "]", ")", ")", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "output", "[", "...", ",", "0", ",", "0", "]", "=", "c", "\n", "output", "[", "...", ",", "0", ",", "2", "]", "=", "s", "\n", "output", "[", "...", ",", "1", ",", "1", "]", "=", "1", "\n", "output", "[", "...", ",", "2", ",", "0", "]", "=", "-", "s", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.roty": [[309, 316], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["return", "output", "\n", "\n", "", "def", "rotz", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the z-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "-", "s", ",", "0", "]", ",", "\n", "[", "s", ",", "c", ",", "0", "]", ",", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.roty_batch": [[318, 333], ["numpy.zeros", "numpy.cos", "numpy.sin", "tuple", "list"], "function", ["None"], ["\n", "\n", "# ----------------------------------------", "\n", "# BBox", "\n", "# ----------------------------------------", "\n", "", "def", "bbox_corner_dist_measure", "(", "crnr1", ",", "crnr2", ")", ":", "\n", "    ", "\"\"\" compute distance between box corners to replace iou\n    Args:\n        crnr1, crnr2: Nx3 points of box corners in camera axis (y points down)\n        output is a scalar between 0 and 1        \n    \"\"\"", "\n", "\n", "dist", "=", "sys", ".", "maxsize", "\n", "for", "y", "in", "range", "(", "4", ")", ":", "\n", "        ", "rows", "=", "(", "[", "(", "x", "+", "y", ")", "%", "4", "for", "x", "in", "range", "(", "4", ")", "]", "+", "[", "4", "+", "(", "x", "+", "y", ")", "%", "4", "for", "x", "in", "range", "(", "4", ")", "]", ")", "\n", "d_", "=", "np", ".", "linalg", ".", "norm", "(", "crnr2", "[", "rows", ",", ":", "]", "-", "crnr1", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", "/", "8.0", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.rotz": [[335, 342], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["            ", "dist", "=", "d_", "\n", "\n", "", "", "u", "=", "sum", "(", "[", "np", ".", "linalg", ".", "norm", "(", "x", "[", "0", ",", ":", "]", "-", "x", "[", "6", ",", ":", "]", ")", "for", "x", "in", "[", "crnr1", ",", "crnr2", "]", "]", ")", "/", "2.0", "\n", "\n", "measure", "=", "max", "(", "1.0", "-", "dist", "/", "u", ",", "0", ")", "\n", "print", "(", "measure", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.bbox_corner_dist_measure": [[347, 367], ["range", "max", "print", "sum", "numpy.linalg.norm().sum", "numpy.linalg.norm", "range", "range", "numpy.linalg.norm"], "function", ["None"], ["    ", "\"\"\" Extract the axis aligned box from a pcl or batch of pcls\n    Args:\n        points: Nx3 points or BxNx3\n        output is 6 dim: xyz pos of center and 3 lengths        \n    \"\"\"", "\n", "which_dim", "=", "len", "(", "points", ".", "shape", ")", "-", "2", "# first dim if a single cloud and second if batch", "\n", "mn", ",", "mx", "=", "points", ".", "min", "(", "which_dim", ")", ",", "points", ".", "max", "(", "which_dim", ")", "\n", "lengths", "=", "mx", "-", "mn", "\n", "cntr", "=", "0.5", "*", "(", "mn", "+", "mx", ")", "\n", "return", "np", ".", "concatenate", "(", "[", "cntr", ",", "lengths", "]", ",", "axis", "=", "which_dim", ")", "\n", "\n", "", "def", "write_bbox", "(", "scene_bbox", ",", "out_filename", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.point_cloud_to_bbox": [[369, 380], ["numpy.concatenate", "len", "points.min", "points.max"], "function", ["None"], ["\n", "def", "convert_box_to_trimesh_fmt", "(", "box", ")", ":", "\n", "        ", "ctr", "=", "box", "[", ":", "3", "]", "\n", "lengths", "=", "box", "[", "3", ":", "]", "\n", "trns", "=", "np", ".", "eye", "(", "4", ")", "\n", "trns", "[", "0", ":", "3", ",", "3", "]", "=", "ctr", "\n", "trns", "[", "3", ",", "3", "]", "=", "1.0", "\n", "box_trimesh_fmt", "=", "trimesh", ".", "creation", ".", "box", "(", "lengths", ",", "trns", ")", "\n", "return", "box_trimesh_fmt", "\n", "\n", "", "scene", "=", "trimesh", ".", "scene", ".", "Scene", "(", ")", "\n", "for", "box", "in", "scene_bbox", ":", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_bbox": [[382, 413], ["trimesh.scene.Scene", "trimesh.util.concatenate", "trimesh.util.concatenate.export", "numpy.eye", "trimesh.creation.box", "trimesh.scene.Scene.add_geometry", "trimesh.scene.Scene.dump", "pc_util.write_bbox.convert_box_to_trimesh_fmt"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.ins_ply.export"], ["\n", "", "mesh_list", "=", "trimesh", ".", "util", ".", "concatenate", "(", "scene", ".", "dump", "(", ")", ")", "\n", "# save to ply file    ", "\n", "trimesh", ".", "io", ".", "export", ".", "export_mesh", "(", "mesh_list", ",", "out_filename", ",", "file_type", "=", "'ply'", ")", "\n", "\n", "return", "\n", "\n", "", "def", "write_oriented_bbox", "(", "scene_bbox", ",", "out_filename", ")", ":", "\n", "    ", "\"\"\"Export oriented (around Z axis) scene bbox to meshes\n    Args:\n        scene_bbox: (N x 7 numpy array): xyz pos of center and 3 lengths (dx,dy,dz)\n            and heading angle around Z axis.\n            Y forward, X right, Z upward. heading angle of positive X is 0,\n            heading angle of positive Y is 90 degrees.\n        out_filename: (string) filename\n    \"\"\"", "\n", "def", "heading2rotmat", "(", "heading_angle", ")", ":", "\n", "        ", "pass", "\n", "rotmat", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "rotmat", "[", "2", ",", "2", "]", "=", "1", "\n", "cosval", "=", "np", ".", "cos", "(", "heading_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "heading_angle", ")", "\n", "rotmat", "[", "0", ":", "2", ",", "0", ":", "2", "]", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "-", "sinval", "]", ",", "[", "sinval", ",", "cosval", "]", "]", ")", "\n", "return", "rotmat", "\n", "\n", "", "def", "convert_oriented_box_to_trimesh_fmt", "(", "box", ")", ":", "\n", "        ", "ctr", "=", "box", "[", ":", "3", "]", "\n", "lengths", "=", "box", "[", "3", ":", "6", "]", "\n", "trns", "=", "np", ".", "eye", "(", "4", ")", "\n", "trns", "[", "0", ":", "3", ",", "3", "]", "=", "ctr", "\n", "trns", "[", "3", ",", "3", "]", "=", "1.0", "\n", "trns", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "heading2rotmat", "(", "box", "[", "6", "]", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_oriented_bbox": [[415, 453], ["trimesh.scene.Scene", "trimesh.util.concatenate", "trimesh.util.concatenate.export", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.array", "numpy.eye", "pc_util.write_oriented_bbox.heading2rotmat"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.ins_ply.export"], ["return", "box_trimesh_fmt", "\n", "\n", "", "scene", "=", "trimesh", ".", "scene", ".", "Scene", "(", ")", "\n", "for", "box", "in", "scene_bbox", ":", "\n", "        ", "scene", ".", "add_geometry", "(", "convert_oriented_box_to_trimesh_fmt", "(", "box", ")", ")", "\n", "\n", "", "mesh_list", "=", "trimesh", ".", "util", ".", "concatenate", "(", "scene", ".", "dump", "(", ")", ")", "\n", "# save to ply file    ", "\n", "trimesh", ".", "io", ".", "export", ".", "export_mesh", "(", "mesh_list", ",", "out_filename", ",", "file_type", "=", "'ply'", ")", "\n", "\n", "return", "\n", "\n", "", "def", "write_oriented_bbox_camera_coord", "(", "scene_bbox", ",", "out_filename", ")", ":", "\n", "    ", "\"\"\"Export oriented (around Y axis) scene bbox to meshes\n    Args:\n        scene_bbox: (N x 7 numpy array): xyz pos of center and 3 lengths (dx,dy,dz)\n            and heading angle around Y axis.\n            Z forward, X rightward, Y downward. heading angle of positive X is 0,\n            heading angle of negative Z is 90 degrees.\n        out_filename: (string) filename\n    \"\"\"", "\n", "def", "heading2rotmat", "(", "heading_angle", ")", ":", "\n", "        ", "pass", "\n", "rotmat", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", "\n", "rotmat", "[", "1", ",", "1", "]", "=", "1", "\n", "cosval", "=", "np", ".", "cos", "(", "heading_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "heading_angle", ")", "\n", "rotmat", "[", "0", ",", ":", "]", "=", "np", ".", "array", "(", "[", "cosval", ",", "0", ",", "sinval", "]", ")", "\n", "rotmat", "[", "2", ",", ":", "]", "=", "np", ".", "array", "(", "[", "-", "sinval", ",", "0", ",", "cosval", "]", ")", "\n", "return", "rotmat", "\n", "\n", "", "def", "convert_oriented_box_to_trimesh_fmt", "(", "box", ")", ":", "\n", "        ", "ctr", "=", "box", "[", ":", "3", "]", "\n", "lengths", "=", "box", "[", "3", ":", "6", "]", "\n", "trns", "=", "np", ".", "eye", "(", "4", ")", "\n", "trns", "[", "0", ":", "3", ",", "3", "]", "=", "ctr", "\n", "trns", "[", "3", ",", "3", "]", "=", "1.0", "\n", "trns", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "heading2rotmat", "(", "box", "[", "6", "]", ")", "\n", "box_trimesh_fmt", "=", "trimesh", ".", "creation", ".", "box", "(", "lengths", ",", "trns", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_oriented_bbox_camera_coord": [[455, 494], ["trimesh.scene.Scene", "trimesh.util.concatenate", "trimesh.util.concatenate.export", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.array", "numpy.array", "numpy.eye", "pc_util.write_oriented_bbox.heading2rotmat"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.ins_ply.export"], ["\n", "", "scene", "=", "trimesh", ".", "scene", ".", "Scene", "(", ")", "\n", "for", "box", "in", "scene_bbox", ":", "\n", "        ", "scene", ".", "add_geometry", "(", "convert_oriented_box_to_trimesh_fmt", "(", "box", ")", ")", "\n", "\n", "", "mesh_list", "=", "trimesh", ".", "util", ".", "concatenate", "(", "scene", ".", "dump", "(", ")", ")", "\n", "# save to ply file    ", "\n", "trimesh", ".", "io", ".", "export", ".", "export_mesh", "(", "mesh_list", ",", "out_filename", ",", "file_type", "=", "'ply'", ")", "\n", "\n", "return", "\n", "\n", "", "def", "write_lines_as_cylinders", "(", "pcl", ",", "filename", ",", "rad", "=", "0.005", ",", "res", "=", "64", ")", ":", "\n", "    ", "\"\"\"Create lines represented as cylinders connecting pairs of 3D points\n    Args:\n        pcl: (N x 2 x 3 numpy array): N pairs of xyz pos             \n        filename: (string) filename for the output mesh (ply) file\n        rad: radius for the cylinder\n        res: number of sections used to create the cylinder\n    \"\"\"", "\n", "scene", "=", "trimesh", ".", "scene", ".", "Scene", "(", ")", "\n", "for", "src", ",", "tgt", "in", "pcl", ":", "\n", "# compute line", "\n", "        ", "vec", "=", "tgt", "-", "src", "\n", "M", "=", "trimesh", ".", "geometry", ".", "align_vectors", "(", "[", "0", ",", "0", ",", "1", "]", ",", "vec", ",", "False", ")", "\n", "vec", "=", "tgt", "-", "src", "# compute again since align_vectors modifies vec in-place!", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "0.5", "*", "src", "+", "0.5", "*", "tgt", "\n", "height", "=", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "vec", ",", "vec", ")", ")", "\n", "scene", ".", "add_geometry", "(", "trimesh", ".", "creation", ".", "cylinder", "(", "radius", "=", "rad", ",", "height", "=", "height", ",", "sections", "=", "res", ",", "transform", "=", "M", ")", ")", "\n", "", "mesh_list", "=", "trimesh", ".", "util", ".", "concatenate", "(", "scene", ".", "dump", "(", ")", ")", "\n", "trimesh", ".", "io", ".", "export", ".", "export_mesh", "(", "mesh_list", ",", "'%s.ply'", "%", "(", "filename", ")", ",", "file_type", "=", "'ply'", ")", "\n", "\n", "# ----------------------------------------", "\n", "# Testing", "\n", "# ----------------------------------------", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "print", "(", "'running some tests'", ")", "\n", "\n", "############", "\n", "## Test \"write_lines_as_cylinders\"", "\n", "############", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_lines_as_cylinders": [[496, 515], ["trimesh.scene.Scene", "trimesh.util.concatenate", "trimesh.util.concatenate.export", "trimesh.geometry.align_vectors", "numpy.sqrt", "trimesh.scene.Scene.add_geometry", "trimesh.scene.Scene.dump", "numpy.dot", "trimesh.creation.cylinder"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.ins_ply.export"], ["write_lines_as_cylinders", "(", "pcl", ",", "'point_connectors'", ")", "\n", "input", "(", ")", "\n", "\n", "\n", "scene_bbox", "=", "np", ".", "zeros", "(", "(", "1", ",", "7", ")", ")", "\n", "scene_bbox", "[", "0", ",", "3", ":", "6", "]", "=", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", "]", ")", "# dx,dy,dz", "\n", "scene_bbox", "[", "0", ",", "6", "]", "=", "np", ".", "pi", "/", "4", "# 45 degrees ", "\n", "write_oriented_bbox", "(", "scene_bbox", ",", "'single_obb_45degree.ply'", ")", "\n", "############", "\n", "## Test point_cloud_to_bbox ", "\n", "############", "\n", "pcl", "=", "np", ".", "random", ".", "rand", "(", "32", ",", "16", ",", "3", ")", "\n", "pcl_bbox", "=", "point_cloud_to_bbox", "(", "pcl", ")", "\n", "assert", "pcl_bbox", ".", "shape", "==", "(", "32", ",", "6", ")", "\n", "\n", "pcl", "=", "np", ".", "random", ".", "rand", "(", "16", ",", "3", ")", "\n", "pcl_bbox", "=", "point_cloud_to_bbox", "(", "pcl", ")", "\n", "assert", "pcl_bbox", ".", "shape", "==", "(", "6", ",", ")", "\n", "\n", "############", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.metric_util.multi_scene_precision_recall": [[28, 56], ["range", "torch.is_tensor", "torch.is_tensor", "numpy.ones", "numpy.ones", "metric_util.single_scene_precision_recall", "metric_util.precision_recall"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.metric_util.single_scene_precision_recall", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.metric_util.precision_recall"], ["    ", "'''\n    Args:\n        labels: (B, N, 6)\n        pred: (B, M, 6)\n        iou_thresh: scalar\n        conf_thresh: scalar\n        label_mask: (B, N,) with values in 0 or 1 to indicate which GT boxes to consider.\n        pred_mask: (B, M,) with values in 0 or 1 to indicate which PRED boxes to consider.\n    Returns:\n        TP,FP,FN,Precision,Recall\n    '''", "\n", "# Make sure the masks are not Torch tensor, otherwise the mask==1 returns uint8 array instead", "\n", "# of True/False array as in numpy", "\n", "assert", "(", "not", "torch", ".", "is_tensor", "(", "label_mask", ")", ")", "\n", "assert", "(", "not", "torch", ".", "is_tensor", "(", "pred_mask", ")", ")", "\n", "TP", ",", "FP", ",", "FN", "=", "0", ",", "0", ",", "0", "\n", "if", "label_mask", "is", "None", ":", "label_mask", "=", "np", ".", "ones", "(", "(", "labels", ".", "shape", "[", "0", "]", ",", "labels", ".", "shape", "[", "1", "]", ")", ")", "\n", "if", "pred_mask", "is", "None", ":", "pred_mask", "=", "np", ".", "ones", "(", "(", "pred", ".", "shape", "[", "0", "]", ",", "pred", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "batch_idx", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "TP_i", ",", "FP_i", ",", "FN_i", "=", "single_scene_precision_recall", "(", "labels", "[", "batch_idx", ",", "label_mask", "[", "batch_idx", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "pred", "[", "batch_idx", ",", "pred_mask", "[", "batch_idx", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "iou_thresh", ",", "conf_thresh", ")", "\n", "TP", "+=", "TP_i", "\n", "FP", "+=", "FP_i", "\n", "FN", "+=", "FN_i", "\n", "\n", "", "return", "TP", ",", "FP", ",", "FN", ",", "precision_recall", "(", "TP", ",", "FP", ",", "FN", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.metric_util.single_scene_precision_recall": [[58, 92], ["numpy.zeros", "range", "good_match_arr.any().sum", "range", "good_match_arr.any().sum", "metric_util.calc_iou", "good_match_arr.any", "good_match_arr.any", "numpy.where"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.metric_util.calc_iou"], ["    ", "\"\"\"Compute P and R for predicted bounding boxes. Ignores classes!\n    Args:\n        labels: (N x bbox) ground-truth bounding boxes (6 dims) \n        pred: (M x (bbox + conf)) predicted bboxes with confidence and maybe classification\n    Returns:\n        TP, FP, FN\n    \"\"\"", "\n", "\n", "\n", "# for each pred box with high conf (C), compute IoU with all gt boxes. ", "\n", "# TP = number of times IoU > th ; FP = C - TP ", "\n", "# FN - number of scene objects without good match", "\n", "\n", "gt_bboxes", "=", "labels", "[", ":", ",", ":", "6", "]", "\n", "\n", "num_scene_bboxes", "=", "gt_bboxes", ".", "shape", "[", "0", "]", "\n", "conf", "=", "pred", "[", ":", ",", "6", "]", "\n", "\n", "conf_pred_bbox", "=", "pred", "[", "np", ".", "where", "(", "conf", ">", "conf_thresh", ")", "[", "0", "]", ",", ":", "6", "]", "\n", "num_conf_pred_bboxes", "=", "conf_pred_bbox", ".", "shape", "[", "0", "]", "\n", "\n", "# init an array to keep iou between generated and scene bboxes", "\n", "iou_arr", "=", "np", ".", "zeros", "(", "[", "num_conf_pred_bboxes", ",", "num_scene_bboxes", "]", ")", "\n", "for", "g_idx", "in", "range", "(", "num_conf_pred_bboxes", ")", ":", "\n", "        ", "for", "s_idx", "in", "range", "(", "num_scene_bboxes", ")", ":", "\n", "            ", "iou_arr", "[", "g_idx", ",", "s_idx", "]", "=", "calc_iou", "(", "conf_pred_bbox", "[", "g_idx", ",", ":", "]", ",", "gt_bboxes", "[", "s_idx", ",", ":", "]", ")", "\n", "\n", "\n", "", "", "good_match_arr", "=", "(", "iou_arr", ">=", "iou_thresh", ")", "\n", "\n", "TP", "=", "good_match_arr", ".", "any", "(", "axis", "=", "1", ")", ".", "sum", "(", ")", "\n", "FP", "=", "num_conf_pred_bboxes", "-", "TP", "\n", "FN", "=", "num_scene_bboxes", "-", "good_match_arr", ".", "any", "(", "axis", "=", "0", ")", ".", "sum", "(", ")", "\n", "\n", "return", "TP", ",", "FP", ",", "FN", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.metric_util.precision_recall": [[94, 98], ["None"], "function", ["None"], ["\n", "", "def", "precision_recall", "(", "TP", ",", "FP", ",", "FN", ")", ":", "\n", "    ", "Prec", "=", "1.0", "*", "TP", "/", "(", "TP", "+", "FP", ")", "if", "TP", "+", "FP", ">", "0", "else", "0", "\n", "Rec", "=", "1.0", "*", "TP", "/", "(", "TP", "+", "FN", ")", "\n", "return", "Prec", ",", "Rec", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.metric_util.calc_iou": [[100, 123], ["numpy.array().min", "numpy.array().max", "box_a[].prod", "box_b[].prod", "numpy.array", "numpy.array"], "function", ["None"], ["\n", "", "def", "calc_iou", "(", "box_a", ",", "box_b", ")", ":", "\n", "    ", "\"\"\"Computes IoU of two axis aligned bboxes.\n    Args:\n        box_a, box_b: 6D of center and lengths        \n    Returns:\n        iou\n    \"\"\"", "\n", "\n", "max_a", "=", "box_a", "[", "0", ":", "3", "]", "+", "box_a", "[", "3", ":", "6", "]", "/", "2", "\n", "max_b", "=", "box_b", "[", "0", ":", "3", "]", "+", "box_b", "[", "3", ":", "6", "]", "/", "2", "\n", "min_max", "=", "np", ".", "array", "(", "[", "max_a", ",", "max_b", "]", ")", ".", "min", "(", "0", ")", "\n", "\n", "min_a", "=", "box_a", "[", "0", ":", "3", "]", "-", "box_a", "[", "3", ":", "6", "]", "/", "2", "\n", "min_b", "=", "box_b", "[", "0", ":", "3", "]", "-", "box_b", "[", "3", ":", "6", "]", "/", "2", "\n", "max_min", "=", "np", ".", "array", "(", "[", "min_a", ",", "min_b", "]", ")", ".", "max", "(", "0", ")", "\n", "if", "not", "(", "(", "min_max", ">", "max_min", ")", ".", "all", "(", ")", ")", ":", "\n", "        ", "return", "0.0", "\n", "\n", "", "intersection", "=", "(", "min_max", "-", "max_min", ")", ".", "prod", "(", ")", "\n", "vol_a", "=", "box_a", "[", "3", ":", "6", "]", ".", "prod", "(", ")", "\n", "vol_b", "=", "box_b", "[", "3", ":", "6", "]", ".", "prod", "(", ")", "\n", "union", "=", "vol_a", "+", "vol_b", "-", "intersection", "\n", "return", "1.0", "*", "intersection", "/", "union", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.tf_logger.Logger.__init__": [[17, 20], ["tensorflow.summary.FileWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.tf_logger.Logger.scalar_summary": [[21, 25], ["tensorflow.Summary", "tf_logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.tf_logger.Logger.image_summary": [[26, 48], ["enumerate", "tensorflow.Summary", "tf_logger.Logger.writer.add_summary", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "tensorflow.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["None"], ["", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a list of images.\"\"\"", "\n", "\n", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "            ", "try", ":", "\n", "                ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'%s/%d'", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.tf_logger.Logger.histo_summary": [[49, 76], ["numpy.histogram", "tensorflow.HistogramProto", "float", "float", "int", "float", "float", "tensorflow.Summary", "tf_logger.Logger.writer.add_summary", "tf_logger.Logger.writer.flush", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tensorflow.HistogramProto.bucket_limit.append", "tensorflow.HistogramProto.bucket.append", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "1000", ")", ":", "\n", "        ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "            ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "            ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.polygon_clip": [[17, 65], ["box_util.polygon_clip.inside"], "function", ["None"], ["   ", "\"\"\" Clip a polygon with another polygon.\n\n   Ref: https://rosettacode.org/wiki/Sutherland-Hodgman_polygon_clipping#Python\n\n   Args:\n     subjectPolygon: a list of (x,y) 2d points, any polygon.\n     clipPolygon: a list of (x,y) 2d points, has to be *convex*\n   Note:\n     **points have to be counter-clockwise ordered**\n\n   Return:\n     a list of (x,y) vertex point for the intersection polygon.\n   \"\"\"", "\n", "def", "inside", "(", "p", ")", ":", "\n", "      ", "return", "(", "cp2", "[", "0", "]", "-", "cp1", "[", "0", "]", ")", "*", "(", "p", "[", "1", "]", "-", "cp1", "[", "1", "]", ")", ">", "(", "cp2", "[", "1", "]", "-", "cp1", "[", "1", "]", ")", "*", "(", "p", "[", "0", "]", "-", "cp1", "[", "0", "]", ")", "\n", "\n", "", "def", "computeIntersection", "(", ")", ":", "\n", "      ", "dc", "=", "[", "cp1", "[", "0", "]", "-", "cp2", "[", "0", "]", ",", "cp1", "[", "1", "]", "-", "cp2", "[", "1", "]", "]", "\n", "dp", "=", "[", "s", "[", "0", "]", "-", "e", "[", "0", "]", ",", "s", "[", "1", "]", "-", "e", "[", "1", "]", "]", "\n", "n1", "=", "cp1", "[", "0", "]", "*", "cp2", "[", "1", "]", "-", "cp1", "[", "1", "]", "*", "cp2", "[", "0", "]", "\n", "n2", "=", "s", "[", "0", "]", "*", "e", "[", "1", "]", "-", "s", "[", "1", "]", "*", "e", "[", "0", "]", "\n", "n3", "=", "1.0", "/", "(", "dc", "[", "0", "]", "*", "dp", "[", "1", "]", "-", "dc", "[", "1", "]", "*", "dp", "[", "0", "]", ")", "\n", "return", "[", "(", "n1", "*", "dp", "[", "0", "]", "-", "n2", "*", "dc", "[", "0", "]", ")", "*", "n3", ",", "(", "n1", "*", "dp", "[", "1", "]", "-", "n2", "*", "dc", "[", "1", "]", ")", "*", "n3", "]", "\n", "\n", "", "outputList", "=", "subjectPolygon", "\n", "cp1", "=", "clipPolygon", "[", "-", "1", "]", "\n", "\n", "for", "clipVertex", "in", "clipPolygon", ":", "\n", "      ", "cp2", "=", "clipVertex", "\n", "inputList", "=", "outputList", "\n", "outputList", "=", "[", "]", "\n", "s", "=", "inputList", "[", "-", "1", "]", "\n", "\n", "for", "subjectVertex", "in", "inputList", ":", "\n", "         ", "e", "=", "subjectVertex", "\n", "if", "inside", "(", "e", ")", ":", "\n", "            ", "if", "not", "inside", "(", "s", ")", ":", "\n", "               ", "outputList", ".", "append", "(", "computeIntersection", "(", ")", ")", "\n", "", "outputList", ".", "append", "(", "e", ")", "\n", "", "elif", "inside", "(", "s", ")", ":", "\n", "            ", "outputList", ".", "append", "(", "computeIntersection", "(", ")", ")", "\n", "", "s", "=", "e", "\n", "", "cp1", "=", "cp2", "\n", "if", "len", "(", "outputList", ")", "==", "0", ":", "\n", "          ", "return", "None", "\n", "", "", "return", "(", "outputList", ")", "\n", "\n", "", "def", "poly_area", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\" Ref: http://stackoverflow.com/questions/24467972/calculate-area-of-polygon-given-x-y-coordinates \"\"\"", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.poly_area": [[67, 70], ["numpy.abs", "numpy.dot", "numpy.dot", "numpy.roll", "numpy.roll"], "function", ["None"], ["\n", "", "def", "convex_hull_intersection", "(", "p1", ",", "p2", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.convex_hull_intersection": [[72, 83], ["box_util.polygon_clip", "scipy.spatial.ConvexHull"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.polygon_clip"], ["\n", "inter_p", "=", "polygon_clip", "(", "p1", ",", "p2", ")", "\n", "if", "inter_p", "is", "not", "None", ":", "\n", "        ", "hull_inter", "=", "ConvexHull", "(", "inter_p", ")", "\n", "return", "inter_p", ",", "hull_inter", ".", "volume", "\n", "", "else", ":", "\n", "        ", "return", "None", ",", "0.0", "\n", "\n", "", "", "def", "box3d_vol", "(", "corners", ")", ":", "\n", "    ", "''' corners: (8,3) no assumption on axis direction '''", "\n", "a", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "0", ",", ":", "]", "-", "corners", "[", "1", ",", ":", "]", ")", "**", "2", ")", ")", "\n", "b", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "corners", "[", "1", ",", ":", "]", "-", "corners", "[", "2", ",", ":", "]", ")", "**", "2", ")", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.box3d_vol": [[85, 91], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["return", "a", "*", "b", "*", "c", "\n", "\n", "", "def", "is_clockwise", "(", "p", ")", ":", "\n", "    ", "x", "=", "p", "[", ":", ",", "0", "]", "\n", "y", "=", "p", "[", ":", ",", "1", "]", "\n", "return", "np", ".", "dot", "(", "x", ",", "np", ".", "roll", "(", "y", ",", "1", ")", ")", "-", "np", ".", "dot", "(", "y", ",", "np", ".", "roll", "(", "x", ",", "1", ")", ")", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.is_clockwise": [[93, 97], ["numpy.dot", "numpy.dot", "numpy.roll", "numpy.roll"], "function", ["None"], ["    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.box3d_iou": [[99, 125], ["box_util.poly_area", "box_util.poly_area", "box_util.convex_hull_intersection", "min", "max", "box_util.box3d_vol", "box_util.box3d_vol", "max", "range", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.poly_area", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.poly_area", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.convex_hull_intersection", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.box3d_vol", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.box3d_vol"], ["\n", "# corner points are in counter clockwise order", "\n", "rect1", "=", "[", "(", "corners1", "[", "i", ",", "0", "]", ",", "corners1", "[", "i", ",", "2", "]", ")", "for", "i", "in", "range", "(", "3", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "rect2", "=", "[", "(", "corners2", "[", "i", ",", "0", "]", ",", "corners2", "[", "i", ",", "2", "]", ")", "for", "i", "in", "range", "(", "3", ",", "-", "1", ",", "-", "1", ")", "]", "\n", "area1", "=", "poly_area", "(", "np", ".", "array", "(", "rect1", ")", "[", ":", ",", "0", "]", ",", "np", ".", "array", "(", "rect1", ")", "[", ":", ",", "1", "]", ")", "\n", "area2", "=", "poly_area", "(", "np", ".", "array", "(", "rect2", ")", "[", ":", ",", "0", "]", ",", "np", ".", "array", "(", "rect2", ")", "[", ":", ",", "1", "]", ")", "\n", "inter", ",", "inter_area", "=", "convex_hull_intersection", "(", "rect1", ",", "rect2", ")", "\n", "iou_2d", "=", "inter_area", "/", "(", "area1", "+", "area2", "-", "inter_area", ")", "\n", "ymax", "=", "min", "(", "corners1", "[", "0", ",", "1", "]", ",", "corners2", "[", "0", ",", "1", "]", ")", "\n", "ymin", "=", "max", "(", "corners1", "[", "4", ",", "1", "]", ",", "corners2", "[", "4", ",", "1", "]", ")", "\n", "inter_vol", "=", "inter_area", "*", "max", "(", "0.0", ",", "ymax", "-", "ymin", ")", "\n", "vol1", "=", "box3d_vol", "(", "corners1", ")", "\n", "vol2", "=", "box3d_vol", "(", "corners2", ")", "\n", "iou", "=", "inter_vol", "/", "(", "vol1", "+", "vol2", "-", "inter_vol", ")", "\n", "return", "iou", ",", "iou_2d", "\n", "\n", "\n", "", "def", "get_iou", "(", "bb1", ",", "bb2", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.get_iou": [[127, 176], ["max", "max", "min", "min", "float"], "function", ["None"], ["\n", "assert", "bb1", "[", "'x1'", "]", "<", "bb1", "[", "'x2'", "]", "\n", "assert", "bb1", "[", "'y1'", "]", "<", "bb1", "[", "'y2'", "]", "\n", "assert", "bb2", "[", "'x1'", "]", "<", "bb2", "[", "'x2'", "]", "\n", "assert", "bb2", "[", "'y1'", "]", "<", "bb2", "[", "'y2'", "]", "\n", "\n", "# determine the coordinates of the intersection rectangle", "\n", "x_left", "=", "max", "(", "bb1", "[", "'x1'", "]", ",", "bb2", "[", "'x1'", "]", ")", "\n", "y_top", "=", "max", "(", "bb1", "[", "'y1'", "]", ",", "bb2", "[", "'y1'", "]", ")", "\n", "x_right", "=", "min", "(", "bb1", "[", "'x2'", "]", ",", "bb2", "[", "'x2'", "]", ")", "\n", "y_bottom", "=", "min", "(", "bb1", "[", "'y2'", "]", ",", "bb2", "[", "'y2'", "]", ")", "\n", "\n", "if", "x_right", "<", "x_left", "or", "y_bottom", "<", "y_top", ":", "\n", "        ", "return", "0.0", "\n", "\n", "# The intersection of two axis-aligned bounding boxes is always an", "\n", "# axis-aligned bounding box", "\n", "", "intersection_area", "=", "(", "x_right", "-", "x_left", ")", "*", "(", "y_bottom", "-", "y_top", ")", "\n", "\n", "# compute the area of both AABBs", "\n", "bb1_area", "=", "(", "bb1", "[", "'x2'", "]", "-", "bb1", "[", "'x1'", "]", ")", "*", "(", "bb1", "[", "'y2'", "]", "-", "bb1", "[", "'y1'", "]", ")", "\n", "bb2_area", "=", "(", "bb2", "[", "'x2'", "]", "-", "bb2", "[", "'x1'", "]", ")", "*", "(", "bb2", "[", "'y2'", "]", "-", "bb2", "[", "'y1'", "]", ")", "\n", "\n", "# compute the intersection over union by taking the intersection", "\n", "# area and dividing it by the sum of prediction + ground-truth", "\n", "# areas - the interesection area", "\n", "iou", "=", "intersection_area", "/", "float", "(", "bb1_area", "+", "bb2_area", "-", "intersection_area", ")", "\n", "assert", "iou", ">=", "0.0", "\n", "assert", "iou", "<=", "1.0", "\n", "return", "iou", "\n", "\n", "", "def", "box2d_iou", "(", "box1", ",", "box2", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.box2d_iou": [[178, 189], ["box_util.get_iou"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.get_iou"], ["\n", "return", "get_iou", "(", "{", "'x1'", ":", "box1", "[", "0", "]", ",", "'y1'", ":", "box1", "[", "1", "]", ",", "'x2'", ":", "box1", "[", "2", "]", ",", "'y2'", ":", "box1", "[", "3", "]", "}", ",", "{", "'x1'", ":", "box2", "[", "0", "]", ",", "'y1'", ":", "box2", "[", "1", "]", ",", "'x2'", ":", "box2", "[", "2", "]", ",", "'y2'", ":", "box2", "[", "3", "]", "}", ")", "\n", "\n", "# -----------------------------------------------------------", "\n", "# Convert from box parameters to ", "\n", "# -----------------------------------------------------------", "\n", "", "def", "roty", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the y-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "0", ",", "s", "]", ",", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.roty": [[194, 201], ["numpy.cos", "numpy.sin", "numpy.array"], "function", ["None"], ["    ", "\"\"\"Rotation about the y-axis.\n    t: (x1,x2,...xn)\n    return: (x1,x2,...,xn,3,3)\n    \"\"\"", "\n", "input_shape", "=", "t", ".", "shape", "\n", "output", "=", "np", ".", "zeros", "(", "tuple", "(", "list", "(", "input_shape", ")", "+", "[", "3", ",", "3", "]", ")", ")", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.roty_batch": [[203, 218], ["numpy.zeros", "numpy.cos", "numpy.sin", "tuple", "list"], "function", ["None"], ["output", "[", "...", ",", "0", ",", "2", "]", "=", "s", "\n", "output", "[", "...", ",", "1", ",", "1", "]", "=", "1", "\n", "output", "[", "...", ",", "2", ",", "0", "]", "=", "-", "s", "\n", "output", "[", "...", ",", "2", ",", "2", "]", "=", "c", "\n", "return", "output", "\n", "\n", "\n", "", "def", "get_3d_box", "(", "box_size", ",", "heading_angle", ",", "center", ")", ":", "\n", "    ", "''' box_size is array(l,w,h), heading_angle is radius clockwise from pos x axis, center is xyz of box center\n        output (8,3) array for 3D box cornders\n        Similar to utils/compute_orientation_3d\n    '''", "\n", "R", "=", "roty", "(", "heading_angle", ")", "\n", "l", ",", "w", ",", "h", "=", "box_size", "\n", "x_corners", "=", "[", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", "]", ";", "\n", "y_corners", "=", "[", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", "]", ";", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.get_3d_box": [[220, 236], ["box_util.roty", "numpy.dot", "numpy.transpose", "numpy.vstack"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.roty"], ["corners_3d", "=", "np", ".", "dot", "(", "R", ",", "np", ".", "vstack", "(", "[", "x_corners", ",", "y_corners", ",", "z_corners", "]", ")", ")", "\n", "corners_3d", "[", "0", ",", ":", "]", "=", "corners_3d", "[", "0", ",", ":", "]", "+", "center", "[", "0", "]", ";", "\n", "corners_3d", "[", "1", ",", ":", "]", "=", "corners_3d", "[", "1", ",", ":", "]", "+", "center", "[", "1", "]", ";", "\n", "corners_3d", "[", "2", ",", ":", "]", "=", "corners_3d", "[", "2", ",", ":", "]", "+", "center", "[", "2", "]", ";", "\n", "corners_3d", "=", "np", ".", "transpose", "(", "corners_3d", ")", "\n", "return", "corners_3d", "\n", "\n", "", "def", "get_3d_box_batch", "(", "box_size", ",", "heading_angle", ",", "center", ")", ":", "\n", "    ", "''' box_size: [x1,x2,...,xn,3]\n        heading_angle: [x1,x2,...,xn]\n        center: [x1,x2,...,xn,3]\n    Return:\n        [x1,x3,...,xn,8,3]\n    '''", "\n", "input_shape", "=", "heading_angle", ".", "shape", "\n", "R", "=", "roty_batch", "(", "heading_angle", ")", "\n", "l", "=", "np", ".", "expand_dims", "(", "box_size", "[", "...", ",", "0", "]", ",", "-", "1", ")", "# [x1,...,xn,1]", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.get_3d_box_batch": [[238, 259], ["box_util.roty_batch", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.matmul", "numpy.expand_dims", "tuple", "len", "numpy.transpose", "range", "len", "tuple", "list", "len"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.roty_batch"], ["h", "=", "np", ".", "expand_dims", "(", "box_size", "[", "...", ",", "2", "]", ",", "-", "1", ")", "\n", "corners_3d", "=", "np", ".", "zeros", "(", "tuple", "(", "list", "(", "input_shape", ")", "+", "[", "8", ",", "3", "]", ")", ")", "\n", "corners_3d", "[", "...", ",", ":", ",", "0", "]", "=", "np", ".", "concatenate", "(", "(", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ",", "l", "/", "2", ",", "l", "/", "2", ",", "-", "l", "/", "2", ",", "-", "l", "/", "2", ")", ",", "-", "1", ")", "\n", "corners_3d", "[", "...", ",", ":", ",", "1", "]", "=", "np", ".", "concatenate", "(", "(", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ",", "-", "h", "/", "2", ")", ",", "-", "1", ")", "\n", "corners_3d", "[", "...", ",", ":", ",", "2", "]", "=", "np", ".", "concatenate", "(", "(", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ",", "w", "/", "2", ",", "-", "w", "/", "2", ",", "-", "w", "/", "2", ",", "w", "/", "2", ")", ",", "-", "1", ")", "\n", "tlist", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "input_shape", ")", ")", "]", "\n", "tlist", "+=", "[", "len", "(", "input_shape", ")", "+", "1", ",", "len", "(", "input_shape", ")", "]", "\n", "corners_3d", "=", "np", ".", "matmul", "(", "corners_3d", ",", "np", ".", "transpose", "(", "R", ",", "tuple", "(", "tlist", ")", ")", ")", "\n", "corners_3d", "+=", "np", ".", "expand_dims", "(", "center", ",", "-", "2", ")", "\n", "return", "corners_3d", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "\n", "# Function for polygon ploting", "\n", "    ", "import", "matplotlib", "\n", "from", "matplotlib", ".", "patches", "import", "Polygon", "\n", "from", "matplotlib", ".", "collections", "import", "PatchCollection", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "def", "plot_polys", "(", "plist", ",", "scale", "=", "500.0", ")", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "patches", "=", "[", "]", "\n", "for", "p", "in", "plist", ":", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.tf_visualizer.Visualizer.__init__": [[16, 25], ["tf_logger.Logger", "os.path.join", "os.path.join", "open", "time.strftime", "log_file.write"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "name", "=", "'train'", ")", ":", "\n", "# self.opt = opt", "\n", "#self.logger = tf_logger.Logger(os.path.join(opt.logging_dir, opt.name))", "\n", "#self.log_name = os.path.join(opt.checkpoint_dir, opt.name, 'loss_log.txt')", "\n", "        ", "self", ".", "logger", "=", "tf_logger", ".", "Logger", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir", ",", "name", ")", ")", "\n", "self", ".", "log_name", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "log_dir", ",", "'tf_visualizer_log.txt'", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "now", "=", "time", ".", "strftime", "(", "\"%c\"", ")", "\n", "log_file", ".", "write", "(", "'================ Training Loss (%s) ================\\n'", "%", "now", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.tf_visualizer.Visualizer.log_images": [[27, 31], ["visuals.items", "tf_visualizer.Visualizer.logger.image_summary"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.tf_logger.Logger.image_summary"], ["", "", "def", "log_images", "(", "self", ",", "visuals", ",", "step", ")", ":", "\n", "            ", "for", "label", ",", "image_numpy", "in", "visuals", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "logger", ".", "image_summary", "(", "\n", "label", ",", "[", "image_numpy", "]", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.tf_visualizer.Visualizer.log_scalars": [[33, 36], ["scalars.items", "tf_visualizer.Visualizer.logger.scalar_summary"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.tf_logger.Logger.scalar_summary"], ["", "", "def", "log_scalars", "(", "self", ",", "scalars", ",", "step", ")", ":", "\n", "        ", "for", "label", ",", "val", "in", "scalars", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "logger", ".", "scalar_summary", "(", "label", ",", "val", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.tf_visualizer.Visualizer.plot_current_points": [[38, 40], ["None"], "methods", ["None"], ["", "", "def", "plot_current_points", "(", "self", ",", "points", ",", "disp_offset", "=", "10", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.tf_visualizer.Visualizer.print_current_scalars": [[42, 50], ["scalars.items", "print", "open", "log_file.write"], "methods", ["None"], ["", "def", "print_current_scalars", "(", "self", ",", "epoch", ",", "i", ",", "scalars", ")", ":", "\n", "        ", "message", "=", "'(epoch: %d, iters: %d) '", "%", "(", "epoch", ",", "i", ")", "\n", "for", "k", ",", "v", "in", "scalars", ".", "items", "(", ")", ":", "\n", "            ", "message", "+=", "'%s: %.3f '", "%", "(", "k", ",", "v", ")", "\n", "\n", "", "print", "(", "message", ")", "\n", "with", "open", "(", "self", ".", "log_name", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "log_file", ".", "write", "(", "'%s\\n'", "%", "message", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.nn_distance.huber_loss": [[15, 33], ["torch.abs", "torch.abs", "torch.clamp", "torch.clamp"], "function", ["None"], ["def", "huber_loss", "(", "error", ",", "delta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        error: Torch tensor (d1,d2,...,dk)\n    Returns:\n        loss: Torch tensor (d1,d2,...,dk)\n\n    x = error = pred - gt or dist(pred,gt)\n    0.5 * |x|^2                 if |x|<=d\n    0.5 * d^2 + d * (|x|-d)     if |x|>d\n    Ref: https://github.com/charlesq34/frustum-pointnets/blob/master/models/model_util.py\n    \"\"\"", "\n", "abs_error", "=", "torch", ".", "abs", "(", "error", ")", "\n", "#quadratic = torch.min(abs_error, torch.FloatTensor([delta]))", "\n", "quadratic", "=", "torch", ".", "clamp", "(", "abs_error", ",", "max", "=", "delta", ")", "\n", "linear", "=", "(", "abs_error", "-", "quadratic", ")", "\n", "loss", "=", "0.5", "*", "quadratic", "**", "2", "+", "delta", "*", "linear", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.nn_distance.nn_distance": [[35, 63], ["pc1.unsqueeze().repeat", "pc2.unsqueeze().repeat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "pc1.unsqueeze", "pc2.unsqueeze", "nn_distance.huber_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.nn_distance.huber_loss"], ["    ", "\"\"\"\n    Input:\n        pc1: (B,N,C) torch tensor\n        pc2: (B,M,C) torch tensor\n        l1smooth: bool, whether to use l1smooth loss\n        delta: scalar, the delta used in l1smooth loss\n    Output:\n        dist1: (B,N) torch float32 tensor\n        idx1: (B,N) torch int64 tensor\n        dist2: (B,M) torch float32 tensor\n        idx2: (B,M) torch int64 tensor\n    \"\"\"", "\n", "N", "=", "pc1", ".", "shape", "[", "1", "]", "\n", "M", "=", "pc2", ".", "shape", "[", "1", "]", "\n", "pc1_expand_tile", "=", "pc1", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "M", ",", "1", ")", "\n", "pc2_expand_tile", "=", "pc2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "N", ",", "1", ",", "1", ")", "\n", "pc_diff", "=", "pc1_expand_tile", "-", "pc2_expand_tile", "\n", "\n", "if", "l1smooth", ":", "\n", "        ", "pc_dist", "=", "torch", ".", "sum", "(", "huber_loss", "(", "pc_diff", ",", "delta", ")", ",", "dim", "=", "-", "1", ")", "# (B,N,M)", "\n", "", "elif", "l1", ":", "\n", "        ", "pc_dist", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "pc_diff", ")", ",", "dim", "=", "-", "1", ")", "# (B,N,M)", "\n", "", "else", ":", "\n", "        ", "pc_dist", "=", "torch", ".", "sum", "(", "pc_diff", "**", "2", ",", "dim", "=", "-", "1", ")", "# (B,N,M)", "\n", "", "dist1", ",", "idx1", "=", "torch", ".", "min", "(", "pc_dist", ",", "dim", "=", "2", ")", "# (B,N)", "\n", "dist2", ",", "idx2", "=", "torch", ".", "min", "(", "pc_dist", ",", "dim", "=", "1", ")", "# (B,M)", "\n", "return", "dist1", ",", "idx1", ",", "dist2", ",", "idx2", "\n", "\n", "", "def", "demo_nn_distance", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.nn_distance.demo_nn_distance": [[65, 93], ["numpy.random.seed", "numpy.random.random", "numpy.random.random", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "nn_distance.nn_distance", "print", "print", "numpy.zeros", "range", "print", "print", "print", "nn_distance.nn_distance", "print", "print", "numpy.zeros", "range", "print", "np.random.random.astype", "np.random.random.astype", "range", "range", "numpy.sum", "numpy.abs", "numpy.minimum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.nn_distance", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.nn_distance"], ["pc1arr", "=", "np", ".", "random", ".", "random", "(", "(", "1", ",", "5", ",", "3", ")", ")", "\n", "pc2arr", "=", "np", ".", "random", ".", "random", "(", "(", "1", ",", "6", ",", "3", ")", ")", "\n", "pc1", "=", "torch", ".", "from_numpy", "(", "pc1arr", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "pc2", "=", "torch", ".", "from_numpy", "(", "pc2arr", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "dist1", ",", "idx1", ",", "dist2", ",", "idx2", "=", "nn_distance", "(", "pc1", ",", "pc2", ")", "\n", "print", "(", "dist1", ")", "\n", "print", "(", "idx1", ")", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "5", ",", "6", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "6", ")", ":", "\n", "            ", "dist", "[", "i", ",", "j", "]", "=", "np", ".", "sum", "(", "(", "pc1arr", "[", "0", ",", "i", ",", ":", "]", "-", "pc2arr", "[", "0", ",", "j", ",", ":", "]", ")", "**", "2", ")", "\n", "", "", "print", "(", "dist", ")", "\n", "print", "(", "'-'", "*", "30", ")", "\n", "print", "(", "'L1smooth dists:'", ")", "\n", "dist1", ",", "idx1", ",", "dist2", ",", "idx2", "=", "nn_distance", "(", "pc1", ",", "pc2", ",", "True", ")", "\n", "print", "(", "dist1", ")", "\n", "print", "(", "idx1", ")", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "5", ",", "6", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "6", ")", ":", "\n", "            ", "error", "=", "np", ".", "abs", "(", "pc1arr", "[", "0", ",", "i", ",", ":", "]", "-", "pc2arr", "[", "0", ",", "j", ",", ":", "]", ")", "\n", "quad", "=", "np", ".", "minimum", "(", "error", ",", "1.0", ")", "\n", "linear", "=", "error", "-", "quad", "\n", "loss", "=", "0.5", "*", "quad", "**", "2", "+", "1.0", "*", "linear", "\n", "dist", "[", "i", ",", "j", "]", "=", "np", ".", "sum", "(", "loss", ")", "\n", "", "", "print", "(", "dist", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.voc_ap": [[25, 57], ["numpy.arange", "numpy.concatenate", "numpy.concatenate", "range", "numpy.sum", "numpy.maximum", "numpy.where", "numpy.sum", "numpy.max"], "function", ["None"], ["    ", "\"\"\" ap = voc_ap(rec, prec, [use_07_metric])\n    Compute VOC AP given precision and recall.\n    If use_07_metric is true, uses the\n    VOC 07 11 point method (default:False).\n    \"\"\"", "\n", "if", "use_07_metric", ":", "\n", "# 11 point metric", "\n", "        ", "ap", "=", "0.", "\n", "for", "t", "in", "np", ".", "arange", "(", "0.", ",", "1.1", ",", "0.1", ")", ":", "\n", "            ", "if", "np", ".", "sum", "(", "rec", ">=", "t", ")", "==", "0", ":", "\n", "                ", "p", "=", "0", "\n", "", "else", ":", "\n", "                ", "p", "=", "np", ".", "max", "(", "prec", "[", "rec", ">=", "t", "]", ")", "\n", "", "ap", "=", "ap", "+", "p", "/", "11.", "\n", "", "", "else", ":", "\n", "# correct AP calculation", "\n", "# first append sentinel values at the end", "\n", "        ", "mrec", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "rec", ",", "[", "1.", "]", ")", ")", "\n", "mpre", "=", "np", ".", "concatenate", "(", "(", "[", "0.", "]", ",", "prec", ",", "[", "0.", "]", ")", ")", "\n", "\n", "# compute the precision envelope", "\n", "for", "i", "in", "range", "(", "mpre", ".", "size", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "mpre", "[", "i", "-", "1", "]", "=", "np", ".", "maximum", "(", "mpre", "[", "i", "-", "1", "]", ",", "mpre", "[", "i", "]", ")", "\n", "\n", "# to calculate area under PR curve, look for points", "\n", "# where X axis (recall) changes value", "\n", "", "i", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", "]", "!=", "mrec", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "\n", "# and sum (\\Delta recall) * prec", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "i", "+", "1", "]", "-", "mrec", "[", "i", "]", ")", "*", "mpre", "[", "i", "+", "1", "]", ")", "\n", "", "return", "ap", "\n", "\n", "", "import", "os", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.get_iou": [[66, 73], ["metric_util.calc_iou"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.metric_util.calc_iou"], ["iou3d", "=", "calc_iou", "(", "bb1", ",", "bb2", ")", "\n", "return", "iou3d", "\n", "\n", "", "from", "box_util", "import", "box3d_iou", "\n", "def", "get_iou_obb", "(", "bb1", ",", "bb2", ")", ":", "\n", "    ", "iou3d", ",", "iou2d", "=", "box3d_iou", "(", "bb1", ",", "bb2", ")", "\n", "return", "iou3d", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.get_iou_obb": [[78, 81], ["box_util.box3d_iou"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.box3d_iou"], ["    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.get_iou_main": [[83, 85], ["get_iou_func"], "function", ["None"], []], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.eval_det_cls": [[87, 172], ["gt.keys", "pred.keys", "pred.keys", "numpy.array", "numpy.array", "numpy.argsort", "numpy.sort", "len", "numpy.zeros", "numpy.zeros", "range", "numpy.cumsum", "numpy.cumsum", "eval_det.voc_ap", "numpy.array", "len", "BB[].astype", "R[].astype", "float", "numpy.maximum", "len", "image_ids.append", "np.array.append", "np.array.append", "range", "numpy.array", "eval_det.get_iou_main", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.voc_ap", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.get_iou_main"], ["\n", "\n", "# construct gt objects", "\n", "class_recs", "=", "{", "}", "# {img_id: {'bbox': bbox list, 'det': matched list}}", "\n", "npos", "=", "0", "\n", "for", "img_id", "in", "gt", ".", "keys", "(", ")", ":", "\n", "        ", "bbox", "=", "np", ".", "array", "(", "gt", "[", "img_id", "]", ")", "\n", "det", "=", "[", "False", "]", "*", "len", "(", "bbox", ")", "\n", "npos", "+=", "len", "(", "bbox", ")", "\n", "class_recs", "[", "img_id", "]", "=", "{", "'bbox'", ":", "bbox", ",", "'det'", ":", "det", "}", "\n", "# pad empty list to all other imgids", "\n", "", "for", "img_id", "in", "pred", ".", "keys", "(", ")", ":", "\n", "        ", "if", "img_id", "not", "in", "gt", ":", "\n", "            ", "class_recs", "[", "img_id", "]", "=", "{", "'bbox'", ":", "np", ".", "array", "(", "[", "]", ")", ",", "'det'", ":", "[", "]", "}", "\n", "\n", "# construct dets", "\n", "", "", "image_ids", "=", "[", "]", "\n", "confidence", "=", "[", "]", "\n", "BB", "=", "[", "]", "\n", "for", "img_id", "in", "pred", ".", "keys", "(", ")", ":", "\n", "        ", "for", "box", ",", "score", "in", "pred", "[", "img_id", "]", ":", "\n", "            ", "image_ids", ".", "append", "(", "img_id", ")", "\n", "confidence", ".", "append", "(", "score", ")", "\n", "BB", ".", "append", "(", "box", ")", "\n", "", "", "confidence", "=", "np", ".", "array", "(", "confidence", ")", "\n", "BB", "=", "np", ".", "array", "(", "BB", ")", "# (nd,4 or 8,3 or 6)", "\n", "\n", "# sort by confidence", "\n", "sorted_ind", "=", "np", ".", "argsort", "(", "-", "confidence", ")", "\n", "sorted_scores", "=", "np", ".", "sort", "(", "-", "confidence", ")", "\n", "BB", "=", "BB", "[", "sorted_ind", ",", "...", "]", "\n", "image_ids", "=", "[", "image_ids", "[", "x", "]", "for", "x", "in", "sorted_ind", "]", "\n", "\n", "# go down dets and mark TPs and FPs", "\n", "nd", "=", "len", "(", "image_ids", ")", "\n", "tp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "nd", ")", "\n", "for", "d", "in", "range", "(", "nd", ")", ":", "\n", "#if d%100==0: print(d)", "\n", "        ", "R", "=", "class_recs", "[", "image_ids", "[", "d", "]", "]", "\n", "bb", "=", "BB", "[", "d", ",", "...", "]", ".", "astype", "(", "float", ")", "\n", "ovmax", "=", "-", "np", ".", "inf", "\n", "BBGT", "=", "R", "[", "'bbox'", "]", ".", "astype", "(", "float", ")", "\n", "\n", "if", "BBGT", ".", "size", ">", "0", ":", "\n", "# compute overlaps", "\n", "            ", "for", "j", "in", "range", "(", "BBGT", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "iou", "=", "get_iou_main", "(", "get_iou_func", ",", "(", "bb", ",", "BBGT", "[", "j", ",", "...", "]", ")", ")", "\n", "if", "iou", ">", "ovmax", ":", "\n", "                    ", "ovmax", "=", "iou", "\n", "jmax", "=", "j", "\n", "\n", "#print d, ovmax", "\n", "", "", "", "if", "ovmax", ">", "ovthresh", ":", "\n", "            ", "if", "not", "R", "[", "'det'", "]", "[", "jmax", "]", ":", "\n", "                ", "tp", "[", "d", "]", "=", "1.", "\n", "R", "[", "'det'", "]", "[", "jmax", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "fp", "[", "d", "]", "=", "1.", "\n", "", "", "else", ":", "\n", "            ", "fp", "[", "d", "]", "=", "1.", "\n", "\n", "# compute precision recall", "\n", "", "", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "rec", "=", "tp", "/", "float", "(", "npos", ")", "\n", "#print('NPOS: ', npos)", "\n", "# avoid divide by zero in case the first detection matches a difficult", "\n", "# ground truth", "\n", "prec", "=", "tp", "/", "np", ".", "maximum", "(", "tp", "+", "fp", ",", "np", ".", "finfo", "(", "np", ".", "float64", ")", ".", "eps", ")", "\n", "ap", "=", "voc_ap", "(", "rec", ",", "prec", ",", "use_07_metric", ")", "\n", "\n", "return", "rec", ",", "prec", ",", "ap", "\n", "\n", "", "def", "eval_det_cls_wrapper", "(", "arguments", ")", ":", "\n", "    ", "pred", ",", "gt", ",", "ovthresh", ",", "use_07_metric", ",", "get_iou_func", "=", "arguments", "\n", "rec", ",", "prec", ",", "ap", "=", "eval_det_cls", "(", "pred", ",", "gt", ",", "ovthresh", ",", "use_07_metric", ",", "get_iou_func", ")", "\n", "return", "(", "rec", ",", "prec", ",", "ap", ")", "\n", "\n", "", "def", "eval_det", "(", "pred_all", ",", "gt_all", ",", "ovthresh", "=", "0.25", ",", "use_07_metric", "=", "False", ",", "get_iou_func", "=", "get_iou", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.eval_det_cls_wrapper": [[174, 178], ["eval_det.eval_det_cls"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.eval_det_cls"], []], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.eval_det": [[180, 221], ["pred_all.keys", "gt_all.keys", "gt.keys", "eval_det.eval_det_cls", "[].append", "[].append"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.eval_det_cls"], ["\n", "pred", "=", "{", "}", "# map {classname: pred}", "\n", "gt", "=", "{", "}", "# map {classname: gt}", "\n", "for", "img_id", "in", "pred_all", ".", "keys", "(", ")", ":", "\n", "        ", "for", "classname", ",", "bbox", ",", "score", "in", "pred_all", "[", "img_id", "]", ":", "\n", "            ", "if", "classname", "not", "in", "pred", ":", "pred", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "pred", "[", "classname", "]", ":", "\n", "                ", "pred", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "if", "classname", "not", "in", "gt", ":", "gt", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "gt", "[", "classname", "]", ":", "\n", "                ", "gt", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "pred", "[", "classname", "]", "[", "img_id", "]", ".", "append", "(", "(", "bbox", ",", "score", ")", ")", "\n", "", "", "for", "img_id", "in", "gt_all", ".", "keys", "(", ")", ":", "\n", "        ", "for", "classname", ",", "bbox", "in", "gt_all", "[", "img_id", "]", ":", "\n", "            ", "if", "classname", "not", "in", "gt", ":", "gt", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "gt", "[", "classname", "]", ":", "\n", "                ", "gt", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "gt", "[", "classname", "]", "[", "img_id", "]", ".", "append", "(", "bbox", ")", "\n", "\n", "", "", "rec", "=", "{", "}", "\n", "prec", "=", "{", "}", "\n", "ap", "=", "{", "}", "\n", "for", "classname", "in", "gt", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "'Computing AP for class: '", ",", "classname", ")", "\n", "rec", "[", "classname", "]", ",", "prec", "[", "classname", "]", ",", "ap", "[", "classname", "]", "=", "eval_det_cls", "(", "pred", "[", "classname", "]", ",", "gt", "[", "classname", "]", ",", "ovthresh", ",", "use_07_metric", ",", "get_iou_func", ")", "\n", "print", "(", "classname", ",", "ap", "[", "classname", "]", ")", "\n", "\n", "", "return", "rec", ",", "prec", ",", "ap", "\n", "\n", "", "from", "multiprocessing", "import", "Pool", "\n", "def", "eval_det_multiprocessing", "(", "pred_all", ",", "gt_all", ",", "ovthresh", "=", "0.25", ",", "use_07_metric", "=", "False", ",", "get_iou_func", "=", "get_iou", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.eval_det_multiprocessing": [[226, 275], ["pred_all.keys", "gt_all.keys", "multiprocessing.Pool", "multiprocessing.Pool.map", "multiprocessing.Pool.close", "enumerate", "gt.keys", "[].append", "[].append", "gt.keys"], "function", ["None"], ["        ", "for", "classname", ",", "bbox", ",", "score", "in", "pred_all", "[", "img_id", "]", ":", "\n", "            ", "if", "classname", "not", "in", "pred", ":", "pred", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "pred", "[", "classname", "]", ":", "\n", "                ", "pred", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "if", "classname", "not", "in", "gt", ":", "gt", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "gt", "[", "classname", "]", ":", "\n", "                ", "gt", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "pred", "[", "classname", "]", "[", "img_id", "]", ".", "append", "(", "(", "bbox", ",", "score", ")", ")", "\n", "", "", "for", "img_id", "in", "gt_all", ".", "keys", "(", ")", ":", "\n", "        ", "for", "classname", ",", "bbox", "in", "gt_all", "[", "img_id", "]", ":", "\n", "            ", "if", "classname", "not", "in", "gt", ":", "gt", "[", "classname", "]", "=", "{", "}", "\n", "if", "img_id", "not", "in", "gt", "[", "classname", "]", ":", "\n", "                ", "gt", "[", "classname", "]", "[", "img_id", "]", "=", "[", "]", "\n", "", "gt", "[", "classname", "]", "[", "img_id", "]", ".", "append", "(", "bbox", ")", "\n", "\n", "", "", "rec", "=", "{", "}", "\n", "prec", "=", "{", "}", "\n", "ap", "=", "{", "}", "\n", "p", "=", "Pool", "(", "processes", "=", "10", ")", "\n", "ret_values", "=", "p", ".", "map", "(", "eval_det_cls_wrapper", ",", "[", "(", "pred", "[", "classname", "]", ",", "gt", "[", "classname", "]", ",", "ovthresh", ",", "use_07_metric", ",", "get_iou_func", ")", "for", "classname", "in", "gt", ".", "keys", "(", ")", "if", "classname", "in", "pred", "]", ")", "\n", "p", ".", "close", "(", ")", "\n", "for", "i", ",", "classname", "in", "enumerate", "(", "gt", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "classname", "in", "pred", ":", "\n", "            ", "rec", "[", "classname", "]", ",", "prec", "[", "classname", "]", ",", "ap", "[", "classname", "]", "=", "ret_values", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "rec", "[", "classname", "]", "=", "0", "\n", "prec", "[", "classname", "]", "=", "0", "\n", "ap", "[", "classname", "]", "=", "0", "\n", "", "print", "(", "classname", ",", "ap", "[", "classname", "]", ")", "\n", "\n", "", "return", "rec", ",", "prec", ",", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.logger._ColorfulFormatter.__init__": [[10, 16], ["kwargs.pop", "len", "logging.Formatter.__init__", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_root_name", "=", "kwargs", ".", "pop", "(", "\"root_name\"", ")", "+", "\".\"", "\n", "self", ".", "_abbrev_name", "=", "kwargs", ".", "pop", "(", "\"abbrev_name\"", ",", "\"\"", ")", "\n", "if", "len", "(", "self", ".", "_abbrev_name", ")", ":", "\n", "            ", "self", ".", "_abbrev_name", "=", "self", ".", "_abbrev_name", "+", "\".\"", "\n", "", "super", "(", "_ColorfulFormatter", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.logger._ColorfulFormatter.formatMessage": [[17, 27], ["record.name.replace", "super().formatMessage", "termcolor.colored", "termcolor.colored"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.logger._ColorfulFormatter.formatMessage"], ["", "def", "formatMessage", "(", "self", ",", "record", ")", ":", "\n", "        ", "record", ".", "name", "=", "record", ".", "name", ".", "replace", "(", "self", ".", "_root_name", ",", "self", ".", "_abbrev_name", ")", "\n", "log", "=", "super", "(", "_ColorfulFormatter", ",", "self", ")", ".", "formatMessage", "(", "record", ")", "\n", "if", "record", ".", "levelno", "==", "logging", ".", "WARNING", ":", "\n", "            ", "prefix", "=", "colored", "(", "\"WARNING\"", ",", "\"red\"", ",", "attrs", "=", "[", "\"blink\"", "]", ")", "\n", "", "elif", "record", ".", "levelno", "==", "logging", ".", "ERROR", "or", "record", ".", "levelno", "==", "logging", ".", "CRITICAL", ":", "\n", "            ", "prefix", "=", "colored", "(", "\"ERROR\"", ",", "\"red\"", ",", "attrs", "=", "[", "\"blink\"", ",", "\"underline\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "log", "\n", "", "return", "prefix", "+", "\" \"", "+", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.logger.setup_logger": [[30, 88], ["functools.lru_cache", "logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.makedirs", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logger._ColorfulFormatter", "output.endswith", "output.endswith", "os.path.join", "os.path.dirname", "logger._cached_log_stream", "termcolor.colored", "str"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.logger._cached_log_stream"], ["", "", "@", "functools", ".", "lru_cache", "(", ")", "\n", "def", "setup_logger", "(", "\n", "output", "=", "None", ",", "distributed_rank", "=", "0", ",", "*", ",", "color", "=", "True", ",", "name", "=", "\"log\"", ",", "abbrev_name", "=", "None", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Initialize the detectron2 logger and set its verbosity level to \"INFO\".\n\n    Args:\n        output (str): a file name or a directory to save log. If None, will not save log file.\n            If ends with \".txt\" or \".log\", assumed to be a file name.\n            Otherwise, logs will be saved to `output/log.txt`.\n        name (str): the root module name of this logger\n\n    Returns:\n        logging.Logger: a logger\n    \"\"\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "propagate", "=", "False", "\n", "\n", "if", "abbrev_name", "is", "None", ":", "\n", "        ", "abbrev_name", "=", "name", "\n", "\n", "", "plain_formatter", "=", "logging", ".", "Formatter", "(", "\n", "\"[%(asctime)s] %(name)s %(levelname)s: %(message)s\"", ",", "datefmt", "=", "\"%m/%d %H:%M:%S\"", "\n", ")", "\n", "# stdout logging: master only", "\n", "if", "distributed_rank", "==", "0", ":", "\n", "        ", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "if", "color", ":", "\n", "            ", "formatter", "=", "_ColorfulFormatter", "(", "\n", "colored", "(", "\"[%(asctime)s %(name)s]: \"", ",", "\"green\"", ")", "+", "\"%(message)s\"", ",", "\n", "datefmt", "=", "\"%m/%d %H:%M:%S\"", ",", "\n", "root_name", "=", "name", ",", "\n", "abbrev_name", "=", "str", "(", "abbrev_name", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "formatter", "=", "plain_formatter", "\n", "", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "# file logging: all workers", "\n", "", "if", "output", "is", "not", "None", ":", "\n", "        ", "if", "output", ".", "endswith", "(", "\".txt\"", ")", "or", "output", ".", "endswith", "(", "\".log\"", ")", ":", "\n", "            ", "filename", "=", "output", "\n", "", "else", ":", "\n", "            ", "filename", "=", "os", ".", "path", ".", "join", "(", "output", ",", "\"log.txt\"", ")", "\n", "", "if", "distributed_rank", ">", "0", ":", "\n", "            ", "filename", "=", "filename", "+", "f\".rank{distributed_rank}\"", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "fh", "=", "logging", ".", "StreamHandler", "(", "_cached_log_stream", "(", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "plain_formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.logger._cached_log_stream": [[92, 95], ["functools.lru_cache", "open"], "function", ["None"], ["", "@", "functools", ".", "lru_cache", "(", "maxsize", "=", "None", ")", "\n", "def", "_cached_log_stream", "(", "filename", ")", ":", "\n", "    ", "return", "open", "(", "filename", ",", "\"a\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.__init__": [[16, 24], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "multiplier", ",", "warmup_epoch", ",", "after_scheduler", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "multiplier", "<=", "1.", ":", "\n", "            ", "raise", "ValueError", "(", "'multiplier should be greater than 1.'", ")", "\n", "", "self", ".", "warmup_epoch", "=", "warmup_epoch", "\n", "self", ".", "after_scheduler", "=", "after_scheduler", "\n", "self", ".", "finished", "=", "False", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.get_lr": [[25, 31], ["lr_scheduler.GradualWarmupScheduler.after_scheduler.get_lr"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.get_lr"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", ">", "self", ".", "warmup_epoch", ":", "\n", "            ", "return", "self", ".", "after_scheduler", ".", "get_lr", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "base_lr", "/", "self", ".", "multiplier", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "warmup_epoch", "+", "1.", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.step": [[32, 40], ["lr_scheduler.GradualWarmupScheduler.after_scheduler.step", "super().step"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step"], ["", "", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "epoch", "\n", "if", "epoch", ">", "self", ".", "warmup_epoch", ":", "\n", "            ", "self", ".", "after_scheduler", ".", "step", "(", "epoch", "-", "self", ".", "warmup_epoch", ")", "\n", "", "else", ":", "\n", "            ", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "step", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict": [[41, 51], ["lr_scheduler.GradualWarmupScheduler.after_scheduler.state_dict", "lr_scheduler.GradualWarmupScheduler.__dict__.items"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the state of the scheduler as a :class:`dict`.\n\n        It contains an entry for every variable in self.__dict__ which\n        is not the optimizer.\n        \"\"\"", "\n", "\n", "state", "=", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'optimizer'", "and", "key", "!=", "'after_scheduler'", "}", "\n", "state", "[", "'after_scheduler'", "]", "=", "self", ".", "after_scheduler", ".", "state_dict", "(", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict": [[52, 63], ["state_dict.pop", "lr_scheduler.GradualWarmupScheduler.__dict__.update", "lr_scheduler.GradualWarmupScheduler.after_scheduler.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Loads the schedulers state.\n\n        Arguments:\n            state_dict (dict): scheduler state. Should be an object returned\n                from a call to :meth:`state_dict`.\n        \"\"\"", "\n", "\n", "after_scheduler_state", "=", "state_dict", ".", "pop", "(", "'after_scheduler'", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "self", ".", "after_scheduler", ".", "load_state_dict", "(", "after_scheduler_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.get_scheduler": [[65, 88], ["torch.optim.lr_scheduler.CosineAnnealingLR", "lr_scheduler.GradualWarmupScheduler", "isinstance", "torch.optim.lr_scheduler.MultiStepLR", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_scheduler", "(", "optimizer", ",", "n_iter_per_epoch", ",", "args", ")", ":", "\n", "    ", "if", "\"cosine\"", "in", "args", ".", "lr_scheduler", ":", "\n", "        ", "scheduler", "=", "CosineAnnealingLR", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "eta_min", "=", "0.000001", ",", "\n", "T_max", "=", "(", "args", ".", "max_epoch", "-", "args", ".", "warmup_epoch", ")", "*", "n_iter_per_epoch", ")", "\n", "", "elif", "\"step\"", "in", "args", ".", "lr_scheduler", ":", "\n", "        ", "if", "isinstance", "(", "args", ".", "lr_decay_epochs", ",", "int", ")", ":", "\n", "            ", "args", ".", "lr_decay_epochs", "=", "[", "args", ".", "lr_decay_epochs", "]", "\n", "", "scheduler", "=", "MultiStepLR", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "gamma", "=", "args", ".", "lr_decay_rate", ",", "\n", "milestones", "=", "[", "(", "m", "-", "args", ".", "warmup_epoch", ")", "*", "n_iter_per_epoch", "for", "m", "in", "args", ".", "lr_decay_epochs", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"scheduler {args.lr_scheduler} not supported\"", ")", "\n", "\n", "", "if", "args", ".", "warmup_epoch", ">", "0", ":", "\n", "        ", "scheduler", "=", "GradualWarmupScheduler", "(", "\n", "optimizer", ",", "\n", "multiplier", "=", "args", ".", "warmup_multiplier", ",", "\n", "after_scheduler", "=", "scheduler", ",", "\n", "warmup_epoch", "=", "args", ".", "warmup_epoch", "*", "n_iter_per_epoch", ")", "\n", "", "return", "scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.model_util_matterport.MatterportDatasetConfig_md40.__init__": [[17, 31], ["numpy.array", "range", "numpy.load", "enumerate", "os.path.join", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_class", "=", "13", "\n", "self", ".", "num_heading_bin", "=", "12", "\n", "self", ".", "num_size_cluster", "=", "13", "\n", "\n", "self", ".", "type2class", "=", "{", "'bathtub'", ":", "0", ",", "'bed'", ":", "1", ",", "'bench'", ":", "2", ",", "'chair'", ":", "3", ",", "'curtain'", ":", "4", ",", "'desk'", ":", "5", ",", "'door'", ":", "6", ",", "'dresser'", ":", "7", ",", "'night_stand'", ":", "8", ",", "'sofa'", ":", "9", ",", "'stool'", ":", "10", ",", "'table'", ":", "11", ",", "'toilet'", ":", "12", "}", "\n", "self", ".", "class2type", "=", "{", "self", ".", "type2class", "[", "t", "]", ":", "t", "for", "t", "in", "self", ".", "type2class", "}", "\n", "# to avoid error, use \"nyu\" as the normal config, actually it should be \"modelnet\"", "\n", "self", ".", "nyu40ids", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "4", ",", "9", ",", "12", ",", "13", ",", "14", ",", "15", ",", "24", ",", "31", ",", "33", ",", "34", ",", "36", "]", ")", "\n", "self", ".", "nyu40id2class", "=", "{", "nyu40id", ":", "i", "for", "i", ",", "nyu40id", "in", "enumerate", "(", "list", "(", "self", ".", "nyu40ids", ")", ")", "}", "\n", "self", ".", "mean_size_arr", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'matterport/meta_data/matterport_means_md40.npz'", ")", ")", "[", "'arr_0'", "]", "\n", "self", ".", "type_mean_size", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_size_cluster", ")", ":", "\n", "            ", "self", ".", "type_mean_size", "[", "self", ".", "class2type", "[", "i", "]", "]", "=", "self", ".", "mean_size_arr", "[", "i", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.model_util_matterport.MatterportDatasetConfig_md40.angle2class": [[32, 50], ["int", "float"], "methods", ["None"], ["", "", "def", "angle2class", "(", "self", ",", "angle", ")", ":", "\n", "        ", "''' \n            Convert continuous angle to discrete class\n            [optinal] also small regression number from  \n            class center angle to current angle.\n           \n            angle is from 0-2pi (or -pi~pi), class center at 0, 1*(2pi/N), 2*(2pi/N) ...  (N-1)*(2pi/N)\n            return is class of int32 of 0,1,...,N-1 and a number such that\n                class*(2pi/N) + number = angle\n        '''", "\n", "num_class", "=", "self", ".", "num_heading_bin", "\n", "angle", "=", "angle", "%", "(", "2", "*", "np", ".", "pi", ")", "\n", "assert", "(", "angle", ">=", "0", "and", "angle", "<=", "2", "*", "np", ".", "pi", ")", "\n", "angle_per_class", "=", "2", "*", "np", ".", "pi", "/", "float", "(", "num_class", ")", "\n", "shifted_angle", "=", "(", "angle", "+", "angle_per_class", "/", "2", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "\n", "class_id", "=", "int", "(", "shifted_angle", "/", "angle_per_class", ")", "\n", "residual_angle", "=", "shifted_angle", "-", "(", "class_id", "*", "angle_per_class", "+", "angle_per_class", "/", "2", ")", "\n", "return", "class_id", ",", "residual_angle", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.model_util_matterport.MatterportDatasetConfig_md40.class2angle": [[51, 63], ["float"], "methods", ["None"], ["", "def", "class2angle", "(", "self", ",", "pred_cls", ",", "residual", ",", "to_label_format", "=", "True", ")", ":", "\n", "        ", "''' Inverse function to angle2class.\n        \n        As ScanNet only has axis-alined boxes so angles are always 0. '''", "\n", "''' Inverse function to angle2class '''", "\n", "num_class", "=", "self", ".", "num_heading_bin", "\n", "angle_per_class", "=", "2", "*", "np", ".", "pi", "/", "float", "(", "num_class", ")", "\n", "angle_center", "=", "pred_cls", "*", "angle_per_class", "\n", "angle", "=", "angle_center", "+", "residual", "\n", "if", "to_label_format", "and", "angle", ">", "np", ".", "pi", ":", "\n", "            ", "angle", "=", "angle", "-", "2", "*", "np", ".", "pi", "\n", "", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.model_util_matterport.MatterportDatasetConfig_md40.size2class": [[64, 69], ["None"], "methods", ["None"], ["", "def", "size2class", "(", "self", ",", "size", ",", "type_name", ")", ":", "\n", "        ", "''' Convert 3D box size (l,w,h) to size class and size residual '''", "\n", "size_class", "=", "self", ".", "type2class", "[", "type_name", "]", "\n", "size_residual", "=", "size", "-", "self", ".", "type_mean_size", "[", "type_name", "]", "\n", "return", "size_class", ",", "size_residual", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.model_util_matterport.MatterportDatasetConfig_md40.class2size": [[70, 73], ["None"], "methods", ["None"], ["", "def", "class2size", "(", "self", ",", "pred_cls", ",", "residual", ",", "ratio", "=", "1.0", ")", ":", "\n", "        ", "''' Inverse function to size2class '''", "\n", "return", "(", "self", ".", "mean_size_arr", "[", "pred_cls", ",", ":", "]", "+", "residual", ")", "*", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.model_util_matterport.MatterportDatasetConfig_md40.param2obb": [[74, 82], ["model_util_matterport.MatterportDatasetConfig_md40.class2angle", "model_util_matterport.MatterportDatasetConfig_md40.class2size", "numpy.zeros", "int"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2angle", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2size"], ["", "def", "param2obb", "(", "self", ",", "center", ",", "heading_class", ",", "heading_residual", ",", "size_class", ",", "size_residual", ")", ":", "\n", "        ", "heading_angle", "=", "self", ".", "class2angle", "(", "heading_class", ",", "heading_residual", ")", "\n", "box_size", "=", "self", ".", "class2size", "(", "int", "(", "size_class", ")", ",", "size_residual", ")", "\n", "obb", "=", "np", ".", "zeros", "(", "(", "7", ",", ")", ")", "\n", "obb", "[", "0", ":", "3", "]", "=", "center", "\n", "obb", "[", "3", ":", "6", "]", "=", "box_size", "\n", "obb", "[", "6", "]", "=", "heading_angle", "*", "-", "1", "\n", "return", "obb", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.model_util_matterport.rotate_aligned_boxes": [[84, 106], ["numpy.dot", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.stack", "numpy.concatenate", "numpy.transpose", "numpy.zeros", "numpy.dot", "numpy.max", "numpy.max", "numpy.transpose"], "function", ["None"], ["", "", "def", "rotate_aligned_boxes", "(", "input_boxes", ",", "rot_mat", ")", ":", "\n", "    ", "centers", ",", "lengths", "=", "input_boxes", "[", ":", ",", "0", ":", "3", "]", ",", "input_boxes", "[", ":", ",", "3", ":", "6", "]", "\n", "new_centers", "=", "np", ".", "dot", "(", "centers", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "\n", "dx", ",", "dy", "=", "lengths", "[", ":", ",", "0", "]", "/", "2.0", ",", "lengths", "[", ":", ",", "1", "]", "/", "2.0", "\n", "new_x", "=", "np", ".", "zeros", "(", "(", "dx", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "new_y", "=", "np", ".", "zeros", "(", "(", "dx", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "\n", "for", "i", ",", "crnr", "in", "enumerate", "(", "[", "(", "-", "1", ",", "-", "1", ")", ",", "(", "1", ",", "-", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", "]", ")", ":", "\n", "        ", "crnrs", "=", "np", ".", "zeros", "(", "(", "dx", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "crnrs", "[", ":", ",", "0", "]", "=", "crnr", "[", "0", "]", "*", "dx", "\n", "crnrs", "[", ":", ",", "1", "]", "=", "crnr", "[", "1", "]", "*", "dy", "\n", "crnrs", "=", "np", ".", "dot", "(", "crnrs", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "new_x", "[", ":", ",", "i", "]", "=", "crnrs", "[", ":", ",", "0", "]", "\n", "new_y", "[", ":", ",", "i", "]", "=", "crnrs", "[", ":", ",", "1", "]", "\n", "\n", "\n", "", "new_dx", "=", "2.0", "*", "np", ".", "max", "(", "new_x", ",", "1", ")", "\n", "new_dy", "=", "2.0", "*", "np", ".", "max", "(", "new_y", ",", "1", ")", "\n", "new_lengths", "=", "np", ".", "stack", "(", "(", "new_dx", ",", "new_dy", ",", "lengths", "[", ":", ",", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "new_centers", ",", "new_lengths", "]", ",", "axis", "=", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.load_matterport_data.get_MER": [[29, 36], ["xys.astype.astype", "cv2.minAreaRect"], "function", ["None"], ["def", "get_MER", "(", "points", ")", ":", "\n", "    ", "xys", "=", "points", "[", ":", ",", "0", ":", "2", "]", "*", "1000", "\n", "xys", "=", "xys", ".", "astype", "(", "'int'", ")", "\n", "(", "x_center", ",", "y_center", ")", ",", "(", "x_size", ",", "y_size", ")", ",", "angle", "=", "cv2", ".", "minAreaRect", "(", "xys", ")", "\n", "x_center", "/=", "1e3", ";", "y_center", "/=", "1e3", ";", "y_size", "/=", "1e3", ";", "x_size", "/=", "1e3", "\n", "angle", "=", "angle", "/", "180", "*", "np", ".", "pi", "\n", "return", "(", "x_center", ",", "y_center", ")", ",", "(", "x_size", ",", "y_size", ")", ",", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.load_matterport_data.read_aggregation": [[38, 55], ["os.path.isfile", "open", "json.load", "len", "range", "label_to_segs[].extend"], "function", ["None"], ["", "def", "read_aggregation", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "object_id_to_segs", "=", "{", "}", "\n", "label_to_segs", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "'segGroups'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'objectId'", "]", "+", "1", "# instance ids should be 1-indexed", "\n", "label", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'label'", "]", "\n", "segs", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'segments'", "]", "\n", "object_id_to_segs", "[", "object_id", "]", "=", "segs", "\n", "if", "label", "in", "label_to_segs", ":", "\n", "                ", "label_to_segs", "[", "label", "]", ".", "extend", "(", "segs", ")", "\n", "", "else", ":", "\n", "                ", "label_to_segs", "[", "label", "]", "=", "segs", "\n", "", "", "", "return", "object_id_to_segs", ",", "label_to_segs", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.load_matterport_data.read_segmentation": [[57, 70], ["os.path.isfile", "open", "json.load", "len", "range", "seg_to_verts[].append"], "function", ["None"], ["", "def", "read_segmentation", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "seg_to_verts", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_verts", "=", "len", "(", "data", "[", "'segIndices'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_verts", ")", ":", "\n", "            ", "seg_id", "=", "data", "[", "'segIndices'", "]", "[", "i", "]", "\n", "if", "seg_id", "in", "seg_to_verts", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", "=", "[", "i", "]", "\n", "", "", "", "return", "seg_to_verts", ",", "num_verts", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.load_matterport_data.export_md40": [[72, 133], ["matterport_utils.read_label_mapping", "matterport_utils.read_mesh_vertices_rgb", "load_matterport_data.read_aggregation", "load_matterport_data.read_segmentation", "np.zeros", "label_to_segs.items", "np.zeros", "len", "object_id_to_segs.items", "np.zeros", "np.unique", "np.min", "np.max", "load_matterport_data.get_MER", "np.array", "np.save", "np.save", "np.save", "np.save", "list", "len", "object_id_to_segs.keys"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_label_mapping", "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_mesh_vertices_rgb", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_aggregation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_segmentation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.get_MER"], ["", "def", "export_md40", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "label_map_file", ",", "output_file", "=", "None", ")", ":", "\n", "    ", "\"\"\" points are XYZ RGB (RGB in 0-255),\n    semantic label as nyu40 ids,\n    instance label as 1-#instance,\n    box as (cx,cy,cz,dx,dy,dz,semantic_label)\n    \"\"\"", "\n", "label_map", "=", "matterport_utils", ".", "read_label_mapping", "(", "label_map_file", ",", "\n", "label_from", "=", "'raw_category'", ",", "label_to", "=", "'ModelNet40'", ")", "\n", "mesh_vertices", "=", "matterport_utils", ".", "read_mesh_vertices_rgb", "(", "mesh_file", ")", "\n", "\n", "# Load semantic and instance labels", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "object_id_to_label_id", "=", "{", "}", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "label_map", "[", "label", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "try", ":", "\n", "                ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "", "", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "object_id_to_segs", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "for", "seg", "in", "segs", ":", "\n", "            ", "try", ":", "\n", "                ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "instance_ids", "[", "verts", "]", "=", "object_id", "\n", "if", "object_id", "not", "in", "object_id_to_label_id", ":", "\n", "                ", "object_id_to_label_id", "[", "object_id", "]", "=", "label_ids", "[", "verts", "]", "[", "0", "]", "\n", "", "", "", "instance_bboxes", "=", "np", ".", "zeros", "(", "(", "num_instances", ",", "8", ")", ")", "\n", "for", "obj_id", "in", "object_id_to_segs", ":", "\n", "        ", "label_id", "=", "object_id_to_label_id", "[", "obj_id", "]", "\n", "obj_pc", "=", "mesh_vertices", "[", "instance_ids", "==", "obj_id", ",", "0", ":", "3", "]", "\n", "if", "len", "(", "obj_pc", ")", "==", "0", ":", "continue", "\n", "# Compute axis aligned box", "\n", "# An axis aligned bounding box is parameterized by", "\n", "# (cx,cy,cz) and (dx,dy,dz) and label id", "\n", "# where (cx,cy,cz) is the center point of the box,", "\n", "# dx is the x-axis length of the box.", "\n", "\n", "zmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "(", "x_center", ",", "y_center", ")", ",", "(", "x_size", ",", "y_size", ")", ",", "angle", "=", "get_MER", "(", "obj_pc", ")", "\n", "\n", "bbox", "=", "np", ".", "array", "(", "[", "x_center", ",", "y_center", ",", "(", "zmin", "+", "zmax", ")", "/", "2", ",", "x_size", ",", "y_size", ",", "zmax", "-", "zmin", ",", "angle", ",", "label_id", "]", ")", "\n", "# NOTE: this assumes obj_id is in 1,2,3,.,,,.NUM_INSTANCES", "\n", "instance_bboxes", "[", "obj_id", "-", "1", ",", ":", "]", "=", "bbox", "\n", "\n", "", "if", "output_file", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "output_file", "+", "'_vert.npy'", ",", "mesh_vertices", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_sem_label.npy'", ",", "label_ids", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_ins_label.npy'", ",", "instance_ids", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_bbox.npy'", ",", "instance_bboxes", ")", "\n", "\n", "", "return", "mesh_vertices", ",", "label_ids", ",", "instance_ids", ",", "instance_bboxes", ",", "object_id_to_label_id", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.load_matterport_data.main": [[135, 147], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "os.path.join", "load_matterport_data.export_md40", "os.path.split", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.load_scannet_data.export_md40"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--scan_path'", ",", "default", "=", "'./scans/scene0000_00'", ",", "help", "=", "'path to scannet scene (e.g., data/ScanNet/v2/scene0000_00'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_file'", ",", "default", "=", "'./example_output/123'", ",", "help", "=", "'output file'", ")", "\n", "parser", ".", "add_argument", "(", "'--label_map_file'", ",", "default", "=", "'./meta_data/category_mapping.tsv'", ",", "help", "=", "'path to scannetv2-labels.combined.tsv'", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "scan_name", "=", "os", ".", "path", ".", "split", "(", "opt", ".", "scan_path", ")", "[", "-", "1", "]", "\n", "mesh_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "scan_path", ",", "'region{}.ply'", ".", "format", "(", "int", "(", "scan_name", "[", "-", "2", ":", "]", ")", ")", ")", "\n", "agg_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "scan_path", ",", "'region{}.semseg.json'", ".", "format", "(", "int", "(", "scan_name", "[", "-", "2", ":", "]", ")", ")", ")", "\n", "seg_file", "=", "os", ".", "path", ".", "join", "(", "opt", ".", "scan_path", ",", "'region{}.vsegs.json'", ".", "format", "(", "int", "(", "scan_name", "[", "-", "2", ":", "]", ")", ")", ")", "\n", "export_md40", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "opt", ".", "label_map_file", ",", "opt", ".", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.batch_load_matterport_data_virtual.export_one_scan": [[27, 54], ["matterport_scene_synthesis.export_for_md40", "numpy.logical_not", "len", "print", "numpy.in1d", "print", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.in1d", "numpy.unique", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.export_for_md40"], ["def", "export_one_scan", "(", "scan_name", ",", "output_filename_prefix", ")", ":", "\n", "    ", "mesh_vertices", ",", "semantic_labels", ",", "instance_labels", ",", "instance_bboxes", "=", "export_for_md40", "(", "scan_name", ",", "Is_density", "=", "True", ",", "Is_HPR", "=", "False", ",", "Is_floor", "=", "True", ")", "\n", "\n", "mask", "=", "np", ".", "logical_not", "(", "np", ".", "in1d", "(", "semantic_labels", ",", "DONOTCARE_CLASS_IDS", ")", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "mask", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "mask", "]", "\n", "instance_labels", "=", "instance_labels", "[", "mask", "]", "\n", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "instance_labels", ")", ")", "\n", "print", "(", "'Num of instances: '", ",", "num_instances", ")", "\n", "\n", "bbox_mask", "=", "np", ".", "in1d", "(", "instance_bboxes", "[", ":", ",", "-", "1", "]", ",", "OBJ_CLASS_IDS", ")", "\n", "instance_bboxes", "=", "instance_bboxes", "[", "bbox_mask", ",", ":", "]", "\n", "print", "(", "'Num of care instances: '", ",", "instance_bboxes", ".", "shape", "[", "0", "]", ")", "\n", "\n", "N", "=", "mesh_vertices", ".", "shape", "[", "0", "]", "\n", "if", "N", ">", "MAX_NUM_POINT", ":", "\n", "        ", "choices", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "MAX_NUM_POINT", ",", "replace", "=", "False", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "choices", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "choices", "]", "\n", "instance_labels", "=", "instance_labels", "[", "choices", "]", "\n", "\n", "", "np", ".", "save", "(", "output_filename_prefix", "+", "'_vert.npy'", ",", "mesh_vertices", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_sem_label.npy'", ",", "semantic_labels", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_ins_label.npy'", ",", "instance_labels", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_bbox.npy'", ",", "instance_bboxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.batch_load_matterport_data_virtual.batch_export": [[55, 75], ["os.path.exists", "print", "os.mkdir", "print", "print", "print", "os.path.join", "os.path.isfile", "print", "datetime.datetime.now", "print", "print", "batch_load_matterport_data_virtual.export_one_scan", "print"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.batch_load_scannet_data.export_one_scan"], ["", "def", "batch_export", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "OUTPUT_FOLDER", ")", ":", "\n", "        ", "print", "(", "'Creating new data folder: {}'", ".", "format", "(", "OUTPUT_FOLDER", ")", ")", "\n", "os", ".", "mkdir", "(", "OUTPUT_FOLDER", ")", "\n", "\n", "", "for", "scan_name", "in", "TRAIN_SCAN_NAMES", ":", "\n", "        ", "print", "(", "'-'", "*", "20", "+", "'begin'", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "scan_name", ")", "\n", "output_filename_prefix", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_FOLDER", ",", "scan_name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "output_filename_prefix", "+", "'_vert.npy'", ")", ":", "\n", "            ", "print", "(", "'File already exists. skipping.'", ")", "\n", "print", "(", "'-'", "*", "20", "+", "'done'", ")", "\n", "continue", "\n", "#export_one_scan(scan_name, output_filename_prefix)", "\n", "", "try", ":", "\n", "            ", "export_one_scan", "(", "scan_name", ",", "output_filename_prefix", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'Failed export scan: %s'", "%", "(", "scan_name", ")", ")", "\n", "", "print", "(", "'-'", "*", "20", "+", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.matterport_detection_dataset.MatterportDetectionDataset.__init__": [[30, 79], ["os.path.join", "list", "numpy.random.rand", "set", "matterport_detection_dataset.MatterportDetectionDataset.__len__", "numpy.load", "os.path.join", "len", "print", "len", "numpy.zeros", "open", "f.read().splitlines", "os.path.join", "len", "print", "len", "print", "x.startswith", "os.listdir", "len", "open", "f.read().splitlines", "numpy.random.rand", "matterport_detection_dataset.MatterportDetectionDataset.__len__", "os.path.basename", "os.path.basename", "f.read", "len", "matterport_detection_dataset.MatterportDetectionDataset.__len__", "f.read"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_detection_dataset.ScannetDetectionDataset.__len__", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_detection_dataset.ScannetDetectionDataset.__len__", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_detection_dataset.ScannetDetectionDataset.__len__"], ["    ", "def", "__init__", "(", "self", ",", "split_set", "=", "'train'", ",", "data_path", "=", "\"matterport_train_detection_data_md40\"", ",", "num_points", "=", "20000", ",", "use_color", "=", "False", ",", "use_height", "=", "False", ",", "augment", "=", "False", ",", "center_jitter", "=", "0", ")", ":", "\n", "\n", "        ", "self", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "data_path", ")", "\n", "self", ".", "center_jitter", "=", "center_jitter", "\n", "all_scan_names", "=", "list", "(", "set", "(", "[", "os", ".", "path", ".", "basename", "(", "x", ")", "[", "0", ":", "18", "]", "if", "x", ".", "startswith", "(", "'scene_aug'", ")", "else", "os", ".", "path", ".", "basename", "(", "x", ")", "[", "0", ":", "12", "]", "for", "x", "in", "os", ".", "listdir", "(", "self", ".", "data_path", ")", "]", ")", ")", "\n", "\n", "if", "split_set", "==", "'all'", ":", "\n", "            ", "self", ".", "scan_names", "=", "all_scan_names", "\n", "", "elif", "split_set", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "split_filenames", "=", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'matterport/meta_data'", ",", "\n", "'matterport3d_{}.txt'", ".", "format", "(", "split_set", ")", ")", "\n", "with", "open", "(", "split_filenames", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "scan_names", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# remove unavailiable scans", "\n", "", "num_scans", "=", "len", "(", "self", ".", "scan_names", ")", "\n", "self", ".", "scan_names", "=", "[", "sname", "for", "sname", "in", "self", ".", "scan_names", "if", "sname", "in", "all_scan_names", "]", "\n", "print", "(", "'kept {} scans out of {}'", ".", "format", "(", "len", "(", "self", ".", "scan_names", ")", ",", "num_scans", ")", ")", "\n", "num_scans", "=", "len", "(", "self", ".", "scan_names", ")", "\n", "", "elif", "split_set", "==", "'train_aug'", ":", "\n", "            ", "split_filenames", "=", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'matterport/meta_data'", ",", "\n", "'matterport3d_train.txt'", ".", "format", "(", "split_set", ")", ")", "\n", "with", "open", "(", "split_filenames", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "scan_names", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# remove unavailiable scans", "\n", "", "self", ".", "scan_names", "=", "[", "sname", "for", "sname", "in", "all_scan_names", "if", "sname", "in", "self", ".", "scan_names", "or", "'aug'", "in", "sname", "]", "\n", "num_scans", "=", "len", "(", "self", ".", "scan_names", ")", "\n", "print", "(", "'kept {} scans out of {}'", ".", "format", "(", "len", "(", "self", ".", "scan_names", ")", ",", "num_scans", ")", ")", "\n", "num_scans", "=", "len", "(", "self", ".", "scan_names", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'illegal split name'", ")", "\n", "return", "\n", "\n", "", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "use_color", "=", "use_color", "\n", "self", ".", "use_height", "=", "use_height", "\n", "self", ".", "augment", "=", "augment", "\n", "self", ".", "augment_random_params", "=", "np", ".", "random", ".", "rand", "(", "self", ".", "__len__", "(", ")", ",", "2", ")", "\n", "if", "self", ".", "center_jitter", "!=", "0", "and", "'obj'", "not", "in", "self", ".", "data_path", ":", "\n", "#self.delta = (np.random.rand(self.__len__(), MAX_NUM_OBJ, 3) - 0.5) * self.center_jitter", "\n", "#np.save('annotation_error.npy', self.delta)", "\n", "#sys.exit(0)", "\n", "            ", "self", ".", "delta", "=", "np", ".", "load", "(", "'matterport/annotation_error.npy'", ")", "\n", "", "elif", "self", ".", "center_jitter", "!=", "0", "and", "'obj'", "in", "self", ".", "data_path", ":", "\n", "            ", "self", ".", "delta", "=", "(", "np", ".", "random", ".", "rand", "(", "self", ".", "__len__", "(", ")", ",", "MAX_NUM_OBJ", ",", "3", ")", "-", "0.5", ")", "*", "self", ".", "center_jitter", "\n", "", "else", ":", "\n", "            ", "self", ".", "delta", "=", "np", ".", "zeros", "(", "(", "self", ".", "__len__", "(", ")", ",", "MAX_NUM_OBJ", ",", "3", ")", ")", "\n", "# np.array([(np.random.rand()-0.5)*self.center_jitter, (np.random.rand()-0.5)*self.center_jitter, (np.random.rand()-0.5)*self.center_jitter]) * size_gts", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.matterport_detection_dataset.MatterportDetectionDataset.__len__": [[81, 83], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "scan_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.matterport_detection_dataset.MatterportDetectionDataset.__getitem__": [[84, 219], ["numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pc_util.random_sampling", "numpy.zeros", "numpy.zeros", "numpy.unique", "range", "numpy.tile", "numpy.concatenate.astype", "gt_centers.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.tile.astype", "numpy.zeros.astype", "numpy.array().astype", "numpy.percentile", "numpy.concatenate", "matterport_utils.rotz", "numpy.dot", "numpy.dot", "numpy.dot", "DC.angle2class", "[].max", "numpy.zeros", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.random.random", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.where", "numpy.array", "numpy.expand_dims", "numpy.where", "numpy.random.random", "x.min", "x.max", "numpy.eye"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.random_sampling", "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.matterport_utils.rotz", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.angle2class"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dict with following keys:\n            point_clouds: (N,3+C)\n            center_label: (MAX_NUM_OBJ,3) for GT box center XYZ\n            sem_cls_label: (MAX_NUM_OBJ,) semantic class index\n            angle_class_label: (MAX_NUM_OBJ,) with int values in 0,...,NUM_HEADING_BIN-1\n            angle_residual_label: (MAX_NUM_OBJ,)\n            size_classe_label: (MAX_NUM_OBJ,) with int values in 0,...,NUM_SIZE_CLUSTER\n            size_residual_label: (MAX_NUM_OBJ,3)\n            box_label_mask: (MAX_NUM_OBJ) as 0/1 with 1 indicating a unique box\n            point_votes: (N,3) with votes XYZ\n            point_votes_mask: (N,) with 0/1 with 1 indicating the point is in one of the object's OBB.\n            scan_idx: int scan index in scan_names list\n            pcl_color: unused\n        \"\"\"", "\n", "\n", "scan_name", "=", "self", ".", "scan_names", "[", "idx", "]", "\n", "mesh_vertices", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "scan_name", ")", "+", "'_vert.npy'", ")", "\n", "instance_labels", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "scan_name", ")", "+", "'_ins_label.npy'", ")", "\n", "semantic_labels", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "scan_name", ")", "+", "'_sem_label.npy'", ")", "\n", "instance_bboxes", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "scan_name", ")", "+", "'_bbox.npy'", ")", "\n", "\n", "if", "not", "self", ".", "use_color", ":", "\n", "            ", "point_cloud", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "# do not use color for now", "\n", "pcl_color", "=", "mesh_vertices", "[", ":", ",", "3", ":", "6", "]", "\n", "", "else", ":", "\n", "            ", "point_cloud", "=", "mesh_vertices", "[", ":", ",", "0", ":", "6", "]", "\n", "point_cloud", "[", ":", ",", "3", ":", "]", "=", "(", "point_cloud", "[", ":", ",", "3", ":", "]", "-", "MEAN_COLOR_RGB", ")", "/", "256.0", "\n", "\n", "", "if", "self", ".", "use_height", ":", "\n", "            ", "floor_height", "=", "np", ".", "percentile", "(", "point_cloud", "[", ":", ",", "2", "]", ",", "0.99", ")", "\n", "height", "=", "point_cloud", "[", ":", ",", "2", "]", "-", "floor_height", "\n", "point_cloud", "=", "np", ".", "concatenate", "(", "[", "point_cloud", ",", "np", ".", "expand_dims", "(", "height", ",", "1", ")", "]", ",", "1", ")", "\n", "\n", "# ------------------------------- LABELS ------------------------------        ", "\n", "", "target_bboxes", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", "6", ")", ")", "\n", "target_bboxes_mask", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ")", ")", "\n", "angle_classes", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", ")", ")", "\n", "angle_residuals", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", ")", ")", "\n", "size_classes", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", ")", ")", "\n", "size_residuals", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", "3", ")", ")", "\n", "size_gts", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", "3", ")", ")", "\n", "\n", "point_cloud", ",", "choices", "=", "pc_util", ".", "random_sampling", "(", "point_cloud", ",", "\n", "self", ".", "num_points", ",", "return_choices", "=", "True", ")", "\n", "instance_labels", "=", "instance_labels", "[", "choices", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "choices", "]", "\n", "\n", "pcl_color", "=", "pcl_color", "[", "choices", "]", "\n", "\n", "target_bboxes_mask", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "=", "1", "\n", "target_bboxes", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "instance_bboxes", "[", ":", ",", "0", ":", "6", "]", "\n", "\n", "# ------------------------------- DATA AUGMENTATION ------------------------------        ", "\n", "if", "self", ".", "augment", ":", "\n", "            ", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "# Flipping along the YZ plane", "\n", "                ", "point_cloud", "[", ":", ",", "0", "]", "=", "-", "1", "*", "point_cloud", "[", ":", ",", "0", "]", "\n", "instance_bboxes", "[", ":", ",", "0", "]", "=", "-", "1", "*", "instance_bboxes", "[", ":", ",", "0", "]", "\n", "instance_bboxes", "[", ":", ",", "6", "]", "=", "np", ".", "pi", "-", "instance_bboxes", "[", ":", ",", "6", "]", "\n", "target_bboxes", "[", ":", ",", "0", "]", "=", "-", "1", "*", "target_bboxes", "[", ":", ",", "0", "]", "\n", "\n", "# Rotation along up-axis/Z-axis", "\n", "", "rot_angle", "=", "(", "np", ".", "random", ".", "random", "(", ")", "*", "np", ".", "pi", "/", "3", ")", "-", "np", ".", "pi", "/", "6", "# -30 ~ +30 degree", "\n", "rot_mat", "=", "matterport_utils", ".", "rotz", "(", "rot_angle", ")", "\n", "\n", "point_cloud", "[", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "point_cloud", "[", ":", ",", "0", ":", "3", "]", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "instance_bboxes", "[", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "instance_bboxes", "[", ":", ",", "0", ":", "3", "]", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "instance_bboxes", "[", ":", ",", "6", "]", "-=", "rot_angle", "\n", "target_bboxes", "[", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "target_bboxes", "[", ":", ",", "0", ":", "3", "]", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "\n", "# compute votes *AFTER* augmentation", "\n", "# generate votes", "\n", "# Note: since there's no map between bbox instance labels and", "\n", "# pc instance_labels (it had been filtered ", "\n", "# in the data preparation step) we'll compute the instance bbox", "\n", "# from the points sharing the same instance label.", "\n", "\n", "", "point_votes", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_points", ",", "3", "]", ")", "\n", "point_votes_mask", "=", "np", ".", "zeros", "(", "self", ".", "num_points", ")", "\n", "for", "i_instance", "in", "np", ".", "unique", "(", "instance_labels", ")", ":", "\n", "# find all points belong to that instance", "\n", "            ", "ind", "=", "np", ".", "where", "(", "instance_labels", "==", "i_instance", ")", "[", "0", "]", "\n", "# find the semantic label            ", "\n", "if", "semantic_labels", "[", "ind", "[", "0", "]", "]", "in", "DC", ".", "nyu40ids", ":", "\n", "                ", "x", "=", "point_cloud", "[", "ind", ",", ":", "3", "]", "\n", "center", "=", "0.5", "*", "(", "x", ".", "min", "(", "0", ")", "+", "x", ".", "max", "(", "0", ")", ")", "\n", "point_votes", "[", "ind", ",", ":", "]", "=", "center", "-", "x", "\n", "point_votes_mask", "[", "ind", "]", "=", "1.0", "\n", "\n", "", "", "for", "i", "in", "range", "(", "instance_bboxes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "instance_bbox", "=", "instance_bboxes", "[", "i", "]", "\n", "angle_class", ",", "angle_residual", "=", "DC", ".", "angle2class", "(", "instance_bbox", "[", "6", "]", ")", "\n", "angle_classes", "[", "i", "]", "=", "angle_class", "\n", "angle_residuals", "[", "i", "]", "=", "angle_residual", "\n", "\n", "", "point_votes", "=", "np", ".", "tile", "(", "point_votes", ",", "(", "1", ",", "3", ")", ")", "# make 3 votes identical ", "\n", "\n", "class_ind", "=", "[", "np", ".", "where", "(", "DC", ".", "nyu40ids", "==", "x", ")", "[", "0", "]", "[", "0", "]", "for", "x", "in", "instance_bboxes", "[", ":", ",", "-", "1", "]", "]", "\n", "# NOTE: set size class as semantic class. Consider use size2class.", "\n", "size_classes", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "=", "class_ind", "\n", "size_residuals", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "target_bboxes", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", ",", "3", ":", "6", "]", "-", "DC", ".", "mean_size_arr", "[", "class_ind", ",", ":", "]", "\n", "size_gts", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "target_bboxes", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", ",", "3", ":", "6", "]", "\n", "\n", "# Using center jitter to approaximate the error of human labeling", "\n", "gt_centers", "=", "target_bboxes", "[", ":", ",", "0", ":", "3", "]", "\n", "if", "self", ".", "center_jitter", "!=", "0", ":", "\n", "# gt_centers += np.array([np.random.rand()*0.1-0.05, np.random.rand()*0.1-0.05, np.random.rand()*0.1-0.05]) * size_gts", "\n", "# gt_centers += np.array([(np.random.rand()-0.5)*self.center_jitter, (np.random.rand()-0.5)*self.center_jitter, (np.random.rand()-0.5)*self.center_jitter]) * size_gts", "\n", "            ", "gt_centers", "+=", "size_gts", "*", "self", ".", "delta", "[", "idx", "]", "\n", "\n", "", "ret_dict", "=", "{", "}", "\n", "ret_dict", "[", "'point_clouds'", "]", "=", "point_cloud", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'center_label'", "]", "=", "gt_centers", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'center_jitter'", "]", "=", "(", "size_gts", "*", "self", ".", "delta", "[", "idx", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'heading_class_label'", "]", "=", "angle_classes", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ret_dict", "[", "'heading_residual_label'", "]", "=", "angle_residuals", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'size_class_label'", "]", "=", "size_classes", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ret_dict", "[", "'size_residual_label'", "]", "=", "size_residuals", ".", "astype", "(", "np", ".", "float32", ")", "\n", "target_bboxes_semcls", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ")", ")", "\n", "target_bboxes_semcls", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "=", "[", "DC", ".", "nyu40id2class", "[", "x", "]", "for", "x", "in", "instance_bboxes", "[", ":", ",", "-", "1", "]", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "]", "\n", "ret_dict", "[", "'sem_cls_label'", "]", "=", "target_bboxes_semcls", ".", "astype", "(", "np", ".", "int64", ")", "\n", "if", "instance_bboxes", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "ret_dict", "[", "'cloud_label'", "]", "=", "np", ".", "eye", "(", "13", ")", "[", "ret_dict", "[", "'sem_cls_label'", "]", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "]", ".", "max", "(", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "ret_dict", "[", "'cloud_label'", "]", "=", "np", ".", "zeros", "(", "13", ")", "\n", "", "ret_dict", "[", "'box_label_mask'", "]", "=", "target_bboxes_mask", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'vote_label'", "]", "=", "point_votes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'vote_label_mask'", "]", "=", "point_votes_mask", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ret_dict", "[", "'scan_idx'", "]", "=", "np", ".", "array", "(", "idx", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ret_dict", "[", "'pcl_color'", "]", "=", "pcl_color", "\n", "return", "ret_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.matterport_detection_dataset.viz_votes": [[223, 232], ["pc_util.write_ply", "pc_util.write_ply"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply"], ["", "", "def", "viz_votes", "(", "pc", ",", "point_votes", ",", "point_votes_mask", ",", "name", "=", "''", ")", ":", "\n", "    ", "\"\"\" Visualize point votes and point votes mask labels\n    pc: (N,3 or 6), point_votes: (N,9), point_votes_mask: (N,)\n    \"\"\"", "\n", "inds", "=", "(", "point_votes_mask", "==", "1", ")", "\n", "pc_obj", "=", "pc", "[", "inds", ",", "0", ":", "3", "]", "\n", "pc_obj_voted1", "=", "pc_obj", "+", "point_votes", "[", "inds", ",", "0", ":", "3", "]", "\n", "pc_util", ".", "write_ply", "(", "pc_obj", ",", "'pc_obj{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "pc_util", ".", "write_ply", "(", "pc_obj_voted1", ",", "'pc_obj_voted1{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.matterport_detection_dataset.viz_obb": [[233, 258], ["range", "pc_util.write_oriented_bbox", "pc_util.write_ply", "numpy.zeros", "print", "oriented_boxes.append"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_oriented_bbox", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply"], ["", "def", "viz_obb", "(", "pc", ",", "label", ",", "mask", ",", "angle_classes", ",", "angle_residuals", ",", "\n", "size_classes", ",", "size_residuals", ",", "name", "=", "''", ")", ":", "\n", "    ", "\"\"\" Visualize oriented bounding box ground truth\n    pc: (N,3)\n    label: (K,3)  K == MAX_NUM_OBJ\n    mask: (K,)\n    angle_classes: (K,)\n    angle_residuals: (K,)\n    size_classes: (K,)\n    size_residuals: (K,3)\n    \"\"\"", "\n", "oriented_boxes", "=", "[", "]", "\n", "K", "=", "label", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "if", "mask", "[", "i", "]", "==", "0", ":", "continue", "\n", "obb", "=", "np", ".", "zeros", "(", "7", ")", "\n", "obb", "[", "0", ":", "3", "]", "=", "label", "[", "i", ",", "0", ":", "3", "]", "\n", "heading_angle", "=", "0", "# hard code to 0", "\n", "box_size", "=", "DC", ".", "mean_size_arr", "[", "size_classes", "[", "i", "]", ",", ":", "]", "+", "size_residuals", "[", "i", ",", ":", "]", "\n", "obb", "[", "3", ":", "6", "]", "=", "box_size", "\n", "obb", "[", "6", "]", "=", "-", "1", "*", "heading_angle", "\n", "print", "(", "obb", ")", "\n", "oriented_boxes", ".", "append", "(", "obb", ")", "\n", "", "pc_util", ".", "write_oriented_bbox", "(", "oriented_boxes", ",", "'gt_obbs{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "pc_util", ".", "write_ply", "(", "label", "[", "mask", "==", "1", ",", ":", "]", ",", "'gt_centroids{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.batch_load_matterport_data.export_one_scan": [[26, 56], ["os.path.join", "os.path.join", "os.path.join", "load_matterport_data.export_md40", "numpy.logical_not", "len", "print", "numpy.in1d", "print", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.in1d", "numpy.unique", "numpy.random.choice", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.load_scannet_data.export_md40"], ["def", "export_one_scan", "(", "scan_name", ",", "output_filename_prefix", ")", ":", "\n", "    ", "mesh_file", "=", "os", ".", "path", ".", "join", "(", "MATTERPORT_DIR", ",", "scan_name", ",", "'region{}.ply'", ".", "format", "(", "int", "(", "scan_name", "[", "-", "2", ":", "]", ")", ")", ")", "\n", "agg_file", "=", "os", ".", "path", ".", "join", "(", "MATTERPORT_DIR", ",", "scan_name", ",", "'region{}.semseg.json'", ".", "format", "(", "int", "(", "scan_name", "[", "-", "2", ":", "]", ")", ")", ")", "\n", "seg_file", "=", "os", ".", "path", ".", "join", "(", "MATTERPORT_DIR", ",", "scan_name", ",", "'region{}.vsegs.json'", ".", "format", "(", "int", "(", "scan_name", "[", "-", "2", ":", "]", ")", ")", ")", "\n", "mesh_vertices", ",", "semantic_labels", ",", "instance_labels", ",", "instance_bboxes", ",", "instance2semantic", "=", "export_md40", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "LABEL_MAP_FILE", ",", "None", ")", "\n", "\n", "mask", "=", "np", ".", "logical_not", "(", "np", ".", "in1d", "(", "semantic_labels", ",", "DONOTCARE_CLASS_IDS", ")", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "mask", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "mask", "]", "\n", "instance_labels", "=", "instance_labels", "[", "mask", "]", "\n", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "instance_labels", ")", ")", "\n", "print", "(", "'Num of instances: '", ",", "num_instances", ")", "\n", "\n", "bbox_mask", "=", "np", ".", "in1d", "(", "instance_bboxes", "[", ":", ",", "-", "1", "]", ",", "OBJ_CLASS_IDS", ")", "\n", "instance_bboxes", "=", "instance_bboxes", "[", "bbox_mask", ",", ":", "]", "\n", "print", "(", "'Num of care instances: '", ",", "instance_bboxes", ".", "shape", "[", "0", "]", ")", "\n", "\n", "N", "=", "mesh_vertices", ".", "shape", "[", "0", "]", "\n", "if", "N", ">", "MAX_NUM_POINT", ":", "\n", "        ", "choices", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "MAX_NUM_POINT", ",", "replace", "=", "False", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "choices", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "choices", "]", "\n", "instance_labels", "=", "instance_labels", "[", "choices", "]", "\n", "\n", "", "np", ".", "save", "(", "output_filename_prefix", "+", "'_vert.npy'", ",", "mesh_vertices", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_sem_label.npy'", ",", "semantic_labels", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_ins_label.npy'", ",", "instance_labels", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_bbox.npy'", ",", "instance_bboxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.batch_load_matterport_data.batch_export": [[57, 77], ["os.path.exists", "print", "os.mkdir", "print", "print", "print", "os.path.join", "os.path.isfile", "print", "datetime.datetime.now", "print", "print", "batch_load_matterport_data.export_one_scan", "print"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.batch_load_scannet_data.export_one_scan"], ["", "def", "batch_export", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "OUTPUT_FOLDER", ")", ":", "\n", "        ", "print", "(", "'Creating new data folder: {}'", ".", "format", "(", "OUTPUT_FOLDER", ")", ")", "\n", "os", ".", "mkdir", "(", "OUTPUT_FOLDER", ")", "\n", "\n", "", "for", "scan_name", "in", "TRAIN_SCAN_NAMES", ":", "\n", "        ", "print", "(", "'-'", "*", "20", "+", "'begin'", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "scan_name", ")", "\n", "output_filename_prefix", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_FOLDER", ",", "scan_name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "output_filename_prefix", "+", "'_vert.npy'", ")", ":", "\n", "            ", "print", "(", "'File already exists. skipping.'", ")", "\n", "print", "(", "'-'", "*", "20", "+", "'done'", ")", "\n", "continue", "\n", "", "try", ":", "\n", "            ", "export_one_scan", "(", "scan_name", ",", "output_filename_prefix", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'Failed export scan: %s'", "%", "(", "scan_name", ")", ")", "\n", "#export_one_scan(scan_name, output_filename_prefix)    ", "\n", "", "print", "(", "'-'", "*", "20", "+", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.matterport_utils.represents_int": [[25, 32], ["int"], "function", ["None"], ["", "def", "represents_int", "(", "s", ")", ":", "\n", "    ", "''' if string s represents an int. '''", "\n", "try", ":", "\n", "        ", "int", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.matterport_utils.modelnet40_to_id": [[34, 45], ["open().readlines", "open().readlines.index", "open"], "function", ["None"], ["", "", "def", "modelnet40_to_id", "(", "modelname", ")", ":", "\n", "    ", "names", "=", "open", "(", "'modelnet40_shape_names.txt'", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "names", "=", "[", "name", "[", ":", "-", "1", "]", "for", "name", "in", "names", "]", "\n", "#print(names)", "\n", "if", "modelname", "in", "names", ":", "\n", "# airplane->xbox: 1->40", "\n", "        ", "idx", "=", "names", ".", "index", "(", "modelname", ")", "\n", "return", "idx", "+", "1", "\n", "", "else", ":", "\n", "# others: 0", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.matterport_utils.read_label_mapping": [[47, 55], ["os.path.isfile", "dict", "open", "csv.DictReader", "matterport_utils.modelnet40_to_id"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.modelnet40_to_id"], ["", "", "def", "read_label_mapping", "(", "filename", ",", "label_from", "=", "'category'", ",", "label_to", "=", "'ModelNet40'", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "mapping", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "csvfile", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ",", "delimiter", "=", "'\\t'", ")", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "mapping", "[", "row", "[", "label_from", "]", "]", "=", "modelnet40_to_id", "(", "row", "[", "label_to", "]", ")", "\n", "", "", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.matterport_utils.read_mesh_vertices": [[57, 69], ["os.path.isfile", "open", "PlyData.read", "np.zeros"], "function", ["None"], ["", "def", "read_mesh_vertices", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ for each vertex.\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "'vertex'", "]", ".", "count", "\n", "vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'x'", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'y'", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'z'", "]", "\n", "", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.matterport_utils.read_mesh_vertices_rgb": [[70, 86], ["os.path.isfile", "open", "PlyData.read", "np.zeros"], "function", ["None"], ["", "def", "read_mesh_vertices_rgb", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ RGB for each vertex.\n    Note: RGB values are in 0-255\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "'vertex'", "]", ".", "count", "\n", "vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "6", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'x'", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'y'", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'z'", "]", "\n", "vertices", "[", ":", ",", "3", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'red'", "]", "\n", "vertices", "[", ":", ",", "4", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'green'", "]", "\n", "vertices", "[", ":", ",", "5", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'blue'", "]", "\n", "", "return", "vertices", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.matterport_utils.rotz": [[88, 95], ["np.cos", "np.sin", "np.array"], "function", ["None"], ["", "def", "rotz", "(", "t", ")", ":", "\n", "    ", "\"\"\"Rotation about the z-axis.\"\"\"", "\n", "c", "=", "np", ".", "cos", "(", "t", ")", "\n", "s", "=", "np", ".", "sin", "(", "t", ")", "\n", "return", "np", ".", "array", "(", "[", "[", "c", ",", "-", "s", ",", "0", "]", ",", "\n", "[", "s", ",", "c", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.meta_data.object_property.get_MER": [[11, 18], ["xys.astype.astype", "cv2.minAreaRect"], "function", ["None"], ["def", "get_MER", "(", "points", ")", ":", "\n", "    ", "xys", "=", "points", "[", ":", ",", "0", ":", "2", "]", "*", "1000", "\n", "xys", "=", "xys", ".", "astype", "(", "'int'", ")", "\n", "(", "x_center", ",", "y_center", ")", ",", "(", "x_size", ",", "y_size", ")", ",", "angle", "=", "cv2", ".", "minAreaRect", "(", "xys", ")", "\n", "x_center", "/=", "1e3", ";", "y_center", "/=", "1e3", ";", "y_size", "/=", "1e3", ";", "x_size", "/=", "1e3", "\n", "angle", "=", "angle", "/", "180", "*", "np", ".", "pi", "\n", "return", "(", "x_center", ",", "y_center", ")", ",", "(", "x_size", ",", "y_size", ")", ",", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.meta_data.object_property.read_aggregation": [[20, 37], ["os.path.isfile", "open", "json.load", "len", "range", "label_to_segs[].extend"], "function", ["None"], ["", "def", "read_aggregation", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "object_id_to_segs", "=", "{", "}", "\n", "label_to_segs", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "'segGroups'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'objectId'", "]", "+", "1", "# instance ids should be 1-indexed", "\n", "label", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'label'", "]", "\n", "segs", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'segments'", "]", "\n", "object_id_to_segs", "[", "object_id", "]", "=", "segs", "\n", "if", "label", "in", "label_to_segs", ":", "\n", "                ", "label_to_segs", "[", "label", "]", ".", "extend", "(", "segs", ")", "\n", "", "else", ":", "\n", "                ", "label_to_segs", "[", "label", "]", "=", "segs", "\n", "", "", "", "return", "object_id_to_segs", ",", "label_to_segs", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.meta_data.object_property.get_id_to_label": [[39, 50], ["os.path.isfile", "open", "json.load", "len", "range"], "function", ["None"], ["", "def", "get_id_to_label", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "id_to_label", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "'segGroups'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'objectId'", "]", "+", "1", "\n", "label", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'label'", "]", "\n", "id_to_label", "[", "object_id", "]", "=", "label", "\n", "", "", "return", "id_to_label", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.meta_data.object_property.read_segmentation": [[52, 65], ["os.path.isfile", "open", "json.load", "len", "range", "seg_to_verts[].append"], "function", ["None"], ["", "def", "read_segmentation", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "seg_to_verts", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_verts", "=", "len", "(", "data", "[", "'segIndices'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_verts", ")", ":", "\n", "            ", "seg_id", "=", "data", "[", "'segIndices'", "]", "[", "i", "]", "\n", "if", "seg_id", "in", "seg_to_verts", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", "=", "[", "i", "]", "\n", "", "", "", "return", "seg_to_verts", ",", "num_verts", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.meta_data.object_property.export": [[67, 135], ["matterport_utils.read_label_mapping", "object_property.get_id_to_label", "matterport_utils.read_mesh_vertices_rgb", "object_property.read_aggregation", "object_property.read_segmentation", "numpy.zeros", "label_to_segs.items", "numpy.zeros", "len", "object_id_to_segs.items", "numpy.zeros", "numpy.unique", "len", "numpy.min", "numpy.max", "object_property.get_MER", "list", "len", "object_id_to_segs.keys", "[].append", "[].append", "[].append", "[].append", "[].append", "[].append"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_label_mapping", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.get_id_to_label", "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_mesh_vertices_rgb", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_aggregation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_segmentation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.get_MER"], ["", "def", "export", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "label_map_file", ",", "prop_dict", ")", ":", "\n", "    ", "\"\"\" points are XYZ RGB (RGB in 0-255),\n    semantic label as nyu40 ids,\n    instance label as 1-#instance,\n    box as (cx,cy,cz,dx,dy,dz,semantic_label)\n    \"\"\"", "\n", "label_map", "=", "matterport_utils", ".", "read_label_mapping", "(", "label_map_file", ",", "\n", "label_from", "=", "'raw_category'", ",", "label_to", "=", "'ModelNet40'", ")", "\n", "id_to_label", "=", "get_id_to_label", "(", "agg_file", ")", "\n", "mesh_vertices", "=", "matterport_utils", ".", "read_mesh_vertices_rgb", "(", "mesh_file", ")", "\n", "\n", "# Load semantic and instance labels", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "label_map", "[", "label", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "try", ":", "\n", "                ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "\n", "", "", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "object_id_to_segs", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "for", "seg", "in", "segs", ":", "\n", "            ", "try", ":", "\n", "                ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "if", "label_ids", "[", "verts", "]", "[", "0", "]", "==", "0", ":", "\n", "                ", "instance_ids", "[", "verts", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "instance_ids", "[", "verts", "]", "=", "object_id", "\n", "\n", "", "", "", "instance_bboxes", "=", "np", ".", "zeros", "(", "(", "num_instances", ",", "8", ")", ")", "\n", "for", "obj_id", "in", "object_id_to_segs", ":", "\n", "        ", "obj_pc", "=", "mesh_vertices", "[", "instance_ids", "==", "obj_id", ",", "0", ":", "3", "]", "\n", "if", "len", "(", "obj_pc", ")", "==", "0", ":", "continue", "\n", "modelnet_id", "=", "label_map", "[", "id_to_label", "[", "obj_id", "]", "]", "\n", "if", "modelnet_id", "==", "0", ":", "\n", "            ", "continue", "\n", "", "num_point", "=", "len", "(", "obj_pc", ")", "\n", "# Compute axis aligned box", "\n", "# An axis aligned bounding box is parameterized by", "\n", "# (cx,cy,cz) and (dx,dy,dz) and label id", "\n", "# where (cx,cy,cz) is the center point of the box,", "\n", "# dx is the x-axis length of the box.", "\n", "zmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "(", "x_center", ",", "y_center", ")", ",", "(", "x_size", ",", "y_size", ")", ",", "angle", "=", "get_MER", "(", "obj_pc", ")", "\n", "dx", "=", "x_size", "\n", "dy", "=", "y_size", "\n", "dz", "=", "zmax", "-", "zmin", "\n", "V", "=", "dx", "*", "dy", "*", "dz", "\n", "if", "modelnet_id", "in", "prop_dict", ":", "\n", "            ", "if", "dy", ">", "dx", ":", "\n", "                ", "prop_dict", "[", "modelnet_id", "]", "[", "3", "]", ".", "append", "(", "dx", ")", "\n", "prop_dict", "[", "modelnet_id", "]", "[", "4", "]", ".", "append", "(", "dy", ")", "\n", "prop_dict", "[", "modelnet_id", "]", "[", "5", "]", ".", "append", "(", "dz", ")", "\n", "", "if", "dx", ">=", "dy", ":", "\n", "                ", "prop_dict", "[", "modelnet_id", "]", "[", "0", "]", ".", "append", "(", "dx", ")", "\n", "prop_dict", "[", "modelnet_id", "]", "[", "1", "]", ".", "append", "(", "dy", ")", "\n", "prop_dict", "[", "modelnet_id", "]", "[", "2", "]", ".", "append", "(", "dz", ")", "\n", "", "", "else", ":", "\n", "            ", "prop_dict", "[", "modelnet_id", "]", "=", "[", "[", "dx", "]", ",", "[", "dy", "]", ",", "[", "dz", "]", ",", "[", "dx", "]", ",", "[", "dy", "]", ",", "[", "dz", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.meta_data.get_train_size.get_MER": [[11, 18], ["xys.astype.astype", "cv2.minAreaRect"], "function", ["None"], ["def", "get_MER", "(", "points", ")", ":", "\n", "    ", "xys", "=", "points", "[", ":", ",", "0", ":", "2", "]", "*", "1000", "\n", "xys", "=", "xys", ".", "astype", "(", "'int'", ")", "\n", "(", "x_center", ",", "y_center", ")", ",", "(", "x_size", ",", "y_size", ")", ",", "angle", "=", "cv2", ".", "minAreaRect", "(", "xys", ")", "\n", "x_center", "/=", "1e3", ";", "y_center", "/=", "1e3", ";", "y_size", "/=", "1e3", ";", "x_size", "/=", "1e3", "\n", "angle", "=", "angle", "/", "180", "*", "np", ".", "pi", "\n", "return", "(", "x_center", ",", "y_center", ")", ",", "(", "x_size", ",", "y_size", ")", ",", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.meta_data.get_train_size.read_aggregation": [[20, 37], ["os.path.isfile", "open", "json.load", "len", "range", "label_to_segs[].extend"], "function", ["None"], ["", "def", "read_aggregation", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "object_id_to_segs", "=", "{", "}", "\n", "label_to_segs", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "'segGroups'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'objectId'", "]", "+", "1", "# instance ids should be 1-indexed", "\n", "label", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'label'", "]", "\n", "segs", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'segments'", "]", "\n", "object_id_to_segs", "[", "object_id", "]", "=", "segs", "\n", "if", "label", "in", "label_to_segs", ":", "\n", "                ", "label_to_segs", "[", "label", "]", ".", "extend", "(", "segs", ")", "\n", "", "else", ":", "\n", "                ", "label_to_segs", "[", "label", "]", "=", "segs", "\n", "", "", "", "return", "object_id_to_segs", ",", "label_to_segs", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.meta_data.get_train_size.get_id_to_label": [[39, 50], ["os.path.isfile", "open", "json.load", "len", "range"], "function", ["None"], ["", "def", "get_id_to_label", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "id_to_label", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "'segGroups'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'objectId'", "]", "+", "1", "\n", "label", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'label'", "]", "\n", "id_to_label", "[", "object_id", "]", "=", "label", "\n", "", "", "return", "id_to_label", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.meta_data.get_train_size.read_segmentation": [[52, 65], ["os.path.isfile", "open", "json.load", "len", "range", "seg_to_verts[].append"], "function", ["None"], ["", "def", "read_segmentation", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "seg_to_verts", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_verts", "=", "len", "(", "data", "[", "'segIndices'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_verts", ")", ":", "\n", "            ", "seg_id", "=", "data", "[", "'segIndices'", "]", "[", "i", "]", "\n", "if", "seg_id", "in", "seg_to_verts", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", "=", "[", "i", "]", "\n", "", "", "", "return", "seg_to_verts", ",", "num_verts", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.meta_data.get_train_size.export": [[67, 123], ["matterport_utils.read_label_mapping", "get_train_size.get_id_to_label", "matterport_utils.read_mesh_vertices_rgb", "get_train_size.read_aggregation", "get_train_size.read_segmentation", "numpy.zeros", "label_to_segs.items", "numpy.zeros", "len", "object_id_to_segs.items", "numpy.zeros", "numpy.unique", "numpy.min", "numpy.max", "get_train_size.get_MER", "list", "len", "[].append", "[].append", "[].append", "object_id_to_segs.keys"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_label_mapping", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.get_id_to_label", "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_mesh_vertices_rgb", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_aggregation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_segmentation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.get_MER"], ["", "def", "export", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "label_map_file", ",", "prop_dict", ")", ":", "\n", "    ", "\"\"\" points are XYZ RGB (RGB in 0-255),\n    semantic label as nyu40 ids,\n    instance label as 1-#instance,\n    box as (cx,cy,cz,dx,dy,dz,semantic_label)\n    \"\"\"", "\n", "label_map", "=", "matterport_utils", ".", "read_label_mapping", "(", "label_map_file", ",", "\n", "label_from", "=", "'raw_category'", ",", "label_to", "=", "'ModelNet40'", ")", "\n", "id_to_label", "=", "get_id_to_label", "(", "agg_file", ")", "\n", "mesh_vertices", "=", "matterport_utils", ".", "read_mesh_vertices_rgb", "(", "mesh_file", ")", "\n", "\n", "# Load semantic and instance labels", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "label_map", "[", "label", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "try", ":", "\n", "                ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "\n", "", "", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "object_id_to_segs", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "for", "seg", "in", "segs", ":", "\n", "            ", "try", ":", "\n", "                ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "if", "label_ids", "[", "verts", "]", "[", "0", "]", "==", "0", ":", "\n", "                ", "instance_ids", "[", "verts", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "instance_ids", "[", "verts", "]", "=", "object_id", "\n", "\n", "", "", "", "instance_bboxes", "=", "np", ".", "zeros", "(", "(", "num_instances", ",", "8", ")", ")", "\n", "for", "obj_id", "in", "object_id_to_segs", ":", "\n", "        ", "obj_pc", "=", "mesh_vertices", "[", "instance_ids", "==", "obj_id", ",", "0", ":", "3", "]", "\n", "if", "len", "(", "obj_pc", ")", "==", "0", ":", "continue", "\n", "modelnet_id", "=", "label_map", "[", "id_to_label", "[", "obj_id", "]", "]", "\n", "if", "modelnet_id", "==", "0", ":", "\n", "            ", "continue", "\n", "", "zmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "(", "x_center", ",", "y_center", ")", ",", "(", "x_size", ",", "y_size", ")", ",", "angle", "=", "get_MER", "(", "obj_pc", ")", "\n", "dx", "=", "x_size", "\n", "dy", "=", "y_size", "\n", "dz", "=", "zmax", "-", "zmin", "\n", "if", "modelnet_id", "in", "prop_dict", ":", "\n", "            ", "prop_dict", "[", "modelnet_id", "]", "[", "0", "]", ".", "append", "(", "dx", ")", "\n", "prop_dict", "[", "modelnet_id", "]", "[", "1", "]", ".", "append", "(", "dy", ")", "\n", "prop_dict", "[", "modelnet_id", "]", "[", "2", "]", ".", "append", "(", "dz", ")", "\n", "", "else", ":", "\n", "            ", "prop_dict", "[", "modelnet_id", "]", "=", "[", "[", "dx", "]", ",", "[", "dy", "]", ",", "[", "dz", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.batch_load_scannet_data_virtual.export_one_scan": [[26, 53], ["scannet_scene_synthesis.export_for_md40", "numpy.logical_not", "len", "print", "numpy.in1d", "print", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.in1d", "numpy.unique", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.export_for_md40"], ["def", "export_one_scan", "(", "scan_name", ",", "output_filename_prefix", ")", ":", "\n", "    ", "mesh_vertices", ",", "semantic_labels", ",", "instance_labels", ",", "instance_bboxes", "=", "export_for_md40", "(", "scan_name", ",", "Is_density", "=", "True", ",", "Is_HPR", "=", "False", ",", "Is_floor", "=", "True", ")", "\n", "\n", "mask", "=", "np", ".", "logical_not", "(", "np", ".", "in1d", "(", "semantic_labels", ",", "DONOTCARE_CLASS_IDS", ")", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "mask", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "mask", "]", "\n", "instance_labels", "=", "instance_labels", "[", "mask", "]", "\n", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "instance_labels", ")", ")", "\n", "print", "(", "'Num of instances: '", ",", "num_instances", ")", "\n", "\n", "bbox_mask", "=", "np", ".", "in1d", "(", "instance_bboxes", "[", ":", ",", "-", "1", "]", ",", "OBJ_CLASS_IDS", ")", "\n", "instance_bboxes", "=", "instance_bboxes", "[", "bbox_mask", ",", ":", "]", "\n", "print", "(", "'Num of care instances: '", ",", "instance_bboxes", ".", "shape", "[", "0", "]", ")", "\n", "\n", "N", "=", "mesh_vertices", ".", "shape", "[", "0", "]", "\n", "if", "N", ">", "MAX_NUM_POINT", ":", "\n", "        ", "choices", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "MAX_NUM_POINT", ",", "replace", "=", "False", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "choices", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "choices", "]", "\n", "instance_labels", "=", "instance_labels", "[", "choices", "]", "\n", "\n", "", "np", ".", "save", "(", "output_filename_prefix", "+", "'_vert.npy'", ",", "mesh_vertices", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_sem_label.npy'", ",", "semantic_labels", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_ins_label.npy'", ",", "instance_labels", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_bbox.npy'", ",", "instance_bboxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.batch_load_scannet_data_virtual.batch_export": [[54, 74], ["os.path.exists", "print", "os.mkdir", "print", "print", "print", "os.path.join", "os.path.isfile", "batch_load_scannet_data_virtual.export_one_scan", "print", "datetime.datetime.now", "print", "print"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.batch_load_scannet_data.export_one_scan"], ["", "def", "batch_export", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "OUTPUT_FOLDER", ")", ":", "\n", "        ", "print", "(", "'Creating new data folder: {}'", ".", "format", "(", "OUTPUT_FOLDER", ")", ")", "\n", "os", ".", "mkdir", "(", "OUTPUT_FOLDER", ")", "\n", "\n", "", "for", "scan_name", "in", "TRAIN_SCAN_NAMES", ":", "\n", "        ", "print", "(", "'-'", "*", "20", "+", "'begin'", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "scan_name", ")", "\n", "output_filename_prefix", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_FOLDER", ",", "scan_name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "output_filename_prefix", "+", "'_vert.npy'", ")", ":", "\n", "            ", "print", "(", "'File already exists. skipping.'", ")", "\n", "print", "(", "'-'", "*", "20", "+", "'done'", ")", "\n", "continue", "\n", "", "export_one_scan", "(", "scan_name", ",", "output_filename_prefix", ")", "\n", "#try:            ", "\n", "#    export_one_scan(scan_name, output_filename_prefix)", "\n", "#except:", "\n", "#    print('Failed export scan: %s'%(scan_name))            ", "\n", "print", "(", "'-'", "*", "20", "+", "'done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.batch_load_scannet_data.export_one_scan": [[26, 57], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "load_scannet_data.export_md40", "numpy.logical_not", "len", "print", "numpy.in1d", "print", "numpy.save", "numpy.save", "numpy.save", "numpy.save", "numpy.in1d", "numpy.unique", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.load_scannet_data.export_md40"], ["def", "export_one_scan", "(", "scan_name", ",", "output_filename_prefix", ")", ":", "\n", "    ", "mesh_file", "=", "os", ".", "path", ".", "join", "(", "SCANNET_DIR", ",", "scan_name", ",", "scan_name", "+", "'_vh_clean_2.ply'", ")", "\n", "agg_file", "=", "os", ".", "path", ".", "join", "(", "SCANNET_DIR", ",", "scan_name", ",", "scan_name", "+", "'.aggregation.json'", ")", "\n", "seg_file", "=", "os", ".", "path", ".", "join", "(", "SCANNET_DIR", ",", "scan_name", ",", "scan_name", "+", "'_vh_clean_2.0.010000.segs.json'", ")", "\n", "meta_file", "=", "os", ".", "path", ".", "join", "(", "SCANNET_DIR", ",", "scan_name", ",", "scan_name", "+", "'.txt'", ")", "# includes axisAlignment info for the train set scans.   ", "\n", "mesh_vertices", ",", "semantic_labels", ",", "instance_labels", ",", "instance_bboxes", ",", "instance2semantic", "=", "export_md40", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ")", "\n", "\n", "mask", "=", "np", ".", "logical_not", "(", "np", ".", "in1d", "(", "semantic_labels", ",", "DONOTCARE_CLASS_IDS", ")", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "mask", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "mask", "]", "\n", "instance_labels", "=", "instance_labels", "[", "mask", "]", "\n", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "instance_labels", ")", ")", "\n", "print", "(", "'Num of instances: '", ",", "num_instances", ")", "\n", "\n", "bbox_mask", "=", "np", ".", "in1d", "(", "instance_bboxes", "[", ":", ",", "-", "1", "]", ",", "OBJ_CLASS_IDS", ")", "\n", "instance_bboxes", "=", "instance_bboxes", "[", "bbox_mask", ",", ":", "]", "\n", "print", "(", "'Num of care instances: '", ",", "instance_bboxes", ".", "shape", "[", "0", "]", ")", "\n", "\n", "N", "=", "mesh_vertices", ".", "shape", "[", "0", "]", "\n", "if", "N", ">", "MAX_NUM_POINT", ":", "\n", "        ", "choices", "=", "np", ".", "random", ".", "choice", "(", "N", ",", "MAX_NUM_POINT", ",", "replace", "=", "False", ")", "\n", "mesh_vertices", "=", "mesh_vertices", "[", "choices", ",", ":", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "choices", "]", "\n", "instance_labels", "=", "instance_labels", "[", "choices", "]", "\n", "\n", "", "np", ".", "save", "(", "output_filename_prefix", "+", "'_vert.npy'", ",", "mesh_vertices", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_sem_label.npy'", ",", "semantic_labels", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_ins_label.npy'", ",", "instance_labels", ")", "\n", "np", ".", "save", "(", "output_filename_prefix", "+", "'_bbox.npy'", ",", "instance_bboxes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.batch_load_scannet_data.batch_export": [[58, 78], ["os.path.exists", "print", "os.mkdir", "print", "print", "print", "os.path.join", "os.path.isfile", "batch_load_scannet_data.export_one_scan", "print", "datetime.datetime.now", "print", "print"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.batch_load_scannet_data.export_one_scan"], ["", "def", "batch_export", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "OUTPUT_FOLDER", ")", ":", "\n", "        ", "print", "(", "'Creating new data folder: {}'", ".", "format", "(", "OUTPUT_FOLDER", ")", ")", "\n", "os", ".", "mkdir", "(", "OUTPUT_FOLDER", ")", "\n", "\n", "", "for", "scan_name", "in", "TRAIN_SCAN_NAMES", ":", "\n", "        ", "print", "(", "'-'", "*", "20", "+", "'begin'", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "scan_name", ")", "\n", "output_filename_prefix", "=", "os", ".", "path", ".", "join", "(", "OUTPUT_FOLDER", ",", "scan_name", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "output_filename_prefix", "+", "'_vert.npy'", ")", ":", "\n", "            ", "print", "(", "'File already exists. skipping.'", ")", "\n", "print", "(", "'-'", "*", "20", "+", "'done'", ")", "\n", "continue", "\n", "", "export_one_scan", "(", "scan_name", ",", "output_filename_prefix", ")", "\n", "print", "(", "'-'", "*", "20", "+", "'done'", ")", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "batch_export", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig.__init__": [[16, 31], ["numpy.array", "range", "numpy.load", "enumerate", "os.path.join", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_class", "=", "18", "\n", "self", ".", "num_heading_bin", "=", "1", "\n", "self", ".", "num_size_cluster", "=", "18", "\n", "\n", "self", ".", "type2class", "=", "{", "'cabinet'", ":", "0", ",", "'bed'", ":", "1", ",", "'chair'", ":", "2", ",", "'sofa'", ":", "3", ",", "'table'", ":", "4", ",", "'door'", ":", "5", ",", "\n", "'window'", ":", "6", ",", "'bookshelf'", ":", "7", ",", "'picture'", ":", "8", ",", "'counter'", ":", "9", ",", "'desk'", ":", "10", ",", "'curtain'", ":", "11", ",", "\n", "'refrigerator'", ":", "12", ",", "'showercurtrain'", ":", "13", ",", "'toilet'", ":", "14", ",", "'sink'", ":", "15", ",", "'bathtub'", ":", "16", ",", "'garbagebin'", ":", "17", "}", "\n", "self", ".", "class2type", "=", "{", "self", ".", "type2class", "[", "t", "]", ":", "t", "for", "t", "in", "self", ".", "type2class", "}", "\n", "self", ".", "nyu40ids", "=", "np", ".", "array", "(", "[", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "14", ",", "16", ",", "24", ",", "28", ",", "33", ",", "34", ",", "36", ",", "39", "]", ")", "\n", "self", ".", "nyu40id2class", "=", "{", "nyu40id", ":", "i", "for", "i", ",", "nyu40id", "in", "enumerate", "(", "list", "(", "self", ".", "nyu40ids", ")", ")", "}", "\n", "self", ".", "mean_size_arr", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'scannet/meta_data/scannet_means.npz'", ")", ")", "[", "'arr_0'", "]", "\n", "self", ".", "type_mean_size", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_size_cluster", ")", ":", "\n", "            ", "self", ".", "type_mean_size", "[", "self", ".", "class2type", "[", "i", "]", "]", "=", "self", ".", "mean_size_arr", "[", "i", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig.angle2class": [[32, 44], ["None"], "methods", ["None"], ["", "", "def", "angle2class", "(", "self", ",", "angle", ")", ":", "\n", "        ", "''' Convert continuous angle to discrete class\n            [optinal] also small regression number from  \n            class center angle to current angle.\n           \n            angle is from 0-2pi (or -pi~pi), class center at 0, 1*(2pi/N), 2*(2pi/N) ...  (N-1)*(2pi/N)\n            return is class of int32 of 0,1,...,N-1 and a number such that\n                class*(2pi/N) + number = angle\n\n            NOT USED.\n        '''", "\n", "assert", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig.class2angle": [[45, 50], ["None"], "methods", ["None"], ["", "def", "class2angle", "(", "self", ",", "pred_cls", ",", "residual", ",", "to_label_format", "=", "True", ")", ":", "\n", "        ", "''' Inverse function to angle2class.\n        \n        As ScanNet only has axis-alined boxes so angles are always 0. '''", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig.size2class": [[51, 56], ["None"], "methods", ["None"], ["", "def", "size2class", "(", "self", ",", "size", ",", "type_name", ")", ":", "\n", "        ", "''' Convert 3D box size (l,w,h) to size class and size residual '''", "\n", "size_class", "=", "self", ".", "type2class", "[", "type_name", "]", "\n", "size_residual", "=", "size", "-", "self", ".", "type_mean_size", "[", "type_name", "]", "\n", "return", "size_class", ",", "size_residual", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig.class2size": [[57, 60], ["None"], "methods", ["None"], ["", "def", "class2size", "(", "self", ",", "pred_cls", ",", "residual", ")", ":", "\n", "        ", "''' Inverse function to size2class '''", "\n", "return", "self", ".", "mean_size_arr", "[", "pred_cls", ",", ":", "]", "+", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig.param2obb": [[61, 69], ["model_util_scannet.ScannetDatasetConfig.class2angle", "model_util_scannet.ScannetDatasetConfig.class2size", "numpy.zeros", "int"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2angle", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2size"], ["", "def", "param2obb", "(", "self", ",", "center", ",", "heading_class", ",", "heading_residual", ",", "size_class", ",", "size_residual", ")", ":", "\n", "        ", "heading_angle", "=", "self", ".", "class2angle", "(", "heading_class", ",", "heading_residual", ")", "\n", "box_size", "=", "self", ".", "class2size", "(", "int", "(", "size_class", ")", ",", "size_residual", ")", "\n", "obb", "=", "np", ".", "zeros", "(", "(", "7", ",", ")", ")", "\n", "obb", "[", "0", ":", "3", "]", "=", "center", "\n", "obb", "[", "3", ":", "6", "]", "=", "box_size", "\n", "obb", "[", "6", "]", "=", "heading_angle", "*", "-", "1", "\n", "return", "obb", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.__init__": [[72, 88], ["numpy.array", "range", "numpy.load", "enumerate", "os.path.join", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_class", "=", "22", "\n", "self", ".", "num_heading_bin", "=", "1", "\n", "self", ".", "num_size_cluster", "=", "22", "\n", "\n", "self", ".", "type2class", "=", "{", "'bathtub'", ":", "0", ",", "'bed'", ":", "1", ",", "'bench'", ":", "2", ",", "'bookshelf'", ":", "3", ",", "'bottle'", ":", "4", ",", "'chair'", ":", "5", ",", "\n", "'cup'", ":", "6", ",", "'curtain'", ":", "7", ",", "'desk'", ":", "8", ",", "'door'", ":", "9", ",", "'dresser'", ":", "10", ",", "'keyboard'", ":", "11", ",", "'lamp'", ":", "12", ",", "'laptop'", ":", "13", ",", "'monitor'", ":", "14", ",", "'night_stand'", ":", "15", ",", "\n", "'plant'", ":", "16", ",", "'sofa'", ":", "17", ",", "'stool'", ":", "18", ",", "'table'", ":", "19", ",", "'toilet'", ":", "20", ",", "'wardrobe'", ":", "21", "}", "\n", "self", ".", "class2type", "=", "{", "self", ".", "type2class", "[", "t", "]", ":", "t", "for", "t", "in", "self", ".", "type2class", "}", "\n", "# to avoid error, use \"nyu\" as the normal config, actually it should be \"modelnet\"", "\n", "self", ".", "nyu40ids", "=", "np", ".", "array", "(", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "19", ",", "20", ",", "21", ",", "23", ",", "24", ",", "27", ",", "31", ",", "33", ",", "34", ",", "36", ",", "39", "]", ")", "\n", "self", ".", "nyu40id2class", "=", "{", "nyu40id", ":", "i", "for", "i", ",", "nyu40id", "in", "enumerate", "(", "list", "(", "self", ".", "nyu40ids", ")", ")", "}", "\n", "self", ".", "mean_size_arr", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'scannet/meta_data/scannet_means_md40.npz'", ")", ")", "[", "'arr_0'", "]", "\n", "self", ".", "type_mean_size", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "num_size_cluster", ")", ":", "\n", "            ", "self", ".", "type_mean_size", "[", "self", ".", "class2type", "[", "i", "]", "]", "=", "self", ".", "mean_size_arr", "[", "i", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.angle2class": [[89, 101], ["None"], "methods", ["None"], ["", "", "def", "angle2class", "(", "self", ",", "angle", ")", ":", "\n", "        ", "''' Convert continuous angle to discrete class\n            [optinal] also small regression number from  \n            class center angle to current angle.\n           \n            angle is from 0-2pi (or -pi~pi), class center at 0, 1*(2pi/N), 2*(2pi/N) ...  (N-1)*(2pi/N)\n            return is class of int32 of 0,1,...,N-1 and a number such that\n                class*(2pi/N) + number = angle\n\n            NOT USED.\n        '''", "\n", "assert", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2angle": [[102, 107], ["None"], "methods", ["None"], ["", "def", "class2angle", "(", "self", ",", "pred_cls", ",", "residual", ",", "to_label_format", "=", "True", ")", ":", "\n", "        ", "''' Inverse function to angle2class.\n        \n        As ScanNet only has axis-alined boxes so angles are always 0. '''", "\n", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.size2class": [[108, 113], ["None"], "methods", ["None"], ["", "def", "size2class", "(", "self", ",", "size", ",", "type_name", ")", ":", "\n", "        ", "''' Convert 3D box size (l,w,h) to size class and size residual '''", "\n", "size_class", "=", "self", ".", "type2class", "[", "type_name", "]", "\n", "size_residual", "=", "size", "-", "self", ".", "type_mean_size", "[", "type_name", "]", "\n", "return", "size_class", ",", "size_residual", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2size": [[114, 117], ["None"], "methods", ["None"], ["", "def", "class2size", "(", "self", ",", "pred_cls", ",", "residual", ",", "ratio", "=", "1.0", ")", ":", "\n", "        ", "''' Inverse function to size2class '''", "\n", "return", "(", "self", ".", "mean_size_arr", "[", "pred_cls", ",", ":", "]", "+", "residual", ")", "*", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.param2obb": [[118, 126], ["model_util_scannet.ScannetDatasetConfig_md40.class2angle", "model_util_scannet.ScannetDatasetConfig_md40.class2size", "numpy.zeros", "int"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2angle", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2size"], ["", "def", "param2obb", "(", "self", ",", "center", ",", "heading_class", ",", "heading_residual", ",", "size_class", ",", "size_residual", ")", ":", "\n", "        ", "heading_angle", "=", "self", ".", "class2angle", "(", "heading_class", ",", "heading_residual", ")", "\n", "box_size", "=", "self", ".", "class2size", "(", "int", "(", "size_class", ")", ",", "size_residual", ")", "\n", "obb", "=", "np", ".", "zeros", "(", "(", "7", ",", ")", ")", "\n", "obb", "[", "0", ":", "3", "]", "=", "center", "\n", "obb", "[", "3", ":", "6", "]", "=", "box_size", "\n", "obb", "[", "6", "]", "=", "heading_angle", "*", "-", "1", "\n", "return", "obb", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.rotate_aligned_boxes": [[128, 150], ["numpy.dot", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.stack", "numpy.concatenate", "numpy.transpose", "numpy.zeros", "numpy.dot", "numpy.max", "numpy.max", "numpy.transpose"], "function", ["None"], ["", "", "def", "rotate_aligned_boxes", "(", "input_boxes", ",", "rot_mat", ")", ":", "\n", "    ", "centers", ",", "lengths", "=", "input_boxes", "[", ":", ",", "0", ":", "3", "]", ",", "input_boxes", "[", ":", ",", "3", ":", "6", "]", "\n", "new_centers", "=", "np", ".", "dot", "(", "centers", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "\n", "dx", ",", "dy", "=", "lengths", "[", ":", ",", "0", "]", "/", "2.0", ",", "lengths", "[", ":", ",", "1", "]", "/", "2.0", "\n", "new_x", "=", "np", ".", "zeros", "(", "(", "dx", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "new_y", "=", "np", ".", "zeros", "(", "(", "dx", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "\n", "for", "i", ",", "crnr", "in", "enumerate", "(", "[", "(", "-", "1", ",", "-", "1", ")", ",", "(", "1", ",", "-", "1", ")", ",", "(", "1", ",", "1", ")", ",", "(", "-", "1", ",", "1", ")", "]", ")", ":", "\n", "        ", "crnrs", "=", "np", ".", "zeros", "(", "(", "dx", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "crnrs", "[", ":", ",", "0", "]", "=", "crnr", "[", "0", "]", "*", "dx", "\n", "crnrs", "[", ":", ",", "1", "]", "=", "crnr", "[", "1", "]", "*", "dy", "\n", "crnrs", "=", "np", ".", "dot", "(", "crnrs", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "new_x", "[", ":", ",", "i", "]", "=", "crnrs", "[", ":", ",", "0", "]", "\n", "new_y", "[", ":", ",", "i", "]", "=", "crnrs", "[", ":", ",", "1", "]", "\n", "\n", "\n", "", "new_dx", "=", "2.0", "*", "np", ".", "max", "(", "new_x", ",", "1", ")", "\n", "new_dy", "=", "2.0", "*", "np", ".", "max", "(", "new_y", ",", "1", ")", "\n", "new_lengths", "=", "np", ".", "stack", "(", "(", "new_dx", ",", "new_dy", ",", "lengths", "[", ":", ",", "2", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "return", "np", ".", "concatenate", "(", "[", "new_centers", ",", "new_lengths", "]", ",", "axis", "=", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.load_scannet_data.read_aggregation": [[27, 44], ["os.path.isfile", "open", "json.load", "len", "range", "label_to_segs[].extend"], "function", ["None"], ["    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "object_id_to_segs", "=", "{", "}", "\n", "label_to_segs", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "'segGroups'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'objectId'", "]", "+", "1", "# instance ids should be 1-indexed", "\n", "label", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'label'", "]", "\n", "segs", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'segments'", "]", "\n", "object_id_to_segs", "[", "object_id", "]", "=", "segs", "\n", "if", "label", "in", "label_to_segs", ":", "\n", "                ", "label_to_segs", "[", "label", "]", ".", "extend", "(", "segs", ")", "\n", "", "else", ":", "\n", "                ", "label_to_segs", "[", "label", "]", "=", "segs", "\n", "", "", "", "return", "object_id_to_segs", ",", "label_to_segs", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.load_scannet_data.read_segmentation": [[46, 59], ["os.path.isfile", "open", "json.load", "len", "range", "seg_to_verts[].append"], "function", ["None"], ["    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "seg_to_verts", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_verts", "=", "len", "(", "data", "[", "'segIndices'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_verts", ")", ":", "\n", "            ", "seg_id", "=", "data", "[", "'segIndices'", "]", "[", "i", "]", "\n", "if", "seg_id", "in", "seg_to_verts", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", "=", "[", "i", "]", "\n", "", "", "", "return", "seg_to_verts", ",", "num_verts", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.load_scannet_data.export": [[61, 131], ["scannet_utils.read_label_mapping", "scannet_utils.read_mesh_vertices_rgb", "open().readlines", "np.array().reshape", "np.ones", "np.dot", "load_scannet_data.read_aggregation", "load_scannet_data.read_segmentation", "np.zeros", "label_to_segs.items", "np.zeros", "len", "object_id_to_segs.items", "np.zeros", "np.array().reshape.transpose", "np.unique", "np.min", "np.min", "np.min", "np.max", "np.max", "np.max", "np.array", "np.save", "np.save", "np.save", "np.save", "open", "np.array", "list", "len", "float", "object_id_to_segs.keys", "line.rstrip().strip().split", "line.rstrip().strip", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_label_mapping", "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_mesh_vertices_rgb", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_aggregation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_segmentation"], ["    ", "\"\"\" points are XYZ RGB (RGB in 0-255),\n    semantic label as nyu40 ids,\n    instance label as 1-#instance,\n    box as (cx,cy,cz,dx,dy,dz,semantic_label)\n    \"\"\"", "\n", "label_map", "=", "scannet_utils", ".", "read_label_mapping", "(", "label_map_file", ",", "\n", "label_from", "=", "'raw_category'", ",", "label_to", "=", "'nyu40id'", ")", "\n", "mesh_vertices", "=", "scannet_utils", ".", "read_mesh_vertices_rgb", "(", "mesh_file", ")", "\n", "\n", "# Load scene axis alignment matrix", "\n", "lines", "=", "open", "(", "meta_file", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "'axisAlignment'", "in", "line", ":", "\n", "            ", "axis_align_matrix", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "rstrip", "(", ")", ".", "strip", "(", "'axisAlignment = '", ")", ".", "split", "(", "' '", ")", "]", "\n", "break", "\n", "", "", "axis_align_matrix", "=", "np", ".", "array", "(", "axis_align_matrix", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "pts", "=", "np", ".", "ones", "(", "(", "mesh_vertices", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "pts", "[", ":", ",", "0", ":", "3", "]", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "\n", "pts", "=", "np", ".", "dot", "(", "pts", ",", "axis_align_matrix", ".", "transpose", "(", ")", ")", "# Nx4", "\n", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "=", "pts", "[", ":", ",", "0", ":", "3", "]", "\n", "\n", "# Load semantic and instance labels", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "object_id_to_label_id", "=", "{", "}", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "label_map", "[", "label", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "", "", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "object_id_to_segs", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "instance_ids", "[", "verts", "]", "=", "object_id", "\n", "if", "object_id", "not", "in", "object_id_to_label_id", ":", "\n", "                ", "object_id_to_label_id", "[", "object_id", "]", "=", "label_ids", "[", "verts", "]", "[", "0", "]", "\n", "", "", "", "instance_bboxes", "=", "np", ".", "zeros", "(", "(", "num_instances", ",", "7", ")", ")", "\n", "for", "obj_id", "in", "object_id_to_segs", ":", "\n", "        ", "label_id", "=", "object_id_to_label_id", "[", "obj_id", "]", "\n", "obj_pc", "=", "mesh_vertices", "[", "instance_ids", "==", "obj_id", ",", "0", ":", "3", "]", "\n", "if", "len", "(", "obj_pc", ")", "==", "0", ":", "continue", "\n", "# Compute axis aligned box", "\n", "# An axis aligned bounding box is parameterized by", "\n", "# (cx,cy,cz) and (dx,dy,dz) and label id", "\n", "# where (cx,cy,cz) is the center point of the box,", "\n", "# dx is the x-axis length of the box.", "\n", "xmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "bbox", "=", "np", ".", "array", "(", "[", "(", "xmin", "+", "xmax", ")", "/", "2", ",", "(", "ymin", "+", "ymax", ")", "/", "2", ",", "(", "zmin", "+", "zmax", ")", "/", "2", ",", "\n", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ",", "zmax", "-", "zmin", ",", "label_id", "]", ")", "\n", "# NOTE: this assumes obj_id is in 1,2,3,.,,,.NUM_INSTANCES", "\n", "instance_bboxes", "[", "obj_id", "-", "1", ",", ":", "]", "=", "bbox", "\n", "\n", "", "if", "output_file", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "output_file", "+", "'_vert.npy'", ",", "mesh_vertices", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_sem_label.npy'", ",", "label_ids", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_ins_label.npy'", ",", "instance_ids", ")", "\n", "np", ".", "save", "(", "output_file", "+", "'_bbox.npy'", ",", "instance_bboxes", ")", "\n", "\n", "", "return", "mesh_vertices", ",", "label_ids", ",", "instance_ids", ",", "instance_bboxes", ",", "object_id_to_label_id", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.load_scannet_data.export_md40": [[132, 195], ["np.load().item", "scannet_utils.read_mesh_vertices_rgb", "open().readlines", "np.array().reshape", "np.ones", "np.dot", "load_scannet_data.read_aggregation", "load_scannet_data.read_segmentation", "np.zeros", "label_to_segs.items", "np.zeros", "len", "object_id_to_segs.items", "np.zeros", "np.array().reshape.transpose", "np.unique", "np.min", "np.min", "np.min", "np.max", "np.max", "np.max", "np.array", "np.load", "open", "np.array", "list", "len", "float", "object_id_to_segs.keys", "line.rstrip().strip().split", "line.rstrip().strip", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_mesh_vertices_rgb", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_aggregation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_segmentation"], ["", "def", "export_md40", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ")", ":", "\n", "    ", "\"\"\" points are XYZ RGB (RGB in 0-255),\n    semantic label as nyu40 ids,\n    instance label as 1-#instance,\n    box as (cx,cy,cz,dx,dy,dz,semantic_label)\n    \"\"\"", "\n", "label_map", "=", "np", ".", "load", "(", "'map2modelnet.npy'", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "mesh_vertices", "=", "scannet_utils", ".", "read_mesh_vertices_rgb", "(", "mesh_file", ")", "\n", "\n", "# Load scene axis alignment matrix", "\n", "lines", "=", "open", "(", "meta_file", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "'axisAlignment'", "in", "line", ":", "\n", "            ", "axis_align_matrix", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "rstrip", "(", ")", ".", "strip", "(", "'axisAlignment = '", ")", ".", "split", "(", "' '", ")", "]", "\n", "break", "\n", "", "", "axis_align_matrix", "=", "np", ".", "array", "(", "axis_align_matrix", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "pts", "=", "np", ".", "ones", "(", "(", "mesh_vertices", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "pts", "[", ":", ",", "0", ":", "3", "]", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "\n", "pts", "=", "np", ".", "dot", "(", "pts", ",", "axis_align_matrix", ".", "transpose", "(", ")", ")", "# Nx4", "\n", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "=", "pts", "[", ":", ",", "0", ":", "3", "]", "\n", "\n", "# Load semantic and instance labels", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "object_id_to_label_id", "=", "{", "}", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "label_map", "[", "label", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "", "", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "object_id_to_segs", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "instance_ids", "[", "verts", "]", "=", "object_id", "\n", "if", "object_id", "not", "in", "object_id_to_label_id", ":", "\n", "                ", "object_id_to_label_id", "[", "object_id", "]", "=", "label_ids", "[", "verts", "]", "[", "0", "]", "\n", "", "", "", "instance_bboxes", "=", "np", ".", "zeros", "(", "(", "num_instances", ",", "7", ")", ")", "\n", "for", "obj_id", "in", "object_id_to_segs", ":", "\n", "        ", "label_id", "=", "object_id_to_label_id", "[", "obj_id", "]", "\n", "obj_pc", "=", "mesh_vertices", "[", "instance_ids", "==", "obj_id", ",", "0", ":", "3", "]", "\n", "if", "len", "(", "obj_pc", ")", "==", "0", ":", "continue", "\n", "# Compute axis aligned box", "\n", "# An axis aligned bounding box is parameterized by", "\n", "# (cx,cy,cz) and (dx,dy,dz) and label id", "\n", "# where (cx,cy,cz) is the center point of the box,", "\n", "# dx is the x-axis length of the box.", "\n", "xmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "bbox", "=", "np", ".", "array", "(", "[", "(", "xmin", "+", "xmax", ")", "/", "2", ",", "(", "ymin", "+", "ymax", ")", "/", "2", ",", "(", "zmin", "+", "zmax", ")", "/", "2", ",", "\n", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ",", "zmax", "-", "zmin", ",", "label_id", "]", ")", "\n", "# NOTE: this assumes obj_id is in 1,2,3,.,,,.NUM_INSTANCES", "\n", "instance_bboxes", "[", "obj_id", "-", "1", ",", ":", "]", "=", "bbox", "\n", "\n", "", "return", "mesh_vertices", ",", "label_ids", ",", "instance_ids", ",", "instance_bboxes", ",", "object_id_to_label_id", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.load_scannet_data.main": [[133, 146], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "load_scannet_data.export", "os.path.split"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.ins_ply.export"], ["    ", "\"\"\" points are XYZ RGB (RGB in 0-255),\n    semantic label as nyu40 ids,\n    instance label as 1-#instance,\n    box as (cx,cy,cz,dx,dy,dz,semantic_label)\n    \"\"\"", "\n", "label_map", "=", "np", ".", "load", "(", "'map2modelnet.npy'", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "mesh_vertices", "=", "scannet_utils", ".", "read_mesh_vertices_rgb", "(", "mesh_file", ")", "\n", "\n", "# Load scene axis alignment matrix", "\n", "lines", "=", "open", "(", "meta_file", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "'axisAlignment'", "in", "line", ":", "\n", "            ", "axis_align_matrix", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "rstrip", "(", ")", ".", "strip", "(", "'axisAlignment = '", ")", ".", "split", "(", "' '", ")", "]", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_utils.represents_int": [[26, 33], ["int"], "function", ["None"], ["    ", "''' if string s represents an int. '''", "\n", "try", ":", "\n", "        ", "int", "(", "s", ")", "\n", "return", "True", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_utils.read_label_mapping": [[35, 45], ["os.path.isfile", "dict", "scannet_utils.represents_int", "open", "csv.DictReader", "int", "list", "int", "dict.keys", "dict.items"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_utils.represents_int"], ["    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "mapping", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "csvfile", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ",", "delimiter", "=", "'\\t'", ")", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "mapping", "[", "row", "[", "label_from", "]", "]", "=", "int", "(", "row", "[", "label_to", "]", ")", "\n", "", "", "if", "represents_int", "(", "list", "(", "mapping", ".", "keys", "(", ")", ")", "[", "0", "]", ")", ":", "\n", "        ", "mapping", "=", "{", "int", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "mapping", ".", "items", "(", ")", "}", "\n", "", "return", "mapping", "\n", "\n", "", "def", "read_mesh_vertices", "(", "filename", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_utils.read_mesh_vertices": [[47, 59], ["os.path.isfile", "open", "PlyData.read", "np.zeros"], "function", ["None"], ["\n", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "'vertex'", "]", ".", "count", "\n", "vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'x'", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'y'", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'z'", "]", "\n", "", "return", "vertices", "\n", "\n", "", "def", "read_mesh_vertices_rgb", "(", "filename", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_utils.read_mesh_vertices_rgb": [[61, 77], ["os.path.isfile", "open", "PlyData.read", "np.zeros"], "function", ["None"], ["\n", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "'vertex'", "]", ".", "count", "\n", "vertices", "=", "np", ".", "zeros", "(", "shape", "=", "[", "num_verts", ",", "6", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'x'", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'y'", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'z'", "]", "\n", "vertices", "[", ":", ",", "3", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'red'", "]", "\n", "vertices", "[", ":", ",", "4", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'green'", "]", "\n", "vertices", "[", ":", ",", "5", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'blue'", "]", "\n", "", "return", "vertices", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_detection_dataset.ScannetDetectionDataset.__init__": [[35, 136], ["os.path.join", "os.path.join", "os.path.exists", "list", "print", "print", "numpy.load", "os.path.join", "set", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "mesh_vertices_list.append", "instance_labels_list.append", "semantic_labels_list.append", "instance_bboxes_list.append", "open", "pickle.dump", "len", "len", "open", "pickle.load", "numpy.zeros", "os.path.join", "os.path.join", "len", "print", "len", "os.path.join", "open", "f.read().splitlines", "os.path.join", "len", "print", "len", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.random.rand", "scannet_detection_dataset.ScannetDetectionDataset.__len__", "os.path.join", "x.startswith", "os.listdir", "len", "open", "f.read().splitlines", "scannet_detection_dataset.ScannetDetectionDataset.__len__", "os.path.join", "RuntimeError", "os.path.basename", "os.path.basename", "f.read", "len", "f.read"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_detection_dataset.ScannetDetectionDataset.__len__", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_detection_dataset.ScannetDetectionDataset.__len__"], ["if", "data_path", "==", "\"scannet_train_detection_data\"", ":", "\n", "            ", "DC", "=", "SDC", "\n", "", "else", ":", "\n", "            ", "DC", "=", "SDC_md40", "\n", "\n", "", "self", ".", "center_jitter", "=", "center_jitter", "\n", "\n", "self", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "data_path", ")", "\n", "all_scan_names", "=", "list", "(", "set", "(", "[", "os", ".", "path", ".", "basename", "(", "x", ")", "[", "0", ":", "18", "]", "if", "x", ".", "startswith", "(", "'scene_aug'", ")", "else", "os", ".", "path", ".", "basename", "(", "x", ")", "[", "0", ":", "12", "]", "for", "x", "in", "os", ".", "listdir", "(", "self", ".", "data_path", ")", "]", ")", ")", "\n", "\n", "if", "split_set", "==", "'all'", ":", "\n", "            ", "self", ".", "scan_names", "=", "all_scan_names", "\n", "", "elif", "split_set", "in", "[", "'train'", ",", "'val'", ",", "'test'", "]", ":", "\n", "            ", "split_filenames", "=", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'scannet/meta_data'", ",", "\n", "'scannetv2_{}.txt'", ".", "format", "(", "split_set", ")", ")", "\n", "with", "open", "(", "split_filenames", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "scan_names", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# remove unavailiable scans", "\n", "", "num_scans", "=", "len", "(", "self", ".", "scan_names", ")", "\n", "self", ".", "scan_names", "=", "[", "sname", "for", "sname", "in", "self", ".", "scan_names", "if", "sname", "in", "all_scan_names", "]", "\n", "print", "(", "'kept {} scans out of {}'", ".", "format", "(", "len", "(", "self", ".", "scan_names", ")", ",", "num_scans", ")", ")", "\n", "num_scans", "=", "len", "(", "self", ".", "scan_names", ")", "\n", "", "elif", "split_set", "==", "'train_aug'", ":", "\n", "            ", "split_filenames", "=", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'scannet/meta_data'", ",", "\n", "'scannetv2_train.txt'", ".", "format", "(", "split_set", ")", ")", "\n", "with", "open", "(", "split_filenames", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "scan_names", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "# remove unavailiable scans", "\n", "", "self", ".", "scan_names", "=", "[", "sname", "for", "sname", "in", "all_scan_names", "if", "sname", "in", "self", ".", "scan_names", "or", "'aug'", "in", "sname", "]", "\n", "num_scans", "=", "len", "(", "self", ".", "scan_names", ")", "\n", "print", "(", "'kept {} scans out of {}'", ".", "format", "(", "len", "(", "self", ".", "scan_names", ")", ",", "num_scans", ")", ")", "\n", "num_scans", "=", "len", "(", "self", ".", "scan_names", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'illegal split name'", ")", "\n", "return", "\n", "\n", "", "self", ".", "num_points", "=", "num_points", "\n", "self", ".", "use_color", "=", "use_color", "\n", "self", ".", "use_height", "=", "use_height", "\n", "self", ".", "augment", "=", "augment", "\n", "if", "self", ".", "center_jitter", "!=", "0", "and", "'obj'", "not", "in", "self", ".", "data_path", ":", "\n", "#self.delta = (np.random.rand(self.__len__(), MAX_NUM_OBJ, 3) - 0.5) * self.center_jitter", "\n", "#np.save('annotation_error.npy', self.delta)", "\n", "#sys.exit(0)", "\n", "            ", "self", ".", "delta", "=", "np", ".", "load", "(", "'scannet/annotation_error.npy'", ")", "\n", "", "elif", "self", ".", "center_jitter", "!=", "0", "and", "'obj'", "in", "self", ".", "data_path", ":", "\n", "            ", "self", ".", "delta", "=", "(", "np", ".", "random", ".", "rand", "(", "self", ".", "__len__", "(", ")", ",", "MAX_NUM_OBJ", ",", "3", ")", "-", "0.5", ")", "*", "self", ".", "center_jitter", "\n", "", "else", ":", "\n", "            ", "self", ".", "delta", "=", "np", ".", "zeros", "(", "(", "self", ".", "__len__", "(", ")", ",", "MAX_NUM_OBJ", ",", "3", ")", ")", "\n", "# np.array([(np.random.rand()-0.5)*self.center_jitter, (np.random.rand()-0.5)*self.center_jitter, (np.random.rand()-0.5)*self.center_jitter]) * size_gts", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "scan_names", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Returns a dict with following keys:\n            point_clouds: (N,3+C)\n            center_label: (MAX_NUM_OBJ,3) for GT box center XYZ\n            sem_cls_label: (MAX_NUM_OBJ,) semantic class index\n            angle_class_label: (MAX_NUM_OBJ,) with int values in 0,...,NUM_HEADING_BIN-1\n            angle_residual_label: (MAX_NUM_OBJ,)\n            size_classe_label: (MAX_NUM_OBJ,) with int values in 0,...,NUM_SIZE_CLUSTER\n            size_residual_label: (MAX_NUM_OBJ,3)\n            box_label_mask: (MAX_NUM_OBJ) as 0/1 with 1 indicating a unique box\n            point_votes: (N,3) with votes XYZ\n            point_votes_mask: (N,) with 0/1 with 1 indicating the point is in one of the object's OBB.\n            scan_idx: int scan index in scan_names list\n            pcl_color: unused\n        \"\"\"", "\n", "\n", "scan_name", "=", "self", ".", "scan_names", "[", "idx", "]", "\n", "mesh_vertices", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "scan_name", ")", "+", "'_vert.npy'", ")", "\n", "instance_labels", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "scan_name", ")", "+", "'_ins_label.npy'", ")", "\n", "semantic_labels", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "scan_name", ")", "+", "'_sem_label.npy'", ")", "\n", "instance_bboxes", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "scan_name", ")", "+", "'_bbox.npy'", ")", "\n", "\n", "if", "not", "self", ".", "use_color", ":", "\n", "            ", "point_cloud", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "# do not use color for now", "\n", "pcl_color", "=", "mesh_vertices", "[", ":", ",", "3", ":", "6", "]", "\n", "", "else", ":", "\n", "            ", "point_cloud", "=", "mesh_vertices", "[", ":", ",", "0", ":", "6", "]", "\n", "point_cloud", "[", ":", ",", "3", ":", "]", "=", "(", "point_cloud", "[", ":", ",", "3", ":", "]", "-", "MEAN_COLOR_RGB", ")", "/", "256.0", "\n", "\n", "", "if", "self", ".", "use_height", ":", "\n", "            ", "floor_height", "=", "np", ".", "percentile", "(", "point_cloud", "[", ":", ",", "2", "]", ",", "0.99", ")", "\n", "height", "=", "point_cloud", "[", ":", ",", "2", "]", "-", "floor_height", "\n", "point_cloud", "=", "np", ".", "concatenate", "(", "[", "point_cloud", ",", "np", ".", "expand_dims", "(", "height", ",", "1", ")", "]", ",", "1", ")", "\n", "\n", "# ------------------------------- LABELS ------------------------------        ", "\n", "", "target_bboxes", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", "6", ")", ")", "\n", "target_bboxes_mask", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ")", ")", "\n", "angle_classes", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", ")", ")", "\n", "angle_residuals", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", ")", ")", "\n", "size_classes", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", ")", ")", "\n", "size_residuals", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", "3", ")", ")", "\n", "size_gts", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ",", "3", ")", ")", "\n", "\n", "point_cloud", ",", "choices", "=", "pc_util", ".", "random_sampling", "(", "point_cloud", ",", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_detection_dataset.ScannetDetectionDataset.__len__": [[137, 139], ["len"], "methods", ["None"], ["self", ".", "num_points", ",", "return_choices", "=", "True", ")", "\n", "instance_labels", "=", "instance_labels", "[", "choices", "]", "\n", "semantic_labels", "=", "semantic_labels", "[", "choices", "]", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_detection_dataset.ScannetDetectionDataset.__getitem__": [[140, 264], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pc_util.random_sampling", "numpy.zeros", "numpy.unique", "numpy.concatenate.astype", "gt_centers.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros", "numpy.zeros.astype", "numpy.zeros.astype", "numpy.zeros.astype", "point_instance_label.astype", "numpy.array().astype", "numpy.array().astype", "numpy.percentile", "numpy.concatenate", "pc_util.rotz", "numpy.dot", "model_util_scannet.rotate_aligned_boxes", "numpy.zeros", "numpy.random.random", "numpy.random.random", "numpy.transpose", "numpy.where", "numpy.argmin", "numpy.array", "numpy.array", "numpy.expand_dims", "numpy.where", "numpy.random.random", "x.min", "x.max"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.random_sampling", "home.repos.pwc.inspect_result.xuxw98_backtoreality.matterport.matterport_utils.rotz", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.rotate_aligned_boxes"], ["\n", "pcl_color", "=", "pcl_color", "[", "choices", "]", "\n", "\n", "target_bboxes_mask", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "=", "1", "\n", "target_bboxes", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "instance_bboxes", "[", ":", ",", "0", ":", "6", "]", "\n", "\n", "# ------------------------------- DATA AUGMENTATION ------------------------------        ", "\n", "if", "self", ".", "augment", ":", "\n", "            ", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "# Flipping along the YZ plane", "\n", "                ", "point_cloud", "[", ":", ",", "0", "]", "=", "-", "1", "*", "point_cloud", "[", ":", ",", "0", "]", "\n", "target_bboxes", "[", ":", ",", "0", "]", "=", "-", "1", "*", "target_bboxes", "[", ":", ",", "0", "]", "\n", "\n", "", "if", "np", ".", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "# Flipping along the XZ plane", "\n", "                ", "point_cloud", "[", ":", ",", "1", "]", "=", "-", "1", "*", "point_cloud", "[", ":", ",", "1", "]", "\n", "target_bboxes", "[", ":", ",", "1", "]", "=", "-", "1", "*", "target_bboxes", "[", ":", ",", "1", "]", "\n", "\n", "# Rotation along up-axis/Z-axis", "\n", "", "rot_angle", "=", "(", "np", ".", "random", ".", "random", "(", ")", "*", "np", ".", "pi", "/", "18", ")", "-", "np", ".", "pi", "/", "36", "# -5 ~ +5 degree", "\n", "rot_mat", "=", "pc_util", ".", "rotz", "(", "rot_angle", ")", "\n", "point_cloud", "[", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "point_cloud", "[", ":", ",", "0", ":", "3", "]", ",", "np", ".", "transpose", "(", "rot_mat", ")", ")", "\n", "target_bboxes", "=", "rotate_aligned_boxes", "(", "target_bboxes", ",", "rot_mat", ")", "\n", "\n", "# compute votes *AFTER* augmentation", "\n", "# generate votes", "\n", "# Note: since there's no map between bbox instance labels and", "\n", "# pc instance_labels (it had been filtered ", "\n", "# in the data preparation step) we'll compute the instance bbox", "\n", "# from the points sharing the same instance label. ", "\n", "", "point_votes", "=", "np", ".", "zeros", "(", "[", "self", ".", "num_points", ",", "3", "]", ")", "\n", "point_votes_mask", "=", "np", ".", "zeros", "(", "self", ".", "num_points", ")", "\n", "for", "i_instance", "in", "np", ".", "unique", "(", "instance_labels", ")", ":", "\n", "# find all points belong to that instance", "\n", "            ", "ind", "=", "np", ".", "where", "(", "instance_labels", "==", "i_instance", ")", "[", "0", "]", "\n", "# find the semantic label            ", "\n", "if", "semantic_labels", "[", "ind", "[", "0", "]", "]", "in", "DC", ".", "nyu40ids", ":", "\n", "                ", "x", "=", "point_cloud", "[", "ind", ",", ":", "3", "]", "\n", "center", "=", "0.5", "*", "(", "x", ".", "min", "(", "0", ")", "+", "x", ".", "max", "(", "0", ")", ")", "\n", "point_votes", "[", "ind", ",", ":", "]", "=", "center", "-", "x", "\n", "point_votes_mask", "[", "ind", "]", "=", "1.0", "\n", "", "", "point_votes", "=", "np", ".", "tile", "(", "point_votes", ",", "(", "1", ",", "3", ")", ")", "# make 3 votes identical ", "\n", "\n", "class_ind", "=", "[", "np", ".", "where", "(", "DC", ".", "nyu40ids", "==", "x", ")", "[", "0", "]", "[", "0", "]", "for", "x", "in", "instance_bboxes", "[", ":", ",", "-", "1", "]", "]", "\n", "# NOTE: set size class as semantic class. Consider use size2class.", "\n", "size_classes", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "=", "class_ind", "\n", "size_residuals", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "target_bboxes", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", ",", "3", ":", "6", "]", "-", "DC", ".", "mean_size_arr", "[", "class_ind", ",", ":", "]", "\n", "size_gts", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", ",", ":", "]", "=", "target_bboxes", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", ",", "3", ":", "6", "]", "\n", "\n", "# Using center jitter to approaximate the error of human labeling", "\n", "gt_centers", "=", "target_bboxes", "[", ":", ",", "0", ":", "3", "]", "\n", "if", "self", ".", "center_jitter", "!=", "0", ":", "\n", "# gt_centers += np.array([np.random.rand()*0.1-0.05, np.random.rand()*0.1-0.05, np.random.rand()*0.1-0.05]) * size_gts", "\n", "# gt_centers += np.array([(np.random.rand()-0.5)*self.center_jitter, (np.random.rand()-0.5)*self.center_jitter, (np.random.rand()-0.5)*self.center_jitter]) * size_gts", "\n", "            ", "gt_centers", "+=", "size_gts", "*", "self", ".", "delta", "[", "idx", "]", "\n", "\n", "", "ret_dict", "=", "{", "}", "\n", "ret_dict", "[", "'point_clouds'", "]", "=", "point_cloud", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'center_label'", "]", "=", "gt_centers", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'center_jitter'", "]", "=", "(", "size_gts", "*", "self", ".", "delta", "[", "idx", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'heading_class_label'", "]", "=", "angle_classes", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ret_dict", "[", "'heading_residual_label'", "]", "=", "angle_residuals", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'size_class_label'", "]", "=", "size_classes", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ret_dict", "[", "'size_residual_label'", "]", "=", "size_residuals", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'size_gts'", "]", "=", "size_gts", ".", "astype", "(", "np", ".", "float32", ")", "\n", "target_bboxes_semcls", "=", "np", ".", "zeros", "(", "(", "MAX_NUM_OBJ", ")", ")", "\n", "target_bboxes_semcls", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "=", "[", "DC", ".", "nyu40id2class", "[", "x", "]", "for", "x", "in", "instance_bboxes", "[", ":", ",", "-", "1", "]", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "]", "\n", "ret_dict", "[", "'sem_cls_label'", "]", "=", "target_bboxes_semcls", ".", "astype", "(", "np", ".", "int64", ")", "\n", "try", ":", "\n", "            ", "ret_dict", "[", "'cloud_label'", "]", "=", "np", ".", "eye", "(", "22", ")", "[", "ret_dict", "[", "'sem_cls_label'", "]", "[", "0", ":", "instance_bboxes", ".", "shape", "[", "0", "]", "]", "]", ".", "max", "(", "axis", "=", "0", ")", "\n", "", "except", ":", "\n", "            ", "ret_dict", "[", "'cloud_label'", "]", "=", "np", ".", "zeros", "(", "22", ")", "\n", "", "ret_dict", "[", "'box_label_mask'", "]", "=", "target_bboxes_mask", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'vote_label'", "]", "=", "point_votes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ret_dict", "[", "'vote_label_mask'", "]", "=", "point_votes_mask", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ret_dict", "[", "'scan_idx'", "]", "=", "np", ".", "array", "(", "idx", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ret_dict", "[", "'pcl_color'", "]", "=", "pcl_color", "\n", "return", "ret_dict", "\n", "\n", "\n", "############# Visualizaion ########", "\n", "\n", "", "", "def", "viz_votes", "(", "pc", ",", "point_votes", ",", "point_votes_mask", ",", "name", "=", "''", ")", ":", "\n", "    ", "\"\"\" Visualize point votes and point votes mask labels\n    pc: (N,3 or 6), point_votes: (N,9), point_votes_mask: (N,)\n    \"\"\"", "\n", "inds", "=", "(", "point_votes_mask", "==", "1", ")", "\n", "pc_obj", "=", "pc", "[", "inds", ",", "0", ":", "3", "]", "\n", "pc_obj_voted1", "=", "pc_obj", "+", "point_votes", "[", "inds", ",", "0", ":", "3", "]", "\n", "pc_util", ".", "write_ply", "(", "pc_obj", ",", "'pc_obj{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "pc_util", ".", "write_ply", "(", "pc_obj_voted1", ",", "'pc_obj_voted1{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "def", "viz_obb", "(", "pc", ",", "label", ",", "mask", ",", "angle_classes", ",", "angle_residuals", ",", "\n", "size_classes", ",", "size_residuals", ",", "name", "=", "''", ")", ":", "\n", "    ", "\"\"\" Visualize oriented bounding box ground truth\n    pc: (N,3)\n    label: (K,3)  K == MAX_NUM_OBJ\n    mask: (K,)\n    angle_classes: (K,)\n    angle_residuals: (K,)\n    size_classes: (K,)\n    size_residuals: (K,3)\n    \"\"\"", "\n", "oriented_boxes", "=", "[", "]", "\n", "K", "=", "label", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "if", "mask", "[", "i", "]", "==", "0", ":", "continue", "\n", "obb", "=", "np", ".", "zeros", "(", "7", ")", "\n", "obb", "[", "0", ":", "3", "]", "=", "label", "[", "i", ",", "0", ":", "3", "]", "\n", "heading_angle", "=", "0", "# hard code to 0", "\n", "box_size", "=", "DC", ".", "mean_size_arr", "[", "size_classes", "[", "i", "]", ",", ":", "]", "+", "size_residuals", "[", "i", ",", ":", "]", "\n", "obb", "[", "3", ":", "6", "]", "=", "box_size", "\n", "obb", "[", "6", "]", "=", "-", "1", "*", "heading_angle", "\n", "print", "(", "obb", ")", "\n", "oriented_boxes", ".", "append", "(", "obb", ")", "\n", "", "pc_util", ".", "write_oriented_bbox", "(", "oriented_boxes", ",", "'gt_obbs{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "pc_util", ".", "write_ply", "(", "label", "[", "mask", "==", "1", ",", ":", "]", ",", "'gt_centroids{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "dset", "=", "ScannetDetectionDataset", "(", "use_height", "=", "True", ",", "num_points", "=", "40000", ")", "\n", "\n", "count_sum", "=", "np", ".", "zeros", "(", "(", "22", ",", "22", ")", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_detection_dataset.viz_votes": [[224, 233], ["pc_util.write_ply", "pc_util.write_ply"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply"], ["", "", "def", "viz_votes", "(", "pc", ",", "point_votes", ",", "point_votes_mask", ",", "name", "=", "''", ")", ":", "\n", "    ", "\"\"\" Visualize point votes and point votes mask labels\n    pc: (N,3 or 6), point_votes: (N,9), point_votes_mask: (N,)\n    \"\"\"", "\n", "inds", "=", "(", "point_votes_mask", "==", "1", ")", "\n", "pc_obj", "=", "pc", "[", "inds", ",", "0", ":", "3", "]", "\n", "pc_obj_voted1", "=", "pc_obj", "+", "point_votes", "[", "inds", ",", "0", ":", "3", "]", "\n", "pc_util", ".", "write_ply", "(", "pc_obj", ",", "'pc_obj{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "pc_util", ".", "write_ply", "(", "pc_obj_voted1", ",", "'pc_obj_voted1{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_detection_dataset.viz_obb": [[234, 259], ["range", "pc_util.write_oriented_bbox", "pc_util.write_ply", "numpy.zeros", "print", "oriented_boxes.append"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_oriented_bbox", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply"], ["", "def", "viz_obb", "(", "pc", ",", "label", ",", "mask", ",", "angle_classes", ",", "angle_residuals", ",", "\n", "size_classes", ",", "size_residuals", ",", "name", "=", "''", ")", ":", "\n", "    ", "\"\"\" Visualize oriented bounding box ground truth\n    pc: (N,3)\n    label: (K,3)  K == MAX_NUM_OBJ\n    mask: (K,)\n    angle_classes: (K,)\n    angle_residuals: (K,)\n    size_classes: (K,)\n    size_residuals: (K,3)\n    \"\"\"", "\n", "oriented_boxes", "=", "[", "]", "\n", "K", "=", "label", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "if", "mask", "[", "i", "]", "==", "0", ":", "continue", "\n", "obb", "=", "np", ".", "zeros", "(", "7", ")", "\n", "obb", "[", "0", ":", "3", "]", "=", "label", "[", "i", ",", "0", ":", "3", "]", "\n", "heading_angle", "=", "0", "# hard code to 0", "\n", "box_size", "=", "DC", ".", "mean_size_arr", "[", "size_classes", "[", "i", "]", ",", ":", "]", "+", "size_residuals", "[", "i", ",", ":", "]", "\n", "obb", "[", "3", ":", "6", "]", "=", "box_size", "\n", "obb", "[", "6", "]", "=", "-", "1", "*", "heading_angle", "\n", "print", "(", "obb", ")", "\n", "oriented_boxes", ".", "append", "(", "obb", ")", "\n", "", "pc_util", ".", "write_oriented_bbox", "(", "oriented_boxes", ",", "'gt_obbs{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "pc_util", ".", "write_ply", "(", "label", "[", "mask", "==", "1", ",", ":", "]", ",", "'gt_centroids{}.ply'", ".", "format", "(", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2Backbone.__init__": [[33, 76], ["torch.Module.__init__", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetFPModule", "pointnet2_modules.PointnetFPModule", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sa1", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "2048", ",", "\n", "radius", "=", "0.2", ",", "\n", "nsample", "=", "64", ",", "\n", "mlp", "=", "[", "input_feature_dim", ",", "64", ",", "64", ",", "128", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa2", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "1024", ",", "\n", "radius", "=", "0.4", ",", "\n", "nsample", "=", "32", ",", "\n", "mlp", "=", "[", "128", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa3", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "512", ",", "\n", "radius", "=", "0.8", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "256", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa4", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "256", ",", "\n", "radius", "=", "1.2", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "256", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "fp1", "=", "PointnetFPModule", "(", "mlp", "=", "[", "256", "+", "256", ",", "256", ",", "256", "]", ")", "\n", "self", ".", "fp2", "=", "PointnetFPModule", "(", "mlp", "=", "[", "256", "+", "256", ",", "256", ",", "256", "]", ")", "\n", "\n", "", "def", "_break_up_pc", "(", "self", ",", "pc", ")", ":", "\n", "        ", "xyz", "=", "pc", "[", "...", ",", "0", ":", "3", "]", ".", "contiguous", "(", ")", "\n", "features", "=", "(", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2Backbone._break_up_pc": [[77, 85], ["pc[].contiguous", "pc[].transpose().contiguous", "pc.size", "pc[].transpose"], "methods", ["None"], ["pc", "[", "...", ",", "3", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "pc", ".", "size", "(", "-", "1", ")", ">", "3", "else", "None", "\n", ")", "\n", "\n", "return", "xyz", ",", "features", "\n", "\n", "", "def", "forward", "(", "self", ",", "pointcloud", ":", "torch", ".", "cuda", ".", "FloatTensor", ",", "end_points", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2Backbone.forward": [[86, 139], ["backbone_module.Pointnet2Backbone._break_up_pc", "backbone_module.Pointnet2Backbone.sa1", "backbone_module.Pointnet2Backbone.sa2", "backbone_module.Pointnet2Backbone.sa3", "backbone_module.Pointnet2Backbone.sa4", "backbone_module.Pointnet2Backbone.fp1", "backbone_module.Pointnet2Backbone.fp2"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2BackboneWithSem._break_up_pc"], ["\n", "if", "not", "end_points", ":", "end_points", "=", "{", "}", "\n", "batch_size", "=", "pointcloud", ".", "shape", "[", "0", "]", "\n", "\n", "xyz", ",", "features", "=", "self", ".", "_break_up_pc", "(", "pointcloud", ")", "\n", "\n", "# --------- 4 SET ABSTRACTION LAYERS ---------", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa1", "(", "xyz", ",", "features", ")", "\n", "end_points", "[", "'sa1_inds'", "]", "=", "fps_inds", "\n", "end_points", "[", "'sa1_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa1_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa2", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,1023", "\n", "end_points", "[", "'sa2_inds'", "]", "=", "fps_inds", "\n", "end_points", "[", "'sa2_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa2_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa3", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,511", "\n", "end_points", "[", "'sa3_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa3_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa4", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,255", "\n", "end_points", "[", "'sa4_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa4_features'", "]", "=", "features", "\n", "\n", "# --------- 2 FEATURE UPSAMPLING LAYERS --------", "\n", "features", "=", "self", ".", "fp1", "(", "end_points", "[", "'sa3_xyz'", "]", ",", "end_points", "[", "'sa4_xyz'", "]", ",", "end_points", "[", "'sa3_features'", "]", ",", "end_points", "[", "'sa4_features'", "]", ")", "\n", "features", "=", "self", ".", "fp2", "(", "end_points", "[", "'sa2_xyz'", "]", ",", "end_points", "[", "'sa3_xyz'", "]", ",", "end_points", "[", "'sa2_features'", "]", ",", "features", ")", "\n", "end_points", "[", "'fp2_features'", "]", "=", "features", "\n", "end_points", "[", "'fp2_xyz'", "]", "=", "end_points", "[", "'sa2_xyz'", "]", "\n", "num_seed", "=", "end_points", "[", "'fp2_xyz'", "]", ".", "shape", "[", "1", "]", "\n", "end_points", "[", "'fp2_inds'", "]", "=", "end_points", "[", "'sa1_inds'", "]", "[", ":", ",", "0", ":", "num_seed", "]", "# indices among the entire input point clouds", "\n", "return", "end_points", "\n", "\n", "\n", "", "", "class", "Pointnet2Backbone_jitter", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2Backbone_jitter.__init__": [[152, 202], ["torch.Module.__init__", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetFPModule", "pointnet2_modules.PointnetFPModule", "pointnet2_modules.PointnetSAModuleCenters", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["radius", "=", "0.2", ",", "\n", "nsample", "=", "64", ",", "\n", "mlp", "=", "[", "input_feature_dim", ",", "64", ",", "64", ",", "128", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa2", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "1024", ",", "\n", "radius", "=", "0.4", ",", "\n", "nsample", "=", "32", ",", "\n", "mlp", "=", "[", "128", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa3", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "512", ",", "\n", "radius", "=", "0.8", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "256", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa4", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "256", ",", "\n", "radius", "=", "1.2", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "256", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "fp1", "=", "PointnetFPModule", "(", "mlp", "=", "[", "256", "+", "256", ",", "256", ",", "256", "]", ")", "\n", "self", ".", "fp2", "=", "PointnetFPModule", "(", "mlp", "=", "[", "256", "+", "256", ",", "256", ",", "256", "]", ")", "\n", "self", ".", "ctjt_head", "=", "PointnetSAModuleCenters", "(", "\n", "npoint", "=", "64", ",", "\n", "radius", "=", "0.8", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "256", ",", "128", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "False", "\n", ")", "\n", "\n", "", "def", "_break_up_pc", "(", "self", ",", "pc", ")", ":", "\n", "        ", "xyz", "=", "pc", "[", "...", ",", "0", ":", "3", "]", ".", "contiguous", "(", ")", "\n", "features", "=", "(", "\n", "pc", "[", "...", ",", "3", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "pc", ".", "size", "(", "-", "1", ")", ">", "3", "else", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2Backbone_jitter._break_up_pc": [[204, 212], ["pc[].contiguous", "pc[].transpose().contiguous", "pc.size", "pc[].transpose"], "methods", ["None"], ["return", "xyz", ",", "features", "\n", "\n", "", "def", "forward", "(", "self", ",", "pointcloud", ":", "torch", ".", "cuda", ".", "FloatTensor", ",", "center_xyz", "=", "None", ",", "center_cls", "=", "None", ",", "end_points", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2Backbone_jitter.forward": [[213, 271], ["backbone_module.Pointnet2Backbone_jitter._break_up_pc", "backbone_module.Pointnet2Backbone_jitter.sa1", "backbone_module.Pointnet2Backbone_jitter.sa2", "backbone_module.Pointnet2Backbone_jitter.sa3", "backbone_module.Pointnet2Backbone_jitter.sa4", "backbone_module.Pointnet2Backbone_jitter.fp1", "backbone_module.Pointnet2Backbone_jitter.fp2", "backbone_module.Pointnet2Backbone_jitter.ctjt_head", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].transpose().cuda", "[].transpose", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2BackboneWithSem._break_up_pc"], ["\n", "if", "not", "end_points", ":", "end_points", "=", "{", "}", "\n", "batch_size", "=", "pointcloud", ".", "shape", "[", "0", "]", "\n", "\n", "xyz", ",", "features", "=", "self", ".", "_break_up_pc", "(", "pointcloud", ")", "\n", "\n", "# --------- 4 SET ABSTRACTION LAYERS ---------", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa1", "(", "xyz", ",", "features", ")", "\n", "end_points", "[", "'sa1_inds'", "]", "=", "fps_inds", "\n", "end_points", "[", "'sa1_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa1_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa2", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,1023", "\n", "end_points", "[", "'sa2_inds'", "]", "=", "fps_inds", "\n", "end_points", "[", "'sa2_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa2_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa3", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,511", "\n", "end_points", "[", "'sa3_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa3_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa4", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,255", "\n", "end_points", "[", "'sa4_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa4_features'", "]", "=", "features", "\n", "\n", "# --------- 2 FEATURE UPSAMPLING LAYERS --------", "\n", "features", "=", "self", ".", "fp1", "(", "end_points", "[", "'sa3_xyz'", "]", ",", "end_points", "[", "'sa4_xyz'", "]", ",", "end_points", "[", "'sa3_features'", "]", ",", "end_points", "[", "'sa4_features'", "]", ")", "\n", "features", "=", "self", ".", "fp2", "(", "end_points", "[", "'sa2_xyz'", "]", ",", "end_points", "[", "'sa3_xyz'", "]", ",", "end_points", "[", "'sa2_features'", "]", ",", "features", ")", "\n", "end_points", "[", "'fp2_features'", "]", "=", "features", "\n", "end_points", "[", "'fp2_xyz'", "]", "=", "end_points", "[", "'sa2_xyz'", "]", "\n", "num_seed", "=", "end_points", "[", "'fp2_xyz'", "]", ".", "shape", "[", "1", "]", "\n", "end_points", "[", "'fp2_inds'", "]", "=", "end_points", "[", "'sa1_inds'", "]", "[", ":", ",", "0", ":", "num_seed", "]", "# indices among the entire input point clouds", "\n", "\n", "# center jitter predicting", "\n", "if", "center_xyz", "is", "not", "None", ":", "\n", "            ", "center_features", "=", "self", ".", "ctjt_head", "(", "end_points", "[", "'sa2_xyz'", "]", ",", "features", ",", "center_xyz", ")", "\n", "end_points", "[", "'center_features'", "]", "=", "torch", ".", "cat", "(", "[", "center_features", ",", "torch", ".", "eye", "(", "22", ")", "[", "center_cls", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "cuda", "(", ")", "]", ",", "dim", "=", "1", ")", "# B, 128+22, 64", "\n", "\n", "", "return", "end_points", "\n", "\n", "\n", "", "", "class", "Pointnet2Backbone_cam", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2Backbone_cam.__init__": [[276, 313], ["torch.Module.__init__", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "self", ",", "input_feature_dim", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sa1", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "2048", ",", "\n", "radius", "=", "0.2", ",", "\n", "nsample", "=", "64", ",", "\n", "mlp", "=", "[", "input_feature_dim", ",", "64", ",", "64", ",", "128", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa2", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "1024", ",", "\n", "radius", "=", "0.4", ",", "\n", "nsample", "=", "32", ",", "\n", "mlp", "=", "[", "128", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa3", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "512", ",", "\n", "radius", "=", "0.8", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "256", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa4", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "256", ",", "\n", "radius", "=", "1.2", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "256", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2Backbone_cam._break_up_pc": [[315, 323], ["pc[].contiguous", "pc[].transpose().contiguous", "pc.size", "pc[].transpose"], "methods", ["None"], ["", "def", "_break_up_pc", "(", "self", ",", "pc", ")", ":", "\n", "        ", "xyz", "=", "pc", "[", "...", ",", "0", ":", "3", "]", ".", "contiguous", "(", ")", "\n", "features", "=", "(", "\n", "pc", "[", "...", ",", "3", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "pc", ".", "size", "(", "-", "1", ")", ">", "3", "else", "None", "\n", ")", "\n", "\n", "return", "xyz", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2Backbone_cam.forward": [[324, 368], ["backbone_module.Pointnet2Backbone_cam._break_up_pc", "backbone_module.Pointnet2Backbone_cam.sa1", "backbone_module.Pointnet2Backbone_cam.sa2", "backbone_module.Pointnet2Backbone_cam.sa3", "backbone_module.Pointnet2Backbone_cam.sa4"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2BackboneWithSem._break_up_pc"], ["", "def", "forward", "(", "self", ",", "pointcloud", ":", "torch", ".", "cuda", ".", "FloatTensor", ",", "end_points", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n            Forward pass of the network\n\n            Parameters\n            ----------\n            pointcloud: Variable(torch.cuda.FloatTensor)\n                (B, N, 3 + input_feature_dim) tensor\n                Point cloud to run predicts on\n                Each point in the point-cloud MUST\n                be formated as (x, y, z, features...)\n\n            Returns\n            ----------\n            end_points: {XXX_xyz, XXX_features, XXX_inds}\n                XXX_xyz: float32 Tensor of shape (B,K,3)\n                XXX_features: float32 Tensor of shape (B,K,D)\n                XXX-inds: int64 Tensor of shape (B,K) values in [0,N-1]\n        \"\"\"", "\n", "if", "not", "end_points", ":", "end_points", "=", "{", "}", "\n", "batch_size", "=", "pointcloud", ".", "shape", "[", "0", "]", "\n", "\n", "xyz", ",", "features", "=", "self", ".", "_break_up_pc", "(", "pointcloud", ")", "\n", "\n", "# --------- 4 SET ABSTRACTION LAYERS ---------", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa1", "(", "xyz", ",", "features", ")", "\n", "end_points", "[", "'sa1_inds'", "]", "=", "fps_inds", "\n", "end_points", "[", "'sa1_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa1_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa2", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,1023", "\n", "end_points", "[", "'sa2_inds'", "]", "=", "fps_inds", "\n", "end_points", "[", "'sa2_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa2_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa3", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,511", "\n", "end_points", "[", "'sa3_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa3_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa4", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,255", "\n", "end_points", "[", "'sa4_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa4_features'", "]", "=", "features", "\n", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.voting_module.VotingModule.__init__": [[17, 37], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vote_factor", ",", "seed_feature_dim", ")", ":", "\n", "        ", "\"\"\" Votes generation from seed point features.\n\n        Args:\n            vote_facotr: int\n                number of votes generated from each seed point\n            seed_feature_dim: int\n                number of channels of seed point features\n            vote_feature_dim: int\n                number of channels of vote features\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vote_factor", "=", "vote_factor", "\n", "self", ".", "in_dim", "=", "seed_feature_dim", "\n", "self", ".", "out_dim", "=", "self", ".", "in_dim", "# due to residual feature, in_dim has to be == out_dim", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "self", ".", "in_dim", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "self", ".", "in_dim", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "(", "3", "+", "self", ".", "out_dim", ")", "*", "self", ".", "vote_factor", ",", "1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_dim", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.voting_module.VotingModule.forward": [[38, 66], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "voting_module.VotingModule.conv3", "net.transpose().view.transpose().view.transpose().view", "vote_xyz.contiguous().view.contiguous().view.contiguous().view", "vote_features.transpose().contiguous.transpose().contiguous.contiguous().view", "vote_features.transpose().contiguous.transpose().contiguous.transpose().contiguous", "voting_module.VotingModule.bn1", "voting_module.VotingModule.bn2", "seed_xyz.unsqueeze", "seed_features.transpose().unsqueeze", "voting_module.VotingModule.conv1", "voting_module.VotingModule.conv2", "net.transpose().view.transpose().view.transpose", "vote_xyz.contiguous().view.contiguous().view.contiguous", "vote_features.transpose().contiguous.transpose().contiguous.contiguous", "vote_features.transpose().contiguous.transpose().contiguous.transpose", "seed_features.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "seed_xyz", ",", "seed_features", ")", ":", "\n", "        ", "\"\"\" Forward pass.\n\n        Arguments:\n            seed_xyz: (batch_size, num_seed, 3) Pytorch tensor\n            seed_features: (batch_size, feature_dim, num_seed) Pytorch tensor\n        Returns:\n            vote_xyz: (batch_size, num_seed*vote_factor, 3)\n            vote_features: (batch_size, vote_feature_dim, num_seed*vote_factor)\n        \"\"\"", "\n", "batch_size", "=", "seed_xyz", ".", "shape", "[", "0", "]", "\n", "num_seed", "=", "seed_xyz", ".", "shape", "[", "1", "]", "\n", "num_vote", "=", "num_seed", "*", "self", ".", "vote_factor", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "seed_features", ")", ")", ")", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "net", ")", ")", ")", "\n", "net", "=", "self", ".", "conv3", "(", "net", ")", "# (batch_size, (3+out_dim)*vote_factor, num_seed)", "\n", "\n", "net", "=", "net", ".", "transpose", "(", "2", ",", "1", ")", ".", "view", "(", "batch_size", ",", "num_seed", ",", "self", ".", "vote_factor", ",", "3", "+", "self", ".", "out_dim", ")", "\n", "offset", "=", "net", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "vote_xyz", "=", "seed_xyz", ".", "unsqueeze", "(", "2", ")", "+", "offset", "\n", "vote_xyz", "=", "vote_xyz", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "num_vote", ",", "3", ")", "\n", "\n", "residual_features", "=", "net", "[", ":", ",", ":", ",", ":", ",", "3", ":", "]", "# (batch_size, num_seed, vote_factor, out_dim)", "\n", "vote_features", "=", "seed_features", ".", "transpose", "(", "2", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", "+", "residual_features", "\n", "vote_features", "=", "vote_features", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "num_vote", ",", "self", ".", "out_dim", ")", "\n", "vote_features", "=", "vote_features", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "vote_xyz", ",", "vote_features", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.boxnet.BoxNet.__init__": [[39, 59], ["torch.Module.__init__", "backbone_module.Pointnet2Backbone", "proposal_module.ProposalModule"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "0", ",", "num_proposal", "=", "128", ",", "vote_factor", "=", "1", ",", "sampling", "=", "'vote_fps'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "assert", "(", "mean_size_arr", ".", "shape", "[", "0", "]", "==", "self", ".", "num_size_cluster", ")", "\n", "self", ".", "input_feature_dim", "=", "input_feature_dim", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "vote_factor", "=", "vote_factor", "\n", "self", ".", "sampling", "=", "sampling", "\n", "\n", "# Backbone point feature learning", "\n", "self", ".", "backbone_net", "=", "Pointnet2Backbone", "(", "input_feature_dim", "=", "self", ".", "input_feature_dim", ")", "\n", "\n", "# Box proposal, aggregation and detection", "\n", "self", ".", "pnet", "=", "ProposalModule", "(", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "sampling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.boxnet.BoxNet.forward": [[60, 89], ["boxnet.BoxNet.backbone_net", "boxnet.BoxNet.pnet"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Forward pass of the network\n\n        Args:\n            inputs: dict\n                {point_clouds}\n\n                point_clouds: Variable(torch.cuda.FloatTensor)\n                    (B, N, 3 + input_channels) tensor\n                    Point cloud to run predicts on\n                    Each point in the point-cloud MUST\n                    be formated as (x, y, z, features...)\n        Returns:\n            end_points: dict\n        \"\"\"", "\n", "end_points", "=", "{", "}", "\n", "batch_size", "=", "inputs", "[", "'point_clouds'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "end_points", "=", "self", ".", "backbone_net", "(", "inputs", "[", "'point_clouds'", "]", ",", "end_points", ")", "\n", "xyz", "=", "end_points", "[", "'fp2_xyz'", "]", "\n", "features", "=", "end_points", "[", "'fp2_features'", "]", "\n", "end_points", "[", "'seed_inds'", "]", "=", "end_points", "[", "'fp2_inds'", "]", "\n", "end_points", "[", "'seed_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'seed_features'", "]", "=", "features", "\n", "\n", "# Directly predict bounding boxes (skips voting) ", "\n", "end_points", "=", "self", ".", "pnet", "(", "xyz", ",", "features", ",", "end_points", ")", "\n", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.__init__": [[263, 273], ["ap_helper.APCalculator.reset"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.reset"], ["\n", "\n", "bsize", "=", "len", "(", "batch_pred_map_cls", ")", "\n", "assert", "(", "bsize", "==", "len", "(", "batch_gt_map_cls", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "self", ".", "gt_map_cls", "[", "self", ".", "scan_cnt", "]", "=", "batch_gt_map_cls", "[", "i", "]", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.step": [[274, 289], ["len", "range", "len"], "methods", ["None"], ["self", ".", "pred_map_cls", "[", "self", ".", "scan_cnt", "]", "=", "batch_pred_map_cls", "[", "i", "]", "\n", "self", ".", "scan_cnt", "+=", "1", "\n", "\n", "", "", "def", "compute_metrics", "(", "self", ")", ":", "\n", "        ", "\"\"\" Use accumulated predictions and groundtruths to compute Average Precision.\n        \"\"\"", "\n", "rec", ",", "prec", ",", "ap", "=", "eval_det_multiprocessing", "(", "self", ".", "pred_map_cls", ",", "self", ".", "gt_map_cls", ",", "ovthresh", "=", "self", ".", "ap_iou_thresh", ",", "get_iou_func", "=", "get_iou_obb", ")", "\n", "ret_dict", "=", "{", "}", "\n", "for", "key", "in", "sorted", "(", "ap", ".", "keys", "(", ")", ")", ":", "\n", "            ", "clsname", "=", "self", ".", "class2type_map", "[", "key", "]", "if", "self", ".", "class2type_map", "else", "str", "(", "key", ")", "\n", "ret_dict", "[", "'%s Average Precision'", "%", "(", "clsname", ")", "]", "=", "ap", "[", "key", "]", "\n", "", "ret_dict", "[", "'mAP'", "]", "=", "np", ".", "mean", "(", "list", "(", "ap", ".", "values", "(", ")", ")", ")", "\n", "rec_list", "=", "[", "]", "\n", "for", "key", "in", "sorted", "(", "ap", ".", "keys", "(", ")", ")", ":", "\n", "            ", "clsname", "=", "self", ".", "class2type_map", "[", "key", "]", "if", "self", ".", "class2type_map", "else", "str", "(", "key", ")", "\n", "try", ":", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.compute_metrics": [[290, 311], ["eval_det.eval_det_multiprocessing", "sorted", "numpy.mean", "sorted", "numpy.mean", "ap.keys", "list", "ap.keys", "str", "ap.values", "str", "rec_list.append", "rec_list.append"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.eval_det.eval_det_multiprocessing"], ["                ", "ret_dict", "[", "'%s Recall'", "%", "(", "clsname", ")", "]", "=", "rec", "[", "key", "]", "[", "-", "1", "]", "\n", "rec_list", ".", "append", "(", "rec", "[", "key", "]", "[", "-", "1", "]", ")", "\n", "", "except", ":", "\n", "                ", "ret_dict", "[", "'%s Recall'", "%", "(", "clsname", ")", "]", "=", "0", "\n", "rec_list", ".", "append", "(", "0", ")", "\n", "", "", "ret_dict", "[", "'AR'", "]", "=", "np", ".", "mean", "(", "rec_list", ")", "\n", "return", "ret_dict", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "gt_map_cls", "=", "{", "}", "# {scan_id: [(classname, bbox)]}", "\n", "self", ".", "pred_map_cls", "=", "{", "}", "# {scan_id: [(classname, bbox, score)]}", "\n", "self", ".", "scan_cnt", "=", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.reset": [[312, 316], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.in_hull": [[16, 21], ["isinstance", "Delaunay", "Delaunay.find_simplex"], "function", ["None"], ["from", "eval_det", "import", "eval_det_cls", ",", "eval_det_multiprocessing", "\n", "from", "eval_det", "import", "get_iou_obb", "\n", "from", "nms", "import", "nms_2d_faster", ",", "nms_3d_faster", ",", "nms_3d_faster_samecls", "\n", "from", "box_util", "import", "get_3d_box", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.extract_pc_in_box3d": [[23, 27], ["ap_helper.in_hull"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.in_hull"], ["    ", "from", "scipy", ".", "spatial", "import", "Delaunay", "\n", "if", "not", "isinstance", "(", "hull", ",", "Delaunay", ")", ":", "\n", "        ", "hull", "=", "Delaunay", "(", "hull", ")", "\n", "", "return", "hull", ".", "find_simplex", "(", "p", ")", ">=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.flip_axis_to_camera": [[29, 37], ["numpy.copy"], "function", ["None"], ["    ", "''' pc: (N,3), box3d: (8,3) '''", "\n", "box3d_roi_inds", "=", "in_hull", "(", "pc", "[", ":", ",", "0", ":", "3", "]", ",", "box3d", ")", "\n", "return", "pc", "[", "box3d_roi_inds", ",", ":", "]", ",", "box3d_roi_inds", "\n", "\n", "", "def", "flip_axis_to_camera", "(", "pc", ")", ":", "\n", "    ", "''' Flip X-right,Y-forward,Z-up to X-right,Y-down,Z-forward\n    Input and output are both (N,3) array\n    '''", "\n", "pc2", "=", "np", ".", "copy", "(", "pc", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.flip_camera_to_axis": [[39, 46], ["numpy.copy"], "function", ["None"], ["pc2", "[", "...", ",", "1", "]", "*=", "-", "1", "\n", "return", "pc2", "\n", "\n", "", "def", "flip_camera_to_axis", "(", "pc", ")", ":", "\n", "    ", "''' The inverse operation of [flip_axis_to_camera].\n    '''", "\n", "pc2", "=", "np", ".", "copy", "(", "pc", ")", "\n", "pc2", "[", "...", ",", "1", "]", "*=", "-", "1", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.flip_axis_to_depth": [[48, 53], ["numpy.copy"], "function", ["None"], ["return", "pc2", "\n", "\n", "", "def", "flip_axis_to_depth", "(", "pc", ")", ":", "\n", "    ", "pc2", "=", "np", ".", "copy", "(", "pc", ")", "\n", "pc2", "[", "...", ",", "[", "0", ",", "1", ",", "2", "]", "]", "=", "pc2", "[", "...", ",", "[", "0", ",", "2", ",", "1", "]", "]", "# depth X,Y,Z = cam X,Z,-Y", "\n", "pc2", "[", "...", ",", "2", "]", "*=", "-", "1", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.softmax": [[55, 61], ["numpy.exp", "numpy.sum", "numpy.max", "len", "len"], "function", ["None"], ["\n", "", "def", "softmax", "(", "x", ")", ":", "\n", "    ", "''' Numpy function for softmax'''", "\n", "shape", "=", "x", ".", "shape", "\n", "probs", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ",", "axis", "=", "len", "(", "shape", ")", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "probs", "/=", "np", ".", "sum", "(", "probs", ",", "axis", "=", "len", "(", "shape", ")", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "probs", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_predictions": [[69, 209], ["torch.argmax", "torch.gather", "torch.gather.squeeze_", "torch.argmax", "torch.gather", "torch.gather.squeeze_", "torch.argmax", "ap_helper.softmax", "numpy.zeros", "ap_helper.flip_axis_to_camera", "range", "numpy.ones", "end_points[].detach().cpu().numpy", "range", "torch.argmax.unsqueeze", "torch.argmax.unsqueeze().unsqueeze().repeat", "end_points[].detach().cpu().numpy", "pred_center.detach().cpu().numpy", "range", "range", "ap_helper.sigmoid", "numpy.zeros", "range", "config_dict[].class2angle", "config_dict[].class2size", "box_util.get_3d_box", "end_points[].cpu().numpy", "range", "end_points[].detach().cpu", "numpy.zeros", "range", "nms.nms_2d_faster", "numpy.zeros", "range", "range", "batch_pred_map_cls.append", "batch_pred_map_cls.append", "torch.argmax.unsqueeze().unsqueeze", "end_points[].detach().cpu", "pred_center.detach().cpu", "pred_heading_class[].detach().cpu().numpy", "pred_heading_residual[].detach().cpu().numpy", "int", "pred_size_residual[].detach().cpu().numpy", "ap_helper.flip_axis_to_depth", "ap_helper.extract_pc_in_box3d", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.where", "len", "numpy.zeros", "range", "nms.nms_3d_faster", "numpy.zeros", "range", "pred_size_class[].detach().cpu().numpy", "end_points[].cpu", "len", "end_points[].detach", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.where", "len", "numpy.zeros", "range", "nms.nms_3d_faster_samecls", "torch.argmax.unsqueeze", "end_points[].detach", "pred_center.detach", "pred_heading_class[].detach().cpu", "pred_heading_residual[].detach().cpu", "pred_size_residual[].detach().cpu", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.where", "len", "range", "pred_sem_cls[].item", "range", "pred_size_class[].detach().cpu", "pred_heading_class[].detach", "pred_heading_residual[].detach", "pred_size_residual[].detach", "pred_size_class[].detach"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.softmax", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.flip_axis_to_camera", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2angle", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2size", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.get_3d_box", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.nms.nms_2d_faster", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.flip_axis_to_depth", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.extract_pc_in_box3d", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.nms.nms_3d_faster", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.nms.nms_3d_faster_samecls"], ["\n", "pred_center", "=", "end_points", "[", "'center'", "]", "# B,num_proposal,3", "\n", "pred_heading_class", "=", "torch", ".", "argmax", "(", "end_points", "[", "'heading_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "torch", ".", "gather", "(", "end_points", "[", "'heading_residuals'", "]", ",", "2", ",", "\n", "pred_heading_class", ".", "unsqueeze", "(", "-", "1", ")", ")", "# B,num_proposal,1", "\n", "pred_heading_residual", ".", "squeeze_", "(", "2", ")", "\n", "pred_size_class", "=", "torch", ".", "argmax", "(", "end_points", "[", "'size_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_size_residual", "=", "torch", ".", "gather", "(", "end_points", "[", "'size_residuals'", "]", ",", "2", ",", "\n", "pred_size_class", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "# B,num_proposal,1,3", "\n", "pred_size_residual", ".", "squeeze_", "(", "2", ")", "\n", "pred_sem_cls", "=", "torch", ".", "argmax", "(", "end_points", "[", "'sem_cls_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "sem_cls_probs", "=", "softmax", "(", "end_points", "[", "'sem_cls_scores'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "# B,num_proposal,10", "\n", "pred_sem_cls_prob", "=", "np", ".", "max", "(", "sem_cls_probs", ",", "-", "1", ")", "# B,num_proposal", "\n", "\n", "num_proposal", "=", "pred_center", ".", "shape", "[", "1", "]", "\n", "# Since we operate in upright_depth coord for points, while util functions", "\n", "# assume upright_camera coord.", "\n", "bsize", "=", "pred_center", ".", "shape", "[", "0", "]", "\n", "pred_corners_3d_upright_camera", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "num_proposal", ",", "8", ",", "3", ")", ")", "\n", "pred_center_upright_camera", "=", "flip_axis_to_camera", "(", "pred_center", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "num_proposal", ")", ":", "\n", "            ", "heading_angle", "=", "config_dict", "[", "'dataset_config'", "]", ".", "class2angle", "(", "pred_heading_class", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "pred_heading_residual", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "box_size", "=", "config_dict", "[", "'dataset_config'", "]", ".", "class2size", "(", "int", "(", "pred_size_class", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "pred_size_residual", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "ratio", "=", "1.0", ")", "\n", "corners_3d_upright_camera", "=", "get_3d_box", "(", "box_size", ",", "heading_angle", ",", "pred_center_upright_camera", "[", "i", ",", "j", ",", ":", "]", ")", "\n", "pred_corners_3d_upright_camera", "[", "i", ",", "j", "]", "=", "corners_3d_upright_camera", "\n", "\n", "", "", "K", "=", "pred_center", ".", "shape", "[", "1", "]", "# K==num_proposal", "\n", "nonempty_box_mask", "=", "np", ".", "ones", "(", "(", "bsize", ",", "K", ")", ")", "\n", "\n", "if", "config_dict", "[", "'remove_empty_box'", "]", ":", "\n", "# -------------------------------------", "\n", "# Remove predicted boxes without any point within them..", "\n", "        ", "batch_pc", "=", "end_points", "[", "'point_clouds'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", "0", ":", "3", "]", "# B,N,3", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "pc", "=", "batch_pc", "[", "i", ",", ":", ",", ":", "]", "# (N,3)", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "box3d", "=", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", ":", "]", "# (8,3)", "\n", "box3d", "=", "flip_axis_to_depth", "(", "box3d", ")", "\n", "pc_in_box", ",", "inds", "=", "extract_pc_in_box3d", "(", "pc", ",", "box3d", ")", "\n", "if", "len", "(", "pc_in_box", ")", "<", "5", ":", "\n", "                    ", "nonempty_box_mask", "[", "i", ",", "j", "]", "=", "0", "\n", "# -------------------------------------", "\n", "\n", "", "", "", "", "obj_logits", "=", "end_points", "[", "'objectness_scores'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "obj_prob", "=", "softmax", "(", "obj_logits", ")", "[", ":", ",", ":", ",", "1", "]", "# (B,K)", "\n", "if", "not", "config_dict", "[", "'use_3d_nms'", "]", ":", "\n", "# ---------- NMS input: pred_with_prob in (B,K,7) -----------", "\n", "        ", "pred_mask", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "K", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "boxes_2d_with_prob", "=", "np", ".", "zeros", "(", "(", "K", ",", "5", ")", ")", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "boxes_2d_with_prob", "[", "j", ",", "0", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_2d_with_prob", "[", "j", ",", "2", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_2d_with_prob", "[", "j", ",", "1", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_2d_with_prob", "[", "j", ",", "3", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_2d_with_prob", "[", "j", ",", "4", "]", "=", "obj_prob", "[", "i", ",", "j", "]", "\n", "", "nonempty_box_inds", "=", "np", ".", "where", "(", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ")", "[", "0", "]", "\n", "pick", "=", "nms_2d_faster", "(", "boxes_2d_with_prob", "[", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "config_dict", "[", "'nms_iou'", "]", ",", "config_dict", "[", "'use_old_type_nms'", "]", ")", "\n", "assert", "(", "len", "(", "pick", ")", ">", "0", ")", "\n", "pred_mask", "[", "i", ",", "nonempty_box_inds", "[", "pick", "]", "]", "=", "1", "\n", "", "end_points", "[", "'pred_mask'", "]", "=", "pred_mask", "\n", "# ---------- NMS output: pred_mask in (B,K) -----------", "\n", "", "elif", "config_dict", "[", "'use_3d_nms'", "]", "and", "(", "not", "config_dict", "[", "'cls_nms'", "]", ")", ":", "\n", "# ---------- NMS input: pred_with_prob in (B,K,7) -----------", "\n", "        ", "pred_mask", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "K", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "boxes_3d_with_prob", "=", "np", ".", "zeros", "(", "(", "K", ",", "7", ")", ")", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "boxes_3d_with_prob", "[", "j", ",", "0", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "1", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "1", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "2", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "3", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "4", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "1", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "5", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "6", "]", "=", "obj_prob", "[", "i", ",", "j", "]", "\n", "", "nonempty_box_inds", "=", "np", ".", "where", "(", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ")", "[", "0", "]", "\n", "pick", "=", "nms_3d_faster", "(", "boxes_3d_with_prob", "[", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "config_dict", "[", "'nms_iou'", "]", ",", "config_dict", "[", "'use_old_type_nms'", "]", ")", "\n", "assert", "(", "len", "(", "pick", ")", ">", "0", ")", "\n", "pred_mask", "[", "i", ",", "nonempty_box_inds", "[", "pick", "]", "]", "=", "1", "\n", "", "end_points", "[", "'pred_mask'", "]", "=", "pred_mask", "\n", "# ---------- NMS output: pred_mask in (B,K) -----------", "\n", "", "elif", "config_dict", "[", "'use_3d_nms'", "]", "and", "config_dict", "[", "'cls_nms'", "]", ":", "\n", "# ---------- NMS input: pred_with_prob in (B,K,8) -----------", "\n", "        ", "pred_mask", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "K", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "            ", "boxes_3d_with_prob", "=", "np", ".", "zeros", "(", "(", "K", ",", "8", ")", ")", "\n", "for", "j", "in", "range", "(", "K", ")", ":", "\n", "                ", "boxes_3d_with_prob", "[", "j", ",", "0", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "1", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "1", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "2", "]", "=", "np", ".", "min", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "3", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "0", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "4", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "1", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "5", "]", "=", "np", ".", "max", "(", "pred_corners_3d_upright_camera", "[", "i", ",", "j", ",", ":", ",", "2", "]", ")", "\n", "boxes_3d_with_prob", "[", "j", ",", "6", "]", "=", "obj_prob", "[", "i", ",", "j", "]", "\n", "boxes_3d_with_prob", "[", "j", ",", "7", "]", "=", "pred_sem_cls", "[", "i", ",", "j", "]", "# only suppress if the two boxes are of the same class!!", "\n", "", "nonempty_box_inds", "=", "np", ".", "where", "(", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ")", "[", "0", "]", "\n", "pick", "=", "nms_3d_faster_samecls", "(", "boxes_3d_with_prob", "[", "nonempty_box_mask", "[", "i", ",", ":", "]", "==", "1", ",", ":", "]", ",", "\n", "config_dict", "[", "'nms_iou'", "]", ",", "config_dict", "[", "'use_old_type_nms'", "]", ")", "\n", "assert", "(", "len", "(", "pick", ")", ">", "0", ")", "\n", "pred_mask", "[", "i", ",", "nonempty_box_inds", "[", "pick", "]", "]", "=", "1", "\n", "", "end_points", "[", "'pred_mask'", "]", "=", "pred_mask", "\n", "# ---------- NMS output: pred_mask in (B,K) -----------", "\n", "\n", "", "batch_pred_map_cls", "=", "[", "]", "# a list (len: batch_size) of list (len: num of predictions per sample) of tuples of pred_cls, pred_box and conf (0-1)", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "        ", "if", "config_dict", "[", "'per_class_proposal'", "]", ":", "\n", "            ", "cur_list", "=", "[", "]", "\n", "for", "ii", "in", "range", "(", "config_dict", "[", "'dataset_config'", "]", ".", "num_class", ")", ":", "\n", "                ", "cur_list", "+=", "[", "(", "ii", ",", "pred_corners_3d_upright_camera", "[", "i", ",", "j", "]", ",", "sem_cls_probs", "[", "i", ",", "j", ",", "ii", "]", "*", "obj_prob", "[", "i", ",", "j", "]", ")", "for", "j", "in", "range", "(", "pred_center", ".", "shape", "[", "1", "]", ")", "if", "pred_mask", "[", "i", ",", "j", "]", "==", "1", "and", "obj_prob", "[", "i", ",", "j", "]", ">", "config_dict", "[", "'conf_thresh'", "]", "]", "\n", "", "batch_pred_map_cls", ".", "append", "(", "cur_list", ")", "\n", "", "else", ":", "\n", "            ", "batch_pred_map_cls", ".", "append", "(", "[", "(", "pred_sem_cls", "[", "i", ",", "j", "]", ".", "item", "(", ")", ",", "pred_corners_3d_upright_camera", "[", "i", ",", "j", "]", ",", "obj_prob", "[", "i", ",", "j", "]", ")", "for", "j", "in", "range", "(", "pred_center", ".", "shape", "[", "1", "]", ")", "if", "pred_mask", "[", "i", ",", "j", "]", "==", "1", "and", "obj_prob", "[", "i", ",", "j", "]", ">", "config_dict", "[", "'conf_thresh'", "]", "]", ")", "\n", "", "", "end_points", "[", "'batch_pred_map_cls'", "]", "=", "batch_pred_map_cls", "\n", "\n", "return", "batch_pred_map_cls", "\n", "\n", "\n", "", "def", "parse_groundtruths", "(", "end_points", ",", "config_dict", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_groundtruths": [[211, 258], ["numpy.zeros", "ap_helper.flip_axis_to_camera", "range", "range", "center_label[].detach().cpu().numpy", "range", "batch_gt_map_cls.append", "config_dict[].class2angle", "config_dict[].class2size", "box_util.get_3d_box", "center_label[].detach().cpu", "heading_class_label[].detach().cpu().numpy", "heading_residual_label[].detach().cpu().numpy", "int", "size_residual_label[].detach().cpu().numpy", "size_class_label[].detach().cpu().numpy", "sem_cls_label[].item", "range", "center_label[].detach", "heading_class_label[].detach().cpu", "heading_residual_label[].detach().cpu", "size_residual_label[].detach().cpu", "size_class_label[].detach().cpu", "heading_class_label[].detach", "heading_residual_label[].detach", "size_residual_label[].detach", "size_class_label[].detach"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.flip_axis_to_camera", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2angle", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2size", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.get_3d_box"], ["\n", "center_label", "=", "end_points", "[", "'center_label'", "]", "\n", "heading_class_label", "=", "end_points", "[", "'heading_class_label'", "]", "\n", "heading_residual_label", "=", "end_points", "[", "'heading_residual_label'", "]", "\n", "size_class_label", "=", "end_points", "[", "'size_class_label'", "]", "\n", "size_residual_label", "=", "end_points", "[", "'size_residual_label'", "]", "\n", "box_label_mask", "=", "end_points", "[", "'box_label_mask'", "]", "\n", "sem_cls_label", "=", "end_points", "[", "'sem_cls_label'", "]", "\n", "bsize", "=", "center_label", ".", "shape", "[", "0", "]", "\n", "\n", "K2", "=", "center_label", ".", "shape", "[", "1", "]", "# K2==MAX_NUM_OBJ", "\n", "gt_corners_3d_upright_camera", "=", "np", ".", "zeros", "(", "(", "bsize", ",", "K2", ",", "8", ",", "3", ")", ")", "\n", "gt_center_upright_camera", "=", "flip_axis_to_camera", "(", "center_label", "[", ":", ",", ":", ",", "0", ":", "3", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "K2", ")", ":", "\n", "            ", "if", "box_label_mask", "[", "i", ",", "j", "]", "==", "0", ":", "continue", "\n", "heading_angle", "=", "config_dict", "[", "'dataset_config'", "]", ".", "class2angle", "(", "heading_class_label", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "heading_residual_label", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "box_size", "=", "config_dict", "[", "'dataset_config'", "]", ".", "class2size", "(", "int", "(", "size_class_label", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "size_residual_label", "[", "i", ",", "j", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "corners_3d_upright_camera", "=", "get_3d_box", "(", "box_size", ",", "heading_angle", ",", "gt_center_upright_camera", "[", "i", ",", "j", ",", ":", "]", ")", "\n", "gt_corners_3d_upright_camera", "[", "i", ",", "j", "]", "=", "corners_3d_upright_camera", "\n", "\n", "", "", "batch_gt_map_cls", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bsize", ")", ":", "\n", "        ", "batch_gt_map_cls", ".", "append", "(", "[", "(", "sem_cls_label", "[", "i", ",", "j", "]", ".", "item", "(", ")", ",", "gt_corners_3d_upright_camera", "[", "i", ",", "j", "]", ")", "for", "j", "in", "range", "(", "gt_corners_3d_upright_camera", ".", "shape", "[", "1", "]", ")", "if", "box_label_mask", "[", "i", ",", "j", "]", "==", "1", "]", ")", "\n", "", "end_points", "[", "'batch_gt_map_cls'", "]", "=", "batch_gt_map_cls", "\n", "\n", "return", "batch_gt_map_cls", "\n", "\n", "\n", "", "class", "APCalculator", "(", "object", ")", ":", "\n", "    ", "''' Calculating Average Precision '''", "\n", "def", "__init__", "(", "self", ",", "ap_iou_thresh", "=", "0.25", ",", "class2type_map", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            ap_iou_thresh: float between 0 and 1.0\n                IoU threshold to judge whether a prediction is positive.\n            class2type_map: [optional] dict {class_int:class_name}\n        \"\"\"", "\n", "self", ".", "ap_iou_thresh", "=", "ap_iou_thresh", "\n", "self", ".", "class2type_map", "=", "class2type_map", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.votenet.VoteNet.__init__": [[43, 66], ["torch.Module.__init__", "backbone_module.Pointnet2Backbone", "voting_module.VotingModule", "proposal_module.ProposalModule"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "0", ",", "num_proposal", "=", "128", ",", "vote_factor", "=", "1", ",", "sampling", "=", "'vote_fps'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "assert", "(", "mean_size_arr", ".", "shape", "[", "0", "]", "==", "self", ".", "num_size_cluster", ")", "\n", "self", ".", "input_feature_dim", "=", "input_feature_dim", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "vote_factor", "=", "vote_factor", "\n", "self", ".", "sampling", "=", "sampling", "\n", "\n", "# Backbone point feature learning", "\n", "self", ".", "backbone_net", "=", "Pointnet2Backbone", "(", "input_feature_dim", "=", "self", ".", "input_feature_dim", ")", "\n", "\n", "# Hough voting", "\n", "self", ".", "vgen", "=", "VotingModule", "(", "self", ".", "vote_factor", ",", "256", ")", "\n", "\n", "# Vote aggregation and detection", "\n", "self", ".", "pnet", "=", "ProposalModule", "(", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "sampling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.votenet.VoteNet.forward": [[67, 101], ["votenet.VoteNet.backbone_net", "votenet.VoteNet.vgen", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "features.div.div.div", "votenet.VoteNet.pnet", "torch.norm.unsqueeze", "torch.norm.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Forward pass of the network\n        Args:\n            inputs: dict\n                {point_clouds}\n                point_clouds: Variable(torch.cuda.FloatTensor)\n                    (B, N, 3 + input_channels) tensor\n                    Point cloud to run predicts on\n                    Each point in the point-cloud MUST\n                    be formated as (x, y, z, features...)\n        Returns:\n            end_points: dict\n        \"\"\"", "\n", "end_points", "=", "{", "}", "\n", "batch_size", "=", "inputs", "[", "'point_clouds'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "end_points", "=", "self", ".", "backbone_net", "(", "inputs", "[", "'point_clouds'", "]", ",", "end_points", ")", "\n", "\n", "# --------- HOUGH VOTING ---------", "\n", "xyz", "=", "end_points", "[", "'fp2_xyz'", "]", "\n", "features", "=", "end_points", "[", "'fp2_features'", "]", "\n", "end_points", "[", "'seed_inds'", "]", "=", "end_points", "[", "'fp2_inds'", "]", "\n", "end_points", "[", "'seed_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'seed_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", "=", "self", ".", "vgen", "(", "xyz", ",", "features", ")", "\n", "features_norm", "=", "torch", ".", "norm", "(", "features", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "features", "=", "features", ".", "div", "(", "features_norm", ".", "unsqueeze", "(", "1", ")", ")", "\n", "end_points", "[", "'vote_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'vote_features'", "]", "=", "features", "\n", "\n", "end_points", "=", "self", ".", "pnet", "(", "xyz", ",", "features", ",", "end_points", ")", "\n", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.votenet_weak.VoteNet.__init__": [[45, 68], ["torch.Module.__init__", "backbone_module.Pointnet2Backbone", "voting_module.VotingModule", "proposal_module.ProposalModule"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "0", ",", "num_proposal", "=", "128", ",", "vote_factor", "=", "1", ",", "sampling", "=", "'vote_fps'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "assert", "(", "mean_size_arr", ".", "shape", "[", "0", "]", "==", "self", ".", "num_size_cluster", ")", "\n", "self", ".", "input_feature_dim", "=", "input_feature_dim", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "vote_factor", "=", "vote_factor", "\n", "self", ".", "sampling", "=", "sampling", "\n", "\n", "# Backbone point feature learning", "\n", "self", ".", "backbone_net", "=", "Pointnet2Backbone", "(", "input_feature_dim", "=", "self", ".", "input_feature_dim", ")", "\n", "\n", "# Hough voting", "\n", "self", ".", "vgen", "=", "VotingModule", "(", "self", ".", "vote_factor", ",", "256", ")", "\n", "\n", "# Vote aggregation and detection", "\n", "self", ".", "pnet", "=", "ProposalModule", "(", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "sampling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.votenet_weak.VoteNet.forward": [[69, 105], ["votenet_weak.VoteNet.backbone_net", "votenet_weak.VoteNet.vgen", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "features.div.div.div", "votenet_weak.VoteNet.pnet", "torch.norm.unsqueeze", "torch.norm.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Forward pass of the network\n\n        Args:\n            inputs: dict\n                {point_clouds}\n\n                point_clouds: Variable(torch.cuda.FloatTensor)\n                    (B, N, 3 + input_channels) tensor\n                    Point cloud to run predicts on\n                    Each point in the point-cloud MUST\n                    be formated as (x, y, z, features...)\n        Returns:\n            end_points: dict\n        \"\"\"", "\n", "end_points", "=", "{", "}", "\n", "batch_size", "=", "inputs", "[", "'point_clouds'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "end_points", "=", "self", ".", "backbone_net", "(", "inputs", "[", "'point_clouds'", "]", ",", "end_points", ")", "\n", "\n", "# --------- HOUGH VOTING ---------", "\n", "xyz", "=", "end_points", "[", "'fp2_xyz'", "]", "\n", "features", "=", "end_points", "[", "'fp2_features'", "]", "\n", "end_points", "[", "'seed_inds'", "]", "=", "end_points", "[", "'fp2_inds'", "]", "\n", "end_points", "[", "'seed_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'seed_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", "=", "self", ".", "vgen", "(", "xyz", ",", "features", ")", "\n", "features_norm", "=", "torch", ".", "norm", "(", "features", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "features", "=", "features", ".", "div", "(", "features_norm", ".", "unsqueeze", "(", "1", ")", ")", "\n", "end_points", "[", "'vote_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'vote_features'", "]", "=", "features", "\n", "\n", "end_points", "=", "self", ".", "pnet", "(", "xyz", ",", "features", ",", "end_points", ")", "\n", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.softmax": [[17, 23], ["numpy.exp", "numpy.sum", "numpy.max", "len", "len"], "function", ["None"], ["def", "softmax", "(", "x", ")", ":", "\n", "    ", "''' Numpy function for softmax'''", "\n", "shape", "=", "x", ".", "shape", "\n", "probs", "=", "np", ".", "exp", "(", "x", "-", "np", ".", "max", "(", "x", ",", "axis", "=", "len", "(", "shape", ")", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "probs", "/=", "np", ".", "sum", "(", "probs", ",", "axis", "=", "len", "(", "shape", ")", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.dump_results": [[24, 142], ["end_points[].cpu().numpy", "end_points[].detach().cpu().numpy", "end_points[].detach().cpu().numpy", "end_points[].detach().cpu().numpy", "torch.argmax", "torch.gather", "pred_heading_class.detach().cpu().numpy.detach().cpu().numpy", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy", "torch.argmax", "torch.gather", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu().numpy", "range", "end_points[].cpu().numpy", "end_points[].cpu().numpy", "end_points[].cpu().numpy", "end_points[].cpu().numpy", "end_points[].cpu().numpy", "end_points[].cpu().numpy", "end_points[].detach().cpu().numpy", "end_points[].detach().cpu().numpy", "range", "os.path.exists", "os.system", "end_points[].detach().cpu().numpy", "end_points[].detach().cpu().numpy", "end_points[].detach().cpu().numpy", "pred_heading_class.detach().cpu().numpy.unsqueeze", "torch.argmax.unsqueeze().unsqueeze().repeat", "pc_util.write_ply", "pc_util.write_ply", "pc_util.write_ply", "pc_util.write_ply", "pc_util.write_ply_color", "range", "range", "range", "end_points[].cpu", "end_points[].detach().cpu", "end_points[].detach().cpu", "end_points[].detach().cpu", "pred_heading_class.detach().cpu().numpy.detach().cpu", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze().detach().cpu", "dump_helper.softmax", "os.path.join", "os.path.join", "pc_util.write_ply", "pc_util.write_ply", "pc_util.write_ply", "os.path.join", "numpy.sum", "pc_util.write_ply", "numpy.sum", "range", "end_points[].cpu", "end_points[].cpu", "end_points[].cpu", "end_points[].cpu", "end_points[].cpu", "end_points[].cpu", "end_points[].detach().cpu", "end_points[].detach().cpu", "numpy.sum", "pc_util.write_ply", "numpy.sum", "pc_util.write_ply", "os.path.join", "os.path.join", "config.param2obb", "np.vstack.append", "len", "numpy.vstack", "pc_util.write_oriented_bbox", "open", "open.close", "open", "open.close", "end_points[].detach().cpu", "end_points[].detach().cpu", "end_points[].detach().cpu", "torch.argmax.unsqueeze().unsqueeze", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "config.param2obb", "np.vstack.append", "len", "numpy.vstack", "pc_util.write_oriented_bbox", "pc_util.write_oriented_bbox", "pc_util.write_oriented_bbox", "pc_util.write_oriented_bbox", "os.path.join", "os.path.join", "tuple", "os.path.join", "os.path.join", "open.write", "open.write", "open.write", "open.write", "os.path.join", "open.write", "open.write", "open.write", "end_points[].detach", "end_points[].detach", "end_points[].detach", "pred_heading_class.detach().cpu().numpy.detach", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze().detach", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze().detach", "tuple", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "end_points[].detach", "end_points[].detach", "end_points[].detach", "end_points[].detach", "end_points[].detach", "torch.argmax.unsqueeze", "str", "str", "str", "pred_heading_residual.squeeze().detach().cpu().numpy.squeeze", "pred_size_residual.squeeze().detach().cpu().numpy.squeeze", "str", "str", "numpy.logical_and", "list", "list", "t[].flatten", "t[].flatten"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply_color", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.softmax", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_ply", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.param2obb", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_oriented_bbox", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.param2obb", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_oriented_bbox", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_oriented_bbox", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_oriented_bbox", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.pc_util.write_oriented_bbox"], ["", "def", "dump_results", "(", "end_points", ",", "dump_dir", ",", "config", ",", "inference_switch", "=", "False", ")", ":", "\n", "    ", "''' Dump results.\n\n    Args:\n        end_points: dict\n            {..., pred_mask}\n            pred_mask is a binary mask array of size (batch_size, num_proposal) computed by running NMS and empty box removal\n    Returns:\n        None\n    '''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dump_dir", ")", ":", "\n", "        ", "os", ".", "system", "(", "'mkdir %s'", "%", "(", "dump_dir", ")", ")", "\n", "\n", "# INPUT", "\n", "", "point_clouds", "=", "end_points", "[", "'point_clouds'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "batch_size", "=", "point_clouds", ".", "shape", "[", "0", "]", "\n", "\n", "# NETWORK OUTPUTS", "\n", "seed_xyz", "=", "end_points", "[", "'seed_xyz'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,num_seed,3)", "\n", "if", "'vote_xyz'", "in", "end_points", ":", "\n", "        ", "aggregated_vote_xyz", "=", "end_points", "[", "'aggregated_vote_xyz'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "vote_xyz", "=", "end_points", "[", "'vote_xyz'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,num_seed,3)", "\n", "aggregated_vote_xyz", "=", "end_points", "[", "'aggregated_vote_xyz'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "objectness_scores", "=", "end_points", "[", "'objectness_scores'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,K,2)", "\n", "pred_center", "=", "end_points", "[", "'center'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,K,3)", "\n", "pred_heading_class", "=", "torch", ".", "argmax", "(", "end_points", "[", "'heading_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "torch", ".", "gather", "(", "end_points", "[", "'heading_residuals'", "]", ",", "2", ",", "pred_heading_class", ".", "unsqueeze", "(", "-", "1", ")", ")", "# B,num_proposal,1", "\n", "pred_heading_class", "=", "pred_heading_class", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,num_proposal", "\n", "pred_heading_residual", "=", "pred_heading_residual", ".", "squeeze", "(", "2", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,num_proposal", "\n", "pred_size_class", "=", "torch", ".", "argmax", "(", "end_points", "[", "'size_scores'", "]", ",", "-", "1", ")", "# B,num_proposal", "\n", "pred_size_residual", "=", "torch", ".", "gather", "(", "end_points", "[", "'size_residuals'", "]", ",", "2", ",", "pred_size_class", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "# B,num_proposal,1,3", "\n", "pred_size_residual", "=", "pred_size_residual", ".", "squeeze", "(", "2", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,num_proposal,3", "\n", "\n", "# OTHERS", "\n", "pred_mask", "=", "end_points", "[", "'pred_mask'", "]", "# B,num_proposal", "\n", "idx_beg", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "pc", "=", "point_clouds", "[", "i", ",", ":", ",", ":", "]", "\n", "objectness_prob", "=", "softmax", "(", "objectness_scores", "[", "i", ",", ":", ",", ":", "]", ")", "[", ":", ",", "1", "]", "# (K,)", "\n", "\n", "# Dump various point clouds", "\n", "pc_util", ".", "write_ply", "(", "pc", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%03d_pc.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "pc_util", ".", "write_ply", "(", "seed_xyz", "[", "i", ",", ":", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_seed_pc.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "if", "'vote_xyz'", "in", "end_points", ":", "\n", "            ", "pc_util", ".", "write_ply", "(", "end_points", "[", "'vote_xyz'", "]", "[", "i", ",", ":", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_vgen_pc.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "pc_util", ".", "write_ply", "(", "aggregated_vote_xyz", "[", "i", ",", ":", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_aggregated_vote_pc.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "pc_util", ".", "write_ply", "(", "aggregated_vote_xyz", "[", "i", ",", ":", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_aggregated_vote_pc.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "", "pc_util", ".", "write_ply", "(", "pred_center", "[", "i", ",", ":", ",", "0", ":", "3", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_proposal_pc.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "if", "np", ".", "sum", "(", "objectness_prob", ">", "DUMP_CONF_THRESH", ")", ">", "0", ":", "\n", "            ", "pc_util", ".", "write_ply", "(", "pred_center", "[", "i", ",", "objectness_prob", ">", "DUMP_CONF_THRESH", ",", "0", ":", "3", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_confident_proposal_pc.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "\n", "# Dump predicted bounding boxes", "\n", "", "if", "np", ".", "sum", "(", "objectness_prob", ">", "DUMP_CONF_THRESH", ")", ">", "0", ":", "\n", "            ", "num_proposal", "=", "pred_center", ".", "shape", "[", "1", "]", "\n", "obbs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_proposal", ")", ":", "\n", "                ", "obb", "=", "config", ".", "param2obb", "(", "pred_center", "[", "i", ",", "j", ",", "0", ":", "3", "]", ",", "pred_heading_class", "[", "i", ",", "j", "]", ",", "pred_heading_residual", "[", "i", ",", "j", "]", ",", "\n", "pred_size_class", "[", "i", ",", "j", "]", ",", "pred_size_residual", "[", "i", ",", "j", "]", ")", "\n", "obbs", ".", "append", "(", "obb", ")", "\n", "", "if", "len", "(", "obbs", ")", ">", "0", ":", "\n", "                ", "obbs", "=", "np", ".", "vstack", "(", "tuple", "(", "obbs", ")", ")", "# (num_proposal, 7)", "\n", "pc_util", ".", "write_oriented_bbox", "(", "obbs", "[", "objectness_prob", ">", "DUMP_CONF_THRESH", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_pred_confident_bbox.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "pc_util", ".", "write_oriented_bbox", "(", "obbs", "[", "np", ".", "logical_and", "(", "objectness_prob", ">", "DUMP_CONF_THRESH", ",", "pred_mask", "[", "i", ",", ":", "]", "==", "1", ")", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_pred_confident_nms_bbox.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "pc_util", ".", "write_oriented_bbox", "(", "obbs", "[", "pred_mask", "[", "i", ",", ":", "]", "==", "1", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_pred_nms_bbox.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "pc_util", ".", "write_oriented_bbox", "(", "obbs", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_pred_bbox.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "\n", "# Return if it is at inference time. No dumping of groundtruths", "\n", "", "", "", "if", "inference_switch", ":", "\n", "        ", "return", "\n", "\n", "# LABELS", "\n", "", "gt_center", "=", "end_points", "[", "'center_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,MAX_NUM_OBJ,3)", "\n", "gt_mask", "=", "end_points", "[", "'box_label_mask'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,K2", "\n", "gt_heading_class", "=", "end_points", "[", "'heading_class_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,K2", "\n", "gt_heading_residual", "=", "end_points", "[", "'heading_residual_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,K2", "\n", "gt_size_class", "=", "end_points", "[", "'size_class_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,K2", "\n", "gt_size_residual", "=", "end_points", "[", "'size_residual_label'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# B,K2,3", "\n", "objectness_label", "=", "end_points", "[", "'objectness_label'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,K,)", "\n", "objectness_mask", "=", "end_points", "[", "'objectness_mask'", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# (B,K,)", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "if", "np", ".", "sum", "(", "objectness_label", "[", "i", ",", ":", "]", ")", ">", "0", ":", "\n", "            ", "pc_util", ".", "write_ply", "(", "pred_center", "[", "i", ",", "objectness_label", "[", "i", ",", ":", "]", ">", "0", ",", "0", ":", "3", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_gt_positive_proposal_pc.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "", "if", "np", ".", "sum", "(", "objectness_mask", "[", "i", ",", ":", "]", ")", ">", "0", ":", "\n", "            ", "pc_util", ".", "write_ply", "(", "pred_center", "[", "i", ",", "objectness_mask", "[", "i", ",", ":", "]", ">", "0", ",", "0", ":", "3", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_gt_mask_proposal_pc.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "", "pc_util", ".", "write_ply", "(", "gt_center", "[", "i", ",", ":", ",", "0", ":", "3", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_gt_centroid_pc.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "pc_util", ".", "write_ply_color", "(", "pred_center", "[", "i", ",", ":", ",", "0", ":", "3", "]", ",", "objectness_label", "[", "i", ",", ":", "]", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_proposal_pc_objectness_label.obj'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "\n", "# Dump GT bounding boxes", "\n", "obbs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "gt_center", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "gt_mask", "[", "i", ",", "j", "]", "==", "0", ":", "continue", "\n", "obb", "=", "config", ".", "param2obb", "(", "gt_center", "[", "i", ",", "j", ",", "0", ":", "3", "]", ",", "gt_heading_class", "[", "i", ",", "j", "]", ",", "gt_heading_residual", "[", "i", ",", "j", "]", ",", "\n", "gt_size_class", "[", "i", ",", "j", "]", ",", "gt_size_residual", "[", "i", ",", "j", "]", ")", "\n", "obbs", ".", "append", "(", "obb", ")", "\n", "", "if", "len", "(", "obbs", ")", ">", "0", ":", "\n", "            ", "obbs", "=", "np", ".", "vstack", "(", "tuple", "(", "obbs", ")", ")", "# (num_gt_objects, 7)", "\n", "pc_util", ".", "write_oriented_bbox", "(", "obbs", ",", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_gt_bbox.ply'", "%", "(", "idx_beg", "+", "i", ")", ")", ")", "\n", "\n", "# OPTIONALL, also dump prediction and gt details", "\n", "", "", "if", "'batch_pred_map_cls'", "in", "end_points", ":", "\n", "        ", "for", "ii", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "fout", "=", "open", "(", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_pred_map_cls.txt'", "%", "(", "ii", ")", ")", ",", "'w'", ")", "\n", "for", "t", "in", "end_points", "[", "'batch_pred_map_cls'", "]", "[", "ii", "]", ":", "\n", "                ", "fout", ".", "write", "(", "str", "(", "t", "[", "0", "]", ")", "+", "' '", ")", "\n", "fout", ".", "write", "(", "\",\"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "list", "(", "t", "[", "1", "]", ".", "flatten", "(", ")", ")", "]", ")", ")", "\n", "fout", ".", "write", "(", "' '", "+", "str", "(", "t", "[", "2", "]", ")", ")", "\n", "fout", ".", "write", "(", "'\\n'", ")", "\n", "", "fout", ".", "close", "(", ")", "\n", "", "", "if", "'batch_gt_map_cls'", "in", "end_points", ":", "\n", "        ", "for", "ii", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "fout", "=", "open", "(", "os", ".", "path", ".", "join", "(", "dump_dir", ",", "'%02d_gt_map_cls.txt'", "%", "(", "ii", ")", ")", ",", "'w'", ")", "\n", "for", "t", "in", "end_points", "[", "'batch_gt_map_cls'", "]", "[", "ii", "]", ":", "\n", "                ", "fout", ".", "write", "(", "str", "(", "t", "[", "0", "]", ")", "+", "' '", ")", "\n", "fout", ".", "write", "(", "\",\"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "list", "(", "t", "[", "1", "]", ".", "flatten", "(", ")", ")", "]", ")", ")", "\n", "fout", ".", "write", "(", "'\\n'", ")", "\n", "", "fout", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.FocalLoss.__init__": [[610, 624], ["torch.Module.__init__", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "isinstance", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["compute_box_and_sem_cls_loss", "(", "end_points_S", ",", "config", ")", "\n", "end_points_S", "[", "'center_loss'", "]", "=", "center_loss_S", "\n", "end_points_S", "[", "'heading_cls_loss'", "]", "=", "heading_cls_loss", "\n", "end_points_S", "[", "'heading_reg_loss'", "]", "=", "heading_reg_loss", "\n", "end_points_S", "[", "'size_cls_loss'", "]", "=", "size_cls_loss_S", "\n", "end_points_S", "[", "'size_reg_loss'", "]", "=", "size_reg_loss", "\n", "end_points_S", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss_S", "\n", "box_loss_S", "=", "center_loss_S", "+", "0.1", "*", "heading_cls_loss", "+", "heading_reg_loss", "+", "0.1", "*", "size_cls_loss_S", "+", "size_reg_loss", "\n", "end_points_S", "[", "'box_loss'", "]", "=", "box_loss_S", "\n", "\n", "center_loss_T", ",", "size_cls_loss_T", ",", "sem_cls_loss_T", "=", "compute_center_and_sem_cls_loss", "(", "end_points_T", ",", "config", ")", "\n", "end_points_T", "[", "'center_loss'", "]", "=", "center_loss_T", "\n", "end_points_T", "[", "'size_cls_loss'", "]", "=", "size_cls_loss_T", "\n", "end_points_T", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss_T", "\n", "box_loss_T", "=", "center_loss_T", "+", "0.1", "*", "size_cls_loss_T", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.FocalLoss.forward": [[624, 671], ["inputs.size", "inputs.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.softmax", "torch.softmax", "torch.softmax", "inputs.data.new().fill_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "targets.view", "torch.autograd.Variable.scatter_", "torch.autograd.Variable.scatter_", "torch.autograd.Variable.scatter_", "probs.log", "batch_loss.mean", "batch_loss.sum", "probs.log", "probs.log", "loss_helper.FocalLoss.alpha.cuda", "global_weight.view.view.view", "inputs.data.new", "targets.view.data.view", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.softmax", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.softmax", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.softmax"], ["box_loss_T", "=", "center_loss_T", "+", "0.1", "*", "size_cls_loss_T", "\n", "\n", "box_loss", "=", "source_coefficient", "*", "box_loss_S", "+", "box_loss_T", "\n", "sem_cls_loss", "=", "source_coefficient", "*", "sem_cls_loss_S", "+", "sem_cls_loss_T", "\n", "\n", "## Domain Align Loss", "\n", "FL_global", "=", "FocalLoss", "(", "class_num", "=", "2", ",", "gamma", "=", "3", ")", "\n", "#FL_vote = FocalLoss(class_num=2, gamma=3)", "\n", "\n", "da_coefficient", "=", "0.5", "\n", "\n", "# Source domain", "\n", "global_d_pred_S", "=", "end_points_S", "[", "'global_d_pred'", "]", "\n", "local_d_pred_S", "=", "end_points_S", "[", "'local_d_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "domain_S", "=", "Variable", "(", "torch", ".", "zeros", "(", "global_d_pred_S", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "#object_weight_local_S = F.softmax(end_points_S['objectness_scores'], dim=-1)[:,:,1:]", "\n", "object_weight_local_S", "=", "end_points_S", "[", "'objectness_label'", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "source_dloss", "=", "da_coefficient", "*", "torch", ".", "mean", "(", "local_d_pred_S", "**", "2", "*", "object_weight_local_S", ")", "+", "da_coefficient", "*", "FL_global", "(", "global_d_pred_S", ",", "domain_S", ")", "\n", "\n", "# Target domain", "\n", "global_d_pred_T", "=", "end_points_T", "[", "'global_d_pred'", "]", "\n", "local_d_pred_T", "=", "end_points_T", "[", "'local_d_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "domain_T", "=", "Variable", "(", "torch", ".", "ones", "(", "global_d_pred_T", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "#object_weight_local_T = F.softmax(end_points_T['objectness_scores'], dim=-1)[:,:,1:]", "\n", "object_weight_local_T", "=", "end_points_T", "[", "'objectness_label'", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "target_dloss", "=", "da_coefficient", "*", "torch", ".", "mean", "(", "(", "1", "-", "local_d_pred_T", ")", "**", "2", "*", "object_weight_local_T", ")", "+", "da_coefficient", "*", "FL_global", "(", "global_d_pred_T", ",", "domain_T", ")", "\n", "\n", "DA_loss", "=", "source_dloss", "+", "target_dloss", "\n", "\n", "# Final loss function", "\n", "loss", "=", "vote_loss", "+", "0.5", "*", "objectness_loss", "+", "box_loss", "+", "0.1", "*", "sem_cls_loss", "+", "DA_loss", "\n", "loss", "*=", "10", "\n", "end_points_S", "[", "'loss'", "]", "=", "loss", "\n", "\n", "# --------------------------------------------", "\n", "# Some other statistics", "\n", "obj_pred_val", "=", "torch", ".", "argmax", "(", "end_points_S", "[", "'objectness_scores'", "]", ",", "2", ")", "# B,K", "\n", "obj_acc", "=", "torch", ".", "sum", "(", "(", "obj_pred_val", "==", "objectness_label_S", ".", "long", "(", ")", ")", ".", "float", "(", ")", "*", "objectness_mask_S", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask_S", ")", "+", "1e-6", ")", "\n", "end_points_S", "[", "'obj_acc'", "]", "=", "obj_acc", "\n", "\n", "return", "loss", ",", "end_points_S", ",", "end_points_T", "\n", "\n", "\n", "", "def", "compute_jitter_loss", "(", "end_points", ")", ":", "\n", "# center_jitter: B 64 3", "\n", "# jitter_pred: B 3 64", "\n", "    ", "jitter_loss", "=", "(", "(", "end_points", "[", "'center_jitter'", "]", "-", "end_points", "[", "'jitter_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "end_points", "[", "'jitter_loss'", "]", "=", "jitter_loss", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_vote_loss": [[24, 70], ["end_points[].long", "torch.gather", "torch.gather", "torch.gather", "end_points[].long.view().repeat", "torch.gather", "torch.gather", "torch.gather", "end_points[].repeat", "vote_xyz.view", "torch.gather.view", "nn_distance.nn_distance", "torch.min", "torch.min", "torch.min", "votes_dist.view.view", "torch.sum", "torch.sum", "torch.sum", "end_points[].long.view", "torch.sum", "torch.sum", "torch.sum", "torch.gather.float", "torch.gather.float"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.nn_distance"], ["def", "compute_vote_loss", "(", "end_points", ")", ":", "\n", "    ", "\"\"\" Compute vote loss: Match predicted votes to GT votes.\n\n    Args:\n        end_points: dict (read-only)\n    \n    Returns:\n        vote_loss: scalar Tensor\n            \n    Overall idea:\n        If the seed point belongs to an object (votes_label_mask == 1),\n        then we require it to vote for the object center.\n\n        Each seed point may vote for multiple translations v1,v2,v3\n        A seed point may also be in the boxes of multiple objects:\n        o1,o2,o3 with corresponding GT votes c1,c2,c3\n\n        Then the loss for this seed point is:\n            min(d(v_i,c_j)) for i=1,2,3 and j=1,2,3\n    \"\"\"", "\n", "\n", "# Load ground truth votes and assign them to seed points", "\n", "batch_size", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "0", "]", "\n", "num_seed", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "1", "]", "# B,num_seed,3", "\n", "vote_xyz", "=", "end_points", "[", "'vote_xyz'", "]", "# B,num_seed*vote_factor,3", "\n", "seed_inds", "=", "end_points", "[", "'seed_inds'", "]", ".", "long", "(", ")", "# B,num_seed in [0,num_points-1]", "\n", "\n", "# Get groundtruth votes for the seed points", "\n", "# vote_label_mask: Use gather to select B,num_seed from B,num_point", "\n", "#   non-object point has no GT vote mask = 0, object point has mask = 1", "\n", "# vote_label: Use gather to select B,num_seed,9 from B,num_point,9", "\n", "#   with inds in shape B,num_seed,9 and 9 = GT_VOTE_FACTOR * 3", "\n", "seed_gt_votes_mask", "=", "torch", ".", "gather", "(", "end_points", "[", "'vote_label_mask'", "]", ",", "1", ",", "seed_inds", ")", "\n", "seed_inds_expand", "=", "seed_inds", ".", "view", "(", "batch_size", ",", "num_seed", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "3", "*", "GT_VOTE_FACTOR", ")", "\n", "seed_gt_votes", "=", "torch", ".", "gather", "(", "end_points", "[", "'vote_label'", "]", ",", "1", ",", "seed_inds_expand", ")", "\n", "seed_gt_votes", "+=", "end_points", "[", "'seed_xyz'", "]", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", "\n", "\n", "# Compute the min of min of distance", "\n", "vote_xyz_reshape", "=", "vote_xyz", ".", "view", "(", "batch_size", "*", "num_seed", ",", "-", "1", ",", "3", ")", "# from B,num_seed*vote_factor,3 to B*num_seed,vote_factor,3", "\n", "seed_gt_votes_reshape", "=", "seed_gt_votes", ".", "view", "(", "batch_size", "*", "num_seed", ",", "GT_VOTE_FACTOR", ",", "3", ")", "# from B,num_seed,3*GT_VOTE_FACTOR to B*num_seed,GT_VOTE_FACTOR,3", "\n", "# A predicted vote to no where is not penalized as long as there is a good vote near the GT vote.", "\n", "dist1", ",", "_", ",", "dist2", ",", "_", "=", "nn_distance", "(", "vote_xyz_reshape", ",", "seed_gt_votes_reshape", ",", "l1", "=", "True", ")", "\n", "votes_dist", ",", "_", "=", "torch", ".", "min", "(", "dist2", ",", "dim", "=", "1", ")", "# (B*num_seed,vote_factor) to (B*num_seed,)", "\n", "votes_dist", "=", "votes_dist", ".", "view", "(", "batch_size", ",", "num_seed", ")", "\n", "vote_loss", "=", "torch", ".", "sum", "(", "votes_dist", "*", "seed_gt_votes_mask", ".", "float", "(", ")", ")", "/", "(", "torch", ".", "sum", "(", "seed_gt_votes_mask", ".", "float", "(", ")", ")", "+", "1e-6", ")", "\n", "return", "vote_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_weak_vote_loss": [[71, 110], ["nn_distance.nn_distance", "dist1.view.view", "torch.min", "torch.min", "torch.min", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.ones_like().cuda", "torch.mean", "torch.mean", "torch.mean", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.nn_distance"], ["", "def", "compute_weak_vote_loss", "(", "end_points", ")", ":", "\n", "    ", "\"\"\" Compute vote loss: Match predicted votes to GT votes.\n\n    Args:\n        end_points: dict (read-only)\n    \n    Returns:\n        vote_loss: scalar Tensor\n            \n    Overall idea:\n        If the seed point belongs to an object (votes_label_mask == 1),\n        then we require it to vote for the object center.\n\n        Each seed point may vote for multiple translations v1,v2,v3\n        A seed point may also be in the boxes of multiple objects:\n        o1,o2,o3 with corresponding GT votes c1,c2,c3\n\n        Then the loss for this seed point is:\n            min(d(v_i,c_j)) for i=1,2,3 and j=1,2,3\n    \"\"\"", "\n", "\n", "# Load ground truth votes and assign them to seed points", "\n", "batch_size", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "0", "]", "\n", "num_seed", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "1", "]", "# B,num_seed,3", "\n", "vote_xyz", "=", "end_points", "[", "'vote_xyz'", "]", "# B,num_seed*vote_factor,3", "\n", "\n", "gt_center", "=", "end_points", "[", "'center_label'", "]", "[", ":", ",", ":", ",", "0", ":", "3", "]", "# B,K2,3", "\n", "\n", "# A predicted vote to no where is not penalized as long as there is a good vote near the GT vote.", "\n", "dist1", ",", "_", ",", "dist2", ",", "_", "=", "nn_distance", "(", "vote_xyz", ",", "gt_center", ",", "l1", "=", "True", ")", "# dist1: B,num_seed*vote_factor, dist2: B,K2", "\n", "dist1", "=", "dist1", ".", "view", "(", "batch_size", ",", "num_seed", ",", "-", "1", ")", "# dist1: B,num_seed,vote_factor", "\n", "votes_dist", ",", "_", "=", "torch", ".", "min", "(", "dist1", ",", "dim", "=", "2", ")", "# (B,num_seed,vote_factor) to (B,num_seed,)", "\n", "box_label_mask", "=", "end_points", "[", "'box_label_mask'", "]", "# B,K2", "\n", "sem_cls_label", "=", "end_points", "[", "'sem_cls_label'", "]", "# B,K2", "\n", "object_weight", "=", "torch", ".", "ones_like", "(", "sem_cls_label", ")", ".", "cuda", "(", ")", "\n", "#object_weight[(sem_cls_label == 4) + (sem_cls_label == 6) + (sem_cls_label == 11)] = 10", "\n", "vote_loss", "=", "torch", ".", "mean", "(", "votes_dist", ")", "+", "torch", ".", "sum", "(", "dist2", "*", "object_weight", "*", "box_label_mask", ")", "/", "(", "torch", ".", "sum", "(", "box_label_mask", ")", "+", "1e-6", ")", "\n", "\n", "return", "vote_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_objectness_loss": [[111, 153], ["nn_distance.nn_distance", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "objectness_scores.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.nn_distance"], ["", "def", "compute_objectness_loss", "(", "end_points", ")", ":", "\n", "    ", "\"\"\" Compute objectness loss for the proposals.\n\n    Args:\n        end_points: dict (read-only)\n\n    Returns:\n        objectness_loss: scalar Tensor\n        objectness_label: (batch_size, num_seed) Tensor with value 0 or 1\n        objectness_mask: (batch_size, num_seed) Tensor with value 0 or 1\n        object_assignment: (batch_size, num_seed) Tensor with long int\n            within [0,num_gt_object-1]\n    \"\"\"", "\n", "# Associate proposal and GT objects by point-to-point distances", "\n", "aggregated_vote_xyz", "=", "end_points", "[", "'aggregated_vote_xyz'", "]", "\n", "# aggregated_vote_xyz = end_points['center']", "\n", "gt_center", "=", "end_points", "[", "'center_label'", "]", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "B", "=", "gt_center", ".", "shape", "[", "0", "]", "\n", "K", "=", "aggregated_vote_xyz", ".", "shape", "[", "1", "]", "\n", "K2", "=", "gt_center", ".", "shape", "[", "1", "]", "\n", "dist1", ",", "ind1", ",", "dist2", ",", "_", "=", "nn_distance", "(", "aggregated_vote_xyz", ",", "gt_center", ")", "# dist1: BxK, dist2: BxK2", "\n", "\n", "# Generate objectness label and mask", "\n", "# objectness_label: 1 if pred object center is within NEAR_THRESHOLD of any GT object", "\n", "# objectness_mask: 0 if pred object center is in gray zone (DONOTCARE), 1 otherwise", "\n", "euclidean_dist1", "=", "torch", ".", "sqrt", "(", "dist1", "+", "1e-6", ")", "\n", "objectness_label", "=", "torch", ".", "zeros", "(", "(", "B", ",", "K", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "objectness_mask", "=", "torch", ".", "zeros", "(", "(", "B", ",", "K", ")", ")", ".", "cuda", "(", ")", "\n", "objectness_label", "[", "euclidean_dist1", "<", "NEAR_THRESHOLD", "]", "=", "1", "\n", "objectness_mask", "[", "euclidean_dist1", "<", "NEAR_THRESHOLD", "]", "=", "1", "\n", "objectness_mask", "[", "euclidean_dist1", ">", "FAR_THRESHOLD", "]", "=", "1", "\n", "\n", "# Compute objectness loss", "\n", "objectness_scores", "=", "end_points", "[", "'objectness_scores'", "]", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "torch", ".", "Tensor", "(", "OBJECTNESS_CLS_WEIGHTS", ")", ".", "cuda", "(", ")", ",", "reduction", "=", "'none'", ")", "\n", "objectness_loss", "=", "criterion", "(", "objectness_scores", ".", "transpose", "(", "2", ",", "1", ")", ",", "objectness_label", ")", "\n", "objectness_loss", "=", "torch", ".", "sum", "(", "objectness_loss", "*", "objectness_mask", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask", ")", "+", "1e-6", ")", "\n", "\n", "# Set assignment", "\n", "object_assignment", "=", "ind1", "# (B,K) with values in 0,1,...,K2-1", "\n", "\n", "return", "objectness_loss", ",", "objectness_label", ",", "objectness_mask", ",", "object_assignment", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_box_and_sem_cls_loss": [[140, 276], ["torch.gather", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.gather", "torch.gather", "torch.gather", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_.scatter_", "torch.gather", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.gather", "torch.gather", "torch.gather", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_.scatter_", "torch.cuda.FloatTensor().zero_.unsqueeze().repeat", "torch.sum", "torch.sum", "torch.sum", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.gather", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "end_points[].float", "object_assignment.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "losses.smoothl1_loss", "end_points[].transpose", "torch.sum", "torch.sum", "torch.sum", "torch.gather.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "end_points[].transpose", "torch.sum", "torch.sum", "torch.sum", "object_assignment.unsqueeze().repeat", "torch.gather.unsqueeze", "end_points[].transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "end_points[].float", "object_assignment.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "losses.l1_loss", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "losses.smoothl1_loss", "torch.sum", "torch.sum", "torch.sum", "losses.l1_loss", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor().zero_.unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "losses.smoothl1_loss", "torch.sum", "torch.sum", "torch.sum", "losses.l1_loss", "torch.sum", "torch.sum", "torch.sum", "range", "object_assignment.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "object_assignment.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "end_points[].float.unsqueeze", "object_assignment.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "end_points[].float.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "end_points[].float.unsqueeze", "end_points[].float.unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mean_size_arr.astype"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.smoothl1_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.l1_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.smoothl1_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.l1_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.smoothl1_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.l1_loss"], ["objectness_mask", "[", "euclidean_dist1", "<", "NEAR_THRESHOLD", "]", "=", "1", "\n", "objectness_mask", "[", "euclidean_dist1", ">", "FAR_THRESHOLD", "]", "=", "1", "\n", "\n", "# Compute objectness loss", "\n", "objectness_scores", "=", "end_points", "[", "'objectness_scores'", "]", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "torch", ".", "Tensor", "(", "OBJECTNESS_CLS_WEIGHTS", ")", ".", "cuda", "(", ")", ",", "reduction", "=", "'none'", ")", "\n", "objectness_loss", "=", "criterion", "(", "objectness_scores", ".", "transpose", "(", "2", ",", "1", ")", ",", "objectness_label", ")", "\n", "objectness_loss", "=", "torch", ".", "sum", "(", "objectness_loss", "*", "objectness_mask", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask", ")", "+", "1e-6", ")", "\n", "\n", "# Set assignment", "\n", "object_assignment", "=", "ind1", "# (B,K) with values in 0,1,...,K2-1", "\n", "\n", "return", "objectness_loss", ",", "objectness_label", ",", "objectness_mask", ",", "object_assignment", "\n", "\n", "", "def", "compute_box_and_sem_cls_loss", "(", "end_points", ",", "config", ")", ":", "\n", "    ", "\"\"\" Compute 3D bounding box and semantic classification loss.\n\n    Args:\n        end_points: dict (read-only)\n\n    Returns:\n        center_loss\n        heading_cls_loss\n        heading_reg_loss\n        size_cls_loss\n        size_reg_loss\n        sem_cls_loss\n    \"\"\"", "\n", "\n", "num_heading_bin", "=", "config", ".", "num_heading_bin", "\n", "num_size_cluster", "=", "config", ".", "num_size_cluster", "\n", "num_class", "=", "config", ".", "num_class", "\n", "mean_size_arr", "=", "config", ".", "mean_size_arr", "\n", "\n", "object_assignment", "=", "end_points", "[", "'object_assignment'", "]", "\n", "batch_size", "=", "object_assignment", ".", "shape", "[", "0", "]", "\n", "\n", "# Compute center loss", "\n", "pred_center", "=", "end_points", "[", "'center'", "]", "\n", "gt_center", "=", "end_points", "[", "'center_label'", "]", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "dist1", ",", "ind1", ",", "dist2", ",", "_", "=", "nn_distance", "(", "pred_center", ",", "gt_center", ")", "# dist1: BxK, dist2: BxK2", "\n", "box_label_mask", "=", "end_points", "[", "'box_label_mask'", "]", "\n", "objectness_label", "=", "end_points", "[", "'objectness_label'", "]", ".", "float", "(", ")", "\n", "centroid_reg_loss1", "=", "torch", ".", "sum", "(", "dist1", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "centroid_reg_loss2", "=", "torch", ".", "sum", "(", "dist2", "*", "box_label_mask", ")", "/", "(", "torch", ".", "sum", "(", "box_label_mask", ")", "+", "1e-6", ")", "\n", "center_loss", "=", "centroid_reg_loss1", "+", "centroid_reg_loss2", "\n", "\n", "# Compute heading loss", "\n", "heading_class_label", "=", "torch", ".", "gather", "(", "end_points", "[", "'heading_class_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_heading_class", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "heading_class_loss", "=", "criterion_heading_class", "(", "end_points", "[", "'heading_scores'", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "heading_class_label", ")", "# (B,K)", "\n", "heading_class_loss", "=", "torch", ".", "sum", "(", "heading_class_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "heading_residual_label", "=", "torch", ".", "gather", "(", "end_points", "[", "'heading_residual_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "heading_residual_normalized_label", "=", "heading_residual_label", "/", "(", "np", ".", "pi", "/", "num_heading_bin", ")", "\n", "\n", "# Ref: https://discuss.pytorch.org/t/convert-int-into-one-hot-format/507/3", "\n", "heading_label_one_hot", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "heading_class_label", ".", "shape", "[", "1", "]", ",", "num_heading_bin", ")", ".", "zero_", "(", ")", "\n", "heading_label_one_hot", ".", "scatter_", "(", "2", ",", "heading_class_label", ".", "unsqueeze", "(", "-", "1", ")", ",", "1", ")", "# src==1 so it's *one-hot* (B,K,num_heading_bin)", "\n", "heading_residual_normalized_loss", "=", "huber_loss", "(", "torch", ".", "sum", "(", "end_points", "[", "'heading_residuals_normalized'", "]", "*", "heading_label_one_hot", ",", "-", "1", ")", "-", "heading_residual_normalized_label", ",", "delta", "=", "1.0", ")", "# (B,K)", "\n", "heading_residual_normalized_loss", "=", "torch", ".", "sum", "(", "heading_residual_normalized_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "# Compute size loss", "\n", "size_class_label", "=", "torch", ".", "gather", "(", "end_points", "[", "'size_class_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_size_class", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "size_class_loss", "=", "criterion_size_class", "(", "end_points", "[", "'size_scores'", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "size_class_label", ")", "# (B,K)", "\n", "size_class_loss", "=", "torch", ".", "sum", "(", "size_class_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "size_residual_label", "=", "torch", ".", "gather", "(", "end_points", "[", "'size_residual_label'", "]", ",", "1", ",", "object_assignment", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", ")", "# select (B,K,3) from (B,K2,3)", "\n", "size_label_one_hot", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "batch_size", ",", "size_class_label", ".", "shape", "[", "1", "]", ",", "num_size_cluster", ")", ".", "zero_", "(", ")", "\n", "size_label_one_hot", ".", "scatter_", "(", "2", ",", "size_class_label", ".", "unsqueeze", "(", "-", "1", ")", ",", "1", ")", "# src==1 so it's *one-hot* (B,K,num_size_cluster)", "\n", "size_label_one_hot_tiled", "=", "size_label_one_hot", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", "# (B,K,num_size_cluster,3)", "\n", "predicted_size_residual_normalized", "=", "torch", ".", "sum", "(", "end_points", "[", "'size_residuals_normalized'", "]", "*", "size_label_one_hot_tiled", ",", "2", ")", "# (B,K,3)", "\n", "\n", "mean_size_arr_expanded", "=", "torch", ".", "from_numpy", "(", "mean_size_arr", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "# (1,1,num_size_cluster,3) ", "\n", "mean_size_label", "=", "torch", ".", "sum", "(", "size_label_one_hot_tiled", "*", "mean_size_arr_expanded", ",", "2", ")", "# (B,K,3)", "\n", "size_residual_label_normalized", "=", "size_residual_label", "/", "mean_size_label", "# (B,K,3)", "\n", "size_residual_normalized_loss", "=", "torch", ".", "mean", "(", "huber_loss", "(", "predicted_size_residual_normalized", "-", "size_residual_label_normalized", ",", "delta", "=", "1.0", ")", ",", "-", "1", ")", "# (B,K,3) -> (B,K)", "\n", "size_residual_normalized_loss", "=", "torch", ".", "sum", "(", "size_residual_normalized_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "# 3.4 Semantic cls loss", "\n", "sem_cls_label", "=", "torch", ".", "gather", "(", "end_points", "[", "'sem_cls_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_sem_cls", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "sem_cls_loss", "=", "criterion_sem_cls", "(", "end_points", "[", "'sem_cls_scores'", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "sem_cls_label", ")", "# (B,K)", "\n", "sem_cls_loss", "=", "torch", ".", "sum", "(", "sem_cls_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "return", "center_loss", ",", "heading_class_loss", ",", "heading_residual_normalized_loss", ",", "size_class_loss", ",", "size_residual_normalized_loss", ",", "sem_cls_loss", "\n", "\n", "\n", "", "def", "smoothl1_loss", "(", "error", ",", "delta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Smooth L1 loss.\n    x = error = pred - gt or dist(pred,gt)\n    0.5 * |x|^2                 if |x|<=d\n    |x| - 0.5 * d               if |x|>d\n    \"\"\"", "\n", "diff", "=", "torch", ".", "abs", "(", "error", ")", "\n", "loss", "=", "torch", ".", "where", "(", "diff", "<", "delta", ",", "0.5", "*", "diff", "*", "diff", "/", "delta", ",", "diff", "-", "0.5", "*", "delta", ")", "\n", "return", "loss", "\n", "\n", "\n", "", "def", "compute_center_and_sem_cls_loss", "(", "end_points", ",", "config", ")", ":", "\n", "    ", "\"\"\" Compute 3D bounding box and semantic classification loss.\n\n    Args:\n        end_points: dict (read-only)\n\n    Returns:\n        center_loss\n        heading_cls_loss\n        heading_reg_loss\n        size_cls_loss\n        size_reg_loss\n        sem_cls_loss\n    \"\"\"", "\n", "\n", "num_heading_bin", "=", "config", ".", "num_heading_bin", "\n", "num_size_cluster", "=", "config", ".", "num_size_cluster", "\n", "num_class", "=", "config", ".", "num_class", "\n", "mean_size_arr", "=", "config", ".", "mean_size_arr", "\n", "\n", "object_assignment", "=", "end_points", "[", "'object_assignment'", "]", "\n", "batch_size", "=", "object_assignment", ".", "shape", "[", "0", "]", "\n", "\n", "# Compute center loss", "\n", "\n", "pred_center", "=", "end_points", "[", "'center'", "]", "\n", "gt_center", "=", "end_points", "[", "'center_label'", "]", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "dist1", ",", "ind1", ",", "dist2", ",", "_", "=", "nn_distance", "(", "pred_center", ",", "gt_center", ")", "# dist1: BxK, dist2: BxK2", "\n", "box_label_mask", "=", "end_points", "[", "'box_label_mask'", "]", "\n", "objectness_label", "=", "end_points", "[", "'objectness_label'", "]", ".", "float", "(", ")", "\n", "centroid_reg_loss1", "=", "torch", ".", "sum", "(", "dist1", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "centroid_reg_loss2", "=", "torch", ".", "sum", "(", "dist2", "*", "box_label_mask", ")", "/", "(", "torch", ".", "sum", "(", "box_label_mask", ")", "+", "1e-6", ")", "\n", "center_loss", "=", "centroid_reg_loss1", "+", "centroid_reg_loss2", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.smoothl1_loss": [[231, 240], ["torch.abs", "torch.abs", "torch.abs", "torch.where", "torch.where", "torch.where"], "function", ["None"], ["", "def", "smoothl1_loss", "(", "error", ",", "delta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Smooth L1 loss.\n    x = error = pred - gt or dist(pred,gt)\n    0.5 * |x|^2                 if |x|<=d\n    |x| - 0.5 * d               if |x|>d\n    \"\"\"", "\n", "diff", "=", "torch", ".", "abs", "(", "error", ")", "\n", "loss", "=", "torch", ".", "where", "(", "diff", "<", "delta", ",", "0.5", "*", "diff", "*", "diff", "/", "delta", ",", "diff", "-", "0.5", "*", "delta", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_center_and_sem_cls_loss": [[479, 556], ["torch.gather", "torch.gather", "torch.gather", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.gather", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "end_points[].float", "object_assignment.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "losses.smoothl1_loss", "end_points[].transpose", "torch.sum", "torch.sum", "torch.sum", "end_points[].transpose", "torch.sum", "torch.sum", "torch.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.sum", "torch.sum", "torch.sum", "end_points[].float", "object_assignment.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "losses.l1_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "range", "object_assignment.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "end_points[].float.unsqueeze", "object_assignment.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "end_points[].float.unsqueeze", "torch.gather.cpu"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.smoothl1_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.l1_loss"], ["\n", "\n", "def", "__init__", "(", "self", ",", "class_num", ",", "alpha", "=", "None", ",", "gamma", "=", "2", ",", "size_average", "=", "True", ",", "sigmoid", "=", "False", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "alpha", "is", "None", ":", "\n", "            ", "self", ".", "alpha", "=", "Variable", "(", "torch", ".", "ones", "(", "class_num", ",", "1", ")", "*", "1.0", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "alpha", ",", "Variable", ")", ":", "\n", "                ", "self", ".", "alpha", "=", "alpha", "\n", "", "else", ":", "\n", "                ", "self", ".", "alpha", "=", "Variable", "(", "alpha", ")", "\n", "", "", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "class_num", "=", "class_num", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "sigmoid", "=", "sigmoid", "\n", "self", ".", "reduce", "=", "reduce", "\n", "", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "global_weight", "=", "None", ")", ":", "\n", "        ", "N", "=", "inputs", ".", "size", "(", "0", ")", "\n", "# print(N)", "\n", "C", "=", "inputs", ".", "size", "(", "1", ")", "\n", "if", "self", ".", "sigmoid", ":", "\n", "            ", "P", "=", "F", ".", "sigmoid", "(", "inputs", ")", "\n", "#F.softmax(inputs)", "\n", "if", "targets", "==", "0", ":", "\n", "                ", "probs", "=", "1", "-", "P", "#(P * class_mask).sum(1).view(-1, 1)", "\n", "log_p", "=", "probs", ".", "log", "(", ")", "\n", "batch_loss", "=", "-", "(", "torch", ".", "pow", "(", "(", "1", "-", "probs", ")", ",", "self", ".", "gamma", ")", ")", "*", "log_p", "\n", "", "if", "targets", "==", "1", ":", "\n", "                ", "probs", "=", "P", "# (P * class_mask).sum(1).view(-1, 1)", "\n", "log_p", "=", "probs", ".", "log", "(", ")", "\n", "batch_loss", "=", "-", "(", "torch", ".", "pow", "(", "(", "1", "-", "probs", ")", ",", "self", ".", "gamma", ")", ")", "*", "log_p", "\n", "", "", "else", ":", "\n", "#inputs = F.sigmoid(inputs)", "\n", "            ", "P", "=", "F", ".", "softmax", "(", "inputs", ",", "dim", "=", "-", "1", ")", "\n", "class_mask", "=", "inputs", ".", "data", ".", "new", "(", "N", ",", "C", ")", ".", "fill_", "(", "0", ")", "\n", "class_mask", "=", "Variable", "(", "class_mask", ")", "\n", "ids", "=", "targets", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "class_mask", ".", "scatter_", "(", "1", ",", "ids", ".", "data", ",", "1.", ")", "\n", "# print(class_mask)", "\n", "\n", "\n", "if", "inputs", ".", "is_cuda", "and", "not", "self", ".", "alpha", ".", "is_cuda", ":", "\n", "                ", "self", ".", "alpha", "=", "self", ".", "alpha", ".", "cuda", "(", ")", "\n", "", "alpha", "=", "self", ".", "alpha", "[", "ids", ".", "data", ".", "view", "(", "-", "1", ")", "]", "\n", "\n", "probs", "=", "(", "P", "*", "class_mask", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "log_p", "=", "probs", ".", "log", "(", ")", "\n", "# print('probs size= {}'.format(probs.size()))", "\n", "# print(probs)", "\n", "\n", "batch_loss", "=", "-", "alpha", "*", "(", "torch", ".", "pow", "(", "(", "1", "-", "probs", ")", ",", "self", ".", "gamma", ")", ")", "*", "log_p", "\n", "# print('-----bacth_loss------')", "\n", "# print(batch_loss)", "\n", "\n", "", "if", "not", "self", ".", "reduce", ":", "\n", "            ", "return", "batch_loss", "\n", "", "if", "self", ".", "size_average", ":", "\n", "            ", "if", "global_weight", "is", "not", "None", ":", "\n", "                ", "global_weight", "=", "global_weight", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "batch_loss", "=", "batch_loss", "*", "global_weight", "\n", "", "loss", "=", "batch_loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "loss", "=", "batch_loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "\n", "", "", "def", "get_loss_DA", "(", "end_points_S", ",", "end_points_T", ",", "config", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_sem_cls_loss": [[306, 335], ["end_points[].transpose", "torch.mean", "torch.mean", "torch.mean", "torch.BCEWithLogitsLoss", "nn.BCEWithLogitsLoss.", "torch.mean.float", "cloud_label.float"], "function", ["None"], ["", "def", "compute_sem_cls_loss", "(", "end_points", ",", "config", ")", ":", "\n", "    ", "\"\"\" Compute 3D bounding box and semantic classification loss.\n\n    Args:\n        end_points: dict (read-only)\n\n    Returns:\n        center_loss\n        heading_cls_loss\n        heading_reg_loss\n        size_cls_loss\n        size_reg_loss\n        sem_cls_loss\n    \"\"\"", "\n", "\n", "num_heading_bin", "=", "config", ".", "num_heading_bin", "\n", "num_size_cluster", "=", "config", ".", "num_size_cluster", "\n", "num_class", "=", "config", ".", "num_class", "\n", "mean_size_arr", "=", "config", ".", "mean_size_arr", "\n", "\n", "cloud_label", "=", "end_points", "[", "'cloud_label'", "]", "# Bxnum_class", "\n", "batch_size", "=", "cloud_label", ".", "shape", "[", "0", "]", "\n", "\n", "# 3.4 Semantic cls loss", "\n", "cloud_pred", "=", "end_points", "[", "'sem_cls_scores'", "]", ".", "transpose", "(", "2", ",", "1", ")", "# Bxnum_classxK", "\n", "cloud_pred_gap", "=", "torch", ".", "mean", "(", "cloud_pred", ",", "dim", "=", "2", ")", "# Bxnum_class", "\n", "BCEWL", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "sem_cls_loss", "=", "BCEWL", "(", "cloud_pred_gap", ".", "float", "(", ")", ",", "cloud_label", ".", "float", "(", ")", ")", "\n", "return", "sem_cls_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_loss": [[278, 316], ["loss_helper.compute_objectness_loss_based_on_query_points", "loss_helper.compute_box_and_sem_cls_loss", "end_points.keys", "loss_helper.compute_points_obj_cls_loss_hard_topk"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_objectness_loss_based_on_query_points", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_box_and_sem_cls_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_points_obj_cls_loss_hard_topk"], ["\n", "\n", "# Compute size loss", "\n", "size_class_label", "=", "torch", ".", "gather", "(", "end_points", "[", "'size_class_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_size_class", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "size_class_loss", "=", "criterion_size_class", "(", "end_points", "[", "'size_scores'", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "size_class_label", ")", "# (B,K)", "\n", "size_class_loss", "=", "torch", ".", "sum", "(", "size_class_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "# 3.4 Semantic cls loss", "\n", "sem_cls_label", "=", "torch", ".", "gather", "(", "end_points", "[", "'sem_cls_label'", "]", ",", "1", ",", "object_assignment", ")", "# select (B,K) from (B,K2)", "\n", "criterion_sem_cls", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "sem_cls_loss", "=", "criterion_sem_cls", "(", "end_points", "[", "'sem_cls_scores'", "]", ".", "transpose", "(", "2", ",", "1", ")", ",", "sem_cls_label", ")", "# (B,K)", "\n", "sem_cls_loss", "=", "torch", ".", "sum", "(", "sem_cls_loss", "*", "objectness_label", ")", "/", "(", "torch", ".", "sum", "(", "objectness_label", ")", "+", "1e-6", ")", "\n", "\n", "return", "center_loss", ",", "size_class_loss", ",", "sem_cls_loss", "\n", "\n", "", "def", "compute_sem_cls_loss", "(", "end_points", ",", "config", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_loss_weak": [[557, 607], ["loss_helper.compute_objectness_loss_based_on_query_points", "loss_helper.compute_objectness_loss_based_on_query_points_weak", "loss_helper.compute_box_and_sem_cls_loss", "loss_helper.compute_center_and_sem_cls_loss", "end_points.keys", "loss_helper.compute_points_obj_cls_loss_hard_topk", "loss_helper.compute_points_obj_cls_loss_hard_topk_weak"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_objectness_loss_based_on_query_points", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_objectness_loss_based_on_query_points_weak", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_box_and_sem_cls_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_center_and_sem_cls_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_points_obj_cls_loss_hard_topk", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_points_obj_cls_loss_hard_topk_weak"], ["\n", "\n", "source_coefficient", "=", "0.1", "\n", "\n", "# Vote loss", "\n", "vote_loss_S", "=", "compute_weak_vote_loss", "(", "end_points_S", ")", "\n", "vote_loss_T", "=", "compute_weak_vote_loss", "(", "end_points_T", ")", "\n", "vote_loss", "=", "source_coefficient", "*", "vote_loss_S", "+", "vote_loss_T", "\n", "end_points_S", "[", "'vote_loss'", "]", "=", "vote_loss_S", "\n", "end_points_T", "[", "'vote_loss'", "]", "=", "vote_loss_T", "\n", "\n", "# Obj loss", "\n", "objectness_loss_S", ",", "objectness_label_S", ",", "objectness_mask_S", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points_S", ")", "\n", "end_points_S", "[", "'objectness_loss'", "]", "=", "objectness_loss_S", "\n", "end_points_S", "[", "'objectness_label'", "]", "=", "objectness_label_S", "\n", "end_points_S", "[", "'objectness_mask'", "]", "=", "objectness_mask_S", "\n", "end_points_S", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "total_num_proposal", "=", "objectness_label_S", ".", "shape", "[", "0", "]", "*", "objectness_label_S", ".", "shape", "[", "1", "]", "\n", "end_points_S", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label_S", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points_S", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask_S", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points_S", "[", "'pos_ratio'", "]", "\n", "\n", "objectness_loss_T", ",", "objectness_label_T", ",", "objectness_mask_T", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points_T", ")", "\n", "end_points_T", "[", "'objectness_loss'", "]", "=", "objectness_loss_T", "\n", "end_points_T", "[", "'objectness_label'", "]", "=", "objectness_label_T", "\n", "end_points_T", "[", "'objectness_mask'", "]", "=", "objectness_mask_T", "\n", "end_points_T", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "total_num_proposal", "=", "objectness_label_T", ".", "shape", "[", "0", "]", "*", "objectness_label_T", ".", "shape", "[", "1", "]", "\n", "end_points_T", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label_T", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points_T", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask_T", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points_T", "[", "'pos_ratio'", "]", "\n", "\n", "objectness_loss", "=", "source_coefficient", "*", "objectness_loss_S", "+", "objectness_loss_T", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_loss_DA": [[673, 713], ["loss_helper.FocalLoss", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "FocalLoss.", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "FocalLoss.", "end_points_S[].transpose().contiguous().squeeze", "end_points_T[].transpose().contiguous().squeeze", "loss_helper.get_loss_weak", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss_helper.get_loss", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "end_points_S[].transpose().contiguous", "end_points_T[].transpose().contiguous", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "end_points_S[].transpose", "end_points_T[].transpose", "global_d_pred_S.size", "global_d_pred_T.size"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_loss_weak", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper_boxnet.get_loss"], ["\n", "\n", "", "def", "get_loss_DA_jitter", "(", "end_points_S", ",", "end_points_T", ",", "epoch", ",", "config", ")", ":", "\n", "    ", "\"\"\" Loss functions\n\n    Args:\n        end_points: dict\n            {   \n                seed_xyz, seed_inds, global_d_pred, vote_xyz, local_d_pred,\n                center,\n                heading_scores, heading_residuals_normalized,\n                size_scores, size_residuals_normalized,\n                sem_cls_scores, #seed_logits,#\n                center_label,\n                heading_class_label, heading_residual_label,\n                size_class_label, size_residual_label,\n                sem_cls_label,\n                box_label_mask,\n                vote_label, vote_label_mask\n            }\n        config: dataset config instance\n    Returns:\n        loss: pytorch scalar tensor\n        end_points: dict\n    \"\"\"", "\n", "if", "epoch", ">", "-", "1", ":", "\n", "        ", "end_points_S", "[", "'center_label'", "]", "-=", "min", "(", "epoch", "/", "60.0", ",", "1.0", ")", "*", "end_points_S", "[", "'center_jitter'", "]", "\n", "end_points_T", "[", "'center_label'", "]", "-=", "min", "(", "epoch", "/", "60.0", ",", "1.0", ")", "*", "end_points_T", "[", "'jitter_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", "*", "end_points_T", "[", "'box_label_mask'", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "end_points_T", "[", "'center_label'", "]", "=", "end_points_T", "[", "'center_label'", "]", ".", "detach", "(", ")", "\n", "\n", "", "source_coefficient", "=", "0.1", "\n", "\n", "# Jitter loss", "\n", "jitter_loss_S", "=", "compute_jitter_loss", "(", "end_points_S", ")", "\n", "end_points_S", "[", "'jitter_loss'", "]", "=", "jitter_loss_S", "\n", "\n", "# Vote loss", "\n", "vote_loss_S", "=", "compute_weak_vote_loss", "(", "end_points_S", ")", "\n", "vote_loss_T", "=", "compute_weak_vote_loss", "(", "end_points_T", ")", "\n", "vote_loss", "=", "source_coefficient", "*", "vote_loss_S", "+", "vote_loss_T", "\n", "end_points_S", "[", "'vote_loss'", "]", "=", "vote_loss_S", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_jitter_loss": [[715, 721], ["end_points[].transpose().contiguous", "end_points[].transpose"], "function", ["None"], ["\n", "# Obj loss", "\n", "objectness_loss_S", ",", "objectness_label_S", ",", "objectness_mask_S", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points_S", ")", "\n", "end_points_S", "[", "'objectness_loss'", "]", "=", "objectness_loss_S", "\n", "end_points_S", "[", "'objectness_label'", "]", "=", "objectness_label_S", "\n", "end_points_S", "[", "'objectness_mask'", "]", "=", "objectness_mask_S", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_loss_DA_jitter": [[723, 772], ["loss_helper.compute_jitter_loss", "loss_helper.FocalLoss", "torch.autograd.Variable", "torch.autograd.Variable", "end_points_T[].detach", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "FocalLoss.", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "FocalLoss.", "end_points_S[].transpose().contiguous().squeeze", "end_points_T[].transpose().contiguous().squeeze", "min", "end_points_T[].unsqueeze", "loss_helper.get_loss_weak", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "min", "end_points_T[].transpose", "loss_helper.get_loss", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "end_points_S[].transpose().contiguous", "end_points_T[].transpose().contiguous", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "end_points_S[].transpose", "end_points_T[].transpose", "global_d_pred_S.size", "global_d_pred_T.size"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_jitter_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_loss_weak", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper_boxnet.get_loss"], ["total_num_proposal", "=", "objectness_label_S", ".", "shape", "[", "0", "]", "*", "objectness_label_S", ".", "shape", "[", "1", "]", "\n", "end_points_S", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label_S", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points_S", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask_S", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points_S", "[", "'pos_ratio'", "]", "\n", "\n", "objectness_loss_T", ",", "objectness_label_T", ",", "objectness_mask_T", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points_T", ")", "\n", "end_points_T", "[", "'objectness_loss'", "]", "=", "objectness_loss_T", "\n", "end_points_T", "[", "'objectness_label'", "]", "=", "objectness_label_T", "\n", "end_points_T", "[", "'objectness_mask'", "]", "=", "objectness_mask_T", "\n", "end_points_T", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "total_num_proposal", "=", "objectness_label_T", ".", "shape", "[", "0", "]", "*", "objectness_label_T", ".", "shape", "[", "1", "]", "\n", "end_points_T", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label_T", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points_T", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask_T", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points_T", "[", "'pos_ratio'", "]", "\n", "\n", "objectness_loss", "=", "source_coefficient", "*", "objectness_loss_S", "+", "objectness_loss_T", "\n", "\n", "# Box loss and sem cls loss", "\n", "center_loss_S", ",", "heading_cls_loss", ",", "heading_reg_loss", ",", "size_cls_loss_S", ",", "size_reg_loss", ",", "sem_cls_loss_S", "=", "compute_box_and_sem_cls_loss", "(", "end_points_S", ",", "config", ")", "\n", "end_points_S", "[", "'center_loss'", "]", "=", "center_loss_S", "\n", "end_points_S", "[", "'heading_cls_loss'", "]", "=", "heading_cls_loss", "\n", "end_points_S", "[", "'heading_reg_loss'", "]", "=", "heading_reg_loss", "\n", "end_points_S", "[", "'size_cls_loss'", "]", "=", "size_cls_loss_S", "\n", "end_points_S", "[", "'size_reg_loss'", "]", "=", "size_reg_loss", "\n", "end_points_S", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss_S", "\n", "box_loss_S", "=", "center_loss_S", "+", "0.1", "*", "heading_cls_loss", "+", "heading_reg_loss", "+", "0.1", "*", "size_cls_loss_S", "+", "size_reg_loss", "\n", "end_points_S", "[", "'box_loss'", "]", "=", "box_loss_S", "\n", "\n", "center_loss_T", ",", "size_cls_loss_T", ",", "sem_cls_loss_T", "=", "compute_center_and_sem_cls_loss", "(", "end_points_T", ",", "config", ")", "\n", "end_points_T", "[", "'center_loss'", "]", "=", "center_loss_T", "\n", "end_points_T", "[", "'size_cls_loss'", "]", "=", "size_cls_loss_T", "\n", "end_points_T", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss_T", "\n", "box_loss_T", "=", "center_loss_T", "+", "0.1", "*", "size_cls_loss_T", "\n", "\n", "box_loss", "=", "source_coefficient", "*", "box_loss_S", "+", "box_loss_T", "\n", "sem_cls_loss", "=", "source_coefficient", "*", "sem_cls_loss_S", "+", "sem_cls_loss_T", "\n", "\n", "## Domain Align Loss", "\n", "FL_global", "=", "FocalLoss", "(", "class_num", "=", "2", ",", "gamma", "=", "3", ")", "\n", "#FL_vote = FocalLoss(class_num=2, gamma=3)", "\n", "\n", "da_coefficient", "=", "0.5", "\n", "\n", "# Source domain", "\n", "global_d_pred_S", "=", "end_points_S", "[", "'global_d_pred'", "]", "\n", "local_d_pred_S", "=", "end_points_S", "[", "'local_d_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_loss_DA_separate": [[806, 908], ["loss_helper.compute_vote_loss", "loss_helper.compute_weak_vote_loss", "loss_helper.compute_objectness_loss", "loss_helper.compute_objectness_loss", "loss_helper.compute_box_and_sem_cls_loss", "loss_helper.compute_center_and_sem_cls_loss", "end_points_S[].transpose().contiguous", "end_points_T[].transpose().contiguous", "torch.argmax", "torch.argmax", "torch.argmax", "torch.sum", "torch.sum", "torch.sum", "float", "torch.sum", "torch.sum", "torch.sum", "float", "torch.softmax", "torch.mean", "torch.mean", "torch.mean", "torch.softmax", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "objectness_label_S.float().cuda", "torch.sum", "torch.sum", "torch.sum", "float", "objectness_label_T.float().cuda", "torch.sum", "torch.sum", "torch.sum", "float", "end_points_S[].transpose", "end_points_T[].transpose", "torch.sum", "torch.sum", "torch.sum", "objectness_mask_S.float", "objectness_mask_T.float", "objectness_label_S.float", "objectness_label_T.float", "objectness_label_S.long"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_vote_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_weak_vote_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper_boxnet.compute_objectness_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper_boxnet.compute_objectness_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_box_and_sem_cls_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_center_and_sem_cls_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.softmax", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.softmax"], ["", "def", "get_loss_DA_separate", "(", "end_points_S", ",", "end_points_T", ",", "config", ")", ":", "\n", "    ", "\"\"\" Loss functions\n\n    Args:\n        end_points: dict\n            {   \n                seed_xyz, seed_inds, global_d_pred, vote_xyz, local_d_pred,\n                center,\n                heading_scores, heading_residuals_normalized,\n                size_scores, size_residuals_normalized,\n                sem_cls_scores, #seed_logits,#\n                center_label,\n                heading_class_label, heading_residual_label,\n                size_class_label, size_residual_label,\n                sem_cls_label,\n                box_label_mask,\n                vote_label, vote_label_mask\n            }\n        config: dataset config instance\n    Returns:\n        loss: pytorch scalar tensor\n        end_points: dict\n    \"\"\"", "\n", "\n", "# Vote loss", "\n", "vote_loss_S", "=", "compute_vote_loss", "(", "end_points_S", ")", "\n", "vote_loss_T", "=", "compute_weak_vote_loss", "(", "end_points_T", ")", "\n", "vote_loss", "=", "vote_loss_S", "+", "vote_loss_T", "\n", "end_points_S", "[", "'vote_loss'", "]", "=", "vote_loss_S", "\n", "end_points_T", "[", "'vote_loss'", "]", "=", "vote_loss_T", "\n", "\n", "# Obj loss", "\n", "objectness_loss_S", ",", "objectness_label_S", ",", "objectness_mask_S", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points_S", ")", "\n", "end_points_S", "[", "'objectness_loss'", "]", "=", "objectness_loss_S", "\n", "end_points_S", "[", "'objectness_label'", "]", "=", "objectness_label_S", "\n", "end_points_S", "[", "'objectness_mask'", "]", "=", "objectness_mask_S", "\n", "end_points_S", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "total_num_proposal", "=", "objectness_label_S", ".", "shape", "[", "0", "]", "*", "objectness_label_S", ".", "shape", "[", "1", "]", "\n", "end_points_S", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label_S", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points_S", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask_S", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points_S", "[", "'pos_ratio'", "]", "\n", "\n", "objectness_loss_T", ",", "objectness_label_T", ",", "objectness_mask_T", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points_T", ")", "\n", "end_points_T", "[", "'objectness_loss'", "]", "=", "objectness_loss_T", "\n", "end_points_T", "[", "'objectness_label'", "]", "=", "objectness_label_T", "\n", "end_points_T", "[", "'objectness_mask'", "]", "=", "objectness_mask_T", "\n", "end_points_T", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "total_num_proposal", "=", "objectness_label_T", ".", "shape", "[", "0", "]", "*", "objectness_label_T", ".", "shape", "[", "1", "]", "\n", "end_points_T", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label_T", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points_T", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask_T", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points_T", "[", "'pos_ratio'", "]", "\n", "\n", "objectness_loss", "=", "objectness_loss_S", "+", "objectness_loss_T", "\n", "\n", "# Box loss and sem cls loss", "\n", "center_loss_S", ",", "heading_cls_loss", ",", "heading_reg_loss", ",", "size_cls_loss_S", ",", "size_reg_loss", ",", "sem_cls_loss_S", "=", "compute_box_and_sem_cls_loss", "(", "end_points_S", ",", "config", ")", "\n", "end_points_S", "[", "'center_loss'", "]", "=", "center_loss_S", "\n", "end_points_S", "[", "'heading_cls_loss'", "]", "=", "heading_cls_loss", "\n", "end_points_S", "[", "'heading_reg_loss'", "]", "=", "heading_reg_loss", "\n", "end_points_S", "[", "'size_cls_loss'", "]", "=", "size_cls_loss_S", "\n", "end_points_S", "[", "'size_reg_loss'", "]", "=", "size_reg_loss", "\n", "end_points_S", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss_S", "\n", "box_loss", "=", "center_loss_S", "+", "0.1", "*", "heading_cls_loss", "+", "heading_reg_loss", "+", "0.1", "*", "size_cls_loss_S", "+", "size_reg_loss", "\n", "end_points_S", "[", "'box_loss'", "]", "=", "box_loss", "\n", "\n", "center_loss_T", ",", "size_cls_loss_T", ",", "sem_cls_loss_T", "=", "compute_center_and_sem_cls_loss", "(", "end_points_T", ",", "config", ")", "\n", "end_points_T", "[", "'center_loss'", "]", "=", "center_loss_T", "\n", "end_points_T", "[", "'size_cls_loss'", "]", "=", "size_cls_loss_T", "\n", "end_points_T", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss_T", "\n", "\n", "box_loss", "+=", "center_loss_T", "+", "0.1", "*", "size_cls_loss_T", "\n", "sem_cls_loss", "=", "sem_cls_loss_S", "+", "sem_cls_loss_T", "\n", "\n", "# Source domain", "\n", "local_d_pred_S", "=", "end_points_S", "[", "'local_d_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "object_weight_S", "=", "F", ".", "softmax", "(", "end_points_S", "[", "'objectness_scores'", "]", ",", "dim", "=", "-", "1", ")", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "source_dloss", "=", "1.0", "*", "torch", ".", "mean", "(", "local_d_pred_S", "**", "2", "*", "object_weight_S", ")", "\n", "\n", "# Target domain", "\n", "local_d_pred_T", "=", "end_points_T", "[", "'local_d_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "object_weight_T", "=", "F", ".", "softmax", "(", "end_points_T", "[", "'objectness_scores'", "]", ",", "dim", "=", "-", "1", ")", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "target_dloss", "=", "1.0", "*", "torch", ".", "mean", "(", "(", "1", "-", "local_d_pred_T", ")", "**", "2", "*", "object_weight_T", ")", "\n", "\n", "DA_loss", "=", "source_dloss", "+", "target_dloss", "\n", "\n", "# Final loss function", "\n", "loss", "=", "vote_loss", "+", "0.5", "*", "objectness_loss", "+", "box_loss", "+", "0.1", "*", "sem_cls_loss", "+", "DA_loss", "\n", "loss", "*=", "10", "\n", "end_points_S", "[", "'loss'", "]", "=", "loss", "\n", "\n", "# --------------------------------------------", "\n", "# Some other statistics", "\n", "obj_pred_val", "=", "torch", ".", "argmax", "(", "end_points_S", "[", "'objectness_scores'", "]", ",", "2", ")", "# B,K", "\n", "obj_acc", "=", "torch", ".", "sum", "(", "(", "obj_pred_val", "==", "objectness_label_S", ".", "long", "(", ")", ")", ".", "float", "(", ")", "*", "objectness_mask_S", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask_S", ")", "+", "1e-6", ")", "\n", "end_points_S", "[", "'obj_acc'", "]", "=", "obj_acc", "\n", "\n", "return", "loss", ",", "end_points_S", ",", "end_points_T", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_loss_cam": [[910, 944], ["torch.mean", "torch.mean", "torch.mean", "torch.BCEWithLogitsLoss", "nn.BCEWithLogitsLoss.", "torch.mean.float", "cloud_label.float"], "function", ["None"], ["", "def", "get_loss_cam", "(", "end_points", ",", "config", ")", ":", "\n", "    ", "\"\"\" Loss functions\n\n    Args:\n        end_points: dict\n            {   \n                seed_xyz, seed_inds, vote_xyz,\n                center,\n                heading_scores, heading_residuals_normalized,\n                size_scores, size_residuals_normalized,\n                sem_cls_scores, #seed_logits,#\n                center_label,\n                heading_class_label, heading_residual_label,\n                size_class_label, size_residual_label,\n                sem_cls_label,\n                box_label_mask,\n                vote_label, vote_label_mask\n            }\n        config: dataset config instance\n    Returns:\n        loss: pytorch scalar tensor\n        end_points: dict\n    \"\"\"", "\n", "\n", "# Final loss function", "\n", "pred_cam", "=", "end_points", "[", "'cam'", "]", "# Bxnum_classx256", "\n", "pred_cam_gap", "=", "torch", ".", "mean", "(", "pred_cam", ",", "dim", "=", "2", ")", "# Bxnum_class", "\n", "cloud_label", "=", "end_points", "[", "'cloud_label'", "]", "# Bxnum_class", "\n", "\n", "BCEWL", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "loss", "=", "BCEWL", "(", "pred_cam_gap", ".", "float", "(", ")", ",", "cloud_label", ".", "float", "(", ")", ")", "\n", "end_points", "[", "'loss'", "]", "=", "loss", "\n", "\n", "return", "loss", ",", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_loss_DA_cam": [[946, 1040], ["loss_helper.compute_vote_loss", "loss_helper.compute_objectness_loss", "loss_helper.compute_box_and_sem_cls_loss", "loss_helper.compute_sem_cls_loss", "loss_helper.FocalLoss", "loss_helper.FocalLoss", "end_points_S[].transpose().contiguous", "torch.autograd.Variable", "end_points_T[].transpose().contiguous", "torch.autograd.Variable", "torch.argmax", "torch.argmax", "torch.argmax", "torch.sum", "torch.sum", "torch.sum", "float", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.softmax", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "objectness_label_S.float().cuda", "torch.sum", "torch.sum", "torch.sum", "float", "end_points_S[].transpose", "FocalLoss.", "end_points_T[].transpose", "FocalLoss.", "torch.sum", "torch.sum", "torch.sum", "objectness_mask_S.float", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.mean", "torch.mean", "torch.mean", "FocalLoss.", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.mean", "torch.mean", "torch.mean", "FocalLoss.", "objectness_label_S.float", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "global_d_pred_S.size", "global_d_pred_T.size", "objectness_label_S.long"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_vote_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper_boxnet.compute_objectness_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_box_and_sem_cls_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_sem_cls_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.softmax", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.softmax"], ["", "def", "get_loss_DA_cam", "(", "end_points_S", ",", "end_points_T", ",", "config", ")", ":", "\n", "    ", "\"\"\" Loss functions\n\n    Args:\n        end_points: dict\n            {   \n                seed_xyz, seed_inds, global_d_pred, vote_xyz, local_d_pred,\n                center,\n                heading_scores, heading_residuals_normalized,\n                size_scores, size_residuals_normalized,\n                sem_cls_scores, #seed_logits,#\n                center_label,\n                heading_class_label, heading_residual_label,\n                size_class_label, size_residual_label,\n                sem_cls_label,\n                box_label_mask,\n                vote_label, vote_label_mask\n            }\n        config: dataset config instance\n    Returns:\n        loss: pytorch scalar tensor\n        end_points: dict\n    \"\"\"", "\n", "\n", "# Vote loss", "\n", "vote_loss_S", "=", "compute_vote_loss", "(", "end_points_S", ")", "\n", "vote_loss", "=", "vote_loss_S", "\n", "end_points_S", "[", "'vote_loss'", "]", "=", "vote_loss_S", "\n", "\n", "# Obj loss", "\n", "objectness_loss_S", ",", "objectness_label_S", ",", "objectness_mask_S", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points_S", ")", "\n", "end_points_S", "[", "'objectness_loss'", "]", "=", "objectness_loss_S", "\n", "end_points_S", "[", "'objectness_label'", "]", "=", "objectness_label_S", "\n", "end_points_S", "[", "'objectness_mask'", "]", "=", "objectness_mask_S", "\n", "end_points_S", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "total_num_proposal", "=", "objectness_label_S", ".", "shape", "[", "0", "]", "*", "objectness_label_S", ".", "shape", "[", "1", "]", "\n", "end_points_S", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label_S", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points_S", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask_S", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points_S", "[", "'pos_ratio'", "]", "\n", "objectness_loss", "=", "objectness_loss_S", "\n", "\n", "# Box loss and sem cls loss", "\n", "center_loss_S", ",", "heading_cls_loss", ",", "heading_reg_loss", ",", "size_cls_loss_S", ",", "size_reg_loss", ",", "sem_cls_loss_S", "=", "compute_box_and_sem_cls_loss", "(", "end_points_S", ",", "config", ")", "\n", "end_points_S", "[", "'center_loss'", "]", "=", "center_loss_S", "\n", "end_points_S", "[", "'heading_cls_loss'", "]", "=", "heading_cls_loss", "\n", "end_points_S", "[", "'heading_reg_loss'", "]", "=", "heading_reg_loss", "\n", "end_points_S", "[", "'size_cls_loss'", "]", "=", "size_cls_loss_S", "\n", "end_points_S", "[", "'size_reg_loss'", "]", "=", "size_reg_loss", "\n", "end_points_S", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss_S", "\n", "box_loss", "=", "center_loss_S", "+", "0.1", "*", "heading_cls_loss", "+", "heading_reg_loss", "+", "0.1", "*", "size_cls_loss_S", "+", "size_reg_loss", "\n", "end_points_S", "[", "'box_loss'", "]", "=", "box_loss", "\n", "\n", "sem_cls_loss_T", "=", "compute_sem_cls_loss", "(", "end_points_T", ",", "config", ")", "\n", "end_points_T", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss_T", "\n", "\n", "sem_cls_loss", "=", "sem_cls_loss_S", "+", "2", "*", "sem_cls_loss_T", "\n", "\n", "## Domain Align Loss", "\n", "FL_global", "=", "FocalLoss", "(", "class_num", "=", "2", ",", "gamma", "=", "5", ")", "\n", "FL_vote", "=", "FocalLoss", "(", "class_num", "=", "2", ",", "gamma", "=", "3", ")", "\n", "\n", "# Source domain", "\n", "global_d_pred_S", "=", "end_points_S", "[", "'global_d_pred'", "]", "\n", "vote_feature_d_pred_S", "=", "end_points_S", "[", "'vote_feature_d_pred'", "]", "\n", "local_d_pred_S", "=", "end_points_S", "[", "'local_d_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "domain_S", "=", "Variable", "(", "torch", ".", "zeros", "(", "global_d_pred_S", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "object_weight_local_S", "=", "F", ".", "softmax", "(", "end_points_S", "[", "'objectness_scores'", "]", ",", "dim", "=", "-", "1", ")", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "source_dloss", "=", "0.5", "*", "torch", ".", "mean", "(", "local_d_pred_S", "**", "2", "*", "object_weight_local_S", ")", "+", "0.5", "*", "FL_global", "(", "global_d_pred_S", ",", "domain_S", ")", "+", "0.5", "*", "FL_vote", "(", "vote_feature_d_pred_S", ",", "domain_S", ")", "\n", "\n", "# Target domain", "\n", "global_d_pred_T", "=", "end_points_T", "[", "'global_d_pred'", "]", "\n", "vote_feature_d_pred_T", "=", "end_points_T", "[", "'vote_feature_d_pred'", "]", "\n", "local_d_pred_T", "=", "end_points_T", "[", "'local_d_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "domain_T", "=", "Variable", "(", "torch", ".", "ones", "(", "global_d_pred_T", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "object_weight_local_T", "=", "F", ".", "softmax", "(", "end_points_T", "[", "'objectness_scores'", "]", ",", "dim", "=", "-", "1", ")", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "target_dloss", "=", "0.5", "*", "torch", ".", "mean", "(", "(", "1", "-", "local_d_pred_T", ")", "**", "2", "*", "object_weight_local_T", ")", "+", "0.5", "*", "FL_global", "(", "global_d_pred_T", ",", "domain_T", ")", "+", "0.5", "*", "FL_vote", "(", "vote_feature_d_pred_T", ",", "domain_T", ")", "\n", "\n", "DA_loss", "=", "source_dloss", "+", "target_dloss", "\n", "\n", "# Final loss function", "\n", "loss", "=", "vote_loss", "+", "0.5", "*", "objectness_loss", "+", "box_loss", "+", "0.1", "*", "sem_cls_loss", "+", "DA_loss", "\n", "loss", "*=", "10", "\n", "end_points_S", "[", "'loss'", "]", "=", "loss", "\n", "\n", "# --------------------------------------------", "\n", "# Some other statistics", "\n", "obj_pred_val", "=", "torch", ".", "argmax", "(", "end_points_S", "[", "'objectness_scores'", "]", ",", "2", ")", "# B,K", "\n", "obj_acc", "=", "torch", ".", "sum", "(", "(", "obj_pred_val", "==", "objectness_label_S", ".", "long", "(", ")", ")", ".", "float", "(", ")", "*", "objectness_mask_S", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask_S", ")", "+", "1e-6", ")", "\n", "end_points_S", "[", "'obj_acc'", "]", "=", "obj_acc", "\n", "\n", "return", "loss", ",", "end_points_S", ",", "end_points_T", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.votenet_DA.GradReverse.forward": [[33, 36], ["x.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.votenet_DA.GradReverse.backward": [[37, 41], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "#pdb.set_trace()", "\n", "        ", "return", "(", "grad_output", "*", "-", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.votenet_DA.VoteNet_DA.__init__": [[66, 121], ["torch.Module.__init__", "backbone_module.Pointnet2Backbone", "voting_module.VotingModule", "proposal_module.ProposalModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "0", ",", "num_proposal", "=", "128", ",", "vote_factor", "=", "1", ",", "sampling", "=", "'vote_fps'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "assert", "(", "mean_size_arr", ".", "shape", "[", "0", "]", "==", "self", ".", "num_size_cluster", ")", "\n", "self", ".", "input_feature_dim", "=", "input_feature_dim", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "vote_factor", "=", "vote_factor", "\n", "self", ".", "sampling", "=", "sampling", "\n", "\n", "# Backbone point feature learning", "\n", "self", ".", "backbone_net", "=", "Pointnet2Backbone", "(", "input_feature_dim", "=", "self", ".", "input_feature_dim", ")", "\n", "\n", "# Hough voting", "\n", "self", ".", "vgen", "=", "VotingModule", "(", "self", ".", "vote_factor", ",", "256", ")", "\n", "\n", "# Vote aggregation and detection", "\n", "self", ".", "pnet", "=", "ProposalModule", "(", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "sampling", ")", "\n", "\n", "# global domain prediction", "\n", "self", ".", "global_netD1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "256", ",", "256", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "global_netD2", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "'''\n        self.global_netD = nn.Sequential(\n            nn.Conv1d(256,256,1),\n            nn.BatchNorm1d(256),\n            nn.ReLU(),\n            nn.Conv1d(256,128,1),\n            nn.BatchNorm1d(128),\n            nn.ReLU(),\n            nn.Conv1d(128,2,1)\n            )\n        '''", "\n", "\n", "# local domain prediction", "\n", "self", ".", "local_netD", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "1", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.votenet_DA.VoteNet_DA.forward": [[123, 177], ["votenet_DA.VoteNet_DA.backbone_net", "votenet_DA.VoteNet_DA.vgen", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "features.div.div.div", "votenet_DA.VoteNet_DA.pnet", "votenet_DA.VoteNet_DA.global_netD1", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "votenet_DA.VoteNet_DA.global_netD2", "votenet_DA.VoteNet_DA.local_netD", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.norm.unsqueeze", "torch.norm.unsqueeze", "torch.norm.unsqueeze", "votenet_DA.grad_reverse", "votenet_DA.grad_reverse"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.grad_reverse", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.grad_reverse"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Forward pass of the network\n\n        Args:\n            inputs: dict\n                {point_clouds}\n\n                point_clouds: Variable(torch.cuda.FloatTensor)\n                    (B, N, 3 + input_channels) tensor\n                    Point cloud to run predicts on\n                    Each point in the point-cloud MUST\n                    be formated as (x, y, z, features...)\n        Returns:\n            end_points: dict\n        \"\"\"", "\n", "end_points", "=", "{", "}", "\n", "batch_size", "=", "inputs", "[", "'point_clouds'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "end_points", "=", "self", ".", "backbone_net", "(", "inputs", "[", "'point_clouds'", "]", ",", "end_points", ")", "\n", "# predict center jitter from center features", "\n", "# do not forget to use the class information!!!!            ", "\n", "\n", "# --------- HOUGH VOTING ---------", "\n", "xyz", "=", "end_points", "[", "'fp2_xyz'", "]", "\n", "features", "=", "end_points", "[", "'fp2_features'", "]", "\n", "end_points", "[", "'seed_inds'", "]", "=", "end_points", "[", "'fp2_inds'", "]", "\n", "end_points", "[", "'seed_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'seed_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", "=", "self", ".", "vgen", "(", "xyz", ",", "features", ")", "\n", "features_norm", "=", "torch", ".", "norm", "(", "features", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "features", "=", "features", ".", "div", "(", "features_norm", ".", "unsqueeze", "(", "1", ")", ")", "\n", "end_points", "[", "'vote_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'vote_features'", "]", "=", "features", "\n", "\n", "end_points", "=", "self", ".", "pnet", "(", "xyz", ",", "features", ",", "end_points", ")", "\n", "\n", "## domain prediction", "\n", "# global", "\n", "global_d_pred", "=", "self", ".", "global_netD1", "(", "grad_reverse", "(", "end_points", "[", "'seed_features'", "]", ")", ")", "# Bx128x1024", "\n", "global_d_pred", "=", "torch", ".", "mean", "(", "global_d_pred", ",", "dim", "=", "2", ")", "# Bx128", "\n", "global_d_pred", "=", "self", ".", "global_netD2", "(", "global_d_pred", ")", "# Bx2", "\n", "'''\n        global_d_pred = self.global_netD(grad_reverse(end_points['seed_features'])) # Bx2x1024\n        global_d_pred = torch.mean(global_d_pred, dim=2) # Bx2\n        '''", "\n", "end_points", "[", "'global_d_pred'", "]", "=", "global_d_pred", "\n", "\n", "# local", "\n", "local_d_pred", "=", "self", ".", "local_netD", "(", "grad_reverse", "(", "end_points", "[", "'aggregated_vote_features'", "]", ")", ")", "# Bx1x256", "\n", "local_d_pred", "=", "torch", ".", "sigmoid", "(", "local_d_pred", ")", "\n", "end_points", "[", "'local_d_pred'", "]", "=", "local_d_pred", "\n", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.votenet_DA.VoteNet_DA_jitter.__init__": [[198, 271], ["torch.Module.__init__", "backbone_module.Pointnet2Backbone_jitter", "voting_module.VotingModule", "proposal_module.ProposalModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "0", ",", "num_proposal", "=", "128", ",", "vote_factor", "=", "1", ",", "sampling", "=", "'vote_fps'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "assert", "(", "mean_size_arr", ".", "shape", "[", "0", "]", "==", "self", ".", "num_size_cluster", ")", "\n", "self", ".", "input_feature_dim", "=", "input_feature_dim", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "vote_factor", "=", "vote_factor", "\n", "self", ".", "sampling", "=", "sampling", "\n", "\n", "# Backbone point feature learning", "\n", "self", ".", "backbone_net", "=", "Pointnet2Backbone_jitter", "(", "input_feature_dim", "=", "self", ".", "input_feature_dim", ")", "\n", "\n", "# Hough voting", "\n", "self", ".", "vgen", "=", "VotingModule", "(", "self", ".", "vote_factor", ",", "256", ")", "\n", "\n", "# Vote aggregation and detection", "\n", "self", ".", "pnet", "=", "ProposalModule", "(", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "sampling", ")", "\n", "\n", "# global domain prediction", "\n", "self", ".", "global_netD1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "256", ",", "256", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "global_netD2", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "'''\n        self.global_netD = nn.Sequential(\n            nn.Conv1d(256,256,1),\n            nn.BatchNorm1d(256),\n            nn.ReLU(),\n            nn.Conv1d(256,128,1),\n            nn.BatchNorm1d(128),\n            nn.ReLU(),\n            nn.Conv1d(128,2,1)\n            )\n        '''", "\n", "\n", "# local domain prediction", "\n", "self", ".", "local_netD", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "# jitter prediction", "\n", "self", ".", "jitter_netD", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "150", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "self", ".", "jitter_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "150", ",", "64", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "64", ",", "3", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.votenet_DA.VoteNet_DA_jitter.forward": [[273, 333], ["votenet_DA.VoteNet_DA_jitter.backbone_net", "votenet_DA.VoteNet_DA_jitter.vgen", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "features.div.div.div", "votenet_DA.VoteNet_DA_jitter.pnet", "votenet_DA.VoteNet_DA_jitter.global_netD1", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "votenet_DA.VoteNet_DA_jitter.global_netD2", "votenet_DA.VoteNet_DA_jitter.local_netD", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "votenet_DA.VoteNet_DA_jitter.jitter_net", "torch.norm.unsqueeze", "torch.norm.unsqueeze", "torch.norm.unsqueeze", "votenet_DA.grad_reverse", "votenet_DA.grad_reverse", "votenet_DA.VoteNet_DA_jitter.jitter_netD", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "votenet_DA.grad_reverse"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.grad_reverse", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.grad_reverse", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.grad_reverse"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "center_xyz", "=", "None", ",", "center_cls", "=", "None", ")", ":", "\n", "        ", "\"\"\" Forward pass of the network\n\n        Args:\n            inputs: dict\n                {point_clouds}\n\n                point_clouds: Variable(torch.cuda.FloatTensor)\n                    (B, N, 3 + input_channels) tensor\n                    Point cloud to run predicts on\n                    Each point in the point-cloud MUST\n                    be formated as (x, y, z, features...)\n        Returns:\n            end_points: dict\n        \"\"\"", "\n", "end_points", "=", "{", "}", "\n", "batch_size", "=", "inputs", "[", "'point_clouds'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "end_points", "=", "self", ".", "backbone_net", "(", "inputs", "[", "'point_clouds'", "]", ",", "center_xyz", ",", "center_cls", ",", "end_points", ")", "\n", "# predict center jitter from center features", "\n", "# do not forget to use the class information!!!!", "\n", "if", "center_xyz", "is", "not", "None", ":", "\n", "            ", "end_points", "[", "'jitter_pred'", "]", "=", "self", ".", "jitter_net", "(", "end_points", "[", "'center_features'", "]", ")", "# B, 3, 64", "\n", "\n", "# --------- HOUGH VOTING ---------", "\n", "", "xyz", "=", "end_points", "[", "'fp2_xyz'", "]", "\n", "features", "=", "end_points", "[", "'fp2_features'", "]", "\n", "end_points", "[", "'seed_inds'", "]", "=", "end_points", "[", "'fp2_inds'", "]", "\n", "end_points", "[", "'seed_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'seed_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", "=", "self", ".", "vgen", "(", "xyz", ",", "features", ")", "\n", "features_norm", "=", "torch", ".", "norm", "(", "features", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "features", "=", "features", ".", "div", "(", "features_norm", ".", "unsqueeze", "(", "1", ")", ")", "\n", "end_points", "[", "'vote_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'vote_features'", "]", "=", "features", "\n", "\n", "end_points", "=", "self", ".", "pnet", "(", "xyz", ",", "features", ",", "end_points", ")", "\n", "\n", "## domain prediction", "\n", "# global", "\n", "global_d_pred", "=", "self", ".", "global_netD1", "(", "grad_reverse", "(", "end_points", "[", "'seed_features'", "]", ")", ")", "# Bx128x1024", "\n", "global_d_pred", "=", "torch", ".", "mean", "(", "global_d_pred", ",", "dim", "=", "2", ")", "# Bx128", "\n", "global_d_pred", "=", "self", ".", "global_netD2", "(", "global_d_pred", ")", "# Bx2", "\n", "end_points", "[", "'global_d_pred'", "]", "=", "global_d_pred", "\n", "\n", "# local", "\n", "local_d_pred", "=", "self", ".", "local_netD", "(", "grad_reverse", "(", "end_points", "[", "'aggregated_vote_features'", "]", ")", ")", "# Bx1x256", "\n", "local_d_pred", "=", "torch", ".", "sigmoid", "(", "local_d_pred", ")", "\n", "end_points", "[", "'local_d_pred'", "]", "=", "local_d_pred", "\n", "\n", "\n", "# jitter", "\n", "if", "center_xyz", "is", "not", "None", ":", "\n", "            ", "jitter_d_pred", "=", "self", ".", "jitter_netD", "(", "grad_reverse", "(", "end_points", "[", "'center_features'", "]", ")", ")", "# Bx1x64", "\n", "jitter_d_pred", "=", "torch", ".", "sigmoid", "(", "jitter_d_pred", ")", "\n", "end_points", "[", "'jitter_d_pred'", "]", "=", "jitter_d_pred", "\n", "\n", "\n", "", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.votenet_DA.VoteNet_DA_jitter2.__init__": [[354, 426], ["torch.Module.__init__", "backbone_module.Pointnet2Backbone", "voting_module.VotingModule", "proposal_module.ProposalModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "pointnet2_modules.PointnetSAModuleCenters", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "0", ",", "num_proposal", "=", "128", ",", "vote_factor", "=", "1", ",", "sampling", "=", "'vote_fps'", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "assert", "(", "mean_size_arr", ".", "shape", "[", "0", "]", "==", "self", ".", "num_size_cluster", ")", "\n", "self", ".", "input_feature_dim", "=", "input_feature_dim", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "vote_factor", "=", "vote_factor", "\n", "self", ".", "sampling", "=", "sampling", "\n", "\n", "# Backbone point feature learning", "\n", "self", ".", "backbone_net", "=", "Pointnet2Backbone", "(", "input_feature_dim", "=", "self", ".", "input_feature_dim", ")", "\n", "\n", "# Hough voting", "\n", "self", ".", "vgen", "=", "VotingModule", "(", "self", ".", "vote_factor", ",", "256", ")", "\n", "\n", "# Vote aggregation and detection", "\n", "self", ".", "pnet", "=", "ProposalModule", "(", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "sampling", ")", "\n", "\n", "# global domain prediction", "\n", "self", ".", "global_netD1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "256", ",", "256", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "global_netD2", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "'''\n        self.global_netD = nn.Sequential(\n            nn.Conv1d(256,256,1),\n            nn.BatchNorm1d(256),\n            nn.ReLU(),\n            nn.Conv1d(256,128,1),\n            nn.BatchNorm1d(128),\n            nn.ReLU(),\n            nn.Conv1d(128,2,1)\n            )\n        '''", "\n", "\n", "# local domain prediction", "\n", "self", ".", "local_netD", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "# jitter prediction", "\n", "self", ".", "ctjt_head", "=", "PointnetSAModuleCenters", "(", "\n", "npoint", "=", "64", ",", "\n", "radius", "=", "0.8", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "128", ",", "128", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "False", "\n", ")", "\n", "\n", "self", ".", "jitter_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "150", ",", "64", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "64", ",", "3", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.votenet_DA.VoteNet_DA_jitter2.forward": [[428, 488], ["votenet_DA.VoteNet_DA_jitter2.backbone_net", "votenet_DA.VoteNet_DA_jitter2.vgen", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "features.div.div.div", "votenet_DA.VoteNet_DA_jitter2.pnet", "votenet_DA.VoteNet_DA_jitter2.global_netD1", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "votenet_DA.VoteNet_DA_jitter2.global_netD2", "votenet_DA.VoteNet_DA_jitter2.local_netD", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.norm.unsqueeze", "torch.norm.unsqueeze", "torch.norm.unsqueeze", "votenet_DA.VoteNet_DA_jitter2.ctjt_head", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "votenet_DA.VoteNet_DA_jitter2.jitter_net", "votenet_DA.grad_reverse", "votenet_DA.grad_reverse", "end_points[].detach", "[].transpose().cuda", "[].transpose", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.grad_reverse", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.grad_reverse"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "center_xyz", "=", "None", ",", "center_cls", "=", "None", ")", ":", "\n", "        ", "\"\"\" Forward pass of the network\n\n        Args:\n            inputs: dict\n                {point_clouds}\n\n                point_clouds: Variable(torch.cuda.FloatTensor)\n                    (B, N, 3 + input_channels) tensor\n                    Point cloud to run predicts on\n                    Each point in the point-cloud MUST\n                    be formated as (x, y, z, features...)\n        Returns:\n            end_points: dict\n        \"\"\"", "\n", "end_points", "=", "{", "}", "\n", "batch_size", "=", "inputs", "[", "'point_clouds'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "end_points", "=", "self", ".", "backbone_net", "(", "inputs", "[", "'point_clouds'", "]", ",", "end_points", ")", "\n", "\n", "# --------- HOUGH VOTING ---------", "\n", "xyz", "=", "end_points", "[", "'fp2_xyz'", "]", "\n", "features", "=", "end_points", "[", "'fp2_features'", "]", "\n", "end_points", "[", "'seed_inds'", "]", "=", "end_points", "[", "'fp2_inds'", "]", "\n", "end_points", "[", "'seed_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'seed_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", "=", "self", ".", "vgen", "(", "xyz", ",", "features", ")", "\n", "features_norm", "=", "torch", ".", "norm", "(", "features", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "features", "=", "features", ".", "div", "(", "features_norm", ".", "unsqueeze", "(", "1", ")", ")", "\n", "end_points", "[", "'vote_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'vote_features'", "]", "=", "features", "\n", "\n", "end_points", "=", "self", ".", "pnet", "(", "xyz", ",", "features", ",", "end_points", ")", "\n", "\n", "if", "center_xyz", "is", "not", "None", ":", "\n", "            ", "center_features", "=", "self", ".", "ctjt_head", "(", "end_points", "[", "'aggregated_vote_xyz'", "]", ",", "end_points", "[", "'aggregated_vote_features'", "]", ".", "detach", "(", ")", ",", "center_xyz", ")", "\n", "end_points", "[", "'center_features'", "]", "=", "torch", ".", "cat", "(", "[", "center_features", ",", "torch", ".", "eye", "(", "22", ")", "[", "center_cls", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "cuda", "(", ")", "]", ",", "dim", "=", "1", ")", "# B, 128+22, 64", "\n", "# predict center jitter from center features", "\n", "# do not forget to use the class information!!!!", "\n", "", "if", "center_xyz", "is", "not", "None", ":", "\n", "            ", "end_points", "[", "'jitter_pred'", "]", "=", "self", ".", "jitter_net", "(", "end_points", "[", "'center_features'", "]", ")", "# B, 3, 64", "\n", "\n", "## domain prediction", "\n", "# global", "\n", "", "global_d_pred", "=", "self", ".", "global_netD1", "(", "grad_reverse", "(", "end_points", "[", "'seed_features'", "]", ")", ")", "# Bx128x1024", "\n", "global_d_pred", "=", "torch", ".", "mean", "(", "global_d_pred", ",", "dim", "=", "2", ")", "# Bx128", "\n", "global_d_pred", "=", "self", ".", "global_netD2", "(", "global_d_pred", ")", "# Bx2", "\n", "'''\n        global_d_pred = self.global_netD(grad_reverse(end_points['seed_features'])) # Bx2x1024\n        global_d_pred = torch.mean(global_d_pred, dim=2) # Bx2\n        '''", "\n", "end_points", "[", "'global_d_pred'", "]", "=", "global_d_pred", "\n", "\n", "# local", "\n", "local_d_pred", "=", "self", ".", "local_netD", "(", "grad_reverse", "(", "end_points", "[", "'aggregated_vote_features'", "]", ")", ")", "# Bx1x256", "\n", "local_d_pred", "=", "torch", ".", "sigmoid", "(", "local_d_pred", ")", "\n", "end_points", "[", "'local_d_pred'", "]", "=", "local_d_pred", "\n", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.votenet_DA.grad_reverse": [[43, 45], ["GradReverse.apply"], "function", ["None"], ["", "", "def", "grad_reverse", "(", "x", ")", ":", "\n", "    ", "return", "GradReverse", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.proposal_module.ProposalModule.__init__": [[54, 83], ["torch.Module.__init__", "pointnet2_modules.PointnetSAModuleVotes", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "num_proposal", ",", "sampling", ",", "seed_feat_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "sampling", "=", "sampling", "\n", "self", ".", "seed_feat_dim", "=", "seed_feat_dim", "\n", "\n", "# Vote clustering", "\n", "self", ".", "vote_aggregation", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "self", ".", "num_proposal", ",", "\n", "radius", "=", "0.3", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "self", ".", "seed_feat_dim", ",", "128", ",", "128", ",", "128", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "# Object proposal/detection", "\n", "# Objectness scores (2), center residual (3),", "\n", "# heading class+residual (num_heading_bin*2), size class+residual(num_size_cluster*4)", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "2", "+", "3", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "*", "4", "+", "self", ".", "num_class", ",", "1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.proposal_module.ProposalModule.forward": [[84, 121], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "proposal_module.ProposalModule.conv3", "proposal_module.decode_scores", "proposal_module.ProposalModule.vote_aggregation", "proposal_module.ProposalModule.bn1", "proposal_module.ProposalModule.bn2", "pointnet2_utils.furthest_point_sample", "proposal_module.ProposalModule.vote_aggregation", "proposal_module.ProposalModule.conv1", "proposal_module.ProposalModule.conv2", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "proposal_module.ProposalModule.vote_aggregation", "log_string", "exit", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.proposal_module.decode_scores", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "features", ",", "end_points", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            xyz: (B,K,3)\n            features: (B,C,K)\n        Returns:\n            scores: (B,num_proposal,2+3+NH*2+NS*4) \n        \"\"\"", "\n", "if", "self", ".", "sampling", "==", "'vote_fps'", ":", "\n", "# Farthest point sampling (FPS) on votes", "\n", "            ", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "vote_aggregation", "(", "xyz", ",", "features", ")", "\n", "sample_inds", "=", "fps_inds", "\n", "", "elif", "self", ".", "sampling", "==", "'seed_fps'", ":", "\n", "# FPS on seed and choose the votes corresponding to the seeds", "\n", "# This gets us a slightly better coverage of *object* votes than vote_fps (which tends to get more cluster votes)", "\n", "            ", "sample_inds", "=", "pointnet2_utils", ".", "furthest_point_sample", "(", "end_points", "[", "'seed_xyz'", "]", ",", "self", ".", "num_proposal", ")", "\n", "xyz", ",", "features", ",", "_", "=", "self", ".", "vote_aggregation", "(", "xyz", ",", "features", ",", "sample_inds", ")", "\n", "", "elif", "self", ".", "sampling", "==", "'random'", ":", "\n", "# Random sampling from the votes", "\n", "            ", "num_seed", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "1", "]", "\n", "batch_size", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "0", "]", "\n", "sample_inds", "=", "torch", ".", "randint", "(", "0", ",", "num_seed", ",", "(", "batch_size", ",", "self", ".", "num_proposal", ")", ",", "dtype", "=", "torch", ".", "int", ")", ".", "cuda", "(", ")", "\n", "xyz", ",", "features", ",", "_", "=", "self", ".", "vote_aggregation", "(", "xyz", ",", "features", ",", "sample_inds", ")", "\n", "", "else", ":", "\n", "            ", "log_string", "(", "'Unknown sampling strategy: %s. Exiting!'", "%", "(", "self", ".", "sampling", ")", ")", "\n", "exit", "(", ")", "\n", "", "end_points", "[", "'aggregated_vote_xyz'", "]", "=", "xyz", "# (batch_size, num_proposal, 3)", "\n", "end_points", "[", "'aggregated_vote_features'", "]", "=", "features", "# (batch_size, num_proposal, C)", "\n", "end_points", "[", "'aggregated_vote_inds'", "]", "=", "sample_inds", "# (batch_size, num_proposal,) # should be 0,1,2,...,num_proposal", "\n", "\n", "# --------- PROPOSAL GENERATION ---------", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "features", ")", ")", ")", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "net", ")", ")", ")", "\n", "net", "=", "self", ".", "conv3", "(", "net", ")", "# (batch_size, 2+3+num_heading_bin*2+num_size_cluster*4, num_proposal)", "\n", "\n", "end_points", "=", "decode_scores", "(", "net", ",", "end_points", ",", "self", ".", "num_class", ",", "self", ".", "num_heading_bin", ",", "self", ".", "num_size_cluster", ",", "self", ".", "mean_size_arr", ")", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.proposal_module.ProposalModule_feature.__init__": [[124, 143], ["torch.Module.__init__", "pointnet2_modules.PointnetSAModuleVotes"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "num_proposal", ",", "sampling", ",", "seed_feat_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "sampling", "=", "sampling", "\n", "self", ".", "seed_feat_dim", "=", "seed_feat_dim", "\n", "\n", "# Vote clustering", "\n", "self", ".", "vote_aggregation", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "self", ".", "num_proposal", ",", "\n", "radius", "=", "0.3", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "self", ".", "seed_feat_dim", ",", "128", ",", "128", ",", "128", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.proposal_module.ProposalModule_feature.forward": [[145, 176], ["proposal_module.ProposalModule_feature.vote_aggregation", "pointnet2_utils.furthest_point_sample", "proposal_module.ProposalModule_feature.vote_aggregation", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "torch.randint().cuda", "proposal_module.ProposalModule_feature.vote_aggregation", "log_string", "exit", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.log_string"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "features", ",", "end_points", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            xyz: (B,K,3)\n            features: (B,C,K)\n        Returns:\n            scores: (B,num_proposal,2+3+NH*2+NS*4) \n        \"\"\"", "\n", "if", "self", ".", "sampling", "==", "'vote_fps'", ":", "\n", "# Farthest point sampling (FPS) on votes", "\n", "            ", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "vote_aggregation", "(", "xyz", ",", "features", ")", "\n", "sample_inds", "=", "fps_inds", "\n", "", "elif", "self", ".", "sampling", "==", "'seed_fps'", ":", "\n", "# FPS on seed and choose the votes corresponding to the seeds", "\n", "# This gets us a slightly better coverage of *object* votes than vote_fps (which tends to get more cluster votes)", "\n", "            ", "sample_inds", "=", "pointnet2_utils", ".", "furthest_point_sample", "(", "end_points", "[", "'seed_xyz'", "]", ",", "self", ".", "num_proposal", ")", "\n", "xyz", ",", "features", ",", "_", "=", "self", ".", "vote_aggregation", "(", "xyz", ",", "features", ",", "sample_inds", ")", "\n", "", "elif", "self", ".", "sampling", "==", "'random'", ":", "\n", "# Random sampling from the votes", "\n", "            ", "num_seed", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "1", "]", "\n", "batch_size", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "0", "]", "\n", "sample_inds", "=", "torch", ".", "randint", "(", "0", ",", "num_seed", ",", "(", "batch_size", ",", "self", ".", "num_proposal", ")", ",", "dtype", "=", "torch", ".", "int", ")", ".", "cuda", "(", ")", "\n", "xyz", ",", "features", ",", "_", "=", "self", ".", "vote_aggregation", "(", "xyz", ",", "features", ",", "sample_inds", ")", "\n", "", "else", ":", "\n", "            ", "log_string", "(", "'Unknown sampling strategy: %s. Exiting!'", "%", "(", "self", ".", "sampling", ")", ")", "\n", "exit", "(", ")", "\n", "", "end_points", "[", "'aggregated_vote_xyz'", "]", "=", "xyz", "# (batch_size, num_proposal, 3)", "\n", "end_points", "[", "'aggregated_vote_features'", "]", "=", "features", "# (batch_size, num_proposal, C)", "\n", "end_points", "[", "'aggregated_vote_inds'", "]", "=", "sample_inds", "# (batch_size, num_proposal,) # should be 0,1,2,...,num_proposal", "\n", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.proposal_module.ProposalModule_head.__init__": [[179, 198], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "num_proposal", ",", "sampling", ",", "seed_feat_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "sampling", "=", "sampling", "\n", "self", ".", "seed_feat_dim", "=", "seed_feat_dim", "\n", "\n", "# Object proposal/detection", "\n", "# Objectness scores (2), center residual (3),", "\n", "# heading class+residual (num_heading_bin*2), size class+residual(num_size_cluster*4)", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "384", ",", "2", "+", "3", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "*", "4", "+", "self", ".", "num_class", ",", "1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.proposal_module.ProposalModule_head.forward": [[199, 209], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "proposal_module.ProposalModule_head.conv3", "proposal_module.decode_scores", "proposal_module.ProposalModule_head.bn1", "proposal_module.ProposalModule_head.bn2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "proposal_module.ProposalModule_head.conv1", "proposal_module.ProposalModule_head.conv2"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.proposal_module.decode_scores"], ["", "def", "forward", "(", "self", ",", "end_points", ",", "global_to_concat", "=", "None", ",", "local_to_concat", "=", "None", ")", ":", "\n", "# --------- PROPOSAL GENERATION ---------", "\n", "        ", "net", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "end_points", "[", "'aggregated_vote_features'", "]", ")", ")", ")", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "net", ")", ")", ")", "\n", "if", "global_to_concat", "is", "not", "None", "and", "local_to_concat", "is", "not", "None", ":", "\n", "            ", "net", "=", "torch", ".", "cat", "(", "[", "net", ",", "global_to_concat", ",", "local_to_concat", "]", ",", "dim", "=", "1", ")", "\n", "", "net", "=", "self", ".", "conv3", "(", "net", ")", "# (batch_size, 2+3+num_heading_bin*2+num_size_cluster*4, num_proposal)", "\n", "\n", "end_points", "=", "decode_scores", "(", "net", ",", "end_points", ",", "self", ".", "num_class", ",", "self", ".", "num_heading_bin", ",", "self", ".", "num_size_cluster", ",", "self", ".", "mean_size_arr", ")", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.proposal_module.decode_scores": [[18, 51], ["net.transpose", "net_transposed[].view", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.argmax", "torch.argmax", "torch.argmax", "pred_size_class.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather.squeeze_", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "pred_size_class.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "pred_size_class.unsqueeze().unsqueeze().repeat.unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().cuda().unsqueeze().unsqueeze.astype"], "function", ["None"], ["def", "decode_scores", "(", "net", ",", "end_points", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ")", ":", "\n", "    ", "net_transposed", "=", "net", ".", "transpose", "(", "2", ",", "1", ")", "# (batch_size, 1024, ..)", "\n", "batch_size", "=", "net_transposed", ".", "shape", "[", "0", "]", "\n", "num_proposal", "=", "net_transposed", ".", "shape", "[", "1", "]", "\n", "\n", "objectness_scores", "=", "net_transposed", "[", ":", ",", ":", ",", "0", ":", "2", "]", "\n", "end_points", "[", "'objectness_scores'", "]", "=", "objectness_scores", "\n", "\n", "base_xyz", "=", "end_points", "[", "'aggregated_vote_xyz'", "]", "# (batch_size, num_proposal, 3)", "\n", "center", "=", "base_xyz", "+", "net_transposed", "[", ":", ",", ":", ",", "2", ":", "5", "]", "# (batch_size, num_proposal, 3)", "\n", "end_points", "[", "'center'", "]", "=", "center", "\n", "\n", "heading_scores", "=", "net_transposed", "[", ":", ",", ":", ",", "5", ":", "5", "+", "num_heading_bin", "]", "\n", "heading_residuals_normalized", "=", "net_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", ":", "5", "+", "num_heading_bin", "*", "2", "]", "\n", "end_points", "[", "'heading_scores'", "]", "=", "heading_scores", "# Bxnum_proposalxnum_heading_bin", "\n", "end_points", "[", "'heading_residuals_normalized'", "]", "=", "heading_residuals_normalized", "# Bxnum_proposalxnum_heading_bin (should be -1 to 1)", "\n", "end_points", "[", "'heading_residuals'", "]", "=", "heading_residuals_normalized", "*", "(", "np", ".", "pi", "/", "num_heading_bin", ")", "# Bxnum_proposalxnum_heading_bin", "\n", "\n", "size_scores", "=", "net_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", "*", "2", ":", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "]", "\n", "size_residuals_normalized", "=", "net_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", ":", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "*", "4", "]", ".", "view", "(", "[", "batch_size", ",", "num_proposal", ",", "num_size_cluster", ",", "3", "]", ")", "# Bxnum_proposalxnum_size_clusterx3", "\n", "end_points", "[", "'size_scores'", "]", "=", "size_scores", "\n", "end_points", "[", "'size_residuals_normalized'", "]", "=", "size_residuals_normalized", "\n", "mean_size_arr", "=", "torch", ".", "from_numpy", "(", "mean_size_arr", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "end_points", "[", "'size_residuals'", "]", "=", "size_residuals_normalized", "*", "mean_size_arr", "\n", "size_recover", "=", "mean_size_arr", "+", "end_points", "[", "'size_residuals'", "]", "# Bxnum_proposalxnum_size_clusterx3", "\n", "pred_size_class", "=", "torch", ".", "argmax", "(", "size_scores", ",", "-", "1", ")", "\n", "pred_size_class", "=", "pred_size_class", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", "\n", "pred_size", "=", "torch", ".", "gather", "(", "size_recover", ",", "2", ",", "pred_size_class", ")", "\n", "end_points", "[", "'pred_size'", "]", "=", "pred_size", ".", "squeeze_", "(", "2", ")", "# Bxnum_proposalx3", "\n", "\n", "sem_cls_scores", "=", "net_transposed", "[", ":", ",", ":", ",", "5", "+", "num_heading_bin", "*", "2", "+", "num_size_cluster", "*", "4", ":", "]", "# Bxnum_proposalx22", "\n", "end_points", "[", "'sem_cls_scores'", "]", "=", "sem_cls_scores", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper_boxnet.compute_objectness_loss": [[20, 60], ["nn_distance.nn_distance", "end_points[].long", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.ones().cuda", "torch.ones().cuda", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "aggregated_vote_inds.long", "torch.Tensor().cuda", "torch.Tensor().cuda", "objectness_scores.transpose", "torch.sum", "torch.sum", "torch.ones", "torch.ones", "torch.sum", "torch.sum", "torch.Tensor", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.nn_distance"], ["def", "compute_objectness_loss", "(", "end_points", ")", ":", "\n", "    ", "\"\"\" Compute objectness loss for the proposals.\n\n    Args:\n        end_points: dict (read-only)\n\n    Returns:\n        objectness_loss: scalar Tensor\n        objectness_label: (batch_size, num_seed) Tensor with value 0 or 1\n        objectness_mask: (batch_size, num_seed) Tensor with value 0 or 1\n        object_assignment: (batch_size, num_seed) Tensor with long int\n            within [0,num_gt_object-1]\n    \"\"\"", "\n", "# Associate proposal and GT objects by point-to-point distances", "\n", "aggregated_vote_xyz", "=", "end_points", "[", "'aggregated_vote_xyz'", "]", "\n", "gt_center", "=", "end_points", "[", "'center_label'", "]", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "B", "=", "gt_center", ".", "shape", "[", "0", "]", "\n", "K", "=", "aggregated_vote_xyz", ".", "shape", "[", "1", "]", "\n", "K2", "=", "gt_center", ".", "shape", "[", "1", "]", "\n", "dist1", ",", "ind1", ",", "dist2", ",", "_", "=", "nn_distance", "(", "aggregated_vote_xyz", ",", "gt_center", ")", "# dist1: BxK, dist2: BxK2", "\n", "\n", "# Generate objectness label and mask", "\n", "# NOTE: Different from VoteNet, here we use seed label as objectness label.", "\n", "seed_inds", "=", "end_points", "[", "'seed_inds'", "]", ".", "long", "(", ")", "# B,num_seed in [0,num_points-1]", "\n", "seed_gt_votes_mask", "=", "torch", ".", "gather", "(", "end_points", "[", "'vote_label_mask'", "]", ",", "1", ",", "seed_inds", ")", "\n", "end_points", "[", "'seed_labels'", "]", "=", "seed_gt_votes_mask", "\n", "aggregated_vote_inds", "=", "end_points", "[", "'aggregated_vote_inds'", "]", "\n", "objectness_label", "=", "torch", ".", "gather", "(", "end_points", "[", "'seed_labels'", "]", ",", "1", ",", "aggregated_vote_inds", ".", "long", "(", ")", ")", "# select (B,K) from (B,1024)", "\n", "objectness_mask", "=", "torch", ".", "ones", "(", "(", "objectness_label", ".", "shape", "[", "0", "]", ",", "objectness_label", ".", "shape", "[", "1", "]", ")", ")", ".", "cuda", "(", ")", "# no ignore zone anymore", "\n", "\n", "# Compute objectness loss", "\n", "objectness_scores", "=", "end_points", "[", "'objectness_scores'", "]", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "torch", ".", "Tensor", "(", "OBJECTNESS_CLS_WEIGHTS", ")", ".", "cuda", "(", ")", ",", "reduction", "=", "'none'", ")", "\n", "objectness_loss", "=", "criterion", "(", "objectness_scores", ".", "transpose", "(", "2", ",", "1", ")", ",", "objectness_label", ")", "\n", "objectness_loss", "=", "torch", ".", "sum", "(", "objectness_loss", "*", "objectness_mask", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask", ")", "+", "1e-6", ")", "\n", "\n", "# Set assignment", "\n", "object_assignment", "=", "ind1", "# (B,K) with values in 0,1,...,K2-1", "\n", "\n", "return", "objectness_loss", ",", "objectness_label", ",", "objectness_mask", ",", "object_assignment", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper_boxnet.get_loss": [[62, 123], ["loss_helper_boxnet.compute_objectness_loss", "loss_helper.compute_box_and_sem_cls_loss", "torch.argmax", "torch.argmax", "torch.sum", "torch.sum", "float", "torch.sum", "torch.sum", "objectness_label.float().cuda", "torch.sum", "torch.sum", "float", "torch.sum", "torch.sum", "objectness_mask.float", "objectness_label.float", "objectness_label.long"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper_boxnet.compute_objectness_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_box_and_sem_cls_loss"], ["", "def", "get_loss", "(", "end_points", ",", "config", ")", ":", "\n", "    ", "\"\"\" Loss functions\n\n    Args:\n        end_points: dict\n            {   \n                seed_xyz, seed_inds,\n                center,\n                heading_scores, heading_residuals_normalized,\n                size_scores, size_residuals_normalized,\n                sem_cls_scores, #seed_logits,#\n                center_label,\n                heading_class_label, heading_residual_label,\n                size_class_label, size_residual_label,\n                sem_cls_label,\n                box_label_mask,\n                vote_label, vote_label_mask\n            }\n        config: dataset config instance\n    Returns:\n        loss: pytorch scalar tensor\n        end_points: dict\n    \"\"\"", "\n", "\n", "# Obj loss", "\n", "objectness_loss", ",", "objectness_label", ",", "objectness_mask", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points", ")", "\n", "end_points", "[", "'objectness_loss'", "]", "=", "objectness_loss", "\n", "end_points", "[", "'objectness_label'", "]", "=", "objectness_label", "\n", "end_points", "[", "'objectness_mask'", "]", "=", "objectness_mask", "\n", "end_points", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "total_num_proposal", "=", "objectness_label", ".", "shape", "[", "0", "]", "*", "objectness_label", ".", "shape", "[", "1", "]", "\n", "end_points", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points", "[", "'pos_ratio'", "]", "\n", "\n", "# Box loss and sem cls loss", "\n", "center_loss", ",", "heading_cls_loss", ",", "heading_reg_loss", ",", "size_cls_loss", ",", "size_reg_loss", ",", "sem_cls_loss", "=", "compute_box_and_sem_cls_loss", "(", "end_points", ",", "config", ")", "\n", "end_points", "[", "'center_loss'", "]", "=", "center_loss", "\n", "end_points", "[", "'heading_cls_loss'", "]", "=", "heading_cls_loss", "\n", "end_points", "[", "'heading_reg_loss'", "]", "=", "heading_reg_loss", "\n", "end_points", "[", "'size_cls_loss'", "]", "=", "size_cls_loss", "\n", "end_points", "[", "'size_reg_loss'", "]", "=", "size_reg_loss", "\n", "end_points", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss", "\n", "box_loss", "=", "center_loss", "+", "0.1", "*", "heading_cls_loss", "+", "heading_reg_loss", "+", "0.1", "*", "size_cls_loss", "+", "size_reg_loss", "\n", "end_points", "[", "'box_loss'", "]", "=", "box_loss", "\n", "\n", "# Final loss function", "\n", "loss", "=", "0.5", "*", "objectness_loss", "+", "box_loss", "+", "0.1", "*", "sem_cls_loss", "\n", "loss", "*=", "10", "\n", "end_points", "[", "'loss'", "]", "=", "loss", "\n", "\n", "# --------------------------------------------", "\n", "# Some other statistics", "\n", "obj_pred_val", "=", "torch", ".", "argmax", "(", "end_points", "[", "'objectness_scores'", "]", ",", "2", ")", "# B,K", "\n", "obj_acc", "=", "torch", ".", "sum", "(", "(", "obj_pred_val", "==", "objectness_label", ".", "long", "(", ")", ")", ".", "float", "(", ")", "*", "objectness_mask", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask", ")", "+", "1e-6", ")", "\n", "end_points", "[", "'obj_acc'", "]", "=", "obj_acc", "\n", "\n", "return", "loss", ",", "end_points", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2BackboneWithSem.__init__": [[284, 339], ["torch.Module.__init__", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetSAModuleVotes", "pointnet2_modules.PointnetFPModule", "pointnet2_modules.PointnetFPModule", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa2", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "1024", ",", "\n", "radius", "=", "0.4", ",", "\n", "nsample", "=", "32", ",", "\n", "mlp", "=", "[", "128", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa3", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "512", ",", "\n", "radius", "=", "0.8", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "256", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "self", ".", "sa4", "=", "PointnetSAModuleVotes", "(", "\n", "npoint", "=", "256", ",", "\n", "radius", "=", "1.2", ",", "\n", "nsample", "=", "16", ",", "\n", "mlp", "=", "[", "256", ",", "128", ",", "128", ",", "256", "]", ",", "\n", "use_xyz", "=", "True", ",", "\n", "normalize_xyz", "=", "True", "\n", ")", "\n", "\n", "", "def", "_break_up_pc", "(", "self", ",", "pc", ")", ":", "\n", "        ", "xyz", "=", "pc", "[", "...", ",", "0", ":", "3", "]", ".", "contiguous", "(", ")", "\n", "features", "=", "(", "\n", "pc", "[", "...", ",", "3", ":", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "pc", ".", "size", "(", "-", "1", ")", ">", "3", "else", "None", "\n", ")", "\n", "\n", "return", "xyz", ",", "features", "\n", "\n", "", "def", "forward", "(", "self", ",", "pointcloud", ":", "torch", ".", "cuda", ".", "FloatTensor", ",", "end_points", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2BackboneWithSem._break_up_pc": [[341, 349], ["pc[].contiguous", "pc[].transpose().contiguous", "pc.size", "pc[].transpose"], "methods", ["None"], ["\n", "if", "not", "end_points", ":", "end_points", "=", "{", "}", "\n", "batch_size", "=", "pointcloud", ".", "shape", "[", "0", "]", "\n", "\n", "xyz", ",", "features", "=", "self", ".", "_break_up_pc", "(", "pointcloud", ")", "\n", "\n", "# --------- 4 SET ABSTRACTION LAYERS ---------", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa1", "(", "xyz", ",", "features", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2BackboneWithSem.forward": [[350, 412], ["backbone_module.Pointnet2BackboneWithSem._break_up_pc", "backbone_module.Pointnet2BackboneWithSem.sa1", "backbone_module.Pointnet2BackboneWithSem.sa2", "backbone_module.Pointnet2BackboneWithSem.sa3", "backbone_module.Pointnet2BackboneWithSem.sa4", "pointnet2_modules.ThreeNNInterpolate", "pointnet2_modules.ThreeNNInterpolate", "pointnet2_modules.ThreeNNInterpolate", "pointnet2_modules.ThreeNNInterpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "backbone_module.Pointnet2BackboneWithSem.fc_layer", "backbone_module.Pointnet2BackboneWithSem.fp1", "backbone_module.Pointnet2BackboneWithSem.fp2"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.backbone_module.Pointnet2BackboneWithSem._break_up_pc", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.ThreeNNInterpolate", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.ThreeNNInterpolate", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.ThreeNNInterpolate", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.ThreeNNInterpolate"], ["end_points", "[", "'sa1_inds'", "]", "=", "fps_inds", "\n", "end_points", "[", "'sa1_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa1_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa2", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,1023", "\n", "end_points", "[", "'sa2_inds'", "]", "=", "fps_inds", "\n", "end_points", "[", "'sa2_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa2_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa3", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,511", "\n", "end_points", "[", "'sa3_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa3_features'", "]", "=", "features", "\n", "\n", "xyz", ",", "features", ",", "fps_inds", "=", "self", ".", "sa4", "(", "xyz", ",", "features", ")", "# this fps_inds is just 0,1,...,255", "\n", "end_points", "[", "'sa4_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'sa4_features'", "]", "=", "features", "\n", "\n", "return", "end_points", "\n", "\n", "\n", "", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "backbone_net", "=", "Pointnet2Backbone", "(", "input_feature_dim", "=", "3", ")", ".", "cuda", "(", ")", "\n", "print", "(", "backbone_net", ")", "\n", "backbone_net", ".", "eval", "(", ")", "\n", "out", "=", "backbone_net", "(", "torch", ".", "rand", "(", "16", ",", "20000", ",", "6", ")", ".", "cuda", "(", ")", ")", "\n", "for", "key", "in", "sorted", "(", "out", ".", "keys", "(", ")", ")", ":", "\n", "        ", "print", "(", "key", ",", "'\\t'", ",", "out", "[", "key", "]", ".", "shape", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.GradReverse.forward": [[20, 23], ["x.view_as"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.GradReverse.backward": [[24, 28], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "grad_output", ")", ":", "\n", "#pdb.set_trace()", "\n", "        ", "return", "(", "grad_output", "*", "-", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.CALayer.__init__": [[36, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "8", ")", ":", "\n", "        ", "super", "(", "CALayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# feature channel downscale and upscale --> channel weight", "\n", "self", ".", "conv_du", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel", ",", "channel", "//", "reduction", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channel", "//", "reduction", ",", "channel", ",", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "288", "*", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.CALayer.forward": [[47, 54], ["detector_DA.CALayer.conv_du", "detector_DA.CALayer.view", "detector_DA.CALayer.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "conv_du", "(", "x", ")", "\n", "y", "=", "x", "*", "y", "+", "x", "\n", "y", "=", "y", ".", "view", "(", "y", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "bn", "(", "y", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.GroupFreeDetector_DA.__init__": [[77, 189], ["torch.Module.__init__", "backbone_module.Pointnet2Backbone", "modules.PredictHead", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "range", "detector_DA.GroupFreeDetector_DA.init_weights", "detector_DA.GroupFreeDetector_DA.init_bn_momentum", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "modules.FPSModule", "detector_DA.GroupFreeDetector_DA.decoder.append", "detector_DA.GroupFreeDetector_DA.prediction_heads.append", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "modules.PointsObjClsModule", "modules.GeneralSamplingModule", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "range", "NotImplementedError", "transformer.TransformerDecoderLayer", "modules.PredictHead", "range", "detector_DA.GroupFreeDetector_DA.decoder_self_posembeds.append", "torch.ModuleList", "torch.ModuleList", "range", "NotImplementedError", "range", "detector_DA.GroupFreeDetector_DA.decoder_cross_posembeds.append", "modules.PositionEmbeddingLearned", "detector_DA.GroupFreeDetector_DA.decoder_self_posembeds.append", "modules.PositionEmbeddingLearned", "modules.PositionEmbeddingLearned"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector.GroupFreeDetector.init_weights", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector.GroupFreeDetector.init_bn_momentum"], ["def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "0", ",", "width", "=", "1", ",", "bn_momentum", "=", "0.1", ",", "sync_bn", "=", "False", ",", "num_proposal", "=", "128", ",", "sampling", "=", "'kps'", ",", "\n", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ",", "nhead", "=", "8", ",", "num_decoder_layers", "=", "6", ",", "dim_feedforward", "=", "2048", ",", "\n", "self_position_embedding", "=", "'xyz_learned'", ",", "cross_position_embedding", "=", "'xyz_learned'", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "assert", "(", "mean_size_arr", ".", "shape", "[", "0", "]", "==", "self", ".", "num_size_cluster", ")", "\n", "self", ".", "input_feature_dim", "=", "input_feature_dim", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "bn_momentum", "=", "bn_momentum", "\n", "self", ".", "sync_bn", "=", "sync_bn", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "nhead", "=", "nhead", "\n", "self", ".", "sampling", "=", "sampling", "\n", "self", ".", "num_decoder_layers", "=", "num_decoder_layers", "\n", "self", ".", "dim_feedforward", "=", "dim_feedforward", "\n", "self", ".", "self_position_embedding", "=", "self_position_embedding", "\n", "self", ".", "cross_position_embedding", "=", "cross_position_embedding", "\n", "\n", "# Backbone point feature learning", "\n", "self", ".", "backbone_net", "=", "Pointnet2Backbone", "(", "input_feature_dim", "=", "self", ".", "input_feature_dim", ",", "width", "=", "self", ".", "width", ")", "\n", "\n", "if", "self", ".", "sampling", "==", "'fps'", ":", "\n", "            ", "self", ".", "fps_module", "=", "FPSModule", "(", "num_proposal", ")", "\n", "", "elif", "self", ".", "sampling", "==", "'kps'", ":", "\n", "            ", "self", ".", "points_obj_cls", "=", "PointsObjClsModule", "(", "288", ")", "\n", "self", ".", "gsample_module", "=", "GeneralSamplingModule", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# Proposal", "\n", "", "self", ".", "proposal_head", "=", "PredictHead", "(", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "288", ")", "\n", "if", "self", ".", "num_decoder_layers", "<=", "0", ":", "\n", "# stop building if has no decoder layer", "\n", "            ", "return", "\n", "\n", "# Transformer Decoder Projection", "\n", "", "self", ".", "decoder_key_proj", "=", "nn", ".", "Conv1d", "(", "288", ",", "288", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "decoder_query_proj", "=", "nn", ".", "Conv1d", "(", "288", ",", "288", ",", "kernel_size", "=", "1", ")", "\n", "\n", "# Position Embedding for Self-Attention", "\n", "if", "self", ".", "self_position_embedding", "==", "'none'", ":", "\n", "            ", "self", ".", "decoder_self_posembeds", "=", "[", "None", "for", "i", "in", "range", "(", "num_decoder_layers", ")", "]", "\n", "", "elif", "self", ".", "self_position_embedding", "==", "'xyz_learned'", ":", "\n", "            ", "self", ".", "decoder_self_posembeds", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "                ", "self", ".", "decoder_self_posembeds", ".", "append", "(", "PositionEmbeddingLearned", "(", "3", ",", "288", ")", ")", "\n", "", "", "elif", "self", ".", "self_position_embedding", "==", "'loc_learned'", ":", "\n", "            ", "self", ".", "decoder_self_posembeds", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "                ", "self", ".", "decoder_self_posembeds", ".", "append", "(", "PositionEmbeddingLearned", "(", "6", ",", "288", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"self_position_embedding not supported {self.self_position_embedding}\"", ")", "\n", "\n", "# Position Embedding for Cross-Attention", "\n", "", "if", "self", ".", "cross_position_embedding", "==", "'none'", ":", "\n", "            ", "self", ".", "decoder_cross_posembeds", "=", "[", "None", "for", "i", "in", "range", "(", "num_decoder_layers", ")", "]", "\n", "", "elif", "self", ".", "cross_position_embedding", "==", "'xyz_learned'", ":", "\n", "            ", "self", ".", "decoder_cross_posembeds", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "                ", "self", ".", "decoder_cross_posembeds", ".", "append", "(", "PositionEmbeddingLearned", "(", "3", ",", "288", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"cross_position_embedding not supported {self.cross_position_embedding}\"", ")", "\n", "\n", "# Transformer decoder layers", "\n", "", "self", ".", "decoder", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "            ", "self", ".", "decoder", ".", "append", "(", "\n", "TransformerDecoderLayer", "(", "\n", "288", ",", "nhead", ",", "dim_feedforward", ",", "dropout", ",", "activation", ",", "\n", "self_posembed", "=", "self", ".", "decoder_self_posembeds", "[", "i", "]", ",", "\n", "cross_posembed", "=", "self", ".", "decoder_cross_posembeds", "[", "i", "]", ",", "\n", ")", ")", "\n", "\n", "# Prediction Head", "\n", "", "self", ".", "prediction_heads", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "            ", "self", ".", "prediction_heads", ".", "append", "(", "PredictHead", "(", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "288", ")", ")", "\n", "\n", "# Init", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "init_bn_momentum", "(", ")", "\n", "if", "self", ".", "sync_bn", ":", "\n", "            ", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "self", ")", "\n", "\n", "# global domain prediction", "\n", "", "self", ".", "global_netD1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "288", ",", "256", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "global_netD2", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "\n", "\n", "# local domain prediction", "\n", "self", ".", "decoder_netD", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "288", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "1", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.GroupFreeDetector_DA.forward": [[192, 304], ["detector_DA.GroupFreeDetector_DA.backbone_net", "detector_DA.GroupFreeDetector_DA.proposal_head", "proposal_center.detach().clone", "proposal_size.detach().clone", "range", "detector_DA.GroupFreeDetector_DA.global_netD1", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "detector_DA.GroupFreeDetector_DA.global_netD2", "detector_DA.GroupFreeDetector_DA.fps_module", "detector_DA.GroupFreeDetector_DA.decoder_query_proj", "base_xyz.detach().clone.detach().clone.detach().clone", "base_size.detach().clone.detach().clone.detach().clone", "detector_DA.grad_reverse", "detector_DA.GroupFreeDetector_DA.points_obj_cls", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "[].int", "detector_DA.GroupFreeDetector_DA.gsample_module", "proposal_center.detach", "proposal_size.detach", "detector_DA.GroupFreeDetector_DA.decoder_key_proj", "NotImplementedError", "detector_DA.GroupFreeDetector_DA.decoder_netD", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "detector_DA.grad_reverse", "base_xyz.detach().clone.detach().clone.detach", "base_size.detach().clone.detach().clone.detach", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NotImplementedError", "torch.topk", "torch.topk", "torch.topk", "torch.topk"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.grad_reverse", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.grad_reverse", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Forward pass of the network\n\n        Args:\n            inputs: dict\n                {point_clouds}\n\n                point_clouds: Variable(torch.cuda.FloatTensor)\n                    (B, N, 3 + input_channels) tensor\n                    Point cloud to run predicts on\n                    Each point in the point-cloud MUST\n                    be formated as (x, y, z, features...)\n        Returns:\n            end_points: dict\n        \"\"\"", "\n", "end_points", "=", "{", "}", "\n", "batch_size", "=", "inputs", "[", "'point_clouds'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "end_points", "=", "self", ".", "backbone_net", "(", "inputs", "[", "'point_clouds'", "]", ",", "end_points", ")", "\n", "\n", "# Query Points Generation", "\n", "points_xyz", "=", "end_points", "[", "'fp2_xyz'", "]", "\n", "points_features", "=", "end_points", "[", "'fp2_features'", "]", "\n", "xyz", "=", "end_points", "[", "'fp2_xyz'", "]", "\n", "features", "=", "end_points", "[", "'fp2_features'", "]", "\n", "end_points", "[", "'seed_inds'", "]", "=", "end_points", "[", "'fp2_inds'", "]", "\n", "end_points", "[", "'seed_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'seed_features'", "]", "=", "features", "\n", "if", "self", ".", "sampling", "==", "'fps'", ":", "\n", "            ", "xyz", ",", "features", ",", "sample_inds", "=", "self", ".", "fps_module", "(", "xyz", ",", "features", ")", "\n", "cluster_feature", "=", "features", "\n", "cluster_xyz", "=", "xyz", "\n", "end_points", "[", "'query_points_xyz'", "]", "=", "xyz", "# (batch_size, num_proposal, 3)", "\n", "end_points", "[", "'query_points_feature'", "]", "=", "features", "# (batch_size, C, num_proposal)", "\n", "end_points", "[", "'query_points_sample_inds'", "]", "=", "sample_inds", "# (bsz, num_proposal) # should be 0,1,...,num_proposal", "\n", "", "elif", "self", ".", "sampling", "==", "'kps'", ":", "\n", "            ", "points_obj_cls_logits", "=", "self", ".", "points_obj_cls", "(", "features", ")", "# (batch_size, 1, num_seed)", "\n", "end_points", "[", "'seeds_obj_cls_logits'", "]", "=", "points_obj_cls_logits", "\n", "points_obj_cls_scores", "=", "torch", ".", "sigmoid", "(", "points_obj_cls_logits", ")", ".", "squeeze", "(", "1", ")", "\n", "sample_inds", "=", "torch", ".", "topk", "(", "points_obj_cls_scores", ",", "self", ".", "num_proposal", ")", "[", "1", "]", ".", "int", "(", ")", "\n", "xyz", ",", "features", ",", "sample_inds", "=", "self", ".", "gsample_module", "(", "xyz", ",", "features", ",", "sample_inds", ")", "\n", "cluster_feature", "=", "features", "\n", "cluster_xyz", "=", "xyz", "\n", "end_points", "[", "'query_points_xyz'", "]", "=", "xyz", "# (batch_size, num_proposal, 3)", "\n", "end_points", "[", "'query_points_feature'", "]", "=", "features", "# (batch_size, C, num_proposal)", "\n", "end_points", "[", "'query_points_sample_inds'", "]", "=", "sample_inds", "# (bsz, num_proposal) # should be 0,1,...,num_proposal", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Proposal", "\n", "", "proposal_center", ",", "proposal_size", "=", "self", ".", "proposal_head", "(", "cluster_feature", ",", "\n", "base_xyz", "=", "cluster_xyz", ",", "\n", "end_points", "=", "end_points", ",", "\n", "prefix", "=", "'proposal_'", ")", "# N num_proposal 3", "\n", "\n", "base_xyz", "=", "proposal_center", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "base_size", "=", "proposal_size", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "# Transformer Decoder and Prediction", "\n", "if", "self", ".", "num_decoder_layers", ">", "0", ":", "\n", "            ", "query", "=", "self", ".", "decoder_query_proj", "(", "cluster_feature", ")", "\n", "key", "=", "self", ".", "decoder_key_proj", "(", "points_features", ")", "if", "self", ".", "decoder_key_proj", "is", "not", "None", "else", "None", "\n", "# Position Embedding for Cross-Attention", "\n", "", "if", "self", ".", "cross_position_embedding", "==", "'none'", ":", "\n", "            ", "key_pos", "=", "None", "\n", "", "elif", "self", ".", "cross_position_embedding", "in", "[", "'xyz_learned'", "]", ":", "\n", "            ", "key_pos", "=", "points_xyz", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"cross_position_embedding not supported {self.cross_position_embedding}\"", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "            ", "prefix", "=", "'last_'", "if", "(", "i", "==", "self", ".", "num_decoder_layers", "-", "1", ")", "else", "f'{i}head_'", "\n", "\n", "# Position Embedding for Self-Attention", "\n", "if", "self", ".", "self_position_embedding", "==", "'none'", ":", "\n", "                ", "query_pos", "=", "None", "\n", "", "elif", "self", ".", "self_position_embedding", "==", "'xyz_learned'", ":", "\n", "                ", "query_pos", "=", "base_xyz", "\n", "", "elif", "self", ".", "self_position_embedding", "==", "'loc_learned'", ":", "\n", "                ", "query_pos", "=", "torch", ".", "cat", "(", "[", "base_xyz", ",", "base_size", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "f\"self_position_embedding not supported {self.self_position_embedding}\"", ")", "\n", "\n", "# Transformer Decoder Layer", "\n", "", "query", "=", "self", ".", "decoder", "[", "i", "]", "(", "query", ",", "key", ",", "query_pos", ",", "key_pos", ")", "\n", "\n", "# local", "\n", "if", "prefix", "==", "'last_'", ":", "\n", "                ", "local_d_pred", "=", "self", ".", "decoder_netD", "(", "grad_reverse", "(", "query", ")", ")", "# Bx1x256", "\n", "local_d_pred", "=", "torch", ".", "sigmoid", "(", "local_d_pred", ")", "\n", "end_points", "[", "f'{prefix}local_d_pred'", "]", "=", "local_d_pred", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "# Prediction", "\n", "", "base_xyz", ",", "base_size", "=", "self", ".", "prediction_heads", "[", "i", "]", "(", "query", ",", "\n", "base_xyz", "=", "cluster_xyz", ",", "\n", "end_points", "=", "end_points", ",", "\n", "prefix", "=", "prefix", ")", "\n", "\n", "base_xyz", "=", "base_xyz", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "base_size", "=", "base_size", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "\n", "## domain prediction", "\n", "# global", "\n", "", "global_d_pred", "=", "self", ".", "global_netD1", "(", "grad_reverse", "(", "end_points", "[", "'seed_features'", "]", ")", ")", "# Bx128x1024", "\n", "global_d_pred", "=", "torch", ".", "mean", "(", "global_d_pred", ",", "dim", "=", "2", ")", "# Bx128", "\n", "global_d_pred", "=", "self", ".", "global_netD2", "(", "global_d_pred", ")", "# Bx2", "\n", "end_points", "[", "'global_d_pred'", "]", "=", "global_d_pred", "\n", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.GroupFreeDetector_DA.init_weights": [[305, 310], ["detector_DA.GroupFreeDetector_DA.decoder.parameters", "m.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "# initialize transformer", "\n", "        ", "for", "m", "in", "self", ".", "decoder", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "m", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.GroupFreeDetector_DA.init_bn_momentum": [[311, 315], ["detector_DA.GroupFreeDetector_DA.modules", "isinstance"], "methods", ["None"], ["", "", "", "def", "init_bn_momentum", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm1d", ")", ")", ":", "\n", "                ", "m", ".", "momentum", "=", "self", ".", "bn_momentum", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.GroupFreeDetector_DA_jitter.__init__": [[338, 458], ["torch.Module.__init__", "backbone_module.Pointnet2Backbone_jitter", "modules.PredictHead", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "range", "detector_DA.GroupFreeDetector_DA_jitter.init_weights", "detector_DA.GroupFreeDetector_DA_jitter.init_bn_momentum", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modules.FPSModule", "detector_DA.GroupFreeDetector_DA_jitter.decoder.append", "detector_DA.GroupFreeDetector_DA_jitter.prediction_heads.append", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "modules.PointsObjClsModule", "modules.GeneralSamplingModule", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "range", "NotImplementedError", "transformer.TransformerDecoderLayer", "modules.PredictHead", "range", "detector_DA.GroupFreeDetector_DA_jitter.decoder_self_posembeds.append", "torch.ModuleList", "torch.ModuleList", "range", "NotImplementedError", "range", "detector_DA.GroupFreeDetector_DA_jitter.decoder_cross_posembeds.append", "modules.PositionEmbeddingLearned", "detector_DA.GroupFreeDetector_DA_jitter.decoder_self_posembeds.append", "modules.PositionEmbeddingLearned", "modules.PositionEmbeddingLearned"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector.GroupFreeDetector.init_weights", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector.GroupFreeDetector.init_bn_momentum"], ["def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "0", ",", "width", "=", "1", ",", "bn_momentum", "=", "0.1", ",", "sync_bn", "=", "False", ",", "num_proposal", "=", "128", ",", "sampling", "=", "'kps'", ",", "\n", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ",", "nhead", "=", "8", ",", "num_decoder_layers", "=", "6", ",", "dim_feedforward", "=", "2048", ",", "\n", "self_position_embedding", "=", "'xyz_learned'", ",", "cross_position_embedding", "=", "'xyz_learned'", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "assert", "(", "mean_size_arr", ".", "shape", "[", "0", "]", "==", "self", ".", "num_size_cluster", ")", "\n", "self", ".", "input_feature_dim", "=", "input_feature_dim", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "bn_momentum", "=", "bn_momentum", "\n", "self", ".", "sync_bn", "=", "sync_bn", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "nhead", "=", "nhead", "\n", "self", ".", "sampling", "=", "sampling", "\n", "self", ".", "num_decoder_layers", "=", "num_decoder_layers", "\n", "self", ".", "dim_feedforward", "=", "dim_feedforward", "\n", "self", ".", "self_position_embedding", "=", "self_position_embedding", "\n", "self", ".", "cross_position_embedding", "=", "cross_position_embedding", "\n", "\n", "# Backbone point feature learning", "\n", "self", ".", "backbone_net", "=", "Pointnet2Backbone_jitter", "(", "input_feature_dim", "=", "self", ".", "input_feature_dim", ",", "width", "=", "self", ".", "width", ")", "\n", "\n", "if", "self", ".", "sampling", "==", "'fps'", ":", "\n", "            ", "self", ".", "fps_module", "=", "FPSModule", "(", "num_proposal", ")", "\n", "", "elif", "self", ".", "sampling", "==", "'kps'", ":", "\n", "            ", "self", ".", "points_obj_cls", "=", "PointsObjClsModule", "(", "288", ")", "\n", "self", ".", "gsample_module", "=", "GeneralSamplingModule", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# Proposal", "\n", "", "self", ".", "proposal_head", "=", "PredictHead", "(", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "288", ")", "\n", "if", "self", ".", "num_decoder_layers", "<=", "0", ":", "\n", "# stop building if has no decoder layer", "\n", "            ", "return", "\n", "\n", "# Transformer Decoder Projection", "\n", "", "self", ".", "decoder_key_proj", "=", "nn", ".", "Conv1d", "(", "288", ",", "288", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "decoder_query_proj", "=", "nn", ".", "Conv1d", "(", "288", ",", "288", ",", "kernel_size", "=", "1", ")", "\n", "\n", "# Position Embedding for Self-Attention", "\n", "if", "self", ".", "self_position_embedding", "==", "'none'", ":", "\n", "            ", "self", ".", "decoder_self_posembeds", "=", "[", "None", "for", "i", "in", "range", "(", "num_decoder_layers", ")", "]", "\n", "", "elif", "self", ".", "self_position_embedding", "==", "'xyz_learned'", ":", "\n", "            ", "self", ".", "decoder_self_posembeds", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "                ", "self", ".", "decoder_self_posembeds", ".", "append", "(", "PositionEmbeddingLearned", "(", "3", ",", "288", ")", ")", "\n", "", "", "elif", "self", ".", "self_position_embedding", "==", "'loc_learned'", ":", "\n", "            ", "self", ".", "decoder_self_posembeds", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "                ", "self", ".", "decoder_self_posembeds", ".", "append", "(", "PositionEmbeddingLearned", "(", "6", ",", "288", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"self_position_embedding not supported {self.self_position_embedding}\"", ")", "\n", "\n", "# Position Embedding for Cross-Attention", "\n", "", "if", "self", ".", "cross_position_embedding", "==", "'none'", ":", "\n", "            ", "self", ".", "decoder_cross_posembeds", "=", "[", "None", "for", "i", "in", "range", "(", "num_decoder_layers", ")", "]", "\n", "", "elif", "self", ".", "cross_position_embedding", "==", "'xyz_learned'", ":", "\n", "            ", "self", ".", "decoder_cross_posembeds", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "                ", "self", ".", "decoder_cross_posembeds", ".", "append", "(", "PositionEmbeddingLearned", "(", "3", ",", "288", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"cross_position_embedding not supported {self.cross_position_embedding}\"", ")", "\n", "\n", "# Transformer decoder layers", "\n", "", "self", ".", "decoder", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "            ", "self", ".", "decoder", ".", "append", "(", "\n", "TransformerDecoderLayer", "(", "\n", "288", ",", "nhead", ",", "dim_feedforward", ",", "dropout", ",", "activation", ",", "\n", "self_posembed", "=", "self", ".", "decoder_self_posembeds", "[", "i", "]", ",", "\n", "cross_posembed", "=", "self", ".", "decoder_cross_posembeds", "[", "i", "]", ",", "\n", ")", ")", "\n", "\n", "# Prediction Head", "\n", "", "self", ".", "prediction_heads", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "            ", "self", ".", "prediction_heads", ".", "append", "(", "PredictHead", "(", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "288", ")", ")", "\n", "\n", "# Init", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "init_bn_momentum", "(", ")", "\n", "if", "self", ".", "sync_bn", ":", "\n", "            ", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "self", ")", "\n", "\n", "# global domain prediction", "\n", "", "self", ".", "global_netD1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "288", ",", "256", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "256", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "global_netD2", "=", "nn", ".", "Linear", "(", "128", ",", "2", ")", "\n", "\n", "\n", "# local domain prediction", "\n", "self", ".", "decoder_netD", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "288", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "128", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "128", ",", "1", ",", "1", ")", "\n", ")", "\n", "\n", "# jitter prediction", "\n", "self", ".", "jitter_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "150", ",", "64", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv1d", "(", "64", ",", "3", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.GroupFreeDetector_DA_jitter.forward": [[461, 575], ["detector_DA.GroupFreeDetector_DA_jitter.backbone_net", "detector_DA.GroupFreeDetector_DA_jitter.proposal_head", "proposal_center.detach().clone", "proposal_size.detach().clone", "range", "detector_DA.GroupFreeDetector_DA_jitter.global_netD1", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "detector_DA.GroupFreeDetector_DA_jitter.global_netD2", "detector_DA.GroupFreeDetector_DA_jitter.jitter_net", "detector_DA.GroupFreeDetector_DA_jitter.fps_module", "detector_DA.GroupFreeDetector_DA_jitter.decoder_query_proj", "base_xyz.detach().clone.detach().clone.detach().clone", "base_size.detach().clone.detach().clone.detach().clone", "detector_DA.grad_reverse", "detector_DA.GroupFreeDetector_DA_jitter.points_obj_cls", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "[].int", "detector_DA.GroupFreeDetector_DA_jitter.gsample_module", "proposal_center.detach", "proposal_size.detach", "detector_DA.GroupFreeDetector_DA_jitter.decoder_key_proj", "NotImplementedError", "detector_DA.GroupFreeDetector_DA_jitter.decoder_netD", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "detector_DA.grad_reverse", "base_xyz.detach().clone.detach().clone.detach", "base_size.detach().clone.detach().clone.detach", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NotImplementedError", "torch.topk", "torch.topk", "torch.topk", "torch.topk"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.grad_reverse", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.grad_reverse", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "center_xyz", "=", "None", ",", "center_cls", "=", "None", ")", ":", "\n", "        ", "\"\"\" Forward pass of the network\n\n        Args:\n            inputs: dict\n                {point_clouds}\n\n                point_clouds: Variable(torch.cuda.FloatTensor)\n                    (B, N, 3 + input_channels) tensor\n                    Point cloud to run predicts on\n                    Each point in the point-cloud MUST\n                    be formated as (x, y, z, features...)\n        Returns:\n            end_points: dict\n        \"\"\"", "\n", "end_points", "=", "{", "}", "\n", "batch_size", "=", "inputs", "[", "'point_clouds'", "]", ".", "shape", "[", "0", "]", "\n", "\n", "end_points", "=", "self", ".", "backbone_net", "(", "inputs", "[", "'point_clouds'", "]", ",", "center_xyz", ",", "center_cls", ",", "end_points", ")", "\n", "if", "center_xyz", "is", "not", "None", ":", "\n", "            ", "end_points", "[", "'jitter_pred'", "]", "=", "self", ".", "jitter_net", "(", "end_points", "[", "'center_features'", "]", ")", "# B, 3, 64", "\n", "\n", "# Query Points Generation", "\n", "", "points_xyz", "=", "end_points", "[", "'fp2_xyz'", "]", "\n", "points_features", "=", "end_points", "[", "'fp2_features'", "]", "\n", "xyz", "=", "end_points", "[", "'fp2_xyz'", "]", "\n", "features", "=", "end_points", "[", "'fp2_features'", "]", "\n", "end_points", "[", "'seed_inds'", "]", "=", "end_points", "[", "'fp2_inds'", "]", "\n", "end_points", "[", "'seed_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'seed_features'", "]", "=", "features", "\n", "if", "self", ".", "sampling", "==", "'fps'", ":", "\n", "            ", "xyz", ",", "features", ",", "sample_inds", "=", "self", ".", "fps_module", "(", "xyz", ",", "features", ")", "\n", "cluster_feature", "=", "features", "\n", "cluster_xyz", "=", "xyz", "\n", "end_points", "[", "'query_points_xyz'", "]", "=", "xyz", "# (batch_size, num_proposal, 3)", "\n", "end_points", "[", "'query_points_feature'", "]", "=", "features", "# (batch_size, C, num_proposal)", "\n", "end_points", "[", "'query_points_sample_inds'", "]", "=", "sample_inds", "# (bsz, num_proposal) # should be 0,1,...,num_proposal", "\n", "", "elif", "self", ".", "sampling", "==", "'kps'", ":", "\n", "            ", "points_obj_cls_logits", "=", "self", ".", "points_obj_cls", "(", "features", ")", "# (batch_size, 1, num_seed)", "\n", "end_points", "[", "'seeds_obj_cls_logits'", "]", "=", "points_obj_cls_logits", "\n", "points_obj_cls_scores", "=", "torch", ".", "sigmoid", "(", "points_obj_cls_logits", ")", ".", "squeeze", "(", "1", ")", "\n", "sample_inds", "=", "torch", ".", "topk", "(", "points_obj_cls_scores", ",", "self", ".", "num_proposal", ")", "[", "1", "]", ".", "int", "(", ")", "\n", "xyz", ",", "features", ",", "sample_inds", "=", "self", ".", "gsample_module", "(", "xyz", ",", "features", ",", "sample_inds", ")", "\n", "cluster_feature", "=", "features", "\n", "cluster_xyz", "=", "xyz", "\n", "end_points", "[", "'query_points_xyz'", "]", "=", "xyz", "# (batch_size, num_proposal, 3)", "\n", "end_points", "[", "'query_points_feature'", "]", "=", "features", "# (batch_size, C, num_proposal)", "\n", "end_points", "[", "'query_points_sample_inds'", "]", "=", "sample_inds", "# (bsz, num_proposal) # should be 0,1,...,num_proposal", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Proposal", "\n", "", "proposal_center", ",", "proposal_size", "=", "self", ".", "proposal_head", "(", "cluster_feature", ",", "\n", "base_xyz", "=", "cluster_xyz", ",", "\n", "end_points", "=", "end_points", ",", "\n", "prefix", "=", "'proposal_'", ")", "# N num_proposal 3", "\n", "\n", "base_xyz", "=", "proposal_center", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "base_size", "=", "proposal_size", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "# Transformer Decoder and Prediction", "\n", "if", "self", ".", "num_decoder_layers", ">", "0", ":", "\n", "            ", "query", "=", "self", ".", "decoder_query_proj", "(", "cluster_feature", ")", "\n", "key", "=", "self", ".", "decoder_key_proj", "(", "points_features", ")", "if", "self", ".", "decoder_key_proj", "is", "not", "None", "else", "None", "\n", "# Position Embedding for Cross-Attention", "\n", "", "if", "self", ".", "cross_position_embedding", "==", "'none'", ":", "\n", "            ", "key_pos", "=", "None", "\n", "", "elif", "self", ".", "cross_position_embedding", "in", "[", "'xyz_learned'", "]", ":", "\n", "            ", "key_pos", "=", "points_xyz", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"cross_position_embedding not supported {self.cross_position_embedding}\"", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "            ", "prefix", "=", "'last_'", "if", "(", "i", "==", "self", ".", "num_decoder_layers", "-", "1", ")", "else", "f'{i}head_'", "\n", "\n", "# Position Embedding for Self-Attention", "\n", "if", "self", ".", "self_position_embedding", "==", "'none'", ":", "\n", "                ", "query_pos", "=", "None", "\n", "", "elif", "self", ".", "self_position_embedding", "==", "'xyz_learned'", ":", "\n", "                ", "query_pos", "=", "base_xyz", "\n", "", "elif", "self", ".", "self_position_embedding", "==", "'loc_learned'", ":", "\n", "                ", "query_pos", "=", "torch", ".", "cat", "(", "[", "base_xyz", ",", "base_size", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "f\"self_position_embedding not supported {self.self_position_embedding}\"", ")", "\n", "\n", "# Transformer Decoder Layer", "\n", "", "query", "=", "self", ".", "decoder", "[", "i", "]", "(", "query", ",", "key", ",", "query_pos", ",", "key_pos", ")", "\n", "\n", "# local", "\n", "if", "prefix", "==", "'last_'", ":", "\n", "                ", "local_d_pred", "=", "self", ".", "decoder_netD", "(", "grad_reverse", "(", "query", ")", ")", "# Bx1x256", "\n", "local_d_pred", "=", "torch", ".", "sigmoid", "(", "local_d_pred", ")", "\n", "end_points", "[", "f'{prefix}local_d_pred'", "]", "=", "local_d_pred", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "\n", "# Prediction", "\n", "", "base_xyz", ",", "base_size", "=", "self", ".", "prediction_heads", "[", "i", "]", "(", "query", ",", "\n", "base_xyz", "=", "cluster_xyz", ",", "\n", "end_points", "=", "end_points", ",", "\n", "prefix", "=", "prefix", ")", "\n", "\n", "base_xyz", "=", "base_xyz", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "base_size", "=", "base_size", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "\n", "## domain prediction", "\n", "# global", "\n", "", "global_d_pred", "=", "self", ".", "global_netD1", "(", "grad_reverse", "(", "end_points", "[", "'seed_features'", "]", ")", ")", "# Bx128x1024", "\n", "global_d_pred", "=", "torch", ".", "mean", "(", "global_d_pred", ",", "dim", "=", "2", ")", "# Bx128", "\n", "global_d_pred", "=", "self", ".", "global_netD2", "(", "global_d_pred", ")", "# Bx2", "\n", "end_points", "[", "'global_d_pred'", "]", "=", "global_d_pred", "\n", "\n", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.GroupFreeDetector_DA_jitter.init_weights": [[576, 581], ["detector_DA.GroupFreeDetector_DA_jitter.decoder.parameters", "m.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "# initialize transformer", "\n", "        ", "for", "m", "in", "self", ".", "decoder", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "m", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.GroupFreeDetector_DA_jitter.init_bn_momentum": [[582, 586], ["detector_DA.GroupFreeDetector_DA_jitter.modules", "isinstance"], "methods", ["None"], ["", "", "", "def", "init_bn_momentum", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm1d", ")", ")", ":", "\n", "                ", "m", ".", "momentum", "=", "self", ".", "bn_momentum", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector_DA.grad_reverse": [[30, 32], ["GradReverse.apply"], "function", ["None"], ["", "", "def", "grad_reverse", "(", "x", ")", ":", "\n", "    ", "return", "GradReverse", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.modules.PointsObjClsModule.__init__": [[17, 31], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "seed_feature_dim", ")", ":", "\n", "        ", "\"\"\" object candidate point prediction from seed point features.\n\n        Args:\n            seed_feature_dim: int\n                number of channels of seed point features\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dim", "=", "seed_feature_dim", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "self", ".", "in_dim", ",", "1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_dim", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "self", ".", "in_dim", ",", "1", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "self", ".", "in_dim", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "self", ".", "in_dim", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.modules.PointsObjClsModule.forward": [[32, 45], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "modules.PointsObjClsModule.conv3", "modules.PointsObjClsModule.bn1", "modules.PointsObjClsModule.bn2", "modules.PointsObjClsModule.conv1", "modules.PointsObjClsModule.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "seed_features", ")", ":", "\n", "        ", "\"\"\" Forward pass.\n\n        Arguments:\n            seed_features: (batch_size, feature_dim, num_seed) Pytorch tensor\n        Returns:\n            logits: (batch_size, 1, num_seed)\n        \"\"\"", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "seed_features", ")", ")", ")", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "net", ")", ")", ")", "\n", "logits", "=", "self", ".", "conv3", "(", "net", ")", "# (batch_size, 1, num_seed)", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.modules.PositionEmbeddingLearned.__init__": [[52, 59], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "self", ",", "input_channel", ",", "num_pos_feats", "=", "288", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "position_embedding_head", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "input_channel", ",", "num_pos_feats", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "num_pos_feats", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "num_pos_feats", ",", "num_pos_feats", ",", "kernel_size", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.modules.PositionEmbeddingLearned.forward": [[60, 64], ["xyz.transpose().contiguous.transpose().contiguous.transpose().contiguous", "modules.PositionEmbeddingLearned.position_embedding_head", "xyz.transpose().contiguous.transpose().contiguous.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ")", ":", "\n", "        ", "xyz", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "position_embedding", "=", "self", ".", "position_embedding_head", "(", "xyz", ")", "\n", "return", "position_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.modules.FPSModule.__init__": [[67, 70], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_proposal", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.modules.FPSModule.forward": [[71, 84], ["pointnet2_utils.furthest_point_sample", "xyz.transpose().contiguous", "pointnet2_utils.gather_operation().transpose().contiguous", "pointnet2_utils.gather_operation().contiguous", "xyz.transpose", "pointnet2_utils.gather_operation().transpose", "pointnet2_utils.gather_operation", "pointnet2_utils.gather_operation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "features", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            xyz: (B,K,3)\n            features: (B,C,K)\n        \"\"\"", "\n", "# Farthest point sampling (FPS)", "\n", "sample_inds", "=", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "num_proposal", ")", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "xyz_flipped", ",", "sample_inds", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "new_features", "=", "pointnet2_utils", ".", "gather_operation", "(", "features", ",", "sample_inds", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "new_xyz", ",", "new_features", ",", "sample_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.modules.GeneralSamplingModule.__init__": [[87, 89], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.modules.GeneralSamplingModule.forward": [[90, 101], ["xyz.transpose().contiguous", "pointnet2_utils.gather_operation().transpose().contiguous", "pointnet2_utils.gather_operation().contiguous", "xyz.transpose", "pointnet2_utils.gather_operation().transpose", "pointnet2_utils.gather_operation", "pointnet2_utils.gather_operation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "features", ",", "sample_inds", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            xyz: (B,K,3)\n            features: (B,C,K)\n        \"\"\"", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "xyz_flipped", ",", "sample_inds", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "new_features", "=", "pointnet2_utils", ".", "gather_operation", "(", "features", ",", "sample_inds", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "new_xyz", ",", "new_features", ",", "sample_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.modules.PredictHead.__init__": [[104, 130], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.BatchNorm1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "seed_feat_dim", "=", "256", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "seed_feat_dim", "=", "seed_feat_dim", "\n", "\n", "# Object proposal/detection", "\n", "# Objectness scores (1), center residual (3),", "\n", "# heading class+residual (num_heading_bin*2), size class+residual(num_size_cluster*4)", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "seed_feat_dim", ",", "seed_feat_dim", ",", "1", ")", "\n", "self", ".", "bn1", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "seed_feat_dim", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "seed_feat_dim", ",", "seed_feat_dim", ",", "1", ")", "\n", "self", ".", "bn2", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "seed_feat_dim", ")", "\n", "\n", "self", ".", "objectness_scores_head", "=", "torch", ".", "nn", ".", "Conv1d", "(", "seed_feat_dim", ",", "1", ",", "1", ")", "\n", "self", ".", "center_residual_head", "=", "torch", ".", "nn", ".", "Conv1d", "(", "seed_feat_dim", ",", "3", ",", "1", ")", "\n", "self", ".", "heading_class_head", "=", "torch", ".", "nn", ".", "Conv1d", "(", "seed_feat_dim", ",", "num_heading_bin", ",", "1", ")", "\n", "self", ".", "heading_residual_head", "=", "torch", ".", "nn", ".", "Conv1d", "(", "seed_feat_dim", ",", "num_heading_bin", ",", "1", ")", "\n", "self", ".", "size_class_head", "=", "torch", ".", "nn", ".", "Conv1d", "(", "seed_feat_dim", ",", "num_size_cluster", ",", "1", ")", "\n", "self", ".", "size_residual_head", "=", "torch", ".", "nn", ".", "Conv1d", "(", "seed_feat_dim", ",", "num_size_cluster", "*", "3", ",", "1", ")", "\n", "self", ".", "sem_cls_scores_head", "=", "torch", ".", "nn", ".", "Conv1d", "(", "seed_feat_dim", ",", "self", ".", "num_class", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.modules.PredictHead.forward": [[131, 194], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "modules.PredictHead.objectness_scores_head().transpose", "modules.PredictHead.center_residual_head().transpose", "modules.PredictHead.heading_class_head().transpose", "modules.PredictHead.heading_residual_head().transpose", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "mean_size_arr.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modules.PredictHead.size_class_head().transpose", "modules.PredictHead.size_residual_head().transpose().view", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "pred_size_class.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "pred_size.squeeze_.squeeze_.squeeze_", "modules.PredictHead.sem_cls_scores_head().transpose", "modules.PredictHead.bn1", "modules.PredictHead.bn2", "modules.PredictHead.conv1", "modules.PredictHead.conv2", "modules.PredictHead.objectness_scores_head", "modules.PredictHead.center_residual_head", "modules.PredictHead.heading_class_head", "modules.PredictHead.heading_residual_head", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mean_size_arr.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "modules.PredictHead.size_class_head", "modules.PredictHead.size_residual_head().transpose", "pred_size_class.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze", "modules.PredictHead.sem_cls_scores_head", "modules.PredictHead.mean_size_arr.astype", "modules.PredictHead.size_residual_head", "pred_size_class.unsqueeze().unsqueeze().repeat.unsqueeze().unsqueeze().repeat.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "base_xyz", ",", "end_points", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            features: (B,C,num_proposal)\n        Returns:\n            scores: (B,num_proposal,2+3+NH*2+NS*4)\n        \"\"\"", "\n", "\n", "batch_size", "=", "features", ".", "shape", "[", "0", "]", "\n", "num_proposal", "=", "features", ".", "shape", "[", "-", "1", "]", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "features", ")", ")", ")", "\n", "net", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "net", ")", ")", ")", "\n", "# objectness", "\n", "objectness_scores", "=", "self", ".", "objectness_scores_head", "(", "net", ")", ".", "transpose", "(", "2", ",", "1", ")", "# (batch_size, num_proposal, 1)", "\n", "# center", "\n", "center_residual", "=", "self", ".", "center_residual_head", "(", "net", ")", ".", "transpose", "(", "2", ",", "1", ")", "# (batch_size, num_proposal, 3)", "\n", "center", "=", "base_xyz", "+", "center_residual", "# (batch_size, num_proposal, 3)", "\n", "\n", "# heading", "\n", "heading_scores", "=", "self", ".", "heading_class_head", "(", "net", ")", ".", "transpose", "(", "2", ",", "1", ")", "# (batch_size, num_proposal, num_heading_bin)", "\n", "# (batch_size, num_proposal, num_heading_bin) (should be -1 to 1)", "\n", "heading_residuals_normalized", "=", "self", ".", "heading_residual_head", "(", "net", ")", ".", "transpose", "(", "2", ",", "1", ")", "\n", "heading_residuals", "=", "heading_residuals_normalized", "*", "(", "np", ".", "pi", "/", "self", ".", "num_heading_bin", ")", "\n", "\n", "# size", "\n", "mean_size_arr", "=", "torch", ".", "from_numpy", "(", "self", ".", "mean_size_arr", ".", "astype", "(", "np", ".", "float32", ")", ")", ".", "cuda", "(", ")", "# (num_size_cluster, 3)", "\n", "mean_size_arr", "=", "mean_size_arr", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "# (1, 1, num_size_cluster, 3)", "\n", "size_scores", "=", "self", ".", "size_class_head", "(", "net", ")", ".", "transpose", "(", "2", ",", "1", ")", "# (batch_size, num_proposal, num_size_cluster)", "\n", "size_residuals_normalized", "=", "self", ".", "size_residual_head", "(", "net", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "view", "(", "\n", "[", "batch_size", ",", "num_proposal", ",", "self", ".", "num_size_cluster", ",", "3", "]", ")", "# (batch_size, num_proposal, num_size_cluster, 3)", "\n", "size_residuals", "=", "size_residuals_normalized", "*", "mean_size_arr", "# (batch_size, num_proposal, num_size_cluster, 3)", "\n", "size_recover", "=", "size_residuals", "+", "mean_size_arr", "# (batch_size, num_proposal, num_size_cluster, 3)", "\n", "pred_size_class", "=", "torch", ".", "argmax", "(", "size_scores", ",", "-", "1", ")", "# batch_size, num_proposal", "\n", "pred_size_class", "=", "pred_size_class", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "3", ")", "\n", "pred_size", "=", "torch", ".", "gather", "(", "size_recover", ",", "2", ",", "pred_size_class", ")", "# batch_size, num_proposal, 1, 3", "\n", "pred_size", "=", "pred_size", ".", "squeeze_", "(", "2", ")", "# batch_size, num_proposal, 3", "\n", "\n", "# class", "\n", "sem_cls_scores", "=", "self", ".", "sem_cls_scores_head", "(", "net", ")", ".", "transpose", "(", "2", ",", "1", ")", "# (batch_size, num_proposal, num_class)", "\n", "\n", "end_points", "[", "f'{prefix}base_xyz'", "]", "=", "base_xyz", "\n", "end_points", "[", "f'{prefix}objectness_scores'", "]", "=", "objectness_scores", "\n", "end_points", "[", "f'{prefix}center'", "]", "=", "center", "\n", "end_points", "[", "f'{prefix}heading_scores'", "]", "=", "heading_scores", "\n", "end_points", "[", "f'{prefix}heading_residuals_normalized'", "]", "=", "heading_residuals_normalized", "\n", "end_points", "[", "f'{prefix}heading_residuals'", "]", "=", "heading_residuals", "\n", "end_points", "[", "f'{prefix}size_scores'", "]", "=", "size_scores", "\n", "end_points", "[", "f'{prefix}size_residuals_normalized'", "]", "=", "size_residuals_normalized", "\n", "end_points", "[", "f'{prefix}size_residuals'", "]", "=", "size_residuals", "\n", "end_points", "[", "f'{prefix}pred_size'", "]", "=", "pred_size", "\n", "end_points", "[", "f'{prefix}sem_cls_scores'", "]", "=", "sem_cls_scores", "\n", "\n", "# # used to check bbox size", "\n", "# l = pred_size[:, :, 0]", "\n", "# h = pred_size[:, :, 1]", "\n", "# w = pred_size[:, :, 2]", "\n", "# x_corners = torch.stack([l / 2, l / 2, -l / 2, -l / 2, l / 2, l / 2, -l / 2, -l / 2], -1)  # N Pq 8", "\n", "# y_corners = torch.stack([h / 2, h / 2, h / 2, h / 2, -h / 2, -h / 2, -h / 2, -h / 2], -1)  # N Pq 8", "\n", "# z_corners = torch.stack([w / 2, -w / 2, -w / 2, w / 2, w / 2, -w / 2, -w / 2, w / 2], -1)  # N Pq 8", "\n", "# corners = torch.stack([x_corners, y_corners, z_corners], -1)  # N Pq 8 3", "\n", "# bbox = center.unsqueeze(2) + corners", "\n", "# end_points[f'{prefix}bbox_check'] = bbox", "\n", "return", "center", ",", "pred_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid": [[63, 67], ["numpy.exp"], "function", ["None"], ["", "def", "parse_predictions", "(", "end_points", ",", "config_dict", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector.GroupFreeDetector.__init__": [[36, 126], ["torch.Module.__init__", "backbone_module.Pointnet2Backbone", "modules.PredictHead", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "range", "detector.GroupFreeDetector.init_weights", "detector.GroupFreeDetector.init_bn_momentum", "modules.FPSModule", "detector.GroupFreeDetector.decoder.append", "detector.GroupFreeDetector.prediction_heads.append", "torch.SyncBatchNorm.convert_sync_batchnorm", "torch.SyncBatchNorm.convert_sync_batchnorm", "modules.PointsObjClsModule", "modules.GeneralSamplingModule", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "range", "NotImplementedError", "transformer.TransformerDecoderLayer", "modules.PredictHead", "range", "detector.GroupFreeDetector.decoder_self_posembeds.append", "torch.ModuleList", "torch.ModuleList", "range", "NotImplementedError", "range", "detector.GroupFreeDetector.decoder_cross_posembeds.append", "modules.PositionEmbeddingLearned", "detector.GroupFreeDetector.decoder_self_posembeds.append", "modules.PositionEmbeddingLearned", "modules.PositionEmbeddingLearned"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector.GroupFreeDetector.init_weights", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector.GroupFreeDetector.init_bn_momentum"], ["def", "__init__", "(", "self", ",", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "0", ",", "width", "=", "1", ",", "bn_momentum", "=", "0.1", ",", "sync_bn", "=", "False", ",", "num_proposal", "=", "128", ",", "sampling", "=", "'kps'", ",", "\n", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ",", "nhead", "=", "8", ",", "num_decoder_layers", "=", "6", ",", "dim_feedforward", "=", "2048", ",", "\n", "self_position_embedding", "=", "'xyz_learned'", ",", "cross_position_embedding", "=", "'xyz_learned'", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "num_heading_bin", "=", "num_heading_bin", "\n", "self", ".", "num_size_cluster", "=", "num_size_cluster", "\n", "self", ".", "mean_size_arr", "=", "mean_size_arr", "\n", "assert", "(", "mean_size_arr", ".", "shape", "[", "0", "]", "==", "self", ".", "num_size_cluster", ")", "\n", "self", ".", "input_feature_dim", "=", "input_feature_dim", "\n", "self", ".", "num_proposal", "=", "num_proposal", "\n", "self", ".", "bn_momentum", "=", "bn_momentum", "\n", "self", ".", "sync_bn", "=", "sync_bn", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "nhead", "=", "nhead", "\n", "self", ".", "sampling", "=", "sampling", "\n", "self", ".", "num_decoder_layers", "=", "num_decoder_layers", "\n", "self", ".", "dim_feedforward", "=", "dim_feedforward", "\n", "self", ".", "self_position_embedding", "=", "self_position_embedding", "\n", "self", ".", "cross_position_embedding", "=", "cross_position_embedding", "\n", "\n", "# Backbone point feature learning", "\n", "self", ".", "backbone_net", "=", "Pointnet2Backbone", "(", "input_feature_dim", "=", "self", ".", "input_feature_dim", ",", "width", "=", "self", ".", "width", ")", "\n", "\n", "if", "self", ".", "sampling", "==", "'fps'", ":", "\n", "            ", "self", ".", "fps_module", "=", "FPSModule", "(", "num_proposal", ")", "\n", "", "elif", "self", ".", "sampling", "==", "'kps'", ":", "\n", "            ", "self", ".", "points_obj_cls", "=", "PointsObjClsModule", "(", "288", ")", "\n", "self", ".", "gsample_module", "=", "GeneralSamplingModule", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "# Proposal", "\n", "", "self", ".", "proposal_head", "=", "PredictHead", "(", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "288", ")", "\n", "if", "self", ".", "num_decoder_layers", "<=", "0", ":", "\n", "# stop building if has no decoder layer", "\n", "            ", "return", "\n", "\n", "# Transformer Decoder Projection", "\n", "", "self", ".", "decoder_key_proj", "=", "nn", ".", "Conv1d", "(", "288", ",", "288", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "decoder_query_proj", "=", "nn", ".", "Conv1d", "(", "288", ",", "288", ",", "kernel_size", "=", "1", ")", "\n", "\n", "# Position Embedding for Self-Attention", "\n", "if", "self", ".", "self_position_embedding", "==", "'none'", ":", "\n", "            ", "self", ".", "decoder_self_posembeds", "=", "[", "None", "for", "i", "in", "range", "(", "num_decoder_layers", ")", "]", "\n", "", "elif", "self", ".", "self_position_embedding", "==", "'xyz_learned'", ":", "\n", "            ", "self", ".", "decoder_self_posembeds", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "                ", "self", ".", "decoder_self_posembeds", ".", "append", "(", "PositionEmbeddingLearned", "(", "3", ",", "288", ")", ")", "\n", "", "", "elif", "self", ".", "self_position_embedding", "==", "'loc_learned'", ":", "\n", "            ", "self", ".", "decoder_self_posembeds", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "                ", "self", ".", "decoder_self_posembeds", ".", "append", "(", "PositionEmbeddingLearned", "(", "6", ",", "288", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"self_position_embedding not supported {self.self_position_embedding}\"", ")", "\n", "\n", "# Position Embedding for Cross-Attention", "\n", "", "if", "self", ".", "cross_position_embedding", "==", "'none'", ":", "\n", "            ", "self", ".", "decoder_cross_posembeds", "=", "[", "None", "for", "i", "in", "range", "(", "num_decoder_layers", ")", "]", "\n", "", "elif", "self", ".", "cross_position_embedding", "==", "'xyz_learned'", ":", "\n", "            ", "self", ".", "decoder_cross_posembeds", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "                ", "self", ".", "decoder_cross_posembeds", ".", "append", "(", "PositionEmbeddingLearned", "(", "3", ",", "288", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"cross_position_embedding not supported {self.cross_position_embedding}\"", ")", "\n", "\n", "# Transformer decoder layers", "\n", "", "self", ".", "decoder", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "            ", "self", ".", "decoder", ".", "append", "(", "\n", "TransformerDecoderLayer", "(", "\n", "288", ",", "nhead", ",", "dim_feedforward", ",", "dropout", ",", "activation", ",", "\n", "self_posembed", "=", "self", ".", "decoder_self_posembeds", "[", "i", "]", ",", "\n", "cross_posembed", "=", "self", ".", "decoder_cross_posembeds", "[", "i", "]", ",", "\n", ")", ")", "\n", "\n", "# Prediction Head", "\n", "", "self", ".", "prediction_heads", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "            ", "self", ".", "prediction_heads", ".", "append", "(", "PredictHead", "(", "num_class", ",", "num_heading_bin", ",", "num_size_cluster", ",", "\n", "mean_size_arr", ",", "num_proposal", ",", "288", ")", ")", "\n", "\n", "# Init", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "init_bn_momentum", "(", ")", "\n", "if", "self", ".", "sync_bn", ":", "\n", "            ", "nn", ".", "SyncBatchNorm", ".", "convert_sync_batchnorm", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector.GroupFreeDetector.forward": [[127, 222], ["detector.GroupFreeDetector.backbone_net", "detector.GroupFreeDetector.proposal_head", "proposal_center.detach().clone", "proposal_size.detach().clone", "range", "detector.GroupFreeDetector.fps_module", "detector.GroupFreeDetector.decoder_query_proj", "base_xyz.detach().clone.detach().clone.detach().clone", "base_size.detach().clone.detach().clone.detach().clone", "detector.GroupFreeDetector.points_obj_cls", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "torch.sigmoid().squeeze", "[].int", "detector.GroupFreeDetector.gsample_module", "proposal_center.detach", "proposal_size.detach", "detector.GroupFreeDetector.decoder_key_proj", "NotImplementedError", "base_xyz.detach().clone.detach().clone.detach", "base_size.detach().clone.detach().clone.detach", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NotImplementedError", "torch.topk", "torch.topk", "torch.topk", "torch.topk"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\" Forward pass of the network\n\n        Args:\n            inputs: dict\n                {point_clouds}\n\n                point_clouds: Variable(torch.cuda.FloatTensor)\n                    (B, N, 3 + input_channels) tensor\n                    Point cloud to run predicts on\n                    Each point in the point-cloud MUST\n                    be formated as (x, y, z, features...)\n        Returns:\n            end_points: dict\n        \"\"\"", "\n", "end_points", "=", "{", "}", "\n", "\n", "end_points", "=", "self", ".", "backbone_net", "(", "inputs", "[", "'point_clouds'", "]", ",", "end_points", ")", "\n", "\n", "# Query Points Generation", "\n", "points_xyz", "=", "end_points", "[", "'fp2_xyz'", "]", "\n", "points_features", "=", "end_points", "[", "'fp2_features'", "]", "\n", "xyz", "=", "end_points", "[", "'fp2_xyz'", "]", "\n", "features", "=", "end_points", "[", "'fp2_features'", "]", "\n", "end_points", "[", "'seed_inds'", "]", "=", "end_points", "[", "'fp2_inds'", "]", "\n", "end_points", "[", "'seed_xyz'", "]", "=", "xyz", "\n", "end_points", "[", "'seed_features'", "]", "=", "features", "\n", "if", "self", ".", "sampling", "==", "'fps'", ":", "\n", "            ", "xyz", ",", "features", ",", "sample_inds", "=", "self", ".", "fps_module", "(", "xyz", ",", "features", ")", "\n", "cluster_feature", "=", "features", "\n", "cluster_xyz", "=", "xyz", "\n", "end_points", "[", "'query_points_xyz'", "]", "=", "xyz", "# (batch_size, num_proposal, 3)", "\n", "end_points", "[", "'query_points_feature'", "]", "=", "features", "# (batch_size, C, num_proposal)", "\n", "end_points", "[", "'query_points_sample_inds'", "]", "=", "sample_inds", "# (bsz, num_proposal) # should be 0,1,...,num_proposal", "\n", "", "elif", "self", ".", "sampling", "==", "'kps'", ":", "\n", "            ", "points_obj_cls_logits", "=", "self", ".", "points_obj_cls", "(", "features", ")", "# (batch_size, 1, num_seed)", "\n", "end_points", "[", "'seeds_obj_cls_logits'", "]", "=", "points_obj_cls_logits", "\n", "points_obj_cls_scores", "=", "torch", ".", "sigmoid", "(", "points_obj_cls_logits", ")", ".", "squeeze", "(", "1", ")", "\n", "sample_inds", "=", "torch", ".", "topk", "(", "points_obj_cls_scores", ",", "self", ".", "num_proposal", ")", "[", "1", "]", ".", "int", "(", ")", "\n", "xyz", ",", "features", ",", "sample_inds", "=", "self", ".", "gsample_module", "(", "xyz", ",", "features", ",", "sample_inds", ")", "\n", "cluster_feature", "=", "features", "\n", "cluster_xyz", "=", "xyz", "\n", "end_points", "[", "'query_points_xyz'", "]", "=", "xyz", "# (batch_size, num_proposal, 3)", "\n", "end_points", "[", "'query_points_feature'", "]", "=", "features", "# (batch_size, C, num_proposal)", "\n", "end_points", "[", "'query_points_sample_inds'", "]", "=", "sample_inds", "# (bsz, num_proposal) # should be 0,1,...,num_proposal", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Proposal", "\n", "", "proposal_center", ",", "proposal_size", "=", "self", ".", "proposal_head", "(", "cluster_feature", ",", "\n", "base_xyz", "=", "cluster_xyz", ",", "\n", "end_points", "=", "end_points", ",", "\n", "prefix", "=", "'proposal_'", ")", "# N num_proposal 3", "\n", "\n", "base_xyz", "=", "proposal_center", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "base_size", "=", "proposal_size", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "# Transformer Decoder and Prediction", "\n", "if", "self", ".", "num_decoder_layers", ">", "0", ":", "\n", "            ", "query", "=", "self", ".", "decoder_query_proj", "(", "cluster_feature", ")", "\n", "key", "=", "self", ".", "decoder_key_proj", "(", "points_features", ")", "if", "self", ".", "decoder_key_proj", "is", "not", "None", "else", "None", "\n", "# Position Embedding for Cross-Attention", "\n", "", "if", "self", ".", "cross_position_embedding", "==", "'none'", ":", "\n", "            ", "key_pos", "=", "None", "\n", "", "elif", "self", ".", "cross_position_embedding", "in", "[", "'xyz_learned'", "]", ":", "\n", "            ", "key_pos", "=", "points_xyz", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"cross_position_embedding not supported {self.cross_position_embedding}\"", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_decoder_layers", ")", ":", "\n", "            ", "prefix", "=", "'last_'", "if", "(", "i", "==", "self", ".", "num_decoder_layers", "-", "1", ")", "else", "f'{i}head_'", "\n", "\n", "# Position Embedding for Self-Attention", "\n", "if", "self", ".", "self_position_embedding", "==", "'none'", ":", "\n", "                ", "query_pos", "=", "None", "\n", "", "elif", "self", ".", "self_position_embedding", "==", "'xyz_learned'", ":", "\n", "                ", "query_pos", "=", "base_xyz", "\n", "", "elif", "self", ".", "self_position_embedding", "==", "'loc_learned'", ":", "\n", "                ", "query_pos", "=", "torch", ".", "cat", "(", "[", "base_xyz", ",", "base_size", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "f\"self_position_embedding not supported {self.self_position_embedding}\"", ")", "\n", "\n", "# Transformer Decoder Layer", "\n", "", "query", "=", "self", ".", "decoder", "[", "i", "]", "(", "query", ",", "key", ",", "query_pos", ",", "key_pos", ")", "\n", "\n", "# Prediction", "\n", "base_xyz", ",", "base_size", "=", "self", ".", "prediction_heads", "[", "i", "]", "(", "query", ",", "\n", "base_xyz", "=", "cluster_xyz", ",", "\n", "end_points", "=", "end_points", ",", "\n", "prefix", "=", "prefix", ")", "\n", "\n", "base_xyz", "=", "base_xyz", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "base_size", "=", "base_size", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "\n", "", "return", "end_points", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector.GroupFreeDetector.init_weights": [[223, 228], ["detector.GroupFreeDetector.decoder.parameters", "m.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "# initialize transformer", "\n", "        ", "for", "m", "in", "self", ".", "decoder", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "m", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.detector.GroupFreeDetector.init_bn_momentum": [[229, 233], ["detector.GroupFreeDetector.modules", "isinstance"], "methods", ["None"], ["", "", "", "def", "init_bn_momentum", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm1d", ")", ")", ":", "\n", "                ", "m", ".", "momentum", "=", "self", ".", "bn_momentum", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.multi_head_attention.MultiheadAttention.__init__": [[41, 76], ["torch.nn.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.Linear", "multi_head_attention.MultiheadAttention._reset_parameters", "torch.empty", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "multi_head_attention.MultiheadAttention.register_parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.empty", "torch.empty", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.multi_head_attention.MultiheadAttention._reset_parameters"], ["def", "__init__", "(", "self", ",", "embed_dim", ",", "num_heads", ",", "dropout", "=", "0.", ",", "bias", "=", "True", ",", "add_bias_kv", "=", "False", ",", "add_zero_attn", "=", "False", ",", "kdim", "=", "None", ",", "\n", "vdim", "=", "None", ")", ":", "\n", "        ", "super", "(", "MultiheadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "kdim", "=", "kdim", "if", "kdim", "is", "not", "None", "else", "embed_dim", "\n", "self", ".", "vdim", "=", "vdim", "if", "vdim", "is", "not", "None", "else", "embed_dim", "\n", "self", ".", "_qkv_same_embed_dim", "=", "self", ".", "kdim", "==", "embed_dim", "and", "self", ".", "vdim", "==", "embed_dim", "\n", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "assert", "self", ".", "head_dim", "*", "num_heads", "==", "self", ".", "embed_dim", ",", "\"embed_dim must be divisible by num_heads\"", "\n", "\n", "self", ".", "in_proj_weight", "=", "Parameter", "(", "torch", ".", "empty", "(", "3", "*", "embed_dim", ",", "embed_dim", ")", ")", "\n", "\n", "if", "self", ".", "_qkv_same_embed_dim", "is", "False", ":", "\n", "            ", "self", ".", "q_proj_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "embed_dim", ",", "embed_dim", ")", ")", "\n", "self", ".", "k_proj_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "embed_dim", ",", "self", ".", "kdim", ")", ")", "\n", "self", ".", "v_proj_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "embed_dim", ",", "self", ".", "vdim", ")", ")", "\n", "\n", "", "if", "bias", ":", "\n", "            ", "self", ".", "in_proj_bias", "=", "Parameter", "(", "torch", ".", "empty", "(", "3", "*", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'in_proj_bias'", ",", "None", ")", "\n", "", "self", ".", "out_proj", "=", "Linear", "(", "embed_dim", ",", "embed_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "if", "add_bias_kv", ":", "\n", "            ", "self", ".", "bias_k", "=", "Parameter", "(", "torch", ".", "empty", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "bias_v", "=", "Parameter", "(", "torch", ".", "empty", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_k", "=", "self", ".", "bias_v", "=", "None", "\n", "\n", "", "self", ".", "add_zero_attn", "=", "add_zero_attn", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.multi_head_attention.MultiheadAttention._reset_parameters": [[77, 92], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_qkv_same_embed_dim", ":", "\n", "            ", "xavier_uniform_", "(", "self", ".", "in_proj_weight", ")", "\n", "", "else", ":", "\n", "            ", "xavier_uniform_", "(", "self", ".", "q_proj_weight", ")", "\n", "xavier_uniform_", "(", "self", ".", "k_proj_weight", ")", "\n", "xavier_uniform_", "(", "self", ".", "v_proj_weight", ")", "\n", "\n", "", "if", "self", ".", "in_proj_bias", "is", "not", "None", ":", "\n", "            ", "constant_", "(", "self", ".", "in_proj_bias", ",", "0.", ")", "\n", "constant_", "(", "self", ".", "out_proj", ".", "bias", ",", "0.", ")", "\n", "", "if", "self", ".", "bias_k", "is", "not", "None", ":", "\n", "            ", "xavier_normal_", "(", "self", ".", "bias_k", ")", "\n", "", "if", "self", ".", "bias_v", "is", "not", "None", ":", "\n", "            ", "xavier_normal_", "(", "self", ".", "bias_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.multi_head_attention.MultiheadAttention.forward": [[93, 147], ["hasattr", "multi_head_attention.multi_head_attention_forward", "multi_head_attention.multi_head_attention_forward", "hasattr", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.multi_head_attention.multi_head_attention_forward", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.multi_head_attention.multi_head_attention_forward"], ["", "", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "key_padding_mask", "=", "None", ",", "need_weights", "=", "True", ",", "attn_mask", "=", "None", ")", ":", "\n", "        ", "r\"\"\"\n    Args:\n        query, key, value: map a query and a set of key-value pairs to an output.\n            See \"Attention Is All You Need\" for more details.\n        key_padding_mask: if provided, specified padding elements in the key will\n            be ignored by the attention. This is an binary mask. When the value is True,\n            the corresponding value on the attention layer will be filled with -inf.\n        need_weights: output attn_output_weights.\n        attn_mask: mask that prevents attention to certain positions. This is an additive mask\n            (i.e. the values will be added to the attention layer).\n\n    Shape:\n        - Inputs:\n        - query: :math:`(L, N, E)` where L is the target sequence length, N is the batch size, E is\n          the embedding dimension.\n        - key: :math:`(S, N, E)`, where S is the source sequence length, N is the batch size, E is\n          the embedding dimension.\n        - value: :math:`(S, N, E)` where S is the source sequence length, N is the batch size, E is\n          the embedding dimension.\n        - key_padding_mask: :math:`(N, S)`, ByteTensor, where N is the batch size, S is the source sequence length.\n        - attn_mask: :math:`(L, S)` where L is the target sequence length, S is the source sequence length.\n\n        - Outputs:\n        - attn_output: :math:`(L, N, E)` where L is the target sequence length, N is the batch size,\n          E is the embedding dimension.\n        - attn_output_weights: :math:`(N, L, S)` where N is the batch size,\n          L is the target sequence length, S is the source sequence length.\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "'_qkv_same_embed_dim'", ")", "and", "self", ".", "_qkv_same_embed_dim", "is", "False", ":", "\n", "            ", "return", "multi_head_attention_forward", "(", "\n", "query", ",", "key", ",", "value", ",", "self", ".", "embed_dim", ",", "self", ".", "num_heads", ",", "\n", "self", ".", "in_proj_weight", ",", "self", ".", "in_proj_bias", ",", "\n", "self", ".", "bias_k", ",", "self", ".", "bias_v", ",", "self", ".", "add_zero_attn", ",", "\n", "self", ".", "dropout", ",", "self", ".", "out_proj", ".", "weight", ",", "self", ".", "out_proj", ".", "bias", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "need_weights", "=", "need_weights", ",", "\n", "attn_mask", "=", "attn_mask", ",", "use_separate_proj_weight", "=", "True", ",", "\n", "q_proj_weight", "=", "self", ".", "q_proj_weight", ",", "k_proj_weight", "=", "self", ".", "k_proj_weight", ",", "\n", "v_proj_weight", "=", "self", ".", "v_proj_weight", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'_qkv_same_embed_dim'", ")", ":", "\n", "                ", "warnings", ".", "warn", "(", "'A new version of MultiheadAttention module has been implemented. \\\n                    Please re-train your model with the new module'", ",", "\n", "UserWarning", ")", "\n", "\n", "", "return", "multi_head_attention_forward", "(", "\n", "query", ",", "key", ",", "value", ",", "self", ".", "embed_dim", ",", "self", ".", "num_heads", ",", "\n", "self", ".", "in_proj_weight", ",", "self", ".", "in_proj_bias", ",", "\n", "self", ".", "bias_k", ",", "self", ".", "bias_v", ",", "self", ".", "add_zero_attn", ",", "\n", "self", ".", "dropout", ",", "self", ".", "out_proj", ".", "weight", ",", "self", ".", "out_proj", ".", "bias", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "need_weights", "=", "need_weights", ",", "\n", "attn_mask", "=", "attn_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.multi_head_attention.multi_head_attention_forward": [[149, 399], ["torch.equal", "query.size", "F.linear.contiguous().view().transpose", "F.linear.size", "torch.bmm", "torch.nn.functional.softmax", "torch.nn.functional.dropout", "torch.bmm", "F.linear.transpose().contiguous().view", "torch.nn.functional.linear", "torch.equal", "torch.equal", "list", "key.size", "value.size", "float", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional.size", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional.size", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional.size", "F.linear.contiguous().view().transpose", "F.linear.contiguous().view().transpose", "torch.cat", "torch.cat", "F.linear.transpose", "list", "torch.cat.unsqueeze", "attn_output_weights.view.view", "attn_output_weights.view.masked_fill", "attn_output_weights.view.view", "list", "attn_output_weights.view.view", "query.size", "torch.nn.functional.linear().chunk", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.cat", "torch.cat", "F.linear.contiguous().view", "static_k.size", "static_k.size", "static_v.size", "static_v.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "attn_output_weights.view.size", "torch.cat.unsqueeze().unsqueeze", "float", "F.linear.size", "F.linear.transpose().contiguous", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.linear", "query.size", "key.size", "value.size", "torch.cat", "torch.cat", "F.linear.contiguous().view", "F.linear.contiguous().view", "torch.zeros", "torch.zeros", "attn_output_weights.view.sum", "torch.nn.functional.linear", "torch.nn.functional.linear().chunk", "bias_k.repeat", "bias_v.repeat", "F.linear.contiguous", "torch.zeros", "torch.zeros", "torch.cat.unsqueeze", "F.linear.transpose", "torch.zeros", "torch.zeros", "F.linear.contiguous", "F.linear.contiguous", "torch.nn.functional.linear", "F.linear.size", "F.linear.size", "F.linear.size", "F.linear.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.dump_helper.softmax"], ["", "", "", "def", "multi_head_attention_forward", "(", "query", ",", "\n", "key", ",", "\n", "value", ",", "\n", "embed_dim_to_check", ",", "# type: int", "\n", "num_heads", ",", "# type: int", "\n", "in_proj_weight", ",", "\n", "in_proj_bias", ",", "\n", "bias_k", ",", "\n", "bias_v", ",", "\n", "add_zero_attn", ",", "# type: bool", "\n", "dropout_p", ",", "# type: float", "\n", "out_proj_weight", ",", "\n", "out_proj_bias", ",", "\n", "training", "=", "True", ",", "# type: bool", "\n", "key_padding_mask", "=", "None", ",", "\n", "need_weights", "=", "True", ",", "# type: bool", "\n", "attn_mask", "=", "None", ",", "\n", "use_separate_proj_weight", "=", "False", ",", "# type: bool", "\n", "q_proj_weight", "=", "None", ",", "\n", "k_proj_weight", "=", "None", ",", "\n", "v_proj_weight", "=", "None", ",", "\n", "static_k", "=", "None", ",", "\n", "static_v", "=", "None", ",", "\n", ")", ":", "\n", "    ", "r\"\"\"\n    Args:\n        query, key, value: map a query and a set of key-value pairs to an output.\n            See \"Attention Is All You Need\" for more details.\n        embed_dim_to_check: total dimension of the model.\n        num_heads: parallel attention heads.\n        in_proj_weight, in_proj_bias: input projection weight and bias.\n        bias_k, bias_v: bias of the key and value sequences to be added at dim=0.\n        add_zero_attn: add a new batch of zeros to the key and\n                       value sequences at dim=1.\n        dropout_p: probability of an element to be zeroed.\n        out_proj_weight, out_proj_bias: the output projection weight and bias.\n        training: apply dropout if is ``True``.\n        key_padding_mask: if provided, specified padding elements in the key will\n            be ignored by the attention. This is an binary mask. When the value is True,\n            the corresponding value on the attention layer will be filled with -inf.\n        need_weights: output attn_output_weights.\n        attn_mask: mask that prevents attention to certain positions. This is an additive mask\n            (i.e. the values will be added to the attention layer).\n        use_separate_proj_weight: the function accept the proj. weights for query, key,\n            and value in differnt forms. If false, in_proj_weight will be used, which is\n            a combination of q_proj_weight, k_proj_weight, v_proj_weight.\n        q_proj_weight, k_proj_weight, v_proj_weight, in_proj_bias: input projection weight and bias.\n        static_k, static_v: static key and value used for attention operators.\n\n    Shape:\n        Inputs:\n        - query: :math:`(L, N, E)` where L is the target sequence length, N is the batch size, E is\n          the embedding dimension.\n        - key: :math:`(S, N, E)`, where S is the source sequence length, N is the batch size, E is\n          the embedding dimension.\n        - value: :math:`(S, N, E)` where S is the source sequence length, N is the batch size, E is\n          the embedding dimension.\n        - key_padding_mask: :math:`(N, S)`, ByteTensor, where N is the batch size, S is the source sequence length.\n        - attn_mask: :math:`(L, S)` where L is the target sequence length, S is the source sequence length.\n        - static_k: :math:`(N*num_heads, S, E/num_heads)`, where S is the source sequence length,\n          N is the batch size, E is the embedding dimension. E/num_heads is the head dimension.\n        - static_v: :math:`(N*num_heads, S, E/num_heads)`, where S is the source sequence length,\n          N is the batch size, E is the embedding dimension. E/num_heads is the head dimension.\n        Outputs:\n        - attn_output: :math:`(L, N, E)` where L is the target sequence length, N is the batch size,\n          E is the embedding dimension.\n        - attn_output_weights: :math:`(N, L, S)` where N is the batch size,\n          L is the target sequence length, S is the source sequence length.\n    \"\"\"", "\n", "\n", "qkv_same", "=", "torch", ".", "equal", "(", "query", ",", "key", ")", "and", "torch", ".", "equal", "(", "key", ",", "value", ")", "\n", "kv_same", "=", "torch", ".", "equal", "(", "key", ",", "value", ")", "\n", "\n", "tgt_len", ",", "bsz", ",", "embed_dim", "=", "query", ".", "size", "(", ")", "\n", "assert", "embed_dim", "==", "embed_dim_to_check", "\n", "assert", "list", "(", "query", ".", "size", "(", ")", ")", "==", "[", "tgt_len", ",", "bsz", ",", "embed_dim", "]", "\n", "assert", "key", ".", "size", "(", ")", "==", "value", ".", "size", "(", ")", "\n", "\n", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "assert", "head_dim", "*", "num_heads", "==", "embed_dim", ",", "\"embed_dim must be divisible by num_heads\"", "\n", "scaling", "=", "float", "(", "head_dim", ")", "**", "-", "0.5", "\n", "\n", "if", "use_separate_proj_weight", "is", "not", "True", ":", "\n", "        ", "if", "qkv_same", ":", "\n", "# self-attention", "\n", "            ", "q", ",", "k", ",", "v", "=", "F", ".", "linear", "(", "query", ",", "in_proj_weight", ",", "in_proj_bias", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "elif", "kv_same", ":", "\n", "# encoder-decoder attention", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "            ", "_b", "=", "in_proj_bias", "\n", "_start", "=", "0", "\n", "_end", "=", "embed_dim", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "q", "=", "F", ".", "linear", "(", "query", ",", "_w", ",", "_b", ")", "\n", "\n", "if", "key", "is", "None", ":", "\n", "                ", "assert", "value", "is", "None", "\n", "k", "=", "None", "\n", "v", "=", "None", "\n", "", "else", ":", "\n", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "                ", "_b", "=", "in_proj_bias", "\n", "_start", "=", "embed_dim", "\n", "_end", "=", "None", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                    ", "_b", "=", "_b", "[", "_start", ":", "]", "\n", "", "k", ",", "v", "=", "F", ".", "linear", "(", "key", ",", "_w", ",", "_b", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "            ", "_b", "=", "in_proj_bias", "\n", "_start", "=", "0", "\n", "_end", "=", "embed_dim", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "q", "=", "F", ".", "linear", "(", "query", ",", "_w", ",", "_b", ")", "\n", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "_b", "=", "in_proj_bias", "\n", "_start", "=", "embed_dim", "\n", "_end", "=", "embed_dim", "*", "2", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "k", "=", "F", ".", "linear", "(", "key", ",", "_w", ",", "_b", ")", "\n", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "_b", "=", "in_proj_bias", "\n", "_start", "=", "embed_dim", "*", "2", "\n", "_end", "=", "None", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "]", "\n", "", "v", "=", "F", ".", "linear", "(", "value", ",", "_w", ",", "_b", ")", "\n", "", "", "else", ":", "\n", "        ", "q_proj_weight_non_opt", "=", "torch", ".", "jit", ".", "_unwrap_optional", "(", "q_proj_weight", ")", "\n", "len1", ",", "len2", "=", "q_proj_weight_non_opt", ".", "size", "(", ")", "\n", "assert", "len1", "==", "embed_dim", "and", "len2", "==", "query", ".", "size", "(", "-", "1", ")", "\n", "\n", "k_proj_weight_non_opt", "=", "torch", ".", "jit", ".", "_unwrap_optional", "(", "k_proj_weight", ")", "\n", "len1", ",", "len2", "=", "k_proj_weight_non_opt", ".", "size", "(", ")", "\n", "assert", "len1", "==", "embed_dim", "and", "len2", "==", "key", ".", "size", "(", "-", "1", ")", "\n", "\n", "v_proj_weight_non_opt", "=", "torch", ".", "jit", ".", "_unwrap_optional", "(", "v_proj_weight", ")", "\n", "len1", ",", "len2", "=", "v_proj_weight_non_opt", ".", "size", "(", ")", "\n", "assert", "len1", "==", "embed_dim", "and", "len2", "==", "value", ".", "size", "(", "-", "1", ")", "\n", "\n", "if", "in_proj_bias", "is", "not", "None", ":", "\n", "            ", "q", "=", "F", ".", "linear", "(", "query", ",", "q_proj_weight_non_opt", ",", "in_proj_bias", "[", "0", ":", "embed_dim", "]", ")", "\n", "k", "=", "F", ".", "linear", "(", "key", ",", "k_proj_weight_non_opt", ",", "in_proj_bias", "[", "embed_dim", ":", "(", "embed_dim", "*", "2", ")", "]", ")", "\n", "v", "=", "F", ".", "linear", "(", "value", ",", "v_proj_weight_non_opt", ",", "in_proj_bias", "[", "(", "embed_dim", "*", "2", ")", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "q", "=", "F", ".", "linear", "(", "query", ",", "q_proj_weight_non_opt", ",", "in_proj_bias", ")", "\n", "k", "=", "F", ".", "linear", "(", "key", ",", "k_proj_weight_non_opt", ",", "in_proj_bias", ")", "\n", "v", "=", "F", ".", "linear", "(", "value", ",", "v_proj_weight_non_opt", ",", "in_proj_bias", ")", "\n", "", "", "q", "=", "q", "*", "scaling", "\n", "\n", "if", "bias_k", "is", "not", "None", "and", "bias_v", "is", "not", "None", ":", "\n", "        ", "if", "static_k", "is", "None", "and", "static_v", "is", "None", ":", "\n", "            ", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "bias_k", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "bias_v", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "[", "attn_mask", ",", "\n", "torch", ".", "zeros", "(", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", ",", "\n", "dtype", "=", "attn_mask", ".", "dtype", ",", "\n", "device", "=", "attn_mask", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                ", "key_padding_mask", "=", "torch", ".", "cat", "(", "\n", "[", "key_padding_mask", ",", "torch", ".", "zeros", "(", "(", "key_padding_mask", ".", "size", "(", "0", ")", ",", "1", ")", ",", "\n", "dtype", "=", "key_padding_mask", ".", "dtype", ",", "\n", "device", "=", "key_padding_mask", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "static_k", "is", "None", ",", "\"bias cannot be added to static key.\"", "\n", "assert", "static_v", "is", "None", ",", "\"bias cannot be added to static value.\"", "\n", "", "", "else", ":", "\n", "        ", "assert", "bias_k", "is", "None", "\n", "assert", "bias_v", "is", "None", "\n", "\n", "", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "k", "is", "not", "None", ":", "\n", "        ", "k", "=", "k", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "if", "v", "is", "not", "None", ":", "\n", "        ", "v", "=", "v", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "if", "static_k", "is", "not", "None", ":", "\n", "        ", "assert", "static_k", ".", "size", "(", "0", ")", "==", "bsz", "*", "num_heads", "\n", "assert", "static_k", ".", "size", "(", "2", ")", "==", "head_dim", "\n", "k", "=", "static_k", "\n", "\n", "", "if", "static_v", "is", "not", "None", ":", "\n", "        ", "assert", "static_v", ".", "size", "(", "0", ")", "==", "bsz", "*", "num_heads", "\n", "assert", "static_v", ".", "size", "(", "2", ")", "==", "head_dim", "\n", "v", "=", "static_v", "\n", "\n", "", "src_len", "=", "k", ".", "size", "(", "1", ")", "\n", "\n", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "        ", "assert", "key_padding_mask", ".", "size", "(", "0", ")", "==", "bsz", "\n", "assert", "key_padding_mask", ".", "size", "(", "1", ")", "==", "src_len", "\n", "\n", "", "if", "add_zero_attn", ":", "\n", "        ", "src_len", "+=", "1", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "torch", ".", "zeros", "(", "(", "k", ".", "size", "(", "0", ")", ",", "1", ")", "+", "k", ".", "size", "(", ")", "[", "2", ":", "]", ",", "dtype", "=", "k", ".", "dtype", ",", "device", "=", "k", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "torch", ".", "zeros", "(", "(", "v", ".", "size", "(", "0", ")", ",", "1", ")", "+", "v", ".", "size", "(", ")", "[", "2", ":", "]", ",", "dtype", "=", "v", ".", "dtype", ",", "device", "=", "v", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "torch", ".", "cat", "(", "[", "attn_mask", ",", "torch", ".", "zeros", "(", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", ",", "\n", "dtype", "=", "attn_mask", ".", "dtype", ",", "\n", "device", "=", "attn_mask", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "key_padding_mask", "=", "torch", ".", "cat", "(", "\n", "[", "key_padding_mask", ",", "torch", ".", "zeros", "(", "(", "key_padding_mask", ".", "size", "(", "0", ")", ",", "1", ")", ",", "\n", "dtype", "=", "key_padding_mask", ".", "dtype", ",", "\n", "device", "=", "key_padding_mask", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "attn_output_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "assert", "list", "(", "attn_output_weights", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "num_heads", ",", "tgt_len", ",", "src_len", "]", "\n", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "        ", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "0", ")", "\n", "attn_output_weights", "+=", "attn_mask", "\n", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "        ", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "bsz", ",", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "attn_output_weights", "=", "attn_output_weights", ".", "masked_fill", "(", "\n", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ",", "\n", "float", "(", "'-inf'", ")", ",", "\n", ")", "\n", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "bsz", "*", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "\n", "", "attn_output_weights", "=", "F", ".", "softmax", "(", "\n", "attn_output_weights", ",", "dim", "=", "-", "1", ")", "\n", "attn_output_weights", "=", "F", ".", "dropout", "(", "attn_output_weights", ",", "p", "=", "dropout_p", ",", "training", "=", "training", ")", "\n", "\n", "attn_output", "=", "torch", ".", "bmm", "(", "attn_output_weights", ",", "v", ")", "\n", "assert", "list", "(", "attn_output", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "num_heads", ",", "tgt_len", ",", "head_dim", "]", "\n", "attn_output", "=", "attn_output", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "embed_dim", ")", "\n", "attn_output", "=", "F", ".", "linear", "(", "attn_output", ",", "out_proj_weight", ",", "out_proj_bias", ")", "\n", "\n", "if", "need_weights", ":", "\n", "# average attention weights over heads", "\n", "        ", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "bsz", ",", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "return", "attn_output", ",", "attn_output_weights", ".", "sum", "(", "dim", "=", "1", ")", "/", "num_heads", "\n", "", "else", ":", "\n", "        ", "return", "attn_output", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_points_obj_cls_loss_hard_topk": [[17, 79], ["end_points[].long", "torch.gather", "torch.gather", "torch.gather", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to.scatter_", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "euclidean_dist1.transpose().contiguous.transpose().contiguous", "topk_inds.view().contiguous.long", "topk_inds.view().contiguous.view().contiguous", "torch.arange().unsqueeze().repeat().to", "torch.arange().unsqueeze().repeat().to", "torch.arange().unsqueeze().repeat().to", "torch.stack().view().contiguous", "torch.stack().view().contiguous", "torch.stack().view().contiguous", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.gather", "torch.gather", "torch.gather", "losses.SigmoidFocalClassificationLoss", "cls_weights.sum().float", "torch.clamp", "torch.clamp", "torch.clamp", "losses.SigmoidFocalClassificationLoss.", "padding_array.unsqueeze.unsqueeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather.unsqueeze", "seed_xyz.unsqueeze", "gt_center.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "float", "seeds_obj_cls_logits.view", "torch.zeros().to.unsqueeze", "criterion.sum", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.zeros", "torch.zeros", "torch.zeros", "gt_size.unsqueeze", "euclidean_dist1.transpose().contiguous.transpose", "topk_inds.view().contiguous.view", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().to.float", "cls_weights.sum", "torch.topk", "torch.topk", "torch.topk", "torch.arange", "torch.arange", "torch.arange", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.stack", "torch.stack", "torch.stack", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["from", "nn_distance", "import", "nn_distance", ",", "huber_loss", "\n", "\n", "FAR_THRESHOLD", "=", "0.6", "\n", "NEAR_THRESHOLD", "=", "0.3", "\n", "GT_VOTE_FACTOR", "=", "3", "# number of GT votes per point", "\n", "OBJECTNESS_CLS_WEIGHTS", "=", "[", "0.2", ",", "0.8", "]", "# put larger weights on positive objectness", "\n", "\n", "def", "compute_vote_loss", "(", "end_points", ")", ":", "\n", "    ", "\"\"\" Compute vote loss: Match predicted votes to GT votes.\n\n    Args:\n        end_points: dict (read-only)\n    \n    Returns:\n        vote_loss: scalar Tensor\n            \n    Overall idea:\n        If the seed point belongs to an object (votes_label_mask == 1),\n        then we require it to vote for the object center.\n\n        Each seed point may vote for multiple translations v1,v2,v3\n        A seed point may also be in the boxes of multiple objects:\n        o1,o2,o3 with corresponding GT votes c1,c2,c3\n\n        Then the loss for this seed point is:\n            min(d(v_i,c_j)) for i=1,2,3 and j=1,2,3\n    \"\"\"", "\n", "\n", "# Load ground truth votes and assign them to seed points", "\n", "batch_size", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "0", "]", "\n", "num_seed", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "1", "]", "# B,num_seed,3", "\n", "vote_xyz", "=", "end_points", "[", "'vote_xyz'", "]", "# B,num_seed*vote_factor,3", "\n", "seed_inds", "=", "end_points", "[", "'seed_inds'", "]", ".", "long", "(", ")", "# B,num_seed in [0,num_points-1]", "\n", "\n", "# Get groundtruth votes for the seed points", "\n", "# vote_label_mask: Use gather to select B,num_seed from B,num_point", "\n", "#   non-object point has no GT vote mask = 0, object point has mask = 1", "\n", "# vote_label: Use gather to select B,num_seed,9 from B,num_point,9", "\n", "#   with inds in shape B,num_seed,9 and 9 = GT_VOTE_FACTOR * 3", "\n", "seed_gt_votes_mask", "=", "torch", ".", "gather", "(", "end_points", "[", "'vote_label_mask'", "]", ",", "1", ",", "seed_inds", ")", "\n", "seed_inds_expand", "=", "seed_inds", ".", "view", "(", "batch_size", ",", "num_seed", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "3", "*", "GT_VOTE_FACTOR", ")", "\n", "seed_gt_votes", "=", "torch", ".", "gather", "(", "end_points", "[", "'vote_label'", "]", ",", "1", ",", "seed_inds_expand", ")", "\n", "seed_gt_votes", "+=", "end_points", "[", "'seed_xyz'", "]", ".", "repeat", "(", "1", ",", "1", ",", "3", ")", "\n", "\n", "# Compute the min of min of distance", "\n", "vote_xyz_reshape", "=", "vote_xyz", ".", "view", "(", "batch_size", "*", "num_seed", ",", "-", "1", ",", "3", ")", "# from B,num_seed*vote_factor,3 to B*num_seed,vote_factor,3", "\n", "seed_gt_votes_reshape", "=", "seed_gt_votes", ".", "view", "(", "batch_size", "*", "num_seed", ",", "GT_VOTE_FACTOR", ",", "3", ")", "# from B,num_seed,3*GT_VOTE_FACTOR to B*num_seed,GT_VOTE_FACTOR,3", "\n", "# A predicted vote to no where is not penalized as long as there is a good vote near the GT vote.", "\n", "dist1", ",", "_", ",", "dist2", ",", "_", "=", "nn_distance", "(", "vote_xyz_reshape", ",", "seed_gt_votes_reshape", ",", "l1", "=", "True", ")", "\n", "votes_dist", ",", "_", "=", "torch", ".", "min", "(", "dist2", ",", "dim", "=", "1", ")", "# (B*num_seed,vote_factor) to (B*num_seed,)", "\n", "votes_dist", "=", "votes_dist", ".", "view", "(", "batch_size", ",", "num_seed", ")", "\n", "vote_loss", "=", "torch", ".", "sum", "(", "votes_dist", "*", "seed_gt_votes_mask", ".", "float", "(", ")", ")", "/", "(", "torch", ".", "sum", "(", "seed_gt_votes_mask", ".", "float", "(", ")", ")", "+", "1e-6", ")", "\n", "return", "vote_loss", "\n", "\n", "", "def", "compute_weak_vote_loss", "(", "end_points", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_objectness_loss_based_on_query_points": [[81, 138], ["end_points[].long", "end_points[].long", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "losses.SigmoidFocalClassificationLoss", "torch.ones().cuda.float", "objectness_mask.float.sum().float", "torch.clamp", "torch.clamp", "torch.clamp", "losses.SigmoidFocalClassificationLoss.", "torch.sum", "torch.sum", "torch.sum", "float", "objectness_scores.transpose().contiguous().view", "torch.gather.unsqueeze", "criterion.sum", "torch.ones", "torch.ones", "torch.ones", "torch.gather.float().cuda", "torch.sum", "torch.sum", "torch.sum", "float", "objectness_mask.float.sum", "range", "torch.ones().cuda.float", "objectness_scores.transpose().contiguous", "torch.gather.float", "objectness_scores.transpose"], "function", ["None"], ["\n", "\n", "# Load ground truth votes and assign them to seed points", "\n", "batch_size", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "0", "]", "\n", "num_seed", "=", "end_points", "[", "'seed_xyz'", "]", ".", "shape", "[", "1", "]", "# B,num_seed,3", "\n", "vote_xyz", "=", "end_points", "[", "'vote_xyz'", "]", "# B,num_seed*vote_factor,3", "\n", "\n", "gt_center", "=", "end_points", "[", "'center_label'", "]", "[", ":", ",", ":", ",", "0", ":", "3", "]", "# B,K2,3", "\n", "\n", "# A predicted vote to no where is not penalized as long as there is a good vote near the GT vote.", "\n", "dist1", ",", "_", ",", "dist2", ",", "_", "=", "nn_distance", "(", "vote_xyz", ",", "gt_center", ",", "l1", "=", "True", ")", "# dist1: B,num_seed*vote_factor, dist2: B,K2", "\n", "dist1", "=", "dist1", ".", "view", "(", "batch_size", ",", "num_seed", ",", "-", "1", ")", "# dist1: B,num_seed,vote_factor", "\n", "votes_dist", ",", "_", "=", "torch", ".", "min", "(", "dist1", ",", "dim", "=", "2", ")", "# (B,num_seed,vote_factor) to (B,num_seed,)", "\n", "box_label_mask", "=", "end_points", "[", "'box_label_mask'", "]", "# B,K2", "\n", "sem_cls_label", "=", "end_points", "[", "'sem_cls_label'", "]", "# B,K2", "\n", "object_weight", "=", "torch", ".", "ones_like", "(", "sem_cls_label", ")", ".", "cuda", "(", ")", "\n", "#object_weight[(sem_cls_label == 4) + (sem_cls_label == 6) + (sem_cls_label == 11)] = 10", "\n", "vote_loss", "=", "torch", ".", "mean", "(", "votes_dist", ")", "+", "torch", ".", "sum", "(", "dist2", "*", "object_weight", "*", "box_label_mask", ")", "/", "(", "torch", ".", "sum", "(", "box_label_mask", ")", "+", "1e-6", ")", "\n", "\n", "return", "vote_loss", "\n", "\n", "", "def", "compute_objectness_loss", "(", "end_points", ")", ":", "\n", "    ", "\"\"\" Compute objectness loss for the proposals.\n\n    Args:\n        end_points: dict (read-only)\n\n    Returns:\n        objectness_loss: scalar Tensor\n        objectness_label: (batch_size, num_seed) Tensor with value 0 or 1\n        objectness_mask: (batch_size, num_seed) Tensor with value 0 or 1\n        object_assignment: (batch_size, num_seed) Tensor with long int\n            within [0,num_gt_object-1]\n    \"\"\"", "\n", "# Associate proposal and GT objects by point-to-point distances", "\n", "aggregated_vote_xyz", "=", "end_points", "[", "'aggregated_vote_xyz'", "]", "\n", "# aggregated_vote_xyz = end_points['center']", "\n", "gt_center", "=", "end_points", "[", "'center_label'", "]", "[", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "B", "=", "gt_center", ".", "shape", "[", "0", "]", "\n", "K", "=", "aggregated_vote_xyz", ".", "shape", "[", "1", "]", "\n", "K2", "=", "gt_center", ".", "shape", "[", "1", "]", "\n", "dist1", ",", "ind1", ",", "dist2", ",", "_", "=", "nn_distance", "(", "aggregated_vote_xyz", ",", "gt_center", ")", "# dist1: BxK, dist2: BxK2", "\n", "\n", "# Generate objectness label and mask", "\n", "# objectness_label: 1 if pred object center is within NEAR_THRESHOLD of any GT object", "\n", "# objectness_mask: 0 if pred object center is in gray zone (DONOTCARE), 1 otherwise", "\n", "euclidean_dist1", "=", "torch", ".", "sqrt", "(", "dist1", "+", "1e-6", ")", "\n", "objectness_label", "=", "torch", ".", "zeros", "(", "(", "B", ",", "K", ")", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "objectness_mask", "=", "torch", ".", "zeros", "(", "(", "B", ",", "K", ")", ")", ".", "cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_points_obj_cls_loss_hard_topk_weak": [[322, 386], ["end_points[].long", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "euclidean_dist1.transpose().contiguous.transpose().contiguous", "topk_inds.view().contiguous.long", "topk_inds.view().contiguous.view().contiguous", "torch.arange().unsqueeze().repeat().to", "torch.arange().unsqueeze().repeat().to", "torch.arange().unsqueeze().repeat().to", "torch.stack().view().contiguous", "torch.stack().view().contiguous", "torch.stack().view().contiguous", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "losses.SigmoidFocalClassificationLoss", "cls_weights.sum().float", "torch.clamp", "torch.clamp", "torch.clamp", "losses.SigmoidFocalClassificationLoss.", "seed_xyz.unsqueeze", "gt_center.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "float", "seeds_obj_cls_logits.view", "torch.zeros().to.unsqueeze", "criterion.sum", "euclidean_dist1.transpose().contiguous.transpose", "topk_inds.view().contiguous.view", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros().to.float", "cls_weights.sum", "torch.topk", "torch.topk", "torch.topk", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.stack", "torch.stack", "torch.stack", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["num_size_cluster", "=", "config", ".", "num_size_cluster", "\n", "num_class", "=", "config", ".", "num_class", "\n", "mean_size_arr", "=", "config", ".", "mean_size_arr", "\n", "\n", "cloud_label", "=", "end_points", "[", "'cloud_label'", "]", "# Bxnum_class", "\n", "batch_size", "=", "cloud_label", ".", "shape", "[", "0", "]", "\n", "\n", "# 3.4 Semantic cls loss", "\n", "cloud_pred", "=", "end_points", "[", "'sem_cls_scores'", "]", ".", "transpose", "(", "2", ",", "1", ")", "# Bxnum_classxK", "\n", "cloud_pred_gap", "=", "torch", ".", "mean", "(", "cloud_pred", ",", "dim", "=", "2", ")", "# Bxnum_class", "\n", "BCEWL", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "sem_cls_loss", "=", "BCEWL", "(", "cloud_pred_gap", ".", "float", "(", ")", ",", "cloud_label", ".", "float", "(", ")", ")", "\n", "return", "sem_cls_loss", "\n", "\n", "", "def", "get_loss", "(", "end_points", ",", "config", ")", ":", "\n", "    ", "\"\"\" Loss functions\n\n    Args:\n        end_points: dict\n            {   \n                seed_xyz, seed_inds, vote_xyz,\n                center,\n                heading_scores, heading_residuals_normalized,\n                size_scores, size_residuals_normalized,\n                sem_cls_scores, #seed_logits,#\n                center_label,\n                heading_class_label, heading_residual_label,\n                size_class_label, size_residual_label,\n                sem_cls_label,\n                box_label_mask,\n                vote_label, vote_label_mask\n            }\n        config: dataset config instance\n    Returns:\n        loss: pytorch scalar tensor\n        end_points: dict\n    \"\"\"", "\n", "\n", "# Vote loss", "\n", "vote_loss", "=", "compute_vote_loss", "(", "end_points", ")", "\n", "end_points", "[", "'vote_loss'", "]", "=", "vote_loss", "\n", "\n", "# Obj loss", "\n", "objectness_loss", ",", "objectness_label", ",", "objectness_mask", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points", ")", "\n", "end_points", "[", "'objectness_loss'", "]", "=", "objectness_loss", "\n", "end_points", "[", "'objectness_label'", "]", "=", "objectness_label", "\n", "end_points", "[", "'objectness_mask'", "]", "=", "objectness_mask", "\n", "end_points", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "total_num_proposal", "=", "objectness_label", ".", "shape", "[", "0", "]", "*", "objectness_label", ".", "shape", "[", "1", "]", "\n", "end_points", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points", "[", "'pos_ratio'", "]", "\n", "\n", "# Box loss and sem cls loss", "\n", "center_loss", ",", "heading_cls_loss", ",", "heading_reg_loss", ",", "size_cls_loss", ",", "size_reg_loss", ",", "sem_cls_loss", "=", "compute_box_and_sem_cls_loss", "(", "end_points", ",", "config", ")", "\n", "end_points", "[", "'center_loss'", "]", "=", "center_loss", "\n", "end_points", "[", "'heading_cls_loss'", "]", "=", "heading_cls_loss", "\n", "end_points", "[", "'heading_reg_loss'", "]", "=", "heading_reg_loss", "\n", "end_points", "[", "'size_cls_loss'", "]", "=", "size_cls_loss", "\n", "end_points", "[", "'size_reg_loss'", "]", "=", "size_reg_loss", "\n", "end_points", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss", "\n", "box_loss", "=", "center_loss", "+", "0.1", "*", "heading_cls_loss", "+", "heading_reg_loss", "+", "0.1", "*", "size_cls_loss", "+", "size_reg_loss", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.nn_distance": [[387, 415], ["pc1.unsqueeze().repeat", "pc2.unsqueeze().repeat", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "torch.sum", "pc1.unsqueeze", "pc2.unsqueeze", "huber_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.abs", "torch.abs", "torch.abs"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.nn_distance.huber_loss"], ["end_points", "[", "'box_loss'", "]", "=", "box_loss", "\n", "\n", "# Final loss function", "\n", "loss", "=", "vote_loss", "+", "0.5", "*", "objectness_loss", "+", "box_loss", "+", "0.1", "*", "sem_cls_loss", "\n", "loss", "*=", "10", "\n", "end_points", "[", "'loss'", "]", "=", "loss", "\n", "\n", "# --------------------------------------------", "\n", "# Some other statistics", "\n", "obj_pred_val", "=", "torch", ".", "argmax", "(", "end_points", "[", "'objectness_scores'", "]", ",", "2", ")", "# B,K", "\n", "obj_acc", "=", "torch", ".", "sum", "(", "(", "obj_pred_val", "==", "objectness_label", ".", "long", "(", ")", ")", ".", "float", "(", ")", "*", "objectness_mask", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask", ")", "+", "1e-6", ")", "\n", "end_points", "[", "'obj_acc'", "]", "=", "obj_acc", "\n", "\n", "return", "loss", ",", "end_points", "\n", "\n", "\n", "", "def", "get_loss_weak", "(", "end_points", ",", "config", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_objectness_loss_based_on_query_points_weak": [[416, 478], ["end_points[].long", "end_points[].long", "loss_helper.nn_distance", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "ind1.cuda", "losses.SigmoidFocalClassificationLoss", "torch.ones().cuda.float", "objectness_mask.float.sum().float", "torch.clamp", "torch.clamp", "torch.clamp", "losses.SigmoidFocalClassificationLoss.", "objectness_scores.transpose().contiguous().view", "torch.zeros().cuda.unsqueeze", "criterion.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "objectness_mask.float.sum", "range", "objectness_scores.transpose().contiguous", "objectness_scores.transpose"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.nn_distance"], ["\n", "\n", "# Vote loss", "\n", "vote_loss", "=", "compute_weak_vote_loss", "(", "end_points", ")", "\n", "end_points", "[", "'vote_loss'", "]", "=", "vote_loss", "\n", "\n", "# Obj loss", "\n", "objectness_loss", ",", "objectness_label", ",", "objectness_mask", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points", ")", "\n", "end_points", "[", "'objectness_loss'", "]", "=", "objectness_loss", "\n", "end_points", "[", "'objectness_label'", "]", "=", "objectness_label", "\n", "end_points", "[", "'objectness_mask'", "]", "=", "objectness_mask", "\n", "end_points", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "total_num_proposal", "=", "objectness_label", ".", "shape", "[", "0", "]", "*", "objectness_label", ".", "shape", "[", "1", "]", "\n", "end_points", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points", "[", "'pos_ratio'", "]", "\n", "\n", "# Box loss and sem cls loss", "\n", "center_loss", ",", "size_cls_loss", ",", "sem_cls_loss", "=", "compute_center_and_sem_cls_loss", "(", "end_points", ",", "config", ")", "\n", "end_points", "[", "'center_loss'", "]", "=", "center_loss", "\n", "end_points", "[", "'size_cls_loss'", "]", "=", "size_cls_loss", "\n", "end_points", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss", "\n", "\n", "box_loss", "=", "center_loss", "+", "0.1", "*", "size_cls_loss", "\n", "sem_cls_loss", "=", "sem_cls_loss", "\n", "\n", "# Final loss function", "\n", "loss", "=", "vote_loss", "+", "0.5", "*", "objectness_loss", "+", "box_loss", "+", "0.1", "*", "sem_cls_loss", "\n", "loss", "*=", "10", "\n", "end_points", "[", "'loss'", "]", "=", "loss", "\n", "\n", "# --------------------------------------------", "\n", "# Some other statistics", "\n", "obj_pred_val", "=", "torch", ".", "argmax", "(", "end_points", "[", "'objectness_scores'", "]", ",", "2", ")", "# B,K", "\n", "obj_acc", "=", "torch", ".", "sum", "(", "(", "obj_pred_val", "==", "objectness_label", ".", "long", "(", ")", ")", ".", "float", "(", ")", "*", "objectness_mask", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask", ")", "+", "1e-6", ")", "\n", "end_points", "[", "'obj_acc'", "]", "=", "obj_acc", "\n", "\n", "return", "loss", ",", "end_points", "\n", "\n", "\n", "", "class", "FocalLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_pseudo_labels": [[777, 886], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.max", "torch.max", "torch.max", "torch.nonzero().squeeze().long", "torch.nonzero().squeeze().long", "torch.nonzero().squeeze().long", "torch.logical_and", "torch.logical_and", "torch.logical_and", "torch.argsort", "torch.argsort", "torch.argsort", "inds[].long", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.max", "torch.max", "torch.max", "argmax_size.unsqueeze().unsqueeze().expand", "torch.max", "torch.max", "torch.max", "argmax_heading.unsqueeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.Softmax", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "numpy.zeros", "torch.gather.detach().cpu().numpy", "numpy.zeros", "ap_helper.flip_axis_to_camera", "range", "numpy.ones", "numpy.ones", "torch.gather().detach().cpu().numpy", "torch.gather().detach().cpu().numpy", "torch.gather().detach().cpu().numpy", "torch.gather().detach().cpu().numpy", "torch.gather().detach().cpu().numpy", "torch.gather().detach().cpu().numpy", "range", "torch.gather().squeeze.squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "argmax_size.unsqueeze().unsqueeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather.detach().cpu().numpy", "range", "numpy.zeros", "range", "lhs_3d_faster_samecls", "inds[].long.unsqueeze().expand", "inds[].long.unsqueeze().expand", "torch.sum", "torch.sum", "torch.sum", "torch.gather.view", "inds[].long.unsqueeze().expand", "inds[].long.unsqueeze().expand", "torch.gather.detach().cpu", "config_dict[].class2angle", "config_dict[].class2size", "utils.box_util.get_3d_box", "torch.gather().detach().cpu", "torch.gather().detach().cpu", "torch.gather().detach().cpu", "torch.gather().detach().cpu", "torch.gather().detach().cpu", "torch.gather().detach().cpu", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.where", "len", "torch.from_numpy().bool().cuda", "torch.from_numpy().bool().cuda", "torch.from_numpy().bool().cuda", "torch.nonzero", "torch.nonzero", "torch.nonzero", "argmax_size.unsqueeze", "torch.gather.detach().cpu", "pred_heading_class_[].detach().cpu().numpy", "pred_heading_residual_[].detach().cpu().numpy", "int", "pred_size_residual_[].detach().cpu().numpy", "inds[].long.unsqueeze", "inds[].long.unsqueeze", "inds[].long.unsqueeze", "inds[].long.unsqueeze", "torch.gather.detach", "pred_size_class_[].detach().cpu().numpy", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.gather().detach", "torch.from_numpy().bool", "torch.from_numpy().bool", "torch.from_numpy().bool", "torch.gather.detach", "pred_heading_class_[].detach().cpu", "pred_heading_residual_[].detach().cpu", "pred_size_residual_[].detach().cpu", "pred_size_class_[].detach().cpu", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "pred_heading_class_[].detach", "pred_heading_residual_[].detach", "pred_size_residual_[].detach", "pred_size_class_[].detach"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.flip_axis_to_camera", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2angle", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.model_util_scannet.ScannetDatasetConfig_md40.class2size", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.box_util.get_3d_box"], ["object_weight_local_S", "=", "end_points_S", "[", "'objectness_label'", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "source_dloss", "=", "da_coefficient", "*", "torch", ".", "mean", "(", "local_d_pred_S", "**", "2", "*", "object_weight_local_S", ")", "+", "da_coefficient", "*", "FL_global", "(", "global_d_pred_S", ",", "domain_S", ")", "# + da_coefficient * torch.mean(jitter_d_pred_S**2 * jitter_weight_S)", "\n", "\n", "# Target domain", "\n", "global_d_pred_T", "=", "end_points_T", "[", "'global_d_pred'", "]", "\n", "local_d_pred_T", "=", "end_points_T", "[", "'local_d_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "jitter_d_pred_T", "=", "end_points_T", "[", "'jitter_d_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "domain_T", "=", "Variable", "(", "torch", ".", "ones", "(", "global_d_pred_T", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "#object_weight_local_T = F.softmax(end_points_T['objectness_scores'], dim=-1)[:,:,1:]", "\n", "jitter_weight_T", "=", "end_points_T", "[", "'box_label_mask'", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "object_weight_local_T", "=", "end_points_T", "[", "'objectness_label'", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "target_dloss", "=", "da_coefficient", "*", "torch", ".", "mean", "(", "(", "1", "-", "local_d_pred_T", ")", "**", "2", "*", "object_weight_local_T", ")", "+", "da_coefficient", "*", "FL_global", "(", "global_d_pred_T", ",", "domain_T", ")", "# + da_coefficient * torch.mean((1-jitter_d_pred_T)**2 * jitter_weight_T)", "\n", "\n", "DA_loss", "=", "source_dloss", "+", "target_dloss", "\n", "\n", "# Final loss function", "\n", "loss", "=", "vote_loss", "+", "0.5", "*", "objectness_loss", "+", "box_loss", "+", "0.1", "*", "sem_cls_loss", "+", "DA_loss", "+", "source_coefficient", "*", "jitter_loss_S", "\n", "loss", "*=", "10", "\n", "end_points_S", "[", "'loss'", "]", "=", "loss", "\n", "\n", "# --------------------------------------------", "\n", "# Some other statistics", "\n", "obj_pred_val", "=", "torch", ".", "argmax", "(", "end_points_S", "[", "'objectness_scores'", "]", ",", "2", ")", "# B,K", "\n", "obj_acc", "=", "torch", ".", "sum", "(", "(", "obj_pred_val", "==", "objectness_label_S", ".", "long", "(", ")", ")", ".", "float", "(", ")", "*", "objectness_mask_S", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask_S", ")", "+", "1e-6", ")", "\n", "end_points_S", "[", "'obj_acc'", "]", "=", "obj_acc", "\n", "\n", "return", "loss", ",", "end_points_S", ",", "end_points_T", "\n", "\n", "\n", "", "def", "get_loss_DA_separate", "(", "end_points_S", ",", "end_points_T", ",", "config", ")", ":", "\n", "    ", "\"\"\" Loss functions\n\n    Args:\n        end_points: dict\n            {   \n                seed_xyz, seed_inds, global_d_pred, vote_xyz, local_d_pred,\n                center,\n                heading_scores, heading_residuals_normalized,\n                size_scores, size_residuals_normalized,\n                sem_cls_scores, #seed_logits,#\n                center_label,\n                heading_class_label, heading_residual_label,\n                size_class_label, size_residual_label,\n                sem_cls_label,\n                box_label_mask,\n                vote_label, vote_label_mask\n            }\n        config: dataset config instance\n    Returns:\n        loss: pytorch scalar tensor\n        end_points: dict\n    \"\"\"", "\n", "\n", "# Vote loss", "\n", "vote_loss_S", "=", "compute_vote_loss", "(", "end_points_S", ")", "\n", "vote_loss_T", "=", "compute_weak_vote_loss", "(", "end_points_T", ")", "\n", "vote_loss", "=", "vote_loss_S", "+", "vote_loss_T", "\n", "end_points_S", "[", "'vote_loss'", "]", "=", "vote_loss_S", "\n", "end_points_T", "[", "'vote_loss'", "]", "=", "vote_loss_T", "\n", "\n", "# Obj loss", "\n", "objectness_loss_S", ",", "objectness_label_S", ",", "objectness_mask_S", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points_S", ")", "\n", "end_points_S", "[", "'objectness_loss'", "]", "=", "objectness_loss_S", "\n", "end_points_S", "[", "'objectness_label'", "]", "=", "objectness_label_S", "\n", "end_points_S", "[", "'objectness_mask'", "]", "=", "objectness_mask_S", "\n", "end_points_S", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "total_num_proposal", "=", "objectness_label_S", ".", "shape", "[", "0", "]", "*", "objectness_label_S", ".", "shape", "[", "1", "]", "\n", "end_points_S", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label_S", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points_S", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask_S", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points_S", "[", "'pos_ratio'", "]", "\n", "\n", "objectness_loss_T", ",", "objectness_label_T", ",", "objectness_mask_T", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points_T", ")", "\n", "end_points_T", "[", "'objectness_loss'", "]", "=", "objectness_loss_T", "\n", "end_points_T", "[", "'objectness_label'", "]", "=", "objectness_label_T", "\n", "end_points_T", "[", "'objectness_mask'", "]", "=", "objectness_mask_T", "\n", "end_points_T", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "total_num_proposal", "=", "objectness_label_T", ".", "shape", "[", "0", "]", "*", "objectness_label_T", ".", "shape", "[", "1", "]", "\n", "end_points_T", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label_T", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points_T", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask_T", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points_T", "[", "'pos_ratio'", "]", "\n", "\n", "objectness_loss", "=", "objectness_loss_S", "+", "objectness_loss_T", "\n", "\n", "# Box loss and sem cls loss", "\n", "center_loss_S", ",", "heading_cls_loss", ",", "heading_reg_loss", ",", "size_cls_loss_S", ",", "size_reg_loss", ",", "sem_cls_loss_S", "=", "compute_box_and_sem_cls_loss", "(", "end_points_S", ",", "config", ")", "\n", "end_points_S", "[", "'center_loss'", "]", "=", "center_loss_S", "\n", "end_points_S", "[", "'heading_cls_loss'", "]", "=", "heading_cls_loss", "\n", "end_points_S", "[", "'heading_reg_loss'", "]", "=", "heading_reg_loss", "\n", "end_points_S", "[", "'size_cls_loss'", "]", "=", "size_cls_loss_S", "\n", "end_points_S", "[", "'size_reg_loss'", "]", "=", "size_reg_loss", "\n", "end_points_S", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss_S", "\n", "box_loss", "=", "center_loss_S", "+", "0.1", "*", "heading_cls_loss", "+", "heading_reg_loss", "+", "0.1", "*", "size_cls_loss_S", "+", "size_reg_loss", "\n", "end_points_S", "[", "'box_loss'", "]", "=", "box_loss", "\n", "\n", "center_loss_T", ",", "size_cls_loss_T", ",", "sem_cls_loss_T", "=", "compute_center_and_sem_cls_loss", "(", "end_points_T", ",", "config", ")", "\n", "end_points_T", "[", "'center_loss'", "]", "=", "center_loss_T", "\n", "end_points_T", "[", "'size_cls_loss'", "]", "=", "size_cls_loss_T", "\n", "end_points_T", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss_T", "\n", "\n", "box_loss", "+=", "center_loss_T", "+", "0.1", "*", "size_cls_loss_T", "\n", "sem_cls_loss", "=", "sem_cls_loss_S", "+", "sem_cls_loss_T", "\n", "\n", "# Source domain", "\n", "local_d_pred_S", "=", "end_points_S", "[", "'local_d_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "object_weight_S", "=", "F", ".", "softmax", "(", "end_points_S", "[", "'objectness_scores'", "]", ",", "dim", "=", "-", "1", ")", "[", ":", ",", ":", ",", "1", ":", "]", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_objectness_loss_based_on_query_points_pseudo": [[888, 958], ["end_points[].long", "end_points[].long", "loss_helper.nn_distance", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "ind1.cuda", "losses.SigmoidFocalClassificationLoss", "torch.ones().cuda.float", "objectness_mask.float.sum().float", "torch.clamp", "torch.clamp", "torch.clamp", "losses.SigmoidFocalClassificationLoss.", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "objectness_scores.transpose().contiguous().view", "torch.zeros().cuda.unsqueeze", "criterion.sum", "objectness_mask.float.sum", "range", "objectness_scores.transpose().contiguous", "objectness_scores.transpose"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.nn_distance"], ["\n", "# Target domain", "\n", "local_d_pred_T", "=", "end_points_T", "[", "'local_d_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "object_weight_T", "=", "F", ".", "softmax", "(", "end_points_T", "[", "'objectness_scores'", "]", ",", "dim", "=", "-", "1", ")", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "target_dloss", "=", "1.0", "*", "torch", ".", "mean", "(", "(", "1", "-", "local_d_pred_T", ")", "**", "2", "*", "object_weight_T", ")", "\n", "\n", "DA_loss", "=", "source_dloss", "+", "target_dloss", "\n", "\n", "# Final loss function", "\n", "loss", "=", "vote_loss", "+", "0.5", "*", "objectness_loss", "+", "box_loss", "+", "0.1", "*", "sem_cls_loss", "+", "DA_loss", "\n", "loss", "*=", "10", "\n", "end_points_S", "[", "'loss'", "]", "=", "loss", "\n", "\n", "# --------------------------------------------", "\n", "# Some other statistics", "\n", "obj_pred_val", "=", "torch", ".", "argmax", "(", "end_points_S", "[", "'objectness_scores'", "]", ",", "2", ")", "# B,K", "\n", "obj_acc", "=", "torch", ".", "sum", "(", "(", "obj_pred_val", "==", "objectness_label_S", ".", "long", "(", ")", ")", ".", "float", "(", ")", "*", "objectness_mask_S", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask_S", ")", "+", "1e-6", ")", "\n", "end_points_S", "[", "'obj_acc'", "]", "=", "obj_acc", "\n", "\n", "return", "loss", ",", "end_points_S", ",", "end_points_T", "\n", "\n", "\n", "", "def", "get_loss_cam", "(", "end_points", ",", "config", ")", ":", "\n", "    ", "\"\"\" Loss functions\n\n    Args:\n        end_points: dict\n            {   \n                seed_xyz, seed_inds, vote_xyz,\n                center,\n                heading_scores, heading_residuals_normalized,\n                size_scores, size_residuals_normalized,\n                sem_cls_scores, #seed_logits,#\n                center_label,\n                heading_class_label, heading_residual_label,\n                size_class_label, size_residual_label,\n                sem_cls_label,\n                box_label_mask,\n                vote_label, vote_label_mask\n            }\n        config: dataset config instance\n    Returns:\n        loss: pytorch scalar tensor\n        end_points: dict\n    \"\"\"", "\n", "\n", "# Final loss function", "\n", "pred_cam", "=", "end_points", "[", "'cam'", "]", "# Bxnum_classx256", "\n", "pred_cam_gap", "=", "torch", ".", "mean", "(", "pred_cam", ",", "dim", "=", "2", ")", "# Bxnum_class", "\n", "cloud_label", "=", "end_points", "[", "'cloud_label'", "]", "# Bxnum_class", "\n", "\n", "BCEWL", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "loss", "=", "BCEWL", "(", "pred_cam_gap", ".", "float", "(", ")", ",", "cloud_label", ".", "float", "(", ")", ")", "\n", "end_points", "[", "'loss'", "]", "=", "loss", "\n", "\n", "return", "loss", ",", "end_points", "\n", "\n", "\n", "", "def", "get_loss_DA_cam", "(", "end_points_S", ",", "end_points_T", ",", "config", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_box_and_sem_cls_loss_pseudo": [[960, 1081], ["torch.gather", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.gather", "torch.gather", "torch.gather", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_.scatter_", "torch.gather", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "torch.gather", "torch.gather", "torch.gather", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_", "torch.cuda.FloatTensor().zero_.scatter_", "torch.cuda.FloatTensor().zero_.unsqueeze().repeat", "torch.sum", "torch.sum", "torch.sum", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.from_numpy().cuda().unsqueeze().unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.gather", "torch.gather", "torch.gather", "torch.CrossEntropyLoss", "nn.CrossEntropyLoss.", "end_points[].float", "object_assignment.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "losses.smoothl1_loss", "end_points[].transpose", "torch.sum", "torch.sum", "torch.sum", "torch.gather.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "end_points[].transpose", "torch.sum", "torch.sum", "torch.sum", "object_assignment.unsqueeze().repeat", "torch.gather.unsqueeze", "end_points[].transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "end_points[].float", "object_assignment.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "losses.l1_loss", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "losses.smoothl1_loss", "torch.sum", "torch.sum", "torch.sum", "losses.l1_loss", "torch.sum", "torch.sum", "torch.sum", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor().zero_.unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "losses.smoothl1_loss", "torch.sum", "torch.sum", "torch.sum", "losses.l1_loss", "torch.sum", "torch.sum", "torch.sum", "range", "object_assignment.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "object_assignment.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "end_points[].float.unsqueeze", "object_assignment.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "end_points[].float.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "end_points[].float.unsqueeze", "end_points[].float.unsqueeze", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mean_size_arr.astype"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.smoothl1_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.l1_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.smoothl1_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.l1_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.smoothl1_loss", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.l1_loss"], ["\n", "\n", "# Vote loss", "\n", "vote_loss_S", "=", "compute_vote_loss", "(", "end_points_S", ")", "\n", "vote_loss", "=", "vote_loss_S", "\n", "end_points_S", "[", "'vote_loss'", "]", "=", "vote_loss_S", "\n", "\n", "# Obj loss", "\n", "objectness_loss_S", ",", "objectness_label_S", ",", "objectness_mask_S", ",", "object_assignment", "=", "compute_objectness_loss", "(", "end_points_S", ")", "\n", "end_points_S", "[", "'objectness_loss'", "]", "=", "objectness_loss_S", "\n", "end_points_S", "[", "'objectness_label'", "]", "=", "objectness_label_S", "\n", "end_points_S", "[", "'objectness_mask'", "]", "=", "objectness_mask_S", "\n", "end_points_S", "[", "'object_assignment'", "]", "=", "object_assignment", "\n", "total_num_proposal", "=", "objectness_label_S", ".", "shape", "[", "0", "]", "*", "objectness_label_S", ".", "shape", "[", "1", "]", "\n", "end_points_S", "[", "'pos_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_label_S", ".", "float", "(", ")", ".", "cuda", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "\n", "end_points_S", "[", "'neg_ratio'", "]", "=", "torch", ".", "sum", "(", "objectness_mask_S", ".", "float", "(", ")", ")", "/", "float", "(", "total_num_proposal", ")", "-", "end_points_S", "[", "'pos_ratio'", "]", "\n", "objectness_loss", "=", "objectness_loss_S", "\n", "\n", "# Box loss and sem cls loss", "\n", "center_loss_S", ",", "heading_cls_loss", ",", "heading_reg_loss", ",", "size_cls_loss_S", ",", "size_reg_loss", ",", "sem_cls_loss_S", "=", "compute_box_and_sem_cls_loss", "(", "end_points_S", ",", "config", ")", "\n", "end_points_S", "[", "'center_loss'", "]", "=", "center_loss_S", "\n", "end_points_S", "[", "'heading_cls_loss'", "]", "=", "heading_cls_loss", "\n", "end_points_S", "[", "'heading_reg_loss'", "]", "=", "heading_reg_loss", "\n", "end_points_S", "[", "'size_cls_loss'", "]", "=", "size_cls_loss_S", "\n", "end_points_S", "[", "'size_reg_loss'", "]", "=", "size_reg_loss", "\n", "end_points_S", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss_S", "\n", "box_loss", "=", "center_loss_S", "+", "0.1", "*", "heading_cls_loss", "+", "heading_reg_loss", "+", "0.1", "*", "size_cls_loss_S", "+", "size_reg_loss", "\n", "end_points_S", "[", "'box_loss'", "]", "=", "box_loss", "\n", "\n", "sem_cls_loss_T", "=", "compute_sem_cls_loss", "(", "end_points_T", ",", "config", ")", "\n", "end_points_T", "[", "'sem_cls_loss'", "]", "=", "sem_cls_loss_T", "\n", "\n", "sem_cls_loss", "=", "sem_cls_loss_S", "+", "2", "*", "sem_cls_loss_T", "\n", "\n", "## Domain Align Loss", "\n", "FL_global", "=", "FocalLoss", "(", "class_num", "=", "2", ",", "gamma", "=", "5", ")", "\n", "FL_vote", "=", "FocalLoss", "(", "class_num", "=", "2", ",", "gamma", "=", "3", ")", "\n", "\n", "# Source domain", "\n", "global_d_pred_S", "=", "end_points_S", "[", "'global_d_pred'", "]", "\n", "vote_feature_d_pred_S", "=", "end_points_S", "[", "'vote_feature_d_pred'", "]", "\n", "local_d_pred_S", "=", "end_points_S", "[", "'local_d_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "domain_S", "=", "Variable", "(", "torch", ".", "zeros", "(", "global_d_pred_S", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "object_weight_local_S", "=", "F", ".", "softmax", "(", "end_points_S", "[", "'objectness_scores'", "]", ",", "dim", "=", "-", "1", ")", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "source_dloss", "=", "0.5", "*", "torch", ".", "mean", "(", "local_d_pred_S", "**", "2", "*", "object_weight_local_S", ")", "+", "0.5", "*", "FL_global", "(", "global_d_pred_S", ",", "domain_S", ")", "+", "0.5", "*", "FL_vote", "(", "vote_feature_d_pred_S", ",", "domain_S", ")", "\n", "\n", "# Target domain", "\n", "global_d_pred_T", "=", "end_points_T", "[", "'global_d_pred'", "]", "\n", "vote_feature_d_pred_T", "=", "end_points_T", "[", "'vote_feature_d_pred'", "]", "\n", "local_d_pred_T", "=", "end_points_T", "[", "'local_d_pred'", "]", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "domain_T", "=", "Variable", "(", "torch", ".", "ones", "(", "global_d_pred_T", ".", "size", "(", "0", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "object_weight_local_T", "=", "F", ".", "softmax", "(", "end_points_T", "[", "'objectness_scores'", "]", ",", "dim", "=", "-", "1", ")", "[", ":", ",", ":", ",", "1", ":", "]", "\n", "target_dloss", "=", "0.5", "*", "torch", ".", "mean", "(", "(", "1", "-", "local_d_pred_T", ")", "**", "2", "*", "object_weight_local_T", ")", "+", "0.5", "*", "FL_global", "(", "global_d_pred_T", ",", "domain_T", ")", "+", "0.5", "*", "FL_vote", "(", "vote_feature_d_pred_T", ",", "domain_T", ")", "\n", "\n", "DA_loss", "=", "source_dloss", "+", "target_dloss", "\n", "\n", "# Final loss function", "\n", "loss", "=", "vote_loss", "+", "0.5", "*", "objectness_loss", "+", "box_loss", "+", "0.1", "*", "sem_cls_loss", "+", "DA_loss", "\n", "loss", "*=", "10", "\n", "end_points_S", "[", "'loss'", "]", "=", "loss", "\n", "\n", "# --------------------------------------------", "\n", "# Some other statistics", "\n", "obj_pred_val", "=", "torch", ".", "argmax", "(", "end_points_S", "[", "'objectness_scores'", "]", ",", "2", ")", "# B,K", "\n", "obj_acc", "=", "torch", ".", "sum", "(", "(", "obj_pred_val", "==", "objectness_label_S", ".", "long", "(", ")", ")", ".", "float", "(", ")", "*", "objectness_mask_S", ")", "/", "(", "torch", ".", "sum", "(", "objectness_mask_S", ")", "+", "1e-6", ")", "\n", "end_points_S", "[", "'obj_acc'", "]", "=", "obj_acc", "\n", "\n", "return", "loss", ",", "end_points_S", ",", "end_points_T", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_pseudo_detection_loss": [[1083, 1108], ["loss_helper.compute_objectness_loss_based_on_query_points_pseudo", "loss_helper.compute_box_and_sem_cls_loss_pseudo"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_objectness_loss_based_on_query_points_pseudo", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.compute_box_and_sem_cls_loss_pseudo"], []], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_loss_pseudo": [[1110, 1147], ["loss_helper.get_pseudo_labels", "loss_helper.get_pseudo_detection_loss", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero().squeeze", "torch.nonzero", "torch.nonzero", "torch.nonzero"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_pseudo_labels", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.loss_helper.get_pseudo_detection_loss"], []], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.transformer.TransformerDecoderLayer.__init__": [[11, 32], ["torch.Module.__init__", "multi_head_attention.MultiheadAttention", "multi_head_attention.MultiheadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "transformer._get_activation_fn"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.transformer._get_activation_fn"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ",", "\n", "self_posembed", "=", "None", ",", "cross_posembed", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "multihead_attn", "=", "MultiheadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "# Implementation of Feedforward model", "\n", "self", ".", "linear1", "=", "nn", ".", "Linear", "(", "d_model", ",", "dim_feedforward", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "dim_feedforward", ",", "d_model", ")", "\n", "\n", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "norm3", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout1", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropout3", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "self", ".", "activation", "=", "_get_activation_fn", "(", "activation", ")", "\n", "\n", "self", ".", "self_posembed", "=", "self_posembed", "\n", "self", ".", "cross_posembed", "=", "cross_posembed", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.transformer.TransformerDecoderLayer.with_pos_embed": [[33, 35], ["None"], "methods", ["None"], ["", "def", "with_pos_embed", "(", "self", ",", "tensor", ",", "pos_embed", ":", "Optional", "[", "Tensor", "]", ")", ":", "\n", "        ", "return", "tensor", "if", "pos_embed", "is", "None", "else", "tensor", "+", "pos_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.transformer.TransformerDecoderLayer.forward": [[36, 77], ["query.permute.permute.permute", "key.permute.permute.permute", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.norm1", "transformer.TransformerDecoderLayer.norm2", "transformer.TransformerDecoderLayer.linear2", "transformer.TransformerDecoderLayer.norm3", "query.permute.permute.permute", "transformer.TransformerDecoderLayer.self_posembed().permute", "transformer.TransformerDecoderLayer.cross_posembed().permute", "transformer.TransformerDecoderLayer.self_attn", "transformer.TransformerDecoderLayer.dropout1", "transformer.TransformerDecoderLayer.multihead_attn", "transformer.TransformerDecoderLayer.dropout2", "transformer.TransformerDecoderLayer.dropout", "transformer.TransformerDecoderLayer.dropout3", "transformer.TransformerDecoderLayer.activation", "transformer.TransformerDecoderLayer.self_posembed", "transformer.TransformerDecoderLayer.cross_posembed", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.with_pos_embed", "transformer.TransformerDecoderLayer.linear1"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.transformer.TransformerDecoderLayer.with_pos_embed", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.transformer.TransformerDecoderLayer.with_pos_embed", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.transformer.TransformerDecoderLayer.with_pos_embed", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.transformer.TransformerDecoderLayer.with_pos_embed"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "query_pos", ",", "key_pos", ")", ":", "\n", "        ", "\"\"\"\n        :param query: B C Pq\n        :param key: B C Pk\n        :param query_pos: B Pq 3/6\n        :param key_pos: B Pk 3/6\n        :param value_pos: [B Pq 3/6]\n\n        :return:\n        \"\"\"", "\n", "# NxCxP to PxNxC", "\n", "if", "self", ".", "self_posembed", "is", "not", "None", ":", "\n", "            ", "query_pos_embed", "=", "self", ".", "self_posembed", "(", "query_pos", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "query_pos_embed", "=", "None", "\n", "", "if", "self", ".", "cross_posembed", "is", "not", "None", ":", "\n", "            ", "key_pos_embed", "=", "self", ".", "cross_posembed", "(", "key_pos", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "key_pos_embed", "=", "None", "\n", "\n", "", "query", "=", "query", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "key", "=", "key", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "q", "=", "k", "=", "v", "=", "self", ".", "with_pos_embed", "(", "query", ",", "query_pos_embed", ")", "\n", "query2", "=", "self", ".", "self_attn", "(", "q", ",", "k", ",", "value", "=", "v", ")", "[", "0", "]", "\n", "query", "=", "query", "+", "self", ".", "dropout1", "(", "query2", ")", "\n", "query", "=", "self", ".", "norm1", "(", "query", ")", "\n", "\n", "query2", "=", "self", ".", "multihead_attn", "(", "query", "=", "self", ".", "with_pos_embed", "(", "query", ",", "query_pos_embed", ")", ",", "\n", "key", "=", "self", ".", "with_pos_embed", "(", "key", ",", "key_pos_embed", ")", ",", "\n", "value", "=", "self", ".", "with_pos_embed", "(", "key", ",", "key_pos_embed", ")", ")", "[", "0", "]", "\n", "query", "=", "query", "+", "self", ".", "dropout2", "(", "query2", ")", "\n", "query", "=", "self", ".", "norm2", "(", "query", ")", "\n", "\n", "query2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "query", ")", ")", ")", ")", "\n", "query", "=", "query", "+", "self", ".", "dropout3", "(", "query2", ")", "\n", "query", "=", "self", ".", "norm3", "(", "query", ")", "\n", "\n", "# NxCxP to PxNxC", "\n", "query", "=", "query", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "return", "query", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.transformer._get_activation_fn": [[79, 88], ["RuntimeError"], "function", ["None"], ["", "", "def", "_get_activation_fn", "(", "activation", ")", ":", "\n", "    ", "\"\"\"Return an activation function given a string\"\"\"", "\n", "if", "activation", "==", "\"relu\"", ":", "\n", "        ", "return", "F", ".", "relu", "\n", "", "if", "activation", "==", "\"gelu\"", ":", "\n", "        ", "return", "F", ".", "gelu", "\n", "", "if", "activation", "==", "\"glu\"", ":", "\n", "        ", "return", "F", ".", "glu", "\n", "", "raise", "RuntimeError", "(", "F\"activation should be relu/gelu, not {activation}.\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.SigmoidFocalClassificationLoss.__init__": [[26, 35], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "self", ",", "gamma", ":", "float", "=", "2.0", ",", "alpha", ":", "float", "=", "0.25", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            gamma: Weighting parameter to balance loss for hard and easy examples.\n            alpha: Weighting parameter to balance loss for positive and negative examples.\n        \"\"\"", "\n", "super", "(", "SigmoidFocalClassificationLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.SigmoidFocalClassificationLoss.sigmoid_cross_entropy_with_logits": [[36, 55], ["torch.log1p", "torch.log1p", "torch.log1p", "torch.log1p", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sigmoid_cross_entropy_with_logits", "(", "input", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\" PyTorch Implementation for tf.nn.sigmoid_cross_entropy_with_logits:\n            max(x, 0) - x * z + log(1 + exp(-abs(x))) in\n            https://www.tensorflow.org/api_docs/python/tf/nn/sigmoid_cross_entropy_with_logits\n\n        Args:\n            input: (B, #proposals, #classes) float tensor.\n                Predicted logits for each class\n            target: (B, #proposals, #classes) float tensor.\n                One-hot encoded classification targets\n\n        Returns:\n            loss: (B, #proposals, #classes) float tensor.\n                Sigmoid cross entropy loss without reduction\n        \"\"\"", "\n", "loss", "=", "torch", ".", "clamp", "(", "input", ",", "min", "=", "0", ")", "-", "input", "*", "target", "+", "torch", ".", "log1p", "(", "torch", ".", "exp", "(", "-", "torch", ".", "abs", "(", "input", ")", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.SigmoidFocalClassificationLoss.forward": [[56, 82], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "losses.SigmoidFocalClassificationLoss.sigmoid_cross_entropy_with_logits", "weights.unsqueeze.unsqueeze.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "weights.unsqueeze.unsqueeze.shape.__len__", "loss.shape.__len__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.sigmoid", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.SigmoidFocalClassificationLoss.sigmoid_cross_entropy_with_logits", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_detection_dataset.ScannetDetectionDataset.__len__", "home.repos.pwc.inspect_result.xuxw98_backtoreality.scannet.scannet_detection_dataset.ScannetDetectionDataset.__len__"], ["", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ",", "target", ":", "torch", ".", "Tensor", ",", "weights", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: (B, #proposals, #classes) float tensor.\n                Predicted logits for each class\n            target: (B, #proposals, #classes) float tensor.\n                One-hot encoded classification targets\n            weights: (B, #proposals) float tensor.\n                Anchor-wise weights.\n\n        Returns:\n            weighted_loss: (B, #proposals, #classes) float tensor after weighting.\n        \"\"\"", "\n", "pred_sigmoid", "=", "torch", ".", "sigmoid", "(", "input", ")", "\n", "alpha_weight", "=", "target", "*", "self", ".", "alpha", "+", "(", "1", "-", "target", ")", "*", "(", "1", "-", "self", ".", "alpha", ")", "\n", "pt", "=", "target", "*", "(", "1.0", "-", "pred_sigmoid", ")", "+", "(", "1.0", "-", "target", ")", "*", "pred_sigmoid", "\n", "focal_weight", "=", "alpha_weight", "*", "torch", ".", "pow", "(", "pt", ",", "self", ".", "gamma", ")", "\n", "\n", "bce_loss", "=", "self", ".", "sigmoid_cross_entropy_with_logits", "(", "input", ",", "target", ")", "\n", "\n", "loss", "=", "focal_weight", "*", "bce_loss", "\n", "\n", "weights", "=", "weights", ".", "unsqueeze", "(", "-", "1", ")", "\n", "assert", "weights", ".", "shape", ".", "__len__", "(", ")", "==", "loss", ".", "shape", ".", "__len__", "(", ")", "\n", "\n", "return", "loss", "*", "weights", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.smoothl1_loss": [[5, 14], ["torch.abs", "torch.abs", "torch.where", "torch.where"], "function", ["None"], ["def", "smoothl1_loss", "(", "error", ",", "delta", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Smooth L1 loss.\n    x = error = pred - gt or dist(pred,gt)\n    0.5 * |x|^2                 if |x|<=d\n    |x| - 0.5 * d               if |x|>d\n    \"\"\"", "\n", "diff", "=", "torch", ".", "abs", "(", "error", ")", "\n", "loss", "=", "torch", ".", "where", "(", "diff", "<", "delta", ",", "0.5", "*", "diff", "*", "diff", "/", "delta", ",", "diff", "-", "0.5", "*", "delta", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.losses.l1_loss": [[16, 19], ["torch.abs", "torch.abs"], "function", ["None"], ["", "def", "l1_loss", "(", "error", ")", ":", "\n", "    ", "loss", "=", "torch", ".", "abs", "(", "error", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules._PointnetSAModuleBase.__init__": [[28, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "npoint", "=", "None", "\n", "self", ".", "groupers", "=", "None", "\n", "self", ".", "mlps", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules._PointnetSAModuleBase.forward": [[34, 76], ["xyz.transpose().contiguous", "range", "pointnet2_utils.gather_operation().transpose().contiguous", "len", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "new_features.squeeze.squeeze.squeeze", "new_features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.transpose", "pointnet2_utils.gather_operation().transpose", "new_features.squeeze.squeeze.size", "pointnet2_utils.gather_operation", "pointnet2_utils.furthest_point_sample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "\n", "features", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            (B, N, 3) tensor of the xyz coordinates of the features\n        features : torch.Tensor\n            (B, N, C) tensor of the descriptors of the the features\n\n        Returns\n        -------\n        new_xyz : torch.Tensor\n            (B, npoint, 3) tensor of the new features' xyz\n        new_features : torch.Tensor\n            (B, npoint, \\sum_k(mlps[k][-1])) tensor of the new_features descriptors\n        \"\"\"", "\n", "\n", "new_features_list", "=", "[", "]", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "\n", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "\n", "xyz", ",", "new_xyz", ",", "features", "\n", ")", "# (B, C, npoint, nsample)", "\n", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "\n", "new_features", "\n", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "new_xyz", ",", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleMSG.__init__": [[95, 125], ["pointnet2_modules._PointnetSAModuleBase.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "pointnet2_modules.PointnetSAModuleMSG.groupers.append", "pointnet2_modules.PointnetSAModuleMSG.mlps.append", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "npoint", ":", "int", ",", "\n", "radii", ":", "List", "[", "float", "]", ",", "\n", "nsamples", ":", "List", "[", "int", "]", ",", "\n", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "\n", "sample_uniformly", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "len", "(", "radii", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "mlps", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ",", "sample_uniformly", "=", "sample_uniformly", ")", "\n", "if", "npoint", "is", "not", "None", "else", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "self", ".", "mlps", ".", "append", "(", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModule.__init__": [[144, 161], ["pointnet2_modules.PointnetSAModuleMSG.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mlp", ":", "List", "[", "int", "]", ",", "\n", "npoint", ":", "int", "=", "None", ",", "\n", "radius", ":", "float", "=", "None", ",", "\n", "nsample", ":", "int", "=", "None", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "mlps", "=", "[", "mlp", "]", ",", "\n", "npoint", "=", "npoint", ",", "\n", "radii", "=", "[", "radius", "]", ",", "\n", "nsamples", "=", "[", "nsample", "]", ",", "\n", "bn", "=", "bn", ",", "\n", "use_xyz", "=", "use_xyz", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleVotes.__init__": [[168, 208], ["torch.Module.__init__", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll", "len"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mlp", ":", "List", "[", "int", "]", ",", "\n", "npoint", ":", "int", "=", "None", ",", "\n", "radius", ":", "float", "=", "None", ",", "\n", "nsample", ":", "int", "=", "None", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "\n", "pooling", ":", "str", "=", "'max'", ",", "\n", "sigma", ":", "float", "=", "None", ",", "# for RBF pooling", "\n", "normalize_xyz", ":", "bool", "=", "False", ",", "# noramlize local XYZ with radius", "\n", "sample_uniformly", ":", "bool", "=", "False", ",", "\n", "ret_unique_cnt", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "nsample", "=", "nsample", "\n", "self", ".", "pooling", "=", "pooling", "\n", "self", ".", "mlp_module", "=", "None", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "self", ".", "sigma", "=", "sigma", "\n", "if", "self", ".", "sigma", "is", "None", ":", "\n", "            ", "self", ".", "sigma", "=", "self", ".", "radius", "/", "2", "\n", "", "self", ".", "normalize_xyz", "=", "normalize_xyz", "\n", "self", ".", "ret_unique_cnt", "=", "ret_unique_cnt", "\n", "\n", "if", "npoint", "is", "not", "None", ":", "\n", "            ", "self", ".", "grouper", "=", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "\n", "use_xyz", "=", "use_xyz", ",", "ret_grouped_xyz", "=", "True", ",", "normalize_xyz", "=", "normalize_xyz", ",", "\n", "sample_uniformly", "=", "sample_uniformly", ",", "ret_unique_cnt", "=", "ret_unique_cnt", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "grouper", "=", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ",", "ret_grouped_xyz", "=", "True", ")", "\n", "\n", "", "mlp_spec", "=", "mlp", "\n", "if", "use_xyz", "and", "len", "(", "mlp_spec", ")", ">", "0", ":", "\n", "            ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "", "self", ".", "mlp_module", "=", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleVotes.forward": [[210, 273], ["xyz.transpose().contiguous", "pointnet2_modules.PointnetSAModuleVotes.mlp_module", "torch.avg_pool2d.squeeze", "pointnet2_utils.furthest_point_sample", "pointnet2_utils.gather_operation().transpose().contiguous", "pointnet2_modules.PointnetSAModuleVotes.grouper", "pointnet2_modules.PointnetSAModuleVotes.grouper", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "xyz.transpose", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pointnet2_utils.gather_operation().transpose", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.avg_pool2d.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "pointnet2_utils.gather_operation", "torch.avg_pool2d.size", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "grouped_xyz.pow().sum", "grouped_xyz.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "\n", "features", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "inds", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            (B, N, 3) tensor of the xyz coordinates of the features\n        features : torch.Tensor\n            (B, C, N) tensor of the descriptors of the the features\n        inds : torch.Tensor\n            (B, npoint) tensor that stores index to the xyz points (values in 0-N-1)\n\n        Returns\n        -------\n        new_xyz : torch.Tensor\n            (B, npoint, 3) tensor of the new features' xyz\n        new_features : torch.Tensor\n            (B, \\sum_k(mlps[k][-1]), npoint) tensor of the new_features descriptors\n        inds: torch.Tensor\n            (B, npoint) tensor of the inds\n        \"\"\"", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "inds", "is", "None", ":", "\n", "            ", "inds", "=", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", "", "else", ":", "\n", "            ", "assert", "(", "inds", ".", "shape", "[", "1", "]", "==", "self", ".", "npoint", ")", "\n", "", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "inds", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "if", "not", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "grouped_features", ",", "grouped_xyz", "=", "self", ".", "grouper", "(", "\n", "xyz", ",", "new_xyz", ",", "features", "\n", ")", "# (B, C, npoint, nsample)", "\n", "", "else", ":", "\n", "            ", "grouped_features", ",", "grouped_xyz", ",", "unique_cnt", "=", "self", ".", "grouper", "(", "\n", "xyz", ",", "new_xyz", ",", "features", "\n", ")", "# (B, C, npoint, nsample), (B,3,npoint,nsample), (B,npoint)", "\n", "\n", "", "new_features", "=", "self", ".", "mlp_module", "(", "\n", "grouped_features", "\n", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "if", "self", ".", "pooling", "==", "'max'", ":", "\n", "            ", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pooling", "==", "'avg'", ":", "\n", "            ", "new_features", "=", "F", ".", "avg_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pooling", "==", "'rbf'", ":", "\n", "# Use radial basis function kernel for weighted sum of features (normalized by nsample and sigma)", "\n", "# Ref: https://en.wikipedia.org/wiki/Radial_basis_function_kernel", "\n", "            ", "rbf", "=", "torch", ".", "exp", "(", "-", "1", "*", "grouped_xyz", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "False", ")", "/", "(", "self", ".", "sigma", "**", "2", ")", "/", "2", ")", "# (B, npoint, nsample)", "\n", "new_features", "=", "torch", ".", "sum", "(", "new_features", "*", "rbf", ".", "unsqueeze", "(", "1", ")", ",", "-", "1", ",", "keepdim", "=", "True", ")", "/", "float", "(", "self", ".", "nsample", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "\n", "if", "not", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "return", "new_xyz", ",", "new_features", ",", "inds", "\n", "", "else", ":", "\n", "            ", "return", "new_xyz", ",", "new_features", ",", "inds", ",", "unique_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleMSGVotes.__init__": [[582, 612], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "pointnet2_modules.PointnetSAModuleMSGVotes.groupers.append", "pointnet2_modules.PointnetSAModuleMSGVotes.mlps.append", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], N2, 1)", "\n", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], N2)", "\n", "\n", "if", "features2", "is", "not", "None", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "[", "new_features", ",", "features2", "]", ",", "\n", "dim", "=", "1", ")", "#(B, mlp[-1] + C2, N2)", "\n", "\n", "", "new_features", "=", "new_features", ".", "unsqueeze", "(", "-", "1", ")", "\n", "new_features", "=", "self", ".", "post_mlp", "(", "new_features", ")", "\n", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "    ", "from", "torch", ".", "autograd", "import", "Variable", "\n", "torch", ".", "manual_seed", "(", "1", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "1", ")", "\n", "xyz", "=", "Variable", "(", "torch", ".", "randn", "(", "2", ",", "9", ",", "3", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "xyz_feats", "=", "Variable", "(", "torch", ".", "randn", "(", "2", ",", "9", ",", "6", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "test_module", "=", "PointnetSAModuleMSG", "(", "\n", "npoint", "=", "2", ",", "radii", "=", "[", "5.0", ",", "10.0", "]", ",", "nsamples", "=", "[", "6", ",", "3", "]", ",", "mlps", "=", "[", "[", "9", ",", "3", "]", ",", "[", "9", ",", "6", "]", "]", "\n", ")", "\n", "test_module", ".", "cuda", "(", ")", "\n", "print", "(", "test_module", "(", "xyz", ",", "xyz_feats", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "1", ")", ":", "\n", "        ", "_", ",", "new_features", "=", "test_module", "(", "xyz", ",", "xyz_feats", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleMSGVotes.forward": [[613, 658], ["xyz.transpose().contiguous", "range", "pointnet2_utils.furthest_point_sample", "pointnet2_utils.gather_operation().transpose().contiguous", "len", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "new_features.squeeze.squeeze.squeeze", "new_features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xyz.transpose", "pointnet2_utils.gather_operation().transpose", "new_features.squeeze.squeeze.size", "pointnet2_utils.gather_operation"], "methods", ["None"], ["new_features", ".", "backward", "(", "\n", "torch", ".", "cuda", ".", "FloatTensor", "(", "*", "new_features", ".", "size", "(", ")", ")", ".", "fill_", "(", "1", ")", "\n", ")", "\n", "print", "(", "new_features", ")", "\n", "print", "(", "xyz", ".", "grad", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleCenters.__init__": [[389, 429], ["torch.Module.__init__", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll", "len"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["\n", "if", "npoint", "is", "not", "None", ":", "\n", "            ", "self", ".", "grouper", "=", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "\n", "use_xyz", "=", "use_xyz", ",", "ret_grouped_xyz", "=", "True", ",", "normalize_xyz", "=", "normalize_xyz", ",", "\n", "sample_uniformly", "=", "sample_uniformly", ",", "ret_unique_cnt", "=", "ret_unique_cnt", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "grouper", "=", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ",", "ret_grouped_xyz", "=", "True", ")", "\n", "\n", "", "mlp_spec", "=", "mlp", "\n", "if", "use_xyz", "and", "len", "(", "mlp_spec", ")", ">", "0", ":", "\n", "            ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "", "self", ".", "mlp_module", "=", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ")", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "\n", "features", ":", "torch", ".", "Tensor", ",", "\n", "centers", ":", "torch", ".", "Tensor", ")", "->", "(", "torch", ".", "Tensor", ")", ":", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            (B, N, 3) tensor of the xyz coordinates of the features\n        features : torch.Tensor\n            (B, C, N) tensor of the descriptors of the the features\n        inds : torch.Tensor\n            (B, npoint) tensor that stores index to the xyz points (values in 0-N-1)\n\n        Returns\n        -------\n        new_xyz : torch.Tensor\n            (B, npoint, 3) tensor of the new features' xyz\n        new_features : torch.Tensor\n            (B, \\sum_k(mlps[k][-1]), npoint) tensor of the new_features descriptors\n        inds: torch.Tensor\n            (B, npoint) tensor of the inds\n        \"\"\"", "\n", "new_xyz", "=", "centers", "\n", "\n", "if", "not", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "grouped_features", ",", "grouped_xyz", "=", "self", ".", "grouper", "(", "\n", "xyz", ",", "new_xyz", ",", "features", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleCenters.forward": [[431, 480], ["pointnet2_modules.PointnetSAModuleCenters.mlp_module", "torch.avg_pool2d.squeeze", "pointnet2_modules.PointnetSAModuleCenters.grouper", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.avg_pool2d.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "torch.avg_pool2d.size", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "grouped_xyz.pow().sum", "grouped_xyz.pow"], "methods", ["None"], ["\n", "", "new_features", "=", "self", ".", "mlp_module", "(", "\n", "grouped_features", "\n", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "if", "self", ".", "pooling", "==", "'max'", ":", "\n", "            ", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pooling", "==", "'avg'", ":", "\n", "            ", "new_features", "=", "F", ".", "avg_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "elif", "self", ".", "pooling", "==", "'rbf'", ":", "\n", "# Use radial basis function kernel for weighted sum of features (normalized by nsample and sigma)", "\n", "# Ref: https://en.wikipedia.org/wiki/Radial_basis_function_kernel", "\n", "            ", "rbf", "=", "torch", ".", "exp", "(", "-", "1", "*", "grouped_xyz", ".", "pow", "(", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "False", ")", "/", "(", "self", ".", "sigma", "**", "2", ")", "/", "2", ")", "# (B, npoint, nsample)", "\n", "new_features", "=", "torch", ".", "sum", "(", "new_features", "*", "rbf", ".", "unsqueeze", "(", "1", ")", ",", "-", "1", ",", "keepdim", "=", "True", ")", "/", "float", "(", "self", ".", "nsample", ")", "# (B, mlp[-1], npoint, 1)", "\n", "", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "\n", "if", "not", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "return", "new_features", "\n", "\n", "\n", "", "", "", "class", "PointnetFPModule", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "r\"\"\"Propigates the features of one set to another\n\n    Parameters\n    ----------\n    mlp : list\n        Pointnet module parameters\n    bn : bool\n        Use batchnorm\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "*", ",", "mlp", ":", "List", "[", "int", "]", ",", "bn", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mlp", "=", "pt_utils", ".", "SharedMLP", "(", "mlp", ",", "bn", "=", "bn", ")", "\n", "\n", "", "def", "forward", "(", "\n", "self", ",", "unknown", ":", "torch", ".", "Tensor", ",", "known", ":", "torch", ".", "Tensor", ",", "\n", "unknow_feats", ":", "torch", ".", "Tensor", ",", "known_feats", ":", "torch", ".", "Tensor", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "        "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetFPModule.__init__": [[671, 674], ["torch.Module.__init__", "pytorch_utils.SharedMLP"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], []], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetFPModule.forward": [[675, 721], ["torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "pointnet2_modules.PointnetFPModule.mlp", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "pointnet2_utils.three_nn", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pointnet2_utils.three_interpolate", "known_feats.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unknown.size", "known_feats.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetLFPModuleMSG.__init__": [[736, 767], ["torch.Module.__init__", "pytorch_utils.SharedMLP", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "len", "len", "len", "len", "pointnet2_modules.PointnetLFPModuleMSG.groupers.append", "pointnet2_modules.PointnetLFPModuleMSG.mlps.append", "pointnet2_utils.QueryAndGroup", "pytorch_utils.SharedMLP"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], []], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetLFPModuleMSG.forward": [[768, 811], ["range", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "len", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.squeeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "pointnet2_modules.PointnetLFPModuleMSG.post_mlp", "new_features_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], []], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.RandomDropout.__init__": [[41, 45], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "inplace", "=", "False", ")", ":", "\n", "        ", "super", "(", "RandomDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "inplace", "=", "inplace", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.RandomDropout.forward": [[46, 49], ["pytorch_utils.feature_dropout_no_scaling", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor().uniform_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "theta", "=", "torch", ".", "Tensor", "(", "1", ")", ".", "uniform_", "(", "0", ",", "self", ".", "p", ")", "[", "0", "]", "\n", "return", "pt_utils", ".", "feature_dropout_no_scaling", "(", "X", ",", "theta", ",", "self", ".", "train", ",", "self", ".", "inplace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.FurthestPointSampling.forward": [[52, 74], ["_ext.furthest_point_sampling", "ctx.mark_non_differentiable"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "xyz", ",", "npoint", ")", ":", "\n", "# type: (Any, torch.Tensor, int) -> torch.Tensor", "\n", "        ", "r\"\"\"\n        Uses iterative furthest point sampling to select a set of npoint features that have the largest\n        minimum distance\n\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            (B, N, 3) tensor where N > npoint\n        npoint : int32\n            number of features in the sampled set\n\n        Returns\n        -------\n        torch.Tensor\n            (B, npoint) tensor containing the set\n        \"\"\"", "\n", "fps_inds", "=", "_ext", ".", "furthest_point_sampling", "(", "xyz", ",", "npoint", ")", "\n", "ctx", ".", "mark_non_differentiable", "(", "fps_inds", ")", "\n", "return", "fps_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.FurthestPointSampling.backward": [[75, 78], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "xyz", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.GatherOperation.forward": [[84, 108], ["features.size", "_ext.gather_points"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "idx", ")", ":", "\n", "# type: (Any, torch.Tensor, torch.Tensor) -> torch.Tensor", "\n", "        ", "r\"\"\"\n\n        Parameters\n        ----------\n        features : torch.Tensor\n            (B, C, N) tensor\n\n        idx : torch.Tensor\n            (B, npoint) tensor of the features to gather\n\n        Returns\n        -------\n        torch.Tensor\n            (B, C, npoint) tensor\n        \"\"\"", "\n", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "C", ",", "N", ")", "\n", "\n", "return", "_ext", ".", "gather_points", "(", "features", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.GatherOperation.backward": [[109, 115], ["_ext.gather_points_grad", "grad_out.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "idx", ",", "C", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "\n", "grad_features", "=", "_ext", ".", "gather_points_grad", "(", "grad_out", ".", "contiguous", "(", ")", ",", "idx", ",", "N", ")", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.ThreeNN.forward": [[121, 143], ["_ext.three_nn", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "unknown", ",", "known", ")", ":", "\n", "# type: (Any, torch.Tensor, torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]", "\n", "        ", "r\"\"\"\n            Find the three nearest neighbors of unknown in known\n        Parameters\n        ----------\n        unknown : torch.Tensor\n            (B, n, 3) tensor of known features\n        known : torch.Tensor\n            (B, m, 3) tensor of unknown features\n\n        Returns\n        -------\n        dist : torch.Tensor\n            (B, n, 3) l2 distance to the three nearest neighbors\n        idx : torch.Tensor\n            (B, n, 3) index of 3 nearest neighbors\n        \"\"\"", "\n", "dist2", ",", "idx", "=", "_ext", ".", "three_nn", "(", "unknown", ",", "known", ")", "\n", "\n", "return", "torch", ".", "sqrt", "(", "dist2", ")", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.ThreeNN.backward": [[144, 147], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ",", "b", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.ThreeInterpolate.forward": [[153, 178], ["features.size", "idx.size", "_ext.three_interpolate"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "idx", ",", "weight", ")", ":", "\n", "# type(Any, torch.Tensor, torch.Tensor, torch.Tensor) -> Torch.Tensor", "\n", "        ", "r\"\"\"\n            Performs weight linear interpolation on 3 features\n        Parameters\n        ----------\n        features : torch.Tensor\n            (B, c, m) Features descriptors to be interpolated from\n        idx : torch.Tensor\n            (B, n, 3) three nearest neighbors of the target features in features\n        weight : torch.Tensor\n            (B, n, 3) weights\n\n        Returns\n        -------\n        torch.Tensor\n            (B, c, n) tensor of the interpolated features\n        \"\"\"", "\n", "B", ",", "c", ",", "m", "=", "features", ".", "size", "(", ")", "\n", "n", "=", "idx", ".", "size", "(", "1", ")", "\n", "\n", "ctx", ".", "three_interpolate_for_backward", "=", "(", "idx", ",", "weight", ",", "m", ")", "\n", "\n", "return", "_ext", ".", "three_interpolate", "(", "features", ",", "idx", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.ThreeInterpolate.backward": [[179, 204], ["_ext.three_interpolate_grad", "grad_out.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "# type: (Any, torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        grad_out : torch.Tensor\n            (B, c, n) tensor with gradients of ouputs\n\n        Returns\n        -------\n        grad_features : torch.Tensor\n            (B, c, m) tensor with gradients of features\n\n        None\n\n        None\n        \"\"\"", "\n", "idx", ",", "weight", ",", "m", "=", "ctx", ".", "three_interpolate_for_backward", "\n", "\n", "grad_features", "=", "_ext", ".", "three_interpolate_grad", "(", "\n", "grad_out", ".", "contiguous", "(", ")", ",", "idx", ",", "weight", ",", "m", "\n", ")", "\n", "\n", "return", "grad_features", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.GroupingOperation.forward": [[210, 233], ["idx.size", "features.size", "_ext.group_points"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "features", ",", "idx", ")", ":", "\n", "# type: (Any, torch.Tensor, torch.Tensor) -> torch.Tensor", "\n", "        ", "r\"\"\"\n\n        Parameters\n        ----------\n        features : torch.Tensor\n            (B, C, N) tensor of features to group\n        idx : torch.Tensor\n            (B, npoint, nsample) tensor containing the indicies of features to group with\n\n        Returns\n        -------\n        torch.Tensor\n            (B, C, npoint, nsample) tensor\n        \"\"\"", "\n", "B", ",", "nfeatures", ",", "nsample", "=", "idx", ".", "size", "(", ")", "\n", "_", ",", "C", ",", "N", "=", "features", ".", "size", "(", ")", "\n", "\n", "ctx", ".", "for_backwards", "=", "(", "idx", ",", "N", ")", "\n", "\n", "return", "_ext", ".", "group_points", "(", "features", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.GroupingOperation.backward": [[234, 255], ["_ext.group_points_grad", "grad_out.contiguous"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "# type: (Any, torch.tensor) -> Tuple[torch.Tensor, torch.Tensor]", "\n", "        ", "r\"\"\"\n\n        Parameters\n        ----------\n        grad_out : torch.Tensor\n            (B, C, npoint, nsample) tensor of the gradients of the output from forward\n\n        Returns\n        -------\n        torch.Tensor\n            (B, C, N) gradient of the features\n        None\n        \"\"\"", "\n", "idx", ",", "N", "=", "ctx", ".", "for_backwards", "\n", "\n", "grad_features", "=", "_ext", ".", "group_points_grad", "(", "grad_out", ".", "contiguous", "(", ")", ",", "idx", ",", "N", ")", "\n", "\n", "return", "grad_features", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.BallQuery.forward": [[261, 285], ["_ext.ball_query", "ctx.mark_non_differentiable"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", ":", "\n", "# type: (Any, float, int, torch.Tensor, torch.Tensor) -> torch.Tensor", "\n", "        ", "r\"\"\"\n\n        Parameters\n        ----------\n        radius : float\n            radius of the balls\n        nsample : int\n            maximum number of features in the balls\n        xyz : torch.Tensor\n            (B, N, 3) xyz coordinates of the features\n        new_xyz : torch.Tensor\n            (B, npoint, 3) centers of the ball query\n\n        Returns\n        -------\n        torch.Tensor\n            (B, npoint, nsample) tensor with the indicies of the features that form the query balls\n        \"\"\"", "\n", "inds", "=", "_ext", ".", "ball_query", "(", "new_xyz", ",", "xyz", ",", "radius", ",", "nsample", ")", "\n", "ctx", ".", "mark_non_differentiable", "(", "inds", ")", "\n", "return", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.BallQuery.backward": [[286, 289], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "a", "=", "None", ")", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.QueryAndGroup.__init__": [[306, 316], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "self", ",", "radius", ",", "nsample", ",", "use_xyz", "=", "True", ",", "ret_grouped_xyz", "=", "False", ",", "normalize_xyz", "=", "False", ",", "sample_uniformly", "=", "False", ",", "ret_unique_cnt", "=", "False", ")", ":", "\n", "# type: (QueryAndGroup, float, int, bool) -> None", "\n", "        ", "super", "(", "QueryAndGroup", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "radius", ",", "self", ".", "nsample", ",", "self", ".", "use_xyz", "=", "radius", ",", "nsample", ",", "use_xyz", "\n", "self", ".", "ret_grouped_xyz", "=", "ret_grouped_xyz", "\n", "self", ".", "normalize_xyz", "=", "normalize_xyz", "\n", "self", ".", "sample_uniformly", "=", "sample_uniformly", "\n", "self", ".", "ret_unique_cnt", "=", "ret_unique_cnt", "\n", "if", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "assert", "(", "self", ".", "sample_uniformly", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.QueryAndGroup.forward": [[317, 377], ["ball_query", "xyz.transpose().contiguous", "grouping_operation", "new_xyz.transpose().unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "grouping_operation", "ret.append", "ret.append", "len", "tuple", "range", "xyz.transpose", "new_xyz.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "xyz", ",", "new_xyz", ",", "features", "=", "None", ")", ":", "\n", "# type: (QueryAndGroup, torch.Tensor. torch.Tensor, torch.Tensor) -> Tuple[Torch.Tensor]", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            xyz coordinates of the features (B, N, 3)\n        new_xyz : torch.Tensor\n            centroids (B, npoint, 3)\n        features : torch.Tensor\n            Descriptors of the features (B, C, N)\n\n        Returns\n        -------\n        new_features : torch.Tensor\n            (B, 3 + C, npoint, nsample) tensor\n        \"\"\"", "\n", "idx", "=", "ball_query", "(", "self", ".", "radius", ",", "self", ".", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "\n", "if", "self", ".", "sample_uniformly", ":", "\n", "            ", "unique_cnt", "=", "torch", ".", "zeros", "(", "(", "idx", ".", "shape", "[", "0", "]", ",", "idx", ".", "shape", "[", "1", "]", ")", ")", "\n", "for", "i_batch", "in", "range", "(", "idx", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "i_region", "in", "range", "(", "idx", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "unique_ind", "=", "torch", ".", "unique", "(", "idx", "[", "i_batch", ",", "i_region", ",", ":", "]", ")", "\n", "num_unique", "=", "unique_ind", ".", "shape", "[", "0", "]", "\n", "unique_cnt", "[", "i_batch", ",", "i_region", "]", "=", "num_unique", "\n", "sample_ind", "=", "torch", ".", "randint", "(", "0", ",", "num_unique", ",", "(", "self", ".", "nsample", "-", "num_unique", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_ind", "=", "torch", ".", "cat", "(", "(", "unique_ind", ",", "unique_ind", "[", "sample_ind", "]", ")", ")", "\n", "idx", "[", "i_batch", ",", "i_region", ",", ":", "]", "=", "all_ind", "\n", "\n", "\n", "", "", "", "xyz_trans", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "grouped_xyz", "=", "grouping_operation", "(", "xyz_trans", ",", "idx", ")", "# (B, 3, npoint, nsample)", "\n", "grouped_xyz", "-=", "new_xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "if", "self", ".", "normalize_xyz", ":", "\n", "            ", "grouped_xyz", "/=", "self", ".", "radius", "\n", "\n", "", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "grouping_operation", "(", "features", ",", "idx", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "\n", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", "\n", ")", "# (B, C + 3, npoint, nsample)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "assert", "(", "\n", "self", ".", "use_xyz", "\n", ")", ",", "\"Cannot have not features and not use xyz as a feature!\"", "\n", "new_features", "=", "grouped_xyz", "\n", "\n", "", "ret", "=", "[", "new_features", "]", "\n", "if", "self", ".", "ret_grouped_xyz", ":", "\n", "            ", "ret", ".", "append", "(", "grouped_xyz", ")", "\n", "", "if", "self", ".", "ret_unique_cnt", ":", "\n", "            ", "ret", ".", "append", "(", "unique_cnt", ")", "\n", "", "if", "len", "(", "ret", ")", "==", "1", ":", "\n", "            ", "return", "ret", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "tuple", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.GroupAll.__init__": [[387, 392], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["def", "__init__", "(", "self", ",", "use_xyz", "=", "True", ",", "ret_grouped_xyz", "=", "False", ")", ":", "\n", "# type: (GroupAll, bool) -> None", "\n", "        ", "super", "(", "GroupAll", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "self", ".", "ret_grouped_xyz", "=", "ret_grouped_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.GroupAll.forward": [[393, 427], ["xyz.transpose().unsqueeze", "features.unsqueeze", "xyz.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "xyz", ",", "new_xyz", ",", "features", "=", "None", ")", ":", "\n", "# type: (GroupAll, torch.Tensor, torch.Tensor, torch.Tensor) -> Tuple[torch.Tensor]", "\n", "        ", "r\"\"\"\n        Parameters\n        ----------\n        xyz : torch.Tensor\n            xyz coordinates of the features (B, N, 3)\n        new_xyz : torch.Tensor\n            Ignored\n        features : torch.Tensor\n            Descriptors of the features (B, C, N)\n\n        Returns\n        -------\n        new_features : torch.Tensor\n            (B, C + 3, 1, N) tensor\n        \"\"\"", "\n", "\n", "grouped_xyz", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "if", "features", "is", "not", "None", ":", "\n", "            ", "grouped_features", "=", "features", ".", "unsqueeze", "(", "2", ")", "\n", "if", "self", ".", "use_xyz", ":", "\n", "                ", "new_features", "=", "torch", ".", "cat", "(", "\n", "[", "grouped_xyz", ",", "grouped_features", "]", ",", "dim", "=", "1", "\n", ")", "# (B, 3 + C, 1, N)", "\n", "", "else", ":", "\n", "                ", "new_features", "=", "grouped_features", "\n", "", "", "else", ":", "\n", "            ", "new_features", "=", "grouped_xyz", "\n", "\n", "", "if", "self", ".", "ret_grouped_xyz", ":", "\n", "            ", "return", "new_features", ",", "grouped_xyz", "\n", "", "else", ":", "\n", "            ", "return", "new_features", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.SharedMLP.__init__": [[13, 35], ["torch.ReLU", "torch.ReLU", "torch.Sequential.__init__", "range", "pytorch_utils.SharedMLP.add_module", "len", "pytorch_utils.Conv2d"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "args", ":", "List", "[", "int", "]", ",", "\n", "*", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "first", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "\n", "name", "+", "'layer{}'", ".", "format", "(", "i", ")", ",", "\n", "Conv2d", "(", "\n", "args", "[", "i", "]", ",", "\n", "args", "[", "i", "+", "1", "]", ",", "\n", "bn", "=", "(", "not", "first", "or", "not", "preact", "or", "(", "i", "!=", "0", ")", ")", "and", "bn", ",", "\n", "activation", "=", "activation", "\n", "if", "(", "not", "first", "or", "not", "preact", "or", "(", "i", "!=", "0", ")", ")", "else", "None", ",", "\n", "preact", "=", "preact", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils._BNBase.__init__": [[41, 47], ["torch.Sequential.__init__", "pytorch_utils._BNBase.add_module", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "batch_norm"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "batch_norm", "=", "None", ",", "name", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "name", "+", "\"bn\"", ",", "batch_norm", "(", "in_size", ")", ")", "\n", "\n", "nn", ".", "init", ".", "constant_", "(", "self", "[", "0", "]", ".", "weight", ",", "1.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", "[", "0", "]", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BatchNorm1d.__init__": [[51, 53], ["pytorch_utils._BNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ":", "int", ",", "*", ",", "name", ":", "str", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_size", ",", "batch_norm", "=", "nn", ".", "BatchNorm1d", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BatchNorm2d.__init__": [[57, 59], ["pytorch_utils._BNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ":", "int", ",", "name", ":", "str", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_size", ",", "batch_norm", "=", "nn", ".", "BatchNorm2d", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BatchNorm3d.__init__": [[63, 65], ["pytorch_utils._BNBase.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ":", "int", ",", "name", ":", "str", "=", "\"\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_size", ",", "batch_norm", "=", "nn", ".", "BatchNorm3d", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils._ConvBase.__init__": [[69, 121], ["torch.Sequential.__init__", "conv", "init", "pytorch_utils._ConvBase.add_module", "torch.init.constant_", "torch.init.constant_", "batch_norm", "batch_norm", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module", "pytorch_utils._ConvBase.add_module"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "None", ",", "\n", "batch_norm", "=", "None", ",", "\n", "bias", "=", "True", ",", "\n", "preact", "=", "False", ",", "\n", "name", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "bias", "=", "bias", "and", "(", "not", "bn", ")", "\n", "conv_unit", "=", "conv", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "bias", "\n", ")", "\n", "init", "(", "conv_unit", ".", "weight", ")", "\n", "if", "bias", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "conv_unit", ".", "bias", ",", "0", ")", "\n", "\n", "", "if", "bn", ":", "\n", "            ", "if", "not", "preact", ":", "\n", "                ", "bn_unit", "=", "batch_norm", "(", "out_size", ")", "\n", "", "else", ":", "\n", "                ", "bn_unit", "=", "batch_norm", "(", "in_size", ")", "\n", "\n", "", "", "if", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "bn_unit", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n", "", "", "self", ".", "add_module", "(", "name", "+", "'conv'", ",", "conv_unit", ")", "\n", "\n", "if", "not", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "bn_unit", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.Conv1d.__init__": [[125, 154], ["torch.ReLU", "torch.ReLU", "pytorch_utils._ConvBase.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "kernel_size", ":", "int", "=", "1", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "padding", ":", "int", "=", "0", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "nn", ".", "Conv1d", ",", "\n", "batch_norm", "=", "BatchNorm1d", ",", "\n", "bias", "=", "bias", ",", "\n", "preact", "=", "preact", ",", "\n", "name", "=", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.Conv2d.__init__": [[159, 188], ["torch.ReLU", "torch.ReLU", "pytorch_utils._ConvBase.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "kernel_size", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "stride", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "padding", ":", "Tuple", "[", "int", ",", "int", "]", "=", "(", "0", ",", "0", ")", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "nn", ".", "Conv2d", ",", "\n", "batch_norm", "=", "BatchNorm2d", ",", "\n", "bias", "=", "bias", ",", "\n", "preact", "=", "preact", ",", "\n", "name", "=", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.Conv3d.__init__": [[193, 222], ["torch.ReLU", "torch.ReLU", "pytorch_utils._ConvBase.__init__"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "kernel_size", ":", "Tuple", "[", "int", ",", "int", ",", "int", "]", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "stride", ":", "Tuple", "[", "int", ",", "int", ",", "int", "]", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", ":", "Tuple", "[", "int", ",", "int", ",", "int", "]", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "nn", ".", "init", ".", "kaiming_normal_", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "in_size", ",", "\n", "out_size", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "activation", ",", "\n", "bn", ",", "\n", "init", ",", "\n", "conv", "=", "nn", ".", "Conv3d", ",", "\n", "batch_norm", "=", "BatchNorm3d", ",", "\n", "bias", "=", "bias", ",", "\n", "preact", "=", "preact", ",", "\n", "name", "=", "name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.FC.__init__": [[227, 261], ["torch.ReLU", "torch.ReLU", "torch.Sequential.__init__", "torch.Linear", "torch.Linear", "pytorch_utils.FC.add_module", "init", "torch.init.constant_", "torch.init.constant_", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.FC.add_module", "pytorch_utils.BatchNorm1d", "pytorch_utils.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_size", ":", "int", ",", "\n", "out_size", ":", "int", ",", "\n", "*", ",", "\n", "activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "bn", ":", "bool", "=", "False", ",", "\n", "init", "=", "None", ",", "\n", "preact", ":", "bool", "=", "False", ",", "\n", "name", ":", "str", "=", "\"\"", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "fc", "=", "nn", ".", "Linear", "(", "in_size", ",", "out_size", ",", "bias", "=", "not", "bn", ")", "\n", "if", "init", "is", "not", "None", ":", "\n", "            ", "init", "(", "fc", ".", "weight", ")", "\n", "", "if", "not", "bn", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "fc", ".", "bias", ",", "0", ")", "\n", "\n", "", "if", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "BatchNorm1d", "(", "in_size", ")", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n", "", "", "self", ".", "add_module", "(", "name", "+", "'fc'", ",", "fc", ")", "\n", "\n", "if", "not", "preact", ":", "\n", "            ", "if", "bn", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'bn'", ",", "BatchNorm1d", "(", "out_size", ")", ")", "\n", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_module", "(", "name", "+", "'activation'", ",", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.__init__": [[273, 290], ["pytorch_utils.BNMomentumScheduler.step", "isinstance", "RuntimeError", "type"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step"], ["    ", "def", "__init__", "(", "\n", "self", ",", "model", ",", "bn_lambda", ",", "last_epoch", "=", "-", "1", ",", "\n", "setter", "=", "set_bn_momentum_default", "\n", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Class '{}' is not a PyTorch nn Module\"", ".", "format", "(", "\n", "type", "(", "model", ")", ".", "__name__", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "model", "=", "model", "\n", "self", ".", "setter", "=", "setter", "\n", "self", ".", "lmbd", "=", "bn_lambda", "\n", "\n", "self", ".", "step", "(", "last_epoch", "+", "1", ")", "\n", "self", ".", "last_epoch", "=", "last_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step": [[291, 297], ["pytorch_utils.BNMomentumScheduler.model.apply", "pytorch_utils.BNMomentumScheduler.setter", "pytorch_utils.BNMomentumScheduler.lmbd"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "\n", "", "self", ".", "last_epoch", "=", "epoch", "\n", "self", ".", "model", ".", "apply", "(", "self", ".", "setter", "(", "self", ".", "lmbd", "(", "epoch", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.set_bn_momentum_default": [[262, 269], ["isinstance"], "function", ["None"], ["", "", "", "", "def", "set_bn_momentum_default", "(", "bn_momentum", ")", ":", "\n", "\n", "    ", "def", "fn", "(", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm1d", ",", "nn", ".", "BatchNorm2d", ",", "nn", ".", "BatchNorm3d", ")", ")", ":", "\n", "            ", "m", ".", "momentum", "=", "bn_momentum", "\n", "\n", "", "", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_test.test_interpolation_grad": [[18, 31], ["torch.randn().float().cuda", "torch.autograd.gradcheck", "torch.from_numpy().int().cuda", "torch.from_numpy().float().cuda", "pointnet2_utils.three_interpolate", "torch.randn().float", "torch.from_numpy().int", "torch.from_numpy().float", "torch.randn", "torch.from_numpy", "torch.from_numpy", "numpy.array", "numpy.array"], "function", ["None"], ["def", "test_interpolation_grad", "(", ")", ":", "\n", "    ", "batch_size", "=", "1", "\n", "feat_dim", "=", "2", "\n", "m", "=", "4", "\n", "feats", "=", "torch", ".", "randn", "(", "batch_size", ",", "feat_dim", ",", "m", ",", "requires_grad", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "def", "interpolate_func", "(", "inputs", ")", ":", "\n", "        ", "idx", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "1", ",", "2", ",", "3", "]", "]", "]", ")", ")", ".", "int", "(", ")", ".", "cuda", "(", ")", "\n", "weight", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "[", "[", "1", ",", "1", ",", "1", "]", ",", "[", "2", ",", "2", ",", "2", "]", "]", "]", ")", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "interpolated_feats", "=", "pointnet2_utils", ".", "three_interpolate", "(", "inputs", ",", "idx", ",", "weight", ")", "\n", "return", "interpolated_feats", "\n", "\n", "", "assert", "(", "gradcheck", "(", "interpolate_func", ",", "feats", ",", "atol", "=", "1e-1", ",", "rtol", "=", "1e-1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleVotesRlt.__init__": [[278, 319], ["torch.Module.__init__", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroupRlt", "pointnet2_utils.GroupAll", "len"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["\n", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "\n", "npoint", ":", "int", ",", "\n", "radii", ":", "List", "[", "float", "]", ",", "\n", "nsamples", ":", "List", "[", "int", "]", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "\n", "sample_uniformly", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "len", "(", "mlps", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "radii", ")", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ",", "sample_uniformly", "=", "sample_uniformly", ")", "\n", "if", "npoint", "is", "not", "None", "else", "pointnet2_utils", ".", "GroupAll", "(", "use_xyz", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "self", ".", "mlps", ".", "append", "(", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "xyz", ":", "torch", ".", "Tensor", ",", "\n", "features", ":", "torch", ".", "Tensor", "=", "None", ",", "inds", ":", "torch", ".", "Tensor", "=", "None", ")", "->", "(", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleVotesRlt.forward": [[321, 384], ["xyz.transpose().contiguous", "pointnet2_modules.PointnetSAModuleVotesRlt.mlp_module", "torch.avg_pool2d.squeeze", "pointnet2_utils.furthest_point_sample", "pointnet2_utils.gather_operation().transpose().contiguous", "pointnet2_modules.PointnetSAModuleVotesRlt.grouper", "pointnet2_modules.PointnetSAModuleVotesRlt.grouper", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "xyz.transpose", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pointnet2_utils.gather_operation().transpose", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.avg_pool2d.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "pointnet2_utils.gather_operation", "torch.avg_pool2d.size", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "grouped_xyz.pow().sum", "grouped_xyz.pow"], "methods", ["None"], ["\n", "new_features_list", "=", "[", "]", "\n", "\n", "xyz_flipped", "=", "xyz", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "inds", "is", "None", ":", "\n", "            ", "inds", "=", "pointnet2_utils", ".", "furthest_point_sample", "(", "xyz", ",", "self", ".", "npoint", ")", "\n", "", "new_xyz", "=", "pointnet2_utils", ".", "gather_operation", "(", "\n", "xyz_flipped", ",", "inds", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "if", "self", ".", "npoint", "is", "not", "None", "else", "None", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "\n", "xyz", ",", "new_xyz", ",", "features", "\n", ")", "# (B, C, npoint, nsample)", "\n", "new_features", "=", "self", ".", "mlps", "[", "i", "]", "(", "\n", "new_features", "\n", ")", "# (B, mlp[-1], npoint, nsample)", "\n", "new_features", "=", "F", ".", "max_pool2d", "(", "\n", "new_features", ",", "kernel_size", "=", "[", "1", ",", "new_features", ".", "size", "(", "3", ")", "]", "\n", ")", "# (B, mlp[-1], npoint, 1)", "\n", "new_features", "=", "new_features", ".", "squeeze", "(", "-", "1", ")", "# (B, mlp[-1], npoint)", "\n", "\n", "new_features_list", ".", "append", "(", "new_features", ")", "\n", "\n", "", "return", "new_xyz", ",", "torch", ".", "cat", "(", "new_features_list", ",", "dim", "=", "1", ")", ",", "inds", "\n", "\n", "\n", "", "", "class", "PointnetSAModuleCenters", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "''' Modified based on _PointnetSAModuleBase and PointnetSAModuleMSG\n    with extra support for returning point indices for getting their GT votes '''", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mlp", ":", "List", "[", "int", "]", ",", "\n", "npoint", ":", "int", "=", "None", ",", "\n", "radius", ":", "float", "=", "None", ",", "\n", "nsample", ":", "int", "=", "None", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "\n", "pooling", ":", "str", "=", "'max'", ",", "\n", "sigma", ":", "float", "=", "None", ",", "# for RBF pooling", "\n", "normalize_xyz", ":", "bool", "=", "False", ",", "# noramlize local XYZ with radius", "\n", "sample_uniformly", ":", "bool", "=", "False", ",", "\n", "ret_unique_cnt", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "npoint", "=", "npoint", "\n", "self", ".", "radius", "=", "radius", "\n", "self", ".", "nsample", "=", "nsample", "\n", "self", ".", "pooling", "=", "pooling", "\n", "self", ".", "mlp_module", "=", "None", "\n", "self", ".", "use_xyz", "=", "use_xyz", "\n", "self", ".", "sigma", "=", "sigma", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__": [[485, 525], ["torch.Module.__init__", "pytorch_utils.SharedMLP", "pointnet2_utils.QueryAndGroup", "pointnet2_utils.GroupAll", "len"], "methods", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.__init__"], ["\n", "\n", "if", "known", "is", "not", "None", ":", "\n", "            ", "dist", ",", "idx", "=", "pointnet2_utils", ".", "three_nn", "(", "unknown", ",", "known", ")", "\n", "dist_recip", "=", "1.0", "/", "(", "dist", "+", "1e-8", ")", "\n", "norm", "=", "torch", ".", "sum", "(", "dist_recip", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "weight", "=", "dist_recip", "/", "norm", "\n", "\n", "interpolated_feats", "=", "pointnet2_utils", ".", "three_interpolate", "(", "\n", "known_feats", ",", "idx", ",", "weight", "\n", ")", "\n", "", "else", ":", "\n", "            ", "interpolated_feats", "=", "known_feats", ".", "expand", "(", "\n", "*", "known_feats", ".", "size", "(", ")", "[", "0", ":", "2", "]", ",", "unknown", ".", "size", "(", "1", ")", "\n", ")", "\n", "\n", "", "if", "unknow_feats", "is", "not", "None", ":", "\n", "            ", "new_features", "=", "torch", ".", "cat", "(", "[", "interpolated_feats", ",", "unknow_feats", "]", ",", "\n", "dim", "=", "1", ")", "#(B, C2 + C1, n)", "\n", "", "else", ":", "\n", "            ", "new_features", "=", "interpolated_feats", "\n", "\n", "", "new_features", "=", "new_features", ".", "unsqueeze", "(", "-", "1", ")", "\n", "new_features", "=", "self", ".", "mlp", "(", "new_features", ")", "\n", "\n", "return", "new_features", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "\n", "", "", "class", "PointnetLFPModuleMSG", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "''' Modified based on _PointnetSAModuleBase and PointnetSAModuleMSG\n    learnable feature propagation layer.'''", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "mlps", ":", "List", "[", "List", "[", "int", "]", "]", ",", "\n", "radii", ":", "List", "[", "float", "]", ",", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.PointnetSAModuleOffset.forward": [[527, 577], ["pointnet2_modules.PointnetSAModuleOffset.mlp_module", "torch.avg_pool2d.squeeze", "pointnet2_modules.PointnetSAModuleOffset.grouper", "pointnet2_modules.PointnetSAModuleOffset.grouper", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.avg_pool2d.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "float", "torch.avg_pool2d.size", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "torch.exp.unsqueeze", "grouped_xyz.pow().sum", "grouped_xyz.pow"], "methods", ["None"], ["post_mlp", ":", "List", "[", "int", "]", ",", "\n", "bn", ":", "bool", "=", "True", ",", "\n", "use_xyz", ":", "bool", "=", "True", ",", "\n", "sample_uniformly", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "len", "(", "mlps", ")", "==", "len", "(", "nsamples", ")", "==", "len", "(", "radii", ")", ")", "\n", "\n", "self", ".", "post_mlp", "=", "pt_utils", ".", "SharedMLP", "(", "post_mlp", ",", "bn", "=", "bn", ")", "\n", "\n", "self", ".", "groupers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mlps", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "radii", ")", ")", ":", "\n", "            ", "radius", "=", "radii", "[", "i", "]", "\n", "nsample", "=", "nsamples", "[", "i", "]", "\n", "self", ".", "groupers", ".", "append", "(", "\n", "pointnet2_utils", ".", "QueryAndGroup", "(", "radius", ",", "nsample", ",", "use_xyz", "=", "use_xyz", ",", "\n", "sample_uniformly", "=", "sample_uniformly", ")", "\n", ")", "\n", "mlp_spec", "=", "mlps", "[", "i", "]", "\n", "if", "use_xyz", ":", "\n", "                ", "mlp_spec", "[", "0", "]", "+=", "3", "\n", "\n", "", "self", ".", "mlps", ".", "append", "(", "pt_utils", ".", "SharedMLP", "(", "mlp_spec", ",", "bn", "=", "bn", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "xyz2", ":", "torch", ".", "Tensor", ",", "xyz1", ":", "torch", ".", "Tensor", ",", "\n", "features2", ":", "torch", ".", "Tensor", ",", "features1", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "r\"\"\" Propagate features from xyz1 to xyz2.\n        Parameters\n        ----------\n        xyz2 : torch.Tensor\n            (B, N2, 3) tensor of the xyz coordinates of the features\n        xyz1 : torch.Tensor\n            (B, N1, 3) tensor of the xyz coordinates of the features\n        features2 : torch.Tensor\n            (B, C2, N2) tensor of the descriptors of the the features\n        features1 : torch.Tensor\n            (B, C1, N1) tensor of the descriptors of the the features\n\n        Returns\n        -------\n        new_features1 : torch.Tensor\n            (B, \\sum_k(mlps[k][-1]), N1) tensor of the new_features descriptors\n        \"\"\"", "\n", "new_features_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "groupers", ")", ")", ":", "\n", "            ", "new_features", "=", "self", ".", "groupers", "[", "i", "]", "(", "\n", "xyz1", ",", "xyz2", ",", "features1", "\n", ")", "# (B, C1, N2, nsample)", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_modules.ThreeNNInterpolate": [[722, 731], ["pointnet2_utils.three_nn", "torch.sum", "torch.sum", "torch.sum", "pointnet2_utils.three_interpolate"], "function", ["None"], []], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR.parse_option": [[24, 106], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["def", "parse_option", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# Model", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'backbone width'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_target'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Proposal number [default: 256]'", ")", "\n", "parser", ".", "add_argument", "(", "'--sampling'", ",", "default", "=", "'kps'", ",", "type", "=", "str", ",", "help", "=", "'Query points sampling method (kps, fps)'", ")", "\n", "\n", "# Transformer", "\n", "parser", ".", "add_argument", "(", "'--nhead'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'multi-head number'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_decoder_layers'", ",", "default", "=", "6", ",", "type", "=", "int", ",", "help", "=", "'number of decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--dim_feedforward'", ",", "default", "=", "2048", ",", "type", "=", "int", ",", "help", "=", "'dim_feedforward'", ")", "\n", "parser", ".", "add_argument", "(", "'--transformer_dropout'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'transformer_dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--transformer_activation'", ",", "default", "=", "'relu'", ",", "type", "=", "str", ",", "help", "=", "'transformer_activation'", ")", "\n", "parser", ".", "add_argument", "(", "'--self_position_embedding'", ",", "default", "=", "'loc_learned'", ",", "type", "=", "str", ",", "\n", "help", "=", "'position_embedding in self attention (none, xyz_learned, loc_learned)'", ")", "\n", "parser", ".", "add_argument", "(", "'--cross_position_embedding'", ",", "default", "=", "'xyz_learned'", ",", "type", "=", "str", ",", "\n", "help", "=", "'position embedding in cross attention (none, xyz_learned)'", ")", "\n", "\n", "# Loss", "\n", "parser", ".", "add_argument", "(", "'--query_points_generator_loss_coef'", ",", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--obj_loss_coef'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'Loss weight for objectness loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--box_loss_coef'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "'Loss weight for box loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--sem_cls_loss_coef'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'Loss weight for classification loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_loss_type'", ",", "default", "=", "'smoothl1'", ",", "type", "=", "str", ",", "help", "=", "'(smoothl1, l1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_delta'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'delta for smoothl1 loss in center loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--size_loss_type'", ",", "default", "=", "'smoothl1'", ",", "type", "=", "str", ",", "help", "=", "'(smoothl1, l1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--size_delta'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'delta for smoothl1 loss in size loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--heading_loss_type'", ",", "default", "=", "'smoothl1'", ",", "type", "=", "str", ",", "help", "=", "'(smoothl1, l1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--heading_delta'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'delta for smoothl1 loss in heading loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--query_points_obj_topk'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'query_points_obj_topk'", ")", "\n", "\n", "# Data", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'Batch Size during training [default: 4]'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'scannet'", ",", "help", "=", "'Dataset name. sunrgbd or scannet. [default: scannet]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_point'", ",", "type", "=", "int", ",", "default", "=", "50000", ",", "help", "=", "'Point Number [default: 50000]'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_height'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use height signal in input.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_color'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use RGB color in input.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_sunrgbd_v2'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use V2 box labels for SUN RGB-D dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'num of workers to use'", ")", "\n", "\n", "# Training", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Epoch to run [default: 1]'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'Epoch to run [default: 180]'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adamW'", ",", "help", "=", "'optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum for SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.0005", ",", "\n", "help", "=", "'Optimization L2 weight decay [default: 0.0005]'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.004", ",", "\n", "help", "=", "'Initial learning rate for all except decoder [default: 0.004]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder_learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.0004", ",", "\n", "help", "=", "'Initial learning rate for decoder [default: 0.0004]'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-scheduler'", ",", "type", "=", "str", ",", "default", "=", "'step'", ",", "\n", "choices", "=", "[", "\"step\"", ",", "\"cosine\"", "]", ",", "help", "=", "\"learning rate scheduler\"", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-epoch'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'warmup epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-multiplier'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'warmup multiplier'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_epochs'", ",", "type", "=", "int", ",", "default", "=", "[", "280", ",", "340", "]", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'for step scheduler. where to decay lr, can be a list'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'for step scheduler. decay rate for learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_norm'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'gradient clipping max norm'", ")", "\n", "parser", ".", "add_argument", "(", "'--bn_momentum'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'Default bn momeuntum'", ")", "\n", "parser", ".", "add_argument", "(", "'--syncbn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to use sync bn'", ")", "\n", "\n", "# io", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "default", "=", "None", ",", "help", "=", "'Model checkpoint path [default: None]'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "default", "=", "'log'", ",", "help", "=", "'Dump dir to save model checkpoint [default: log]'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_freq'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'val frequency'", ")", "\n", "\n", "# others", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "help", "=", "'local rank for DistributedDataParallel'", ")", "\n", "parser", ".", "add_argument", "(", "'--ap_iou_thresholds'", ",", "type", "=", "float", ",", "default", "=", "[", "0.25", ",", "0.5", "]", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'A list of AP IoU thresholds [default: 0.25,0.5]'", ")", "\n", "parser", ".", "add_argument", "(", "\"--rng_seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'manual seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_jitter'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'magnitude of perturbation at the center [default: 0.1 (means 10%% jitter of the object size)].'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_without_mesh'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Not use the mesh information.'", ")", "\n", "\n", "args", ",", "unparsed", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR.load_checkpoint": [[108, 121], ["logger.info", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "scheduler.load_state_dict", "logger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "load_checkpoint", "(", "args", ",", "model", ",", "optimizer", ",", "scheduler", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "checkpoint_path", ")", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "\n", "logger", ".", "info", "(", "\"=> loaded successfully '{}' (epoch {})\"", ".", "format", "(", "args", ".", "checkpoint_path", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR.save_checkpoint": [[123, 145], ["logger.info", "model.state_dict", "optimizer.state_dict", "scheduler.state_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "logger.info", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "logger.info", "print", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "def", "save_checkpoint", "(", "args", ",", "epoch", ",", "model", ",", "optimizer", ",", "scheduler", ",", "save_cur", "=", "False", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'config'", ":", "args", ",", "\n", "'save_path'", ":", "''", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "\n", "if", "save_cur", ":", "\n", "        ", "state", "[", "'save_path'", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", "\n", "logger", ".", "info", "(", "\"Saved in {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", ")", "\n", "", "elif", "epoch", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "        ", "state", "[", "'save_path'", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", "\n", "logger", ".", "info", "(", "\"Saved in {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"not saving checkpoint\"", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR.get_loader": [[147, 227], ["print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "numpy.random.seed", "sys.path.append", "ScannetDatasetConfig_md40", "ScannetDetectionDataset", "ScannetDetectionDataset", "ScannetDetectionDataset", "ScannetDetectionDataset", "NotImplementedError", "os.path.join", "len", "len", "len", "len", "len", "len", "len", "len", "numpy.random.get_state"], "function", ["None"], ["", "", "def", "get_loader", "(", "args", ")", ":", "\n", "# Init datasets and dataloaders", "\n", "    ", "def", "my_worker_init_fn", "(", "worker_id", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n", "# Create Dataset and Dataloader", "\n", "", "if", "args", ".", "dataset", "==", "'scannet'", ":", "\n", "        ", "sys", ".", "path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'scannet'", ")", ")", "\n", "from", "scannet", ".", "scannet_detection_dataset", "import", "ScannetDetectionDataset", "\n", "from", "scannet", ".", "model_util_scannet", "import", "ScannetDatasetConfig_md40", "\n", "DATASET_WITHOUT_MESH", "=", "args", ".", "dataset_without_mesh", "\n", "if", "DATASET_WITHOUT_MESH", ":", "\n", "            ", "data_path", "=", "'scannet_train_detection_data_md40_obj_aug'", "\n", "", "else", ":", "\n", "            ", "data_path", "=", "'scannet_train_detection_data_md40_obj_mesh_aug'", "\n", "\n", "", "DATASET_CONFIG", "=", "ScannetDatasetConfig_md40", "(", ")", "\n", "TRAIN_DATASET_S", "=", "ScannetDetectionDataset", "(", "'train_aug'", ",", "data_path", "=", "data_path", ",", "num_points", "=", "args", ".", "num_point", ",", "\n", "augment", "=", "True", ",", "\n", "use_color", "=", "True", "if", "args", ".", "use_color", "else", "False", ",", "\n", "use_height", "=", "True", "if", "args", ".", "use_height", "else", "False", ")", "\n", "TEST_DATASET_S", "=", "ScannetDetectionDataset", "(", "'val'", ",", "data_path", "=", "data_path", ",", "num_points", "=", "args", ".", "num_point", ",", "\n", "augment", "=", "False", ",", "\n", "use_color", "=", "True", "if", "args", ".", "use_color", "else", "False", ",", "\n", "use_height", "=", "True", "if", "args", ".", "use_height", "else", "False", ")", "\n", "TRAIN_DATASET_T", "=", "ScannetDetectionDataset", "(", "'train'", ",", "'scannet_train_detection_data_md40'", ",", "num_points", "=", "args", ".", "num_point", ",", "\n", "augment", "=", "True", ",", "center_jitter", "=", "args", ".", "center_jitter", ",", "\n", "use_color", "=", "True", "if", "args", ".", "use_color", "else", "False", ",", "\n", "use_height", "=", "True", "if", "args", ".", "use_height", "else", "False", ")", "\n", "TEST_DATASET_T", "=", "ScannetDetectionDataset", "(", "'val'", ",", "'scannet_train_detection_data_md40'", ",", "num_points", "=", "args", ".", "num_point", ",", "\n", "augment", "=", "False", ",", "\n", "use_color", "=", "True", "if", "args", ".", "use_color", "else", "False", ",", "\n", "use_height", "=", "True", "if", "args", ".", "use_height", "else", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Unknown dataset {args.dataset}. Exiting...'", ")", "\n", "\n", "", "print", "(", "f\"train_len: {len(TRAIN_DATASET_S)}, {len(TRAIN_DATASET_T)}. test_len: {len(TEST_DATASET_S)}, {len(TEST_DATASET_T)}\"", ")", "\n", "\n", "train_sampler_S", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "TRAIN_DATASET_S", ")", "\n", "train_loader_S", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_DATASET_S", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler_S", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "test_sampler_S", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "TEST_DATASET_S", ",", "shuffle", "=", "False", ")", "\n", "test_loader_S", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TEST_DATASET_S", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "test_sampler_S", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "train_sampler_T", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "TRAIN_DATASET_T", ")", "\n", "train_loader_T", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_DATASET_T", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler_T", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "test_sampler_T", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "TEST_DATASET_T", ",", "shuffle", "=", "False", ")", "\n", "test_loader_T", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TEST_DATASET_T", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "test_sampler_T", ",", "\n", "drop_last", "=", "False", ")", "\n", "print", "(", "f\"train_loader_len: {len(train_loader_S)}, {len(train_loader_T)}. test_loader_len: {len(test_loader_S)}, {len(test_loader_T)}\"", ")", "\n", "\n", "return", "train_loader_S", ",", "test_loader_S", ",", "train_loader_T", ",", "test_loader_T", ",", "DATASET_CONFIG", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR.get_model": [[229, 254], ["models.GroupFreeDetector_DA", "int", "int"], "function", ["None"], ["", "def", "get_model", "(", "args", ",", "DATASET_CONFIG", ")", ":", "\n", "    ", "if", "args", ".", "use_height", ":", "\n", "        ", "num_input_channel", "=", "int", "(", "args", ".", "use_color", ")", "*", "3", "+", "1", "\n", "", "else", ":", "\n", "        ", "num_input_channel", "=", "int", "(", "args", ".", "use_color", ")", "*", "3", "\n", "", "model", "=", "GroupFreeDetector_DA", "(", "num_class", "=", "DATASET_CONFIG", ".", "num_class", ",", "\n", "num_heading_bin", "=", "DATASET_CONFIG", ".", "num_heading_bin", ",", "\n", "num_size_cluster", "=", "DATASET_CONFIG", ".", "num_size_cluster", ",", "\n", "mean_size_arr", "=", "DATASET_CONFIG", ".", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "num_input_channel", ",", "\n", "width", "=", "args", ".", "width", ",", "\n", "bn_momentum", "=", "args", ".", "bn_momentum", ",", "\n", "sync_bn", "=", "True", "if", "args", ".", "syncbn", "else", "False", ",", "\n", "num_proposal", "=", "args", ".", "num_target", ",", "\n", "sampling", "=", "args", ".", "sampling", ",", "\n", "dropout", "=", "args", ".", "transformer_dropout", ",", "\n", "activation", "=", "args", ".", "transformer_activation", ",", "\n", "nhead", "=", "args", ".", "nhead", ",", "\n", "num_decoder_layers", "=", "args", ".", "num_decoder_layers", ",", "\n", "dim_feedforward", "=", "args", ".", "dim_feedforward", ",", "\n", "self_position_embedding", "=", "args", ".", "self_position_embedding", ",", "\n", "cross_position_embedding", "=", "args", ".", "cross_position_embedding", ")", "\n", "\n", "criterion", "=", "get_loss_DA", "\n", "return", "model", ",", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR.main": [[256, 315], ["train_GF_BR.get_loader", "train_GF_BR.get_model", "utils.get_scheduler", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "range", "train_GF_BR.evaluate_one_epoch", "train_GF_BR.save_checkpoint", "logger.info", "os.path.join", "torch.get_rank", "logger.info", "torch.AdamW", "len", "os.path.isfile", "train_GF_BR.load_checkpoint", "train_loader_S.sampler.set_epoch", "train_loader_T.sampler.set_epoch", "time.time", "train_GF_BR.train_one_epoch", "logger.info", "str", "train_GF_BR.evaluate_one_epoch", "torch.get_rank", "train_GF_BR.save_checkpoint", "os.path.join", "time.time", "torch.nn.parallel.DistributedDataParallel.named_parameters", "torch.nn.parallel.DistributedDataParallel.named_parameters"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.get_loader", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.get_model", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.get_scheduler", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.evaluate_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.save_checkpoint", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.load_checkpoint", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.train_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.evaluate_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.save_checkpoint"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "train_loader_S", ",", "test_loader_S", ",", "train_loader_T", ",", "test_loader_T", ",", "DATASET_CONFIG", "=", "get_loader", "(", "args", ")", "\n", "\n", "model", ",", "criterion", "=", "get_model", "(", "args", ",", "DATASET_CONFIG", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "str", "(", "model", ")", ")", "\n", "# optimizer", "\n", "", "if", "args", ".", "optimizer", "==", "'adamW'", ":", "\n", "        ", "param_dicts", "=", "[", "\n", "{", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "\"decoder\"", "not", "in", "n", "and", "p", ".", "requires_grad", "]", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "\"decoder\"", "in", "n", "and", "p", ".", "requires_grad", "]", ",", "\n", "\"lr\"", ":", "args", ".", "decoder_learning_rate", ",", "\n", "}", ",", "\n", "]", "\n", "optimizer", "=", "optim", ".", "AdamW", "(", "param_dicts", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "scheduler", "=", "get_scheduler", "(", "optimizer", ",", "len", "(", "train_loader_T", ")", ",", "args", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "broadcast_buffers", "=", "False", ")", "\n", "\n", "if", "args", ".", "checkpoint_path", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "checkpoint_path", ")", "\n", "load_checkpoint", "(", "args", ",", "model", ",", "optimizer", ",", "scheduler", ")", "\n", "\n", "# Used for AP calculation", "\n", "", "CONFIG_DICT", "=", "{", "'remove_empty_box'", ":", "False", ",", "'use_3d_nms'", ":", "True", ",", "\n", "'nms_iou'", ":", "0.25", ",", "'use_old_type_nms'", ":", "False", ",", "'cls_nms'", ":", "True", ",", "\n", "'per_class_proposal'", ":", "True", ",", "'conf_thresh'", ":", "0.0", ",", "\n", "'dataset_config'", ":", "DATASET_CONFIG", "}", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "        ", "train_loader_S", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "train_loader_T", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_one_epoch", "(", "epoch", ",", "train_loader_S", ",", "train_loader_T", ",", "DATASET_CONFIG", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "args", ")", "\n", "\n", "logger", ".", "info", "(", "'epoch {}, total time {:.2f}, '", "\n", "'lr_base {:.5f}, lr_decoder {:.5f}'", ".", "format", "(", "epoch", ",", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "if", "epoch", "%", "args", ".", "val_freq", "==", "0", ":", "\n", "            ", "evaluate_one_epoch", "(", "test_loader_S", ",", "test_loader_T", ",", "DATASET_CONFIG", ",", "CONFIG_DICT", ",", "args", ".", "ap_iou_thresholds", ",", "model", ",", "\n", "criterion", ",", "args", ")", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# save model", "\n", "            ", "save_checkpoint", "(", "args", ",", "epoch", ",", "model", ",", "optimizer", ",", "scheduler", ")", "\n", "", "", "evaluate_one_epoch", "(", "test_loader_S", ",", "test_loader_T", ",", "DATASET_CONFIG", ",", "CONFIG_DICT", ",", "args", ".", "ap_iou_thresholds", ",", "model", ",", "criterion", ",", "args", ")", "\n", "save_checkpoint", "(", "args", ",", "'last'", ",", "model", ",", "optimizer", ",", "scheduler", ",", "save_cur", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Saved in {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_last.pth'", ")", ")", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_last.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR.train_one_epoch": [[317, 390], ["model.train", "enumerate", "zip", "model", "model", "criterion", "optimizer.zero_grad", "loss.backward", "optimizer.step", "scheduler.step", "itertools.cycle", "batch_data_label_S[].cuda", "batch_data_label_T[].cuda", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "range", "sorted", "model.parameters", "isinstance", "logger.info", "stat_dict.keys", "end_points_T[].item", "len", "sorted", "sorted", "sorted", "sorted", "stat_dict.keys", "stat_dict.keys", "stat_dict.keys", "sorted", "stat_dict.keys", "stat_dict.keys"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.train", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step"], ["", "def", "train_one_epoch", "(", "epoch", ",", "train_loader_S", ",", "train_loader_T", ",", "DATASET_CONFIG", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "config", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "model", ".", "train", "(", ")", "# set model to training mode", "\n", "for", "batch_idx", ",", "(", "batch_data_label_S", ",", "batch_data_label_T", ")", "in", "enumerate", "(", "zip", "(", "train_loader_S", ",", "cycle", "(", "train_loader_T", ")", ")", ")", ":", "\n", "        ", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "batch_data_label_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "batch_data_label_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "", "inputs_S", "=", "{", "'point_clouds'", ":", "batch_data_label_S", "[", "'point_clouds'", "]", "}", "\n", "inputs_T", "=", "{", "'point_clouds'", ":", "batch_data_label_T", "[", "'point_clouds'", "]", "}", "\n", "\n", "# Forward pass", "\n", "end_points_S", "=", "model", "(", "inputs_S", ")", "\n", "end_points_T", "=", "model", "(", "inputs_T", ")", "\n", "\n", "# Compute loss and gradients, update parameters.", "\n", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_S", ")", "\n", "end_points_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_T", ")", "\n", "end_points_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", "\n", "", "loss", ",", "_", ",", "end_points_T", "=", "criterion", "(", "end_points_S", ",", "end_points_T", ",", "DATASET_CONFIG", ",", "\n", "num_decoder_layers", "=", "config", ".", "num_decoder_layers", ",", "\n", "query_points_generator_loss_coef", "=", "config", ".", "query_points_generator_loss_coef", ",", "\n", "obj_loss_coef", "=", "config", ".", "obj_loss_coef", ",", "\n", "box_loss_coef", "=", "config", ".", "box_loss_coef", ",", "\n", "sem_cls_loss_coef", "=", "config", ".", "sem_cls_loss_coef", ",", "\n", "query_points_obj_topk", "=", "config", ".", "query_points_obj_topk", ",", "\n", "center_loss_type", "=", "config", ".", "center_loss_type", ",", "\n", "center_delta", "=", "config", ".", "center_delta", ",", "\n", "size_loss_type", "=", "config", ".", "size_loss_type", ",", "\n", "size_delta", "=", "config", ".", "size_delta", ",", "\n", "heading_loss_type", "=", "config", ".", "heading_loss_type", ",", "\n", "heading_delta", "=", "config", ".", "heading_delta", ",", "\n", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "config", ".", "clip_norm", ">", "0", ":", "\n", "            ", "grad_total_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "config", ".", "clip_norm", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "stat_dict", "[", "'grad_norm'", "]", "=", "grad_total_norm", "\n", "for", "key", "in", "end_points_T", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "if", "isinstance", "(", "end_points_T", "[", "key", "]", ",", "float", ")", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points_T", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points_T", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "", "if", "(", "batch_idx", "+", "1", ")", "%", "config", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "f'Train: [{epoch}][{batch_idx + 1}/{len(train_loader_T)}]  '", "+", "''", ".", "join", "(", "\n", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'loss'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "f\"grad_norm: {stat_dict['grad_norm']}\"", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "\n", "'loss'", "in", "key", "and", "'proposal_'", "not", "in", "key", "and", "'last_'", "not", "in", "key", "and", "'head_'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'last_'", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'proposal_'", "in", "key", "]", ")", ")", "\n", "for", "ihead", "in", "range", "(", "config", ".", "num_decoder_layers", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "f'{ihead}head_'", "in", "key", "]", ")", ")", "\n", "\n", "", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "stat_dict", "[", "key", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR.evaluate_one_epoch": [[392, 493], ["model.eval", "enumerate", "models.APCalculator", "zip", "criterion", "zip", "enumerate", "logger.info", "batch_data_label_S[].cuda", "batch_data_label_T[].cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "model", "models.parse_predictions", "models.parse_groundtruths", "batch_pred_map_cls_dict[].append", "batch_gt_map_cls_dict[].append", "logger.info", "logger.info", "logger.info", "logger.info", "range", "ap_calculator.compute_metrics", "logger.info", "ap_calculator.reset", "isinstance", "logger.info", "ap_calculator.step", "logger.info", "range", "end_points_T[].item", "len", "sorted", "sorted", "sorted", "sorted", "sorted", "stat_dict.keys", "stat_dict.keys", "stat_dict.keys", "sorted", "mAP[].keys", "stat_dict.keys", "float", "float", "float", "stat_dict.keys", "float", "float"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_groundtruths", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.compute_metrics", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.reset", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step"], ["", "", "", "", "def", "evaluate_one_epoch", "(", "test_loader_S", ",", "test_loader_T", ",", "DATASET_CONFIG", ",", "CONFIG_DICT", ",", "AP_IOU_THRESHOLDS", ",", "model", ",", "criterion", ",", "config", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "\n", "\n", "if", "config", ".", "num_decoder_layers", ">", "0", ":", "\n", "        ", "prefixes", "=", "[", "'last_'", ",", "'proposal_'", "]", "+", "[", "f'{i}head_'", "for", "i", "in", "range", "(", "config", ".", "num_decoder_layers", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "        ", "prefixes", "=", "[", "'proposal_'", "]", "# only proposal", "\n", "", "ap_calculator_list", "=", "[", "APCalculator", "(", "iou_thresh", ",", "DATASET_CONFIG", ".", "class2type", ")", "for", "iou_thresh", "in", "AP_IOU_THRESHOLDS", "]", "\n", "mAPs", "=", "[", "[", "iou_thresh", ",", "{", "k", ":", "0", "for", "k", "in", "prefixes", "}", "]", "for", "iou_thresh", "in", "AP_IOU_THRESHOLDS", "]", "\n", "\n", "model", ".", "eval", "(", ")", "# set model to eval mode (for bn and dp)", "\n", "batch_pred_map_cls_dict", "=", "{", "k", ":", "[", "]", "for", "k", "in", "prefixes", "}", "\n", "batch_gt_map_cls_dict", "=", "{", "k", ":", "[", "]", "for", "k", "in", "prefixes", "}", "\n", "\n", "for", "batch_idx", ",", "(", "batch_data_label_S", ",", "batch_data_label_T", ")", "in", "enumerate", "(", "zip", "(", "test_loader_S", ",", "test_loader_T", ")", ")", ":", "\n", "        ", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "batch_data_label_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "batch_data_label_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# Forward pass", "\n", "", "inputs_S", "=", "{", "'point_clouds'", ":", "batch_data_label_S", "[", "'point_clouds'", "]", "}", "\n", "inputs_T", "=", "{", "'point_clouds'", ":", "batch_data_label_T", "[", "'point_clouds'", "]", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "end_points_S", "=", "model", "(", "inputs_S", ")", "\n", "end_points_T", "=", "model", "(", "inputs_T", ")", "\n", "\n", "# Compute loss", "\n", "", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_S", ")", "\n", "end_points_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_T", ")", "\n", "end_points_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", "\n", "", "loss", ",", "_", ",", "end_points_T", "=", "criterion", "(", "end_points_S", ",", "end_points_T", ",", "DATASET_CONFIG", ",", "\n", "num_decoder_layers", "=", "config", ".", "num_decoder_layers", ",", "\n", "query_points_generator_loss_coef", "=", "config", ".", "query_points_generator_loss_coef", ",", "\n", "obj_loss_coef", "=", "config", ".", "obj_loss_coef", ",", "\n", "box_loss_coef", "=", "config", ".", "box_loss_coef", ",", "\n", "sem_cls_loss_coef", "=", "config", ".", "sem_cls_loss_coef", ",", "\n", "query_points_obj_topk", "=", "config", ".", "query_points_obj_topk", ",", "\n", "center_loss_type", "=", "config", ".", "center_loss_type", ",", "\n", "center_delta", "=", "config", ".", "center_delta", ",", "\n", "size_loss_type", "=", "config", ".", "size_loss_type", ",", "\n", "size_delta", "=", "config", ".", "size_delta", ",", "\n", "heading_loss_type", "=", "config", ".", "heading_loss_type", ",", "\n", "heading_delta", "=", "config", ".", "heading_delta", ",", "\n", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "for", "key", "in", "end_points_T", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "if", "isinstance", "(", "end_points_T", "[", "key", "]", ",", "float", ")", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points_T", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points_T", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "", "for", "prefix", "in", "prefixes", ":", "\n", "            ", "batch_pred_map_cls", "=", "parse_predictions", "(", "end_points_T", ",", "CONFIG_DICT", ",", "prefix", ")", "\n", "batch_gt_map_cls", "=", "parse_groundtruths", "(", "end_points_T", ",", "CONFIG_DICT", ")", "\n", "batch_pred_map_cls_dict", "[", "prefix", "]", ".", "append", "(", "batch_pred_map_cls", ")", "\n", "batch_gt_map_cls_dict", "[", "prefix", "]", ".", "append", "(", "batch_gt_map_cls", ")", "\n", "\n", "", "if", "(", "batch_idx", "+", "1", ")", "%", "config", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "f'Eval: [{batch_idx + 1}/{len(test_loader_T)}]  '", "+", "''", ".", "join", "(", "\n", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'loss'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "\n", "'loss'", "in", "key", "and", "'proposal_'", "not", "in", "key", "and", "'last_'", "not", "in", "key", "and", "'head_'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'last_'", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'proposal_'", "in", "key", "]", ")", ")", "\n", "for", "ihead", "in", "range", "(", "config", ".", "num_decoder_layers", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "f'{ihead}head_'", "in", "key", "]", ")", ")", "\n", "\n", "", "", "", "mAP", "=", "0.0", "\n", "for", "prefix", "in", "prefixes", ":", "\n", "        ", "for", "(", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", "in", "zip", "(", "batch_pred_map_cls_dict", "[", "prefix", "]", ",", "\n", "batch_gt_map_cls_dict", "[", "prefix", "]", ")", ":", "\n", "            ", "for", "ap_calculator", "in", "ap_calculator_list", ":", "\n", "                ", "ap_calculator", ".", "step", "(", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", "\n", "# Evaluate average precision", "\n", "", "", "for", "i", ",", "ap_calculator", "in", "enumerate", "(", "ap_calculator_list", ")", ":", "\n", "            ", "metrics_dict", "=", "ap_calculator", ".", "compute_metrics", "(", ")", "\n", "logger", ".", "info", "(", "f'=====================>{prefix} IOU THRESH: {AP_IOU_THRESHOLDS[i]}<====================='", ")", "\n", "for", "key", "in", "metrics_dict", ":", "\n", "                ", "logger", ".", "info", "(", "f'{key} {metrics_dict[key]}'", ")", "\n", "", "if", "prefix", "==", "'last_'", "and", "ap_calculator", ".", "ap_iou_thresh", ">", "0.3", ":", "\n", "                ", "mAP", "=", "metrics_dict", "[", "'mAP'", "]", "\n", "", "mAPs", "[", "i", "]", "[", "1", "]", "[", "prefix", "]", "=", "metrics_dict", "[", "'mAP'", "]", "\n", "ap_calculator", ".", "reset", "(", ")", "\n", "\n", "", "", "for", "mAP", "in", "mAPs", ":", "\n", "        ", "logger", ".", "info", "(", "f'IoU[{mAP[0]}]:\\t'", "+", "''", ".", "join", "(", "[", "f'{key}: {mAP[1][key]:.4f} \\t'", "for", "key", "in", "sorted", "(", "mAP", "[", "1", "]", ".", "keys", "(", ")", ")", "]", ")", ")", "\n", "\n", "", "return", "mAP", ",", "mAPs", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR_CenterRefine.parse_option": [[24, 107], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["def", "parse_option", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# Model", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'backbone width'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_target'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Proposal number [default: 256]'", ")", "\n", "parser", ".", "add_argument", "(", "'--sampling'", ",", "default", "=", "'kps'", ",", "type", "=", "str", ",", "help", "=", "'Query points sampling method (kps, fps)'", ")", "\n", "\n", "# Transformer", "\n", "parser", ".", "add_argument", "(", "'--nhead'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'multi-head number'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_decoder_layers'", ",", "default", "=", "6", ",", "type", "=", "int", ",", "help", "=", "'number of decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--dim_feedforward'", ",", "default", "=", "2048", ",", "type", "=", "int", ",", "help", "=", "'dim_feedforward'", ")", "\n", "parser", ".", "add_argument", "(", "'--transformer_dropout'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'transformer_dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--transformer_activation'", ",", "default", "=", "'relu'", ",", "type", "=", "str", ",", "help", "=", "'transformer_activation'", ")", "\n", "parser", ".", "add_argument", "(", "'--self_position_embedding'", ",", "default", "=", "'loc_learned'", ",", "type", "=", "str", ",", "\n", "help", "=", "'position_embedding in self attention (none, xyz_learned, loc_learned)'", ")", "\n", "parser", ".", "add_argument", "(", "'--cross_position_embedding'", ",", "default", "=", "'xyz_learned'", ",", "type", "=", "str", ",", "\n", "help", "=", "'position embedding in cross attention (none, xyz_learned)'", ")", "\n", "\n", "# Loss", "\n", "parser", ".", "add_argument", "(", "'--query_points_generator_loss_coef'", ",", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--obj_loss_coef'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'Loss weight for objectness loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--box_loss_coef'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "'Loss weight for box loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--sem_cls_loss_coef'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'Loss weight for classification loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_loss_type'", ",", "default", "=", "'smoothl1'", ",", "type", "=", "str", ",", "help", "=", "'(smoothl1, l1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_delta'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'delta for smoothl1 loss in center loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--size_loss_type'", ",", "default", "=", "'smoothl1'", ",", "type", "=", "str", ",", "help", "=", "'(smoothl1, l1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--size_delta'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'delta for smoothl1 loss in size loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--heading_loss_type'", ",", "default", "=", "'smoothl1'", ",", "type", "=", "str", ",", "help", "=", "'(smoothl1, l1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--heading_delta'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'delta for smoothl1 loss in heading loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--query_points_obj_topk'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'query_points_obj_topk'", ")", "\n", "\n", "# Data", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'Batch Size during training [default: 8]'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'scannet'", ",", "help", "=", "'Dataset name. sunrgbd or scannet. [default: scannet]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_point'", ",", "type", "=", "int", ",", "default", "=", "50000", ",", "help", "=", "'Point Number [default: 50000]'", ")", "\n", "#parser.add_argument('--data_root', default='data', help='data root path')", "\n", "parser", ".", "add_argument", "(", "'--use_height'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use height signal in input.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_color'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use RGB color in input.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_sunrgbd_v2'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use V2 box labels for SUN RGB-D dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'num of workers to use'", ")", "\n", "\n", "# Training", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Epoch to run [default: 1]'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'Epoch to run [default: 400]'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adamW'", ",", "help", "=", "'optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum for SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.0005", ",", "\n", "help", "=", "'Optimization L2 weight decay [default: 0.0005]'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.004", ",", "\n", "help", "=", "'Initial learning rate for all except decoder [default: 0.004]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder_learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.0004", ",", "\n", "help", "=", "'Initial learning rate for decoder [default: 0.0004]'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-scheduler'", ",", "type", "=", "str", ",", "default", "=", "'step'", ",", "\n", "choices", "=", "[", "\"step\"", ",", "\"cosine\"", "]", ",", "help", "=", "\"learning rate scheduler\"", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-epoch'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'warmup epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-multiplier'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'warmup multiplier'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_epochs'", ",", "type", "=", "int", ",", "default", "=", "[", "280", ",", "340", "]", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'for step scheduler. where to decay lr, can be a list'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'for step scheduler. decay rate for learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_norm'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'gradient clipping max norm'", ")", "\n", "parser", ".", "add_argument", "(", "'--bn_momentum'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'Default bn momeuntum'", ")", "\n", "parser", ".", "add_argument", "(", "'--syncbn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to use sync bn'", ")", "\n", "\n", "# io", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "default", "=", "None", ",", "help", "=", "'Model checkpoint path [default: None]'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "default", "=", "'log'", ",", "help", "=", "'Dump dir to save model checkpoint [default: log]'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_freq'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'val frequency'", ")", "\n", "\n", "# others", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "help", "=", "'local rank for DistributedDataParallel'", ")", "\n", "parser", ".", "add_argument", "(", "'--ap_iou_thresholds'", ",", "type", "=", "float", ",", "default", "=", "[", "0.25", ",", "0.5", "]", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'A list of AP IoU thresholds [default: 0.25,0.5]'", ")", "\n", "parser", ".", "add_argument", "(", "\"--rng_seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'manual seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_jitter'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'magnitude of perturbation at the center [default: 0.1 (means 10%% jitter of the object size)].'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset_without_mesh'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Not use the mesh information.'", ")", "\n", "\n", "args", ",", "unparsed", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR_CenterRefine.load_checkpoint": [[109, 119], ["logger.info", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "logger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "load_checkpoint", "(", "args", ",", "model", ",", "optimizer", ",", "scheduler", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "checkpoint_path", ")", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ",", "strict", "=", "False", ")", "\n", "\n", "logger", ".", "info", "(", "\"=> loaded successfully '{}' (epoch {})\"", ".", "format", "(", "args", ".", "checkpoint_path", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR_CenterRefine.save_checkpoint": [[121, 143], ["logger.info", "model.state_dict", "optimizer.state_dict", "scheduler.state_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "logger.info", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "logger.info", "print", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "def", "save_checkpoint", "(", "args", ",", "epoch", ",", "model", ",", "optimizer", ",", "scheduler", ",", "save_cur", "=", "False", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'config'", ":", "args", ",", "\n", "'save_path'", ":", "''", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "\n", "if", "save_cur", ":", "\n", "        ", "state", "[", "'save_path'", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", "\n", "logger", ".", "info", "(", "\"Saved in {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", ")", "\n", "", "elif", "epoch", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "        ", "state", "[", "'save_path'", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", "\n", "logger", ".", "info", "(", "\"Saved in {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"not saving checkpoint\"", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR_CenterRefine.get_loader": [[145, 225], ["print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "numpy.random.seed", "sys.path.append", "ScannetDatasetConfig_md40", "ScannetDetectionDataset", "ScannetDetectionDataset", "ScannetDetectionDataset", "ScannetDetectionDataset", "NotImplementedError", "os.path.join", "len", "len", "len", "len", "len", "len", "len", "len", "numpy.random.get_state"], "function", ["None"], ["", "", "def", "get_loader", "(", "args", ")", ":", "\n", "# Init datasets and dataloaders", "\n", "    ", "def", "my_worker_init_fn", "(", "worker_id", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n", "# Create Dataset and Dataloader", "\n", "", "if", "args", ".", "dataset", "==", "'scannet'", ":", "\n", "        ", "sys", ".", "path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'scannet'", ")", ")", "\n", "from", "scannet", ".", "scannet_detection_dataset", "import", "ScannetDetectionDataset", "\n", "from", "scannet", ".", "model_util_scannet", "import", "ScannetDatasetConfig_md40", "\n", "DATASET_WITHOUT_MESH", "=", "args", ".", "dataset_without_mesh", "\n", "if", "DATASET_WITHOUT_MESH", ":", "\n", "            ", "data_path", "=", "'scannet_train_detection_data_md40_obj_aug'", "\n", "", "else", ":", "\n", "            ", "data_path", "=", "'scannet_train_detection_data_md40_obj_mesh_aug'", "\n", "\n", "", "DATASET_CONFIG", "=", "ScannetDatasetConfig_md40", "(", ")", "\n", "TRAIN_DATASET_S", "=", "ScannetDetectionDataset", "(", "'train_aug'", ",", "data_path", "=", "data_path", ",", "num_points", "=", "args", ".", "num_point", ",", "\n", "augment", "=", "True", ",", "center_jitter", "=", "args", ".", "center_jitter", ",", "\n", "use_color", "=", "True", "if", "args", ".", "use_color", "else", "False", ",", "\n", "use_height", "=", "True", "if", "args", ".", "use_height", "else", "False", ")", "\n", "TEST_DATASET_S", "=", "ScannetDetectionDataset", "(", "'val'", ",", "data_path", "=", "data_path", ",", "num_points", "=", "args", ".", "num_point", ",", "\n", "augment", "=", "False", ",", "\n", "use_color", "=", "True", "if", "args", ".", "use_color", "else", "False", ",", "\n", "use_height", "=", "True", "if", "args", ".", "use_height", "else", "False", ")", "\n", "TRAIN_DATASET_T", "=", "ScannetDetectionDataset", "(", "'train'", ",", "'scannet_train_detection_data_md40'", ",", "num_points", "=", "args", ".", "num_point", ",", "\n", "augment", "=", "True", ",", "center_jitter", "=", "args", ".", "center_jitter", ",", "\n", "use_color", "=", "True", "if", "args", ".", "use_color", "else", "False", ",", "\n", "use_height", "=", "True", "if", "args", ".", "use_height", "else", "False", ")", "\n", "TEST_DATASET_T", "=", "ScannetDetectionDataset", "(", "'val'", ",", "'scannet_train_detection_data_md40'", ",", "num_points", "=", "args", ".", "num_point", ",", "\n", "augment", "=", "False", ",", "\n", "use_color", "=", "True", "if", "args", ".", "use_color", "else", "False", ",", "\n", "use_height", "=", "True", "if", "args", ".", "use_height", "else", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Unknown dataset {args.dataset}. Exiting...'", ")", "\n", "\n", "", "print", "(", "f\"train_len: {len(TRAIN_DATASET_S)}, {len(TRAIN_DATASET_T)}. test_len: {len(TEST_DATASET_S)}, {len(TEST_DATASET_T)}\"", ")", "\n", "\n", "train_sampler_S", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "TRAIN_DATASET_S", ")", "\n", "train_loader_S", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_DATASET_S", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler_S", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "test_sampler_S", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "TEST_DATASET_S", ",", "shuffle", "=", "False", ")", "\n", "test_loader_S", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TEST_DATASET_S", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "test_sampler_S", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "train_sampler_T", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "TRAIN_DATASET_T", ")", "\n", "train_loader_T", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_DATASET_T", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler_T", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "test_sampler_T", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "TEST_DATASET_T", ",", "shuffle", "=", "False", ")", "\n", "test_loader_T", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TEST_DATASET_T", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "test_sampler_T", ",", "\n", "drop_last", "=", "False", ")", "\n", "print", "(", "f\"train_loader_len: {len(train_loader_S)}, {len(train_loader_T)}. test_loader_len: {len(test_loader_S)}, {len(test_loader_T)}\"", ")", "\n", "\n", "return", "train_loader_S", ",", "test_loader_S", ",", "train_loader_T", ",", "test_loader_T", ",", "DATASET_CONFIG", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR_CenterRefine.get_model": [[227, 252], ["models.GroupFreeDetector_DA_jitter", "int", "int"], "function", ["None"], ["", "def", "get_model", "(", "args", ",", "DATASET_CONFIG", ")", ":", "\n", "    ", "if", "args", ".", "use_height", ":", "\n", "        ", "num_input_channel", "=", "int", "(", "args", ".", "use_color", ")", "*", "3", "+", "1", "\n", "", "else", ":", "\n", "        ", "num_input_channel", "=", "int", "(", "args", ".", "use_color", ")", "*", "3", "\n", "", "model", "=", "GroupFreeDetector_DA_jitter", "(", "num_class", "=", "DATASET_CONFIG", ".", "num_class", ",", "\n", "num_heading_bin", "=", "DATASET_CONFIG", ".", "num_heading_bin", ",", "\n", "num_size_cluster", "=", "DATASET_CONFIG", ".", "num_size_cluster", ",", "\n", "mean_size_arr", "=", "DATASET_CONFIG", ".", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "num_input_channel", ",", "\n", "width", "=", "args", ".", "width", ",", "\n", "bn_momentum", "=", "args", ".", "bn_momentum", ",", "\n", "sync_bn", "=", "True", "if", "args", ".", "syncbn", "else", "False", ",", "\n", "num_proposal", "=", "args", ".", "num_target", ",", "\n", "sampling", "=", "args", ".", "sampling", ",", "\n", "dropout", "=", "args", ".", "transformer_dropout", ",", "\n", "activation", "=", "args", ".", "transformer_activation", ",", "\n", "nhead", "=", "args", ".", "nhead", ",", "\n", "num_decoder_layers", "=", "args", ".", "num_decoder_layers", ",", "\n", "dim_feedforward", "=", "args", ".", "dim_feedforward", ",", "\n", "self_position_embedding", "=", "args", ".", "self_position_embedding", ",", "\n", "cross_position_embedding", "=", "args", ".", "cross_position_embedding", ")", "\n", "\n", "criterion", "=", "get_loss_DA_jitter", "\n", "return", "model", ",", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR_CenterRefine.main": [[254, 314], ["train_GF_BR_CenterRefine.get_loader", "train_GF_BR_CenterRefine.get_model", "utils.get_scheduler", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "range", "train_GF_BR_CenterRefine.evaluate_one_epoch", "train_GF_BR_CenterRefine.save_checkpoint", "logger.info", "os.path.join", "torch.get_rank", "logger.info", "torch.AdamW", "len", "os.path.isfile", "train_GF_BR_CenterRefine.load_checkpoint", "train_loader_S.sampler.set_epoch", "train_loader_T.sampler.set_epoch", "time.time", "train_GF_BR_CenterRefine.train_one_epoch", "logger.info", "str", "train_GF_BR_CenterRefine.evaluate_one_epoch", "torch.get_rank", "train_GF_BR_CenterRefine.save_checkpoint", "os.path.join", "time.time", "torch.nn.parallel.DistributedDataParallel.named_parameters", "torch.nn.parallel.DistributedDataParallel.named_parameters"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.get_loader", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.get_model", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.get_scheduler", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.evaluate_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.save_checkpoint", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.load_checkpoint", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.train_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.evaluate_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.save_checkpoint"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "train_loader_S", ",", "test_loader_S", ",", "train_loader_T", ",", "test_loader_T", ",", "DATASET_CONFIG", "=", "get_loader", "(", "args", ")", "\n", "\n", "model", ",", "criterion", "=", "get_model", "(", "args", ",", "DATASET_CONFIG", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "str", "(", "model", ")", ")", "\n", "\n", "# optimizer", "\n", "", "if", "args", ".", "optimizer", "==", "'adamW'", ":", "\n", "        ", "param_dicts", "=", "[", "\n", "{", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "\"decoder\"", "not", "in", "n", "and", "p", ".", "requires_grad", "]", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "\"decoder\"", "in", "n", "and", "p", ".", "requires_grad", "]", ",", "\n", "\"lr\"", ":", "args", ".", "decoder_learning_rate", ",", "\n", "}", ",", "\n", "]", "\n", "optimizer", "=", "optim", ".", "AdamW", "(", "param_dicts", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "scheduler", "=", "get_scheduler", "(", "optimizer", ",", "len", "(", "train_loader_T", ")", ",", "args", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "broadcast_buffers", "=", "False", ")", "\n", "\n", "if", "args", ".", "checkpoint_path", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "checkpoint_path", ")", "\n", "load_checkpoint", "(", "args", ",", "model", ",", "optimizer", ",", "scheduler", ")", "\n", "\n", "# Used for AP calculation", "\n", "", "CONFIG_DICT", "=", "{", "'remove_empty_box'", ":", "False", ",", "'use_3d_nms'", ":", "True", ",", "\n", "'nms_iou'", ":", "0.25", ",", "'use_old_type_nms'", ":", "False", ",", "'cls_nms'", ":", "True", ",", "\n", "'per_class_proposal'", ":", "True", ",", "'conf_thresh'", ":", "0.0", ",", "\n", "'dataset_config'", ":", "DATASET_CONFIG", "}", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "        ", "train_loader_S", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "train_loader_T", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_one_epoch", "(", "epoch", ",", "train_loader_S", ",", "train_loader_T", ",", "DATASET_CONFIG", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "args", ")", "\n", "\n", "logger", ".", "info", "(", "'epoch {}, total time {:.2f}, '", "\n", "'lr_base {:.5f}, lr_decoder {:.5f}'", ".", "format", "(", "epoch", ",", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "if", "epoch", "%", "args", ".", "val_freq", "==", "0", ":", "\n", "            ", "evaluate_one_epoch", "(", "test_loader_S", ",", "test_loader_T", ",", "DATASET_CONFIG", ",", "CONFIG_DICT", ",", "args", ".", "ap_iou_thresholds", ",", "model", ",", "\n", "criterion", ",", "args", ")", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# save model", "\n", "            ", "save_checkpoint", "(", "args", ",", "epoch", ",", "model", ",", "optimizer", ",", "scheduler", ")", "\n", "", "", "evaluate_one_epoch", "(", "test_loader_S", ",", "test_loader_T", ",", "DATASET_CONFIG", ",", "CONFIG_DICT", ",", "args", ".", "ap_iou_thresholds", ",", "model", ",", "criterion", ",", "args", ")", "\n", "save_checkpoint", "(", "args", ",", "'last'", ",", "model", ",", "optimizer", ",", "scheduler", ",", "save_cur", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Saved in {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_last.pth'", ")", ")", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_last.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR_CenterRefine.train_one_epoch": [[316, 391], ["model.train", "enumerate", "zip", "model", "model", "model", "model", "criterion", "optimizer.zero_grad", "loss.backward", "optimizer.step", "scheduler.step", "itertools.cycle", "batch_data_label_S[].cuda", "batch_data_label_T[].cuda", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "range", "sorted", "model.parameters", "isinstance", "logger.info", "stat_dict.keys", "end_points_T[].item", "len", "sorted", "sorted", "sorted", "sorted", "stat_dict.keys", "stat_dict.keys", "stat_dict.keys", "sorted", "stat_dict.keys", "stat_dict.keys"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.train", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step"], ["", "def", "train_one_epoch", "(", "epoch", ",", "train_loader_S", ",", "train_loader_T", ",", "DATASET_CONFIG", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "config", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "model", ".", "train", "(", ")", "# set model to training mode", "\n", "for", "batch_idx", ",", "(", "batch_data_label_S", ",", "batch_data_label_T", ")", "in", "enumerate", "(", "zip", "(", "train_loader_S", ",", "cycle", "(", "train_loader_T", ")", ")", ")", ":", "\n", "        ", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "batch_data_label_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "batch_data_label_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "", "inputs_S", "=", "{", "'point_clouds'", ":", "batch_data_label_S", "[", "'point_clouds'", "]", "}", "\n", "inputs_T", "=", "{", "'point_clouds'", ":", "batch_data_label_T", "[", "'point_clouds'", "]", "}", "\n", "end_points_S", "=", "model", "(", "inputs_S", ",", "batch_data_label_S", "[", "'center_label'", "]", ",", "batch_data_label_S", "[", "'sem_cls_label'", "]", ")", "\n", "end_points_T", "=", "model", "(", "inputs_T", ",", "batch_data_label_T", "[", "'center_label'", "]", ",", "batch_data_label_T", "[", "'sem_cls_label'", "]", ")", "\n", "\n", "# Forward pass", "\n", "end_points_S", "=", "model", "(", "inputs_S", ",", "batch_data_label_S", "[", "'center_label'", "]", ",", "batch_data_label_S", "[", "'sem_cls_label'", "]", ")", "\n", "end_points_T", "=", "model", "(", "inputs_T", ",", "batch_data_label_T", "[", "'center_label'", "]", ",", "batch_data_label_T", "[", "'sem_cls_label'", "]", ")", "\n", "\n", "# Compute loss and gradients, update parameters.", "\n", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_S", ")", "\n", "end_points_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_T", ")", "\n", "end_points_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", "\n", "", "loss", ",", "_", ",", "end_points_T", "=", "criterion", "(", "end_points_S", ",", "end_points_T", ",", "epoch", ",", "DATASET_CONFIG", ",", "\n", "num_decoder_layers", "=", "config", ".", "num_decoder_layers", ",", "\n", "query_points_generator_loss_coef", "=", "config", ".", "query_points_generator_loss_coef", ",", "\n", "obj_loss_coef", "=", "config", ".", "obj_loss_coef", ",", "\n", "box_loss_coef", "=", "config", ".", "box_loss_coef", ",", "\n", "sem_cls_loss_coef", "=", "config", ".", "sem_cls_loss_coef", ",", "\n", "query_points_obj_topk", "=", "config", ".", "query_points_obj_topk", ",", "\n", "center_loss_type", "=", "config", ".", "center_loss_type", ",", "\n", "center_delta", "=", "config", ".", "center_delta", ",", "\n", "size_loss_type", "=", "config", ".", "size_loss_type", ",", "\n", "size_delta", "=", "config", ".", "size_delta", ",", "\n", "heading_loss_type", "=", "config", ".", "heading_loss_type", ",", "\n", "heading_delta", "=", "config", ".", "heading_delta", ",", "\n", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "config", ".", "clip_norm", ">", "0", ":", "\n", "            ", "grad_total_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "config", ".", "clip_norm", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "stat_dict", "[", "'grad_norm'", "]", "=", "grad_total_norm", "\n", "for", "key", "in", "end_points_T", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "if", "isinstance", "(", "end_points_T", "[", "key", "]", ",", "float", ")", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points_T", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points_T", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "", "if", "(", "batch_idx", "+", "1", ")", "%", "config", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "f'Train: [{epoch}][{batch_idx + 1}/{len(train_loader_T)}]  '", "+", "''", ".", "join", "(", "\n", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'loss'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "f\"grad_norm: {stat_dict['grad_norm']}\"", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "\n", "'loss'", "in", "key", "and", "'proposal_'", "not", "in", "key", "and", "'last_'", "not", "in", "key", "and", "'head_'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'last_'", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'proposal_'", "in", "key", "]", ")", ")", "\n", "for", "ihead", "in", "range", "(", "config", ".", "num_decoder_layers", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "f'{ihead}head_'", "in", "key", "]", ")", ")", "\n", "\n", "", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "stat_dict", "[", "key", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_BR_CenterRefine.evaluate_one_epoch": [[393, 496], ["model.eval", "enumerate", "models.APCalculator", "zip", "zip", "enumerate", "logger.info", "batch_data_label_S[].cuda", "batch_data_label_T[].cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "model", "models.parse_predictions", "models.parse_groundtruths", "batch_pred_map_cls_dict[].append", "batch_gt_map_cls_dict[].append", "logger.info", "logger.info", "logger.info", "logger.info", "range", "ap_calculator.compute_metrics", "logger.info", "ap_calculator.reset", "isinstance", "logger.info", "ap_calculator.step", "logger.info", "range", "end_points_T[].item", "len", "sorted", "sorted", "sorted", "sorted", "sorted", "stat_dict.keys", "stat_dict.keys", "stat_dict.keys", "sorted", "mAP[].keys", "stat_dict.keys", "float", "float", "float", "stat_dict.keys", "float", "float"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_groundtruths", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.compute_metrics", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.reset", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step"], ["", "", "", "", "def", "evaluate_one_epoch", "(", "test_loader_S", ",", "test_loader_T", ",", "DATASET_CONFIG", ",", "CONFIG_DICT", ",", "AP_IOU_THRESHOLDS", ",", "model", ",", "criterion", ",", "config", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "\n", "\n", "if", "config", ".", "num_decoder_layers", ">", "0", ":", "\n", "        ", "prefixes", "=", "[", "'last_'", ",", "'proposal_'", "]", "+", "[", "f'{i}head_'", "for", "i", "in", "range", "(", "config", ".", "num_decoder_layers", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "        ", "prefixes", "=", "[", "'proposal_'", "]", "# only proposal", "\n", "", "ap_calculator_list", "=", "[", "APCalculator", "(", "iou_thresh", ",", "DATASET_CONFIG", ".", "class2type", ")", "for", "iou_thresh", "in", "AP_IOU_THRESHOLDS", "]", "\n", "mAPs", "=", "[", "[", "iou_thresh", ",", "{", "k", ":", "0", "for", "k", "in", "prefixes", "}", "]", "for", "iou_thresh", "in", "AP_IOU_THRESHOLDS", "]", "\n", "\n", "model", ".", "eval", "(", ")", "# set model to eval mode (for bn and dp)", "\n", "batch_pred_map_cls_dict", "=", "{", "k", ":", "[", "]", "for", "k", "in", "prefixes", "}", "\n", "batch_gt_map_cls_dict", "=", "{", "k", ":", "[", "]", "for", "k", "in", "prefixes", "}", "\n", "\n", "for", "batch_idx", ",", "(", "batch_data_label_S", ",", "batch_data_label_T", ")", "in", "enumerate", "(", "zip", "(", "test_loader_S", ",", "test_loader_T", ")", ")", ":", "\n", "        ", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "batch_data_label_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "batch_data_label_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# Forward pass", "\n", "", "inputs_S", "=", "{", "'point_clouds'", ":", "batch_data_label_S", "[", "'point_clouds'", "]", "}", "\n", "inputs_T", "=", "{", "'point_clouds'", ":", "batch_data_label_T", "[", "'point_clouds'", "]", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "end_points_S", "=", "model", "(", "inputs_S", ")", "\n", "end_points_T", "=", "model", "(", "inputs_T", ")", "\n", "\n", "# Compute loss", "\n", "", "for", "key", "in", "batch_data_label_S", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_S", ")", "\n", "end_points_S", "[", "key", "]", "=", "batch_data_label_S", "[", "key", "]", "\n", "", "for", "key", "in", "batch_data_label_T", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points_T", ")", "\n", "end_points_T", "[", "key", "]", "=", "batch_data_label_T", "[", "key", "]", "\n", "", "'''\n        loss, _, end_points_T = criterion(end_points_S, end_points_T, DATASET_CONFIG,\n                                     num_decoder_layers=config.num_decoder_layers,\n                                     query_points_generator_loss_coef=config.query_points_generator_loss_coef,\n                                     obj_loss_coef=config.obj_loss_coef,\n                                     box_loss_coef=config.box_loss_coef,\n                                     sem_cls_loss_coef=config.sem_cls_loss_coef,\n                                     query_points_obj_topk=config.query_points_obj_topk,\n                                     center_loss_type=config.center_loss_type,\n                                     center_delta=config.center_delta,\n                                     size_loss_type=config.size_loss_type,\n                                     size_delta=config.size_delta,\n                                     heading_loss_type=config.heading_loss_type,\n                                     heading_delta=config.heading_delta,\n                                     )\n        '''", "\n", "\n", "# Accumulate statistics and print out", "\n", "for", "key", "in", "end_points_T", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "if", "isinstance", "(", "end_points_T", "[", "key", "]", ",", "float", ")", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points_T", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points_T", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "", "for", "prefix", "in", "prefixes", ":", "\n", "            ", "batch_pred_map_cls", "=", "parse_predictions", "(", "end_points_T", ",", "CONFIG_DICT", ",", "prefix", ")", "\n", "batch_gt_map_cls", "=", "parse_groundtruths", "(", "end_points_T", ",", "CONFIG_DICT", ")", "\n", "batch_pred_map_cls_dict", "[", "prefix", "]", ".", "append", "(", "batch_pred_map_cls", ")", "\n", "batch_gt_map_cls_dict", "[", "prefix", "]", ".", "append", "(", "batch_gt_map_cls", ")", "\n", "\n", "", "if", "(", "batch_idx", "+", "1", ")", "%", "config", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "f'Eval: [{batch_idx + 1}/{len(test_loader_T)}]  '", "+", "''", ".", "join", "(", "\n", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'loss'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "\n", "'loss'", "in", "key", "and", "'proposal_'", "not", "in", "key", "and", "'last_'", "not", "in", "key", "and", "'head_'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'last_'", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'proposal_'", "in", "key", "]", ")", ")", "\n", "for", "ihead", "in", "range", "(", "config", ".", "num_decoder_layers", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "f'{ihead}head_'", "in", "key", "]", ")", ")", "\n", "\n", "", "", "", "mAP", "=", "0.0", "\n", "for", "prefix", "in", "prefixes", ":", "\n", "        ", "for", "(", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", "in", "zip", "(", "batch_pred_map_cls_dict", "[", "prefix", "]", ",", "\n", "batch_gt_map_cls_dict", "[", "prefix", "]", ")", ":", "\n", "            ", "for", "ap_calculator", "in", "ap_calculator_list", ":", "\n", "                ", "ap_calculator", ".", "step", "(", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", "\n", "# Evaluate average precision", "\n", "", "", "for", "i", ",", "ap_calculator", "in", "enumerate", "(", "ap_calculator_list", ")", ":", "\n", "            ", "metrics_dict", "=", "ap_calculator", ".", "compute_metrics", "(", ")", "\n", "logger", ".", "info", "(", "f'=====================>{prefix} IOU THRESH: {AP_IOU_THRESHOLDS[i]}<====================='", ")", "\n", "for", "key", "in", "metrics_dict", ":", "\n", "                ", "logger", ".", "info", "(", "f'{key} {metrics_dict[key]}'", ")", "\n", "", "if", "prefix", "==", "'last_'", "and", "ap_calculator", ".", "ap_iou_thresh", ">", "0.3", ":", "\n", "                ", "mAP", "=", "metrics_dict", "[", "'mAP'", "]", "\n", "", "mAPs", "[", "i", "]", "[", "1", "]", "[", "prefix", "]", "=", "metrics_dict", "[", "'mAP'", "]", "\n", "ap_calculator", ".", "reset", "(", ")", "\n", "\n", "", "", "for", "mAP", "in", "mAPs", ":", "\n", "        ", "logger", ".", "info", "(", "f'IoU[{mAP[0]}]:\\t'", "+", "''", ".", "join", "(", "[", "f'{key}: {mAP[1][key]:.4f} \\t'", "for", "key", "in", "sorted", "(", "mAP", "[", "1", "]", ".", "keys", "(", ")", ")", "]", ")", ")", "\n", "\n", "", "return", "mAP", ",", "mAPs", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_WSB.parse_option": [[23, 104], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["def", "parse_option", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# Model", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'backbone width'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_target'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Proposal number [default: 256]'", ")", "\n", "parser", ".", "add_argument", "(", "'--sampling'", ",", "default", "=", "'kps'", ",", "type", "=", "str", ",", "help", "=", "'Query points sampling method (kps, fps)'", ")", "\n", "\n", "# Transformer", "\n", "parser", ".", "add_argument", "(", "'--nhead'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'multi-head number'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_decoder_layers'", ",", "default", "=", "6", ",", "type", "=", "int", ",", "help", "=", "'number of decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--dim_feedforward'", ",", "default", "=", "2048", ",", "type", "=", "int", ",", "help", "=", "'dim_feedforward'", ")", "\n", "parser", ".", "add_argument", "(", "'--transformer_dropout'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'transformer_dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--transformer_activation'", ",", "default", "=", "'relu'", ",", "type", "=", "str", ",", "help", "=", "'transformer_activation'", ")", "\n", "parser", ".", "add_argument", "(", "'--self_position_embedding'", ",", "default", "=", "'loc_learned'", ",", "type", "=", "str", ",", "\n", "help", "=", "'position_embedding in self attention (none, xyz_learned, loc_learned)'", ")", "\n", "parser", ".", "add_argument", "(", "'--cross_position_embedding'", ",", "default", "=", "'xyz_learned'", ",", "type", "=", "str", ",", "\n", "help", "=", "'position embedding in cross attention (none, xyz_learned)'", ")", "\n", "\n", "# Loss", "\n", "parser", ".", "add_argument", "(", "'--query_points_generator_loss_coef'", ",", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--obj_loss_coef'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'Loss weight for objectness loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--box_loss_coef'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "'Loss weight for box loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--sem_cls_loss_coef'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'Loss weight for classification loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_loss_type'", ",", "default", "=", "'smoothl1'", ",", "type", "=", "str", ",", "help", "=", "'(smoothl1, l1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_delta'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'delta for smoothl1 loss in center loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--size_loss_type'", ",", "default", "=", "'smoothl1'", ",", "type", "=", "str", ",", "help", "=", "'(smoothl1, l1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--size_delta'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'delta for smoothl1 loss in size loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--heading_loss_type'", ",", "default", "=", "'smoothl1'", ",", "type", "=", "str", ",", "help", "=", "'(smoothl1, l1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--heading_delta'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'delta for smoothl1 loss in heading loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--query_points_obj_topk'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'query_points_obj_topk'", ")", "\n", "\n", "# Data", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'Batch Size during training [default: 8]'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'scannet'", ",", "help", "=", "'Dataset name. sunrgbd or scannet. [default: scannet]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_point'", ",", "type", "=", "int", ",", "default", "=", "50000", ",", "help", "=", "'Point Number [default: 50000]'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_height'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use height signal in input.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_color'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use RGB color in input.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_sunrgbd_v2'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use V2 box labels for SUN RGB-D dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'num of workers to use'", ")", "\n", "\n", "# Training", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Epoch to run [default: 1]'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'Epoch to run [default: 180]'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adamW'", ",", "help", "=", "'optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum for SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.0005", ",", "\n", "help", "=", "'Optimization L2 weight decay [default: 0.0005]'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.004", ",", "\n", "help", "=", "'Initial learning rate for all except decoder [default: 0.004]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder_learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.0004", ",", "\n", "help", "=", "'Initial learning rate for decoder [default: 0.0004]'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-scheduler'", ",", "type", "=", "str", ",", "default", "=", "'step'", ",", "\n", "choices", "=", "[", "\"step\"", ",", "\"cosine\"", "]", ",", "help", "=", "\"learning rate scheduler\"", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-epoch'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'warmup epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-multiplier'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'warmup multiplier'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_epochs'", ",", "type", "=", "int", ",", "default", "=", "[", "280", ",", "340", "]", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'for step scheduler. where to decay lr, can be a list'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'for step scheduler. decay rate for learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_norm'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'gradient clipping max norm'", ")", "\n", "parser", ".", "add_argument", "(", "'--bn_momentum'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'Default bn momeuntum'", ")", "\n", "parser", ".", "add_argument", "(", "'--syncbn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to use sync bn'", ")", "\n", "\n", "# io", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "default", "=", "None", ",", "help", "=", "'Model checkpoint path [default: None]'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "default", "=", "'log'", ",", "help", "=", "'Dump dir to save model checkpoint [default: log]'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_freq'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'val frequency'", ")", "\n", "\n", "# others", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "help", "=", "'local rank for DistributedDataParallel'", ")", "\n", "parser", ".", "add_argument", "(", "'--ap_iou_thresholds'", ",", "type", "=", "float", ",", "default", "=", "[", "0.25", ",", "0.5", "]", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'A list of AP IoU thresholds [default: 0.25,0.5]'", ")", "\n", "parser", ".", "add_argument", "(", "\"--rng_seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'manual seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_jitter'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'Center Jitter [default: 0.1].'", ")", "\n", "\n", "args", ",", "unparsed", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_WSB.load_checkpoint": [[106, 119], ["logger.info", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "logger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "load_checkpoint", "(", "args", ",", "model", ",", "optimizer", ",", "scheduler", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "checkpoint_path", ")", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "#args.start_epoch = checkpoint['epoch'] + 1", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "#optimizer.load_state_dict(checkpoint['optimizer'])", "\n", "#scheduler.load_state_dict(checkpoint['scheduler'])", "\n", "\n", "logger", ".", "info", "(", "\"=> loaded successfully '{}' (epoch {})\"", ".", "format", "(", "args", ".", "checkpoint_path", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_WSB.save_checkpoint": [[121, 143], ["logger.info", "model.state_dict", "optimizer.state_dict", "scheduler.state_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "logger.info", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "logger.info", "print", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "def", "save_checkpoint", "(", "args", ",", "epoch", ",", "model", ",", "optimizer", ",", "scheduler", ",", "save_cur", "=", "False", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'config'", ":", "args", ",", "\n", "'save_path'", ":", "''", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "\n", "if", "save_cur", ":", "\n", "        ", "state", "[", "'save_path'", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", "\n", "logger", ".", "info", "(", "\"Saved in {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", ")", "\n", "", "elif", "epoch", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "        ", "state", "[", "'save_path'", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", "\n", "logger", ".", "info", "(", "\"Saved in {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"not saving checkpoint\"", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_WSB.get_loader": [[145, 192], ["print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "numpy.random.seed", "sys.path.append", "ScannetDatasetConfig_md40", "ScannetDetectionDataset", "ScannetDetectionDataset", "NotImplementedError", "os.path.join", "len", "len", "len", "len", "numpy.random.get_state"], "function", ["None"], ["", "", "def", "get_loader", "(", "args", ")", ":", "\n", "# Init datasets and dataloaders", "\n", "    ", "def", "my_worker_init_fn", "(", "worker_id", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n", "# Create Dataset and Dataloader", "\n", "", "if", "args", ".", "dataset", "==", "'scannet'", ":", "\n", "        ", "sys", ".", "path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'scannet'", ")", ")", "\n", "from", "scannet", ".", "scannet_detection_dataset", "import", "ScannetDetectionDataset", "\n", "from", "scannet", ".", "model_util_scannet", "import", "ScannetDatasetConfig_md40", "\n", "\n", "DATASET_CONFIG", "=", "ScannetDatasetConfig_md40", "(", ")", "\n", "TRAIN_DATASET", "=", "ScannetDetectionDataset", "(", "'train'", ",", "'scannet_train_detection_data_md40'", ",", "num_points", "=", "args", ".", "num_point", ",", "\n", "augment", "=", "True", ",", "center_jitter", "=", "args", ".", "center_jitter", ",", "\n", "use_color", "=", "True", "if", "args", ".", "use_color", "else", "False", ",", "\n", "use_height", "=", "True", "if", "args", ".", "use_height", "else", "False", ")", "\n", "TEST_DATASET", "=", "ScannetDetectionDataset", "(", "'val'", ",", "'scannet_train_detection_data_md40'", ",", "num_points", "=", "args", ".", "num_point", ",", "\n", "augment", "=", "False", ",", "\n", "use_color", "=", "True", "if", "args", ".", "use_color", "else", "False", ",", "\n", "use_height", "=", "True", "if", "args", ".", "use_height", "else", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Unknown dataset {args.dataset}. Exiting...'", ")", "\n", "\n", "", "print", "(", "f\"train_len: {len(TRAIN_DATASET)}, test_len: {len(TEST_DATASET)}\"", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "TRAIN_DATASET", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_DATASET", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "TEST_DATASET", ",", "shuffle", "=", "False", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TEST_DATASET", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "drop_last", "=", "False", ")", "\n", "print", "(", "f\"train_loader_len: {len(train_loader)}, test_loader_len: {len(test_loader)}\"", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", ",", "DATASET_CONFIG", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_WSB.get_model": [[194, 219], ["models.GroupFreeDetector", "int", "int"], "function", ["None"], ["", "def", "get_model", "(", "args", ",", "DATASET_CONFIG", ")", ":", "\n", "    ", "if", "args", ".", "use_height", ":", "\n", "        ", "num_input_channel", "=", "int", "(", "args", ".", "use_color", ")", "*", "3", "+", "1", "\n", "", "else", ":", "\n", "        ", "num_input_channel", "=", "int", "(", "args", ".", "use_color", ")", "*", "3", "\n", "", "model", "=", "GroupFreeDetector", "(", "num_class", "=", "DATASET_CONFIG", ".", "num_class", ",", "\n", "num_heading_bin", "=", "DATASET_CONFIG", ".", "num_heading_bin", ",", "\n", "num_size_cluster", "=", "DATASET_CONFIG", ".", "num_size_cluster", ",", "\n", "mean_size_arr", "=", "DATASET_CONFIG", ".", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "num_input_channel", ",", "\n", "width", "=", "args", ".", "width", ",", "\n", "bn_momentum", "=", "args", ".", "bn_momentum", ",", "\n", "sync_bn", "=", "True", "if", "args", ".", "syncbn", "else", "False", ",", "\n", "num_proposal", "=", "args", ".", "num_target", ",", "\n", "sampling", "=", "args", ".", "sampling", ",", "\n", "dropout", "=", "args", ".", "transformer_dropout", ",", "\n", "activation", "=", "args", ".", "transformer_activation", ",", "\n", "nhead", "=", "args", ".", "nhead", ",", "\n", "num_decoder_layers", "=", "args", ".", "num_decoder_layers", ",", "\n", "dim_feedforward", "=", "args", ".", "dim_feedforward", ",", "\n", "self_position_embedding", "=", "args", ".", "self_position_embedding", ",", "\n", "cross_position_embedding", "=", "args", ".", "cross_position_embedding", ")", "\n", "\n", "criterion", "=", "get_loss_weak", "\n", "return", "model", ",", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_WSB.main": [[221, 283], ["train_GF_WSB.get_loader", "len", "logger.info", "len", "logger.info", "train_GF_WSB.get_model", "utils.get_scheduler", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "range", "train_GF_WSB.evaluate_one_epoch", "train_GF_WSB.save_checkpoint", "logger.info", "os.path.join", "torch.get_rank", "logger.info", "torch.AdamW", "len", "os.path.isfile", "train_GF_WSB.load_checkpoint", "train_loader.sampler.set_epoch", "time.time", "train_GF_WSB.train_one_epoch", "logger.info", "str", "train_GF_WSB.evaluate_one_epoch", "torch.get_rank", "train_GF_WSB.save_checkpoint", "os.path.join", "time.time", "torch.nn.parallel.DistributedDataParallel.named_parameters", "torch.nn.parallel.DistributedDataParallel.named_parameters"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.get_loader", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.get_model", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.get_scheduler", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.evaluate_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.save_checkpoint", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.load_checkpoint", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.train_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.evaluate_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.save_checkpoint"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "train_loader", ",", "test_loader", ",", "DATASET_CONFIG", "=", "get_loader", "(", "args", ")", "\n", "n_data", "=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "f\"length of training dataset: {n_data}\"", ")", "\n", "n_data", "=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "f\"length of testing dataset: {n_data}\"", ")", "\n", "\n", "model", ",", "criterion", "=", "get_model", "(", "args", ",", "DATASET_CONFIG", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "str", "(", "model", ")", ")", "\n", "# optimizer", "\n", "", "if", "args", ".", "optimizer", "==", "'adamW'", ":", "\n", "        ", "param_dicts", "=", "[", "\n", "{", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "\"decoder\"", "not", "in", "n", "and", "p", ".", "requires_grad", "]", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "\"decoder\"", "in", "n", "and", "p", ".", "requires_grad", "]", ",", "\n", "\"lr\"", ":", "args", ".", "decoder_learning_rate", ",", "\n", "}", ",", "\n", "]", "\n", "optimizer", "=", "optim", ".", "AdamW", "(", "param_dicts", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "scheduler", "=", "get_scheduler", "(", "optimizer", ",", "len", "(", "train_loader", ")", ",", "args", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "broadcast_buffers", "=", "False", ")", "\n", "\n", "if", "args", ".", "checkpoint_path", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "checkpoint_path", ")", "\n", "load_checkpoint", "(", "args", ",", "model", ",", "optimizer", ",", "scheduler", ")", "\n", "\n", "# Used for AP calculation", "\n", "", "CONFIG_DICT", "=", "{", "'remove_empty_box'", ":", "False", ",", "'use_3d_nms'", ":", "True", ",", "\n", "'nms_iou'", ":", "0.25", ",", "'use_old_type_nms'", ":", "False", ",", "'cls_nms'", ":", "True", ",", "\n", "'per_class_proposal'", ":", "True", ",", "'conf_thresh'", ":", "0.0", ",", "\n", "'dataset_config'", ":", "DATASET_CONFIG", "}", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "        ", "train_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_one_epoch", "(", "epoch", ",", "train_loader", ",", "DATASET_CONFIG", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "args", ")", "\n", "\n", "logger", ".", "info", "(", "'epoch {}, total time {:.2f}, '", "\n", "'lr_base {:.5f}, lr_decoder {:.5f}'", ".", "format", "(", "epoch", ",", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "if", "epoch", "%", "args", ".", "val_freq", "==", "0", ":", "\n", "            ", "evaluate_one_epoch", "(", "test_loader", ",", "DATASET_CONFIG", ",", "CONFIG_DICT", ",", "args", ".", "ap_iou_thresholds", ",", "model", ",", "\n", "criterion", ",", "args", ")", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# save model", "\n", "            ", "save_checkpoint", "(", "args", ",", "epoch", ",", "model", ",", "optimizer", ",", "scheduler", ")", "\n", "", "", "evaluate_one_epoch", "(", "test_loader", ",", "DATASET_CONFIG", ",", "CONFIG_DICT", ",", "args", ".", "ap_iou_thresholds", ",", "model", ",", "criterion", ",", "args", ")", "\n", "save_checkpoint", "(", "args", ",", "'last'", ",", "model", ",", "optimizer", ",", "scheduler", ",", "save_cur", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Saved in {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_last.pth'", ")", ")", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_last.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_WSB.train_one_epoch": [[285, 350], ["model.train", "enumerate", "model", "criterion", "optimizer.zero_grad", "loss.backward", "optimizer.step", "scheduler.step", "batch_data_label[].cuda", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "range", "sorted", "model.parameters", "isinstance", "logger.info", "stat_dict.keys", "end_points[].item", "len", "sorted", "sorted", "sorted", "sorted", "stat_dict.keys", "stat_dict.keys", "stat_dict.keys", "sorted", "stat_dict.keys", "stat_dict.keys"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.train", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step"], ["", "def", "train_one_epoch", "(", "epoch", ",", "train_loader", ",", "DATASET_CONFIG", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "config", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "model", ".", "train", "(", ")", "# set model to training mode", "\n", "for", "batch_idx", ",", "batch_data_label", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "batch_data_label", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "inputs", "=", "{", "'point_clouds'", ":", "batch_data_label", "[", "'point_clouds'", "]", "}", "\n", "\n", "# Forward pass", "\n", "end_points", "=", "model", "(", "inputs", ")", "\n", "\n", "# Compute loss and gradients, update parameters.", "\n", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points", ")", "\n", "end_points", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", "\n", "", "loss", ",", "end_points", "=", "criterion", "(", "end_points", ",", "DATASET_CONFIG", ",", "\n", "num_decoder_layers", "=", "config", ".", "num_decoder_layers", ",", "\n", "query_points_generator_loss_coef", "=", "config", ".", "query_points_generator_loss_coef", ",", "\n", "obj_loss_coef", "=", "config", ".", "obj_loss_coef", ",", "\n", "box_loss_coef", "=", "config", ".", "box_loss_coef", ",", "\n", "sem_cls_loss_coef", "=", "config", ".", "sem_cls_loss_coef", ",", "\n", "query_points_obj_topk", "=", "config", ".", "query_points_obj_topk", ",", "\n", "center_loss_type", "=", "config", ".", "center_loss_type", ",", "\n", "center_delta", "=", "config", ".", "center_delta", ",", "\n", "size_loss_type", "=", "config", ".", "size_loss_type", ",", "\n", "size_delta", "=", "config", ".", "size_delta", ",", "\n", "heading_loss_type", "=", "config", ".", "heading_loss_type", ",", "\n", "heading_delta", "=", "config", ".", "heading_delta", ",", "\n", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "config", ".", "clip_norm", ">", "0", ":", "\n", "            ", "grad_total_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "config", ".", "clip_norm", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "stat_dict", "[", "'grad_norm'", "]", "=", "grad_total_norm", "\n", "for", "key", "in", "end_points", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "if", "isinstance", "(", "end_points", "[", "key", "]", ",", "float", ")", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "", "if", "(", "batch_idx", "+", "1", ")", "%", "config", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "f'Train: [{epoch}][{batch_idx + 1}/{len(train_loader)}]  '", "+", "''", ".", "join", "(", "\n", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'loss'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "f\"grad_norm: {stat_dict['grad_norm']}\"", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "\n", "'loss'", "in", "key", "and", "'proposal_'", "not", "in", "key", "and", "'last_'", "not", "in", "key", "and", "'head_'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'last_'", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'proposal_'", "in", "key", "]", ")", ")", "\n", "for", "ihead", "in", "range", "(", "config", ".", "num_decoder_layers", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "f'{ihead}head_'", "in", "key", "]", ")", ")", "\n", "\n", "", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "stat_dict", "[", "key", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_WSB.evaluate_one_epoch": [[352, 446], ["model.eval", "enumerate", "models.APCalculator", "criterion", "zip", "enumerate", "logger.info", "batch_data_label[].cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "models.parse_predictions", "models.parse_groundtruths", "batch_pred_map_cls_dict[].append", "batch_gt_map_cls_dict[].append", "logger.info", "logger.info", "logger.info", "logger.info", "range", "ap_calculator.compute_metrics", "logger.info", "ap_calculator.reset", "isinstance", "logger.info", "ap_calculator.step", "logger.info", "range", "end_points[].item", "len", "sorted", "sorted", "sorted", "sorted", "sorted", "stat_dict.keys", "stat_dict.keys", "stat_dict.keys", "sorted", "mAP[].keys", "stat_dict.keys", "float", "float", "float", "stat_dict.keys", "float", "float"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_groundtruths", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.compute_metrics", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.reset", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step"], ["", "", "", "", "def", "evaluate_one_epoch", "(", "test_loader", ",", "DATASET_CONFIG", ",", "CONFIG_DICT", ",", "AP_IOU_THRESHOLDS", ",", "model", ",", "criterion", ",", "config", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "\n", "\n", "if", "config", ".", "num_decoder_layers", ">", "0", ":", "\n", "        ", "prefixes", "=", "[", "'last_'", ",", "'proposal_'", "]", "+", "[", "f'{i}head_'", "for", "i", "in", "range", "(", "config", ".", "num_decoder_layers", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "        ", "prefixes", "=", "[", "'proposal_'", "]", "# only proposal", "\n", "", "ap_calculator_list", "=", "[", "APCalculator", "(", "iou_thresh", ",", "DATASET_CONFIG", ".", "class2type", ")", "for", "iou_thresh", "in", "AP_IOU_THRESHOLDS", "]", "\n", "mAPs", "=", "[", "[", "iou_thresh", ",", "{", "k", ":", "0", "for", "k", "in", "prefixes", "}", "]", "for", "iou_thresh", "in", "AP_IOU_THRESHOLDS", "]", "\n", "\n", "model", ".", "eval", "(", ")", "# set model to eval mode (for bn and dp)", "\n", "batch_pred_map_cls_dict", "=", "{", "k", ":", "[", "]", "for", "k", "in", "prefixes", "}", "\n", "batch_gt_map_cls_dict", "=", "{", "k", ":", "[", "]", "for", "k", "in", "prefixes", "}", "\n", "\n", "for", "batch_idx", ",", "batch_data_label", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "batch_data_label", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# Forward pass", "\n", "", "inputs", "=", "{", "'point_clouds'", ":", "batch_data_label", "[", "'point_clouds'", "]", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "end_points", "=", "model", "(", "inputs", ")", "\n", "\n", "# Compute loss", "\n", "", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points", ")", "\n", "end_points", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", "\n", "", "loss", ",", "end_points", "=", "criterion", "(", "end_points", ",", "DATASET_CONFIG", ",", "\n", "num_decoder_layers", "=", "config", ".", "num_decoder_layers", ",", "\n", "query_points_generator_loss_coef", "=", "config", ".", "query_points_generator_loss_coef", ",", "\n", "obj_loss_coef", "=", "config", ".", "obj_loss_coef", ",", "\n", "box_loss_coef", "=", "config", ".", "box_loss_coef", ",", "\n", "sem_cls_loss_coef", "=", "config", ".", "sem_cls_loss_coef", ",", "\n", "query_points_obj_topk", "=", "config", ".", "query_points_obj_topk", ",", "\n", "center_loss_type", "=", "config", ".", "center_loss_type", ",", "\n", "center_delta", "=", "config", ".", "center_delta", ",", "\n", "size_loss_type", "=", "config", ".", "size_loss_type", ",", "\n", "size_delta", "=", "config", ".", "size_delta", ",", "\n", "heading_loss_type", "=", "config", ".", "heading_loss_type", ",", "\n", "heading_delta", "=", "config", ".", "heading_delta", ",", "\n", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "for", "key", "in", "end_points", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "if", "isinstance", "(", "end_points", "[", "key", "]", ",", "float", ")", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "", "for", "prefix", "in", "prefixes", ":", "\n", "            ", "batch_pred_map_cls", "=", "parse_predictions", "(", "end_points", ",", "CONFIG_DICT", ",", "prefix", ")", "\n", "batch_gt_map_cls", "=", "parse_groundtruths", "(", "end_points", ",", "CONFIG_DICT", ")", "\n", "batch_pred_map_cls_dict", "[", "prefix", "]", ".", "append", "(", "batch_pred_map_cls", ")", "\n", "batch_gt_map_cls_dict", "[", "prefix", "]", ".", "append", "(", "batch_gt_map_cls", ")", "\n", "\n", "", "if", "(", "batch_idx", "+", "1", ")", "%", "config", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "f'Eval: [{batch_idx + 1}/{len(test_loader)}]  '", "+", "''", ".", "join", "(", "\n", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'loss'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "\n", "'loss'", "in", "key", "and", "'proposal_'", "not", "in", "key", "and", "'last_'", "not", "in", "key", "and", "'head_'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'last_'", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'proposal_'", "in", "key", "]", ")", ")", "\n", "for", "ihead", "in", "range", "(", "config", ".", "num_decoder_layers", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "f'{ihead}head_'", "in", "key", "]", ")", ")", "\n", "\n", "", "", "", "mAP", "=", "0.0", "\n", "for", "prefix", "in", "prefixes", ":", "\n", "        ", "for", "(", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", "in", "zip", "(", "batch_pred_map_cls_dict", "[", "prefix", "]", ",", "\n", "batch_gt_map_cls_dict", "[", "prefix", "]", ")", ":", "\n", "            ", "for", "ap_calculator", "in", "ap_calculator_list", ":", "\n", "                ", "ap_calculator", ".", "step", "(", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", "\n", "# Evaluate average precision", "\n", "", "", "for", "i", ",", "ap_calculator", "in", "enumerate", "(", "ap_calculator_list", ")", ":", "\n", "            ", "metrics_dict", "=", "ap_calculator", ".", "compute_metrics", "(", ")", "\n", "logger", ".", "info", "(", "f'=====================>{prefix} IOU THRESH: {AP_IOU_THRESHOLDS[i]}<====================='", ")", "\n", "for", "key", "in", "metrics_dict", ":", "\n", "                ", "logger", ".", "info", "(", "f'{key} {metrics_dict[key]}'", ")", "\n", "", "if", "prefix", "==", "'last_'", "and", "ap_calculator", ".", "ap_iou_thresh", ">", "0.3", ":", "\n", "                ", "mAP", "=", "metrics_dict", "[", "'mAP'", "]", "\n", "", "mAPs", "[", "i", "]", "[", "1", "]", "[", "prefix", "]", "=", "metrics_dict", "[", "'mAP'", "]", "\n", "ap_calculator", ".", "reset", "(", ")", "\n", "\n", "", "", "for", "mAP", "in", "mAPs", ":", "\n", "        ", "logger", ".", "info", "(", "f'IoU[{mAP[0]}]:\\t'", "+", "''", ".", "join", "(", "[", "f'{key}: {mAP[1][key]:.4f} \\t'", "for", "key", "in", "sorted", "(", "mAP", "[", "1", "]", ".", "keys", "(", ")", ")", "]", ")", ")", "\n", "\n", "", "return", "mAP", ",", "mAPs", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.parse_option": [[23, 104], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["def", "parse_option", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# Model", "\n", "parser", ".", "add_argument", "(", "'--width'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'backbone width'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_target'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Proposal number [default: 256]'", ")", "\n", "parser", ".", "add_argument", "(", "'--sampling'", ",", "default", "=", "'kps'", ",", "type", "=", "str", ",", "help", "=", "'Query points sampling method (kps, fps)'", ")", "\n", "\n", "# Transformer", "\n", "parser", ".", "add_argument", "(", "'--nhead'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "'multi-head number'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_decoder_layers'", ",", "default", "=", "6", ",", "type", "=", "int", ",", "help", "=", "'number of decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--dim_feedforward'", ",", "default", "=", "2048", ",", "type", "=", "int", ",", "help", "=", "'dim_feedforward'", ")", "\n", "parser", ".", "add_argument", "(", "'--transformer_dropout'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'transformer_dropout'", ")", "\n", "parser", ".", "add_argument", "(", "'--transformer_activation'", ",", "default", "=", "'relu'", ",", "type", "=", "str", ",", "help", "=", "'transformer_activation'", ")", "\n", "parser", ".", "add_argument", "(", "'--self_position_embedding'", ",", "default", "=", "'loc_learned'", ",", "type", "=", "str", ",", "\n", "help", "=", "'position_embedding in self attention (none, xyz_learned, loc_learned)'", ")", "\n", "parser", ".", "add_argument", "(", "'--cross_position_embedding'", ",", "default", "=", "'xyz_learned'", ",", "type", "=", "str", ",", "\n", "help", "=", "'position embedding in cross attention (none, xyz_learned)'", ")", "\n", "\n", "# Loss", "\n", "parser", ".", "add_argument", "(", "'--query_points_generator_loss_coef'", ",", "default", "=", "0.8", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--obj_loss_coef'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'Loss weight for objectness loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--box_loss_coef'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "'Loss weight for box loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--sem_cls_loss_coef'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "help", "=", "'Loss weight for classification loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_loss_type'", ",", "default", "=", "'smoothl1'", ",", "type", "=", "str", ",", "help", "=", "'(smoothl1, l1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--center_delta'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'delta for smoothl1 loss in center loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--size_loss_type'", ",", "default", "=", "'smoothl1'", ",", "type", "=", "str", ",", "help", "=", "'(smoothl1, l1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--size_delta'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'delta for smoothl1 loss in size loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--heading_loss_type'", ",", "default", "=", "'smoothl1'", ",", "type", "=", "str", ",", "help", "=", "'(smoothl1, l1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--heading_delta'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'delta for smoothl1 loss in heading loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--query_points_obj_topk'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "help", "=", "'query_points_obj_topk'", ")", "\n", "\n", "# Data", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'Batch Size during training [default: 8]'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'scannet'", ",", "help", "=", "'Dataset name. sunrgbd or scannet. [default: scannet]'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_point'", ",", "type", "=", "int", ",", "default", "=", "50000", ",", "help", "=", "'Point Number [default: 50000]'", ")", "\n", "#parser.add_argument('--data_root', default='data', help='data root path')", "\n", "parser", ".", "add_argument", "(", "'--use_height'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use height signal in input.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_color'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use RGB color in input.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_sunrgbd_v2'", ",", "action", "=", "'store_true'", ",", "help", "=", "'Use V2 box labels for SUN RGB-D dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'num of workers to use'", ")", "\n", "\n", "# Training", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'Epoch to run [default: 1]'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_epoch'", ",", "type", "=", "int", ",", "default", "=", "400", ",", "help", "=", "'Epoch to run [default: 180]'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adamW'", ",", "help", "=", "'optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum for SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.0005", ",", "\n", "help", "=", "'Optimization L2 weight decay [default: 0.0005]'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.004", ",", "\n", "help", "=", "'Initial learning rate for all except decoder [default: 0.004]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder_learning_rate'", ",", "type", "=", "float", ",", "default", "=", "0.0004", ",", "\n", "help", "=", "'Initial learning rate for decoder [default: 0.0004]'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-scheduler'", ",", "type", "=", "str", ",", "default", "=", "'step'", ",", "\n", "choices", "=", "[", "\"step\"", ",", "\"cosine\"", "]", ",", "help", "=", "\"learning rate scheduler\"", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-epoch'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'warmup epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-multiplier'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'warmup multiplier'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_epochs'", ",", "type", "=", "int", ",", "default", "=", "[", "280", ",", "340", "]", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'for step scheduler. where to decay lr, can be a list'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'for step scheduler. decay rate for learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_norm'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'gradient clipping max norm'", ")", "\n", "parser", ".", "add_argument", "(", "'--bn_momentum'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'Default bn momeuntum'", ")", "\n", "parser", ".", "add_argument", "(", "'--syncbn'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether to use sync bn'", ")", "\n", "\n", "# io", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_path'", ",", "default", "=", "None", ",", "help", "=", "'Model checkpoint path [default: None]'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "default", "=", "'log'", ",", "help", "=", "'Dump dir to save model checkpoint [default: log]'", ")", "\n", "parser", ".", "add_argument", "(", "'--print_freq'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'print frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'save frequency'", ")", "\n", "parser", ".", "add_argument", "(", "'--val_freq'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'val frequency'", ")", "\n", "\n", "# others", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "help", "=", "'local rank for DistributedDataParallel'", ")", "\n", "parser", ".", "add_argument", "(", "'--ap_iou_thresholds'", ",", "type", "=", "float", ",", "default", "=", "[", "0.25", ",", "0.5", "]", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'A list of AP IoU thresholds [default: 0.25,0.5]'", ")", "\n", "parser", ".", "add_argument", "(", "\"--rng_seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'manual seed'", ")", "\n", "\n", "args", ",", "unparsed", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.load_checkpoint": [[106, 119], ["logger.info", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "optimizer.load_state_dict", "scheduler.load_state_dict", "logger.info", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.load_state_dict"], ["", "def", "load_checkpoint", "(", "args", ",", "model", ",", "optimizer", ",", "scheduler", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "checkpoint_path", ")", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "\n", "logger", ".", "info", "(", "\"=> loaded successfully '{}' (epoch {})\"", ".", "format", "(", "args", ".", "checkpoint_path", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "\n", "del", "checkpoint", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.save_checkpoint": [[121, 145], ["logger.info", "model.state_dict", "optimizer.state_dict", "scheduler.state_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "logger.info", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.save", "logger.info", "print", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.GradualWarmupScheduler.state_dict"], ["", "def", "save_checkpoint", "(", "args", ",", "epoch", ",", "model", ",", "optimizer", ",", "scheduler", ",", "save_cur", "=", "False", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'==> Saving...'", ")", "\n", "state", "=", "{", "\n", "'config'", ":", "args", ",", "\n", "'save_path'", ":", "''", ",", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "}", "\n", "\n", "if", "save_cur", ":", "\n", "        ", "state", "[", "'save_path'", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", "\n", "logger", ".", "info", "(", "\"Saved in {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", ")", "\n", "", "elif", "epoch", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "        ", "state", "[", "'save_path'", "]", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", "\n", "logger", ".", "info", "(", "\"Saved in {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_{epoch}.pth'", ")", ")", ")", "\n", "", "else", ":", "\n", "# state['save_path'] = 'current.pth'", "\n", "# torch.save(state, os.path.join(args.log_dir, 'current.pth'))", "\n", "        ", "print", "(", "\"not saving checkpoint\"", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.get_loader": [[147, 194], ["print", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "numpy.random.seed", "sys.path.append", "ScannetDatasetConfig_md40", "ScannetDetectionDataset", "ScannetDetectionDataset", "NotImplementedError", "os.path.join", "len", "len", "len", "len", "numpy.random.get_state"], "function", ["None"], ["", "", "def", "get_loader", "(", "args", ")", ":", "\n", "# Init datasets and dataloaders", "\n", "    ", "def", "my_worker_init_fn", "(", "worker_id", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "np", ".", "random", ".", "get_state", "(", ")", "[", "1", "]", "[", "0", "]", "+", "worker_id", ")", "\n", "\n", "# Create Dataset and Dataloader", "\n", "", "if", "args", ".", "dataset", "==", "'scannet'", ":", "\n", "        ", "sys", ".", "path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "ROOT_DIR", ",", "'scannet'", ")", ")", "\n", "from", "scannet", ".", "scannet_detection_dataset", "import", "ScannetDetectionDataset", "\n", "from", "scannet", ".", "model_util_scannet", "import", "ScannetDatasetConfig_md40", "\n", "\n", "DATASET_CONFIG", "=", "ScannetDatasetConfig_md40", "(", ")", "\n", "TRAIN_DATASET", "=", "ScannetDetectionDataset", "(", "'train'", ",", "'scannet_train_detection_data_md40'", ",", "num_points", "=", "args", ".", "num_point", ",", "\n", "augment", "=", "True", ",", "\n", "use_color", "=", "True", "if", "args", ".", "use_color", "else", "False", ",", "\n", "use_height", "=", "True", "if", "args", ".", "use_height", "else", "False", ")", "\n", "TEST_DATASET", "=", "ScannetDetectionDataset", "(", "'val'", ",", "'scannet_train_detection_data_md40'", ",", "num_points", "=", "args", ".", "num_point", ",", "\n", "augment", "=", "False", ",", "\n", "use_color", "=", "True", "if", "args", ".", "use_color", "else", "False", ",", "\n", "use_height", "=", "True", "if", "args", ".", "use_height", "else", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Unknown dataset {args.dataset}. Exiting...'", ")", "\n", "\n", "", "print", "(", "f\"train_len: {len(TRAIN_DATASET)}, test_len: {len(TEST_DATASET)}\"", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "TRAIN_DATASET", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TRAIN_DATASET", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "test_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "TEST_DATASET", ",", "shuffle", "=", "False", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "TEST_DATASET", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "worker_init_fn", "=", "my_worker_init_fn", ",", "\n", "pin_memory", "=", "True", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "drop_last", "=", "False", ")", "\n", "print", "(", "f\"train_loader_len: {len(train_loader)}, test_loader_len: {len(test_loader)}\"", ")", "\n", "\n", "return", "train_loader", ",", "test_loader", ",", "DATASET_CONFIG", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.get_model": [[196, 221], ["models.GroupFreeDetector", "int", "int"], "function", ["None"], ["", "def", "get_model", "(", "args", ",", "DATASET_CONFIG", ")", ":", "\n", "    ", "if", "args", ".", "use_height", ":", "\n", "        ", "num_input_channel", "=", "int", "(", "args", ".", "use_color", ")", "*", "3", "+", "1", "\n", "", "else", ":", "\n", "        ", "num_input_channel", "=", "int", "(", "args", ".", "use_color", ")", "*", "3", "\n", "", "model", "=", "GroupFreeDetector", "(", "num_class", "=", "DATASET_CONFIG", ".", "num_class", ",", "\n", "num_heading_bin", "=", "DATASET_CONFIG", ".", "num_heading_bin", ",", "\n", "num_size_cluster", "=", "DATASET_CONFIG", ".", "num_size_cluster", ",", "\n", "mean_size_arr", "=", "DATASET_CONFIG", ".", "mean_size_arr", ",", "\n", "input_feature_dim", "=", "num_input_channel", ",", "\n", "width", "=", "args", ".", "width", ",", "\n", "bn_momentum", "=", "args", ".", "bn_momentum", ",", "\n", "sync_bn", "=", "True", "if", "args", ".", "syncbn", "else", "False", ",", "\n", "num_proposal", "=", "args", ".", "num_target", ",", "\n", "sampling", "=", "args", ".", "sampling", ",", "\n", "dropout", "=", "args", ".", "transformer_dropout", ",", "\n", "activation", "=", "args", ".", "transformer_activation", ",", "\n", "nhead", "=", "args", ".", "nhead", ",", "\n", "num_decoder_layers", "=", "args", ".", "num_decoder_layers", ",", "\n", "dim_feedforward", "=", "args", ".", "dim_feedforward", ",", "\n", "self_position_embedding", "=", "args", ".", "self_position_embedding", ",", "\n", "cross_position_embedding", "=", "args", ".", "cross_position_embedding", ")", "\n", "\n", "criterion", "=", "get_loss", "\n", "return", "model", ",", "criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.main": [[223, 285], ["train_GF_FSB.get_loader", "len", "logger.info", "len", "logger.info", "train_GF_FSB.get_model", "utils.get_scheduler", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "range", "train_GF_FSB.evaluate_one_epoch", "train_GF_FSB.save_checkpoint", "logger.info", "os.path.join", "torch.get_rank", "logger.info", "torch.AdamW", "len", "os.path.isfile", "train_GF_FSB.load_checkpoint", "train_loader.sampler.set_epoch", "time.time", "train_GF_FSB.train_one_epoch", "logger.info", "str", "train_GF_FSB.evaluate_one_epoch", "torch.get_rank", "train_GF_FSB.save_checkpoint", "os.path.join", "time.time", "torch.nn.parallel.DistributedDataParallel.named_parameters", "torch.nn.parallel.DistributedDataParallel.named_parameters"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.get_loader", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.get_model", "home.repos.pwc.inspect_result.xuxw98_backtoreality.utils.lr_scheduler.get_scheduler", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.evaluate_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.save_checkpoint", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.load_checkpoint", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.train_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.evaluate_one_epoch", "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.save_checkpoint"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "train_loader", ",", "test_loader", ",", "DATASET_CONFIG", "=", "get_loader", "(", "args", ")", "\n", "n_data", "=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "f\"length of training dataset: {n_data}\"", ")", "\n", "n_data", "=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "logger", ".", "info", "(", "f\"length of testing dataset: {n_data}\"", ")", "\n", "\n", "model", ",", "criterion", "=", "get_model", "(", "args", ",", "DATASET_CONFIG", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "        ", "logger", ".", "info", "(", "str", "(", "model", ")", ")", "\n", "# optimizer", "\n", "", "if", "args", ".", "optimizer", "==", "'adamW'", ":", "\n", "        ", "param_dicts", "=", "[", "\n", "{", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "\"decoder\"", "not", "in", "n", "and", "p", ".", "requires_grad", "]", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "\"decoder\"", "in", "n", "and", "p", ".", "requires_grad", "]", ",", "\n", "\"lr\"", ":", "args", ".", "decoder_learning_rate", ",", "\n", "}", ",", "\n", "]", "\n", "optimizer", "=", "optim", ".", "AdamW", "(", "param_dicts", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "scheduler", "=", "get_scheduler", "(", "optimizer", ",", "len", "(", "train_loader", ")", ",", "args", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "broadcast_buffers", "=", "False", ")", "\n", "\n", "if", "args", ".", "checkpoint_path", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "checkpoint_path", ")", "\n", "load_checkpoint", "(", "args", ",", "model", ",", "optimizer", ",", "scheduler", ")", "\n", "\n", "# Used for AP calculation", "\n", "", "CONFIG_DICT", "=", "{", "'remove_empty_box'", ":", "False", ",", "'use_3d_nms'", ":", "True", ",", "\n", "'nms_iou'", ":", "0.25", ",", "'use_old_type_nms'", ":", "False", ",", "'cls_nms'", ":", "True", ",", "\n", "'per_class_proposal'", ":", "True", ",", "'conf_thresh'", ":", "0.0", ",", "\n", "'dataset_config'", ":", "DATASET_CONFIG", "}", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "max_epoch", "+", "1", ")", ":", "\n", "        ", "train_loader", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_one_epoch", "(", "epoch", ",", "train_loader", ",", "DATASET_CONFIG", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "args", ")", "\n", "\n", "logger", ".", "info", "(", "'epoch {}, total time {:.2f}, '", "\n", "'lr_base {:.5f}, lr_decoder {:.5f}'", ".", "format", "(", "epoch", ",", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ",", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "\n", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "if", "epoch", "%", "args", ".", "val_freq", "==", "0", ":", "\n", "            ", "evaluate_one_epoch", "(", "test_loader", ",", "DATASET_CONFIG", ",", "CONFIG_DICT", ",", "args", ".", "ap_iou_thresholds", ",", "model", ",", "\n", "criterion", ",", "args", ")", "\n", "\n", "", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# save model", "\n", "            ", "save_checkpoint", "(", "args", ",", "epoch", ",", "model", ",", "optimizer", ",", "scheduler", ")", "\n", "", "", "evaluate_one_epoch", "(", "test_loader", ",", "DATASET_CONFIG", ",", "CONFIG_DICT", ",", "args", ".", "ap_iou_thresholds", ",", "model", ",", "criterion", ",", "args", ")", "\n", "save_checkpoint", "(", "args", ",", "'last'", ",", "model", ",", "optimizer", ",", "scheduler", ",", "save_cur", "=", "True", ")", "\n", "logger", ".", "info", "(", "\"Saved in {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_last.pth'", ")", ")", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "f'ckpt_epoch_last.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.train_one_epoch": [[287, 352], ["model.train", "enumerate", "model", "criterion", "optimizer.zero_grad", "loss.backward", "optimizer.step", "scheduler.step", "batch_data_label[].cuda", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "range", "sorted", "model.parameters", "isinstance", "logger.info", "stat_dict.keys", "end_points[].item", "len", "sorted", "sorted", "sorted", "sorted", "stat_dict.keys", "stat_dict.keys", "stat_dict.keys", "sorted", "stat_dict.keys", "stat_dict.keys"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Votenet.train_Votenet_FSB.train", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pointnet2_utils.BallQuery.backward", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step"], ["", "def", "train_one_epoch", "(", "epoch", ",", "train_loader", ",", "DATASET_CONFIG", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "config", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "# collect statistics", "\n", "model", ".", "train", "(", ")", "# set model to training mode", "\n", "for", "batch_idx", ",", "batch_data_label", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "batch_data_label", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "", "inputs", "=", "{", "'point_clouds'", ":", "batch_data_label", "[", "'point_clouds'", "]", "}", "\n", "\n", "# Forward pass", "\n", "end_points", "=", "model", "(", "inputs", ")", "\n", "\n", "# Compute loss and gradients, update parameters.", "\n", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points", ")", "\n", "end_points", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", "\n", "", "loss", ",", "end_points", "=", "criterion", "(", "end_points", ",", "DATASET_CONFIG", ",", "\n", "num_decoder_layers", "=", "config", ".", "num_decoder_layers", ",", "\n", "query_points_generator_loss_coef", "=", "config", ".", "query_points_generator_loss_coef", ",", "\n", "obj_loss_coef", "=", "config", ".", "obj_loss_coef", ",", "\n", "box_loss_coef", "=", "config", ".", "box_loss_coef", ",", "\n", "sem_cls_loss_coef", "=", "config", ".", "sem_cls_loss_coef", ",", "\n", "query_points_obj_topk", "=", "config", ".", "query_points_obj_topk", ",", "\n", "center_loss_type", "=", "config", ".", "center_loss_type", ",", "\n", "center_delta", "=", "config", ".", "center_delta", ",", "\n", "size_loss_type", "=", "config", ".", "size_loss_type", ",", "\n", "size_delta", "=", "config", ".", "size_delta", ",", "\n", "heading_loss_type", "=", "config", ".", "heading_loss_type", ",", "\n", "heading_delta", "=", "config", ".", "heading_delta", ",", "\n", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "config", ".", "clip_norm", ">", "0", ":", "\n", "            ", "grad_total_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "config", ".", "clip_norm", ")", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "stat_dict", "[", "'grad_norm'", "]", "=", "grad_total_norm", "\n", "for", "key", "in", "end_points", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "if", "isinstance", "(", "end_points", "[", "key", "]", ",", "float", ")", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "", "if", "(", "batch_idx", "+", "1", ")", "%", "config", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "f'Train: [{epoch}][{batch_idx + 1}/{len(train_loader)}]  '", "+", "''", ".", "join", "(", "\n", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'loss'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "f\"grad_norm: {stat_dict['grad_norm']}\"", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "\n", "'loss'", "in", "key", "and", "'proposal_'", "not", "in", "key", "and", "'last_'", "not", "in", "key", "and", "'head_'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'last_'", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'proposal_'", "in", "key", "]", ")", ")", "\n", "for", "ihead", "in", "range", "(", "config", ".", "num_decoder_layers", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / config.print_freq:.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "f'{ihead}head_'", "in", "key", "]", ")", ")", "\n", "\n", "", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "stat_dict", "[", "key", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.GroupFree3D.train_GF_FSB.evaluate_one_epoch": [[354, 448], ["model.eval", "enumerate", "models.APCalculator", "criterion", "zip", "enumerate", "logger.info", "batch_data_label[].cuda", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "models.parse_predictions", "models.parse_groundtruths", "batch_pred_map_cls_dict[].append", "batch_gt_map_cls_dict[].append", "logger.info", "logger.info", "logger.info", "logger.info", "range", "ap_calculator.compute_metrics", "logger.info", "ap_calculator.reset", "isinstance", "logger.info", "ap_calculator.step", "logger.info", "range", "end_points[].item", "len", "sorted", "sorted", "sorted", "sorted", "sorted", "stat_dict.keys", "stat_dict.keys", "stat_dict.keys", "sorted", "mAP[].keys", "stat_dict.keys", "float", "float", "float", "stat_dict.keys", "float", "float"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_predictions", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.parse_groundtruths", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.compute_metrics", "home.repos.pwc.inspect_result.xuxw98_backtoreality.models.ap_helper.APCalculator.reset", "home.repos.pwc.inspect_result.xuxw98_backtoreality.pointnet2.pytorch_utils.BNMomentumScheduler.step"], ["", "", "", "", "def", "evaluate_one_epoch", "(", "test_loader", ",", "DATASET_CONFIG", ",", "CONFIG_DICT", ",", "AP_IOU_THRESHOLDS", ",", "model", ",", "criterion", ",", "config", ")", ":", "\n", "    ", "stat_dict", "=", "{", "}", "\n", "\n", "if", "config", ".", "num_decoder_layers", ">", "0", ":", "\n", "        ", "prefixes", "=", "[", "'last_'", ",", "'proposal_'", "]", "+", "[", "f'{i}head_'", "for", "i", "in", "range", "(", "config", ".", "num_decoder_layers", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "        ", "prefixes", "=", "[", "'proposal_'", "]", "# only proposal", "\n", "", "ap_calculator_list", "=", "[", "APCalculator", "(", "iou_thresh", ",", "DATASET_CONFIG", ".", "class2type", ")", "for", "iou_thresh", "in", "AP_IOU_THRESHOLDS", "]", "\n", "mAPs", "=", "[", "[", "iou_thresh", ",", "{", "k", ":", "0", "for", "k", "in", "prefixes", "}", "]", "for", "iou_thresh", "in", "AP_IOU_THRESHOLDS", "]", "\n", "\n", "model", ".", "eval", "(", ")", "# set model to eval mode (for bn and dp)", "\n", "batch_pred_map_cls_dict", "=", "{", "k", ":", "[", "]", "for", "k", "in", "prefixes", "}", "\n", "batch_gt_map_cls_dict", "=", "{", "k", ":", "[", "]", "for", "k", "in", "prefixes", "}", "\n", "\n", "for", "batch_idx", ",", "batch_data_label", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "        ", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "batch_data_label", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# Forward pass", "\n", "", "inputs", "=", "{", "'point_clouds'", ":", "batch_data_label", "[", "'point_clouds'", "]", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "end_points", "=", "model", "(", "inputs", ")", "\n", "\n", "# Compute loss", "\n", "", "for", "key", "in", "batch_data_label", ":", "\n", "            ", "assert", "(", "key", "not", "in", "end_points", ")", "\n", "end_points", "[", "key", "]", "=", "batch_data_label", "[", "key", "]", "\n", "", "loss", ",", "end_points", "=", "criterion", "(", "end_points", ",", "DATASET_CONFIG", ",", "\n", "num_decoder_layers", "=", "config", ".", "num_decoder_layers", ",", "\n", "query_points_generator_loss_coef", "=", "config", ".", "query_points_generator_loss_coef", ",", "\n", "obj_loss_coef", "=", "config", ".", "obj_loss_coef", ",", "\n", "box_loss_coef", "=", "config", ".", "box_loss_coef", ",", "\n", "sem_cls_loss_coef", "=", "config", ".", "sem_cls_loss_coef", ",", "\n", "query_points_obj_topk", "=", "config", ".", "query_points_obj_topk", ",", "\n", "center_loss_type", "=", "config", ".", "center_loss_type", ",", "\n", "center_delta", "=", "config", ".", "center_delta", ",", "\n", "size_loss_type", "=", "config", ".", "size_loss_type", ",", "\n", "size_delta", "=", "config", ".", "size_delta", ",", "\n", "heading_loss_type", "=", "config", ".", "heading_loss_type", ",", "\n", "heading_delta", "=", "config", ".", "heading_delta", ",", "\n", ")", "\n", "\n", "# Accumulate statistics and print out", "\n", "for", "key", "in", "end_points", ":", "\n", "            ", "if", "'loss'", "in", "key", "or", "'acc'", "in", "key", "or", "'ratio'", "in", "key", ":", "\n", "                ", "if", "key", "not", "in", "stat_dict", ":", "stat_dict", "[", "key", "]", "=", "0", "\n", "if", "isinstance", "(", "end_points", "[", "key", "]", ",", "float", ")", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "stat_dict", "[", "key", "]", "+=", "end_points", "[", "key", "]", ".", "item", "(", ")", "\n", "\n", "", "", "", "for", "prefix", "in", "prefixes", ":", "\n", "            ", "batch_pred_map_cls", "=", "parse_predictions", "(", "end_points", ",", "CONFIG_DICT", ",", "prefix", ")", "\n", "batch_gt_map_cls", "=", "parse_groundtruths", "(", "end_points", ",", "CONFIG_DICT", ")", "\n", "batch_pred_map_cls_dict", "[", "prefix", "]", ".", "append", "(", "batch_pred_map_cls", ")", "\n", "batch_gt_map_cls_dict", "[", "prefix", "]", ".", "append", "(", "batch_gt_map_cls", ")", "\n", "\n", "", "if", "(", "batch_idx", "+", "1", ")", "%", "config", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "f'Eval: [{batch_idx + 1}/{len(test_loader)}]  '", "+", "''", ".", "join", "(", "\n", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'loss'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "\n", "'loss'", "in", "key", "and", "'proposal_'", "not", "in", "key", "and", "'last_'", "not", "in", "key", "and", "'head_'", "not", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'last_'", "in", "key", "]", ")", ")", "\n", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "'proposal_'", "in", "key", "]", ")", ")", "\n", "for", "ihead", "in", "range", "(", "config", ".", "num_decoder_layers", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "logger", ".", "info", "(", "''", ".", "join", "(", "[", "f'{key} {stat_dict[key] / (float(batch_idx + 1)):.4f} \\t'", "\n", "for", "key", "in", "sorted", "(", "stat_dict", ".", "keys", "(", ")", ")", "if", "f'{ihead}head_'", "in", "key", "]", ")", ")", "\n", "\n", "", "", "", "mAP", "=", "0.0", "\n", "for", "prefix", "in", "prefixes", ":", "\n", "        ", "for", "(", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", "in", "zip", "(", "batch_pred_map_cls_dict", "[", "prefix", "]", ",", "\n", "batch_gt_map_cls_dict", "[", "prefix", "]", ")", ":", "\n", "            ", "for", "ap_calculator", "in", "ap_calculator_list", ":", "\n", "                ", "ap_calculator", ".", "step", "(", "batch_pred_map_cls", ",", "batch_gt_map_cls", ")", "\n", "# Evaluate average precision", "\n", "", "", "for", "i", ",", "ap_calculator", "in", "enumerate", "(", "ap_calculator_list", ")", ":", "\n", "            ", "metrics_dict", "=", "ap_calculator", ".", "compute_metrics", "(", ")", "\n", "logger", ".", "info", "(", "f'=====================>{prefix} IOU THRESH: {AP_IOU_THRESHOLDS[i]}<====================='", ")", "\n", "for", "key", "in", "metrics_dict", ":", "\n", "                ", "logger", ".", "info", "(", "f'{key} {metrics_dict[key]}'", ")", "\n", "", "if", "prefix", "==", "'last_'", "and", "ap_calculator", ".", "ap_iou_thresh", ">", "0.3", ":", "\n", "                ", "mAP", "=", "metrics_dict", "[", "'mAP'", "]", "\n", "", "mAPs", "[", "i", "]", "[", "1", "]", "[", "prefix", "]", "=", "metrics_dict", "[", "'mAP'", "]", "\n", "ap_calculator", ".", "reset", "(", ")", "\n", "\n", "", "", "for", "mAP", "in", "mAPs", ":", "\n", "        ", "logger", ".", "info", "(", "f'IoU[{mAP[0]}]:\\t'", "+", "''", ".", "join", "(", "[", "f'{key}: {mAP[1][key]:.4f} \\t'", "for", "key", "in", "sorted", "(", "mAP", "[", "1", "]", ".", "keys", "(", ")", ")", "]", ")", ")", "\n", "\n", "", "return", "mAP", ",", "mAPs", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.segment_tools.get_mesh": [[15, 18], ["open3d.io.read_triangle_mesh"], "function", ["None"], ["def", "get_mesh", "(", "scene_ply", ")", ":", "\n", "    ", "mesh", "=", "o3d", ".", "io", ".", "read_triangle_mesh", "(", "scene_ply", ")", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.segment_tools.get_normal": [[20, 23], ["mesh.compute_vertex_normals", "numpy.array"], "function", ["None"], ["", "def", "get_normal", "(", "mesh", ")", ":", "\n", "    ", "mesh", ".", "compute_vertex_normals", "(", ")", "\n", "return", "np", ".", "array", "(", "mesh", ".", "triangle_normals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.segment_tools.Is_horizontal": [[25, 31], ["zs.sort"], "function", ["None"], ["", "def", "Is_horizontal", "(", "scene_vertices", ",", "seg", ")", ":", "\n", "# scene_vertices: Nx3", "\n", "    ", "zs", "=", "scene_vertices", "[", "seg", "]", "[", ":", ",", "2", "]", "\n", "zs", ".", "sort", "(", ")", "\n", "num", "=", "zs", ".", "shape", "[", "0", "]", "\n", "return", "zs", "[", "-", "1", "]", "-", "zs", "[", "num", "//", "2", "]", "<", "0.2", "or", "zs", "[", "num", "//", "2", "]", "-", "zs", "[", "0", "]", "<", "0.2", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.segment_tools.get_height": [[33, 41], ["numpy.mean", "abs", "z_list.append", "numpy.dot"], "function", ["None"], ["", "def", "get_height", "(", "scene_vertices", ",", "scene_normal", ",", "seg", ")", ":", "\n", "# scene_vertices: Nx3", "\n", "    ", "z_list", "=", "[", "]", "\n", "for", "idx", "in", "seg", ":", "\n", "        ", "normal", "=", "scene_normal", "[", "idx", "]", "\n", "if", "abs", "(", "np", ".", "dot", "(", "normal", ",", "[", "0", ",", "0", ",", "1", "]", ")", ")", ">", "0.88", ":", "\n", "            ", "z_list", ".", "append", "(", "scene_vertices", "[", "idx", "]", "[", "2", "]", ")", "\n", "", "", "return", "np", ".", "mean", "(", "z_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.segment_tools.generate_seg_adjacency_matrix": [[43, 63], ["numpy.unique", "len", "range", "numpy.zeros", "range", "idx_to_segidx.items"], "function", ["None"], ["", "def", "generate_seg_adjacency_matrix", "(", "plydata", ",", "segindices", ")", ":", "\n", "# idx_to_segidx", "\n", "# idx: 0->num_segs-1", "\n", "    ", "segidxs", "=", "np", ".", "unique", "(", "segindices", ")", "\n", "seg_num", "=", "len", "(", "segidxs", ")", "\n", "idx_to_segidx", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "seg_num", ")", ":", "\n", "        ", "idx_to_segidx", "[", "i", "]", "=", "segidxs", "[", "i", "]", "\n", "", "segidx_to_idx", "=", "{", "value", ":", "key", "for", "key", ",", "value", "in", "idx_to_segidx", ".", "items", "(", ")", "}", "\n", "adjacency_matrix", "=", "np", ".", "zeros", "(", "[", "seg_num", ",", "seg_num", "]", ")", "\n", "num_faces", "=", "plydata", "[", "'face'", "]", ".", "count", "\n", "for", "i", "in", "range", "(", "num_faces", ")", ":", "\n", "        ", "face", "=", "plydata", "[", "'face'", "]", "[", "'vertex_indices'", "]", "[", "i", "]", "\n", "for", "idx", "in", "[", "[", "0", ",", "1", "]", ",", "[", "0", ",", "2", "]", ",", "[", "1", ",", "2", "]", "]", ":", "\n", "            ", "seg1", "=", "segindices", "[", "face", "[", "idx", "[", "0", "]", "]", "]", "\n", "seg2", "=", "segindices", "[", "face", "[", "idx", "[", "1", "]", "]", "]", "\n", "if", "seg1", "!=", "seg2", ":", "\n", "                ", "adjacency_matrix", "[", "segidx_to_idx", "[", "seg1", "]", "]", "[", "segidx_to_idx", "[", "seg2", "]", "]", "=", "1", "\n", "adjacency_matrix", "[", "segidx_to_idx", "[", "seg2", "]", "]", "[", "segidx_to_idx", "[", "seg1", "]", "]", "=", "1", "\n", "", "", "", "return", "adjacency_matrix", ",", "idx_to_segidx", ",", "segidx_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.segment_tools.get_neighbor": [[65, 68], ["list", "numpy.reshape", "numpy.argwhere"], "function", ["None"], ["", "def", "get_neighbor", "(", "adj_matrix", ",", "idx_to_segidx", ",", "segidx_to_idx", ",", "segidx", ")", ":", "\n", "    ", "idxs", "=", "list", "(", "np", ".", "reshape", "(", "np", ".", "argwhere", "(", "adj_matrix", "[", "segidx_to_idx", "[", "segidx", "]", "]", "==", "1", ")", ",", "-", "1", ")", ")", "\n", "return", "[", "idx_to_segidx", "[", "idx", "]", "for", "idx", "in", "idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.segment_tools.get_horizontal_area": [[70, 77], ["xys.astype.astype", "cv2.convexHull", "cv2.contourArea", "numpy.array"], "function", ["None"], ["", "def", "get_horizontal_area", "(", "scene_vertices", ",", "seg", ")", ":", "\n", "    ", "xys", "=", "(", "np", ".", "array", "(", "scene_vertices", ")", "[", ":", ",", ":", "2", "]", ")", "[", "seg", "]", "\n", "xys", "*=", "1000", "\n", "xys", "=", "xys", ".", "astype", "(", "'int'", ")", "\n", "hull", "=", "cv2", ".", "convexHull", "(", "xys", ",", "clockwise", "=", "True", ",", "returnPoints", "=", "True", ")", "\n", "area", "=", "cv2", ".", "contourArea", "(", "hull", ")", "\n", "return", "area", "/", "1000000", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.segment_tools.export_random": [[79, 165], ["numpy.load().item", "np.load().item.items", "segment_tools.get_mesh", "numpy.array", "segment_tools.get_normal", "plyfile.PlyData.read", "open().readlines", "numpy.array().reshape", "numpy.ones", "numpy.dot", "ins_ply.read_aggregation", "ins_ply.read_segmentation", "numpy.zeros", "label_to_segs.items", "numpy.zeros", "len", "ins_ply.get_id_to_label", "object_id_to_segs.items", "object_id_to_segs.items", "open", "json.load", "np.array().reshape.transpose", "numpy.unique", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.load", "numpy.load().item", "numpy.load", "open", "numpy.array", "list", "len", "numpy.array", "float", "object_id_to_segs.keys", "numpy.load", "line.rstrip().strip().split", "line.rstrip().strip", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.get_mesh", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.get_normal", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_aggregation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_segmentation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.get_id_to_label"], ["", "def", "export_random", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ")", ":", "\n", "## correct some misleading things", "\n", "    ", "label_map", "=", "np", ".", "load", "(", "\"CONFIG/map2modelnet.npy\"", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "for", "key", ",", "value", "in", "label_map", ".", "items", "(", ")", ":", "\n", "        ", "if", "\"door\"", "in", "key", "and", "key", "!=", "\"door\"", ":", "\n", "            ", "label_map", "[", "key", "]", "=", "0", "\n", "", "", "label_map", "[", "\"ottoman\"", "]", "=", "0", "\n", "label_map", "[", "\"bathroom vanity\"", "]", "=", "34", "# table", "\n", "label_map", "[", "\"sink\"", "]", "=", "0", "\n", "\n", "# ## for WSD, we only need furniture, so objects should be ignored", "\n", "# ## c10 is the 10 category in SUN-RGBD detection", "\n", "# c10_in_modelnet40 = [3, 34, 31, 9, 36, 13, 15, 24, 5, 2]", "\n", "# for key, value in label_map.items():", "\n", "#     if value not in c10_in_modelnet40:", "\n", "#         label_map[key] = 0", "\n", "\n", "mesh", "=", "get_mesh", "(", "mesh_file", ")", "\n", "mesh_vertices", "=", "np", ".", "array", "(", "mesh", ".", "vertices", ")", "\n", "scene_normal", "=", "get_normal", "(", "mesh", ")", "\n", "with", "open", "(", "seg_file", ")", "as", "fp", ":", "\n", "        ", "j", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "segindices", "=", "j", "[", "'segIndices'", "]", "\n", "\n", "plydata", "=", "PlyData", ".", "read", "(", "mesh_file", ")", "\n", "\n", "## Load scene axis alignment matrix", "\n", "lines", "=", "open", "(", "meta_file", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "'axisAlignment'", "in", "line", ":", "\n", "            ", "axis_align_matrix", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "rstrip", "(", ")", ".", "strip", "(", "'axisAlignment = '", ")", ".", "split", "(", "' '", ")", "]", "\n", "break", "\n", "", "", "axis_align_matrix", "=", "np", ".", "array", "(", "axis_align_matrix", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "pts", "=", "np", ".", "ones", "(", "(", "mesh_vertices", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "pts", "[", ":", ",", "0", ":", "3", "]", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "\n", "pts", "=", "np", ".", "dot", "(", "pts", ",", "axis_align_matrix", ".", "transpose", "(", ")", ")", "# Nx4", "\n", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "=", "pts", "[", ":", ",", "0", ":", "3", "]", "\n", "\n", "## Load semantic and instance labels", "\n", "# note that seg_to_verts means segidx_to_seg according to the definition above", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "object_id_to_label_id", "=", "{", "}", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "label_map", "[", "label", "]", "\n", "for", "segidx", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "segidx", "]", "\n", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "", "", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "object_id_to_segs", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "# obj_id: [(x, y, z), label, modelnet_id]", "\n", "xyz_obj_dict", "=", "{", "}", "\n", "id_to_label", "=", "get_id_to_label", "(", "agg_file", ")", "\n", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "if", "label_ids", "[", "verts", "]", "[", "0", "]", "==", "0", ":", "\n", "                ", "instance_ids", "[", "verts", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "instance_ids", "[", "verts", "]", "=", "object_id", "\n", "\n", "", "", "", "obj_idx", "=", "-", "1", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "modelnet_id", "=", "label_map", "[", "id_to_label", "[", "object_id", "]", "]", "\n", "obj_pc", "=", "mesh_vertices", "[", "instance_ids", "==", "object_id", ",", "0", ":", "3", "]", "\n", "if", "len", "(", "obj_pc", ")", "==", "0", ":", "continue", "\n", "if", "modelnet_id", "not", "in", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "19", ",", "20", ",", "21", ",", "23", ",", "24", ",", "27", ",", "31", ",", "33", ",", "34", ",", "36", ",", "39", "]", ":", "continue", "\n", "obj_idx", "+=", "1", "\n", "xmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "x", ",", "y", ",", "z", "=", "(", "xmin", "+", "xmax", ")", "/", "2", ",", "(", "ymin", "+", "ymax", ")", "/", "2", ",", "(", "zmin", "+", "zmax", ")", "/", "2", "\n", "error", "=", "np", ".", "load", "(", "'CONFIG/annotation_error.npy'", ")", "\n", "scan_name_to_idx", "=", "np", ".", "load", "(", "'CONFIG/name2idx.npy'", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "dx", ",", "dy", ",", "dz", "=", "np", ".", "array", "(", "[", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ",", "zmax", "-", "zmin", "]", ")", "*", "error", "[", "scan_name_to_idx", "[", "mesh_file", "[", "-", "27", ":", "-", "15", "]", "]", ",", "obj_idx", ",", ":", "]", "\n", "x", "+=", "dx", ";", "y", "+=", "dy", ";", "z", "+=", "dz", "\n", "xyz_obj_dict", "[", "object_id", "]", "=", "[", "(", "x", ",", "y", ",", "z", ")", ",", "id_to_label", "[", "object_id", "]", ",", "modelnet_id", "]", "\n", "\n", "", "return", "xyz_obj_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_scene_synthesis.get_solid_MER": [[19, 52], ["xys.astype.astype", "cv2.minAreaRect", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "sklearn.cluster.KMeans.predict", "cv2.minAreaRect", "sum", "sum", "cv2.minAreaRect"], "function", ["None"], ["def", "get_solid_MER", "(", "points", ")", ":", "\n", "    ", "xys", "=", "points", "[", ":", ",", "0", ":", "2", "]", "\n", "xys", "*=", "1000", "\n", "xys", "=", "xys", ".", "astype", "(", "'int'", ")", "\n", "rect", "=", "cv2", ".", "minAreaRect", "(", "xys", ")", "\n", "k_means", "=", "KMeans", "(", "n_clusters", "=", "2", ")", "\n", "k_means", ".", "fit", "(", "xys", ")", "\n", "cluster_label", "=", "k_means", ".", "predict", "(", "xys", ")", "\n", "choose0", "=", "(", "sum", "(", "cluster_label", "==", "0", ")", "<", "sum", "(", "cluster_label", "==", "1", ")", ")", "\n", "if", "choose0", ":", "\n", "        ", "xys_part", "=", "xys", "[", "cluster_label", "==", "0", "]", "\n", "xys_other", "=", "xys", "[", "cluster_label", "==", "1", "]", "\n", "", "else", ":", "\n", "        ", "xys_part", "=", "xys", "[", "cluster_label", "==", "1", "]", "\n", "xys_other", "=", "xys", "[", "cluster_label", "==", "0", "]", "\n", "", "rect_part", "=", "cv2", ".", "minAreaRect", "(", "xys_part", ")", "\n", "Is_solid", "=", "(", "rect_part", "[", "1", "]", "[", "0", "]", "*", "rect_part", "[", "1", "]", "[", "1", "]", "*", "2.5", ">", "rect", "[", "1", "]", "[", "0", "]", "*", "rect", "[", "1", "]", "[", "1", "]", ")", "\n", "if", "Is_solid", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "rect", "=", "cv2", ".", "minAreaRect", "(", "xys_other", ")", "\n", "\n", "", "if", "rect", "[", "1", "]", "[", "1", "]", ">", "rect", "[", "1", "]", "[", "0", "]", ":", "\n", "        ", "l_s", "=", "(", "rect", "[", "1", "]", "[", "1", "]", "/", "1000", ",", "rect", "[", "1", "]", "[", "0", "]", "/", "1000", ")", "\n", "", "else", ":", "\n", "        ", "l_s", "=", "(", "rect", "[", "1", "]", "[", "0", "]", "/", "1000", ",", "rect", "[", "1", "]", "[", "1", "]", "/", "1000", ")", "\n", "", "if", "rect", "[", "1", "]", "[", "0", "]", ">=", "rect", "[", "1", "]", "[", "1", "]", ":", "\n", "        ", "theta", "=", "-", "rect", "[", "2", "]", "\n", "if", "theta", "==", "0", ":", "\n", "            ", "theta", "=", "180", "\n", "", "", "else", ":", "\n", "        ", "theta", "=", "-", "rect", "[", "2", "]", "+", "90", "\n", "", "return", "(", "(", "rect", "[", "0", "]", "[", "0", "]", "/", "1000", ",", "rect", "[", "0", "]", "[", "1", "]", "/", "1000", ")", ",", "l_s", ",", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_scene_synthesis.find_nearest_object": [[54, 69], ["info_dict.items", "scannet_scene_synthesis.find_nearest_object", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.find_nearest_object"], ["", "def", "find_nearest_object", "(", "ls_ratio", ",", "info_dict", ",", "object_name", ",", "require_support", "=", "False", ")", ":", "\n", "    ", "min_dis", "=", "100", "\n", "min_code", "=", "\"\"", "\n", "for", "key", ",", "value", "in", "info_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "value", "[", "0", "]", "[", "0", "]", "[", "1", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "abs", "(", "value", "[", "0", "]", "[", "0", "]", "[", "0", "]", "/", "value", "[", "0", "]", "[", "0", "]", "[", "1", "]", "-", "ls_ratio", ")", "<", "min_dis", ":", "\n", "            ", "if", "require_support", "==", "True", "and", "value", "[", "2", "]", "==", "False", ":", "\n", "                ", "continue", "\n", "", "min_dis", "=", "abs", "(", "value", "[", "0", "]", "[", "0", "]", "[", "0", "]", "/", "value", "[", "0", "]", "[", "0", "]", "[", "1", "]", "-", "ls_ratio", ")", "\n", "min_code", "=", "key", "\n", "", "", "if", "min_code", "==", "\"\"", "and", "require_support", "==", "True", ":", "\n", "        ", "return", "find_nearest_object", "(", "ls_ratio", ",", "info_dict", ",", "object_name", ")", "\n", "", "txt", "=", "object_name", "+", "\"_\"", "+", "min_code", "+", "\".txt\"", "\n", "return", "txt", ",", "info_dict", "[", "min_code", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_scene_synthesis.generate_initial_random_positions": [[71, 151], ["segment_tools.export_random", "numpy.load().item", "numpy.loadtxt", "segment_tools.export_random.items", "open3d.io.read_triangle_mesh", "numpy.array", "numpy.load().item", "ins_ply.read_aggregation", "ins_ply.read_segmentation", "numpy.zeros", "label_to_segs.items", "os.listdir", "os.listdir.remove", "numpy.load().item", "os.path.join", "numpy.loadtxt", "numpy.load", "os.path.join", "numpy.random.rand", "max", "min", "scannet_scene_synthesis.find_nearest_object", "scannet_scene_synthesis.find_nearest_object", "numpy.random.rand", "numpy.load", "numpy.load", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "max", "min", "max", "min", "max", "min", "abs", "os.path.join", "max", "min"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.export_random", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_aggregation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_segmentation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.find_nearest_object", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.find_nearest_object"], ["", "def", "generate_initial_random_positions", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ",", "modelnet40_path", ")", ":", "\n", "    ", "xyz_obj_dict", "=", "export_random", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ")", "\n", "obj_prop", "=", "np", ".", "load", "(", "'CONFIG/object40_property.npy'", ",", "allow_pickle", "=", "True", ",", "encoding", "=", "'bytes'", ")", ".", "item", "(", ")", "\n", "modelnet40_names", "=", "np", ".", "loadtxt", "(", "'CONFIG/modelnet40_shape_names.txt'", ",", "dtype", "=", "'object'", ")", "\n", "supporter_list", "=", "[", "\"tv_stand\"", ",", "\"desk\"", ",", "\"bed\"", ",", "\"bookshelf\"", ",", "\"table\"", ",", "\"night_stand\"", "]", "\n", "# object_id: [(x,y,z), (sx,sy,sz), object_txt, Is_supporter, theta, support_MER/None, height/None]", "\n", "# theta is the orientation of the object (anticlockwise)", "\n", "# supporter has theta, support_MER and height", "\n", "# object with plane but not supporter has theta, None, None", "\n", "# object without plane has None, None, None", "\n", "# MER: ((x, y), (long, short), theta)", "\n", "positions", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "xyz_obj_dict", ".", "items", "(", ")", ":", "\n", "        ", "obj_name", "=", "modelnet40_names", "[", "value", "[", "2", "]", "-", "1", "]", "\n", "txts", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "modelnet40_path", ",", "obj_name", ")", ")", "\n", "txts", ".", "remove", "(", "\"this_class_info.npy\"", ")", "\n", "this_class_info", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "modelnet40_path", ",", "obj_name", ",", "\n", "\"this_class_info.npy\"", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "# choose xy or yx", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", ":", "\n", "            ", "_", ",", "_", ",", "_", ",", "dxavg", ",", "dyavg", ",", "dzavg", "=", "obj_prop", "[", "value", "[", "2", "]", "]", "[", "0", ":", "6", "]", "\n", "", "else", ":", "\n", "            ", "dxavg", ",", "dyavg", ",", "dzavg", ",", "_", ",", "_", ",", "_", "=", "obj_prop", "[", "value", "[", "2", "]", "]", "[", "0", ":", "6", "]", "\n", "", "dxmin", ",", "dymin", ",", "dzmin", "=", "0.8", "*", "dxavg", ",", "0.8", "*", "dyavg", ",", "0.8", "*", "dzavg", "\n", "dxmax", ",", "dymax", ",", "dzmax", "=", "1.3", "*", "dxavg", ",", "1.3", "*", "dyavg", ",", "1.3", "*", "dzavg", "\n", "dx", "=", "dxmin", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "dxmax", "-", "dxmin", ")", "\n", "dy", "=", "dymin", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "dymax", "-", "dymin", ")", "\n", "dz", "=", "dzmin", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "dzmax", "-", "dzmin", ")", "\n", "x", ",", "y", ",", "z", "=", "value", "[", "0", "]", "\n", "ls_ratio", "=", "max", "(", "dx", ",", "dy", ")", "/", "min", "(", "dx", ",", "dy", ")", "\n", "if", "obj_name", "in", "supporter_list", ":", "\n", "            ", "txt", ",", "obj_info", "=", "find_nearest_object", "(", "ls_ratio", ",", "this_class_info", ",", "obj_name", ",", "require_support", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "txt", ",", "obj_info", "=", "find_nearest_object", "(", "ls_ratio", ",", "this_class_info", ",", "obj_name", ")", "\n", "", "obj_txt", "=", "os", ".", "path", ".", "join", "(", "modelnet40_path", ",", "obj_name", ",", "txt", ")", "\n", "pc_txt", "=", "np", ".", "loadtxt", "(", "obj_txt", ",", "delimiter", "=", "','", ")", "\n", "pc_txt", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "pc_txt", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "pc_txt", "[", ":", ",", "[", "4", ",", "5", "]", "]", "=", "pc_txt", "[", ":", ",", "[", "4", ",", "5", "]", "]", "\n", "ddx", ",", "ddy", ",", "ddz", "=", "max", "(", "pc_txt", "[", ":", ",", "0", "]", ")", "-", "min", "(", "pc_txt", "[", ":", ",", "0", "]", ")", ",", "max", "(", "pc_txt", "[", ":", ",", "1", "]", ")", "-", "min", "(", "pc_txt", "[", ":", ",", "1", "]", ")", ",", "max", "(", "pc_txt", "[", ":", ",", "2", "]", ")", "-", "min", "(", "pc_txt", "[", ":", ",", "2", "]", ")", "\n", "scale", "=", "(", "dx", "*", "dx", "*", "dz", "/", "ddx", "/", "ddy", "/", "ddz", ")", "**", "(", "1", "/", "3", ")", "\n", "# special category: door, curtain, ...", "\n", "# only constrain the height", "\n", "if", "obj_name", "in", "[", "\"curtain\"", ",", "\"door\"", ",", "\"sofa\"", ",", "\"desk\"", "]", ":", "\n", "            ", "scale", "=", "dz", "/", "ddz", "\n", "# special category: keyboard", "\n", "# only constrain the horizontal property", "\n", "", "if", "obj_name", "in", "[", "\"keyboard\"", "]", ":", "\n", "            ", "scale", "=", "(", "dx", "*", "dy", "/", "ddx", "/", "ddy", ")", "**", "(", "1", "/", "2", ")", "\n", "", "theta", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "360", "\n", "if", "obj_name", "in", "supporter_list", ":", "\n", "            ", "MER", "=", "(", "(", "x", ",", "y", ")", ",", "(", "scale", "*", "max", "(", "ddx", ",", "ddy", ")", ",", "scale", "*", "min", "(", "ddx", ",", "ddy", ")", ")", ",", "(", "theta", "+", "obj_info", "[", "0", "]", "[", "1", "]", ")", "%", "180", ")", "\n", "height", "=", "z", "+", "scale", "*", "obj_info", "[", "1", "]", "\n", "positions", "[", "key", "]", "=", "[", "(", "x", ",", "y", ",", "z", ")", ",", "(", "scale", ",", "scale", ",", "scale", ")", ",", "obj_txt", ",", "True", ",", "theta", ",", "MER", ",", "height", "]", "\n", "", "else", ":", "\n", "            ", "positions", "[", "key", "]", "=", "[", "(", "x", ",", "y", ",", "z", ")", ",", "(", "scale", ",", "scale", ",", "scale", ")", ",", "obj_txt", ",", "False", ",", "theta", ",", "None", ",", "None", "]", "\n", "\n", "", "", "'''\n    # no floor/wall points\n    wall_points = np.array([])\n    floor_points = np.array([])\n    '''", "\n", "\n", "# get floor/wall points", "\n", "mesh", "=", "o3d", ".", "io", ".", "read_triangle_mesh", "(", "mesh_file", ")", "\n", "scene_vertices", "=", "np", ".", "array", "(", "mesh", ".", "vertices", ")", "\n", "map2nyu40", "=", "np", ".", "load", "(", "'CONFIG/map2nyu40.npy'", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "map2nyu40", "[", "label", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "", "", "wall_points", "=", "scene_vertices", "[", "label_ids", "==", "1", "]", "\n", "#floor_points = scene_vertices[label_ids == 2]", "\n", "floor_points", "=", "scene_vertices", "[", "abs", "(", "scene_vertices", "[", ":", ",", "2", "]", ")", "<", "0.05", "]", "\n", "\n", "return", "positions", ",", "(", "floor_points", ",", "wall_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_scene_synthesis.point_in_MER": [[153, 172], ["abs", "abs", "abs", "abs", "abs", "numpy.arccos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "point_in_MER", "(", "x", ",", "y", ",", "MER", ")", ":", "\n", "    ", "dx", "=", "x", "-", "MER", "[", "0", "]", "[", "0", "]", "\n", "dy", "=", "abs", "(", "MER", "[", "0", "]", "[", "1", "]", "-", "y", ")", "\n", "dd", "=", "(", "dx", "**", "2", "+", "dy", "**", "2", ")", "**", "0.5", "\n", "cosf", "=", "dx", "/", "dd", "\n", "f", "=", "np", ".", "arccos", "(", "cosf", ")", "/", "np", ".", "pi", "*", "180", "\n", "if", "MER", "[", "2", "]", ">=", "90", ":", "\n", "        ", "theta", "=", "f", "-", "MER", "[", "2", "]", "+", "90", "\n", "dx_align", "=", "abs", "(", "dd", "*", "np", ".", "cos", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ")", "\n", "dy_align", "=", "abs", "(", "dd", "*", "np", ".", "sin", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ")", "\n", "if", "dx_align", "<", "MER", "[", "1", "]", "[", "1", "]", "/", "2", "and", "dy_align", "<", "MER", "[", "1", "]", "[", "0", "]", "/", "2", ":", "\n", "            ", "return", "True", "\n", "", "", "else", ":", "\n", "        ", "theta", "=", "f", "-", "MER", "[", "2", "]", "\n", "dx_align", "=", "abs", "(", "dd", "*", "np", ".", "cos", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ")", "\n", "dy_align", "=", "abs", "(", "dd", "*", "np", ".", "sin", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ")", "\n", "if", "dx_align", "<", "MER", "[", "1", "]", "[", "0", "]", "/", "2", "and", "dy_align", "<", "MER", "[", "1", "]", "[", "1", "]", "/", "2", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_scene_synthesis.generate_gravity_aware_positions": [[174, 233], ["positions.copy", "positions.items", "positions.items", "len", "numpy.mean", "value[].split", "numpy.loadtxt", "supporter_MER.items", "numpy.loadtxt", "value[].split", "stage_map[].append", "min", "scannet_scene_synthesis.point_in_MER", "min", "min"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.point_in_MER"], ["", "def", "generate_gravity_aware_positions", "(", "positions", ",", "floor_points", ")", ":", "\n", "    ", "new_positions", "=", "positions", ".", "copy", "(", ")", "\n", "if", "len", "(", "floor_points", ")", "==", "0", ":", "\n", "        ", "ground_z", "=", "0", "\n", "", "else", ":", "\n", "        ", "ground_z", "=", "np", ".", "mean", "(", "floor_points", "[", ":", ",", "2", "]", ")", "\n", "", "supporter_MER", "=", "{", "}", "# id: MER", "\n", "# Stage1: not be supported, things on the ground or dangling (lamp/sink) ", "\n", "# Stage2: supported objects", "\n", "# stage1_id: [stage2_id, ...]", "\n", "stage_map", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "        ", "obj_name", "=", "value", "[", "2", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "if", "value", "[", "3", "]", "==", "True", ":", "\n", "            ", "supporter_MER", "[", "key", "]", "=", "value", "[", "5", "]", "\n", "stage_map", "[", "key", "]", "=", "[", "]", "\n", "x", ",", "y", ",", "z", "=", "value", "[", "0", "]", "\n", "_", ",", "_", ",", "sz", "=", "value", "[", "1", "]", "\n", "pc_txt", "=", "np", ".", "loadtxt", "(", "value", "[", "2", "]", ",", "delimiter", "=", "','", ")", "\n", "pc_txt", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "pc_txt", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "pc_txt", "[", ":", ",", "[", "4", ",", "5", "]", "]", "=", "pc_txt", "[", ":", ",", "[", "4", ",", "5", "]", "]", "\n", "new_z", "=", "ground_z", "-", "sz", "*", "min", "(", "pc_txt", "[", ":", ",", "2", "]", ")", "\n", "new_positions", "[", "key", "]", "[", "0", "]", "=", "(", "x", ",", "y", ",", "new_z", ")", "\n", "new_positions", "[", "key", "]", "[", "6", "]", "=", "value", "[", "6", "]", "+", "(", "new_z", "-", "z", ")", "\n", "", "", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "        ", "if", "value", "[", "3", "]", "==", "False", ":", "\n", "            ", "min_center_dis2", "=", "100", "\n", "x", ",", "y", "=", "value", "[", "0", "]", "[", "0", "]", ",", "value", "[", "0", "]", "[", "1", "]", "\n", "choosed_supporter", "=", "-", "1", "\n", "for", "supporter_id", ",", "MER", "in", "supporter_MER", ".", "items", "(", ")", ":", "\n", "                ", "if", "point_in_MER", "(", "x", ",", "y", ",", "MER", ")", "and", "(", "x", "-", "MER", "[", "0", "]", "[", "0", "]", ")", "**", "2", "+", "(", "y", "-", "MER", "[", "0", "]", "[", "1", "]", ")", "**", "2", "<", "min_center_dis2", ":", "\n", "                    ", "choosed_supporter", "=", "supporter_id", "\n", "min_center_dis2", "=", "(", "x", "-", "MER", "[", "0", "]", "[", "0", "]", ")", "**", "2", "+", "(", "y", "-", "MER", "[", "0", "]", "[", "1", "]", ")", "**", "2", "\n", "# some object will never be supported", "\n", "# so we need to correct the wrong choice if needed", "\n", "", "", "obj_name", "=", "value", "[", "2", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "if", "obj_name", "not", "in", "[", "\"monitor\"", ",", "\"plant\"", ",", "\"lamp\"", ",", "\"sink\"", ",", "\"cup\"", ",", "\"keyboard\"", ",", "\"bottle\"", ",", "\"laptop\"", "]", ":", "\n", "                ", "choosed_supporter", "=", "-", "1", "\n", "\n", "", "if", "choosed_supporter", "==", "-", "1", ":", "\n", "                ", "stage_map", "[", "key", "]", "=", "[", "]", "\n", "", "else", ":", "\n", "                ", "stage_map", "[", "choosed_supporter", "]", ".", "append", "(", "key", ")", "\n", "\n", "", "x", ",", "y", ",", "z", "=", "value", "[", "0", "]", "\n", "_", ",", "_", ",", "sz", "=", "value", "[", "1", "]", "\n", "pc_txt", "=", "np", ".", "loadtxt", "(", "value", "[", "2", "]", ",", "delimiter", "=", "','", ")", "\n", "pc_txt", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "pc_txt", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "pc_txt", "[", ":", ",", "[", "4", ",", "5", "]", "]", "=", "pc_txt", "[", ":", ",", "[", "4", ",", "5", "]", "]", "\n", "# special category: sink, lamp", "\n", "if", "choosed_supporter", "==", "-", "1", ":", "\n", "                ", "if", "(", "obj_name", "==", "\"lamp\"", "and", "z", ">", "1.2", ")", "or", "obj_name", "==", "\"sink\"", ":", "\n", "                    ", "new_z", "=", "z", "\n", "", "else", ":", "\n", "                    ", "new_z", "=", "ground_z", "-", "sz", "*", "min", "(", "pc_txt", "[", ":", ",", "2", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "new_z", "=", "new_positions", "[", "choosed_supporter", "]", "[", "6", "]", "-", "sz", "*", "min", "(", "pc_txt", "[", ":", ",", "2", "]", ")", "\n", "", "new_positions", "[", "key", "]", "[", "0", "]", "=", "(", "x", ",", "y", ",", "new_z", ")", "\n", "", "", "return", "new_positions", ",", "stage_map", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_scene_synthesis.anticlock_rotate_matrix": [[235, 240], ["numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "anticlock_rotate_matrix", "(", "theta", ")", ":", "\n", "# anticlockwise means y-->x", "\n", "    ", "theta", "*=", "-", "1", "\n", "return", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "np", ".", "pi", "/", "180", "*", "theta", ")", ",", "np", ".", "sin", "(", "np", ".", "pi", "/", "180", "*", "theta", ")", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "np", ".", "pi", "/", "180", "*", "theta", ")", ",", "np", ".", "cos", "(", "np", ".", "pi", "/", "180", "*", "theta", ")", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_scene_synthesis.position_to_xyz": [[242, 265], ["numpy.matmul", "numpy.loadtxt", "int", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "o3d.geometry.PointCloud.uniform_down_sample", "numpy.array", "scannet_scene_synthesis.anticlock_rotate_matrix"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.anticlock_rotate_matrix"], ["", "def", "position_to_xyz", "(", "position", ",", "Is_density", "=", "False", ",", "ratio", "=", "None", ")", ":", "\n", "# If consider density, the total number of points of a object is 10000*ratio", "\n", "    ", "obj_xyz", "=", "np", ".", "loadtxt", "(", "position", "[", "2", "]", ",", "delimiter", "=", "','", ")", "[", ":", ",", "0", ":", "3", "]", "\n", "obj_xyz", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "obj_xyz", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "if", "Is_density", ":", "\n", "        ", "ds_k", "=", "int", "(", "1", "//", "ratio", ")", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "obj_xyz", ")", "\n", "down_pcd", "=", "pcd", ".", "uniform_down_sample", "(", "every_k_points", "=", "ds_k", ")", "\n", "obj_xyz", "=", "np", ".", "array", "(", "down_pcd", ".", "points", ")", "\n", "#print(position[2].split('/')[-2] + \": \", obj_xyz.shape[0], \", \", ds_k)", "\n", "# scale", "\n", "", "obj_xyz", "[", ":", ",", "0", "]", "*=", "position", "[", "1", "]", "[", "0", "]", "\n", "obj_xyz", "[", ":", ",", "1", "]", "*=", "position", "[", "1", "]", "[", "1", "]", "\n", "obj_xyz", "[", ":", ",", "2", "]", "*=", "position", "[", "1", "]", "[", "2", "]", "\n", "# rotate", "\n", "theta", "=", "position", "[", "4", "]", "\n", "obj_xyz", "[", ":", ",", "0", ":", "2", "]", "=", "np", ".", "matmul", "(", "obj_xyz", "[", ":", ",", "0", ":", "2", "]", ",", "anticlock_rotate_matrix", "(", "theta", ")", ")", "\n", "# translate", "\n", "obj_xyz", "[", ":", ",", "0", "]", "+=", "position", "[", "0", "]", "[", "0", "]", "\n", "obj_xyz", "[", ":", ",", "1", "]", "+=", "position", "[", "0", "]", "[", "1", "]", "\n", "obj_xyz", "[", ":", ",", "2", "]", "+=", "position", "[", "0", "]", "[", "2", "]", "\n", "return", "obj_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_scene_synthesis.Is_collide": [[267, 270], ["sklearn.metrics.pairwise.pairwise_distances", "sklearn.metrics.pairwise.pairwise_distances.min"], "function", ["None"], ["", "def", "Is_collide", "(", "xyz1", ",", "xyz2", ",", "threshold", ")", ":", "\n", "    ", "D", "=", "pairwise_distances", "(", "xyz1", ",", "xyz2", ",", "metric", "=", "'euclidean'", ")", "\n", "return", "D", ".", "min", "(", ")", "<", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_scene_synthesis.generate_collision_aware_positions": [[272, 386], ["positions.items", "sorted", "enumerate", "stage_map.items", "positions.copy", "positions.copy.items", "len", "scannet_scene_synthesis.position_to_xyz", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "o3d.geometry.PointCloud.uniform_down_sample", "numpy.array", "stage1_distance.keys", "sorted", "enumerate", "floor_points[].min", "floor_points[].max", "floor_points[].min", "floor_points[].max", "stage_map.keys", "scannet_scene_synthesis.Is_collide", "len", "len", "stage2_distance.keys", "scannet_scene_synthesis.Is_collide", "scannet_scene_synthesis.Is_collide", "scannet_scene_synthesis.Is_collide"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.position_to_xyz", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.Is_collide", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.Is_collide", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.Is_collide", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.Is_collide"], ["", "def", "generate_collision_aware_positions", "(", "positions", ",", "stage_map", ",", "floor_points", ",", "threshold", "=", "0.05", ")", ":", "\n", "    ", "obj_xyzs", "=", "{", "}", "# id: xyz", "\n", "obj_dxy", "=", "{", "}", "# id: [dx, dy]", "\n", "if", "len", "(", "floor_points", ")", ">", "0", ":", "\n", "        ", "xmin", ",", "xmax", "=", "floor_points", "[", ":", ",", "0", "]", ".", "min", "(", ")", ",", "floor_points", "[", ":", ",", "0", "]", ".", "max", "(", ")", "\n", "ymin", ",", "ymax", "=", "floor_points", "[", ":", ",", "1", "]", ".", "min", "(", ")", ",", "floor_points", "[", ":", ",", "1", "]", ".", "max", "(", ")", "\n", "stage1_center", "=", "[", "(", "xmin", "+", "xmax", ")", "/", "2", ",", "(", "ymin", "+", "ymax", ")", "/", "2", "]", "\n", "", "else", ":", "\n", "        ", "stage1_center", "=", "[", "0", ",", "0", "]", "\n", "", "stage1_distance", "=", "{", "}", "# stage1_id: dis_to_center", "\n", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "stage_map", ".", "keys", "(", ")", ":", "\n", "            ", "stage1_distance", "[", "key", "]", "=", "(", "(", "value", "[", "0", "]", "[", "0", "]", "-", "stage1_center", "[", "0", "]", ")", "**", "2", "+", "(", "value", "[", "0", "]", "[", "1", "]", "-", "stage1_center", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "# to boost the collision detection, we need to downsample the xyz", "\n", "", "xyz", "=", "position_to_xyz", "(", "value", ")", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "xyz", ")", "\n", "down_pcd", "=", "pcd", ".", "uniform_down_sample", "(", "every_k_points", "=", "5", ")", "\n", "down_xyz", "=", "np", ".", "array", "(", "down_pcd", ".", "points", ")", "\n", "obj_xyzs", "[", "key", "]", "=", "down_xyz", "\n", "obj_dxy", "[", "key", "]", "=", "[", "0", ",", "0", "]", "\n", "", "near_to_far", "=", "sorted", "(", "stage1_distance", ".", "keys", "(", ")", ",", "key", "=", "lambda", "x", ":", "stage1_distance", "[", "x", "]", ")", "\n", "# only consider nearer (to center) objects", "\n", "for", "i", ",", "obj_id", "in", "enumerate", "(", "near_to_far", "[", "1", ":", "]", ")", ":", "\n", "        ", "consider_obj_ids", "=", "near_to_far", "[", ":", "i", "+", "1", "]", "\n", "new_x", ",", "new_y", ",", "_", "=", "positions", "[", "obj_id", "]", "[", "0", "]", "\n", "move_vector", "=", "[", "0", ",", "0", "]", "\n", "Is_collide_bool", "=", "False", "\n", "for", "consider_id", "in", "consider_obj_ids", ":", "\n", "            ", "con_x", ",", "con_y", ",", "_", "=", "positions", "[", "consider_id", "]", "[", "0", "]", "\n", "try", ":", "\n", "                ", "move_vector", "[", "0", "]", "+=", "1", "/", "(", "new_x", "-", "con_x", ")", "\n", "", "except", ":", "\n", "                ", "move_vector", "[", "0", "]", "+=", "10", "\n", "", "try", ":", "\n", "                ", "move_vector", "[", "1", "]", "+=", "1", "/", "(", "new_y", "-", "con_y", ")", "\n", "", "except", ":", "\n", "                ", "move_vector", "[", "1", "]", "+=", "10", "\n", "", "if", "Is_collide_bool", ":", "\n", "                ", "continue", "\n", "", "if", "Is_collide", "(", "obj_xyzs", "[", "obj_id", "]", ",", "obj_xyzs", "[", "consider_id", "]", ",", "threshold", "=", "threshold", ")", ":", "\n", "                ", "Is_collide_bool", "=", "True", "\n", "", "", "scale", "=", "0.1", "/", "(", "(", "move_vector", "[", "0", "]", ")", "**", "2", "+", "(", "move_vector", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "move_vector", "[", "0", "]", "*=", "scale", "\n", "move_vector", "[", "1", "]", "*=", "scale", "\n", "while", "Is_collide_bool", ":", "\n", "            ", "obj_xyzs", "[", "obj_id", "]", "[", ":", ",", "0", "]", "+=", "move_vector", "[", "0", "]", "\n", "obj_xyzs", "[", "obj_id", "]", "[", ":", ",", "1", "]", "+=", "move_vector", "[", "1", "]", "\n", "obj_dxy", "[", "obj_id", "]", "[", "0", "]", "+=", "move_vector", "[", "0", "]", "\n", "obj_dxy", "[", "obj_id", "]", "[", "1", "]", "+=", "move_vector", "[", "1", "]", "\n", "Is_collide_bool", "=", "False", "\n", "for", "consider_id", "in", "consider_obj_ids", ":", "\n", "                ", "if", "Is_collide_bool", ":", "\n", "                    ", "break", "\n", "", "if", "Is_collide", "(", "obj_xyzs", "[", "obj_id", "]", ",", "obj_xyzs", "[", "consider_id", "]", ",", "threshold", "=", "threshold", ")", ":", "\n", "                    ", "Is_collide_bool", "=", "True", "\n", "# stage2 objects", "\n", "", "", "", "", "for", "stage1_id", ",", "stage2_ids", "in", "stage_map", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "stage2_ids", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "for", "stage2_id", "in", "stage2_ids", ":", "\n", "            ", "obj_xyzs", "[", "stage2_id", "]", "[", ":", ",", "0", "]", "+=", "obj_dxy", "[", "stage1_id", "]", "[", "0", "]", "\n", "obj_xyzs", "[", "stage2_id", "]", "[", ":", ",", "1", "]", "+=", "obj_dxy", "[", "stage1_id", "]", "[", "1", "]", "\n", "obj_dxy", "[", "stage2_id", "]", "[", "0", "]", "+=", "obj_dxy", "[", "stage1_id", "]", "[", "0", "]", "\n", "obj_dxy", "[", "stage2_id", "]", "[", "1", "]", "+=", "obj_dxy", "[", "stage1_id", "]", "[", "1", "]", "\n", "", "if", "len", "(", "stage2_ids", ")", "==", "1", ":", "\n", "            ", "continue", "\n", "", "stage2_center", "=", "[", "positions", "[", "stage1_id", "]", "[", "0", "]", "[", "0", "]", ",", "positions", "[", "stage1_id", "]", "[", "0", "]", "[", "1", "]", "]", "\n", "stage2_distance", "=", "{", "}", "# stage2_id: dis_to_center", "\n", "for", "stage2_id", "in", "stage2_ids", ":", "\n", "            ", "value", "=", "positions", "[", "stage2_id", "]", "\n", "stage2_distance", "[", "stage2_id", "]", "=", "(", "(", "value", "[", "0", "]", "[", "0", "]", "-", "stage2_center", "[", "0", "]", ")", "**", "2", "+", "(", "value", "[", "0", "]", "[", "1", "]", "-", "stage2_center", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "", "far_to_near", "=", "sorted", "(", "stage2_distance", ".", "keys", "(", ")", ",", "key", "=", "lambda", "x", ":", "stage2_distance", "[", "x", "]", ",", "reverse", "=", "True", ")", "\n", "for", "i", ",", "obj_id", "in", "enumerate", "(", "far_to_near", "[", "1", ":", "]", ")", ":", "\n", "            ", "consider_obj_ids", "=", "far_to_near", "[", ":", "i", "+", "1", "]", "\n", "new_x", ",", "new_y", ",", "_", "=", "positions", "[", "obj_id", "]", "[", "0", "]", "\n", "# to avoid falling down, we need to correct the direction toward the center", "\n", "max_moving_len", "=", "0", "\n", "move_vector", "=", "[", "0", ",", "0", "]", "\n", "Is_collide_bool", "=", "False", "\n", "for", "consider_id", "in", "consider_obj_ids", ":", "\n", "                ", "con_x", ",", "con_y", ",", "_", "=", "positions", "[", "consider_id", "]", "[", "0", "]", "\n", "moving_len", "=", "(", "1", "/", "(", "new_x", "-", "con_x", ")", "**", "2", "+", "1", "/", "(", "new_y", "-", "con_y", ")", "**", "2", ")", "**", "0.5", "\n", "if", "moving_len", ">", "max_moving_len", ":", "\n", "                    ", "max_moving_len", "=", "moving_len", "\n", "", "move_vector", "[", "0", "]", "+=", "1", "/", "(", "new_x", "-", "con_x", ")", "\n", "move_vector", "[", "1", "]", "+=", "1", "/", "(", "new_y", "-", "con_y", ")", "\n", "if", "Is_collide_bool", ":", "\n", "                    ", "continue", "\n", "", "if", "Is_collide", "(", "obj_xyzs", "[", "obj_id", "]", ",", "obj_xyzs", "[", "consider_id", "]", ",", "threshold", "=", "threshold", ")", ":", "\n", "                    ", "Is_collide_bool", "=", "True", "\n", "", "", "center_move_vector", "=", "[", "stage2_center", "[", "0", "]", "-", "new_x", ",", "stage2_center", "[", "1", "]", "-", "new_y", "]", "\n", "scale_center", "=", "max_moving_len", "/", "(", "(", "center_move_vector", "[", "0", "]", ")", "**", "2", "+", "(", "center_move_vector", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "move_vector", "[", "0", "]", "+=", "scale_center", "*", "center_move_vector", "[", "0", "]", "\n", "move_vector", "[", "1", "]", "+=", "scale_center", "*", "center_move_vector", "[", "1", "]", "\n", "scale", "=", "0.05", "/", "(", "(", "move_vector", "[", "0", "]", ")", "**", "2", "+", "(", "move_vector", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "move_vector", "[", "0", "]", "*=", "scale", "\n", "move_vector", "[", "1", "]", "*=", "scale", "\n", "while", "Is_collide_bool", ":", "\n", "                ", "obj_xyzs", "[", "obj_id", "]", "[", ":", ",", "0", "]", "+=", "move_vector", "[", "0", "]", "\n", "obj_xyzs", "[", "obj_id", "]", "[", ":", ",", "1", "]", "+=", "move_vector", "[", "1", "]", "\n", "obj_dxy", "[", "obj_id", "]", "[", "0", "]", "+=", "move_vector", "[", "0", "]", "\n", "obj_dxy", "[", "obj_id", "]", "[", "1", "]", "+=", "move_vector", "[", "1", "]", "\n", "Is_collide_bool", "=", "False", "\n", "for", "consider_id", "in", "consider_obj_ids", ":", "\n", "                    ", "if", "Is_collide_bool", ":", "\n", "                        ", "break", "\n", "", "if", "Is_collide", "(", "obj_xyzs", "[", "obj_id", "]", ",", "obj_xyzs", "[", "consider_id", "]", ",", "threshold", "=", "threshold", ")", ":", "\n", "                        ", "Is_collide_bool", "=", "True", "\n", "", "", "", "", "", "new_positions", "=", "positions", ".", "copy", "(", ")", "\n", "for", "key", ",", "value", "in", "new_positions", ".", "items", "(", ")", ":", "\n", "        ", "dx", ",", "dy", "=", "obj_dxy", "[", "key", "]", "\n", "value", "[", "0", "]", "=", "(", "value", "[", "0", "]", "[", "0", "]", "+", "dx", ",", "value", "[", "0", "]", "[", "1", "]", "+", "dy", ",", "value", "[", "0", "]", "[", "2", "]", ")", "\n", "", "return", "new_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_scene_synthesis.positions_to_pcd": [[388, 442], ["ins_ply.create_color_palette", "positions.items", "numpy.array", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "len", "numpy.mean", "numpy.array", "numpy.concatenate", "list", "numpy.array", "numpy.concatenate", "list", "positions.items", "max", "numpy.array", "numpy.concatenate", "list", "print", "pcd.select_by_index.hidden_point_removal", "pcd.select_by_index.select_by_index", "S_dict.values", "scannet_scene_synthesis.position_to_xyz", "scannet_scene_synthesis.position_to_xyz", "xs.min", "xs.max", "ys.min", "ys.max", "numpy.loadtxt", "min", "list", "list", "max", "min", "max", "min", "max", "min", "list"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.create_color_palette", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.position_to_xyz", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.position_to_xyz"], ["", "def", "positions_to_pcd", "(", "positions", ",", "fw_points", ",", "Is_floor", "=", "True", ",", "Is_wall", "=", "False", ",", "Is_density", "=", "False", ",", "Is_HPR", "=", "False", ")", ":", "\n", "    ", "if", "len", "(", "positions", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "xyzrgb_list", "=", "[", "]", "\n", "colors", "=", "create_color_palette", "(", ")", "\n", "# floor", "\n", "if", "Is_floor", ":", "\n", "        ", "floor_points", "=", "fw_points", "[", "0", "]", "\n", "ground_z", "=", "np", ".", "mean", "(", "floor_points", "[", ":", ",", "2", "]", ")", "\n", "floor_points", "[", ":", ",", "2", "]", "=", "ground_z", "\n", "floor_color", "=", "colors", "[", "0", "]", "\n", "floor_rgb", "=", "np", ".", "array", "(", "[", "list", "(", "floor_color", ")", "]", "*", "floor_points", ".", "shape", "[", "0", "]", ")", "\n", "floor_xyzrgb", "=", "np", ".", "concatenate", "(", "[", "floor_points", ",", "floor_rgb", "]", ",", "axis", "=", "1", ")", "\n", "xyzrgb_list", "+=", "list", "(", "floor_xyzrgb", ")", "\n", "# wall", "\n", "", "if", "Is_wall", ":", "\n", "        ", "wall_points", "=", "fw_points", "[", "1", "]", "\n", "wall_color", "=", "colors", "[", "0", "]", "\n", "wall_rgb", "=", "np", ".", "array", "(", "[", "list", "(", "wall_color", ")", "]", "*", "wall_points", ".", "shape", "[", "0", "]", ")", "\n", "wall_xyzrgb", "=", "np", ".", "concatenate", "(", "[", "wall_points", ",", "wall_rgb", "]", ",", "axis", "=", "1", ")", "\n", "xyzrgb_list", "+=", "list", "(", "wall_xyzrgb", ")", "\n", "# density", "\n", "", "if", "Is_density", ":", "\n", "        ", "S_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "            ", "obj_xyz", "=", "np", ".", "loadtxt", "(", "value", "[", "2", "]", ",", "delimiter", "=", "','", ")", "[", ":", ",", "0", ":", "3", "]", "\n", "obj_xyz", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "obj_xyz", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "ddx", ",", "ddy", ",", "ddz", "=", "max", "(", "obj_xyz", "[", ":", ",", "0", "]", ")", "-", "min", "(", "obj_xyz", "[", ":", ",", "0", "]", ")", ",", "max", "(", "obj_xyz", "[", ":", ",", "1", "]", ")", "-", "min", "(", "obj_xyz", "[", ":", ",", "1", "]", ")", ",", "max", "(", "obj_xyz", "[", ":", ",", "2", "]", ")", "-", "min", "(", "obj_xyz", "[", ":", ",", "2", "]", ")", "\n", "dx", ",", "dy", ",", "dz", "=", "ddx", "*", "value", "[", "1", "]", "[", "0", "]", ",", "ddy", "*", "value", "[", "1", "]", "[", "1", "]", ",", "ddz", "*", "value", "[", "1", "]", "[", "2", "]", "\n", "S_larger", "=", "dx", "*", "dy", "*", "dz", "/", "min", "(", "dx", ",", "dy", ",", "dz", ")", "\n", "S_dict", "[", "key", "]", "=", "S_larger", "\n", "", "S_max", "=", "max", "(", "S_dict", ".", "values", "(", ")", ")", "\n", "# position to points", "\n", "", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "        ", "color", "=", "colors", "[", "key", "]", "\n", "if", "Is_density", ":", "\n", "            ", "obj_xyz", "=", "position_to_xyz", "(", "value", ",", "Is_density", "=", "True", ",", "ratio", "=", "S_dict", "[", "key", "]", "/", "S_max", ")", "\n", "", "else", ":", "\n", "            ", "obj_xyz", "=", "position_to_xyz", "(", "value", ")", "\n", "", "obj_rgb", "=", "np", ".", "array", "(", "[", "list", "(", "color", ")", "]", "*", "obj_xyz", ".", "shape", "[", "0", "]", ")", "\n", "obj_xyzrgb", "=", "np", ".", "concatenate", "(", "[", "obj_xyz", ",", "obj_rgb", "]", ",", "axis", "=", "1", ")", "\n", "xyzrgb_list", "+=", "list", "(", "obj_xyzrgb", ")", "\n", "# points to pcd", "\n", "", "xyzrgb", "=", "np", ".", "array", "(", "xyzrgb_list", ")", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "xyzrgb", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "xyzrgb", "[", ":", ",", "3", ":", "6", "]", "/", "255", ")", "\n", "# HPR", "\n", "if", "Is_HPR", ":", "\n", "        ", "xs", ",", "ys", "=", "xyzrgb", "[", ":", ",", "0", "]", ",", "xyzrgb", "[", ":", ",", "1", "]", "\n", "print", "(", "\"x in (\"", ",", "xs", ".", "min", "(", ")", ",", "\",\"", ",", "xs", ".", "max", "(", ")", ",", "\"), y in (\"", ",", "ys", ".", "min", "(", ")", ",", "\",\"", ",", "ys", ".", "max", "(", ")", ",", "\")\"", ")", "\n", "_", ",", "pt_map", "=", "pcd", ".", "hidden_point_removal", "(", "[", "0", ",", "0", ",", "2.5", "]", ",", "100", ")", "\n", "pcd", "=", "pcd", ".", "select_by_index", "(", "pt_map", ")", "\n", "", "return", "pcd", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_scene_synthesis.export_for_md40": [[446, 532], ["numpy.load().item", "np.load().item.pop", "numpy.zeros", "numpy.load().item", "numpy.load().item", "np.load().item.items", "numpy.array", "np.load().item.items", "numpy.zeros_like", "range", "np.load().item.items", "max", "numpy.array", "numpy.concatenate", "list", "numpy.concatenate", "list", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "o3d.geometry.PointCloud.hidden_point_removal", "o3d.geometry.PointCloud.hidden_point_removal", "o3d.geometry.PointCloud.hidden_point_removal", "o3d.geometry.PointCloud.hidden_point_removal", "numpy.unique", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.array", "np.array.copy", "len", "numpy.load", "S_dict.values", "len", "numpy.load", "numpy.load", "scannet_scene_synthesis.position_to_xyz", "scannet_scene_synthesis.position_to_xyz", "len", "value[].split", "numpy.loadtxt", "min", "numpy.array", "xs.min", "ys.min", "xs.min", "ys.min", "xs.min", "ys.min", "xs.min", "ys.min", "max", "min", "max", "min", "max", "min", "xs.max", "xs.min", "ys.max", "ys.min"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.position_to_xyz", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.position_to_xyz"], ["def", "export_for_md40", "(", "scan_name", ",", "Is_density", "=", "True", ",", "Is_HPR", "=", "False", ",", "Is_floor", "=", "False", ")", ":", "\n", "    ", "positions", "=", "np", ".", "load", "(", "'./augment_random_positions_scannet/'", "+", "scan_name", "+", "'.npy'", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "xyz_oid_list", "=", "[", "]", "\n", "if", "Is_floor", ":", "\n", "        ", "floor_points", "=", "positions", "[", "'floor_points'", "]", "\n", "#floor_points[:, 2] = np.mean(floor_points[:, 2])", "\n", "", "positions", ".", "pop", "(", "'floor_points'", ")", "\n", "# density", "\n", "if", "Is_density", ":", "\n", "        ", "S_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "            ", "obj_xyz", "=", "np", ".", "loadtxt", "(", "value", "[", "2", "]", ",", "delimiter", "=", "','", ")", "[", ":", ",", "0", ":", "3", "]", "\n", "obj_xyz", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "obj_xyz", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "ddx", ",", "ddy", ",", "ddz", "=", "max", "(", "obj_xyz", "[", ":", ",", "0", "]", ")", "-", "min", "(", "obj_xyz", "[", ":", ",", "0", "]", ")", ",", "max", "(", "obj_xyz", "[", ":", ",", "1", "]", ")", "-", "min", "(", "obj_xyz", "[", ":", ",", "1", "]", ")", ",", "max", "(", "obj_xyz", "[", ":", ",", "2", "]", ")", "-", "min", "(", "obj_xyz", "[", ":", ",", "2", "]", ")", "\n", "dx", ",", "dy", ",", "dz", "=", "ddx", "*", "value", "[", "1", "]", "[", "0", "]", ",", "ddy", "*", "value", "[", "1", "]", "[", "1", "]", ",", "ddz", "*", "value", "[", "1", "]", "[", "2", "]", "\n", "S_larger", "=", "dx", "*", "dy", "*", "dz", "/", "min", "(", "dx", ",", "dy", ",", "dz", ")", "\n", "S_dict", "[", "key", "]", "=", "S_larger", "\n", "", "S_max", "=", "max", "(", "S_dict", ".", "values", "(", ")", ")", "\n", "# position to points", "\n", "", "instance_bboxes", "=", "np", ".", "zeros", "(", "(", "len", "(", "positions", ")", ",", "7", ")", ")", "\n", "#label_to_nyuid = np.load('map2nyu40.npy', allow_pickle=True).item()", "\n", "label_to_modelnet40id", "=", "np", ".", "load", "(", "\"CONFIG/map2modelnet.npy\"", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "obj_prop", "=", "np", ".", "load", "(", "'CONFIG/object40_property.npy'", ",", "allow_pickle", "=", "True", ",", "encoding", "=", "'bytes'", ")", ".", "item", "(", ")", "\n", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "        ", "oid", "=", "key", "\n", "if", "Is_density", ":", "\n", "            ", "obj_xyz", "=", "position_to_xyz", "(", "value", ",", "Is_density", "=", "True", ",", "ratio", "=", "S_dict", "[", "key", "]", "/", "S_max", ")", "\n", "", "else", ":", "\n", "            ", "obj_xyz", "=", "position_to_xyz", "(", "value", ")", "\n", "", "obj_id", "=", "np", ".", "array", "(", "[", "[", "oid", "]", "]", "*", "obj_xyz", ".", "shape", "[", "0", "]", ")", "\n", "obj_xyzoid", "=", "np", ".", "concatenate", "(", "[", "obj_xyz", ",", "obj_id", "]", ",", "axis", "=", "1", ")", "\n", "xyz_oid_list", "+=", "list", "(", "obj_xyzoid", ")", "\n", "", "if", "Is_floor", ":", "\n", "        ", "floor_xyzoid", "=", "np", ".", "concatenate", "(", "[", "floor_points", ",", "np", ".", "array", "(", "[", "[", "0", "]", "]", "*", "floor_points", ".", "shape", "[", "0", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "xyz_oid_list", "+=", "list", "(", "floor_xyzoid", ")", "\n", "", "xyz_oid", "=", "np", ".", "array", "(", "xyz_oid_list", ")", "\n", "if", "Is_HPR", ":", "\n", "        ", "xyz", "=", "xyz_oid", "[", ":", ",", ":", "3", "]", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "xyz", ")", "\n", "xs", ",", "ys", "=", "xyz", "[", ":", ",", "0", "]", ",", "xyz", "[", ":", ",", "1", "]", "\n", "delta_x", ",", "delta_y", "=", "(", "xs", ".", "max", "(", ")", "-", "xs", ".", "min", "(", ")", ")", "/", "3", ",", "(", "ys", ".", "max", "(", ")", "-", "ys", ".", "min", "(", ")", ")", "/", "3", "\n", "camera1", "=", "[", "xs", ".", "min", "(", ")", "+", "delta_x", ",", "ys", ".", "min", "(", ")", "+", "delta_y", ",", "2", "]", "\n", "camera2", "=", "[", "xs", ".", "min", "(", ")", "+", "2", "*", "delta_x", ",", "ys", ".", "min", "(", ")", "+", "delta_y", ",", "2", "]", "\n", "camera3", "=", "[", "xs", ".", "min", "(", ")", "+", "delta_x", ",", "ys", ".", "min", "(", ")", "+", "2", "*", "delta_y", ",", "2", "]", "\n", "camera4", "=", "[", "xs", ".", "min", "(", ")", "+", "2", "*", "delta_x", ",", "ys", ".", "min", "(", ")", "+", "2", "*", "delta_y", ",", "2", "]", "\n", "_", ",", "pt_map1", "=", "pcd", ".", "hidden_point_removal", "(", "camera1", ",", "100", ")", "\n", "_", ",", "pt_map2", "=", "pcd", ".", "hidden_point_removal", "(", "camera2", ",", "100", ")", "\n", "_", ",", "pt_map3", "=", "pcd", ".", "hidden_point_removal", "(", "camera3", ",", "100", ")", "\n", "_", ",", "pt_map4", "=", "pcd", ".", "hidden_point_removal", "(", "camera4", ",", "100", ")", "\n", "pt_map", "=", "np", ".", "unique", "(", "pt_map1", "+", "pt_map2", "+", "pt_map3", "+", "pt_map4", ")", "\n", "xyz_oid", "=", "xyz_oid", "[", "pt_map", "]", "\n", "", "count_i", "=", "0", "\n", "#np.save('xxw.npy', xyz_oid[:,:3])", "\n", "#sys.exit(0)", "\n", "oid_to_modelnet40id", "=", "{", "}", "\n", "for", "oid", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "        ", "obj_xyz", "=", "xyz_oid", "[", "xyz_oid", "[", ":", ",", "3", "]", "==", "oid", "]", "[", ":", ",", ":", "3", "]", "\n", "if", "len", "(", "obj_xyz", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "xmin", "=", "np", ".", "min", "(", "obj_xyz", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "obj_xyz", "[", ":", ",", "1", "]", ")", "\n", "zmin", "=", "np", ".", "min", "(", "obj_xyz", "[", ":", ",", "2", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "obj_xyz", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "obj_xyz", "[", ":", ",", "1", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_xyz", "[", ":", ",", "2", "]", ")", "\n", "obj_name", "=", "value", "[", "2", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "sem_label", "=", "MDN_dict", "[", "obj_name", "]", "\n", "oid_to_modelnet40id", "[", "oid", "]", "=", "sem_label", "\n", "#if sem_label in [4,7,6,5,33,14,3,32,10,36]:", "\n", "#    dxavg_xy, dyavg_xy, dzavg_xy, dxavg_yx, dyavg_yx, dzavg_yx = obj_prop[label_to_modelnet40id[id_to_label[oid]]][0:6]", "\n", "#    if (xmax-xmin) < min(dxavg_xy, dxavg_yx)/2 and (ymax-ymin) < min(dyavg_xy, dyavg_yx)/2 and (zmax-zmin) < min(dzavg_xy, dzavg_yx)/2:", "\n", "#        sem_label = -1", "\n", "#        xyz_oid[xyz_oid[:,3] == oid][:,3] = -1", "\n", "bbox", "=", "np", ".", "array", "(", "[", "(", "xmin", "+", "xmax", ")", "/", "2", ",", "(", "ymin", "+", "ymax", ")", "/", "2", ",", "(", "zmin", "+", "zmax", ")", "/", "2", ",", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", ",", "zmax", "-", "zmin", ",", "sem_label", "]", ")", "\n", "instance_bboxes", "[", "count_i", ",", ":", "]", "=", "bbox", "\n", "count_i", "+=", "1", "\n", "", "mesh_vertices", "=", "(", "xyz_oid", ".", "copy", "(", ")", ")", "[", ":", ",", ":", "3", "]", "\n", "instance_ids", "=", "xyz_oid", "[", ":", ",", "3", "]", "\n", "semantic_ids", "=", "np", ".", "zeros_like", "(", "instance_ids", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "semantic_ids", ")", ")", ":", "\n", "        ", "if", "instance_ids", "[", "i", "]", "==", "0", ":", "\n", "            ", "semantic_ids", "[", "i", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "semantic_ids", "[", "i", "]", "=", "oid_to_modelnet40id", "[", "instance_ids", "[", "i", "]", "]", "\n", "", "", "return", "mesh_vertices", ",", "semantic_ids", ",", "instance_ids", ",", "instance_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.ins_ply.read_aggregation": [[10, 27], ["os.path.isfile", "open", "json.load", "len", "range", "label_to_segs[].extend", "segs.copy"], "function", ["None"], ["def", "read_aggregation", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "object_id_to_segs", "=", "{", "}", "\n", "label_to_segs", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "'segGroups'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'objectId'", "]", "+", "1", "# instance ids should be 1-indexed", "\n", "label", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'label'", "]", "\n", "segs", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'segments'", "]", "\n", "object_id_to_segs", "[", "object_id", "]", "=", "segs", "\n", "if", "label", "in", "label_to_segs", ":", "\n", "                ", "label_to_segs", "[", "label", "]", ".", "extend", "(", "segs", ")", "\n", "", "else", ":", "\n", "                ", "label_to_segs", "[", "label", "]", "=", "segs", ".", "copy", "(", ")", "\n", "", "", "", "return", "object_id_to_segs", ",", "label_to_segs", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.ins_ply.get_id_to_label": [[29, 40], ["os.path.isfile", "open", "json.load", "len", "range"], "function", ["None"], ["", "def", "get_id_to_label", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "id_to_label", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "'segGroups'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'objectId'", "]", "+", "1", "\n", "label", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'label'", "]", "\n", "id_to_label", "[", "object_id", "]", "=", "label", "\n", "", "", "return", "id_to_label", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.ins_ply.read_segmentation": [[42, 55], ["os.path.isfile", "open", "json.load", "len", "range", "seg_to_verts[].append"], "function", ["None"], ["", "def", "read_segmentation", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "seg_to_verts", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_verts", "=", "len", "(", "data", "[", "'segIndices'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_verts", ")", ":", "\n", "            ", "seg_id", "=", "data", "[", "'segIndices'", "]", "[", "i", "]", "\n", "if", "seg_id", "in", "seg_to_verts", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", "=", "[", "i", "]", "\n", "", "", "", "return", "seg_to_verts", ",", "num_verts", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.ins_ply.export": [[57, 106], ["scannet_utils.read_label_mapping", "scannet_utils.read_mesh_vertices_rgb", "open().readlines", "numpy.array().reshape", "numpy.ones", "numpy.dot", "ins_ply.read_aggregation", "ins_ply.read_segmentation", "numpy.zeros", "label_to_segs.items", "numpy.zeros", "len", "object_id_to_segs.items", "np.array().reshape.transpose", "numpy.unique", "numpy.save", "open", "numpy.array", "list", "float", "object_id_to_segs.keys", "line.rstrip().strip().split", "line.rstrip().strip", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_label_mapping", "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_mesh_vertices_rgb", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_aggregation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_segmentation"], ["", "def", "export", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ",", "label_map_file", ",", "output_file", "=", "None", ")", ":", "\n", "    ", "\"\"\" points are XYZ RGB (RGB in 0-255),\n    semantic label as nyu40 ids,\n    instance label as 1-#instance,\n    box as (cx,cy,cz,dx,dy,dz,semantic_label)\n    \"\"\"", "\n", "label_map", "=", "scannet_utils", ".", "read_label_mapping", "(", "label_map_file", ",", "\n", "label_from", "=", "'raw_category'", ",", "label_to", "=", "'ModelNet40'", ")", "\n", "#print(label_map['shoe'])", "\n", "#sys.exit(0)  ", "\n", "mesh_vertices", "=", "scannet_utils", ".", "read_mesh_vertices_rgb", "(", "mesh_file", ")", "\n", "\n", "# Load scene axis alignment matrix", "\n", "lines", "=", "open", "(", "meta_file", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "'axisAlignment'", "in", "line", ":", "\n", "            ", "axis_align_matrix", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "rstrip", "(", ")", ".", "strip", "(", "'axisAlignment = '", ")", ".", "split", "(", "' '", ")", "]", "\n", "break", "\n", "", "", "axis_align_matrix", "=", "np", ".", "array", "(", "axis_align_matrix", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "pts", "=", "np", ".", "ones", "(", "(", "mesh_vertices", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "pts", "[", ":", ",", "0", ":", "3", "]", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "\n", "pts", "=", "np", ".", "dot", "(", "pts", ",", "axis_align_matrix", ".", "transpose", "(", ")", ")", "# Nx4", "\n", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "=", "pts", "[", ":", ",", "0", ":", "3", "]", "\n", "\n", "# Load semantic and instance labels", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "object_id_to_label_id", "=", "{", "}", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "label_map", "[", "label", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "", "", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "object_id_to_segs", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "if", "label_ids", "[", "verts", "]", "[", "0", "]", "==", "0", ":", "\n", "                ", "instance_ids", "[", "verts", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "instance_ids", "[", "verts", "]", "=", "object_id", "\n", "\n", "", "", "", "if", "output_file", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "'./instance_labels/'", "+", "output_file", "+", "'_ins_label.npy'", ",", "instance_ids", ")", "\n", "\n", "", "return", "instance_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.ins_ply.create_color_palette": [[108, 339], ["None"], "function", ["None"], ["", "def", "create_color_palette", "(", ")", ":", "\n", "    ", "return", "[", "\n", "(", "255", ",", "255", ",", "255", ")", ",", "\n", "(", "152", ",", "223", ",", "138", ")", ",", "\n", "(", "31", ",", "119", ",", "180", ")", ",", "\n", "(", "255", ",", "187", ",", "120", ")", ",", "\n", "(", "188", ",", "189", ",", "34", ")", ",", "\n", "(", "140", ",", "86", ",", "75", ")", ",", "\n", "(", "255", ",", "152", ",", "150", ")", ",", "\n", "(", "214", ",", "39", ",", "40", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "51", ",", "176", ",", "203", ")", ",", "\n", "(", "200", ",", "54", ",", "131", ")", ",", "\n", "(", "92", ",", "193", ",", "61", ")", ",", "\n", "(", "78", ",", "71", ",", "183", ")", ",", "\n", "(", "172", ",", "114", ",", "82", ")", ",", "\n", "(", "255", ",", "127", ",", "14", ")", ",", "\n", "(", "91", ",", "163", ",", "138", ")", ",", "\n", "(", "153", ",", "98", ",", "156", ")", ",", "\n", "(", "140", ",", "153", ",", "101", ")", ",", "\n", "(", "158", ",", "218", ",", "229", ")", ",", "\n", "(", "100", ",", "125", ",", "154", ")", ",", "\n", "(", "178", ",", "127", ",", "135", ")", ",", "\n", "(", "120", ",", "185", ",", "128", ")", ",", "\n", "(", "146", ",", "111", ",", "194", ")", ",", "\n", "(", "44", ",", "160", ",", "44", ")", ",", "\n", "(", "112", ",", "128", ",", "144", ")", ",", "\n", "(", "96", ",", "207", ",", "209", ")", ",", "\n", "(", "227", ",", "119", ",", "194", ")", ",", "\n", "(", "213", ",", "92", ",", "176", ")", ",", "\n", "(", "94", ",", "106", ",", "211", ")", ",", "\n", "(", "82", ",", "84", ",", "163", ")", ",", "\n", "(", "100", ",", "85", ",", "144", ")", ",", "\n", "(", "214", ",", "39", ",", "40", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "51", ",", "176", ",", "203", ")", ",", "\n", "(", "200", ",", "54", ",", "131", ")", ",", "\n", "(", "92", ",", "193", ",", "61", ")", ",", "\n", "(", "78", ",", "71", ",", "183", ")", ",", "\n", "(", "172", ",", "114", ",", "82", ")", ",", "\n", "(", "255", ",", "127", ",", "14", ")", ",", "\n", "(", "91", ",", "163", ",", "138", ")", ",", "\n", "(", "153", ",", "98", ",", "156", ")", ",", "\n", "(", "140", ",", "153", ",", "101", ")", ",", "\n", "(", "158", ",", "218", ",", "229", ")", ",", "\n", "(", "100", ",", "125", ",", "154", ")", ",", "\n", "(", "178", ",", "127", ",", "135", ")", ",", "\n", "(", "120", ",", "185", ",", "128", ")", ",", "\n", "(", "146", ",", "111", ",", "194", ")", ",", "\n", "(", "44", ",", "160", ",", "44", ")", ",", "\n", "(", "112", ",", "128", ",", "144", ")", ",", "\n", "(", "96", ",", "207", ",", "209", ")", ",", "\n", "(", "227", ",", "119", ",", "194", ")", ",", "\n", "(", "213", ",", "92", ",", "176", ")", ",", "\n", "(", "94", ",", "106", ",", "211", ")", ",", "\n", "(", "82", ",", "84", ",", "163", ")", ",", "\n", "(", "100", ",", "85", ",", "144", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "51", ",", "176", ",", "203", ")", ",", "\n", "(", "200", ",", "54", ",", "131", ")", ",", "\n", "(", "92", ",", "193", ",", "61", ")", ",", "\n", "(", "78", ",", "71", ",", "183", ")", ",", "\n", "(", "172", ",", "114", ",", "82", ")", ",", "\n", "(", "255", ",", "127", ",", "14", ")", ",", "\n", "(", "91", ",", "163", ",", "138", ")", ",", "\n", "(", "153", ",", "98", ",", "156", ")", ",", "\n", "(", "140", ",", "153", ",", "101", ")", ",", "\n", "(", "158", ",", "218", ",", "229", ")", ",", "\n", "(", "100", ",", "125", ",", "154", ")", ",", "\n", "(", "178", ",", "127", ",", "135", ")", ",", "\n", "(", "120", ",", "185", ",", "128", ")", ",", "\n", "(", "146", ",", "111", ",", "194", ")", ",", "\n", "(", "44", ",", "160", ",", "44", ")", ",", "\n", "(", "112", ",", "128", ",", "144", ")", ",", "\n", "(", "96", ",", "207", ",", "209", ")", ",", "\n", "(", "227", ",", "119", ",", "194", ")", ",", "\n", "(", "213", ",", "92", ",", "176", ")", ",", "\n", "(", "94", ",", "106", ",", "211", ")", ",", "\n", "(", "82", ",", "84", ",", "163", ")", ",", "\n", "(", "100", ",", "85", ",", "144", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "152", ",", "223", ",", "138", ")", ",", "\n", "(", "31", ",", "119", ",", "180", ")", ",", "\n", "(", "255", ",", "187", ",", "120", ")", ",", "\n", "(", "188", ",", "189", ",", "34", ")", ",", "\n", "(", "140", ",", "86", ",", "75", ")", ",", "\n", "(", "255", ",", "152", ",", "150", ")", ",", "\n", "(", "214", ",", "39", ",", "40", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "51", ",", "176", ",", "203", ")", ",", "\n", "(", "200", ",", "54", ",", "131", ")", ",", "\n", "(", "92", ",", "193", ",", "61", ")", ",", "\n", "(", "78", ",", "71", ",", "183", ")", ",", "\n", "(", "172", ",", "114", ",", "82", ")", ",", "\n", "(", "255", ",", "127", ",", "14", ")", ",", "\n", "(", "91", ",", "163", ",", "138", ")", ",", "\n", "(", "153", ",", "98", ",", "156", ")", ",", "\n", "(", "140", ",", "153", ",", "101", ")", ",", "\n", "(", "158", ",", "218", ",", "229", ")", ",", "\n", "(", "100", ",", "125", ",", "154", ")", ",", "\n", "(", "178", ",", "127", ",", "135", ")", ",", "\n", "(", "120", ",", "185", ",", "128", ")", ",", "\n", "(", "146", ",", "111", ",", "194", ")", ",", "\n", "(", "44", ",", "160", ",", "44", ")", ",", "\n", "(", "112", ",", "128", ",", "144", ")", ",", "\n", "(", "96", ",", "207", ",", "209", ")", ",", "\n", "(", "227", ",", "119", ",", "194", ")", ",", "\n", "(", "213", ",", "92", ",", "176", ")", ",", "\n", "(", "94", ",", "106", ",", "211", ")", ",", "\n", "(", "82", ",", "84", ",", "163", ")", ",", "\n", "(", "100", ",", "85", ",", "144", ")", ",", "\n", "(", "214", ",", "39", ",", "40", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "51", ",", "176", ",", "203", ")", ",", "\n", "(", "200", ",", "54", ",", "131", ")", ",", "\n", "(", "92", ",", "193", ",", "61", ")", ",", "\n", "(", "78", ",", "71", ",", "183", ")", ",", "\n", "(", "172", ",", "114", ",", "82", ")", ",", "\n", "(", "255", ",", "127", ",", "14", ")", ",", "\n", "(", "91", ",", "163", ",", "138", ")", ",", "\n", "(", "153", ",", "98", ",", "156", ")", ",", "\n", "(", "140", ",", "153", ",", "101", ")", ",", "\n", "(", "158", ",", "218", ",", "229", ")", ",", "\n", "(", "100", ",", "125", ",", "154", ")", ",", "\n", "(", "178", ",", "127", ",", "135", ")", ",", "\n", "(", "120", ",", "185", ",", "128", ")", ",", "\n", "(", "146", ",", "111", ",", "194", ")", ",", "\n", "(", "44", ",", "160", ",", "44", ")", ",", "\n", "(", "112", ",", "128", ",", "144", ")", ",", "\n", "(", "96", ",", "207", ",", "209", ")", ",", "\n", "(", "227", ",", "119", ",", "194", ")", ",", "\n", "(", "213", ",", "92", ",", "176", ")", ",", "\n", "(", "94", ",", "106", ",", "211", ")", ",", "\n", "(", "82", ",", "84", ",", "163", ")", ",", "\n", "(", "100", ",", "85", ",", "144", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "51", ",", "176", ",", "203", ")", ",", "\n", "(", "200", ",", "54", ",", "131", ")", ",", "\n", "(", "92", ",", "193", ",", "61", ")", ",", "\n", "(", "78", ",", "71", ",", "183", ")", ",", "\n", "(", "172", ",", "114", ",", "82", ")", ",", "\n", "(", "255", ",", "127", ",", "14", ")", ",", "\n", "(", "91", ",", "163", ",", "138", ")", ",", "\n", "(", "153", ",", "98", ",", "156", ")", ",", "\n", "(", "140", ",", "153", ",", "101", ")", ",", "\n", "(", "158", ",", "218", ",", "229", ")", ",", "\n", "(", "100", ",", "125", ",", "154", ")", ",", "\n", "(", "178", ",", "127", ",", "135", ")", ",", "\n", "(", "120", ",", "185", ",", "128", ")", ",", "\n", "(", "146", ",", "111", ",", "194", ")", ",", "\n", "(", "44", ",", "160", ",", "44", ")", ",", "\n", "(", "112", ",", "128", ",", "144", ")", ",", "\n", "(", "96", ",", "207", ",", "209", ")", ",", "\n", "(", "227", ",", "119", ",", "194", ")", ",", "\n", "(", "213", ",", "92", ",", "176", ")", ",", "\n", "(", "94", ",", "106", ",", "211", ")", ",", "\n", "(", "82", ",", "84", ",", "163", ")", ",", "\n", "(", "100", ",", "85", ",", "144", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.ins_ply.visualize": [[342, 363], ["ins_ply.create_color_palette", "len", "numpy.load", "PlyData.read.write", "output_file.endswith", "util.print_error", "open", "plyfile.PlyData.read", "range", "len", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.create_color_palette"], ["", "def", "visualize", "(", "pred_file", ",", "mesh_file", ",", "output_file", ")", ":", "\n", "    ", "if", "not", "output_file", ".", "endswith", "(", "'.ply'", ")", ":", "\n", "        ", "util", ".", "print_error", "(", "'output file must be a .ply file'", ")", "\n", "", "colors", "=", "create_color_palette", "(", ")", "\n", "num_colors", "=", "len", "(", "colors", ")", "\n", "ids", "=", "np", ".", "load", "(", "pred_file", ")", "\n", "with", "open", "(", "mesh_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "'vertex'", "]", ".", "count", "\n", "if", "num_verts", "!=", "len", "(", "ids", ")", ":", "\n", "            ", "print", "(", "\"num error!\"", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "# *_vh_clean_2.ply has colors already", "\n", "", "for", "i", "in", "range", "(", "num_verts", ")", ":", "\n", "            ", "if", "ids", "[", "i", "]", ">=", "num_colors", ":", "\n", "                ", "ids", "[", "i", "]", "%=", "30", "\n", "", "color", "=", "colors", "[", "ids", "[", "i", "]", "]", "\n", "plydata", "[", "'vertex'", "]", "[", "'red'", "]", "[", "i", "]", "=", "color", "[", "0", "]", "\n", "plydata", "[", "'vertex'", "]", "[", "'green'", "]", "[", "i", "]", "=", "color", "[", "1", "]", "\n", "plydata", "[", "'vertex'", "]", "[", "'blue'", "]", "[", "i", "]", "=", "color", "[", "2", "]", "\n", "", "", "plydata", ".", "write", "(", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.modelnet40_tools.txt_to_pcd": [[14, 24], ["numpy.loadtxt", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector"], "function", ["None"], ["def", "txt_to_pcd", "(", "txt_path", ")", ":", "\n", "    ", "pc_txt", "=", "np", ".", "loadtxt", "(", "txt_path", ",", "delimiter", "=", "','", ")", "\n", "xyz", "=", "pc_txt", "[", ":", ",", "0", ":", "3", "]", "\n", "xyz", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "xyz", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "nxnynz", "=", "pc_txt", "[", ":", ",", "3", ":", "6", "]", "\n", "nxnynz", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "nxnynz", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "xyz", ")", "\n", "pcd", ".", "normals", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "nxnynz", ")", "\n", "return", "pcd", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.modelnet40_tools.get_MER": [[28, 45], ["numpy.array", "xys.astype.astype", "cv2.minAreaRect"], "function", ["None"], ["", "def", "get_MER", "(", "pcd", ")", ":", "\n", "    ", "points", "=", "np", ".", "array", "(", "pcd", ".", "points", ")", "\n", "xys", "=", "points", "[", ":", ",", "0", ":", "2", "]", "\n", "xys", "*=", "1000", "\n", "xys", "=", "xys", ".", "astype", "(", "'int'", ")", "\n", "rect", "=", "cv2", ".", "minAreaRect", "(", "xys", ")", "\n", "if", "rect", "[", "1", "]", "[", "1", "]", ">", "rect", "[", "1", "]", "[", "0", "]", ":", "\n", "        ", "l_s", "=", "(", "rect", "[", "1", "]", "[", "1", "]", "/", "1000", ",", "rect", "[", "1", "]", "[", "0", "]", "/", "1000", ")", "\n", "", "else", ":", "\n", "        ", "l_s", "=", "(", "rect", "[", "1", "]", "[", "0", "]", "/", "1000", ",", "rect", "[", "1", "]", "[", "1", "]", "/", "1000", ")", "\n", "", "if", "rect", "[", "1", "]", "[", "0", "]", ">=", "rect", "[", "1", "]", "[", "1", "]", ":", "\n", "        ", "theta", "=", "-", "rect", "[", "2", "]", "\n", "if", "theta", "==", "0", ":", "\n", "            ", "theta", "=", "180", "\n", "", "", "else", ":", "\n", "        ", "theta", "=", "-", "rect", "[", "2", "]", "+", "90", "\n", "", "return", "(", "l_s", ",", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.modelnet40_tools.get_support_z": [[47, 59], ["numpy.array", "numpy.array", "range", "z_list.sort", "len", "numpy.mean", "abs", "z_list.append", "numpy.dot"], "function", ["None"], ["", "def", "get_support_z", "(", "pcd", ")", ":", "\n", "    ", "points", "=", "np", ".", "array", "(", "pcd", ".", "points", ")", "\n", "normals", "=", "np", ".", "array", "(", "pcd", ".", "normals", ")", "\n", "z_list", "=", "[", "]", "\n", "num", "=", "points", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "normal", "=", "normals", "[", "i", "]", "\n", "if", "abs", "(", "np", ".", "dot", "(", "normal", ",", "[", "0", ",", "0", ",", "1", "]", ")", ")", ">", "0.88", ":", "\n", "            ", "z_list", ".", "append", "(", "points", "[", "i", "]", "[", "2", "]", ")", "\n", "", "", "z_list", ".", "sort", "(", ")", "\n", "z_num", "=", "len", "(", "z_list", ")", "\n", "return", "np", ".", "mean", "(", "z_list", "[", "z_num", "*", "4", "//", "5", ":", "z_num", "*", "9", "//", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.modelnet40_tools.get_horizontal_area": [[61, 68], ["xys.astype.astype", "cv2.convexHull", "cv2.contourArea"], "function", ["None"], ["", "def", "get_horizontal_area", "(", "points", ")", ":", "\n", "    ", "xys", "=", "points", "[", ":", ",", ":", "2", "]", "\n", "xys", "*=", "1000", "\n", "xys", "=", "xys", ".", "astype", "(", "'int'", ")", "\n", "hull", "=", "cv2", ".", "convexHull", "(", "xys", ",", "clockwise", "=", "True", ",", "returnPoints", "=", "True", ")", "\n", "area", "=", "cv2", ".", "contourArea", "(", "hull", ")", "\n", "return", "area", "/", "1000000", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.modelnet40_tools.Is_support": [[70, 90], ["numpy.array", "zs.max", "zs.min", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "sklearn.cluster.KMeans.predict", "modelnet40_tools.get_horizontal_area", "modelnet40_tools.get_horizontal_area", "abs"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.modelnet40_tools.get_horizontal_area", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.modelnet40_tools.get_horizontal_area"], ["", "def", "Is_support", "(", "pcd", ",", "support_z", ",", "MER", ")", ":", "\n", "# If support surface's area is much smaller than the MER's area", "\n", "# this object is not supportable", "\n", "    ", "points", "=", "np", ".", "array", "(", "pcd", ".", "points", ")", "\n", "zs", "=", "points", "[", ":", ",", "2", "]", "\n", "dz", "=", "zs", ".", "max", "(", ")", "-", "zs", ".", "min", "(", ")", "\n", "support_points", "=", "points", "[", "abs", "(", "points", "[", ":", ",", "2", "]", "-", "support_z", ")", "<", "dz", "/", "10", "]", "\n", "try", ":", "\n", "        ", "k_means", "=", "KMeans", "(", "n_clusters", "=", "2", ")", "\n", "k_means", ".", "fit", "(", "support_points", ")", "\n", "cluster_label", "=", "k_means", ".", "predict", "(", "support_points", ")", "\n", "points0", "=", "support_points", "[", "cluster_label", "==", "0", "]", "\n", "points1", "=", "support_points", "[", "cluster_label", "==", "1", "]", "\n", "MER_area", "=", "MER", "[", "0", "]", "[", "0", "]", "*", "MER", "[", "0", "]", "[", "1", "]", "\n", "surface_area", "=", "get_horizontal_area", "(", "points0", ")", "+", "get_horizontal_area", "(", "points1", ")", "\n", "if", "surface_area", ">", "MER_area", "*", "0.9", ":", "\n", "            ", "return", "True", "\n", "", "", "except", ":", "\n", "        ", "pass", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.modelnet40_to_id": [[30, 41], ["open().readlines", "open().readlines.index", "open"], "function", ["None"], ["", "except", "ValueError", ":", "\n", "        ", "return", "False", "\n", "\n", "\n", "", "", "def", "read_label_mapping", "(", "filename", ",", "label_from", "=", "'raw_category'", ",", "label_to", "=", "'nyu40id'", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "mapping", "=", "dict", "(", ")", "\n", "with", "open", "(", "filename", ")", "as", "csvfile", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "csvfile", ",", "delimiter", "=", "'\\t'", ")", "\n", "for", "row", "in", "reader", ":", "\n", "            ", "mapping", "[", "row", "[", "label_from", "]", "]", "=", "int", "(", "row", "[", "label_to", "]", ")", "\n", "", "", "if", "represents_int", "(", "list", "(", "mapping", ".", "keys", "(", ")", ")", "[", "0", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_label_mapping": [[43, 51], ["os.path.isfile", "dict", "open", "csv.DictReader", "scannet_utils.modelnet40_to_id"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.modelnet40_to_id"], ["", "return", "mapping", "\n", "\n", "", "def", "read_mesh_vertices", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ for each vertex.\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "'vertex'", "]", ".", "count", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_mesh_vertices": [[53, 65], ["os.path.isfile", "open", "PlyData.read", "np.zeros"], "function", ["None"], ["vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'x'", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'y'", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'z'", "]", "\n", "", "return", "vertices", "\n", "\n", "", "def", "read_mesh_vertices_rgb", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ RGB for each vertex.\n    Note: RGB values are in 0-255\n    \"\"\"", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "plydata", "=", "PlyData", ".", "read", "(", "f", ")", "\n", "num_verts", "=", "plydata", "[", "'vertex'", "]", ".", "count", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.ScanNet.scannet_utils.read_mesh_vertices_rgb": [[67, 83], ["os.path.isfile", "open", "PlyData.read", "np.zeros"], "function", ["None"], ["vertices", "[", ":", ",", "0", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'x'", "]", "\n", "vertices", "[", ":", ",", "1", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'y'", "]", "\n", "vertices", "[", ":", ",", "2", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'z'", "]", "\n", "vertices", "[", ":", ",", "3", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'red'", "]", "\n", "vertices", "[", ":", ",", "4", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'green'", "]", "\n", "vertices", "[", ":", ",", "5", "]", "=", "plydata", "[", "'vertex'", "]", ".", "data", "[", "'blue'", "]", "\n", "", "return", "vertices", "\n", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.get_mesh": [[15, 18], ["open3d.io.read_triangle_mesh"], "function", ["None"], ["def", "get_mesh", "(", "scene_ply", ")", ":", "\n", "    ", "mesh", "=", "o3d", ".", "io", ".", "read_triangle_mesh", "(", "scene_ply", ")", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.get_normal": [[20, 23], ["mesh.compute_vertex_normals", "numpy.array"], "function", ["None"], ["", "def", "get_normal", "(", "mesh", ")", ":", "\n", "    ", "mesh", ".", "compute_vertex_normals", "(", ")", "\n", "return", "np", ".", "array", "(", "mesh", ".", "triangle_normals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.Is_horizontal": [[25, 31], ["zs.sort"], "function", ["None"], ["", "def", "Is_horizontal", "(", "scene_vertices", ",", "seg", ")", ":", "\n", "# scene_vertices: Nx3", "\n", "    ", "zs", "=", "scene_vertices", "[", "seg", "]", "[", ":", ",", "2", "]", "\n", "zs", ".", "sort", "(", ")", "\n", "num", "=", "zs", ".", "shape", "[", "0", "]", "\n", "return", "zs", "[", "-", "1", "]", "-", "zs", "[", "num", "//", "2", "]", "<", "0.2", "or", "zs", "[", "num", "//", "2", "]", "-", "zs", "[", "0", "]", "<", "0.2", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.get_height": [[33, 41], ["numpy.mean", "abs", "z_list.append", "numpy.dot"], "function", ["None"], ["", "def", "get_height", "(", "scene_vertices", ",", "scene_normal", ",", "seg", ")", ":", "\n", "# scene_vertices: Nx3", "\n", "    ", "z_list", "=", "[", "]", "\n", "for", "idx", "in", "seg", ":", "\n", "        ", "normal", "=", "scene_normal", "[", "idx", "]", "\n", "if", "abs", "(", "np", ".", "dot", "(", "normal", ",", "[", "0", ",", "0", ",", "1", "]", ")", ")", ">", "0.88", ":", "\n", "            ", "z_list", ".", "append", "(", "scene_vertices", "[", "idx", "]", "[", "2", "]", ")", "\n", "", "", "return", "np", ".", "mean", "(", "z_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.generate_seg_adjacency_matrix": [[43, 63], ["numpy.unique", "len", "range", "numpy.zeros", "range", "idx_to_segidx.items"], "function", ["None"], ["", "def", "generate_seg_adjacency_matrix", "(", "plydata", ",", "segindices", ")", ":", "\n", "# idx_to_segidx", "\n", "# idx: 0->num_segs-1", "\n", "    ", "segidxs", "=", "np", ".", "unique", "(", "segindices", ")", "\n", "seg_num", "=", "len", "(", "segidxs", ")", "\n", "idx_to_segidx", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "seg_num", ")", ":", "\n", "        ", "idx_to_segidx", "[", "i", "]", "=", "segidxs", "[", "i", "]", "\n", "", "segidx_to_idx", "=", "{", "value", ":", "key", "for", "key", ",", "value", "in", "idx_to_segidx", ".", "items", "(", ")", "}", "\n", "adjacency_matrix", "=", "np", ".", "zeros", "(", "[", "seg_num", ",", "seg_num", "]", ")", "\n", "num_faces", "=", "plydata", "[", "'face'", "]", ".", "count", "\n", "for", "i", "in", "range", "(", "num_faces", ")", ":", "\n", "        ", "face", "=", "plydata", "[", "'face'", "]", "[", "'vertex_indices'", "]", "[", "i", "]", "\n", "for", "idx", "in", "[", "[", "0", ",", "1", "]", ",", "[", "0", ",", "2", "]", ",", "[", "1", ",", "2", "]", "]", ":", "\n", "            ", "seg1", "=", "segindices", "[", "face", "[", "idx", "[", "0", "]", "]", "]", "\n", "seg2", "=", "segindices", "[", "face", "[", "idx", "[", "1", "]", "]", "]", "\n", "if", "seg1", "!=", "seg2", ":", "\n", "                ", "adjacency_matrix", "[", "segidx_to_idx", "[", "seg1", "]", "]", "[", "segidx_to_idx", "[", "seg2", "]", "]", "=", "1", "\n", "adjacency_matrix", "[", "segidx_to_idx", "[", "seg2", "]", "]", "[", "segidx_to_idx", "[", "seg1", "]", "]", "=", "1", "\n", "", "", "", "return", "adjacency_matrix", ",", "idx_to_segidx", ",", "segidx_to_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.get_neighbor": [[65, 68], ["list", "numpy.reshape", "numpy.argwhere"], "function", ["None"], ["", "def", "get_neighbor", "(", "adj_matrix", ",", "idx_to_segidx", ",", "segidx_to_idx", ",", "segidx", ")", ":", "\n", "    ", "idxs", "=", "list", "(", "np", ".", "reshape", "(", "np", ".", "argwhere", "(", "adj_matrix", "[", "segidx_to_idx", "[", "segidx", "]", "]", "==", "1", ")", ",", "-", "1", ")", ")", "\n", "return", "[", "idx_to_segidx", "[", "idx", "]", "for", "idx", "in", "idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.get_horizontal_area": [[70, 77], ["xys.astype.astype", "cv2.convexHull", "cv2.contourArea", "numpy.array"], "function", ["None"], ["", "def", "get_horizontal_area", "(", "scene_vertices", ",", "seg", ")", ":", "\n", "    ", "xys", "=", "(", "np", ".", "array", "(", "scene_vertices", ")", "[", ":", ",", ":", "2", "]", ")", "[", "seg", "]", "\n", "xys", "*=", "1000", "\n", "xys", "=", "xys", ".", "astype", "(", "'int'", ")", "\n", "hull", "=", "cv2", ".", "convexHull", "(", "xys", ",", "clockwise", "=", "True", ",", "returnPoints", "=", "True", ")", "\n", "area", "=", "cv2", ".", "contourArea", "(", "hull", ")", "\n", "return", "area", "/", "1000000", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.export_random": [[79, 159], ["numpy.load().item", "np.load().item.items", "segment_tools.get_mesh", "numpy.array", "segment_tools.get_normal", "plyfile.PlyData.read", "ins_ply.read_aggregation", "ins_ply.read_segmentation", "numpy.zeros", "label_to_segs.items", "numpy.zeros", "len", "ins_ply.get_id_to_label", "object_id_to_segs.items", "object_id_to_segs.items", "open", "json.load", "numpy.unique", "numpy.min", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.load", "numpy.load().item", "numpy.load", "list", "len", "numpy.array", "object_id_to_segs.keys", "numpy.load", "error_segs.append"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.get_mesh", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.get_normal", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_aggregation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_segmentation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.get_id_to_label"], ["", "def", "export_random", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ")", ":", "\n", "## correct some misleading things", "\n", "    ", "label_map", "=", "np", ".", "load", "(", "\"CONFIG/map2modelnet.npy\"", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "for", "key", ",", "value", "in", "label_map", ".", "items", "(", ")", ":", "\n", "        ", "if", "\"door\"", "in", "key", "and", "key", "!=", "\"door\"", ":", "\n", "            ", "label_map", "[", "key", "]", "=", "0", "\n", "", "", "label_map", "[", "\"ottoman\"", "]", "=", "0", "\n", "label_map", "[", "\"bathroom vanity\"", "]", "=", "34", "# table", "\n", "label_map", "[", "\"sink\"", "]", "=", "0", "\n", "\n", "# ## for WSD, we only need furniture, so objects should be ignored", "\n", "# ## c10 is the 10 category in SUN-RGBD detection", "\n", "# c10_in_modelnet40 = [3, 34, 31, 9, 36, 13, 15, 24, 5, 2]", "\n", "# for key, value in label_map.items():", "\n", "#     if value not in c10_in_modelnet40:", "\n", "#         label_map[key] = 0", "\n", "\n", "mesh", "=", "get_mesh", "(", "mesh_file", ")", "\n", "mesh_vertices", "=", "np", ".", "array", "(", "mesh", ".", "vertices", ")", "\n", "scene_normal", "=", "get_normal", "(", "mesh", ")", "\n", "with", "open", "(", "seg_file", ")", "as", "fp", ":", "\n", "        ", "j", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "segindices", "=", "j", "[", "'segIndices'", "]", "\n", "\n", "plydata", "=", "PlyData", ".", "read", "(", "mesh_file", ")", "\n", "\n", "## Load scene axis alignment matrix", "\n", "lines", "=", "open", "(", "meta_file", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "'axisAlignment'", "in", "line", ":", "\n", "            ", "axis_align_matrix", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "rstrip", "(", ")", ".", "strip", "(", "'axisAlignment = '", ")", ".", "split", "(", "' '", ")", "]", "\n", "break", "\n", "", "", "axis_align_matrix", "=", "np", ".", "array", "(", "axis_align_matrix", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "pts", "=", "np", ".", "ones", "(", "(", "mesh_vertices", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "pts", "[", ":", ",", "0", ":", "3", "]", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "\n", "pts", "=", "np", ".", "dot", "(", "pts", ",", "axis_align_matrix", ".", "transpose", "(", ")", ")", "# Nx4", "\n", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "=", "pts", "[", ":", ",", "0", ":", "3", "]", "\n", "\n", "## Load semantic and instance labels", "\n", "# note that seg_to_verts means segidx_to_seg according to the definition above", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "object_id_to_label_id", "=", "{", "}", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "label_map", "[", "label", "]", "\n", "for", "segidx", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "segidx", "]", "\n", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "", "", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "object_id_to_segs", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "# obj_id: [(x, y, z), label, modelnet_id]", "\n", "xyz_obj_dict", "=", "{", "}", "\n", "id_to_label", "=", "get_id_to_label", "(", "agg_file", ")", "\n", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "if", "label_ids", "[", "verts", "]", "[", "0", "]", "==", "0", ":", "\n", "                ", "instance_ids", "[", "verts", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "instance_ids", "[", "verts", "]", "=", "object_id", "\n", "\n", "", "", "", "obj_idx", "=", "-", "1", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "modelnet_id", "=", "label_map", "[", "id_to_label", "[", "object_id", "]", "]", "\n", "obj_pc", "=", "mesh_vertices", "[", "instance_ids", "==", "object_id", ",", "0", ":", "3", "]", "\n", "if", "len", "(", "obj_pc", ")", "==", "0", ":", "continue", "\n", "if", "modelnet_id", "not", "in", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "9", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "19", ",", "20", ",", "21", ",", "23", ",", "24", ",", "27", ",", "31", ",", "33", ",", "34", ",", "36", ",", "39", "]", ":", "continue", "\n", "obj_idx", "+=", "1", "\n", "xmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmin", "=", "np", ".", "min", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "xmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "0", "]", ")", "\n", "ymax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "1", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_pc", "[", ":", ",", "2", "]", ")", "\n", "x", ",", "y", ",", "z", "=", "(", "xmin", "+", "xmax", ")", "/", "2", ",", "(", "ymin", "+", "ymax", ")", "/", "2", ",", "(", "zmin", "+", "zmax", ")", "/", "2", "\n", "error", "=", "np", ".", "load", "(", "'CONFIG/annotation_error.npy'", ")", "\n", "scan_name_to_idx", "=", "np", ".", "load", "(", "'CONFIG/name2idx.npy'", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_aggregation": [[10, 27], ["os.path.isfile", "open", "json.load", "len", "range", "label_to_segs[].extend", "segs.copy"], "function", ["None"], ["def", "read_aggregation", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "object_id_to_segs", "=", "{", "}", "\n", "label_to_segs", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "'segGroups'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'objectId'", "]", "+", "1", "# instance ids should be 1-indexed", "\n", "label", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'label'", "]", "\n", "segs", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'segments'", "]", "\n", "object_id_to_segs", "[", "object_id", "]", "=", "segs", "\n", "if", "label", "in", "label_to_segs", ":", "\n", "                ", "label_to_segs", "[", "label", "]", ".", "extend", "(", "segs", ")", "\n", "", "else", ":", "\n", "                ", "label_to_segs", "[", "label", "]", "=", "segs", ".", "copy", "(", ")", "\n", "", "", "", "return", "object_id_to_segs", ",", "label_to_segs", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.get_id_to_label": [[29, 40], ["os.path.isfile", "open", "json.load", "len", "range"], "function", ["None"], ["", "def", "get_id_to_label", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "id_to_label", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_objects", "=", "len", "(", "data", "[", "'segGroups'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_objects", ")", ":", "\n", "            ", "object_id", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'objectId'", "]", "+", "1", "\n", "label", "=", "data", "[", "'segGroups'", "]", "[", "i", "]", "[", "'label'", "]", "\n", "id_to_label", "[", "object_id", "]", "=", "label", "\n", "", "", "return", "id_to_label", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_segmentation": [[42, 55], ["os.path.isfile", "open", "json.load", "len", "range", "seg_to_verts[].append"], "function", ["None"], ["", "def", "read_segmentation", "(", "filename", ")", ":", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "seg_to_verts", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "num_verts", "=", "len", "(", "data", "[", "'segIndices'", "]", ")", "\n", "for", "i", "in", "range", "(", "num_verts", ")", ":", "\n", "            ", "seg_id", "=", "data", "[", "'segIndices'", "]", "[", "i", "]", "\n", "if", "seg_id", "in", "seg_to_verts", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "                ", "seg_to_verts", "[", "seg_id", "]", "=", "[", "i", "]", "\n", "", "", "", "return", "seg_to_verts", ",", "num_verts", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.create_color_palette": [[57, 288], ["None"], "function", ["None"], ["", "def", "export", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "meta_file", ",", "label_map_file", ",", "output_file", "=", "None", ")", ":", "\n", "    ", "\"\"\" points are XYZ RGB (RGB in 0-255),\n    semantic label as nyu40 ids,\n    instance label as 1-#instance,\n    box as (cx,cy,cz,dx,dy,dz,semantic_label)\n    \"\"\"", "\n", "label_map", "=", "scannet_utils", ".", "read_label_mapping", "(", "label_map_file", ",", "\n", "label_from", "=", "'raw_category'", ",", "label_to", "=", "'ModelNet40'", ")", "\n", "#print(label_map['shoe'])", "\n", "#sys.exit(0)  ", "\n", "mesh_vertices", "=", "scannet_utils", ".", "read_mesh_vertices_rgb", "(", "mesh_file", ")", "\n", "\n", "# Load scene axis alignment matrix", "\n", "lines", "=", "open", "(", "meta_file", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "'axisAlignment'", "in", "line", ":", "\n", "            ", "axis_align_matrix", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "rstrip", "(", ")", ".", "strip", "(", "'axisAlignment = '", ")", ".", "split", "(", "' '", ")", "]", "\n", "break", "\n", "", "", "axis_align_matrix", "=", "np", ".", "array", "(", "axis_align_matrix", ")", ".", "reshape", "(", "(", "4", ",", "4", ")", ")", "\n", "pts", "=", "np", ".", "ones", "(", "(", "mesh_vertices", ".", "shape", "[", "0", "]", ",", "4", ")", ")", "\n", "pts", "[", ":", ",", "0", ":", "3", "]", "=", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "\n", "pts", "=", "np", ".", "dot", "(", "pts", ",", "axis_align_matrix", ".", "transpose", "(", ")", ")", "# Nx4", "\n", "mesh_vertices", "[", ":", ",", "0", ":", "3", "]", "=", "pts", "[", ":", ",", "0", ":", "3", "]", "\n", "\n", "# Load semantic and instance labels", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "object_id_to_label_id", "=", "{", "}", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "label_map", "[", "label", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "", "", "instance_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "# 0: unannotated", "\n", "num_instances", "=", "len", "(", "np", ".", "unique", "(", "list", "(", "object_id_to_segs", ".", "keys", "(", ")", ")", ")", ")", "\n", "for", "object_id", ",", "segs", "in", "object_id_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "for", "seg", "in", "segs", ":", "\n", "            ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "if", "label_ids", "[", "verts", "]", "[", "0", "]", "==", "0", ":", "\n", "                ", "instance_ids", "[", "verts", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "instance_ids", "[", "verts", "]", "=", "object_id", "\n", "\n", "", "", "", "if", "output_file", "is", "not", "None", ":", "\n", "        ", "np", ".", "save", "(", "'./instance_labels/'", "+", "output_file", "+", "'_ins_label.npy'", ",", "instance_ids", ")", "\n", "\n", "", "return", "instance_ids", "\n", "\n", "\n", "", "def", "create_color_palette", "(", ")", ":", "\n", "    ", "return", "[", "\n", "(", "255", ",", "255", ",", "255", ")", ",", "\n", "(", "152", ",", "223", ",", "138", ")", ",", "\n", "(", "31", ",", "119", ",", "180", ")", ",", "\n", "(", "255", ",", "187", ",", "120", ")", ",", "\n", "(", "188", ",", "189", ",", "34", ")", ",", "\n", "(", "140", ",", "86", ",", "75", ")", ",", "\n", "(", "255", ",", "152", ",", "150", ")", ",", "\n", "(", "214", ",", "39", ",", "40", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "51", ",", "176", ",", "203", ")", ",", "\n", "(", "200", ",", "54", ",", "131", ")", ",", "\n", "(", "92", ",", "193", ",", "61", ")", ",", "\n", "(", "78", ",", "71", ",", "183", ")", ",", "\n", "(", "172", ",", "114", ",", "82", ")", ",", "\n", "(", "255", ",", "127", ",", "14", ")", ",", "\n", "(", "91", ",", "163", ",", "138", ")", ",", "\n", "(", "153", ",", "98", ",", "156", ")", ",", "\n", "(", "140", ",", "153", ",", "101", ")", ",", "\n", "(", "158", ",", "218", ",", "229", ")", ",", "\n", "(", "100", ",", "125", ",", "154", ")", ",", "\n", "(", "178", ",", "127", ",", "135", ")", ",", "\n", "(", "120", ",", "185", ",", "128", ")", ",", "\n", "(", "146", ",", "111", ",", "194", ")", ",", "\n", "(", "44", ",", "160", ",", "44", ")", ",", "\n", "(", "112", ",", "128", ",", "144", ")", ",", "\n", "(", "96", ",", "207", ",", "209", ")", ",", "\n", "(", "227", ",", "119", ",", "194", ")", ",", "\n", "(", "213", ",", "92", ",", "176", ")", ",", "\n", "(", "94", ",", "106", ",", "211", ")", ",", "\n", "(", "82", ",", "84", ",", "163", ")", ",", "\n", "(", "100", ",", "85", ",", "144", ")", ",", "\n", "(", "214", ",", "39", ",", "40", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "51", ",", "176", ",", "203", ")", ",", "\n", "(", "200", ",", "54", ",", "131", ")", ",", "\n", "(", "92", ",", "193", ",", "61", ")", ",", "\n", "(", "78", ",", "71", ",", "183", ")", ",", "\n", "(", "172", ",", "114", ",", "82", ")", ",", "\n", "(", "255", ",", "127", ",", "14", ")", ",", "\n", "(", "91", ",", "163", ",", "138", ")", ",", "\n", "(", "153", ",", "98", ",", "156", ")", ",", "\n", "(", "140", ",", "153", ",", "101", ")", ",", "\n", "(", "158", ",", "218", ",", "229", ")", ",", "\n", "(", "100", ",", "125", ",", "154", ")", ",", "\n", "(", "178", ",", "127", ",", "135", ")", ",", "\n", "(", "120", ",", "185", ",", "128", ")", ",", "\n", "(", "146", ",", "111", ",", "194", ")", ",", "\n", "(", "44", ",", "160", ",", "44", ")", ",", "\n", "(", "112", ",", "128", ",", "144", ")", ",", "\n", "(", "96", ",", "207", ",", "209", ")", ",", "\n", "(", "227", ",", "119", ",", "194", ")", ",", "\n", "(", "213", ",", "92", ",", "176", ")", ",", "\n", "(", "94", ",", "106", ",", "211", ")", ",", "\n", "(", "82", ",", "84", ",", "163", ")", ",", "\n", "(", "100", ",", "85", ",", "144", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "51", ",", "176", ",", "203", ")", ",", "\n", "(", "200", ",", "54", ",", "131", ")", ",", "\n", "(", "92", ",", "193", ",", "61", ")", ",", "\n", "(", "78", ",", "71", ",", "183", ")", ",", "\n", "(", "172", ",", "114", ",", "82", ")", ",", "\n", "(", "255", ",", "127", ",", "14", ")", ",", "\n", "(", "91", ",", "163", ",", "138", ")", ",", "\n", "(", "153", ",", "98", ",", "156", ")", ",", "\n", "(", "140", ",", "153", ",", "101", ")", ",", "\n", "(", "158", ",", "218", ",", "229", ")", ",", "\n", "(", "100", ",", "125", ",", "154", ")", ",", "\n", "(", "178", ",", "127", ",", "135", ")", ",", "\n", "(", "120", ",", "185", ",", "128", ")", ",", "\n", "(", "146", ",", "111", ",", "194", ")", ",", "\n", "(", "44", ",", "160", ",", "44", ")", ",", "\n", "(", "112", ",", "128", ",", "144", ")", ",", "\n", "(", "96", ",", "207", ",", "209", ")", ",", "\n", "(", "227", ",", "119", ",", "194", ")", ",", "\n", "(", "213", ",", "92", ",", "176", ")", ",", "\n", "(", "94", ",", "106", ",", "211", ")", ",", "\n", "(", "82", ",", "84", ",", "163", ")", ",", "\n", "(", "100", ",", "85", ",", "144", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "152", ",", "223", ",", "138", ")", ",", "\n", "(", "31", ",", "119", ",", "180", ")", ",", "\n", "(", "255", ",", "187", ",", "120", ")", ",", "\n", "(", "188", ",", "189", ",", "34", ")", ",", "\n", "(", "140", ",", "86", ",", "75", ")", ",", "\n", "(", "255", ",", "152", ",", "150", ")", ",", "\n", "(", "214", ",", "39", ",", "40", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "51", ",", "176", ",", "203", ")", ",", "\n", "(", "200", ",", "54", ",", "131", ")", ",", "\n", "(", "92", ",", "193", ",", "61", ")", ",", "\n", "(", "78", ",", "71", ",", "183", ")", ",", "\n", "(", "172", ",", "114", ",", "82", ")", ",", "\n", "(", "255", ",", "127", ",", "14", ")", ",", "\n", "(", "91", ",", "163", ",", "138", ")", ",", "\n", "(", "153", ",", "98", ",", "156", ")", ",", "\n", "(", "140", ",", "153", ",", "101", ")", ",", "\n", "(", "158", ",", "218", ",", "229", ")", ",", "\n", "(", "100", ",", "125", ",", "154", ")", ",", "\n", "(", "178", ",", "127", ",", "135", ")", ",", "\n", "(", "120", ",", "185", ",", "128", ")", ",", "\n", "(", "146", ",", "111", ",", "194", ")", ",", "\n", "(", "44", ",", "160", ",", "44", ")", ",", "\n", "(", "112", ",", "128", ",", "144", ")", ",", "\n", "(", "96", ",", "207", ",", "209", ")", ",", "\n", "(", "227", ",", "119", ",", "194", ")", ",", "\n", "(", "213", ",", "92", ",", "176", ")", ",", "\n", "(", "94", ",", "106", ",", "211", ")", ",", "\n", "(", "82", ",", "84", ",", "163", ")", ",", "\n", "(", "100", ",", "85", ",", "144", ")", ",", "\n", "(", "214", ",", "39", ",", "40", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "51", ",", "176", ",", "203", ")", ",", "\n", "(", "200", ",", "54", ",", "131", ")", ",", "\n", "(", "92", ",", "193", ",", "61", ")", ",", "\n", "(", "78", ",", "71", ",", "183", ")", ",", "\n", "(", "172", ",", "114", ",", "82", ")", ",", "\n", "(", "255", ",", "127", ",", "14", ")", ",", "\n", "(", "91", ",", "163", ",", "138", ")", ",", "\n", "(", "153", ",", "98", ",", "156", ")", ",", "\n", "(", "140", ",", "153", ",", "101", ")", ",", "\n", "(", "158", ",", "218", ",", "229", ")", ",", "\n", "(", "100", ",", "125", ",", "154", ")", ",", "\n", "(", "178", ",", "127", ",", "135", ")", ",", "\n", "(", "120", ",", "185", ",", "128", ")", ",", "\n", "(", "146", ",", "111", ",", "194", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.visualize": [[291, 312], ["ins_ply.create_color_palette", "len", "numpy.load", "PlyData.read.write", "output_file.endswith", "util.print_error", "open", "plyfile.PlyData.read", "range", "len", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.create_color_palette"], ["(", "96", ",", "207", ",", "209", ")", ",", "\n", "(", "227", ",", "119", ",", "194", ")", ",", "\n", "(", "213", ",", "92", ",", "176", ")", ",", "\n", "(", "94", ",", "106", ",", "211", ")", ",", "\n", "(", "82", ",", "84", ",", "163", ")", ",", "\n", "(", "100", ",", "85", ",", "144", ")", ",", "\n", "(", "197", ",", "176", ",", "213", ")", ",", "\n", "(", "148", ",", "103", ",", "189", ")", ",", "\n", "(", "196", ",", "156", ",", "148", ")", ",", "\n", "(", "23", ",", "190", ",", "207", ")", ",", "\n", "(", "178", ",", "76", ",", "76", ")", ",", "\n", "(", "247", ",", "182", ",", "210", ")", ",", "\n", "(", "66", ",", "188", ",", "102", ")", ",", "\n", "(", "219", ",", "219", ",", "141", ")", ",", "\n", "(", "140", ",", "57", ",", "197", ")", ",", "\n", "(", "202", ",", "185", ",", "52", ")", ",", "\n", "(", "51", ",", "176", ",", "203", ")", ",", "\n", "(", "200", ",", "54", ",", "131", ")", ",", "\n", "(", "92", ",", "193", ",", "61", ")", ",", "\n", "(", "78", ",", "71", ",", "183", ")", ",", "\n", "(", "172", ",", "114", ",", "82", ")", ",", "\n", "(", "255", ",", "127", ",", "14", ")", ",", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.modelnet40_tools.txt_to_pcd": [[14, 24], ["numpy.loadtxt", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector"], "function", ["None"], ["def", "txt_to_pcd", "(", "txt_path", ")", ":", "\n", "    ", "pc_txt", "=", "np", ".", "loadtxt", "(", "txt_path", ",", "delimiter", "=", "','", ")", "\n", "xyz", "=", "pc_txt", "[", ":", ",", "0", ":", "3", "]", "\n", "xyz", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "xyz", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "nxnynz", "=", "pc_txt", "[", ":", ",", "3", ":", "6", "]", "\n", "nxnynz", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "nxnynz", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "xyz", ")", "\n", "pcd", ".", "normals", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "nxnynz", ")", "\n", "return", "pcd", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.modelnet40_tools.get_MER": [[28, 45], ["numpy.array", "xys.astype.astype", "cv2.minAreaRect"], "function", ["None"], ["", "def", "get_MER", "(", "pcd", ")", ":", "\n", "    ", "points", "=", "np", ".", "array", "(", "pcd", ".", "points", ")", "\n", "xys", "=", "points", "[", ":", ",", "0", ":", "2", "]", "\n", "xys", "*=", "1000", "\n", "xys", "=", "xys", ".", "astype", "(", "'int'", ")", "\n", "rect", "=", "cv2", ".", "minAreaRect", "(", "xys", ")", "\n", "if", "rect", "[", "1", "]", "[", "1", "]", ">", "rect", "[", "1", "]", "[", "0", "]", ":", "\n", "        ", "l_s", "=", "(", "rect", "[", "1", "]", "[", "1", "]", "/", "1000", ",", "rect", "[", "1", "]", "[", "0", "]", "/", "1000", ")", "\n", "", "else", ":", "\n", "        ", "l_s", "=", "(", "rect", "[", "1", "]", "[", "0", "]", "/", "1000", ",", "rect", "[", "1", "]", "[", "1", "]", "/", "1000", ")", "\n", "", "if", "rect", "[", "1", "]", "[", "0", "]", ">=", "rect", "[", "1", "]", "[", "1", "]", ":", "\n", "        ", "theta", "=", "-", "rect", "[", "2", "]", "\n", "if", "theta", "==", "0", ":", "\n", "            ", "theta", "=", "180", "\n", "", "", "else", ":", "\n", "        ", "theta", "=", "-", "rect", "[", "2", "]", "+", "90", "\n", "", "return", "(", "l_s", ",", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.modelnet40_tools.get_support_z": [[47, 59], ["numpy.array", "numpy.array", "range", "z_list.sort", "len", "numpy.mean", "abs", "z_list.append", "numpy.dot"], "function", ["None"], ["", "def", "get_support_z", "(", "pcd", ")", ":", "\n", "    ", "points", "=", "np", ".", "array", "(", "pcd", ".", "points", ")", "\n", "normals", "=", "np", ".", "array", "(", "pcd", ".", "normals", ")", "\n", "z_list", "=", "[", "]", "\n", "num", "=", "points", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "normal", "=", "normals", "[", "i", "]", "\n", "if", "abs", "(", "np", ".", "dot", "(", "normal", ",", "[", "0", ",", "0", ",", "1", "]", ")", ")", ">", "0.88", ":", "\n", "            ", "z_list", ".", "append", "(", "points", "[", "i", "]", "[", "2", "]", ")", "\n", "", "", "z_list", ".", "sort", "(", ")", "\n", "z_num", "=", "len", "(", "z_list", ")", "\n", "return", "np", ".", "mean", "(", "z_list", "[", "z_num", "*", "4", "//", "5", ":", "z_num", "*", "9", "//", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.modelnet40_tools.get_horizontal_area": [[61, 68], ["xys.astype.astype", "cv2.convexHull", "cv2.contourArea"], "function", ["None"], ["", "def", "get_horizontal_area", "(", "points", ")", ":", "\n", "    ", "xys", "=", "points", "[", ":", ",", ":", "2", "]", "\n", "xys", "*=", "1000", "\n", "xys", "=", "xys", ".", "astype", "(", "'int'", ")", "\n", "hull", "=", "cv2", ".", "convexHull", "(", "xys", ",", "clockwise", "=", "True", ",", "returnPoints", "=", "True", ")", "\n", "area", "=", "cv2", ".", "contourArea", "(", "hull", ")", "\n", "return", "area", "/", "1000000", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.modelnet40_tools.Is_support": [[70, 90], ["numpy.array", "zs.max", "zs.min", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "sklearn.cluster.KMeans.predict", "modelnet40_tools.get_horizontal_area", "modelnet40_tools.get_horizontal_area", "abs"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.modelnet40_tools.get_horizontal_area", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.modelnet40_tools.get_horizontal_area"], ["", "def", "Is_support", "(", "pcd", ",", "support_z", ",", "MER", ")", ":", "\n", "# If support surface's area is much smaller than the MER's area", "\n", "# this object is not supportable", "\n", "    ", "points", "=", "np", ".", "array", "(", "pcd", ".", "points", ")", "\n", "zs", "=", "points", "[", ":", ",", "2", "]", "\n", "dz", "=", "zs", ".", "max", "(", ")", "-", "zs", ".", "min", "(", ")", "\n", "support_points", "=", "points", "[", "abs", "(", "points", "[", ":", ",", "2", "]", "-", "support_z", ")", "<", "dz", "/", "10", "]", "\n", "try", ":", "\n", "        ", "k_means", "=", "KMeans", "(", "n_clusters", "=", "2", ")", "\n", "k_means", ".", "fit", "(", "support_points", ")", "\n", "cluster_label", "=", "k_means", ".", "predict", "(", "support_points", ")", "\n", "points0", "=", "support_points", "[", "cluster_label", "==", "0", "]", "\n", "points1", "=", "support_points", "[", "cluster_label", "==", "1", "]", "\n", "MER_area", "=", "MER", "[", "0", "]", "[", "0", "]", "*", "MER", "[", "0", "]", "[", "1", "]", "\n", "surface_area", "=", "get_horizontal_area", "(", "points0", ")", "+", "get_horizontal_area", "(", "points1", ")", "\n", "if", "surface_area", ">", "MER_area", "*", "0.9", ":", "\n", "            ", "return", "True", "\n", "", "", "except", ":", "\n", "        ", "pass", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.get_MER": [[20, 28], ["copy.deepcopy", "xys.astype.astype", "cv2.minAreaRect"], "function", ["None"], ["def", "get_MER", "(", "points", ")", ":", "\n", "    ", "points", "=", "copy", ".", "deepcopy", "(", "points", ")", "\n", "xys", "=", "points", "[", ":", ",", "0", ":", "2", "]", "*", "1000", "\n", "xys", "=", "xys", ".", "astype", "(", "'int'", ")", "\n", "(", "x_center", ",", "y_center", ")", ",", "(", "x_size", ",", "y_size", ")", ",", "angle", "=", "cv2", ".", "minAreaRect", "(", "xys", ")", "\n", "x_center", "/=", "1e3", ";", "y_center", "/=", "1e3", ";", "y_size", "/=", "1e3", ";", "x_size", "/=", "1e3", "\n", "angle", "=", "angle", "/", "180", "*", "np", ".", "pi", "\n", "return", "(", "x_center", ",", "y_center", ")", ",", "(", "x_size", ",", "y_size", ")", ",", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.get_solid_MER": [[31, 65], ["copy.deepcopy", "xys.astype.astype", "cv2.minAreaRect", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "sklearn.cluster.KMeans.predict", "cv2.minAreaRect", "sum", "sum", "cv2.minAreaRect"], "function", ["None"], ["", "def", "get_solid_MER", "(", "points", ")", ":", "\n", "    ", "points", "=", "copy", ".", "deepcopy", "(", "points", ")", "\n", "xys", "=", "points", "[", ":", ",", "0", ":", "2", "]", "\n", "xys", "*=", "1000", "\n", "xys", "=", "xys", ".", "astype", "(", "'int'", ")", "\n", "rect", "=", "cv2", ".", "minAreaRect", "(", "xys", ")", "\n", "k_means", "=", "KMeans", "(", "n_clusters", "=", "2", ")", "\n", "k_means", ".", "fit", "(", "xys", ")", "\n", "cluster_label", "=", "k_means", ".", "predict", "(", "xys", ")", "\n", "choose0", "=", "(", "sum", "(", "cluster_label", "==", "0", ")", "<", "sum", "(", "cluster_label", "==", "1", ")", ")", "\n", "if", "choose0", ":", "\n", "        ", "xys_part", "=", "xys", "[", "cluster_label", "==", "0", "]", "\n", "xys_other", "=", "xys", "[", "cluster_label", "==", "1", "]", "\n", "", "else", ":", "\n", "        ", "xys_part", "=", "xys", "[", "cluster_label", "==", "1", "]", "\n", "xys_other", "=", "xys", "[", "cluster_label", "==", "0", "]", "\n", "", "rect_part", "=", "cv2", ".", "minAreaRect", "(", "xys_part", ")", "\n", "Is_solid", "=", "(", "rect_part", "[", "1", "]", "[", "0", "]", "*", "rect_part", "[", "1", "]", "[", "1", "]", "*", "2.5", ">", "rect", "[", "1", "]", "[", "0", "]", "*", "rect", "[", "1", "]", "[", "1", "]", ")", "\n", "if", "Is_solid", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "rect", "=", "cv2", ".", "minAreaRect", "(", "xys_other", ")", "\n", "\n", "", "if", "rect", "[", "1", "]", "[", "1", "]", ">", "rect", "[", "1", "]", "[", "0", "]", ":", "\n", "        ", "l_s", "=", "(", "rect", "[", "1", "]", "[", "1", "]", "/", "1000", ",", "rect", "[", "1", "]", "[", "0", "]", "/", "1000", ")", "\n", "", "else", ":", "\n", "        ", "l_s", "=", "(", "rect", "[", "1", "]", "[", "0", "]", "/", "1000", ",", "rect", "[", "1", "]", "[", "1", "]", "/", "1000", ")", "\n", "", "if", "rect", "[", "1", "]", "[", "0", "]", ">=", "rect", "[", "1", "]", "[", "1", "]", ":", "\n", "        ", "theta", "=", "-", "rect", "[", "2", "]", "\n", "if", "theta", "==", "0", ":", "\n", "            ", "theta", "=", "180", "\n", "", "", "else", ":", "\n", "        ", "theta", "=", "-", "rect", "[", "2", "]", "+", "90", "\n", "", "return", "(", "(", "rect", "[", "0", "]", "[", "0", "]", "/", "1000", ",", "rect", "[", "0", "]", "[", "1", "]", "/", "1000", ")", ",", "l_s", ",", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.find_nearest_object": [[67, 82], ["info_dict.items", "matterport_scene_synthesis.find_nearest_object", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.find_nearest_object"], ["", "def", "find_nearest_object", "(", "ls_ratio", ",", "info_dict", ",", "object_name", ",", "require_support", "=", "False", ")", ":", "\n", "    ", "min_dis", "=", "100", "\n", "min_code", "=", "\"\"", "\n", "for", "key", ",", "value", "in", "info_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "value", "[", "0", "]", "[", "0", "]", "[", "1", "]", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "abs", "(", "value", "[", "0", "]", "[", "0", "]", "[", "0", "]", "/", "value", "[", "0", "]", "[", "0", "]", "[", "1", "]", "-", "ls_ratio", ")", "<", "min_dis", ":", "\n", "            ", "if", "require_support", "==", "True", "and", "value", "[", "2", "]", "==", "False", ":", "\n", "                ", "continue", "\n", "", "min_dis", "=", "abs", "(", "value", "[", "0", "]", "[", "0", "]", "[", "0", "]", "/", "value", "[", "0", "]", "[", "0", "]", "[", "1", "]", "-", "ls_ratio", ")", "\n", "min_code", "=", "key", "\n", "", "", "if", "min_code", "==", "\"\"", "and", "require_support", "==", "True", ":", "\n", "        ", "return", "find_nearest_object", "(", "ls_ratio", ",", "info_dict", ",", "object_name", ")", "\n", "", "txt", "=", "object_name", "+", "\"_\"", "+", "min_code", "+", "\".txt\"", "\n", "return", "txt", ",", "info_dict", "[", "min_code", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.generate_initial_random_positions": [[84, 167], ["segment_tools.export_random", "numpy.load().item", "numpy.loadtxt", "segment_tools.export_random.items", "open3d.io.read_triangle_mesh", "numpy.array", "numpy.load().item", "ins_ply.read_aggregation", "ins_ply.read_segmentation", "numpy.zeros", "label_to_segs.items", "os.listdir", "os.listdir.remove", "numpy.load().item", "os.path.join", "numpy.loadtxt", "numpy.load", "os.path.join", "numpy.random.rand", "max", "min", "matterport_scene_synthesis.find_nearest_object", "matterport_scene_synthesis.find_nearest_object", "numpy.random.rand", "numpy.load", "numpy.load", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "max", "min", "max", "min", "max", "min", "abs", "os.path.join", "max", "min"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.segment_tools.export_random", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_aggregation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.read_segmentation", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.find_nearest_object", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.find_nearest_object"], ["", "def", "generate_initial_random_positions", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "modelnet40_path", ",", "scan_name", ")", ":", "\n", "    ", "xyz_obj_dict", "=", "export_random", "(", "mesh_file", ",", "agg_file", ",", "seg_file", ",", "scan_name", ")", "\n", "obj_prop", "=", "np", ".", "load", "(", "'CONFIG/object40_property.npy'", ",", "allow_pickle", "=", "True", ",", "encoding", "=", "'bytes'", ")", ".", "item", "(", ")", "\n", "modelnet40_names", "=", "np", ".", "loadtxt", "(", "'CONFIG/modelnet40_shape_names.txt'", ",", "dtype", "=", "'object'", ")", "\n", "supporter_list", "=", "[", "\"tv_stand\"", ",", "\"desk\"", ",", "\"bed\"", ",", "\"bookshelf\"", ",", "\"table\"", ",", "\"night_stand\"", "]", "\n", "# object_id: [(x,y,z), (sx,sy,sz), object_txt, Is_supporter, theta, support_MER/None, height/None]", "\n", "# theta is the orientation of the object (anticlockwise)", "\n", "# supporter has theta, support_MER and height", "\n", "# object with plane but not supporter has theta, None, None", "\n", "# object without plane has None, None, None", "\n", "# MER: ((x, y), (long, short), theta)", "\n", "positions", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "xyz_obj_dict", ".", "items", "(", ")", ":", "\n", "        ", "obj_name", "=", "modelnet40_names", "[", "value", "[", "2", "]", "-", "1", "]", "\n", "txts", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "modelnet40_path", ",", "obj_name", ")", ")", "\n", "txts", ".", "remove", "(", "\"this_class_info.npy\"", ")", "\n", "this_class_info", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "modelnet40_path", ",", "obj_name", ",", "\n", "\"this_class_info.npy\"", ")", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "\n", "# choose xy or yx", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", ":", "\n", "            ", "_", ",", "_", ",", "_", ",", "dxavg", ",", "dyavg", ",", "dzavg", "=", "obj_prop", "[", "value", "[", "2", "]", "]", "[", "0", ":", "6", "]", "\n", "", "else", ":", "\n", "            ", "dxavg", ",", "dyavg", ",", "dzavg", ",", "_", ",", "_", ",", "_", "=", "obj_prop", "[", "value", "[", "2", "]", "]", "[", "0", ":", "6", "]", "\n", "", "dxmin", ",", "dymin", ",", "dzmin", "=", "0.8", "*", "dxavg", ",", "0.8", "*", "dyavg", ",", "0.8", "*", "dzavg", "\n", "dxmax", ",", "dymax", ",", "dzmax", "=", "1.3", "*", "dxavg", ",", "1.3", "*", "dyavg", ",", "1.3", "*", "dzavg", "\n", "dx", "=", "dxmin", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "dxmax", "-", "dxmin", ")", "\n", "dy", "=", "dymin", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "dymax", "-", "dymin", ")", "\n", "dz", "=", "dzmin", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "dzmax", "-", "dzmin", ")", "\n", "x", ",", "y", ",", "z", "=", "value", "[", "0", "]", "\n", "ls_ratio", "=", "max", "(", "dx", ",", "dy", ")", "/", "min", "(", "dx", ",", "dy", ")", "\n", "if", "obj_name", "in", "supporter_list", ":", "\n", "            ", "txt", ",", "obj_info", "=", "find_nearest_object", "(", "ls_ratio", ",", "this_class_info", ",", "obj_name", ",", "require_support", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "txt", ",", "obj_info", "=", "find_nearest_object", "(", "ls_ratio", ",", "this_class_info", ",", "obj_name", ")", "\n", "", "obj_txt", "=", "os", ".", "path", ".", "join", "(", "modelnet40_path", ",", "obj_name", ",", "txt", ")", "\n", "pc_txt", "=", "np", ".", "loadtxt", "(", "obj_txt", ",", "delimiter", "=", "','", ")", "\n", "pc_txt", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "pc_txt", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "pc_txt", "[", ":", ",", "[", "4", ",", "5", "]", "]", "=", "pc_txt", "[", ":", ",", "[", "4", ",", "5", "]", "]", "\n", "ddx", ",", "ddy", ",", "ddz", "=", "max", "(", "pc_txt", "[", ":", ",", "0", "]", ")", "-", "min", "(", "pc_txt", "[", ":", ",", "0", "]", ")", ",", "max", "(", "pc_txt", "[", ":", ",", "1", "]", ")", "-", "min", "(", "pc_txt", "[", ":", ",", "1", "]", ")", ",", "max", "(", "pc_txt", "[", ":", ",", "2", "]", ")", "-", "min", "(", "pc_txt", "[", ":", ",", "2", "]", ")", "\n", "scale", "=", "(", "dx", "*", "dx", "*", "dz", "/", "ddx", "/", "ddy", "/", "ddz", ")", "**", "(", "1", "/", "3", ")", "\n", "# special category: door, curtain, ...", "\n", "# only constrain the height", "\n", "if", "obj_name", "in", "[", "\"curtain\"", ",", "\"door\"", ",", "\"sofa\"", ",", "\"desk\"", "]", ":", "\n", "            ", "scale", "=", "dz", "/", "ddz", "\n", "# special category: keyboard", "\n", "# only constrain the horizontal property", "\n", "", "if", "obj_name", "in", "[", "\"keyboard\"", "]", ":", "\n", "            ", "scale", "=", "(", "dx", "*", "dy", "/", "ddx", "/", "ddy", ")", "**", "(", "1", "/", "2", ")", "\n", "", "theta", "=", "np", ".", "random", ".", "rand", "(", ")", "*", "360", "\n", "if", "obj_name", "in", "supporter_list", ":", "\n", "            ", "MER", "=", "(", "(", "x", ",", "y", ")", ",", "(", "scale", "*", "max", "(", "ddx", ",", "ddy", ")", ",", "scale", "*", "min", "(", "ddx", ",", "ddy", ")", ")", ",", "(", "theta", "+", "obj_info", "[", "0", "]", "[", "1", "]", ")", "%", "180", ")", "\n", "height", "=", "z", "+", "scale", "*", "obj_info", "[", "1", "]", "\n", "positions", "[", "key", "]", "=", "[", "(", "x", ",", "y", ",", "z", ")", ",", "(", "scale", ",", "scale", ",", "scale", ")", ",", "obj_txt", ",", "True", ",", "theta", ",", "MER", ",", "height", "]", "\n", "", "else", ":", "\n", "            ", "positions", "[", "key", "]", "=", "[", "(", "x", ",", "y", ",", "z", ")", ",", "(", "scale", ",", "scale", ",", "scale", ")", ",", "obj_txt", ",", "False", ",", "theta", ",", "None", ",", "None", "]", "\n", "\n", "", "", "'''\n    # no floor/wall points\n    wall_points = np.array([])\n    floor_points = np.array([])\n    '''", "\n", "\n", "# get floor/wall points", "\n", "mesh", "=", "o3d", ".", "io", ".", "read_triangle_mesh", "(", "mesh_file", ")", "\n", "scene_vertices", "=", "np", ".", "array", "(", "mesh", ".", "vertices", ")", "\n", "map2nyu40", "=", "np", ".", "load", "(", "'CONFIG/map2nyu40.npy'", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "object_id_to_segs", ",", "label_to_segs", "=", "read_aggregation", "(", "agg_file", ")", "\n", "seg_to_verts", ",", "num_verts", "=", "read_segmentation", "(", "seg_file", ")", "\n", "label_ids", "=", "np", ".", "zeros", "(", "shape", "=", "(", "num_verts", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "\n", "for", "label", ",", "segs", "in", "label_to_segs", ".", "items", "(", ")", ":", "\n", "        ", "label_id", "=", "map2nyu40", "[", "label", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "            ", "try", ":", "\n", "                ", "verts", "=", "seg_to_verts", "[", "seg", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "label_ids", "[", "verts", "]", "=", "label_id", "\n", "", "", "wall_points", "=", "scene_vertices", "[", "label_ids", "==", "1", "]", "\n", "#floor_points = scene_vertices[label_ids == 2]", "\n", "floor_points", "=", "scene_vertices", "[", "abs", "(", "scene_vertices", "[", ":", ",", "2", "]", ")", "<", "0.05", "]", "\n", "\n", "return", "positions", ",", "(", "floor_points", ",", "wall_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.point_in_MER": [[169, 188], ["abs", "abs", "abs", "abs", "abs", "numpy.arccos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "point_in_MER", "(", "x", ",", "y", ",", "MER", ")", ":", "\n", "    ", "dx", "=", "x", "-", "MER", "[", "0", "]", "[", "0", "]", "\n", "dy", "=", "abs", "(", "MER", "[", "0", "]", "[", "1", "]", "-", "y", ")", "\n", "dd", "=", "(", "dx", "**", "2", "+", "dy", "**", "2", ")", "**", "0.5", "\n", "cosf", "=", "dx", "/", "dd", "\n", "f", "=", "np", ".", "arccos", "(", "cosf", ")", "/", "np", ".", "pi", "*", "180", "\n", "if", "MER", "[", "2", "]", ">=", "90", ":", "\n", "        ", "theta", "=", "f", "-", "MER", "[", "2", "]", "+", "90", "\n", "dx_align", "=", "abs", "(", "dd", "*", "np", ".", "cos", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ")", "\n", "dy_align", "=", "abs", "(", "dd", "*", "np", ".", "sin", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ")", "\n", "if", "dx_align", "<", "MER", "[", "1", "]", "[", "1", "]", "/", "2", "and", "dy_align", "<", "MER", "[", "1", "]", "[", "0", "]", "/", "2", ":", "\n", "            ", "return", "True", "\n", "", "", "else", ":", "\n", "        ", "theta", "=", "f", "-", "MER", "[", "2", "]", "\n", "dx_align", "=", "abs", "(", "dd", "*", "np", ".", "cos", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ")", "\n", "dy_align", "=", "abs", "(", "dd", "*", "np", ".", "sin", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ")", "\n", "if", "dx_align", "<", "MER", "[", "1", "]", "[", "0", "]", "/", "2", "and", "dy_align", "<", "MER", "[", "1", "]", "[", "1", "]", "/", "2", ":", "\n", "            ", "return", "True", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.generate_gravity_aware_positions": [[190, 249], ["positions.copy", "positions.items", "positions.items", "len", "numpy.mean", "value[].split", "numpy.loadtxt", "supporter_MER.items", "numpy.loadtxt", "value[].split", "stage_map[].append", "min", "matterport_scene_synthesis.point_in_MER", "min", "min"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.point_in_MER"], ["", "def", "generate_gravity_aware_positions", "(", "positions", ",", "floor_points", ")", ":", "\n", "    ", "new_positions", "=", "positions", ".", "copy", "(", ")", "\n", "if", "len", "(", "floor_points", ")", "==", "0", ":", "\n", "        ", "ground_z", "=", "0", "\n", "", "else", ":", "\n", "        ", "ground_z", "=", "np", ".", "mean", "(", "floor_points", "[", ":", ",", "2", "]", ")", "\n", "", "supporter_MER", "=", "{", "}", "# id: MER", "\n", "# Stage1: not be supported, things on the ground or dangling (lamp/sink) ", "\n", "# Stage2: supported objects", "\n", "# stage1_id: [stage2_id, ...]", "\n", "stage_map", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "        ", "obj_name", "=", "value", "[", "2", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "if", "value", "[", "3", "]", "==", "True", ":", "\n", "            ", "supporter_MER", "[", "key", "]", "=", "value", "[", "5", "]", "\n", "stage_map", "[", "key", "]", "=", "[", "]", "\n", "x", ",", "y", ",", "z", "=", "value", "[", "0", "]", "\n", "_", ",", "_", ",", "sz", "=", "value", "[", "1", "]", "\n", "pc_txt", "=", "np", ".", "loadtxt", "(", "value", "[", "2", "]", ",", "delimiter", "=", "','", ")", "\n", "pc_txt", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "pc_txt", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "pc_txt", "[", ":", ",", "[", "4", ",", "5", "]", "]", "=", "pc_txt", "[", ":", ",", "[", "4", ",", "5", "]", "]", "\n", "new_z", "=", "ground_z", "-", "sz", "*", "min", "(", "pc_txt", "[", ":", ",", "2", "]", ")", "\n", "new_positions", "[", "key", "]", "[", "0", "]", "=", "(", "x", ",", "y", ",", "new_z", ")", "\n", "new_positions", "[", "key", "]", "[", "6", "]", "=", "value", "[", "6", "]", "+", "(", "new_z", "-", "z", ")", "\n", "", "", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "        ", "if", "value", "[", "3", "]", "==", "False", ":", "\n", "            ", "min_center_dis2", "=", "100", "\n", "x", ",", "y", "=", "value", "[", "0", "]", "[", "0", "]", ",", "value", "[", "0", "]", "[", "1", "]", "\n", "choosed_supporter", "=", "-", "1", "\n", "for", "supporter_id", ",", "MER", "in", "supporter_MER", ".", "items", "(", ")", ":", "\n", "                ", "if", "point_in_MER", "(", "x", ",", "y", ",", "MER", ")", "and", "(", "x", "-", "MER", "[", "0", "]", "[", "0", "]", ")", "**", "2", "+", "(", "y", "-", "MER", "[", "0", "]", "[", "1", "]", ")", "**", "2", "<", "min_center_dis2", ":", "\n", "                    ", "choosed_supporter", "=", "supporter_id", "\n", "min_center_dis2", "=", "(", "x", "-", "MER", "[", "0", "]", "[", "0", "]", ")", "**", "2", "+", "(", "y", "-", "MER", "[", "0", "]", "[", "1", "]", ")", "**", "2", "\n", "# some object will never be supported", "\n", "# so we need to correct the wrong choice if needed", "\n", "", "", "obj_name", "=", "value", "[", "2", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "if", "obj_name", "not", "in", "[", "\"monitor\"", ",", "\"plant\"", ",", "\"lamp\"", ",", "\"sink\"", ",", "\"cup\"", ",", "\"keyboard\"", ",", "\"bottle\"", ",", "\"laptop\"", "]", ":", "\n", "                ", "choosed_supporter", "=", "-", "1", "\n", "\n", "", "if", "choosed_supporter", "==", "-", "1", ":", "\n", "                ", "stage_map", "[", "key", "]", "=", "[", "]", "\n", "", "else", ":", "\n", "                ", "stage_map", "[", "choosed_supporter", "]", ".", "append", "(", "key", ")", "\n", "\n", "", "x", ",", "y", ",", "z", "=", "value", "[", "0", "]", "\n", "_", ",", "_", ",", "sz", "=", "value", "[", "1", "]", "\n", "pc_txt", "=", "np", ".", "loadtxt", "(", "value", "[", "2", "]", ",", "delimiter", "=", "','", ")", "\n", "pc_txt", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "pc_txt", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "pc_txt", "[", ":", ",", "[", "4", ",", "5", "]", "]", "=", "pc_txt", "[", ":", ",", "[", "4", ",", "5", "]", "]", "\n", "# special category: sink, lamp", "\n", "if", "choosed_supporter", "==", "-", "1", ":", "\n", "                ", "if", "(", "obj_name", "==", "\"lamp\"", "and", "z", ">", "1.2", ")", "or", "obj_name", "==", "\"sink\"", ":", "\n", "                    ", "new_z", "=", "z", "\n", "", "else", ":", "\n", "                    ", "new_z", "=", "ground_z", "-", "sz", "*", "min", "(", "pc_txt", "[", ":", ",", "2", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "new_z", "=", "new_positions", "[", "choosed_supporter", "]", "[", "6", "]", "-", "sz", "*", "min", "(", "pc_txt", "[", ":", ",", "2", "]", ")", "\n", "", "new_positions", "[", "key", "]", "[", "0", "]", "=", "(", "x", ",", "y", ",", "new_z", ")", "\n", "", "", "return", "new_positions", ",", "stage_map", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.anticlock_rotate_matrix": [[251, 256], ["numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "anticlock_rotate_matrix", "(", "theta", ")", ":", "\n", "# anticlockwise means y-->x", "\n", "    ", "theta", "*=", "-", "1", "\n", "return", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "np", ".", "pi", "/", "180", "*", "theta", ")", ",", "np", ".", "sin", "(", "np", ".", "pi", "/", "180", "*", "theta", ")", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "np", ".", "pi", "/", "180", "*", "theta", ")", ",", "np", ".", "cos", "(", "np", ".", "pi", "/", "180", "*", "theta", ")", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.position_to_xyz": [[258, 281], ["numpy.matmul", "numpy.loadtxt", "int", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "o3d.geometry.PointCloud.uniform_down_sample", "numpy.array", "matterport_scene_synthesis.anticlock_rotate_matrix"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.anticlock_rotate_matrix"], ["", "def", "position_to_xyz", "(", "position", ",", "Is_density", "=", "False", ",", "ratio", "=", "None", ")", ":", "\n", "# If consider density, the total number of points of a object is 10000*ratio", "\n", "    ", "obj_xyz", "=", "np", ".", "loadtxt", "(", "position", "[", "2", "]", ",", "delimiter", "=", "','", ")", "[", ":", ",", "0", ":", "3", "]", "\n", "obj_xyz", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "obj_xyz", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "if", "Is_density", ":", "\n", "        ", "ds_k", "=", "int", "(", "1", "//", "ratio", ")", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "obj_xyz", ")", "\n", "down_pcd", "=", "pcd", ".", "uniform_down_sample", "(", "every_k_points", "=", "ds_k", ")", "\n", "obj_xyz", "=", "np", ".", "array", "(", "down_pcd", ".", "points", ")", "\n", "#print(position[2].split('/')[-2] + \": \", obj_xyz.shape[0], \", \", ds_k)", "\n", "# scale", "\n", "", "obj_xyz", "[", ":", ",", "0", "]", "*=", "position", "[", "1", "]", "[", "0", "]", "\n", "obj_xyz", "[", ":", ",", "1", "]", "*=", "position", "[", "1", "]", "[", "1", "]", "\n", "obj_xyz", "[", ":", ",", "2", "]", "*=", "position", "[", "1", "]", "[", "2", "]", "\n", "# rotate", "\n", "theta", "=", "position", "[", "4", "]", "\n", "obj_xyz", "[", ":", ",", "0", ":", "2", "]", "=", "np", ".", "matmul", "(", "obj_xyz", "[", ":", ",", "0", ":", "2", "]", ",", "anticlock_rotate_matrix", "(", "theta", ")", ")", "\n", "# translate", "\n", "obj_xyz", "[", ":", ",", "0", "]", "+=", "position", "[", "0", "]", "[", "0", "]", "\n", "obj_xyz", "[", ":", ",", "1", "]", "+=", "position", "[", "0", "]", "[", "1", "]", "\n", "obj_xyz", "[", ":", ",", "2", "]", "+=", "position", "[", "0", "]", "[", "2", "]", "\n", "return", "obj_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.Is_collide": [[283, 286], ["sklearn.metrics.pairwise.pairwise_distances", "sklearn.metrics.pairwise.pairwise_distances.min"], "function", ["None"], ["", "def", "Is_collide", "(", "xyz1", ",", "xyz2", ",", "threshold", ")", ":", "\n", "    ", "D", "=", "pairwise_distances", "(", "xyz1", ",", "xyz2", ",", "metric", "=", "'euclidean'", ")", "\n", "return", "D", ".", "min", "(", ")", "<", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.generate_collision_aware_positions": [[288, 402], ["positions.items", "sorted", "enumerate", "stage_map.items", "positions.copy", "positions.copy.items", "len", "matterport_scene_synthesis.position_to_xyz", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "o3d.geometry.PointCloud.uniform_down_sample", "numpy.array", "stage1_distance.keys", "sorted", "enumerate", "floor_points[].min", "floor_points[].max", "floor_points[].min", "floor_points[].max", "stage_map.keys", "matterport_scene_synthesis.Is_collide", "len", "len", "stage2_distance.keys", "matterport_scene_synthesis.Is_collide", "matterport_scene_synthesis.Is_collide", "matterport_scene_synthesis.Is_collide"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.position_to_xyz", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.Is_collide", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.Is_collide", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.Is_collide", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.Is_collide"], ["", "def", "generate_collision_aware_positions", "(", "positions", ",", "stage_map", ",", "floor_points", ",", "threshold", "=", "0.05", ")", ":", "\n", "    ", "obj_xyzs", "=", "{", "}", "# id: xyz", "\n", "obj_dxy", "=", "{", "}", "# id: [dx, dy]", "\n", "if", "len", "(", "floor_points", ")", ">", "0", ":", "\n", "        ", "xmin", ",", "xmax", "=", "floor_points", "[", ":", ",", "0", "]", ".", "min", "(", ")", ",", "floor_points", "[", ":", ",", "0", "]", ".", "max", "(", ")", "\n", "ymin", ",", "ymax", "=", "floor_points", "[", ":", ",", "1", "]", ".", "min", "(", ")", ",", "floor_points", "[", ":", ",", "1", "]", ".", "max", "(", ")", "\n", "stage1_center", "=", "[", "(", "xmin", "+", "xmax", ")", "/", "2", ",", "(", "ymin", "+", "ymax", ")", "/", "2", "]", "\n", "", "else", ":", "\n", "        ", "stage1_center", "=", "[", "0", ",", "0", "]", "\n", "", "stage1_distance", "=", "{", "}", "# stage1_id: dis_to_center", "\n", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", "in", "stage_map", ".", "keys", "(", ")", ":", "\n", "            ", "stage1_distance", "[", "key", "]", "=", "(", "(", "value", "[", "0", "]", "[", "0", "]", "-", "stage1_center", "[", "0", "]", ")", "**", "2", "+", "(", "value", "[", "0", "]", "[", "1", "]", "-", "stage1_center", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "# to boost the collision detection, we need to downsample the xyz", "\n", "", "xyz", "=", "position_to_xyz", "(", "value", ")", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "xyz", ")", "\n", "down_pcd", "=", "pcd", ".", "uniform_down_sample", "(", "every_k_points", "=", "5", ")", "\n", "down_xyz", "=", "np", ".", "array", "(", "down_pcd", ".", "points", ")", "\n", "obj_xyzs", "[", "key", "]", "=", "down_xyz", "\n", "obj_dxy", "[", "key", "]", "=", "[", "0", ",", "0", "]", "\n", "", "near_to_far", "=", "sorted", "(", "stage1_distance", ".", "keys", "(", ")", ",", "key", "=", "lambda", "x", ":", "stage1_distance", "[", "x", "]", ")", "\n", "# only consider nearer (to center) objects", "\n", "for", "i", ",", "obj_id", "in", "enumerate", "(", "near_to_far", "[", "1", ":", "]", ")", ":", "\n", "        ", "consider_obj_ids", "=", "near_to_far", "[", ":", "i", "+", "1", "]", "\n", "new_x", ",", "new_y", ",", "_", "=", "positions", "[", "obj_id", "]", "[", "0", "]", "\n", "move_vector", "=", "[", "0", ",", "0", "]", "\n", "Is_collide_bool", "=", "False", "\n", "for", "consider_id", "in", "consider_obj_ids", ":", "\n", "            ", "con_x", ",", "con_y", ",", "_", "=", "positions", "[", "consider_id", "]", "[", "0", "]", "\n", "try", ":", "\n", "                ", "move_vector", "[", "0", "]", "+=", "1", "/", "(", "new_x", "-", "con_x", ")", "\n", "", "except", ":", "\n", "                ", "move_vector", "[", "0", "]", "+=", "10", "\n", "", "try", ":", "\n", "                ", "move_vector", "[", "1", "]", "+=", "1", "/", "(", "new_y", "-", "con_y", ")", "\n", "", "except", ":", "\n", "                ", "move_vector", "[", "1", "]", "+=", "10", "\n", "", "if", "Is_collide_bool", ":", "\n", "                ", "continue", "\n", "", "if", "Is_collide", "(", "obj_xyzs", "[", "obj_id", "]", ",", "obj_xyzs", "[", "consider_id", "]", ",", "threshold", "=", "threshold", ")", ":", "\n", "                ", "Is_collide_bool", "=", "True", "\n", "", "", "scale", "=", "0.1", "/", "(", "(", "move_vector", "[", "0", "]", ")", "**", "2", "+", "(", "move_vector", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "move_vector", "[", "0", "]", "*=", "scale", "\n", "move_vector", "[", "1", "]", "*=", "scale", "\n", "while", "Is_collide_bool", ":", "\n", "            ", "obj_xyzs", "[", "obj_id", "]", "[", ":", ",", "0", "]", "+=", "move_vector", "[", "0", "]", "\n", "obj_xyzs", "[", "obj_id", "]", "[", ":", ",", "1", "]", "+=", "move_vector", "[", "1", "]", "\n", "obj_dxy", "[", "obj_id", "]", "[", "0", "]", "+=", "move_vector", "[", "0", "]", "\n", "obj_dxy", "[", "obj_id", "]", "[", "1", "]", "+=", "move_vector", "[", "1", "]", "\n", "Is_collide_bool", "=", "False", "\n", "for", "consider_id", "in", "consider_obj_ids", ":", "\n", "                ", "if", "Is_collide_bool", ":", "\n", "                    ", "break", "\n", "", "if", "Is_collide", "(", "obj_xyzs", "[", "obj_id", "]", ",", "obj_xyzs", "[", "consider_id", "]", ",", "threshold", "=", "threshold", ")", ":", "\n", "                    ", "Is_collide_bool", "=", "True", "\n", "# stage2 objects", "\n", "", "", "", "", "for", "stage1_id", ",", "stage2_ids", "in", "stage_map", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "stage2_ids", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "for", "stage2_id", "in", "stage2_ids", ":", "\n", "            ", "obj_xyzs", "[", "stage2_id", "]", "[", ":", ",", "0", "]", "+=", "obj_dxy", "[", "stage1_id", "]", "[", "0", "]", "\n", "obj_xyzs", "[", "stage2_id", "]", "[", ":", ",", "1", "]", "+=", "obj_dxy", "[", "stage1_id", "]", "[", "1", "]", "\n", "obj_dxy", "[", "stage2_id", "]", "[", "0", "]", "+=", "obj_dxy", "[", "stage1_id", "]", "[", "0", "]", "\n", "obj_dxy", "[", "stage2_id", "]", "[", "1", "]", "+=", "obj_dxy", "[", "stage1_id", "]", "[", "1", "]", "\n", "", "if", "len", "(", "stage2_ids", ")", "==", "1", ":", "\n", "            ", "continue", "\n", "", "stage2_center", "=", "[", "positions", "[", "stage1_id", "]", "[", "0", "]", "[", "0", "]", ",", "positions", "[", "stage1_id", "]", "[", "0", "]", "[", "1", "]", "]", "\n", "stage2_distance", "=", "{", "}", "# stage2_id: dis_to_center", "\n", "for", "stage2_id", "in", "stage2_ids", ":", "\n", "            ", "value", "=", "positions", "[", "stage2_id", "]", "\n", "stage2_distance", "[", "stage2_id", "]", "=", "(", "(", "value", "[", "0", "]", "[", "0", "]", "-", "stage2_center", "[", "0", "]", ")", "**", "2", "+", "(", "value", "[", "0", "]", "[", "1", "]", "-", "stage2_center", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "", "far_to_near", "=", "sorted", "(", "stage2_distance", ".", "keys", "(", ")", ",", "key", "=", "lambda", "x", ":", "stage2_distance", "[", "x", "]", ",", "reverse", "=", "True", ")", "\n", "for", "i", ",", "obj_id", "in", "enumerate", "(", "far_to_near", "[", "1", ":", "]", ")", ":", "\n", "            ", "consider_obj_ids", "=", "far_to_near", "[", ":", "i", "+", "1", "]", "\n", "new_x", ",", "new_y", ",", "_", "=", "positions", "[", "obj_id", "]", "[", "0", "]", "\n", "# to avoid falling down, we need to correct the direction toward the center", "\n", "max_moving_len", "=", "0", "\n", "move_vector", "=", "[", "0", ",", "0", "]", "\n", "Is_collide_bool", "=", "False", "\n", "for", "consider_id", "in", "consider_obj_ids", ":", "\n", "                ", "con_x", ",", "con_y", ",", "_", "=", "positions", "[", "consider_id", "]", "[", "0", "]", "\n", "moving_len", "=", "(", "1", "/", "(", "new_x", "-", "con_x", ")", "**", "2", "+", "1", "/", "(", "new_y", "-", "con_y", ")", "**", "2", ")", "**", "0.5", "\n", "if", "moving_len", ">", "max_moving_len", ":", "\n", "                    ", "max_moving_len", "=", "moving_len", "\n", "", "move_vector", "[", "0", "]", "+=", "1", "/", "(", "new_x", "-", "con_x", ")", "\n", "move_vector", "[", "1", "]", "+=", "1", "/", "(", "new_y", "-", "con_y", ")", "\n", "if", "Is_collide_bool", ":", "\n", "                    ", "continue", "\n", "", "if", "Is_collide", "(", "obj_xyzs", "[", "obj_id", "]", ",", "obj_xyzs", "[", "consider_id", "]", ",", "threshold", "=", "threshold", ")", ":", "\n", "                    ", "Is_collide_bool", "=", "True", "\n", "", "", "center_move_vector", "=", "[", "stage2_center", "[", "0", "]", "-", "new_x", ",", "stage2_center", "[", "1", "]", "-", "new_y", "]", "\n", "scale_center", "=", "max_moving_len", "/", "(", "(", "center_move_vector", "[", "0", "]", ")", "**", "2", "+", "(", "center_move_vector", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "move_vector", "[", "0", "]", "+=", "scale_center", "*", "center_move_vector", "[", "0", "]", "\n", "move_vector", "[", "1", "]", "+=", "scale_center", "*", "center_move_vector", "[", "1", "]", "\n", "scale", "=", "0.05", "/", "(", "(", "move_vector", "[", "0", "]", ")", "**", "2", "+", "(", "move_vector", "[", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "move_vector", "[", "0", "]", "*=", "scale", "\n", "move_vector", "[", "1", "]", "*=", "scale", "\n", "while", "Is_collide_bool", ":", "\n", "                ", "obj_xyzs", "[", "obj_id", "]", "[", ":", ",", "0", "]", "+=", "move_vector", "[", "0", "]", "\n", "obj_xyzs", "[", "obj_id", "]", "[", ":", ",", "1", "]", "+=", "move_vector", "[", "1", "]", "\n", "obj_dxy", "[", "obj_id", "]", "[", "0", "]", "+=", "move_vector", "[", "0", "]", "\n", "obj_dxy", "[", "obj_id", "]", "[", "1", "]", "+=", "move_vector", "[", "1", "]", "\n", "Is_collide_bool", "=", "False", "\n", "for", "consider_id", "in", "consider_obj_ids", ":", "\n", "                    ", "if", "Is_collide_bool", ":", "\n", "                        ", "break", "\n", "", "if", "Is_collide", "(", "obj_xyzs", "[", "obj_id", "]", ",", "obj_xyzs", "[", "consider_id", "]", ",", "threshold", "=", "threshold", ")", ":", "\n", "                        ", "Is_collide_bool", "=", "True", "\n", "", "", "", "", "", "new_positions", "=", "positions", ".", "copy", "(", ")", "\n", "for", "key", ",", "value", "in", "new_positions", ".", "items", "(", ")", ":", "\n", "        ", "dx", ",", "dy", "=", "obj_dxy", "[", "key", "]", "\n", "value", "[", "0", "]", "=", "(", "value", "[", "0", "]", "[", "0", "]", "+", "dx", ",", "value", "[", "0", "]", "[", "1", "]", "+", "dy", ",", "value", "[", "0", "]", "[", "2", "]", ")", "\n", "", "return", "new_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.positions_to_pcd": [[404, 458], ["ins_ply.create_color_palette", "positions.items", "numpy.array", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.utility.Vector3dVector", "len", "numpy.mean", "numpy.array", "numpy.concatenate", "list", "numpy.array", "numpy.concatenate", "list", "positions.items", "max", "numpy.array", "numpy.concatenate", "list", "print", "pcd.select_by_index.hidden_point_removal", "pcd.select_by_index.select_by_index", "S_dict.values", "matterport_scene_synthesis.position_to_xyz", "matterport_scene_synthesis.position_to_xyz", "xs.min", "xs.max", "ys.min", "ys.max", "numpy.loadtxt", "min", "list", "list", "max", "min", "max", "min", "max", "min", "list"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.ins_ply.create_color_palette", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.position_to_xyz", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.position_to_xyz"], ["", "def", "positions_to_pcd", "(", "positions", ",", "fw_points", ",", "Is_floor", "=", "True", ",", "Is_wall", "=", "False", ",", "Is_density", "=", "False", ",", "Is_HPR", "=", "False", ")", ":", "\n", "    ", "if", "len", "(", "positions", ")", "==", "0", ":", "\n", "        ", "return", "None", "\n", "", "xyzrgb_list", "=", "[", "]", "\n", "colors", "=", "create_color_palette", "(", ")", "\n", "# floor", "\n", "if", "Is_floor", ":", "\n", "        ", "floor_points", "=", "fw_points", "[", "0", "]", "\n", "ground_z", "=", "np", ".", "mean", "(", "floor_points", "[", ":", ",", "2", "]", ")", "\n", "floor_points", "[", ":", ",", "2", "]", "=", "ground_z", "\n", "floor_color", "=", "colors", "[", "0", "]", "\n", "floor_rgb", "=", "np", ".", "array", "(", "[", "list", "(", "floor_color", ")", "]", "*", "floor_points", ".", "shape", "[", "0", "]", ")", "\n", "floor_xyzrgb", "=", "np", ".", "concatenate", "(", "[", "floor_points", ",", "floor_rgb", "]", ",", "axis", "=", "1", ")", "\n", "xyzrgb_list", "+=", "list", "(", "floor_xyzrgb", ")", "\n", "# wall", "\n", "", "if", "Is_wall", ":", "\n", "        ", "wall_points", "=", "fw_points", "[", "1", "]", "\n", "wall_color", "=", "colors", "[", "0", "]", "\n", "wall_rgb", "=", "np", ".", "array", "(", "[", "list", "(", "wall_color", ")", "]", "*", "wall_points", ".", "shape", "[", "0", "]", ")", "\n", "wall_xyzrgb", "=", "np", ".", "concatenate", "(", "[", "wall_points", ",", "wall_rgb", "]", ",", "axis", "=", "1", ")", "\n", "xyzrgb_list", "+=", "list", "(", "wall_xyzrgb", ")", "\n", "# density", "\n", "", "if", "Is_density", ":", "\n", "        ", "S_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "            ", "obj_xyz", "=", "np", ".", "loadtxt", "(", "value", "[", "2", "]", ",", "delimiter", "=", "','", ")", "[", ":", ",", "0", ":", "3", "]", "\n", "obj_xyz", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "obj_xyz", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "ddx", ",", "ddy", ",", "ddz", "=", "max", "(", "obj_xyz", "[", ":", ",", "0", "]", ")", "-", "min", "(", "obj_xyz", "[", ":", ",", "0", "]", ")", ",", "max", "(", "obj_xyz", "[", ":", ",", "1", "]", ")", "-", "min", "(", "obj_xyz", "[", ":", ",", "1", "]", ")", ",", "max", "(", "obj_xyz", "[", ":", ",", "2", "]", ")", "-", "min", "(", "obj_xyz", "[", ":", ",", "2", "]", ")", "\n", "dx", ",", "dy", ",", "dz", "=", "ddx", "*", "value", "[", "1", "]", "[", "0", "]", ",", "ddy", "*", "value", "[", "1", "]", "[", "1", "]", ",", "ddz", "*", "value", "[", "1", "]", "[", "2", "]", "\n", "S_larger", "=", "dx", "*", "dy", "*", "dz", "/", "min", "(", "dx", ",", "dy", ",", "dz", ")", "\n", "S_dict", "[", "key", "]", "=", "S_larger", "\n", "", "S_max", "=", "max", "(", "S_dict", ".", "values", "(", ")", ")", "\n", "# position to points", "\n", "", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "        ", "color", "=", "colors", "[", "key", "]", "\n", "if", "Is_density", ":", "\n", "            ", "obj_xyz", "=", "position_to_xyz", "(", "value", ",", "Is_density", "=", "True", ",", "ratio", "=", "S_dict", "[", "key", "]", "/", "S_max", ")", "\n", "", "else", ":", "\n", "            ", "obj_xyz", "=", "position_to_xyz", "(", "value", ")", "\n", "", "obj_rgb", "=", "np", ".", "array", "(", "[", "list", "(", "color", ")", "]", "*", "obj_xyz", ".", "shape", "[", "0", "]", ")", "\n", "obj_xyzrgb", "=", "np", ".", "concatenate", "(", "[", "obj_xyz", ",", "obj_rgb", "]", ",", "axis", "=", "1", ")", "\n", "xyzrgb_list", "+=", "list", "(", "obj_xyzrgb", ")", "\n", "# points to pcd", "\n", "", "xyzrgb", "=", "np", ".", "array", "(", "xyzrgb_list", ")", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "xyzrgb", "[", ":", ",", "0", ":", "3", "]", ")", "\n", "pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "xyzrgb", "[", ":", ",", "3", ":", "6", "]", "/", "255", ")", "\n", "# HPR", "\n", "if", "Is_HPR", ":", "\n", "        ", "xs", ",", "ys", "=", "xyzrgb", "[", ":", ",", "0", "]", ",", "xyzrgb", "[", ":", ",", "1", "]", "\n", "print", "(", "\"x in (\"", ",", "xs", ".", "min", "(", ")", ",", "\",\"", ",", "xs", ".", "max", "(", ")", ",", "\"), y in (\"", ",", "ys", ".", "min", "(", ")", ",", "\",\"", ",", "ys", ".", "max", "(", ")", ",", "\")\"", ")", "\n", "_", ",", "pt_map", "=", "pcd", ".", "hidden_point_removal", "(", "[", "0", ",", "0", ",", "2.5", "]", ",", "100", ")", "\n", "pcd", "=", "pcd", ".", "select_by_index", "(", "pt_map", ")", "\n", "", "return", "pcd", "\n", "\n"]], "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.export_for_md40": [[462, 545], ["numpy.load().item", "np.load().item.pop", "numpy.zeros", "numpy.load().item", "numpy.load().item", "np.load().item.items", "numpy.array", "np.load().item.items", "numpy.zeros_like", "range", "np.load().item.items", "max", "numpy.array", "numpy.concatenate", "list", "numpy.concatenate", "list", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "o3d.geometry.PointCloud.hidden_point_removal", "o3d.geometry.PointCloud.hidden_point_removal", "o3d.geometry.PointCloud.hidden_point_removal", "o3d.geometry.PointCloud.hidden_point_removal", "numpy.unique", "numpy.min", "numpy.max", "matterport_scene_synthesis.get_MER", "numpy.array", "np.array.copy", "len", "numpy.load", "S_dict.values", "len", "numpy.load", "numpy.load", "matterport_scene_synthesis.position_to_xyz", "matterport_scene_synthesis.position_to_xyz", "len", "value[].split", "numpy.loadtxt", "min", "numpy.array", "xs.min", "ys.min", "xs.min", "ys.min", "xs.min", "ys.min", "xs.min", "ys.min", "max", "min", "max", "min", "max", "min", "xs.max", "xs.min", "ys.max", "ys.min"], "function", ["home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.get_MER", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.position_to_xyz", "home.repos.pwc.inspect_result.xuxw98_backtoreality.Matterport3D.matterport_scene_synthesis.position_to_xyz"], ["def", "export_for_md40", "(", "scan_name", ",", "Is_density", "=", "True", ",", "Is_HPR", "=", "False", ",", "Is_floor", "=", "False", ")", ":", "\n", "    ", "positions", "=", "np", ".", "load", "(", "'./augment_random_positions_matterport/'", "+", "scan_name", "+", "'.npy'", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "xyz_oid_list", "=", "[", "]", "\n", "if", "Is_floor", ":", "\n", "        ", "floor_points", "=", "positions", "[", "'floor_points'", "]", "\n", "#floor_points[:, 2] = np.mean(floor_points[:, 2])", "\n", "", "positions", ".", "pop", "(", "'floor_points'", ")", "\n", "# density", "\n", "if", "Is_density", ":", "\n", "        ", "S_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "            ", "obj_xyz", "=", "np", ".", "loadtxt", "(", "value", "[", "2", "]", ",", "delimiter", "=", "','", ")", "[", ":", ",", "0", ":", "3", "]", "\n", "obj_xyz", "[", ":", ",", "[", "1", ",", "2", "]", "]", "=", "obj_xyz", "[", ":", ",", "[", "2", ",", "1", "]", "]", "\n", "ddx", ",", "ddy", ",", "ddz", "=", "max", "(", "obj_xyz", "[", ":", ",", "0", "]", ")", "-", "min", "(", "obj_xyz", "[", ":", ",", "0", "]", ")", ",", "max", "(", "obj_xyz", "[", ":", ",", "1", "]", ")", "-", "min", "(", "obj_xyz", "[", ":", ",", "1", "]", ")", ",", "max", "(", "obj_xyz", "[", ":", ",", "2", "]", ")", "-", "min", "(", "obj_xyz", "[", ":", ",", "2", "]", ")", "\n", "dx", ",", "dy", ",", "dz", "=", "ddx", "*", "value", "[", "1", "]", "[", "0", "]", ",", "ddy", "*", "value", "[", "1", "]", "[", "1", "]", ",", "ddz", "*", "value", "[", "1", "]", "[", "2", "]", "\n", "S_larger", "=", "dx", "*", "dy", "*", "dz", "/", "min", "(", "dx", ",", "dy", ",", "dz", ")", "\n", "S_dict", "[", "key", "]", "=", "S_larger", "\n", "", "S_max", "=", "max", "(", "S_dict", ".", "values", "(", ")", ")", "\n", "# position to points", "\n", "", "instance_bboxes", "=", "np", ".", "zeros", "(", "(", "len", "(", "positions", ")", ",", "8", ")", ")", "\n", "#label_to_nyuid = np.load('map2nyu40.npy', allow_pickle=True).item()", "\n", "label_to_modelnet40id", "=", "np", ".", "load", "(", "\"CONFIG/map2modelnet.npy\"", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", "\n", "obj_prop", "=", "np", ".", "load", "(", "'CONFIG/object40_property.npy'", ",", "allow_pickle", "=", "True", ",", "encoding", "=", "'bytes'", ")", ".", "item", "(", ")", "\n", "for", "key", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "        ", "oid", "=", "key", "\n", "if", "Is_density", ":", "\n", "            ", "obj_xyz", "=", "position_to_xyz", "(", "value", ",", "Is_density", "=", "True", ",", "ratio", "=", "S_dict", "[", "key", "]", "/", "S_max", ")", "\n", "", "else", ":", "\n", "            ", "obj_xyz", "=", "position_to_xyz", "(", "value", ")", "\n", "", "obj_id", "=", "np", ".", "array", "(", "[", "[", "oid", "]", "]", "*", "obj_xyz", ".", "shape", "[", "0", "]", ")", "\n", "obj_xyzoid", "=", "np", ".", "concatenate", "(", "[", "obj_xyz", ",", "obj_id", "]", ",", "axis", "=", "1", ")", "\n", "xyz_oid_list", "+=", "list", "(", "obj_xyzoid", ")", "\n", "", "if", "Is_floor", ":", "\n", "        ", "floor_xyzoid", "=", "np", ".", "concatenate", "(", "[", "floor_points", ",", "np", ".", "array", "(", "[", "[", "0", "]", "]", "*", "floor_points", ".", "shape", "[", "0", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "xyz_oid_list", "+=", "list", "(", "floor_xyzoid", ")", "\n", "", "xyz_oid", "=", "np", ".", "array", "(", "xyz_oid_list", ")", "\n", "if", "Is_HPR", ":", "\n", "        ", "xyz", "=", "xyz_oid", "[", ":", ",", ":", "3", "]", "\n", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "xyz", ")", "\n", "xs", ",", "ys", "=", "xyz", "[", ":", ",", "0", "]", ",", "xyz", "[", ":", ",", "1", "]", "\n", "delta_x", ",", "delta_y", "=", "(", "xs", ".", "max", "(", ")", "-", "xs", ".", "min", "(", ")", ")", "/", "3", ",", "(", "ys", ".", "max", "(", ")", "-", "ys", ".", "min", "(", ")", ")", "/", "3", "\n", "camera1", "=", "[", "xs", ".", "min", "(", ")", "+", "delta_x", ",", "ys", ".", "min", "(", ")", "+", "delta_y", ",", "2", "]", "\n", "camera2", "=", "[", "xs", ".", "min", "(", ")", "+", "2", "*", "delta_x", ",", "ys", ".", "min", "(", ")", "+", "delta_y", ",", "2", "]", "\n", "camera3", "=", "[", "xs", ".", "min", "(", ")", "+", "delta_x", ",", "ys", ".", "min", "(", ")", "+", "2", "*", "delta_y", ",", "2", "]", "\n", "camera4", "=", "[", "xs", ".", "min", "(", ")", "+", "2", "*", "delta_x", ",", "ys", ".", "min", "(", ")", "+", "2", "*", "delta_y", ",", "2", "]", "\n", "_", ",", "pt_map1", "=", "pcd", ".", "hidden_point_removal", "(", "camera1", ",", "100", ")", "\n", "_", ",", "pt_map2", "=", "pcd", ".", "hidden_point_removal", "(", "camera2", ",", "100", ")", "\n", "_", ",", "pt_map3", "=", "pcd", ".", "hidden_point_removal", "(", "camera3", ",", "100", ")", "\n", "_", ",", "pt_map4", "=", "pcd", ".", "hidden_point_removal", "(", "camera4", ",", "100", ")", "\n", "pt_map", "=", "np", ".", "unique", "(", "pt_map1", "+", "pt_map2", "+", "pt_map3", "+", "pt_map4", ")", "\n", "xyz_oid", "=", "xyz_oid", "[", "pt_map", "]", "\n", "", "count_i", "=", "0", "\n", "#np.save('xxw.npy', xyz_oid[:,:3])", "\n", "#sys.exit(0)", "\n", "oid_to_modelnet40id", "=", "{", "}", "\n", "for", "oid", ",", "value", "in", "positions", ".", "items", "(", ")", ":", "\n", "        ", "obj_xyz", "=", "xyz_oid", "[", "xyz_oid", "[", ":", ",", "3", "]", "==", "oid", "]", "[", ":", ",", ":", "3", "]", "\n", "if", "len", "(", "obj_xyz", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "zmin", "=", "np", ".", "min", "(", "obj_xyz", "[", ":", ",", "2", "]", ")", "\n", "zmax", "=", "np", ".", "max", "(", "obj_xyz", "[", ":", ",", "2", "]", ")", "\n", "(", "x_center", ",", "y_center", ")", ",", "(", "x_size", ",", "y_size", ")", ",", "angle", "=", "get_MER", "(", "obj_xyz", ")", "\n", "obj_name", "=", "value", "[", "2", "]", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "sem_label", "=", "MDN_dict", "[", "obj_name", "]", "\n", "oid_to_modelnet40id", "[", "oid", "]", "=", "sem_label", "\n", "#if sem_label in [4,7,6,5,33,14,3,32,10,36]:", "\n", "#    dxavg_xy, dyavg_xy, dzavg_xy, dxavg_yx, dyavg_yx, dzavg_yx = obj_prop[label_to_modelnet40id[id_to_label[oid]]][0:6]", "\n", "#    if (xmax-xmin) < min(dxavg_xy, dxavg_yx)/2 and (ymax-ymin) < min(dyavg_xy, dyavg_yx)/2 and (zmax-zmin) < min(dzavg_xy, dzavg_yx)/2:", "\n", "#        sem_label = -1", "\n", "#        xyz_oid[xyz_oid[:,3] == oid][:,3] = -1", "\n", "bbox", "=", "np", ".", "array", "(", "[", "x_center", ",", "y_center", ",", "(", "zmin", "+", "zmax", ")", "/", "2", ",", "x_size", ",", "y_size", ",", "zmax", "-", "zmin", ",", "angle", ",", "sem_label", "]", ")", "\n", "instance_bboxes", "[", "count_i", ",", ":", "]", "=", "bbox", "\n", "count_i", "+=", "1", "\n", "", "mesh_vertices", "=", "(", "xyz_oid", ".", "copy", "(", ")", ")", "[", ":", ",", ":", "3", "]", "\n", "instance_ids", "=", "xyz_oid", "[", ":", ",", "3", "]", "\n", "semantic_ids", "=", "np", ".", "zeros_like", "(", "instance_ids", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "semantic_ids", ")", ")", ":", "\n", "        ", "if", "instance_ids", "[", "i", "]", "==", "0", ":", "\n", "            ", "semantic_ids", "[", "i", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "semantic_ids", "[", "i", "]", "=", "oid_to_modelnet40id", "[", "instance_ids", "[", "i", "]", "]", "\n", "", "", "return", "mesh_vertices", ",", "semantic_ids", ",", "instance_ids", ",", "instance_bboxes", "\n", "\n"]]}