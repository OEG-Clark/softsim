{"home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.GEM_train.store_grad": [[12, 30], ["grads[].fill_", "pp", "sum", "grads[].copy_", "sum", "param.grad.data.view"], "function", ["None"], ["def", "store_grad", "(", "pp", ",", "grads", ",", "grad_dims", ",", "task_id", ")", ":", "\n", "    ", "\"\"\"\n        This stores parameter gradients of past tasks.\n        pp: parameters\n        grads: gradients\n        grad_dims: list with number of parameters per layers\n        tid: task id\n    \"\"\"", "\n", "# store the gradients", "\n", "tid", "=", "task_id", "### cause babi task are numberd 1 2 .... 20 ", "\n", "grads", "[", ":", ",", "tid", "]", ".", "fill_", "(", "0.0", ")", "\n", "cnt", "=", "0", "\n", "for", "param", "in", "pp", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "beg", "=", "0", "if", "cnt", "==", "0", "else", "sum", "(", "grad_dims", "[", ":", "cnt", "]", ")", "\n", "en", "=", "sum", "(", "grad_dims", "[", ":", "cnt", "+", "1", "]", ")", "\n", "grads", "[", "beg", ":", "en", ",", "tid", "]", ".", "copy_", "(", "param", ".", "grad", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "", "cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.GEM_train.overwrite_grad": [[31, 48], ["pp", "sum", "newgrad[].contiguous().view", "param.grad.data.copy_", "sum", "param.grad.data.size", "newgrad[].contiguous"], "function", ["None"], ["", "", "def", "overwrite_grad", "(", "pp", ",", "newgrad", ",", "grad_dims", ")", ":", "\n", "    ", "\"\"\"\n        This is used to overwrite the gradients with a new gradient\n        vector, whenever violations occur.\n        pp: parameters\n        newgrad: corrected gradient\n        grad_dims: list storing number of parameters at each layer\n    \"\"\"", "\n", "cnt", "=", "0", "\n", "for", "param", "in", "pp", "(", ")", ":", "\n", "        ", "if", "param", ".", "grad", "is", "not", "None", ":", "\n", "            ", "beg", "=", "0", "if", "cnt", "==", "0", "else", "sum", "(", "grad_dims", "[", ":", "cnt", "]", ")", "\n", "en", "=", "sum", "(", "grad_dims", "[", ":", "cnt", "+", "1", "]", ")", "\n", "this_grad", "=", "newgrad", "[", "beg", ":", "en", "]", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "param", ".", "grad", ".", "data", ".", "size", "(", ")", ")", "\n", "param", ".", "grad", ".", "data", ".", "copy_", "(", "this_grad", ")", "\n", "", "cnt", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.GEM_train.is_pos_def": [[49, 51], ["numpy.all", "numpy.linalg.eigvals"], "function", ["None"], ["", "", "def", "is_pos_def", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "all", "(", "np", ".", "linalg", ".", "eigvals", "(", "x", ")", ">", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.GEM_train.project2cone2": [[52, 72], ["memories.cpu().t().double().numpy", "gradient.cpu().contiguous().view().double().numpy", "numpy.dot", "gradient.copy_", "memories.cpu().t().double().numpy.transpose", "numpy.dot", "numpy.eye", "numpy.zeros", "quadprog.solve_qp", "numpy.dot", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "memories.cpu().t().double", "gradient.cpu().contiguous().view().double", "numpy.eye", "numpy.eye", "np.dot.transpose", "torch.Tensor", "torch.Tensor", "torch.Tensor", "memories.cpu().t", "gradient.cpu().contiguous().view", "memories.cpu", "gradient.cpu().contiguous", "gradient.cpu"], "function", ["None"], ["", "def", "project2cone2", "(", "gradient", ",", "memories", ",", "margin", "=", "0.5", ",", "eps", "=", "1e-3", ")", ":", "\n", "    ", "\"\"\"\n        Solves the GEM dual QP described in the paper given a proposed\n        gradient \"gradient\", and a memory of task gradients \"memories\".\n        Overwrites \"gradient\" with the final projected update.\n        input:  gradient, p-vector\n        input:  memories, (t * p)-vector\n        output: x, p-vector\n    \"\"\"", "\n", "memories_np", "=", "memories", ".", "cpu", "(", ")", ".", "t", "(", ")", ".", "double", "(", ")", ".", "numpy", "(", ")", "\n", "gradient_np", "=", "gradient", ".", "cpu", "(", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ".", "double", "(", ")", ".", "numpy", "(", ")", "\n", "t", "=", "memories_np", ".", "shape", "[", "0", "]", "\n", "P", "=", "np", ".", "dot", "(", "memories_np", ",", "memories_np", ".", "transpose", "(", ")", ")", "\n", "P", "=", "0.5", "*", "(", "P", "+", "P", ".", "transpose", "(", ")", ")", "+", "np", ".", "eye", "(", "t", ")", "*", "eps", "\n", "q", "=", "np", ".", "dot", "(", "memories_np", ",", "gradient_np", ")", "*", "-", "1", "\n", "G", "=", "np", ".", "eye", "(", "t", ")", "+", "np", ".", "eye", "(", "t", ")", "*", "0.0000001", "\n", "h", "=", "np", ".", "zeros", "(", "t", ")", "+", "margin", "\n", "v", "=", "quadprog", ".", "solve_qp", "(", "P", ",", "q", ",", "G", ",", "h", ")", "[", "0", "]", "\n", "x", "=", "np", ".", "dot", "(", "v", ",", "memories_np", ")", "+", "gradient_np", "\n", "gradient", ".", "copy_", "(", "torch", ".", "Tensor", "(", "x", ")", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.is_ascii": [[36, 38], ["all", "ord"], "function", ["None"], ["", "def", "is_ascii", "(", "s", ")", ":", "\n", "    ", "return", "all", "(", "ord", "(", "c", ")", "<", "128", "for", "c", "in", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.insertSpace": [[39, 56], ["text.find", "re.match", "re.match", "len", "len", "len", "len"], "function", ["None"], ["", "def", "insertSpace", "(", "token", ",", "text", ")", ":", "\n", "    ", "sidx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "sidx", "=", "text", ".", "find", "(", "token", ",", "sidx", ")", "\n", "if", "sidx", "==", "-", "1", ":", "\n", "            ", "break", "\n", "", "if", "sidx", "+", "1", "<", "len", "(", "text", ")", "and", "re", ".", "match", "(", "'[0-9]'", ",", "text", "[", "sidx", "-", "1", "]", ")", "and", "re", ".", "match", "(", "'[0-9]'", ",", "text", "[", "sidx", "+", "1", "]", ")", ":", "\n", "            ", "sidx", "+=", "1", "\n", "continue", "\n", "", "if", "text", "[", "sidx", "-", "1", "]", "!=", "' '", ":", "\n", "            ", "text", "=", "text", "[", ":", "sidx", "]", "+", "' '", "+", "text", "[", "sidx", ":", "]", "\n", "sidx", "+=", "1", "\n", "", "if", "sidx", "+", "len", "(", "token", ")", "<", "len", "(", "text", ")", "and", "text", "[", "sidx", "+", "len", "(", "token", ")", "]", "!=", "' '", ":", "\n", "            ", "text", "=", "text", "[", ":", "sidx", "+", "1", "]", "+", "' '", "+", "text", "[", "sidx", "+", "1", ":", "]", "\n", "", "sidx", "+=", "1", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.normalize": [[57, 141], ["text.replace.lower", "re.sub", "re.sub", "re.sub", "re.sub", "text.replace.replace", "re.sub", "text.replace.replace", "text.replace.replace", "re.sub", "create_data.insertSpace", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "text.replace.split", "re.findall", "re.findall", "re.sub", "re.sub", "create_data.insertSpace", "len", "text.replace.replace", "re.match", "re.match", "text.replace.find", "text.replace.replace", "text.replace.find", "text.replace.find", "len", "len", "re.sub"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.insertSpace", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.insertSpace"], ["", "def", "normalize", "(", "text", ",", "clean_value", "=", "True", ")", ":", "\n", "# lower case every word", "\n", "    ", "text", "=", "text", ".", "lower", "(", ")", "\n", "\n", "# replace white spaces in front and end", "\n", "text", "=", "re", ".", "sub", "(", "r'^\\s*|\\s*$'", ",", "''", ",", "text", ")", "\n", "\n", "# hotel domain pfb30", "\n", "text", "=", "re", ".", "sub", "(", "r\"b&b\"", ",", "\"bed and breakfast\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r\"b and b\"", ",", "\"bed and breakfast\"", ",", "text", ")", "\n", "\n", "if", "clean_value", ":", "\n", "# normalize phone number", "\n", "        ", "ms", "=", "re", ".", "findall", "(", "'\\(?(\\d{3})\\)?[-.\\s]?(\\d{3})[-.\\s]?(\\d{4,5})'", ",", "text", ")", "\n", "if", "ms", ":", "\n", "            ", "sidx", "=", "0", "\n", "for", "m", "in", "ms", ":", "\n", "                ", "sidx", "=", "text", ".", "find", "(", "m", "[", "0", "]", ",", "sidx", ")", "\n", "if", "text", "[", "sidx", "-", "1", "]", "==", "'('", ":", "\n", "                    ", "sidx", "-=", "1", "\n", "", "eidx", "=", "text", ".", "find", "(", "m", "[", "-", "1", "]", ",", "sidx", ")", "+", "len", "(", "m", "[", "-", "1", "]", ")", "\n", "text", "=", "text", ".", "replace", "(", "text", "[", "sidx", ":", "eidx", "]", ",", "''", ".", "join", "(", "m", ")", ")", "\n", "\n", "# normalize postcode", "\n", "", "", "ms", "=", "re", ".", "findall", "(", "'([a-z]{1}[\\. ]?[a-z]{1}[\\. ]?\\d{1,2}[, ]+\\d{1}[\\. ]?[a-z]{1}[\\. ]?[a-z]{1}|[a-z]{2}\\d{2}[a-z]{2})'", ",", "\n", "text", ")", "\n", "if", "ms", ":", "\n", "            ", "sidx", "=", "0", "\n", "for", "m", "in", "ms", ":", "\n", "                ", "sidx", "=", "text", ".", "find", "(", "m", ",", "sidx", ")", "\n", "eidx", "=", "sidx", "+", "len", "(", "m", ")", "\n", "text", "=", "text", "[", ":", "sidx", "]", "+", "re", ".", "sub", "(", "'[,\\. ]'", ",", "''", ",", "m", ")", "+", "text", "[", "eidx", ":", "]", "\n", "\n", "# weird unicode bug", "\n", "", "", "", "text", "=", "re", ".", "sub", "(", "u\"(\\u2018|\\u2019)\"", ",", "\"'\"", ",", "text", ")", "\n", "\n", "if", "clean_value", ":", "\n", "# replace time and and price", "\n", "        ", "text", "=", "re", ".", "sub", "(", "timepat", ",", "' [value_time] '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "pricepat", ",", "' [value_price] '", ",", "text", ")", "\n", "#text = re.sub(pricepat2, '[value_price]', text)", "\n", "\n", "# replace st.", "\n", "", "text", "=", "text", ".", "replace", "(", "';'", ",", "','", ")", "\n", "text", "=", "re", ".", "sub", "(", "'$\\/'", ",", "''", ",", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "'/'", ",", "' and '", ")", "\n", "\n", "# replace other special characters", "\n", "text", "=", "text", ".", "replace", "(", "'-'", ",", "' '", ")", "\n", "text", "=", "re", ".", "sub", "(", "'[\\\"\\<>@\\(\\)]'", ",", "''", ",", "text", ")", "# remove", "\n", "\n", "# insert white space before and after tokens:", "\n", "for", "token", "in", "[", "'?'", ",", "'.'", ",", "','", ",", "'!'", "]", ":", "\n", "        ", "text", "=", "insertSpace", "(", "token", ",", "text", ")", "\n", "\n", "# insert white space for 's", "\n", "", "text", "=", "insertSpace", "(", "'\\'s'", ",", "text", ")", "\n", "\n", "# replace it's, does't, you'd ... etc", "\n", "text", "=", "re", ".", "sub", "(", "'^\\''", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'\\'$'", ",", "''", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'\\'\\s'", ",", "' '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "'\\s\\''", ",", "' '", ",", "text", ")", "\n", "for", "fromx", ",", "tox", "in", "replacements", ":", "\n", "        ", "text", "=", "' '", "+", "text", "+", "' '", "\n", "text", "=", "text", ".", "replace", "(", "fromx", ",", "tox", ")", "[", "1", ":", "-", "1", "]", "\n", "\n", "# remove multiple spaces", "\n", "", "text", "=", "re", ".", "sub", "(", "' +'", ",", "' '", ",", "text", ")", "\n", "\n", "# concatenate numbers", "\n", "tmp", "=", "text", "\n", "tokens", "=", "text", ".", "split", "(", ")", "\n", "i", "=", "1", "\n", "while", "i", "<", "len", "(", "tokens", ")", ":", "\n", "        ", "if", "re", ".", "match", "(", "u'^\\d+$'", ",", "tokens", "[", "i", "]", ")", "and", "re", ".", "match", "(", "u'\\d+$'", ",", "tokens", "[", "i", "-", "1", "]", ")", ":", "\n", "            ", "tokens", "[", "i", "-", "1", "]", "+=", "tokens", "[", "i", "]", "\n", "del", "tokens", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "i", "+=", "1", "\n", "", "", "text", "=", "' '", ".", "join", "(", "tokens", ")", "\n", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.fixDelex": [[142, 168], ["isinstance", "turn.items", "str", "filename.strip", "[].replace", "[].replace", "[].replace", "[].replace", "[].replace", "[].replace"], "function", ["None"], ["", "def", "fixDelex", "(", "filename", ",", "data", ",", "data2", ",", "idx", ",", "idx_acts", ")", ":", "\n", "    ", "\"\"\"Given system dialogue acts fix automatic delexicalization.\"\"\"", "\n", "try", ":", "\n", "        ", "turn", "=", "data2", "[", "filename", ".", "strip", "(", "'.json'", ")", "]", "[", "str", "(", "idx_acts", ")", "]", "\n", "", "except", ":", "\n", "        ", "return", "data", "\n", "\n", "", "if", "not", "isinstance", "(", "turn", ",", "str", ")", ":", "# and not isinstance(turn, unicode):", "\n", "        ", "for", "k", ",", "act", "in", "turn", ".", "items", "(", ")", ":", "\n", "            ", "if", "'Attraction'", "in", "k", ":", "\n", "                ", "if", "'restaurant_'", "in", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ":", "\n", "                    ", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ".", "replace", "(", "\"restaurant\"", ",", "\"attraction\"", ")", "\n", "", "if", "'hotel_'", "in", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ":", "\n", "                    ", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ".", "replace", "(", "\"hotel\"", ",", "\"attraction\"", ")", "\n", "", "", "if", "'Hotel'", "in", "k", ":", "\n", "                ", "if", "'attraction_'", "in", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ":", "\n", "                    ", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ".", "replace", "(", "\"attraction\"", ",", "\"hotel\"", ")", "\n", "", "if", "'restaurant_'", "in", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ":", "\n", "                    ", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ".", "replace", "(", "\"restaurant\"", ",", "\"hotel\"", ")", "\n", "", "", "if", "'Restaurant'", "in", "k", ":", "\n", "                ", "if", "'attraction_'", "in", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ":", "\n", "                    ", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ".", "replace", "(", "\"attraction\"", ",", "\"restaurant\"", ")", "\n", "", "if", "'hotel_'", "in", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ":", "\n", "                    ", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "data", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", ".", "replace", "(", "\"hotel\"", ",", "\"restaurant\"", ")", "\n", "\n", "", "", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.getDialogueAct": [[170, 192], ["isinstance", "turn.keys", "str", "[].lower", "filename.strip", "acts.append", "[].lower", "a[].lower", "acts.append", "k.split", "k.split", "a[].lower", "create_data.normalize", "a[].lower"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.normalize"], ["", "def", "getDialogueAct", "(", "filename", ",", "data", ",", "data2", ",", "idx", ",", "idx_acts", ")", ":", "\n", "    ", "\"\"\"Given system dialogue acts fix automatic delexicalization.\"\"\"", "\n", "acts", "=", "[", "]", "\n", "try", ":", "\n", "        ", "turn", "=", "data2", "[", "filename", ".", "strip", "(", "'.json'", ")", "]", "[", "str", "(", "idx_acts", ")", "]", "\n", "", "except", ":", "\n", "        ", "return", "acts", "\n", "\n", "", "if", "not", "isinstance", "(", "turn", ",", "str", ")", ":", "# and not isinstance(turn, unicode):", "\n", "        ", "for", "k", "in", "turn", ".", "keys", "(", ")", ":", "\n", "# temp = [k.split('-')[0].lower(), k.split('-')[1].lower()]", "\n", "# for a in turn[k]:", "\n", "#     acts.append(temp + [a[0].lower()])", "\n", "\n", "            ", "if", "k", ".", "split", "(", "'-'", ")", "[", "1", "]", ".", "lower", "(", ")", "==", "'request'", ":", "\n", "                ", "for", "a", "in", "turn", "[", "k", "]", ":", "\n", "                    ", "acts", ".", "append", "(", "a", "[", "0", "]", ".", "lower", "(", ")", ")", "\n", "", "", "elif", "k", ".", "split", "(", "'-'", ")", "[", "1", "]", ".", "lower", "(", ")", "==", "'inform'", ":", "\n", "                ", "for", "a", "in", "turn", "[", "k", "]", ":", "\n", "                    ", "acts", ".", "append", "(", "[", "a", "[", "0", "]", ".", "lower", "(", ")", ",", "normalize", "(", "a", "[", "1", "]", ".", "lower", "(", ")", ",", "False", ")", "]", ")", "\n", "\n", "", "", "", "", "return", "acts", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.get_summary_bstate": [[194, 251], ["sorted", "len", "[].keys", "active_domain.append", "[].keys", "booking.append", "[].keys", "booking.append", "len", "booking.append", "booking.append", "booking.append", "summary_bvalue.append", "booking.append", "summary_bvalue.append", "summary_bvalue.append", "create_data.normalize", "slot.strip().lower", "[].strip().lower", "slot.strip().lower", "create_data.normalize", "slot.strip().lower", "[].strip().lower", "slot.strip", "[].strip", "slot.strip", "slot.strip", "[].strip"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.normalize", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.normalize"], ["", "def", "get_summary_bstate", "(", "bstate", ",", "get_domain", "=", "False", ")", ":", "\n", "    ", "\"\"\"Based on the mturk annotations we form multi-domain belief state\"\"\"", "\n", "domains", "=", "[", "u'taxi'", ",", "u'restaurant'", ",", "u'hospital'", ",", "u'hotel'", ",", "u'attraction'", ",", "u'train'", ",", "u'police'", "]", "\n", "summary_bstate", "=", "[", "]", "\n", "summary_bvalue", "=", "[", "]", "\n", "active_domain", "=", "[", "]", "\n", "for", "domain", "in", "domains", ":", "\n", "        ", "domain_active", "=", "False", "\n", "\n", "booking", "=", "[", "]", "\n", "#print(domain,len(bstate[domain]['book'].keys()))", "\n", "for", "slot", "in", "sorted", "(", "bstate", "[", "domain", "]", "[", "'book'", "]", ".", "keys", "(", ")", ")", ":", "\n", "            ", "if", "slot", "==", "'booked'", ":", "\n", "                ", "if", "len", "(", "bstate", "[", "domain", "]", "[", "'book'", "]", "[", "'booked'", "]", ")", "!=", "0", ":", "\n", "                    ", "booking", ".", "append", "(", "1", ")", "\n", "# summary_bvalue.append(\"book {} {}:{}\".format(domain, slot, \"Yes\"))", "\n", "", "else", ":", "\n", "                    ", "booking", ".", "append", "(", "0", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "bstate", "[", "domain", "]", "[", "'book'", "]", "[", "slot", "]", "!=", "\"\"", ":", "\n", "                    ", "booking", ".", "append", "(", "1", ")", "\n", "summary_bvalue", ".", "append", "(", "[", "\"{}-book {}\"", ".", "format", "(", "domain", ",", "slot", ".", "strip", "(", ")", ".", "lower", "(", ")", ")", ",", "normalize", "(", "bstate", "[", "domain", "]", "[", "'book'", "]", "[", "slot", "]", ".", "strip", "(", ")", ".", "lower", "(", ")", ",", "False", ")", "]", ")", "#([\"book\", domain, slot, bstate[domain]['book'][slot]])", "\n", "", "else", ":", "\n", "                    ", "booking", ".", "append", "(", "0", ")", "\n", "", "", "", "if", "domain", "==", "'train'", ":", "\n", "            ", "if", "'people'", "not", "in", "bstate", "[", "domain", "]", "[", "'book'", "]", ".", "keys", "(", ")", ":", "\n", "                ", "booking", ".", "append", "(", "0", ")", "\n", "", "if", "'ticket'", "not", "in", "bstate", "[", "domain", "]", "[", "'book'", "]", ".", "keys", "(", ")", ":", "\n", "                ", "booking", ".", "append", "(", "0", ")", "\n", "", "", "summary_bstate", "+=", "booking", "\n", "\n", "for", "slot", "in", "bstate", "[", "domain", "]", "[", "'semi'", "]", ":", "\n", "            ", "slot_enc", "=", "[", "0", ",", "0", ",", "0", "]", "# not mentioned, dontcare, filled", "\n", "if", "bstate", "[", "domain", "]", "[", "'semi'", "]", "[", "slot", "]", "==", "'not mentioned'", ":", "\n", "                ", "slot_enc", "[", "0", "]", "=", "1", "\n", "", "elif", "bstate", "[", "domain", "]", "[", "'semi'", "]", "[", "slot", "]", "in", "[", "'dont care'", ",", "'dontcare'", ",", "\"don't care\"", ",", "\"do not care\"", "]", ":", "\n", "                ", "slot_enc", "[", "1", "]", "=", "1", "\n", "summary_bvalue", ".", "append", "(", "[", "\"{}-{}\"", ".", "format", "(", "domain", ",", "slot", ".", "strip", "(", ")", ".", "lower", "(", ")", ")", ",", "\"dontcare\"", "]", ")", "#([\"semi\", domain, slot, \"dontcare\"])", "\n", "", "elif", "bstate", "[", "domain", "]", "[", "'semi'", "]", "[", "slot", "]", ":", "\n", "                ", "summary_bvalue", ".", "append", "(", "[", "\"{}-{}\"", ".", "format", "(", "domain", ",", "slot", ".", "strip", "(", ")", ".", "lower", "(", ")", ")", ",", "normalize", "(", "bstate", "[", "domain", "]", "[", "'semi'", "]", "[", "slot", "]", ".", "strip", "(", ")", ".", "lower", "(", ")", ",", "False", ")", "]", ")", "#([\"semi\", domain, slot, bstate[domain]['semi'][slot]])", "\n", "", "if", "slot_enc", "!=", "[", "0", ",", "0", ",", "0", "]", ":", "\n", "                ", "domain_active", "=", "True", "\n", "", "summary_bstate", "+=", "slot_enc", "\n", "\n", "# quasi domain-tracker", "\n", "", "if", "domain_active", ":", "\n", "            ", "summary_bstate", "+=", "[", "1", "]", "\n", "active_domain", ".", "append", "(", "domain", ")", "\n", "", "else", ":", "\n", "            ", "summary_bstate", "+=", "[", "0", "]", "\n", "\n", "#print(len(summary_bstate))", "\n", "", "", "assert", "len", "(", "summary_bstate", ")", "==", "94", "\n", "if", "get_domain", ":", "\n", "        ", "return", "active_domain", "\n", "", "else", ":", "\n", "        ", "return", "summary_bstate", ",", "summary_bvalue", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.analyze_dialogue": [[253, 289], ["range", "print", "len", "len", "len", "usr_turns.append", "create_data.get_summary_bstate", "str", "sys_turns.append", "[].split", "create_data.is_ascii", "create_data.is_ascii"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.get_summary_bstate", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.is_ascii", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.is_ascii"], ["", "", "def", "analyze_dialogue", "(", "dialogue", ",", "maxlen", ")", ":", "\n", "    ", "\"\"\"Cleaning procedure for all kinds of errors in text and annotation.\"\"\"", "\n", "d", "=", "dialogue", "\n", "# do all the necessary postprocessing", "\n", "if", "len", "(", "d", "[", "'log'", "]", ")", "%", "2", "!=", "0", ":", "\n", "#print path", "\n", "        ", "print", "(", "'odd # of turns'", ")", "\n", "return", "None", "# odd number of turns, wrong dialogue", "\n", "", "d_pp", "=", "{", "}", "\n", "d_pp", "[", "'goal'", "]", "=", "d", "[", "'goal'", "]", "# for now we just copy the goal", "\n", "usr_turns", "=", "[", "]", "\n", "sys_turns", "=", "[", "]", "\n", "# last_bvs = []", "\n", "for", "i", "in", "range", "(", "len", "(", "d", "[", "'log'", "]", ")", ")", ":", "\n", "        ", "if", "len", "(", "d", "[", "'log'", "]", "[", "i", "]", "[", "'text'", "]", ".", "split", "(", ")", ")", ">", "maxlen", ":", "\n", "# print('too long')", "\n", "            ", "return", "None", "# too long sentence, wrong dialogue", "\n", "", "if", "i", "%", "2", "==", "0", ":", "# usr turn", "\n", "            ", "text", "=", "d", "[", "'log'", "]", "[", "i", "]", "[", "'text'", "]", "\n", "if", "not", "is_ascii", "(", "text", ")", ":", "\n", "# print('not ascii')", "\n", "                ", "return", "None", "\n", "", "usr_turns", ".", "append", "(", "d", "[", "'log'", "]", "[", "i", "]", ")", "\n", "", "else", ":", "# sys turn", "\n", "            ", "text", "=", "d", "[", "'log'", "]", "[", "i", "]", "[", "'text'", "]", "\n", "if", "not", "is_ascii", "(", "text", ")", ":", "\n", "# print('not ascii')", "\n", "                ", "return", "None", "\n", "", "belief_summary", ",", "belief_value_summary", "=", "get_summary_bstate", "(", "d", "[", "'log'", "]", "[", "i", "]", "[", "'metadata'", "]", ")", "\n", "d", "[", "'log'", "]", "[", "i", "]", "[", "'belief_summary'", "]", "=", "str", "(", "belief_summary", ")", "\n", "d", "[", "'log'", "]", "[", "i", "]", "[", "'belief_value_summary'", "]", "=", "belief_value_summary", "\n", "sys_turns", ".", "append", "(", "d", "[", "'log'", "]", "[", "i", "]", ")", "\n", "", "", "d_pp", "[", "'usr_log'", "]", "=", "usr_turns", "\n", "d_pp", "[", "'sys_log'", "]", "=", "sys_turns", "\n", "\n", "return", "d_pp", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.get_dial": [[291, 305], ["create_data.analyze_dialogue", "zip", "dial.append"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.analyze_dialogue"], ["", "def", "get_dial", "(", "dialogue", ")", ":", "\n", "    ", "\"\"\"Extract a dialogue from the file\"\"\"", "\n", "dial", "=", "[", "]", "\n", "d_orig", "=", "analyze_dialogue", "(", "dialogue", ",", "MAX_LENGTH", ")", "# max turn len is 50 words", "\n", "if", "d_orig", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "usr", "=", "[", "t", "[", "'text'", "]", "for", "t", "in", "d_orig", "[", "'usr_log'", "]", "]", "\n", "sys", "=", "[", "t", "[", "'text'", "]", "for", "t", "in", "d_orig", "[", "'sys_log'", "]", "]", "\n", "sys_a", "=", "[", "t", "[", "'dialogue_acts'", "]", "for", "t", "in", "d_orig", "[", "'sys_log'", "]", "]", "\n", "bvs", "=", "[", "t", "[", "'belief_value_summary'", "]", "for", "t", "in", "d_orig", "[", "'sys_log'", "]", "]", "\n", "domain", "=", "[", "t", "[", "'domain'", "]", "for", "t", "in", "d_orig", "[", "'usr_log'", "]", "]", "\n", "for", "item", "in", "zip", "(", "usr", ",", "sys", ",", "sys_a", ",", "domain", ",", "bvs", ")", ":", "\n", "        ", "dial", ".", "append", "(", "{", "'usr'", ":", "item", "[", "0", "]", ",", "'sys'", ":", "item", "[", "1", "]", ",", "'sys_a'", ":", "item", "[", "2", "]", ",", "'domain'", ":", "item", "[", "3", "]", ",", "'bvs'", ":", "item", "[", "4", "]", "}", ")", "\n", "", "return", "dial", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.loadData": [[307, 324], ["os.path.exists", "os.makedirs", "os.makedirs", "os.path.exists", "print", "urllib.request.urlopen", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "shutil.copy", "shutil.copy", "shutil.copy", "shutil.copy", "io.BytesIO", "urllib.request.urlopen.read"], "function", ["None"], ["", "def", "loadData", "(", ")", ":", "\n", "    ", "data_url", "=", "\"data/multi-woz/data.json\"", "\n", "dataset_url", "=", "\"https://www.repository.cam.ac.uk/bitstream/handle/1810/280608/MULTIWOZ2.zip?sequence=3&isAllowed=y\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"data\"", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "\"data\"", ")", "\n", "os", ".", "makedirs", "(", "\"data/multi-woz\"", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "data_url", ")", ":", "\n", "        ", "print", "(", "\"Downloading and unzipping the MultiWOZ dataset\"", ")", "\n", "resp", "=", "urllib", ".", "request", ".", "urlopen", "(", "dataset_url", ")", "\n", "zip_ref", "=", "ZipFile", "(", "BytesIO", "(", "resp", ".", "read", "(", ")", ")", ")", "\n", "zip_ref", ".", "extractall", "(", "\"data/multi-woz\"", ")", "\n", "zip_ref", ".", "close", "(", ")", "\n", "shutil", ".", "copy", "(", "'data/multi-woz/MULTIWOZ2 2/data.json'", ",", "'data/multi-woz/'", ")", "\n", "shutil", ".", "copy", "(", "'data/multi-woz/MULTIWOZ2 2/valListFile.json'", ",", "'data/multi-woz/'", ")", "\n", "shutil", ".", "copy", "(", "'data/multi-woz/MULTIWOZ2 2/testListFile.json'", ",", "'data/multi-woz/'", ")", "\n", "shutil", ".", "copy", "(", "'data/multi-woz/MULTIWOZ2 2/dialogue_acts.json'", ",", "'data/multi-woz/'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.getDomain": [[326, 339], ["create_data.get_summary_bstate", "create_data.get_ds_diff", "len", "list", "len", "get_ds_diff.keys", "get_ds_diff.keys"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.get_summary_bstate", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.get_ds_diff"], ["", "", "def", "getDomain", "(", "idx", ",", "log", ",", "domains", ",", "last_domain", ")", ":", "\n", "    ", "if", "idx", "==", "1", ":", "\n", "        ", "active_domains", "=", "get_summary_bstate", "(", "log", "[", "idx", "]", "[", "\"metadata\"", "]", ",", "True", ")", "\n", "crnt_doms", "=", "active_domains", "[", "0", "]", "if", "len", "(", "active_domains", ")", "!=", "0", "else", "domains", "[", "0", "]", "\n", "return", "crnt_doms", "\n", "", "else", ":", "\n", "        ", "ds_diff", "=", "get_ds_diff", "(", "log", "[", "idx", "-", "2", "]", "[", "\"metadata\"", "]", ",", "log", "[", "idx", "]", "[", "\"metadata\"", "]", ")", "\n", "if", "len", "(", "ds_diff", ".", "keys", "(", ")", ")", "==", "0", ":", "# no clues from dialog states", "\n", "            ", "crnt_doms", "=", "last_domain", "\n", "", "else", ":", "\n", "            ", "crnt_doms", "=", "list", "(", "ds_diff", ".", "keys", "(", ")", ")", "\n", "# print(crnt_doms)", "\n", "", "return", "crnt_doms", "[", "0", "]", "# How about multiple domains in one sentence senario ?", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.get_ds_diff": [[341, 352], ["zip", "prev_d.items", "crnt_d.items"], "function", ["None"], ["", "", "def", "get_ds_diff", "(", "prev_d", ",", "crnt_d", ")", ":", "\n", "    ", "diff", "=", "{", "}", "\n", "# Sometimes, metadata is an empty dictionary, bug?", "\n", "if", "not", "prev_d", "or", "not", "crnt_d", ":", "\n", "        ", "return", "diff", "\n", "\n", "", "for", "(", "(", "k1", ",", "v1", ")", ",", "(", "k2", ",", "v2", ")", ")", "in", "zip", "(", "prev_d", ".", "items", "(", ")", ",", "crnt_d", ".", "items", "(", ")", ")", ":", "\n", "        ", "assert", "k1", "==", "k2", "\n", "if", "v1", "!=", "v2", ":", "# updated", "\n", "            ", "diff", "[", "k2", "]", "=", "v2", "\n", "", "", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.createData": [[354, 406], ["create_data.loadData", "open", "json.load", "open", "json.load", "enumerate", "dialogue[].items", "enumerate", "create_data.normalize", "create_data.fixDelex", "domains.append", "create_data.getDomain", "create_data.getDialogueAct"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.loadData", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.normalize", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.fixDelex", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.getDomain", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.getDialogueAct"], ["", "def", "createData", "(", ")", ":", "\n", "# download the data", "\n", "    ", "loadData", "(", ")", "\n", "\n", "# create dictionary of delexicalied values that then we will search against, order matters here!", "\n", "# dic = delexicalize.prepareSlotValuesIndependent()", "\n", "delex_data", "=", "{", "}", "\n", "\n", "fin1", "=", "open", "(", "'data/multi-woz/data.json'", ",", "'r'", ")", "\n", "data", "=", "json", ".", "load", "(", "fin1", ")", "\n", "\n", "fin2", "=", "open", "(", "'data/multi-woz/dialogue_acts.json'", ",", "'r'", ")", "\n", "data2", "=", "json", ".", "load", "(", "fin2", ")", "\n", "\n", "for", "didx", ",", "dialogue_name", "in", "enumerate", "(", "data", ")", ":", "\n", "\n", "        ", "dialogue", "=", "data", "[", "dialogue_name", "]", "\n", "\n", "domains", "=", "[", "]", "\n", "for", "dom_k", ",", "dom_v", "in", "dialogue", "[", "'goal'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "dom_v", "and", "dom_k", "not", "in", "IGNORE_KEYS_IN_GOAL", ":", "# check whether contains some goal entities", "\n", "                ", "domains", ".", "append", "(", "dom_k", ")", "\n", "\n", "", "", "idx_acts", "=", "1", "\n", "last_domain", ",", "last_slot_fill", "=", "\"\"", ",", "[", "]", "\n", "for", "idx", ",", "turn", "in", "enumerate", "(", "dialogue", "[", "'log'", "]", ")", ":", "\n", "# normalization, split and delexicalization of the sentence", "\n", "            ", "origin_text", "=", "normalize", "(", "turn", "[", "'text'", "]", ",", "False", ")", "\n", "# origin_text = delexicalize.markEntity(origin_text, dic)", "\n", "dialogue", "[", "'log'", "]", "[", "idx", "]", "[", "'text'", "]", "=", "origin_text", "\n", "\n", "if", "idx", "%", "2", "==", "1", ":", "# if it's a system turn", "\n", "\n", "                ", "cur_domain", "=", "getDomain", "(", "idx", ",", "dialogue", "[", "'log'", "]", ",", "domains", ",", "last_domain", ")", "\n", "last_domain", "=", "[", "cur_domain", "]", "\n", "\n", "dialogue", "[", "'log'", "]", "[", "idx", "-", "1", "]", "[", "'domain'", "]", "=", "cur_domain", "\n", "dialogue", "[", "'log'", "]", "[", "idx", "]", "[", "'dialogue_acts'", "]", "=", "getDialogueAct", "(", "dialogue_name", ",", "dialogue", ",", "data2", ",", "idx", ",", "idx_acts", ")", "\n", "idx_acts", "+=", "1", "\n", "\n", "# FIXING delexicalization:", "\n", "", "dialogue", "=", "fixDelex", "(", "dialogue_name", ",", "dialogue", ",", "data2", ",", "idx", ",", "idx_acts", ")", "\n", "\n", "", "delex_data", "[", "dialogue_name", "]", "=", "dialogue", "\n", "\n", "# if didx > 10:", "\n", "#     break", "\n", "\n", "# with open('data/multi-woz/woz2like_data.json', 'w') as outfile:", "\n", "#     json.dump(delex_data, outfile)", "\n", "\n", "", "return", "delex_data", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.buildDelexDict": [[408, 419], ["difflib.SequenceMatcher", "difflib.SequenceMatcher.get_matching_blocks", "enumerate", "delex_sent.split", "origin_sent.split", "len", "origin_sent.split"], "function", ["None"], ["", "def", "buildDelexDict", "(", "origin_sent", ",", "delex_sent", ")", ":", "\n", "    ", "dictionary", "=", "{", "}", "\n", "s", "=", "difflib", ".", "SequenceMatcher", "(", "None", ",", "delex_sent", ".", "split", "(", ")", ",", "origin_sent", ".", "split", "(", ")", ")", "\n", "bs", "=", "s", ".", "get_matching_blocks", "(", ")", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "bs", ")", ":", "\n", "        ", "if", "i", "<", "len", "(", "bs", ")", "-", "2", ":", "\n", "            ", "a_start", "=", "b", ".", "a", "+", "b", ".", "size", "\n", "b_start", "=", "b", ".", "b", "+", "b", ".", "size", "\n", "b_end", "=", "bs", "[", "i", "+", "1", "]", ".", "b", "\n", "dictionary", "[", "a_start", "]", "=", "\" \"", ".", "join", "(", "origin_sent", ".", "split", "(", ")", "[", "b_start", ":", "b_end", "]", ")", "\n", "", "", "return", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.divideData": [[421, 499], ["open", "open.close", "open", "open.close", "open", "collections.OrderedDict", "collections.OrderedDict", "print", "testListFile.append", "valListFile.append", "dial_item[].items", "create_data.get_dial", "open", "json.dump", "open", "json.dump", "open", "json.dump", "list", "enumerate", "domains.append", "set", "dialogue[].append", "test_dials.append", "val_dials.append", "open.write", "train_dials.append"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.get_dial"], ["", "def", "divideData", "(", "data", ")", ":", "\n", "    ", "\"\"\"Given test and validation sets, divide\n    the data for three different sets\"\"\"", "\n", "testListFile", "=", "[", "]", "\n", "fin", "=", "open", "(", "'data/multi-woz/testListFile.json'", ",", "'r'", ")", "\n", "for", "line", "in", "fin", ":", "\n", "        ", "testListFile", ".", "append", "(", "line", "[", ":", "-", "1", "]", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "\n", "valListFile", "=", "[", "]", "\n", "fin", "=", "open", "(", "'data/multi-woz/valListFile.json'", ",", "'r'", ")", "\n", "for", "line", "in", "fin", ":", "\n", "        ", "valListFile", ".", "append", "(", "line", "[", ":", "-", "1", "]", ")", "\n", "", "fin", ".", "close", "(", ")", "\n", "\n", "trainListFile", "=", "open", "(", "'data/trainListFile'", ",", "'w'", ")", "\n", "\n", "test_dials", "=", "[", "]", "\n", "val_dials", "=", "[", "]", "\n", "train_dials", "=", "[", "]", "\n", "\n", "# dictionaries", "\n", "word_freqs_usr", "=", "OrderedDict", "(", ")", "\n", "word_freqs_sys", "=", "OrderedDict", "(", ")", "\n", "\n", "count_train", ",", "count_val", ",", "count_test", "=", "0", ",", "0", ",", "0", "\n", "\n", "for", "dialogue_name", "in", "data", ":", "\n", "# print dialogue_name", "\n", "        ", "dial_item", "=", "data", "[", "dialogue_name", "]", "\n", "domains", "=", "[", "]", "\n", "for", "dom_k", ",", "dom_v", "in", "dial_item", "[", "'goal'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "dom_v", "and", "dom_k", "not", "in", "IGNORE_KEYS_IN_GOAL", ":", "# check whether contains some goal entities", "\n", "                ", "domains", ".", "append", "(", "dom_k", ")", "\n", "\n", "", "", "dial", "=", "get_dial", "(", "data", "[", "dialogue_name", "]", ")", "\n", "if", "dial", ":", "\n", "            ", "dialogue", "=", "{", "}", "\n", "dialogue", "[", "'dialogue_idx'", "]", "=", "dialogue_name", "\n", "dialogue", "[", "'domains'", "]", "=", "list", "(", "set", "(", "domains", ")", ")", "#list(set([d['domain'] for d in dial]))", "\n", "last_bs", "=", "[", "]", "\n", "dialogue", "[", "'dialogue'", "]", "=", "[", "]", "\n", "\n", "for", "turn_i", ",", "turn", "in", "enumerate", "(", "dial", ")", ":", "\n", "# usr, usr_o, sys, sys_o, sys_a, domain", "\n", "                ", "turn_dialog", "=", "{", "}", "\n", "turn_dialog", "[", "'system_transcript'", "]", "=", "dial", "[", "turn_i", "-", "1", "]", "[", "'sys'", "]", "if", "turn_i", ">", "0", "else", "\"\"", "\n", "turn_dialog", "[", "'turn_idx'", "]", "=", "turn_i", "\n", "turn_dialog", "[", "'belief_state'", "]", "=", "[", "{", "\"slots\"", ":", "[", "s", "]", ",", "\"act\"", ":", "\"inform\"", "}", "for", "s", "in", "turn", "[", "'bvs'", "]", "]", "\n", "turn_dialog", "[", "'turn_label'", "]", "=", "[", "bs", "[", "\"slots\"", "]", "[", "0", "]", "for", "bs", "in", "turn_dialog", "[", "'belief_state'", "]", "if", "bs", "not", "in", "last_bs", "]", "\n", "turn_dialog", "[", "'transcript'", "]", "=", "turn", "[", "'usr'", "]", "\n", "turn_dialog", "[", "'system_acts'", "]", "=", "dial", "[", "turn_i", "-", "1", "]", "[", "'sys_a'", "]", "if", "turn_i", ">", "0", "else", "[", "]", "\n", "turn_dialog", "[", "'domain'", "]", "=", "turn", "[", "'domain'", "]", "\n", "last_bs", "=", "turn_dialog", "[", "'belief_state'", "]", "\n", "dialogue", "[", "'dialogue'", "]", ".", "append", "(", "turn_dialog", ")", "\n", "\n", "", "if", "dialogue_name", "in", "testListFile", ":", "\n", "                ", "test_dials", ".", "append", "(", "dialogue", ")", "\n", "count_test", "+=", "1", "\n", "", "elif", "dialogue_name", "in", "valListFile", ":", "\n", "                ", "val_dials", ".", "append", "(", "dialogue", ")", "\n", "count_val", "+=", "1", "\n", "", "else", ":", "\n", "                ", "trainListFile", ".", "write", "(", "dialogue_name", "+", "'\\n'", ")", "\n", "train_dials", ".", "append", "(", "dialogue", ")", "\n", "count_train", "+=", "1", "\n", "\n", "", "", "", "print", "(", "\"# of dialogues: Train {}, Val {}, Test {}\"", ".", "format", "(", "count_train", ",", "count_val", ",", "count_test", ")", ")", "\n", "\n", "# save all dialogues", "\n", "with", "open", "(", "'data/dev_dials.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "val_dials", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "with", "open", "(", "'data/test_dials.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "test_dials", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n", "", "with", "open", "(", "'data/train_dials.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "train_dials", ",", "f", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.main": [[503, 508], ["print", "create_data.createData", "print", "create_data.divideData"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.createData", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.divideData"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "'Create WOZ-like dialogues. Get yourself a coffee, this might take a while.'", ")", "\n", "delex_data", "=", "createData", "(", ")", "\n", "print", "(", "'Divide dialogues...'", ")", "\n", "divideData", "(", "delex_data", ")", "\n", "# print('Building dictionaries')", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.measures.wer": [[15, 38], ["numpy.zeros().reshape", "numpy.zeros().reshape", "range", "range", "range", "range", "numpy.zeros", "numpy.zeros", "len", "len", "float", "len", "len", "len", "len", "len", "min", "len", "len", "len", "len"], "function", ["None"], ["def", "wer", "(", "r", ",", "h", ")", ":", "\n", "    ", "\"\"\"\n    This is a function that calculate the word error rate in ASR.\n    You can use it like this: wer(\"what is it\".split(), \"what is\".split()) \n    \"\"\"", "\n", "#build the matrix", "\n", "d", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "r", ")", "+", "1", ")", "*", "(", "len", "(", "h", ")", "+", "1", ")", ",", "dtype", "=", "numpy", ".", "uint8", ")", ".", "reshape", "(", "(", "len", "(", "r", ")", "+", "1", ",", "len", "(", "h", ")", "+", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "r", ")", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "h", ")", "+", "1", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "d", "[", "0", "]", "[", "j", "]", "=", "j", "\n", "elif", "j", "==", "0", ":", "d", "[", "i", "]", "[", "0", "]", "=", "i", "\n", "", "", "for", "i", "in", "range", "(", "1", ",", "len", "(", "r", ")", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "len", "(", "h", ")", "+", "1", ")", ":", "\n", "            ", "if", "r", "[", "i", "-", "1", "]", "==", "h", "[", "j", "-", "1", "]", ":", "\n", "                ", "d", "[", "i", "]", "[", "j", "]", "=", "d", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "substitute", "=", "d", "[", "i", "-", "1", "]", "[", "j", "-", "1", "]", "+", "1", "\n", "insert", "=", "d", "[", "i", "]", "[", "j", "-", "1", "]", "+", "1", "\n", "delete", "=", "d", "[", "i", "-", "1", "]", "[", "j", "]", "+", "1", "\n", "d", "[", "i", "]", "[", "j", "]", "=", "min", "(", "substitute", ",", "insert", ",", "delete", ")", "\n", "", "", "", "result", "=", "float", "(", "d", "[", "len", "(", "r", ")", "]", "[", "len", "(", "h", ")", "]", ")", "/", "len", "(", "r", ")", "*", "100", "\n", "# result = str(\"%.2f\" % result) + \"%\"", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.measures.moses_multi_bleu": [[57, 117], ["tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.flush", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.flush", "tempfile.NamedTemporaryFile.close", "tempfile.NamedTemporaryFile.close", "numpy.size", "numpy.float32", "six.moves.urllib.request.urlretrieve", "os.chmod", "open", "print", "os.path.dirname", "os.path.abspath", "os.path.join", "subprocess.check_output", "bleu_out.decode.decode", "re.search().group", "float", "os.path.realpath", "os.path.join", "re.search", "print", "print", "numpy.float32"], "function", ["None"], ["def", "moses_multi_bleu", "(", "hypotheses", ",", "references", ",", "lowercase", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate the bleu score for hypotheses and references\n    using the MOSES ulti-bleu.perl script.\n    Args:\n    hypotheses: A numpy array of strings where each string is a single example.\n    references: A numpy array of strings where each string is a single example.\n    lowercase: If true, pass the \"-lc\" flag to the multi-bleu script\n    Returns:\n    The BLEU score as a float32 value.\n    \"\"\"", "\n", "\n", "if", "np", ".", "size", "(", "hypotheses", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "float32", "(", "0.0", ")", "\n", "\n", "\n", "# Get MOSES multi-bleu script", "\n", "", "try", ":", "\n", "        ", "multi_bleu_path", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "\"https://raw.githubusercontent.com/moses-smt/mosesdecoder/\"", "\n", "\"master/scripts/generic/multi-bleu.perl\"", ")", "\n", "os", ".", "chmod", "(", "multi_bleu_path", ",", "0o755", ")", "\n", "", "except", ":", "#pylint: disable=W0702", "\n", "        ", "print", "(", "\"Unable to fetch multi-bleu.perl script, using local.\"", ")", "\n", "metrics_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", "\n", "bin_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "metrics_dir", ",", "\"..\"", ",", "\"..\"", ",", "\"bin\"", ")", ")", "\n", "multi_bleu_path", "=", "os", ".", "path", ".", "join", "(", "bin_dir", ",", "\"tools/multi-bleu.perl\"", ")", "\n", "\n", "\n", "# Dump hypotheses and references to tempfiles", "\n", "", "hypothesis_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "hypothesis_file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "hypotheses", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "hypothesis_file", ".", "write", "(", "b\"\\n\"", ")", "\n", "hypothesis_file", ".", "flush", "(", ")", "\n", "reference_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "reference_file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "references", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "reference_file", ".", "write", "(", "b\"\\n\"", ")", "\n", "reference_file", ".", "flush", "(", ")", "\n", "\n", "\n", "# Calculate BLEU using multi-bleu script", "\n", "with", "open", "(", "hypothesis_file", ".", "name", ",", "\"r\"", ")", "as", "read_pred", ":", "\n", "        ", "bleu_cmd", "=", "[", "multi_bleu_path", "]", "\n", "if", "lowercase", ":", "\n", "            ", "bleu_cmd", "+=", "[", "\"-lc\"", "]", "\n", "", "bleu_cmd", "+=", "[", "reference_file", ".", "name", "]", "\n", "try", ":", "\n", "            ", "bleu_out", "=", "subprocess", ".", "check_output", "(", "bleu_cmd", ",", "stdin", "=", "read_pred", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "bleu_out", "=", "bleu_out", ".", "decode", "(", "\"utf-8\"", ")", "\n", "bleu_score", "=", "re", ".", "search", "(", "r\"BLEU = (.+?),\"", ",", "bleu_out", ")", ".", "group", "(", "1", ")", "\n", "bleu_score", "=", "float", "(", "bleu_score", ")", "\n", "", "except", "subprocess", ".", "CalledProcessError", "as", "error", ":", "\n", "            ", "if", "error", ".", "output", "is", "not", "None", ":", "\n", "                ", "print", "(", "\"multi-bleu.perl script returned non-zero exit code\"", ")", "\n", "print", "(", "error", ".", "output", ")", "\n", "bleu_score", "=", "np", ".", "float32", "(", "0.0", ")", "\n", "\n", "# Close temp files", "\n", "", "", "", "hypothesis_file", ".", "close", "(", ")", "\n", "reference_file", ".", "close", "(", ")", "\n", "return", "bleu_score", "", "", ""]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.Lang.__init__": [[28, 33], ["len", "dict", "utils_multiWOZ_DST.Lang.index2word.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "word2index", "=", "{", "}", "\n", "self", ".", "index2word", "=", "{", "PAD_token", ":", "\"PAD\"", ",", "SOS_token", ":", "\"SOS\"", ",", "EOS_token", ":", "\"EOS\"", ",", "UNK_token", ":", "'UNK'", "}", "\n", "self", ".", "n_words", "=", "len", "(", "self", ".", "index2word", ")", "# Count default tokens", "\n", "self", ".", "word2index", "=", "dict", "(", "[", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "self", ".", "index2word", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.Lang.index_words": [[34, 52], ["sent.split", "utils_multiWOZ_DST.Lang.index_word", "slot.split", "utils_multiWOZ_DST.Lang.index_word", "s.split", "sent.items", "utils_multiWOZ_DST.Lang.index_word", "slot.split", "utils_multiWOZ_DST.Lang.index_word", "s.split", "value.split", "utils_multiWOZ_DST.Lang.index_word", "utils_multiWOZ_DST.Lang.index_word"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_word", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_word", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_word", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_word", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_word", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_word"], ["", "def", "index_words", "(", "self", ",", "sent", ",", "type", ")", ":", "\n", "        ", "if", "type", "==", "'utter'", ":", "\n", "            ", "for", "word", "in", "sent", ".", "split", "(", "\" \"", ")", ":", "\n", "                ", "self", ".", "index_word", "(", "word", ")", "\n", "", "", "elif", "type", "==", "'slot'", ":", "\n", "            ", "for", "slot", "in", "sent", ":", "\n", "                ", "d", ",", "s", "=", "slot", ".", "split", "(", "\"-\"", ")", "\n", "self", ".", "index_word", "(", "d", ")", "\n", "for", "ss", "in", "s", ".", "split", "(", "\" \"", ")", ":", "\n", "                    ", "self", ".", "index_word", "(", "ss", ")", "\n", "", "", "", "elif", "type", "==", "'belief'", ":", "\n", "            ", "for", "slot", ",", "value", "in", "sent", ".", "items", "(", ")", ":", "\n", "                ", "d", ",", "s", "=", "slot", ".", "split", "(", "\"-\"", ")", "\n", "self", ".", "index_word", "(", "d", ")", "\n", "for", "ss", "in", "s", ".", "split", "(", "\" \"", ")", ":", "\n", "                    ", "self", ".", "index_word", "(", "ss", ")", "\n", "", "for", "v", "in", "value", ".", "split", "(", "\" \"", ")", ":", "\n", "                    ", "self", ".", "index_word", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.Lang.index_word": [[53, 58], ["None"], "methods", ["None"], ["", "", "", "", "def", "index_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "word2index", ":", "\n", "            ", "self", ".", "word2index", "[", "word", "]", "=", "self", ".", "n_words", "\n", "self", ".", "index2word", "[", "self", ".", "n_words", "]", "=", "word", "\n", "self", ".", "n_words", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.Dataset.__init__": [[62, 77], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_info", ",", "src_word2id", ",", "trg_word2id", ",", "sequicity", ",", "mem_word2id", ")", ":", "\n", "        ", "\"\"\"Reads source and target sequences from txt files.\"\"\"", "\n", "self", ".", "ID", "=", "data_info", "[", "'ID'", "]", "\n", "self", ".", "turn_domain", "=", "data_info", "[", "'turn_domain'", "]", "\n", "self", ".", "turn_id", "=", "data_info", "[", "'turn_id'", "]", "\n", "self", ".", "dialog_history", "=", "data_info", "[", "'dialog_history'", "]", "\n", "self", ".", "turn_belief", "=", "data_info", "[", "'turn_belief'", "]", "\n", "self", ".", "gating_label", "=", "data_info", "[", "'gating_label'", "]", "\n", "self", ".", "turn_uttr", "=", "data_info", "[", "'turn_uttr'", "]", "\n", "self", ".", "generate_y", "=", "data_info", "[", "\"generate_y\"", "]", "\n", "self", ".", "sequicity", "=", "sequicity", "\n", "self", ".", "num_total_seqs", "=", "len", "(", "self", ".", "dialog_history", ")", "\n", "self", ".", "src_word2id", "=", "src_word2id", "\n", "self", ".", "trg_word2id", "=", "trg_word2id", "\n", "self", ".", "mem_word2id", "=", "mem_word2id", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.Dataset.__getitem__": [[78, 104], ["utils_multiWOZ_DST.Dataset.preprocess_domain", "utils_multiWOZ_DST.Dataset.preprocess_slot", "utils_multiWOZ_DST.Dataset.preprocess"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.Dataset.preprocess_domain", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.Dataset.preprocess_slot", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Dataset.preprocess"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Returns one data pair (source and target).\"\"\"", "\n", "ID", "=", "self", ".", "ID", "[", "index", "]", "\n", "turn_id", "=", "self", ".", "turn_id", "[", "index", "]", "\n", "turn_belief", "=", "self", ".", "turn_belief", "[", "index", "]", "\n", "gating_label", "=", "self", ".", "gating_label", "[", "index", "]", "\n", "turn_uttr", "=", "self", ".", "turn_uttr", "[", "index", "]", "\n", "turn_domain", "=", "self", ".", "preprocess_domain", "(", "self", ".", "turn_domain", "[", "index", "]", ")", "\n", "generate_y", "=", "self", ".", "generate_y", "[", "index", "]", "\n", "generate_y", "=", "self", ".", "preprocess_slot", "(", "generate_y", ",", "self", ".", "trg_word2id", ")", "\n", "context", "=", "self", ".", "dialog_history", "[", "index", "]", "\n", "context", "=", "self", ".", "preprocess", "(", "context", ",", "self", ".", "src_word2id", ")", "\n", "context_plain", "=", "self", ".", "dialog_history", "[", "index", "]", "\n", "\n", "item_info", "=", "{", "\n", "\"ID\"", ":", "ID", ",", "\n", "\"turn_id\"", ":", "turn_id", ",", "\n", "\"turn_belief\"", ":", "turn_belief", ",", "\n", "\"gating_label\"", ":", "gating_label", ",", "\n", "\"context\"", ":", "context", ",", "\n", "\"context_plain\"", ":", "context_plain", ",", "\n", "\"turn_uttr_plain\"", ":", "turn_uttr", ",", "\n", "\"turn_domain\"", ":", "turn_domain", ",", "\n", "\"generate_y\"", ":", "generate_y", ",", "\n", "}", "\n", "return", "item_info", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.Dataset.__len__": [[105, 107], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_total_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.Dataset.preprocess": [[108, 113], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "sequence.split"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "sequence", ",", "word2idx", ")", ":", "\n", "        ", "\"\"\"Converts words to ids.\"\"\"", "\n", "story", "=", "[", "word2idx", "[", "word", "]", "if", "word", "in", "word2idx", "else", "UNK_token", "for", "word", "in", "sequence", ".", "split", "(", ")", "]", "\n", "story", "=", "torch", ".", "Tensor", "(", "story", ")", "\n", "return", "story", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.Dataset.preprocess_slot": [[114, 122], ["story.append", "value.split"], "methods", ["None"], ["", "def", "preprocess_slot", "(", "self", ",", "sequence", ",", "word2idx", ")", ":", "\n", "        ", "\"\"\"Converts words to ids.\"\"\"", "\n", "story", "=", "[", "]", "\n", "for", "value", "in", "sequence", ":", "\n", "            ", "v", "=", "[", "word2idx", "[", "word", "]", "if", "word", "in", "word2idx", "else", "UNK_token", "for", "word", "in", "value", ".", "split", "(", ")", "]", "+", "[", "EOS_token", "]", "\n", "story", ".", "append", "(", "v", ")", "\n", "# story = torch.Tensor(story)", "\n", "", "return", "story", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.Dataset.preprocess_memory": [[123, 135], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "s.replace().strip.replace().strip.replace().strip", "enumerate", "v.split", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "torch.Tensor.append", "s.replace().strip.replace().strip.replace"], "methods", ["None"], ["", "def", "preprocess_memory", "(", "self", ",", "sequence", ",", "word2idx", ")", ":", "\n", "        ", "\"\"\"Converts words to ids.\"\"\"", "\n", "story", "=", "[", "]", "\n", "for", "value", "in", "sequence", ":", "\n", "            ", "d", ",", "s", ",", "v", "=", "value", "\n", "s", "=", "s", ".", "replace", "(", "\"book\"", ",", "\"\"", ")", ".", "strip", "(", ")", "\n", "# separate each word in value to different memory slot", "\n", "for", "wi", ",", "vw", "in", "enumerate", "(", "v", ".", "split", "(", ")", ")", ":", "\n", "                ", "idx", "=", "[", "word2idx", "[", "word", "]", "if", "word", "in", "word2idx", "else", "UNK_token", "for", "word", "in", "[", "d", ",", "s", ",", "\"t{}\"", ".", "format", "(", "wi", ")", ",", "vw", "]", "]", "\n", "story", ".", "append", "(", "idx", ")", "\n", "", "", "story", "=", "torch", ".", "Tensor", "(", "story", ")", "\n", "return", "story", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.Dataset.preprocess_domain": [[136, 139], ["None"], "methods", ["None"], ["", "def", "preprocess_domain", "(", "self", ",", "turn_domain", ")", ":", "\n", "        ", "domains", "=", "{", "\"attraction\"", ":", "0", ",", "\"restaurant\"", ":", "1", ",", "\"taxi\"", ":", "2", ",", "\"train\"", ":", "3", ",", "\"hotel\"", ":", "4", ",", "\"hospital\"", ":", "5", ",", "\"bus\"", ":", "6", ",", "\"police\"", ":", "7", "}", "\n", "return", "domains", "[", "turn_domain", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.ImbalancedDatasetSampler.__init__": [[472, 496], ["torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "torch.DoubleTensor", "list", "len", "utils_multiWOZ_DST.ImbalancedDatasetSampler._get_label", "range", "len", "utils_multiWOZ_DST.ImbalancedDatasetSampler._get_label"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.ImbalancedDatasetSampler._get_label", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.ImbalancedDatasetSampler._get_label"], ["def", "__init__", "(", "self", ",", "dataset", ",", "indices", "=", "None", ",", "num_samples", "=", "None", ")", ":", "\n", "\n", "# if indices is not provided, ", "\n", "# all elements in the dataset will be considered", "\n", "        ", "self", ".", "indices", "=", "list", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", "if", "indices", "is", "None", "else", "indices", "\n", "\n", "# if num_samples is not provided, ", "\n", "# draw `len(indices)` samples in each iteration", "\n", "self", ".", "num_samples", "=", "len", "(", "self", ".", "indices", ")", "if", "num_samples", "is", "None", "else", "num_samples", "\n", "\n", "# distribution of classes in the dataset ", "\n", "label_to_count", "=", "{", "}", "\n", "for", "idx", "in", "self", ".", "indices", ":", "\n", "            ", "label", "=", "self", ".", "_get_label", "(", "dataset", ",", "idx", ")", "\n", "if", "label", "in", "label_to_count", ":", "\n", "                ", "label_to_count", "[", "label", "]", "+=", "1", "\n", "", "else", ":", "\n", "                ", "label_to_count", "[", "label", "]", "=", "1", "\n", "\n", "# weight for each sample", "\n", "", "", "weights", "=", "[", "1.0", "/", "label_to_count", "[", "self", ".", "_get_label", "(", "dataset", ",", "idx", ")", "]", "for", "idx", "in", "self", ".", "indices", "]", "\n", "self", ".", "weights", "=", "torch", ".", "DoubleTensor", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.ImbalancedDatasetSampler._get_label": [[497, 499], ["None"], "methods", ["None"], ["", "def", "_get_label", "(", "self", ",", "dataset", ",", "idx", ")", ":", "\n", "        ", "return", "dataset", ".", "turn_domain", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.ImbalancedDatasetSampler.__iter__": [[500, 502], ["torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "indices", "[", "i", "]", "for", "i", "in", "torch", ".", "multinomial", "(", "self", ".", "weights", ",", "self", ".", "num_samples", ",", "replacement", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.ImbalancedDatasetSampler.__len__": [[503, 505], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "", "", ""]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.collate_fn": [[141, 211], ["torch.sort", "data[].keys", "utils_multiWOZ_DST.collate_fn.merge"], "function", ["None"], ["", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "    ", "def", "merge", "(", "sequences", ")", ":", "\n", "        ", "'''\n        merge from batch * sent_len to batch * max_len \n        '''", "\n", "lengths", "=", "[", "len", "(", "seq", ")", "for", "seq", "in", "sequences", "]", "\n", "max_len", "=", "1", "if", "max", "(", "lengths", ")", "==", "0", "else", "max", "(", "lengths", ")", "\n", "padded_seqs", "=", "torch", ".", "ones", "(", "len", "(", "sequences", ")", ",", "max_len", ")", ".", "long", "(", ")", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "sequences", ")", ":", "\n", "            ", "end", "=", "lengths", "[", "i", "]", "\n", "padded_seqs", "[", "i", ",", ":", "end", "]", "=", "seq", "[", ":", "end", "]", "\n", "", "padded_seqs", "=", "padded_seqs", ".", "detach", "(", ")", "#torch.tensor(padded_seqs)", "\n", "return", "padded_seqs", ",", "lengths", "\n", "\n", "", "def", "merge_multi_response", "(", "sequences", ")", ":", "\n", "        ", "'''\n        merge from batch * nb_slot * slot_len to batch * nb_slot * max_slot_len\n        '''", "\n", "lengths", "=", "[", "]", "\n", "for", "bsz_seq", "in", "sequences", ":", "\n", "            ", "length", "=", "[", "len", "(", "v", ")", "for", "v", "in", "bsz_seq", "]", "\n", "lengths", ".", "append", "(", "length", ")", "\n", "", "max_len", "=", "max", "(", "[", "max", "(", "l", ")", "for", "l", "in", "lengths", "]", ")", "\n", "padded_seqs", "=", "[", "]", "\n", "for", "bsz_seq", "in", "sequences", ":", "\n", "            ", "pad_seq", "=", "[", "]", "\n", "for", "v", "in", "bsz_seq", ":", "\n", "                ", "v", "=", "v", "+", "[", "PAD_token", "]", "*", "(", "max_len", "-", "len", "(", "v", ")", ")", "\n", "pad_seq", ".", "append", "(", "v", ")", "\n", "", "padded_seqs", ".", "append", "(", "pad_seq", ")", "\n", "", "padded_seqs", "=", "torch", ".", "tensor", "(", "padded_seqs", ")", "\n", "lengths", "=", "torch", ".", "tensor", "(", "lengths", ")", "\n", "return", "padded_seqs", ",", "lengths", "\n", "\n", "", "def", "merge_memory", "(", "sequences", ")", ":", "\n", "        ", "lengths", "=", "[", "len", "(", "seq", ")", "for", "seq", "in", "sequences", "]", "\n", "max_len", "=", "1", "if", "max", "(", "lengths", ")", "==", "0", "else", "max", "(", "lengths", ")", "# avoid the empty belief state issue", "\n", "padded_seqs", "=", "torch", ".", "ones", "(", "len", "(", "sequences", ")", ",", "max_len", ",", "4", ")", ".", "long", "(", ")", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "sequences", ")", ":", "\n", "            ", "end", "=", "lengths", "[", "i", "]", "\n", "if", "len", "(", "seq", ")", "!=", "0", ":", "\n", "                ", "padded_seqs", "[", "i", ",", ":", "end", ",", ":", "]", "=", "seq", "[", ":", "end", "]", "\n", "", "", "return", "padded_seqs", ",", "lengths", "\n", "\n", "# sort a list by sequence length (descending order) to use pack_padded_sequence", "\n", "", "data", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "'context'", "]", ")", ",", "reverse", "=", "True", ")", "\n", "item_info", "=", "{", "}", "\n", "for", "key", "in", "data", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "item_info", "[", "key", "]", "=", "[", "d", "[", "key", "]", "for", "d", "in", "data", "]", "\n", "\n", "# merge sequences", "\n", "", "src_seqs", ",", "src_lengths", "=", "merge", "(", "item_info", "[", "'context'", "]", ")", "\n", "y_seqs", ",", "y_lengths", "=", "merge_multi_response", "(", "item_info", "[", "\"generate_y\"", "]", ")", "\n", "gating_label", "=", "torch", ".", "tensor", "(", "item_info", "[", "\"gating_label\"", "]", ")", "\n", "turn_domain", "=", "torch", ".", "tensor", "(", "item_info", "[", "\"turn_domain\"", "]", ")", "\n", "\n", "if", "USE_CUDA", ":", "\n", "        ", "src_seqs", "=", "src_seqs", ".", "cuda", "(", ")", "\n", "gating_label", "=", "gating_label", ".", "cuda", "(", ")", "\n", "turn_domain", "=", "turn_domain", ".", "cuda", "(", ")", "\n", "y_seqs", "=", "y_seqs", ".", "cuda", "(", ")", "\n", "y_lengths", "=", "y_lengths", ".", "cuda", "(", ")", "\n", "\n", "", "item_info", "[", "\"context\"", "]", "=", "src_seqs", "\n", "item_info", "[", "\"context_len\"", "]", "=", "src_lengths", "\n", "item_info", "[", "\"gating_label\"", "]", "=", "gating_label", "\n", "item_info", "[", "\"turn_domain\"", "]", "=", "turn_domain", "\n", "item_info", "[", "\"generate_y\"", "]", "=", "y_seqs", "\n", "item_info", "[", "\"y_lengths\"", "]", "=", "y_lengths", "\n", "return", "item_info", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.read_langs": [[212, 328], ["print", "print", "open", "json.load", "range", "random.Random().shuffle", "enumerate", "mem_lang.word2index.keys", "mem_lang.index_words", "enumerate", "turn_uttr.strip", "dialog_history.strip", "fix_label.fix_general_label_error", "torch.append", "lang.index_words", "lang.index_words", "random.Random", "int", "domain_counter.keys", "mem_lang.index_words", "len", "len", "collections.OrderedDict", "collections.OrderedDict", "str", "collections.OrderedDict.items", "collections.OrderedDict.keys", "generate_y.append", "generate_y.append", "gating_label.append", "dialog_history.strip.split", "dialog_history.strip.split", "collections.OrderedDict", "collections.OrderedDict", "str", "gating_label.append", "len", "len", "len", "gating_label.append", "gating_label.append", "collections.OrderedDict.items", "collections.OrderedDict.items", "collections.OrderedDict.items", "collections.OrderedDict.items"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_words", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.fix_label.fix_general_label_error", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_words", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_words", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_words"], ["", "def", "read_langs", "(", "file_name", ",", "gating_dict", ",", "SLOTS", ",", "dataset", ",", "lang", ",", "mem_lang", ",", "sequicity", ",", "training", ",", "max_line", "=", "None", ")", ":", "\n", "    ", "print", "(", "(", "\"Reading from {}\"", ".", "format", "(", "file_name", ")", ")", ")", "\n", "data", "=", "[", "]", "\n", "max_resp_len", ",", "max_value_len", "=", "0", ",", "0", "\n", "domain_counter", "=", "{", "}", "\n", "with", "open", "(", "file_name", ")", "as", "f", ":", "\n", "        ", "dials", "=", "json", ".", "load", "(", "f", ")", "\n", "# create vocab first ", "\n", "for", "dial_dict", "in", "dials", ":", "\n", "            ", "if", "(", "args", "[", "\"all_vocab\"", "]", "or", "dataset", "==", "\"train\"", ")", "and", "training", ":", "\n", "                ", "for", "ti", ",", "turn", "in", "enumerate", "(", "dial_dict", "[", "\"dialogue\"", "]", ")", ":", "\n", "                    ", "lang", ".", "index_words", "(", "turn", "[", "\"system_transcript\"", "]", ",", "'utter'", ")", "\n", "lang", ".", "index_words", "(", "turn", "[", "\"transcript\"", "]", ",", "'utter'", ")", "\n", "# determine training data ratio, default is 100%", "\n", "", "", "", "if", "training", "and", "dataset", "==", "\"train\"", "and", "args", "[", "\"data_ratio\"", "]", "!=", "100", ":", "\n", "            ", "random", ".", "Random", "(", "10", ")", ".", "shuffle", "(", "dials", ")", "\n", "dials", "=", "dials", "[", ":", "int", "(", "len", "(", "dials", ")", "*", "0.01", "*", "args", "[", "\"data_ratio\"", "]", ")", "]", "\n", "\n", "", "cnt_lin", "=", "1", "\n", "for", "dial_dict", "in", "dials", ":", "\n", "            ", "dialog_history", "=", "\"\"", "\n", "last_belief_dict", "=", "{", "}", "\n", "# Filtering and counting domains", "\n", "for", "domain", "in", "dial_dict", "[", "\"domains\"", "]", ":", "\n", "                ", "if", "domain", "not", "in", "EXPERIMENT_DOMAINS", ":", "\n", "                    ", "continue", "\n", "", "if", "domain", "not", "in", "domain_counter", ".", "keys", "(", ")", ":", "\n", "                    ", "domain_counter", "[", "domain", "]", "=", "0", "\n", "", "domain_counter", "[", "domain", "]", "+=", "1", "\n", "\n", "# Unseen domain setting", "\n", "", "if", "args", "[", "\"only_domain\"", "]", "!=", "\"\"", "and", "args", "[", "\"only_domain\"", "]", "not", "in", "dial_dict", "[", "\"domains\"", "]", ":", "\n", "                ", "continue", "\n", "", "if", "(", "args", "[", "\"except_domain\"", "]", "!=", "\"\"", "and", "dataset", "==", "\"test\"", "and", "args", "[", "\"except_domain\"", "]", "not", "in", "dial_dict", "[", "\"domains\"", "]", ")", "or", "(", "args", "[", "\"except_domain\"", "]", "!=", "\"\"", "and", "dataset", "!=", "\"test\"", "and", "[", "args", "[", "\"except_domain\"", "]", "]", "==", "dial_dict", "[", "\"domains\"", "]", ")", ":", "\n", "                ", "continue", "\n", "\n", "# Reading data", "\n", "", "for", "ti", ",", "turn", "in", "enumerate", "(", "dial_dict", "[", "\"dialogue\"", "]", ")", ":", "\n", "                ", "turn_domain", "=", "turn", "[", "\"domain\"", "]", "\n", "turn_id", "=", "turn", "[", "\"turn_idx\"", "]", "\n", "turn_uttr", "=", "turn", "[", "\"system_transcript\"", "]", "+", "\" ; \"", "+", "turn", "[", "\"transcript\"", "]", "\n", "turn_uttr_strip", "=", "turn_uttr", ".", "strip", "(", ")", "\n", "dialog_history", "+=", "(", "turn", "[", "\"system_transcript\"", "]", "+", "\" ; \"", "+", "turn", "[", "\"transcript\"", "]", "+", "\" ; \"", ")", "\n", "source_text", "=", "dialog_history", ".", "strip", "(", ")", "\n", "turn_belief_dict", "=", "fix_general_label_error", "(", "turn", "[", "\"belief_state\"", "]", ",", "False", ",", "SLOTS", ")", "\n", "\n", "# Generate domain-dependent slot list", "\n", "slot_temp", "=", "SLOTS", "\n", "if", "dataset", "==", "\"train\"", "or", "dataset", "==", "\"dev\"", ":", "\n", "                    ", "if", "args", "[", "\"except_domain\"", "]", "!=", "\"\"", ":", "\n", "                        ", "slot_temp", "=", "[", "k", "for", "k", "in", "SLOTS", "if", "args", "[", "\"except_domain\"", "]", "not", "in", "k", "]", "\n", "turn_belief_dict", "=", "OrderedDict", "(", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "turn_belief_dict", ".", "items", "(", ")", "if", "args", "[", "\"except_domain\"", "]", "not", "in", "k", "]", ")", "\n", "", "elif", "args", "[", "\"only_domain\"", "]", "!=", "\"\"", ":", "\n", "                        ", "slot_temp", "=", "[", "k", "for", "k", "in", "SLOTS", "if", "args", "[", "\"only_domain\"", "]", "in", "k", "]", "\n", "turn_belief_dict", "=", "OrderedDict", "(", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "turn_belief_dict", ".", "items", "(", ")", "if", "args", "[", "\"only_domain\"", "]", "in", "k", "]", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "args", "[", "\"except_domain\"", "]", "!=", "\"\"", ":", "\n", "                        ", "slot_temp", "=", "[", "k", "for", "k", "in", "SLOTS", "if", "args", "[", "\"except_domain\"", "]", "in", "k", "]", "\n", "turn_belief_dict", "=", "OrderedDict", "(", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "turn_belief_dict", ".", "items", "(", ")", "if", "args", "[", "\"except_domain\"", "]", "in", "k", "]", ")", "\n", "", "elif", "args", "[", "\"only_domain\"", "]", "!=", "\"\"", ":", "\n", "                        ", "slot_temp", "=", "[", "k", "for", "k", "in", "SLOTS", "if", "args", "[", "\"only_domain\"", "]", "in", "k", "]", "\n", "turn_belief_dict", "=", "OrderedDict", "(", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "turn_belief_dict", ".", "items", "(", ")", "if", "args", "[", "\"only_domain\"", "]", "in", "k", "]", ")", "\n", "\n", "", "", "turn_belief_list", "=", "[", "str", "(", "k", ")", "+", "'-'", "+", "str", "(", "v", ")", "for", "k", ",", "v", "in", "turn_belief_dict", ".", "items", "(", ")", "]", "\n", "\n", "if", "(", "args", "[", "\"all_vocab\"", "]", "or", "dataset", "==", "\"train\"", ")", "and", "training", ":", "\n", "                    ", "mem_lang", ".", "index_words", "(", "turn_belief_dict", ",", "'belief'", ")", "\n", "\n", "", "class_label", ",", "generate_y", ",", "slot_mask", ",", "gating_label", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "start_ptr_label", ",", "end_ptr_label", "=", "[", "]", ",", "[", "]", "\n", "for", "slot", "in", "slot_temp", ":", "\n", "                    ", "if", "slot", "in", "turn_belief_dict", ".", "keys", "(", ")", ":", "\n", "                        ", "generate_y", ".", "append", "(", "turn_belief_dict", "[", "slot", "]", ")", "\n", "\n", "if", "turn_belief_dict", "[", "slot", "]", "==", "\"dontcare\"", ":", "\n", "                            ", "gating_label", ".", "append", "(", "gating_dict", "[", "\"dontcare\"", "]", ")", "\n", "", "elif", "turn_belief_dict", "[", "slot", "]", "==", "\"none\"", ":", "\n", "                            ", "gating_label", ".", "append", "(", "gating_dict", "[", "\"none\"", "]", ")", "\n", "", "else", ":", "\n", "                            ", "gating_label", ".", "append", "(", "gating_dict", "[", "\"ptr\"", "]", ")", "\n", "\n", "", "if", "max_value_len", "<", "len", "(", "turn_belief_dict", "[", "slot", "]", ")", ":", "\n", "                            ", "max_value_len", "=", "len", "(", "turn_belief_dict", "[", "slot", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "                        ", "generate_y", ".", "append", "(", "\"none\"", ")", "\n", "gating_label", ".", "append", "(", "gating_dict", "[", "\"none\"", "]", ")", "\n", "\n", "", "", "data_detail", "=", "{", "\n", "\"ID\"", ":", "dial_dict", "[", "\"dialogue_idx\"", "]", ",", "\n", "\"domains\"", ":", "dial_dict", "[", "\"domains\"", "]", ",", "\n", "\"turn_domain\"", ":", "turn_domain", ",", "\n", "\"turn_id\"", ":", "turn_id", ",", "\n", "\"dialog_history\"", ":", "source_text", ",", "\n", "\"turn_belief\"", ":", "turn_belief_list", ",", "\n", "\"gating_label\"", ":", "gating_label", ",", "\n", "\"turn_uttr\"", ":", "turn_uttr_strip", ",", "\n", "'generate_y'", ":", "generate_y", "\n", "}", "\n", "data", ".", "append", "(", "data_detail", ")", "\n", "\n", "if", "max_resp_len", "<", "len", "(", "source_text", ".", "split", "(", ")", ")", ":", "\n", "                    ", "max_resp_len", "=", "len", "(", "source_text", ".", "split", "(", ")", ")", "\n", "\n", "", "", "cnt_lin", "+=", "1", "\n", "if", "(", "max_line", "and", "cnt_lin", ">=", "max_line", ")", ":", "\n", "                ", "break", "\n", "\n", "# add t{} to the lang file", "\n", "", "", "", "if", "\"t{}\"", ".", "format", "(", "max_value_len", "-", "1", ")", "not", "in", "mem_lang", ".", "word2index", ".", "keys", "(", ")", "and", "training", ":", "\n", "        ", "for", "time_i", "in", "range", "(", "max_value_len", ")", ":", "\n", "            ", "mem_lang", ".", "index_words", "(", "\"t{}\"", ".", "format", "(", "time_i", ")", ",", "'utter'", ")", "\n", "\n", "", "", "print", "(", "\"domain_counter\"", ",", "domain_counter", ")", "\n", "return", "data", ",", "max_resp_len", ",", "slot_temp", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.get_seq": [[330, 358], ["pairs[].keys", "utils_multiWOZ_DST.Dataset", "random.shuffle", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data_info[].append", "utils_multiWOZ_DST.ImbalancedDatasetSampler"], "function", ["None"], ["", "def", "get_seq", "(", "pairs", ",", "lang", ",", "mem_lang", ",", "batch_size", ",", "type", ",", "sequicity", ")", ":", "\n", "    ", "if", "(", "type", "and", "args", "[", "'fisher_sample'", "]", ">", "0", ")", ":", "\n", "        ", "shuffle", "(", "pairs", ")", "\n", "pairs", "=", "pairs", "[", ":", "args", "[", "'fisher_sample'", "]", "]", "\n", "\n", "", "data_info", "=", "{", "}", "\n", "data_keys", "=", "pairs", "[", "0", "]", ".", "keys", "(", ")", "\n", "for", "k", "in", "data_keys", ":", "\n", "        ", "data_info", "[", "k", "]", "=", "[", "]", "\n", "\n", "", "for", "pair", "in", "pairs", ":", "\n", "        ", "for", "k", "in", "data_keys", ":", "\n", "            ", "data_info", "[", "k", "]", ".", "append", "(", "pair", "[", "k", "]", ")", "\n", "\n", "", "", "dataset", "=", "Dataset", "(", "data_info", ",", "lang", ".", "word2index", ",", "lang", ".", "word2index", ",", "sequicity", ",", "mem_lang", ".", "word2index", ")", "\n", "\n", "if", "args", "[", "\"imbalance_sampler\"", "]", "and", "type", ":", "\n", "        ", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "# shuffle=type,", "\n", "collate_fn", "=", "collate_fn", ",", "\n", "sampler", "=", "ImbalancedDatasetSampler", "(", "dataset", ")", ")", "\n", "", "else", ":", "\n", "        ", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "type", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.dump_pretrained_emb": [[360, 372], ["print", "tqdm.tqdm", "embeddings.GloveEmbedding", "embeddings.KazumaCharEmbedding", "range", "E.append", "open", "json.dump", "len", "emb.emb", "word2index.keys"], "function", ["None"], ["", "def", "dump_pretrained_emb", "(", "word2index", ",", "index2word", ",", "dump_path", ")", ":", "\n", "    ", "print", "(", "\"Dumping pretrained embeddings...\"", ")", "\n", "embeddings", "=", "[", "GloveEmbedding", "(", ")", ",", "KazumaCharEmbedding", "(", ")", "]", "\n", "E", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "word2index", ".", "keys", "(", ")", ")", ")", ")", ":", "\n", "        ", "w", "=", "index2word", "[", "i", "]", "\n", "e", "=", "[", "]", "\n", "for", "emb", "in", "embeddings", ":", "\n", "            ", "e", "+=", "emb", ".", "emb", "(", "w", ",", "default", "=", "'zero'", ")", "\n", "", "E", ".", "append", "(", "e", ")", "\n", "", "with", "open", "(", "dump_path", ",", "'wt'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "E", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.get_slot_information": [[374, 378], ["dict", "k.replace().lower", "k.lower", "dict.keys", "ontology.items", "k.replace", "k.split"], "function", ["None"], ["", "", "def", "get_slot_information", "(", "ontology", ")", ":", "\n", "    ", "ontology_domains", "=", "dict", "(", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "ontology", ".", "items", "(", ")", "if", "k", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "in", "EXPERIMENT_DOMAINS", "]", ")", "\n", "SLOTS", "=", "[", "k", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ".", "lower", "(", ")", "if", "(", "\"book\"", "not", "in", "k", ")", "else", "k", ".", "lower", "(", ")", "for", "k", "in", "ontology_domains", ".", "keys", "(", ")", "]", "\n", "return", "SLOTS", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.prepare_data_seq": [[380, 462], ["print", "json.load", "utils_multiWOZ_DST.get_slot_information", "pickle.load.index_words", "pickle.load.index_words", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.exists", "os.makedirs", "open", "utils_multiWOZ_DST.Lang", "utils_multiWOZ_DST.Lang", "utils_multiWOZ_DST.read_langs", "utils_multiWOZ_DST.get_seq", "utils_multiWOZ_DST.read_langs", "utils_multiWOZ_DST.get_seq", "utils_multiWOZ_DST.read_langs", "utils_multiWOZ_DST.get_seq", "utils_multiWOZ_DST.read_langs", "utils_multiWOZ_DST.get_seq", "utils_multiWOZ_DST.read_langs", "utils_multiWOZ_DST.get_seq", "utils_multiWOZ_DST.read_langs", "utils_multiWOZ_DST.get_seq", "max", "os.path.exists", "os.path.exists", "print", "print", "len", "utils_multiWOZ_DST.dump_pretrained_emb", "open", "pickle.load", "open", "pickle.load", "len", "len", "len", "str", "str", "args[].rsplit", "str", "open", "pickle.load", "open", "pickle.load", "open", "pickle.dump", "open", "pickle.dump", "os.path.exists", "len", "len"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.get_slot_information", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_words", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_words", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.read_langs", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_seq", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.read_langs", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_seq", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.read_langs", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_seq", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.read_langs", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_seq", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.read_langs", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_seq", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.read_langs", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_seq", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_multiWOZ_DST.dump_pretrained_emb"], ["", "def", "prepare_data_seq", "(", "training", ",", "task", "=", "\"dst\"", ",", "sequicity", "=", "0", ",", "batch_size", "=", "100", ")", ":", "\n", "    ", "eval_batch", "=", "args", "[", "\"eval_batch\"", "]", "if", "args", "[", "\"eval_batch\"", "]", "else", "batch_size", "\n", "file_train", "=", "'data/train_dials.json'", "\n", "file_dev", "=", "'data/dev_dials.json'", "\n", "file_test", "=", "'data/test_dials.json'", "\n", "# Create saving folder", "\n", "if", "args", "[", "'path'", "]", ":", "\n", "        ", "folder_name", "=", "args", "[", "'path'", "]", ".", "rsplit", "(", "'/'", ",", "2", ")", "[", "0", "]", "+", "'/'", "\n", "", "else", ":", "\n", "        ", "folder_name", "=", "'save/{}-'", ".", "format", "(", "args", "[", "\"decoder\"", "]", ")", "+", "args", "[", "\"addName\"", "]", "+", "args", "[", "'dataset'", "]", "+", "str", "(", "args", "[", "'task'", "]", ")", "+", "'/'", "\n", "", "print", "(", "\"folder_name\"", ",", "folder_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder_name", ")", "\n", "# load domain-slot pairs from ontology", "\n", "", "ontology", "=", "json", ".", "load", "(", "open", "(", "\"data/multi-woz/MULTIWOZ2 2/ontology.json\"", ",", "'r'", ")", ")", "\n", "ALL_SLOTS", "=", "get_slot_information", "(", "ontology", ")", "\n", "gating_dict", "=", "{", "\"ptr\"", ":", "0", ",", "\"dontcare\"", ":", "1", ",", "\"none\"", ":", "2", "}", "\n", "# Vocabulary", "\n", "lang", ",", "mem_lang", "=", "Lang", "(", ")", ",", "Lang", "(", ")", "\n", "lang", ".", "index_words", "(", "ALL_SLOTS", ",", "'slot'", ")", "\n", "mem_lang", ".", "index_words", "(", "ALL_SLOTS", ",", "'slot'", ")", "\n", "lang_name", "=", "'lang-all.pkl'", "if", "args", "[", "\"all_vocab\"", "]", "else", "'lang-train.pkl'", "\n", "mem_lang_name", "=", "'mem-lang-all.pkl'", "if", "args", "[", "\"all_vocab\"", "]", "else", "'mem-lang-train.pkl'", "\n", "\n", "if", "training", ":", "\n", "        ", "pair_train", ",", "train_max_len", ",", "slot_train", "=", "read_langs", "(", "file_train", ",", "gating_dict", ",", "ALL_SLOTS", ",", "\"train\"", ",", "lang", ",", "mem_lang", ",", "sequicity", ",", "training", ")", "\n", "train", "=", "get_seq", "(", "pair_train", ",", "lang", ",", "mem_lang", ",", "batch_size", ",", "True", ",", "sequicity", ")", "\n", "nb_train_vocab", "=", "lang", ".", "n_words", "\n", "pair_dev", ",", "dev_max_len", ",", "slot_dev", "=", "read_langs", "(", "file_dev", ",", "gating_dict", ",", "ALL_SLOTS", ",", "\"dev\"", ",", "lang", ",", "mem_lang", ",", "sequicity", ",", "training", ")", "\n", "dev", "=", "get_seq", "(", "pair_dev", ",", "lang", ",", "mem_lang", ",", "eval_batch", ",", "False", ",", "sequicity", ")", "\n", "pair_test", ",", "test_max_len", ",", "slot_test", "=", "read_langs", "(", "file_test", ",", "gating_dict", ",", "ALL_SLOTS", ",", "\"test\"", ",", "lang", ",", "mem_lang", ",", "sequicity", ",", "training", ")", "\n", "test", "=", "get_seq", "(", "pair_test", ",", "lang", ",", "mem_lang", ",", "eval_batch", ",", "False", ",", "sequicity", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "folder_name", "+", "lang_name", ")", "and", "os", ".", "path", ".", "exists", "(", "folder_name", "+", "mem_lang_name", ")", ":", "\n", "            ", "print", "(", "\"[Info] Loading saved lang files...\"", ")", "\n", "with", "open", "(", "folder_name", "+", "lang_name", ",", "'rb'", ")", "as", "handle", ":", "\n", "                ", "lang", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "", "with", "open", "(", "folder_name", "+", "mem_lang_name", ",", "'rb'", ")", "as", "handle", ":", "\n", "                ", "mem_lang", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "\"[Info] Dumping lang files...\"", ")", "\n", "with", "open", "(", "folder_name", "+", "lang_name", ",", "'wb'", ")", "as", "handle", ":", "\n", "                ", "pickle", ".", "dump", "(", "lang", ",", "handle", ")", "\n", "", "with", "open", "(", "folder_name", "+", "mem_lang_name", ",", "'wb'", ")", "as", "handle", ":", "\n", "                ", "pickle", ".", "dump", "(", "mem_lang", ",", "handle", ")", "\n", "", "", "emb_dump_path", "=", "'data/emb{}.json'", ".", "format", "(", "len", "(", "lang", ".", "index2word", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "emb_dump_path", ")", "and", "args", "[", "\"load_embedding\"", "]", ":", "\n", "            ", "dump_pretrained_emb", "(", "lang", ".", "word2index", ",", "lang", ".", "index2word", ",", "emb_dump_path", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "folder_name", "+", "lang_name", ",", "'rb'", ")", "as", "handle", ":", "\n", "            ", "lang", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "", "with", "open", "(", "folder_name", "+", "mem_lang_name", ",", "'rb'", ")", "as", "handle", ":", "\n", "            ", "mem_lang", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "\n", "", "pair_train", ",", "train_max_len", ",", "slot_train", ",", "train", ",", "nb_train_vocab", "=", "[", "]", ",", "0", ",", "{", "}", ",", "[", "]", ",", "0", "\n", "pair_dev", ",", "dev_max_len", ",", "slot_dev", "=", "read_langs", "(", "file_dev", ",", "gating_dict", ",", "ALL_SLOTS", ",", "\"dev\"", ",", "lang", ",", "mem_lang", ",", "sequicity", ",", "training", ")", "\n", "dev", "=", "get_seq", "(", "pair_dev", ",", "lang", ",", "mem_lang", ",", "eval_batch", ",", "False", ",", "sequicity", ")", "\n", "pair_test", ",", "test_max_len", ",", "slot_test", "=", "read_langs", "(", "file_test", ",", "gating_dict", ",", "ALL_SLOTS", ",", "\"test\"", ",", "lang", ",", "mem_lang", ",", "sequicity", ",", "training", ")", "\n", "test", "=", "get_seq", "(", "pair_test", ",", "lang", ",", "mem_lang", ",", "eval_batch", ",", "False", ",", "sequicity", ")", "\n", "\n", "", "test_4d", "=", "[", "]", "\n", "if", "args", "[", "'except_domain'", "]", "!=", "\"\"", ":", "\n", "        ", "pair_test_4d", ",", "_", ",", "_", "=", "read_langs", "(", "file_test", ",", "gating_dict", ",", "ALL_SLOTS", ",", "\"dev\"", ",", "lang", ",", "mem_lang", ",", "sequicity", ",", "training", ")", "\n", "test_4d", "=", "get_seq", "(", "pair_test_4d", ",", "lang", ",", "mem_lang", ",", "eval_batch", ",", "False", ",", "sequicity", ")", "\n", "\n", "", "max_word", "=", "max", "(", "train_max_len", ",", "dev_max_len", ",", "test_max_len", ")", "+", "1", "\n", "\n", "print", "(", "\"Read %s pairs train\"", "%", "len", "(", "pair_train", ")", ")", "\n", "print", "(", "\"Read %s pairs dev\"", "%", "len", "(", "pair_dev", ")", ")", "\n", "print", "(", "\"Read %s pairs test\"", "%", "len", "(", "pair_test", ")", ")", "\n", "print", "(", "\"Vocab_size: %s \"", "%", "lang", ".", "n_words", ")", "\n", "print", "(", "\"Vocab_size Training %s\"", "%", "nb_train_vocab", ")", "\n", "print", "(", "\"Vocab_size Belief %s\"", "%", "mem_lang", ".", "n_words", ")", "\n", "print", "(", "\"Max. length of dialog words for RNN: %s \"", "%", "max_word", ")", "\n", "print", "(", "\"USE_CUDA={}\"", ".", "format", "(", "USE_CUDA", ")", ")", "\n", "\n", "SLOTS_LIST", "=", "[", "ALL_SLOTS", ",", "slot_train", ",", "slot_dev", ",", "slot_test", "]", "\n", "print", "(", "\"[Train Set & Dev Set Slots]: Number is {} in total\"", ".", "format", "(", "str", "(", "len", "(", "SLOTS_LIST", "[", "2", "]", ")", ")", ")", ")", "\n", "print", "(", "SLOTS_LIST", "[", "2", "]", ")", "\n", "print", "(", "\"[Test Set Slots]: Number is {} in total\"", ".", "format", "(", "str", "(", "len", "(", "SLOTS_LIST", "[", "3", "]", ")", ")", ")", ")", "\n", "print", "(", "SLOTS_LIST", "[", "3", "]", ")", "\n", "LANG", "=", "[", "lang", ",", "mem_lang", "]", "\n", "return", "train", ",", "dev", ",", "test", ",", "test_4d", ",", "LANG", ",", "SLOTS_LIST", ",", "gating_dict", ",", "nb_train_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.logger.Logger.__init__": [[13, 16], ["tensorflow.summary.FileWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "\"\"\"Create a summary writer logging to log_dir.\"\"\"", "\n", "self", ".", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.logger.Logger.scalar_summary": [[17, 21], ["tensorflow.Summary", "logger.Logger.writer.add_summary", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "simple_value", "=", "value", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.logger.Logger.image_summary": [[22, 44], ["enumerate", "tensorflow.Summary", "logger.Logger.writer.add_summary", "scipy.misc.toimage().save", "tensorflow.Summary.Image", "img_summaries.append", "StringIO", "tensorflow.Summary.Value", "BytesIO", "scipy.misc.toimage", "BytesIO.getvalue"], "methods", ["None"], ["", "def", "image_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a list of images.\"\"\"", "\n", "\n", "img_summaries", "=", "[", "]", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "# Write the image to a string", "\n", "            ", "try", ":", "\n", "                ", "s", "=", "StringIO", "(", ")", "\n", "", "except", ":", "\n", "                ", "s", "=", "BytesIO", "(", ")", "\n", "", "scipy", ".", "misc", ".", "toimage", "(", "img", ")", ".", "save", "(", "s", ",", "format", "=", "\"png\"", ")", "\n", "\n", "# Create an Image object", "\n", "img_sum", "=", "tf", ".", "Summary", ".", "Image", "(", "encoded_image_string", "=", "s", ".", "getvalue", "(", ")", ",", "\n", "height", "=", "img", ".", "shape", "[", "0", "]", ",", "\n", "width", "=", "img", ".", "shape", "[", "1", "]", ")", "\n", "# Create a Summary value", "\n", "img_summaries", ".", "append", "(", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "'%s/%d'", "%", "(", "tag", ",", "i", ")", ",", "image", "=", "img_sum", ")", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "img_summaries", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.logger.Logger.histo_summary": [[45, 72], ["numpy.histogram", "tensorflow.HistogramProto", "float", "float", "int", "float", "float", "tensorflow.Summary", "logger.Logger.writer.add_summary", "logger.Logger.writer.flush", "numpy.min", "numpy.max", "numpy.prod", "numpy.sum", "numpy.sum", "tensorflow.HistogramProto.bucket_limit.append", "tensorflow.HistogramProto.bucket.append", "tensorflow.Summary.Value"], "methods", ["None"], ["", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ",", "bins", "=", "1000", ")", ":", "\n", "        ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "\n", "# Create a histogram using numpy", "\n", "counts", ",", "bin_edges", "=", "np", ".", "histogram", "(", "values", ",", "bins", "=", "bins", ")", "\n", "\n", "# Fill the fields of the histogram proto", "\n", "hist", "=", "tf", ".", "HistogramProto", "(", ")", "\n", "hist", ".", "min", "=", "float", "(", "np", ".", "min", "(", "values", ")", ")", "\n", "hist", ".", "max", "=", "float", "(", "np", ".", "max", "(", "values", ")", ")", "\n", "hist", ".", "num", "=", "int", "(", "np", ".", "prod", "(", "values", ".", "shape", ")", ")", "\n", "hist", ".", "sum", "=", "float", "(", "np", ".", "sum", "(", "values", ")", ")", "\n", "hist", ".", "sum_squares", "=", "float", "(", "np", ".", "sum", "(", "values", "**", "2", ")", ")", "\n", "\n", "# Drop the start of the first bin", "\n", "bin_edges", "=", "bin_edges", "[", "1", ":", "]", "\n", "\n", "# Add bin edges and counts", "\n", "for", "edge", "in", "bin_edges", ":", "\n", "            ", "hist", ".", "bucket_limit", ".", "append", "(", "edge", ")", "\n", "", "for", "c", "in", "counts", ":", "\n", "            ", "hist", ".", "bucket", ".", "append", "(", "c", ")", "\n", "\n", "# Create and write Summary", "\n", "", "summary", "=", "tf", ".", "Summary", "(", "value", "=", "[", "tf", ".", "Summary", ".", "Value", "(", "tag", "=", "tag", ",", "histo", "=", "hist", ")", "]", ")", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.fix_label.fix_general_label_error": [[2, 67], ["dict", "dict", "label_dict.keys", "GENERAL_TYPO.keys", "label_dict[].replace"], "function", ["None"], ["def", "fix_general_label_error", "(", "labels", ",", "type", ",", "slots", ")", ":", "\n", "    ", "label_dict", "=", "dict", "(", "[", "(", "l", "[", "0", "]", ",", "l", "[", "1", "]", ")", "for", "l", "in", "labels", "]", ")", "if", "type", "else", "dict", "(", "[", "(", "l", "[", "\"slots\"", "]", "[", "0", "]", "[", "0", "]", ",", "l", "[", "\"slots\"", "]", "[", "0", "]", "[", "1", "]", ")", "for", "l", "in", "labels", "]", ")", "\n", "\n", "GENERAL_TYPO", "=", "{", "\n", "# type", "\n", "\"guesthouse\"", ":", "\"guest house\"", ",", "\"guesthouses\"", ":", "\"guest house\"", ",", "\"guest\"", ":", "\"guest house\"", ",", "\"mutiple sports\"", ":", "\"multiple sports\"", ",", "\n", "\"sports\"", ":", "\"multiple sports\"", ",", "\"mutliple sports\"", ":", "\"multiple sports\"", ",", "\"swimmingpool\"", ":", "\"swimming pool\"", ",", "\"concerthall\"", ":", "\"concert hall\"", ",", "\n", "\"concert\"", ":", "\"concert hall\"", ",", "\"pool\"", ":", "\"swimming pool\"", ",", "\"night club\"", ":", "\"nightclub\"", ",", "\"mus\"", ":", "\"museum\"", ",", "\"ol\"", ":", "\"architecture\"", ",", "\n", "\"colleges\"", ":", "\"college\"", ",", "\"coll\"", ":", "\"college\"", ",", "\"architectural\"", ":", "\"architecture\"", ",", "\"musuem\"", ":", "\"museum\"", ",", "\"churches\"", ":", "\"church\"", ",", "\n", "# area", "\n", "\"center\"", ":", "\"centre\"", ",", "\"center of town\"", ":", "\"centre\"", ",", "\"near city center\"", ":", "\"centre\"", ",", "\"in the north\"", ":", "\"north\"", ",", "\"cen\"", ":", "\"centre\"", ",", "\"east side\"", ":", "\"east\"", ",", "\n", "\"east area\"", ":", "\"east\"", ",", "\"west part of town\"", ":", "\"west\"", ",", "\"ce\"", ":", "\"centre\"", ",", "\"town center\"", ":", "\"centre\"", ",", "\"centre of cambridge\"", ":", "\"centre\"", ",", "\n", "\"city center\"", ":", "\"centre\"", ",", "\"the south\"", ":", "\"south\"", ",", "\"scentre\"", ":", "\"centre\"", ",", "\"town centre\"", ":", "\"centre\"", ",", "\"in town\"", ":", "\"centre\"", ",", "\"north part of town\"", ":", "\"north\"", ",", "\n", "\"centre of town\"", ":", "\"centre\"", ",", "\"cb30aq\"", ":", "\"none\"", ",", "\n", "# price", "\n", "\"mode\"", ":", "\"moderate\"", ",", "\"moderate -ly\"", ":", "\"moderate\"", ",", "\"mo\"", ":", "\"moderate\"", ",", "\n", "# day", "\n", "\"next friday\"", ":", "\"friday\"", ",", "\"monda\"", ":", "\"monday\"", ",", "\n", "# parking", "\n", "\"free parking\"", ":", "\"free\"", ",", "\n", "# internet", "\n", "\"free internet\"", ":", "\"yes\"", ",", "\n", "# star", "\n", "\"4 star\"", ":", "\"4\"", ",", "\"4 stars\"", ":", "\"4\"", ",", "\"0 star rarting\"", ":", "\"none\"", ",", "\n", "# others ", "\n", "\"y\"", ":", "\"yes\"", ",", "\"any\"", ":", "\"dontcare\"", ",", "\"n\"", ":", "\"no\"", ",", "\"does not care\"", ":", "\"dontcare\"", ",", "\"not men\"", ":", "\"none\"", ",", "\"not\"", ":", "\"none\"", ",", "\"not mentioned\"", ":", "\"none\"", ",", "\n", "''", ":", "\"none\"", ",", "\"not mendtioned\"", ":", "\"none\"", ",", "\"3 .\"", ":", "\"3\"", ",", "\"does not\"", ":", "\"no\"", ",", "\"fun\"", ":", "\"none\"", ",", "\"art\"", ":", "\"none\"", ",", "\n", "}", "\n", "\n", "for", "slot", "in", "slots", ":", "\n", "        ", "if", "slot", "in", "label_dict", ".", "keys", "(", ")", ":", "\n", "# general typos", "\n", "            ", "if", "label_dict", "[", "slot", "]", "in", "GENERAL_TYPO", ".", "keys", "(", ")", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "label_dict", "[", "slot", "]", ".", "replace", "(", "label_dict", "[", "slot", "]", ",", "GENERAL_TYPO", "[", "label_dict", "[", "slot", "]", "]", ")", "\n", "\n", "# miss match slot and value ", "\n", "", "if", "slot", "==", "\"hotel-type\"", "and", "label_dict", "[", "slot", "]", "in", "[", "\"nigh\"", ",", "\"moderate -ly priced\"", ",", "\"bed and breakfast\"", ",", "\"centre\"", ",", "\"venetian\"", ",", "\"intern\"", ",", "\"a cheap -er hotel\"", "]", "or", "slot", "==", "\"hotel-internet\"", "and", "label_dict", "[", "slot", "]", "==", "\"4\"", "or", "slot", "==", "\"hotel-pricerange\"", "and", "label_dict", "[", "slot", "]", "==", "\"2\"", "or", "slot", "==", "\"attraction-type\"", "and", "label_dict", "[", "slot", "]", "in", "[", "\"gastropub\"", ",", "\"la raza\"", ",", "\"galleria\"", ",", "\"gallery\"", ",", "\"science\"", ",", "\"m\"", "]", "or", "\"area\"", "in", "slot", "and", "label_dict", "[", "slot", "]", "in", "[", "\"moderate\"", "]", "or", "\"day\"", "in", "slot", "and", "label_dict", "[", "slot", "]", "==", "\"t\"", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "\"none\"", "\n", "", "elif", "slot", "==", "\"hotel-type\"", "and", "label_dict", "[", "slot", "]", "in", "[", "\"hotel with free parking and free wifi\"", ",", "\"4\"", ",", "\"3 star hotel\"", "]", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "\"hotel\"", "\n", "", "elif", "slot", "==", "\"hotel-star\"", "and", "label_dict", "[", "slot", "]", "==", "\"3 star hotel\"", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "\"3\"", "\n", "", "elif", "\"area\"", "in", "slot", ":", "\n", "                ", "if", "label_dict", "[", "slot", "]", "==", "\"no\"", ":", "label_dict", "[", "slot", "]", "=", "\"north\"", "\n", "elif", "label_dict", "[", "slot", "]", "==", "\"we\"", ":", "label_dict", "[", "slot", "]", "=", "\"west\"", "\n", "elif", "label_dict", "[", "slot", "]", "==", "\"cent\"", ":", "label_dict", "[", "slot", "]", "=", "\"centre\"", "\n", "", "elif", "\"day\"", "in", "slot", ":", "\n", "                ", "if", "label_dict", "[", "slot", "]", "==", "\"we\"", ":", "label_dict", "[", "slot", "]", "=", "\"wednesday\"", "\n", "elif", "label_dict", "[", "slot", "]", "==", "\"no\"", ":", "label_dict", "[", "slot", "]", "=", "\"none\"", "\n", "", "elif", "\"price\"", "in", "slot", "and", "label_dict", "[", "slot", "]", "==", "\"ch\"", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "\"cheap\"", "\n", "", "elif", "\"internet\"", "in", "slot", "and", "label_dict", "[", "slot", "]", "==", "\"free\"", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "\"yes\"", "\n", "\n", "# some out-of-define classification slot values", "\n", "", "if", "slot", "==", "\"restaurant-area\"", "and", "label_dict", "[", "slot", "]", "in", "[", "\"stansted airport\"", ",", "\"cambridge\"", ",", "\"silver street\"", "]", "or", "slot", "==", "\"attraction-area\"", "and", "label_dict", "[", "slot", "]", "in", "[", "\"norwich\"", ",", "\"ely\"", ",", "\"museum\"", ",", "\"same area as hotel\"", "]", ":", "\n", "                ", "label_dict", "[", "slot", "]", "=", "\"none\"", "\n", "\n", "", "", "", "return", "label_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.sequence_mask": [[8, 20], ["sequence_length.size", "torch.arange().long", "torch.arange().long", "torch.arange().long.unsqueeze().expand", "torch.autograd.Variable", "sequence_length.unsqueeze().expand_as", "sequence_length.data.max", "seq_range_expand.cuda.cuda", "torch.arange", "torch.arange", "torch.arange().long.unsqueeze", "sequence_length.unsqueeze"], "function", ["None"], ["def", "sequence_mask", "(", "sequence_length", ",", "max_len", "=", "None", ")", ":", "\n", "    ", "if", "max_len", "is", "None", ":", "\n", "        ", "max_len", "=", "sequence_length", ".", "data", ".", "max", "(", ")", "\n", "", "batch_size", "=", "sequence_length", ".", "size", "(", "0", ")", "\n", "seq_range", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "long", "(", ")", "\n", "seq_range_expand", "=", "seq_range", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "max_len", ")", "\n", "seq_range_expand", "=", "Variable", "(", "seq_range_expand", ")", "\n", "if", "sequence_length", ".", "is_cuda", ":", "\n", "        ", "seq_range_expand", "=", "seq_range_expand", ".", "cuda", "(", ")", "\n", "", "seq_length_expand", "=", "(", "sequence_length", ".", "unsqueeze", "(", "1", ")", "\n", ".", "expand_as", "(", "seq_range_expand", ")", ")", "\n", "return", "seq_range_expand", "<", "seq_length_expand", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.cross_entropy": [[21, 27], ["logits.size", "torch.nn.functional.log_softmax", "torch.gather", "torch.gather", "losses_flat.sum"], "function", ["None"], ["", "def", "cross_entropy", "(", "logits", ",", "target", ")", ":", "\n", "    ", "batch_size", "=", "logits", ".", "size", "(", "0", ")", "\n", "log_probs_flat", "=", "functional", ".", "log_softmax", "(", "logits", ")", "\n", "losses_flat", "=", "-", "torch", ".", "gather", "(", "log_probs_flat", ",", "dim", "=", "1", ",", "index", "=", "target", ")", "\n", "loss", "=", "losses_flat", ".", "sum", "(", ")", "/", "batch_size", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.masked_cross_entropy": [[28, 63], ["logits.view", "torch.nn.functional.log_softmax", "target.view", "losses_flat.view", "masked_cross_entropy.sequence_mask", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "logits.size", "torch.gather", "torch.gather", "sequence_mask.float", "losses_flat.view.sum", "torch.autograd.Variable.float().sum", "torch.LongTensor", "torch.LongTensor", "target.size", "target.size", "torch.autograd.Variable", "torch.autograd.Variable.float", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.sequence_mask"], ["", "def", "masked_cross_entropy", "(", "logits", ",", "target", ",", "length", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        logits: A Variable containing a FloatTensor of size\n            (batch, max_len, num_classes) which contains the\n            unnormalized probability for each class.\n        target: A Variable containing a LongTensor of size\n            (batch, max_len) which contains the index of the true\n            class for each corresponding step.\n        length: A Variable containing a LongTensor of size (batch,)\n            which contains the length of each data in a batch.\n\n    Returns:\n        loss: An average loss value masked by the length.\n    \"\"\"", "\n", "if", "USE_CUDA", ":", "\n", "        ", "length", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "length", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "length", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "length", ")", ")", "\n", "\n", "# logits_flat: (batch * max_len, num_classes)", "\n", "", "logits_flat", "=", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "## -1 means infered from other dimentions", "\n", "# log_probs_flat: (batch * max_len, num_classes)", "\n", "log_probs_flat", "=", "functional", ".", "log_softmax", "(", "logits_flat", ",", "dim", "=", "1", ")", "\n", "# target_flat: (batch * max_len, 1)", "\n", "target_flat", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "# losses_flat: (batch * max_len, 1)", "\n", "losses_flat", "=", "-", "torch", ".", "gather", "(", "log_probs_flat", ",", "dim", "=", "1", ",", "index", "=", "target_flat", ")", "\n", "# losses: (batch, max_len)", "\n", "losses", "=", "losses_flat", ".", "view", "(", "*", "target", ".", "size", "(", ")", ")", "\n", "# mask: (batch, max_len)", "\n", "mask", "=", "sequence_mask", "(", "sequence_length", "=", "length", ",", "max_len", "=", "target", ".", "size", "(", "1", ")", ")", "\n", "losses", "=", "losses", "*", "mask", ".", "float", "(", ")", "\n", "loss", "=", "losses", ".", "sum", "(", ")", "/", "length", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.masked_binary_cross_entropy": [[64, 81], ["torch.BCEWithLogitsLoss", "range", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "logits.size", "range", "torch.autograd.Variable.float().sum", "torch.LongTensor", "torch.LongTensor", "logits.size", "torch.autograd.Variable", "nn.BCEWithLogitsLoss.", "torch.autograd.Variable.float", "torch.LongTensor", "torch.LongTensor"], "function", ["None"], ["", "def", "masked_binary_cross_entropy", "(", "logits", ",", "target", ",", "length", ")", ":", "\n", "    ", "'''\n    logits: (batch, max_len, num_class)\n    target: (batch, max_len, num_class)\n    '''", "\n", "if", "USE_CUDA", ":", "\n", "        ", "length", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "length", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "length", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "length", ")", ")", "\n", "", "bce_criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "loss", "=", "0", "\n", "for", "bi", "in", "range", "(", "logits", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "logits", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "if", "i", "<", "length", "[", "bi", "]", ":", "\n", "                ", "loss", "+=", "bce_criterion", "(", "logits", "[", "bi", "]", "[", "i", "]", ",", "target", "[", "bi", "]", "[", "i", "]", ")", "\n", "", "", "", "loss", "=", "loss", "/", "length", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.masked_cross_entropy_": [[83, 104], ["logits.view", "target.view", "losses_flat.view", "masked_cross_entropy.sequence_mask", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "logits.size", "torch.log", "torch.log", "torch.gather", "torch.gather", "sequence_mask.float", "losses_flat.view.sum", "torch.autograd.Variable.float().sum", "torch.LongTensor", "torch.LongTensor", "target.size", "target.size", "torch.autograd.Variable", "torch.autograd.Variable.float", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.sequence_mask"], ["", "def", "masked_cross_entropy_", "(", "logits", ",", "target", ",", "length", ",", "take_log", "=", "False", ")", ":", "\n", "    ", "if", "USE_CUDA", ":", "\n", "        ", "length", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "length", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "length", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "length", ")", ")", "\n", "\n", "# logits_flat: (batch * max_len, num_classes)", "\n", "", "logits_flat", "=", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "## -1 means infered from other dimentions", "\n", "if", "take_log", ":", "\n", "        ", "logits_flat", "=", "torch", ".", "log", "(", "logits_flat", ")", "\n", "# target_flat: (batch * max_len, 1)", "\n", "", "target_flat", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "# losses_flat: (batch * max_len, 1)", "\n", "losses_flat", "=", "-", "torch", ".", "gather", "(", "logits_flat", ",", "dim", "=", "1", ",", "index", "=", "target_flat", ")", "\n", "# losses: (batch, max_len)", "\n", "losses", "=", "losses_flat", ".", "view", "(", "*", "target", ".", "size", "(", ")", ")", "\n", "# mask: (batch, max_len)", "\n", "mask", "=", "sequence_mask", "(", "sequence_length", "=", "length", ",", "max_len", "=", "target", ".", "size", "(", "1", ")", ")", "\n", "losses", "=", "losses", "*", "mask", ".", "float", "(", ")", "\n", "loss", "=", "losses", ".", "sum", "(", ")", "/", "length", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.masked_coverage_loss": [[105, 116], ["masked_cross_entropy.sequence_mask", "torch.min", "torch.min", "mask.unsqueeze().expand_as.unsqueeze().expand_as", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "mask.unsqueeze().expand_as.float", "torch.min.sum", "torch.LongTensor", "torch.LongTensor", "mask.unsqueeze().expand_as.unsqueeze", "len", "torch.autograd.Variable", "torch.LongTensor", "torch.LongTensor"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.sequence_mask"], ["", "def", "masked_coverage_loss", "(", "coverage", ",", "attention", ",", "length", ")", ":", "\n", "    ", "if", "USE_CUDA", ":", "\n", "        ", "length", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "length", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "length", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "length", ")", ")", "\n", "", "mask", "=", "sequence_mask", "(", "sequence_length", "=", "length", ")", "\n", "min_", "=", "torch", ".", "min", "(", "coverage", ",", "attention", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "min_", ")", "\n", "min_", "=", "min_", "*", "mask", ".", "float", "(", ")", "\n", "loss", "=", "min_", ".", "sum", "(", ")", "/", "(", "len", "(", "length", ")", "*", "1.0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.masked_cross_entropy_for_slot": [[117, 135], ["logits.view", "target.view", "losses_flat.view", "logits.size", "torch.nn.functional.log_softmax", "torch.gather", "torch.gather", "mask.float", "losses_flat.view.sum", "target.size", "losses_flat.view.size", "losses_flat.view.size"], "function", ["None"], ["", "def", "masked_cross_entropy_for_slot", "(", "logits", ",", "target", ",", "mask", ",", "use_softmax", "=", "True", ")", ":", "\n", "# print(\"logits\", logits)", "\n", "# print(\"target\", target)", "\n", "    ", "logits_flat", "=", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "## -1 means infered from other dimentions", "\n", "# print(logits_flat.size())", "\n", "if", "use_softmax", ":", "\n", "        ", "log_probs_flat", "=", "functional", ".", "log_softmax", "(", "logits_flat", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "log_probs_flat", "=", "logits_flat", "#torch.log(logits_flat)", "\n", "# print(\"log_probs_flat\", log_probs_flat)", "\n", "", "target_flat", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "# print(\"target_flat\", target_flat)", "\n", "losses_flat", "=", "-", "torch", ".", "gather", "(", "log_probs_flat", ",", "dim", "=", "1", ",", "index", "=", "target_flat", ")", "\n", "losses", "=", "losses_flat", ".", "view", "(", "*", "target", ".", "size", "(", ")", ")", "# b * |s|", "\n", "losses", "=", "losses", "*", "mask", ".", "float", "(", ")", "\n", "loss", "=", "losses", ".", "sum", "(", ")", "/", "(", "losses", ".", "size", "(", "0", ")", "*", "losses", ".", "size", "(", "1", ")", ")", "\n", "# print(\"loss inside\", loss)", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.masked_cross_entropy_for_value": [[136, 150], ["logits.view", "torch.log", "torch.log", "target.view", "losses_flat.view", "masked_cross_entropy.masking", "logits.size", "torch.gather", "torch.gather", "target.size"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.masking"], ["", "def", "masked_cross_entropy_for_value", "(", "logits", ",", "target", ",", "mask", ")", ":", "\n", "# logits: b * |s| * m * |v|", "\n", "# target: b * |s| * m", "\n", "# mask:   b * |s|", "\n", "    ", "logits_flat", "=", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "## -1 means infered from other dimentions", "\n", "# print(logits_flat.size())", "\n", "log_probs_flat", "=", "torch", ".", "log", "(", "logits_flat", ")", "\n", "# print(\"log_probs_flat\", log_probs_flat)", "\n", "target_flat", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "# print(\"target_flat\", target_flat)", "\n", "losses_flat", "=", "-", "torch", ".", "gather", "(", "log_probs_flat", ",", "dim", "=", "1", ",", "index", "=", "target_flat", ")", "\n", "losses", "=", "losses_flat", ".", "view", "(", "*", "target", ".", "size", "(", ")", ")", "# b * |s| * m", "\n", "loss", "=", "masking", "(", "losses", ",", "mask", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.masking": [[151, 169], ["mask.size", "losses.size", "range", "torch.stack", "torch.stack", "mask_.cuda.transpose", "mask.size", "torch.arange().long", "torch.arange().long", "torch.arange().long.unsqueeze().expand", "mask[].unsqueeze().expand_as", "mask_.cuda.append", "mask_.cuda.cuda", "mask_.cuda.float", "losses.sum", "mask_.cuda.sum().float", "seq_range_expand.cuda.cuda", "torch.arange", "torch.arange", "torch.arange().long.unsqueeze", "mask[].unsqueeze", "mask_.cuda.sum"], "function", ["None"], ["", "def", "masking", "(", "losses", ",", "mask", ")", ":", "\n", "    ", "mask_", "=", "[", "]", "\n", "batch_size", "=", "mask", ".", "size", "(", "0", ")", "\n", "max_len", "=", "losses", ".", "size", "(", "2", ")", "\n", "for", "si", "in", "range", "(", "mask", ".", "size", "(", "1", ")", ")", ":", "\n", "        ", "seq_range", "=", "torch", ".", "arange", "(", "0", ",", "max_len", ")", ".", "long", "(", ")", "\n", "seq_range_expand", "=", "seq_range", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "batch_size", ",", "max_len", ")", "\n", "if", "mask", "[", ":", ",", "si", "]", ".", "is_cuda", ":", "\n", "            ", "seq_range_expand", "=", "seq_range_expand", ".", "cuda", "(", ")", "\n", "", "seq_length_expand", "=", "mask", "[", ":", ",", "si", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "seq_range_expand", ")", "\n", "mask_", ".", "append", "(", "(", "seq_range_expand", "<", "seq_length_expand", ")", ")", "\n", "", "mask_", "=", "torch", ".", "stack", "(", "mask_", ")", "\n", "mask_", "=", "mask_", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "losses", ".", "is_cuda", ":", "\n", "        ", "mask_", "=", "mask_", ".", "cuda", "(", ")", "\n", "", "losses", "=", "losses", "*", "mask_", ".", "float", "(", ")", "\n", "loss", "=", "losses", ".", "sum", "(", ")", "/", "(", "mask_", ".", "sum", "(", ")", ".", "float", "(", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.__init__": [[22, 27], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "word2index", "=", "{", "}", "\n", "self", ".", "word2count", "=", "{", "}", "\n", "self", ".", "index2word", "=", "{", "1", ":", "\"PAD\"", ",", "3", ":", "\"SOS\"", ",", "2", ":", "\"EOS\"", ",", "0", ":", "'UNK'", "}", "\n", "self", ".", "n_words", "=", "4", "# Count default tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_words": [[28, 36], ["story.split", "utils_temp.Lang.index_word", "utils_temp.Lang.index_word"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_word", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_word"], ["", "def", "index_words", "(", "self", ",", "story", ",", "trg", "=", "False", ")", ":", "\n", "        ", "if", "trg", ":", "\n", "            ", "for", "word", "in", "story", ".", "split", "(", "' '", ")", ":", "\n", "                ", "self", ".", "index_word", "(", "word", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "word_triple", "in", "story", ":", "\n", "                ", "for", "word", "in", "word_triple", ":", "\n", "                    ", "self", ".", "index_word", "(", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_word": [[37, 45], ["None"], "methods", ["None"], ["", "", "", "", "def", "index_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "word2index", ":", "\n", "            ", "self", ".", "word2index", "[", "word", "]", "=", "self", ".", "n_words", "\n", "self", ".", "word2count", "[", "word", "]", "=", "1", "\n", "self", ".", "index2word", "[", "self", ".", "n_words", "]", "=", "word", "\n", "self", ".", "n_words", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "word2count", "[", "word", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Dataset.__init__": [[51, 67], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_item", ",", "src_word2id", ",", "trg_word2id", ",", "max_len", ",", "query2idx", ")", ":", "\n", "        ", "\"\"\"Reads source and target sequences from txt files.\"\"\"", "\n", "self", ".", "dialID", "=", "data_item", "[", "'dialID'", "]", "\n", "self", ".", "turnID", "=", "data_item", "[", "'turnID'", "]", "\n", "self", ".", "content_arr", "=", "data_item", "[", "'content_arr'", "]", "\n", "self", ".", "bot_action_idx", "=", "data_item", "[", "'bot_action_idx'", "]", "\n", "self", ".", "bot_action", "=", "data_item", "[", "'bot_action'", "]", "\n", "self", ".", "ent_query", "=", "data_item", "[", "'ent_query'", "]", "\n", "self", ".", "ent_query_idx", "=", "data_item", "[", "'ent_query_idx'", "]", "\n", "self", ".", "gold_response", "=", "data_item", "[", "'gold_response'", "]", "\n", "self", ".", "src_plain", "=", "data_item", "[", "'content_arr'", "]", "\n", "self", ".", "num_total_seqs", "=", "len", "(", "self", ".", "content_arr", ")", "\n", "self", ".", "src_word2id", "=", "src_word2id", "\n", "self", ".", "trg_word2id", "=", "trg_word2id", "\n", "self", ".", "max_len", "=", "max_len", "\n", "self", ".", "query2idx", "=", "query2idx", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Dataset.__getitem__": [[68, 86], ["utils_temp.Dataset.preprocess", "utils_temp.Dataset.preprocess_query"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Dataset.preprocess", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Dataset.preprocess_query"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Returns one data pair (source and target).\"\"\"", "\n", "dialID", "=", "self", ".", "dialID", "[", "index", "]", "\n", "turnID", "=", "self", ".", "turnID", "[", "index", "]", "\n", "content_arr", "=", "self", ".", "content_arr", "[", "index", "]", "\n", "bot_action_idx", "=", "self", ".", "bot_action_idx", "[", "index", "]", "\n", "bot_action", "=", "self", ".", "bot_action", "[", "index", "]", "\n", "ent_query", "=", "self", ".", "ent_query", "[", "index", "]", "\n", "ent_query_idx", "=", "self", ".", "ent_query_idx", "[", "index", "]", "\n", "gold_response", "=", "self", ".", "gold_response", "[", "index", "]", "\n", "src_plain", "=", "self", ".", "content_arr", "[", "index", "]", "\n", "\n", "content_arr", "=", "self", ".", "preprocess", "(", "content_arr", ",", "self", ".", "src_word2id", ")", "\n", "q", ",", "q_idx", "=", "self", ".", "preprocess_query", "(", "ent_query_idx", ",", "ent_query", ")", "\n", "\n", "item_dict", "=", "{", "'dialID'", ":", "dialID", ",", "'turnID'", ":", "turnID", ",", "'content_arr'", ":", "content_arr", ",", "'bot_action_idx'", ":", "bot_action_idx", ",", "'bot_action'", ":", "bot_action", ",", "\n", "'ent_query'", ":", "q", ",", "'ent_query_idx'", ":", "q_idx", ",", "'gold_response'", ":", "gold_response", ",", "'src_plain'", ":", "src_plain", "}", "\n", "return", "item_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Dataset.__len__": [[87, 89], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_total_seqs", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Dataset.preprocess": [[90, 104], ["enumerate", "torch.LongTensor.append", "torch.LongTensor.append", "torch.LongTensor.append", "torch.LongTensor.append", "torch.LongTensor.append", "enumerate", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "story[].append", "print", "exit"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "sequence", ",", "word2idx", ")", ":", "\n", "        ", "\"\"\"Converts words to idx.\"\"\"", "\n", "story", "=", "[", "]", "\n", "for", "i", ",", "word_triple", "in", "enumerate", "(", "sequence", ")", ":", "\n", "            ", "story", ".", "append", "(", "[", "]", ")", "\n", "for", "ii", ",", "word", "in", "enumerate", "(", "word_triple", ")", ":", "\n", "                ", "temp", "=", "word2idx", "[", "word", "]", "if", "word", "in", "word2idx", "else", "UNK_token", "\n", "story", "[", "i", "]", ".", "append", "(", "temp", ")", "\n", "", "", "try", ":", "\n", "            ", "story", "=", "torch", ".", "LongTensor", "(", "story", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"Cannot change to tensor...\"", ")", "\n", "exit", "(", "1", ")", "\n", "", "return", "story", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Dataset.preprocess_query": [[105, 111], ["None"], "methods", ["None"], ["", "def", "preprocess_query", "(", "self", ",", "ent_query_idx", ",", "ent_query", ")", ":", "\n", "        ", "\"\"\"Converts entity query to idx.\"\"\"", "\n", "ent", "=", "ent_query", "[", "0", "]", "\n", "q", "=", "[", "self", ".", "query2idx", "[", "ent", "]", "]", "\n", "q_idx", "=", "ent_query_idx", "[", "1", "]", "\n", "return", "q", ",", "q_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.collate_fn": [[112, 158], ["torch.sort", "data[].keys", "utils_temp.collate_fn.merge"], "function", ["None"], ["", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "\n", "    ", "def", "merge", "(", "sequences", ",", "max_len", ")", ":", "\n", "        ", "lengths", "=", "[", "len", "(", "seq", ")", "for", "seq", "in", "sequences", "]", "\n", "if", "(", "max_len", ")", ":", "\n", "            ", "padded_seqs", "=", "torch", ".", "ones", "(", "len", "(", "sequences", ")", ",", "max", "(", "lengths", ")", ",", "MEM_TOKEN_SIZE", ")", ".", "long", "(", ")", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "sequences", ")", ":", "\n", "                ", "end", "=", "lengths", "[", "i", "]", "\n", "if", "len", "(", "seq", ")", "!=", "0", ":", "\n", "                    ", "padded_seqs", "[", "i", ",", ":", "end", ",", ":", "]", "=", "seq", "[", ":", "end", "]", "\n", "", "", "", "else", ":", "\n", "            ", "padded_seqs", "=", "torch", ".", "ones", "(", "len", "(", "sequences", ")", ",", "max", "(", "lengths", ")", ")", ".", "long", "(", ")", "\n", "for", "i", ",", "seq", "in", "enumerate", "(", "sequences", ")", ":", "\n", "                ", "end", "=", "lengths", "[", "i", "]", "\n", "padded_seqs", "[", "i", ",", ":", "end", "]", "=", "seq", "[", ":", "end", "]", "\n", "", "", "return", "padded_seqs", ",", "lengths", "\n", "\n", "# sort a list by sequence length (descending order) to use pack_padded_sequence", "\n", "", "data", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "'content_arr'", "]", ")", ",", "reverse", "=", "True", ")", "\n", "# seperate source and target sequences", "\n", "#src_seqs, trg_seqs, ind_seqs, target_plain, max_len, src_plain = zip(*data)", "\n", "item_info", "=", "{", "}", "\n", "for", "key", "in", "data", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "        ", "item_info", "[", "key", "]", "=", "[", "d", "[", "key", "]", "for", "d", "in", "data", "]", "\n", "\n", "# merge sequences (from tuple of 1D tensor to 2D tensor)", "\n", "", "content_arr", ",", "content_arr_len", "=", "merge", "(", "item_info", "[", "'content_arr'", "]", ",", "True", ")", "\n", "#ind_seqs, ind_lenght = merge(ind_seqs, None)", "\n", "\n", "content_arr", "=", "Variable", "(", "content_arr", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "bot_action_idx", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "item_info", "[", "'bot_action_idx'", "]", ")", ")", "\n", "ent_query", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "item_info", "[", "'ent_query'", "]", ")", ")", "\n", "ent_query_idx", "=", "Variable", "(", "torch", ".", "LongTensor", "(", "item_info", "[", "'ent_query_idx'", "]", ")", ")", "\n", "\n", "if", "USE_CUDA", ":", "\n", "        ", "content_arr", "=", "content_arr", ".", "cuda", "(", ")", "\n", "bot_action_idx", "=", "bot_action_idx", ".", "cuda", "(", ")", "\n", "ent_query", "=", "ent_query", ".", "cuda", "(", ")", "\n", "ent_query_idx", "=", "ent_query_idx", ".", "cuda", "(", ")", "\n", "\n", "", "data_form", "=", "{", "'dailID'", ":", "item_info", "[", "'dialID'", "]", ",", "'turnID'", ":", "item_info", "[", "'turnID'", "]", ",", "'content_arr'", ":", "content_arr", ",", "'content_arr_len'", ":", "content_arr_len", ",", "\n", "'bot_action_idx'", ":", "bot_action_idx", ",", "'bot_action'", ":", "item_info", "[", "'bot_action'", "]", ",", "\n", "'ent_query'", ":", "ent_query", ",", "'ent_query_idx'", ":", "ent_query_idx", ",", "'gold_response'", ":", "item_info", "[", "'gold_response'", "]", ",", "\n", "'src_plain'", ":", "item_info", "[", "'src_plain'", "]", "}", "\n", "\n", "return", "data_form", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.unicode_to_ascii": [[160, 162], ["unicodedata.normalize", "unicodedata.category"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.None.create_data.normalize"], ["", "def", "unicode_to_ascii", "(", "s", ")", ":", "\n", "    ", "return", "''", ".", "join", "(", "c", "for", "c", "in", "unicodedata", ".", "normalize", "(", "'NFD'", ",", "s", ")", "if", "unicodedata", ".", "category", "(", "c", ")", "!=", "'Mn'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.normalize_string": [[164, 173], ["utils_temp.unicode_to_ascii", "re.sub", "re.sub", "re.sub().strip", "re.sub().strip.lower().strip", "re.sub", "re.sub().strip.lower"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.unicode_to_ascii"], ["", "def", "normalize_string", "(", "s", ")", ":", "\n", "\n", "    ", "s", "=", "unicode_to_ascii", "(", "s", ".", "lower", "(", ")", ".", "strip", "(", ")", ")", "\n", "if", "s", "==", "'<silence>'", ":", "\n", "        ", "return", "s", "\n", "", "s", "=", "re", ".", "sub", "(", "r\"([,.!?])\"", ",", "r\" \\1 \"", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "r\"[^a-zA-Z,.!?]+\"", ",", "r\" \"", ",", "s", ")", "\n", "s", "=", "re", ".", "sub", "(", "r\"\\s+\"", ",", "r\" \"", ",", "s", ")", ".", "strip", "(", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.read_langs": [[174, 269], ["logging.info", "max", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "print", "open", "line.strip.strip", "len", "line.strip.split", "line.strip.split", "utils_temp.generate_memory", "enumerate", "ent_query.keys", "utils_temp.generate_memory", "utils_temp.generate_memory", "str", "r.split", "torch.append", "str", "len", "max", "print", "exit", "enumerate", "bot_action.split", "bot_action.split"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.generate_memory", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.generate_memory", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.generate_memory"], ["", "def", "read_langs", "(", "file_name", ",", "entity", ",", "cand2DLidx", ",", "idx2candDL", ",", "max_line", "=", "None", ")", ":", "\n", "    ", "logging", ".", "info", "(", "(", "\"Reading lines from {}\"", ".", "format", "(", "file_name", ")", ")", ")", "\n", "data", "=", "[", "]", "\n", "content_arr", "=", "[", "]", "\n", "#conversation_arr = []", "\n", "u", "=", "None", "\n", "r", "=", "None", "\n", "user_counter", "=", "0", "\n", "system_counter", "=", "0", "\n", "system_res_counter", "=", "0", "\n", "KB_counter", "=", "0", "\n", "dialog_counter", "=", "0", "\n", "with", "open", "(", "file_name", ")", "as", "fin", ":", "\n", "#cnt_ptr = 0", "\n", "#cnt_voc = 0", "\n", "        ", "max_r_len", "=", "0", "\n", "cnt_lin", "=", "1", "\n", "time_counter", "=", "1", "\n", "for", "line", "in", "fin", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "                ", "nid", ",", "line", "=", "line", ".", "split", "(", "' '", ",", "1", ")", "\n", "if", "'\\t'", "in", "line", ":", "\n", "                    ", "u", ",", "r", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "if", "u", "!=", "'<SILENCE>'", ":", "user_counter", "+=", "1", "\n", "system_counter", "+=", "1", "\n", "bot_action_idx", "=", "cand2DLidx", "[", "r", "]", "\n", "bot_action", "=", "idx2candDL", "[", "bot_action_idx", "]", "\n", "\n", "gen_u", "=", "generate_memory", "(", "u", ",", "\"$u\"", ",", "str", "(", "time_counter", ")", ")", "\n", "content_arr", "+=", "gen_u", "\n", "#conversation_arr += gen_u", "\n", "\n", "ent_query", "=", "{", "}", "\n", "ent_query_idx", "=", "{", "}", "\n", "for", "idx", ",", "key", "in", "enumerate", "(", "r", ".", "split", "(", "' '", ")", ")", ":", "\n", "                        ", "if", "(", "key", "in", "entity", ")", ":", "\n", "                            ", "index", "=", "[", "loc", "for", "loc", ",", "val", "in", "enumerate", "(", "content_arr", ")", "if", "(", "val", "[", "0", "]", "==", "key", ")", "]", "\n", "if", "(", "index", ")", ":", "\n", "                                ", "index", "=", "max", "(", "index", ")", "\n", "#cnt_ptr += 1", "\n", "ent_query_idx", "[", "bot_action", ".", "split", "(", "' '", ")", "[", "idx", "]", "]", "=", "index", "\n", "ent_query", "[", "bot_action", ".", "split", "(", "' '", ")", "[", "idx", "]", "]", "=", "key", "\n", "", "else", ":", "\n", "                                ", "print", "(", "'[Wrong] Cannot find the entity'", ")", "\n", "exit", "(", "1", ")", "\n", "", "", "system_res_counter", "+=", "1", "\n", "\n", "", "if", "ent_query", "==", "{", "}", ":", "\n", "                        ", "ent_query", "=", "{", "'UNK'", ":", "'$$$$'", "}", "\n", "ent_query_idx", "=", "{", "'UNK'", ":", "len", "(", "content_arr", ")", "}", "\n", "content_arr_temp", "=", "content_arr", "+", "[", "[", "'$$$$'", "]", "*", "MEM_TOKEN_SIZE", "]", "\n", "", "else", ":", "\n", "                        ", "content_arr_temp", "=", "content_arr", "\n", "# ent = []", "\n", "# for key in r.split(' '):", "\n", "#     if(key in entity):", "\n", "#         ent.append(key)", "\n", "\n", "", "for", "ent", "in", "ent_query", ".", "keys", "(", ")", ":", "\n", "                        ", "data_item", "=", "{", "'dialID'", ":", "dialog_counter", ",", "'turnID'", ":", "system_counter", ",", "'content_arr'", ":", "content_arr_temp", ",", "'bot_action'", ":", "bot_action", ",", "'bot_action_idx'", ":", "bot_action_idx", ",", "\n", "'ent_query'", ":", "[", "ent", ",", "ent_query", "[", "ent", "]", "]", ",", "'ent_query_idx'", ":", "[", "ent", ",", "ent_query_idx", "[", "ent", "]", "]", ",", "'gold_response'", ":", "r", "}", "\n", "data", ".", "append", "(", "data_item", ")", "\n", "\n", "\n", "#data.append([content_arr_temp,r,r_index,conversation_arr,ent])", "\n", "", "gen_r", "=", "generate_memory", "(", "r", ",", "\"$s\"", ",", "str", "(", "time_counter", ")", ")", "\n", "content_arr", "+=", "gen_r", "\n", "#conversation_arr += gen_r", "\n", "time_counter", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "KB_counter", "+=", "1", "\n", "r", "=", "line", "\n", "content_arr", "+=", "generate_memory", "(", "r", ",", "\"\"", ",", "\"\"", ")", "\n", "", "", "else", ":", "\n", "                ", "cnt_lin", "+=", "1", "\n", "if", "(", "max_line", "and", "cnt_lin", ">=", "max_line", ")", ":", "\n", "                    ", "break", "\n", "", "content_arr", "=", "[", "]", "\n", "content_arr_temp", "=", "[", "]", "\n", "#conversation_arr = []", "\n", "time_counter", "=", "1", "\n", "dialog_counter", "+=", "1", "\n", "", "", "", "max_len", "=", "max", "(", "[", "len", "(", "d", "[", "'content_arr'", "]", ")", "for", "d", "in", "data", "]", ")", "\n", "logging", ".", "info", "(", "\"Nb of dialogs = {} \"", ".", "format", "(", "dialog_counter", ")", ")", "\n", "#logging.info(\"Pointer percentace= {} \".format(cnt_ptr/(cnt_ptr+cnt_voc)))", "\n", "logging", ".", "info", "(", "\"Max responce Len: {}\"", ".", "format", "(", "max_r_len", ")", ")", "\n", "logging", ".", "info", "(", "\"Max Input Len: {}\"", ".", "format", "(", "max_len", ")", ")", "\n", "logging", ".", "info", "(", "\"Avg. User Utterances: {}\"", ".", "format", "(", "user_counter", "*", "1.0", "/", "dialog_counter", ")", ")", "\n", "logging", ".", "info", "(", "\"Avg. Bot Utterances: {}\"", ".", "format", "(", "system_counter", "*", "1.0", "/", "dialog_counter", ")", ")", "\n", "logging", ".", "info", "(", "\"Avg. KB results: {}\"", ".", "format", "(", "KB_counter", "*", "1.0", "/", "dialog_counter", ")", ")", "\n", "logging", ".", "info", "(", "\"Avg. responce Len: {}\"", ".", "format", "(", "system_res_counter", "*", "1.0", "/", "system_counter", ")", ")", "\n", "\n", "print", "(", "'Sample: '", ",", "data", "[", "5", "]", ")", "\n", "return", "data", ",", "max_len", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.generate_memory": [[270, 284], ["sent.split", "enumerate", "sent_new.append", "sent_new.append", "str", "str", "len", "len"], "function", ["None"], ["", "def", "generate_memory", "(", "sent", ",", "speaker", ",", "time", ")", ":", "\n", "    ", "sent_new", "=", "[", "]", "\n", "sent_token", "=", "sent", ".", "split", "(", "' '", ")", "\n", "if", "speaker", "==", "\"$u\"", "or", "speaker", "==", "\"$s\"", ":", "\n", "        ", "for", "idx", ",", "word", "in", "enumerate", "(", "sent_token", ")", ":", "\n", "            ", "temp", "=", "[", "word", ",", "speaker", ",", "'turn'", "+", "str", "(", "time", ")", ",", "'word'", "+", "str", "(", "idx", ")", "]", "+", "[", "\"PAD\"", "]", "*", "(", "MEM_TOKEN_SIZE", "-", "4", ")", "\n", "sent_new", ".", "append", "(", "temp", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "sent_token", "[", "1", "]", "==", "\"R_rating\"", ":", "\n", "            ", "sent_token", "=", "sent_token", "+", "[", "\"PAD\"", "]", "*", "(", "MEM_TOKEN_SIZE", "-", "len", "(", "sent_token", ")", ")", "\n", "", "else", ":", "\n", "            ", "sent_token", "=", "sent_token", "[", ":", ":", "-", "1", "]", "+", "[", "\"PAD\"", "]", "*", "(", "MEM_TOKEN_SIZE", "-", "len", "(", "sent_token", ")", ")", "\n", "", "sent_new", ".", "append", "(", "sent_token", ")", "\n", "", "return", "sent_new", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_seq": [[285, 317], ["utils_temp.Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dialID_arr.append", "turnID_arr.append", "content_arr.append", "bot_action.append", "bot_action_idx.append", "ent_query.append", "ent_query_idx.append", "gold_response.append", "lang.index_words", "lang.index_words"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_words", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.Lang.index_words"], ["", "def", "get_seq", "(", "pairs", ",", "lang", ",", "batch_size", ",", "type", ",", "max_len", ",", "query2idx", ")", ":", "\n", "    ", "dialID_arr", "=", "[", "]", "\n", "turnID_arr", "=", "[", "]", "\n", "content_arr", "=", "[", "]", "\n", "bot_action", "=", "[", "]", "\n", "bot_action_idx", "=", "[", "]", "\n", "ent_query", "=", "[", "]", "\n", "ent_query_idx", "=", "[", "]", "\n", "gold_response", "=", "[", "]", "\n", "\n", "for", "pair", "in", "pairs", ":", "\n", "        ", "dialID_arr", ".", "append", "(", "pair", "[", "'dialID'", "]", ")", "\n", "turnID_arr", ".", "append", "(", "pair", "[", "'turnID'", "]", ")", "\n", "content_arr", ".", "append", "(", "pair", "[", "'content_arr'", "]", ")", "\n", "bot_action", ".", "append", "(", "pair", "[", "'bot_action'", "]", ")", "\n", "bot_action_idx", ".", "append", "(", "pair", "[", "'bot_action_idx'", "]", ")", "\n", "ent_query", ".", "append", "(", "pair", "[", "'ent_query'", "]", ")", "\n", "ent_query_idx", ".", "append", "(", "pair", "[", "'ent_query_idx'", "]", ")", "\n", "gold_response", ".", "append", "(", "pair", "[", "'gold_response'", "]", ")", "\n", "if", "(", "type", ")", ":", "\n", "            ", "lang", ".", "index_words", "(", "pair", "[", "'content_arr'", "]", ")", "\n", "lang", ".", "index_words", "(", "pair", "[", "'bot_action'", "]", ",", "trg", "=", "True", ")", "\n", "\n", "", "", "data_item", "=", "{", "'dialID'", ":", "dialID_arr", ",", "'turnID'", ":", "turnID_arr", ",", "'content_arr'", ":", "content_arr", ",", "'bot_action'", ":", "bot_action", ",", "'bot_action_idx'", ":", "bot_action_idx", ",", "\n", "'ent_query'", ":", "ent_query", ",", "'ent_query_idx'", ":", "ent_query_idx", ",", "'gold_response'", ":", "gold_response", "}", "\n", "\n", "dataset", "=", "Dataset", "(", "data_item", ",", "lang", ".", "word2index", ",", "lang", ".", "word2index", ",", "max_len", ",", "query2idx", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "type", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "return", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_type_dict": [[318, 348], ["open", "line.replace().split", "[].split", "[].replace", "type_dict[].append", "type_dict.keys", "type_dict[].append", "line.replace", "line.split", "line.split"], "function", ["None"], ["", "def", "get_type_dict", "(", "kb_path", ",", "dstc2", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Specifically, we augment the vocabulary with some special words, one for each of the KB entity types \n    For each type, the corresponding type word is added to the candidate representation if a word is found that appears \n    1) as a KB entity of that type, \n    \"\"\"", "\n", "type_dict", "=", "{", "'R_restaurant'", ":", "[", "]", "}", "\n", "\n", "kb_path_temp", "=", "kb_path", "\n", "fd", "=", "open", "(", "kb_path_temp", ",", "'r'", ")", "\n", "\n", "for", "line", "in", "fd", ":", "\n", "        ", "if", "dstc2", ":", "\n", "            ", "x", "=", "line", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "' '", ")", "\n", "rest_name", "=", "x", "[", "1", "]", "\n", "entity", "=", "x", "[", "2", "]", "\n", "entity_value", "=", "x", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "x", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "0", "]", ".", "split", "(", "' '", ")", "\n", "rest_name", "=", "x", "[", "1", "]", "\n", "entity", "=", "x", "[", "2", "]", "\n", "entity_value", "=", "line", ".", "split", "(", "'\\t'", ")", "[", "1", "]", ".", "replace", "(", "'\\n'", ",", "''", ")", "\n", "\n", "", "if", "rest_name", "not", "in", "type_dict", "[", "'R_restaurant'", "]", ":", "\n", "            ", "type_dict", "[", "'R_restaurant'", "]", ".", "append", "(", "rest_name", ")", "\n", "", "if", "entity", "not", "in", "type_dict", ".", "keys", "(", ")", ":", "\n", "            ", "type_dict", "[", "entity", "]", "=", "[", "]", "\n", "", "if", "entity_value", "not", "in", "type_dict", "[", "entity", "]", ":", "\n", "            ", "type_dict", "[", "entity", "]", ".", "append", "(", "entity_value", ")", "\n", "", "", "return", "type_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.entityList": [[349, 356], ["utils_temp.get_type_dict", "get_type_dict.keys", "entity_list.append"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_type_dict"], ["", "def", "entityList", "(", "kb_path", ",", "task_id", ")", ":", "\n", "    ", "type_dict", "=", "get_type_dict", "(", "kb_path", ",", "dstc2", "=", "(", "task_id", "==", "6", ")", ")", "\n", "entity_list", "=", "[", "]", "\n", "for", "key", "in", "type_dict", ".", "keys", "(", ")", ":", "\n", "        ", "for", "value", "in", "type_dict", "[", "key", "]", ":", "\n", "            ", "entity_list", ".", "append", "(", "value", ")", "\n", "", "", "return", "entity_list", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.load_candidates": [[358, 375], ["open", "enumerate", "line.strip().split", "candidates.append", "line.strip().split", "line.strip", "line.strip().split", "line.strip", "line.strip"], "function", ["None"], ["", "def", "load_candidates", "(", "task_id", ",", "candidates_f", ")", ":", "\n", "# containers", "\n", "#type_dict = get_type_dict(KB_DIR, dstc2=(task_id==6))", "\n", "    ", "candidates", ",", "candid2idx", ",", "idx2candid", "=", "[", "]", ",", "{", "}", ",", "{", "}", "\n", "# update data source file based on task id", "\n", "#candidates_f = DATA_SOURCE_TASK6 if task_id==6 else candidates_f", "\n", "\n", "# read from file", "\n", "with", "open", "(", "candidates_f", ")", "as", "f", ":", "\n", "# iterate through lines", "\n", "        ", "for", "i", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "# tokenize each line into... well.. tokens!", "\n", "            ", "temp", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "candid2idx", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "[", "1", "]", "]", "=", "i", "\n", "candidates", ".", "append", "(", "temp", "[", "1", ":", "]", ")", "\n", "idx2candid", "[", "i", "]", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ",", "1", ")", "[", "1", "]", "\n", "", "", "return", "candidates", ",", "candid2idx", ",", "idx2candid", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.candid2DL": [[376, 402], ["utils_temp.get_type_dict", "utils_temp.entityList", "utils_temp.load_candidates", "enumerate", "list", "dict", "dict", "candid2candDL.keys", "int", "enumerate", "candid_all.append", "set", "enumerate", "dict.items"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_type_dict", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.entityList", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.load_candidates"], ["", "def", "candid2DL", "(", "candid_path", ",", "kb_path", ",", "task_id", ")", ":", "\n", "    ", "type_dict", "=", "get_type_dict", "(", "kb_path", ",", "dstc2", "=", "(", "task_id", "==", "6", ")", ")", "\n", "ent_list", "=", "entityList", "(", "kb_path", ",", "int", "(", "task_id", ")", ")", "\n", "candidates", ",", "_", ",", "_", "=", "load_candidates", "(", "task_id", "=", "task_id", ",", "candidates_f", "=", "candid_path", ")", "\n", "candid_all", "=", "[", "]", "\n", "candid2candDL", "=", "{", "}", "\n", "for", "index", ",", "cand", "in", "enumerate", "(", "candidates", ")", ":", "\n", "        ", "cand_DL", "=", "[", "x", "for", "x", "in", "cand", "]", "\n", "for", "index", ",", "word", "in", "enumerate", "(", "cand_DL", ")", ":", "\n", "            ", "if", "word", "in", "ent_list", ":", "\n", "                ", "for", "type_name", "in", "type_dict", ":", "\n", "                    ", "if", "word", "in", "type_dict", "[", "type_name", "]", "and", "type_name", "!=", "'R_rating'", ":", "\n", "                        ", "cand_DL", "[", "index", "]", "=", "type_name", "\n", "break", "\n", "", "", "", "", "cand_DL", "=", "' '", ".", "join", "(", "cand_DL", ")", "\n", "candid_all", ".", "append", "(", "cand_DL", ")", "\n", "candid2candDL", "[", "' '", ".", "join", "(", "cand", ")", "]", "=", "cand_DL", "\n", "", "cand_list", "=", "list", "(", "set", "(", "candid_all", ")", ")", "\n", "candDL2idx", "=", "dict", "(", "(", "c", ",", "i", ")", "for", "i", ",", "c", "in", "enumerate", "(", "cand_list", ")", ")", "\n", "idx2candDL", "=", "dict", "(", "(", "i", ",", "c", ")", "for", "c", ",", "i", "in", "candDL2idx", ".", "items", "(", ")", ")", "\n", "\n", "cand2DLidx", "=", "{", "}", "\n", "for", "key", "in", "candid2candDL", ".", "keys", "(", ")", ":", "\n", "        ", "cand2DLidx", "[", "key", "]", "=", "candDL2idx", "[", "candid2candDL", "[", "key", "]", "]", "\n", "\n", "", "return", "cand2DLidx", ",", "idx2candDL", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.prepare_data_seq": [[404, 453], ["utils_temp.entityList", "utils_temp.candid2DL", "utils_temp.read_langs", "utils_temp.read_langs", "utils_temp.read_langs", "utils_temp.Lang", "utils_temp.get_seq", "utils_temp.get_seq", "utils_temp.get_seq", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "int", "int", "int", "int", "utils_temp.read_langs", "max", "int", "utils_temp.get_seq", "int", "logging.info", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.entityList", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.candid2DL", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.read_langs", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.read_langs", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.read_langs", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_seq", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_seq", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_seq", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.read_langs", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.utils_temp.get_seq"], ["", "def", "prepare_data_seq", "(", "task", ",", "batch_size", "=", "100", ")", ":", "\n", "    ", "file_train", "=", "'data/dialog-bAbI-tasks/dialog-babi-task{}trn.txt'", ".", "format", "(", "task", ")", "\n", "file_dev", "=", "'data/dialog-bAbI-tasks/dialog-babi-task{}dev.txt'", ".", "format", "(", "task", ")", "\n", "file_test", "=", "'data/dialog-bAbI-tasks/dialog-babi-task{}tst.txt'", ".", "format", "(", "task", ")", "\n", "if", "(", "int", "(", "task", ")", "!=", "6", ")", ":", "\n", "        ", "file_test_OOV", "=", "'data/dialog-bAbI-tasks/dialog-babi-task{}tst-OOV.txt'", ".", "format", "(", "task", ")", "\n", "candid_file_path", "=", "'data/dialog-bAbI-tasks/dialog-babi-candidates.txt'", "\n", "kb_path", "=", "'data/dialog-bAbI-tasks/dialog-babi-kb-all.txt'", "\n", "", "else", ":", "\n", "        ", "candid_file_path", "=", "'data/dialog-bAbI-tasks/dialog-babi-task6-dstc2-candidates.txt'", "\n", "kb_path", "=", "'data/dialog-bAbI-tasks/dialog-babi-task6-dstc2-kb.txt'", "\n", "\n", "", "query2idx", "=", "{", "'UNK'", ":", "0", ",", "'R_restaurant'", ":", "7", ",", "'R_cuisine'", ":", "1", ",", "'R_location'", ":", "2", ",", "'R_price'", ":", "3", ",", "'R_number'", ":", "4", ",", "\n", "'R_phone'", ":", "5", ",", "'R_address'", ":", "6", "}", "\n", "\n", "ent", "=", "entityList", "(", "kb_path", ",", "int", "(", "task", ")", ")", "\n", "cand2DLidx", ",", "idx2candDL", "=", "candid2DL", "(", "candid_file_path", ",", "kb_path", ",", "int", "(", "task", ")", ")", "\n", "\n", "pair_train", ",", "max_len_train", "=", "read_langs", "(", "file_train", ",", "ent", ",", "cand2DLidx", ",", "idx2candDL", ",", "max_line", "=", "None", ")", "\n", "pair_dev", ",", "max_len_dev", "=", "read_langs", "(", "file_dev", ",", "ent", ",", "cand2DLidx", ",", "idx2candDL", ",", "max_line", "=", "None", ")", "\n", "pair_test", ",", "max_len_test", "=", "read_langs", "(", "file_test", ",", "ent", ",", "cand2DLidx", ",", "idx2candDL", ",", "max_line", "=", "None", ")", "\n", "\n", "max_r_test_OOV", "=", "0", "\n", "if", "(", "int", "(", "task", ")", "!=", "6", ")", ":", "\n", "        ", "pair_test_OOV", ",", "max_len_test_OOV", "=", "read_langs", "(", "file_test_OOV", ",", "ent", ",", "cand2DLidx", ",", "idx2candDL", ",", "max_line", "=", "None", ")", "\n", "\n", "", "max_len", "=", "max", "(", "max_len_train", ",", "max_len_dev", ",", "max_len_test", ",", "max_len_test_OOV", ")", "+", "1", "\n", "max_r", "=", "-", "1", "#max(max_r_train,max_r_dev,max_r_test,max_r_test_OOV) +1", "\n", "lang", "=", "Lang", "(", ")", "\n", "\n", "train", "=", "get_seq", "(", "pair_train", ",", "lang", ",", "batch_size", ",", "True", ",", "max_len", ",", "query2idx", ")", "\n", "dev", "=", "get_seq", "(", "pair_dev", ",", "lang", ",", "batch_size", ",", "False", ",", "max_len", ",", "query2idx", ")", "\n", "test", "=", "get_seq", "(", "pair_test", ",", "lang", ",", "batch_size", ",", "False", ",", "max_len", ",", "query2idx", ")", "\n", "\n", "if", "(", "int", "(", "task", ")", "!=", "6", ")", ":", "\n", "        ", "testOOV", "=", "get_seq", "(", "pair_test_OOV", ",", "lang", ",", "batch_size", ",", "False", ",", "max_len", ",", "query2idx", ")", "\n", "", "else", ":", "\n", "        ", "testOOV", "=", "[", "]", "\n", "\n", "", "logging", ".", "info", "(", "\"Read %s sentence pairs train\"", "%", "len", "(", "pair_train", ")", ")", "\n", "logging", ".", "info", "(", "\"Read %s sentence pairs dev\"", "%", "len", "(", "pair_dev", ")", ")", "\n", "logging", ".", "info", "(", "\"Read %s sentence pairs test\"", "%", "len", "(", "pair_test", ")", ")", "\n", "if", "(", "int", "(", "task", ")", "!=", "6", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Read %s sentence pairs testoov\"", "%", "len", "(", "pair_test_OOV", ")", ")", "\n", "", "logging", ".", "info", "(", "\"Max len Input %s \"", "%", "max_len", ")", "\n", "logging", ".", "info", "(", "\"Vocab_size %s \"", "%", "lang", ".", "n_words", ")", "\n", "logging", ".", "info", "(", "\"USE_CUDA={}\"", ".", "format", "(", "USE_CUDA", ")", ")", "\n", "\n", "return", "train", ",", "dev", ",", "test", ",", "testOOV", ",", "lang", ",", "max_len", ",", "max_r", ",", "idx2candDL", ",", "query2idx", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.__init__": [[24, 63], ["torch.Module.__init__", "len", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "TRADE.EncoderRNN", "TRADE.Generator", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "TRADE.TRADE.reset", "TRADE.TRADE.encoder.load_state_dict", "TRADE.TRADE.decoder.load_state_dict", "TRADE.TRADE.parameters", "TRADE.TRADE.encoder.cuda", "TRADE.TRADE.decoder.cuda", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.state_dict", "torch.load.state_dict", "torch.load.state_dict", "torch.load.state_dict", "torch.load.state_dict", "torch.load.state_dict", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.AttrProxy.__init__", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.reset"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "lang", ",", "path", ",", "task", ",", "lr", ",", "dropout", ",", "slots", ",", "gating_dict", ",", "nb_train_vocab", "=", "0", ")", ":", "\n", "        ", "super", "(", "TRADE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"TRADE\"", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "lang", "=", "lang", "[", "0", "]", "\n", "self", ".", "mem_lang", "=", "lang", "[", "1", "]", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "slots", "=", "slots", "[", "0", "]", "\n", "self", ".", "slot_temp", "=", "slots", "[", "2", "]", "\n", "self", ".", "gating_dict", "=", "gating_dict", "\n", "self", ".", "nb_gate", "=", "len", "(", "gating_dict", ")", "\n", "self", ".", "cross_entorpy", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "EncoderRNN", "(", "self", ".", "lang", ".", "n_words", ",", "hidden_size", ",", "self", ".", "dropout", ")", "\n", "self", ".", "decoder", "=", "Generator", "(", "self", ".", "lang", ",", "self", ".", "encoder", ".", "embedding", ",", "self", ".", "lang", ".", "n_words", ",", "hidden_size", ",", "self", ".", "dropout", ",", "self", ".", "slots", ",", "self", ".", "nb_gate", ")", "\n", "\n", "if", "path", ":", "\n", "            ", "if", "USE_CUDA", ":", "\n", "                ", "print", "(", "\"MODEL {} LOADED\"", ".", "format", "(", "str", "(", "path", ")", ")", ")", "\n", "trained_encoder", "=", "torch", ".", "load", "(", "str", "(", "path", ")", "+", "'/enc.th'", ")", "\n", "trained_decoder", "=", "torch", ".", "load", "(", "str", "(", "path", ")", "+", "'/dec.th'", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"MODEL {} LOADED\"", ".", "format", "(", "str", "(", "path", ")", ")", ")", "\n", "trained_encoder", "=", "torch", ".", "load", "(", "str", "(", "path", ")", "+", "'/enc.th'", ",", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "trained_decoder", "=", "torch", ".", "load", "(", "str", "(", "path", ")", "+", "'/dec.th'", ",", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n", "", "self", ".", "encoder", ".", "load_state_dict", "(", "trained_encoder", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "decoder", ".", "load_state_dict", "(", "trained_decoder", ".", "state_dict", "(", ")", ")", "\n", "\n", "# Initialize optimizers and criterion", "\n", "", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "self", ".", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "self", ".", "optimizer", ",", "mode", "=", "'max'", ",", "factor", "=", "0.5", ",", "patience", "=", "1", ",", "min_lr", "=", "0.0001", ",", "verbose", "=", "True", ")", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "if", "USE_CUDA", ":", "\n", "            ", "self", ".", "encoder", ".", "cuda", "(", ")", "\n", "self", ".", "decoder", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.print_loss": [[64, 72], ["None"], "methods", ["None"], ["", "", "def", "print_loss", "(", "self", ")", ":", "\n", "        ", "print_loss_avg", "=", "self", ".", "loss", "/", "self", ".", "print_every", "\n", "print_loss_ptr", "=", "self", ".", "loss_ptr", "/", "self", ".", "print_every", "\n", "print_loss_gate", "=", "self", ".", "loss_gate", "/", "self", ".", "print_every", "\n", "print_loss_class", "=", "self", ".", "loss_class", "/", "self", ".", "print_every", "\n", "# print_loss_domain = self.loss_domain / self.print_every", "\n", "self", ".", "print_every", "+=", "1", "\n", "return", "'L:{:.2f},LP:{:.2f},LG:{:.2f}'", ".", "format", "(", "print_loss_avg", ",", "print_loss_ptr", ",", "print_loss_gate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.save_model": [[73, 79], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "str", "os.path.exists", "os.makedirs", "str", "str", "str", "str"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "dec_type", ")", ":", "\n", "        ", "directory", "=", "'save/TRADE-'", "+", "args", "[", "\"addName\"", "]", "+", "args", "[", "'dataset'", "]", "+", "str", "(", "self", ".", "task", ")", "+", "'/'", "+", "'HDD'", "+", "str", "(", "self", ".", "hidden_size", ")", "+", "'BSZ'", "+", "str", "(", "args", "[", "'batch'", "]", ")", "+", "'DR'", "+", "str", "(", "self", ".", "dropout", ")", "+", "str", "(", "dec_type", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "torch", ".", "save", "(", "self", ".", "encoder", ",", "directory", "+", "'/enc.th'", ")", "\n", "torch", ".", "save", "(", "self", ".", "decoder", ",", "directory", "+", "'/dec.th'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.reset": [[80, 82], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", ",", "self", ".", "print_every", ",", "self", ".", "loss_ptr", ",", "self", ".", "loss_gate", ",", "self", ".", "loss_class", "=", "0", ",", "1", ",", "0", ",", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.train_batch": [[83, 110], ["TRADE.TRADE.optimizer.zero_grad", "TRADE.TRADE.encode_and_decode", "masked_cross_entropy_for_value", "TRADE.TRADE.cross_entorpy", "masked_cross_entropy_for_value.item", "TRADE.TRADE.item", "TRADE.TRADE.reset", "random.random", "all_point_outputs.transpose().contiguous", "data[].contiguous", "gates.transpose().contiguous().view", "data[].contiguous().view", "gates.size", "all_point_outputs.transpose", "gates.transpose().contiguous", "data[].contiguous", "gates.transpose"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.encode_and_decode", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.utils.masked_cross_entropy.masked_cross_entropy_for_value", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.reset"], ["", "def", "train_batch", "(", "self", ",", "data", ",", "clip", ",", "slot_temp", ",", "reset", "=", "0", ")", ":", "\n", "        ", "if", "reset", ":", "self", ".", "reset", "(", ")", "\n", "# Zero gradients of both optimizers", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Encode and Decode", "\n", "use_teacher_forcing", "=", "random", ".", "random", "(", ")", "<", "args", "[", "\"teacher_forcing_ratio\"", "]", "\n", "all_point_outputs", ",", "gates", ",", "words_point_out", ",", "words_class_out", "=", "self", ".", "encode_and_decode", "(", "data", ",", "use_teacher_forcing", ",", "slot_temp", ")", "\n", "\n", "loss_ptr", "=", "masked_cross_entropy_for_value", "(", "\n", "all_point_outputs", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ",", "\n", "data", "[", "\"generate_y\"", "]", ".", "contiguous", "(", ")", ",", "#[:,:len(self.point_slots)].contiguous(),", "\n", "data", "[", "\"y_lengths\"", "]", ")", "#[:,:len(self.point_slots)])", "\n", "loss_gate", "=", "self", ".", "cross_entorpy", "(", "gates", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "gates", ".", "size", "(", "-", "1", ")", ")", ",", "data", "[", "\"gating_label\"", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "if", "args", "[", "\"use_gate\"", "]", ":", "\n", "            ", "loss", "=", "loss_ptr", "+", "loss_gate", "\n", "", "else", ":", "\n", "            ", "loss", "=", "loss_ptr", "\n", "\n", "", "self", ".", "loss_grad", "=", "loss", "\n", "self", ".", "loss_ptr_to_bp", "=", "loss_ptr", "\n", "\n", "# Update parameters with optimizers", "\n", "self", ".", "loss", "+=", "loss", ".", "data", "\n", "self", ".", "loss_ptr", "+=", "loss_ptr", ".", "item", "(", ")", "\n", "self", ".", "loss_gate", "+=", "loss_gate", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.optimize": [[111, 115], ["TRADE.TRADE.loss_grad.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "TRADE.TRADE.optimizer.step", "TRADE.TRADE.parameters"], "methods", ["None"], ["", "def", "optimize", "(", "self", ",", "clip", ")", ":", "\n", "        ", "self", ".", "loss_grad", ".", "backward", "(", ")", "\n", "clip_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "clip", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.optimize_GEM": [[116, 119], ["torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "TRADE.TRADE.optimizer.step", "TRADE.TRADE.parameters"], "methods", ["None"], ["", "def", "optimize_GEM", "(", "self", ",", "clip", ")", ":", "\n", "        ", "clip_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "clip", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.encode_and_decode": [[120, 145], ["TRADE.TRADE.encoder", "len", "TRADE.TRADE.decoder.forward", "data[].size", "numpy.ones", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "story.transpose", "data[].size", "numpy.random.binomial", "rand_mask.cuda.cuda.cuda", "rand_mask.cuda.cuda.long", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.Generator.forward"], ["", "def", "encode_and_decode", "(", "self", ",", "data", ",", "use_teacher_forcing", ",", "slot_temp", ")", ":", "\n", "# Build unknown mask for memory to encourage generalization", "\n", "        ", "if", "args", "[", "'unk_mask'", "]", "and", "self", ".", "decoder", ".", "training", ":", "\n", "            ", "story_size", "=", "data", "[", "'context'", "]", ".", "size", "(", ")", "\n", "rand_mask", "=", "np", ".", "ones", "(", "story_size", ")", "\n", "bi_mask", "=", "np", ".", "random", ".", "binomial", "(", "[", "np", ".", "ones", "(", "(", "story_size", "[", "0", "]", ",", "story_size", "[", "1", "]", ")", ")", "]", ",", "1", "-", "self", ".", "dropout", ")", "[", "0", "]", "\n", "rand_mask", "=", "rand_mask", "*", "bi_mask", "\n", "rand_mask", "=", "torch", ".", "Tensor", "(", "rand_mask", ")", "\n", "if", "USE_CUDA", ":", "\n", "                ", "rand_mask", "=", "rand_mask", ".", "cuda", "(", ")", "\n", "", "story", "=", "data", "[", "'context'", "]", "*", "rand_mask", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "            ", "story", "=", "data", "[", "'context'", "]", "\n", "\n", "# Encode dialog history", "\n", "", "encoded_outputs", ",", "encoded_hidden", "=", "self", ".", "encoder", "(", "story", ".", "transpose", "(", "0", ",", "1", ")", ",", "data", "[", "'context_len'", "]", ")", "\n", "\n", "# Get the words that can be copy from the memory", "\n", "batch_size", "=", "len", "(", "data", "[", "'context_len'", "]", ")", "\n", "self", ".", "copy_list", "=", "data", "[", "'context_plain'", "]", "\n", "max_res_len", "=", "data", "[", "'generate_y'", "]", ".", "size", "(", "2", ")", "if", "self", ".", "encoder", ".", "training", "else", "10", "\n", "all_point_outputs", ",", "all_gate_outputs", ",", "words_point_out", ",", "words_class_out", "=", "self", ".", "decoder", ".", "forward", "(", "batch_size", ",", "encoded_hidden", ",", "encoded_outputs", ",", "data", "[", "'context_len'", "]", ",", "story", ",", "max_res_len", ",", "data", "[", "'generate_y'", "]", ",", "use_teacher_forcing", ",", "slot_temp", ")", "\n", "return", "all_point_outputs", ",", "all_gate_outputs", ",", "words_point_out", ",", "words_class_out", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.evaluate": [[146, 228], ["TRADE.TRADE.encoder.train", "TRADE.TRADE.decoder.train", "print", "dict", "tqdm", "TRADE.TRADE.evaluate_metrics", "print", "TRADE.TRADE.encoder.train", "TRADE.TRADE.decoder.train", "enumerate", "len", "TRADE.TRADE.encode_and_decode", "range", "json.dump", "len", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "open", "TRADE.TRADE.save_model", "print", "TRADE.TRADE.save_model", "print", "TRADE.TRADE.gating_dict.items", "all_prediction.keys", "enumerate", "enumerate", "print", "print", "gates.transpose", "set", "set", "set", "set", "numpy.transpose", "predict_belief_bsz_ptr.append", "predict_belief_bsz_ptr.append", "st.append", "numpy.transpose", "predict_belief_bsz_ptr.append", "str", "st.append", "str", "sg.item"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.evaluate_metrics", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.encode_and_decode", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.save_model", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.save_model"], ["", "def", "evaluate", "(", "self", ",", "dev", ",", "matric_best", ",", "slot_temp", ",", "early_stop", "=", "None", ")", ":", "\n", "# Set to not-training mode to disable dropout", "\n", "        ", "self", ".", "encoder", ".", "train", "(", "False", ")", "\n", "self", ".", "decoder", ".", "train", "(", "False", ")", "\n", "print", "(", "\"STARTING EVALUATION\"", ")", "\n", "all_prediction", "=", "{", "}", "\n", "inverse_unpoint_slot", "=", "dict", "(", "[", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "self", ".", "gating_dict", ".", "items", "(", ")", "]", ")", "\n", "pbar", "=", "tqdm", "(", "enumerate", "(", "dev", ")", ",", "total", "=", "len", "(", "dev", ")", ")", "\n", "for", "j", ",", "data_dev", "in", "pbar", ":", "\n", "# Encode and Decode", "\n", "            ", "batch_size", "=", "len", "(", "data_dev", "[", "'context_len'", "]", ")", "\n", "_", ",", "gates", ",", "words", ",", "class_words", "=", "self", ".", "encode_and_decode", "(", "data_dev", ",", "False", ",", "slot_temp", ")", "\n", "\n", "for", "bi", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "if", "data_dev", "[", "\"ID\"", "]", "[", "bi", "]", "not", "in", "all_prediction", ".", "keys", "(", ")", ":", "\n", "                    ", "all_prediction", "[", "data_dev", "[", "\"ID\"", "]", "[", "bi", "]", "]", "=", "{", "}", "\n", "", "all_prediction", "[", "data_dev", "[", "\"ID\"", "]", "[", "bi", "]", "]", "[", "data_dev", "[", "\"turn_id\"", "]", "[", "bi", "]", "]", "=", "{", "\"turn_belief\"", ":", "data_dev", "[", "\"turn_belief\"", "]", "[", "bi", "]", "}", "\n", "predict_belief_bsz_ptr", ",", "predict_belief_bsz_class", "=", "[", "]", ",", "[", "]", "\n", "gate", "=", "torch", ".", "argmax", "(", "gates", ".", "transpose", "(", "0", ",", "1", ")", "[", "bi", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# pointer-generator results", "\n", "if", "args", "[", "\"use_gate\"", "]", ":", "\n", "                    ", "for", "si", ",", "sg", "in", "enumerate", "(", "gate", ")", ":", "\n", "                        ", "if", "sg", "==", "self", ".", "gating_dict", "[", "\"none\"", "]", ":", "\n", "                            ", "continue", "\n", "", "elif", "sg", "==", "self", ".", "gating_dict", "[", "\"ptr\"", "]", ":", "\n", "                            ", "pred", "=", "np", ".", "transpose", "(", "words", "[", "si", "]", ")", "[", "bi", "]", "\n", "st", "=", "[", "]", "\n", "for", "e", "in", "pred", ":", "\n", "                                ", "if", "e", "==", "'EOS'", ":", "break", "\n", "else", ":", "st", ".", "append", "(", "e", ")", "\n", "", "st", "=", "\" \"", ".", "join", "(", "st", ")", "\n", "if", "st", "==", "\"none\"", ":", "\n", "                                ", "continue", "\n", "", "else", ":", "\n", "                                ", "predict_belief_bsz_ptr", ".", "append", "(", "slot_temp", "[", "si", "]", "+", "\"-\"", "+", "str", "(", "st", ")", ")", "\n", "", "", "else", ":", "\n", "                            ", "predict_belief_bsz_ptr", ".", "append", "(", "slot_temp", "[", "si", "]", "+", "\"-\"", "+", "inverse_unpoint_slot", "[", "sg", ".", "item", "(", ")", "]", ")", "\n", "", "", "", "else", ":", "\n", "                    ", "for", "si", ",", "_", "in", "enumerate", "(", "gate", ")", ":", "\n", "                        ", "pred", "=", "np", ".", "transpose", "(", "words", "[", "si", "]", ")", "[", "bi", "]", "\n", "st", "=", "[", "]", "\n", "for", "e", "in", "pred", ":", "\n", "                            ", "if", "e", "==", "'EOS'", ":", "break", "\n", "else", ":", "st", ".", "append", "(", "e", ")", "\n", "", "st", "=", "\" \"", ".", "join", "(", "st", ")", "\n", "if", "st", "==", "\"none\"", ":", "\n", "                            ", "continue", "\n", "", "else", ":", "\n", "                            ", "predict_belief_bsz_ptr", ".", "append", "(", "slot_temp", "[", "si", "]", "+", "\"-\"", "+", "str", "(", "st", ")", ")", "\n", "\n", "", "", "", "all_prediction", "[", "data_dev", "[", "\"ID\"", "]", "[", "bi", "]", "]", "[", "data_dev", "[", "\"turn_id\"", "]", "[", "bi", "]", "]", "[", "\"pred_bs_ptr\"", "]", "=", "predict_belief_bsz_ptr", "\n", "\n", "if", "set", "(", "data_dev", "[", "\"turn_belief\"", "]", "[", "bi", "]", ")", "!=", "set", "(", "predict_belief_bsz_ptr", ")", "and", "args", "[", "\"genSample\"", "]", ":", "\n", "                    ", "print", "(", "\"True\"", ",", "set", "(", "data_dev", "[", "\"turn_belief\"", "]", "[", "bi", "]", ")", ")", "\n", "print", "(", "\"Pred\"", ",", "set", "(", "predict_belief_bsz_ptr", ")", ",", "\"\\n\"", ")", "\n", "\n", "", "", "", "if", "args", "[", "\"genSample\"", "]", ":", "\n", "            ", "json", ".", "dump", "(", "all_prediction", ",", "open", "(", "\"all_prediction_{}.json\"", ".", "format", "(", "self", ".", "name", ")", ",", "'w'", ")", ",", "indent", "=", "4", ")", "\n", "\n", "", "joint_acc_score_ptr", ",", "F1_score_ptr", ",", "turn_acc_score_ptr", "=", "self", ".", "evaluate_metrics", "(", "all_prediction", ",", "\"pred_bs_ptr\"", ",", "slot_temp", ")", "\n", "\n", "evaluation_metrics", "=", "{", "\"Joint Acc\"", ":", "joint_acc_score_ptr", ",", "\"Turn Acc\"", ":", "turn_acc_score_ptr", ",", "\"Joint F1\"", ":", "F1_score_ptr", "}", "\n", "print", "(", "evaluation_metrics", ")", "\n", "\n", "# Set back to training mode", "\n", "self", ".", "encoder", ".", "train", "(", "True", ")", "\n", "self", ".", "decoder", ".", "train", "(", "True", ")", "\n", "\n", "joint_acc_score", "=", "joint_acc_score_ptr", "# (joint_acc_score_ptr + joint_acc_score_class)/2", "\n", "F1_score", "=", "F1_score_ptr", "\n", "\n", "if", "(", "early_stop", "==", "'F1'", ")", ":", "\n", "            ", "if", "(", "F1_score", ">=", "matric_best", ")", ":", "\n", "                ", "self", ".", "save_model", "(", "'ENTF1-{:.4f}'", ".", "format", "(", "F1_score", ")", ")", "\n", "print", "(", "\"MODEL SAVED\"", ")", "\n", "", "return", "F1_score", "\n", "", "else", ":", "\n", "            ", "if", "(", "joint_acc_score", ">=", "matric_best", ")", ":", "\n", "                ", "self", ".", "save_model", "(", "'ACC-{:.4f}'", ".", "format", "(", "joint_acc_score", ")", ")", "\n", "print", "(", "\"MODEL SAVED\"", ")", "\n", "", "return", "joint_acc_score", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.evaluate_metrics": [[229, 251], ["all_prediction.items", "range", "len", "TRADE.TRADE.compute_acc", "TRADE.TRADE.compute_prf", "float", "float", "float", "set", "set", "set", "set", "set", "set"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.compute_acc", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.compute_prf"], ["", "", "def", "evaluate_metrics", "(", "self", ",", "all_prediction", ",", "from_which", ",", "slot_temp", ")", ":", "\n", "        ", "total", ",", "turn_acc", ",", "joint_acc", ",", "F1_pred", ",", "F1_count", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "for", "d", ",", "v", "in", "all_prediction", ".", "items", "(", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "len", "(", "v", ")", ")", ":", "\n", "                ", "cv", "=", "v", "[", "t", "]", "\n", "if", "set", "(", "cv", "[", "\"turn_belief\"", "]", ")", "==", "set", "(", "cv", "[", "from_which", "]", ")", ":", "\n", "                    ", "joint_acc", "+=", "1", "\n", "", "total", "+=", "1", "\n", "\n", "# Compute prediction slot accuracy", "\n", "temp_acc", "=", "self", ".", "compute_acc", "(", "set", "(", "cv", "[", "\"turn_belief\"", "]", ")", ",", "set", "(", "cv", "[", "from_which", "]", ")", ",", "slot_temp", ")", "\n", "turn_acc", "+=", "temp_acc", "\n", "\n", "# Compute prediction joint F1 score", "\n", "temp_f1", ",", "temp_r", ",", "temp_p", ",", "count", "=", "self", ".", "compute_prf", "(", "set", "(", "cv", "[", "\"turn_belief\"", "]", ")", ",", "set", "(", "cv", "[", "from_which", "]", ")", ")", "\n", "F1_pred", "+=", "temp_f1", "\n", "F1_count", "+=", "count", "\n", "\n", "", "", "joint_acc_score", "=", "joint_acc", "/", "float", "(", "total", ")", "if", "total", "!=", "0", "else", "0", "\n", "turn_acc_score", "=", "turn_acc", "/", "float", "(", "total", ")", "if", "total", "!=", "0", "else", "0", "\n", "F1_score", "=", "F1_pred", "/", "float", "(", "F1_count", ")", "if", "F1_count", "!=", "0", "else", "0", "\n", "return", "joint_acc_score", ",", "F1_score", ",", "turn_acc_score", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.compute_acc": [[252, 267], ["len", "float", "miss_slot.append", "len", "g.rsplit", "p.rsplit"], "methods", ["None"], ["", "def", "compute_acc", "(", "self", ",", "gold", ",", "pred", ",", "slot_temp", ")", ":", "\n", "        ", "miss_gold", "=", "0", "\n", "miss_slot", "=", "[", "]", "\n", "for", "g", "in", "gold", ":", "\n", "            ", "if", "g", "not", "in", "pred", ":", "\n", "                ", "miss_gold", "+=", "1", "\n", "miss_slot", ".", "append", "(", "g", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "[", "0", "]", ")", "\n", "", "", "wrong_pred", "=", "0", "\n", "for", "p", "in", "pred", ":", "\n", "            ", "if", "p", "not", "in", "gold", "and", "p", ".", "rsplit", "(", "\"-\"", ",", "1", ")", "[", "0", "]", "not", "in", "miss_slot", ":", "\n", "                ", "wrong_pred", "+=", "1", "\n", "", "", "ACC_TOTAL", "=", "len", "(", "slot_temp", ")", "\n", "ACC", "=", "len", "(", "slot_temp", ")", "-", "miss_gold", "-", "wrong_pred", "\n", "ACC", "=", "ACC", "/", "float", "(", "ACC_TOTAL", ")", "\n", "return", "ACC", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.TRADE.compute_prf": [[268, 289], ["len", "len", "float", "float", "float"], "methods", ["None"], ["", "def", "compute_prf", "(", "self", ",", "gold", ",", "pred", ")", ":", "\n", "        ", "TP", ",", "FP", ",", "FN", "=", "0", ",", "0", ",", "0", "\n", "if", "len", "(", "gold", ")", "!=", "0", ":", "\n", "            ", "count", "=", "1", "\n", "for", "g", "in", "gold", ":", "\n", "                ", "if", "g", "in", "pred", ":", "\n", "                    ", "TP", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "FN", "+=", "1", "\n", "", "", "for", "p", "in", "pred", ":", "\n", "                ", "if", "p", "not", "in", "gold", ":", "\n", "                    ", "FP", "+=", "1", "\n", "", "", "precision", "=", "TP", "/", "float", "(", "TP", "+", "FP", ")", "if", "(", "TP", "+", "FP", ")", "!=", "0", "else", "0", "\n", "recall", "=", "TP", "/", "float", "(", "TP", "+", "FN", ")", "if", "(", "TP", "+", "FN", ")", "!=", "0", "else", "0", "\n", "F1", "=", "2", "*", "precision", "*", "recall", "/", "float", "(", "precision", "+", "recall", ")", "if", "(", "precision", "+", "recall", ")", "!=", "0", "else", "0", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "pred", ")", "==", "0", ":", "\n", "                ", "precision", ",", "recall", ",", "F1", ",", "count", "=", "1", ",", "1", ",", "1", ",", "1", "\n", "", "else", ":", "\n", "                ", "precision", ",", "recall", ",", "F1", ",", "count", "=", "0", ",", "0", ",", "0", ",", "1", "\n", "", "", "return", "F1", ",", "recall", ",", "precision", ",", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.EncoderRNN.__init__": [[292, 313], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Embedding", "torch.Embedding", "torch.Embedding", "TRADE.EncoderRNN.embedding.weight.data.normal_", "torch.GRU", "torch.GRU", "torch.GRU", "TRADE.EncoderRNN.embedding.weight.data.copy_", "print", "open", "json.load", "new", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.AttrProxy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "hidden_size", ",", "dropout", ",", "n_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", "EncoderRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropout_layer", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "hidden_size", ",", "padding_idx", "=", "PAD_token", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.1", ")", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "hidden_size", ",", "hidden_size", ",", "n_layers", ",", "dropout", "=", "dropout", ",", "bidirectional", "=", "True", ")", "\n", "# self.domain_W = nn.Linear(hidden_size, nb_domain)", "\n", "\n", "if", "args", "[", "\"load_embedding\"", "]", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "\"data/\"", ",", "'emb{}.json'", ".", "format", "(", "vocab_size", ")", ")", ")", "as", "f", ":", "\n", "                ", "E", "=", "json", ".", "load", "(", "f", ")", "\n", "", "new", "=", "self", ".", "embedding", ".", "weight", ".", "data", ".", "new", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "copy_", "(", "new", "(", "E", ")", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "True", "\n", "print", "(", "\"Encoder embedding requires_grad\"", ",", "self", ".", "embedding", ".", "weight", ".", "requires_grad", ")", "\n", "\n", "", "if", "args", "[", "\"fix_embedding\"", "]", ":", "\n", "            ", "self", ".", "embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.EncoderRNN.get_state": [[314, 320], ["torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "def", "get_state", "(", "self", ",", "bsz", ")", ":", "\n", "        ", "\"\"\"Get cell states and hidden states.\"\"\"", "\n", "if", "USE_CUDA", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "zeros", "(", "2", ",", "bsz", ",", "self", ".", "hidden_size", ")", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "zeros", "(", "2", ",", "bsz", ",", "self", ".", "hidden_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.EncoderRNN.forward": [[321, 334], ["TRADE.EncoderRNN.embedding", "TRADE.EncoderRNN.dropout_layer", "TRADE.EncoderRNN.get_state", "TRADE.EncoderRNN.gru", "input_seqs.size", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "outputs.transpose", "TRADE.EncoderRNN.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.EncoderRNN.get_state"], ["", "", "def", "forward", "(", "self", ",", "input_seqs", ",", "input_lengths", ",", "hidden", "=", "None", ")", ":", "\n", "# Note: we run this all at once (over multiple batches of multiple sequences)", "\n", "        ", "embedded", "=", "self", ".", "embedding", "(", "input_seqs", ")", "\n", "embedded", "=", "self", ".", "dropout_layer", "(", "embedded", ")", "\n", "hidden", "=", "self", ".", "get_state", "(", "input_seqs", ".", "size", "(", "1", ")", ")", "\n", "if", "input_lengths", ":", "\n", "            ", "embedded", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "embedded", ",", "input_lengths", ",", "batch_first", "=", "False", ")", "\n", "", "outputs", ",", "hidden", "=", "self", ".", "gru", "(", "embedded", ",", "hidden", ")", "\n", "if", "input_lengths", ":", "\n", "           ", "outputs", ",", "_", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "outputs", ",", "batch_first", "=", "False", ")", "\n", "", "hidden", "=", "hidden", "[", "0", "]", "+", "hidden", "[", "1", "]", "\n", "outputs", "=", "outputs", "[", ":", ",", ":", ",", ":", "self", ".", "hidden_size", "]", "+", "outputs", "[", ":", ",", ":", ",", "self", ".", "hidden_size", ":", "]", "\n", "return", "outputs", ".", "transpose", "(", "0", ",", "1", ")", ",", "hidden", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.Generator.__init__": [[337, 362], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.GRU", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "TRADE.Generator.Slot_emb.weight.data.normal_", "len", "TRADE.Generator.slot_w2i.keys", "len", "TRADE.Generator.slot_w2i.keys", "len", "slot.split", "slot.split", "slot.split", "slot.split"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.AttrProxy.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lang", ",", "shared_emb", ",", "vocab_size", ",", "hidden_size", ",", "dropout", ",", "slots", ",", "nb_gate", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "lang", "=", "lang", "\n", "self", ".", "embedding", "=", "shared_emb", "\n", "self", ".", "dropout_layer", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "hidden_size", ",", "hidden_size", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "nb_gate", "=", "nb_gate", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "W_ratio", "=", "nn", ".", "Linear", "(", "3", "*", "hidden_size", ",", "1", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "slots", "=", "slots", "\n", "\n", "self", ".", "W_gate", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "nb_gate", ")", "\n", "\n", "# Create independent slot embeddings", "\n", "self", ".", "slot_w2i", "=", "{", "}", "\n", "for", "slot", "in", "self", ".", "slots", ":", "\n", "            ", "if", "slot", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "not", "in", "self", ".", "slot_w2i", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "slot_w2i", "[", "slot", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "]", "=", "len", "(", "self", ".", "slot_w2i", ")", "\n", "", "if", "slot", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "not", "in", "self", ".", "slot_w2i", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "slot_w2i", "[", "slot", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "]", "=", "len", "(", "self", ".", "slot_w2i", ")", "\n", "", "", "self", ".", "Slot_emb", "=", "nn", ".", "Embedding", "(", "len", "(", "self", ".", "slot_w2i", ")", ",", "hidden_size", ")", "\n", "self", ".", "Slot_emb", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.Generator.forward": [[363, 470], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "len", "len", "all_point_outputs.cuda.cuda.cuda", "torch.reshape.cuda", "torch.reshape.cuda", "torch.reshape.cuda", "combined_emb.expand_as", "TRADE.Generator.dropout_layer().view", "encoded_hidden.repeat", "range", "TRADE.Generator.slot_w2i.keys", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "TRADE.Generator.Slot_emb", "TRADE.Generator.slot_w2i.keys", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "TRADE.Generator.Slot_emb", "combined_emb.expand_as.clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "TRADE.Generator.gru", "encoded_outputs.repeat", "TRADE.Generator.attend", "TRADE.Generator.attend_vocab", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TRADE.Generator.sigmoid", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p_context_ptr.cuda.cuda.scatter_add_", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "range", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "TRADE.Generator.dropout_layer().expand", "range", "words_point_out.append", "slot.split", "domain_w2idx.cuda.cuda.cuda", "slot.split", "slot_w2idx.cuda.cuda.cuda", "TRADE.Generator.dropout_layer", "range", "decoder_input.cuda.cuda.expand_as", "len", "len", "encoded_hidden.repeat.squeeze", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "encoded_hidden.repeat.squeeze", "TRADE.Generator.W_ratio", "TRADE.Generator.size", "p_context_ptr.cuda.cuda.cuda", "story.repeat", "len", "words_point_out[].append", "TRADE.Generator.embedding", "TRADE.Generator.embedding", "decoder_input.cuda.cuda.cuda", "TRADE.Generator.gru", "TRADE.Generator.attend", "TRADE.Generator.attend_vocab", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "TRADE.Generator.sigmoid", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p_context_ptr.cuda.cuda.scatter_add_", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "words.append", "len", "TRADE.Generator.W_gate", "torch.reshape.size", "torch.reshape.size", "torch.reshape.size", "dec_state.squeeze", "len", "TRADE.Generator.expand_as", "len", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "TRADE.Generator.dropout_layer", "decoder_input.cuda.cuda.expand_as", "encoded_hidden.repeat.squeeze", "TRADE.Generator.W_gate", "encoded_hidden.repeat.squeeze", "TRADE.Generator.W_ratio", "TRADE.Generator.size", "p_context_ptr.cuda.cuda.cuda", "TRADE.Generator.embedding", "TRADE.Generator.embedding", "decoder_input.cuda.cuda.cuda", "w_idx.item", "target_batches[].transpose", "dec_state.squeeze", "TRADE.Generator.expand_as", "slot.split", "slot.split", "w_idx.item"], "methods", ["home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.Generator.attend", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.Generator.attend_vocab", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.Generator.attend", "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.Generator.attend_vocab"], ["", "def", "forward", "(", "self", ",", "batch_size", ",", "encoded_hidden", ",", "encoded_outputs", ",", "encoded_lens", ",", "story", ",", "max_res_len", ",", "target_batches", ",", "use_teacher_forcing", ",", "slot_temp", ")", ":", "\n", "        ", "all_point_outputs", "=", "torch", ".", "zeros", "(", "len", "(", "slot_temp", ")", ",", "batch_size", ",", "max_res_len", ",", "self", ".", "vocab_size", ")", "\n", "all_gate_outputs", "=", "torch", ".", "zeros", "(", "len", "(", "slot_temp", ")", ",", "batch_size", ",", "self", ".", "nb_gate", ")", "\n", "if", "USE_CUDA", ":", "\n", "            ", "all_point_outputs", "=", "all_point_outputs", ".", "cuda", "(", ")", "\n", "all_gate_outputs", "=", "all_gate_outputs", ".", "cuda", "(", ")", "\n", "\n", "# Get the slot embedding ", "\n", "", "slot_emb_dict", "=", "{", "}", "\n", "for", "i", ",", "slot", "in", "enumerate", "(", "slot_temp", ")", ":", "\n", "# Domain embbeding", "\n", "            ", "if", "slot", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "in", "self", ".", "slot_w2i", ".", "keys", "(", ")", ":", "\n", "                ", "domain_w2idx", "=", "[", "self", ".", "slot_w2i", "[", "slot", ".", "split", "(", "\"-\"", ")", "[", "0", "]", "]", "]", "\n", "domain_w2idx", "=", "torch", ".", "tensor", "(", "domain_w2idx", ")", "\n", "if", "USE_CUDA", ":", "domain_w2idx", "=", "domain_w2idx", ".", "cuda", "(", ")", "\n", "domain_emb", "=", "self", ".", "Slot_emb", "(", "domain_w2idx", ")", "\n", "# Slot embbeding", "\n", "", "if", "slot", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "in", "self", ".", "slot_w2i", ".", "keys", "(", ")", ":", "\n", "                ", "slot_w2idx", "=", "[", "self", ".", "slot_w2i", "[", "slot", ".", "split", "(", "\"-\"", ")", "[", "1", "]", "]", "]", "\n", "slot_w2idx", "=", "torch", ".", "tensor", "(", "slot_w2idx", ")", "\n", "if", "USE_CUDA", ":", "slot_w2idx", "=", "slot_w2idx", ".", "cuda", "(", ")", "\n", "slot_emb", "=", "self", ".", "Slot_emb", "(", "slot_w2idx", ")", "\n", "\n", "# Combine two embeddings as one query", "\n", "", "combined_emb", "=", "domain_emb", "+", "slot_emb", "\n", "slot_emb_dict", "[", "slot", "]", "=", "combined_emb", "\n", "slot_emb_exp", "=", "combined_emb", ".", "expand_as", "(", "encoded_hidden", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "slot_emb_arr", "=", "slot_emb_exp", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                ", "slot_emb_arr", "=", "torch", ".", "cat", "(", "(", "slot_emb_arr", ",", "slot_emb_exp", ")", ",", "dim", "=", "0", ")", "\n", "\n", "", "", "if", "args", "[", "\"parallel_decode\"", "]", ":", "\n", "# Compute pointer-generator output, puting all (domain, slot) in one batch", "\n", "            ", "decoder_input", "=", "self", ".", "dropout_layer", "(", "slot_emb_arr", ")", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_size", ")", "# (batch*|slot|) * emb", "\n", "hidden", "=", "encoded_hidden", ".", "repeat", "(", "1", ",", "len", "(", "slot_temp", ")", ",", "1", ")", "# 1 * (batch*|slot|) * emb", "\n", "words_point_out", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "slot_temp", ")", ")", "]", "\n", "words_class_out", "=", "[", "]", "\n", "\n", "for", "wi", "in", "range", "(", "max_res_len", ")", ":", "\n", "                ", "dec_state", ",", "hidden", "=", "self", ".", "gru", "(", "decoder_input", ".", "expand_as", "(", "hidden", ")", ",", "hidden", ")", "\n", "\n", "enc_out", "=", "encoded_outputs", ".", "repeat", "(", "len", "(", "slot_temp", ")", ",", "1", ",", "1", ")", "\n", "enc_len", "=", "encoded_lens", "*", "len", "(", "slot_temp", ")", "\n", "context_vec", ",", "logits", ",", "prob", "=", "self", ".", "attend", "(", "enc_out", ",", "hidden", ".", "squeeze", "(", "0", ")", ",", "enc_len", ")", "\n", "\n", "if", "wi", "==", "0", ":", "\n", "                    ", "all_gate_outputs", "=", "torch", ".", "reshape", "(", "self", ".", "W_gate", "(", "context_vec", ")", ",", "all_gate_outputs", ".", "size", "(", ")", ")", "\n", "\n", "", "p_vocab", "=", "self", ".", "attend_vocab", "(", "self", ".", "embedding", ".", "weight", ",", "hidden", ".", "squeeze", "(", "0", ")", ")", "\n", "p_gen_vec", "=", "torch", ".", "cat", "(", "[", "dec_state", ".", "squeeze", "(", "0", ")", ",", "context_vec", ",", "decoder_input", "]", ",", "-", "1", ")", "\n", "vocab_pointer_switches", "=", "self", ".", "sigmoid", "(", "self", ".", "W_ratio", "(", "p_gen_vec", ")", ")", "\n", "p_context_ptr", "=", "torch", ".", "zeros", "(", "p_vocab", ".", "size", "(", ")", ")", "\n", "if", "USE_CUDA", ":", "p_context_ptr", "=", "p_context_ptr", ".", "cuda", "(", ")", "\n", "\n", "p_context_ptr", ".", "scatter_add_", "(", "1", ",", "story", ".", "repeat", "(", "len", "(", "slot_temp", ")", ",", "1", ")", ",", "prob", ")", "\n", "\n", "final_p_vocab", "=", "(", "1", "-", "vocab_pointer_switches", ")", ".", "expand_as", "(", "p_context_ptr", ")", "*", "p_context_ptr", "+", "vocab_pointer_switches", ".", "expand_as", "(", "p_context_ptr", ")", "*", "p_vocab", "\n", "pred_word", "=", "torch", ".", "argmax", "(", "final_p_vocab", ",", "dim", "=", "1", ")", "\n", "words", "=", "[", "self", ".", "lang", ".", "index2word", "[", "w_idx", ".", "item", "(", ")", "]", "for", "w_idx", "in", "pred_word", "]", "\n", "\n", "for", "si", "in", "range", "(", "len", "(", "slot_temp", ")", ")", ":", "\n", "                    ", "words_point_out", "[", "si", "]", ".", "append", "(", "words", "[", "si", "*", "batch_size", ":", "(", "si", "+", "1", ")", "*", "batch_size", "]", ")", "\n", "\n", "", "all_point_outputs", "[", ":", ",", ":", ",", "wi", ",", ":", "]", "=", "torch", ".", "reshape", "(", "final_p_vocab", ",", "(", "len", "(", "slot_temp", ")", ",", "batch_size", ",", "self", ".", "vocab_size", ")", ")", "\n", "\n", "if", "use_teacher_forcing", ":", "\n", "                    ", "decoder_input", "=", "self", ".", "embedding", "(", "torch", ".", "flatten", "(", "target_batches", "[", ":", ",", ":", ",", "wi", "]", ".", "transpose", "(", "1", ",", "0", ")", ")", ")", "\n", "", "else", ":", "\n", "                    ", "decoder_input", "=", "self", ".", "embedding", "(", "pred_word", ")", "\n", "\n", "", "if", "USE_CUDA", ":", "decoder_input", "=", "decoder_input", ".", "cuda", "(", ")", "\n", "", "", "else", ":", "\n", "# Compute pointer-generator output, decoding each (domain, slot) one-by-one", "\n", "            ", "words_point_out", "=", "[", "]", "\n", "counter", "=", "0", "\n", "for", "slot", "in", "slot_temp", ":", "\n", "                ", "hidden", "=", "encoded_hidden", "\n", "words", "=", "[", "]", "\n", "slot_emb", "=", "slot_emb_dict", "[", "slot", "]", "\n", "decoder_input", "=", "self", ".", "dropout_layer", "(", "slot_emb", ")", ".", "expand", "(", "batch_size", ",", "self", ".", "hidden_size", ")", "\n", "for", "wi", "in", "range", "(", "max_res_len", ")", ":", "\n", "                    ", "dec_state", ",", "hidden", "=", "self", ".", "gru", "(", "decoder_input", ".", "expand_as", "(", "hidden", ")", ",", "hidden", ")", "\n", "context_vec", ",", "logits", ",", "prob", "=", "self", ".", "attend", "(", "encoded_outputs", ",", "hidden", ".", "squeeze", "(", "0", ")", ",", "encoded_lens", ")", "\n", "if", "wi", "==", "0", ":", "\n", "                        ", "all_gate_outputs", "[", "counter", "]", "=", "self", ".", "W_gate", "(", "context_vec", ")", "\n", "", "p_vocab", "=", "self", ".", "attend_vocab", "(", "self", ".", "embedding", ".", "weight", ",", "hidden", ".", "squeeze", "(", "0", ")", ")", "\n", "p_gen_vec", "=", "torch", ".", "cat", "(", "[", "dec_state", ".", "squeeze", "(", "0", ")", ",", "context_vec", ",", "decoder_input", "]", ",", "-", "1", ")", "\n", "vocab_pointer_switches", "=", "self", ".", "sigmoid", "(", "self", ".", "W_ratio", "(", "p_gen_vec", ")", ")", "\n", "p_context_ptr", "=", "torch", ".", "zeros", "(", "p_vocab", ".", "size", "(", ")", ")", "\n", "if", "USE_CUDA", ":", "p_context_ptr", "=", "p_context_ptr", ".", "cuda", "(", ")", "\n", "p_context_ptr", ".", "scatter_add_", "(", "1", ",", "story", ",", "prob", ")", "\n", "final_p_vocab", "=", "(", "1", "-", "vocab_pointer_switches", ")", ".", "expand_as", "(", "p_context_ptr", ")", "*", "p_context_ptr", "+", "vocab_pointer_switches", ".", "expand_as", "(", "p_context_ptr", ")", "*", "p_vocab", "\n", "pred_word", "=", "torch", ".", "argmax", "(", "final_p_vocab", ",", "dim", "=", "1", ")", "\n", "words", ".", "append", "(", "[", "self", ".", "lang", ".", "index2word", "[", "w_idx", ".", "item", "(", ")", "]", "for", "w_idx", "in", "pred_word", "]", ")", "\n", "all_point_outputs", "[", "counter", ",", ":", ",", "wi", ",", ":", "]", "=", "final_p_vocab", "\n", "if", "use_teacher_forcing", ":", "\n", "                        ", "decoder_input", "=", "self", ".", "embedding", "(", "target_batches", "[", ":", ",", "counter", ",", "wi", "]", ")", "# Chosen word is next input", "\n", "", "else", ":", "\n", "                        ", "decoder_input", "=", "self", ".", "embedding", "(", "pred_word", ")", "\n", "", "if", "USE_CUDA", ":", "decoder_input", "=", "decoder_input", ".", "cuda", "(", ")", "\n", "", "counter", "+=", "1", "\n", "words_point_out", ".", "append", "(", "words", ")", "\n", "\n", "", "", "return", "all_point_outputs", ",", "all_gate_outputs", ",", "words_point_out", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.Generator.attend": [[471, 483], ["cond.unsqueeze().expand_as().mul().sum", "max", "enumerate", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.unsqueeze().expand_as().mul().sum", "cond.unsqueeze().expand_as().mul", "torch.softmax.unsqueeze().expand_as().mul", "cond.unsqueeze().expand_as", "torch.softmax.unsqueeze().expand_as", "cond.unsqueeze", "torch.softmax.unsqueeze"], "methods", ["None"], ["", "def", "attend", "(", "self", ",", "seq", ",", "cond", ",", "lens", ")", ":", "\n", "        ", "\"\"\"\n        attend over the sequences `seq` using the condition `cond`.\n        \"\"\"", "\n", "scores_", "=", "cond", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "seq", ")", ".", "mul", "(", "seq", ")", ".", "sum", "(", "2", ")", "\n", "max_len", "=", "max", "(", "lens", ")", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "lens", ")", ":", "\n", "            ", "if", "l", "<", "max_len", ":", "\n", "                ", "scores_", ".", "data", "[", "i", ",", "l", ":", "]", "=", "-", "np", ".", "inf", "\n", "", "", "scores", "=", "F", ".", "softmax", "(", "scores_", ",", "dim", "=", "1", ")", "\n", "context", "=", "scores", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "seq", ")", ".", "mul", "(", "seq", ")", ".", "sum", "(", "1", ")", "\n", "return", "context", ",", "scores_", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.Generator.attend_vocab": [[484, 488], ["cond.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "seq.transpose"], "methods", ["None"], ["", "def", "attend_vocab", "(", "self", ",", "seq", ",", "cond", ")", ":", "\n", "        ", "scores_", "=", "cond", ".", "matmul", "(", "seq", ".", "transpose", "(", "1", ",", "0", ")", ")", "\n", "scores", "=", "F", ".", "softmax", "(", "scores_", ",", "dim", "=", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.AttrProxy.__init__": [[496, 499], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "module", ",", "prefix", ")", ":", "\n", "        ", "self", ".", "module", "=", "module", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.jasonwu0731_trade-dst.models.TRADE.AttrProxy.__getitem__": [[500, 502], ["getattr", "str"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "module", ",", "self", ".", "prefix", "+", "str", "(", "i", ")", ")", "\n", "", "", ""]]}