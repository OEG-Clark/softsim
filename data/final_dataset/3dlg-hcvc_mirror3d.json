{"home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.__init__": [[11, 50], ["torch.zeros", "torch.zeros", "mirror3d_metrics.Mirror3dEval.main_output_folder.replace", "os.makedirs", "dict", "time.strftime", "time.localtime"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "train_with_ref_d", ",", "logger", "=", "None", ",", "input_tag", "=", "\"input_tag\"", ",", "method_tag", "=", "\"method_tag\"", ",", "width", "=", "640", ",", "\n", "height", "=", "480", ",", "dataset", "=", "\"nyu\"", ",", "dataset_root", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "m_nm_all_refD", "=", "torch", ".", "zeros", "(", "27", ")", "\n", "self", ".", "m_nm_all_rawD", "=", "torch", ".", "zeros", "(", "27", ")", "\n", "self", ".", "raw_cnt", "=", "0", "\n", "self", ".", "ref_cnt", "=", "0", "\n", "self", ".", "dataset_root", "=", "dataset_root", "\n", "self", ".", "train_with_refD", "=", "train_with_ref_d", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "input_tag", "=", "input_tag", "\n", "self", ".", "method_tag", "=", "method_tag", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "dataset", "=", "dataset", "\n", "if", "self", ".", "train_with_refD", ":", "\n", "            ", "if", "self", ".", "dataset", "!=", "\"mp3d\"", ":", "\n", "                ", "self", ".", "Train_tag", "=", "\"ref\"", "\n", "", "else", ":", "\n", "                ", "self", ".", "Train_tag", "=", "\"mesh-ref\"", "\n", "", "", "elif", "not", "self", ".", "train_with_refD", ":", "\n", "            ", "if", "self", ".", "dataset", "!=", "\"mp3d\"", ":", "\n", "                ", "self", ".", "Train_tag", "=", "\"raw\"", "\n", "", "else", ":", "\n", "                ", "self", ".", "Train_tag", "=", "\"mesh\"", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "Train_tag", "=", "\"*\"", "\n", "", "self", ".", "main_output_folder", "=", "\"output/{}_{}_{}_{}_{}\"", ".", "format", "(", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ",", "time", ".", "localtime", "(", ")", ")", ",", "\n", "self", ".", "input_tag", ",", "self", ".", "Train_tag", ",", "self", ".", "method_tag", ",", "\n", "self", ".", "dataset", ")", "\n", "self", ".", "main_output_folder", "=", "self", ".", "main_output_folder", ".", "replace", "(", "\"*\"", ",", "\"a\"", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "main_output_folder", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "method_logFile_json_save_folder", "=", "\"output\"", "\n", "self", ".", "cal_std", "=", "True", "\n", "self", ".", "sample_name", "=", "[", "]", "\n", "self", ".", "sample_score", "=", "dict", "(", ")", "\n", "self", ".", "min_threshold_filter", "=", "True", "\n", "self", ".", "save_score_per_sample", "=", "True", "\n", "self", ".", "get_full_set", "=", "False", "\n", "self", ".", "to_create_folder", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.set_min_threshold_filter": [[51, 53], ["None"], "methods", ["None"], ["", "def", "set_min_threshold_filter", "(", "self", ",", "min_threshold_filter", ")", ":", "\n", "        ", "self", ".", "min_threshold_filter", "=", "min_threshold_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.set_cal_std": [[54, 56], ["None"], "methods", ["None"], ["", "def", "set_cal_std", "(", "self", ",", "cal_std", ")", ":", "\n", "        ", "self", ".", "cal_std", "=", "cal_std", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.set_save_score_per_sample": [[57, 59], ["None"], "methods", ["None"], ["", "def", "set_save_score_per_sample", "(", "self", ",", "save_score_per_sample", ")", ":", "\n", "        ", "self", ".", "save_score_per_sample", "=", "save_score_per_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.set_method_logFile_json_save_folder": [[60, 62], ["None"], "methods", ["None"], ["", "def", "set_method_logFile_json_save_folder", "(", "self", ",", "folder", ")", ":", "\n", "        ", "self", ".", "method_logFile_json_save_folder", "=", "folder", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.reset_setting": [[63, 88], ["torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "reset_setting", "(", "self", ",", "train_with_ref_d", ",", "logger", "=", "None", ",", "input_tag", "=", "\"input_tag\"", ",", "method_tag", "=", "\"method_tag\"", ",", "width", "=", "640", ",", "\n", "height", "=", "480", ")", ":", "\n", "        ", "self", ".", "m_nm_all_refD", "=", "torch", ".", "zeros", "(", "27", ")", "\n", "self", ".", "m_nm_all_rawD", "=", "torch", ".", "zeros", "(", "27", ")", "\n", "self", ".", "raw_cnt", "=", "0", "\n", "self", ".", "ref_cnt", "=", "0", "\n", "self", ".", "train_with_refD", "=", "train_with_ref_d", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "input_tag", "=", "input_tag", "\n", "self", ".", "method_tag", "=", "method_tag", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "\n", "if", "self", ".", "train_with_refD", ":", "\n", "            ", "if", "self", ".", "dataset", "!=", "\"mp3d\"", ":", "\n", "                ", "self", ".", "Train_tag", "=", "\"ref\"", "\n", "", "else", ":", "\n", "                ", "self", ".", "Train_tag", "=", "\"mesh-ref\"", "\n", "", "", "elif", "not", "self", ".", "train_with_refD", ":", "\n", "            ", "if", "self", ".", "dataset", "!=", "\"mp3d\"", ":", "\n", "                ", "self", ".", "Train_tag", "=", "\"raw\"", "\n", "", "else", ":", "\n", "                ", "self", ".", "Train_tag", "=", "\"mesh\"", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "Train_tag", "=", "\"*\"", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.save_as_table_format": [[89, 156], ["latex_method_tag.replace", "latex_method_tag.replace", "latex_method_tag.replace", "latex_method_tag.replace", "dict", "os.makedirs", "os.path.join", "os.path.exists", "save_json", "print", "os.path.join", "save_json", "print", "os.path.abspath", "read_json", "dict", "log_file_json[].append"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_json", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_json", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_json"], ["", "", "def", "save_as_table_format", "(", "self", ",", "eval_measures_cpu", ",", "compare_with_raw", "=", "False", ",", "compute_std", "=", "False", ")", ":", "\n", "        ", "latex_method_tag", "=", "self", ".", "method_tag", "\n", "latex_method_tag", ".", "replace", "(", "\"BTS\"", ",", "\"BTS~\\cite{lee2019big}\"", ")", "\n", "latex_method_tag", ".", "replace", "(", "\"VNL\"", ",", "\"VNL~\\cite{yin2019enforcing}\"", ")", "\n", "latex_method_tag", ".", "replace", "(", "\"saic\"", ",", "\"saic~\\cite{senushkin2020decoder}\"", ")", "\n", "latex_method_tag", ".", "replace", "(", "\"PlaneRCNN\"", ",", "\"PlaneRCNN~\\\\cite{liu2019planercnn}\"", ")", "\n", "\n", "tag", "=", "\"{},{},{}\"", ".", "format", "(", "self", ".", "input_tag", ",", "self", ".", "Train_tag", ",", "latex_method_tag", ")", "\n", "table_one_line_result", "=", "dict", "(", ")", "\n", "table_one_line_result", "[", "\n", "\"RMSE,SSIM\"", "]", "=", "\"{:>5} & {:>10} & {:>45} & {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f} \\\\\"", ".", "format", "(", "\n", "self", ".", "input_tag", ",", "self", ".", "Train_tag", ",", "latex_method_tag", ",", "eval_measures_cpu", "[", "0", "]", ",", "eval_measures_cpu", "[", "9", "]", ",", "\n", "eval_measures_cpu", "[", "18", "]", ",", "\n", "eval_measures_cpu", "[", "3", "]", ",", "eval_measures_cpu", "[", "12", "]", ",", "eval_measures_cpu", "[", "21", "]", "\n", ")", "\n", "table_one_line_result", "[", "\n", "\"RMSE,s-RMSE,Rel,SSIM\"", "]", "=", "\"{:>5} & {:>10} & {:>45} & {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f} \"", "\"& {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f}\\\\\"", ".", "format", "(", "\n", "self", ".", "input_tag", ",", "self", ".", "Train_tag", ",", "latex_method_tag", ",", "eval_measures_cpu", "[", "0", "]", ",", "eval_measures_cpu", "[", "9", "]", ",", "\n", "eval_measures_cpu", "[", "18", "]", ",", "\n", "eval_measures_cpu", "[", "1", "]", ",", "eval_measures_cpu", "[", "10", "]", ",", "eval_measures_cpu", "[", "19", "]", ",", "\n", "eval_measures_cpu", "[", "2", "]", ",", "eval_measures_cpu", "[", "11", "]", ",", "eval_measures_cpu", "[", "20", "]", ",", "\n", "eval_measures_cpu", "[", "3", "]", ",", "eval_measures_cpu", "[", "12", "]", ",", "eval_measures_cpu", "[", "21", "]", "\n", ")", "\n", "table_one_line_result", "[", "\"$d_{1.05}$,$d_{1.10}$,$d_{1.25}$,$d_{1.25^2}$,$d_{1.25^3}$\"", "]", "=", "\"{:>5} & {:>10} & {:>45} & {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f} \"", "\"& {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f} & {:.3f}\\\\\"", ".", "format", "(", "\n", "self", ".", "input_tag", ",", "self", ".", "Train_tag", ",", "latex_method_tag", ",", "\n", "eval_measures_cpu", "[", "4", "]", ",", "eval_measures_cpu", "[", "13", "]", ",", "eval_measures_cpu", "[", "22", "]", ",", "\n", "eval_measures_cpu", "[", "5", "]", ",", "eval_measures_cpu", "[", "14", "]", ",", "eval_measures_cpu", "[", "23", "]", ",", "\n", "eval_measures_cpu", "[", "6", "]", ",", "eval_measures_cpu", "[", "15", "]", ",", "eval_measures_cpu", "[", "24", "]", ",", "\n", "eval_measures_cpu", "[", "7", "]", ",", "eval_measures_cpu", "[", "16", "]", ",", "eval_measures_cpu", "[", "25", "]", ",", "\n", "eval_measures_cpu", "[", "8", "]", ",", "eval_measures_cpu", "[", "17", "]", ",", "eval_measures_cpu", "[", "26", "]", "\n", ")", "\n", "table_one_line_result", "[", "\"main_output_folder\"", "]", "=", "\"{}_{}_{} {}\"", ".", "format", "(", "self", ".", "input_tag", ",", "self", ".", "Train_tag", ",", "\n", "latex_method_tag", ",", "\n", "os", ".", "path", ".", "abspath", "(", "self", ".", "main_output_folder", ")", ")", "\n", "\n", "if", "compare_with_raw", ":", "\n", "            ", "one_name", "=", "\"raw_result_minFilter_{}_full_{}.json\"", ".", "format", "(", "self", ".", "min_threshold_filter", ",", "self", ".", "get_full_set", ")", "\n", "save_name", "=", "\"raw_{}_minFilter_{}_full_{}_result.json\"", ".", "format", "(", "self", ".", "dataset", ",", "self", ".", "min_threshold_filter", ",", "\n", "self", ".", "get_full_set", ")", "\n", "", "else", ":", "\n", "            ", "one_name", "=", "\"ref_result_minFilter_{}_full_{}.json\"", ".", "format", "(", "self", ".", "min_threshold_filter", ",", "self", ".", "get_full_set", ")", "\n", "save_name", "=", "\"ref_{}_minFilter_{}_full_{}_result.json\"", ".", "format", "(", "self", ".", "dataset", ",", "self", ".", "min_threshold_filter", ",", "\n", "self", ".", "get_full_set", ")", "\n", "\n", "", "if", "compute_std", ":", "\n", "            ", "save_name", "=", "\"std_\"", "+", "save_name", "\n", "\n", "", "os", ".", "makedirs", "(", "self", ".", "method_logFile_json_save_folder", ",", "exist_ok", "=", "True", ")", "\n", "method_log_file_json_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "method_logFile_json_save_folder", ",", "save_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "method_log_file_json_save_path", ")", ":", "\n", "            ", "log_file_json", "=", "read_json", "(", "method_log_file_json_save_path", ")", "\n", "", "else", ":", "\n", "            ", "log_file_json", "=", "dict", "(", ")", "\n", "", "if", "tag", "in", "log_file_json", ":", "\n", "            ", "if", "table_one_line_result", "not", "in", "log_file_json", "[", "tag", "]", ":", "\n", "                ", "log_file_json", "[", "tag", "]", ".", "append", "(", "table_one_line_result", ")", "\n", "", "", "else", ":", "\n", "            ", "log_file_json", "[", "tag", "]", "=", "[", "table_one_line_result", "]", "\n", "", "save_json", "(", "method_log_file_json_save_path", ",", "log_file_json", ")", "\n", "print", "(", "\"update info file : {}\"", ".", "format", "(", "method_log_file_json_save_path", ")", ")", "\n", "\n", "latex_temp_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "main_output_folder", ",", "one_name", ")", "\n", "save_json", "(", "latex_temp_save_path", ",", "table_one_line_result", ")", "\n", "print", "(", "\"latex result saved to : {}\"", ".", "format", "(", "latex_temp_save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.print_mirror3D_score": [[157, 227], ["print", "mirror3d_metrics.Mirror3dEval.print_mirror3D_score.print_all_scores"], "methods", ["None"], ["", "def", "print_mirror3D_score", "(", "self", ")", ":", "\n", "\n", "        ", "def", "print_all_scores", "(", "eval_measures_cpu", ",", "cnt", ")", ":", "\n", "\n", "            ", "print", "(", "'Computing errors for {} eval samples'", ".", "format", "(", "int", "(", "cnt", ")", ")", ")", "\n", "\n", "# print title", "\n", "print", "(", "\n", "\"{:>12}& {:>12}& {:>18}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12} \\\\\\\\\"", ".", "format", "(", "\n", "'Input'", ",", "\"Train\"", ",", "\"Method\"", ",", "\"Region\"", ",", "\"RMSE\"", ",", "\"s-RMSE\"", ",", "\"Rel\"", ",", "\"SSIM\"", ",", "'$d_{1.05}$'", ",", "'$d_{1.10}$'", ",", "\n", "'$d_{1.25}$'", ",", "'$d_{1.25^2}$'", ",", "'$d_{1.25^3}$'", ",", "\"Count\"", ")", ")", "\n", "if", "self", ".", "logger", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\n", "\"{:>12}& {:>12}& {:>18}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12}& {:>12} \\\\\\\\\"", ".", "format", "(", "\n", "'Input'", ",", "\"Train\"", ",", "\"Method\"", ",", "\"Region\"", ",", "\"RMSE\"", ",", "\"s-RMSE\"", ",", "\"Rel\"", ",", "\"SSIM\"", ",", "'$d_{1.05}$'", ",", "\n", "'$d_{1.10}$'", ",", "'$d_{1.25}$'", ",", "'$d_{1.25^2}$'", ",", "'$d_{1.25^3}$'", ",", "\"Count\"", ")", ")", "\n", "\n", "# print mirror area score", "\n", "", "print_line", "=", "\"{:>12}& {:>12}& {:>18}& {:>12}& \"", ".", "format", "(", "self", ".", "input_tag", ",", "self", ".", "Train_tag", ",", "self", ".", "method_tag", ",", "\n", "\"mirror\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "9", ")", ":", "\n", "                ", "print_line", "+=", "'{:>12.3f}& '", ".", "format", "(", "eval_measures_cpu", "[", "i", "]", ")", "\n", "", "print_line", "+=", "'{:>12} \\\\\\\\'", ".", "format", "(", "int", "(", "cnt", ")", ")", "\n", "print", "(", "print_line", ")", "\n", "if", "self", ".", "logger", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "print_line", ")", "\n", "\n", "# print non-mirror area score", "\n", "", "print_line", "=", "\"{:>12}& {:>12}& {:>18}& {:>12}& \"", ".", "format", "(", "self", ".", "input_tag", ",", "self", ".", "Train_tag", ",", "self", ".", "method_tag", ",", "\n", "\"non-mirror\"", ")", "\n", "for", "i", "in", "range", "(", "9", ",", "18", ")", ":", "\n", "                ", "print_line", "+=", "'{:>12.3f}& '", ".", "format", "(", "eval_measures_cpu", "[", "i", "]", ")", "\n", "", "print_line", "+=", "'{:>12} \\\\\\\\'", ".", "format", "(", "int", "(", "cnt", ")", ")", "\n", "print", "(", "print_line", ")", "\n", "if", "self", ".", "logger", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "print_line", ")", "\n", "\n", "# print all area score", "\n", "", "print_line", "=", "\"{:>12}& {:>12}& {:>18}& {:>12}& \"", ".", "format", "(", "self", ".", "input_tag", ",", "self", ".", "Train_tag", ",", "self", ".", "method_tag", ",", "\n", "\"all\"", ")", "\n", "for", "i", "in", "range", "(", "18", ",", "27", ")", ":", "\n", "                ", "print_line", "+=", "'{:>12.3f}& '", ".", "format", "(", "eval_measures_cpu", "[", "i", "]", ")", "\n", "", "print_line", "+=", "'{:>12} \\\\\\\\'", ".", "format", "(", "int", "(", "cnt", ")", ")", "\n", "print", "(", "print_line", ")", "\n", "if", "self", ".", "logger", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "print_line", ")", "\n", "", "print", "(", "\"result saved to : \"", ",", "self", ".", "main_output_folder", ")", "\n", "\n", "", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\n", "\"######################################## {:>20} ########################################\"", ".", "format", "(", "\n", "\"compared with refD\"", ")", ")", "\n", "", "print", "(", "\"######################################## {:>20} ########################################\"", ".", "format", "(", "\n", "\"compared with refD\"", ")", ")", "\n", "print_all_scores", "(", "self", ".", "m_nm_all_refD", "/", "self", ".", "ref_cnt", ",", "self", ".", "ref_cnt", ")", "\n", "self", ".", "save_as_table_format", "(", "self", ".", "m_nm_all_refD", "/", "self", ".", "ref_cnt", ",", "compare_with_raw", "=", "False", ")", "\n", "if", "self", ".", "logger", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\n", "\"######################################## {:>20} ########################################\"", ".", "format", "(", "\n", "\"compared with rawD\"", ")", ")", "\n", "", "print", "(", "\"######################################## {:>20} ########################################\"", ".", "format", "(", "\n", "\"compared with rawD\"", ")", ")", "\n", "print_all_scores", "(", "self", ".", "m_nm_all_rawD", "/", "self", ".", "raw_cnt", ",", "self", ".", "raw_cnt", ")", "\n", "self", ".", "save_as_table_format", "(", "self", ".", "m_nm_all_rawD", "/", "self", ".", "raw_cnt", ",", "compare_with_raw", "=", "True", ")", "\n", "\n", "if", "self", ".", "cal_std", ":", "\n", "            ", "self", ".", "cal_std_for_all", "(", "self", ".", "m_nm_all_refD", "/", "self", ".", "ref_cnt", ",", "compare_with_raw", "=", "False", ")", "\n", "self", ".", "cal_std_for_all", "(", "self", ".", "m_nm_all_rawD", "/", "self", ".", "raw_cnt", ",", "compare_with_raw", "=", "True", ")", "\n", "\n", "", "self", ".", "save_sampleScore", "(", "self", ".", "main_output_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.save_sampleScore": [[228, 233], ["os.path.join", "save_json"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_json"], ["", "def", "save_sampleScore", "(", "self", ",", "method_output_folder", ")", ":", "\n", "        ", "one_output_path", "=", "os", ".", "path", ".", "join", "(", "method_output_folder", ",", "\n", "\"minFilter_{}_full_{}_score_per_sample.json\"", ".", "format", "(", "self", ".", "min_threshold_filter", ",", "\n", "self", ".", "get_full_set", ")", ")", "\n", "save_json", "(", "one_output_path", ",", "self", ".", "sample_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.cal_std_for_all": [[234, 248], ["enumerate", "mirror3d_metrics.Mirror3dEval.save_as_table_format", "mirror3d_metrics.Mirror3dEval.sample_score.items", "eval_measures_std.append", "numpy.std", "numpy.sqrt", "scores.append", "scores.append", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.save_as_table_format"], ["", "def", "cal_std_for_all", "(", "self", ",", "avg_score", ",", "compare_with_raw", ")", ":", "\n", "        ", "eval_measures_std", "=", "[", "]", "\n", "for", "one_score_index", ",", "one_score", "in", "enumerate", "(", "avg_score", ")", ":", "\n", "            ", "scores", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "sample_score", ".", "items", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "if", "compare_with_raw", ":", "\n", "                        ", "scores", ".", "append", "(", "item", "[", "1", "]", "[", "\"raw\"", "]", "[", "one_score_index", "]", ")", "\n", "", "else", ":", "\n", "                        ", "scores", ".", "append", "(", "item", "[", "1", "]", "[", "\"ref\"", "]", "[", "one_score_index", "]", ")", "\n", "", "", "except", ":", "\n", "                    ", "continue", "\n", "", "", "eval_measures_std", ".", "append", "(", "np", ".", "std", "(", "scores", ")", "/", "np", ".", "sqrt", "(", "len", "(", "scores", ")", ")", ")", "\n", "", "self", ".", "save_as_table_format", "(", "eval_measures_std", ",", "compare_with_raw", "=", "compare_with_raw", ",", "compute_std", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.compute_and_update_mirror3D_metrics": [[249, 389], ["mirror3d_metrics.Mirror3dEval.Train_tag.replace", "mirror3d_metrics.Mirror3dEval.Train_tag.replace", "numpy.array", "numpy.array", "numpy.logical_and", "mirror3d_metrics.SSIM", "mirror3d_metrics.SSIM.forward", "ssim_map[].mean", "numpy.maximum", "numpy.sqrt", "numpy.mean", "numpy.abs", "numpy.mean", "numpy.sqrt", "numpy.array", "cv2.resize", "numpy.array", "cv2.resize", "cv2.resize", "numpy.array", "cv2.resize", "numpy.array", "cv2.resize", "cv2.resize", "torch.tensor", "one_ref_m_nm_all.tolist.tolist.tolist", "torch.tensor", "one_raw_m_nm_all.tolist.tolist.tolist", "color_image_path.find", "numpy.ones().astype", "numpy.sum", "numpy.sum", "torch.tensor().unsqueeze().unsqueeze", "torch.tensor().unsqueeze().unsqueeze", "numpy.array", "numpy.sqrt.mean", "numpy.log", "numpy.log", "numpy.sqrt", "ssim_map[].mean.item", "cv2.imread", "numpy.array", "tuple", "mirror3d_metrics.Mirror3dEval.compute_and_update_mirror3D_metrics.compute_errors"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.roi_heads.Mirror3d_StandardROIHeads.forward"], ["", "def", "compute_and_update_mirror3D_metrics", "(", "self", ",", "pred_depth", ",", "depth_shift", ",", "color_image_path", ",", "rawD_gt_depth_path", ",", "\n", "refD_gt_depth_path", ",", "mask_path", ")", ":", "\n", "        ", "if", "color_image_path", ".", "find", "(", "\"mp3d\"", ")", ">", "0", "and", "\"mesh\"", "not", "in", "self", ".", "Train_tag", ":", "\n", "            ", "self", ".", "Train_tag", "=", "self", ".", "Train_tag", ".", "replace", "(", "\"ref\"", ",", "\"mesh-ref\"", ")", "\n", "self", ".", "Train_tag", "=", "self", ".", "Train_tag", ".", "replace", "(", "\"raw\"", ",", "\"mesh\"", ")", "\n", "\n", "", "def", "compute_errors", "(", "gt", ",", "pred", ",", "eval_area", ")", ":", "# ! gt and pred are in m", "\n", "\n", "            ", "gt", "=", "np", ".", "array", "(", "gt", ",", "dtype", "=", "\"f\"", ")", "\n", "pred", "=", "np", ".", "array", "(", "pred", ",", "dtype", "=", "\"f\"", ")", "\n", "\n", "min_depth_eval", "=", "1e-3", "\n", "max_depth_eval", "=", "10", "\n", "\n", "pred", "[", "pred", "<", "min_depth_eval", "]", "=", "min_depth_eval", "\n", "pred", "[", "np", ".", "isinf", "(", "pred", ")", "]", "=", "max_depth_eval", "\n", "\n", "gt", "[", "np", ".", "isinf", "(", "gt", ")", "]", "=", "0", "\n", "gt", "[", "np", ".", "isnan", "(", "gt", ")", "]", "=", "0", "\n", "\n", "if", "self", ".", "min_threshold_filter", ":", "\n", "                ", "valid_mask", "=", "gt", ">", "min_depth_eval", "# np.logical_and(gt > min_depth_eval)#, gt < max_depth_eval", "\n", "", "else", ":", "\n", "                ", "valid_mask", "=", "np", ".", "ones", "(", "gt", ".", "shape", ")", ".", "astype", "(", "bool", ")", "\n", "\n", "", "scale", "=", "np", ".", "sum", "(", "pred", "[", "valid_mask", "]", "*", "gt", "[", "valid_mask", "]", ")", "/", "np", ".", "sum", "(", "pred", "[", "valid_mask", "]", "**", "2", ")", "\n", "valid_mask", "=", "np", ".", "logical_and", "(", "valid_mask", ",", "eval_area", ")", "\n", "\n", "ssim_obj", "=", "SSIM", "(", ")", "\n", "ssim_map", "=", "ssim_obj", ".", "forward", "(", "torch", ".", "tensor", "(", "pred", "*", "valid_mask", ".", "astype", "(", "int", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "torch", ".", "tensor", "(", "gt", "*", "valid_mask", ".", "astype", "(", "int", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "ssim", "=", "ssim_map", "[", "valid_mask", "]", ".", "mean", "(", ")", "\n", "\n", "gt", "=", "gt", "[", "valid_mask", "]", "\n", "pred", "=", "pred", "[", "valid_mask", "]", "\n", "\n", "if", "valid_mask", ".", "sum", "(", ")", "==", "0", "or", "sum", "(", "gt", ")", "==", "0", ":", "\n", "                ", "return", "np", ".", "array", "(", "False", ")", "\n", "\n", "", "thresh", "=", "np", ".", "maximum", "(", "(", "gt", "/", "pred", ")", ",", "(", "pred", "/", "gt", ")", ")", "\n", "d125", "=", "(", "thresh", "<", "1.25", ")", ".", "mean", "(", ")", "\n", "d125_2", "=", "(", "thresh", "<", "1.25", "**", "2", ")", ".", "mean", "(", ")", "\n", "d125_3", "=", "(", "thresh", "<", "1.25", "**", "3", ")", ".", "mean", "(", ")", "\n", "d105", "=", "(", "thresh", "<", "1.05", ")", ".", "mean", "(", ")", "\n", "d110", "=", "(", "thresh", "<", "1.10", ")", ".", "mean", "(", ")", "\n", "\n", "rmse", "=", "(", "gt", "-", "pred", ")", "**", "2", "\n", "rmse", "=", "np", ".", "sqrt", "(", "rmse", ".", "mean", "(", ")", ")", "\n", "\n", "rel", "=", "np", ".", "mean", "(", "(", "abs", "(", "gt", "-", "pred", ")", ")", "/", "gt", ")", "\n", "\n", "err", "=", "np", ".", "log", "(", "pred", ")", "-", "np", ".", "log", "(", "gt", ")", "\n", "silog", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "err", "**", "2", ")", "-", "np", ".", "mean", "(", "err", ")", "**", "2", ")", "*", "100", "\n", "\n", "err", "=", "np", ".", "abs", "(", "np", ".", "log10", "(", "pred", ")", "-", "np", ".", "log10", "(", "gt", ")", ")", "\n", "log10", "=", "np", ".", "mean", "(", "err", ")", "\n", "\n", "scaled_rms", "=", "np", ".", "sqrt", "(", "(", "(", "scale", "*", "pred", "-", "gt", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "\n", "return", "rmse", ",", "scaled_rms", ",", "rel", ",", "ssim", ".", "item", "(", ")", ",", "d105", ",", "d110", ",", "d125", ",", "d125_2", ",", "d125_3", "\n", "\n", "", "def", "get_refD_scores", "(", "pred_depth", ",", "depth_shift", ",", "color_image_path", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "mask_path", ")", "and", "\"refined\"", "in", "refD_gt_depth_path", ":", "\n", "                ", "return", "\n", "\n", "", "depth_shift", "=", "np", ".", "array", "(", "depth_shift", ")", "\n", "ref_d_gt_depth", "=", "cv2", ".", "resize", "(", "cv2", ".", "imread", "(", "refD_gt_depth_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", ",", "\n", "(", "pred_depth", ".", "shape", "[", "1", "]", ",", "pred_depth", ".", "shape", "[", "0", "]", ")", ",", "0", ",", "0", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "ref_d_gt_depth", "=", "np", ".", "array", "(", "ref_d_gt_depth", ")", "/", "depth_shift", "\n", "pred_depth", "=", "np", ".", "array", "(", "pred_depth", ")", "\n", "\n", "pred_depth", "=", "cv2", ".", "resize", "(", "pred_depth", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "0", ",", "0", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "ref_d_gt_depth", "=", "cv2", ".", "resize", "(", "ref_d_gt_depth", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "0", ",", "0", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "if", "\"no_mirror\"", "in", "color_image_path", ":", "\n", "                ", "mirror_error", "=", "tuple", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "all_image_error", "=", "compute_errors", "(", "ref_d_gt_depth", ",", "pred_depth", ",", "True", ")", "\n", "non_mirror_error", "=", "all_image_error", "\n", "", "else", ":", "\n", "                ", "mirror_mask", "=", "cv2", ".", "resize", "(", "cv2", ".", "imread", "(", "mask_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "0", ",", "0", ",", "\n", "cv2", ".", "INTER_NEAREST", ")", "\n", "mirror_error", "=", "compute_errors", "(", "ref_d_gt_depth", ",", "pred_depth", ",", "mirror_mask", ">", "0", ")", "\n", "non_mirror_error", "=", "compute_errors", "(", "ref_d_gt_depth", ",", "pred_depth", ",", "mirror_mask", "==", "False", ")", "\n", "all_image_error", "=", "compute_errors", "(", "ref_d_gt_depth", ",", "pred_depth", ",", "True", ")", "\n", "\n", "", "if", "not", "all_image_error", "or", "not", "mirror_error", "or", "not", "non_mirror_error", ":", "\n", "                ", "return", "\n", "\n", "", "one_m_nm_all", "=", "mirror_error", "+", "non_mirror_error", "+", "all_image_error", "\n", "return", "one_m_nm_all", "\n", "\n", "", "def", "get_rawD_scores", "(", "pred_depth", ",", "depth_shift", ",", "color_image_path", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "mask_path", ")", ":", "\n", "                ", "return", "\n", "", "depth_shift", "=", "np", ".", "array", "(", "depth_shift", ")", "\n", "ref_d_gt_depth", "=", "cv2", ".", "resize", "(", "cv2", ".", "imread", "(", "rawD_gt_depth_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", ",", "\n", "(", "pred_depth", ".", "shape", "[", "1", "]", ",", "pred_depth", ".", "shape", "[", "0", "]", ")", ",", "0", ",", "0", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "ref_d_gt_depth", "=", "np", ".", "array", "(", "ref_d_gt_depth", ")", "/", "depth_shift", "\n", "pred_depth", "=", "np", ".", "array", "(", "pred_depth", ")", "\n", "\n", "pred_depth", "=", "cv2", ".", "resize", "(", "pred_depth", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "0", ",", "0", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "ref_d_gt_depth", "=", "cv2", ".", "resize", "(", "ref_d_gt_depth", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "0", ",", "0", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "if", "\"no_mirror\"", "in", "color_image_path", ":", "\n", "                ", "mirror_error", "=", "tuple", "(", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "all_image_error", "=", "compute_errors", "(", "ref_d_gt_depth", ",", "pred_depth", ",", "True", ")", "\n", "non_mirror_error", "=", "all_image_error", "\n", "", "else", ":", "\n", "                ", "mirror_mask", "=", "cv2", ".", "resize", "(", "cv2", ".", "imread", "(", "mask_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "0", ",", "0", ",", "\n", "cv2", ".", "INTER_NEAREST", ")", "\n", "mirror_error", "=", "compute_errors", "(", "ref_d_gt_depth", ",", "pred_depth", ",", "mirror_mask", ">", "0", ")", "\n", "non_mirror_error", "=", "compute_errors", "(", "ref_d_gt_depth", ",", "pred_depth", ",", "mirror_mask", "==", "False", ")", "\n", "all_image_error", "=", "compute_errors", "(", "ref_d_gt_depth", ",", "pred_depth", ",", "True", ")", "\n", "\n", "", "if", "not", "all_image_error", "or", "not", "mirror_error", "or", "not", "non_mirror_error", ":", "\n", "                ", "return", "\n", "", "one_m_nm_all", "=", "mirror_error", "+", "non_mirror_error", "+", "all_image_error", "\n", "return", "one_m_nm_all", "\n", "\n", "", "one_ref_m_nm_all", "=", "[", "]", "\n", "one_raw_m_nm_all", "=", "[", "]", "\n", "try", ":", "\n", "            ", "one_ref_m_nm_all", "=", "torch", ".", "tensor", "(", "get_refD_scores", "(", "np", ".", "array", "(", "pred_depth", ")", ".", "copy", "(", ")", ",", "depth_shift", ",", "color_image_path", ")", ")", "\n", "self", ".", "m_nm_all_refD", "+=", "one_ref_m_nm_all", "\n", "self", ".", "ref_cnt", "+=", "1", "\n", "one_ref_m_nm_all", "=", "one_ref_m_nm_all", ".", "tolist", "(", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "color_image_path", ",", "\"can't calculate ref error\"", ")", "\n", "\n", "", "try", ":", "\n", "            ", "one_raw_m_nm_all", "=", "torch", ".", "tensor", "(", "get_rawD_scores", "(", "np", ".", "array", "(", "pred_depth", ")", ".", "copy", "(", ")", ",", "depth_shift", ",", "color_image_path", ")", ")", "\n", "self", ".", "m_nm_all_rawD", "+=", "one_raw_m_nm_all", "\n", "self", ".", "raw_cnt", "+=", "1", "\n", "one_raw_m_nm_all", "=", "one_raw_m_nm_all", ".", "tolist", "(", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "color_image_path", ",", "\"can't calculate raw error\"", ")", "\n", "", "if", "self", ".", "save_score_per_sample", ":", "\n", "            ", "img_name", "=", "color_image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "self", ".", "sample_score", "[", "img_name", "]", "=", "{", "\"ref\"", ":", "one_ref_m_nm_all", ",", "\"raw\"", ":", "one_raw_m_nm_all", "}", "\n", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.save_result": [[390, 416], ["numpy.array", "numpy.array", "os.path.join", "pred_depth_scaled.astype.astype.astype", "os.path.join", "rawD_gt_depth_path.replace", "os.makedirs", "cv2.imwrite", "os.path.exists", "os.makedirs", "os.path.split", "open", "file.write", "file.write", "os.path.exists", "rawD_gt_depth_path.replace().split", "random.randint", "rawD_gt_depth_path.replace"], "methods", ["None"], ["", "def", "save_result", "(", "self", ",", "main_output_folder", ",", "pred_depth", ",", "depth_shift", ",", "color_img_path", ",", "rawD_gt_depth_path", ",", "\n", "refD_gt_depth_path", ",", "mask_path", ")", ":", "\n", "\n", "        ", "self", ".", "main_output_folder", "=", "main_output_folder", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "main_output_folder", ")", "and", "self", ".", "to_create_folder", ":", "\n", "            ", "self", ".", "main_output_folder", "=", "self", ".", "main_output_folder", "+", "\"_{}\"", ".", "format", "(", "random", ".", "randint", "(", "0", ",", "10000", ")", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "main_output_folder", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "to_create_folder", "=", "False", "\n", "", "elif", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "main_output_folder", ")", ":", "\n", "            ", "self", ".", "to_create_folder", "=", "False", "\n", "\n", "", "pred_depth", "=", "np", ".", "array", "(", "pred_depth", ")", "\n", "depth_shift", "=", "np", ".", "array", "(", "depth_shift", ")", "\n", "\n", "info_txt_save_path", "=", "os", ".", "path", ".", "join", "(", "main_output_folder", ",", "\"color_mask_gtD_predD.txt\"", ")", "\n", "pred_depth_scaled", "=", "pred_depth", "*", "depth_shift", "\n", "pred_depth_scaled", "=", "pred_depth_scaled", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "raw_d_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_root", ",", "rawD_gt_depth_path", ".", "replace", "(", "self", ".", "dataset_root", ",", "\"\"", ")", ".", "split", "(", "\"/\"", ")", "[", "1", "]", ")", "\n", "depth_np_save_path", "=", "rawD_gt_depth_path", ".", "replace", "(", "raw_d_folder", ",", "main_output_folder", "+", "\"/pred_depth\"", ")", "\n", "pred_d_save_folder", "=", "os", ".", "path", ".", "split", "(", "depth_np_save_path", ")", "[", "0", "]", "\n", "os", ".", "makedirs", "(", "pred_d_save_folder", ",", "exist_ok", "=", "True", ")", "\n", "cv2", ".", "imwrite", "(", "depth_np_save_path", ",", "pred_depth_scaled", ",", "[", "cv2", ".", "IMWRITE_PNG_COMPRESSION", ",", "0", "]", ")", "\n", "\n", "with", "open", "(", "info_txt_save_path", ",", "\"a\"", ")", "as", "file", ":", "\n", "            ", "file", ".", "write", "(", "\"{} {} {} {}\"", ".", "format", "(", "color_img_path", ",", "mask_path", ",", "refD_gt_depth_path", ",", "depth_np_save_path", ")", ")", "\n", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM.__init__": [[419, 426], ["super().__init__", "mirror3d_metrics.SSIM.create_window"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.__init__", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM.create_window"], ["    ", "def", "__init__", "(", "self", ",", "window_size", "=", "11", ",", "size_average", "=", "True", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "SSIM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "channel", "=", "1", "\n", "self", ".", "window", "=", "self", ".", "create_window", "(", "window_size", ",", "self", ".", "channel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM.gaussian": [[427, 431], ["torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "methods", ["None"], ["", "def", "gaussian", "(", "self", ",", "window_size", ",", "sigma", ")", ":", "\n", "        ", "gauss", "=", "torch", ".", "Tensor", "(", "\n", "[", "math", ".", "exp", "(", "-", "(", "x", "-", "window_size", "//", "2", ")", "**", "2", "/", "float", "(", "2", "*", "sigma", "**", "2", ")", ")", "for", "x", "in", "range", "(", "window_size", ")", "]", ")", "\n", "return", "gauss", "/", "gauss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM.create_window": [[432, 437], ["mirror3d_metrics.SSIM.gaussian().unsqueeze", "mirror3d_metrics.SSIM.mm().float().unsqueeze().unsqueeze", "torch.autograd.Variable", "mirror3d_metrics.SSIM.mm().float().unsqueeze().unsqueeze.expand().contiguous", "mirror3d_metrics.SSIM.gaussian", "mirror3d_metrics.SSIM.mm().float().unsqueeze", "mirror3d_metrics.SSIM.mm().float().unsqueeze().unsqueeze.expand", "mirror3d_metrics.SSIM.mm().float", "mirror3d_metrics.SSIM.mm", "mirror3d_metrics.SSIM.t"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM.gaussian"], ["", "def", "create_window", "(", "self", ",", "window_size", ",", "channel", ")", ":", "\n", "        ", "_1D_window", "=", "self", ".", "gaussian", "(", "window_size", ",", "1.5", ")", ".", "unsqueeze", "(", "1", ")", "\n", "_2D_window", "=", "_1D_window", ".", "mm", "(", "_1D_window", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "window", "=", "torch", ".", "autograd", ".", "Variable", "(", "_2D_window", ".", "expand", "(", "channel", ",", "1", ",", "window_size", ",", "window_size", ")", ".", "contiguous", "(", ")", ")", "\n", "return", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM._ssim": [[438, 456], ["torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d.pow", "torch.nn.functional.conv2d.pow", "ssim_map.squeeze", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d"], "methods", ["None"], ["", "def", "_ssim", "(", "self", ",", "img1", ",", "img2", ",", "window", ",", "window_size", ",", "channel", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "mu1", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "mu2", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "\n", "\n", "mu1_sq", "=", "mu1", ".", "pow", "(", "2", ")", "\n", "mu2_sq", "=", "mu2", ".", "pow", "(", "2", ")", "\n", "mu1_mu2", "=", "mu1", "*", "mu2", "\n", "\n", "sigma1_sq", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "img1", "*", "img1", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_sq", "\n", "sigma2_sq", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "img2", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu2_sq", "\n", "sigma12", "=", "torch", ".", "nn", ".", "functional", ".", "conv2d", "(", "img1", "*", "img2", ",", "window", ",", "padding", "=", "window_size", "//", "2", ",", "groups", "=", "channel", ")", "-", "mu1_mu2", "\n", "\n", "c1", "=", "0.01", "**", "2", "\n", "c2", "=", "0.03", "**", "2", "\n", "\n", "ssim_map", "=", "(", "(", "2", "*", "mu1_mu2", "+", "c1", ")", "*", "(", "2", "*", "sigma12", "+", "c2", ")", ")", "/", "(", "(", "mu1_sq", "+", "mu2_sq", "+", "c1", ")", "*", "(", "sigma1_sq", "+", "sigma2_sq", "+", "c2", ")", ")", "\n", "\n", "return", "ssim_map", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM.forward": [[457, 483], ["torch.zeros_like", "torch.zeros_like", "img1.copy_.copy_.copy_", "img2.copy_.copy_.copy_", "img1.copy_.copy_.size", "mirror3d_metrics.SSIM._ssim", "mirror3d_metrics.SSIM.create_window", "window.cuda.cuda.type_as", "mirror3d_metrics.SSIM.window.data.type", "img1.copy_.copy_.data.type", "window.cuda.cuda.cuda", "img1.copy_.copy_.get_device"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM._ssim", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM.create_window"], ["", "def", "forward", "(", "self", ",", "pred", ",", "gt", ")", ":", "\n", "\n", "        ", "img1", "=", "torch", ".", "zeros_like", "(", "pred", ")", "\n", "img2", "=", "torch", ".", "zeros_like", "(", "gt", ")", "\n", "\n", "img1", "=", "img1", ".", "copy_", "(", "pred", ")", "\n", "img2", "=", "img2", ".", "copy_", "(", "gt", ")", "\n", "\n", "img2", "[", "img2", "<", "self", ".", "eps", "]", "=", "0", "\n", "img1", "[", "img2", "<", "self", ".", "eps", "]", "=", "0", "\n", "\n", "(", "_", ",", "channel", ",", "_", ",", "_", ")", "=", "img1", ".", "size", "(", ")", "\n", "\n", "if", "channel", "==", "self", ".", "channel", "and", "self", ".", "window", ".", "data", ".", "type", "(", ")", "==", "img1", ".", "data", ".", "type", "(", ")", ":", "\n", "            ", "window", "=", "self", ".", "window", "\n", "", "else", ":", "\n", "            ", "window", "=", "self", ".", "create_window", "(", "self", ".", "window_size", ",", "channel", ")", "\n", "\n", "if", "img1", ".", "is_cuda", ":", "\n", "                ", "window", "=", "window", ".", "cuda", "(", "img1", ".", "get_device", "(", ")", ")", "\n", "", "window", "=", "window", ".", "type_as", "(", "img1", ")", "\n", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "channel", "=", "channel", "\n", "\n", "", "return", "self", ".", "_ssim", "(", "img1", ",", "img2", ",", "window", ",", "self", ".", "window_size", ",", "channel", ",", "self", ".", "size_average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.MirrorSegEval.__init__": [[486, 492], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "width", "=", "640", ",", "height", "=", "480", ")", ":", "\n", "        ", "self", ".", "f_measure_list", "=", "[", "]", "\n", "self", ".", "IOU_list", "=", "[", "]", "\n", "self", ".", "MAE_list", "=", "[", "]", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.MirrorSegEval.reset_setting": [[493, 499], ["None"], "methods", ["None"], ["", "def", "reset_setting", "(", "self", ",", "width", "=", "640", ",", "height", "=", "480", ")", ":", "\n", "        ", "self", ".", "f_measure_list", "=", "[", "]", "\n", "self", ".", "IOU_list", "=", "[", "]", "\n", "self", ".", "MAE_list", "=", "[", "]", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.MirrorSegEval.print_seg_score": [[500, 505], ["print", "print", "print", "print", "len", "numpy.mean", "numpy.mean", "numpy.mean"], "methods", ["None"], ["", "def", "print_seg_score", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"|{:<25} : {:<5}|\"", ".", "format", "(", "\"evaluation sample num\"", ",", "len", "(", "self", ".", "f_measure_list", ")", ")", ")", "\n", "print", "(", "\"|{:<25} : {:<5.3f}|\"", ".", "format", "(", "\"F measure\"", ",", "np", ".", "mean", "(", "self", ".", "f_measure_list", ")", ")", ")", "\n", "print", "(", "\"|{:<25} : {:<5.3f}|\"", ".", "format", "(", "\"MAE\"", ",", "np", ".", "mean", "(", "self", ".", "MAE_list", ")", ")", ")", "\n", "print", "(", "\"|{:<25} : {:<5.3f}|\"", ".", "format", "(", "\"IOU\"", ",", "np", ".", "mean", "(", "self", ".", "IOU_list", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.MirrorSegEval.compute_and_update_seg_metrics": [[506, 512], ["cv2.resize", "cv2.resize", "mirror3d_metrics.MirrorSegEval.IOU_list.append", "mirror3d_metrics.MirrorSegEval.MAE_list.append", "mirror3d_metrics.MirrorSegEval.f_measure_list.append", "cv2.resize.astype", "cv2.resize.astype", "get_IOU", "get_MAE", "get_f_measure"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_IOU", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_MAE", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_f_measure"], ["", "def", "compute_and_update_seg_metrics", "(", "self", ",", "pred_mask", ",", "gt_mask", ")", ":", "\n", "        ", "pred_mask", "=", "cv2", ".", "resize", "(", "pred_mask", ".", "astype", "(", "\"uint8\"", ")", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "0", ",", "0", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "gt_mask", "=", "cv2", ".", "resize", "(", "gt_mask", ".", "astype", "(", "\"uint8\"", ")", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "0", ",", "0", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "self", ".", "IOU_list", ".", "append", "(", "get_IOU", "(", "pred_mask", ",", "gt_mask", ")", ")", "\n", "self", ".", "MAE_list", ".", "append", "(", "get_MAE", "(", "pred_mask", ",", "gt_mask", ")", ")", "\n", "self", ".", "f_measure_list", ".", "append", "(", "get_f_measure", "(", "pred_mask", ",", "gt_mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.MirrorSegEval.get_results": [[513, 515], ["None"], "methods", ["None"], ["", "def", "get_results", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "IOU_list", ",", "self", ".", "f_measure_list", ",", "self", ".", "MAE_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.pycococreatortools.resize_binary_mask": [[14, 18], ["PIL.Image.fromarray", "image.resize.resize", "numpy.asarray().astype", "array.astype", "numpy.asarray", "numpy.np.uint8"], "function", ["None"], ["def", "resize_binary_mask", "(", "array", ",", "new_size", ")", ":", "\n", "    ", "image", "=", "Image", ".", "fromarray", "(", "array", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", ")", "\n", "image", "=", "image", ".", "resize", "(", "new_size", ")", "\n", "return", "np", ".", "asarray", "(", "image", ")", ".", "astype", "(", "np", ".", "bool_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.pycococreatortools.close_contour": [[20, 24], ["numpy.array_equal", "numpy.vstack"], "function", ["None"], ["", "def", "close_contour", "(", "contour", ")", ":", "\n", "    ", "if", "not", "np", ".", "array_equal", "(", "contour", "[", "0", "]", ",", "contour", "[", "-", "1", "]", ")", ":", "\n", "        ", "contour", "=", "np", ".", "vstack", "(", "(", "contour", ",", "contour", "[", "0", "]", ")", ")", "\n", "", "return", "contour", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.pycococreatortools.binary_mask_to_rle": [[26, 35], ["rle.get", "enumerate", "list", "itertools.groupby", "rle.get.append", "binary_mask.ravel", "rle.get.append", "len", "list"], "function", ["None"], ["", "def", "binary_mask_to_rle", "(", "binary_mask", ")", ":", "\n", "    ", "rle", "=", "{", "'counts'", ":", "[", "]", ",", "'size'", ":", "list", "(", "binary_mask", ".", "shape", ")", "}", "\n", "counts", "=", "rle", ".", "get", "(", "'counts'", ")", "\n", "for", "i", ",", "(", "value", ",", "elements", ")", "in", "enumerate", "(", "groupby", "(", "binary_mask", ".", "ravel", "(", "order", "=", "'F'", ")", ")", ")", ":", "\n", "        ", "if", "i", "==", "0", "and", "value", "==", "1", ":", "\n", "            ", "counts", ".", "append", "(", "0", ")", "\n", "", "counts", ".", "append", "(", "len", "(", "list", "(", "elements", ")", ")", ")", "\n", "\n", "", "return", "rle", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.pycococreatortools.binary_mask_to_polygon": [[37, 63], ["numpy.pad", "skimage.measure.find_contours", "numpy.subtract", "pycococreatortools.close_contour", "skimage.measure.approximate_polygon", "numpy.flip", "np.flip.ravel().tolist", "polygons.append", "len", "np.flip.ravel"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.pycococreatortools.close_contour"], ["", "def", "binary_mask_to_polygon", "(", "binary_mask", ",", "tolerance", "=", "0", ")", ":", "\n", "    ", "\"\"\"Converts a binary mask to COCO polygon representation\n\n    Args:\n        binary_mask: a 2D binary numpy array where '1's represent the object\n        tolerance: Maximum distance from original points of polygon to approximated\n            polygonal chain. If tolerance is 0, the original coordinate array is returned.\n\n    \"\"\"", "\n", "polygons", "=", "[", "]", "\n", "# pad mask to close contours of shapes which start and end at an edge", "\n", "padded_binary_mask", "=", "np", ".", "pad", "(", "binary_mask", ",", "pad_width", "=", "1", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "contours", "=", "measure", ".", "find_contours", "(", "padded_binary_mask", ",", "0.5", ")", "\n", "contours", "=", "np", ".", "subtract", "(", "contours", ",", "1", ")", "\n", "for", "contour", "in", "contours", ":", "\n", "        ", "contour", "=", "close_contour", "(", "contour", ")", "\n", "contour", "=", "measure", ".", "approximate_polygon", "(", "contour", ",", "tolerance", ")", "\n", "if", "len", "(", "contour", ")", "<", "3", ":", "\n", "            ", "continue", "\n", "", "contour", "=", "np", ".", "flip", "(", "contour", ",", "axis", "=", "1", ")", "\n", "segmentation", "=", "contour", ".", "ravel", "(", ")", ".", "tolist", "(", ")", "\n", "# after padding and subtracting 1 we may get -0.5 points in our segmentation ", "\n", "segmentation", "=", "[", "0", "if", "i", "<", "0", "else", "i", "for", "i", "in", "segmentation", "]", "\n", "polygons", ".", "append", "(", "segmentation", ")", "\n", "\n", "", "return", "polygons", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.pycococreatortools.create_image_info": [[65, 80], ["datetime.datetime.utcnow().isoformat", "datetime.datetime.utcnow"], "function", ["None"], ["", "def", "create_image_info", "(", "image_id", ",", "file_name", ",", "image_size", ",", "\n", "date_captured", "=", "datetime", ".", "datetime", ".", "utcnow", "(", ")", ".", "isoformat", "(", "' '", ")", ",", "\n", "license_id", "=", "1", ",", "coco_url", "=", "\"\"", ",", "flickr_url", "=", "\"\"", ")", ":", "\n", "    ", "image_info", "=", "{", "\n", "\"id\"", ":", "image_id", ",", "\n", "\"file_name\"", ":", "file_name", ",", "\n", "\"width\"", ":", "image_size", "[", "0", "]", ",", "\n", "\"height\"", ":", "image_size", "[", "1", "]", ",", "\n", "\"date_captured\"", ":", "date_captured", ",", "\n", "\"license\"", ":", "license_id", ",", "\n", "\"coco_url\"", ":", "coco_url", ",", "\n", "\"flickr_url\"", ":", "flickr_url", "\n", "}", "\n", "\n", "return", "image_info", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.pycococreatortools.create_annotation_info": [[82, 120], ["mask.encode", "mask.area", "pycococreatortools.resize_binary_mask", "numpy.asfortranarray", "mask.toBbox", "pycococreatortools.binary_mask_to_rle", "pycococreatortools.binary_mask_to_polygon", "mask.area.tolist", "mask.toBbox.tolist", "resize_binary_mask.astype"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.pycococreatortools.resize_binary_mask", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.pycococreatortools.binary_mask_to_rle", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.pycococreatortools.binary_mask_to_polygon"], ["", "def", "create_annotation_info", "(", "annotation_id", ",", "image_id", ",", "category_info", ",", "binary_mask", ",", "\n", "image_size", "=", "None", ",", "tolerance", "=", "2", ",", "bounding_box", "=", "None", ")", ":", "\n", "    ", "from", "pycocotools", "import", "mask", "\n", "\n", "if", "image_size", "is", "not", "None", ":", "\n", "        ", "binary_mask", "=", "resize_binary_mask", "(", "binary_mask", ",", "image_size", ")", "\n", "\n", "", "binary_mask_encoded", "=", "mask", ".", "encode", "(", "np", ".", "asfortranarray", "(", "binary_mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ")", "\n", "\n", "area", "=", "mask", ".", "area", "(", "binary_mask_encoded", ")", "\n", "if", "area", "<", "1", ":", "\n", "        ", "return", "None", "\n", "\n", "", "if", "bounding_box", "is", "None", ":", "\n", "        ", "bounding_box", "=", "mask", ".", "toBbox", "(", "binary_mask_encoded", ")", "\n", "\n", "", "if", "category_info", "[", "\"is_crowd\"", "]", ":", "\n", "        ", "is_crowd", "=", "1", "\n", "segmentation", "=", "binary_mask_to_rle", "(", "binary_mask", ")", "\n", "", "else", ":", "\n", "        ", "is_crowd", "=", "0", "\n", "segmentation", "=", "binary_mask_to_polygon", "(", "binary_mask", ",", "tolerance", ")", "\n", "if", "not", "segmentation", ":", "\n", "            ", "return", "None", "\n", "\n", "", "", "annotation_info", "=", "{", "\n", "\"id\"", ":", "annotation_id", ",", "\n", "\"image_id\"", ":", "image_id", ",", "\n", "\"category_id\"", ":", "category_info", "[", "\"id\"", "]", ",", "\n", "\"iscrowd\"", ":", "is_crowd", ",", "\n", "\"area\"", ":", "area", ".", "tolist", "(", ")", ",", "\n", "\"bbox\"", ":", "bounding_box", ".", "tolist", "(", ")", ",", "\n", "\"segmentation\"", ":", "segmentation", ",", "\n", "\"width\"", ":", "binary_mask", ".", "shape", "[", "1", "]", ",", "\n", "\"height\"", ":", "binary_mask", ".", "shape", "[", "0", "]", ",", "\n", "}", "\n", "\n", "return", "annotation_info", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.export_mat_image.export_img_from_mat": [[9, 56], ["h5py.File", "int", "int", "numpy.array", "numpy.uint8().transpose", "os.path.join", "os.makedirs", "enumerate", "print", "numpy.array", "numpy.uint16().transpose", "os.path.join", "os.makedirs", "enumerate", "print", "PIL.Image.fromarray", "os.path.join", "Image.fromarray.save", "PIL.Image.fromarray", "os.path.join", "Image.fromarray.save", "numpy.uint8", "numpy.uint16", "str", "str"], "function", ["None"], ["def", "export_img_from_mat", "(", "mat_path", ",", "output_dir", ")", ":", "\n", "    ", "\"\"\"Export rgb/depth image from mat file.\n    Args:\n        mat_path (str): the path of .mat file.\n                        Assume the depth info is in the \"depths\" field, the rgb info is in the \"images\" field.\n        output_dir (str): the path to save the output image.\n\n    \"\"\"", "\n", "h5_file", "=", "h5py", ".", "File", "(", "mat_path", ")", "\n", "# center crop the NYUv2 image by 5%", "\n", "new_w", "=", "608", "\n", "new_h", "=", "456", "\n", "ori_w", "=", "640", "\n", "ori_h", "=", "480", "\n", "w_border", "=", "int", "(", "(", "ori_w", "-", "new_w", ")", "/", "2", ")", "\n", "h_border", "=", "int", "(", "(", "ori_h", "-", "new_h", ")", "/", "2", ")", "\n", "\n", "# exporting color image", "\n", "img_data", "=", "h5_file", "[", "\"images\"", "]", "\n", "img_np", "=", "np", ".", "array", "(", "img_data", ")", "\n", "img_np", "=", "np", ".", "uint8", "(", "img_np", ")", ".", "transpose", "(", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "color_output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"color\"", ")", "\n", "os", ".", "makedirs", "(", "color_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "i", ",", "single_img_np", "in", "enumerate", "(", "img_np", ")", ":", "\n", "        ", "single_img_np", "=", "single_img_np", "[", "h_border", ":", "h_border", "+", "new_h", ",", "w_border", ":", "w_border", "+", "new_w", "]", "\n", "img_pil", "=", "Image", ".", "fromarray", "(", "single_img_np", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "color_output_dir", ",", "'{}.jpg'", ".", "format", "(", "str", "(", "i", "+", "1", ")", ")", ")", "\n", "img_pil", ".", "save", "(", "save_path", ")", "\n", "", "print", "(", "\"color images saved under : \"", ",", "color_output_dir", ")", "\n", "\n", "# exporting depth image (unit mm)", "\n", "img_data", "=", "h5_file", "[", "\"depths\"", "]", "\n", "img_np", "=", "np", ".", "array", "(", "img_data", ")", "\n", "# convert the depth unit to mm", "\n", "img_np", "=", "img_np", "*", "1000", "\n", "img_np", "=", "np", ".", "uint16", "(", "img_np", ")", ".", "transpose", "(", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "depth_output_dir", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"depth\"", ")", "\n", "os", ".", "makedirs", "(", "depth_output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "i", ",", "single_img_np", "in", "enumerate", "(", "img_np", ")", ":", "\n", "        ", "single_img_np", "=", "single_img_np", "[", "h_border", ":", "h_border", "+", "new_h", ",", "w_border", ":", "w_border", "+", "new_w", "]", "\n", "img_pil", "=", "Image", ".", "fromarray", "(", "single_img_np", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "depth_output_dir", ",", "'{}.png'", ".", "format", "(", "str", "(", "i", "+", "1", ")", ")", ")", "\n", "img_pil", ".", "save", "(", "save_path", ")", "\n", "\n", "", "print", "(", "\"depth images saved under : \"", ",", "depth_output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.get_fileList_under_folder": [[13, 17], ["i.strip", "os.popen().readlines", "os.popen"], "function", ["None"], ["def", "get_fileList_under_folder", "(", "folder_path", ")", ":", "\n", "    ", "command", "=", "\"find -L {} -type f \"", ".", "format", "(", "folder_path", ")", "\n", "file_path_list", "=", "[", "i", ".", "strip", "(", ")", "for", "i", "in", "os", ".", "popen", "(", "command", ")", ".", "readlines", "(", ")", "]", "\n", "return", "file_path_list", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_plane_json": [[19, 28], ["dict", "open", "json.loads", "dict", "j.read"], "function", ["None"], ["", "def", "read_plane_json", "(", "json_path", ")", ":", "\n", "    ", "with", "open", "(", "json_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "info", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "plane_info", "=", "dict", "(", ")", "\n", "for", "item", "in", "info", ":", "\n", "        ", "plane_info", "[", "item", "[", "\"mask_id\"", "]", "]", "=", "dict", "(", ")", "\n", "plane_info", "[", "item", "[", "\"mask_id\"", "]", "]", "[", "\"plane_parameter\"", "]", "=", "item", "[", "\"plane\"", "]", "\n", "plane_info", "[", "item", "[", "\"mask_id\"", "]", "]", "[", "\"mirror_normal\"", "]", "=", "item", "[", "\"normal\"", "]", "\n", "", "return", "plane_info", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.check_converge": [[30, 47], ["print", "print", "logger.info", "len", "numpy.abs", "numpy.average", "logger.info", "len", "len", "numpy.average", "numpy.average"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info"], ["", "def", "check_converge", "(", "score_list", "=", "[", "]", ",", "check_freq", "=", "2", ",", "change_ratio_threshold", "=", "0.03", ",", "logger", "=", "None", ")", ":", "\n", "    ", "if", "logger", ":", "\n", "        ", "logger", ".", "info", "(", "\"######################### check_converge {} #########################\"", ".", "format", "(", "len", "(", "score_list", ")", ")", ")", "\n", "", "print", "(", "\"######################### check_converge {} #########################\"", ".", "format", "(", "len", "(", "score_list", ")", ")", ")", "\n", "if", "len", "(", "score_list", ")", "<", "check_freq", "*", "2", ":", "\n", "        ", "return", "False", "\n", "\n", "", "check_back_loss", "=", "score_list", "[", "-", "check_freq", "*", "2", ":", "-", "check_freq", "]", "\n", "check_forward_loss", "=", "score_list", "[", "-", "check_freq", ":", "]", "\n", "change_ratio", "=", "(", "np", ".", "abs", "(", "np", ".", "average", "(", "check_forward_loss", ")", "-", "np", ".", "average", "(", "check_back_loss", ")", ")", ")", "/", "np", ".", "average", "(", "check_back_loss", ")", "\n", "print", "(", "\"######################### change_ratio {} #########################\"", ".", "format", "(", "change_ratio", ")", ")", "\n", "if", "logger", ":", "\n", "        ", "logger", ".", "info", "(", "\"######################### change_ratio {} #########################\"", ".", "format", "(", "change_ratio", ")", ")", "\n", "", "if", "change_ratio", "<=", "change_ratio_threshold", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.list_diff": [[49, 58], ["out.append"], "function", ["None"], ["", "", "def", "list_diff", "(", "list1", ",", "list2", ")", ":", "\n", "    ", "\"\"\"\n    Get a list existing in list1 but not in list2\n    \"\"\"", "\n", "out", "=", "[", "]", "\n", "for", "ele", "in", "list1", ":", "\n", "        ", "if", "ele", "not", "in", "list2", ":", "\n", "            ", "out", ".", "append", "(", "ele", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.center_crop_image": [[60, 88], ["int", "int", "os.listdir", "print", "os.path.join", "os.path.join", "cv2.imwrite", "cv2.imread", "shutil.copy", "os.path.join.find", "cv2.imread", "cv2.imread", "print", "print"], "function", ["None"], ["", "def", "center_crop_image", "(", "input_folder", "=", "\"\"", ",", "output_folder", "=", "\"\"", ",", "new_w", "=", "608", ",", "new_h", "=", "456", ",", "ori_w", "=", "640", ",", "ori_h", "=", "480", ")", ":", "\n", "    ", "\"\"\"\n    Center crop the image\n    Args:\n        input_folder : folder path; folder contains the image that needs to be cropped\n        output_folder : folder path to saved the cropped result\n    \"\"\"", "\n", "w_border", "=", "int", "(", "(", "ori_w", "-", "new_w", ")", "/", "2", ")", "\n", "h_border", "=", "int", "(", "(", "ori_h", "-", "new_h", ")", "/", "2", ")", "\n", "for", "one_img", "in", "os", ".", "listdir", "(", "input_folder", ")", ":", "\n", "        ", "one_img_path", "=", "os", ".", "path", ".", "join", "(", "input_folder", ",", "one_img", ")", "\n", "one_img_save_path", "=", "os", ".", "path", ".", "join", "(", "output_folder", ",", "one_img", ")", "\n", "h", ",", "w", ",", "_", "=", "cv2", ".", "imread", "(", "one_img_path", ")", ".", "shape", "\n", "if", "h", "==", "new_h", "and", "w", "==", "new_w", ":", "\n", "            ", "shutil", ".", "copy", "(", "one_img_path", ",", "one_img_save_path", ")", "\n", "continue", "\n", "", "try", ":", "\n", "            ", "if", "one_img_path", ".", "find", "(", "\"depth\"", ")", ">", "0", ":", "\n", "                ", "ori_img", "=", "cv2", ".", "imread", "(", "one_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "ori_img", "=", "ori_img", "[", "h_border", ":", "h_border", "+", "new_h", ",", "w_border", ":", "w_border", "+", "new_w", "]", "\n", "", "else", ":", "\n", "                ", "ori_img", "=", "cv2", ".", "imread", "(", "one_img_path", ")", "\n", "ori_img", "=", "ori_img", "[", "h_border", ":", "h_border", "+", "new_h", ",", "w_border", ":", "w_border", "+", "new_w", "]", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "print", "(", "\"error: \"", ",", "one_img_path", ")", ")", "\n", "continue", "\n", "", "cv2", ".", "imwrite", "(", "one_img_save_path", ",", "ori_img", ")", "\n", "", "print", "(", "\"cropped image saved to {}\"", ".", "format", "(", "output_folder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_html": [[90, 94], ["print", "open", "out_file.write", "str"], "function", ["None"], ["", "def", "save_html", "(", "save_path", ",", "content", ")", ":", "\n", "    ", "with", "open", "(", "save_path", ",", "\"w\"", ")", "as", "out_file", ":", "\n", "        ", "out_file", ".", "write", "(", "str", "(", "content", ")", ")", "\n", "", "print", "(", "\"html saved to {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.update_plane_parameter_json": [[96, 115], ["os.path.exists", "general_utils.save_json", "dict", "list", "list", "int", "json.loads.append", "open", "json.loads", "list", "list", "unit_vector", "j.read", "unit_vector", "list", "list"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_json", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.unit_vector", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.unit_vector"], ["", "def", "update_plane_parameter_json", "(", "plane_parameter", ",", "plane_parameter_output_path", ",", "instance_index", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "plane_parameter_output_path", ")", ":", "\n", "        ", "with", "open", "(", "plane_parameter_output_path", ",", "'r'", ")", "as", "j", ":", "\n", "            ", "img_info", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "img_info", "=", "[", "]", "\n", "", "found", "=", "0", "\n", "for", "item", "in", "img_info", ":", "\n", "        ", "if", "item", "[", "\"mask_id\"", "]", "==", "instance_index", ":", "\n", "            ", "item", "[", "\"plane\"", "]", "=", "list", "(", "plane_parameter", ")", "\n", "item", "[", "\"normal\"", "]", "=", "list", "(", "unit_vector", "(", "list", "(", "plane_parameter", "[", ":", "-", "1", "]", ")", ")", ")", "\n", "found", "=", "1", "\n", "", "", "if", "found", "==", "0", ":", "\n", "        ", "one_info", "=", "dict", "(", ")", "\n", "one_info", "[", "\"plane\"", "]", "=", "list", "(", "plane_parameter", ")", "\n", "one_info", "[", "\"normal\"", "]", "=", "list", "(", "unit_vector", "(", "list", "(", "plane_parameter", "[", ":", "-", "1", "]", ")", ")", ")", "\n", "one_info", "[", "\"mask_id\"", "]", "=", "int", "(", "instance_index", ")", "\n", "img_info", ".", "append", "(", "one_info", ")", "\n", "", "save_json", "(", "plane_parameter_output_path", ",", "img_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.get_all_fileAbsPath_under_folder": [[117, 123], ["os.walk", "os.path.abspath", "file_path_list.append", "os.path.join"], "function", ["None"], ["", "def", "get_all_fileAbsPath_under_folder", "(", "folder_path", ")", ":", "\n", "    ", "file_path_list", "=", "[", "]", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "os", ".", "path", ".", "abspath", "(", "folder_path", ")", ")", ":", "\n", "        ", "for", "file", "in", "files", ":", "\n", "            ", "file_path_list", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", ")", "\n", "", "", "return", "file_path_list", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_json": [[125, 129], ["open", "json.loads", "j.read"], "function", ["None"], ["", "def", "read_json", "(", "json_path", ")", ":", "\n", "    ", "with", "open", "(", "json_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "info", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt": [[131, 135], ["open", "file.readlines", "line.strip"], "function", ["None"], ["", "def", "read_txt", "(", "txt_path", ")", ":", "\n", "    ", "with", "open", "(", "txt_path", ",", "\"r\"", ")", "as", "file", ":", "\n", "        ", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "", "return", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_txt": [[137, 143], ["print", "open", "len", "file.write", "file.write", "str"], "function", ["None"], ["", "def", "save_txt", "(", "save_path", ",", "data", ")", ":", "\n", "    ", "with", "open", "(", "save_path", ",", "\"w\"", ")", "as", "file", ":", "\n", "        ", "for", "info", "in", "data", ":", "\n", "            ", "file", ".", "write", "(", "str", "(", "info", ")", ")", "\n", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "", "", "print", "(", "\"txt saved to : \"", ",", "save_path", ",", "len", "(", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_json": [[145, 152], ["json.dumps", "open", "fo.write", "fo.close", "print"], "function", ["None"], ["", "def", "save_json", "(", "save_path", ",", "data", ")", ":", "\n", "    ", "out_json", "=", "json", ".", "dumps", "(", "data", ",", "sort_keys", "=", "False", ",", "indent", "=", "4", ",", "separators", "=", "(", "','", ",", "':'", ")", ",", "\n", "ensure_ascii", "=", "False", ")", "\n", "with", "open", "(", "save_path", ",", "\"w\"", ")", "as", "fo", ":", "\n", "        ", "fo", ".", "write", "(", "out_json", ")", "\n", "fo", ".", "close", "(", ")", "\n", "print", "(", "\"json file saved to : \"", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.rreplace": [[154, 157], ["s.rsplit", "new.join"], "function", ["None"], ["", "", "def", "rreplace", "(", "s", ",", "old", ",", "new", ")", ":", "\n", "    ", "li", "=", "s", ".", "rsplit", "(", "old", ",", "1", ")", "\n", "return", "new", ".", "join", "(", "li", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.get_compose_image": [[159, 185], ["math.ceil", "PIL.Image.new", "range", "Image.new.save", "print", "PIL.Image.new", "Image.new.paste", "range", "len", "img_list[].resize", "general_utils.get_compose_image.add_margin"], "function", ["None"], ["", "def", "get_compose_image", "(", "output_save_path", ",", "img_list", ",", "mini_img_w", "=", "320", ",", "mini_img_h", "=", "240", ",", "mini_image_per_row", "=", "9", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        img_list : Image Array\n        output_save_path : composed image saved path\n    \"\"\"", "\n", "\n", "def", "add_margin", "(", "pil_img", ",", "top", ",", "right", ",", "bottom", ",", "left", ",", "color", ")", ":", "\n", "        ", "width", ",", "height", "=", "pil_img", ".", "size", "\n", "new_width", "=", "width", "+", "right", "+", "left", "\n", "new_height", "=", "height", "+", "top", "+", "bottom", "\n", "result", "=", "Image", ".", "new", "(", "pil_img", ".", "mode", ",", "(", "new_width", ",", "new_height", ")", ",", "color", ")", "\n", "result", ".", "paste", "(", "pil_img", ",", "(", "left", ",", "top", ")", ")", "\n", "return", "result", "\n", "\n", "", "image_col", "=", "math", ".", "ceil", "(", "len", "(", "img_list", ")", "/", "mini_image_per_row", ")", "\n", "to_image", "=", "Image", ".", "new", "(", "'RGB'", ",", "(", "mini_image_per_row", "*", "mini_img_w", ",", "image_col", "*", "mini_img_h", ")", ")", "\n", "\n", "for", "y", "in", "range", "(", "1", ",", "image_col", "+", "1", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "1", ",", "mini_image_per_row", "+", "1", ")", ":", "\n", "            ", "img_index", "=", "mini_image_per_row", "*", "(", "y", "-", "1", ")", "+", "x", "-", "1", "\n", "from_image", "=", "img_list", "[", "img_index", "]", ".", "resize", "(", "(", "mini_img_w", ",", "mini_img_h", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "from_image", "=", "add_margin", "(", "from_image", ",", "20", ",", "20", ",", "20", ",", "20", ",", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "to_image", ".", "paste", "(", "from_image", ",", "(", "(", "x", "-", "1", ")", "*", "mini_img_w", ",", "(", "y", "-", "1", ")", "*", "mini_img_h", ")", ")", "\n", "", "", "to_image", ".", "save", "(", "output_save_path", ")", "\n", "print", "(", "\"image saved to :\"", ",", "output_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.nth_replace": [[187, 200], ["s.find", "s.find", "len"], "function", ["None"], ["", "def", "nth_replace", "(", "s", ",", "sub", ",", "repl", ",", "n", ")", ":", "\n", "    ", "find", "=", "s", ".", "find", "(", "sub", ")", "\n", "# If find is not -1 we have found at least one match for the substring", "\n", "i", "=", "find", "!=", "-", "1", "\n", "# loop util we find the nth or we find no match", "\n", "while", "find", "!=", "-", "1", "and", "i", "!=", "n", ":", "\n", "# find + 1 means we start searching from after the last match", "\n", "        ", "find", "=", "s", ".", "find", "(", "sub", ",", "find", "+", "1", ")", "\n", "i", "+=", "1", "\n", "# If i is equal to n we found nth match so replace", "\n", "", "if", "i", "==", "n", ":", "\n", "        ", "return", "s", "[", ":", "find", "]", "+", "repl", "+", "s", "[", "find", "+", "len", "(", "sub", ")", ":", "]", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_heatmap_no_border": [[202, 216], ["matplotlib.figure", "matplotlib.imshow", "matplotlib.axis", "plt.imshow.axes.get_xaxis().set_visible", "plt.imshow.axes.get_yaxis().set_visible", "matplotlib.gcf", "matplotlib.savefig", "print", "matplotlib.get_cmap", "plt.imshow.axes.get_xaxis", "plt.imshow.axes.get_yaxis"], "function", ["None"], ["", "def", "save_heatmap_no_border", "(", "image", ",", "save_path", "=", "\"\"", ")", ":", "\n", "    ", "\"\"\" \n    Save heatmap with no border\n    Args:\n        image : M * N image \n    \"\"\"", "\n", "plt", ".", "figure", "(", ")", "\n", "fig", "=", "plt", ".", "imshow", "(", "image", ",", "cmap", "=", "plt", ".", "get_cmap", "(", "\"magma\"", ")", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "fig", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "fig", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "figure", "=", "plt", ".", "gcf", "(", ")", "\n", "plt", ".", "savefig", "(", "save_path", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ",", "dpi", "=", "100", ")", "\n", "print", "(", "\"image saved to : {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_angle_to_Azimuth": [[6, 16], ["numpy.arctan", "math.sqrt", "numpy.arctan"], "function", ["None"], ["def", "get_angle_to_Azimuth", "(", "vector", ")", ":", "\n", "    ", "x", "=", "vector", "[", "0", "]", "\n", "y", "=", "vector", "[", "1", "]", "\n", "z", "=", "vector", "[", "2", "]", "\n", "hor_angle", "=", "np", ".", "arctan", "(", "x", "/", "z", ")", "\n", "hor_degree", "=", "(", "hor_angle", "/", "np", ".", "pi", ")", "*", "180", "\n", "x_z", "=", "math", ".", "sqrt", "(", "x", "**", "2", "+", "z", "**", "2", ")", "\n", "ver_angle", "=", "np", ".", "arctan", "(", "y", "/", "x_z", ")", "\n", "ver_degree", "=", "(", "ver_angle", "/", "np", ".", "pi", ")", "*", "180", "\n", "return", "hor_degree", ",", "ver_degree", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_extrinsic": [[18, 47], ["numpy.array", "np.array.reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "numpy.dot", "numpy.concatenate", "numpy.array().reshape", "numpy.concatenate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "get_extrinsic", "(", "rx", ",", "ry", ",", "rz", ",", "translate", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        rx, ry, rz are measured in degree\n    Output:\n        4*4 extrinsic matrix\n    \"\"\"", "\n", "translate", "=", "np", ".", "array", "(", "translate", ")", "\n", "t", "=", "translate", ".", "reshape", "(", "3", ",", "1", ")", "\n", "\n", "rx", "=", "(", "rx", "/", "180", ")", "*", "np", ".", "pi", "\n", "ry", "=", "(", "ry", "/", "180", ")", "*", "np", ".", "pi", "\n", "rz", "=", "(", "rz", "/", "180", ")", "*", "np", ".", "pi", "\n", "Rx", "=", "np", ".", "array", "(", "(", "1", ",", "0", ",", "0", ",", "\n", "0", ",", "np", ".", "cos", "(", "rx", ")", ",", "-", "np", ".", "sin", "(", "rx", ")", ",", "\n", "0", ",", "np", ".", "sin", "(", "rx", ")", ",", "np", ".", "cos", "(", "rx", ")", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "Ry", "=", "np", ".", "array", "(", "(", "np", ".", "cos", "(", "ry", ")", ",", "0", ",", "np", ".", "sin", "(", "ry", ")", ",", "\n", "0", ",", "1", ",", "0", ",", "\n", "-", "np", ".", "sin", "(", "ry", ")", ",", "0", ",", "np", ".", "cos", "(", "ry", ")", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "Rz", "=", "np", ".", "array", "(", "(", "np", ".", "cos", "(", "rz", ")", ",", "-", "np", ".", "sin", "(", "rz", ")", ",", "0", ",", "\n", "np", ".", "sin", "(", "rz", ")", ",", "np", ".", "cos", "(", "rz", ")", ",", "0", ",", "\n", "0", ",", "0", ",", "1", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "R", "=", "np", ".", "dot", "(", "Ry", ",", "Rx", ")", "\n", "R", "=", "np", ".", "dot", "(", "Rz", ",", "R", ")", "\n", "\n", "R", "=", "np", ".", "concatenate", "(", "[", "R", ",", "t", "]", ",", "axis", "=", "1", ")", "\n", "last_row", "=", "np", ".", "array", "(", "(", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", ")", ")", ".", "reshape", "(", "1", ",", "4", ")", "\n", "R", "=", "np", ".", "concatenate", "(", "[", "R", ",", "last_row", "]", ",", "axis", "=", "0", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_z_from_plane": [[49, 53], ["None"], "function", ["None"], ["", "def", "get_z_from_plane", "(", "plane_parameter", ",", "x", ",", "y", ")", ":", "\n", "    ", "[", "a", ",", "b", ",", "c", ",", "d", "]", "=", "plane_parameter", "\n", "z", "=", "(", "-", "d", "-", "a", "*", "x", "-", "b", "*", "y", ")", "/", "c", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.dot_product": [[55, 57], ["sum", "zip"], "function", ["None"], ["", "def", "dot_product", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "return", "sum", "(", "(", "a", "*", "b", ")", "for", "a", ",", "b", "in", "zip", "(", "v1", ",", "v2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.length": [[59, 61], ["math.sqrt", "algorithm.dot_product"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.dot_product"], ["", "def", "length", "(", "v", ")", ":", "\n", "    ", "return", "math", ".", "sqrt", "(", "dot_product", "(", "v", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.angle": [[63, 65], ["math.acos", "algorithm.dot_product", "algorithm.length", "algorithm.length"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.dot_product", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.length", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.length"], ["", "def", "angle", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "return", "(", "(", "math", ".", "acos", "(", "dot_product", "(", "v1", ",", "v2", ")", "/", "(", "length", "(", "v1", ")", "*", "length", "(", "v2", ")", ")", ")", ")", "/", "np", ".", "pi", ")", "*", "180", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.run_ransac": [[67, 91], ["random.seed", "list", "range", "random.sample", "estimate", "range", "int", "len", "is_inlier"], "function", ["None"], ["", "def", "run_ransac", "(", "data", ",", "estimate", ",", "is_inlier", ",", "sample_size", ",", "goal_inliers", ",", "max_iterations", ",", "stop_at_goal", "=", "True", ",", "\n", "random_seed", "=", "None", ")", ":", "\n", "# start_time = time.time()", "\n", "    ", "best_ic", "=", "0", "\n", "best_model", "=", "None", "\n", "random", ".", "seed", "(", "random_seed", ")", "\n", "# random.sample cannot deal with \"data\" being a numpy array", "\n", "data", "=", "list", "(", "data", ")", "\n", "for", "i", "in", "range", "(", "max_iterations", ")", ":", "\n", "        ", "s", "=", "random", ".", "sample", "(", "data", ",", "int", "(", "sample_size", ")", ")", "\n", "m", "=", "estimate", "(", "s", ")", "\n", "ic", "=", "0", "\n", "for", "j", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "            ", "if", "is_inlier", "(", "m", ",", "data", "[", "j", "]", ")", ":", "\n", "                ", "ic", "+=", "1", "\n", "\n", "", "", "if", "ic", ">", "best_ic", ":", "\n", "            ", "best_ic", "=", "ic", "\n", "best_model", "=", "m", "\n", "if", "ic", ">", "goal_inliers", "and", "stop_at_goal", ":", "\n", "                ", "break", "\n", "# print('took iterations:', i+1, 'best model:', best_model, 'explains:', best_ic, \"used time : \", time.time() -", "\n", "# start_time)", "\n", "", "", "", "return", "best_model", ",", "best_ic", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.unit_vector": [[93, 96], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "unit_vector", "(", "vector", ")", ":", "\n", "    ", "\"\"\" Returns the unit vector of the vector.  \"\"\"", "\n", "return", "vector", "/", "np", ".", "linalg", ".", "norm", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_3_3_rotation_matrix": [[98, 118], ["numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.dot", "numpy.dot", "numpy.array", "numpy.array", "numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "get_3_3_rotation_matrix", "(", "rx", ",", "ry", ",", "rz", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        rx, ry, rz are measured in degree\n    \"\"\"", "\n", "rx", "=", "(", "rx", "/", "180", ")", "*", "np", ".", "pi", "\n", "ry", "=", "(", "ry", "/", "180", ")", "*", "np", ".", "pi", "\n", "rz", "=", "(", "rz", "/", "180", ")", "*", "np", ".", "pi", "\n", "Rx", "=", "np", ".", "array", "(", "(", "1", ",", "0", ",", "0", ",", "\n", "0", ",", "np", ".", "cos", "(", "rx", ")", ",", "-", "np", ".", "sin", "(", "rx", ")", ",", "\n", "0", ",", "np", ".", "sin", "(", "rx", ")", ",", "np", ".", "cos", "(", "rx", ")", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "Ry", "=", "np", ".", "array", "(", "(", "np", ".", "cos", "(", "ry", ")", ",", "0", ",", "np", ".", "sin", "(", "ry", ")", ",", "\n", "0", ",", "1", ",", "0", ",", "\n", "-", "np", ".", "sin", "(", "ry", ")", ",", "0", ",", "np", ".", "cos", "(", "ry", ")", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "Rz", "=", "np", ".", "array", "(", "(", "np", ".", "cos", "(", "rz", ")", ",", "-", "np", ".", "sin", "(", "rz", ")", ",", "0", ",", "\n", "np", ".", "sin", "(", "rz", ")", ",", "np", ".", "cos", "(", "rz", ")", ",", "0", ",", "\n", "0", ",", "0", ",", "1", ")", ")", ".", "reshape", "(", "3", ",", "3", ")", "\n", "R", "=", "np", ".", "dot", "(", "Ry", ",", "Rx", ")", "\n", "R", "=", "np", ".", "dot", "(", "Rz", ",", "R", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.rotation_matrix_from_vectors": [[120, 133], ["numpy.cross", "numpy.dot", "numpy.linalg.norm", "numpy.array", "numpy.eye", "np.array.dot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "rotation_matrix_from_vectors", "(", "vec1", ",", "vec2", ")", ":", "\n", "    ", "\"\"\" Find the rotation matrix that aligns vec1 to vec2\n    :param vec1: A 3d \"source\" vector\n    :param vec2: A 3d \"destination\" vector\n    :return mat: A transform matrix (3x3) which when applied to vec1, aligns it with vec2.\n    \"\"\"", "\n", "a", ",", "b", "=", "(", "vec1", "/", "np", ".", "linalg", ".", "norm", "(", "vec1", ")", ")", ".", "reshape", "(", "3", ")", ",", "(", "vec2", "/", "np", ".", "linalg", ".", "norm", "(", "vec2", ")", ")", ".", "reshape", "(", "3", ")", "\n", "v", "=", "np", ".", "cross", "(", "a", ",", "b", ")", "\n", "c", "=", "np", ".", "dot", "(", "a", ",", "b", ")", "\n", "s", "=", "np", ".", "linalg", ".", "norm", "(", "v", ")", "\n", "k_mat", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "v", "[", "2", "]", ",", "v", "[", "1", "]", "]", ",", "[", "v", "[", "2", "]", ",", "0", ",", "-", "v", "[", "0", "]", "]", ",", "[", "-", "v", "[", "1", "]", ",", "v", "[", "0", "]", ",", "0", "]", "]", ")", "\n", "rotation_matrix", "=", "np", ".", "eye", "(", "3", ")", "+", "k_mat", "+", "k_mat", ".", "dot", "(", "k_mat", ")", "*", "(", "(", "1", "-", "c", ")", "/", "(", "s", "**", "2", ")", ")", "\n", "return", "rotation_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_MAE": [[135, 141], ["None"], "function", ["None"], ["", "def", "get_MAE", "(", "pred_mask", ",", "gt_mask", ")", ":", "\n", "    ", "fp", "=", "(", "(", "pred_mask", ">", "0", ")", "==", "(", "gt_mask", "==", "0", ")", ")", ".", "sum", "(", ")", "\n", "fn", "=", "(", "(", "pred_mask", "==", "0", ")", "==", "(", "gt_mask", ">", "0", ")", ")", ".", "sum", "(", ")", "\n", "h", ",", "w", "=", "gt_mask", ".", "shape", "\n", "mae", "=", "(", "fn", "+", "fp", ")", "/", "(", "w", "*", "h", ")", "\n", "return", "mae", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_f_measure": [[143, 153], ["None"], "function", ["None"], ["", "def", "get_f_measure", "(", "pred_mask", ",", "gt_mask", ")", ":", "\n", "    ", "tp", "=", "(", "(", "pred_mask", ">", "0", ")", "==", "(", "gt_mask", ">", "0", ")", ")", ".", "sum", "(", ")", "\n", "fp", "=", "(", "(", "pred_mask", ">", "0", ")", "==", "(", "gt_mask", "==", "0", ")", ")", ".", "sum", "(", ")", "\n", "fn", "=", "(", "(", "pred_mask", "==", "0", ")", "==", "(", "gt_mask", ">", "0", ")", ")", ".", "sum", "(", ")", "\n", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "beta", "=", "0.3", "\n", "f_measure", "=", "(", "(", "1", "+", "beta", "**", "2", ")", "*", "precision", "*", "recall", ")", "/", "(", "(", "beta", "**", "2", ")", "*", "precision", "+", "recall", ")", "\n", "return", "f_measure", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_IOU": [[155, 160], ["numpy.logical_and", "numpy.logical_or", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "get_IOU", "(", "pred_mask", ",", "gt_mask", ")", ":", "\n", "    ", "intersect", "=", "np", ".", "logical_and", "(", "pred_mask", ",", "gt_mask", ")", "\n", "union", "=", "np", ".", "logical_or", "(", "pred_mask", ",", "gt_mask", ")", "\n", "iou", "=", "np", ".", "sum", "(", "intersect", ")", "/", "np", ".", "sum", "(", "union", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.point_2_regBorder_in_3d": [[165, 170], ["numpy.array", "algorithm.sorted_rect", "min", "algorithm.point_2_line_seg_in_3d", "algorithm.point_2_line_seg_in_3d", "algorithm.point_2_line_seg_in_3d", "algorithm.point_2_line_seg_in_3d"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.sorted_rect", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.point_2_line_seg_in_3d", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.point_2_line_seg_in_3d", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.point_2_line_seg_in_3d", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.point_2_line_seg_in_3d"], ["", "def", "point_2_regBorder_in_3d", "(", "point", ",", "rectangle", ")", ":", "\n", "    ", "point", "=", "np", ".", "array", "(", "point", ")", "\n", "p1", ",", "p2", ",", "p3", ",", "p4", "=", "sorted_rect", "(", "rectangle", ")", "\n", "return", "min", "(", "point_2_line_seg_in_3d", "(", "point", ",", "p1", ",", "p2", ")", ",", "point_2_line_seg_in_3d", "(", "point", ",", "p2", ",", "p3", ")", ",", "\n", "point_2_line_seg_in_3d", "(", "point", ",", "p3", ",", "p4", ")", ",", "point_2_line_seg_in_3d", "(", "point", ",", "p4", ",", "p1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.point_2_line_seg_in_3d": [[175, 189], ["numpy.divide", "numpy.dot", "numpy.dot", "numpy.maximum.reduce", "numpy.cross", "numpy.hypot", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "def", "point_2_line_seg_in_3d", "(", "point", ",", "line_p1", ",", "line_p2", ")", ":", "\n", "# normalized tangent vector", "\n", "    ", "d", "=", "np", ".", "divide", "(", "line_p2", "-", "line_p1", ",", "np", ".", "linalg", ".", "norm", "(", "line_p2", "-", "line_p1", ")", ")", "\n", "\n", "# signed parallel distance components", "\n", "s", "=", "np", ".", "dot", "(", "line_p1", "-", "point", ",", "d", ")", "\n", "t", "=", "np", ".", "dot", "(", "point", "-", "line_p2", ",", "d", ")", "\n", "\n", "# clamped parallel distance", "\n", "h", "=", "np", ".", "maximum", ".", "reduce", "(", "[", "s", ",", "t", ",", "0", "]", ")", "\n", "\n", "# perpendicular distance component", "\n", "c", "=", "np", ".", "cross", "(", "point", "-", "line_p1", ",", "d", ")", "\n", "return", "np", ".", "hypot", "(", "h", ",", "np", ".", "linalg", ".", "norm", "(", "c", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_paired_point": [[194, 203], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "get_paired_point", "(", "points_list", ",", "target_point", ")", ":", "\n", "    ", "dis", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "target_point", ")", "-", "np", ".", "array", "(", "points_list", "[", "0", "]", ")", ")", "\n", "closest_point", "=", "points_list", "[", "0", "]", "\n", "for", "item", "in", "points_list", ":", "\n", "        ", "current_dis", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "target_point", ")", "-", "np", ".", "array", "(", "item", ")", ")", "\n", "if", "current_dis", "<=", "dis", ":", "\n", "            ", "dis", "=", "current_dis", "\n", "closest_point", "=", "item", "\n", "", "", "return", "closest_point", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.sorted_rect": [[208, 218], ["vec.copy", "algorithm.get_paired_point", "vec.copy.remove", "vec.copy.remove", "algorithm.get_paired_point", "vec.copy.remove", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_paired_point", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_paired_point"], ["", "def", "sorted_rect", "(", "vec", ")", ":", "\n", "    ", "point_list", "=", "vec", ".", "copy", "(", ")", "\n", "p2", "=", "point_list", "[", "0", "]", "\n", "p1", "=", "get_paired_point", "(", "point_list", "[", "1", ":", "]", ",", "p2", ")", "\n", "point_list", ".", "remove", "(", "p1", ")", "\n", "point_list", ".", "remove", "(", "p2", ")", "\n", "p3", "=", "get_paired_point", "(", "point_list", ",", "p2", ")", "\n", "point_list", ".", "remove", "(", "p3", ")", "\n", "p4", "=", "point_list", "[", "0", "]", "\n", "return", "[", "np", ".", "array", "(", "p1", ")", ",", "np", ".", "array", "(", "p2", ")", ",", "np", ".", "array", "(", "p3", ")", ",", "np", ".", "array", "(", "p4", ")", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.RefineDepth.__init__": [[609, 614], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "focal_len", "=", "540", ",", "border_width", "=", "50", ",", "width", "=", "640", ",", "height", "=", "480", ")", ":", "\n", "        ", "self", ".", "focal_len", "=", "focal_len", "\n", "self", ".", "border_width", "=", "border_width", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.RefineDepth.refine_depth_by_mirror_area": [[615, 647], ["cv2.resize", "instance_mask.astype.astype.astype", "cv2.resize", "[].mean", "[].mean", "range", "instance_mask.astype.astype.astype", "instance_mask.astype.astype.sum", "range", "numpy.where", "numpy.where", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot"], "methods", ["None"], ["", "def", "refine_depth_by_mirror_area", "(", "self", ",", "instance_mask", ",", "plane_normal", ",", "np_depth", ")", ":", "\n", "        ", "instance_mask", "=", "cv2", ".", "resize", "(", "instance_mask", ".", "astype", "(", "\"uint8\"", ")", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "0", ",", "0", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "instance_mask", "=", "instance_mask", ".", "astype", "(", "bool", ")", "\n", "np_depth", "=", "cv2", ".", "resize", "(", "np_depth", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "0", ",", "0", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "# plane : ax + by + cd + d = 0", "\n", "self", ".", "height", ",", "self", ".", "width", "=", "instance_mask", ".", "shape", "\n", "a", ",", "b", ",", "c", "=", "plane_normal", "\n", "offset", "=", "(", "np_depth", "*", "instance_mask", ")", ".", "sum", "(", ")", "/", "instance_mask", ".", "sum", "(", ")", "\n", "py", "=", "np", ".", "where", "(", "instance_mask", ")", "[", "0", "]", ".", "mean", "(", ")", "\n", "px", "=", "np", ".", "where", "(", "instance_mask", ")", "[", "1", "]", ".", "mean", "(", ")", "\n", "x0", "=", "(", "px", "-", "self", ".", "width", "/", "2", ")", "*", "(", "offset", "/", "self", ".", "focal_len", ")", "\n", "y0", "=", "(", "py", "-", "self", ".", "height", "/", "2", ")", "*", "(", "offset", "/", "self", ".", "focal_len", ")", "\n", "d", "=", "-", "(", "a", "*", "x0", "+", "b", "*", "y0", "+", "c", "*", "offset", ")", "\n", "for", "y", "in", "range", "(", "self", ".", "height", ")", ":", "\n", "            ", "for", "x", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "                ", "if", "instance_mask", "[", "y", "]", "[", "x", "]", ":", "\n", "                    ", "n", "=", "np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", "\n", "# plane function : ax + by + cz + d = 0 ---> x = 0 , y = 0 , c = -d/c", "\n", "V0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "d", "/", "c", "]", ")", "\n", "P0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "P1", "=", "np", ".", "array", "(", "[", "(", "x", "-", "self", ".", "width", "/", "2", ")", ",", "(", "y", "-", "self", ".", "height", "/", "2", ")", ",", "self", ".", "focal_len", "]", ")", "\n", "\n", "j", "=", "P0", "-", "V0", "\n", "u", "=", "P1", "-", "P0", "\n", "N", "=", "-", "np", ".", "dot", "(", "n", ",", "j", ")", "\n", "D", "=", "np", ".", "dot", "(", "n", ",", "u", ")", "\n", "sI", "=", "N", "/", "D", "\n", "I", "=", "P0", "+", "sI", "*", "u", "\n", "\n", "np_depth", "[", "y", ",", "x", "]", "=", "I", "[", "2", "]", "\n", "", "", "", "return", "np_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.RefineDepth.refine_depth_by_mirror_border": [[648, 682], ["cv2.resize", "instance_mask.astype.astype.astype", "cv2.resize", "cv2.dilate", "[].mean", "[].mean", "range", "instance_mask.astype.astype.astype", "numpy.array().astype", "cv2.getStructuringElement", "mirror_border_mask.sum", "range", "numpy.array", "numpy.where", "numpy.where", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot"], "methods", ["None"], ["", "def", "refine_depth_by_mirror_border", "(", "self", ",", "instance_mask", ",", "plane_normal", ",", "np_depth", ")", ":", "\n", "# plane : ax + by + cd + d = 0", "\n", "        ", "instance_mask", "=", "cv2", ".", "resize", "(", "instance_mask", ".", "astype", "(", "\"uint8\"", ")", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "0", ",", "0", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "instance_mask", "=", "instance_mask", ".", "astype", "(", "bool", ")", "\n", "np_depth", "=", "cv2", ".", "resize", "(", "np_depth", ",", "(", "self", ".", "width", ",", "self", ".", "height", ")", ",", "0", ",", "0", ",", "cv2", ".", "INTER_NEAREST", ")", "\n", "self", ".", "height", ",", "self", ".", "width", "=", "instance_mask", ".", "shape", "\n", "a", ",", "b", ",", "c", "=", "plane_normal", "\n", "new_mask", "=", "cv2", ".", "dilate", "(", "np", ".", "array", "(", "instance_mask", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "\n", "cv2", ".", "getStructuringElement", "(", "cv2", ".", "MORPH_ELLIPSE", ",", "(", "self", ".", "border_width", ",", "self", ".", "border_width", ")", ")", ")", "\n", "mirror_border_mask", "=", "new_mask", "-", "instance_mask", "\n", "offset", "=", "(", "np_depth", "*", "mirror_border_mask", ")", ".", "sum", "(", ")", "/", "mirror_border_mask", ".", "sum", "(", ")", "\n", "py", "=", "np", ".", "where", "(", "instance_mask", ")", "[", "0", "]", ".", "mean", "(", ")", "\n", "px", "=", "np", ".", "where", "(", "instance_mask", ")", "[", "1", "]", ".", "mean", "(", ")", "\n", "x0", "=", "(", "px", "-", "self", ".", "width", "/", "2", ")", "*", "(", "offset", "/", "self", ".", "focal_len", ")", "\n", "y0", "=", "(", "py", "-", "self", ".", "height", "/", "2", ")", "*", "(", "offset", "/", "self", ".", "focal_len", ")", "\n", "d", "=", "-", "(", "a", "*", "x0", "+", "b", "*", "y0", "+", "c", "*", "offset", ")", "\n", "for", "y", "in", "range", "(", "self", ".", "height", ")", ":", "\n", "            ", "for", "x", "in", "range", "(", "self", ".", "width", ")", ":", "\n", "                ", "if", "instance_mask", "[", "y", "]", "[", "x", "]", ":", "\n", "                    ", "n", "=", "np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", "\n", "# plane function : ax + by + cz + d = 0 ---> x = 0 , y = 0 , c = -d/c", "\n", "V0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "d", "/", "c", "]", ")", "\n", "P0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "P1", "=", "np", ".", "array", "(", "[", "(", "x", "-", "self", ".", "width", "/", "2", ")", ",", "(", "y", "-", "self", ".", "height", "/", "2", ")", ",", "self", ".", "focal_len", "]", ")", "\n", "\n", "j", "=", "P0", "-", "V0", "\n", "u", "=", "P1", "-", "P0", "\n", "N", "=", "-", "np", ".", "dot", "(", "n", ",", "j", ")", "\n", "D", "=", "np", ".", "dot", "(", "n", ",", "u", ")", "\n", "sI", "=", "N", "/", "D", "\n", "I", "=", "P0", "+", "sI", "*", "u", "\n", "\n", "np_depth", "[", "y", ",", "x", "]", "=", "I", "[", "2", "]", "\n", "", "", "", "return", "np_depth", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.__init__": [[1101, 1103], ["dict"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "option_fun", "=", "dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option": [[1104, 1106], ["None"], "methods", ["None"], ["", "def", "add_option", "(", "self", ",", "option_key", ",", "option_description", ")", ":", "\n", "        ", "self", ".", "option_fun", "[", "option_key", "]", "=", "option_description", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.print_option": [[1107, 1111], ["print", "enumerate", "plane_pcd_utils.ToolOption.option_fun.items", "print"], "methods", ["None"], ["", "def", "print_option", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"OPTION : \"", ")", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "self", ".", "option_fun", ".", "items", "(", ")", ")", ":", "\n", "            ", "print", "(", "\"({}) {:8} : {}\"", ".", "format", "(", "index", "+", "1", ",", "item", "[", "0", "]", ",", "item", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.is_input_key_valid": [[1112, 1120], ["plane_pcd_utils.ToolOption.option_fun.items", "input_option.split", "item[].split"], "methods", ["None"], ["", "", "def", "is_input_key_valid", "(", "self", ",", "input_option", ")", ":", "\n", "        ", "key", "=", "input_option", ".", "split", "(", ")", "[", "0", "]", "\n", "is_valid", "=", "False", "\n", "for", "item", "in", "self", ".", "option_fun", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "==", "item", "[", "0", "]", ".", "split", "(", ")", "[", "0", "]", ":", "\n", "                ", "is_valid", "=", "True", "\n", "\n", "", "", "return", "is_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_cross_prod_mat": [[14, 22], ["numpy.array"], "function", ["None"], ["def", "get_cross_prod_mat", "(", "pVec_Arr", ")", ":", "\n", "# pVec_Arr shape (3)", "\n", "    ", "q_cross_prod_mat", "=", "np", ".", "array", "(", "[", "\n", "[", "0", ",", "-", "pVec_Arr", "[", "2", "]", ",", "pVec_Arr", "[", "1", "]", "]", ",", "\n", "[", "pVec_Arr", "[", "2", "]", ",", "0", ",", "-", "pVec_Arr", "[", "0", "]", "]", ",", "\n", "[", "-", "pVec_Arr", "[", "1", "]", ",", "pVec_Arr", "[", "0", "]", ",", "0", "]", ",", "\n", "]", ")", "\n", "return", "q_cross_prod_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.calculate_align_mat": [[24, 43], ["numpy.linalg.norm", "numpy.array", "plane_pcd_utils.get_cross_prod_mat", "numpy.matmul", "plane_pcd_utils.get_cross_prod_mat", "numpy.dot", "numpy.eye", "numpy.dot", "numpy.eye", "numpy.eye", "numpy.matmul", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_cross_prod_mat", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_cross_prod_mat"], ["", "def", "calculate_align_mat", "(", "pVec_Arr", ")", ":", "\n", "    ", "scale", "=", "np", ".", "linalg", ".", "norm", "(", "pVec_Arr", ")", "\n", "pVec_Arr", "=", "pVec_Arr", "/", "scale", "\n", "# must ensure pVec_Arr is also a unit vec. ", "\n", "z_unit_arr", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "z_mat", "=", "get_cross_prod_mat", "(", "z_unit_arr", ")", "\n", "\n", "z_c_vec", "=", "np", ".", "matmul", "(", "z_mat", ",", "pVec_Arr", ")", "\n", "z_c_vec_mat", "=", "get_cross_prod_mat", "(", "z_c_vec", ")", "\n", "\n", "if", "np", ".", "dot", "(", "z_unit_arr", ",", "pVec_Arr", ")", "==", "-", "1", ":", "\n", "        ", "q_trans_mat", "=", "-", "np", ".", "eye", "(", "3", ",", "3", ")", "\n", "", "elif", "np", ".", "dot", "(", "z_unit_arr", ",", "pVec_Arr", ")", "==", "1", ":", "\n", "        ", "q_trans_mat", "=", "np", ".", "eye", "(", "3", ",", "3", ")", "\n", "", "else", ":", "\n", "        ", "q_trans_mat", "=", "np", ".", "eye", "(", "3", ",", "3", ")", "+", "z_c_vec_mat", "+", "np", ".", "matmul", "(", "z_c_vec_mat", ",", "z_c_vec_mat", ")", "/", "(", "1", "+", "np", ".", "dot", "(", "z_unit_arr", ",", "pVec_Arr", ")", ")", "\n", "", "q_trans_mat", "*=", "scale", "\n", "return", "q_trans_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mesh_by_start_end": [[45, 55], ["numpy.float32", "o3d.geometry.TriangleMesh.create_arrow", "o3d.geometry.TriangleMesh.create_arrow.paint_uniform_color", "o3d.geometry.TriangleMesh.create_arrow.rotate", "o3d.geometry.TriangleMesh.create_arrow.translate", "numpy.array", "numpy.array", "plane_pcd_utils.calculate_align_mat", "numpy.array"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.calculate_align_mat"], ["", "def", "get_mesh_by_start_end", "(", "begin", ",", "end", ",", "color", "=", "[", "0.6", ",", "0.6", ",", "1", "]", ",", "vec_len", "=", "1", ")", ":", "\n", "    ", "import", "open3d", "as", "o3d", "\n", "vec_arr", "=", "np", ".", "array", "(", "end", ")", "-", "np", ".", "array", "(", "begin", ")", "\n", "rot_mat", "=", "np", ".", "float32", "(", "calculate_align_mat", "(", "vec_arr", ")", ")", "\n", "mesh_arrow", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_arrow", "(", "cone_height", "=", "0.2", "*", "vec_len", ",", "cone_radius", "=", "0.08", "*", "vec_len", ",", "\n", "cylinder_height", "=", "0.8", "*", "vec_len", ",", "cylinder_radius", "=", "0.02", "*", "vec_len", ")", "\n", "mesh_arrow", ".", "paint_uniform_color", "(", "color", ")", "\n", "mesh_arrow", ".", "rotate", "(", "rot_mat", ",", "center", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "mesh_arrow", ".", "translate", "(", "np", ".", "array", "(", "begin", ")", ")", "\n", "return", "mesh_arrow", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_grayscale_instanceMask": [[60, 70], ["numpy.zeros", "range", "range"], "function", ["None"], ["", "def", "get_grayscale_instanceMask", "(", "mask", ",", "instance_index", ")", ":", "\n", "    ", "current_instance_mask", "=", "np", ".", "zeros", "(", "mask", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "h", ",", "w", ",", "_", "=", "mask", ".", "shape", "\n", "for", "i", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "(", "mask", "[", "i", "]", "[", "j", "]", "==", "instance_index", ")", ".", "all", "(", ")", ":", "\n", "                ", "current_instance_mask", "[", "i", "]", "[", "j", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "current_instance_mask", "[", "i", "]", "[", "j", "]", "=", "0", "\n", "", "", "", "return", "current_instance_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mirror_parameter_from_xyzs_by_ransac": [[75, 92], ["run_ransac", "numpy.ones", "plane_pcd_utils.get_mirror_parameter_from_xyzs_by_ransac.augment"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.run_ransac"], ["", "def", "get_mirror_parameter_from_xyzs_by_ransac", "(", "xyzs", ")", ":", "\n", "    ", "def", "augment", "(", "xyzs", ")", ":", "\n", "        ", "axyz", "=", "np", ".", "ones", "(", "(", "len", "(", "xyzs", ")", ",", "4", ")", ")", "\n", "axyz", "[", ":", ",", ":", "3", "]", "=", "xyzs", "\n", "return", "axyz", "\n", "\n", "", "def", "estimate", "(", "xyzs", ")", ":", "\n", "        ", "axyz", "=", "augment", "(", "xyzs", "[", ":", "3", "]", ")", "\n", "return", "np", ".", "linalg", ".", "svd", "(", "axyz", ")", "[", "-", "1", "]", "[", "-", "1", ",", ":", "]", "\n", "\n", "", "def", "is_inlier", "(", "coeffs", ",", "xyz", ",", "threshold", ")", ":", "\n", "        ", "return", "np", ".", "abs", "(", "coeffs", ".", "dot", "(", "augment", "(", "[", "xyz", "]", ")", ".", "T", ")", ")", "<", "threshold", "\n", "\n", "", "max_iterations", "=", "200", "\n", "goal_inliers", "=", "len", "(", "xyzs", ")", "*", "0.9", "\n", "m", ",", "b", "=", "run_ransac", "(", "xyzs", ",", "estimate", ",", "lambda", "x", ",", "y", ":", "is_inlier", "(", "x", ",", "y", ",", "0.01", ")", ",", "3", ",", "goal_inliers", ",", "max_iterations", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_pcd_mirror_points_from_rgbd_and_intrinsic": [[97, 144], ["cv2.cvtColor", "range", "o3d.geometry.PointCloud", "o3d.utility.Vector3dVector", "o3d.utility.Vector3dVector", "o3d.geometry.PointCloud", "o3d.utility.Vector3dVector", "o3d.utility.Vector3dVector", "cv2.imread", "cv2.imread", "range", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "colors.append", "xyz.append", "mirror_xyz.append", "colors.append", "xyz.append", "mirror_colors.append", "mirror_colors.append"], "function", ["None"], ["", "def", "get_pcd_mirror_points_from_rgbd_and_intrinsic", "(", "intrinsic_matrix", ",", "depth_shift", ",", "depth_img_path", ",", "color_img_path", ",", "\n", "mirror_mask", "=", "None", ",", "color", "=", "None", ")", ":", "\n", "    ", "fx", "=", "intrinsic_matrix", "[", "0", "]", "[", "0", "]", "\n", "fy", "=", "intrinsic_matrix", "[", "1", "]", "[", "1", "]", "\n", "cx", "=", "intrinsic_matrix", "[", "0", "]", "[", "2", "]", "\n", "cy", "=", "intrinsic_matrix", "[", "1", "]", "[", "2", "]", "\n", "\n", "cx", "=", "640", "\n", "cy", "=", "512", "\n", "\n", "import", "open3d", "as", "o3d", "\n", "d", "=", "cv2", ".", "imread", "(", "depth_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "/", "depth_shift", "\n", "color_img", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "color_img_path", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "color_img", "=", "color_img", "/", "255", "\n", "\n", "h", ",", "w", "=", "d", ".", "shape", "\n", "x_cam", "=", "[", "]", "\n", "y_cam", "=", "[", "]", "\n", "z_cam", "=", "[", "]", "\n", "colors", "=", "[", "]", "\n", "xyz", "=", "[", "]", "\n", "mirror_xyz", "=", "[", "]", "\n", "mirror_colors", "=", "[", "]", "\n", "\n", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "mirror_mask", "is", "not", "None", "and", "mirror_mask", "[", "y", "]", "[", "x", "]", ":", "\n", "                ", "colors", ".", "append", "(", "color_img", "[", "y", "]", "[", "x", "]", ")", "\n", "xyz", ".", "append", "(", "[", "(", "x", "-", "cx", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "fx", ")", ",", "(", "y", "-", "cy", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "fy", ")", ",", "d", "[", "y", "]", "[", "x", "]", "]", ")", "\n", "if", "color", "is", "not", "None", ":", "\n", "                    ", "mirror_colors", ".", "append", "(", "color", ")", "\n", "", "else", ":", "\n", "                    ", "mirror_colors", ".", "append", "(", "color_img", "[", "y", "]", "[", "x", "]", ")", "\n", "", "mirror_xyz", ".", "append", "(", "[", "(", "x", "-", "cx", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "fx", ")", ",", "(", "y", "-", "cy", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "fy", ")", ",", "d", "[", "y", "]", "[", "x", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "colors", ".", "append", "(", "color_img", "[", "y", "]", "[", "x", "]", ")", "\n", "xyz", ".", "append", "(", "[", "(", "x", "-", "cx", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "fx", ")", ",", "(", "y", "-", "cy", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "fy", ")", ",", "d", "[", "y", "]", "[", "x", "]", "]", ")", "\n", "\n", "", "", "", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "xyz", ",", "axis", "=", "0", ")", ")", "\n", "pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "colors", ",", "axis", "=", "0", ")", ")", "\n", "\n", "mirror_pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "mirror_pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "mirror_xyz", ",", "axis", "=", "0", ")", ")", "\n", "mirror_pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "mirror_colors", ",", "axis", "=", "0", ")", ")", "\n", "\n", "return", "pcd", ",", "mirror_pcd", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_colored_pcd": [[149, 194], ["cv2.imread", "cv2.cvtColor", "range", "range", "o3d.geometry.PointCloud", "o3d.utility.Vector3dVector", "o3d.utility.Vector3dVector", "cv2.imread", "range", "range", "numpy.stack", "numpy.stack", "colors.append", "xyz.append", "colors.append", "xyz.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "xyz.append", "colors.append", "numpy.dot"], "function", ["None"], ["", "def", "get_colored_pcd", "(", "f", "=", "538", ",", "depth_img_path", "=", "\"\"", ",", "color_img_path", "=", "\"\"", ",", "mirror_mask", "=", "None", ",", "mirror_plane_mask", "=", "None", ",", "\n", "plane_parameter", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ")", ":", "\n", "    ", "import", "open3d", "as", "o3d", "\n", "d", "=", "cv2", ".", "imread", "(", "depth_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "color_img", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "color_img_path", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "color_img", "=", "color_img", "/", "255", "\n", "\n", "h", ",", "w", "=", "d", ".", "shape", "\n", "x_cam", "=", "[", "]", "\n", "y_cam", "=", "[", "]", "\n", "z_cam", "=", "[", "]", "\n", "colors", "=", "[", "]", "\n", "xyz", "=", "[", "]", "\n", "\n", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "mirror_mask", "is", "not", "None", "and", "mirror_mask", "[", "y", "]", "[", "x", "]", ":", "\n", "                ", "colors", ".", "append", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "xyz", ".", "append", "(", "[", "(", "x", "-", "w", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "(", "y", "-", "h", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "d", "[", "y", "]", "[", "x", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "colors", ".", "append", "(", "color_img", "[", "y", "]", "[", "x", "]", ")", "\n", "xyz", ".", "append", "(", "[", "(", "x", "-", "w", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "(", "y", "-", "h", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "d", "[", "y", "]", "[", "x", "]", "]", ")", "\n", "\n", "", "", "", "a", ",", "b", ",", "c", ",", "d", "=", "plane_parameter", "\n", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "mirror_plane_mask", "[", "y", "]", "[", "x", "]", ":", "\n", "                ", "n", "=", "np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", "\n", "V0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "d", "/", "c", "]", ")", "\n", "P0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "P1", "=", "np", ".", "array", "(", "[", "(", "x", "-", "w", "/", "2", ")", ",", "(", "y", "-", "h", "/", "2", ")", ",", "f", "]", ")", "\n", "\n", "j", "=", "P0", "-", "V0", "\n", "u", "=", "P1", "-", "P0", "\n", "N", "=", "-", "np", ".", "dot", "(", "n", ",", "j", ")", "\n", "D", "=", "np", ".", "dot", "(", "n", ",", "u", ")", "\n", "sI", "=", "N", "/", "D", "\n", "I", "=", "P0", "+", "sI", "*", "u", "\n", "xyz", ".", "append", "(", "I", ")", "\n", "colors", ".", "append", "(", "[", "0.1", ",", "1", ",", "1", "]", ")", "\n", "\n", "", "", "", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "xyz", ",", "axis", "=", "0", ")", ")", "\n", "pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "colors", ",", "axis", "=", "0", ")", ")", "\n", "return", "pcd", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_z_from_plane": [[195, 199], ["None"], "function", ["None"], ["", "def", "get_z_from_plane", "(", "plane_parameter", ",", "x", ",", "y", ")", ":", "\n", "    ", "[", "a", ",", "b", ",", "c", ",", "d", "]", "=", "plane_parameter", "\n", "z", "=", "(", "-", "d", "-", "a", "*", "x", "-", "b", "*", "y", ")", "/", "c", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mirror_init_plane_from_3points": [[203, 254], ["plane_pcd_utils.get_planeParam_from_3_points", "Symbol", "Symbol", "Symbol", "numpy.mean", "o3d.geometry.TriangleMesh", "o3d.utility.Vector3dVector", "o3d.utility.Vector3iVector", "o3d.geometry.TriangleMesh.paint_uniform_color", "solve", "solve", "float", "float", "float", "float", "numpy.array", "numpy.array", "solve", "solve", "complex", "complex", "complex", "complex"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_planeParam_from_3_points"], ["", "def", "get_mirror_init_plane_from_3points", "(", "p1", ",", "p2", ",", "p3", ",", "plane_init_size", "=", "1000", ")", ":", "\n", "    ", "import", "open3d", "as", "o3d", "\n", "\n", "\n", "\n", "plane_parameter", "=", "get_planeParam_from_3_points", "(", "p1", ",", "p2", ",", "p3", ")", "\n", "\n", "[", "a", ",", "b", ",", "c", ",", "d", "]", "=", "plane_parameter", "\n", "x", "=", "Symbol", "(", "'x'", ",", "real", "=", "True", ")", "\n", "y", "=", "Symbol", "(", "'y'", ",", "real", "=", "True", ")", "\n", "z", "=", "Symbol", "(", "'z'", ",", "real", "=", "True", ")", "\n", "selected_center", "=", "np", ".", "mean", "(", "[", "p1", ",", "p2", ",", "p3", "]", ",", "axis", "=", "0", ")", "\n", "try", ":", "\n", "        ", "camera_plane_p1", ",", "camera_plane_p2", "=", "solve", "(", "[", "a", "*", "x", "+", "b", "*", "y", "+", "c", "*", "z", "+", "d", ",", "\n", "(", "x", "-", "selected_center", "[", "0", "]", ")", "*", "(", "x", "-", "selected_center", "[", "0", "]", ")", "+", "(", "\n", "y", "-", "selected_center", "[", "1", "]", ")", "*", "(", "y", "-", "selected_center", "[", "1", "]", ")", "+", "(", "\n", "z", "-", "selected_center", "[", "2", "]", ")", "*", "(", "\n", "z", "-", "selected_center", "[", "2", "]", ")", "-", "1000", "*", "1000", ",", "\n", "y", "-", "selected_center", "[", "1", "]", "-", "800", "]", ",", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "camera_plane_p3", ",", "camera_plane_p4", "=", "solve", "(", "[", "a", "*", "x", "+", "b", "*", "y", "+", "c", "*", "z", "+", "d", ",", "\n", "(", "x", "-", "selected_center", "[", "0", "]", ")", "*", "(", "x", "-", "selected_center", "[", "0", "]", ")", "+", "(", "\n", "y", "-", "selected_center", "[", "1", "]", ")", "*", "(", "y", "-", "selected_center", "[", "1", "]", ")", "+", "(", "\n", "z", "-", "selected_center", "[", "2", "]", ")", "*", "(", "\n", "z", "-", "selected_center", "[", "2", "]", ")", "-", "1000", "*", "1000", ",", "\n", "y", "-", "selected_center", "[", "1", "]", "+", "800", "]", ",", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "", "except", ":", "\n", "        ", "camera_plane_p1", ",", "camera_plane_p2", "=", "solve", "(", "[", "a", "*", "x", "+", "b", "*", "y", "+", "c", "*", "z", "+", "d", ",", "\n", "(", "x", "-", "selected_center", "[", "0", "]", ")", "*", "(", "x", "-", "selected_center", "[", "0", "]", ")", "+", "(", "\n", "y", "-", "selected_center", "[", "1", "]", ")", "*", "(", "y", "-", "selected_center", "[", "1", "]", ")", "+", "(", "\n", "z", "-", "selected_center", "[", "2", "]", ")", "*", "(", "\n", "z", "-", "selected_center", "[", "2", "]", ")", "-", "1000", "*", "1000", ",", "\n", "y", "-", "selected_center", "[", "1", "]", "-", "1", "]", ",", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "camera_plane_p3", ",", "camera_plane_p4", "=", "solve", "(", "[", "a", "*", "x", "+", "b", "*", "y", "+", "c", "*", "z", "+", "d", ",", "\n", "(", "x", "-", "selected_center", "[", "0", "]", ")", "*", "(", "x", "-", "selected_center", "[", "0", "]", ")", "+", "(", "\n", "y", "-", "selected_center", "[", "1", "]", ")", "*", "(", "y", "-", "selected_center", "[", "1", "]", ")", "+", "(", "\n", "z", "-", "selected_center", "[", "2", "]", ")", "*", "(", "\n", "z", "-", "selected_center", "[", "2", "]", ")", "-", "1000", "*", "1000", ",", "\n", "y", "-", "selected_center", "[", "1", "]", "+", "1", "]", ",", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "\n", "", "camera_plane_p1", "=", "[", "float", "(", "complex", "(", "i", ")", ".", "real", ")", "for", "i", "in", "camera_plane_p1", "]", "\n", "camera_plane_p2", "=", "[", "float", "(", "complex", "(", "i", ")", ".", "real", ")", "for", "i", "in", "camera_plane_p2", "]", "\n", "camera_plane_p3", "=", "[", "float", "(", "complex", "(", "i", ")", ".", "real", ")", "for", "i", "in", "camera_plane_p3", "]", "\n", "camera_plane_p4", "=", "[", "float", "(", "complex", "(", "i", ")", ".", "real", ")", "for", "i", "in", "camera_plane_p4", "]", "\n", "\n", "camera_plane", "=", "o3d", ".", "geometry", ".", "TriangleMesh", "(", ")", "\n", "camera_plane", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "\n", "np", ".", "array", "(", "[", "camera_plane_p1", ",", "camera_plane_p2", ",", "camera_plane_p3", ",", "camera_plane_p4", "]", ")", ")", "\n", "camera_plane", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "0", ",", "1", ",", "3", "]", ",", "[", "1", ",", "2", ",", "3", "]", ",", "[", "2", ",", "1", ",", "0", "]", ",", "[", "3", ",", "1", ",", "0", "]", ",", "[", "3", ",", "2", ",", "1", "]", "]", ")", ")", "\n", "camera_plane", ".", "paint_uniform_color", "(", "[", "0.1", ",", "1", ",", "1", "]", ")", "\n", "return", "camera_plane", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mirror_init_plane_from_mirrorbbox": [[261, 304], ["numpy.array().tolist", "np.array().tolist.remove", "np.array().tolist.remove", "np.array().tolist.remove", "np.array().tolist.remove", "np.array().tolist.remove", "np.array().tolist.remove", "max", "min", "max", "min", "o3d.geometry.TriangleMesh", "o3d.utility.Vector3dVector", "o3d.utility.Vector3iVector", "resize_plane.paint_uniform_color", "plane_pcd_utils.resize_plane", "get_paired_point", "get_paired_point", "get_paired_point", "plane_pcd_utils.get_z_from_plane", "plane_pcd_utils.get_z_from_plane", "plane_pcd_utils.get_z_from_plane", "plane_pcd_utils.get_z_from_plane", "numpy.array", "numpy.array", "numpy.array", "list", "mirror_bbox.get_box_points", "itertools.permutations"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.resize_plane", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_paired_point", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_paired_point", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_paired_point", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_z_from_plane", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_z_from_plane", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_z_from_plane", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_z_from_plane"], ["", "def", "get_mirror_init_plane_from_mirrorbbox", "(", "plane_parameter", ",", "mirror_bbox", ")", ":", "\n", "    ", "import", "open3d", "as", "o3d", "\n", "import", "itertools", "\n", "\n", "mirror_bbox_points", "=", "np", ".", "array", "(", "mirror_bbox", ".", "get_box_points", "(", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "p1", "=", "mirror_bbox_points", "[", "0", "]", "\n", "mirror_bbox_points", ".", "remove", "(", "p1", ")", "\n", "mirror_bbox_points", ".", "remove", "(", "get_paired_point", "(", "mirror_bbox_points", ",", "p1", ")", ")", "\n", "p2", "=", "mirror_bbox_points", "[", "0", "]", "\n", "mirror_bbox_points", ".", "remove", "(", "p2", ")", "\n", "mirror_bbox_points", ".", "remove", "(", "get_paired_point", "(", "mirror_bbox_points", ",", "p2", ")", ")", "\n", "p3", "=", "mirror_bbox_points", "[", "0", "]", "\n", "mirror_bbox_points", ".", "remove", "(", "p3", ")", "\n", "mirror_bbox_points", ".", "remove", "(", "get_paired_point", "(", "mirror_bbox_points", ",", "p3", ")", ")", "\n", "p4", "=", "mirror_bbox_points", "[", "0", "]", "\n", "\n", "x_max", "=", "max", "(", "p1", "[", "0", "]", ",", "p2", "[", "0", "]", ",", "p3", "[", "0", "]", ",", "p4", "[", "0", "]", ")", "\n", "x_min", "=", "min", "(", "p1", "[", "0", "]", ",", "p2", "[", "0", "]", ",", "p3", "[", "0", "]", ",", "p4", "[", "0", "]", ")", "\n", "y_max", "=", "max", "(", "p1", "[", "1", "]", ",", "p2", "[", "1", "]", ",", "p3", "[", "1", "]", ",", "p4", "[", "1", "]", ")", "\n", "y_min", "=", "min", "(", "p1", "[", "1", "]", ",", "p2", "[", "1", "]", ",", "p3", "[", "1", "]", ",", "p4", "[", "1", "]", ")", "\n", "\n", "# y_gap = (y_max - y_min)*0.1", "\n", "# y_max += y_gap", "\n", "# y_min -= y_gap", "\n", "\n", "# plane_p1 = [x_max, y_max, get_z_from_plane(plane_parameter, x_max, y_max)]", "\n", "# plane_p2 = [x_max, y_min, get_z_from_plane(plane_parameter, x_max, y_min)]", "\n", "# plane_p3 = [x_min, y_min, get_z_from_plane(plane_parameter, x_min, y_max)]", "\n", "# plane_p4 = [x_min, y_max, get_z_from_plane(plane_parameter, x_min, y_min)]", "\n", "\n", "plane_p1", "=", "[", "p1", "[", "0", "]", ",", "p1", "[", "1", "]", ",", "get_z_from_plane", "(", "plane_parameter", ",", "p1", "[", "0", "]", ",", "p1", "[", "1", "]", ")", "]", "\n", "plane_p2", "=", "[", "p2", "[", "0", "]", ",", "p2", "[", "1", "]", ",", "get_z_from_plane", "(", "plane_parameter", ",", "p2", "[", "0", "]", ",", "p2", "[", "1", "]", ")", "]", "\n", "plane_p3", "=", "[", "p3", "[", "0", "]", ",", "p3", "[", "1", "]", ",", "get_z_from_plane", "(", "plane_parameter", ",", "p3", "[", "0", "]", ",", "p3", "[", "1", "]", ")", "]", "\n", "plane_p4", "=", "[", "p4", "[", "0", "]", ",", "p4", "[", "1", "]", ",", "get_z_from_plane", "(", "plane_parameter", ",", "p4", "[", "0", "]", ",", "p4", "[", "1", "]", ")", "]", "\n", "\n", "plane", "=", "o3d", ".", "geometry", ".", "TriangleMesh", "(", ")", "\n", "plane", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "array", "(", "[", "plane_p1", ",", "plane_p2", ",", "plane_p3", ",", "plane_p4", "]", ")", ")", "\n", "plane", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "\n", "np", ".", "array", "(", "list", "(", "itertools", ".", "permutations", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "3", ")", ")", ")", ")", "\n", "plane", ".", "paint_uniform_color", "(", "[", "0.5", ",", "1", ",", "1", "]", ")", "\n", "plane", "=", "resize_plane", "(", "plane", ",", "1.2", ")", "\n", "return", "plane", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.resize_plane": [[309, 351], ["numpy.unique", "plane_pcd_utils.get_planeParam_from_3_points", "Symbol", "Symbol", "Symbol", "numpy.mean", "solve", "solve", "o3d.utility.Vector3dVector", "o3d.utility.Vector3iVector", "numpy.array", "numpy.linalg.norm", "float", "float", "float", "float", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "complex", "complex", "complex", "complex"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_planeParam_from_3_points"], ["", "def", "resize_plane", "(", "plane", ",", "ratio", ")", ":", "\n", "    ", "import", "open3d", "as", "o3d", "\n", "\n", "p1", ",", "p2", ",", "p3", ",", "p4", "=", "np", ".", "unique", "(", "np", ".", "array", "(", "plane", ".", "vertices", ")", ",", "axis", "=", "0", ")", "\n", "\n", "plane_parameter", "=", "get_planeParam_from_3_points", "(", "p1", ",", "p2", ",", "p3", ")", "\n", "[", "a", ",", "b", ",", "c", ",", "d", "]", "=", "plane_parameter", "\n", "x", "=", "Symbol", "(", "'x'", ",", "real", "=", "True", ")", "\n", "y", "=", "Symbol", "(", "'y'", ",", "real", "=", "True", ")", "\n", "z", "=", "Symbol", "(", "'z'", ",", "real", "=", "True", ")", "\n", "\n", "selected_center", "=", "np", ".", "mean", "(", "[", "p1", ",", "p2", ",", "p3", ",", "p4", "]", ",", "axis", "=", "0", ")", "\n", "point_center_distance", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "p1", ")", "-", "np", ".", "array", "(", "selected_center", ")", ")", "*", "ratio", "\n", "\n", "camera_plane_p1", ",", "camera_plane_p2", "=", "solve", "(", "[", "a", "*", "x", "+", "b", "*", "y", "+", "c", "*", "z", "+", "d", ",", "\n", "(", "x", "-", "selected_center", "[", "0", "]", ")", "*", "(", "x", "-", "selected_center", "[", "0", "]", ")", "+", "(", "\n", "y", "-", "selected_center", "[", "1", "]", ")", "*", "(", "y", "-", "selected_center", "[", "1", "]", ")", "+", "(", "\n", "z", "-", "selected_center", "[", "2", "]", ")", "*", "(", "z", "-", "selected_center", "[", "\n", "2", "]", ")", "-", "point_center_distance", "*", "point_center_distance", ",", "\n", "(", "y", "-", "selected_center", "[", "1", "]", ")", "*", "(", "p1", "[", "0", "]", "-", "selected_center", "[", "0", "]", ")", "-", "(", "\n", "x", "-", "selected_center", "[", "0", "]", ")", "*", "(", "p1", "[", "1", "]", "-", "selected_center", "[", "1", "]", ")", "]", ",", "\n", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "camera_plane_p3", ",", "camera_plane_p4", "=", "solve", "(", "[", "a", "*", "x", "+", "b", "*", "y", "+", "c", "*", "z", "+", "d", ",", "\n", "(", "x", "-", "selected_center", "[", "0", "]", ")", "*", "(", "x", "-", "selected_center", "[", "0", "]", ")", "+", "(", "\n", "y", "-", "selected_center", "[", "1", "]", ")", "*", "(", "y", "-", "selected_center", "[", "1", "]", ")", "+", "(", "\n", "z", "-", "selected_center", "[", "2", "]", ")", "*", "(", "z", "-", "selected_center", "[", "\n", "2", "]", ")", "-", "point_center_distance", "*", "point_center_distance", ",", "\n", "(", "y", "-", "selected_center", "[", "1", "]", ")", "*", "(", "p2", "[", "0", "]", "-", "selected_center", "[", "0", "]", ")", "-", "(", "\n", "x", "-", "selected_center", "[", "0", "]", ")", "*", "(", "p2", "[", "1", "]", "-", "selected_center", "[", "1", "]", ")", "]", ",", "\n", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "\n", "camera_plane_p1", "=", "[", "float", "(", "complex", "(", "i", ")", ".", "real", ")", "for", "i", "in", "camera_plane_p1", "]", "\n", "camera_plane_p2", "=", "[", "float", "(", "complex", "(", "i", ")", ".", "real", ")", "for", "i", "in", "camera_plane_p2", "]", "\n", "camera_plane_p3", "=", "[", "float", "(", "complex", "(", "i", ")", ".", "real", ")", "for", "i", "in", "camera_plane_p3", "]", "\n", "camera_plane_p4", "=", "[", "float", "(", "complex", "(", "i", ")", ".", "real", ")", "for", "i", "in", "camera_plane_p4", "]", "\n", "\n", "plane", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "\n", "np", ".", "array", "(", "[", "camera_plane_p1", ",", "camera_plane_p2", ",", "camera_plane_p3", ",", "camera_plane_p4", "]", ")", ")", "\n", "plane", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "\n", "np", ".", "array", "(", "[", "[", "0", ",", "1", ",", "2", "]", ",", "[", "0", ",", "1", ",", "3", "]", ",", "[", "1", ",", "2", ",", "3", "]", ",", "[", "2", ",", "1", ",", "0", "]", ",", "[", "3", ",", "1", ",", "0", "]", ",", "[", "3", ",", "2", ",", "1", "]", "]", ")", ")", "\n", "\n", "return", "plane", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.visualize_mask_one_image": [[356, 375], ["cv2.cvtColor", "numpy.array", "cv2.cvtColor", "numpy.array", "cv2.imread", "np.array.astype", "numpy.ones"], "function", ["None"], ["", "def", "visualize_mask_one_image", "(", "color_img_path", ",", "mask", ")", ":", "\n", "    ", "i", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "color_img_path", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "# convert to floating point", "\n", "img", "=", "np", ".", "array", "(", "i", ",", "dtype", "=", "np", ".", "float", ")", "\n", "img", "/=", "255.0", "\n", "# convert to floating point", "\n", "mask", "=", "cv2", ".", "cvtColor", "(", "mask", ".", "astype", "(", "np", ".", "uint16", ")", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", "\n", "mask", "[", "mask", ">", "0", "]", "=", "255", "\n", "mask", "=", "np", ".", "array", "(", "mask", ",", "dtype", "=", "np", ".", "float", ")", "\n", "mask", "/=", "255.0", "\n", "# set transparency to 25%", "\n", "transparency", "=", ".25", "\n", "mask", "*=", "transparency", "\n", "# make a green overlay", "\n", "green", "=", "np", ".", "ones", "(", "img", ".", "shape", ",", "dtype", "=", "np", ".", "float", ")", "*", "(", "0", ",", "1", ",", "0", ")", "\n", "# green over original image", "\n", "masked_img", "=", "green", "*", "mask", "+", "img", "*", "(", "1.0", "-", "mask", ")", "\n", "\n", "return", "masked_img", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_picked_points": [[380, 397], ["o3d.geometry.TriangleMesh.create_coordinate_frame", "o3d.visualization.VisualizerWithEditing", "o3d.visualization.VisualizerWithEditing.create_window", "o3d.visualization.VisualizerWithEditing.add_geometry", "o3d.visualization.VisualizerWithEditing.run", "o3d.visualization.VisualizerWithEditing.destroy_window", "o3d.visualization.VisualizerWithEditing.get_picked_points", "len", "print", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM.create_window", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_picked_points"], ["", "def", "get_picked_points", "(", "pcd", ")", ":", "\n", "    ", "import", "open3d", "as", "o3d", "\n", "while", "1", ":", "\n", "        ", "coor_ori", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_coordinate_frame", "(", "size", "=", "8000", ",", "origin", "=", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "vis", "=", "o3d", ".", "visualization", ".", "VisualizerWithEditing", "(", ")", "\n", "vis", ".", "create_window", "(", ")", "\n", "vis", ".", "add_geometry", "(", "pcd", ")", "\n", "vis", ".", "run", "(", ")", "# user picks points", "\n", "vis", ".", "destroy_window", "(", ")", "\n", "points_index", "=", "vis", ".", "get_picked_points", "(", ")", "\n", "if", "len", "(", "points_index", ")", "<", "3", ":", "\n", "            ", "print", "(", "\"please pick at least three points !\"", ")", "\n", "", "else", ":", "\n", "            ", "p1", "=", "np", ".", "array", "(", "pcd", ".", "points", ")", "[", "points_index", "[", "0", "]", "]", "\n", "p2", "=", "np", ".", "array", "(", "pcd", ".", "points", ")", "[", "points_index", "[", "1", "]", "]", "\n", "p3", "=", "np", ".", "array", "(", "pcd", ".", "points", ")", "[", "points_index", "[", "2", "]", "]", "\n", "return", "[", "p1", ",", "p2", ",", "p3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_planeParam_from_3_points": [[402, 413], ["numpy.cross"], "function", ["None"], ["", "", "", "def", "get_planeParam_from_3_points", "(", "p1", ",", "p2", ",", "p3", ")", ":", "\n", "# These two vectors are in the plane", "\n", "    ", "v1", "=", "p3", "-", "p1", "\n", "v2", "=", "p2", "-", "p1", "\n", "# the cross product is a vector normal to the plane", "\n", "cp", "=", "np", ".", "cross", "(", "v1", ",", "v2", ")", "\n", "a", ",", "b", ",", "c", "=", "cp", "\n", "# This evaluates a * x3 + b * y3 + c * z3 which equals d", "\n", "# d = -np.dot(cp, p3)", "\n", "d", "=", "-", "a", "*", "p1", "[", "0", "]", "-", "b", "*", "p1", "[", "1", "]", "-", "c", "*", "p1", "[", "2", "]", "\n", "return", "[", "a", ",", "b", ",", "c", ",", "d", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.refine_pcd_by_mirror_border": [[418, 473], ["cv2.imread", "cv2.cvtColor", "range", "range", "o3d.geometry.PointCloud", "o3d.utility.Vector3dVector", "o3d.utility.Vector3dVector", "cv2.cvtColor", "cv2.cvtColor", "cv2.imread", "range", "plane_pcd_utils.get_mirror_parameter_from_xyzs_by_ransac", "range", "numpy.stack", "numpy.stack", "len", "len", "correct_colors.append", "correct_xyz.append", "correct_colors.append", "correct_xyz.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "correct_xyz.append", "correct_colors.append", "border_xyz.append", "numpy.dot", "list"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mirror_parameter_from_xyzs_by_ransac"], ["", "def", "refine_pcd_by_mirror_border", "(", "mirror_mask", ",", "mirror_border_mask", ",", "depth_img_path", ",", "color_img_path", ",", "f", ")", ":", "\n", "    ", "import", "open3d", "as", "o3d", "\n", "if", "mirror_mask", "is", "not", "None", "and", "len", "(", "mirror_mask", ".", "shape", ")", ">", "2", ":", "\n", "        ", "mirror_mask", "=", "cv2", ".", "cvtColor", "(", "mirror_mask", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "", "if", "mirror_border_mask", "is", "not", "None", "and", "len", "(", "mirror_border_mask", ".", "shape", ")", ">", "2", ":", "\n", "        ", "mirror_border_mask", "=", "cv2", ".", "cvtColor", "(", "mirror_border_mask", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "\n", "", "depth", "=", "cv2", ".", "imread", "(", "depth_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "color_img", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "color_img_path", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "color_img", "=", "color_img", "/", "255", "\n", "\n", "h", ",", "w", "=", "depth", ".", "shape", "\n", "correct_colors", "=", "[", "]", "\n", "correct_xyz", "=", "[", "]", "\n", "border_xyz", "=", "[", "]", "\n", "\n", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "mirror_mask", "[", "y", "]", "[", "x", "]", "==", "0", ":", "\n", "                ", "correct_colors", ".", "append", "(", "color_img", "[", "y", "]", "[", "x", "]", ")", "\n", "correct_xyz", ".", "append", "(", "[", "(", "x", "-", "w", "/", "2", ")", "*", "(", "depth", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "(", "y", "-", "h", "/", "2", ")", "*", "(", "depth", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "depth", "[", "y", "]", "[", "x", "]", "]", ")", "\n", "if", "mirror_border_mask", "[", "y", "]", "[", "x", "]", ">", "0", "and", "depth", "[", "y", "]", "[", "x", "]", ">", "10", ":", "\n", "                    ", "border_xyz", ".", "append", "(", "[", "(", "x", "-", "w", "/", "2", ")", "*", "(", "depth", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "(", "y", "-", "h", "/", "2", ")", "*", "(", "depth", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "depth", "[", "y", "]", "[", "x", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "correct_colors", ".", "append", "(", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "correct_xyz", ".", "append", "(", "[", "(", "x", "-", "w", "/", "2", ")", "*", "(", "depth", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "(", "y", "-", "h", "/", "2", ")", "*", "(", "depth", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "depth", "[", "y", "]", "[", "x", "]", "]", ")", "\n", "\n", "", "", "", "try", ":", "\n", "        ", "a", ",", "b", ",", "c", ",", "d", "=", "get_mirror_parameter_from_xyzs_by_ransac", "(", "border_xyz", ")", "\n", "", "except", ":", "\n", "        ", "a", ",", "b", ",", "c", ",", "d", "=", "[", "0", ",", "0", ",", "1", ",", "1000", "]", "\n", "\n", "", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "mirror_mask", "[", "y", "]", "[", "x", "]", ">", "0", ":", "\n", "                ", "n", "=", "np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", "\n", "V0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "d", "/", "c", "]", ")", "\n", "P0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "P1", "=", "np", ".", "array", "(", "[", "(", "x", "-", "w", "/", "2", ")", ",", "(", "y", "-", "h", "/", "2", ")", ",", "f", "]", ")", "\n", "\n", "j", "=", "P0", "-", "V0", "\n", "u", "=", "P1", "-", "P0", "\n", "N", "=", "-", "np", ".", "dot", "(", "n", ",", "j", ")", "\n", "D", "=", "np", ".", "dot", "(", "n", ",", "u", ")", "\n", "sI", "=", "N", "/", "D", "\n", "I", "=", "P0", "+", "sI", "*", "u", "\n", "\n", "correct_xyz", ".", "append", "(", "list", "(", "I", ")", ")", "\n", "correct_colors", ".", "append", "(", "[", "0", ",", "0.9", ",", "0", "]", ")", "\n", "\n", "", "", "", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "correct_xyz", ",", "axis", "=", "0", ")", ")", "\n", "pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "correct_colors", ",", "axis", "=", "0", ")", ")", "\n", "\n", "return", "pcd", ",", "[", "a", ",", "b", ",", "c", ",", "d", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_points_in_mask": [[478, 496], ["cv2.imread", "range", "range", "xyz.append", "len"], "function", ["None"], ["", "def", "get_points_in_mask", "(", "f", ",", "depth_img_path", ",", "mirror_mask", "=", "None", ",", "points_num", "=", "None", ")", ":", "\n", "    ", "import", "open3d", "as", "o3d", "\n", "d", "=", "cv2", ".", "imread", "(", "depth_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "\n", "h", ",", "w", "=", "d", ".", "shape", "\n", "x_cam", "=", "[", "]", "\n", "y_cam", "=", "[", "]", "\n", "z_cam", "=", "[", "]", "\n", "xyz", "=", "[", "]", "\n", "\n", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "mirror_mask", "is", "not", "None", "and", "mirror_mask", "[", "y", "]", "[", "x", "]", ":", "\n", "                ", "xyz", ".", "append", "(", "[", "(", "x", "-", "w", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "(", "y", "-", "h", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "d", "[", "y", "]", "[", "x", "]", "]", ")", "\n", "if", "points_num", "is", "not", "None", "and", "len", "(", "xyz", ")", ">=", "points_num", ":", "\n", "                    ", "return", "xyz", "\n", "\n", "", "", "", "", "return", "xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_pcd_from_rgb_depthMap": [[501, 532], ["cv2.cvtColor", "range", "o3d.geometry.PointCloud", "o3d.utility.Vector3dVector", "o3d.utility.Vector3dVector", "cv2.imread", "range", "numpy.stack", "numpy.stack", "xyz.append", "xyz.append", "colors.append", "colors.append", "colors.append", "colors.append"], "function", ["None"], ["", "def", "get_pcd_from_rgb_depthMap", "(", "f", ",", "d", ",", "color_img_path", ",", "mirror_mask", "=", "None", ",", "color", "=", "None", ")", ":", "\n", "    ", "import", "open3d", "as", "o3d", "\n", "color_img", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "color_img_path", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "color_img", "=", "color_img", "/", "255", "\n", "\n", "h", ",", "w", "=", "d", ".", "shape", "\n", "x_cam", "=", "[", "]", "\n", "y_cam", "=", "[", "]", "\n", "z_cam", "=", "[", "]", "\n", "colors", "=", "[", "]", "\n", "xyz", "=", "[", "]", "\n", "\n", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "mirror_mask", "is", "not", "None", "and", "mirror_mask", "[", "y", "]", "[", "x", "]", ":", "\n", "                ", "if", "color", "is", "not", "None", ":", "\n", "                    ", "colors", ".", "append", "(", "color", ")", "\n", "", "else", ":", "\n", "                    ", "colors", ".", "append", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "", "xyz", ".", "append", "(", "[", "(", "x", "-", "w", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "(", "y", "-", "h", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "d", "[", "y", "]", "[", "x", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "if", "color", "is", "not", "None", ":", "\n", "                    ", "colors", ".", "append", "(", "color", ")", "\n", "", "else", ":", "\n", "                    ", "colors", ".", "append", "(", "color_img", "[", "y", "]", "[", "x", "]", ")", "\n", "", "xyz", ".", "append", "(", "[", "(", "x", "-", "w", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "(", "y", "-", "h", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "d", "[", "y", "]", "[", "x", "]", "]", ")", "\n", "\n", "", "", "", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "xyz", ",", "axis", "=", "0", ")", ")", "\n", "pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "colors", ",", "axis", "=", "0", ")", ")", "\n", "return", "pcd", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_3d_from_2d_array": [[533, 550], ["cv2.imread", "int", "int", "plane_pcd_utils.get_z_from_plane", "points_3d.append", "int", "int", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_z_from_plane"], ["", "def", "get_3d_from_2d_array", "(", "points_2d", ",", "depth_img_path", ",", "f", ",", "plane_parameter", ")", ":", "\n", "    ", "points_3d", "=", "[", "]", "\n", "depth", "=", "cv2", ".", "imread", "(", "depth_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "img_h", ",", "img_w", "=", "depth", ".", "shape", "\n", "for", "one_2d_point", "in", "points_2d", ":", "\n", "        ", "one_2d_point", "=", "one_2d_point", "[", "0", "]", "\n", "x", "=", "int", "(", "one_2d_point", "[", "0", "]", ")", "\n", "y", "=", "int", "(", "one_2d_point", "[", "1", "]", ")", "\n", "\n", "if", "x", ">", "0", "and", "x", "<", "img_w", "and", "y", ">", "0", "and", "y", "<", "img_h", ":", "\n", "            ", "z", "=", "depth", "[", "x", "]", "[", "y", "]", "\n", "x", "=", "(", "int", "(", "one_2d_point", "[", "0", "]", ")", "-", "img_w", "/", "2", ")", "*", "(", "depth", "[", "int", "(", "one_2d_point", "[", "1", "]", ")", "]", "[", "int", "(", "one_2d_point", "[", "0", "]", ")", "]", "/", "f", ")", "\n", "y", "=", "(", "int", "(", "one_2d_point", "[", "1", "]", ")", "-", "img_h", "/", "2", ")", "*", "(", "depth", "[", "int", "(", "one_2d_point", "[", "1", "]", ")", "]", "[", "int", "(", "one_2d_point", "[", "0", "]", ")", "]", "/", "f", ")", "\n", "pz", "=", "get_z_from_plane", "(", "plane_parameter", ",", "x", ",", "y", ")", "\n", "points_3d", ".", "append", "(", "[", "x", ",", "y", ",", "pz", "]", ")", "\n", "\n", "", "", "return", "points_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.clamp_points_2_plane": [[552, 561], ["plane_pcd_utils.get_z_from_plane", "points_3d.append"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_z_from_plane"], ["", "def", "clamp_points_2_plane", "(", "ori_points_3d", ",", "plane_parameter", ")", ":", "\n", "    ", "points_3d", "=", "[", "]", "\n", "for", "one_3d_point", "in", "ori_points_3d", ":", "\n", "        ", "x", "=", "one_3d_point", "[", "0", "]", "\n", "y", "=", "one_3d_point", "[", "1", "]", "\n", "pz", "=", "get_z_from_plane", "(", "plane_parameter", ",", "x", ",", "y", ")", "\n", "points_3d", ".", "append", "(", "[", "x", ",", "y", ",", "pz", "]", ")", "\n", "\n", "", "return", "points_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_pcd_from_rgbd_depthPath": [[568, 603], ["cv2.imread", "cv2.cvtColor", "range", "o3d.geometry.PointCloud", "o3d.utility.Vector3dVector", "o3d.utility.Vector3dVector", "cv2.imread", "PIL.Image.open().resize", "numpy.asarray", "range", "numpy.stack", "numpy.stack", "numpy.asarray", "cv2.resize", "PIL.Image.open", "xyz.append", "colors.append", "xyz.append", "colors.append", "colors.append"], "function", ["None"], ["", "def", "get_pcd_from_rgbd_depthPath", "(", "f", ",", "depth_img_path", ",", "color_img_path", ",", "mirror_mask", "=", "None", ",", "color", "=", "None", ",", "w", "=", "None", ",", "h", "=", "None", ")", ":", "\n", "    ", "import", "open3d", "as", "o3d", "\n", "d", "=", "cv2", ".", "imread", "(", "depth_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "color_img", "=", "cv2", ".", "cvtColor", "(", "cv2", ".", "imread", "(", "color_img_path", ")", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "color_img", "=", "color_img", "/", "255", "\n", "\n", "if", "w", "is", "not", "None", "and", "h", "is", "not", "None", ":", "\n", "        ", "color_img", "=", "Image", ".", "open", "(", "color_img_path", ")", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "NEAREST", ")", "\n", "color_img", "=", "np", ".", "asarray", "(", "color_img", ",", "dtype", "=", "np", ".", "float32", ")", "/", "255.0", "\n", "d", "=", "np", ".", "asarray", "(", "cv2", ".", "resize", "(", "d", ",", "dsize", "=", "(", "w", ",", "h", ")", ",", "interpolation", "=", "cv2", ".", "INTER_NEAREST", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "h", ",", "w", "=", "d", ".", "shape", "\n", "\n", "", "x_cam", "=", "[", "]", "\n", "y_cam", "=", "[", "]", "\n", "z_cam", "=", "[", "]", "\n", "colors", "=", "[", "]", "\n", "xyz", "=", "[", "]", "\n", "\n", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "mirror_mask", "is", "not", "None", "and", "mirror_mask", "[", "y", "]", "[", "x", "]", ":", "\n", "                ", "if", "color", "is", "not", "None", ":", "\n", "                    ", "colors", ".", "append", "(", "color", ")", "\n", "", "else", ":", "\n", "                    ", "colors", ".", "append", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "", "xyz", ".", "append", "(", "[", "(", "x", "-", "w", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "(", "y", "-", "h", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "d", "[", "y", "]", "[", "x", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "colors", ".", "append", "(", "color_img", "[", "y", "]", "[", "x", "]", ")", "\n", "xyz", ".", "append", "(", "[", "(", "x", "-", "w", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "(", "y", "-", "h", "/", "2", ")", "*", "(", "d", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "d", "[", "y", "]", "[", "x", "]", "]", ")", "\n", "\n", "", "", "", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "xyz", ",", "axis", "=", "0", ")", ")", "\n", "pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "colors", ",", "axis", "=", "0", ")", ")", "\n", "return", "pcd", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_normal_vis": [[687, 740], ["plt.figure", "plt.figure.gca", "fig.gca.set_xlim3d", "fig.gca.set_ylim3d", "fig.gca.set_zlim3d", "fig.gca.quiver", "fig.gca.text", "fig.gca.quiver", "fig.gca.text", "fig.gca.quiver", "fig.gca.text", "numpy.load", "enumerate", "range", "plt.title", "fig.gca.view_init", "plt.savefig", "print", "fig.gca.quiver", "fig.gca.text", "len", "fig.gca.quiver", "fig.gca.quiver", "str", "pred_instances.pred_residuals[].detach().cpu().numpy", "fig.gca.text", "pred_instances.pred_residuals[].detach().cpu().numpy", "angle_between", "pred_instances.pred_residuals[].detach().cpu", "pred_instances.pred_residuals[].detach().cpu", "pred_instances.pred_residuals[].detach", "pred_instances.pred_residuals[].detach"], "function", ["None"], ["", "", "def", "get_normal_vis", "(", "cfg", ",", "colors", ",", "gt_annotations", ",", "pred_instances", ",", "img_save_path", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "color_list", "=", "[", "\"orange\"", ",", "\"purple\"", ",", "\"pink\"", ",", "\"yellow\"", "]", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "# ----------- XYZ camera coodinate -----------", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "ax", ".", "set_xlim3d", "(", "-", "2000", ",", "2000", ")", "\n", "ax", ".", "set_ylim3d", "(", "-", "2000", ",", "2000", ")", "\n", "ax", ".", "set_zlim3d", "(", "-", "2000", ",", "2000", ")", "\n", "ax", ".", "quiver", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "length", "=", "2000", ",", "color", "=", "'b'", ",", "arrow_length_ratio", "=", "0.2", ")", "# Z", "\n", "ax", ".", "text", "(", "0", ",", "0", ",", "2000", ",", "\"z\"", ",", "color", "=", "'b'", ")", "\n", "ax", ".", "quiver", "(", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "length", "=", "2000", ",", "color", "=", "'g'", ",", "arrow_length_ratio", "=", "0.2", ")", "# Y", "\n", "ax", ".", "text", "(", "0", ",", "2000", ",", "0", ",", "\"y\"", ",", "color", "=", "'g'", ")", "\n", "ax", ".", "quiver", "(", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "length", "=", "2000", ",", "color", "=", "'r'", ",", "arrow_length_ratio", "=", "0.2", ")", "# X", "\n", "ax", ".", "text", "(", "2000", ",", "0", ",", "0", ",", "\"x\"", ",", "color", "=", "'r'", ")", "\n", "\n", "anchor_normals", "=", "np", ".", "load", "(", "cfg", ".", "ANCHOR_NORMAL_NYP", ")", "\n", "# ----------- GT anchor normal -----------", "\n", "for", "anchor_id", ",", "one_normal", "in", "enumerate", "(", "anchor_normals", ")", ":", "\n", "# anchor normal", "\n", "        ", "ax", ".", "quiver", "(", "0", ",", "0", ",", "0", ",", "one_normal", "[", "0", "]", ",", "one_normal", "[", "1", "]", ",", "one_normal", "[", "2", "]", ",", "length", "=", "2000", ",", "color", "=", "color_list", "[", "anchor_id", "]", ",", "\n", "arrow_length_ratio", "=", "0.2", ")", "\n", "ax", ".", "text", "(", "one_normal", "[", "0", "]", "*", "2000", ",", "one_normal", "[", "1", "]", "*", "2000", ",", "one_normal", "[", "2", "]", "*", "2000", ",", "str", "(", "anchor_id", ")", ",", "\n", "color", "=", "color_list", "[", "anchor_id", "]", ",", "fontsize", "=", "8", ")", "\n", "\n", "# ----------- pred mirror_normal_camera -----------", "\n", "", "for", "idx", "in", "range", "(", "len", "(", "pred_instances", ".", "pred_anchor_classes", ")", ")", ":", "\n", "        ", "if", "pred_instances", ".", "pred_anchor_classes", "[", "idx", "]", "==", "cfg", ".", "ANCHOR_NORMAL_CLASS_NUM", ":", "# background", "\n", "            ", "one_pred_mirror_normal", "=", "pred_instances", ".", "pred_residuals", "[", "idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ax", ".", "text", "(", "one_pred_mirror_normal", "[", "0", "]", "*", "2000", ",", "one_pred_mirror_normal", "[", "1", "]", "*", "2000", ",", "\n", "one_pred_mirror_normal", "[", "2", "]", "*", "2000", ",", "\"no_pred\"", ",", "color", "=", "colors", "[", "idx", "]", ",", "fontsize", "=", "15", ")", "\n", "continue", "\n", "", "one_pred_mirror_normal", "=", "anchor_normals", "[", "pred_instances", ".", "pred_anchor_classes", "[", "idx", "]", "]", "+", "pred_instances", ".", "pred_residuals", "[", "idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "ax", ".", "quiver", "(", "0", ",", "0", ",", "0", ",", "one_pred_mirror_normal", "[", "0", "]", ",", "one_pred_mirror_normal", "[", "1", "]", ",", "one_pred_mirror_normal", "[", "2", "]", ",", "length", "=", "2000", ",", "\n", "color", "=", "colors", "[", "idx", "]", ",", "arrow_length_ratio", "=", "0.2", ")", "\n", "\n", "# ----------- GT mirror_normal_camera -----------", "\n", "", "for", "one_annotation", "in", "gt_annotations", ":", "\n", "        ", "one_gt_mirror_normal", "=", "anchor_normals", "[", "one_annotation", "[", "\"anchor_normal_class\"", "]", "]", "+", "one_annotation", "[", "\n", "\"anchor_normal_residual\"", "]", "\n", "ax", ".", "quiver", "(", "0", ",", "0", ",", "0", ",", "one_gt_mirror_normal", "[", "0", "]", ",", "one_gt_mirror_normal", "[", "1", "]", ",", "one_gt_mirror_normal", "[", "2", "]", ",", "length", "=", "1000", ",", "\n", "color", "=", "[", "0", ",", "0.9", ",", "0", "]", ",", "arrow_length_ratio", "=", "0.5", ")", "\n", "\n", "", "degree", "=", "(", "angle_between", "(", "one_gt_mirror_normal", ",", "one_pred_mirror_normal", ")", "/", "np", ".", "pi", ")", "*", "180", "\n", "plt", ".", "title", "(", "\"{:.2f}\"", ".", "format", "(", "degree", ")", ",", "fontsize", "=", "40", ")", "\n", "ax", ".", "view_init", "(", "-", "60", ",", "-", "60", ")", "\n", "\n", "plt", ".", "savefig", "(", "img_save_path", ")", "\n", "print", "(", "\"get_normal_vis saved to : \"", ",", "img_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.draw_gt_bbox": [[745, 761], ["numpy.array", "cv2.rectangle", "cv2.putText", "str", "len", "len", "int", "int", "int", "int", "int", "int", "int", "int"], "function", ["None"], ["", "def", "draw_gt_bbox", "(", "annotations", ",", "img", ",", "pred_anchor_classes", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "predict_correct", "=", "False", "\n", "for", "one_annotation", "in", "annotations", ":", "\n", "\n", "        ", "gt_anchor_normal_class", "=", "one_annotation", "[", "\"anchor_normal_class\"", "]", "\n", "gt_bbox", "=", "one_annotation", "[", "\"bbox\"", "]", "\n", "if", "len", "(", "annotations", ")", "==", "1", "and", "len", "(", "pred_anchor_classes", ")", "==", "1", "and", "gt_anchor_normal_class", "in", "pred_anchor_classes", ":", "\n", "            ", "predict_correct", "=", "True", "\n", "", "cv2", ".", "rectangle", "(", "img", ",", "(", "int", "(", "gt_bbox", "[", "0", "]", "/", "2", ")", ",", "int", "(", "gt_bbox", "[", "1", "]", "/", "2", ")", ")", ",", "\n", "(", "int", "(", "gt_bbox", "[", "0", "]", "/", "2", ")", "+", "int", "(", "gt_bbox", "[", "2", "]", "/", "2", ")", ",", "int", "(", "gt_bbox", "[", "1", "]", "/", "2", ")", "+", "int", "(", "gt_bbox", "[", "3", "]", "/", "2", ")", ")", ",", "\n", "(", "0", ",", "255", ",", "0", ")", ",", "1", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "str", "(", "gt_anchor_normal_class", ")", ",", "(", "int", "(", "gt_bbox", "[", "0", "]", "/", "2", ")", ",", "int", "(", "gt_bbox", "[", "1", "]", "/", "2", "+", "20", ")", ")", ",", "1", ",", "2", ",", "\n", "(", "0", ",", "255", ",", "0", ")", ")", "\n", "", "return", "img", ",", "predict_correct", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_parameter_from_plane_adjustment": [[767, 1009], ["o3d.geometry.TriangleMesh.create_coordinate_frame", "o3d.geometry.TriangleMesh.create_coordinate_frame.translate", "o3d.visualization.VisualizerWithKeyCallback", "o3d.visualization.VisualizerWithKeyCallback.register_key_action_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_action_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_action_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_action_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_action_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_action_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_action_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_action_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_action_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_action_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_action_callback", "o3d.visualization.VisualizerWithKeyCallback.register_key_action_callback", "plane_pcd_utils.ToolOption", "plane_pcd_utils.ToolOption.add_option", "plane_pcd_utils.ToolOption.add_option", "plane_pcd_utils.ToolOption.add_option", "plane_pcd_utils.ToolOption.add_option", "plane_pcd_utils.ToolOption.add_option", "plane_pcd_utils.ToolOption.add_option", "plane_pcd_utils.ToolOption.add_option", "plane_pcd_utils.ToolOption.add_option", "plane_pcd_utils.ToolOption.add_option", "plane_pcd_utils.ToolOption.add_option", "plane_pcd_utils.ToolOption.add_option", "plane_pcd_utils.ToolOption.add_option", "plane_pcd_utils.ToolOption.print_option", "o3d.geometry.TriangleMesh.create_coordinate_frame", "o3d.visualization.VisualizerWithKeyCallback.register_animation_callback", "o3d.visualization.VisualizerWithKeyCallback.create_window", "o3d.visualization.VisualizerWithKeyCallback.add_geometry", "o3d.visualization.VisualizerWithKeyCallback.add_geometry", "o3d.visualization.VisualizerWithKeyCallback.get_view_control().set_front", "o3d.visualization.VisualizerWithKeyCallback.get_view_control().set_constant_z_far", "o3d.visualization.VisualizerWithKeyCallback.get_view_control().set_constant_z_near", "o3d.visualization.VisualizerWithKeyCallback.get_view_control().set_up", "o3d.visualization.VisualizerWithKeyCallback.run", "numpy.cross", "numpy.array().mean", "numpy.array", "camera_plane.translate", "o3d.visualization.VisualizerWithKeyCallback.update_geometry", "camera_plane.translate", "o3d.visualization.VisualizerWithKeyCallback.update_geometry", "camera_plane.translate", "o3d.visualization.VisualizerWithKeyCallback.update_geometry", "camera_plane.translate", "o3d.visualization.VisualizerWithKeyCallback.update_geometry", "camera_plane.translate", "o3d.visualization.VisualizerWithKeyCallback.update_geometry", "camera_plane.translate", "o3d.visualization.VisualizerWithKeyCallback.update_geometry", "camera_plane.rotate", "o3d.visualization.VisualizerWithKeyCallback.update_geometry", "camera_plane.rotate", "o3d.visualization.VisualizerWithKeyCallback.update_geometry", "camera_plane.rotate", "o3d.visualization.VisualizerWithKeyCallback.update_geometry", "camera_plane.rotate", "o3d.visualization.VisualizerWithKeyCallback.update_geometry", "plane_pcd_utils.resize_plane", "plane_pcd_utils.resize_plane", "o3d.visualization.VisualizerWithKeyCallback.get_view_control", "o3d.visualization.VisualizerWithKeyCallback.get_view_control", "o3d.visualization.VisualizerWithKeyCallback.get_view_control", "o3d.visualization.VisualizerWithKeyCallback.get_view_control", "numpy.array", "get_3_3_rotation_matrix", "numpy.array().mean", "get_3_3_rotation_matrix", "numpy.array().mean", "get_3_3_rotation_matrix", "numpy.array().mean", "get_3_3_rotation_matrix", "numpy.array().mean", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.print_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM.create_window", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.resize_plane", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.resize_plane", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_3_3_rotation_matrix", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_3_3_rotation_matrix", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_3_3_rotation_matrix", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_3_3_rotation_matrix"], ["", "def", "get_parameter_from_plane_adjustment", "(", "pcd", ",", "camera_plane", ",", "adjustment_init_step_size", ")", ":", "\n", "    ", "import", "open3d", "as", "o3d", "\n", "coor", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_coordinate_frame", "(", "size", "=", "5000", ",", "origin", "=", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "coor", ".", "translate", "(", "np", ".", "array", "(", "camera_plane", ".", "vertices", ")", ".", "mean", "(", "0", ")", ",", "relative", "=", "False", ")", "\n", "\n", "init_rotation_angle", "=", "0.5", "\n", "up", "=", "False", "\n", "down", "=", "False", "\n", "left", "=", "False", "\n", "right", "=", "False", "\n", "forward", "=", "False", "\n", "backward", "=", "False", "\n", "\n", "turn_up", "=", "False", "\n", "turn_down", "=", "False", "\n", "turn_right", "=", "False", "\n", "turn_left", "=", "False", "\n", "shrink", "=", "False", "\n", "expand", "=", "False", "\n", "\n", "vis", "=", "o3d", ".", "visualization", ".", "VisualizerWithKeyCallback", "(", ")", "\n", "\n", "# ------------------------ define function for one key ----------------------- #", "\n", "def", "mirror_up", "(", "vis", ",", "action", ",", "mods", ")", ":", "\n", "        ", "nonlocal", "up", "\n", "if", "action", "==", "1", ":", "# key down", "\n", "            ", "up", "=", "True", "\n", "", "elif", "action", "==", "0", ":", "# key up", "\n", "            ", "up", "=", "False", "\n", "", "elif", "action", "==", "2", ":", "# key repeat", "\n", "            ", "up", "=", "True", "\n", "", "return", "True", "\n", "\n", "", "def", "mirror_down", "(", "vis", ",", "action", ",", "mods", ")", ":", "\n", "        ", "nonlocal", "down", "\n", "if", "action", "==", "1", ":", "# key down", "\n", "            ", "down", "=", "True", "\n", "", "elif", "action", "==", "0", ":", "# key up", "\n", "            ", "down", "=", "False", "\n", "", "elif", "action", "==", "2", ":", "# key repeat", "\n", "            ", "down", "=", "True", "\n", "", "return", "True", "\n", "\n", "", "def", "mirror_left", "(", "vis", ",", "action", ",", "mods", ")", ":", "\n", "        ", "nonlocal", "left", "\n", "if", "action", "==", "1", ":", "# key down", "\n", "            ", "left", "=", "True", "\n", "", "elif", "action", "==", "0", ":", "# key up", "\n", "            ", "left", "=", "False", "\n", "", "elif", "action", "==", "2", ":", "# key repeat", "\n", "            ", "left", "=", "True", "\n", "", "return", "True", "\n", "\n", "", "def", "mirror_right", "(", "vis", ",", "action", ",", "mods", ")", ":", "\n", "        ", "nonlocal", "right", "\n", "if", "action", "==", "1", ":", "# key down", "\n", "            ", "right", "=", "True", "\n", "", "elif", "action", "==", "0", ":", "# key up", "\n", "            ", "right", "=", "False", "\n", "", "elif", "action", "==", "2", ":", "# key repeat", "\n", "            ", "right", "=", "True", "\n", "", "return", "True", "\n", "\n", "", "def", "mirror_forward", "(", "vis", ",", "action", ",", "mods", ")", ":", "\n", "        ", "nonlocal", "forward", "\n", "if", "action", "==", "1", ":", "# key down", "\n", "            ", "forward", "=", "True", "\n", "", "elif", "action", "==", "0", ":", "# key up", "\n", "            ", "forward", "=", "False", "\n", "", "elif", "action", "==", "2", ":", "# key repeat", "\n", "            ", "forward", "=", "True", "\n", "", "return", "True", "\n", "\n", "", "def", "mirror_backward", "(", "vis", ",", "action", ",", "mods", ")", ":", "\n", "        ", "nonlocal", "backward", "\n", "if", "action", "==", "1", ":", "# key down", "\n", "            ", "backward", "=", "True", "\n", "", "elif", "action", "==", "0", ":", "# key up", "\n", "            ", "backward", "=", "False", "\n", "", "elif", "action", "==", "2", ":", "# key repeat", "\n", "            ", "backward", "=", "True", "\n", "", "return", "True", "\n", "\n", "", "def", "mirror_turn_up", "(", "vis", ",", "action", ",", "mods", ")", ":", "\n", "        ", "nonlocal", "turn_up", "\n", "if", "action", "==", "1", ":", "# key down", "\n", "            ", "turn_up", "=", "True", "\n", "", "elif", "action", "==", "0", ":", "# key up", "\n", "            ", "turn_up", "=", "False", "\n", "", "elif", "action", "==", "2", ":", "# key repeat", "\n", "            ", "turn_up", "=", "True", "\n", "", "return", "True", "\n", "\n", "", "def", "mirror_turn_down", "(", "vis", ",", "action", ",", "mods", ")", ":", "\n", "        ", "nonlocal", "turn_down", "\n", "if", "action", "==", "1", ":", "# key down", "\n", "            ", "turn_down", "=", "True", "\n", "", "elif", "action", "==", "0", ":", "# key up", "\n", "            ", "turn_down", "=", "False", "\n", "", "elif", "action", "==", "2", ":", "# key repeat", "\n", "            ", "turn_down", "=", "True", "\n", "", "return", "True", "\n", "\n", "", "def", "mirror_turn_left", "(", "vis", ",", "action", ",", "mods", ")", ":", "\n", "        ", "nonlocal", "turn_left", "\n", "if", "action", "==", "1", ":", "# key down", "\n", "            ", "turn_left", "=", "True", "\n", "", "elif", "action", "==", "0", ":", "# key up", "\n", "            ", "turn_left", "=", "False", "\n", "", "elif", "action", "==", "2", ":", "# key repeat", "\n", "            ", "turn_left", "=", "True", "\n", "", "return", "True", "\n", "\n", "", "def", "mirror_turn_right", "(", "vis", ",", "action", ",", "mods", ")", ":", "\n", "        ", "nonlocal", "turn_right", "\n", "if", "action", "==", "1", ":", "# key down", "\n", "            ", "turn_right", "=", "True", "\n", "", "elif", "action", "==", "0", ":", "# key up", "\n", "            ", "turn_right", "=", "False", "\n", "", "elif", "action", "==", "2", ":", "# key repeat", "\n", "            ", "turn_right", "=", "True", "\n", "", "return", "True", "\n", "\n", "", "def", "mirror_expand", "(", "vis", ",", "action", ",", "mods", ")", ":", "\n", "        ", "nonlocal", "expand", "\n", "if", "action", "==", "1", ":", "# key down", "\n", "            ", "expand", "=", "True", "\n", "", "elif", "action", "==", "0", ":", "# key up", "\n", "            ", "expand", "=", "False", "\n", "", "elif", "action", "==", "2", ":", "# key repeat", "\n", "            ", "expand", "=", "True", "\n", "", "return", "True", "\n", "\n", "", "def", "mirror_shrink", "(", "vis", ",", "action", ",", "mods", ")", ":", "\n", "        ", "nonlocal", "shrink", "\n", "if", "action", "==", "1", ":", "# key down", "\n", "            ", "shrink", "=", "True", "\n", "", "elif", "action", "==", "0", ":", "# key up", "\n", "            ", "shrink", "=", "False", "\n", "", "elif", "action", "==", "2", ":", "# key repeat", "\n", "            ", "shrink", "=", "True", "\n", "", "return", "True", "\n", "\n", "# ------------------------- define callback action ------------------------ #", "\n", "", "def", "animation_callback", "(", "vis", ")", ":", "\n", "        ", "if", "up", ":", "\n", "            ", "camera_plane", ".", "translate", "(", "(", "0", ",", "adjustment_init_step_size", ",", "0", ")", ")", "\n", "vis", ".", "update_geometry", "(", "camera_plane", ")", "\n", "", "if", "down", ":", "\n", "            ", "camera_plane", ".", "translate", "(", "(", "0", ",", "-", "adjustment_init_step_size", ",", "0", ")", ")", "\n", "vis", ".", "update_geometry", "(", "camera_plane", ")", "\n", "", "if", "left", ":", "\n", "            ", "camera_plane", ".", "translate", "(", "(", "adjustment_init_step_size", ",", "0", ",", "0", ")", ")", "\n", "vis", ".", "update_geometry", "(", "camera_plane", ")", "\n", "", "if", "right", ":", "\n", "            ", "camera_plane", ".", "translate", "(", "(", "-", "adjustment_init_step_size", ",", "0", ",", "0", ")", ")", "\n", "vis", ".", "update_geometry", "(", "camera_plane", ")", "\n", "", "if", "forward", ":", "\n", "            ", "camera_plane", ".", "translate", "(", "(", "0", ",", "0", ",", "adjustment_init_step_size", ")", ")", "\n", "vis", ".", "update_geometry", "(", "camera_plane", ")", "\n", "", "if", "backward", ":", "\n", "            ", "camera_plane", ".", "translate", "(", "(", "0", ",", "0", ",", "-", "adjustment_init_step_size", ")", ")", "\n", "vis", ".", "update_geometry", "(", "camera_plane", ")", "\n", "", "if", "turn_up", ":", "\n", "            ", "camera_plane", ".", "rotate", "(", "get_3_3_rotation_matrix", "(", "init_rotation_angle", ",", "0", ",", "0", ")", ",", "\n", "np", ".", "array", "(", "camera_plane", ".", "vertices", ")", ".", "mean", "(", "0", ")", ")", "\n", "vis", ".", "update_geometry", "(", "camera_plane", ")", "\n", "", "if", "turn_down", ":", "\n", "            ", "camera_plane", ".", "rotate", "(", "get_3_3_rotation_matrix", "(", "-", "init_rotation_angle", ",", "0", ",", "0", ")", ",", "\n", "np", ".", "array", "(", "camera_plane", ".", "vertices", ")", ".", "mean", "(", "0", ")", ")", "\n", "vis", ".", "update_geometry", "(", "camera_plane", ")", "\n", "", "if", "turn_left", ":", "\n", "            ", "camera_plane", ".", "rotate", "(", "get_3_3_rotation_matrix", "(", "0", ",", "-", "init_rotation_angle", ",", "0", ")", ",", "\n", "np", ".", "array", "(", "camera_plane", ".", "vertices", ")", ".", "mean", "(", "0", ")", ")", "\n", "vis", ".", "update_geometry", "(", "camera_plane", ")", "\n", "", "if", "turn_right", ":", "\n", "            ", "camera_plane", ".", "rotate", "(", "get_3_3_rotation_matrix", "(", "0", ",", "init_rotation_angle", ",", "0", ")", ",", "\n", "np", ".", "array", "(", "camera_plane", ".", "vertices", ")", ".", "mean", "(", "0", ")", ")", "\n", "vis", ".", "update_geometry", "(", "camera_plane", ")", "\n", "", "if", "expand", ":", "\n", "            ", "resize_plane", "(", "plane", "=", "camera_plane", ",", "ratio", "=", "2", ")", "\n", "", "if", "shrink", ":", "\n", "            ", "resize_plane", "(", "plane", "=", "camera_plane", ",", "ratio", "=", "0.5", ")", "\n", "\n", "# ------------------------- link action with key ------------------------ #", "\n", "# a 65 w 87 s 83 d 68 e 69 r 82     j 74 i 73 k 75 l 76 o 79 p 80 z 90 x 88 n 78 m 77", "\n", "# translation", "\n", "", "", "vis", ".", "register_key_action_callback", "(", "65", ",", "mirror_left", ")", "# a", "\n", "vis", ".", "register_key_action_callback", "(", "87", ",", "mirror_up", ")", "# w", "\n", "vis", ".", "register_key_action_callback", "(", "83", ",", "mirror_down", ")", "# s", "\n", "vis", ".", "register_key_action_callback", "(", "68", ",", "mirror_right", ")", "# d", "\n", "vis", ".", "register_key_action_callback", "(", "69", ",", "mirror_backward", ")", "# e move close", "\n", "vis", ".", "register_key_action_callback", "(", "82", ",", "mirror_forward", ")", "# r move far", "\n", "\n", "# # rotation", "\n", "vis", ".", "register_key_action_callback", "(", "73", ",", "mirror_expand", ")", "# i  mirror_expand", "\n", "vis", ".", "register_key_action_callback", "(", "75", ",", "mirror_shrink", ")", "# k  mirror_shrink", "\n", "vis", ".", "register_key_action_callback", "(", "74", ",", "mirror_turn_left", ")", "# j green_y ", "\n", "vis", ".", "register_key_action_callback", "(", "76", ",", "mirror_turn_right", ")", "# l green_y", "\n", "vis", ".", "register_key_action_callback", "(", "79", ",", "mirror_turn_up", ")", "# o blue_z", "\n", "vis", ".", "register_key_action_callback", "(", "80", ",", "mirror_turn_down", ")", "# p blue_z", "\n", "\n", "option_list", "=", "ToolOption", "(", ")", "\n", "option_list", ".", "add_option", "(", "\"a\"", ",", "\"plane move left\"", ")", "\n", "option_list", ".", "add_option", "(", "\"w\"", ",", "\"plane move up\"", ")", "\n", "option_list", ".", "add_option", "(", "\"s\"", ",", "\"plane move down\"", ")", "\n", "option_list", ".", "add_option", "(", "\"d\"", ",", "\"plane move right\"", ")", "\n", "option_list", ".", "add_option", "(", "\"e\"", ",", "\"plane move closer\"", ")", "\n", "option_list", ".", "add_option", "(", "\"r\"", ",", "\"plane move further\"", ")", "\n", "option_list", ".", "add_option", "(", "\"i\"", ",", "\"make the plane larger\"", ")", "\n", "option_list", ".", "add_option", "(", "\"k\"", ",", "\"make the plane smaller\"", ")", "\n", "option_list", ".", "add_option", "(", "\"j\"", ",", "\"rotate left\"", ")", "\n", "option_list", ".", "add_option", "(", "\"l\"", ",", "\"rotate right\"", ")", "\n", "option_list", ".", "add_option", "(", "\"o\"", ",", "\"rotate upwards\"", ")", "\n", "option_list", ".", "add_option", "(", "\"p\"", ",", "\"rotate downwards\"", ")", "\n", "option_list", ".", "print_option", "(", ")", "\n", "\n", "coor_ori", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_coordinate_frame", "(", "size", "=", "8000", ",", "origin", "=", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "vis", ".", "register_animation_callback", "(", "animation_callback", ")", "\n", "vis", ".", "create_window", "(", ")", "\n", "vis", ".", "add_geometry", "(", "camera_plane", ")", "\n", "vis", ".", "add_geometry", "(", "pcd", ")", "\n", "vis", ".", "get_view_control", "(", ")", ".", "set_front", "(", "[", "0", ",", "0", ",", "-", "1", "]", ")", "\n", "vis", ".", "get_view_control", "(", ")", ".", "set_constant_z_far", "(", "100000", ")", "\n", "vis", ".", "get_view_control", "(", ")", ".", "set_constant_z_near", "(", "0", ")", "\n", "vis", ".", "get_view_control", "(", ")", ".", "set_up", "(", "[", "0", ",", "-", "1", ",", "0", "]", ")", "\n", "vis", ".", "run", "(", ")", "\n", "\n", "p1", ",", "p2", ",", "p3", "=", "np", ".", "array", "(", "camera_plane", ".", "vertices", ")", "[", ":", "3", "]", "\n", "\n", "# These two vectors are in the plane", "\n", "v1", "=", "p3", "-", "p1", "\n", "v2", "=", "p2", "-", "p1", "\n", "\n", "# the cross product is a vector normal to the plane", "\n", "cp", "=", "np", ".", "cross", "(", "v1", ",", "v2", ")", "\n", "a", ",", "b", ",", "c", "=", "cp", "\n", "\n", "# This evaluates a * x3 + b * y3 + c * z3 which equals d", "\n", "# d = -np.dot(cp, p3)", "\n", "d", "=", "-", "a", "*", "p1", "[", "0", "]", "-", "b", "*", "p1", "[", "1", "]", "-", "c", "*", "p1", "[", "2", "]", "\n", "return", "[", "a", ",", "b", ",", "c", ",", "d", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.refine_depth_with_plane_parameter_mask": [[1014, 1039], ["range", "cv2.cvtColor", "range", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot"], "function", ["None"], ["", "def", "refine_depth_with_plane_parameter_mask", "(", "plane_parameter", ",", "mirror_mask", ",", "depth_to_refine", ",", "f", ")", ":", "\n", "    ", "if", "mirror_mask", "is", "not", "None", "and", "len", "(", "mirror_mask", ".", "shape", ")", ">", "2", ":", "\n", "        ", "mirror_mask", "=", "cv2", ".", "cvtColor", "(", "mirror_mask", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "", "h", ",", "w", "=", "depth_to_refine", ".", "shape", "\n", "correct_colors", "=", "[", "]", "\n", "correct_xyz", "=", "[", "]", "\n", "border_xyz", "=", "[", "]", "\n", "a", ",", "b", ",", "c", ",", "d", "=", "plane_parameter", "\n", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "mirror_mask", "[", "y", "]", "[", "x", "]", ">", "0", ":", "\n", "                ", "n", "=", "np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", "\n", "V0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "d", "/", "c", "]", ")", "\n", "P0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "P1", "=", "np", ".", "array", "(", "[", "(", "x", "-", "w", "/", "2", ")", ",", "(", "y", "-", "h", "/", "2", ")", ",", "f", "]", ")", "\n", "\n", "j", "=", "P0", "-", "V0", "\n", "u", "=", "P1", "-", "P0", "\n", "N", "=", "-", "np", ".", "dot", "(", "n", ",", "j", ")", "\n", "D", "=", "np", ".", "dot", "(", "n", ",", "u", ")", "\n", "sI", "=", "N", "/", "D", "\n", "I", "=", "P0", "+", "sI", "*", "u", "\n", "\n", "depth_to_refine", "[", "y", ",", "x", "]", "=", "I", "[", "2", "]", "\n", "", "", "", "return", "depth_to_refine", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.clamp_pcd_by_bbox": [[1044, 1088], ["numpy.array().tolist", "np.array().tolist.remove", "np.array().tolist.remove", "np.array().tolist.remove", "np.array().tolist.remove", "np.array().tolist.remove", "np.array().tolist.remove", "cv2.imread", "range", "get_paired_point", "get_paired_point", "get_paired_point", "cv2.cvtColor", "range", "numpy.array", "len", "mirror_bbox.get_box_points", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "point_2_regBorder_in_3d", "numpy.linalg.norm", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_paired_point", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_paired_point", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_paired_point", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.point_2_regBorder_in_3d"], ["", "def", "clamp_pcd_by_bbox", "(", "mirror_bbox", ",", "depth_img_path", ",", "f", ",", "mirror_border_mask", ",", "plane_parameter", ",", "expand_range", "=", "100", ",", "\n", "clamp_dis", "=", "100", ")", ":", "\n", "    ", "mirror_bbox_points", "=", "np", ".", "array", "(", "mirror_bbox", ".", "get_box_points", "(", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "p1", "=", "mirror_bbox_points", "[", "0", "]", "\n", "mirror_bbox_points", ".", "remove", "(", "p1", ")", "\n", "mirror_bbox_points", ".", "remove", "(", "get_paired_point", "(", "mirror_bbox_points", ",", "p1", ")", ")", "\n", "p2", "=", "mirror_bbox_points", "[", "0", "]", "\n", "mirror_bbox_points", ".", "remove", "(", "p2", ")", "\n", "mirror_bbox_points", ".", "remove", "(", "get_paired_point", "(", "mirror_bbox_points", ",", "p2", ")", ")", "\n", "p3", "=", "mirror_bbox_points", "[", "0", "]", "\n", "mirror_bbox_points", ".", "remove", "(", "p3", ")", "\n", "mirror_bbox_points", ".", "remove", "(", "get_paired_point", "(", "mirror_bbox_points", ",", "p3", ")", ")", "\n", "p4", "=", "mirror_bbox_points", "[", "0", "]", "\n", "mirror_recrangle", "=", "[", "p1", ",", "p2", ",", "p3", ",", "p4", "]", "\n", "\n", "if", "mirror_border_mask", "is", "not", "None", "and", "len", "(", "mirror_border_mask", ".", "shape", ")", ">", "2", ":", "\n", "        ", "mirror_border_mask", "=", "cv2", ".", "cvtColor", "(", "mirror_border_mask", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "\n", "", "depth_to_refine", "=", "cv2", ".", "imread", "(", "depth_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "h", ",", "w", "=", "depth_to_refine", ".", "shape", "\n", "a", ",", "b", ",", "c", ",", "d", "=", "plane_parameter", "\n", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "mirror_border_mask", "[", "y", "]", "[", "x", "]", ">", "0", ":", "\n", "                ", "ori_point", "=", "[", "(", "x", "-", "w", "/", "2", ")", "*", "(", "depth_to_refine", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "(", "y", "-", "h", "/", "2", ")", "*", "(", "depth_to_refine", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "\n", "depth_to_refine", "[", "y", "]", "[", "x", "]", "]", "\n", "n", "=", "np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", "\n", "V0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "d", "/", "c", "]", ")", "\n", "P0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "P1", "=", "np", ".", "array", "(", "[", "(", "x", "-", "w", "/", "2", ")", ",", "(", "y", "-", "h", "/", "2", ")", ",", "f", "]", ")", "\n", "\n", "j", "=", "P0", "-", "V0", "\n", "u", "=", "P1", "-", "P0", "\n", "N", "=", "-", "np", ".", "dot", "(", "n", ",", "j", ")", "\n", "D", "=", "np", ".", "dot", "(", "n", ",", "u", ")", "\n", "sI", "=", "N", "/", "D", "\n", "I", "=", "P0", "+", "sI", "*", "u", "\n", "expand_point_on_plane", "=", "I", "\n", "if", "point_2_regBorder_in_3d", "(", "expand_point_on_plane", ",", "mirror_recrangle", ")", "<=", "expand_range", ":", "\n", "                    ", "if", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "expand_point_on_plane", ")", "-", "np", ".", "array", "(", "ori_point", "[", "0", "]", ")", ")", ">=", "clamp_dis", ":", "\n", "                        ", "depth_to_refine", "[", "y", ",", "x", "]", "=", "I", "[", "2", "]", "\n", "\n", "", "", "", "", "", "return", "depth_to_refine", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_2D_coor_from_3D": [[1125, 1130], ["points_2d.append"], "function", ["None"], ["", "", "def", "get_2D_coor_from_3D", "(", "points_3d", ",", "f", ",", "w", ",", "h", ")", ":", "\n", "    ", "points_2d", "=", "[", "]", "\n", "for", "point", "in", "points_3d", ":", "\n", "        ", "points_2d", ".", "append", "(", "[", "(", "point", "[", "0", "]", "*", "f", ")", "/", "point", "[", "2", "]", "+", "w", "/", "2", ",", "(", "point", "[", "1", "]", "*", "f", ")", "/", "point", "[", "2", "]", "+", "h", "/", "2", "]", ")", "\n", "", "return", "points_2d", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_triangle_mask": [[1135, 1148], ["PIL.Image.new", "PIL.ImageDraw.Draw().polygon", "numpy.array", "tuple", "tuple", "tuple", "PIL.ImageDraw.Draw"], "function", ["None"], ["", "def", "get_triangle_mask", "(", "points_2d", ",", "width", ",", "height", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        points_2d : 3 points (under 2D coordinate)\n    Output:\n        triangle_mask : binary mask\n    \"\"\"", "\n", "\n", "polygon", "=", "[", "tuple", "(", "points_2d", "[", "0", "]", ")", ",", "tuple", "(", "points_2d", "[", "1", "]", ")", ",", "tuple", "(", "points_2d", "[", "2", "]", ")", "]", "\n", "img", "=", "Image", ".", "new", "(", "'L'", ",", "(", "width", ",", "height", ")", ",", "0", ")", "\n", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "polygon", "(", "polygon", ",", "outline", "=", "1", ",", "fill", "=", "1", ")", "\n", "mask", "=", "np", ".", "array", "(", "img", ")", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.clamp_pcd_by_mask": [[1153, 1180], ["range", "cv2.cvtColor", "range", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.linalg.norm", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "clamp_pcd_by_mask", "(", "depth_to_refine", ",", "f", ",", "clamp_mask", ",", "plane_parameter", ",", "clamp_dis", "=", "100", ")", ":", "\n", "    ", "if", "clamp_mask", "is", "not", "None", "and", "len", "(", "clamp_mask", ".", "shape", ")", ">", "2", ":", "\n", "        ", "clamp_mask", "=", "cv2", ".", "cvtColor", "(", "clamp_mask", ",", "cv2", ".", "COLOR_BGR2GRAY", ")", "\n", "\n", "", "h", ",", "w", "=", "depth_to_refine", ".", "shape", "\n", "a", ",", "b", ",", "c", ",", "d", "=", "plane_parameter", "\n", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "clamp_mask", "[", "y", "]", "[", "x", "]", ">", "0", ":", "\n", "                ", "ori_point", "=", "[", "(", "x", "-", "w", "/", "2", ")", "*", "(", "depth_to_refine", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "(", "y", "-", "h", "/", "2", ")", "*", "(", "depth_to_refine", "[", "y", "]", "[", "x", "]", "/", "f", ")", ",", "\n", "depth_to_refine", "[", "y", "]", "[", "x", "]", "]", "\n", "n", "=", "np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", "\n", "V0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "d", "/", "c", "]", ")", "\n", "P0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "P1", "=", "np", ".", "array", "(", "[", "(", "x", "-", "w", "/", "2", ")", ",", "(", "y", "-", "h", "/", "2", ")", ",", "f", "]", ")", "\n", "\n", "j", "=", "P0", "-", "V0", "\n", "u", "=", "P1", "-", "P0", "\n", "N", "=", "-", "np", ".", "dot", "(", "n", ",", "j", ")", "\n", "D", "=", "np", ".", "dot", "(", "n", ",", "u", ")", "\n", "sI", "=", "N", "/", "D", "\n", "I", "=", "P0", "+", "sI", "*", "u", "\n", "expand_point_on_plane", "=", "I", "\n", "if", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "expand_point_on_plane", ")", "-", "np", ".", "array", "(", "ori_point", "[", "0", "]", ")", ")", ">=", "clamp_dis", ":", "\n", "                    ", "depth_to_refine", "[", "y", ",", "x", "]", "=", "I", "[", "2", "]", "\n", "\n", "", "", "", "", "return", "depth_to_refine", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mirrorPoint_based_on_plane_parameter": [[1185, 1219], ["range", "o3d.geometry.PointCloud", "o3d.utility.Vector3dVector", "o3d.utility.Vector3dVector", "cv2.imread", "range", "numpy.stack", "numpy.stack", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "xyz.append", "numpy.dot", "list", "colors.append", "colors.append"], "function", ["None"], ["", "def", "get_mirrorPoint_based_on_plane_parameter", "(", "f", ",", "plane_parameter", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "mirror_mask", "=", "None", ",", "color", "=", "None", ",", "\n", "color_img_path", "=", "\"\"", ")", ":", "\n", "    ", "import", "open3d", "as", "o3d", "\n", "h", ",", "w", "=", "cv2", ".", "imread", "(", "color_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", ".", "shape", "\n", "a", ",", "b", ",", "c", ",", "d", "=", "plane_parameter", "\n", "\n", "xyz", "=", "[", "]", "\n", "colors", "=", "[", "]", "\n", "\n", "for", "y", "in", "range", "(", "h", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "w", ")", ":", "\n", "            ", "if", "mirror_mask", "[", "y", "]", "[", "x", "]", ">", "0", ":", "\n", "                ", "n", "=", "np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", "\n", "V0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "d", "/", "c", "]", ")", "\n", "P0", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "P1", "=", "np", ".", "array", "(", "[", "(", "x", "-", "w", "/", "2", ")", ",", "(", "y", "-", "h", "/", "2", ")", ",", "f", "]", ")", "\n", "\n", "j", "=", "P0", "-", "V0", "\n", "u", "=", "P1", "-", "P0", "\n", "N", "=", "-", "np", ".", "dot", "(", "n", ",", "j", ")", "\n", "D", "=", "np", ".", "dot", "(", "n", ",", "u", ")", "\n", "sI", "=", "N", "/", "D", "\n", "I", "=", "P0", "+", "sI", "*", "u", "\n", "\n", "xyz", ".", "append", "(", "list", "(", "I", ")", ")", "\n", "if", "color", "is", "None", ":", "\n", "                    ", "colors", ".", "append", "(", "[", "0", ",", "0.9", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "                    ", "colors", ".", "append", "(", "color", ")", "\n", "\n", "", "", "", "", "pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "xyz", ",", "axis", "=", "0", ")", ")", "\n", "pcd", ".", "colors", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "colors", ",", "axis", "=", "0", ")", ")", "\n", "return", "pcd", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.mask_annotation.masks2html.generate_html": [[42, 129], ["os.makedirs", "os.listdir", "range", "os.path.abspath", "os.listdir", "bs4.BeautifulSoup", "range", "os.path.join", "os.path.join", "len", "open", "eval", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.body.div.table.append", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag", "soup.new_tag.append", "bs4.BeautifulSoup.new_tag", "soup.new_tag.append", "soup.new_tag.append", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag", "soup.new_tag.append", "bs4.BeautifulSoup.new_tag", "soup.new_tag.append", "soup.new_tag.append", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag", "soup.new_tag.append", "bs4.BeautifulSoup.new_tag", "soup.new_tag.append", "soup.new_tag.append", "open", "f.write", "len", "os.path.join", "f.readline().strip", "coarse_instance_mask.replace", "one_line_mask_info.append", "len", "str", "f.readline", "os.path.join().replace", "os.path.join().replace", "os.path.join", "os.path.join"], "function", ["None"], ["def", "generate_html", "(", "args_obj", ")", ":", "\n", "    ", "\"\"\"\n    Generate html to show masks; all views for one sample is shown in one line;\n    \"\"\"", "\n", "os", ".", "makedirs", "(", "args_obj", ".", "output", ",", "exist_ok", "=", "True", ")", "\n", "img_ids", "=", "os", ".", "listdir", "(", "args_obj", ".", "data", ")", "\n", "count", "=", "0", "\n", "one_line_mask_info", "=", "[", "]", "\n", "for", "img_id", "in", "img_ids", ":", "\n", "        ", "img_folder_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "args_obj", ".", "data", ",", "img_id", ")", ")", "\n", "masks", "=", "os", ".", "listdir", "(", "img_folder_path", ")", "\n", "if", "len", "(", "masks", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "count", "+=", "(", "len", "(", "masks", ")", "-", "1", ")", "//", "2", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "img_folder_path", ",", "\"labels.txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "labels", "=", "eval", "(", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", ")", "\n", "", "for", "coarse_instance_mask", "in", "masks", ":", "\n", "            ", "if", "coarse_instance_mask", "[", "-", "19", ":", "]", "==", "\"coarse_instance.png\"", ":", "\n", "                ", "detailed_instance_mask", "=", "coarse_instance_mask", ".", "replace", "(", "\"coarse\"", ",", "\"detailed\"", ")", "\n", "coarse_instance_id", "=", "coarse_instance_mask", "[", ":", "-", "20", "]", "\n", "one_line_mask_info", ".", "append", "(", "\n", "(", "img_id", ",", "coarse_instance_id", ",", "detailed_instance_mask", "[", ":", "-", "22", "]", ",", "\n", "os", ".", "path", ".", "join", "(", "img_folder_path", ",", "coarse_instance_mask", ")", ".", "replace", "(", "\"/project/3dlg-hcvc/mirrors/www\"", ",", "\n", "\"/projects/mirrors\"", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "img_folder_path", ",", "detailed_instance_mask", ")", ".", "replace", "(", "\"/project/3dlg-hcvc/mirrors/www\"", ",", "\n", "\"/projects/mirrors\"", ")", ",", "\n", "labels", "[", "coarse_instance_id", "+", "\"_coarse_instance\"", "]", "\n", ")", "\n", ")", "\n", "", "", "", "page_num", "=", "count", "//", "args_obj", ".", "instance_num_per_page", "+", "1", "\n", "\n", "for", "page", "in", "range", "(", "page_num", ")", ":", "\n", "\n", "        ", "soup", "=", "bs4", ".", "BeautifulSoup", "(", "html", ",", "features", "=", "\"html.parser\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "args_obj", ".", "instance_num_per_page", ")", ":", "\n", "            ", "index", "=", "i", "+", "(", "page", "*", "args_obj", ".", "instance_num_per_page", ")", "\n", "if", "index", ">=", "len", "(", "one_line_mask_info", ")", ":", "\n", "                ", "break", "\n", "", "one_line", "=", "one_line_mask_info", "[", "index", "]", "\n", "\n", "new_div", "=", "soup", ".", "new_tag", "(", "\"tr\"", ")", "\n", "new_div", "[", "\"style\"", "]", "=", "\"box-shadow: 0 2px 12px 0 rgb(0 0 0 / 10%); margin-bottom: 10px;\"", "\n", "soup", ".", "body", ".", "div", ".", "table", ".", "append", "(", "new_div", ")", "\n", "\n", "# Append text to one line in HTML", "\n", "id_box", "=", "soup", ".", "new_tag", "(", "\"td\"", ")", "\n", "id_box", "[", "\"style\"", "]", "=", "\"width: 20%; padding: 30px 0\"", "\n", "id_text", "=", "soup", ".", "new_tag", "(", "\"p\"", ")", "\n", "id_text", ".", "string", "=", "one_line", "[", "0", "]", "\n", "id_box", ".", "append", "(", "id_text", ")", "\n", "id_label", "=", "soup", ".", "new_tag", "(", "\"p\"", ")", "\n", "id_label", "[", "\"style\"", "]", "=", "\"font-weight: bold; color: \"", "+", "LABEL_COLOR_MAP", "[", "one_line", "[", "5", "]", "]", "\n", "id_label", ".", "string", "=", "\"Label: \"", "+", "one_line", "[", "5", "]", "\n", "id_box", ".", "append", "(", "id_label", ")", "\n", "new_div", ".", "append", "(", "id_box", ")", "\n", "\n", "# Append coarse instance mask overlay to one line in HTML", "\n", "coarse_mask_box", "=", "soup", ".", "new_tag", "(", "\"td\"", ")", "\n", "coarse_mask_box", "[", "\"style\"", "]", "=", "\"width: 40%; padding: 30px 0\"", "\n", "coarse_mask_img", "=", "soup", ".", "new_tag", "(", "'img'", ",", "src", "=", "one_line", "[", "3", "]", ")", "\n", "coarse_mask_img", "[", "\"style\"", "]", "=", "\"max-width: 600px; max-height: 600px; width: 100%; height: auto; object-fit: contain;\"", "\n", "coarse_mask_box", ".", "append", "(", "coarse_mask_img", ")", "\n", "instance_id", "=", "soup", ".", "new_tag", "(", "\"p\"", ")", "\n", "instance_id", "[", "\"style\"", "]", "=", "\"font-size: 15px;\"", "\n", "instance_id", ".", "string", "=", "one_line", "[", "1", "]", "\n", "coarse_mask_box", ".", "append", "(", "instance_id", ")", "\n", "new_div", ".", "append", "(", "coarse_mask_box", ")", "\n", "\n", "# Append detailed instance mask overlay to one line in HTML", "\n", "detailed_mask_box", "=", "soup", ".", "new_tag", "(", "\"td\"", ")", "\n", "detailed_mask_box", "[", "\"style\"", "]", "=", "\"width: 40%; padding: 30px 0\"", "\n", "detailed_mask_img", "=", "soup", ".", "new_tag", "(", "'img'", ",", "src", "=", "one_line", "[", "4", "]", ")", "\n", "detailed_mask_img", "[", "\"style\"", "]", "=", "\"max-width: 600px; max-height: 600px; width: 100%; height: auto; object-fit: contain;\"", "\n", "detailed_mask_box", ".", "append", "(", "detailed_mask_img", ")", "\n", "instance_id", "=", "soup", ".", "new_tag", "(", "\"p\"", ")", "\n", "instance_id", "[", "\"style\"", "]", "=", "\"margin-top: 5px; font-size: 16px;\"", "\n", "instance_id", ".", "string", "=", "one_line", "[", "2", "]", "\n", "detailed_mask_box", ".", "append", "(", "instance_id", ")", "\n", "new_div", ".", "append", "(", "detailed_mask_box", ")", "\n", "\n", "", "html_path", "=", "os", ".", "path", ".", "join", "(", "args_obj", ".", "output", ",", "\"{}.html\"", ".", "format", "(", "page", ")", ")", "\n", "\n", "with", "open", "(", "html_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "soup", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.mask_annotation.overlays_generator.generate_overlay_masks_and_check": [[15, 67], ["os.path.join", "os.path.join", "tqdm.tqdm", "os.path.join", "os.path.join", "os.path.join", "PIL.Image.open", "os.path.join", "os.path.join", "os.makedirs", "mask_list[].getcolors", "dict", "range", "dict.items", "os.path.join", "PIL.Image.open", "PIL.Image.open", "len", "PIL.Image.open", "dict", "range", "dict.items", "open", "label_file.write", "os.path.exists", "os.path.exists", "os.path.join", "range", "PIL.Image.new", "Image.open.copy", "raw.copy.paste", "raw.copy.save", "os.path.join", "str", "mask_list[].getpixel", "Image.new.putpixel", "os.path.join", "label_error_list.append", "color_dic[].append", "str", "Image.open.getpixel", "key.replace", "str", "str", "key.split", "len"], "function", ["None"], ["def", "generate_overlay_masks_and_check", "(", "args_obj", ",", "raw_filenames", ")", ":", "\n", "    ", "coarse_mask_path", "=", "os", ".", "path", ".", "join", "(", "args_obj", ".", "masks_folder", ",", "COARSE_MASK_PATH", ")", "\n", "detailed_mask_path", "=", "os", ".", "path", ".", "join", "(", "args_obj", ".", "masks_folder", ",", "DETAILED_MASK_PATH", ")", "\n", "semantic_mask_paths", "=", "(", "os", ".", "path", ".", "join", "(", "coarse_mask_path", ",", "SEMANTIC_MASK_PATH", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "detailed_mask_path", ",", "SEMANTIC_MASK_PATH", ")", ")", "\n", "label_error_list", "=", "[", "]", "\n", "for", "file", "in", "tqdm", "(", "raw_filenames", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "args_obj", ".", "output", ",", "file", "[", ":", "-", "4", "]", ")", "\n", "raw", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "args_obj", ".", "raw_folder", ",", "file", ")", ")", "\n", "coarse_instance_mask_path", "=", "os", ".", "path", ".", "join", "(", "coarse_mask_path", ",", "INSTANCE_MASK_PATH", ",", "file", ")", "\n", "detailed_instance_mask_path", "=", "os", ".", "path", ".", "join", "(", "detailed_mask_path", ",", "INSTANCE_MASK_PATH", ",", "file", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "coarse_instance_mask_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "detailed_instance_mask_path", ")", ":", "\n", "            ", "continue", "\n", "", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "mask_list", "=", "(", "Image", ".", "open", "(", "coarse_instance_mask_path", ")", ",", "\n", "Image", ".", "open", "(", "detailed_instance_mask_path", ")", ")", "\n", "width", ",", "height", "=", "raw", ".", "size", "\n", "colors", "=", "mask_list", "[", "0", "]", ".", "getcolors", "(", ")", "\n", "labels", "=", "dict", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "mask_list", ")", ")", ":", "\n", "            ", "semantic_mask", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "semantic_mask_paths", "[", "i", "]", ",", "file", ")", ")", "\n", "color_dic", "=", "dict", "(", ")", "\n", "\n", "for", "color", "in", "colors", ":", "\n", "                ", "if", "color", "[", "1", "]", "!=", "(", "0", ",", "0", ",", "0", ")", ":", "\n", "                    ", "color_dic", "[", "color", "[", "1", "]", "]", "=", "[", "]", "\n", "\n", "", "", "for", "w", "in", "range", "(", "width", ")", ":", "\n", "                ", "for", "h", "in", "range", "(", "height", ")", ":", "\n", "                    ", "tmp_pixel", "=", "mask_list", "[", "i", "]", ".", "getpixel", "(", "(", "w", ",", "h", ")", ")", "\n", "if", "tmp_pixel", "!=", "(", "0", ",", "0", ",", "0", ")", ":", "\n", "                        ", "color_dic", "[", "tmp_pixel", "]", ".", "append", "(", "(", "w", ",", "h", ")", ")", "\n", "\n", "", "", "", "for", "key", ",", "item", "in", "color_dic", ".", "items", "(", ")", ":", "\n", "                ", "tmp_img", "=", "Image", ".", "new", "(", "\"RGBA\"", ",", "(", "width", ",", "height", ")", ")", "\n", "for", "pixel", "in", "item", ":", "\n", "                    ", "tmp_img", ".", "putpixel", "(", "pixel", ",", "(", "key", "[", "0", "]", ",", "key", "[", "1", "]", ",", "key", "[", "2", "]", ",", "args_obj", ".", "alpha", ")", ")", "\n", "", "final", "=", "raw", ".", "copy", "(", ")", "\n", "final", ".", "paste", "(", "tmp_img", ",", "(", "0", ",", "0", ")", ",", "mask", "=", "tmp_img", ")", "\n", "mask_id", "=", "str", "(", "key", "[", "2", "]", ")", "+", "\"_\"", "+", "str", "(", "key", "[", "1", "]", ")", "+", "\"_\"", "+", "str", "(", "key", "[", "0", "]", ")", "+", "FINAL_MASK_FILENAME_SUFFIXES", "[", "i", "]", "\n", "final", ".", "save", "(", "os", ".", "path", ".", "join", "(", "path", ",", "mask_id", ")", ")", "\n", "labels", "[", "mask_id", "[", ":", "-", "4", "]", "]", "=", "LABEL_MAP", "[", "semantic_mask", ".", "getpixel", "(", "item", "[", "len", "(", "item", ")", "//", "2", "]", ")", "]", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"labels.txt\"", ")", ",", "\"w\"", ")", "as", "label_file", ":", "\n", "            ", "label_file", ".", "write", "(", "str", "(", "labels", ")", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "labels", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "[", "-", "15", ":", "]", "==", "\"coarse_instance\"", ":", "\n", "                ", "if", "labels", "[", "key", ".", "replace", "(", "\"coarse\"", ",", "\"detailed\"", ")", "]", "!=", "value", ":", "\n", "                    ", "label_error_list", ".", "append", "(", "file", "[", ":", "-", "4", "]", "+", "\"_\"", ".", "join", "(", "key", ".", "split", "(", "\"_\"", ")", "[", "0", ":", "2", "]", ")", ")", "\n", "", "", "", "", "return", "label_error_list", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.__init__": [[17, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "process_index", "=", "0", ",", "multi_processing", "=", "False", ",", "overwrite", "=", "True", ")", ":", "\n", "        ", "self", ".", "process_index", "=", "process_index", "\n", "self", ".", "multi_processing", "=", "multi_processing", "\n", "self", ".", "overwrite", "=", "overwrite", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_list_to_process": [[22, 28], ["full_list.sort"], "methods", ["None"], ["", "def", "get_list_to_process", "(", "self", ",", "full_list", ")", ":", "\n", "        ", "full_list", ".", "sort", "(", ")", "\n", "if", "self", ".", "multi_processing", ":", "\n", "            ", "return", "full_list", "[", "self", ".", "process_index", ":", "self", ".", "process_index", "+", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "full_list", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.set_show_plane": [[29, 35], ["None"], "methods", ["None"], ["", "", "def", "set_show_plane", "(", "self", ",", "show_plane", ")", ":", "\n", "        ", "\"\"\"\n        For plane annotation: show the mesh plane during annotation or not\n        Suggest to show the mesh plane if computer allows\n        \"\"\"", "\n", "self", ".", "show_plane", "=", "show_plane", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.gen_color_mask_from_int_mask": [[36, 57], ["random.seed", "range", "plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "random.randint", "bgr_color_list.append", "read_txt", "len", "item.strip().split", "os.makedirs", "cv2.imread", "numpy.zeros", "numpy.unique", "cv2.imwrite", "print", "rand", "rand", "rand", "item.strip().split", "item.strip", "os.path.split", "item.strip", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt"], ["", "def", "gen_color_mask_from_int_mask", "(", "self", ",", "int_mask_color_mask_txt", ")", ":", "\n", "        ", "random", ".", "seed", "(", "5", ")", "\n", "rand", "=", "lambda", ":", "random", ".", "randint", "(", "100", ",", "255", ")", "\n", "bgr_color_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "            ", "bgr_color_list", ".", "append", "(", "[", "rand", "(", ")", ",", "rand", "(", ")", ",", "rand", "(", ")", "]", ")", "\n", "", "process_list", "=", "self", ".", "get_list_to_process", "(", "read_txt", "(", "int_mask_color_mask_txt", ")", ")", "\n", "for", "item", "in", "process_list", ":", "\n", "            ", "if", "len", "(", "item", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "==", "2", ":", "\n", "                ", "int_mask_path", ",", "color_mask_output_path", "=", "item", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "color_mask_output_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "int_mask", "=", "cv2", ".", "imread", "(", "int_mask_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "height", ",", "width", "=", "int_mask", ".", "shape", "\n", "color_mask", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ",", "3", ")", ")", "\n", "for", "id", "in", "np", ".", "unique", "(", "int_mask", ")", ":", "\n", "                    ", "if", "id", "==", "0", ":", "\n", "                        ", "continue", "# background", "\n", "", "color_mask", "[", "np", ".", "where", "(", "int_mask", "==", "id", ")", "]", "=", "bgr_color_list", "[", "\n", "id", "-", "1", "]", "# instance id in int_mask start from 1", "\n", "", "cv2", ".", "imwrite", "(", "color_mask_output_path", ",", "color_mask", ")", "\n", "print", "(", "\"RGB instance mask saved to :\"", ",", "color_mask_output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.gen_int_mask_color_mask": [[58, 93], ["random.seed", "range", "read_txt", "dict", "plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "COCO", "range", "random.randint", "bgr_color_list.append", "len", "COCO.getAnnIds", "COCO.loadAnns", "os.makedirs", "os.makedirs", "numpy.zeros", "numpy.zeros", "enumerate", "cv2.imwrite", "cv2.imwrite", "len", "item.strip().split", "COCO.loadImgs", "COCO.annToMask", "COCO.annToMask.astype", "rand", "rand", "rand", "item.strip().split", "read_json", "os.path.split", "os.path.split", "item.strip", "numpy.where", "item.strip"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.getAnnIds", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadAnns", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadImgs", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_json"], ["", "", "", "def", "gen_int_mask_color_mask", "(", "self", ",", "coco_json", ",", "filename_int_mask_color_mask_txt", ",", "coco_filename_tag", "=", "\"file_name\"", ")", ":", "\n", "        ", "from", "pycocotools", ".", "coco", "import", "COCO", "\n", "random", ".", "seed", "(", "5", ")", "\n", "rand", "=", "lambda", ":", "random", ".", "randint", "(", "100", ",", "255", ")", "\n", "bgr_color_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "100", ")", ":", "\n", "            ", "bgr_color_list", ".", "append", "(", "[", "rand", "(", ")", ",", "rand", "(", ")", ",", "rand", "(", ")", "]", ")", "\n", "# Get filename int_mask_output_path, color_mask_output_path dict()", "\n", "", "filename_int_mask_color_mask_list", "=", "read_txt", "(", "filename_int_mask_color_mask_txt", ")", "\n", "color_output_paths", "=", "dict", "(", ")", "\n", "for", "item", "in", "filename_int_mask_color_mask_list", ":", "\n", "            ", "if", "len", "(", "item", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "==", "3", ":", "\n", "                ", "color_name", ",", "int_mask_output_path", ",", "color_mask_output_path", "=", "item", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "color_output_paths", "[", "color_name", "]", "=", "[", "int_mask_output_path", ",", "color_mask_output_path", "]", "\n", "\n", "", "", "to_gen_list", "=", "[", "i", "[", "coco_filename_tag", "]", "for", "i", "in", "read_json", "(", "coco_json", ")", "[", "\"images\"", "]", "]", "\n", "to_gen_list", "=", "self", ".", "get_list_to_process", "(", "to_gen_list", ")", "\n", "\n", "coco", "=", "COCO", "(", "coco_json", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "coco", ".", "imgs", ")", ")", ":", "\n", "            ", "img_id", "=", "index", "+", "1", "# coco image id start from 1", "\n", "ann_ids", "=", "coco", ".", "getAnnIds", "(", "imgIds", "=", "img_id", ")", "\n", "anns", "=", "coco", ".", "loadAnns", "(", "ann_ids", ")", "\n", "img_info", "=", "coco", ".", "loadImgs", "(", "img_id", ")", "[", "0", "]", "\n", "int_mask_output_path", ",", "color_mask_output_path", "=", "color_output_paths", "[", "img_info", "[", "coco_filename_tag", "]", "]", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "int_mask_output_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "color_mask_output_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "int_mask", "=", "np", ".", "zeros", "(", "(", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ")", ")", "\n", "color_mask", "=", "np", ".", "zeros", "(", "(", "img_info", "[", "'height'", "]", ",", "img_info", "[", "'width'", "]", ",", "3", ")", ")", "\n", "for", "i", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "int_mask", "=", "coco", ".", "annToMask", "(", "ann", ")", "\n", "int_mask", "+=", "(", "int_mask", "*", "(", "i", "+", "1", ")", ")", "# instance id in int_mask start from 1", "\n", "color_mask", "[", "np", ".", "where", "(", "int_mask", "!=", "0", ")", "]", "=", "bgr_color_list", "[", "i", "]", "\n", "", "cv2", ".", "imwrite", "(", "int_mask_output_path", ",", "int_mask", ".", "astype", "(", "np", ".", "uint16", ")", ")", "\n", "cv2", ".", "imwrite", "(", "color_mask_output_path", ",", "color_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.update_plane_info_from_depth": [[94, 115], ["plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "read_txt", "len", "item.strip().split", "plane_annotation_tool.PlaneAnnotationTool.get_and_check_focal_length", "cv2.imread", "numpy.unique", "os.makedirs", "save_json", "item.strip().split", "get_points_in_mask", "get_mirror_parameter_from_xyzs_by_ransac", "dict", "list", "list", "int", "img_info.append", "item.strip", "unit_vector", "os.path.split", "item.strip", "list"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_and_check_focal_length", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_json", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_points_in_mask", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mirror_parameter_from_xyzs_by_ransac", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.unit_vector"], ["", "", "def", "update_plane_info_from_depth", "(", "self", ",", "mask_depth_jsonpath_txt", ")", ":", "\n", "        ", "process_list", "=", "self", ".", "get_list_to_process", "(", "read_txt", "(", "mask_depth_jsonpath_txt", ")", ")", "\n", "for", "item", "in", "process_list", ":", "\n", "            ", "if", "len", "(", "item", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "==", "4", ":", "\n", "                ", "mask_path", ",", "depth_path", ",", "json_save_path", ",", "f", "=", "item", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "f", "=", "self", ".", "get_and_check_focal_length", "(", "f", ",", "item", ")", "\n", "mask", "=", "cv2", ".", "imread", "(", "mask_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "img_info", "=", "[", "]", "\n", "for", "instance_index", "in", "np", ".", "unique", "(", "mask", ")", ":", "\n", "                    ", "if", "instance_index", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "binary_instance_mask", "=", "(", "mask", "==", "instance_index", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mirror_points", "=", "(", "get_points_in_mask", "(", "f", ",", "depth_path", ",", "mirror_mask", "=", "binary_instance_mask", ")", ")", "\n", "plane_parameter", "=", "get_mirror_parameter_from_xyzs_by_ransac", "(", "mirror_points", ")", "\n", "one_info", "=", "dict", "(", ")", "\n", "one_info", "[", "\"plane\"", "]", "=", "list", "(", "plane_parameter", ")", "\n", "one_info", "[", "\"normal\"", "]", "=", "list", "(", "unit_vector", "(", "list", "(", "plane_parameter", "[", ":", "-", "1", "]", ")", ")", ")", "\n", "one_info", "[", "\"mask_id\"", "]", "=", "int", "(", "instance_index", ")", "\n", "img_info", ".", "append", "(", "one_info", ")", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "json_save_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "save_json", "(", "json_save_path", ",", "img_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.anno_env_setup": [[116, 183], ["plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "os.makedirs", "os.makedirs", "os.makedirs", "cv2.imread", "numpy.unique", "read_txt", "os.path.join", "visualize_mask_one_image", "os.path.join", "matplotlib.imsave", "print", "refine_pcd_by_mirror_border", "update_plane_parameter_json", "print", "o3d.io.write_point_cloud", "print", "len", "item.strip().split", "plane_annotation_tool.PlaneAnnotationTool.get_and_check_focal_length", "plane_annotation_tool.PlaneAnnotationTool.anno_env_setup.gen_pcd"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.visualize_mask_one_image", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.refine_pcd_by_mirror_border", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.update_plane_parameter_json", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_and_check_focal_length"], ["", "", "", "def", "anno_env_setup", "(", "self", ",", "input_txt", ",", "border_width", "=", "25", ")", ":", "\n", "        ", "\"\"\"\n        Generate pcd for annotation and initlize plane parameter using ransac\n        \n        Output:\n            pointclouds : .ply file (per instance).\n            mirror plane information : .json file (per image); save mirror instances' parameter. \n            color image with a mirror border mask : .png file (per instance).\n        \"\"\"", "\n", "\n", "def", "gen_pcd", "(", "color_img_path", ",", "depth_img_path", ",", "mask_img_path", ",", "pcd_output_folder", ",", "plane_parameter_output_path", ",", "\n", "mirror_border_vis_output_folder", ",", "f", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "mirror_border_vis_output_folder", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "pcd_output_folder", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "plane_parameter_output_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "int_mask", "=", "cv2", ".", "imread", "(", "mask_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "for", "instance_index", "in", "np", ".", "unique", "(", "int_mask", ")", ":", "\n", "                ", "if", "instance_index", "==", "0", ":", "# background", "\n", "                    ", "continue", "\n", "", "file_save_name", "=", "os", ".", "path", ".", "split", "(", "color_img_path", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\"_idx_\"", "+", "str", "(", "instance_index", ")", "\n", "pcd_save_path", "=", "os", ".", "path", ".", "join", "(", "pcd_output_folder", ",", "\"{}.ply\"", ".", "format", "(", "file_save_name", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pcd_save_path", ")", "and", "not", "self", ".", "overwrite", ":", "\n", "                    ", "print", "(", "pcd_save_path", ",", "\"exist! continue\"", ")", "\n", "continue", "\n", "", "else", ":", "\n", "                    ", "if", "os", ".", "path", ".", "exists", "(", "pcd_save_path", ")", ":", "\n", "                        ", "print", "(", "\"begin to overwrite {}\"", ".", "format", "(", "pcd_save_path", ")", ")", "\n", "", "else", ":", "\n", "                        ", "print", "(", "\"generating pcd {}\"", ".", "format", "(", "pcd_save_path", ")", ")", "\n", "", "", "binary_instance_mask", "=", "(", "int_mask", "==", "instance_index", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mirror_border_mask", "=", "cv2", ".", "dilate", "(", "binary_instance_mask", ",", "cv2", ".", "getStructuringElement", "(", "cv2", ".", "MORPH_ELLIPSE", ",", "(", "\n", "border_width", ",", "border_width", ")", ")", ")", "-", "binary_instance_mask", "\n", "\n", "#  Save image with masked mirror border", "\n", "border_mask_vis_image", "=", "visualize_mask_one_image", "(", "color_img_path", ",", "mirror_border_mask", ")", "\n", "border_mask_vis_output_path", "=", "os", ".", "path", ".", "join", "(", "mirror_border_vis_output_folder", ",", "\n", "\"{}.jpg\"", ".", "format", "(", "file_save_name", ")", ")", "\n", "plt", ".", "imsave", "(", "border_mask_vis_output_path", ",", "border_mask_vis_image", ")", "\n", "print", "(", "\"border_mask_vis_output_path : \"", ",", "os", ".", "path", ".", "abspath", "(", "border_mask_vis_output_path", ")", ")", "\n", "\n", "#  Get pcd with refined mirror depth by ransac ", "\n", "pcd", ",", "plane_parameter", "=", "refine_pcd_by_mirror_border", "(", "binary_instance_mask", ",", "mirror_border_mask", ",", "\n", "depth_img_path", ",", "color_img_path", ",", "f", ")", "\n", "update_plane_parameter_json", "(", "plane_parameter", ",", "plane_parameter_output_path", ",", "instance_index", ")", "\n", "print", "(", "\"plane_parameter saved to :\"", ",", "os", ".", "path", ".", "abspath", "(", "plane_parameter_output_path", ")", ")", "\n", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "pcd_save_path", ",", "pcd", ")", "\n", "print", "(", "\"point cloud saved  to :\"", ",", "os", ".", "path", ".", "abspath", "(", "pcd_save_path", ")", ")", "\n", "\n", "", "", "import", "open3d", "as", "o3d", "\n", "process_list", "=", "self", ".", "get_list_to_process", "(", "read_txt", "(", "input_txt", ")", ")", "\n", "for", "item", "in", "process_list", ":", "\n", "            ", "if", "len", "(", "item", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "==", "7", ":", "\n", "                ", "color_img_path", ",", "depth_img_path", ",", "mask_img_path", ",", "pcd_output_folder", ",", "plane_parameter_output_path", ",", "mirror_border_vis_output_folder", ",", "f", "=", "item", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "f", "=", "self", ".", "get_and_check_focal_length", "(", "f", ",", "item", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "color_img_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "depth_img_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "\n", "mask_img_path", ")", ":", "\n", "                    ", "print", "(", "\"invalid line : \"", ",", "item", ")", "\n", "print", "(", "\"input txt format: [input color image path] [input depth image path] [input integer mask \"", "\n", "\"path] [pointcloud output folder(pointcloud's name will be color image name + instance id)] \"", "\n", "\"[plane parameter JSON output path] [folder to save color image with mirror border mask] [\"", "\n", "\"focal length of this sample]\"", ")", "\n", "\n", "", "gen_pcd", "(", "color_img_path", ",", "depth_img_path", ",", "mask_img_path", ",", "pcd_output_folder", ",", "plane_parameter_output_path", ",", "\n", "mirror_border_vis_output_folder", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.save_progress": [[184, 190], ["os.path.join", "os.path.join", "save_txt", "save_txt", "set", "set"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_txt"], ["", "", "", "def", "save_progress", "(", "self", ",", "annotation_progress_save_folder", ")", ":", "\n", "        ", "\"\"\"Save annotation progress\"\"\"", "\n", "error_txt_path", "=", "os", ".", "path", ".", "join", "(", "annotation_progress_save_folder", ",", "\"error_pcd_list.txt\"", ")", "\n", "correct_txt_path", "=", "os", ".", "path", ".", "join", "(", "annotation_progress_save_folder", ",", "\"correct_pcd_list.txt\"", ")", "\n", "save_txt", "(", "error_txt_path", ",", "set", "(", "[", "item", "for", "item", "in", "self", ".", "error_pcd_list", "]", ")", ")", "\n", "save_txt", "(", "correct_txt_path", ",", "set", "(", "[", "item", "for", "item", "in", "self", ".", "correct_pcd_list", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_progress": [[191, 238], ["read_txt", "plane_annotation_tool.PlaneAnnotationTool.anno_info_list.sort", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "enumerate", "len", "read_txt", "read_txt", "plane_annotation_tool.PlaneAnnotationTool.error_sample.append", "len", "item.strip().split", "item.strip().split", "print", "exit", "plane_annotation_tool.PlaneAnnotationTool.anno_info_list.append", "item.split", "item.strip", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "item.strip", "int"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt"], ["", "def", "get_progress", "(", "self", ",", "input_txt", ",", "annotation_progress_save_folder", ")", ":", "\n", "        ", "\"\"\"Get annotation progress\"\"\"", "\n", "self", ".", "anno_info_list", "=", "[", "]", "\n", "self", ".", "to_anno_sample_index", "=", "0", "\n", "process_list", "=", "read_txt", "(", "input_txt", ")", "\n", "for", "item", "in", "process_list", ":", "\n", "            ", "if", "len", "(", "item", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "==", "7", ":", "\n", "                ", "color_img_path", ",", "depth_img_path", ",", "mask_path", ",", "pcd_path", ",", "plane_parameter_output_path", ",", "mirror_border_vis_path", ",", "f", "=", "item", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pcd_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "mirror_border_vis_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "\n", "color_img_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "depth_img_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "mask_path", ")", ":", "\n", "                    ", "print", "(", "\"invalid line : \"", ",", "item", ")", "\n", "exit", "(", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "anno_info_list", ".", "append", "(", "\n", "[", "color_img_path", ",", "depth_img_path", ",", "mask_path", ",", "pcd_path", ",", "plane_parameter_output_path", ",", "\n", "mirror_border_vis_path", ",", "int", "(", "f", ")", "]", ")", "\n", "\n", "", "", "", "self", ".", "anno_info_list", ".", "sort", "(", ")", "\n", "error_txt", "=", "os", ".", "path", ".", "join", "(", "annotation_progress_save_folder", ",", "\"error_pcd_list.txt\"", ")", "\n", "correct_txt", "=", "os", ".", "path", ".", "join", "(", "annotation_progress_save_folder", ",", "\"correct_pcd_list.txt\"", ")", "\n", "\n", "# get error list", "\n", "if", "os", ".", "path", ".", "exists", "(", "error_txt", ")", ":", "\n", "            ", "self", ".", "error_pcd_list", "=", "read_txt", "(", "error_txt", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "error_pcd_list", "=", "[", "]", "\n", "\n", "# get correct list", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "correct_txt", ")", ":", "\n", "            ", "self", ".", "correct_pcd_list", "=", "read_txt", "(", "correct_txt", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "correct_pcd_list", "=", "[", "]", "\n", "\n", "# get error list (regardless of instance id)", "\n", "", "self", ".", "error_sample", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "error_pcd_list", ":", "\n", "            ", "self", ".", "error_sample", ".", "append", "(", "item", ".", "split", "(", "\"_idx_\"", ")", "[", "0", "]", ")", "\n", "\n", "# get annotation start position", "\n", "", "for", "index", ",", "info", "in", "enumerate", "(", "self", ".", "anno_info_list", ")", ":", "\n", "            ", "one_path", "=", "info", "[", "3", "]", "# get pcd path", "\n", "if", "one_path", "not", "in", "self", ".", "correct_pcd_list", "and", "one_path", "not", "in", "self", ".", "error_pcd_list", ":", "\n", "                ", "self", ".", "to_anno_sample_index", "=", "index", "\n", "return", "\n", "", "", "self", ".", "to_anno_sample_index", "=", "len", "(", "self", ".", "anno_info_list", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.anno_plane_update_imgInfo": [[239, 416], ["warnings.filterwarnings", "os.makedirs", "plane_annotation_tool.PlaneAnnotationTool.get_progress", "time.time", "print", "o3d.io.read_point_cloud", "int", "print", "ToolOption", "ToolOption.add_option", "ToolOption.add_option", "ToolOption.add_option", "ToolOption.add_option", "ToolOption.add_option", "ToolOption.add_option", "ToolOption.add_option", "ToolOption.print_option", "input", "len", "print", "exit", "current_pcd_path.split", "plane_annotation_tool.PlaneAnnotationTool.error_pcd_list.append", "plane_annotation_tool.PlaneAnnotationTool.save_progress", "plane_annotation_tool.PlaneAnnotationTool.get_progress", "print", "o3d.visualization.draw_geometries", "ToolOption.is_input_key_valid", "print", "plane_annotation_tool.PlaneAnnotationTool.correct_pcd_list.append", "plane_annotation_tool.PlaneAnnotationTool.save_progress", "plane_annotation_tool.PlaneAnnotationTool.get_progress", "[].split", "read_plane_json", "get_points_in_mask", "o3d.geometry.PointCloud", "o3d.utility.Vector3dVector", "o3d.geometry.OrientedBoundingBox.create_from_points", "get_mirror_init_plane_from_mirrorbbox", "o3d.visualization.draw_geometries", "plane_annotation_tool.PlaneAnnotationTool.error_pcd_list.remove", "plane_annotation_tool.PlaneAnnotationTool.error_pcd_list.append", "plane_annotation_tool.PlaneAnnotationTool.save_progress", "plane_annotation_tool.PlaneAnnotationTool.get_progress", "numpy.stack", "o3d.utility.Vector3dVector", "print", "o3d.visualization.draw_geometries", "plane_annotation_tool.PlaneAnnotationTool.correct_pcd_list.remove", "numpy.stack", "print", "plane_annotation_tool.PlaneAnnotationTool.save_progress", "plane_annotation_tool.PlaneAnnotationTool.get_progress", "print", "print", "exit", "current_pcd_path.split", "cv2.imread", "len", "time.time", "int", "print", "len", "int", "print", "get_mirrorPoint_based_on_plane_parameter", "input.split", "len", "ToolOption", "ToolOption.add_option", "ToolOption.add_option", "ToolOption.add_option", "ToolOption.print_option", "input", "input.split", "numpy.max", "numpy.min", "print", "update_plane_parameter_json", "plane_annotation_tool.PlaneAnnotationTool.correct_pcd_list.append", "plane_annotation_tool.PlaneAnnotationTool.save_progress", "plane_annotation_tool.PlaneAnnotationTool.get_progress", "len", "cv2.imread", "get_picked_points", "get_parameter_from_plane_adjustment", "get_mirrorPoint_based_on_plane_parameter", "o3d.visualization.draw_geometries", "numpy.array", "numpy.array", "get_mirror_init_plane_from_3points", "numpy.mean", "get_parameter_from_plane_adjustment", "get_mirrorPoint_based_on_plane_parameter", "o3d.visualization.draw_geometries", "numpy.array", "numpy.array", "numpy.array", "get_mirror_init_plane_from_3points"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_progress", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.print_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.save_progress", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_progress", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.is_input_key_valid", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.save_progress", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_progress", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_plane_json", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_points_in_mask", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mirror_init_plane_from_mirrorbbox", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.save_progress", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_progress", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.save_progress", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_progress", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mirrorPoint_based_on_plane_parameter", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.add_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.ToolOption.print_option", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.update_plane_parameter_json", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.save_progress", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_progress", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_picked_points", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_parameter_from_plane_adjustment", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mirrorPoint_based_on_plane_parameter", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mirror_init_plane_from_3points", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_parameter_from_plane_adjustment", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mirrorPoint_based_on_plane_parameter", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mirror_init_plane_from_3points"], ["", "def", "anno_plane_update_imgInfo", "(", "self", ",", "annotation_progress_save_folder", ",", "input_txt", ")", ":", "\n", "        ", "\"\"\"\n        Plane annotation \n\n        Requirement : open3d 0.10.0 +\n        \"\"\"", "\n", "import", "open3d", "as", "o3d", "\n", "import", "warnings", "\n", "warnings", ".", "filterwarnings", "(", "\"ignore\"", ")", "\n", "os", ".", "makedirs", "(", "annotation_progress_save_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "self", ".", "get_progress", "(", "input_txt", ",", "annotation_progress_save_folder", ")", "\n", "annotation_start_index", "=", "self", ".", "to_anno_sample_index", "# self.to_anno_sample_index start from 0", "\n", "manual_adjust_num", "=", "0", "# count statistic", "\n", "annotation_start_time", "=", "time", ".", "time", "(", ")", "\n", "while", "1", ":", "\n", "            ", "if", "self", ".", "to_anno_sample_index", "==", "len", "(", "self", ".", "anno_info_list", ")", ":", "\n", "                ", "print", "(", "\"annotation finished ! XD\"", ")", "\n", "exit", "(", "1", ")", "\n", "", "color_img_path", ",", "depth_img_path", ",", "mask_path", ",", "current_pcd_path", ",", "plane_parameter_output_path", ",", "mirror_border_vis_path", ",", "f", "=", "self", ".", "anno_info_list", "[", "self", ".", "to_anno_sample_index", "]", "\n", "current_pcd_id", "=", "current_pcd_path", ".", "split", "(", "\"_idx_\"", ")", "[", "0", "]", "\n", "mirror_plane", "=", "[", "]", "\n", "\n", "# If one instance in the sample is negative; then this sample is invalid", "\n", "if", "current_pcd_id", "in", "self", ".", "error_sample", ":", "\n", "                ", "self", ".", "error_pcd_list", ".", "append", "(", "current_pcd_path", ")", "\n", "self", ".", "save_progress", "(", "annotation_progress_save_folder", ")", "\n", "self", ".", "get_progress", "(", "input_txt", ",", "annotation_progress_save_folder", ")", "\n", "print", "(", "\"[AUTO] sample index {} path {} is invalid\"", ".", "format", "(", "self", ".", "to_anno_sample_index", ",", "current_pcd_path", ")", ")", "\n", "continue", "\n", "\n", "# print the current annotation tag for the sample", "\n", "", "current_sample_status", "=", "\"N/A\"", "\n", "if", "current_pcd_path", "in", "self", ".", "correct_pcd_list", ":", "\n", "                ", "current_sample_status", "=", "\"correct\"", "\n", "", "elif", "current_pcd_path", "in", "self", ".", "error_pcd_list", ":", "\n", "                ", "current_sample_status", "=", "\"error\"", "\n", "", "print", "(", "\"###################### sample status {} ######################\"", ".", "format", "(", "current_sample_status", ")", ")", "\n", "\n", "# get the pcd for annotation", "\n", "pcd", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "current_pcd_path", ")", "\n", "instance_id", "=", "int", "(", "current_pcd_path", ".", "split", "(", "\"_idx_\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "plane_parameter", "=", "read_plane_json", "(", "plane_parameter_output_path", ")", "[", "instance_id", "]", "[", "\"plane_parameter\"", "]", "\n", "print", "(", "\"sample index {} mirror to annotate {}\"", ".", "format", "(", "self", ".", "to_anno_sample_index", ",", "mirror_border_vis_path", ")", ")", "\n", "\n", "# show the point cloud and mesh plane (optional) in the user interface", "\n", "if", "self", ".", "show_plane", ":", "\n", "                ", "try", ":", "\n", "                    ", "instance_mask", "=", "(", "cv2", ".", "imread", "(", "mask_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "==", "instance_id", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mirror_points", "=", "get_points_in_mask", "(", "f", "=", "self", ".", "f", ",", "depth_img_path", "=", "depth_img_path", ",", "\n", "color_img_path", "=", "color_img_path", ",", "mirror_mask", "=", "instance_mask", ")", "\n", "mirror_pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "mirror_pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "mirror_points", ",", "axis", "=", "0", ")", ")", "\n", "mirror_bbox", "=", "o3d", ".", "geometry", ".", "OrientedBoundingBox", ".", "create_from_points", "(", "\n", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "mirror_points", ",", "axis", "=", "0", ")", ")", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "\"warning : can not generate mesh plane\"", ")", "\n", "", "", "if", "self", ".", "show_plane", ":", "\n", "                ", "try", ":", "\n", "                    ", "mirror_plane", "=", "get_mirror_init_plane_from_mirrorbbox", "(", "plane_parameter", ",", "mirror_bbox", ")", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "pcd", ",", "mirror_plane", "]", ")", "\n", "", "except", ":", "\n", "                    ", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "pcd", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "pcd", "]", ")", "\n", "\n", "", "option_list", "=", "ToolOption", "(", ")", "\n", "option_list", ".", "add_option", "(", "\"t\"", ",", "\"TRUE : initial plane parameter is correct\"", ")", "\n", "option_list", ".", "add_option", "(", "\"w\"", ",", "\"WASTE : sample have error, can not be used (e.g. point cloud too noisy)\"", ")", "\n", "option_list", ".", "add_option", "(", "\"back n\"", ",", "\"BACK : return n times (e.g. back 3 : give up the recent 3 annotated \"", "\n", "\"sample and go back)\"", ")", "\n", "option_list", ".", "add_option", "(", "\"goto n\"", ",", "\"GOTO : goto the n th image (e.g. goto 3 : go to the third image\"", ")", "\n", "option_list", ".", "add_option", "(", "\"n\"", ",", "\"NEXT : goto next image without annotation\"", ")", "\n", "option_list", ".", "add_option", "(", "\"a\"", ",", "\"ADJUST: adjust one sample repeatedly\"", ")", "\n", "option_list", ".", "add_option", "(", "\"exit\"", ",", "\"EXIT : save and exit\"", ")", "\n", "option_list", ".", "print_option", "(", ")", "\n", "input_option", "=", "input", "(", ")", "\n", "\n", "if", "not", "option_list", ".", "is_input_key_valid", "(", "input_option", ")", ":", "\n", "                ", "print", "(", "\"invalid input, please input again :D\"", ")", "\n", "continue", "\n", "\n", "", "if", "input_option", "==", "\"t\"", ":", "\n", "                ", "if", "current_pcd_path", "in", "self", ".", "error_pcd_list", ":", "\n", "                    ", "self", ".", "error_pcd_list", ".", "remove", "(", "current_pcd_path", ")", "\n", "", "self", ".", "correct_pcd_list", ".", "append", "(", "current_pcd_path", ")", "\n", "self", ".", "save_progress", "(", "annotation_progress_save_folder", ")", "\n", "self", ".", "get_progress", "(", "input_txt", ",", "annotation_progress_save_folder", ")", "\n", "\n", "", "elif", "input_option", "==", "\"w\"", ":", "\n", "                ", "if", "current_pcd_path", "in", "self", ".", "correct_pcd_list", ":", "\n", "                    ", "self", ".", "correct_pcd_list", ".", "remove", "(", "current_pcd_path", ")", "\n", "", "self", ".", "error_pcd_list", ".", "append", "(", "current_pcd_path", ")", "\n", "self", ".", "save_progress", "(", "annotation_progress_save_folder", ")", "\n", "self", ".", "get_progress", "(", "input_txt", ",", "annotation_progress_save_folder", ")", "\n", "", "elif", "input_option", "==", "\"n\"", ":", "\n", "                ", "if", "current_sample_status", "==", "\"N/A\"", ":", "\n", "                    ", "print", "(", "\"please annotate current sample :-)\"", ")", "\n", "continue", "\n", "", "self", ".", "to_anno_sample_index", "+=", "1", "\n", "", "elif", "input_option", "==", "\"exit\"", ":", "\n", "                ", "self", ".", "save_progress", "(", "annotation_progress_save_folder", ")", "\n", "self", ".", "get_progress", "(", "input_txt", ",", "annotation_progress_save_folder", ")", "\n", "print", "(", "\"current progress {} / {}\"", ".", "format", "(", "self", ".", "to_anno_sample_index", ",", "len", "(", "self", ".", "anno_info_list", ")", ")", ")", "\n", "refer_speed", "=", "(", "time", ".", "time", "(", ")", "-", "annotation_start_time", ")", "/", "(", "\n", "self", ".", "to_anno_sample_index", "-", "annotation_start_index", ")", "\n", "left_h", "=", "(", "(", "len", "(", "self", ".", "anno_info_list", ")", "-", "self", ".", "to_anno_sample_index", ")", "*", "refer_speed", ")", "/", "3600", "\n", "manual_percentage", "=", "(", "manual_adjust_num", "/", "(", "self", ".", "to_anno_sample_index", "-", "annotation_start_index", ")", ")", "*", "100", "\n", "print", "(", "\"Reference annotation speed {:.2f} s/sample; \"", "\n", "\"Estimate remaining time {:.1f} h; manual adjust {:.2f}%\"", "\n", ".", "format", "(", "refer_speed", ",", "left_h", ",", "manual_percentage", ")", ")", "\n", "exit", "(", "1", ")", "\n", "", "elif", "\"back\"", "in", "input_option", ":", "\n", "                ", "n", "=", "int", "(", "input_option", ".", "split", "(", ")", "[", "1", "]", ")", "-", "1", "\n", "if", "self", ".", "to_anno_sample_index", "-", "n", "<", "0", ":", "\n", "                    ", "print", "(", "\"at most return {} times\"", ".", "format", "(", "self", ".", "to_anno_sample_index", "+", "1", ")", ")", "\n", "continue", "\n", "", "self", ".", "to_anno_sample_index", "-=", "n", "\n", "", "elif", "\"goto\"", "in", "input_option", ":", "\n", "                ", "n", "=", "int", "(", "input_option", ".", "split", "(", ")", "[", "1", "]", ")", "-", "1", "\n", "if", "n", ">", "len", "(", "self", ".", "anno_info_list", ")", "-", "1", ":", "\n", "                    ", "print", "(", "\"you can go to 0 ~ {}\"", ".", "format", "(", "len", "(", "self", ".", "anno_info_list", ")", "-", "1", ")", ")", "\n", "continue", "\n", "", "self", ".", "to_anno_sample_index", "=", "n", "\n", "", "elif", "input_option", "==", "\"a\"", ":", "\n", "                ", "instance_mask", "=", "(", "cv2", ".", "imread", "(", "mask_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "==", "instance_id", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mirror_pcd", "=", "get_mirrorPoint_based_on_plane_parameter", "(", "f", ",", "plane_parameter", "=", "plane_parameter", ",", "\n", "mirror_mask", "=", "instance_mask", ",", "\n", "color_img_path", "=", "color_img_path", ",", "color", "=", "[", "1", ",", "1", ",", "0", "]", ")", "\n", "init_step_size", "=", "(", "(", "np", ".", "max", "(", "np", ".", "array", "(", "pcd", ".", "points", ")", "[", ":", ",", "0", "]", ")", ")", "-", "(", "np", ".", "min", "(", "np", ".", "array", "(", "pcd", ".", "points", ")", "[", ":", ",", "0", "]", ")", ")", ")", "/", "300", "\n", "while", "1", ":", "\n", "                    ", "min_adjust_option_list", "=", "ToolOption", "(", ")", "\n", "min_adjust_option_list", ".", "add_option", "(", "\"f\"", ",", "\"FINISH : update refined_sensorD/ refined_meshD/ img_info \"", "\n", "\"and EXIT\"", ")", "\n", "min_adjust_option_list", ".", "add_option", "(", "\"a\"", ",", "\"ADJUST : adjust the plane parameter based on current \"", "\n", "\"plane parameter\"", ")", "\n", "min_adjust_option_list", ".", "add_option", "(", "\"i\"", ",", "\"INIT : pick 3 points to initialize the plane (press shift \"", "\n", "\"+ left click to select a point; press shirt + right click \"", "\n", "\"to unselect; for more detail please refer to Open3d \"", "\n", "\"instruction)\"", ")", "\n", "min_adjust_option_list", ".", "print_option", "(", ")", "\n", "min_input_option", "=", "input", "(", ")", "\n", "\n", "if", "min_input_option", "not", "in", "[", "\"f\"", ",", "\"i\"", ",", "\"a\"", "]", ":", "\n", "                        ", "print", "(", "\"invalid input, please input again :D\"", ")", "\n", "continue", "\n", "\n", "", "if", "min_input_option", "==", "\"f\"", ":", "\n", "                        ", "update_plane_parameter_json", "(", "plane_parameter", ",", "plane_parameter_output_path", ",", "instance_id", ")", "\n", "manual_adjust_num", "+=", "1", "\n", "self", ".", "correct_pcd_list", ".", "append", "(", "current_pcd_path", ")", "\n", "self", ".", "save_progress", "(", "annotation_progress_save_folder", ")", "\n", "self", ".", "get_progress", "(", "input_txt", ",", "annotation_progress_save_folder", ")", "\n", "break", "\n", "", "elif", "min_input_option", "==", "\"i\"", ":", "\n", "                        ", "[", "p1", ",", "p2", ",", "p3", "]", "=", "get_picked_points", "(", "pcd", ")", "\n", "plane_parameter", "=", "get_parameter_from_plane_adjustment", "(", "\n", "pcd", ",", "get_mirror_init_plane_from_3points", "(", "p1", ",", "p2", ",", "p3", ")", ",", "init_step_size", ")", "\n", "mirror_pcd", "=", "get_mirrorPoint_based_on_plane_parameter", "(", "f", ",", "plane_parameter", "=", "plane_parameter", ",", "\n", "mirror_mask", "=", "instance_mask", ",", "\n", "color_img_path", "=", "color_img_path", ",", "\n", "color", "=", "[", "1", ",", "1", ",", "0", "]", ")", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "pcd", ",", "mirror_pcd", "]", ")", "\n", "\n", "", "elif", "min_input_option", "==", "\"a\"", ":", "\n", "                        ", "p1", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "mirror_pcd", ".", "points", ")", ",", "axis", "=", "0", ")", "\n", "p2", "=", "np", ".", "array", "(", "mirror_pcd", ".", "points", ")", "[", "0", "]", "\n", "p3", "=", "np", ".", "array", "(", "mirror_pcd", ".", "points", ")", "[", "-", "1", "]", "\n", "if", "not", "mirror_plane", ":", "\n", "                            ", "mirror_plane", "=", "get_mirror_init_plane_from_3points", "(", "p1", ",", "p2", ",", "p3", ")", "\n", "", "plane_parameter", "=", "get_parameter_from_plane_adjustment", "(", "pcd", ",", "mirror_plane", ",", "init_step_size", ")", "\n", "mirror_pcd", "=", "get_mirrorPoint_based_on_plane_parameter", "(", "f", ",", "plane_parameter", "=", "plane_parameter", ",", "\n", "mirror_mask", "=", "instance_mask", ",", "\n", "color_img_path", "=", "color_img_path", ",", "\n", "color", "=", "[", "1", ",", "1", ",", "0", "]", ")", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "pcd", ",", "mirror_pcd", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_and_check_focal_length": [[417, 425], ["int", "print", "print", "exit"], "methods", ["None"], ["", "", "", "", "", "def", "get_and_check_focal_length", "(", "self", ",", "f", ",", "line", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "f", "=", "int", "(", "f", ")", "\n", "return", "f", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"{} invalid focal length format\"", ".", "format", "(", "f", ")", ")", "\n", "print", "(", "\"please check line: \"", ",", "line", ")", "\n", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.anno_update_depth_from_img_info": [[426, 459], ["plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "read_txt", "item.strip().split", "plane_annotation_tool.PlaneAnnotationTool.get_and_check_focal_length", "os.makedirs", "cv2.imread", "read_json", "len", "print", "print", "cv2.imwrite", "print", "item.strip().split", "item.strip", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.split", "refine_depth_with_plane_parameter_mask", "cv2.imread", "item.strip"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_and_check_focal_length", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_json", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.refine_depth_with_plane_parameter_mask"], ["", "", "def", "anno_update_depth_from_img_info", "(", "self", ",", "input_txt", ")", ":", "\n", "        ", "\"\"\"\n        After plane annotation, update \"raw_sensorD/raw_meshD\" to \"refined_sensorD/refined_meshD\"\n\n        Output:\n            Refined depth saved to refined_sensorD or refined_meshD (Matterport3d only).\n        \"\"\"", "\n", "process_list", "=", "self", ".", "get_list_to_process", "(", "read_txt", "(", "input_txt", ")", ")", "\n", "for", "item", "in", "process_list", ":", "\n", "            ", "if", "len", "(", "item", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "!=", "5", ":", "\n", "                ", "continue", "\n", "", "rawD_path", ",", "mask_img_path", ",", "plane_parameter_json_path", ",", "refD_output_path", ",", "f", "=", "item", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "rawD_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "mask_img_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "\n", "plane_parameter_json_path", ")", ":", "\n", "                ", "print", "(", "\"invalid line : \"", ",", "item", ")", "\n", "print", "(", "\"input txt format: [path to depth map to refine (rawD)] [input integer mask path] [plane \"", "\n", "\"parameter JSON output path] [path to save the refined depth map (refD)] [focal length of this \"", "\n", "\"sample]\"", ")", "\n", "continue", "\n", "", "f", "=", "self", ".", "get_and_check_focal_length", "(", "f", ",", "item", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "refD_output_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "mask", "=", "cv2", ".", "imread", "(", "mask_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "info", "=", "read_json", "(", "plane_parameter_json_path", ")", "\n", "valid_instance", "=", "False", "\n", "for", "one_info", "in", "info", ":", "\n", "                ", "instance_index", "=", "one_info", "[", "\"mask_id\"", "]", "\n", "binary_instance_mask", "=", "(", "mask", "==", "instance_index", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "plane_parameter", "=", "one_info", "[", "\"plane\"", "]", "\n", "cv2", ".", "imwrite", "(", "refD_output_path", ",", "\n", "refine_depth_with_plane_parameter_mask", "(", "plane_parameter", ",", "binary_instance_mask", ",", "\n", "cv2", ".", "imread", "(", "rawD_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", ",", "f", ")", ")", "\n", "print", "(", "\"update depth {}\"", ".", "format", "(", "refD_output_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.data_clamping": [[460, 509], ["plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "read_txt", "item.strip().split", "plane_annotation_tool.PlaneAnnotationTool.get_and_check_focal_length", "cv2.imread", "numpy.unique", "len", "print", "print", "get_points_in_mask", "o3d.geometry.PointCloud", "o3d.utility.Vector3dVector", "o3d.geometry.OrientedBoundingBox.create_from_points", "os.makedirs", "cv2.imwrite", "print", "item.strip().split", "item.strip", "os.path.exists", "os.path.exists", "os.path.exists", "cv2.dilate", "cv2.erode", "numpy.stack", "o3d.utility.Vector3dVector", "clamp_pcd_by_bbox", "cv2.getStructuringElement", "cv2.getStructuringElement", "numpy.stack", "read_plane_json", "os.path.split", "item.strip"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_and_check_focal_length", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_points_in_mask", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.clamp_pcd_by_bbox", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_plane_json"], ["", "", "", "def", "data_clamping", "(", "self", ",", "input_txt", ",", "expand_range", "=", "100", ",", "clamp_dis", "=", "100", ",", "border_width", "=", "25", ")", ":", "\n", "        ", "\"\"\"\n        Clamp data based on 3D bbox\n\n        Output:\n            Clamped depth : saved to refined_sensorD or mesh_refined depth under self.data_main_folder\n        \"\"\"", "\n", "import", "open3d", "as", "o3d", "\n", "process_list", "=", "self", ".", "get_list_to_process", "(", "read_txt", "(", "input_txt", ")", ")", "\n", "for", "item", "in", "process_list", ":", "\n", "            ", "if", "len", "(", "item", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "!=", "5", ":", "\n", "                ", "continue", "\n", "", "refD_path", ",", "mask_img_path", ",", "plane_parameter_json_path", ",", "clamped_refD_path", ",", "f", "=", "item", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "refD_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "mask_img_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "\n", "plane_parameter_json_path", ")", ":", "\n", "                ", "print", "(", "\"invalid line : \"", ",", "item", ")", "\n", "print", "(", "\"input txt format: [path to depth map to the unclamped refine (rawD)] [input integer mask path] \"", "\n", "\"[plane parameter JSON output path] [path to save the clamped refined depth map (refD)] [focal \"", "\n", "\"length of this sample]\"", ")", "\n", "continue", "\n", "", "f", "=", "self", ".", "get_and_check_focal_length", "(", "f", ",", "item", ")", "\n", "mask", "=", "cv2", ".", "imread", "(", "mask_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "for", "instance_index", "in", "np", ".", "unique", "(", "mask", ")", ":", "\n", "                ", "if", "instance_index", "==", "0", ":", "\n", "                    ", "continue", "# background", "\n", "\n", "# Get mirror_border_mask", "\n", "", "instance_mask", "=", "(", "mask", "==", "instance_index", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mirror_border_mask", "=", "cv2", ".", "dilate", "(", "instance_mask", ",", "cv2", ".", "getStructuringElement", "(", "cv2", ".", "MORPH_ELLIPSE", ",", "(", "\n", "border_width", ",", "border_width", ")", ")", ")", "-", "cv2", ".", "erode", "(", "instance_mask", ",", "\n", "cv2", ".", "getStructuringElement", "(", "cv2", ".", "MORPH_ELLIPSE", ",", "(", "10", ",", "10", ")", ")", ")", "\n", "\n", "# Get mirror_bbox", "\n", "mirror_points", "=", "get_points_in_mask", "(", "f", "=", "f", ",", "depth_img_path", "=", "refD_path", ",", "mirror_mask", "=", "instance_mask", ")", "\n", "mirror_pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "mirror_pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "mirror_points", ",", "axis", "=", "0", ")", ")", "\n", "mirror_bbox", "=", "o3d", ".", "geometry", ".", "OrientedBoundingBox", ".", "create_from_points", "(", "\n", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "mirror_points", ",", "axis", "=", "0", ")", ")", ")", "\n", "\n", "# Get plane parameter", "\n", "plane_parameter", "=", "read_plane_json", "(", "plane_parameter_json_path", ")", "[", "instance_index", "]", "[", "\"plane_parameter\"", "]", "\n", "\n", "# Refine hole raw depth", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "clamped_refD_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "cv2", ".", "imwrite", "(", "clamped_refD_path", ",", "clamp_pcd_by_bbox", "(", "mirror_bbox", "=", "mirror_bbox", ",", "depth_img_path", "=", "refD_path", ",", "f", "=", "f", ",", "\n", "mirror_border_mask", "=", "mirror_border_mask", ",", "\n", "plane_parameter", "=", "plane_parameter", ",", "\n", "expand_range", "=", "expand_range", ",", "clamp_dis", "=", "clamp_dis", ")", ")", "\n", "print", "(", "\"update depth {}\"", ".", "format", "(", "clamped_refD_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.generate_pcdMesh_for_vis": [[510, 576], ["plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "os.makedirs", "os.makedirs", "cv2.imread", "numpy.unique", "read_txt", "item.strip().split", "plane_annotation_tool.PlaneAnnotationTool.get_and_check_focal_length", "plane_annotation_tool.PlaneAnnotationTool.generate_pcdMesh_for_vis.generate_and_save_ply"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_and_check_focal_length"], ["", "", "", "def", "generate_pcdMesh_for_vis", "(", "self", ",", "input_txt", ")", ":", "\n", "        ", "\"\"\"\n        Generate \"point cloud\" + \"mesh plane\" for specific sample\n\n        Output:\n            \"point cloud\" + \"mesh plane\" : Saved under self.output_folder.\n        \"\"\"", "\n", "\n", "import", "open3d", "as", "o3d", "\n", "import", "itertools", "\n", "\n", "# Pack as a function to better support Matterport3d ply generation", "\n", "def", "generate_and_save_ply", "(", "color_img_path", ",", "depth_img_path", ",", "mask_img_path", ",", "plane_parameter_json_path", ",", "\n", "pcd_save_folder", ",", "mesh_save_folder", ",", "f", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "pcd_save_folder", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "mesh_save_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "mask", "=", "cv2", ".", "imread", "(", "mask_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "#  Get pcd and masked RGB image for each instance", "\n", "for", "instance_index", "in", "np", ".", "unique", "(", "mask", ")", ":", "\n", "                ", "if", "instance_index", "==", "0", ":", "# background", "\n", "                    ", "continue", "\n", "", "save_name", "=", "color_img_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\"_idx_\"", "+", "str", "(", "instance_index", ")", "\n", "mesh_save_path", "=", "os", ".", "path", ".", "join", "(", "mesh_save_folder", ",", "\"{}.ply\"", ".", "format", "(", "save_name", ")", ")", "\n", "pcd_save_path", "=", "os", ".", "path", ".", "join", "(", "pcd_save_folder", ",", "\"{}.ply\"", ".", "format", "(", "save_name", ")", ")", "\n", "binary_instance_mask", "=", "(", "mask", "==", "instance_index", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "plane_parameter", "=", "read_plane_json", "(", "plane_parameter_json_path", ")", "[", "instance_index", "]", "[", "\"plane_parameter\"", "]", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "pcd_save_path", ")", "and", "os", ".", "path", ".", "exists", "(", "mesh_save_path", ")", "and", "not", "self", ".", "overwrite", ":", "\n", "                    ", "print", "(", "pcd_save_path", ",", "mesh_save_path", ",", "\"exist! continue\"", ")", "\n", "return", "\n", "\n", "# Get pcd for the instance", "\n", "", "pcd", "=", "get_pcd_from_rgbd_depthPath", "(", "f", ",", "depth_img_path", ",", "color_img_path", ",", "mirror_mask", "=", "binary_instance_mask", ",", "color", "=", "[", "0", ",", "0.2", ",", "0.6", "]", ")", "\n", "\n", "# Get mirror plane for the instance", "\n", "mirror_points", "=", "get_points_in_mask", "(", "f", ",", "depth_img_path", ",", "mirror_mask", "=", "binary_instance_mask", ")", "\n", "mirror_pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "mirror_pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "mirror_points", ",", "axis", "=", "0", ")", ")", "\n", "if", "np", ".", "array", "(", "mirror_pcd", ".", "voxel_down_sample", "(", "voxel_size", "=", "500", ")", ".", "points", ")", ".", "shape", "[", "0", "]", "<", "30", ":", "\n", "                    ", "mirror_bbox", "=", "mirror_pcd", ".", "voxel_down_sample", "(", "voxel_size", "=", "100", ")", ".", "get_oriented_bounding_box", "(", ")", "\n", "", "else", ":", "\n", "                    ", "mirror_bbox", "=", "mirror_pcd", ".", "voxel_down_sample", "(", "voxel_size", "=", "500", ")", ".", "get_oriented_bounding_box", "(", ")", "\n", "", "mirror_plane", "=", "get_mirror_init_plane_from_mirrorbbox", "(", "plane_parameter", ",", "mirror_bbox", ")", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "pcd_save_path", ",", "pcd", ")", "\n", "print", "(", "\"point cloud saved  to :\"", ",", "os", ".", "path", ".", "abspath", "(", "pcd_save_path", ")", ")", "\n", "\n", "o3d", ".", "io", ".", "write_triangle_mesh", "(", "mesh_save_path", ",", "mirror_plane", ")", "\n", "print", "(", "\"mirror plane (mesh) saved  to :\"", ",", "os", ".", "path", ".", "abspath", "(", "mesh_save_path", ")", ")", "\n", "\n", "", "", "process_list", "=", "self", ".", "get_list_to_process", "(", "read_txt", "(", "input_txt", ")", ")", "\n", "for", "item", "in", "process_list", ":", "\n", "            ", "if", "len", "(", "item", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "!=", "7", ":", "\n", "                ", "continue", "\n", "", "color_img_path", ",", "depth_img_path", ",", "mask_img_path", ",", "plane_parameter_json_path", ",", "pcd_save_folder", ",", "mesh_save_folder", ",", "f", "=", "item", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "color_img_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "depth_img_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "\n", "plane_parameter_json_path", ")", ":", "\n", "                ", "print", "(", "\"invalid line : \"", ",", "item", ")", "\n", "print", "(", "\"input txt format: [input color image path] [input depth image path] [input integer mask path] \"", "\n", "\"[plane parameter JSON path] [folder to save the output pointcloud] [folder to save the output \"", "\n", "\"mesh plane] [focal length of this sample]\"", ")", "\n", "continue", "\n", "", "f", "=", "self", ".", "get_and_check_focal_length", "(", "f", ",", "item", ")", "\n", "generate_and_save_ply", "(", "color_img_path", ",", "depth_img_path", ",", "mask_img_path", ",", "plane_parameter_json_path", ",", "\n", "pcd_save_folder", ",", "mesh_save_folder", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.set_view_mode": [[577, 580], ["None"], "methods", ["None"], ["", "", "def", "set_view_mode", "(", "self", ",", "view_mode", ")", ":", "\n", "        ", "\"\"\"Function to save the view mode\"\"\"", "\n", "self", ".", "view_mode", "=", "view_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.rotate_pcd_mesh_topdown": [[581, 623], ["numpy.mean", "get_extrinsic", "get_extrinsic", "numpy.dot", "o3d.visualization.VisualizerWithKeyCallback", "o3d.visualization.VisualizerWithKeyCallback.register_animation_callback", "o3d.visualization.VisualizerWithKeyCallback.create_window", "o3d.visualization.VisualizerWithKeyCallback.add_geometry", "o3d.visualization.VisualizerWithKeyCallback.add_geometry", "o3d.visualization.VisualizerWithKeyCallback.get_view_control().convert_to_pinhole_camera_parameters", "o3d.visualization.VisualizerWithKeyCallback.get_view_control().convert_from_pinhole_camera_parameters", "o3d.visualization.VisualizerWithKeyCallback.run", "numpy.array", "get_extrinsic", "o3d.visualization.VisualizerWithKeyCallback.get_view_control().convert_to_pinhole_camera_parameters", "numpy.dot", "o3d.visualization.VisualizerWithKeyCallback.get_view_control().convert_from_pinhole_camera_parameters", "os.path.join", "o3d.visualization.VisualizerWithKeyCallback.capture_screen_image", "print", "o3d.visualization.VisualizerWithKeyCallback.get_render_option", "numpy.dot", "o3d.visualization.VisualizerWithKeyCallback.destroy_window", "o3d.visualization.VisualizerWithKeyCallback.get_view_control", "o3d.visualization.VisualizerWithKeyCallback.get_view_control", "o3d.visualization.VisualizerWithKeyCallback.get_view_control", "o3d.visualization.VisualizerWithKeyCallback.get_view_control"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_extrinsic", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_extrinsic", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM.create_window", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_extrinsic"], ["", "@", "staticmethod", "\n", "def", "rotate_pcd_mesh_topdown", "(", "screenshot_output_folder", ",", "pcd", ",", "plane", ",", "above_height", "=", "3000", ")", ":", "\n", "        ", "\"\"\"\n        Rotate the \"pcd + mesh\" by topdown view\n\n        Output:\n            Screenshots png\n        \"\"\"", "\n", "import", "open3d", "as", "o3d", "\n", "\n", "screenshot_id", "=", "0", "\n", "mesh_center", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "plane", ".", "vertices", ")", ",", "axis", "=", "0", ")", "\n", "rotation_step_degree", "=", "10", "\n", "start_rotation", "=", "get_extrinsic", "(", "90", ",", "0", ",", "0", ",", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "step_translation", "=", "get_extrinsic", "(", "0", ",", "0", ",", "0", ",", "[", "-", "mesh_center", "[", "0", "]", ",", "-", "mesh_center", "[", "1", "]", "+", "above_height", ",", "-", "mesh_center", "[", "2", "]", "]", ")", "\n", "start_position", "=", "np", ".", "dot", "(", "start_rotation", ",", "step_translation", ")", "\n", "\n", "def", "rotate_view", "(", "vis", ")", ":", "\n", "            ", "nonlocal", "screenshot_id", "\n", "t_rotate", "=", "get_extrinsic", "(", "0", ",", "rotation_step_degree", "*", "(", "screenshot_id", "+", "1", ")", ",", "0", ",", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "cam", "=", "vis", ".", "get_view_control", "(", ")", ".", "convert_to_pinhole_camera_parameters", "(", ")", "\n", "cam", ".", "extrinsic", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "start_rotation", ",", "t_rotate", ")", ",", "step_translation", ")", "\n", "vis", ".", "get_view_control", "(", ")", ".", "convert_from_pinhole_camera_parameters", "(", "cam", ")", "\n", "\n", "screenshot_id", "+=", "1", "\n", "screenshot_save_path", "=", "os", ".", "path", ".", "join", "(", "screenshot_output_folder", ",", "\"{0:05d}.png\"", ".", "format", "(", "screenshot_id", ")", ")", "\n", "vis", ".", "capture_screen_image", "(", "filename", "=", "screenshot_save_path", ",", "do_render", "=", "True", ")", "\n", "print", "(", "\"image saved to {}\"", ".", "format", "(", "screenshot_save_path", ")", ")", "\n", "if", "screenshot_id", ">", "(", "360", "/", "rotation_step_degree", ")", ":", "\n", "                ", "vis", ".", "destroy_window", "(", ")", "\n", "", "return", "False", "\n", "\n", "", "vis", "=", "o3d", ".", "visualization", ".", "VisualizerWithKeyCallback", "(", ")", "\n", "vis", ".", "register_animation_callback", "(", "rotate_view", ")", "\n", "vis", ".", "create_window", "(", "width", "=", "800", ",", "height", "=", "800", ")", "\n", "vis", ".", "get_render_option", "(", ")", ".", "point_size", "=", "1.0", "\n", "vis", ".", "add_geometry", "(", "pcd", ")", "\n", "vis", ".", "add_geometry", "(", "plane", ")", "\n", "cam", "=", "vis", ".", "get_view_control", "(", ")", ".", "convert_to_pinhole_camera_parameters", "(", ")", "\n", "cam", ".", "extrinsic", "=", "start_position", "\n", "vis", ".", "get_view_control", "(", ")", ".", "convert_from_pinhole_camera_parameters", "(", "cam", ")", "\n", "vis", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.rotate_pcd_mesh_front": [[624, 666], ["numpy.mean", "get_extrinsic", "o3d.visualization.VisualizerWithKeyCallback", "o3d.visualization.VisualizerWithKeyCallback.register_animation_callback", "o3d.visualization.VisualizerWithKeyCallback.create_window", "o3d.visualization.VisualizerWithKeyCallback.add_geometry", "o3d.visualization.VisualizerWithKeyCallback.add_geometry", "o3d.visualization.VisualizerWithKeyCallback.get_view_control().convert_to_pinhole_camera_parameters", "o3d.visualization.VisualizerWithKeyCallback.get_view_control().convert_from_pinhole_camera_parameters", "o3d.visualization.VisualizerWithKeyCallback.run", "numpy.array", "get_extrinsic", "get_extrinsic", "get_extrinsic", "o3d.visualization.VisualizerWithKeyCallback.get_view_control().convert_to_pinhole_camera_parameters", "numpy.dot", "o3d.visualization.VisualizerWithKeyCallback.get_view_control().convert_from_pinhole_camera_parameters", "os.path.join", "o3d.visualization.VisualizerWithKeyCallback.capture_screen_image", "print", "o3d.visualization.VisualizerWithKeyCallback.get_render_option", "numpy.dot", "o3d.visualization.VisualizerWithKeyCallback.destroy_window", "o3d.visualization.VisualizerWithKeyCallback.get_view_control", "o3d.visualization.VisualizerWithKeyCallback.get_view_control", "o3d.visualization.VisualizerWithKeyCallback.get_view_control", "numpy.dot", "o3d.visualization.VisualizerWithKeyCallback.get_view_control"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_extrinsic", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM.create_window", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_extrinsic", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_extrinsic", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.get_extrinsic"], ["", "@", "staticmethod", "\n", "def", "rotate_pcd_mesh_front", "(", "screenshot_output_folder", ",", "pcd", ",", "plane", ")", ":", "\n", "        ", "\"\"\"\n        Rotate the \"pcd + mesh\" by front view\n\n        Output:\n            Screenshots png\n        \"\"\"", "\n", "import", "open3d", "as", "o3d", "\n", "\n", "screenshot_id", "=", "0", "\n", "mesh_center", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "plane", ".", "vertices", ")", ",", "axis", "=", "0", ")", "\n", "rotation_step_degree", "=", "10", "\n", "start_position", "=", "get_extrinsic", "(", "0", ",", "0", ",", "0", ",", "[", "0", ",", "0", ",", "3000", "]", ")", "\n", "\n", "def", "rotate_view", "(", "vis", ")", ":", "\n", "            ", "nonlocal", "screenshot_id", "\n", "t_to_center", "=", "get_extrinsic", "(", "0", ",", "0", ",", "0", ",", "mesh_center", ")", "\n", "t_rotate", "=", "get_extrinsic", "(", "0", ",", "rotation_step_degree", "*", "(", "screenshot_id", "+", "1", ")", ",", "0", ",", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "t_to_mesh", "=", "get_extrinsic", "(", "0", ",", "0", ",", "0", ",", "-", "mesh_center", ")", "\n", "cam", "=", "vis", ".", "get_view_control", "(", ")", ".", "convert_to_pinhole_camera_parameters", "(", ")", "\n", "cam", ".", "extrinsic", "=", "np", ".", "dot", "(", "start_position", ",", "np", ".", "dot", "(", "np", ".", "dot", "(", "t_to_center", ",", "t_rotate", ")", ",", "t_to_mesh", ")", ")", "\n", "vis", ".", "get_view_control", "(", ")", ".", "convert_from_pinhole_camera_parameters", "(", "cam", ")", "\n", "\n", "screenshot_id", "+=", "1", "\n", "screenshot_save_path", "=", "os", ".", "path", ".", "join", "(", "screenshot_output_folder", ",", "\"{0:05d}.png\"", ".", "format", "(", "screenshot_id", ")", ")", "\n", "vis", ".", "capture_screen_image", "(", "filename", "=", "screenshot_save_path", ",", "do_render", "=", "True", ")", "\n", "print", "(", "\"image saved to {}\"", ".", "format", "(", "screenshot_save_path", ")", ")", "\n", "if", "screenshot_id", ">", "(", "360", "/", "rotation_step_degree", ")", ":", "\n", "                ", "vis", ".", "destroy_window", "(", ")", "\n", "", "return", "False", "\n", "\n", "", "vis", "=", "o3d", ".", "visualization", ".", "VisualizerWithKeyCallback", "(", ")", "\n", "vis", ".", "register_animation_callback", "(", "rotate_view", ")", "\n", "vis", ".", "create_window", "(", "width", "=", "800", ",", "height", "=", "800", ")", "\n", "vis", ".", "get_render_option", "(", ")", ".", "point_size", "=", "1.0", "\n", "vis", ".", "add_geometry", "(", "pcd", ")", "\n", "vis", ".", "add_geometry", "(", "plane", ")", "\n", "cam", "=", "vis", ".", "get_view_control", "(", ")", ".", "convert_to_pinhole_camera_parameters", "(", ")", "\n", "cam", ".", "extrinsic", "=", "start_position", "\n", "vis", ".", "get_view_control", "(", ")", ".", "convert_from_pinhole_camera_parameters", "(", "cam", ")", "\n", "vis", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.generate_video_screenshot_from_3Dobject": [[667, 734], ["plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "os.makedirs", "o3d.io.read_point_cloud", "o3d.io.read_triangle_mesh", "os.makedirs", "read_txt", "item.strip().split", "plane_annotation_tool.PlaneAnnotationTool.generate_video_screenshot_from_3Dobject.generate_screenshot"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt"], ["", "def", "generate_video_screenshot_from_3Dobject", "(", "self", ",", "input_txt", ",", "above_height", "=", "3000", ")", ":", "\n", "        ", "\"\"\"\n        Generate \"pcd + mesh\"'s screenshots\n\n        Args:\n            self.view_mode : str; \"topdown\" / \"front\".\n\n        Output:\n            screenshots png\n        \"\"\"", "\n", "import", "open3d", "as", "o3d", "\n", "\n", "def", "generate_video_ffmpeg", "(", "one_video_save_path", ",", "one_screenshot_output_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "one_video_save_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "try", ":", "\n", "                ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "one_video_save_path", ")", ":", "\n", "                    ", "if", "not", "self", ".", "overwrite", ":", "\n", "                        ", "print", "(", "\"{} video exists!\"", ".", "format", "(", "one_video_save_path", ")", ")", "\n", "return", "\n", "", "else", ":", "\n", "                        ", "os", ".", "remove", "(", "one_video_save_path", ")", "\n", "", "", "command", "=", "\"ffmpeg -f image2 -i \"", "+", "one_screenshot_output_folder", "+", "\"/%05d.png \"", "+", "one_video_save_path", "\n", "os", ".", "system", "(", "command", ")", "\n", "print", "(", "\"video saved to {}, used time :{}\"", ".", "format", "(", "one_video_save_path", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"error saving video for :\"", ",", "one_screenshot_output_folder", ")", "\n", "\n", "", "", "def", "generate_screenshot", "(", "pcd_path", ",", "mesh_path", ",", "screenshot_output_folder", ")", ":", "\n", "\n", "            ", "pcd", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "pcd_path", ")", "\n", "mirror_plane", "=", "o3d", ".", "io", ".", "read_triangle_mesh", "(", "mesh_path", ")", "\n", "os", ".", "makedirs", "(", "screenshot_output_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "len", "(", "os", ".", "listdir", "(", "screenshot_output_folder", ")", ")", "==", "37", "and", "not", "self", ".", "overwrite", ":", "\n", "                ", "print", "(", "\"screenshots for {} exist ! continue\"", ".", "format", "(", "pcd_path", ")", ")", "\n", "return", "\n", "\n", "", "if", "self", ".", "view_mode", "==", "\"topdown\"", ":", "\n", "                ", "topdown_folder", "=", "os", ".", "path", ".", "join", "(", "screenshot_output_folder", ",", "\"topdown\"", ")", "\n", "os", ".", "makedirs", "(", "topdown_folder", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "rotate_pcd_mesh_topdown", "(", "topdown_folder", ",", "pcd", ",", "mirror_plane", ",", "above_height", ")", "\n", "", "else", ":", "\n", "                ", "front_folder", "=", "os", ".", "path", ".", "join", "(", "screenshot_output_folder", ",", "\"front\"", ")", "\n", "os", ".", "makedirs", "(", "front_folder", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "rotate_pcd_mesh_front", "(", "front_folder", ",", "pcd", ",", "mirror_plane", ")", "\n", "\n", "", "", "process_list", "=", "self", ".", "get_list_to_process", "(", "read_txt", "(", "input_txt", ")", ")", "\n", "for", "item", "in", "process_list", ":", "\n", "            ", "if", "len", "(", "item", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "!=", "3", ":", "\n", "                ", "continue", "\n", "", "pcd_path", ",", "mesh_path", ",", "screenshot_output_folder", "=", "item", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pcd_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "mesh_path", ")", ":", "\n", "                ", "print", "(", "\"invalid line : \"", ",", "item", ")", "\n", "print", "(", "\"input txt format: [path to pointcloud] [path to mesh plane] [screenshot output main folder]\"", ")", "\n", "continue", "\n", "", "generate_screenshot", "(", "pcd_path", ",", "mesh_path", ",", "screenshot_output_folder", ")", "\n", "if", "self", ".", "view_mode", "==", "\"topdown\"", ":", "\n", "                ", "topdown_folder", "=", "os", ".", "path", ".", "join", "(", "screenshot_output_folder", ",", "\"topdown\"", ")", "\n", "video_save_path", "=", "os", ".", "path", ".", "join", "(", "screenshot_output_folder", ",", "\n", "\"topdown_{}_.mp4\"", ".", "format", "(", "os", ".", "path", ".", "split", "(", "mesh_path", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", ")", "\n", "generate_video_ffmpeg", "(", "video_save_path", ",", "topdown_folder", ")", "\n", "", "else", ":", "\n", "                ", "front_folder", "=", "os", ".", "path", ".", "join", "(", "screenshot_output_folder", ",", "\"front\"", ")", "\n", "video_save_path", "=", "os", ".", "path", ".", "join", "(", "screenshot_output_folder", ",", "\n", "\"front_{}_.mp4\"", ".", "format", "(", "os", ".", "path", ".", "split", "(", "mesh_path", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", ")", "\n", "generate_video_ffmpeg", "(", "video_save_path", ",", "front_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.gen_verification_html": [[735, 845], ["os.makedirs", "plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "enumerate", "read_txt", "item.strip().split", "process_list.append", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.body.div.append", "bs4.BeautifulSoup.new_tag", "enumerate", "bs4.BeautifulSoup.new_tag.append", "os.path.join", "save_html", "print", "print", "len", "print", "print", "item.strip().split", "range", "open", "inf.read", "bs4.BeautifulSoup", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag", "os.path.relpath", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag", "bs4.BeautifulSoup.new_tag", "os.path.relpath", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag.append", "bs4.BeautifulSoup.new_tag.append", "os.path.abspath", "os.path.join.replace", "item.strip().split", "item.strip", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "len", "item.strip", "os.path.relpath", "os.path.relpath", "item.strip"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_html"], ["", "", "", "def", "gen_verification_html", "(", "self", ",", "input_txt", ",", "video_num_per_page", ",", "html_output_folder", ")", ":", "\n", "\n", "        ", "template_path", "=", "\"mirror3d/visualization/template/veri_template.html\"", "\n", "os", ".", "makedirs", "(", "html_output_folder", ",", "exist_ok", "=", "True", ")", "\n", "process_list_temp", "=", "self", ".", "get_list_to_process", "(", "read_txt", "(", "input_txt", ")", ")", "\n", "process_list", "=", "[", "]", "\n", "for", "item", "in", "process_list_temp", ":", "\n", "            ", "if", "len", "(", "item", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "!=", "5", ":", "\n", "                ", "continue", "\n", "", "sample_id", ",", "color_img_path", ",", "colored_depth_path", ",", "front_video_path", ",", "topdown_video_path", "=", "item", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "color_img_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "colored_depth_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "\n", "front_video_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "topdown_video_path", ")", ":", "\n", "                ", "print", "(", "\"invalid line : \"", ",", "item", ")", "\n", "print", "(", "\"input txt format: [sample id] [input color image path] [colored depth map saved path] [front \"", "\n", "\"view video path] [topdown view video path]\"", ")", "\n", "continue", "\n", "\n", "", "process_list", ".", "append", "(", "item", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "", "process_sub_list", "=", "[", "process_list", "[", "x", ":", "x", "+", "video_num_per_page", "]", "for", "x", "in", "\n", "range", "(", "0", ",", "len", "(", "process_list", ")", ",", "video_num_per_page", ")", "]", "\n", "for", "html_index", ",", "process_sub", "in", "enumerate", "(", "process_sub_list", ")", ":", "\n", "\n", "            ", "with", "open", "(", "template_path", ")", "as", "inf", ":", "\n", "                ", "txt", "=", "inf", ".", "read", "(", ")", "\n", "soup", "=", "bs4", ".", "BeautifulSoup", "(", "txt", ",", "features", "=", "\"html.parser\"", ")", "\n", "\n", "", "new_table", "=", "soup", ".", "new_tag", "(", "\"table\"", ")", "\n", "new_table", "[", "\"style\"", "]", "=", "\"width: 100%%; margin-left: auto; margin-right: auto;\"", "\n", "soup", ".", "body", ".", "div", ".", "append", "(", "new_table", ")", "\n", "\n", "# add heading ", "\n", "heading_tag", "=", "[", "\"ID\"", ",", "\"Color Image\"", ",", "\"Depth Image\"", ",", "\"Top-down View Pointcloud\"", ",", "\"Front View Pointcloud\"", "]", "\n", "heading", "=", "soup", ".", "new_tag", "(", "\"tr\"", ")", "\n", "\n", "for", "item_index", ",", "tag", "in", "enumerate", "(", "heading_tag", ")", ":", "\n", "                ", "one_heading", "=", "soup", ".", "new_tag", "(", "\"td\"", ")", "\n", "text", "=", "soup", ".", "new_tag", "(", "\"p\"", ")", "\n", "text", ".", "string", "=", "tag", "\n", "text", "[", "\"style\"", "]", "=", "\"text-align: center;\"", "\n", "one_heading", ".", "append", "(", "text", ")", "\n", "heading", ".", "append", "(", "one_heading", ")", "\n", "", "new_table", ".", "append", "(", "heading", ")", "\n", "for", "one_sub_info", "in", "process_sub", ":", "\n", "                ", "sample_id", ",", "color_img_path", ",", "colored_depth_path", ",", "front_video_path", ",", "topdown_video_path", "=", "one_sub_info", "\n", "\n", "# append sample_id", "\n", "new_tr", "=", "soup", ".", "new_tag", "(", "\"tr\"", ")", "\n", "sample_id_box", "=", "soup", ".", "new_tag", "(", "\"td\"", ")", "\n", "text", "=", "soup", ".", "new_tag", "(", "\"p\"", ")", "\n", "text", ".", "string", "=", "sample_id", "\n", "text", "[", "\"style\"", "]", "=", "\"text-align: center; width:300px\"", "\n", "sample_id_box", ".", "append", "(", "text", ")", "\n", "new_tr", ".", "append", "(", "sample_id_box", ")", "\n", "\n", "# append color image to one line in HTML", "\n", "one_color_img", "=", "soup", ".", "new_tag", "(", "\"td\"", ")", "\n", "one_color_img", "[", "\"class\"", "]", "=", "\"one-item\"", "\n", "img", "=", "soup", ".", "new_tag", "(", "'img'", ",", "src", "=", "os", ".", "path", ".", "relpath", "(", "color_img_path", ",", "html_output_folder", ")", ")", "\n", "img", "[", "\"style\"", "]", "=", "\"max-height: 220px; width:100%;\"", "\n", "one_color_img", ".", "append", "(", "img", ")", "\n", "new_tr", ".", "append", "(", "one_color_img", ")", "\n", "\n", "# append colored depth image to one line in HTML", "\n", "one_color_img", "=", "soup", ".", "new_tag", "(", "\"td\"", ")", "\n", "one_color_img", "[", "\"class\"", "]", "=", "\"one-item\"", "\n", "img", "=", "soup", ".", "new_tag", "(", "'img'", ",", "src", "=", "os", ".", "path", ".", "relpath", "(", "colored_depth_path", ",", "html_output_folder", ")", ")", "\n", "img", "[", "\"style\"", "]", "=", "\"max-height: 220px; width:100%;\"", "\n", "one_color_img", ".", "append", "(", "img", ")", "\n", "new_tr", ".", "append", "(", "one_color_img", ")", "\n", "\n", "# add topdown video", "\n", "video_td", "=", "soup", ".", "new_tag", "(", "\"td\"", ")", "\n", "video_td", "[", "\"class\"", "]", "=", "\"one-item\"", "\n", "one_video", "=", "soup", ".", "new_tag", "(", "\"video\"", ")", "\n", "one_video", "[", "\"style\"", "]", "=", "\"max-height: 220px; width:100%;\"", "\n", "one_video", "[", "\"class\"", "]", "=", "\"lazy-video\"", "\n", "one_video", "[", "\"controls\"", "]", "=", "\"True\"", "\n", "one_video", "[", "\"autoplay\"", "]", "=", "\"True\"", "\n", "one_video", "[", "\"muted\"", "]", "=", "\"True\"", "\n", "one_video", "[", "\"loop\"", "]", "=", "\"True\"", "\n", "new_link", "=", "soup", ".", "new_tag", "(", "\"source\"", ")", "\n", "new_link", "[", "\"data-src\"", "]", "=", "os", ".", "path", ".", "relpath", "(", "topdown_video_path", ",", "html_output_folder", ")", "\n", "new_link", "[", "\"type\"", "]", "=", "\"video/mp4\"", "\n", "one_video", ".", "append", "(", "new_link", ")", "\n", "video_td", ".", "append", "(", "one_video", ")", "\n", "new_tr", ".", "append", "(", "video_td", ")", "\n", "\n", "# add front video", "\n", "video_td", "=", "soup", ".", "new_tag", "(", "\"td\"", ")", "\n", "video_td", "[", "\"class\"", "]", "=", "\"one-item\"", "\n", "one_video", "=", "soup", ".", "new_tag", "(", "\"video\"", ")", "\n", "one_video", "[", "\"style\"", "]", "=", "\"max-height: 220px; width:100%;\"", "\n", "one_video", "[", "\"class\"", "]", "=", "\"lazy-video\"", "\n", "one_video", "[", "\"controls\"", "]", "=", "\"True\"", "\n", "one_video", "[", "\"autoplay\"", "]", "=", "\"True\"", "\n", "one_video", "[", "\"muted\"", "]", "=", "\"True\"", "\n", "one_video", "[", "\"loop\"", "]", "=", "\"True\"", "\n", "new_link", "=", "soup", ".", "new_tag", "(", "\"source\"", ")", "\n", "new_link", "[", "\"data-src\"", "]", "=", "os", ".", "path", ".", "relpath", "(", "front_video_path", ",", "html_output_folder", ")", "\n", "new_link", "[", "\"type\"", "]", "=", "\"video/mp4\"", "\n", "one_video", ".", "append", "(", "new_link", ")", "\n", "video_td", ".", "append", "(", "one_video", ")", "\n", "new_tr", ".", "append", "(", "video_td", ")", "\n", "new_table", ".", "append", "(", "new_tr", ")", "\n", "\n", "", "html_path", "=", "os", ".", "path", ".", "join", "(", "html_output_folder", ",", "\"{}.html\"", ".", "format", "(", "html_index", ")", ")", "\n", "save_html", "(", "html_path", ",", "soup", ")", "\n", "print", "(", "\"html saved to :\"", ",", "os", ".", "path", ".", "abspath", "(", "html_path", ")", ")", "\n", "print", "(", "\"debug : \"", ",", "html_path", ".", "replace", "(", "\"/project/3dlg-hcvc/mirrors/www\"", ",", "\n", "\"https://aspis.cmpt.sfu.ca/projects/mirrors\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.gen_colored_grayscale_for_depth": [[846, 864], ["plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "read_txt", "item.strip().split", "os.makedirs", "save_heatmap_no_border", "len", "os.path.exists", "print", "print", "cv2.imread", "item.strip().split", "item.strip", "os.path.split", "item.strip"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_heatmap_no_border"], ["", "", "def", "gen_colored_grayscale_for_depth", "(", "self", ",", "input_txt", ")", ":", "\n", "        ", "\"\"\"\n        Generate colored depth for one sample\n        Output:\n            colored depth image (using plt \"magma\" colormap)\n        \"\"\"", "\n", "\n", "process_list", "=", "self", ".", "get_list_to_process", "(", "read_txt", "(", "input_txt", ")", ")", "\n", "for", "item", "in", "process_list", ":", "\n", "            ", "if", "len", "(", "item", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "!=", "2", ":", "\n", "                ", "continue", "\n", "", "depth_path", ",", "colored_depth_output_path", "=", "item", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "depth_path", ")", ":", "\n", "                ", "print", "(", "\"invalid line : \"", ",", "item", ")", "\n", "print", "(", "\"input txt format: [input depth image path] [colored depth map saved path]\"", ")", "\n", "continue", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "colored_depth_output_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "save_heatmap_no_border", "(", "cv2", ".", "imread", "(", "depth_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", ",", "colored_depth_output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.__init__": [[21, 81], ["classification_tool.ClassificationGUI.get_progress", "tkinter.Frame", "tkinter.Frame.grid", "tkinter.Label", "classification_tool.ClassificationGUI.set_image", "classification_tool.ClassificationGUI.buttons.append", "classification_tool.ClassificationGUI.buttons.append", "classification_tool.ClassificationGUI.buttons.append", "classification_tool.ClassificationGUI.buttons.append", "tkinter.Label", "classification_tool.ClassificationGUI.mirror_count_label.grid", "tkinter.Label", "classification_tool.ClassificationGUI.mirror_tag_label.grid", "tkinter.Label", "classification_tool.ClassificationGUI.progress_label.grid", "tkinter.StringVar", "tkinter.Entry", "classification_tool.ClassificationGUI.text_file_name.set", "tkinter.Label().grid", "tkinter.IntVar", "tkinter.Entry", "classification_tool.ClassificationGUI.return_entry.grid", "master.bind", "classification_tool.ClassificationGUI.sorting_label.grid", "classification_tool.ClassificationGUI.image_panel.grid", "master.bind", "master.bind", "master.bind", "master.bind", "tkinter.Button().grid", "tkinter.Button().grid", "tkinter.Button().grid", "tkinter.Button().grid", "len", "len", "tkinter.Label", "tkinter.Button", "tkinter.Button", "tkinter.Button", "tkinter.Button", "len", "classification_tool.ClassificationGUI.get_tag", "classification_tool.ClassificationGUI.vote", "classification_tool.ClassificationGUI.vote", "classification_tool.ClassificationGUI.move_prev_image", "classification_tool.ClassificationGUI.move_next_image", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_progress", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.set_image", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_tag", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.vote", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.vote", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.move_prev_image", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.move_next_image"], ["def", "__init__", "(", "self", ",", "master", "=", "\"\"", ",", "whole_path_list", "=", "\"\"", ",", "anno_output_folder", "=", "\"\"", ",", "dataset", "=", "\"scannet\"", ")", ":", "\n", "        ", "\"\"\"\n        Initialise GUI\n        :param master: The parent window\n        :param whole_path_list: A list of file whole_path_list to images\n        :return:\n        \"\"\"", "\n", "\n", "self", ".", "dataset", "=", "dataset", "# m3d; scannet; nyu", "\n", "self", ".", "whole_path_list", "=", "whole_path_list", "\n", "self", ".", "anno_output_folder", "=", "anno_output_folder", "\n", "self", ".", "get_progress", "(", "start_gui", "=", "True", ")", "\n", "self", ".", "master", "=", "master", "\n", "\n", "frame", "=", "tk", ".", "Frame", "(", "master", ")", "\n", "frame", ".", "grid", "(", ")", "\n", "\n", "self", ".", "labels", "=", "[", "\"mirror\"", ",", "\"negative\"", "]", "\n", "self", ".", "n_labels", "=", "2", "\n", "self", ".", "image_panel", "=", "tk", ".", "Label", "(", "frame", ")", "\n", "self", ".", "set_image", "(", "whole_path_list", "[", "self", ".", "index", "]", ")", "\n", "self", ".", "buttons", "=", "[", "]", "\n", "self", ".", "buttons", ".", "append", "(", "\n", "tk", ".", "Button", "(", "frame", ",", "text", "=", "\"mirror\"", ",", "height", "=", "2", ",", "fg", "=", "'blue'", ",", "command", "=", "lambda", "l", "=", "\"mirror\"", ":", "self", ".", "vote", "(", "l", ")", ")", ".", "grid", "(", "\n", "row", "=", "0", ",", "column", "=", "0", ",", "sticky", "=", "'we'", ")", ")", "\n", "self", ".", "buttons", ".", "append", "(", "\n", "tk", ".", "Button", "(", "frame", ",", "text", "=", "\"negative\"", ",", "height", "=", "2", ",", "fg", "=", "'blue'", ",", "command", "=", "lambda", "l", "=", "\"negative\"", ":", "self", ".", "vote", "(", "l", ")", ")", ".", "grid", "(", "\n", "row", "=", "0", ",", "column", "=", "1", ",", "sticky", "=", "'we'", ")", ")", "\n", "self", ".", "buttons", ".", "append", "(", "\n", "tk", ".", "Button", "(", "frame", ",", "text", "=", "\"prev im\"", ",", "height", "=", "2", ",", "fg", "=", "\"green\"", ",", "command", "=", "lambda", "l", "=", "\"\"", ":", "self", ".", "move_prev_image", "(", ")", ")", ".", "grid", "(", "\n", "row", "=", "1", ",", "column", "=", "0", ",", "sticky", "=", "'we'", ")", ")", "\n", "self", ".", "buttons", ".", "append", "(", "\n", "tk", ".", "Button", "(", "frame", ",", "text", "=", "\"next im\"", ",", "height", "=", "2", ",", "fg", "=", "'green'", ",", "command", "=", "lambda", "l", "=", "\"\"", ":", "self", ".", "move_next_image", "(", ")", ")", ".", "grid", "(", "\n", "row", "=", "1", ",", "column", "=", "1", ",", "sticky", "=", "'we'", ")", ")", "\n", "\n", "self", ".", "mirror_count_label", "=", "tk", ".", "Label", "(", "frame", ",", "text", "=", "\"Mirror count: {}\"", ".", "format", "(", "len", "(", "self", ".", "positive_list", ")", ")", ")", "\n", "self", ".", "mirror_count_label", ".", "grid", "(", "row", "=", "2", ",", "column", "=", "self", ".", "n_labels", ",", "sticky", "=", "'we'", ")", "\n", "self", ".", "mirror_tag_label", "=", "tk", ".", "Label", "(", "frame", ",", "text", "=", "\"Mirror tag: {}\"", ".", "format", "(", "self", ".", "get_tag", "(", ")", ")", ")", "\n", "self", ".", "mirror_tag_label", ".", "grid", "(", "row", "=", "1", ",", "column", "=", "self", ".", "n_labels", ",", "sticky", "=", "'we'", ")", "\n", "\n", "progress_string", "=", "\"{}/{}\"", ".", "format", "(", "len", "(", "self", ".", "annotated_paths", ")", ",", "len", "(", "self", ".", "whole_path_list", ")", ")", "\n", "self", ".", "progress_label", "=", "tk", ".", "Label", "(", "frame", ",", "text", "=", "progress_string", ")", "\n", "self", ".", "progress_label", ".", "grid", "(", "row", "=", "0", ",", "column", "=", "self", ".", "n_labels", ",", "sticky", "=", "'we'", ")", "\n", "self", ".", "text_file_name", "=", "tk", ".", "StringVar", "(", ")", "\n", "self", ".", "sorting_label", "=", "tk", ".", "Entry", "(", "root", ",", "state", "=", "'readonly'", ",", "readonlybackground", "=", "'white'", ",", "fg", "=", "'black'", ",", "\n", "textvariable", "=", "self", ".", "text_file_name", ")", "\n", "self", ".", "text_file_name", ".", "set", "(", "\"index {} in folder: {}\"", ".", "format", "(", "self", ".", "index", ",", "self", ".", "whole_path_list", "[", "self", ".", "index", "]", ")", ")", "\n", "tk", ".", "Label", "(", "frame", ",", "text", "=", "\"Go to pic (0 ~ {}):\"", ".", "format", "(", "len", "(", "self", ".", "whole_path_list", ")", "-", "1", ")", ")", ".", "grid", "(", "row", "=", "2", ",", "column", "=", "0", ")", "\n", "\n", "self", ".", "return_", "=", "tk", ".", "IntVar", "(", ")", "# return_-> self.index", "\n", "self", ".", "return_entry", "=", "tk", ".", "Entry", "(", "frame", ",", "width", "=", "6", ",", "textvariable", "=", "self", ".", "return_", ")", "\n", "self", ".", "return_entry", ".", "grid", "(", "row", "=", "2", ",", "column", "=", "1", ",", "sticky", "=", "'we'", ")", "\n", "master", ".", "bind", "(", "'<Return>'", ",", "self", ".", "num_pic_type", ")", "\n", "\n", "self", ".", "sorting_label", ".", "grid", "(", "row", "=", "4", ",", "column", "=", "0", ",", "sticky", "=", "'we'", ",", "columnspan", "=", "self", ".", "n_labels", "+", "1", ")", "\n", "self", ".", "image_panel", ".", "grid", "(", "row", "=", "3", ",", "column", "=", "0", ",", "sticky", "=", "'we'", ",", "columnspan", "=", "self", ".", "n_labels", "+", "1", ")", "\n", "master", ".", "bind", "(", "\"q\"", ",", "self", ".", "press_key_event", ")", "# mirror", "\n", "master", ".", "bind", "(", "\"w\"", ",", "self", ".", "press_key_event", ")", "# negative", "\n", "master", ".", "bind", "(", "'<Left>'", ",", "self", ".", "press_key_event", ")", "\n", "master", ".", "bind", "(", "'<Right>'", ",", "self", ".", "press_key_event", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_tag": [[82, 91], ["None"], "methods", ["None"], ["", "def", "get_tag", "(", "self", ")", ":", "\n", "        ", "current_tag", "=", "\"N/A\"", "\n", "current_path", "=", "self", ".", "whole_path_list", "[", "self", ".", "index", "]", "\n", "if", "current_path", "in", "self", ".", "annotated_paths", ":", "\n", "            ", "if", "current_path", "in", "self", ".", "positive_list", ":", "\n", "                ", "current_tag", "=", "\"mirror\"", "\n", "", "elif", "current_path", "in", "self", ".", "negative_list", ":", "\n", "                ", "current_tag", "=", "\"negative\"", "\n", "", "", "return", "current_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.num_pic_type": [[92, 99], ["classification_tool.ClassificationGUI.return_.get", "classification_tool.ClassificationGUI.progress_label.configure", "classification_tool.ClassificationGUI.text_file_name.set", "classification_tool.ClassificationGUI.mirror_tag_label.configure", "classification_tool.ClassificationGUI.set_image", "len", "len", "classification_tool.ClassificationGUI.get_tag"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.set_image", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_tag"], ["", "def", "num_pic_type", "(", "self", ")", ":", "\n", "        ", "self", ".", "index", "=", "self", ".", "return_", ".", "get", "(", ")", "\n", "progress_string", "=", "\"{}/{}\"", ".", "format", "(", "len", "(", "self", ".", "annotated_paths", ")", ",", "len", "(", "self", ".", "whole_path_list", ")", ")", "\n", "self", ".", "progress_label", ".", "configure", "(", "text", "=", "progress_string", ")", "\n", "self", ".", "text_file_name", ".", "set", "(", "\"index {} in folder: {}\"", ".", "format", "(", "self", ".", "index", ",", "self", ".", "whole_path_list", "[", "self", ".", "index", "]", ")", ")", "\n", "self", ".", "mirror_tag_label", ".", "configure", "(", "text", "=", "\"Mirror tag: {}\"", ".", "format", "(", "self", ".", "get_tag", "(", ")", ")", ")", "\n", "self", ".", "set_image", "(", "self", ".", "whole_path_list", "[", "self", ".", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.move_prev_image": [[100, 117], ["classification_tool.ClassificationGUI.progress_label.configure", "classification_tool.ClassificationGUI.text_file_name.set", "classification_tool.ClassificationGUI.mirror_tag_label.configure", "len", "len", "len", "classification_tool.ClassificationGUI.set_image", "classification_tool.ClassificationGUI.master.quit", "classification_tool.ClassificationGUI.get_tag"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.set_image", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_tag"], ["", "def", "move_prev_image", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Displays the prev image in the paths list AFTER BUTTON CLICK,\n        doesn't update the progress display\n        \"\"\"", "\n", "if", "self", ".", "index", "==", "0", ":", "\n", "            ", "return", "\n", "", "self", ".", "index", "-=", "1", "\n", "progress_string", "=", "\"{}/{}\"", ".", "format", "(", "len", "(", "self", ".", "annotated_paths", ")", ",", "len", "(", "self", ".", "whole_path_list", ")", ")", "\n", "self", ".", "progress_label", ".", "configure", "(", "text", "=", "progress_string", ")", "\n", "self", ".", "text_file_name", ".", "set", "(", "\"index {} in folder: {}\"", ".", "format", "(", "self", ".", "index", ",", "self", ".", "whole_path_list", "[", "self", ".", "index", "]", ")", ")", "\n", "self", ".", "mirror_tag_label", ".", "configure", "(", "text", "=", "\"Mirror tag: {}\"", ".", "format", "(", "self", ".", "get_tag", "(", ")", ")", ")", "\n", "\n", "if", "self", ".", "index", "<", "len", "(", "self", ".", "whole_path_list", ")", ":", "\n", "            ", "self", ".", "set_image", "(", "self", ".", "whole_path_list", "[", "self", ".", "index", "]", ")", "# change path to be out of df", "\n", "", "else", ":", "\n", "            ", "self", ".", "master", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.move_next_image": [[118, 140], ["classification_tool.ClassificationGUI.progress_label.configure", "classification_tool.ClassificationGUI.text_file_name.set", "classification_tool.ClassificationGUI.mirror_tag_label.configure", "classification_tool.ClassificationGUI.get_tag", "tkinter.messagebox.showerror", "len", "len", "len", "classification_tool.ClassificationGUI.set_image", "classification_tool.ClassificationGUI.master.quit", "len", "classification_tool.ClassificationGUI.get_tag"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_tag", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.set_image", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_tag"], ["", "", "def", "move_next_image", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Displays the next image in the paths list AFTER BUTTON CLICK,\n        doesn't update the progress display\n        \"\"\"", "\n", "if", "self", ".", "index", "==", "(", "len", "(", "self", ".", "whole_path_list", ")", "-", "1", ")", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "get_tag", "(", ")", "==", "\"N/A\"", ":", "\n", "            ", "messagebox", ".", "showerror", "(", "\"error\"", ",", "\"please label this sample first!\"", ")", "\n", "return", "\n", "\n", "", "self", ".", "index", "+=", "1", "\n", "progress_string", "=", "\"{}/{}\"", ".", "format", "(", "len", "(", "self", ".", "annotated_paths", ")", ",", "len", "(", "self", ".", "whole_path_list", ")", ")", "\n", "self", ".", "progress_label", ".", "configure", "(", "text", "=", "progress_string", ")", "\n", "\n", "self", ".", "text_file_name", ".", "set", "(", "\"index {} in folder: {}\"", ".", "format", "(", "self", ".", "index", ",", "self", ".", "whole_path_list", "[", "self", ".", "index", "]", ")", ")", "\n", "self", ".", "mirror_tag_label", ".", "configure", "(", "text", "=", "\"Mirror tag: {}\"", ".", "format", "(", "self", ".", "get_tag", "(", ")", ")", ")", "\n", "\n", "if", "self", ".", "index", "<", "len", "(", "self", ".", "whole_path_list", ")", ":", "\n", "            ", "self", ".", "set_image", "(", "self", ".", "whole_path_list", "[", "self", ".", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "master", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.press_key_event": [[141, 150], ["classification_tool.ClassificationGUI.vote", "classification_tool.ClassificationGUI.vote", "classification_tool.ClassificationGUI.move_prev_image", "classification_tool.ClassificationGUI.move_next_image"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.vote", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.vote", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.move_prev_image", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.move_next_image"], ["", "", "def", "press_key_event", "(", "self", ",", "event", ")", ":", "\n", "        ", "if", "event", ".", "keysym", "==", "\"q\"", ":", "\n", "            ", "self", ".", "vote", "(", "\"mirror\"", ")", "\n", "", "elif", "event", ".", "keysym", "==", "\"w\"", ":", "\n", "            ", "self", ".", "vote", "(", "\"negative\"", ")", "\n", "", "elif", "event", ".", "keysym", "==", "\"Left\"", ":", "\n", "            ", "self", ".", "move_prev_image", "(", ")", "\n", "", "elif", "event", ".", "keysym", "==", "\"Right\"", ":", "\n", "            ", "self", ".", "move_next_image", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.vote": [[151, 173], ["classification_tool.ClassificationGUI.mirror_tag_label.configure", "classification_tool.ClassificationGUI.save_progress", "classification_tool.ClassificationGUI.show_next_image", "classification_tool.ClassificationGUI.positive_list.append", "classification_tool.ClassificationGUI.annotated_paths.append", "classification_tool.ClassificationGUI.negative_list.append", "classification_tool.ClassificationGUI.annotated_paths.append", "classification_tool.ClassificationGUI.positive_list.remove", "classification_tool.ClassificationGUI.negative_list.remove", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.save_progress", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.show_next_image"], ["", "", "def", "vote", "(", "self", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        Processes a vote for a label: Initiates the file copying and shows the next image\n        :param label: The label that the user voted for\n        \"\"\"", "\n", "current_path", "=", "self", ".", "whole_path_list", "[", "self", ".", "index", "]", "\n", "if", "current_path", "in", "self", ".", "annotated_paths", ":", "\n", "            ", "if", "current_path", "in", "self", ".", "positive_list", ":", "\n", "                ", "self", ".", "positive_list", ".", "remove", "(", "current_path", ")", "\n", "", "elif", "current_path", "in", "self", ".", "negative_list", ":", "\n", "                ", "self", ".", "negative_list", ".", "remove", "(", "current_path", ")", "\n", "\n", "", "", "if", "label", "==", "\"mirror\"", ":", "\n", "            ", "self", ".", "positive_list", ".", "append", "(", "current_path", ")", "\n", "self", ".", "annotated_paths", ".", "append", "(", "current_path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "negative_list", ".", "append", "(", "current_path", ")", "\n", "self", ".", "annotated_paths", ".", "append", "(", "current_path", ")", "\n", "\n", "", "self", ".", "mirror_tag_label", ".", "configure", "(", "text", "=", "\"Mirror count: {}\"", ".", "format", "(", "len", "(", "self", ".", "positive_list", ")", ")", ")", "\n", "self", ".", "save_progress", "(", ")", "\n", "self", ".", "show_next_image", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.show_next_image": [[174, 188], ["classification_tool.ClassificationGUI.progress_label.configure", "classification_tool.ClassificationGUI.mirror_count_label.configure", "classification_tool.ClassificationGUI.mirror_tag_label.configure", "classification_tool.ClassificationGUI.text_file_name.set", "len", "len", "len", "classification_tool.ClassificationGUI.set_image", "classification_tool.ClassificationGUI.master.quit", "len", "classification_tool.ClassificationGUI.get_tag"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.set_image", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_tag"], ["", "def", "show_next_image", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Displays the next image in the whole_path_list list and updates the progress display\n        \"\"\"", "\n", "self", ".", "index", "+=", "1", "\n", "progress_string", "=", "\"{}/{}\"", ".", "format", "(", "len", "(", "self", ".", "annotated_paths", ")", ",", "len", "(", "self", ".", "whole_path_list", ")", ")", "\n", "self", ".", "progress_label", ".", "configure", "(", "text", "=", "progress_string", ")", "\n", "self", ".", "mirror_count_label", ".", "configure", "(", "text", "=", "len", "(", "self", ".", "positive_list", ")", ")", "\n", "self", ".", "mirror_tag_label", ".", "configure", "(", "text", "=", "\"Mirror tag: {}\"", ".", "format", "(", "self", ".", "get_tag", "(", ")", ")", ")", "\n", "self", ".", "text_file_name", ".", "set", "(", "\"index {} in folder: {}\"", ".", "format", "(", "self", ".", "index", ",", "self", ".", "whole_path_list", "[", "self", ".", "index", "]", ")", ")", "\n", "if", "self", ".", "index", "<", "len", "(", "self", ".", "whole_path_list", ")", ":", "\n", "            ", "self", ".", "set_image", "(", "self", ".", "whole_path_list", "[", "self", ".", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "master", ".", "quit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI._load_image": [[189, 203], ["PIL.Image.open", "img.resize", "int", "int"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_load_image", "(", "path", ")", ":", "\n", "        ", "\"\"\"\n        Loads and resizes an image from a given path using the Pillow library\n        :param path: Path to image\n        :return: Resized or original image \n        \"\"\"", "\n", "image", "=", "Image", ".", "open", "(", "path", ")", "\n", "max_height", "=", "500", "\n", "img", "=", "image", "\n", "s", "=", "img", ".", "size", "\n", "ratio", "=", "max_height", "/", "s", "[", "1", "]", "\n", "image", "=", "img", ".", "resize", "(", "(", "int", "(", "s", "[", "0", "]", "*", "ratio", ")", ",", "int", "(", "s", "[", "1", "]", "*", "ratio", ")", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.set_image": [[204, 213], ["classification_tool.ClassificationGUI._load_image", "PIL.ImageTk.PhotoImage", "classification_tool.ClassificationGUI.image_panel.configure"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI._load_image"], ["", "def", "set_image", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\"\n        Helper function which sets a new image in the image view\n        :param path: path to that image\n        \"\"\"", "\n", "image", "=", "self", ".", "_load_image", "(", "path", ")", "\n", "self", ".", "image_raw", "=", "image", "\n", "self", ".", "image", "=", "ImageTk", ".", "PhotoImage", "(", "image", ")", "\n", "self", ".", "image_panel", ".", "configure", "(", "image", "=", "self", ".", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.save_progress": [[214, 224], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "save_txt", "save_txt", "save_txt", "classification_tool.ClassificationGUI.get_progress"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_progress"], ["", "def", "save_progress", "(", "self", ")", ":", "\n", "        ", "\"\"\"Save annotation progress\"\"\"", "\n", "anotation_progress_save_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "anno_output_folder", ",", "\"classification_progress\"", ")", "\n", "neg_txt_path", "=", "os", ".", "path", ".", "join", "(", "anotation_progress_save_folder", ",", "\"negative_list.txt\"", ")", "\n", "pos_txt_path", "=", "os", ".", "path", ".", "join", "(", "anotation_progress_save_folder", ",", "\"positive_list.txt\"", ")", "\n", "annotated_txt_path", "=", "os", ".", "path", ".", "join", "(", "anotation_progress_save_folder", ",", "\"annotated_list.txt\"", ")", "\n", "save_txt", "(", "neg_txt_path", ",", "self", ".", "negative_list", ")", "\n", "save_txt", "(", "pos_txt_path", ",", "self", ".", "positive_list", ")", "\n", "save_txt", "(", "annotated_txt_path", ",", "self", ".", "annotated_paths", ")", "\n", "self", ".", "get_progress", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.ClassificationGUI.get_progress": [[225, 256], ["os.path.join", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.exists", "list_diff", "read_txt", "read_txt", "read_txt", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.list_diff", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt"], ["", "def", "get_progress", "(", "self", ",", "start_gui", "=", "False", ")", ":", "\n", "        ", "\"\"\"Get annotation progress\"\"\"", "\n", "anotation_progress_save_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "anno_output_folder", ",", "\"classification_progress\"", ")", "\n", "os", ".", "makedirs", "(", "anotation_progress_save_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "error_txt", "=", "os", ".", "path", ".", "join", "(", "anotation_progress_save_folder", ",", "\"negative_list.txt\"", ")", "\n", "correct_txt", "=", "os", ".", "path", ".", "join", "(", "anotation_progress_save_folder", ",", "\"positive_list.txt\"", ")", "\n", "annotated_txt_path", "=", "os", ".", "path", ".", "join", "(", "anotation_progress_save_folder", ",", "\"annotated_list.txt\"", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "error_txt", ")", ":", "\n", "            ", "self", ".", "negative_list", "=", "read_txt", "(", "error_txt", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "negative_list", "=", "[", "]", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "correct_txt", ")", ":", "\n", "            ", "self", ".", "positive_list", "=", "read_txt", "(", "correct_txt", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "positive_list", "=", "[", "]", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "annotated_txt_path", ")", ":", "\n", "            ", "self", ".", "annotated_paths", "=", "read_txt", "(", "annotated_txt_path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "annotated_paths", "=", "[", "]", "\n", "\n", "", "if", "start_gui", ":", "\n", "            ", "self", ".", "index", "=", "len", "(", "self", ".", "annotated_paths", ")", "-", "1", "\n", "if", "self", ".", "index", "==", "-", "1", ":", "\n", "                ", "self", ".", "index", "=", "0", "\n", "\n", "", "", "self", ".", "path_to_annotate", "=", "list_diff", "(", "self", ".", "whole_path_list", ",", "self", ".", "annotated_paths", ")", "\n", "return", "self", ".", "annotated_paths", ",", "self", ".", "path_to_annotate", ",", "self", ".", "negative_list", ",", "self", ".", "positive_list", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classification_tool.save_for_cavt": [[258, 269], ["os.makedirs", "print", "os.path.join", "shutil.copy", "os.path.join", "shutil.copy", "pos_sample_path.split", "pos_sample_path.split", "pos_sample_path.split"], "function", ["None"], ["", "", "def", "save_for_cavt", "(", "pos_list", ",", "cvat_folder", ",", "dataset_name", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "cvat_folder", ",", "exist_ok", "=", "True", ")", "\n", "for", "pos_sample_path", "in", "pos_list", ":", "\n", "        ", "if", "dataset_name", "==", "\"scannet\"", ":", "\n", "            ", "scannet_sample_name", "=", "\"{}_{}\"", ".", "format", "(", "pos_sample_path", ".", "split", "(", "\"/\"", ")", "[", "-", "3", "]", ",", "pos_sample_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "cvat_folder", ",", "scannet_sample_name", ")", "\n", "copy", "(", "pos_sample_path", ",", "save_path", ")", "\n", "", "else", ":", "\n", "            ", "save_path", "=", "os", ".", "path", ".", "join", "(", "cvat_folder", ",", "pos_sample_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "copy", "(", "pos_sample_path", ",", "save_path", ")", "\n", "", "", "print", "(", "\"Samples for CVAT annotation are copied to : {}\"", ".", "format", "(", "cvat_folder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.BasicBlock.__init__": [[37, 54], ["torch.Module.__init__", "mirror3d_resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "mirror3d_resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.__init__", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.conv3x3", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.BasicBlock.forward": [[55, 69], ["mirror3d_resnet.BasicBlock.conv1", "mirror3d_resnet.BasicBlock.bn1", "mirror3d_resnet.BasicBlock.relu", "mirror3d_resnet.BasicBlock.conv2", "mirror3d_resnet.BasicBlock.bn2", "mirror3d_resnet.BasicBlock.relu", "mirror3d_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.Bottleneck.__init__": [[75, 91], ["torch.Module.__init__", "mirror3d_resnet.conv1x1", "norm_layer", "mirror3d_resnet.conv3x3", "norm_layer", "mirror3d_resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.__init__", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.conv1x1", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.conv3x3", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.Bottleneck.forward": [[92, 109], ["mirror3d_resnet.Bottleneck.conv1", "mirror3d_resnet.Bottleneck.bn1", "mirror3d_resnet.Bottleneck.relu", "mirror3d_resnet.Bottleneck.conv2", "mirror3d_resnet.Bottleneck.bn2", "mirror3d_resnet.Bottleneck.relu", "mirror3d_resnet.Bottleneck.conv3", "mirror3d_resnet.Bottleneck.bn3", "mirror3d_resnet.Bottleneck.relu", "mirror3d_resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.ResNet.__init__": [[113, 162], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "mirror3d_resnet.ResNet._make_layer", "mirror3d_resnet.ResNet._make_layer", "mirror3d_resnet.ResNet._make_layer", "mirror3d_resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "mirror3d_resnet.ResNet.modules", "len", "ValueError", "isinstance", "mirror3d_resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.__init__", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "2", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.ResNet._make_layer": [[163, 185], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "mirror3d_resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", "]", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.ResNet._forward_impl": [[186, 200], ["mirror3d_resnet.ResNet.conv1", "mirror3d_resnet.ResNet.bn1", "mirror3d_resnet.ResNet.relu", "mirror3d_resnet.ResNet.maxpool", "mirror3d_resnet.ResNet.layer1", "mirror3d_resnet.ResNet.layer2", "mirror3d_resnet.ResNet.layer3", "mirror3d_resnet.ResNet.layer4", "mirror3d_resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "mirror3d_resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.ResNet.forward": [[201, 203], ["mirror3d_resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.conv3x3": [[22, 26], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.conv1x1": [[28, 31], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet._resnet": [[205, 214], ["mirror3d_resnet.ResNet", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url.pop", "torch.hub.load_state_dict_from_url.pop", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "state_dict", ".", "pop", "(", "\"fc.bias\"", ")", "\n", "state_dict", ".", "pop", "(", "\"fc.weight\"", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.resnet18": [[216, 225], ["mirror3d_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.resnet34": [[227, 236], ["mirror3d_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.resnet50": [[238, 247], ["mirror3d_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "True", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.resnet101": [[249, 258], ["mirror3d_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.resnet152": [[260, 269], ["mirror3d_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.resnext50_32x4d": [[271, 282], ["mirror3d_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.resnext101_32x8d": [[284, 295], ["mirror3d_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.wide_resnet50_2": [[297, 312], ["mirror3d_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.wide_resnet101_2": [[314, 329], ["mirror3d_resnet._resnet"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_Dataset.PosNegEqlDataset.__init__": [[9, 27], ["random.sample", "open", "file.readlines", "os.path.exists", "open", "file.readlines", "os.path.exists", "range", "len", "line.strip", "classifier_Dataset.PosNegEqlDataset.pos_img_list.append", "line.strip", "classifier_Dataset.PosNegEqlDataset.neg_img_list.append", "len", "line.strip", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pos_list_path", ",", "neg_list_path", ",", "transform", ")", ":", "\n", "        ", "with", "open", "(", "pos_list_path", ")", "as", "file", ":", "\n", "            ", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "", "self", ".", "pos_img_list", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "line", ".", "strip", "(", ")", ")", ":", "\n", "                ", "self", ".", "pos_img_list", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "# self.pos_img_list = [line.strip() for line in lines]", "\n", "\n", "", "", "with", "open", "(", "neg_list_path", ")", "as", "file", ":", "\n", "            ", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "", "self", ".", "neg_img_list", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "line", ".", "strip", "(", ")", ")", ":", "\n", "                ", "self", ".", "neg_img_list", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "# self.neg_img_list = [line.strip() for line in lines]", "\n", "", "", "self", ".", "neg_index_to_read", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "self", ".", "neg_img_list", ")", ")", ",", "len", "(", "self", ".", "neg_img_list", ")", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_Dataset.PosNegEqlDataset.__getitem__": [[28, 43], ["random.seed", "PIL.Image.open().convert", "classifier_Dataset.PosNegEqlDataset.transform", "classifier_Dataset.PosNegEqlDataset.neg_index_to_read.pop", "PIL.Image.open().convert", "classifier_Dataset.PosNegEqlDataset.transform", "len", "random.sample", "int", "PIL.Image.open", "range", "len", "PIL.Image.open", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "index", "%", "2", "==", "0", ":", "# get positive sample (label : 1)", "\n", "            ", "img_path", "=", "self", ".", "pos_img_list", "[", "int", "(", "index", "/", "2", ")", "]", "\n", "random", ".", "seed", "(", ")", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "img_path", ",", "img", ",", "1", "\n", "", "else", ":", "# get negative sample (label : 0)", "\n", "            ", "if", "len", "(", "self", ".", "neg_index_to_read", ")", "==", "0", ":", "\n", "                ", "self", ".", "neg_index_to_read", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "self", ".", "neg_img_list", ")", ")", ",", "len", "(", "self", ".", "neg_img_list", ")", ")", "\n", "", "img_id", "=", "self", ".", "neg_index_to_read", ".", "pop", "(", ")", "\n", "img_path", "=", "self", ".", "neg_img_list", "[", "img_id", "]", "\n", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "img_path", ",", "img", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_Dataset.PosNegEqlDataset.__len__": [[44, 46], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "2", "*", "len", "(", "self", ".", "pos_img_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_Dataset.DatasetToLabel.__init__": [[49, 54], ["open", "file.readlines", "line.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "unlabeled_list_path", ",", "transform", ")", ":", "\n", "        ", "with", "open", "(", "unlabeled_list_path", ")", "as", "file", ":", "\n", "            ", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "", "self", ".", "unlabeled_img_list", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_Dataset.DatasetToLabel.__getitem__": [[55, 59], ["PIL.Image.open", "classifier_Dataset.DatasetToLabel.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "self", ".", "unlabeled_img_list", "[", "index", "]", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "return", "self", ".", "unlabeled_img_list", "[", "index", "]", ",", "img", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_Dataset.DatasetToLabel.__len__": [[60, 62], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "unlabeled_img_list", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_get_score.eval_get_score": [[17, 30], ["dict", "enumerate", "dict", "os.path.join", "save_json", "tqdm.tqdm", "model", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.nn.functional.softmax", "enumerate", "sorted", "obj_score[].item", "dict.items", "operator.itemgetter", "time.strftime", "time.localtime"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.save_json"], ["def", "eval_get_score", "(", "args", ",", "val_loader", ",", "criterion", ",", "model", ")", ":", "\n", "    ", "img_score", "=", "dict", "(", ")", "\n", "for", "i", ",", "(", "img_path_list", ",", "images", ",", "_", ")", "in", "enumerate", "(", "tqdm", "(", "val_loader", ")", ")", ":", "\n", "        ", "output", "=", "model", "(", "images", ")", "\n", "output", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "obj_score", "=", "output", "[", ":", ",", "-", "1", "]", "\n", "for", "index", ",", "img_path", "in", "enumerate", "(", "img_path_list", ")", ":", "\n", "            ", "img_score", "[", "img_path", "]", "=", "obj_score", "[", "index", "]", ".", "item", "(", ")", "\n", "\n", "", "", "img_score", "=", "dict", "(", "sorted", "(", "img_score", ".", "items", "(", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ",", "reverse", "=", "True", ")", ")", "\n", "json_save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "json_output_save_folder", ",", "\n", "\"imgPath_score_\"", "+", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ",", "time", ".", "localtime", "(", ")", ")", "+", "\".json\"", ")", "\n", "save_json", "(", "json_save_path", ",", "img_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.main": [[88, 118], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "classifier_train.main_worker"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.main_worker": [[120, 281], ["print", "mirror3d_resnet.resnet50", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torchvision.Normalize", "torchvision.Compose", "PosNegEqlDataset", "torchvision.Compose", "PosNegEqlDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "range", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "print", "torch.init_process_group", "torch.nn.DataParallel().cuda.parameters", "os.path.isfile", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "len", "classifier_train.validate", "print", "classifier_train.adjust_learning_rate", "classifier_train.train", "classifier_train.validate", "print", "logging.info", "writer.add_scalars", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "torch.CrossEntropyLoss", "print", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Resize", "torchvision.ToTensor", "torch.utils.data.distributed.DistributedSampler.set_epoch", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "args.arch.startswith", "args.arch.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.mirror3d_resnet.resnet50", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.validate", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.adjust_learning_rate", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.train", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.validate", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info"], ["", "", "def", "main_worker", "(", "gpu", ",", "n_gpus_per_node", ",", "args", ")", ":", "\n", "    ", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "n_gpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "print", "(", "\"=> using pre-trained model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "resnet50", "(", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "n_gpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "n_gpus_per_node", "-", "1", ")", "/", "n_gpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "if", "args", ".", "arch", ".", "startswith", "(", "'alexnet'", ")", "or", "args", ".", "arch", ".", "startswith", "(", "'vgg'", ")", ":", "\n", "            ", "model", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "features", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "# args.start_epoch = checkpoint['epoch']", "\n", "# best_acc1 = checkpoint['best_acc1']", "\n", "# if args.gpu is not None:", "\n", "#     # best_acc1 may be from a checkpoint from a different GPU", "\n", "#     best_acc1 = best_acc1.to(args.gpu)", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "args", ".", "input_height", ",", "args", ".", "input_width", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "train_dataset", "=", "PosNegEqlDataset", "(", "args", ".", "train_pos_list", ",", "args", ".", "train_neg_list", ",", "train_transform", ")", "\n", "\n", "val_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "args", ".", "input_height", ",", "args", ".", "input_width", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "val_dataset", "=", "PosNegEqlDataset", "(", "args", ".", "val_pos_list", ",", "args", ".", "val_neg_list", ",", "val_transform", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "print", "(", "\"train_loader len :\"", ",", "len", "(", "train_loader", ")", ")", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "val_acc", ",", "val_f_measure_0_3", ",", "val_f_measure_1", ",", "val_recall", ",", "val_precision", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "\n", "args", ")", "\n", "print", "(", "\"validate : val_acc {} val_f_measure_0_3 {} val_f_measure_1 {} val_recall {} val_precision {}\"", ".", "format", "(", "\n", "val_acc", ",", "val_f_measure_0_3", ",", "val_f_measure_1", ",", "val_recall", ",", "val_precision", ")", ")", "\n", "return", "\n", "\n", "", "print", "(", "\"tensorboard : \"", ",", "tb_writer_path", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# evaluate per epoch", "\n", "val_acc", ",", "val_f_measure_0_3", ",", "val_f_measure_1", ",", "val_recall", ",", "val_precision", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "\n", "args", ")", "\n", "print", "(", "\"validate : val_acc {} val_f_measure_0_3 {} val_f_measure_1 {} val_recall {} val_precision {}\"", ".", "format", "(", "\n", "val_acc", ",", "val_f_measure_0_3", ",", "val_f_measure_1", ",", "val_recall", ",", "val_precision", ")", ")", "\n", "logging", ".", "info", "(", "\n", "\"validate : val_acc {} val_f_measure_0_3 {} val_f_measure_1 {} val_recall {} val_precision {}\"", ".", "format", "(", "\n", "val_acc", ",", "val_f_measure_0_3", ",", "val_f_measure_1", ",", "val_recall", ",", "val_precision", ")", ")", "\n", "\n", "writer", ".", "add_scalars", "(", "\"validation info\"", ",", "{", "\n", "'val_acc'", ":", "val_acc", ",", "\n", "'val_f_measure_0_3'", ":", "val_f_measure_0_3", ",", "\n", "'val_f_measure_1'", ":", "val_f_measure_1", ",", "\n", "'val_recall'", ":", "val_recall", ",", "\n", "'val_precision'", ":", "val_precision", "\n", "}", ",", "epoch", ")", "\n", "\n", "# save checkpoint per checkpoint_save_freq", "\n", "if", "epoch", ">", "0", "and", "epoch", "%", "args", ".", "checkpoint_save_freq", "==", "0", ":", "\n", "            ", "checkpoint_save_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_save_folder", ",", "\"epoch_{}_checkpoint.pth.tar\"", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "checkpoint_save_path", ")", "\n", "print", "(", "\"tensorboard : \"", ",", "tb_writer_path", ",", "\"checkpoint saved path : \"", ",", "checkpoint_save_path", ")", "\n", "\n", "# save final checkpoint", "\n", "", "", "checkpoint_save_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_save_folder", ",", "\"checkpoint_final.pth.tar\"", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "checkpoint_save_path", ")", "\n", "print", "(", "\"FINAL tensorboard : \"", ",", "tb_writer_path", ",", "\"checkpoint saved path : \"", ",", "checkpoint_save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.train": [[283, 329], ["model.train", "enumerate", "target.cuda.cuda", "model", "criterion", "model.max", "print", "classifier_train.accuracy", "classifier_train.f_measure", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "writer.add_scalars", "writer.add_scalars", "writer.add_scalars", "writer.add_scalars", "writer.add_scalars", "images.cuda.cuda", "criterion.item", "target.cuda.sum().item", "recall.item", "precision.item", "f_measure_0_3.item", "f_measure_1.item", "criterion.item", "len", "target.cuda.sum", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.train", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.accuracy", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.f_measure"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "for", "i", ",", "(", "_", ",", "images", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "_", ",", "predicted", "=", "output", ".", "max", "(", "1", ")", "\n", "\n", "print", "(", "epoch", "*", "len", "(", "train_loader", ")", "+", "i", ",", "\"batch mean loss : \"", ",", "loss", ".", "item", "(", ")", ",", "\"correct num : \"", ",", "\n", "(", "predicted", "==", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ",", "\"pos_num : \"", ",", "target", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "acc1", "=", "accuracy", "(", "output", ",", "target", ",", "top_k", "=", "(", "1", ",", ")", ")", "\n", "f_measure_0_3", ",", "f_measure_1", ",", "recall", ",", "precision", "=", "f_measure", "(", "predicted", ",", "target", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "writer", ".", "add_scalars", "(", "\"recall\"", ",", "{", "\n", "'recall'", ":", "recall", ".", "item", "(", ")", "\n", "}", ",", "epoch", "*", "len", "(", "train_loader", ")", "+", "i", ")", "# i = iteration", "\n", "\n", "writer", ".", "add_scalars", "(", "\"precision\"", ",", "{", "\n", "'precision'", ":", "precision", ".", "item", "(", ")", "\n", "}", ",", "epoch", "*", "len", "(", "train_loader", ")", "+", "i", ")", "# i = iteration", "\n", "\n", "writer", ".", "add_scalars", "(", "\"f_measure\"", ",", "{", "\n", "'f_measure_0.3'", ":", "f_measure_0_3", ".", "item", "(", ")", ",", "\n", "'f_measure_1'", ":", "f_measure_1", ".", "item", "(", ")", "\n", "}", ",", "epoch", "*", "len", "(", "train_loader", ")", "+", "i", ")", "# i = iteration", "\n", "\n", "writer", ".", "add_scalars", "(", "\"training loss\"", ",", "{", "\n", "'training loss'", ":", "loss", ".", "item", "(", ")", "\n", "}", ",", "epoch", "*", "len", "(", "train_loader", ")", "+", "i", ")", "# i = iteration", "\n", "\n", "writer", ".", "add_scalars", "(", "\"training acc\"", ",", "{", "\n", "'training acc1'", ":", "acc1", "[", "0", "]", "\n", "}", ",", "epoch", "*", "len", "(", "train_loader", ")", "+", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.validate": [[331, 353], ["model.eval", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "torch.tensor().cuda().long", "classifier_train.f_measure", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "float", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "target.cuda.cuda", "model", "model.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "images.cuda.cuda", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.f_measure"], ["", "", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "# switch to evaluate mode", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "predicted_all", "=", "torch", ".", "tensor", "(", "[", "]", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "target_all", "=", "torch", ".", "tensor", "(", "[", "]", ")", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "_", ",", "images", ",", "target", "in", "val_loader", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "images", ")", "\n", "\n", "_", ",", "predicted", "=", "output", ".", "max", "(", "1", ")", "\n", "\n", "predicted_all", "=", "torch", ".", "cat", "(", "(", "predicted_all", ",", "predicted", ")", ",", "0", ")", "\n", "target_all", "=", "torch", ".", "cat", "(", "(", "target_all", ",", "target", ")", ",", "0", ")", "\n", "\n", "", "", "f_measure_0_3", ",", "f_measure_1", ",", "recall", ",", "precision", "=", "f_measure", "(", "predicted_all", ",", "target_all", ")", "\n", "acc", "=", "(", "predicted_all", "==", "target_all", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "float", "(", "len", "(", "target_all", ")", ")", "\n", "return", "acc", ",", "f_measure_0_3", ",", "f_measure_1", ",", "recall", ",", "precision", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.adjust_learning_rate": [[355, 360], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Sets the learning rate to the initial LR decayed by 10 every 30 epochs\"\"\"", "\n", "lr", "=", "args", ".", "lr", "*", "(", "0.1", "**", "(", "epoch", "//", "30", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.accuracy": [[362, 375], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "top_k", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "max_k", "=", "max", "(", "top_k", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "max_k", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "top_k", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.f_measure": [[377, 390], ["predicted_all.cpu().detach().numpy.cpu().detach().numpy", "target_all.cpu().detach().numpy.cpu().detach().numpy", "numpy.logical_and().sum().astype", "numpy.logical_and().sum().astype", "numpy.logical_and().sum().astype", "predicted_all.cpu().detach().numpy.cpu().detach", "target_all.cpu().detach().numpy.cpu().detach", "numpy.logical_and().sum", "numpy.logical_and().sum", "numpy.logical_and().sum", "predicted_all.cpu().detach().numpy.cpu", "target_all.cpu().detach().numpy.cpu", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "function", ["None"], ["", "", "def", "f_measure", "(", "predicted_all", ",", "target_all", ")", ":", "\n", "    ", "predicted_all", "=", "predicted_all", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "target_all", "=", "target_all", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "tp", "=", "np", ".", "logical_and", "(", "(", "predicted_all", "==", "1", ")", ",", "(", "target_all", "==", "1", ")", ")", ".", "sum", "(", ")", ".", "astype", "(", "float", ")", "\n", "fp", "=", "np", ".", "logical_and", "(", "(", "predicted_all", "==", "1", ")", ",", "(", "target_all", "==", "0", ")", ")", ".", "sum", "(", ")", ".", "astype", "(", "float", ")", "\n", "fn", "=", "np", ".", "logical_and", "(", "(", "predicted_all", "==", "0", ")", ",", "(", "target_all", "==", "1", ")", ")", ".", "sum", "(", ")", ".", "astype", "(", "float", ")", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", ")", "\n", "beta", "=", "0.3", "\n", "f_measure_0_3", "=", "(", "(", "1", "+", "beta", "**", "2", ")", "*", "precision", "*", "recall", ")", "/", "(", "(", "beta", "**", "2", ")", "*", "precision", "+", "recall", ")", "\n", "beta", "=", "1", "\n", "f_measure_1", "=", "(", "(", "1", "+", "beta", "**", "2", ")", "*", "precision", "*", "recall", ")", "/", "(", "(", "beta", "**", "2", ")", "*", "precision", "+", "recall", ")", "\n", "return", "f_measure_0_3", ",", "f_measure_1", ",", "recall", ",", "precision", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.visualization.check_sample_info.check_mirror_normal_in_one_json": [[12, 48], ["open", "json.loads", "cv2.imread", "get_pcd_from_rgbd_depthPath", "numpy.array", "get_points_in_mask", "open3d.geometry.PointCloud", "open3d.utility.Vector3dVector", "open3d.geometry.OrientedBoundingBox.create_from_points", "get_mirror_init_plane_from_mirrorbbox", "numpy.mean", "numpy.abs", "open3d.visualization.Visualizer", "o3d.visualization.Visualizer.create_window", "o3d.visualization.Visualizer.add_geometry", "o3d.visualization.Visualizer.add_geometry", "o3d.visualization.Visualizer.add_geometry", "o3d.visualization.Visualizer.run", "o3d.visualization.Visualizer.destroy_window", "j.read", "numpy.stack", "open3d.utility.Vector3dVector", "numpy.array", "get_mesh_by_start_end", "o3d.visualization.Visualizer.get_render_option", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_pcd_from_rgbd_depthPath", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_points_in_mask", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mirror_init_plane_from_mirrorbbox", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.SSIM.create_window", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_mesh_by_start_end"], ["def", "check_mirror_normal_in_one_json", "(", "color_img_path", ",", "mask_img_path", ",", "depth_img_path", ",", "json_path", ",", "f", ")", ":", "\n", "    ", "with", "open", "(", "json_path", ",", "'r'", ")", "as", "j", ":", "\n", "        ", "anno_info", "=", "json", ".", "loads", "(", "j", ".", "read", "(", ")", ")", "\n", "\n", "", "for", "item", "in", "anno_info", ":", "\n", "        ", "instance_index", "=", "item", "[", "\"mask_id\"", "]", "\n", "mask", "=", "cv2", ".", "imread", "(", "mask_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "binary_instance_mask", "=", "(", "mask", "==", "instance_index", ")", "\n", "pcd", "=", "get_pcd_from_rgbd_depthPath", "(", "f", ",", "depth_img_path", ",", "color_img_path", ",", "mirror_mask", "=", "binary_instance_mask", ",", "\n", "color", "=", "[", "0", ",", "0.2", ",", "0.6", "]", ")", "\n", "mirror_normal", "=", "np", ".", "array", "(", "item", "[", "\"normal\"", "]", ")", "\n", "\n", "mirror_points", "=", "get_points_in_mask", "(", "f", ",", "depth_img_path", ",", "mirror_mask", "=", "binary_instance_mask", ")", "\n", "mirror_pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "mirror_pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "mirror_points", ",", "axis", "=", "0", ")", ")", "\n", "mirror_bbox", "=", "o3d", ".", "geometry", ".", "OrientedBoundingBox", ".", "create_from_points", "(", "\n", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "mirror_points", ",", "axis", "=", "0", ")", ")", ")", "\n", "mirror_plane", "=", "get_mirror_init_plane_from_mirrorbbox", "(", "item", "[", "\"plane\"", "]", ",", "mirror_bbox", ")", "\n", "plane_center", "=", "np", ".", "mean", "(", "np", ".", "array", "(", "mirror_plane", ".", "vertices", ")", ",", "axis", "=", "0", ")", "\n", "# get mirror normal ", "\n", "if", "\"mp3d\"", "in", "json_path", ":", "\n", "            ", "vec_len", "=", "2", "\n", "", "else", ":", "\n", "            ", "vec_len", "=", "0.5", "\n", "", "ratio", "=", "np", ".", "abs", "(", "1000", "/", "mirror_normal", "[", "0", "]", ")", "\n", "begin", "=", "plane_center", "\n", "end", "=", "[", "begin", "[", "0", "]", "+", "mirror_normal", "[", "0", "]", "*", "ratio", ",", "begin", "[", "1", "]", "+", "mirror_normal", "[", "1", "]", "*", "ratio", ",", "\n", "begin", "[", "2", "]", "+", "mirror_normal", "[", "2", "]", "*", "ratio", "]", "\n", "vis", "=", "o3d", ".", "visualization", ".", "Visualizer", "(", ")", "\n", "vis", ".", "create_window", "(", ")", "\n", "vis", ".", "add_geometry", "(", "pcd", ")", "\n", "vis", ".", "add_geometry", "(", "mirror_plane", ")", "\n", "vis", ".", "add_geometry", "(", "get_mesh_by_start_end", "(", "begin", ",", "end", ",", "vec_len", "=", "vec_len", ")", ")", "\n", "vis", ".", "get_render_option", "(", ")", ".", "point_size", "=", "1.0", "\n", "vis", ".", "run", "(", ")", "\n", "vis", ".", "destroy_window", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.visualization.other_visualization_tool.visualize_pcd": [[12, 28], ["input", "open3d.io.read_point_cloud", "numpy.array", "print", "print", "print", "open3d.visualization.draw_geometries", "exit", "X.max", "X.min", "Y.max", "Y.min", "Z.max", "Z.min", "X.max", "X.min", "Y.max", "Y.min", "Z.max", "Z.min"], "function", ["None"], ["def", "visualize_pcd", "(", ")", ":", "\n", "    ", "while", "1", ":", "\n", "        ", "input_path", "=", "input", "(", "\"(q : Quit) cloud point path: \"", ")", "\n", "if", "input_path", "==", "\"q\"", ":", "\n", "            ", "exit", "(", "1", ")", "\n", "", "pcd", "=", "o3d", ".", "io", ".", "read_point_cloud", "(", "input_path", ")", "\n", "xyz", "=", "np", ".", "array", "(", "pcd", ".", "points", ")", "\n", "X", "=", "xyz", "[", ":", ",", "0", "]", "\n", "Y", "=", "xyz", "[", ":", ",", "1", "]", "\n", "Z", "=", "xyz", "[", ":", ",", "2", "]", "\n", "\n", "print", "(", "\"X max {:.2f} X min {:.2f} X gap {:.2f}\"", ".", "format", "(", "X", ".", "max", "(", ")", ",", "X", ".", "min", "(", ")", ",", "X", ".", "max", "(", ")", "-", "X", ".", "min", "(", ")", ")", ")", "\n", "print", "(", "\"Y max {:.2f} Y min {:.2f} Y gap {:.2f}\"", ".", "format", "(", "Y", ".", "max", "(", ")", ",", "Y", ".", "min", "(", ")", ",", "Y", ".", "max", "(", ")", "-", "Y", ".", "min", "(", ")", ")", ")", "\n", "print", "(", "\"Z max {:.2f} Z min {:.2f} Z gap {:.2f}\"", ".", "format", "(", "Z", ".", "max", "(", ")", ",", "Z", ".", "min", "(", ")", ",", "Z", ".", "max", "(", ")", "-", "Z", ".", "min", "(", ")", ")", ")", "\n", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "pcd", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.visualization.other_visualization_tool.visualize_pcd_from_rgbd": [[30, 49], ["get_pcd_from_rgbd_depthPath", "print", "numpy.array", "print", "print", "print", "open3d.visualization.draw_geometries", "os.path.exists", "os.path.join", "open3d.io.write_point_cloud", "print", "X.max", "X.min", "Y.max", "Y.min", "Z.max", "Z.min", "X.max", "X.min", "Y.max", "Y.min", "Z.max", "Z.min", "[].split", "color_img_path.split"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.get_pcd_from_rgbd_depthPath"], ["", "", "def", "visualize_pcd_from_rgbd", "(", "depth_img_path", ",", "color_img_path", ",", "f", ",", "save_folder", "=", "\"\"", ")", ":", "\n", "    ", "pcd", "=", "get_pcd_from_rgbd_depthPath", "(", "f", ",", "depth_img_path", ",", "color_img_path", ")", "\n", "\n", "\n", "print", "(", "\"visualizing {} {}\"", ".", "format", "(", "color_img_path", ",", "depth_img_path", ")", ")", "\n", "xyz", "=", "np", ".", "array", "(", "pcd", ".", "points", ")", "\n", "X", "=", "xyz", "[", ":", ",", "0", "]", "\n", "Y", "=", "xyz", "[", ":", ",", "1", "]", "\n", "Z", "=", "xyz", "[", ":", ",", "2", "]", "\n", "\n", "print", "(", "\"X max {:.2f} X min {:.2f} X gap {:.2f}\"", ".", "format", "(", "X", ".", "max", "(", ")", ",", "X", ".", "min", "(", ")", ",", "X", ".", "max", "(", ")", "-", "X", ".", "min", "(", ")", ")", ")", "\n", "print", "(", "\"Y max {:.2f} Y min {:.2f} Y gap {:.2f}\"", ".", "format", "(", "Y", ".", "max", "(", ")", ",", "Y", ".", "min", "(", ")", ",", "Y", ".", "max", "(", ")", "-", "Y", ".", "min", "(", ")", ")", ")", "\n", "print", "(", "\"Z max {:.2f} Z min {:.2f} Z gap {:.2f}\"", ".", "format", "(", "Z", ".", "max", "(", ")", ",", "Z", ".", "min", "(", ")", ",", "Z", ".", "max", "(", ")", "-", "Z", ".", "min", "(", ")", ")", ")", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "pcd", "]", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_folder", ")", ":", "\n", "        ", "pcd_save_path", "=", "os", ".", "path", ".", "join", "(", "save_folder", ",", "\"{}.ply\"", ".", "format", "(", "color_img_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", ")", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "pcd_save_path", ",", "pcd", ")", "\n", "print", "(", "\"pcd saved to {}\"", ".", "format", "(", "pcd_save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.visualization.html_table2latex.resize_and_add_padding": [[48, 53], ["im.resize.resize", "PIL.Image.new", "Image.new.paste"], "function", ["None"], ["def", "resize_and_add_padding", "(", "im", ",", "desired_size", ")", ":", "\n", "    ", "im", "=", "im", ".", "resize", "(", "(", "desired_size", "[", "1", "]", ",", "desired_size", "[", "1", "]", ")", ")", "\n", "new_im", "=", "Image", ".", "new", "(", "\"RGB\"", ",", "(", "desired_size", "[", "0", "]", ",", "desired_size", "[", "1", "]", ")", ",", "\"WHITE\"", ")", "\n", "new_im", ".", "paste", "(", "im", ",", "(", "(", "desired_size", "[", "0", "]", "-", "desired_size", "[", "1", "]", ")", "//", "2", ",", "0", ")", ")", "\n", "return", "new_im", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.visualization.html_table2latex.extract_table_tags_from_html_and_merge": [[55, 67], ["os.path.isdir", "os.listdir", "open", "f.read", "bs4.BeautifulSoup", "bs4.BeautifulSoup.findAll", "os.path.join"], "function", ["None"], ["", "def", "extract_table_tags_from_html_and_merge", "(", "path", ")", ":", "\n", "    ", "table_list", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "for", "file", "in", "files", ":", "\n", "            ", "if", "file", "[", "-", "5", ":", "]", "!=", "\".html\"", ":", "\n", "                ", "continue", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "file", ")", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "html", "=", "f", ".", "read", "(", ")", "\n", "soup", "=", "bs4", ".", "BeautifulSoup", "(", "html", ",", "'html.parser'", ")", "\n", "table_list", "+=", "soup", ".", "findAll", "(", "'table'", ")", "\n", "", "", "", "return", "table_list", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.visualization.html_table2latex.convert_html_tables_to_latex": [[69, 111], ["os.path.join", "os.makedirs", "zipfile.ZipFile", "os.walk", "zipfile.ZipFile.close", "shutil.rmtree", "open", "f.write", "path.replace", "table.findAll", "table.findAll", "enumerate", "os.path.join", "zipfile.ZipFile.write", "latex_str.replace.replace", "PIL.Image.open", "os.path.join", "os.path.join", "PIL.Image.open", "latex_str.replace.replace", "os.path.join", "os.path.join", "title.text.strip", "os.path.join", "html_table2latex.resize_and_add_padding", "resize_and_add_padding.save", "shutil.copyfile", "os.path.join", "str", "table.findAll", "id.replace"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.visualization.html_table2latex.resize_and_add_padding"], ["", "def", "convert_html_tables_to_latex", "(", "html_path", ",", "tables", ",", "ids", ",", "output_path", ")", ":", "\n", "    ", "final_latex_str", "=", "\"\"", "\n", "output_new_path", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "\"figure\"", ",", "\"new_result_vis\"", ")", "\n", "os", ".", "makedirs", "(", "output_new_path", ",", "exist_ok", "=", "True", ")", "\n", "for", "table", "in", "tables", ":", "\n", "        ", "id", "=", "table", ".", "findAll", "(", "'tr'", ")", "[", "4", "]", ".", "td", ".", "p", ".", "next_sibling", ".", "text", "\n", "if", "id", "in", "ids", ":", "\n", "            ", "latex_str", "=", "LATEX_TEMPLATE", "\n", "titles", "=", "table", ".", "findAll", "(", "'p'", ")", "\n", "dataset_name", "=", "\"nyu\"", "\n", "del", "titles", "[", "3", "]", "\n", "del", "titles", "[", "5", "]", "\n", "del", "titles", "[", "5", "]", "\n", "for", "title", "in", "titles", ":", "\n", "                ", "latex_str", "=", "latex_str", ".", "replace", "(", "'example-text'", ",", "title", ".", "text", ".", "strip", "(", ")", ",", "1", ")", "\n", "if", "title", ".", "text", "==", "\"MP3D-mesh rendered depth\"", ":", "\n", "                    ", "dataset_name", "=", "\"mp3d\"", "\n", "\n", "", "", "images", "=", "table", ".", "findAll", "(", "'img'", ")", "\n", "standard_img_size", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "html_path", ",", "images", "[", "0", "]", "[", "'src'", "]", ")", ")", ".", "size", "\n", "for", "img_index", ",", "img", "in", "enumerate", "(", "images", ")", ":", "\n", "                ", "img_name", "=", "dataset_name", "+", "'_'", "+", "id", ".", "replace", "(", "\".png\"", ",", "\"\"", ")", "+", "'_'", "+", "str", "(", "img_index", ")", "+", "\".png\"", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "html_path", ",", "img", "[", "'src'", "]", ")", "\n", "dest_img_path", "=", "os", ".", "path", ".", "join", "(", "output_new_path", ",", "img_name", ")", "\n", "tmp_img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "if", "tmp_img", ".", "size", "[", "0", "]", "==", "tmp_img", ".", "size", "[", "1", "]", ":", "\n", "                    ", "new_img", "=", "resize_and_add_padding", "(", "tmp_img", ",", "standard_img_size", ")", "\n", "new_img", ".", "save", "(", "dest_img_path", ")", "\n", "", "else", ":", "\n", "                    ", "copyfile", "(", "img_path", ",", "dest_img_path", ")", "\n", "", "latex_str", "=", "latex_str", ".", "replace", "(", "'example-image'", ",", "os", ".", "path", ".", "join", "(", "\"figure\"", ",", "\"new_result_vis\"", ",", "img_name", ")", ",", "1", ")", "\n", "", "final_latex_str", "=", "final_latex_str", "+", "latex_str", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "\"main.tex\"", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "LATEX_HEADER", "+", "final_latex_str", "+", "LATEX_FOOTER", ")", "\n", "", "z", "=", "zipfile", ".", "ZipFile", "(", "'latex_tables.zip'", ",", "'w'", ")", "\n", "for", "path", ",", "dirname", ",", "filenames", "in", "os", ".", "walk", "(", "output_path", ")", ":", "\n", "        ", "file_path", "=", "path", ".", "replace", "(", "output_path", ",", "\"\"", ")", "\n", "for", "filename", "in", "filenames", ":", "\n", "            ", "z", ".", "write", "(", "os", ".", "path", ".", "join", "(", "path", ",", "filename", ")", ",", "os", ".", "path", ".", "join", "(", "file_path", ",", "filename", ")", ")", "\n", "", "", "z", ".", "close", "(", ")", "\n", "rmtree", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.visualization.result_visualization.ResultVisualization.generate_pcd_for_vis": [[14, 64], ["result_visualization.ResultVisualization.get_list_to_process", "os.makedirs", "cv2.imread", "numpy.unique", "read_txt", "item.strip().split", "result_visualization.ResultVisualization.get_and_check_focal_length", "result_visualization.ResultVisualization.generate_pcd_for_vis.generate_and_save_ply"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_list_to_process", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.plane_annotation.plane_annotation_tool.PlaneAnnotationTool.get_and_check_focal_length"], ["    ", "def", "generate_pcd_for_vis", "(", "self", ",", "input_txt", ")", ":", "\n", "        ", "\"\"\"\n        Output:\n            \"point cloud\": Saved under self.output_folder.\n        \"\"\"", "\n", "\n", "import", "open3d", "as", "o3d", "\n", "# Pack as a function to better support Matterport3d ply generation", "\n", "def", "generate_and_save_ply", "(", "color_img_path", ",", "depth_img_path", ",", "mask_img_path", ",", "pcd_save_folder", ",", "f", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "pcd_save_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "mask", "=", "cv2", ".", "imread", "(", "mask_img_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "#  Get pcd and masked RGB image for each instance", "\n", "for", "instance_index", "in", "np", ".", "unique", "(", "mask", ")", ":", "\n", "                ", "if", "instance_index", "==", "0", ":", "# background", "\n", "                    ", "continue", "\n", "", "save_name", "=", "color_img_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\"_idx_\"", "+", "str", "(", "instance_index", ")", "\n", "pcd_save_path", "=", "os", ".", "path", ".", "join", "(", "pcd_save_folder", ",", "\"{}.ply\"", ".", "format", "(", "save_name", ")", ")", "\n", "binary_instance_mask", "=", "(", "mask", "==", "instance_index", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "pcd_save_path", ")", "and", "not", "self", ".", "overwrite", ":", "\n", "                    ", "print", "(", "pcd_save_path", ",", "\"exist! continue\"", ")", "\n", "return", "\n", "\n", "# Get pcd for the instance", "\n", "", "pcd", "=", "get_pcd_from_rgbd_depthPath", "(", "f", ",", "depth_img_path", ",", "color_img_path", ",", "mirror_mask", "=", "binary_instance_mask", ")", "\n", "\n", "# Get mirror plane for the instance", "\n", "mirror_points", "=", "get_points_in_mask", "(", "f", ",", "depth_img_path", ",", "mirror_mask", "=", "binary_instance_mask", ")", "\n", "mirror_pcd", "=", "o3d", ".", "geometry", ".", "PointCloud", "(", ")", "\n", "mirror_pcd", ".", "points", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "mirror_points", ",", "axis", "=", "0", ")", ")", "\n", "mirror_bbox", "=", "o3d", ".", "geometry", ".", "OrientedBoundingBox", ".", "create_from_points", "(", "\n", "o3d", ".", "utility", ".", "Vector3dVector", "(", "np", ".", "stack", "(", "mirror_points", ",", "axis", "=", "0", ")", ")", ")", "\n", "\n", "o3d", ".", "io", ".", "write_point_cloud", "(", "pcd_save_path", ",", "pcd", ")", "\n", "print", "(", "\"point cloud saved  to :\"", ",", "os", ".", "path", ".", "abspath", "(", "pcd_save_path", ")", ")", "\n", "\n", "\n", "", "", "process_list", "=", "self", ".", "get_list_to_process", "(", "read_txt", "(", "input_txt", ")", ")", "\n", "for", "item", "in", "process_list", ":", "\n", "            ", "if", "len", "(", "item", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "!=", "5", ":", "\n", "                ", "continue", "\n", "", "color_img_path", ",", "depth_img_path", ",", "mask_img_path", ",", "pcd_save_folder", ",", "f", "=", "item", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "color_img_path", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "depth_img_path", ")", ":", "\n", "                ", "print", "(", "\"invalid line : \"", ",", "item", ")", "\n", "print", "(", "\"input txt format: [input color image path] [input depth image path] [input integer mask path] \"", "\n", "\"[folder to save the output pointcloud] [focal length of this sample]\"", ")", "\n", "continue", "\n", "", "f", "=", "self", ".", "get_and_check_focal_length", "(", "f", ",", "item", ")", "\n", "generate_and_save_ply", "(", "color_img_path", ",", "depth_img_path", ",", "mask_img_path", ",", "pcd_save_folder", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.dataset.gen_symlink.generate_symlinks": [[7, 29], ["tqdm.tqdm", "print", "read_txt", "item.split", "os.path.join", "os.path.join", "os.makedirs", "os.system", "read_txt", "os.path.split", "os.path.exists", "print", "os.path.abspath", "os.path.abspath", "read_txt", "print"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt"], ["def", "generate_symlinks", "(", "unzipped_folder_path", ")", ":", "\n", "    ", "if", "\"nyu\"", "in", "unzipped_folder_path", ":", "\n", "        ", "symlink_info", "=", "read_txt", "(", "\"mirror3d/dataset/symlink_infer/nyu_symlink.txt\"", ")", "\n", "", "elif", "\"mp3d\"", "in", "unzipped_folder_path", ":", "\n", "        ", "symlink_info", "=", "read_txt", "(", "\"mirror3d/dataset/symlink_infer/mp3d_symlink.txt\"", ")", "\n", "", "elif", "\"scannet\"", "in", "unzipped_folder_path", ":", "\n", "        ", "symlink_info", "=", "read_txt", "(", "\"mirror3d/dataset/symlink_infer/scannet_symlink.txt\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Can't find nyu/ mp3d/ scannet in the unzip folder path, please input a valid --unzipped_folder_path\"", ")", "\n", "\n", "", "for", "item", "in", "tqdm", "(", "symlink_info", ")", ":", "\n", "        ", "src_path", ",", "to_link_path", "=", "item", ".", "split", "(", ")", "\n", "src_path", "=", "os", ".", "path", ".", "join", "(", "unzipped_folder_path", ",", "src_path", ")", "\n", "to_link_path", "=", "os", ".", "path", ".", "join", "(", "unzipped_folder_path", ",", "to_link_path", ")", "\n", "to_link_folder", "=", "os", ".", "path", ".", "split", "(", "to_link_path", ")", "[", "0", "]", "\n", "os", ".", "makedirs", "(", "to_link_folder", ",", "exist_ok", "=", "True", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "src_path", ")", ":", "\n", "            ", "print", "(", "\"source path {} not exists!\"", ".", "format", "(", "src_path", ")", ")", "\n", "continue", "\n", "", "command", "=", "\"ln -s {} {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "src_path", ")", ",", "os", ".", "path", ".", "abspath", "(", "to_link_path", ")", ")", "\n", "os", ".", "system", "(", "command", ")", "\n", "", "print", "(", "\"Symlink generation finished!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.dataset.gen_refinedD_from_delta.gen_refinedD_from_deltaD": [[9, 58], ["os.path.join", "os.path.join", "os.path.join", "os.makedirs", "tqdm.tqdm", "print", "os.path.join", "os.path.join", "os.path.join", "os.makedirs", "tqdm.tqdm", "print", "os.path.join", "os.path.join", "os.path.join", "os.makedirs", "tqdm.tqdm", "print", "i.strip", "one_delta_path.replace", "one_delta_path.replace", "os.makedirs", "cv2.imwrite", "i.strip", "rreplace", "cv2.imread", "one_delta_path.replace", "one_delta_path.replace", "one_delta_path.replace", "os.makedirs", "cv2.imwrite", "i.strip", "one_delta_path.replace", "one_delta_path.replace", "os.makedirs", "cv2.imwrite", "os.popen().readlines", "cv2.imread", "cv2.imread", "refined_d.astype", "os.popen().readlines", "one_delta_path.replace", "refined_d.astype", "os.popen().readlines", "cv2.imread", "cv2.imread", "refined_d.astype", "os.path.split", "cv2.imread", "cv2.imread", "os.path.split", "os.path.split", "os.popen", "os.popen", "os.popen"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.rreplace"], ["def", "gen_refinedD_from_deltaD", "(", "unzipped_folder_path", ",", "mask_version", ")", ":", "\n", "    ", "if", "\"mp3d\"", "in", "unzipped_folder_path", ":", "\n", "        ", "raw_d_folder", "=", "os", ".", "path", ".", "join", "(", "unzipped_folder_path", ",", "\"raw_meshD\"", ")", "\n", "delta_img_folder", "=", "os", ".", "path", ".", "join", "(", "unzipped_folder_path", ",", "\"delta_depth_{}\"", ".", "format", "(", "mask_version", ")", ")", "\n", "ref_d_folder", "=", "os", ".", "path", ".", "join", "(", "unzipped_folder_path", ",", "\"refined_meshD_{}\"", ".", "format", "(", "mask_version", ")", ")", "\n", "delta_d_list", "=", "[", "i", ".", "strip", "(", ")", "for", "i", "in", "os", ".", "popen", "(", "\"find {} -type f\"", ".", "format", "(", "delta_img_folder", ")", ")", ".", "readlines", "(", ")", "]", "\n", "os", ".", "makedirs", "(", "ref_d_folder", ",", "exist_ok", "=", "True", ")", "\n", "for", "one_delta_path", "in", "tqdm", "(", "delta_d_list", ")", ":", "\n", "            ", "one_raw_d_path", "=", "one_delta_path", ".", "replace", "(", "\"delta_depth_{}\"", ".", "format", "(", "mask_version", ")", ",", "\"raw_meshD\"", ")", "\n", "refined_d", "=", "cv2", ".", "imread", "(", "one_raw_d_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "+", "cv2", ".", "imread", "(", "one_delta_path", ",", "\n", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "one_ref_d_path", "=", "one_delta_path", ".", "replace", "(", "\"delta_depth_{}\"", ".", "format", "(", "mask_version", ")", ",", "\n", "\"refined_meshD_{}\"", ".", "format", "(", "mask_version", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "one_ref_d_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "cv2", ".", "imwrite", "(", "one_ref_d_path", ",", "refined_d", ".", "astype", "(", "np", ".", "uint16", ")", ")", "\n", "", "print", "(", "\"refined depth saved to:\"", ",", "ref_d_folder", ")", "\n", "\n", "raw_d_folder", "=", "os", ".", "path", ".", "join", "(", "unzipped_folder_path", ",", "\"raw_sensorD\"", ")", "\n", "delta_img_folder", "=", "os", ".", "path", ".", "join", "(", "unzipped_folder_path", ",", "\"delta_depth_{}\"", ".", "format", "(", "mask_version", ")", ")", "\n", "ref_d_folder", "=", "os", ".", "path", ".", "join", "(", "unzipped_folder_path", ",", "\"refined_sensorD_{}\"", ".", "format", "(", "mask_version", ")", ")", "\n", "delta_d_list", "=", "[", "i", ".", "strip", "(", ")", "for", "i", "in", "os", ".", "popen", "(", "\"find {} -type f\"", ".", "format", "(", "delta_img_folder", ")", ")", ".", "readlines", "(", ")", "]", "\n", "os", ".", "makedirs", "(", "ref_d_folder", ",", "exist_ok", "=", "True", ")", "\n", "for", "one_delta_path", "in", "tqdm", "(", "delta_d_list", ")", ":", "\n", "            ", "one_mask_path", "=", "rreplace", "(", "one_delta_path", ".", "replace", "(", "\"delta_depth_{}\"", ".", "format", "(", "mask_version", ")", ",", "\"mirror_instance_mask_{}\"", ".", "format", "(", "mask_version", ")", ")", ",", "\"d\"", ",", "\"i\"", ")", "\n", "mirror_mask", "=", "cv2", ".", "imread", "(", "one_mask_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "one_raw_sensor_d_path", "=", "one_delta_path", ".", "replace", "(", "\"delta_depth_{}\"", ".", "format", "(", "mask_version", ")", ",", "\"raw_sensorD\"", ")", "\n", "one_ref_mesh_d_path", "=", "one_delta_path", ".", "replace", "(", "\"delta_depth_{}\"", ".", "format", "(", "mask_version", ")", ",", "\n", "\"refined_meshD_{}\"", ".", "format", "(", "mask_version", ")", ")", "\n", "refined_d", "=", "cv2", ".", "imread", "(", "one_raw_sensor_d_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "*", "(", "(", "mirror_mask", "==", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "+", "cv2", ".", "imread", "(", "one_ref_mesh_d_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "*", "(", "(", "mirror_mask", ">", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "one_ref_sensor_d_path", "=", "one_delta_path", ".", "replace", "(", "\"delta_depth_{}\"", ".", "format", "(", "mask_version", ")", ",", "\n", "\"refined_sensorD_{}\"", ".", "format", "(", "mask_version", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "one_ref_sensor_d_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "cv2", ".", "imwrite", "(", "one_ref_sensor_d_path", ",", "refined_d", ".", "astype", "(", "np", ".", "uint16", ")", ")", "\n", "", "print", "(", "\"refined depth saved to:\"", ",", "ref_d_folder", ")", "\n", "", "else", ":", "\n", "        ", "raw_d_folder", "=", "os", ".", "path", ".", "join", "(", "unzipped_folder_path", ",", "\"raw_sensorD\"", ")", "\n", "delta_img_folder", "=", "os", ".", "path", ".", "join", "(", "unzipped_folder_path", ",", "\"delta_depth_{}\"", ".", "format", "(", "mask_version", ")", ")", "\n", "ref_d_folder", "=", "os", ".", "path", ".", "join", "(", "unzipped_folder_path", ",", "\"refined_sensorD_{}\"", ".", "format", "(", "mask_version", ")", ")", "\n", "delta_d_list", "=", "[", "i", ".", "strip", "(", ")", "for", "i", "in", "os", ".", "popen", "(", "\"find {} -type f\"", ".", "format", "(", "delta_img_folder", ")", ")", ".", "readlines", "(", ")", "]", "\n", "os", ".", "makedirs", "(", "ref_d_folder", ",", "exist_ok", "=", "True", ")", "\n", "for", "one_delta_path", "in", "tqdm", "(", "delta_d_list", ")", ":", "\n", "            ", "one_raw_d_path", "=", "one_delta_path", ".", "replace", "(", "\"delta_depth_{}\"", ".", "format", "(", "mask_version", ")", ",", "\"raw_sensorD\"", ")", "\n", "refined_d", "=", "cv2", ".", "imread", "(", "one_raw_d_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "+", "cv2", ".", "imread", "(", "one_delta_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "one_ref_d_path", "=", "one_delta_path", ".", "replace", "(", "\"delta_depth_{}\"", ".", "format", "(", "mask_version", ")", ",", "\n", "\"refined_sensorD_{}\"", ".", "format", "(", "mask_version", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "split", "(", "one_ref_d_path", ")", "[", "0", "]", ",", "exist_ok", "=", "True", ")", "\n", "cv2", ".", "imwrite", "(", "one_ref_d_path", ",", "refined_d", ".", "astype", "(", "np", ".", "uint16", ")", ")", "\n", "", "print", "(", "\"refined depth saved to:\"", ",", "ref_d_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.mirror3dnet.run_mirror3dnet.main": [[24, 124], ["mirror3d_lib.config.config.get_cfg", "mirror3d_lib.config.config.get_cfg.merge_from_file", "mirror3d_lib.data.datasets.register_mirror3d_coco.register_mirror3d_coco_instances", "int", "os.path.exists", "os.path.exists", "os.path.join", "os.makedirs", "mirror3d_lib.engine.defaults.Mirror3dTrainer", "mirror3d_lib.engine.defaults.Mirror3dTrainer.resume_or_load", "os.path.join", "mirror3d_lib.engine.defaults.Mirror3dTrainer.train", "[].split", "[].split", "mirror3d_lib.data.datasets.register_mirror3d_coco.register_mirror3d_coco_instances", "int", "int", "print", "args.config.find", "args.config.find", "args.config.find", "args.config.find", "args.config.find", "time.strftime", "os.path.exists", "os.makedirs", "print", "mirror3d_lib.engine.defaults.Mirror3dTrainer.build_model", "detectron2.checkpoint.DetectionCheckpointer().resume_or_load", "mirror3d_lib.engine.defaults.Mirror3dTrainer.test", "open", "numpy.load", "time.localtime", "os.path.join", "contextlib.redirect_stdout", "print", "mirror3d_lib.config.config.get_cfg.REF_DEPTH_TO_REFINE.split", "detectron2.checkpoint.DetectionCheckpointer", "mirror3d_lib.config.config.get_cfg.dump", "args.coco_train.split", "args.coco_val.split"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.config.config.get_cfg", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.datasets.register_mirror3d_coco.register_mirror3d_coco_instances", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.classifier.classifier_train.train", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.datasets.register_mirror3d_coco.register_mirror3d_coco_instances", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.engine.defaults.Mirror3dTrainer.test"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "cfg", "=", "get_cfg", "(", ")", "\n", "cfg", ".", "merge_from_file", "(", "args", ".", "config", ")", "\n", "\n", "train_name", "=", "args", ".", "coco_train", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "val_name", "=", "args", ".", "coco_val", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "if", "not", "args", ".", "eval", ":", "\n", "        ", "register_mirror3d_coco_instances", "(", "train_name", ",", "{", "}", ",", "args", ".", "coco_train", ",", "args", ".", "coco_train_root", ")", "\n", "", "register_mirror3d_coco_instances", "(", "val_name", ",", "{", "}", ",", "args", ".", "coco_val", ",", "args", ".", "coco_val_root", ")", "\n", "\n", "cfg", ".", "TRAIN_COCO_JSON", "=", "args", ".", "coco_train", "\n", "cfg", ".", "VAL_COCO_JSON", "=", "args", ".", "coco_val", "\n", "cfg", ".", "TRAIN_IMG_ROOT", "=", "args", ".", "coco_train_root", "\n", "cfg", ".", "VAL_IMG_ROOT", "=", "args", ".", "coco_val_root", "\n", "cfg", ".", "TRAIN_NAME", "=", "train_name", "\n", "cfg", ".", "VAL_NAME", "=", "val_name", "\n", "cfg", ".", "DATASETS", ".", "TRAIN", "=", "[", "train_name", "]", "\n", "cfg", ".", "DATASETS", ".", "TEST", "=", "[", "val_name", "]", "\n", "cfg", ".", "ANCHOR_NORMAL_NYP", "=", "args", ".", "anchor_normal_npy", "\n", "cfg", ".", "ANCHOR_NORMAL_CLASS_NUM", "=", "np", ".", "load", "(", "cfg", ".", "ANCHOR_NORMAL_NYP", ")", ".", "shape", "[", "0", "]", "\n", "cfg", ".", "REFINED_DEPTH", "=", "args", ".", "refined_depth", "\n", "cfg", ".", "MESH_DEPTH", "=", "args", ".", "mesh_depth", "\n", "cfg", ".", "FOCAL_LENGTH", "=", "int", "(", "args", ".", "coco_focal_len", ")", "\n", "cfg", ".", "DEPTH_SHIFT", "=", "args", ".", "depth_shift", "\n", "cfg", ".", "EVAL_HEIGHT", "=", "args", ".", "input_height", "\n", "cfg", ".", "EVAL_WIDTH", "=", "args", ".", "input_width", "\n", "cfg", ".", "INPUT", ".", "MIN_SIZE_TRAIN", "=", "(", "args", ".", "input_height", ")", "\n", "cfg", ".", "INPUT", ".", "MIN_SIZE_TEST", "=", "args", ".", "input_height", "\n", "cfg", ".", "INPUT", ".", "MAX_SIZE_TRAIN", "=", "(", "args", ".", "input_width", ")", "\n", "cfg", ".", "INPUT", ".", "MAX_SIZE_TEST", "=", "args", ".", "input_width", "\n", "cfg", ".", "SOLVER", ".", "IMS_PER_BATCH", "=", "args", ".", "batch_size", "\n", "cfg", ".", "SOLVER", ".", "MAX_ITER", "=", "args", ".", "num_epochs", "*", "500", "\n", "cfg", ".", "SOLVER", ".", "STEPS", "=", "(", "int", "(", "args", ".", "num_epochs", "*", "350", ")", ",", "int", "(", "args", ".", "num_epochs", "*", "400", ")", ")", "\n", "cfg", ".", "SOLVER", ".", "BASE_LR", "=", "args", ".", "learning_rate", "\n", "cfg", ".", "SOLVER", ".", "CHECKPOINT_PERIOD", "=", "args", ".", "checkpoint_save_freq", "\n", "cfg", ".", "TEST", ".", "EVAL_PERIOD", "=", "args", ".", "checkpoint_save_freq", "\n", "cfg", ".", "MODEL", ".", "WEIGHTS", "=", "args", ".", "resume_checkpoint_path", "\n", "cfg", ".", "EVAL", "=", "args", ".", "eval", "\n", "cfg", ".", "REF_MODE", "=", "args", ".", "ref_mode", "\n", "cfg", ".", "EVAL_SAVE_DEPTH", "=", "args", ".", "eval_save_depth", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "to_ref_txt", ")", ":", "\n", "        ", "cfg", ".", "REF_DEPTH_TO_REFINE", "=", "args", ".", "to_ref_txt", "\n", "cfg", ".", "EVAL_INPUT_REF_DEPTH", "=", "True", "\n", "cfg", ".", "EVAL_SAVE_DEPTH", "=", "True", "\n", "print", "(", "\"eval depth for : \"", ",", "cfg", ".", "REF_DEPTH_TO_REFINE", ")", "\n", "\n", "# Create output folder ", "\n", "", "if", "args", ".", "config", ".", "find", "(", "\"mirror3dnet_normal_config.yml\"", ")", ">", "0", ":", "\n", "        ", "method_name", "=", "\"m3n_normal\"", "\n", "", "if", "args", ".", "config", ".", "find", "(", "\"mirror3dnet_config.yml\"", ")", ">", "0", ":", "\n", "        ", "method_name", "=", "\"m3n_full\"", "\n", "", "if", "args", ".", "config", ".", "find", "(", "\"planercnn_config.yml\"", ")", ">", "0", ":", "\n", "        ", "method_name", "=", "\"planercnn\"", "\n", "", "if", "args", ".", "config", ".", "find", "(", "\"mirror3dnet_30normal_config.yml\"", ")", ">", "0", ":", "\n", "        ", "method_name", "=", "\"ablation_border_30\"", "\n", "", "if", "args", ".", "config", ".", "find", "(", "\"mirror3dnet_70normal_config.yml\"", ")", ">", "0", ":", "\n", "        ", "method_name", "=", "\"ablation_border_70\"", "\n", "", "if", "args", ".", "refined_depth", ":", "\n", "        ", "depth_tag", "=", "\"refD\"", "\n", "", "else", ":", "\n", "        ", "depth_tag", "=", "\"rawD\"", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "resume_checkpoint_path", ")", ":", "\n", "        ", "resume_tag", "=", "\"resume\"", "\n", "", "else", ":", "\n", "        ", "resume_tag", "=", "\"scratch\"", "\n", "\n", "", "output_folder_name", "=", "\"{}_{}_{}\"", ".", "format", "(", "method_name", ",", "depth_tag", ",", "resume_tag", ")", "+", "\"_\"", "+", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "cfg", ".", "OUTPUT_DIR", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_directory", ",", "output_folder_name", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "OUTPUT_DIR", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "cfg", ".", "EVAL", ":", "\n", "        ", "cfg", ".", "EVAL_SAVE_DEPTH", "=", "True", "\n", "eval_output_tag", "=", "\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "cfg", ".", "REF_DEPTH_TO_REFINE", ")", ":", "\n", "            ", "method_tag", "=", "cfg", ".", "REF_DEPTH_TO_REFINE", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "cfg", ".", "OUTPUT_DIR", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "method_tag", ")", "\n", "", "os", ".", "makedirs", "(", "cfg", ".", "OUTPUT_DIR", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "\"eval result saved  to : \"", ",", "cfg", ".", "OUTPUT_DIR", ")", "\n", "model", "=", "Mirror3dTrainer", ".", "build_model", "(", "cfg", ")", "\n", "DetectionCheckpointer", "(", "model", ",", "save_dir", "=", "cfg", ".", "OUTPUT_DIR", ")", ".", "resume_or_load", "(", "\n", "cfg", ".", "MODEL", ".", "WEIGHTS", ",", "resume", "=", "args", ".", "resume", "\n", ")", "\n", "res", "=", "Mirror3dTrainer", ".", "test", "(", "cfg", ",", "model", ")", "\n", "\n", "return", "res", "\n", "\n", "", "\"\"\"\n    If you'd like to do anything fancier than the standard training logic,\n    consider writing your own training loop (see plain_train_net.py) or\n    subclassing the trainer.\n    \"\"\"", "\n", "\n", "trainer", "=", "Mirror3dTrainer", "(", "cfg", ")", "\n", "trainer", ".", "resume_or_load", "(", "resume", "=", "args", ".", "resume", ")", "\n", "\n", "yml_save_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"training_config.yml\"", ")", "\n", "with", "open", "(", "yml_save_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "with", "redirect_stdout", "(", "f", ")", ":", "print", "(", "cfg", ".", "dump", "(", ")", ")", "\n", "\n", "", "return", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.modeling.depth_predict.Depth.__init__": [[19, 93], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.nn.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_output_channels", "=", "1", ")", ":", "\n", "        ", "super", "(", "Depth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_output_channels", "=", "num_output_channels", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "128", ")", ",", "\n", "# nn.BatchNorm2d(128, eps=0.001, momentum=0.01),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "128", ")", ",", "\n", "# nn.BatchNorm2d(128, eps=0.001, momentum=0.01),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "128", ")", ",", "\n", "# nn.BatchNorm2d(128, eps=0.001, momentum=0.01),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "128", ")", ",", "\n", "# nn.BatchNorm2d(128, eps=0.001, momentum=0.01),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "128", ")", ",", "\n", "# nn.BatchNorm2d(128, eps=0.001, momentum=0.01),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "deconv1", "=", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "128", ")", ",", "\n", "# nn.BatchNorm2d(128, eps=0.001, momentum=0.01),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "deconv2", "=", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "128", ")", ",", "\n", "# nn.BatchNorm2d(128, eps=0.001, momentum=0.01),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "deconv3", "=", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "128", ")", ",", "\n", "# nn.BatchNorm2d(128, eps=0.001, momentum=0.01),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "deconv4", "=", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "128", ")", ",", "\n", "# nn.BatchNorm2d(128, eps=0.001, momentum=0.01),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "deconv5", "=", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "GroupNorm", "(", "32", ",", "64", ")", ",", "\n", "# nn.BatchNorm2d(64, eps=0.001, momentum=0.01),", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "depth_pred", "=", "nn", ".", "Conv2d", "(", "64", ",", "num_output_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "crop", "=", "True", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.modeling.depth_predict.Depth.forward": [[94, 115], ["depth_predict.Depth.deconv1", "depth_predict.Depth.deconv2", "depth_predict.Depth.deconv3", "depth_predict.Depth.deconv4", "depth_predict.Depth.deconv5", "depth_predict.Depth.depth_pred", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "depth_predict.Depth.conv1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sum", "len", "print", "item.squeeze", "depth_predict.Depth.conv2", "depth_predict.Depth.conv3", "depth_predict.Depth.conv4", "depth_predict.Depth.conv5", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "enumerate", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "x[].squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feature_maps", ",", "gt_depths", ",", "istraining", ")", ":", "\n", "\n", "\n", "        ", "x", "=", "self", ".", "deconv1", "(", "self", ".", "conv1", "(", "feature_maps", "[", "\"p6\"", "]", ")", ")", "\n", "if", "x", ".", "shape", "[", "2", "]", "!=", "feature_maps", "[", "\"p5\"", "]", ".", "shape", "[", "2", "]", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", ",", ":", "feature_maps", "[", "\"p5\"", "]", ".", "shape", "[", "2", "]", ",", ":", "feature_maps", "[", "\"p5\"", "]", ".", "shape", "[", "3", "]", "]", "\n", "", "x", "=", "self", ".", "deconv2", "(", "torch", ".", "cat", "(", "[", "self", ".", "conv2", "(", "feature_maps", "[", "\"p5\"", "]", ")", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "deconv3", "(", "torch", ".", "cat", "(", "[", "self", ".", "conv3", "(", "feature_maps", "[", "\"p4\"", "]", ")", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "deconv4", "(", "torch", ".", "cat", "(", "[", "self", ".", "conv4", "(", "feature_maps", "[", "\"p3\"", "]", ")", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "deconv5", "(", "torch", ".", "cat", "(", "[", "self", ".", "conv5", "(", "feature_maps", "[", "\"p2\"", "]", ")", ",", "x", "]", ",", "dim", "=", "1", ")", ")", "\n", "x", "=", "self", ".", "depth_pred", "(", "x", ")", "#  torch.Size([1, 1, 240, 320])", "\n", "x", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x", ",", "size", "=", "gt_depths", "[", "0", "]", ".", "shape", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "depth_loss", "=", "sum", "(", "[", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "x", "[", "idx", "]", ".", "squeeze", "(", ")", "-", "gt_depths", "[", "idx", "]", ")", ")", "/", "torch", ".", "clamp", "(", "(", "(", "gt_depths", "[", "idx", "]", ">", "1e-4", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", ",", "min", "=", "1", ")", "for", "idx", ",", "one_gt", "in", "enumerate", "(", "gt_depths", ")", "]", ")", "/", "len", "(", "gt_depths", ")", "\n", "if", "torch", ".", "isnan", "(", "depth_loss", ")", ":", "\n", "            ", "print", "(", "\"NaN\"", ")", "\n", "\n", "", "if", "istraining", ":", "\n", "            ", "return", "{", "\"depth_estimate_loss\"", ":", "depth_loss", "}", "\n", "", "else", ":", "\n", "            ", "return", "[", "item", ".", "squeeze", "(", ")", "for", "item", "in", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.modeling.depth_predict.calcXYZModule": [[118, 175], ["config.getRanges", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "depth_predict.planeXYZModule", "torch.cat.transpose().transpose().transpose", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "range", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.transpose().transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.transpose().transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat.transpose().transpose().transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "int", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "masks.sum", "XYZ_np.unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.cat.transpose", "torch.cat.transpose", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.round", "torch.round", "torch.round", "torch.round", "torch.round", "torch.cat.transpose().transpose", "torch.cat.transpose().transpose", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.zeros().cuda.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.transpose", "torch.cat.transpose", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.modeling.depth_predict.planeXYZModule"], ["", "", "", "def", "calcXYZModule", "(", "config", ",", "camera", ",", "detections", ",", "masks", ",", "depth_np", ",", "return_individual", "=", "False", ",", "debug_type", "=", "0", ")", ":", "\n", "    ", "\"\"\"Compute a global coordinate map from plane detections\"\"\"", "\n", "ranges", "=", "config", ".", "getRanges", "(", "camera", ")", "\n", "ranges_ori", "=", "ranges", "\n", "zeros", "=", "torch", ".", "zeros", "(", "3", ",", "(", "config", ".", "IMAGE_MAX_DIM", "-", "config", ".", "IMAGE_MIN_DIM", ")", "//", "2", ",", "config", ".", "IMAGE_MAX_DIM", ")", ".", "cuda", "(", ")", "\n", "ranges", "=", "torch", ".", "cat", "(", "[", "zeros", ",", "ranges", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", ",", "zeros", "]", ",", "dim", "=", "1", ")", "\n", "XYZ_np", "=", "ranges", "*", "depth_np", "\n", "\n", "if", "len", "(", "detections", ")", "==", "0", ":", "\n", "        ", "detection_mask", "=", "torch", ".", "zeros", "(", "(", "config", ".", "IMAGE_MAX_DIM", ",", "config", ".", "IMAGE_MAX_DIM", ")", ")", ".", "cuda", "(", ")", "\n", "if", "return_individual", ":", "\n", "            ", "return", "XYZ_np", ",", "detection_mask", ",", "[", "]", "\n", "", "else", ":", "\n", "            ", "return", "XYZ_np", ",", "detection_mask", "\n", "", "pass", "\n", "\n", "", "plane_parameters", "=", "detections", "[", ":", ",", "6", ":", "9", "]", "\n", "\n", "XYZ", "=", "torch", ".", "ones", "(", "(", "3", ",", "config", ".", "IMAGE_MAX_DIM", ",", "config", ".", "IMAGE_MAX_DIM", ")", ")", ".", "cuda", "(", ")", "*", "10", "\n", "depthMask", "=", "torch", ".", "zeros", "(", "(", "config", ".", "IMAGE_MAX_DIM", ",", "config", ".", "IMAGE_MAX_DIM", ")", ")", ".", "cuda", "(", ")", "\n", "planeXYZ", "=", "planeXYZModule", "(", "ranges_ori", ",", "plane_parameters", ",", "width", "=", "config", ".", "IMAGE_MAX_DIM", ",", "height", "=", "config", ".", "IMAGE_MIN_DIM", ")", "\n", "planeXYZ", "=", "planeXYZ", ".", "transpose", "(", "2", ",", "3", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "zeros", "=", "torch", ".", "zeros", "(", "3", ",", "(", "config", ".", "IMAGE_MAX_DIM", "-", "config", ".", "IMAGE_MIN_DIM", ")", "//", "2", ",", "config", ".", "IMAGE_MAX_DIM", ",", "int", "(", "planeXYZ", ".", "shape", "[", "-", "1", "]", ")", ")", ".", "cuda", "(", ")", "\n", "planeXYZ", "=", "torch", ".", "cat", "(", "[", "zeros", ",", "planeXYZ", ",", "zeros", "]", ",", "dim", "=", "1", ")", "\n", "\n", "one_hot", "=", "True", "\n", "if", "one_hot", ":", "\n", "        ", "for", "detectionIndex", "in", "range", "(", "len", "(", "detections", ")", ")", ":", "\n", "            ", "mask", "=", "masks", "[", "detectionIndex", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "mask_binary", "=", "torch", ".", "round", "(", "mask", ")", "\n", "pass", "\n", "", "if", "config", ".", "FITTING_TYPE", ">=", "2", ":", "\n", "                ", "if", "(", "torch", ".", "norm", "(", "planeXYZ", "[", ":", ",", ":", ",", ":", ",", "detectionIndex", "]", "-", "XYZ_np", ",", "dim", "=", "0", ")", "*", "mask_binary", ")", ".", "sum", "(", ")", "/", "torch", ".", "clamp", "(", "mask_binary", ".", "sum", "(", ")", ",", "min", "=", "1e-4", ")", ">", "0.5", ":", "\n", "                    ", "mask_binary", "=", "torch", ".", "zeros", "(", "mask_binary", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "pass", "\n", "", "pass", "\n", "", "mask_binary", "=", "mask_binary", "*", "(", "planeXYZ", "[", "1", ",", ":", ",", ":", ",", "detectionIndex", "]", "<", "XYZ", "[", "1", "]", ")", ".", "float", "(", ")", "\n", "XYZ", "=", "planeXYZ", "[", ":", ",", ":", ",", ":", ",", "detectionIndex", "]", "*", "mask_binary", "+", "XYZ", "*", "(", "1", "-", "mask_binary", ")", "\n", "depthMask", "=", "torch", ".", "max", "(", "depthMask", ",", "mask", ")", "\n", "continue", "\n", "", "XYZ", "=", "XYZ", "*", "torch", ".", "round", "(", "depthMask", ")", "+", "XYZ_np", "*", "(", "1", "-", "torch", ".", "round", "(", "depthMask", ")", ")", "\n", "", "else", ":", "\n", "        ", "background_mask", "=", "torch", ".", "clamp", "(", "1", "-", "masks", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", ",", "min", "=", "0", ")", "\n", "all_masks", "=", "torch", ".", "cat", "(", "[", "background_mask", ",", "masks", "]", ",", "dim", "=", "0", ")", "\n", "all_XYZ", "=", "torch", ".", "cat", "(", "[", "XYZ_np", ".", "unsqueeze", "(", "-", "1", ")", ",", "planeXYZ", "]", ",", "dim", "=", "-", "1", ")", "\n", "XYZ", "=", "(", "all_XYZ", ".", "transpose", "(", "2", ",", "3", ")", ".", "transpose", "(", "1", ",", "2", ")", "*", "all_masks", ")", ".", "sum", "(", "1", ")", "\n", "depthMask", "=", "torch", ".", "ones", "(", "depthMask", ".", "shape", ")", ".", "cuda", "(", ")", "\n", "pass", "\n", "\n", "", "if", "debug_type", "==", "2", ":", "\n", "        ", "XYZ", "=", "XYZ_np", "\n", "pass", "\n", "\n", "", "if", "return_individual", ":", "\n", "        ", "return", "XYZ", ",", "depthMask", ",", "planeXYZ", ".", "transpose", "(", "2", ",", "3", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "return", "XYZ", ",", "depthMask", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.modeling.depth_predict.planeXYZModule": [[178, 193], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "planeNormals.transpose", "torch.norm.squeeze", "torch.clamp.unsqueeze", "ranges.unsqueeze"], "function", ["None"], ["", "def", "planeXYZModule", "(", "ranges", ",", "planes", ",", "width", ",", "height", ",", "max_depth", "=", "10", ")", ":", "\n", "    ", "\"\"\"Compute plane XYZ from plane parameters\n    ranges: K^(-1)x\n    planes: plane parameters\n    \n    Returns:\n    plane depthmaps\n    \"\"\"", "\n", "planeOffsets", "=", "torch", ".", "norm", "(", "planes", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "planeNormals", "=", "planes", "/", "torch", ".", "clamp", "(", "planeOffsets", ",", "min", "=", "1e-4", ")", "\n", "normalXYZ", "=", "torch", ".", "matmul", "(", "ranges", ",", "planeNormals", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "normalXYZ", "[", "normalXYZ", "==", "0", "]", "=", "1e-4", "\n", "planeDepths", "=", "planeOffsets", ".", "squeeze", "(", "-", "1", ")", "/", "normalXYZ", "\n", "planeDepths", "=", "torch", ".", "clamp", "(", "planeDepths", ",", "min", "=", "0", ",", "max", "=", "max_depth", ")", "\n", "return", "planeDepths", ".", "unsqueeze", "(", "-", "1", ")", "*", "ranges", ".", "unsqueeze", "(", "2", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.meta_arch.rcnn.Mirror3d_GeneralizedRCNN.__init__": [[30, 54], ["torch.nn.Module.__init__", "detectron2.modeling.backbone.build_backbone", "detectron2.modeling.proposal_generator.build_proposal_generator", "depth_predict.Depth", "detectron2.modeling.roi_heads.build_roi_heads", "rcnn.Mirror3d_GeneralizedRCNN.register_buffer", "rcnn.Mirror3d_GeneralizedRCNN.register_buffer", "rcnn.Mirror3d_GeneralizedRCNN.backbone.output_shape", "rcnn.Mirror3d_GeneralizedRCNN.backbone.output_shape", "len", "len", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "build_backbone", "(", "cfg", ")", "\n", "self", ".", "proposal_generator", "=", "build_proposal_generator", "(", "cfg", ",", "self", ".", "backbone", ".", "output_shape", "(", ")", ")", "\n", "self", ".", "depth_predictor", "=", "Depth", "(", ")", "\n", "self", ".", "roi_heads", "=", "build_roi_heads", "(", "cfg", ",", "self", ".", "backbone", ".", "output_shape", "(", ")", ")", "\n", "self", ".", "vis_period", "=", "cfg", ".", "VIS_PERIOD", "\n", "self", ".", "input_format", "=", "cfg", ".", "INPUT", ".", "FORMAT", "\n", "self", ".", "anchor_normal_class_num", "=", "cfg", ".", "ANCHOR_NORMAL_CLASS_NUM", "\n", "self", ".", "depth_shift", "=", "cfg", ".", "DEPTH_SHIFT", "\n", "self", ".", "inverse_depth", "=", "cfg", ".", "INVERSE_DEPTH", "\n", "self", ".", "RGBD_INPUT", "=", "cfg", ".", "RGBD_INPUT", "\n", "self", ".", "DEPTH_EST", "=", "cfg", ".", "DEPTH_EST", "\n", "self", ".", "ANCHOR_CLS", "=", "cfg", ".", "ANCHOR_CLS", "\n", "self", ".", "ANCHOR_REG", "=", "cfg", ".", "ANCHOR_REG", "\n", "self", ".", "OBJECT_SEG", "=", "cfg", ".", "OBJECT_SEG", "\n", "self", ".", "OBJECT_CLS", "=", "cfg", ".", "OBJECT_CLS", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "OBJECT_BBOX_REG", "=", "cfg", ".", "OBJECT_BBOX_REG", "\n", "\n", "assert", "len", "(", "cfg", ".", "MODEL", ".", "PIXEL_MEAN", ")", "==", "len", "(", "cfg", ".", "MODEL", ".", "PIXEL_STD", ")", "\n", "self", ".", "register_buffer", "(", "\"pixel_mean\"", ",", "torch", ".", "Tensor", "(", "cfg", ".", "MODEL", ".", "PIXEL_MEAN", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "register_buffer", "(", "\"pixel_std\"", ",", "torch", ".", "Tensor", "(", "cfg", ".", "MODEL", ".", "PIXEL_STD", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.meta_arch.rcnn.Mirror3d_GeneralizedRCNN.device": [[55, 58], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pixel_mean", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.meta_arch.rcnn.Mirror3d_GeneralizedRCNN.visualize_training": [[59, 93], ["detectron2.utils.events.get_event_storage", "zip", "detectron2.data.detection_utils.convert_image_to_rgb", "Visualizer", "v_gt.overlay_instances.overlay_instances.overlay_instances", "v_gt.overlay_instances.overlay_instances.get_image", "min", "Visualizer", "v_pred.overlay_instances.overlay_instances.overlay_instances", "v_pred.overlay_instances.overlay_instances.get_image", "numpy.concatenate", "vis_img.transpose.transpose.transpose", "detectron2.utils.events.get_event_storage.put_image", "detectron2.data.detection_utils.convert_image_to_rgb.permute", "len", "prop.proposal_boxes[].tensor.cpu().numpy", "prop.proposal_boxes[].tensor.cpu"], "methods", ["None"], ["", "def", "visualize_training", "(", "self", ",", "batched_inputs", ",", "proposals", ")", ":", "\n", "        ", "\"\"\"\n        A function used to visualize images and proposals. It shows ground truth\n        bounding boxes on the original image and up to 20 predicted object\n        proposals on the original image. Users can implement different\n        visualization functions for different models.\n\n        Args:\n            batched_inputs (list): a list that contains input to the model.\n            proposals (list): a list that contains predicted proposals. Both\n                batched_inputs and proposals should have the same length.\n        \"\"\"", "\n", "from", "detectron2", ".", "utils", ".", "visualizer", "import", "Visualizer", "\n", "\n", "storage", "=", "get_event_storage", "(", ")", "\n", "max_vis_prop", "=", "20", "\n", "\n", "for", "input", ",", "prop", "in", "zip", "(", "batched_inputs", ",", "proposals", ")", ":", "\n", "            ", "img", "=", "input", "[", "\"image\"", "]", "\n", "img", "=", "convert_image_to_rgb", "(", "img", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ",", "self", ".", "input_format", ")", "\n", "v_gt", "=", "Visualizer", "(", "img", ",", "None", ")", "\n", "v_gt", "=", "v_gt", ".", "overlay_instances", "(", "boxes", "=", "input", "[", "\"instances\"", "]", ".", "gt_boxes", ")", "\n", "anno_img", "=", "v_gt", ".", "get_image", "(", ")", "\n", "box_size", "=", "min", "(", "len", "(", "prop", ".", "proposal_boxes", ")", ",", "max_vis_prop", ")", "\n", "v_pred", "=", "Visualizer", "(", "img", ",", "None", ")", "\n", "v_pred", "=", "v_pred", ".", "overlay_instances", "(", "\n", "boxes", "=", "prop", ".", "proposal_boxes", "[", "0", ":", "box_size", "]", ".", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "prop_img", "=", "v_pred", ".", "get_image", "(", ")", "\n", "vis_img", "=", "np", ".", "concatenate", "(", "(", "anno_img", ",", "prop_img", ")", ",", "axis", "=", "1", ")", "\n", "vis_img", "=", "vis_img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "vis_name", "=", "\"Left: GT bounding boxes;  Right: Predicted proposals\"", "\n", "storage", ".", "put_image", "(", "vis_name", ",", "vis_img", ")", "\n", "break", "# only visualize one image in a batch", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.meta_arch.rcnn.Mirror3d_GeneralizedRCNN.forward": [[94, 170], ["rcnn.Mirror3d_GeneralizedRCNN.preprocess_image", "rcnn.Mirror3d_GeneralizedRCNN.backbone", "rcnn.Mirror3d_GeneralizedRCNN.roi_heads", "losses.update", "rcnn.Mirror3d_GeneralizedRCNN.inference", "rcnn.Mirror3d_GeneralizedRCNN.depth_predictor", "losses.update", "rcnn.Mirror3d_GeneralizedRCNN.proposal_generator", "detector_losses.pop", "detector_losses.pop", "detector_losses.pop", "detector_losses.pop", "detector_losses.pop", "losses.update", "torch.clamp().to", "x[].to", "detectron2.utils.events.get_event_storage", "torch.clamp", "x[].to", "rcnn.Mirror3d_GeneralizedRCNN.visualize_training", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.meta_arch.rcnn.Mirror3d_GeneralizedRCNN.preprocess_image", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.inference", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.meta_arch.rcnn.Mirror3d_GeneralizedRCNN.visualize_training"], ["", "", "def", "forward", "(", "self", ",", "batched_inputs", ")", ":", "# chris // run here", "\n", "        ", "\"\"\"\n        Args:\n            batched_inputs: a list, batched outputs of :class:`Mirror3d_DatasetMapper` .\n                Each item in the list contains the inputs for one image.\n                For now, each item in the list is a dict that contains:\n\n                * image: Tensor, image in (C, H, W) format.\n                * instances (optional): groundtruth :class:`Instances`\n                * proposals (optional): :class:`Instances`, precomputed proposals.\n\n                Other information that's included in the original dicts, such as:\n\n                * \"height\", \"width\" (int): the output resolution of the model, used in inference.\n                  See :meth:`postprocess` for details.\n\n        Returns:\n            list[dict]:\n                Each dict is the output for one input image.\n                The dict contains one key \"instances\" whose value is a :class:`Instances`.\n                The :class:`Instances` object has the following keys:\n                \"pred_boxes\", \"pred_classes\", \"scores\", \"pred_masks\", \"pred_keypoints\"\n        \"\"\"", "\n", "# self.training = True #  debug", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "self", ".", "inference", "(", "batched_inputs", ")", "\n", "\n", "", "images", "=", "self", ".", "preprocess_image", "(", "batched_inputs", ")", "\n", "if", "self", ".", "DEPTH_EST", ":", "\n", "            ", "gt_depths", "=", "[", "torch", ".", "clamp", "(", "x", "[", "\"depth_image\"", "]", ",", "min", "=", "1e-4", ")", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "# !!! important check here normalize depth", "\n", "", "if", "self", ".", "inverse_depth", ":", "\n", "            ", "gt_depths", "=", "[", "1.0", "/", "torch", ".", "clamp", "(", "gt_depth", ",", "min", "=", "1e-4", ")", "for", "gt_depth", "in", "gt_depths", "]", "\n", "\n", "", "if", "\"instances\"", "in", "batched_inputs", "[", "0", "]", ":", "#  input here ", "\n", "            ", "try", ":", "\n", "                ", "gt_instances", "=", "[", "x", "[", "\"instances\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "", "except", ":", "\n", "                ", "gt_instances", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "gt_instances", "=", "None", "\n", "\n", "", "features", "=", "self", ".", "backbone", "(", "images", ".", "tensor", ")", "\n", "\n", "\n", "losses", "=", "{", "}", "\n", "\n", "if", "self", ".", "DEPTH_EST", ":", "\n", "            ", "depth_estimate_loss", "=", "self", ".", "depth_predictor", "(", "features", ",", "gt_depths", ",", "self", ".", "training", ")", "\n", "losses", ".", "update", "(", "depth_estimate_loss", ")", "\n", "\n", "", "if", "self", ".", "proposal_generator", ":", "#! get 1000/ 2000 proposals + use 256 proposals among thousands of proposals for rpn_loss;", "\n", "            ", "proposals", ",", "proposal_losses", "=", "self", ".", "proposal_generator", "(", "images", ",", "features", ",", "gt_instances", ")", "\n", "", "else", ":", "\n", "            ", "assert", "\"proposals\"", "in", "batched_inputs", "[", "0", "]", "\n", "proposals", "=", "[", "x", "[", "\"proposals\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "proposal_losses", "=", "{", "}", "\n", "", "_", ",", "detector_losses", "=", "self", ".", "roi_heads", "(", "images", ",", "features", ",", "proposals", ",", "gt_instances", ",", "self", ".", "anchor_normal_class_num", ")", "\n", "if", "not", "self", ".", "ANCHOR_CLS", ":", "\n", "            ", "detector_losses", ".", "pop", "(", "\"anchor_cls\"", ")", "\n", "", "if", "not", "self", ".", "ANCHOR_REG", ":", "\n", "            ", "detector_losses", ".", "pop", "(", "\"anchor_residual_reg\"", ")", "\n", "", "if", "not", "self", ".", "OBJECT_CLS", ":", "\n", "            ", "detector_losses", ".", "pop", "(", "\"loss_cls\"", ")", "\n", "", "if", "not", "self", ".", "OBJECT_SEG", ":", "\n", "            ", "detector_losses", ".", "pop", "(", "\"loss_mask\"", ")", "\n", "", "if", "not", "self", ".", "OBJECT_BBOX_REG", ":", "\n", "            ", "detector_losses", ".", "pop", "(", "\"loss_box_reg\"", ")", "\n", "", "else", ":", "\n", "            ", "losses", ".", "update", "(", "proposal_losses", ")", "\n", "if", "self", ".", "vis_period", ">", "0", ":", "\n", "                ", "storage", "=", "get_event_storage", "(", ")", "\n", "if", "storage", ".", "iter", "%", "self", ".", "vis_period", "==", "0", ":", "\n", "                    ", "self", ".", "visualize_training", "(", "batched_inputs", ",", "proposals", ")", "\n", "\n", "", "", "", "losses", ".", "update", "(", "detector_losses", ")", "\n", "return", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.meta_arch.rcnn.Mirror3d_GeneralizedRCNN.inference": [[171, 233], ["rcnn.Mirror3d_GeneralizedRCNN.preprocess_image", "rcnn.Mirror3d_GeneralizedRCNN.backbone", "rcnn.Mirror3d_GeneralizedRCNN.depth_predictor", "rcnn.Mirror3d_GeneralizedRCNN.roi_heads", "rcnn.Mirror3d_GeneralizedRCNN.roi_heads.forward_with_given_boxes", "torch.tensor().to", "torch.clamp().to", "rcnn.Mirror3d_GeneralizedRCNN.proposal_generator", "x.to", "rcnn.Mirror3d_GeneralizedRCNN._postprocess", "x[].to", "torch.tensor", "torch.clamp"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.meta_arch.rcnn.Mirror3d_GeneralizedRCNN.preprocess_image", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.meta_arch.rcnn.Mirror3d_GeneralizedRCNN._postprocess"], ["", "def", "inference", "(", "self", ",", "batched_inputs", ",", "detected_instances", "=", "None", ",", "do_postprocess", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Run inference on the given inputs.\n\n        Args:\n            batched_inputs (list[dict]): same as in :meth:`forward`\n            detected_instances (None or list[Instances]): if not None, it\n                contains an `Instances` object per image. The `Instances`\n                object contains \"pred_boxes\" and \"pred_classes\" which are\n                known boxes in the image.\n                The inference will then skip the detection of bounding boxes,\n                and only predict other per-ROI outputs.\n            do_postprocess (bool): whether to apply post-processing on the outputs.\n\n        Returns:\n            same as in :meth:`forward`.\n        \"\"\"", "\n", "assert", "not", "self", ".", "training", "\n", "\n", "images", "=", "self", ".", "preprocess_image", "(", "batched_inputs", ")", "\n", "features", "=", "self", ".", "backbone", "(", "images", ".", "tensor", ")", "\n", "\n", "img_name_list", "=", "[", "]", "\n", "gt_bbox", "=", "[", "]", "\n", "gt_depths", "=", "[", "]", "\n", "\n", "if", "\"file_name\"", "in", "batched_inputs", "[", "0", "]", ":", "\n", "            ", "img_name_list", "=", "[", "x", "[", "\"file_name\"", "]", "for", "x", "in", "batched_inputs", "]", "\n", "", "if", "\"annotations\"", "in", "batched_inputs", "[", "0", "]", ":", "\n", "            ", "gt_bbox", "=", "[", "torch", ".", "tensor", "(", "x", "[", "\"annotations\"", "]", "[", "0", "]", "[", "\"bbox\"", "]", ")", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "# !!! evalution final return", "\n", "", "if", "\"depth_image\"", "in", "batched_inputs", "[", "0", "]", ":", "\n", "            ", "gt_depths", "=", "[", "torch", ".", "clamp", "(", "x", "[", "\"depth_image\"", "]", ",", "min", "=", "1e-4", ")", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "\n", "", "if", "self", ".", "DEPTH_EST", ":", "\n", "            ", "pred_depth_list", "=", "self", ".", "depth_predictor", "(", "features", ",", "gt_depths", ",", "self", ".", "training", ")", "\n", "if", "self", ".", "inverse_depth", ":", "\n", "                ", "pred_depth_list", "=", "[", "(", "1.0", "/", "pred_depth", ")", "*", "self", ".", "depth_shift", "for", "pred_depth", "in", "pred_depth_list", "]", "\n", "", "else", ":", "\n", "                ", "pred_depth_list", "=", "[", "pred_depth", "*", "self", ".", "depth_shift", "for", "pred_depth", "in", "pred_depth_list", "]", "\n", "", "", "else", ":", "\n", "            ", "pred_depth_list", "=", "[", "]", "\n", "\n", "", "if", "not", "self", ".", "OBJECT_BBOX_REG", ":", "\n", "            ", "return", "None", ",", "pred_depth_list", "\n", "\n", "", "results", "=", "None", "\n", "if", "detected_instances", "is", "None", ":", "\n", "            ", "if", "self", ".", "proposal_generator", ":", "\n", "                ", "proposals", ",", "_", "=", "self", ".", "proposal_generator", "(", "images", ",", "features", ",", "None", ")", "# ! get 1000 / 2000 proposal", "\n", "", "else", ":", "\n", "                ", "assert", "\"proposals\"", "in", "batched_inputs", "[", "0", "]", "\n", "proposals", "=", "[", "x", "[", "\"proposals\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "", "results", "=", "self", ".", "roi_heads", "(", "images", ",", "features", ",", "proposals", ",", "None", ")", "\n", "", "else", ":", "\n", "            ", "detected_instances", "=", "[", "x", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "detected_instances", "]", "\n", "results", "=", "self", ".", "roi_heads", ".", "forward_with_given_boxes", "(", "features", ",", "detected_instances", ")", "\n", "\n", "\n", "", "if", "do_postprocess", ":", "\n", "            ", "return", "Mirror3d_GeneralizedRCNN", ".", "_postprocess", "(", "results", ",", "batched_inputs", ",", "images", ".", "image_sizes", ",", "self", ".", "cfg", ".", "MASK_ON_OTHER_SIZE", ")", ",", "pred_depth_list", "\n", "", "else", ":", "\n", "            ", "return", "results", ",", "pred_depth_list", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.meta_arch.rcnn.Mirror3d_GeneralizedRCNN.preprocess_image": [[236, 249], ["x[].to", "detectron2.structures.ImageList.from_tensors", "detectron2.structures.ImageList.from_tensors", "x[].to", "torch.cat", "range", "noisy_depth_images[].unsqueeze", "len"], "methods", ["None"], ["", "", "def", "preprocess_image", "(", "self", ",", "batched_inputs", ")", ":", "\n", "        ", "\"\"\"\n        Normalize, pad and batch the input images.\n        \"\"\"", "\n", "images", "=", "[", "x", "[", "\"image\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "images", "=", "[", "(", "x", "-", "self", ".", "pixel_mean", ")", "/", "self", ".", "pixel_std", "for", "x", "in", "images", "]", "\n", "if", "self", ".", "RGBD_INPUT", ":", "\n", "            ", "noisy_depth_images", "=", "[", "x", "[", "\"noisy_depth_image\"", "]", ".", "to", "(", "self", ".", "device", ")", "for", "x", "in", "batched_inputs", "]", "\n", "rgbds", "=", "[", "torch", ".", "cat", "(", "[", "noisy_depth_images", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "images", "[", "i", "]", "]", ",", "dim", "=", "0", ")", "for", "i", "in", "range", "(", "len", "(", "noisy_depth_images", ")", ")", "]", "\n", "images", "=", "ImageList", ".", "from_tensors", "(", "rgbds", ",", "self", ".", "backbone", ".", "size_divisibility", ")", "\n", "", "else", ":", "\n", "            ", "images", "=", "ImageList", ".", "from_tensors", "(", "images", ",", "self", ".", "backbone", ".", "size_divisibility", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.meta_arch.rcnn.Mirror3d_GeneralizedRCNN._postprocess": [[250, 269], ["zip", "detectron2.modeling.postprocessing.detector_postprocess", "processed_results.append", "input_per_image.get", "input_per_image.get"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_postprocess", "(", "instances", ",", "batched_inputs", ",", "image_sizes", ",", "mask_on_other_size", ")", ":", "\n", "        ", "\"\"\"\n        Rescale the output instances to the target size.\n        \"\"\"", "\n", "# note: private function; subject to changes", "\n", "processed_results", "=", "[", "]", "\n", "for", "results_per_image", ",", "input_per_image", ",", "image_size", "in", "zip", "(", "\n", "instances", ",", "batched_inputs", ",", "image_sizes", "\n", ")", ":", "\n", "            ", "if", "mask_on_other_size", ":", "\n", "                ", "height", "=", "input_per_image", ".", "get", "(", "\"height\"", ",", "image_size", "[", "0", "]", ")", "\n", "width", "=", "input_per_image", ".", "get", "(", "\"width\"", ",", "image_size", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "height", "=", "image_size", "[", "0", "]", "\n", "width", "=", "image_size", "[", "1", "]", "\n", "", "r", "=", "detector_postprocess", "(", "results_per_image", ",", "height", ",", "width", ")", "\n", "processed_results", ".", "append", "(", "{", "\"instances\"", ":", "r", "}", ")", "\n", "", "return", "processed_results", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_StandardRPNHead.__init__": [[32, 58], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.__init__"], ["@", "configurable", "\n", "def", "__init__", "(", "self", ",", "*", ",", "in_channels", ":", "int", ",", "num_anchors", ":", "int", ",", "box_dim", ":", "int", "=", "4", ")", ":", "\n", "        ", "\"\"\"\n        NOTE: this interface is experimental.\n\n        Args:\n            in_channels (int): number of input feature channels. When using multiple\n                input features, they must have the same number of channels.\n            num_anchors (int): number of anchors to predict for *each spatial position*\n                on the feature map. The total number of anchors for each\n                feature map will be `num_anchors * H * W`.\n            box_dim (int): dimension of a box, which is also the number of box regression\n                predictions to make for each anchor. An axis aligned box has\n                box_dim=4, while a rotated box has box_dim=5.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# 3x3 conv for the hidden representation", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "# 1x1 conv for predicting objectness logits", "\n", "self", ".", "objectness_logits", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "num_anchors", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "# 1x1 conv for predicting box2box transform deltas", "\n", "self", ".", "anchor_deltas", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "num_anchors", "*", "box_dim", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "for", "l", "in", "[", "self", ".", "conv", ",", "self", ".", "objectness_logits", ",", "self", ".", "anchor_deltas", "]", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "l", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_StandardRPNHead.from_config": [[59, 75], ["detectron2.modeling.anchor_generator.build_anchor_generator", "len", "len", "set", "set"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "cfg", ",", "input_shape", ")", ":", "\n", "# Standard RPN is shared across levels:", "\n", "        ", "in_channels", "=", "[", "s", ".", "channels", "for", "s", "in", "input_shape", "]", "\n", "assert", "len", "(", "set", "(", "in_channels", ")", ")", "==", "1", ",", "\"Each level must have the same channel!\"", "\n", "in_channels", "=", "in_channels", "[", "0", "]", "\n", "\n", "# RPNHead should take the same input as anchor generator", "\n", "# NOTE: it assumes that creating an anchor generator does not have unwanted side effect.", "\n", "anchor_generator", "=", "build_anchor_generator", "(", "cfg", ",", "input_shape", ")", "\n", "num_anchors", "=", "anchor_generator", ".", "num_anchors", "\n", "box_dim", "=", "anchor_generator", ".", "box_dim", "\n", "assert", "(", "\n", "len", "(", "set", "(", "num_anchors", ")", ")", "==", "1", "\n", ")", ",", "\"Each level must have the same number of anchors per spatial position\"", "\n", "return", "{", "\"in_channels\"", ":", "in_channels", ",", "\"num_anchors\"", ":", "num_anchors", "[", "0", "]", ",", "\"box_dim\"", ":", "box_dim", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_StandardRPNHead.forward": [[76, 96], ["torch.relu", "torch.relu", "pred_objectness_logits.append", "pred_anchor_deltas.append", "rpn.Mirror3d_StandardRPNHead.conv", "rpn.Mirror3d_StandardRPNHead.objectness_logits", "rpn.Mirror3d_StandardRPNHead.anchor_deltas"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            features (list[Tensor]): list of feature maps\n\n        Returns:\n            list[Tensor]: A list of L elements.\n                Element i is a tensor of shape (N, A, Hi, Wi) representing\n                the predicted objectness logits for all anchors. A is the number of cell anchors.\n            list[Tensor]: A list of L elements. Element i is a tensor of shape\n                (N, A*box_dim, Hi, Wi) representing the predicted \"deltas\" used to transform anchors\n                to proposals.\n        \"\"\"", "\n", "pred_objectness_logits", "=", "[", "]", "\n", "pred_anchor_deltas", "=", "[", "]", "\n", "for", "x", "in", "features", ":", "\n", "            ", "t", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "x", ")", ")", "\n", "pred_objectness_logits", ".", "append", "(", "self", ".", "objectness_logits", "(", "t", ")", ")", "\n", "pred_anchor_deltas", ".", "append", "(", "self", ".", "anchor_deltas", "(", "t", ")", ")", "\n", "", "return", "pred_objectness_logits", ",", "pred_anchor_deltas", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_RPN.__init__": [[104, 167], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.__init__"], ["@", "configurable", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "*", ",", "\n", "in_features", ":", "List", "[", "str", "]", ",", "\n", "head", ":", "nn", ".", "Module", ",", "\n", "anchor_generator", ":", "nn", ".", "Module", ",", "\n", "anchor_matcher", ":", "Matcher", ",", "\n", "box2box_transform", ":", "Box2BoxTransform", ",", "\n", "batch_size_per_image", ":", "int", ",", "\n", "positive_fraction", ":", "float", ",", "\n", "pre_nms_topk", ":", "Tuple", "[", "float", ",", "float", "]", ",", "\n", "post_nms_topk", ":", "Tuple", "[", "float", ",", "float", "]", ",", "\n", "nms_thresh", ":", "float", "=", "0.7", ",", "\n", "min_box_size", ":", "float", "=", "0.0", ",", "\n", "anchor_boundary_thresh", ":", "float", "=", "-", "1.0", ",", "\n", "loss_weight", ":", "float", "=", "1.0", ",", "\n", "smooth_l1_beta", ":", "float", "=", "0.0", "\n", ")", ":", "\n", "        ", "\"\"\"\n        NOTE: this interface is experimental.\n\n        Args:\n            in_features (list[str]): list of names of input features to use\n            head (nn.Module): a module that predicts logits and regression deltas\n                for each level from a list of per-level features\n            anchor_generator (nn.Module): a module that creates anchors from a\n                list of features. Usually an instance of :class:`AnchorGenerator`\n            anchor_matcher (Matcher): label the anchors by matching them with ground truth.\n            box2box_transform (Box2BoxTransform): defines the transform from anchors boxes to\n                instance boxes\n            batch_size_per_image (int): number of anchors per image to sample for training\n            positive_fraction (float): fraction of foreground anchors to sample for training\n            pre_nms_topk (tuple[float]): (train, test) that represents the\n                number of top k proposals to select before NMS, in\n                training and testing.\n            post_nms_topk (tuple[float]): (train, test) that represents the\n                number of top k proposals to select after NMS, in\n                training and testing.\n            nms_thresh (float): NMS threshold used to de-duplicate the predicted proposals\n            min_box_size (float): remove proposal boxes with any side smaller than this threshold,\n                in the unit of input image pixels\n            anchor_boundary_thresh (float): legacy option\n            loss_weight (float): weight to be multiplied to the loss\n            smooth_l1_beta (float): beta parameter for the smooth L1\n                regression loss. Default to use L1 loss.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "rpn_head", "=", "head", "\n", "self", ".", "anchor_generator", "=", "anchor_generator", "\n", "self", ".", "anchor_matcher", "=", "anchor_matcher", "\n", "self", ".", "box2box_transform", "=", "box2box_transform", "\n", "self", ".", "batch_size_per_image", "=", "batch_size_per_image", "\n", "self", ".", "positive_fraction", "=", "positive_fraction", "\n", "# Map from self.training state to train/test settings", "\n", "self", ".", "pre_nms_topk", "=", "{", "True", ":", "pre_nms_topk", "[", "0", "]", ",", "False", ":", "pre_nms_topk", "[", "1", "]", "}", "\n", "self", ".", "post_nms_topk", "=", "{", "True", ":", "post_nms_topk", "[", "0", "]", ",", "False", ":", "post_nms_topk", "[", "1", "]", "}", "\n", "self", ".", "nms_thresh", "=", "nms_thresh", "\n", "self", ".", "min_box_size", "=", "min_box_size", "\n", "self", ".", "anchor_boundary_thresh", "=", "anchor_boundary_thresh", "\n", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "smooth_l1_beta", "=", "smooth_l1_beta", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_RPN.from_config": [[168, 192], ["detectron2.modeling.anchor_generator.build_anchor_generator", "detectron2.modeling.matcher.Matcher", "detectron2.modeling.proposal_generator.rpn.build_rpn_head", "detectron2.modeling.box_regression.Box2BoxTransform"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "cfg", ",", "input_shape", ":", "Dict", "[", "str", ",", "ShapeSpec", "]", ")", ":", "\n", "        ", "in_features", "=", "cfg", ".", "MODEL", ".", "RPN", ".", "IN_FEATURES", "\n", "ret", "=", "{", "\n", "\"in_features\"", ":", "in_features", ",", "\n", "\"min_box_size\"", ":", "cfg", ".", "MODEL", ".", "PROPOSAL_GENERATOR", ".", "MIN_SIZE", ",", "\n", "\"nms_thresh\"", ":", "cfg", ".", "MODEL", ".", "RPN", ".", "NMS_THRESH", ",", "\n", "\"batch_size_per_image\"", ":", "cfg", ".", "MODEL", ".", "RPN", ".", "BATCH_SIZE_PER_IMAGE", ",", "\n", "\"positive_fraction\"", ":", "cfg", ".", "MODEL", ".", "RPN", ".", "POSITIVE_FRACTION", ",", "\n", "\"smooth_l1_beta\"", ":", "cfg", ".", "MODEL", ".", "RPN", ".", "SMOOTH_L1_BETA", ",", "\n", "\"loss_weight\"", ":", "cfg", ".", "MODEL", ".", "RPN", ".", "LOSS_WEIGHT", ",", "\n", "\"anchor_boundary_thresh\"", ":", "cfg", ".", "MODEL", ".", "RPN", ".", "BOUNDARY_THRESH", ",", "\n", "\"box2box_transform\"", ":", "Box2BoxTransform", "(", "weights", "=", "cfg", ".", "MODEL", ".", "RPN", ".", "BBOX_REG_WEIGHTS", ")", ",", "\n", "}", "\n", "\n", "ret", "[", "\"pre_nms_topk\"", "]", "=", "(", "cfg", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOPK_TRAIN", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "PRE_NMS_TOPK_TEST", ")", "\n", "ret", "[", "\"post_nms_topk\"", "]", "=", "(", "cfg", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOPK_TRAIN", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "POST_NMS_TOPK_TEST", ")", "\n", "\n", "ret", "[", "\"anchor_generator\"", "]", "=", "build_anchor_generator", "(", "cfg", ",", "[", "input_shape", "[", "f", "]", "for", "f", "in", "in_features", "]", ")", "\n", "ret", "[", "\"anchor_matcher\"", "]", "=", "Matcher", "(", "\n", "cfg", ".", "MODEL", ".", "RPN", ".", "IOU_THRESHOLDS", ",", "cfg", ".", "MODEL", ".", "RPN", ".", "IOU_LABELS", ",", "allow_low_quality_matches", "=", "True", "\n", ")", "\n", "ret", "[", "\"head\"", "]", "=", "build_rpn_head", "(", "cfg", ",", "[", "input_shape", "[", "f", "]", "for", "f", "in", "in_features", "]", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_RPN._subsample_labels": [[193, 210], ["detectron2.modeling.sampling.subsample_labels", "label.fill_", "label.scatter_", "label.scatter_"], "methods", ["None"], ["", "def", "_subsample_labels", "(", "self", ",", "label", ")", ":", "\n", "        ", "\"\"\"\n        Randomly sample a subset of positive and negative examples, and overwrite\n        the label vector to the ignore value (-1) for all elements that are not\n        included in the sample.\n\n        Args:\n            labels (Tensor): a vector of -1, 0, 1. Will be modified in-place and returned.\n        \"\"\"", "\n", "pos_idx", ",", "neg_idx", "=", "subsample_labels", "(", "\n", "label", ",", "self", ".", "batch_size_per_image", ",", "self", ".", "positive_fraction", ",", "0", "\n", ")", "\n", "# Fill with the ignore label (-1), then set positive and negative labels", "\n", "label", ".", "fill_", "(", "-", "1", ")", "\n", "label", ".", "scatter_", "(", "0", ",", "pos_idx", ",", "1", ")", "\n", "label", ".", "scatter_", "(", "0", ",", "neg_idx", ",", "0", ")", "\n", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_RPN.label_and_sample_anchors": [[211, 272], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "detectron2.structures.Boxes.cat", "zip", "rpn.Mirror3d_RPN.to", "rpn.Mirror3d_RPN._subsample_labels", "gt_labels.append", "matched_gt_boxes.append", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "detectron2.utils.memory.retry_if_cuda_oom", "detectron2.utils.memory.retry_if_cuda_oom", "detectron2.structures.Boxes.cat.inside_box", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_RPN._subsample_labels"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "label_and_sample_anchors", "(", "self", ",", "anchors", ":", "List", "[", "Boxes", "]", ",", "gt_instances", ":", "List", "[", "Instances", "]", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            anchors (list[Boxes]): anchors for each feature map.\n            gt_instances: the ground-truth instances for each image.\n\n        Returns:\n            list[Tensor]:\n                List of #img tensors. i-th element is a vector of labels whose length is\n                the total number of anchors across all feature maps R = sum(Hi * Wi * A).\n                Label values are in {-1, 0, 1}, with meanings: -1 = ignore; 0 = negative\n                class; 1 = positive class.\n            list[Tensor]:\n                i-th element is a Rx4 tensor. The values are the matched gt boxes for each\n                anchor. Values are undefined for those anchors not labeled as 1.\n        \"\"\"", "\n", "anchors", "=", "Boxes", ".", "cat", "(", "anchors", ")", "\n", "\n", "\n", "if", "not", "gt_instances", ":", "\n", "            ", "gt_labels", "=", "[", "(", "-", "torch", ".", "ones", "(", "anchors", ".", "tensor", ".", "shape", "[", "0", "]", ")", ")", ".", "cuda", "(", ")", "for", "i", "in", "range", "(", "anchors", ".", "tensor", ".", "shape", "[", "1", "]", ")", "]", "\n", "matched_gt_boxes", "=", "[", "torch", ".", "zeros", "(", "(", "anchors", ".", "tensor", ".", "shape", "[", "0", "]", ")", ",", "4", ")", ".", "cuda", "(", ")", "for", "i", "in", "range", "(", "anchors", ".", "tensor", ".", "shape", "[", "1", "]", ")", "]", "\n", "return", "gt_labels", ",", "matched_gt_boxes", "\n", "\n", "", "gt_boxes", "=", "[", "x", ".", "gt_boxes", "for", "x", "in", "gt_instances", "]", "\n", "image_sizes", "=", "[", "x", ".", "image_size", "for", "x", "in", "gt_instances", "]", "\n", "del", "gt_instances", "\n", "\n", "gt_labels", "=", "[", "]", "\n", "matched_gt_boxes", "=", "[", "]", "\n", "for", "image_size_i", ",", "gt_boxes_i", "in", "zip", "(", "image_sizes", ",", "gt_boxes", ")", ":", "\n", "            ", "\"\"\"\n            image_size_i: (h, w) for the i-th image\n            gt_boxes_i: ground-truth boxes for i-th image\n            \"\"\"", "\n", "\n", "match_quality_matrix", "=", "retry_if_cuda_oom", "(", "pairwise_iou", ")", "(", "gt_boxes_i", ",", "anchors", ")", "\n", "matched_idxs", ",", "gt_labels_i", "=", "retry_if_cuda_oom", "(", "self", ".", "anchor_matcher", ")", "(", "match_quality_matrix", ")", "\n", "# Matching is memory-expensive and may result in CPU tensors. But the result is small", "\n", "gt_labels_i", "=", "gt_labels_i", ".", "to", "(", "device", "=", "gt_boxes_i", ".", "device", ")", "\n", "del", "match_quality_matrix", "\n", "\n", "if", "self", ".", "anchor_boundary_thresh", ">=", "0", ":", "\n", "# Discard anchors that go out of the boundaries of the image", "\n", "# NOTE: This is legacy functionality that is turned off by default in Detectron2", "\n", "                ", "anchors_inside_image", "=", "anchors", ".", "inside_box", "(", "image_size_i", ",", "self", ".", "anchor_boundary_thresh", ")", "\n", "gt_labels_i", "[", "~", "anchors_inside_image", "]", "=", "-", "1", "\n", "\n", "# A vector of labels (-1, 0, 1) for each anchor", "\n", "", "gt_labels_i", "=", "self", ".", "_subsample_labels", "(", "gt_labels_i", ")", "\n", "\n", "if", "len", "(", "gt_boxes_i", ")", "==", "0", ":", "\n", "# These values won't be used anyway since the anchor is labeled as background", "\n", "                ", "matched_gt_boxes_i", "=", "torch", ".", "zeros_like", "(", "anchors", ".", "tensor", ")", "\n", "", "else", ":", "\n", "                ", "matched_gt_boxes_i", "=", "gt_boxes_i", "[", "matched_idxs", "]", ".", "tensor", "\n", "\n", "", "gt_labels", ".", "append", "(", "gt_labels_i", ")", "# N,AHW", "\n", "matched_gt_boxes", ".", "append", "(", "matched_gt_boxes_i", ")", "\n", "", "return", "gt_labels", ",", "matched_gt_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_RPN.losses": [[273, 331], ["len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "pos_mask.sum().item", "detectron2.utils.events.get_event_storage", "detectron2.utils.events.get_event_storage.put_scalar", "detectron2.utils.events.get_event_storage.put_scalar", "fvcore.nn.smooth_l1_loss", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "type().cat", "rpn.Mirror3d_RPN.box2box_transform.get_deltas", "gt_labels[].to", "pos_mask.sum", "detectron2.layers.cat", "detectron2.layers.cat", "type"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss"], ["", "def", "losses", "(", "\n", "self", ",", "\n", "anchors", ",", "\n", "pred_objectness_logits", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "gt_labels", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "pred_anchor_deltas", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "gt_boxes", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Return the losses from a set of RPN predictions and their associated ground-truth.\n\n        Args:\n            anchors (list[Boxes or RotatedBoxes]): anchors for each feature map, each\n                has shape (Hi*Wi*A, B), where B is box dimension (4 or 5).\n            pred_objectness_logits (list[Tensor]): A list of L elements.\n                Element i is a tensor of shape (N, Hi*Wi*A) representing\n                the predicted objectness logits for all anchors.\n            gt_labels (list[Tensor]): Output of :meth:`label_and_sample_anchors`.\n            pred_anchor_deltas (list[Tensor]): A list of L elements. Element i is a tensor of shape\n                (N, Hi*Wi*A, 4 or 5) representing the predicted \"deltas\" used to transform anchors\n                to proposals.\n            gt_boxes (list[Boxes or RotatedBoxes]): Output of :meth:`label_and_sample_anchors`.\n\n        Returns:\n            dict[loss name -> loss value]: A dict mapping from loss name to loss value.\n                Loss names are: `loss_rpn_cls` for objectness classification and\n                `loss_rpn_loc` for proposal localization.\n        \"\"\"", "\n", "num_images", "=", "len", "(", "gt_labels", ")", "\n", "gt_labels", "=", "torch", ".", "stack", "(", "gt_labels", ")", "# (N, sum(Hi*Wi*Ai)); torch.Size([1, 76740])", "\n", "anchors", "=", "type", "(", "anchors", "[", "0", "]", ")", ".", "cat", "(", "anchors", ")", ".", "tensor", "# Ax(4 or 5)", "\n", "gt_anchor_deltas", "=", "[", "self", ".", "box2box_transform", ".", "get_deltas", "(", "anchors", ",", "k", ")", "for", "k", "in", "gt_boxes", "]", "\n", "gt_anchor_deltas", "=", "torch", ".", "stack", "(", "gt_anchor_deltas", ")", "# (N, sum(Hi*Wi*Ai), 4 or 5)", "\n", "\n", "# Log the number of positive/negative anchors per-image that's used in training", "\n", "pos_mask", "=", "gt_labels", "==", "1", "\n", "num_pos_anchors", "=", "pos_mask", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "num_neg_anchors", "=", "(", "gt_labels", "==", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "storage", "=", "get_event_storage", "(", ")", "\n", "storage", ".", "put_scalar", "(", "\"rpn/num_pos_anchors\"", ",", "num_pos_anchors", "/", "num_images", ")", "\n", "storage", ".", "put_scalar", "(", "\"rpn/num_neg_anchors\"", ",", "num_neg_anchors", "/", "num_images", ")", "\n", "\n", "localization_loss", "=", "smooth_l1_loss", "(", "\n", "cat", "(", "pred_anchor_deltas", ",", "dim", "=", "1", ")", "[", "pos_mask", "]", ",", "\n", "gt_anchor_deltas", "[", "pos_mask", "]", ",", "\n", "self", ".", "smooth_l1_beta", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", ")", "\n", "valid_mask", "=", "gt_labels", ">=", "0", "\n", "objectness_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "cat", "(", "pred_objectness_logits", ",", "dim", "=", "1", ")", "[", "valid_mask", "]", ",", "\n", "gt_labels", "[", "valid_mask", "]", ".", "to", "(", "torch", ".", "float32", ")", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", ")", "\n", "normalizer", "=", "self", ".", "batch_size_per_image", "*", "num_images", "\n", "return", "{", "\n", "\"loss_rpn_cls\"", ":", "objectness_loss", "/", "normalizer", ",", "\n", "\"loss_rpn_loc\"", ":", "localization_loss", "/", "normalizer", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_RPN.forward": [[333, 387], ["rpn.Mirror3d_RPN.anchor_generator", "rpn.Mirror3d_RPN.rpn_head", "rpn.Mirror3d_RPN.predict_proposals", "score.permute().flatten", "x.view().permute().flatten", "rpn.Mirror3d_RPN.label_and_sample_anchors", "rpn.Mirror3d_RPN.losses", "score.permute", "x.view().permute", "rpn.Mirror3d_RPN.items", "x.view"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_RPN.predict_proposals", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_RPN.label_and_sample_anchors", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.losses"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "images", ":", "ImageList", ",", "\n", "features", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "gt_instances", ":", "Optional", "[", "Instances", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            images (ImageList): input images of length `N`\n            features (dict[str, Tensor]): input data as a mapping from feature\n                map name to tensor. Axis 0 represents the number of images `N` in\n                the input data; axes 1-3 are channels, height, and width, which may\n                vary between feature maps (e.g., if a feature pyramid is used).\n            gt_instances (list[Instances], optional): a length `N` list of `Instances`s.\n                Each `Instances` stores ground-truth instances for the corresponding image.\n\n        Returns:\n            proposals: list[Instances]: contains fields \"proposal_boxes\", \"objectness_logits\"\n            loss: dict[Tensor] or None\n        \"\"\"", "\n", "features", "=", "[", "features", "[", "f", "]", "for", "f", "in", "self", ".", "in_features", "]", "\n", "anchors", "=", "self", ".", "anchor_generator", "(", "features", ")", "\n", "\n", "pred_objectness_logits", ",", "pred_anchor_deltas", "=", "self", ".", "rpn_head", "(", "features", ")", "#  thousands for anchor's score", "\n", "# Transpose the Hi*Wi*A dimension to the middle:", "\n", "pred_objectness_logits", "=", "[", "\n", "# (N, A, Hi, Wi) -> (N, Hi, Wi, A) -> (N, Hi*Wi*A)", "\n", "score", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "flatten", "(", "1", ")", "\n", "for", "score", "in", "pred_objectness_logits", "\n", "]", "\n", "pred_anchor_deltas", "=", "[", "#  thousands for anchor's deltas ", "\n", "# (N, A*B, Hi, Wi) -> (N, A, B, Hi, Wi) -> (N, Hi, Wi, A, B) -> (N, Hi*Wi*A, B)", "\n", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "anchor_generator", ".", "box_dim", ",", "x", ".", "shape", "[", "-", "2", "]", ",", "x", ".", "shape", "[", "-", "1", "]", ")", "\n", ".", "permute", "(", "0", ",", "3", ",", "4", ",", "1", ",", "2", ")", "\n", ".", "flatten", "(", "1", ",", "-", "2", ")", "\n", "for", "x", "in", "pred_anchor_deltas", "\n", "]", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# thousands of anchor's gt", "\n", "            ", "gt_labels", ",", "gt_boxes", "=", "self", ".", "label_and_sample_anchors", "(", "anchors", ",", "gt_instances", ")", "# anchors : 5 layers ; each layer contains all anchor boxes of that layer", "\n", "losses", "=", "self", ".", "losses", "(", "#! get 256 proposals to calculate loss ", "\n", "#  get loss based on 256 anchors randomly select from 7w anchors (256 anchors contains no more than 128 positive anchros)", "\n", "anchors", ",", "pred_objectness_logits", ",", "gt_labels", ",", "pred_anchor_deltas", ",", "gt_boxes", "# gt_labels[0].shape = torch.Size([76740])", "\n", ")", "\n", "losses", "=", "{", "k", ":", "v", "*", "self", ".", "loss_weight", "for", "k", ",", "v", "in", "losses", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "losses", "=", "{", "}", "\n", "#! get 1000/ 2000 proposals", "\n", "", "proposals", "=", "self", ".", "predict_proposals", "(", "#  default : before NMS 2000 smaple, after NMS 1000 samples", "\n", "anchors", ",", "pred_objectness_logits", ",", "pred_anchor_deltas", ",", "images", ".", "image_sizes", "\n", ")", "\n", "# losses : loss_rpn_cls", "\n", "return", "proposals", ",", "losses", "#  default : before NMS 2000 smaple, after NMS 1000 samples; losses : rpn losses", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_RPN.predict_proposals": [[388, 418], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "rpn.Mirror3d_RPN._decode_proposals", "detectron2.modeling.proposal_generator.proposal_utils.find_top_rpn_proposals"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_RPN._decode_proposals"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "predict_proposals", "(", "\n", "self", ",", "\n", "anchors", ",", "\n", "pred_objectness_logits", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "pred_anchor_deltas", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "\n", "image_sizes", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Decode all the predicted box regression deltas to proposals. Find the top proposals\n        by applying NMS and removing boxes that are too small.\n\n        Returns:\n            proposals (list[Instances]): list of N Instances. The i-th Instances\n                stores post_nms_topk object proposals for image i, sorted by their\n                objectness score in descending order.\n        \"\"\"", "\n", "# The proposals are treated as fixed for approximate joint training with roi heads.", "\n", "# This approach ignores the derivative w.r.t. the proposal boxes\u2019 coordinates that", "\n", "# are also network responses, so is approximate.", "\n", "pred_proposals", "=", "self", ".", "_decode_proposals", "(", "anchors", ",", "pred_anchor_deltas", ")", "# apply predicted rpn transformation to all proposals ", "\n", "return", "find_top_rpn_proposals", "(", "\n", "pred_proposals", ",", "\n", "pred_objectness_logits", ",", "\n", "image_sizes", ",", "\n", "self", ".", "nms_thresh", ",", "\n", "self", ".", "pre_nms_topk", "[", "self", ".", "training", "]", ",", "\n", "self", ".", "post_nms_topk", "[", "self", ".", "training", "]", ",", "\n", "self", ".", "min_box_size", ",", "\n", "self", ".", "training", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.proposal_generator.rpn.Mirror3d_RPN._decode_proposals": [[420, 440], ["zip", "anchors_i.tensor.unsqueeze().expand().reshape.tensor.unsqueeze().expand().reshape.tensor.size", "pred_anchor_deltas_i.reshape.reshape.reshape", "anchors_i.tensor.unsqueeze().expand().reshape.tensor.unsqueeze().expand().reshape.tensor.unsqueeze().expand().reshape", "rpn.Mirror3d_RPN.box2box_transform.apply_deltas", "proposals.append", "rpn.Mirror3d_RPN.view", "anchors_i.tensor.unsqueeze().expand().reshape.tensor.unsqueeze().expand().reshape.tensor.unsqueeze().expand", "anchors_i.tensor.unsqueeze().expand().reshape.tensor.unsqueeze().expand().reshape.tensor.unsqueeze"], "methods", ["None"], ["", "def", "_decode_proposals", "(", "self", ",", "anchors", ",", "pred_anchor_deltas", ":", "List", "[", "torch", ".", "Tensor", "]", ")", ":", "\n", "        ", "\"\"\"\n        Transform anchors into proposals by applying the predicted anchor deltas.\n\n        Returns:\n            proposals (list[Tensor]): A list of L tensors. Tensor i has shape\n                (N, Hi*Wi*A, B)\n        \"\"\"", "\n", "N", "=", "pred_anchor_deltas", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "proposals", "=", "[", "]", "\n", "# For each feature map", "\n", "for", "anchors_i", ",", "pred_anchor_deltas_i", "in", "zip", "(", "anchors", ",", "pred_anchor_deltas", ")", ":", "\n", "            ", "B", "=", "anchors_i", ".", "tensor", ".", "size", "(", "1", ")", "\n", "pred_anchor_deltas_i", "=", "pred_anchor_deltas_i", ".", "reshape", "(", "-", "1", ",", "B", ")", "\n", "# Expand anchors to shape (N*Hi*Wi*A, B)", "\n", "anchors_i", "=", "anchors_i", ".", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "-", "1", ",", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "B", ")", "\n", "proposals_i", "=", "self", ".", "box2box_transform", ".", "apply_deltas", "(", "pred_anchor_deltas_i", ",", "anchors_i", ")", "\n", "# Append feature map proposals with shape (N, Hi*Wi*A, B)", "\n", "proposals", ".", "append", "(", "proposals_i", ".", "view", "(", "N", ",", "-", "1", ",", "B", ")", ")", "\n", "", "return", "proposals", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.__init__": [[172, 245], ["len", "len", "type", "type.cat", "proposals[].has", "proposals[].has", "proposals[].has", "detectron2.structures.Boxes", "len", "type.cat", "proposals[].has", "detectron2.layers.cat", "detectron2.layers.cat", "detectron2.layers.cat", "torch.zeros"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "box2box_transform", ",", "\n", "pred_class_logits", ",", "\n", "pred_proposal_deltas", ",", "\n", "proposals", ",", "\n", "smooth_l1_beta", "=", "0", ",", "\n", "anchor_normal_score", "=", "None", ",", "\n", "anchor_residual_pred", "=", "None", ",", "\n", "anchor_normals", "=", "None", ",", "\n", "ANCHOR_REG_method", "=", "None", ",", "\n", "anchor_cls", "=", "False", ",", "\n", "ANCHOR_REG", "=", "False", ",", "\n", "is_training", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            box2box_transform (Box2BoxTransform/Box2BoxTransformRotated):\n                box2box transform instance for proposal-to-detection transformations.\n            pred_class_logits (Tensor): A tensor of shape (R, K + 1) storing the predicted class\n                logits for all R predicted object instances.\n                Each row corresponds to a predicted object instance.\n            pred_proposal_deltas (Tensor): A tensor of shape (R, K * B) or (R, B) for\n                class-specific or class-agnostic regression. It stores the predicted deltas that\n                transform proposals into final box detections.\n                B is the box dimension (4 or 5).\n                When B is 4, each row is [dx, dy, dw, dh (, ....)].\n                When B is 5, each row is [dx, dy, dw, dh, da (, ....)].\n            proposals (list[Instances]): A list of N Instances, where Instances i stores the\n                proposals for image i, in the field \"proposal_boxes\".\n                When training, each Instances must have ground-truth labels\n                stored in the field \"gt_classes\" and \"gt_boxes\".\n                The total number of all instances must be equal to R.\n            smooth_l1_beta (float): The transition point between L1 and L2 loss in\n                the smooth L1 loss function. When set to 0, the loss becomes L1. When\n                set to +inf, the loss becomes constant 0.\n        \"\"\"", "\n", "self", ".", "box2box_transform", "=", "box2box_transform", "\n", "self", ".", "num_preds_per_image", "=", "[", "len", "(", "p", ")", "for", "p", "in", "proposals", "]", "\n", "self", ".", "pred_class_logits", "=", "pred_class_logits", "\n", "self", ".", "anchor_normals", "=", "anchor_normals", "\n", "self", ".", "ANCHOR_REG_method", "=", "ANCHOR_REG_method", "\n", "\n", "self", ".", "pred_proposal_deltas", "=", "pred_proposal_deltas", "\n", "self", ".", "smooth_l1_beta", "=", "smooth_l1_beta", "\n", "self", ".", "image_shapes", "=", "[", "x", ".", "image_size", "for", "x", "in", "proposals", "]", "\n", "\n", "self", ".", "anchor_normal_score", "=", "anchor_normal_score", "\n", "self", ".", "anchor_residual_pred", "=", "anchor_residual_pred", "\n", "self", ".", "is_training", "=", "is_training", "\n", "self", ".", "anchor_cls", "=", "anchor_cls", "\n", "self", ".", "ANCHOR_REG", "=", "ANCHOR_REG", "\n", "\n", "if", "len", "(", "proposals", ")", ":", "\n", "            ", "box_type", "=", "type", "(", "proposals", "[", "0", "]", ".", "proposal_boxes", ")", "\n", "# cat(..., dim=0) concatenates over all images in the batch", "\n", "self", ".", "proposals", "=", "box_type", ".", "cat", "(", "[", "p", ".", "proposal_boxes", "for", "p", "in", "proposals", "]", ")", "\n", "assert", "(", "\n", "not", "self", ".", "proposals", ".", "tensor", ".", "requires_grad", "\n", ")", ",", "\"Proposals should not require gradients!\"", "\n", "\n", "# The following fields should exist only when training.", "\n", "if", "proposals", "[", "0", "]", ".", "has", "(", "\"gt_boxes\"", ")", ":", "\n", "                ", "self", ".", "gt_boxes", "=", "box_type", ".", "cat", "(", "[", "p", ".", "gt_boxes", "for", "p", "in", "proposals", "]", ")", "# torch.Size([128, 4])", "\n", "assert", "proposals", "[", "0", "]", ".", "has", "(", "\"gt_classes\"", ")", "\n", "self", ".", "gt_classes", "=", "cat", "(", "[", "p", ".", "gt_classes", "for", "p", "in", "proposals", "]", ",", "dim", "=", "0", ")", "# torch.Size([128])", "\n", "", "if", "proposals", "[", "0", "]", ".", "has", "(", "\"gt_anchor_normal_classes\"", ")", ":", "\n", "                ", "self", ".", "gt_anchor_normal_classes", "=", "cat", "(", "[", "p", ".", "gt_anchor_normal_classes", "for", "p", "in", "proposals", "]", ",", "dim", "=", "0", ")", "# torch.Size([128])", "\n", "", "if", "proposals", "[", "0", "]", ".", "has", "(", "\"gt_anchor_normal_residuals\"", ")", ":", "\n", "                ", "self", ".", "gt_anchor_normal_residuals", "=", "cat", "(", "[", "p", ".", "gt_anchor_normal_residuals", "for", "p", "in", "proposals", "]", ",", "dim", "=", "0", ")", "# torch.Size([128])", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "proposals", "=", "Boxes", "(", "torch", ".", "zeros", "(", "0", ",", "4", ",", "device", "=", "self", ".", "pred_proposal_deltas", ".", "device", ")", ")", "\n", "", "self", ".", "_no_instances", "=", "len", "(", "proposals", ")", "==", "0", "# no instances found", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs._log_accuracy": [[246, 273], ["fast_rcnn.Mirror3d_FastRCNNOutputs.gt_classes.numel", "fast_rcnn.Mirror3d_FastRCNNOutputs.pred_class_logits.argmax", "fg_inds.nonzero().numel", "detectron2.utils.events.get_event_storage", "detectron2.utils.events.get_event_storage.put_scalar", "fg_inds.nonzero", "detectron2.utils.events.get_event_storage.put_scalar", "detectron2.utils.events.get_event_storage.put_scalar"], "methods", ["None"], ["", "def", "_log_accuracy", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Log the accuracy metrics to EventStorage.\n        \"\"\"", "\n", "num_instances", "=", "self", ".", "gt_classes", ".", "numel", "(", ")", "\n", "pred_classes", "=", "self", ".", "pred_class_logits", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "bg_class_ind", "=", "self", ".", "pred_class_logits", ".", "shape", "[", "1", "]", "-", "1", "\n", "\n", "\n", "\n", "\n", "fg_inds", "=", "(", "self", ".", "gt_classes", ">=", "0", ")", "&", "(", "self", ".", "gt_classes", "<", "bg_class_ind", ")", "\n", "num_fg", "=", "fg_inds", ".", "nonzero", "(", ")", ".", "numel", "(", ")", "\n", "fg_gt_classes", "=", "self", ".", "gt_classes", "[", "fg_inds", "]", "\n", "fg_pred_classes", "=", "pred_classes", "[", "fg_inds", "]", "\n", "\n", "num_false_negative", "=", "(", "fg_pred_classes", "==", "bg_class_ind", ")", ".", "nonzero", "(", ")", ".", "numel", "(", ")", "\n", "num_accurate", "=", "(", "pred_classes", "==", "self", ".", "gt_classes", ")", ".", "nonzero", "(", ")", ".", "numel", "(", ")", "\n", "fg_num_accurate", "=", "(", "fg_pred_classes", "==", "fg_gt_classes", ")", ".", "nonzero", "(", ")", ".", "numel", "(", ")", "\n", "\n", "fg_score_test", "=", "self", ".", "pred_class_logits", "[", ":", ",", ":", "-", "1", "]", "\n", "storage", "=", "get_event_storage", "(", ")", "\n", "if", "num_instances", ">", "0", ":", "\n", "            ", "storage", ".", "put_scalar", "(", "\"fast_rcnn/cls_accuracy\"", ",", "num_accurate", "/", "num_instances", ")", "\n", "if", "num_fg", ">", "0", ":", "\n", "                ", "storage", ".", "put_scalar", "(", "\"fast_rcnn/fg_cls_accuracy\"", ",", "fg_num_accurate", "/", "num_fg", ")", "\n", "storage", ".", "put_scalar", "(", "\"fast_rcnn/false_negative\"", ",", "num_false_negative", "/", "num_fg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.softmax_cross_entropy_loss": [[274, 286], ["fast_rcnn.Mirror3d_FastRCNNOutputs._log_accuracy", "torch.nn.functional.cross_entropy", "fast_rcnn.Mirror3d_FastRCNNOutputs.pred_class_logits.sum"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs._log_accuracy", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.cross_entropy"], ["", "", "", "def", "softmax_cross_entropy_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute the softmax cross entropy loss for box classification.\n\n        Returns:\n            scalar Tensor\n        \"\"\"", "\n", "if", "self", ".", "_no_instances", ":", "\n", "            ", "return", "0.0", "*", "self", ".", "pred_class_logits", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_log_accuracy", "(", ")", "\n", "return", "F", ".", "cross_entropy", "(", "self", ".", "pred_class_logits", ",", "self", ".", "gt_classes", ",", "reduction", "=", "\"mean\"", ")", "# self.pred_class_logits.shape torch.Size([128, 2]) self.gt_classes  torch.Size([128])", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.softmax_cross_entropy_loss_anchor_normal": [[287, 301], ["torch.nn.functional.cross_entropy", "fast_rcnn.Mirror3d_FastRCNNOutputs.anchor_normal_score.sum", "fast_rcnn.Mirror3d_FastRCNNOutputs._log_accuracy"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.cross_entropy", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs._log_accuracy"], ["", "", "def", "softmax_cross_entropy_loss_anchor_normal", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute the softmax cross entropy loss for box classification.\n\n        Returns:\n            scalar Tensor\n        \"\"\"", "\n", "\n", "if", "self", ".", "_no_instances", "or", "not", "self", ".", "anchor_cls", ":", "\n", "            ", "return", "0.0", "*", "self", ".", "anchor_normal_score", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "is_training", ":", "\n", "                ", "self", ".", "_log_accuracy", "(", ")", "#  torch.Size([128, 8]) & torch.Size([128])", "\n", "", "return", "F", ".", "cross_entropy", "(", "self", ".", "anchor_normal_score", ",", "self", ".", "gt_anchor_normal_classes", ",", "reduction", "=", "\"mean\"", ")", "# self.pred_class_logits.shape torch.Size([128, 2]) self.gt_classes  torch.Size([128])", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss_ANCHOR_REGidual_GT_normal": [[304, 347], ["torch.stack", "fvcore.nn.smooth_l1_loss", "detectron2.layers.nonzero_tuple", "torch.arange", "fast_rcnn.Mirror3d_FastRCNNOutputs.gt_anchor_normal_classes.numel", "fast_rcnn.Mirror3d_FastRCNNOutputs.anchor_residual_pred.sum", "torch.tensor", "torch.tensor", "fast_rcnn.Mirror3d_FastRCNNOutputs.anchor_normal_score[].argmax", "fast_rcnn.Mirror3d_FastRCNNOutputs.anchor_normal_score[].argmax"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss"], ["", "", "def", "smooth_l1_loss_ANCHOR_REGidual_GT_normal", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute the smooth L1 loss for box regression.\n\n        Returns:\n            scalar Tensor\n        \"\"\"", "\n", "\n", "if", "self", ".", "_no_instances", ":", "\n", "            ", "return", "0.0", "*", "self", ".", "anchor_residual_pred", ".", "sum", "(", ")", "\n", "\n", "\n", "", "device", "=", "self", ".", "pred_proposal_deltas", ".", "device", "\n", "\n", "\n", "\n", "\n", "bg_class_ind", "=", "self", ".", "anchor_normal_score", ".", "shape", "[", "1", "]", "-", "1", "\n", "fg_inds", "=", "nonzero_tuple", "(", "(", "self", ".", "gt_anchor_normal_classes", ">=", "0", ")", "&", "(", "self", ".", "gt_anchor_normal_classes", "<", "bg_class_ind", ")", ")", "[", "0", "]", "\n", "# gt_res =  mirror_normal - anchor_normal[i] ", "\n", "current_gt_anchor_normal_res", "=", "torch", ".", "stack", "(", "[", "torch", ".", "tensor", "(", "self", ".", "anchor_normals", "[", "self", ".", "gt_anchor_normal_classes", "[", "idx", "]", "]", ",", "device", "=", "device", ")", "+", "self", ".", "gt_anchor_normal_residuals", "[", "idx", "]", "-", "(", "torch", ".", "tensor", "(", "self", ".", "anchor_normals", "[", "self", ".", "anchor_normal_score", "[", "idx", "]", ".", "argmax", "(", "dim", "=", "0", ")", "]", ",", "device", "=", "device", ")", "if", "self", ".", "anchor_normal_score", "[", "idx", "]", ".", "argmax", "(", "dim", "=", "0", ")", "<", "bg_class_ind", "else", "self", ".", "gt_anchor_normal_residuals", "[", "idx", "]", ")", "for", "idx", "in", "fg_inds", "]", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "residual_dim", "=", "self", ".", "anchor_normals", ".", "shape", "[", "1", "]", "\n", "fg_gt_classes", "=", "self", ".", "gt_anchor_normal_classes", "[", "fg_inds", "]", "\n", "gt_class_cols", "=", "residual_dim", "*", "fg_gt_classes", "[", ":", ",", "None", "]", "+", "torch", ".", "arange", "(", "residual_dim", ",", "device", "=", "device", ")", "\n", "\n", "\n", "loss_ANCHOR_REG_reg", "=", "smooth_l1_loss", "(", "\n", "self", ".", "anchor_residual_pred", "[", "fg_inds", "[", ":", ",", "None", "]", ",", "gt_class_cols", "]", ",", "\n", "current_gt_anchor_normal_res", ",", "\n", "self", ".", "smooth_l1_beta", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", ")", "\n", "\n", "loss_ANCHOR_REG_reg", "=", "loss_ANCHOR_REG_reg", "/", "self", ".", "gt_anchor_normal_classes", ".", "numel", "(", ")", "\n", "return", "loss_ANCHOR_REG_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss_ANCHOR_REGidual_GT_residual": [[349, 381], ["fvcore.nn.smooth_l1_loss", "detectron2.layers.nonzero_tuple", "torch.arange", "fast_rcnn.Mirror3d_FastRCNNOutputs.gt_anchor_normal_classes.numel", "fast_rcnn.Mirror3d_FastRCNNOutputs.anchor_residual_pred.sum"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss"], ["", "def", "smooth_l1_loss_ANCHOR_REGidual_GT_residual", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute the smooth L1 loss for box regression.\n\n        Returns:\n            scalar Tensor\n        \"\"\"", "\n", "\n", "if", "self", ".", "_no_instances", "or", "not", "self", ".", "ANCHOR_REG", ":", "\n", "            ", "return", "0.0", "*", "self", ".", "anchor_residual_pred", ".", "sum", "(", ")", "\n", "\n", "\n", "", "device", "=", "self", ".", "pred_proposal_deltas", ".", "device", "\n", "\n", "bg_class_ind", "=", "self", ".", "anchor_normal_score", ".", "shape", "[", "1", "]", "-", "1", "\n", "fg_inds", "=", "nonzero_tuple", "(", "(", "self", ".", "gt_anchor_normal_classes", ">=", "0", ")", "&", "(", "self", ".", "gt_anchor_normal_classes", "<", "bg_class_ind", ")", ")", "[", "0", "]", "\n", "\n", "residual_dim", "=", "3", "\n", "fg_gt_classes", "=", "self", ".", "gt_anchor_normal_classes", "[", "fg_inds", "]", "\n", "gt_class_cols", "=", "residual_dim", "*", "fg_gt_classes", "[", ":", ",", "None", "]", "+", "torch", ".", "arange", "(", "residual_dim", ",", "device", "=", "device", ")", "\n", "\n", "\n", "loss_ANCHOR_REG_reg", "=", "smooth_l1_loss", "(", "\n", "self", ".", "anchor_residual_pred", "[", "fg_inds", "[", ":", ",", "None", "]", ",", "gt_class_cols", "]", ",", "\n", "self", ".", "gt_anchor_normal_residuals", "[", "fg_inds", "]", ",", "\n", "self", ".", "smooth_l1_beta", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", ")", "\n", "\n", "loss_ANCHOR_REG_reg", "=", "loss_ANCHOR_REG_reg", "/", "self", ".", "gt_anchor_normal_classes", ".", "numel", "(", ")", "\n", "\n", "return", "loss_ANCHOR_REG_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss": [[382, 437], ["fast_rcnn.Mirror3d_FastRCNNOutputs.box2box_transform.get_deltas", "fast_rcnn.Mirror3d_FastRCNNOutputs.size", "fvcore.nn.smooth_l1_loss", "fast_rcnn.Mirror3d_FastRCNNOutputs.pred_proposal_deltas.size", "detectron2.layers.nonzero_tuple", "torch.arange", "fast_rcnn.Mirror3d_FastRCNNOutputs.gt_classes.numel", "fast_rcnn.Mirror3d_FastRCNNOutputs.pred_proposal_deltas.sum", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss"], ["", "def", "smooth_l1_loss", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute the smooth L1 loss for box regression.\n\n        Returns:\n            scalar Tensor\n        \"\"\"", "\n", "if", "self", ".", "_no_instances", ":", "\n", "            ", "return", "0.0", "*", "self", ".", "pred_proposal_deltas", ".", "sum", "(", ")", "\n", "", "gt_proposal_deltas", "=", "self", ".", "box2box_transform", ".", "get_deltas", "(", "\n", "self", ".", "proposals", ".", "tensor", ",", "self", ".", "gt_boxes", ".", "tensor", "\n", ")", "\n", "box_dim", "=", "gt_proposal_deltas", ".", "size", "(", "1", ")", "# 4 or 5", "\n", "cls_agnostic_bbox_reg", "=", "self", ".", "pred_proposal_deltas", ".", "size", "(", "1", ")", "==", "box_dim", "\n", "device", "=", "self", ".", "pred_proposal_deltas", ".", "device", "\n", "\n", "bg_class_ind", "=", "self", ".", "pred_class_logits", ".", "shape", "[", "1", "]", "-", "1", "\n", "\n", "# Box delta loss is only computed between the prediction for the gt class k", "\n", "# (if 0 <= k < bg_class_ind) and the target; there is no loss defined on predictions", "\n", "# for non-gt classes and background.", "\n", "# Empty fg_inds produces a valid loss of zero as long as the size_average", "\n", "# arg to smooth_l1_loss is False (otherwise it uses torch.mean internally", "\n", "# and would produce a nan loss).", "\n", "fg_inds", "=", "nonzero_tuple", "(", "(", "self", ".", "gt_classes", ">=", "0", ")", "&", "(", "self", ".", "gt_classes", "<", "bg_class_ind", ")", ")", "[", "0", "]", "\n", "if", "cls_agnostic_bbox_reg", ":", "\n", "# pred_proposal_deltas only corresponds to foreground class for agnostic", "\n", "            ", "gt_class_cols", "=", "torch", ".", "arange", "(", "box_dim", ",", "device", "=", "device", ")", "\n", "", "else", ":", "\n", "            ", "fg_gt_classes", "=", "self", ".", "gt_classes", "[", "fg_inds", "]", "\n", "# pred_proposal_deltas for class k are located in columns [b * k : b * k + b],", "\n", "# where b is the dimension of box representation (4 or 5)", "\n", "# Note that compared to Detectron1,", "\n", "# we do not perform bounding box regression for background classes.", "\n", "gt_class_cols", "=", "box_dim", "*", "fg_gt_classes", "[", ":", ",", "None", "]", "+", "torch", ".", "arange", "(", "box_dim", ",", "device", "=", "device", ")", "\n", "\n", "", "loss_box_reg", "=", "smooth_l1_loss", "(", "\n", "self", ".", "pred_proposal_deltas", "[", "fg_inds", "[", ":", ",", "None", "]", ",", "gt_class_cols", "]", ",", "\n", "gt_proposal_deltas", "[", "fg_inds", "]", ",", "\n", "self", ".", "smooth_l1_beta", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", ")", "\n", "# The loss is normalized using the total number of regions (R), not the number", "\n", "# of foreground regions even though the box regression loss is only defined on", "\n", "# foreground regions. Why? Because doing so gives equal training influence to", "\n", "# each foreground example. To see how, consider two different minibatches:", "\n", "#  (1) Contains a single foreground region", "\n", "#  (2) Contains 100 foreground regions", "\n", "# If we normalize by the number of foreground regions, the single example in", "\n", "# minibatch (1) will be given 100 times as much influence as each foreground", "\n", "# example in minibatch (2). Normalizing by the total number of regions, R,", "\n", "# means that the single example in minibatch (1) and each of the 100 examples", "\n", "# in minibatch (2) are given equal influence.", "\n", "loss_box_reg", "=", "loss_box_reg", "/", "self", ".", "gt_classes", ".", "numel", "(", ")", "\n", "return", "loss_box_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs._predict_boxes": [[438, 446], ["fast_rcnn.Mirror3d_FastRCNNOutputs.box2box_transform.apply_deltas"], "methods", ["None"], ["", "def", "_predict_boxes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            Tensor: A Tensors of predicted class-specific or class-agnostic boxes\n                for all images in a batch. Element i has shape (Ri, K * B) or (Ri, B), where Ri is\n                the number of predicted objects for image i and B is the box dimension (4 or 5)\n        \"\"\"", "\n", "return", "self", ".", "box2box_transform", ".", "apply_deltas", "(", "self", ".", "pred_proposal_deltas", ",", "self", ".", "proposals", ".", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.losses": [[452, 483], ["fast_rcnn.Mirror3d_FastRCNNOutputs.softmax_cross_entropy_loss_anchor_normal", "fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss_ANCHOR_REGidual_GT_residual", "fast_rcnn.Mirror3d_FastRCNNOutputs.softmax_cross_entropy_loss", "fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss", "fast_rcnn.Mirror3d_FastRCNNOutputs.softmax_cross_entropy_loss_anchor_normal", "fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss_ANCHOR_REGidual_GT_normal", "fast_rcnn.Mirror3d_FastRCNNOutputs.softmax_cross_entropy_loss", "fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.softmax_cross_entropy_loss_anchor_normal", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss_ANCHOR_REGidual_GT_residual", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.softmax_cross_entropy_loss", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.softmax_cross_entropy_loss_anchor_normal", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss_ANCHOR_REGidual_GT_normal", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.softmax_cross_entropy_loss", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.smooth_l1_loss"], ["def", "losses", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute the default losses for box head in Fast(er) R-CNN,\n        with softmax cross entropy loss and smooth L1 loss.\n\n        Returns:\n            A dict of losses (scalar tensors) containing keys \"loss_cls\" and \"loss_box_reg\".\n        \"\"\"", "\n", "\n", "if", "self", ".", "is_training", ":", "\n", "            ", "if", "self", ".", "ANCHOR_REG_method", "==", "1", ":", "\n", "                ", "return", "{", "\n", "\"anchor_cls\"", ":", "self", ".", "softmax_cross_entropy_loss_anchor_normal", "(", ")", ",", "\n", "\"anchor_residual_reg\"", ":", "self", ".", "smooth_l1_loss_ANCHOR_REGidual_GT_residual", "(", ")", ",", "\n", "\"loss_cls\"", ":", "self", ".", "softmax_cross_entropy_loss", "(", ")", ",", "\n", "\"loss_box_reg\"", ":", "self", ".", "smooth_l1_loss", "(", ")", "\n", "\n", "}", "\n", "", "elif", "self", ".", "ANCHOR_REG_method", "==", "2", ":", "\n", "                ", "return", "{", "\n", "\"anchor_cls\"", ":", "self", ".", "softmax_cross_entropy_loss_anchor_normal", "(", ")", ",", "\n", "\"anchor_residual_reg\"", ":", "self", ".", "smooth_l1_loss_ANCHOR_REGidual_GT_normal", "(", ")", ",", "\n", "\"loss_cls\"", ":", "self", ".", "softmax_cross_entropy_loss", "(", ")", ",", "\n", "\"loss_box_reg\"", ":", "self", ".", "smooth_l1_loss", "(", ")", "\n", "}", "\n", "", "", "else", ":", "\n", "            ", "return", "{", "\n", "\"loss_cls\"", ":", "None", ",", "\n", "\"loss_box_reg\"", ":", "None", ",", "\n", "\"anchor_cls\"", ":", "None", ",", "\n", "\"anchor_residual_reg\"", ":", "None", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.predict_boxes": [[487, 492], ["fast_rcnn.Mirror3d_FastRCNNOutputs._predict_boxes().split", "fast_rcnn.Mirror3d_FastRCNNOutputs._predict_boxes"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs._predict_boxes"], ["", "", "def", "predict_boxes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Deprecated\n        \"\"\"", "\n", "return", "self", ".", "_predict_boxes", "(", ")", ".", "split", "(", "self", ".", "num_preds_per_image", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.predict_probs": [[493, 499], ["torch.nn.functional.softmax", "torch.nn.functional.softmax.split"], "methods", ["None"], ["", "def", "predict_probs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Deprecated\n        \"\"\"", "\n", "probs", "=", "F", ".", "softmax", "(", "self", ".", "pred_class_logits", ",", "dim", "=", "-", "1", ")", "\n", "return", "probs", ".", "split", "(", "self", ".", "num_preds_per_image", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputs.inference": [[500, 509], ["fast_rcnn.Mirror3d_FastRCNNOutputs.predict_boxes", "fast_rcnn.Mirror3d_FastRCNNOutputs.predict_probs", "fast_rcnn.mirror3d_fast_rcnn_inference"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_boxes", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_probs", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.mirror3d_fast_rcnn_inference"], ["", "def", "inference", "(", "self", ",", "score_thresh", ",", "nms_thresh", ",", "topk_per_image", ")", ":", "\n", "        ", "\"\"\"\n        Deprecated\n        \"\"\"", "\n", "boxes", "=", "self", ".", "predict_boxes", "(", ")", "\n", "scores", "=", "self", ".", "predict_probs", "(", ")", "\n", "image_shapes", "=", "self", ".", "image_shapes", "\n", "return", "mirror3d_fast_rcnn_inference", "(", "\n", "boxes", ",", "scores", ",", "image_shapes", ",", "score_thresh", ",", "nms_thresh", ",", "topk_per_image", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.__init__": [[519, 579], ["torch.nn.Module.__init__", "isinstance", "detectron2.layers.Linear", "len", "detectron2.layers.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.normal_", "detectron2.layers.ShapeSpec", "torch.nn.init.constant_"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.__init__"], ["@", "configurable", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "input_shape", ",", "\n", "*", ",", "\n", "box2box_transform", ",", "\n", "num_classes", ",", "\n", "cls_agnostic_bbox_reg", "=", "False", ",", "\n", "smooth_l1_beta", "=", "0.0", ",", "\n", "test_score_thresh", "=", "0.0", ",", "\n", "test_nms_thresh", "=", "0.5", ",", "\n", "test_topk_per_image", "=", "100", ",", "\n", "anchor_normal_class_num", ",", "\n", "anchor_normals", "=", "None", ",", "\n", "ANCHOR_REG_method", "=", "1", ",", "\n", "anchor_cls", "=", "False", ",", "\n", "ANCHOR_REG", "=", "False", ",", "\n", "OBJECT_CLS", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        NOTE: this interface is experimental.\n\n        Args:\n            input_shape (ShapeSpec): shape of the input feature to this module\n            box2box_transform (Box2BoxTransform or Box2BoxTransformRotated):\n            num_classes (int): number of foreground classes\n            cls_agnostic_bbox_reg (bool): whether to use class agnostic for bbox regression\n            smooth_l1_beta (float): transition point from L1 to L2 loss.\n            test_score_thresh (float): threshold to filter predictions results.\n            test_nms_thresh (float): NMS threshold for prediction results.\n            test_topk_per_image (int): number of top predictions to produce per image.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "input_shape", ",", "int", ")", ":", "# some backward compatibility", "\n", "            ", "input_shape", "=", "ShapeSpec", "(", "channels", "=", "input_shape", ")", "\n", "", "input_size", "=", "input_shape", ".", "channels", "*", "(", "input_shape", ".", "width", "or", "1", ")", "*", "(", "input_shape", ".", "height", "or", "1", ")", "\n", "# The prediction layer for num_classes foreground classes and one background class", "\n", "# (hence + 1)", "\n", "self", ".", "cls_score", "=", "Linear", "(", "input_size", ",", "num_classes", "+", "1", ")", "\n", "num_bbox_reg_classes", "=", "1", "if", "cls_agnostic_bbox_reg", "else", "num_classes", "\n", "box_dim", "=", "len", "(", "box2box_transform", ".", "weights", ")", "\n", "self", ".", "bbox_pred", "=", "Linear", "(", "input_size", ",", "num_bbox_reg_classes", "*", "box_dim", ")", "\n", "self", ".", "anchor_normal_score", "=", "nn", ".", "Linear", "(", "input_size", ",", "anchor_normal_class_num", ")", "\n", "self", ".", "anchor_parameter", "=", "nn", ".", "Linear", "(", "input_size", ",", "anchor_normal_class_num", "*", "3", ")", "\n", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "cls_score", ".", "weight", ",", "std", "=", "0.01", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "bbox_pred", ".", "weight", ",", "std", "=", "0.001", ")", "\n", "for", "l", "in", "[", "self", ".", "cls_score", ",", "self", ".", "bbox_pred", "]", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "l", ".", "bias", ",", "0", ")", "\n", "\n", "", "self", ".", "box2box_transform", "=", "box2box_transform", "\n", "self", ".", "smooth_l1_beta", "=", "smooth_l1_beta", "\n", "self", ".", "test_score_thresh", "=", "test_score_thresh", "\n", "self", ".", "test_nms_thresh", "=", "test_nms_thresh", "\n", "self", ".", "test_topk_per_image", "=", "test_topk_per_image", "\n", "self", ".", "anchor_normals", "=", "anchor_normals", "\n", "self", ".", "ANCHOR_REG_method", "=", "ANCHOR_REG_method", "\n", "self", ".", "anchor_cls", "=", "anchor_cls", "\n", "self", ".", "ANCHOR_REG", "=", "ANCHOR_REG", "\n", "self", ".", "OBJECT_CLS", "=", "OBJECT_CLS", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.from_config": [[580, 598], ["detectron2.modeling.box_regression.Box2BoxTransform", "numpy.load"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_config", "(", "cls", ",", "cfg", ",", "input_shape", ")", ":", "\n", "        ", "return", "{", "\n", "\"input_shape\"", ":", "input_shape", ",", "\n", "\"box2box_transform\"", ":", "Box2BoxTransform", "(", "weights", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "BBOX_REG_WEIGHTS", ")", ",", "\n", "# fmt: off", "\n", "\"num_classes\"", ":", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "NUM_CLASSES", ",", "\n", "\"cls_agnostic_bbox_reg\"", ":", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "CLS_AGNOSTIC_BBOX_REG", ",", "\n", "\"smooth_l1_beta\"", ":", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "SMOOTH_L1_BETA", ",", "\n", "\"test_score_thresh\"", ":", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "SCORE_THRESH_TEST", ",", "\n", "\"test_nms_thresh\"", ":", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "NMS_THRESH_TEST", ",", "\n", "\"test_topk_per_image\"", ":", "cfg", ".", "TEST", ".", "DETECTIONS_PER_IMAGE", ",", "\n", "\"anchor_normal_class_num\"", ":", "cfg", ".", "ANCHOR_NORMAL_CLASS_NUM", "+", "1", ",", "#! + 1 background; background is the last class", "\n", "\"anchor_normals\"", ":", "np", ".", "load", "(", "cfg", ".", "ANCHOR_NORMAL_NYP", ")", ",", "\n", "\"ANCHOR_REG_method\"", ":", "cfg", ".", "ANCHOR_REG_METHOD", ",", "\n", "\"anchor_cls\"", ":", "cfg", ".", "ANCHOR_CLS", ",", "\n", "\"ANCHOR_REG\"", ":", "cfg", ".", "ANCHOR_REG", ",", "\n", "\"OBJECT_CLS\"", ":", "cfg", ".", "OBJECT_CLS", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.forward": [[601, 614], ["fast_rcnn.Mirror3d_FastRCNNOutputLayers.cls_score", "fast_rcnn.Mirror3d_FastRCNNOutputLayers.bbox_pred", "fast_rcnn.Mirror3d_FastRCNNOutputLayers.anchor_normal_score", "fast_rcnn.Mirror3d_FastRCNNOutputLayers.anchor_parameter", "torch.flatten.dim", "torch.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            Tensor: Nx(K+1) scores for each box\n            Tensor: Nx4 or Nx(Kx4) bounding box regression deltas.\n        \"\"\"", "\n", "if", "x", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "x", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", "\n", "", "scores", "=", "self", ".", "cls_score", "(", "x", ")", "\n", "proposal_deltas", "=", "self", ".", "bbox_pred", "(", "x", ")", "\n", "anchor_normal_score", "=", "self", ".", "anchor_normal_score", "(", "x", ")", "\n", "anchor_residual_pred", "=", "self", ".", "anchor_parameter", "(", "x", ")", "\n", "return", "scores", ",", "proposal_deltas", ",", "anchor_normal_score", ",", "anchor_residual_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.losses": [[615, 625], ["fast_rcnn.Mirror3d_FastRCNNOutputs.losses", "fast_rcnn.Mirror3d_FastRCNNOutputs"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.losses"], ["", "def", "losses", "(", "self", ",", "predictions", ",", "proposals", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            predictions: return values of :meth:`forward()`.\n            proposals (list[Instances]): proposals that match the features\n                that were used to compute predictions.\n        \"\"\"", "\n", "scores", ",", "proposal_deltas", ",", "anchor_normal_score", ",", "anchor_residual_pred", "=", "predictions", "\n", "return", "Mirror3d_FastRCNNOutputs", "(", "\n", "self", ".", "box2box_transform", ",", "scores", ",", "proposal_deltas", ",", "proposals", ",", "self", ".", "smooth_l1_beta", ",", "anchor_normal_score", ",", "anchor_residual_pred", ",", "self", ".", "anchor_normals", ",", "self", ".", "ANCHOR_REG_method", ",", "self", ".", "anchor_cls", ",", "self", ".", "ANCHOR_REG", ",", "self", ".", "training", "\n", ")", ".", "losses", "(", ")", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.inference": [[627, 650], ["fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_boxes", "fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_probs", "fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_anchor_cls", "fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_residual", "fast_rcnn.mirror3d_fast_rcnn_inference"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_boxes", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_probs", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_anchor_cls", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_residual", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.mirror3d_fast_rcnn_inference"], ["", "def", "inference", "(", "self", ",", "predictions", ",", "proposals", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            list[Instances]: same as `mirror3d_fast_rcnn_inference`.\n            list[Tensor]: same as `mirror3d_fast_rcnn_inference`.\n        \"\"\"", "\n", "# TODO_ get gt box match here  ", "\n", "boxes", "=", "self", ".", "predict_boxes", "(", "predictions", ",", "proposals", ")", "\n", "scores", "=", "self", ".", "predict_probs", "(", "predictions", ",", "proposals", ")", "\n", "anchor_scores", "=", "self", ".", "predict_anchor_cls", "(", "predictions", ",", "proposals", ")", "\n", "residual", "=", "self", ".", "predict_residual", "(", "predictions", ",", "proposals", ")", "\n", "image_shapes", "=", "[", "x", ".", "image_size", "for", "x", "in", "proposals", "]", "\n", "\n", "return", "mirror3d_fast_rcnn_inference", "(", "\n", "boxes", ",", "\n", "scores", ",", "\n", "anchor_scores", ",", "\n", "residual", ",", "\n", "image_shapes", ",", "\n", "self", ".", "test_score_thresh", ",", "\n", "self", ".", "test_nms_thresh", ",", "\n", "self", ".", "test_topk_per_image", ",", "\n", "self", ".", "OBJECT_CLS", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.chris_eval_match_gt": [[651, 661], ["enumerate", "print", "fast_rcnn.Mirror3d_FastRCNNOutputLayers.get_rec_IOU", "sum", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.get_rec_IOU"], ["", "def", "chris_eval_match_gt", "(", "self", ",", "scores", ",", "boxes", ")", ":", "\n", "\n", "        ", "gt_box", "=", "[", "317.0", ",", "101.0", ",", "317.0", "+", "130.0", ",", "101.0", "+", "370.0", "]", "\n", "match_id", "=", "[", "0", "]", "*", "scores", ".", "shape", "[", "0", "]", "\n", "for", "box_index", ",", "one_box", "in", "enumerate", "(", "boxes", ")", ":", "\n", "            ", "IOU", "=", "self", ".", "get_rec_IOU", "(", "one_box", ",", "gt_box", ")", "\n", "if", "IOU", ">", "0.5", ":", "\n", "                ", "match_id", "[", "box_index", "]", "=", "1", "\n", "", "", "print", "(", "\"matched box count :\"", ",", "sum", "(", "match_id", ")", ",", "\"/ \"", ",", "len", "(", "match_id", ")", ")", "\n", "return", "match_id", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.get_rec_IOU": [[662, 689], ["max", "min", "max", "min"], "methods", ["None"], ["", "def", "get_rec_IOU", "(", "self", ",", "rec1", ",", "rec2", ")", ":", "\n", "        ", "\"\"\"\n        computing IoU\n        :param rec1: (y0, x0, y1, x1), which reflects\n                (top, left, bottom, right)\n        :param rec2: (y0, x0, y1, x1)\n        :return: scala value of IoU\n        \"\"\"", "\n", "# computing area of each rectangles", "\n", "S_rec1", "=", "(", "rec1", "[", "2", "]", "-", "rec1", "[", "0", "]", ")", "*", "(", "rec1", "[", "3", "]", "-", "rec1", "[", "1", "]", ")", "\n", "S_rec2", "=", "(", "rec2", "[", "2", "]", "-", "rec2", "[", "0", "]", ")", "*", "(", "rec2", "[", "3", "]", "-", "rec2", "[", "1", "]", ")", "\n", "\n", "# computing the sum_area", "\n", "sum_area", "=", "S_rec1", "+", "S_rec2", "\n", "\n", "# find the each edge of intersect rectangle", "\n", "left_line", "=", "max", "(", "rec1", "[", "1", "]", ",", "rec2", "[", "1", "]", ")", "\n", "right_line", "=", "min", "(", "rec1", "[", "3", "]", ",", "rec2", "[", "3", "]", ")", "\n", "top_line", "=", "max", "(", "rec1", "[", "0", "]", ",", "rec2", "[", "0", "]", ")", "\n", "bottom_line", "=", "min", "(", "rec1", "[", "2", "]", ",", "rec2", "[", "2", "]", ")", "\n", "\n", "# judge if there is an intersect", "\n", "if", "left_line", ">=", "right_line", "or", "top_line", ">=", "bottom_line", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "intersect", "=", "(", "right_line", "-", "left_line", ")", "*", "(", "bottom_line", "-", "top_line", ")", "\n", "return", "(", "intersect", "/", "(", "sum_area", "-", "intersect", ")", ")", "*", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_boxes_for_gt_classes": [[690, 719], ["fast_rcnn.Mirror3d_FastRCNNOutputLayers.box2box_transform.apply_deltas", "fast_rcnn.Mirror3d_FastRCNNOutputLayers.split", "len", "proposal_boxes[].cat", "torch.cat", "gt_classes.clamp_.clamp_.clamp_", "len", "fast_rcnn.Mirror3d_FastRCNNOutputLayers.view", "torch.arange"], "methods", ["None"], ["", "", "def", "predict_boxes_for_gt_classes", "(", "self", ",", "predictions", ",", "proposals", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            list[Tensor]: A list of Tensors of predicted boxes for GT classes in case of\n                class-specific box head. Element i of the list has shape (Ri, B), where Ri is\n                the number of predicted objects for image i and B is the box dimension (4 or 5)\n        \"\"\"", "\n", "if", "not", "len", "(", "proposals", ")", ":", "\n", "            ", "return", "[", "]", "\n", "", "scores", ",", "proposal_deltas", "=", "predictions", "\n", "proposal_boxes", "=", "[", "p", ".", "proposal_boxes", "for", "p", "in", "proposals", "]", "\n", "proposal_boxes", "=", "proposal_boxes", "[", "0", "]", ".", "cat", "(", "proposal_boxes", ")", ".", "tensor", "\n", "N", ",", "B", "=", "proposal_boxes", ".", "shape", "\n", "predict_boxes", "=", "self", ".", "box2box_transform", ".", "apply_deltas", "(", "\n", "proposal_deltas", ",", "proposal_boxes", "\n", ")", "# Nx(KxB)", "\n", "\n", "K", "=", "predict_boxes", ".", "shape", "[", "1", "]", "//", "B", "\n", "if", "K", ">", "1", ":", "\n", "            ", "gt_classes", "=", "torch", ".", "cat", "(", "[", "p", ".", "gt_classes", "for", "p", "in", "proposals", "]", ",", "dim", "=", "0", ")", "\n", "# Some proposals are ignored or have a background class. Their gt_classes", "\n", "# cannot be used as index.", "\n", "gt_classes", "=", "gt_classes", ".", "clamp_", "(", "0", ",", "K", "-", "1", ")", "\n", "\n", "predict_boxes", "=", "predict_boxes", ".", "view", "(", "N", ",", "K", ",", "B", ")", "[", "\n", "torch", ".", "arange", "(", "N", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "predict_boxes", ".", "device", ")", ",", "gt_classes", "\n", "]", "\n", "", "num_prop_per_image", "=", "[", "len", "(", "p", ")", "for", "p", "in", "proposals", "]", "\n", "return", "predict_boxes", ".", "split", "(", "num_prop_per_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_boxes": [[720, 737], ["fast_rcnn.Mirror3d_FastRCNNOutputLayers.box2box_transform.apply_deltas", "fast_rcnn.Mirror3d_FastRCNNOutputLayers.split", "len", "len", "proposal_boxes[].cat"], "methods", ["None"], ["", "def", "predict_boxes", "(", "self", ",", "predictions", ",", "proposals", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            list[Tensor]: A list of Tensors of predicted class-specific or class-agnostic boxes\n                for each image. Element i has shape (Ri, K * B) or (Ri, B), where Ri is\n                the number of predicted objects for image i and B is the box dimension (4 or 5)\n        \"\"\"", "\n", "if", "not", "len", "(", "proposals", ")", ":", "\n", "            ", "return", "[", "]", "\n", "", "_", ",", "proposal_deltas", ",", "_", ",", "_", "=", "predictions", "\n", "num_prop_per_image", "=", "[", "len", "(", "p", ")", "for", "p", "in", "proposals", "]", "\n", "proposal_boxes", "=", "[", "p", ".", "proposal_boxes", "for", "p", "in", "proposals", "]", "\n", "proposal_boxes", "=", "proposal_boxes", "[", "0", "]", ".", "cat", "(", "proposal_boxes", ")", ".", "tensor", "\n", "predict_boxes", "=", "self", ".", "box2box_transform", ".", "apply_deltas", "(", "\n", "proposal_deltas", ",", "proposal_boxes", "\n", ")", "# Nx(KxB)", "\n", "return", "predict_boxes", ".", "split", "(", "num_prop_per_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_residual": [[738, 750], ["residual.split", "len", "len"], "methods", ["None"], ["", "def", "predict_residual", "(", "self", ",", "predictions", ",", "proposals", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            list[Tensor]: A list of Tensors of predicted class-specific or class-agnostic boxes\n                for each image. Element i has shape (Ri, K * B) or (Ri, B), where Ri is\n                the number of predicted objects for image i and B is the box dimension (4 or 5)\n        \"\"\"", "\n", "if", "not", "len", "(", "proposals", ")", ":", "\n", "            ", "return", "[", "]", "\n", "", "_", ",", "_", ",", "_", ",", "residual", "=", "predictions", "\n", "num_prop_per_image", "=", "[", "len", "(", "p", ")", "for", "p", "in", "proposals", "]", "\n", "return", "residual", ".", "split", "(", "num_prop_per_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_probs": [[751, 762], ["torch.nn.functional.softmax", "torch.nn.functional.softmax.split", "len"], "methods", ["None"], ["", "def", "predict_probs", "(", "self", ",", "predictions", ",", "proposals", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            list[Tensor]: A list of Tensors of predicted class probabilities for each image.\n                Element i has shape (Ri, K + 1), where Ri is the number of predicted objects\n                for image i.\n        \"\"\"", "\n", "scores", ",", "_", ",", "_", ",", "_", "=", "predictions", "\n", "num_inst_per_image", "=", "[", "len", "(", "p", ")", "for", "p", "in", "proposals", "]", "\n", "probs", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "return", "probs", ".", "split", "(", "num_inst_per_image", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.predict_anchor_cls": [[764, 775], ["torch.nn.functional.softmax", "torch.nn.functional.softmax.split", "len"], "methods", ["None"], ["", "def", "predict_anchor_cls", "(", "self", ",", "predictions", ",", "proposals", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            list[Tensor]: A list of Tensors of predicted class probabilities for each image.\n                Element i has shape (Ri, K + 1), where Ri is the number of predicted objects\n                for image i.\n        \"\"\"", "\n", "_", ",", "_", ",", "scores", ",", "_", "=", "predictions", "\n", "num_inst_per_image", "=", "[", "len", "(", "p", ")", "for", "p", "in", "proposals", "]", "\n", "probs", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "return", "probs", ".", "split", "(", "num_inst_per_image", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.mirror3d_fast_rcnn_inference": [[47, 80], ["fast_rcnn.mirror3d_fast_rcnn_inference_single_image", "zip"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.mirror3d_fast_rcnn_inference_single_image"], ["def", "mirror3d_fast_rcnn_inference", "(", "boxes", ",", "scores", ",", "anchor_scores", ",", "residuals", ",", "image_shapes", ",", "score_thresh", ",", "nms_thresh", ",", "topk_per_image", ",", "OBJECT_CLS", ")", ":", "\n", "    ", "\"\"\"\n    Call `mirror3d_fast_rcnn_inference_single_image` for all images.\n\n    Args:\n        boxes (list[Tensor]): A list of Tensors of predicted class-specific or class-agnostic\n            boxes for each image. Element i has shape (Ri, K * 4) if doing\n            class-specific regression, or (Ri, 4) if doing class-agnostic\n            regression, where Ri is the number of predicted objects for image i.\n            This is compatible with the output of :meth:`Mirror3d_FastRCNNOutputLayers.predict_boxes`.\n        scores (list[Tensor]): A list of Tensors of predicted class scores for each image.\n            Element i has shape (Ri, K + 1), where Ri is the number of predicted objects\n            for image i. Compatible with the output of :meth:`Mirror3d_FastRCNNOutputLayers.predict_probs`.\n        image_shapes (list[tuple]): A list of (width, height) tuples for each image in the batch.\n        score_thresh (float): Only return detections with a confidence score exceeding this\n            threshold.\n        nms_thresh (float):  The threshold to use for box non-maximum suppression. Value in [0, 1].\n        topk_per_image (int): The number of top scoring detections to return. Set < 0 to return\n            all detections.\n\n    Returns:\n        instances: (list[Instances]): A list of N instances, one for each image in the batch,\n            that stores the topk most confidence detections.\n        kept_indices: (list[Tensor]): A list of 1D tensor of length of N, each element indicates\n            the corresponding boxes/scores index in [0, Ri) from the input, for image i.\n    \"\"\"", "\n", "result_per_image", "=", "[", "\n", "mirror3d_fast_rcnn_inference_single_image", "(", "\n", "boxes_per_image", ",", "scores_per_image", ",", "anchor_score_per_image", ",", "residual_per_image", ",", "image_shape", ",", "score_thresh", ",", "nms_thresh", ",", "topk_per_image", ",", "OBJECT_CLS", "\n", ")", "\n", "for", "scores_per_image", ",", "boxes_per_image", ",", "anchor_score_per_image", ",", "residual_per_image", ",", "image_shape", "in", "zip", "(", "scores", ",", "boxes", ",", "anchor_scores", ",", "residuals", ",", "image_shapes", ")", "\n", "]", "\n", "return", "[", "x", "[", "0", "]", "for", "x", "in", "result_per_image", "]", ",", "[", "x", "[", "1", "]", "for", "x", "in", "result_per_image", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.mirror3d_fast_rcnn_inference_single_image": [[83, 158], ["torch.tensor().unsqueeze().cuda.argmax", "torch.stack", "detectron2.structures.Boxes", "boxes.tensor.view.clip", "boxes.tensor.view.tensor.view", "filter_mask.nonzero", "detectron2.layers.batched_nms", "torch.tensor().unsqueeze().cuda", "sys.stdout.flush", "detectron2.structures.Instances", "detectron2.structures.Boxes", "valid_mask.all", "anchor_scores[].argmax", "torch.tensor().unsqueeze().cuda", "boxes.tensor.view.reshape", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.isfinite().all", "torch.tensor().unsqueeze", "anchor_scores.argmax.unsqueeze", "enumerate", "torch.tensor().unsqueeze", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.isfinite", "torch.tensor", "filter_mask.nonzero", "torch.tensor", "enumerate", "enumerate"], "function", ["None"], ["", "def", "mirror3d_fast_rcnn_inference_single_image", "(", "\n", "boxes", ",", "scores", ",", "anchor_scores", ",", "pred_residual", ",", "image_shape", ",", "score_thresh", ",", "nms_thresh", ",", "topk_per_image", ",", "OBJECT_CLS", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Single-image inference. Return bounding-box detection results by thresholding\n    on scores and applying non-maximum suppression (NMS).\n    Args:\n        Same as `mirror3d_fast_rcnn_inference`, but with boxes, scores, and image shapes\n        per image.\n    Returns:\n        Same as `mirror3d_fast_rcnn_inference`, but for only one image.\n    \"\"\"", "\n", "anchor_idx", "=", "anchor_scores", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "pred_residual_3", "=", "torch", ".", "stack", "(", "[", "pred_residual", "[", "i", "]", "[", "idx", "*", "3", ":", "(", "idx", "+", "1", ")", "*", "3", "]", "for", "i", ",", "idx", "in", "enumerate", "(", "anchor_idx", ")", "]", ",", "0", ")", "\n", "\n", "if", "OBJECT_CLS", ":", "\n", "        ", "valid_mask", "=", "torch", ".", "isfinite", "(", "boxes", ")", ".", "all", "(", "dim", "=", "1", ")", "&", "torch", ".", "isfinite", "(", "scores", ")", ".", "all", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "valid_mask", "=", "torch", ".", "isfinite", "(", "boxes", ")", ".", "all", "(", "dim", "=", "1", ")", "&", "torch", ".", "isfinite", "(", "anchor_scores", ")", ".", "all", "(", "dim", "=", "1", ")", "\n", "\n", "", "if", "not", "valid_mask", ".", "all", "(", ")", ":", "\n", "        ", "boxes", "=", "boxes", "[", "valid_mask", "]", "\n", "scores", "=", "scores", "[", "valid_mask", "]", "\n", "anchor_scores", "=", "[", "valid_mask", "]", "\n", "\n", "", "if", "OBJECT_CLS", ":", "\n", "        ", "scores", "=", "scores", "[", ":", ",", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "        ", "max_anchor_score_id", "=", "anchor_scores", "[", ":", ",", ":", "-", "1", "]", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "scores", "=", "torch", ".", "tensor", "(", "[", "anchor_scores", "[", "id", "]", "[", "a", "]", "for", "id", ",", "a", "in", "enumerate", "(", "max_anchor_score_id", ")", "]", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "\n", "", "num_bbox_reg_classes", "=", "boxes", ".", "shape", "[", "1", "]", "//", "4", "\n", "# Convert to Boxes to use the `clip` function ...", "\n", "boxes", "=", "Boxes", "(", "boxes", ".", "reshape", "(", "-", "1", ",", "4", ")", ")", "\n", "boxes", ".", "clip", "(", "image_shape", ")", "\n", "boxes", "=", "boxes", ".", "tensor", ".", "view", "(", "-", "1", ",", "num_bbox_reg_classes", ",", "4", ")", "# R x C x 4", "\n", "\n", "# Filter results based on detection scores", "\n", "filter_mask", "=", "scores", ">", "score_thresh", "# R x K", "\n", "anchor_scores_filter_mask", "=", "anchor_scores", "[", ":", ",", ":", "-", "1", "]", ">", "score_thresh", "\n", "\n", "# R' x 2. First column contains indices of the R predictions;", "\n", "# Second column contains indices of classes.", "\n", "filter_inds", "=", "filter_mask", ".", "nonzero", "(", ")", "\n", "if", "num_bbox_reg_classes", "==", "1", ":", "\n", "        ", "boxes", "=", "boxes", "[", "filter_inds", "[", ":", ",", "0", "]", ",", "0", "]", "\n", "", "else", ":", "\n", "        ", "boxes", "=", "boxes", "[", "filter_mask", "]", "\n", "", "scores", "=", "scores", "[", "filter_mask", "]", "\n", "\n", "# Apply per-class NMS", "\n", "keep", "=", "batched_nms", "(", "boxes", ",", "scores", ",", "filter_inds", "[", ":", ",", "1", "]", ",", "nms_thresh", ")", "\n", "if", "topk_per_image", ">=", "0", ":", "\n", "        ", "keep", "=", "keep", "[", ":", "topk_per_image", "]", "\n", "\n", "", "anchor_scores", "=", "torch", ".", "tensor", "(", "[", "anchor_scores", "[", "id", "]", "[", "a", "]", "for", "id", ",", "a", "in", "enumerate", "(", "anchor_idx", ")", "]", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "cuda", "(", ")", "\n", "if", "filter_mask", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "        ", "anchor_scores", "=", "anchor_scores", "[", "filter_mask", "]", "\n", "anchor_idx", "=", "anchor_idx", ".", "unsqueeze", "(", "dim", "=", "1", ")", "[", "filter_mask", "]", "\n", "pred_residual_3", "=", "pred_residual_3", "[", "(", "filter_mask", ")", ".", "nonzero", "(", ")", "[", ":", ",", "0", "]", "]", "\n", "\n", "\n", "", "boxes", ",", "scores", ",", "filter_inds", ",", "anchor_idx", ",", "pred_residual_3", ",", "anchor_scores", "=", "boxes", "[", "keep", "]", ",", "scores", "[", "keep", "]", ",", "filter_inds", "[", "keep", "]", ",", "anchor_idx", "[", "keep", "]", ",", "pred_residual_3", "[", "keep", "]", ",", "anchor_scores", "[", "keep", "]", "\n", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "result", "=", "Instances", "(", "image_shape", ")", "\n", "result", ".", "pred_boxes", "=", "Boxes", "(", "boxes", ")", "\n", "result", ".", "scores", "=", "scores", "\n", "result", ".", "anchor_scores", "=", "anchor_scores", "\n", "result", ".", "pred_anchor_classes", "=", "anchor_idx", "\n", "result", ".", "pred_residuals", "=", "pred_residual_3", "\n", "result", ".", "pred_classes", "=", "filter_inds", "[", ":", ",", "1", "]", "\n", "\n", "return", "result", ",", "filter_inds", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.cross_entropy": [[160, 166], ["numpy.float_", "numpy.float_", "numpy.sum", "numpy.log", "numpy.log"], "function", ["None"], ["", "def", "cross_entropy", "(", "Y", ",", "P", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "Y", "=", "np", ".", "float_", "(", "Y", ")", "\n", "P", "=", "np", ".", "float_", "(", "P", ")", "\n", "\n", "return", "-", "np", ".", "sum", "(", "Y", "*", "np", ".", "log", "(", "P", ")", "+", "(", "1", "-", "Y", ")", "*", "np", ".", "log", "(", "1", "-", "P", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.roi_heads.Mirror3d_StandardROIHeads.forward": [[46, 80], ["roi_heads.Mirror3d_StandardROIHeads.label_and_sample_proposals", "roi_heads.Mirror3d_StandardROIHeads._forward_box", "roi_heads.Mirror3d_StandardROIHeads.update", "roi_heads.Mirror3d_StandardROIHeads.update", "roi_heads.Mirror3d_StandardROIHeads._forward_box", "roi_heads.Mirror3d_StandardROIHeads.forward_with_given_boxes", "roi_heads.Mirror3d_StandardROIHeads._forward_mask", "roi_heads.Mirror3d_StandardROIHeads._forward_keypoint"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.roi_heads.Mirror3d_StandardROIHeads.label_and_sample_proposals", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.roi_heads.Mirror3d_StandardROIHeads._forward_box", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.roi_heads.Mirror3d_StandardROIHeads._forward_box"], ["def", "forward", "(", "\n", "self", ",", "\n", "images", ":", "ImageList", ",", "\n", "features", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "proposals", ":", "List", "[", "Instances", "]", ",", "\n", "targets", ":", "Optional", "[", "List", "[", "Instances", "]", "]", "=", "None", ",", "\n", "anchor_normal_class_num", ":", "int", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "List", "[", "Instances", "]", ",", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", ":", "\n", "        ", "\"\"\"\n        See :class:`ROIHeads.forward`.\n        \"\"\"", "\n", "del", "images", "\n", "self", ".", "anchor_normal_class_num", "=", "anchor_normal_class_num", "\n", "if", "self", ".", "training", ":", "\n", "            ", "assert", "targets", "# add gt_anchor_normal_class gt_anchor_normal_residual to Instance in Proposal", "\n", "proposals", "=", "self", ".", "label_and_sample_proposals", "(", "proposals", ",", "targets", ")", "# proposals[0]._fields[\"gt_classes\"] : [0, num_classes) or the background (num_classes).", "\n", "", "del", "targets", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "losses", "=", "self", ".", "_forward_box", "(", "features", ",", "proposals", ")", "\n", "# Usually the original proposals used by the box head are used by the mask, keypoint", "\n", "# heads. But when `self.train_on_pred_boxes is True`, proposals will contain boxes", "\n", "# predicted by the box head.", "\n", "losses", ".", "update", "(", "self", ".", "_forward_mask", "(", "features", ",", "proposals", ")", ")", "\n", "losses", ".", "update", "(", "self", ".", "_forward_keypoint", "(", "features", ",", "proposals", ")", ")", "\n", "return", "proposals", ",", "losses", "\n", "", "else", ":", "\n", "            ", "pred_instances", "=", "self", ".", "_forward_box", "(", "features", ",", "proposals", ")", "\n", "\n", "# During inference cascaded prediction is used: the mask and keypoints heads are only", "\n", "# applied to the top scoring box detections.", "\n", "\n", "pred_instances", "=", "self", ".", "forward_with_given_boxes", "(", "features", ",", "pred_instances", ")", "\n", "return", "pred_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.roi_heads.Mirror3d_StandardROIHeads._init_box_head": [[81, 116], ["tuple", "detectron2.modeling.poolers.ROIPooler", "detectron2.modeling.roi_heads.box_head.build_box_head", "mirror3d_lib.modeling.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers", "len", "detectron2.layers.ShapeSpec", "set"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "_init_box_head", "(", "cls", ",", "cfg", ",", "input_shape", ")", ":", "\n", "# fmt: off", "\n", "        ", "in_features", "=", "cfg", ".", "MODEL", ".", "ROI_HEADS", ".", "IN_FEATURES", "\n", "pooler_resolution", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_RESOLUTION", "\n", "pooler_scales", "=", "tuple", "(", "1.0", "/", "input_shape", "[", "k", "]", ".", "stride", "for", "k", "in", "in_features", ")", "\n", "sampling_ratio", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_SAMPLING_RATIO", "\n", "pooler_type", "=", "cfg", ".", "MODEL", ".", "ROI_BOX_HEAD", ".", "POOLER_TYPE", "\n", "# fmt: on", "\n", "\n", "# If StandardROIHeads is applied on multiple feature maps (as in FPN),", "\n", "# then we share the same predictors and therefore the channel counts must be the same", "\n", "in_channels", "=", "[", "input_shape", "[", "f", "]", ".", "channels", "for", "f", "in", "in_features", "]", "\n", "# Check all channel counts are equal", "\n", "assert", "len", "(", "set", "(", "in_channels", ")", ")", "==", "1", ",", "in_channels", "\n", "in_channels", "=", "in_channels", "[", "0", "]", "\n", "\n", "box_pooler", "=", "ROIPooler", "(", "\n", "output_size", "=", "pooler_resolution", ",", "\n", "scales", "=", "pooler_scales", ",", "\n", "sampling_ratio", "=", "sampling_ratio", ",", "\n", "pooler_type", "=", "pooler_type", ",", "\n", ")", "\n", "# Here we split \"box head\" and \"box predictor\", which is mainly due to historical reasons.", "\n", "# They are used together so the \"box predictor\" layers should be part of the \"box head\".", "\n", "# New subclasses of ROIHeads do not need \"box predictor\"s.", "\n", "box_head", "=", "build_box_head", "(", "\n", "cfg", ",", "ShapeSpec", "(", "channels", "=", "in_channels", ",", "height", "=", "pooler_resolution", ",", "width", "=", "pooler_resolution", ")", "\n", ")", "\n", "box_predictor", "=", "Mirror3d_FastRCNNOutputLayers", "(", "cfg", ",", "box_head", ".", "output_shape", ")", "\n", "return", "{", "\n", "\"box_in_features\"", ":", "in_features", ",", "\n", "\"box_pooler\"", ":", "box_pooler", ",", "\n", "\"box_head\"", ":", "box_head", ",", "\n", "\"box_predictor\"", ":", "box_predictor", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.roi_heads.Mirror3d_StandardROIHeads._forward_box": [[118, 150], ["roi_heads.Mirror3d_StandardROIHeads.box_pooler", "roi_heads.Mirror3d_StandardROIHeads.box_head", "roi_heads.Mirror3d_StandardROIHeads.box_predictor", "roi_heads.Mirror3d_StandardROIHeads.box_predictor.losses", "roi_heads.Mirror3d_StandardROIHeads.box_predictor.inference"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.losses", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.fast_rcnn.Mirror3d_FastRCNNOutputLayers.inference"], ["", "def", "_forward_box", "(", "\n", "self", ",", "features", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "proposals", ":", "List", "[", "Instances", "]", ",", "\n", ")", "->", "Union", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "List", "[", "Instances", "]", "]", ":", "\n", "        ", "\"\"\"\n        Forward logic of the box prediction branch. If `self.train_on_pred_boxes is True`,\n            the function puts predicted boxes in the `proposal_boxes` field of `proposals` argument.\n\n        Args:\n            features (dict[str, Tensor]): mapping from feature map names to tensor.\n                Same as in :meth:`ROIHeads.forward`.\n            proposals (list[Instances]): the per-image object proposals with\n                their matching ground truth.\n                Each has fields \"proposal_boxes\", and \"objectness_logits\",\n                \"gt_classes\", \"gt_boxes\".\n\n        Returns:\n            In training, a dict of losses.\n            In inference, a list of `Instances`, the predicted instances.\n        \"\"\"", "\n", "features", "=", "[", "features", "[", "f", "]", "for", "f", "in", "self", ".", "box_in_features", "]", "\n", "box_features", "=", "self", ".", "box_pooler", "(", "features", ",", "[", "x", ".", "proposal_boxes", "for", "x", "in", "proposals", "]", ")", "\n", "box_features", "=", "self", ".", "box_head", "(", "box_features", ")", "\n", "predictions", "=", "self", ".", "box_predictor", "(", "box_features", ")", "\n", "del", "box_features", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "losses", "=", "self", ".", "box_predictor", ".", "losses", "(", "predictions", ",", "proposals", ")", "\n", "return", "losses", "\n", "", "else", ":", "\n", "\n", "            ", "pred_instances", ",", "_", "=", "self", ".", "box_predictor", ".", "inference", "(", "predictions", ",", "proposals", ")", "\n", "return", "pred_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.roi_heads.Mirror3d_StandardROIHeads._sample_proposals_chris": [[152, 201], ["detectron2.modeling.sampling.subsample_labels", "torch.cat", "gt_classes.numel", "torch.zeros_like", "torch.zeros_like", "torch.zeros"], "methods", ["None"], ["", "", "def", "_sample_proposals_chris", "(", "\n", "self", ",", "matched_idxs", ":", "torch", ".", "Tensor", ",", "matched_labels", ":", "torch", ".", "Tensor", ",", "gt_classes", ":", "torch", ".", "Tensor", ",", "anchor_normal_classes", ":", "torch", ".", "Tensor", ",", "anchor_normal_residuals", ":", "torch", ".", "Tensor", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n            Based on the matching between N proposals and M groundtruth,\n            sample the proposals and set their classification labels.\n\n            Args:\n                matched_idxs (Tensor): a vector of length N, each is the best-matched\n                    gt index in [0, M) for each proposal.\n                matched_labels (Tensor): a vector of length N, the matcher's label\n                    (one of cfg.MODEL.ROI_HEADS.IOU_LABELS) for each proposal.\n                gt_classes (Tensor): a vector of length M.\n\n            Returns:\n                Tensor: a vector of indices of sampled proposals. Each is in [0, N).\n                Tensor: a vector of the same length, the classification label for\n                    each sampled proposal. Each sample is labeled as either a category in\n                    [0, num_classes) or the background (num_classes).\n        \"\"\"", "\n", "has_gt", "=", "gt_classes", ".", "numel", "(", ")", ">", "0", "#  gt_classes.shape torch.Size([<number_of_instance_in_the_image>])", "\n", "# Get the corresponding GT for each proposal", "\n", "if", "has_gt", ":", "\n", "            ", "gt_classes", "=", "gt_classes", "[", "matched_idxs", "]", "# gt_classes.shape = torch.Size([len(matched_idxs)]); get the gt_class of intance that match the corresponding proposal", "\n", "# Label unmatched proposals (0 label from matcher) as background (label=num_classes); previous the id_map set the gt_classes start from 0", "\n", "gt_classes", "[", "matched_labels", "==", "0", "]", "=", "self", ".", "num_classes", "# matched_labels == 0 means the IOU is between the [lower_bound, upper_bound]", "\n", "# Label ignore proposals (-1 label)", "\n", "gt_classes", "[", "matched_labels", "==", "-", "1", "]", "=", "-", "1", "\n", "#  get gt_anchor_normal_classes", "\n", "anchor_normal_classes", "=", "anchor_normal_classes", "[", "matched_idxs", "]", "\n", "anchor_normal_classes", "[", "matched_labels", "==", "0", "]", "=", "self", ".", "anchor_normal_class_num", "\n", "anchor_normal_classes", "[", "matched_labels", "==", "-", "1", "]", "=", "-", "1", "\n", "anchor_normal_residuals", "=", "anchor_normal_residuals", "[", "matched_idxs", "]", "\n", "anchor_normal_residuals", "[", "matched_labels", "==", "0", "]", "=", "0", "# background", "\n", "anchor_normal_residuals", "[", "matched_labels", "==", "-", "1", "]", "=", "-", "1", "# negative", "\n", "\n", "", "else", ":", "# if don't have gt instance in this image, all proposal should be background", "\n", "            ", "gt_classes", "=", "torch", ".", "zeros_like", "(", "matched_idxs", ")", "+", "self", ".", "num_classes", "\n", "anchor_normal_classes", "=", "torch", ".", "zeros_like", "(", "matched_idxs", ")", "+", "self", ".", "anchor_normal_class_num", "\n", "anchor_normal_residuals", "=", "torch", ".", "zeros", "(", "[", "matched_idxs", ".", "shape", "[", "0", "]", ",", "0", "]", ")", ".", "shape", "\n", "# chris: now gt_classes = self.num_classes -> bg ; self.num_classes = -1 ignored; gt_classes = [0, self.num_classes) --> matched positive sample", "\n", "", "sampled_fg_idxs", ",", "sampled_bg_idxs", "=", "subsample_labels", "(", "\n", "gt_classes", ",", "self", ".", "batch_size_per_image", ",", "self", ".", "positive_fraction", ",", "self", ".", "num_classes", "\n", ")", "\n", "\n", "\n", "\n", "sampled_idxs", "=", "torch", ".", "cat", "(", "[", "sampled_fg_idxs", ",", "sampled_bg_idxs", "]", ",", "dim", "=", "0", ")", "\n", "return", "sampled_idxs", ",", "gt_classes", "[", "sampled_idxs", "]", ",", "anchor_normal_classes", "[", "sampled_idxs", "]", ",", "anchor_normal_residuals", "[", "sampled_idxs", "]", "# gt_classes : [0, num_classes) or the background (num_classes).", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.roi_heads.Mirror3d_StandardROIHeads._sample_proposals": [[203, 240], ["detectron2.modeling.sampling.subsample_labels", "torch.cat", "gt_classes.numel", "torch.zeros_like"], "methods", ["None"], ["", "def", "_sample_proposals", "(", "\n", "self", ",", "matched_idxs", ":", "torch", ".", "Tensor", ",", "matched_labels", ":", "torch", ".", "Tensor", ",", "gt_classes", ":", "torch", ".", "Tensor", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Based on the matching between N proposals and M groundtruth,\n        sample the proposals and set their classification labels.\n\n        Args:\n            matched_idxs (Tensor): a vector of length N, each is the best-matched\n                gt index in [0, M) for each proposal.\n            matched_labels (Tensor): a vector of length N, the matcher's label\n                (one of cfg.MODEL.ROI_HEADS.IOU_LABELS) for each proposal.\n            gt_classes (Tensor): a vector of length M.\n\n        Returns:\n            Tensor: a vector of indices of sampled proposals. Each is in [0, N).\n            Tensor: a vector of the same length, the classification label for\n                each sampled proposal. Each sample is labeled as either a category in\n                [0, num_classes) or the background (num_classes).\n        \"\"\"", "\n", "has_gt", "=", "gt_classes", ".", "numel", "(", ")", ">", "0", "#  gt_classes.shape torch.Size([<number_of_instance_in_the_image>])", "\n", "# Get the corresponding GT for each proposal", "\n", "if", "has_gt", ":", "\n", "            ", "gt_classes", "=", "gt_classes", "[", "matched_idxs", "]", "# gt_classes.shape = torch.Size([len(matched_idxs)]); get the gt_class of intance that match the corresponding proposal", "\n", "# Label unmatched proposals (0 label from matcher) as background (label=num_classes); previous the id_map set the gt_classes start from 0", "\n", "gt_classes", "[", "matched_labels", "==", "0", "]", "=", "self", ".", "num_classes", "# matched_labels == 0 means the IOU is between the [lower_bound, upper_bound]", "\n", "# Label ignore proposals (-1 label)", "\n", "gt_classes", "[", "matched_labels", "==", "-", "1", "]", "=", "-", "1", "\n", "", "else", ":", "# if don't have gt instance in this image, all proposal should be background", "\n", "            ", "gt_classes", "=", "torch", ".", "zeros_like", "(", "matched_idxs", ")", "+", "self", ".", "num_classes", "\n", "# chris: now gt_classes = self.num_classes -> bg ; self.num_classes = -1 ignored; gt_classes = [0, self.num_classes) --> matched positive sample", "\n", "", "sampled_fg_idxs", ",", "sampled_bg_idxs", "=", "subsample_labels", "(", "\n", "gt_classes", ",", "self", ".", "batch_size_per_image", ",", "self", ".", "positive_fraction", ",", "self", ".", "num_classes", "\n", ")", "\n", "\n", "sampled_idxs", "=", "torch", ".", "cat", "(", "[", "sampled_fg_idxs", ",", "sampled_bg_idxs", "]", ",", "dim", "=", "0", ")", "\n", "return", "sampled_idxs", ",", "gt_classes", "[", "sampled_idxs", "]", "# gt_classes : [0, num_classes) or the background (num_classes).", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.roi_heads.Mirror3d_StandardROIHeads.label_and_sample_proposals": [[241, 344], ["torch.no_grad", "zip", "detectron2.utils.events.get_event_storage", "detectron2.utils.events.get_event_storage.put_scalar", "detectron2.utils.events.get_event_storage.put_scalar", "detectron2.modeling.proposal_generator.proposal_utils.add_ground_truth_to_proposals", "detectron2.structures.pairwise_iou", "roi_heads.Mirror3d_StandardROIHeads.proposal_matcher", "num_bg_samples.append", "num_fg_samples.append", "proposals_with_gt.append", "numpy.mean", "numpy.mean", "len", "roi_heads.Mirror3d_StandardROIHeads._sample_proposals_chris", "roi_heads.Mirror3d_StandardROIHeads._sample_proposals", "targets_per_image.get_fields().items", "detectron2.structures.Boxes", "targets_per_image.gt_boxes.tensor.new_zeros", "gt_classes.numel", "targets_per_image.get_fields", "trg_name.startswith", "proposals_per_image.set", "print", "proposals_per_image.has", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.roi_heads.Mirror3d_StandardROIHeads._sample_proposals_chris", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.roi_heads.roi_heads.Mirror3d_StandardROIHeads._sample_proposals"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "label_and_sample_proposals", "(", "\n", "self", ",", "proposals", ":", "List", "[", "Instances", "]", ",", "targets", ":", "List", "[", "Instances", "]", "\n", ")", "->", "List", "[", "Instances", "]", ":", "\n", "        ", "\"\"\"\n        Prepare some proposals to be used to train the ROI heads.\n        It performs box matching between `proposals` and `targets`, and assigns\n        training labels to the proposals.\n        It returns ``self.batch_size_per_image`` random samples from proposals and groundtruth\n        boxes, with a fraction of positives that is no larger than\n        ``self.positive_fraction``.\n\n        Args:\n            See :meth:`ROIHeads.forward`\n\n        Returns:\n            list[Instances]:\n                length `N` list of `Instances`s containing the proposals\n                sampled for training. Each `Instances` has the following fields:\n\n                - proposal_boxes: the proposal boxes\n                - gt_boxes: the ground-truth box that the proposal is assigned to\n                  (this is only meaningful if the proposal has a label > 0; if label = 0\n                  then the ground-truth box is random)\n\n                Other fields such as \"gt_classes\", \"gt_masks\", that's included in `targets`.\n        \"\"\"", "\n", "gt_boxes", "=", "[", "x", ".", "gt_boxes", "for", "x", "in", "targets", "]", "\n", "# Augment proposals with ground-truth boxes.", "\n", "# In the case of learned proposals (e.g., RPN), when training starts", "\n", "# the proposals will be low quality due to random initialization.", "\n", "# It's possible that none of these initial", "\n", "# proposals have high enough overlap with the gt objects to be used", "\n", "# as positive examples for the second stage components (box head,", "\n", "# cls head, mask head). Adding the gt boxes to the set of proposals", "\n", "# ensures that the second stage components will have some positive", "\n", "# examples from the start of training. For RPN, this augmentation improves", "\n", "# convergence and empirically improves box AP on COCO by about 0.5", "\n", "# points (under one tested configuration).", "\n", "if", "self", ".", "proposal_append_gt", ":", "\n", "            ", "proposals", "=", "add_ground_truth_to_proposals", "(", "gt_boxes", ",", "proposals", ")", "\n", "\n", "", "proposals_with_gt", "=", "[", "]", "\n", "\n", "num_fg_samples", "=", "[", "]", "\n", "num_bg_samples", "=", "[", "]", "\n", "for", "proposals_per_image", ",", "targets_per_image", "in", "zip", "(", "proposals", ",", "targets", ")", ":", "# chris // get gt_box ", "\n", "            ", "has_gt", "=", "len", "(", "targets_per_image", ")", ">", "0", "\n", "match_quality_matrix", "=", "pairwise_iou", "(", "\n", "targets_per_image", ".", "gt_boxes", ",", "proposals_per_image", ".", "proposal_boxes", "\n", ")", "\n", "matched_idxs", ",", "matched_labels", "=", "self", ".", "proposal_matcher", "(", "match_quality_matrix", ")", "\n", "# sampled_idxs, gt_classes = self._sample_proposals( # gt_classes : [0, num_classes) or the background (num_classes).", "\n", "#     matched_idxs, matched_labels, targets_per_image.gt_classes #  get 128 outof ~1000 sample", "\n", "# )", "\n", "if", "\"anchor_normal_classes\"", "in", "targets_per_image", ".", "_fields", "and", "\"anchor_normal_residuals\"", "in", "targets_per_image", ".", "_fields", ":", "\n", "                ", "sampled_idxs", ",", "gt_classes", ",", "gt_anchor_normal_classes", ",", "gt_anchor_normal_residuals", "=", "self", ".", "_sample_proposals_chris", "(", "# gt_classes : [0, num_classes) or the background (num_classes).", "\n", "matched_idxs", ",", "matched_labels", ",", "targets_per_image", ".", "gt_classes", ",", "targets_per_image", ".", "anchor_normal_classes", ",", "targets_per_image", ".", "anchor_normal_residuals", "#  get 128 outof ~1000 sample", "\n", ")", "\n", "", "else", ":", "\n", "                ", "sampled_idxs", ",", "gt_classes", "=", "self", ".", "_sample_proposals", "(", "matched_idxs", ",", "matched_labels", ",", "targets_per_image", ".", "gt_classes", ")", "\n", "gt_anchor_normal_classes", "=", "0", "\n", "\n", "\n", "# Set target attributes of the sampled proposals:", "\n", "", "proposals_per_image", "=", "proposals_per_image", "[", "sampled_idxs", "]", "\n", "proposals_per_image", ".", "gt_classes", "=", "gt_classes", "#  gt_classes : [0, num_classes) or the background (num_classes).", "\n", "\n", "# We index all the attributes of targets that start with \"gt_\"", "\n", "# and have not been added to proposals yet (=\"gt_classes\").", "\n", "if", "has_gt", ":", "\n", "                ", "sampled_targets", "=", "matched_idxs", "[", "sampled_idxs", "]", "\n", "# NOTE: here the indexing waste some compute, because heads", "\n", "# like masks, keypoints, etc, will filter the proposals again,", "\n", "# (by foreground/background, or number of keypoints in the image, etc)", "\n", "# so we essentially index the data twice.", "\n", "for", "(", "trg_name", ",", "trg_value", ")", "in", "targets_per_image", ".", "get_fields", "(", ")", ".", "items", "(", ")", ":", "\n", "                    ", "if", "trg_name", ".", "startswith", "(", "\"gt_\"", ")", "and", "not", "proposals_per_image", ".", "has", "(", "trg_name", ")", ":", "\n", "                        ", "proposals_per_image", ".", "set", "(", "trg_name", ",", "trg_value", "[", "sampled_targets", "]", ")", "\n", "", "", "", "else", ":", "\n", "                ", "gt_boxes", "=", "Boxes", "(", "\n", "targets_per_image", ".", "gt_boxes", ".", "tensor", ".", "new_zeros", "(", "(", "len", "(", "sampled_idxs", ")", ",", "4", ")", ")", "\n", ")", "\n", "proposals_per_image", ".", "gt_boxes", "=", "gt_boxes", "\n", "", "if", "\"anchor_normal_classes\"", "in", "targets_per_image", ".", "_fields", "and", "\"anchor_normal_residuals\"", "in", "targets_per_image", ".", "_fields", ":", "\n", "                ", "try", ":", "\n", "                    ", "proposals_per_image", ".", "_fields", "[", "\"gt_anchor_normal_classes\"", "]", "=", "gt_anchor_normal_classes", "\n", "proposals_per_image", ".", "_fields", "[", "\"gt_anchor_normal_residuals\"", "]", "=", "gt_anchor_normal_residuals", "\n", "", "except", ":", "\n", "                    ", "print", "(", "\"no gt_anchor_normal_classes -------------\"", ")", "\n", "pass", "\n", "\n", "", "", "num_bg_samples", ".", "append", "(", "(", "gt_classes", "==", "self", ".", "num_classes", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "num_fg_samples", ".", "append", "(", "gt_classes", ".", "numel", "(", ")", "-", "num_bg_samples", "[", "-", "1", "]", ")", "\n", "\n", "\n", "proposals_with_gt", ".", "append", "(", "proposals_per_image", ")", "\n", "\n", "# Log the number of fg/bg samples that are selected for training ROI heads", "\n", "", "storage", "=", "get_event_storage", "(", ")", "\n", "storage", ".", "put_scalar", "(", "\"roi_head/num_fg_samples\"", ",", "np", ".", "mean", "(", "num_fg_samples", ")", ")", "\n", "storage", ".", "put_scalar", "(", "\"roi_head/num_bg_samples\"", ",", "np", ".", "mean", "(", "num_bg_samples", ")", ")", "\n", "return", "proposals_with_gt", "# proposals_with_gt[0]._fields[\"gt_classes\"] : [0, num_classes) or the background (num_classes).", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.config.config.get_cfg": [[3, 71], ["_C.clone"], "function", ["None"], ["def", "get_cfg", "(", ")", "->", "CfgNode", ":", "\n", "    ", "\"\"\"\n    Get a copy of the default config.\n\n    Returns:\n        a detectron2 CfgNode instance.\n    \"\"\"", "\n", "from", "detectron2", ".", "config", ".", "defaults", "import", "_C", "\n", "_C", ".", "DEPTH_EST", "=", "True", "\n", "_C", ".", "SEED", "=", "5", "\n", "_C", ".", "ANCHOR_REG", "=", "True", "\n", "_C", ".", "ANCHOR_CLS", "=", "True", "\n", "_C", ".", "OBJECT_CLS", "=", "True", "\n", "_C", ".", "OBJECT_SEG", "=", "True", "\n", "_C", ".", "OBJECT_BBOX_REG", "=", "True", "\n", "_C", ".", "RGBD_INPUT", "=", "False", "\n", "_C", ".", "TEST", ".", "AUG", ".", "ENABLED", "=", "False", "\n", "# ---- DEPTH_EST -----", "\n", "_C", ".", "DEPTH_SHIFT", "=", "1000.0", "\n", "_C", ".", "FOCAL_LENGTH", "=", "320", "\n", "_C", ".", "INVERSE_DEPTH", "=", "False", "\n", "_C", ".", "REFINED_DEPTH", "=", "True", "\n", "_C", ".", "MESH_DEPTH", "=", "True", "\n", "\n", "# ---- ANCHOR_REG -----", "\n", "_C", ".", "ANCHOR_REG_METHOD", "=", "1", "\n", "_C", ".", "UNIT_ANCHOR_NORMAL", "=", "True", "\n", "\n", "# ---- ANCHOR_CLS -----", "\n", "_C", ".", "ANCHOR_NORMAL_NYP", "=", "\"\"", "\n", "\n", "############## eval configure ##############", "\n", "_C", ".", "EVAL", "=", "False", "\n", "\n", "_C", ".", "EVAL_ANCHOR_AP", "=", "True", "\n", "_C", ".", "EVAL_CLS_AP", "=", "True", "\n", "# normal l2 loss and normal angle difference", "\n", "_C", ".", "EVAL_MASK_IOU", "=", "True", "\n", "_C", ".", "EVAL_NORMAL", "=", "True", "\n", "_C", ".", "EVAL_BRANCH_ORI_DEPTH", "=", "True", "\n", "_C", ".", "EVAL_BRANCH_REF_DEPTH", "=", "True", "\n", "_C", ".", "EVAL_INPUT_REF_DEPTH", "=", "False", "\n", "_C", ".", "EVAL_HEIGHT", "=", "480", "\n", "_C", ".", "EVAL_WIDTH", "=", "640", "\n", "_C", ".", "FLIP", "=", "True", "\n", "\n", "# ---- eval output ----", "\n", "_C", ".", "EVAL_SAVE_MASKED_IMG", "=", "True", "\n", "# if only train depth branch save the output depth | if refine save the refinedD", "\n", "_C", ".", "EVAL_SAVE_DEPTH", "=", "True", "\n", "_C", ".", "EVAL_SAVE_NORMAL_VIS", "=", "False", "\n", "_C", ".", "MASK_ON_OTHER_SIZE", "=", "False", "\n", "\n", "# --------- refine depth -----------", "\n", "_C", ".", "REF_DEPTH_TO_REFINE", "=", "\"\"", "\n", "# \" rawD_mirror / rawD_border / DE_mirror / DE_border \" ", "\n", "_C", ".", "REF_MODE", "=", "\"rawD_border\"", "\n", "_C", ".", "REF_BORDER_WIDTH", "=", "50", "\n", "\n", "_C", ".", "ANCHOR_NORMAL_CLASS_NUM", "=", "8", "# ", "\n", "_C", ".", "TRAIN_COCO_JSON", "=", "(", ")", "\n", "_C", ".", "VAL_COCO_JSON", "=", "(", ")", "\n", "_C", ".", "TRAIN_IMG_ROOT", "=", "(", ")", "\n", "_C", ".", "VAL_IMG_ROOT", "=", "(", ")", "\n", "_C", ".", "TRAIN_NAME", "=", "(", ")", "\n", "_C", ".", "VAL_NAME", "=", "(", ")", "\n", "\n", "return", "_C", ".", "clone", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.engine.defaults.Mirror3dTrainer.build_evaluator": [[148, 172], ["evaluator_list.append", "DatasetEvaluators", "os.path.join", "detectron2.data.MetadataCatalog.get", "Mirror3D_AP_Evaluator", "len", "NotImplementedError", "len"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "build_evaluator", "(", "cls", ",", "cfg", ",", "dataset_name", ",", "output_folder", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Create evaluator(s) for a given dataset.\n        This uses the special metadata \"evaluator_type\" associated with each builtin dataset.\n        For your own dataset, you can simply create an evaluator manually in your\n        script and do not have to worry about the hacky if-else logic here.\n        \"\"\"", "\n", "if", "output_folder", "is", "None", ":", "\n", "            ", "output_folder", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "OUTPUT_DIR", ",", "\"inference\"", ")", "\n", "", "evaluator_list", "=", "[", "]", "\n", "evaluator_type", "=", "MetadataCatalog", ".", "get", "(", "dataset_name", ")", ".", "evaluator_type", "\n", "evaluator_list", ".", "append", "(", "Mirror3D_AP_Evaluator", "(", "dataset_name", ",", "cfg", ",", "True", ",", "output_folder", ")", ")", "\n", "\n", "if", "len", "(", "evaluator_list", ")", "==", "0", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"no Evaluator for the dataset {} with the type {}\"", ".", "format", "(", "\n", "dataset_name", ",", "evaluator_type", "\n", ")", "\n", ")", "\n", "", "elif", "len", "(", "evaluator_list", ")", "==", "1", ":", "\n", "            ", "return", "evaluator_list", "[", "0", "]", "\n", "\n", "", "return", "DatasetEvaluators", "(", "evaluator_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.engine.defaults.Mirror3dTrainer.build_train_loader": [[175, 188], ["mirror3d_lib.data.dataset_mapper.Mirror3d_DatasetMapper", "detectron2.data.build_detection_train_loader"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "build_train_loader", "(", "cls", ",", "cfg", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            iterable\n\n        It now calls :func:`detectron2.data.build_detection_train_loader`.\n        Overwrite it if you'd like a different data loader.\n        \"\"\"", "\n", "cls", ".", "IOU_list", "=", "[", "]", "\n", "cls", ".", "checkpoint_save_list", "=", "[", "]", "\n", "train_mapper", "=", "Mirror3d_DatasetMapper", "(", "cfg", ",", "True", ")", "\n", "return", "build_detection_train_loader", "(", "cfg", ",", "mapper", "=", "train_mapper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.engine.defaults.Mirror3dTrainer.build_test_loader": [[189, 200], ["mirror3d_lib.data.dataset_mapper.Mirror3d_DatasetMapper", "detectron2.data.build_detection_test_loader"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "build_test_loader", "(", "cls", ",", "cfg", ",", "dataset_name", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            iterable\n\n        It now calls :func:`detectron2.data.build_detection_test_loader`.\n        Overwrite it if you'd like a different data loader.\n        \"\"\"", "\n", "test_mapper", "=", "Mirror3d_DatasetMapper", "(", "cfg", ",", "True", ")", "\n", "return", "build_detection_test_loader", "(", "cfg", ",", "dataset_name", ",", "mapper", "=", "test_mapper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.engine.defaults.Mirror3dTrainer.test": [[201, 250], ["dict", "logging.getLogger", "isinstance", "enumerate", "collections.OrderedDict", "cls.build_test_loader", "defaults.mirror3d_inference_on_dataset", "Mirror3DNet_Eval", "Mirror3DNet_Eval.eval_main", "cls.IOU_list.append", "mirror3d.utils.general_utils.check_converge", "len", "len", "len", "len", "print", "exit", "cls.build_evaluator", "logging.getLogger.warn"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.engine.defaults.Mirror3dTrainer.build_test_loader", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.engine.defaults.mirror3d_inference_on_dataset", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.eval_main", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.check_converge", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.engine.defaults.Mirror3dTrainer.build_evaluator"], ["", "@", "classmethod", "\n", "def", "test", "(", "cls", ",", "cfg", ",", "model", ",", "evaluators", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            cfg (CfgNode):\n            model (nn.Module):\n            evaluators (list[DatasetEvaluator] or None): if None, will call\n                :meth:`build_evaluator`. Otherwise, must have the same length as\n                `cfg.DATASETS.TEST`.\n\n        Returns:\n            dict: a dict of result metrics\n        \"\"\"", "\n", "results", "=", "dict", "(", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "if", "isinstance", "(", "evaluators", ",", "DatasetEvaluator", ")", ":", "\n", "            ", "evaluators", "=", "[", "evaluators", "]", "\n", "", "if", "evaluators", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "cfg", ".", "DATASETS", ".", "TEST", ")", "==", "len", "(", "evaluators", ")", ",", "\"{} != {}\"", ".", "format", "(", "\n", "len", "(", "cfg", ".", "DATASETS", ".", "TEST", ")", ",", "len", "(", "evaluators", ")", "\n", ")", "\n", "", "output_list", "=", "[", "]", "\n", "for", "idx", ",", "dataset_name", "in", "enumerate", "(", "cfg", ".", "DATASETS", ".", "TEST", ")", ":", "\n", "            ", "data_loader", "=", "cls", ".", "build_test_loader", "(", "cfg", ",", "dataset_name", ")", "\n", "# When evaluators are passed in as arguments,", "\n", "# implicitly assume that evaluators can be created before data_loader.", "\n", "if", "evaluators", "is", "not", "None", ":", "\n", "                ", "evaluator", "=", "evaluators", "[", "idx", "]", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "evaluator", "=", "cls", ".", "build_evaluator", "(", "cfg", ",", "dataset_name", ")", "\n", "", "except", "NotImplementedError", ":", "\n", "                    ", "logger", ".", "warn", "(", "\n", "\"No evaluator found. Use `DefaultTrainer.test(evaluators=)`, \"", "\n", "\"or implement its `build_evaluator` method.\"", "\n", ")", "\n", "results", "[", "dataset_name", "]", "=", "{", "}", "\n", "continue", "\n", "", "", "output_list", "=", "mirror3d_inference_on_dataset", "(", "model", ",", "data_loader", ",", "evaluator", ")", "\n", "mirror3d_eval", "=", "Mirror3DNet_Eval", "(", "output_list", ",", "cfg", ")", "\n", "mirror3d_eval", ".", "eval_main", "(", ")", "\n", "", "if", "not", "cfg", ".", "EVAL", ":", "\n", "            ", "cls", ".", "output_list", "=", "output_list", "\n", "cls", ".", "IOU_list", ".", "append", "(", "mirror3d_eval", ".", "mean_IOU", ")", "\n", "if", "check_converge", "(", "score_list", "=", "cls", ".", "IOU_list", ")", ":", "\n", "                ", "print", "(", "\"model converged\"", ")", "\n", "exit", "(", ")", "\n", "\n", "", "", "return", "OrderedDict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.engine.defaults.Mirror3dTrainer.get_output_list": [[251, 254], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "get_output_list", "(", "cls", ")", ":", "\n", "        ", "return", "cls", ".", "output_list", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.engine.defaults.mirror3d_inference_on_dataset": [[46, 144], ["detectron2.utils.comm.get_world_size", "logging.getLogger", "logging.getLogger.info", "len", "DatasetEvaluators.reset", "min", "time.perf_counter", "str", "logging.getLogger.info", "str", "logging.getLogger.info", "DatasetEvaluators.evaluate", "DatasetEvaluators", "detectron2.evaluation.inference_context", "torch.no_grad", "torch.no_grad", "enumerate", "time.perf_counter", "datetime.timedelta", "datetime.timedelta", "len", "time.perf_counter", "model", "output_list.append", "torch.cuda.is_available", "torch.cuda.is_available", "DatasetEvaluators.process", "time.perf_counter", "item.copy", "item.copy.pop", "input_temp.append", "torch.cuda.synchronize", "torch.cuda.synchronize", "time.perf_counter", "datetime.timedelta", "detectron2.utils.logger.log_every_n_seconds", "int", "item.copy.pop", "int", "time.perf_counter", "int", "str"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator.reset", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator.evaluate", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator.process"], ["def", "mirror3d_inference_on_dataset", "(", "model", ",", "data_loader", ",", "evaluator", ")", ":", "\n", "    ", "\"\"\"\n    Run model on the data_loader and evaluate the metrics with evaluator.\n    Also benchmark the inference speed of `model.forward` accurately.\n    The model will be used in eval mode.\n\n    Args:\n        model (nn.Module): a module which accepts an object from\n            `data_loader` and returns some outputs. It will be temporarily set to `eval` mode.\n\n            If you wish to evaluate a model in `training` mode instead, you can\n            wrap the given model and override its behavior of `.eval()` and `.train()`.\n        data_loader: an iterable object with a length.\n            The elements it generates will be the inputs to the model.\n        evaluator (DatasetEvaluator): the evaluator to run. Use `None` if you only want\n            to benchmark, but don't want to do any evaluation.\n\n    Returns:\n        The return value of `evaluator.evaluate()`\n    \"\"\"", "\n", "num_devices", "=", "get_world_size", "(", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "\"Start inference on {} images\"", ".", "format", "(", "len", "(", "data_loader", ")", ")", ")", "\n", "\n", "total", "=", "len", "(", "data_loader", ")", "# inference data loader must have a fixed length", "\n", "if", "evaluator", "is", "None", ":", "\n", "# create a no-op evaluator", "\n", "        ", "evaluator", "=", "DatasetEvaluators", "(", "[", "]", ")", "\n", "", "evaluator", ".", "reset", "(", ")", "\n", "\n", "num_warmup", "=", "min", "(", "5", ",", "total", "-", "1", ")", "\n", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "total_compute_time", "=", "0", "\n", "output_list", "=", "[", "]", "\n", "with", "inference_context", "(", "model", ")", ",", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "idx", ",", "inputs", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "if", "idx", "==", "num_warmup", ":", "\n", "                ", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "total_compute_time", "=", "0", "\n", "\n", "", "start_compute_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "\n", "# append some of input information to output_list[]; output_list contrains ", "\n", "#  (1) input infomation ", "\n", "#  (2) predict depth / predict instance (contains anchor scores, anchor classes, pred boxes.. etc) ", "\n", "input_temp", "=", "[", "]", "\n", "for", "item", "in", "inputs", ":", "\n", "                ", "temp", "=", "item", ".", "copy", "(", ")", "\n", "temp", ".", "pop", "(", "\"image\"", ")", "\n", "if", "\"depth_image\"", "in", "temp", ":", "\n", "                    ", "temp", ".", "pop", "(", "\"depth_image\"", ")", "\n", "", "input_temp", ".", "append", "(", "temp", ")", "\n", "", "output_list", ".", "append", "(", "[", "outputs", ",", "input_temp", "]", ")", "\n", "\n", "# outputs[0] == None equals only DEPTH_EST = True; ", "\n", "# outputs[0] --> pred instances ; output[1] --> pred depth", "\n", "if", "outputs", "[", "0", "]", "==", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "", "total_compute_time", "+=", "time", ".", "perf_counter", "(", ")", "-", "start_compute_time", "\n", "evaluator", ".", "process", "(", "inputs", ",", "outputs", ")", "\n", "\n", "iters_after_start", "=", "idx", "+", "1", "-", "num_warmup", "*", "int", "(", "idx", ">=", "num_warmup", ")", "\n", "seconds_per_img", "=", "total_compute_time", "/", "iters_after_start", "\n", "if", "idx", ">=", "num_warmup", "*", "2", "or", "seconds_per_img", ">", "5", ":", "\n", "                ", "total_seconds_per_img", "=", "(", "time", ".", "perf_counter", "(", ")", "-", "start_time", ")", "/", "iters_after_start", "\n", "eta", "=", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_seconds_per_img", "*", "(", "total", "-", "idx", "-", "1", ")", ")", ")", "\n", "log_every_n_seconds", "(", "\n", "logging", ".", "INFO", ",", "\n", "\"Inference done {}/{}. {:.4f} s / img. ETA={}\"", ".", "format", "(", "\n", "idx", "+", "1", ",", "total", ",", "seconds_per_img", ",", "str", "(", "eta", ")", "\n", ")", ",", "\n", "n", "=", "5", ",", "\n", ")", "\n", "\n", "# Measure the time only for this worker (before the synchronization barrier)", "\n", "", "", "", "total_time", "=", "time", ".", "perf_counter", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "total_time", ")", ")", "\n", "# NOTE this format is parsed by grep", "\n", "logger", ".", "info", "(", "\n", "\"Total inference time: {} ({:.6f} s / img per device, on {} devices)\"", ".", "format", "(", "\n", "total_time_str", ",", "total_time", "/", "(", "total", "-", "num_warmup", ")", ",", "num_devices", "\n", ")", "\n", ")", "\n", "total_compute_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_compute_time", ")", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"Total inference pure compute time: {} ({:.6f} s / img per device, on {} devices)\"", ".", "format", "(", "\n", "total_compute_time_str", ",", "total_compute_time", "/", "(", "total", "-", "num_warmup", ")", ",", "num_devices", "\n", ")", "\n", ")", "\n", "\n", "# evaluate models output result", "\n", "_", "=", "evaluator", ".", "evaluate", "(", ")", "\n", "\n", "return", "output_list", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.data.mirror3d_utils.transform_instance_annotations": [[9, 71], ["detectron2.structures.BoxMode.convert", "detectron2.data.transforms.apply_box", "isinstance", "transform_keypoint_annotations", "mirror3d_utils.transform_anchor_annotation", "isinstance", "sum", "numpy.asarray().reshape", "p.reshape", "pycocotools.decode", "detectron2.data.transforms.apply_segmentation", "ValueError", "detectron2.data.transforms.apply_polygons", "tuple", "isinstance", "numpy.asarray", "type"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.data.mirror3d_utils.transform_anchor_annotation"], ["def", "transform_instance_annotations", "(", "\n", "annotation", ",", "transforms", ",", "image_size", ",", "*", ",", "keypoint_hflip_indices", "=", "None", ",", "anchor_normals", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Apply transforms to box, segmentation and keypoints annotations of a single instance.\n\n    It will use `transforms.apply_box` for the box, and\n    `transforms.apply_coords` for segmentation polygons & keypoints.\n    If you need anything more specially designed for each data structure,\n    you'll need to implement your own version of this function or the transforms.\n\n    Args:\n        annotation (dict): dict of instance annotations for a single instance.\n            It will be modified in-place.\n        transforms (TransformList):\n        image_size (tuple): the height, width of the transformed image\n        keypoint_hflip_indices (ndarray[int]): see `create_keypoint_hflip_indices`.\n\n    Returns:\n        dict:\n            the same input dict with fields \"bbox\", \"segmentation\", \"keypoints\"\n            transformed according to `transforms`.\n            The \"bbox_mode\" field will be set to XYXY_ABS.\n    \"\"\"", "\n", "bbox", "=", "BoxMode", ".", "convert", "(", "annotation", "[", "\"bbox\"", "]", ",", "annotation", "[", "\"bbox_mode\"", "]", ",", "BoxMode", ".", "XYXY_ABS", ")", "\n", "# Note that bbox is 1d (per-instance bounding box)", "\n", "annotation", "[", "\"bbox\"", "]", "=", "transforms", ".", "apply_box", "(", "[", "bbox", "]", ")", "[", "0", "]", "\n", "annotation", "[", "\"bbox_mode\"", "]", "=", "BoxMode", ".", "XYXY_ABS", "\n", "\n", "if", "\"segmentation\"", "in", "annotation", ":", "\n", "# each instance contains 1 or more polygons", "\n", "        ", "segm", "=", "annotation", "[", "\"segmentation\"", "]", "\n", "if", "isinstance", "(", "segm", ",", "list", ")", ":", "\n", "# polygons", "\n", "            ", "polygons", "=", "[", "np", ".", "asarray", "(", "p", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "for", "p", "in", "segm", "]", "\n", "annotation", "[", "\"segmentation\"", "]", "=", "[", "\n", "p", ".", "reshape", "(", "-", "1", ")", "for", "p", "in", "transforms", ".", "apply_polygons", "(", "polygons", ")", "\n", "]", "\n", "", "elif", "isinstance", "(", "segm", ",", "dict", ")", ":", "\n", "# RLE", "\n", "            ", "mask", "=", "mask_util", ".", "decode", "(", "segm", ")", "\n", "mask", "=", "transforms", ".", "apply_segmentation", "(", "mask", ")", "\n", "assert", "tuple", "(", "mask", ".", "shape", "[", ":", "2", "]", ")", "==", "image_size", "\n", "annotation", "[", "\"segmentation\"", "]", "=", "mask", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Cannot transform segmentation of type '{}'!\"", "\n", "\"Supported types are: polygons as list[list[float] or ndarray],\"", "\n", "\" COCO-style RLE as a dict.\"", ".", "format", "(", "type", "(", "segm", ")", ")", "\n", ")", "\n", "\n", "", "", "if", "\"keypoints\"", "in", "annotation", ":", "\n", "        ", "keypoints", "=", "transform_keypoint_annotations", "(", "\n", "annotation", "[", "\"keypoints\"", "]", ",", "transforms", ",", "image_size", ",", "keypoint_hflip_indices", "\n", ")", "\n", "annotation", "[", "\"keypoints\"", "]", "=", "keypoints", "\n", "\n", "", "if", "\"anchor_normal_class\"", "in", "annotation", "and", "not", "sum", "(", "isinstance", "(", "t", ",", "T", ".", "NoOpTransform", ")", "for", "t", "in", "transforms", ".", "transforms", ")", ":", "\n", "        ", "anchor_normal_class", ",", "anchor_normal_residual", "=", "transform_anchor_annotation", "(", "anchor_normals", ",", "annotation", "[", "\"mirror_normal_camera\"", "]", ",", "transforms", ")", "\n", "annotation", "[", "\"anchor_normal_class\"", "]", "=", "anchor_normal_class", "\n", "annotation", "[", "\"anchor_normal_residual\"", "]", "=", "anchor_normal_residual", "\n", "", "return", "annotation", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.data.mirror3d_utils.annotations_to_instances": [[73, 143], ["Instances", "Boxes", "Boxes.clip", "torch.tensor", "detectron2.structures.BoxMode.convert", "len", "len", "Keypoints", "torch.tensor", "torch.tensor", "PolygonMasks", "BitMasks", "obj.get", "isinstance", "torch.stack", "BitMasks.append", "isinstance", "polygons_to_bitmask", "BitMasks.append", "isinstance", "torch.from_numpy", "pycocotools.decode", "BitMasks.append", "ValueError", "numpy.ascontiguousarray", "type"], "function", ["None"], ["", "def", "annotations_to_instances", "(", "annos", ",", "image_size", ",", "mask_format", "=", "\"polygon\"", ")", ":", "\n", "    ", "\"\"\"\n    Create an :class:`Instances` object used by the models,\n    from instance annotations in the dataset dict.\n\n    Args:\n        annos (list[dict]): a list of instance annotations in one image, each\n            element for one instance.\n        image_size (tuple): height, width\n\n    Returns:\n        Instances:\n            It will contain fields \"gt_boxes\", \"gt_classes\",\n            \"gt_masks\", \"gt_keypoints\", if they can be obtained from `annos`.\n            This is the format that builtin models expect.\n    \"\"\"", "\n", "boxes", "=", "[", "BoxMode", ".", "convert", "(", "obj", "[", "\"bbox\"", "]", ",", "obj", "[", "\"bbox_mode\"", "]", ",", "BoxMode", ".", "XYXY_ABS", ")", "for", "obj", "in", "annos", "]", "\n", "target", "=", "Instances", "(", "image_size", ")", "\n", "boxes", "=", "target", ".", "gt_boxes", "=", "Boxes", "(", "boxes", ")", "\n", "boxes", ".", "clip", "(", "image_size", ")", "\n", "\n", "classes", "=", "[", "obj", "[", "\"category_id\"", "]", "for", "obj", "in", "annos", "]", "\n", "classes", "=", "torch", ".", "tensor", "(", "classes", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "target", ".", "gt_classes", "=", "classes", "\n", "\n", "if", "len", "(", "annos", ")", "and", "\"segmentation\"", "in", "annos", "[", "0", "]", ":", "\n", "        ", "segms", "=", "[", "obj", "[", "\"segmentation\"", "]", "for", "obj", "in", "annos", "]", "\n", "if", "mask_format", "==", "\"polygon\"", ":", "\n", "            ", "masks", "=", "PolygonMasks", "(", "segms", ")", "\n", "", "else", ":", "\n", "            ", "assert", "mask_format", "==", "\"bitmask\"", ",", "mask_format", "\n", "masks", "=", "[", "]", "\n", "for", "segm", "in", "segms", ":", "\n", "                ", "if", "isinstance", "(", "segm", ",", "list", ")", ":", "\n", "# polygon", "\n", "                    ", "masks", ".", "append", "(", "polygons_to_bitmask", "(", "segm", ",", "*", "image_size", ")", ")", "\n", "", "elif", "isinstance", "(", "segm", ",", "dict", ")", ":", "\n", "# COCO RLE", "\n", "                    ", "masks", ".", "append", "(", "mask_util", ".", "decode", "(", "segm", ")", ")", "\n", "", "elif", "isinstance", "(", "segm", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "assert", "segm", ".", "ndim", "==", "2", ",", "\"Expect segmentation of 2 dimensions, got {}.\"", ".", "format", "(", "\n", "segm", ".", "ndim", "\n", ")", "\n", "# mask array", "\n", "masks", ".", "append", "(", "segm", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Cannot convert segmentation of type '{}' to BitMasks!\"", "\n", "\"Supported types are: polygons as list[list[float] or ndarray],\"", "\n", "\" COCO-style RLE as a dict, or a full-image segmentation mask \"", "\n", "\"as a 2D ndarray.\"", ".", "format", "(", "type", "(", "segm", ")", ")", "\n", ")", "\n", "# torch.from_numpy does not support array with negative stride.", "\n", "", "", "masks", "=", "BitMasks", "(", "\n", "torch", ".", "stack", "(", "[", "torch", ".", "from_numpy", "(", "np", ".", "ascontiguousarray", "(", "x", ")", ")", "for", "x", "in", "masks", "]", ")", "\n", ")", "\n", "", "target", ".", "gt_masks", "=", "masks", "\n", "\n", "", "if", "len", "(", "annos", ")", "and", "\"keypoints\"", "in", "annos", "[", "0", "]", ":", "\n", "        ", "kpts", "=", "[", "obj", ".", "get", "(", "\"keypoints\"", ",", "[", "]", ")", "for", "obj", "in", "annos", "]", "\n", "target", ".", "gt_keypoints", "=", "Keypoints", "(", "kpts", ")", "\n", "", "if", "\"anchor_normal_class\"", "in", "annos", "[", "0", "]", ":", "\n", "        ", "anchor_normal_classes", "=", "[", "obj", "[", "\"anchor_normal_class\"", "]", "for", "obj", "in", "annos", "]", "\n", "anchor_normal_classes", "=", "torch", ".", "tensor", "(", "anchor_normal_classes", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "target", ".", "_fields", "[", "\"anchor_normal_classes\"", "]", "=", "anchor_normal_classes", "\n", "", "if", "\"anchor_normal_residual\"", "in", "annos", "[", "0", "]", ":", "\n", "        ", "anchor_normal_residuals", "=", "[", "obj", "[", "\"anchor_normal_residual\"", "]", "for", "obj", "in", "annos", "]", "\n", "anchor_normal_residuals", "=", "torch", ".", "tensor", "(", "anchor_normal_residuals", ",", "dtype", "=", "torch", ".", "float64", ")", "\n", "target", ".", "_fields", "[", "\"anchor_normal_residuals\"", "]", "=", "anchor_normal_residuals", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.data.mirror3d_utils.transform_anchor_annotation": [[145, 162], ["sum", "sum", "range", "len", "numpy.sqrt", "list", "isinstance", "isinstance", "detectron2.data.transforms"], "function", ["None"], ["", "def", "transform_anchor_annotation", "(", "anchor_normals", ",", "mirror_normal_camera", ",", "transforms", ")", ":", "\n", "    ", "hor_flip", "=", "sum", "(", "isinstance", "(", "t", ",", "T", ".", "HFlipTransform", ")", "for", "t", "in", "transforms", ".", "transforms", ")", "\n", "ver_flip", "=", "sum", "(", "isinstance", "(", "t", ",", "T", ".", "VFlipTransform", ")", "for", "t", "in", "transforms", ".", "transforms", ")", "\n", "if", "hor_flip", ":", "# x = -x", "\n", "        ", "mirror_normal_camera", "[", "0", "]", "=", "-", "mirror_normal_camera", "[", "0", "]", "\n", "", "elif", "ver_flip", ":", "\n", "        ", "mirror_normal_camera", "[", "1", "]", "=", "-", "mirror_normal_camera", "[", "1", "]", "\n", "\n", "", "cloest_distance", "=", "100", "# init to be a large number", "\n", "for", "i", "in", "range", "(", "len", "(", "anchor_normals", ")", ")", ":", "\n", "        ", "distance_anchor", "=", "mirror_normal_camera", "-", "anchor_normals", "[", "i", "]", "\n", "distance", "=", "np", ".", "sqrt", "(", "distance_anchor", "[", "0", "]", "**", "2", "+", "distance_anchor", "[", "1", "]", "**", "2", "+", "distance_anchor", "[", "2", "]", "**", "2", ")", "\n", "if", "distance", "<", "cloest_distance", ":", "\n", "            ", "cloest_distance", "=", "distance", "\n", "anchor_normal_class", "=", "i", "#! the last class is background", "\n", "anchor_normal_residual", "=", "distance_anchor", "\n", "", "", "return", "anchor_normal_class", ",", "list", "(", "anchor_normal_residual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.datasets.register_mirror3d_coco.register_mirror3d_coco_instances": [[15, 42], ["isinstance", "isinstance", "isinstance", "detectron2.data.DatasetCatalog.register", "detectron2.data.MetadataCatalog.get().set", "mirror3d_coco.load_mirror3d_coco_json", "detectron2.data.MetadataCatalog.get"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.datasets.mirror3d_coco.load_mirror3d_coco_json"], ["def", "register_mirror3d_coco_instances", "(", "name", ",", "metadata", ",", "json_file", ",", "image_root", ")", ":", "\n", "    ", "\"\"\"\n    Register a dataset in COCO's json annotation format for\n    instance detection, instance segmentation and keypoint detection.\n    (i.e., Type 1 and 2 in http://cocodataset.org/#format-data.\n    `instances*.json` and `person_keypoints*.json` in the dataset).\n\n    This is an example of how to register a new dataset.\n    You can do something similar to this function, to register new datasets.\n\n    Args:\n        name (str): the name that identifies a dataset, e.g. \"coco_2014_train\".\n        metadata (dict): extra metadata associated with this dataset.  You can\n            leave it as an empty dict.\n        json_file (str): path to the json instance annotation file.\n        image_root (str or path-like): directory which contains all the images.\n    \"\"\"", "\n", "assert", "isinstance", "(", "name", ",", "str", ")", ",", "name", "\n", "assert", "isinstance", "(", "json_file", ",", "(", "str", ",", "os", ".", "PathLike", ")", ")", ",", "json_file", "\n", "assert", "isinstance", "(", "image_root", ",", "(", "str", ",", "os", ".", "PathLike", ")", ")", ",", "image_root", "\n", "# 1. register a function which returns dicts", "\n", "DatasetCatalog", ".", "register", "(", "name", ",", "lambda", ":", "load_mirror3d_coco_json", "(", "json_file", ",", "image_root", ",", "name", ")", ")", "\n", "\n", "# 2. Optionally, add metadata about this dataset,", "\n", "# since they might be useful in evaluation, visualization or logging", "\n", "MetadataCatalog", ".", "get", "(", "name", ")", ".", "set", "(", "\n", "json_file", "=", "json_file", ",", "image_root", "=", "image_root", ",", "evaluator_type", "=", "\"coco\"", ",", "**", "metadata", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.datasets.mirror3d_coco.load_mirror3d_coco_json": [[14, 202], ["fvcore.common.timer.Timer", "fvcore.common.file_io.PathManager.get_local_path", "sorted", "COCO.loadImgs", "list", "logger.info", "contextlib.redirect_stdout", "COCO", "fvcore.common.timer.Timer.seconds", "logger.info", "detectron2.data.catalog.MetadataCatalog.get", "sorted", "COCO.loadCats", "list", "zip", "dataset_dicts.append", "logger.warn", "io.StringIO", "COCO.getCatIds", "COCO.imgs.keys", "len", "len", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "anno.get", "anno.get", "objs.append", "fvcore.common.timer.Timer.seconds", "sorted", "logger.warning", "enumerate", "set", "anno.get", "enumerate", "min", "max", "len", "isinstance", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadImgs", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadCats", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.getCatIds"], ["def", "load_mirror3d_coco_json", "(", "json_file", ",", "image_root", ",", "dataset_name", "=", "None", ",", "extra_annotation_keys", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Load a json file with COCO's instances annotation format.\n    Currently supports instance detection, instance segmentation,\n    and person keypoints annotations.\n\n    Args:\n        json_file (str): full path to the json file in COCO instances annotation format.\n        image_root (str): the directory where the images in this json file exists.\n        dataset_name (str): the name of the dataset (e.g., coco_2017_train).\n            If provided, this function will also put \"thing_classes\" into\n            the metadata associated with this dataset.\n        extra_annotation_keys (list[str]): list of per-annotation keys that should also be\n            loaded into the dataset dict (besides \"iscrowd\", \"bbox\", \"keypoints\",\n            \"category_id\", \"segmentation\"). The values for these keys will be returned as-is.\n            For example, the densepose annotations are loaded in this way.\n\n    Returns:\n        list[dict]: a list of dicts in Detectron2 standard format. (See\n        `Using Custom Datasets </tutorials/datasets.html>`_ )\n\n    Notes:\n        1. This function does not read the image files.\n           The results do not have the \"image\" field.\n    \"\"\"", "\n", "from", "pycocotools", ".", "coco", "import", "COCO", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "json_file", "=", "PathManager", ".", "get_local_path", "(", "json_file", ")", "\n", "with", "contextlib", ".", "redirect_stdout", "(", "io", ".", "StringIO", "(", ")", ")", ":", "\n", "        ", "coco_api", "=", "COCO", "(", "json_file", ")", "\n", "", "if", "timer", ".", "seconds", "(", ")", ">", "1", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading {} takes {:.2f} seconds.\"", ".", "format", "(", "json_file", ",", "timer", ".", "seconds", "(", ")", ")", ")", "\n", "\n", "", "id_map", "=", "None", "\n", "if", "dataset_name", "is", "not", "None", ":", "\n", "        ", "meta", "=", "MetadataCatalog", ".", "get", "(", "dataset_name", ")", "\n", "cat_ids", "=", "sorted", "(", "coco_api", ".", "getCatIds", "(", ")", ")", "\n", "cats", "=", "coco_api", ".", "loadCats", "(", "cat_ids", ")", "\n", "# The categories in a custom json file may not be sorted.", "\n", "thing_classes", "=", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "sorted", "(", "cats", ",", "key", "=", "lambda", "x", ":", "x", "[", "\"id\"", "]", ")", "]", "\n", "meta", ".", "thing_classes", "=", "thing_classes", "\n", "\n", "# In COCO, certain category ids are artificially removed,", "\n", "# and by convention they are always ignored.", "\n", "# We deal with COCO's id issue and translate", "\n", "# the category ids to contiguous ids in [0, 80).", "\n", "\n", "# It works by looking at the \"categories\" field in the json, therefore", "\n", "# if users' own json also have incontiguous ids, we'll", "\n", "# apply this mapping as well but print a warning.", "\n", "if", "not", "(", "min", "(", "cat_ids", ")", "==", "1", "and", "max", "(", "cat_ids", ")", "==", "len", "(", "cat_ids", ")", ")", ":", "\n", "            ", "if", "\"coco\"", "not", "in", "dataset_name", ":", "\n", "                ", "logger", ".", "warning", "(", "\n", "\"\"\"\n                    Category ids in annotations are not in [1, #categories]! We'll apply a mapping for you.\n                    \"\"\"", "\n", ")", "\n", "", "", "id_map", "=", "{", "v", ":", "i", "for", "i", ",", "v", "in", "enumerate", "(", "cat_ids", ")", "}", "# gt_classes would start from 0 ", "\n", "meta", ".", "thing_dataset_id_to_contiguous_id", "=", "id_map", "\n", "\n", "# sort indices for reproducible results", "\n", "", "img_ids", "=", "sorted", "(", "list", "(", "coco_api", ".", "imgs", ".", "keys", "(", ")", ")", ")", "\n", "# imgs is a list of dicts, each looks something like:", "\n", "# {'license': 4,", "\n", "#  'url': 'http://farm6.staticflickr.com/5454/9413846304_881d5e5c3b_z.jpg',", "\n", "#  'file_name': 'COCO_val2014_000000001268.jpg',", "\n", "#  'height': 427,", "\n", "#  'width': 640,", "\n", "#  'date_captured': '2013-11-17 05:57:24',", "\n", "#  'id': 1268}", "\n", "imgs", "=", "coco_api", ".", "loadImgs", "(", "img_ids", ")", "\n", "# anns is a list[list[dict]], where each dict is an annotation", "\n", "# record for an object. The inner list enumerates the objects in an image", "\n", "# and the outer list enumerates over images. Example of anns[0]:", "\n", "# [{'segmentation': [[192.81,", "\n", "#     247.09,", "\n", "#     ...", "\n", "#     219.03,", "\n", "#     249.06]],", "\n", "#   'area': 1035.749,", "\n", "#   'iscrowd': 0,", "\n", "#   'image_id': 1268,", "\n", "#   'bbox': [192.81, 224.8, 74.73, 33.43],", "\n", "#   'category_id': 16,", "\n", "#   'id': 42986},", "\n", "#  ...]", "\n", "anns", "=", "[", "coco_api", ".", "imgToAnns", "[", "img_id", "]", "for", "img_id", "in", "img_ids", "]", "\n", "\n", "if", "\"minival\"", "not", "in", "json_file", ":", "\n", "# The popular valminusminival & minival annotations for COCO2014 contain this bug.", "\n", "# However the ratio of buggy annotations there is tiny and does not affect accuracy.", "\n", "# Therefore we explicitly white-list them.", "\n", "        ", "ann_ids", "=", "[", "ann", "[", "\"id\"", "]", "for", "anns_per_image", "in", "anns", "for", "ann", "in", "anns_per_image", "]", "\n", "assert", "len", "(", "set", "(", "ann_ids", ")", ")", "==", "len", "(", "ann_ids", ")", ",", "\"Annotation ids in '{}' are not unique!\"", ".", "format", "(", "\n", "json_file", "\n", ")", "\n", "\n", "", "imgs_anns", "=", "list", "(", "zip", "(", "imgs", ",", "anns", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Loaded {} images in COCO format from {}\"", ".", "format", "(", "len", "(", "imgs_anns", ")", ",", "json_file", ")", ")", "\n", "\n", "dataset_dicts", "=", "[", "]", "\n", "\n", "ann_keys", "=", "[", "\"iscrowd\"", ",", "\"bbox\"", ",", "\"keypoints\"", ",", "\"category_id\"", "]", "+", "(", "extra_annotation_keys", "or", "[", "]", ")", "\n", "\n", "num_instances_without_valid_segmentation", "=", "0", "\n", "for", "(", "img_dict", ",", "anno_dict_list", ")", "in", "imgs_anns", ":", "\n", "        ", "record", "=", "{", "}", "\n", "if", "image_root", ":", "\n", "            ", "record", "[", "\"mirror_color_image_path\"", "]", "=", "os", ".", "path", ".", "join", "(", "image_root", ",", "img_dict", "[", "\"mirror_color_image_path\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "record", "[", "\"mirror_color_image_path\"", "]", "=", "img_dict", "[", "\"mirror_color_image_path\"", "]", "\n", "", "if", "\"mirror_instance_mask_path\"", "in", "img_dict", ":", "\n", "            ", "record", "[", "\"mirror_instance_mask_path\"", "]", "=", "os", ".", "path", ".", "join", "(", "image_root", ",", "img_dict", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "", "if", "\"raw_sensorD_path\"", "in", "img_dict", ":", "\n", "            ", "record", "[", "\"raw_sensorD_path\"", "]", "=", "os", ".", "path", ".", "join", "(", "image_root", ",", "img_dict", "[", "\"raw_sensorD_path\"", "]", ")", "\n", "", "if", "\"refined_sensorD_path\"", "in", "img_dict", ":", "\n", "            ", "record", "[", "\"refined_sensorD_path\"", "]", "=", "os", ".", "path", ".", "join", "(", "image_root", ",", "img_dict", "[", "\"refined_sensorD_path\"", "]", ")", "\n", "", "if", "\"raw_meshD_path\"", "in", "img_dict", ":", "\n", "            ", "record", "[", "\"raw_meshD_path\"", "]", "=", "os", ".", "path", ".", "join", "(", "image_root", ",", "img_dict", "[", "\"raw_meshD_path\"", "]", ")", "\n", "", "if", "\"refined_meshD_path\"", "in", "img_dict", ":", "\n", "            ", "record", "[", "\"refined_meshD_path\"", "]", "=", "os", ".", "path", ".", "join", "(", "image_root", ",", "img_dict", "[", "\"refined_meshD_path\"", "]", ")", "\n", "", "record", "[", "\"height\"", "]", "=", "img_dict", "[", "\"height\"", "]", "\n", "record", "[", "\"width\"", "]", "=", "img_dict", "[", "\"width\"", "]", "\n", "record", "[", "\"dataset_name\"", "]", "=", "dataset_name", "\n", "\n", "\n", "\n", "image_id", "=", "record", "[", "\"image_id\"", "]", "=", "img_dict", "[", "\"id\"", "]", "\n", "\n", "objs", "=", "[", "]", "\n", "for", "anno", "in", "anno_dict_list", ":", "\n", "# Check that the image_id in this annotation is the same as", "\n", "# the image_id we're looking at.", "\n", "# This fails only when the data parsing logic or the annotation file is buggy.", "\n", "\n", "# The original COCO valminusminival2014 & minival2014 annotation files", "\n", "# actually contains bugs that, together with certain ways of using COCO API,", "\n", "# can trigger this assertion.", "\n", "            ", "assert", "anno", "[", "\"image_id\"", "]", "==", "image_id", "\n", "\n", "assert", "anno", ".", "get", "(", "\"ignore\"", ",", "0", ")", "==", "0", "\n", "\n", "obj", "=", "{", "key", ":", "anno", "[", "key", "]", "for", "key", "in", "ann_keys", "if", "key", "in", "anno", "}", "\n", "\n", "segm", "=", "anno", ".", "get", "(", "\"segmentation\"", ",", "None", ")", "\n", "if", "segm", ":", "# either list[list[float]] or dict(RLE)", "\n", "                ", "if", "not", "isinstance", "(", "segm", ",", "dict", ")", ":", "\n", "# filter out invalid polygons (< 3 points)", "\n", "                    ", "segm", "=", "[", "poly", "for", "poly", "in", "segm", "if", "len", "(", "poly", ")", "%", "2", "==", "0", "and", "len", "(", "poly", ")", ">=", "6", "]", "\n", "if", "len", "(", "segm", ")", "==", "0", ":", "\n", "                        ", "num_instances_without_valid_segmentation", "+=", "1", "\n", "continue", "# ignore this instance", "\n", "", "", "obj", "[", "\"segmentation\"", "]", "=", "segm", "\n", "\n", "", "keypts", "=", "anno", ".", "get", "(", "\"keypoints\"", ",", "None", ")", "\n", "if", "keypts", ":", "# list[int]", "\n", "                ", "for", "idx", ",", "v", "in", "enumerate", "(", "keypts", ")", ":", "\n", "                    ", "if", "idx", "%", "3", "!=", "2", ":", "\n", "# COCO's segmentation coordinates are floating points in [0, H or W],", "\n", "# but keypoint coordinates are integers in [0, H-1 or W-1]", "\n", "# Therefore we assume the coordinates are \"pixel indices\" and", "\n", "# add 0.5 to convert to floating point coordinates.", "\n", "                        ", "keypts", "[", "idx", "]", "=", "v", "+", "0.5", "\n", "", "", "obj", "[", "\"keypoints\"", "]", "=", "keypts", "\n", "\n", "", "obj", "[", "\"bbox_mode\"", "]", "=", "BoxMode", ".", "XYWH_ABS", "\n", "if", "id_map", ":", "\n", "                ", "obj", "[", "\"category_id\"", "]", "=", "id_map", "[", "obj", "[", "\"category_id\"", "]", "]", "\n", "if", "\"anchor_normal_class\"", "in", "anno", ":", "\n", "                    ", "obj", "[", "\"anchor_normal_residual\"", "]", "=", "anno", "[", "\"anchor_normal_residual\"", "]", "\n", "obj", "[", "\"anchor_normal_class\"", "]", "=", "anno", "[", "\"anchor_normal_class\"", "]", "\n", "obj", "[", "\"mirror_normal_camera\"", "]", "=", "anno", "[", "\"mirror_normal_camera\"", "]", "\n", "", "", "objs", ".", "append", "(", "obj", ")", "\n", "\n", "", "if", "objs", ":", "\n", "            ", "record", "[", "\"annotations\"", "]", "=", "objs", "\n", "", "dataset_dicts", ".", "append", "(", "record", ")", "\n", "\n", "", "if", "num_instances_without_valid_segmentation", ">", "0", ":", "\n", "        ", "logger", ".", "warn", "(", "\n", "\"Filtered out {} instances without valid segmentation. \"", "\n", "\"There might be issues in your dataset generation process.\"", ".", "format", "(", "\n", "num_instances_without_valid_segmentation", "\n", ")", "\n", ")", "\n", "", "return", "dataset_dicts", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.dataset_mapper.dataset_mapper.Mirror3d_DatasetMapper.__init__": [[43, 83], ["detectron2.data.detection_utils.build_transform_gen", "numpy.load", "detectron2.data.transforms.RandomCrop", "logging.getLogger().info", "range", "detectron2.data.detection_utils.create_keypoint_hflip_indices", "len", "logging.getLogger", "str", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info"], ["def", "__init__", "(", "self", ",", "cfg", ",", "is_train", "=", "True", ")", ":", "\n", "        ", "if", "cfg", ".", "INPUT", ".", "CROP", ".", "ENABLED", "and", "is_train", ":", "\n", "            ", "self", ".", "crop_gen", "=", "T", ".", "RandomCrop", "(", "cfg", ".", "INPUT", ".", "CROP", ".", "TYPE", ",", "cfg", ".", "INPUT", ".", "CROP", ".", "SIZE", ")", "\n", "logging", ".", "getLogger", "(", "__name__", ")", ".", "info", "(", "\"CropGen used in training: \"", "+", "str", "(", "self", ".", "crop_gen", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "crop_gen", "=", "None", "\n", "\n", "", "self", ".", "tfm_gens", "=", "utils", ".", "build_transform_gen", "(", "cfg", ",", "is_train", ")", "\n", "# fmt: off", "\n", "self", ".", "img_format", "=", "cfg", ".", "INPUT", ".", "FORMAT", "\n", "self", ".", "mask_on", "=", "cfg", ".", "MODEL", ".", "MASK_ON", "\n", "self", ".", "mask_format", "=", "cfg", ".", "INPUT", ".", "MASK_FORMAT", "\n", "self", ".", "keypoint_on", "=", "cfg", ".", "MODEL", ".", "KEYPOINT_ON", "\n", "self", ".", "load_proposals", "=", "cfg", ".", "MODEL", ".", "LOAD_PROPOSALS", "\n", "self", ".", "anchor_normals", "=", "np", ".", "load", "(", "cfg", ".", "ANCHOR_NORMAL_NYP", ")", "\n", "self", ".", "REFINED_DEPTH", "=", "cfg", ".", "REFINED_DEPTH", "\n", "self", ".", "mesh_depth", "=", "cfg", ".", "MESH_DEPTH", "\n", "self", ".", "depth_shift", "=", "cfg", ".", "DEPTH_SHIFT", "\n", "self", ".", "RGBD_INPUT", "=", "cfg", ".", "RGBD_INPUT", "\n", "\n", "if", "cfg", ".", "UNIT_ANCHOR_NORMAL", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "anchor_normals", ")", ")", ":", "\n", "                ", "self", ".", "anchor_normals", "[", "i", "]", "=", "self", ".", "anchor_normals", "[", "i", "]", "/", "(", "np", ".", "sqrt", "(", "self", ".", "anchor_normals", "[", "i", "]", "[", "0", "]", "**", "2", "+", "self", ".", "anchor_normals", "[", "i", "]", "[", "1", "]", "**", "2", "+", "self", ".", "anchor_normals", "[", "i", "]", "[", "2", "]", "**", "2", ")", ")", "\n", "\n", "\n", "# fmt: on", "\n", "", "", "if", "self", ".", "keypoint_on", "and", "is_train", ":", "\n", "# Flip only makes sense in training", "\n", "            ", "self", ".", "keypoint_hflip_indices", "=", "utils", ".", "create_keypoint_hflip_indices", "(", "cfg", ".", "DATASETS", ".", "TRAIN", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "keypoint_hflip_indices", "=", "None", "\n", "\n", "", "if", "self", ".", "load_proposals", ":", "\n", "            ", "self", ".", "proposal_min_box_size", "=", "cfg", ".", "MODEL", ".", "PROPOSAL_GENERATOR", ".", "MIN_SIZE", "\n", "self", ".", "proposal_topk", "=", "(", "\n", "cfg", ".", "DATASETS", ".", "PRECOMPUTED_PROPOSAL_TOPK_TRAIN", "\n", "if", "is_train", "\n", "else", "cfg", ".", "DATASETS", ".", "PRECOMPUTED_PROPOSAL_TOPK_TEST", "\n", ")", "\n", "", "self", ".", "is_train", "=", "is_train", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.dataset_mapper.dataset_mapper.Mirror3d_DatasetMapper.__call__": [[84, 197], ["copy.deepcopy", "detectron2.data.detection_utils.read_image", "detectron2.data.detection_utils.check_image_size", "torch.as_tensor", "torch.as_tensor", "detectron2.data.transforms.apply_transform_gens", "detectron2.data.transforms.apply_transform_gens", "utils.gen_crop_transform_with_instance.apply_image.copy", "detectron2.data.transforms.apply_transform_gens", "numpy.ascontiguousarray", "depth_image.astype", "torch.as_tensor", "detectron2.data.detection_utils.transform_proposals", "copy.deepcopy.pop", "mirror3d_utils.annotations_to_instances", "detectron2.data.detection_utils.filter_empty_instances", "detectron2.data.transforms.apply_segmentation", "torch.as_tensor", "detectron2.data.transforms.apply_transform_gens", "detectron2.data.transforms.apply_transform_gens", "cv2.imread", "noisy_depth_image.astype", "detectron2.data.detection_utils.gen_crop_transform_with_instance", "detectron2.data.detection_utils.gen_crop_transform_with_instance.apply_image", "utils.gen_crop_transform_with_instance.apply_image.transpose", "noisy_depth_image.astype", "mirror3d_utils.transform_instance_annotations", "mirror3d_utils.annotations_to_instances.has", "mirror3d_utils.annotations_to_instances.gt_masks.get_bounding_boxes", "fvcore.common.file_io.PathManager.open", "PIL.Image.open", "numpy.asarray", "numpy.asarray.astype", "cv2.imread", "depth_image.astype", "detectron2.data.transforms.apply_transform_gens", "cv2.imread", "depth_image.astype", "detectron2.data.transforms.apply_transform_gens", "dataset_mapper.Mirror3d_DatasetMapper.crop_gen.get_crop_size", "numpy.random.choice", "anno.pop", "anno.pop", "copy.deepcopy.pop", "copy.deepcopy.pop", "cv2.imread", "depth_image.astype", "cv2.imread", "depth_image.astype", "obj.get"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.data.mirror3d_utils.annotations_to_instances", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.data.mirror3d_utils.transform_instance_annotations"], ["", "def", "__call__", "(", "self", ",", "dataset_dict", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dataset_dict (dict): Metadata of one image, in Detectron2 Dataset format.\n\n        Returns:\n            dict: a format that builtin models in detectron2 accept\n        \"\"\"", "\n", "dataset_dict", "=", "copy", ".", "deepcopy", "(", "dataset_dict", ")", "# it will be modified by code below", "\n", "# USER: Write your own image loading if it's not from a file", "\n", "image", "=", "utils", ".", "read_image", "(", "dataset_dict", "[", "\"mirror_color_image_path\"", "]", ",", "format", "=", "self", ".", "img_format", ")", "\n", "\n", "if", "self", ".", "mesh_depth", ":", "\n", "            ", "if", "\"refined_meshD_path\"", "in", "dataset_dict", "and", "self", ".", "REFINED_DEPTH", ":", "\n", "                ", "depth_image", "=", "cv2", ".", "imread", "(", "dataset_dict", "[", "\"refined_meshD_path\"", "]", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "/", "self", ".", "depth_shift", "\n", "depth_image", ",", "_", "=", "T", ".", "apply_transform_gens", "(", "self", ".", "tfm_gens", ",", "depth_image", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "\"raw_meshD_path\"", "in", "dataset_dict", "and", "not", "self", ".", "REFINED_DEPTH", ":", "\n", "                ", "depth_image", "=", "cv2", ".", "imread", "(", "dataset_dict", "[", "\"raw_meshD_path\"", "]", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "/", "self", ".", "depth_shift", "\n", "depth_image", ",", "_", "=", "T", ".", "apply_transform_gens", "(", "self", ".", "tfm_gens", ",", "depth_image", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "\"refined_sensorD_path\"", "in", "dataset_dict", "and", "self", ".", "REFINED_DEPTH", ":", "\n", "                ", "depth_image", "=", "cv2", ".", "imread", "(", "dataset_dict", "[", "\"refined_sensorD_path\"", "]", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "/", "self", ".", "depth_shift", "\n", "depth_image", ",", "_", "=", "T", ".", "apply_transform_gens", "(", "self", ".", "tfm_gens", ",", "depth_image", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "", "elif", "\"raw_sensorD_path\"", "in", "dataset_dict", "and", "not", "self", ".", "REFINED_DEPTH", ":", "\n", "                ", "depth_image", "=", "cv2", ".", "imread", "(", "dataset_dict", "[", "\"raw_sensorD_path\"", "]", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "/", "self", ".", "depth_shift", "\n", "depth_image", ",", "_", "=", "T", ".", "apply_transform_gens", "(", "self", ".", "tfm_gens", ",", "depth_image", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "", "noisy_depth_image", "=", "[", "]", "\n", "if", "\"raw_sensorD_path\"", "in", "dataset_dict", "and", "self", ".", "RGBD_INPUT", ":", "\n", "            ", "noisy_depth_image", "=", "cv2", ".", "imread", "(", "dataset_dict", "[", "\"raw_sensorD_path\"", "]", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "/", "self", ".", "depth_shift", "\n", "noisy_depth_image", ",", "_", "=", "T", ".", "apply_transform_gens", "(", "self", ".", "tfm_gens", ",", "noisy_depth_image", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "utils", ".", "check_image_size", "(", "dataset_dict", ",", "image", ")", "\n", "\n", "if", "\"annotations\"", "not", "in", "dataset_dict", ":", "\n", "            ", "image", ",", "transforms", "=", "T", ".", "apply_transform_gens", "(", "\n", "(", "[", "self", ".", "crop_gen", "]", "if", "self", ".", "crop_gen", "else", "[", "]", ")", "+", "self", ".", "tfm_gens", ",", "image", "\n", ")", "\n", "", "else", ":", "\n", "# Crop around an instance if there are instances in the image.", "\n", "# USER: Remove if you don't use cropping", "\n", "\n", "            ", "if", "self", ".", "crop_gen", ":", "\n", "\n", "                ", "crop_tfm", "=", "utils", ".", "gen_crop_transform_with_instance", "(", "\n", "self", ".", "crop_gen", ".", "get_crop_size", "(", "image", ".", "shape", "[", ":", "2", "]", ")", ",", "\n", "image", ".", "shape", "[", ":", "2", "]", ",", "\n", "np", ".", "random", ".", "choice", "(", "dataset_dict", "[", "\"annotations\"", "]", ")", ",", "\n", ")", "\n", "image", "=", "crop_tfm", ".", "apply_image", "(", "image", ")", "\n", "", "test", "=", "image", ".", "copy", "(", ")", "\n", "image", ",", "transforms", "=", "T", ".", "apply_transform_gens", "(", "self", ".", "tfm_gens", ",", "image", ")", "\n", "\n", "if", "self", ".", "crop_gen", ":", "\n", "                ", "transforms", "=", "crop_tfm", "+", "transforms", "\n", "\n", "", "", "image_shape", "=", "image", ".", "shape", "[", ":", "2", "]", "# h, w", "\n", "# Pytorch's dataloader is efficient on torch.Tensor due to shared-memory,", "\n", "# but not efficient on large generic data structures due to the use of pickle & mp.Queue.", "\n", "# Therefore it's important to use torch.Tensor.", "\n", "dataset_dict", "[", "\"image\"", "]", "=", "torch", ".", "as_tensor", "(", "np", ".", "ascontiguousarray", "(", "image", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "dataset_dict", "[", "\"depth_image\"", "]", "=", "torch", ".", "as_tensor", "(", "depth_image", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "if", "self", ".", "RGBD_INPUT", ":", "\n", "            ", "noisy_depth_image", "[", "noisy_depth_image", "<", "0", "]", "=", "0", "\n", "dataset_dict", "[", "\"noisy_depth_image\"", "]", "=", "torch", ".", "as_tensor", "(", "noisy_depth_image", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "# USER: Remove if you don't use pre-computed proposals.", "\n", "# Most users would not need this feature.", "\n", "", "if", "self", ".", "load_proposals", ":", "\n", "            ", "utils", ".", "transform_proposals", "(", "\n", "dataset_dict", ",", "\n", "image_shape", ",", "\n", "transforms", ",", "\n", "self", ".", "proposal_min_box_size", ",", "\n", "self", ".", "proposal_topk", ",", "\n", ")", "\n", "\n", "", "if", "not", "self", ".", "is_train", ":", "\n", "# USER: Modify this if you want to keep them for some reason.", "\n", "# dataset_dict.pop(\"annotations\", None) ", "\n", "            ", "dataset_dict", ".", "pop", "(", "\"sem_seg_file_name\"", ",", "None", ")", "\n", "return", "dataset_dict", "\n", "\n", "", "if", "\"annotations\"", "in", "dataset_dict", ":", "\n", "# USER: Modify this if you want to keep them for some reason.", "\n", "            ", "for", "anno", "in", "dataset_dict", "[", "\"annotations\"", "]", ":", "\n", "                ", "if", "not", "self", ".", "mask_on", ":", "\n", "                    ", "anno", ".", "pop", "(", "\"segmentation\"", ",", "None", ")", "\n", "", "if", "not", "self", ".", "keypoint_on", ":", "\n", "                    ", "anno", ".", "pop", "(", "\"keypoints\"", ",", "None", ")", "\n", "# USER: Implement additional transformations if you have other types of data", "\n", "", "", "annos", "=", "[", "\n", "transform_instance_annotations", "(", "\n", "obj", ",", "transforms", ",", "image_shape", ",", "keypoint_hflip_indices", "=", "self", ".", "keypoint_hflip_indices", ",", "anchor_normals", "=", "self", ".", "anchor_normals", "\n", ")", "\n", "for", "obj", "in", "dataset_dict", ".", "pop", "(", "\"annotations\"", ")", "\n", "if", "obj", ".", "get", "(", "\"iscrowd\"", ",", "0", ")", "==", "0", "\n", "]", "\n", "instances", "=", "annotations_to_instances", "(", "\n", "annos", ",", "image_shape", ",", "mask_format", "=", "self", ".", "mask_format", "\n", ")", "\n", "# Create a tight bounding box from masks, useful when image is cropped", "\n", "if", "self", ".", "crop_gen", "and", "instances", ".", "has", "(", "\"gt_masks\"", ")", ":", "\n", "                ", "instances", ".", "gt_boxes", "=", "instances", ".", "gt_masks", ".", "get_bounding_boxes", "(", ")", "\n", "", "dataset_dict", "[", "\"instances\"", "]", "=", "utils", ".", "filter_empty_instances", "(", "instances", ")", "\n", "# USER: Remove if you don't do semantic/panoptic segmentation.", "\n", "", "if", "\"sem_seg_file_name\"", "in", "dataset_dict", ":", "\n", "            ", "with", "PathManager", ".", "open", "(", "dataset_dict", ".", "pop", "(", "\"sem_seg_file_name\"", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "sem_seg_gt", "=", "Image", ".", "open", "(", "f", ")", "\n", "sem_seg_gt", "=", "np", ".", "asarray", "(", "sem_seg_gt", ",", "dtype", "=", "\"uint8\"", ")", "\n", "", "sem_seg_gt", "=", "transforms", ".", "apply_segmentation", "(", "sem_seg_gt", ")", "\n", "sem_seg_gt", "=", "torch", ".", "as_tensor", "(", "sem_seg_gt", ".", "astype", "(", "\"long\"", ")", ")", "\n", "dataset_dict", "[", "\"sem_seg\"", "]", "=", "sem_seg_gt", "\n", "", "return", "dataset_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.__init__": [[25, 40], ["print", "os.path.join", "logging.basicConfig", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.cfg.TRAIN_COCO_JSON.find", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.cfg.VAL_COCO_JSON.find", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.cfg.TRAIN_COCO_JSON.find", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.cfg.VAL_COCO_JSON.find", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.cfg.TRAIN_COCO_JSON.find", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.cfg.VAL_COCO_JSON.find"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "output_list", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "output_list", "=", "output_list", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "mean_IOU", "=", "0", "\n", "print", "(", "\"########## cfg.SEED ##########\"", ",", "cfg", ".", "SEED", ")", "\n", "log_file_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "OUTPUT_DIR", ",", "\"eval_result.log\"", ")", "\n", "logging", ".", "basicConfig", "(", "filename", "=", "log_file_save_path", ",", "filemode", "=", "\"w\"", ",", "format", "=", "\"%(asctime)s %(name)s:%(levelname)s:%(message)s\"", ",", "datefmt", "=", "\"%d-%m-%Y %H:%M:%S\"", ",", "level", "=", "logging", ".", "INFO", ")", "\n", "self", ".", "logger", "=", "logging", "\n", "\n", "if", "self", ".", "cfg", ".", "TRAIN_COCO_JSON", ".", "find", "(", "\"nyu\"", ")", "or", "self", ".", "cfg", ".", "VAL_COCO_JSON", ".", "find", "(", "\"nyu\"", ")", ">", "0", ":", "\n", "            ", "self", ".", "dataset_name", "=", "\"nyu\"", "\n", "", "elif", "self", ".", "cfg", ".", "TRAIN_COCO_JSON", ".", "find", "(", "\"mp3d\"", ")", "or", "self", ".", "cfg", ".", "VAL_COCO_JSON", ".", "find", "(", "\"mp3d\"", ")", ">", "0", ":", "\n", "            ", "self", ".", "dataset_name", "=", "\"mp3d\"", "\n", "", "elif", "self", ".", "cfg", ".", "TRAIN_COCO_JSON", ".", "find", "(", "\"scannet\"", ")", "or", "self", ".", "cfg", ".", "VAL_COCO_JSON", ".", "find", "(", "\"scannet\"", ")", ">", "0", ":", "\n", "            ", "self", ".", "dataset_name", "=", "\"scannet\"", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.eval_main": [[41, 68], ["mirror3d_DE_IOU_eval.Mirror3DNet_Eval.save_masked_image", "print", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.eval_seg", "print", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.refine_DEbranch_predD_and_eval", "print", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.eval_raw_DEbranch_predD", "print", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.refine_raw_inputD_and_eval", "print", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.refine_input_txtD_and_eval"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.save_masked_image", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.eval_seg", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.refine_DEbranch_predD_and_eval", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.eval_raw_DEbranch_predD", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.refine_raw_inputD_and_eval", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.refine_input_txtD_and_eval"], ["", "", "def", "eval_main", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "cfg", ".", "EVAL_SAVE_MASKED_IMG", ":", "\n", "            ", "self", ".", "save_masked_image", "(", "self", ".", "output_list", ")", "\n", "\n", "", "if", "self", ".", "cfg", ".", "EVAL_MASK_IOU", ":", "\n", "            ", "print", "(", "\"calculate IOU, f_measure, MAE ..\"", ")", "\n", "self", ".", "eval_seg", "(", "self", ".", "output_list", ")", "\n", "\n", "\n", "# ----------- evaluate \\mnet/ PlaneRCNN model's predicted depth + Mirror3d -----------", "\n", "", "if", "self", ".", "cfg", ".", "EVAL_BRANCH_REF_DEPTH", ":", "\n", "            ", "print", "(", "\"eval DE_pred + refine ...\"", ")", "\n", "self", ".", "refine_DEbranch_predD_and_eval", "(", "self", ".", "output_list", ")", "\n", "\n", "", "if", "self", ".", "cfg", ".", "EVAL_BRANCH_ORI_DEPTH", ":", "\n", "            ", "print", "(", "\"eval DE_pred ...\"", ")", "\n", "self", ".", "eval_raw_DEbranch_predD", "(", "self", ".", "output_list", ")", "\n", "# ----------- evaluate REF_DEPTH_TO_REFINE (coco.json) + Mirror3d -----------", "\n", "", "if", "\"raw\"", "in", "self", ".", "cfg", ".", "REF_MODE", ":", "\n", "            ", "print", "(", "\"eval rawD + refine ...\"", ")", "\n", "self", ".", "refine_raw_inputD_and_eval", "(", "self", ".", "output_list", ")", "\n", "\n", "# ----------- evaluate REF_DEPTH_TO_REFINE (output from init_depth_generator/ \\mnet'DE branch) + Mirror3d -----------", "\n", "", "if", "self", ".", "cfg", ".", "EVAL_INPUT_REF_DEPTH", "and", "\"raw\"", "not", "in", "self", ".", "cfg", ".", "REF_MODE", ":", "\n", "            ", "print", "(", "\"eval input {} + refine ...\"", ".", "format", "(", "self", ".", "cfg", ".", "REF_DEPTH_TO_REFINE", ")", ")", "\n", "self", ".", "refine_input_txtD_and_eval", "(", "self", ".", "output_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.refine_input_txtD_and_eval": [[74, 148], ["numpy.load", "RefineDepth", "Mirror3dEval", "read_txt", "dict", "enumerate", "print", "Mirror3dEval.print_mirror3D_score", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.cfg.REF_DEPTH_TO_REFINE.find", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.cfg.REF_DEPTH_TO_REFINE.find", "line.strip().split", "numpy.zeros", "numpy.logical_or.astype", "cv2.imread", "instances.to().has", "Mirror3dEval.compute_and_update_mirror3D_metrics", "print", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.cfg.REF_DEPTH_TO_REFINE.find", "enumerate", "os.path.join", "os.makedirs", "Mirror3dEval.save_result", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.cfg.REF_DEPTH_TO_REFINE.find", "line.strip", "instances.to", "one_pred_mask.numpy().astype", "numpy.logical_and", "numpy.logical_or", "unit_vector", "os.path.join", "instances.to", "numpy.logical_and.sum", "instances.to().pred_residuals[].numpy", "RefineDepth.refine_depth_by_mirror_border", "RefineDepth.refine_depth_by_mirror_area", "one_pred_mask.numpy", "one_pred_mask.numpy().astype().squeeze", "one_pred_mask.numpy().astype().squeeze", "instances.to", "one_pred_mask.numpy().astype", "one_pred_mask.numpy().astype", "instances.to", "instances.to", "one_pred_mask.numpy", "one_pred_mask.numpy"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_txt", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.print_mirror3D_score", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.compute_and_update_mirror3D_metrics", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.save_result", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.unit_vector", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.RefineDepth.refine_depth_by_mirror_border", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.RefineDepth.refine_depth_by_mirror_area"], ["", "", "def", "refine_input_txtD_and_eval", "(", "self", ",", "output_list", ")", ":", "\n", "        ", "anchor_normal", "=", "np", ".", "load", "(", "self", ".", "cfg", ".", "ANCHOR_NORMAL_NYP", ")", "\n", "refine_depth_fun", "=", "RefineDepth", "(", "self", ".", "cfg", ".", "FOCAL_LENGTH", ",", "self", ".", "cfg", ".", "REF_BORDER_WIDTH", ",", "self", ".", "cfg", ".", "EVAL_WIDTH", ",", "self", ".", "cfg", ".", "EVAL_HEIGHT", ")", "\n", "if", "self", ".", "cfg", ".", "REF_DEPTH_TO_REFINE", ".", "find", "(", "\"SAIC\"", ")", ">", "0", ":", "\n", "            ", "input_tag", "=", "\"RGBD\"", "\n", "method_tag", "=", "\"saic + \\mnet\"", "\n", "", "elif", "self", ".", "cfg", ".", "REF_DEPTH_TO_REFINE", ".", "find", "(", "\"BTS\"", ")", ">", "0", ":", "\n", "            ", "input_tag", "=", "\"RGB\"", "\n", "method_tag", "=", "\"BTS + \\mnet\"", "\n", "", "elif", "self", ".", "cfg", ".", "REF_DEPTH_TO_REFINE", ".", "find", "(", "\"VNL\"", ")", ">", "0", ":", "\n", "            ", "input_tag", "=", "\"RGB\"", "\n", "method_tag", "=", "\"VNL + \\mnet\"", "\n", "", "elif", "not", "self", ".", "cfg", ".", "OBJECT_CLS", ":", "\n", "            ", "input_tag", "=", "\"RGB\"", "\n", "method_tag", "=", "\"PlaneRCNN\"", "\n", "", "else", ":", "\n", "            ", "input_tag", "=", "\"RGB\"", "\n", "method_tag", "=", "\"\\mnet\"", "\n", "\n", "", "train_with_refD", "=", "None", "\n", "if", "self", ".", "cfg", ".", "REF_DEPTH_TO_REFINE", ".", "find", "(", "\"ref\"", ")", ">", "0", ":", "\n", "            ", "train_with_refD", "=", "True", "\n", "", "else", ":", "\n", "            ", "train_with_refD", "=", "False", "\n", "\n", "", "mirror3d_eval", "=", "Mirror3dEval", "(", "dataset_root", "=", "self", ".", "cfg", ".", "VAL_IMG_ROOT", ",", "train_with_ref_d", "=", "train_with_refD", ",", "logger", "=", "self", ".", "logger", ",", "input_tag", "=", "input_tag", ",", "method_tag", "=", "method_tag", ",", "width", "=", "self", ".", "cfg", ".", "EVAL_WIDTH", ",", "height", "=", "self", ".", "cfg", ".", "EVAL_HEIGHT", ",", "dataset", "=", "self", ".", "dataset_name", ")", "\n", "\n", "input_txt", "=", "read_txt", "(", "self", ".", "cfg", ".", "REF_DEPTH_TO_REFINE", ")", "\n", "\n", "imgPath_preDPath", "=", "dict", "(", ")", "\n", "for", "line", "in", "input_txt", ":", "\n", "            ", "img_paths", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "imgPath_preDPath", "[", "img_paths", "[", "0", "]", "]", "=", "img_paths", "[", "-", "1", "]", "\n", "\n", "", "for", "i", ",", "item", "in", "enumerate", "(", "output_list", ")", ":", "\n", "            ", "one_output", ",", "one_input", "=", "item", "\n", "instances", "=", "one_output", "[", "0", "]", "[", "0", "]", "[", "\"instances\"", "]", "\n", "color_img_path", "=", "one_input", "[", "0", "]", "[", "\"mirror_color_image_path\"", "]", "\n", "\n", "pred_mask", "=", "np", ".", "zeros", "(", "instances", ".", "image_size", ")", "\n", "pred_mask", "=", "pred_mask", ".", "astype", "(", "bool", ")", "\n", "\n", "other_predD_path", "=", "imgPath_preDPath", "[", "color_img_path", "]", "\n", "depth_to_ref", "=", "cv2", ".", "imread", "(", "other_predD_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "\n", "if", "instances", ".", "to", "(", "\"cpu\"", ")", ".", "has", "(", "\"pred_masks\"", ")", ":", "\n", "                ", "for", "index", ",", "one_pred_mask", "in", "enumerate", "(", "instances", ".", "to", "(", "\"cpu\"", ")", ".", "pred_masks", ")", ":", "\n", "\n", "                    ", "to_refine_area", "=", "one_pred_mask", ".", "numpy", "(", ")", ".", "astype", "(", "bool", ")", "\n", "to_refine_area", "=", "np", ".", "logical_and", "(", "pred_mask", "==", "False", ",", "to_refine_area", ")", "\n", "if", "to_refine_area", ".", "sum", "(", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "pred_mask", "=", "np", ".", "logical_or", "(", "pred_mask", ",", "one_pred_mask", ")", "\n", "if", "instances", ".", "to", "(", "\"cpu\"", ")", ".", "pred_anchor_classes", "[", "index", "]", ">=", "anchor_normal", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "continue", "\n", "\n", "", "pred_normal", "=", "anchor_normal", "[", "instances", ".", "to", "(", "\"cpu\"", ")", ".", "pred_anchor_classes", "[", "index", "]", "]", "+", "instances", ".", "to", "(", "\"cpu\"", ")", ".", "pred_residuals", "[", "index", "]", ".", "numpy", "(", ")", "\n", "pred_normal", "=", "unit_vector", "(", "pred_normal", ")", "\n", "\n", "if", "\"border\"", "in", "self", ".", "cfg", ".", "REF_MODE", ":", "\n", "                        ", "depth_to_ref", "=", "refine_depth_fun", ".", "refine_depth_by_mirror_border", "(", "one_pred_mask", ".", "numpy", "(", ")", ".", "astype", "(", "bool", ")", ".", "squeeze", "(", ")", ",", "pred_normal", ",", "depth_to_ref", ")", "\n", "", "else", ":", "\n", "                        ", "depth_to_ref", "=", "refine_depth_fun", ".", "refine_depth_by_mirror_area", "(", "one_pred_mask", ".", "numpy", "(", ")", ".", "astype", "(", "bool", ")", ".", "squeeze", "(", ")", ",", "pred_normal", ",", "depth_to_ref", ")", "\n", "", "", "", "depth_to_ref", "[", "depth_to_ref", "<", "0", "]", "=", "0", "\n", "mirror3d_eval", ".", "compute_and_update_mirror3D_metrics", "(", "depth_to_ref", "/", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "color_img_path", ",", "one_input", "[", "0", "]", "[", "\"raw_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"refined_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "if", "self", ".", "cfg", ".", "EVAL_SAVE_DEPTH", ":", "\n", "                ", "refined_input_txt_output_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "OUTPUT_DIR", ",", "\"refined_input_txt_pred_depth\"", ")", "\n", "os", ".", "makedirs", "(", "refined_input_txt_output_folder", ",", "exist_ok", "=", "True", ")", "\n", "mirror3d_eval", ".", "save_result", "(", "refined_input_txt_output_folder", ",", "depth_to_ref", "/", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "color_img_path", ",", "one_input", "[", "0", "]", "[", "\"raw_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"refined_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "\n", "", "", "print", "(", "\"############# Result of 'txt {} + Mirror3dNet' #############\"", ".", "format", "(", "self", ".", "cfg", ".", "REF_DEPTH_TO_REFINE", ")", ")", "\n", "if", "self", ".", "cfg", ".", "EVAL_SAVE_DEPTH", ":", "\n", "            ", "print", "(", "\"##### result saved to ##### {}\"", ".", "format", "(", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "OUTPUT_DIR", ",", "\"color_mask_gtD_predD.txt\"", ")", ")", ")", "\n", "", "mirror3d_eval", ".", "print_mirror3D_score", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.refine_raw_inputD_and_eval": [[149, 237], ["numpy.load", "RefineDepth", "Mirror3dEval", "Mirror3dEval", "Mirror3dEval", "Mirror3dEval", "dict", "read_json", "enumerate", "print", "Mirror3dEval.print_mirror3D_score", "print", "Mirror3dEval.print_mirror3D_score", "os.path.join", "os.path.join", "os.path.join", "numpy.zeros", "numpy.logical_or.astype", "cv2.imread", "os.path.join", "os.makedirs", "os.path.join", "os.makedirs", "instances.to().has", "Mirror3dEval.compute_and_update_mirror3D_metrics", "Mirror3dEval.compute_and_update_mirror3D_metrics", "print", "Mirror3dEval.print_mirror3D_score", "print", "Mirror3dEval.print_mirror3D_score", "cv2.imread", "enumerate", "Mirror3dEval.save_result", "Mirror3dEval.compute_and_update_mirror3D_metrics", "Mirror3dEval.compute_and_update_mirror3D_metrics", "os.rmdir", "instances.to", "one_pred_mask.numpy().astype", "numpy.logical_and", "numpy.logical_or", "unit_vector", "cv2.imread", "Mirror3dEval.save_result", "instances.to", "numpy.logical_and.sum", "instances.to().pred_residuals[].numpy", "RefineDepth.refine_depth_by_mirror_border", "RefineDepth.refine_depth_by_mirror_area", "cv2.imread", "one_pred_mask.numpy", "RefineDepth.refine_depth_by_mirror_border", "RefineDepth.refine_depth_by_mirror_area", "one_pred_mask.numpy().astype().squeeze", "one_pred_mask.numpy().astype().squeeze", "instances.to", "one_pred_mask.numpy().astype().squeeze", "one_pred_mask.numpy().astype().squeeze", "one_pred_mask.numpy().astype", "one_pred_mask.numpy().astype", "instances.to", "instances.to", "one_pred_mask.numpy().astype", "one_pred_mask.numpy().astype", "one_pred_mask.numpy", "one_pred_mask.numpy", "one_pred_mask.numpy", "one_pred_mask.numpy"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.general_utils.read_json", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.print_mirror3D_score", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.print_mirror3D_score", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.compute_and_update_mirror3D_metrics", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.compute_and_update_mirror3D_metrics", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.print_mirror3D_score", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.print_mirror3D_score", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.save_result", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.compute_and_update_mirror3D_metrics", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.compute_and_update_mirror3D_metrics", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.unit_vector", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.save_result", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.RefineDepth.refine_depth_by_mirror_border", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.RefineDepth.refine_depth_by_mirror_area", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.RefineDepth.refine_depth_by_mirror_border", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.RefineDepth.refine_depth_by_mirror_area"], ["", "def", "refine_raw_inputD_and_eval", "(", "self", ",", "output_list", ")", ":", "\n", "        ", "anchor_normal", "=", "np", ".", "load", "(", "self", ".", "cfg", ".", "ANCHOR_NORMAL_NYP", ")", "\n", "refine_depth_fun", "=", "RefineDepth", "(", "self", ".", "cfg", ".", "FOCAL_LENGTH", ",", "self", ".", "cfg", ".", "REF_BORDER_WIDTH", ",", "self", ".", "cfg", ".", "EVAL_WIDTH", ",", "self", ".", "cfg", ".", "EVAL_HEIGHT", ")", "\n", "\n", "mirror3d_eval_sensorD", "=", "Mirror3dEval", "(", "dataset_root", "=", "self", ".", "cfg", ".", "VAL_IMG_ROOT", ",", "train_with_ref_d", "=", "None", ",", "logger", "=", "self", ".", "logger", ",", "input_tag", "=", "\"sensor-D\"", ",", "method_tag", "=", "\"*\"", ",", "width", "=", "self", ".", "cfg", ".", "EVAL_WIDTH", ",", "height", "=", "self", ".", "cfg", ".", "EVAL_HEIGHT", ",", "dataset", "=", "self", ".", "dataset_name", ")", "\n", "mirror3d_eval_meshD", "=", "Mirror3dEval", "(", "dataset_root", "=", "self", ".", "cfg", ".", "VAL_IMG_ROOT", ",", "train_with_ref_d", "=", "None", ",", "logger", "=", "self", ".", "logger", ",", "input_tag", "=", "\"mesh-D\"", ",", "method_tag", "=", "\"*\"", ",", "width", "=", "self", ".", "cfg", ".", "EVAL_WIDTH", ",", "height", "=", "self", ".", "cfg", ".", "EVAL_HEIGHT", ",", "dataset", "=", "self", ".", "dataset_name", ")", "\n", "mirror3d_eval_hole", "=", "Mirror3dEval", "(", "dataset_root", "=", "self", ".", "cfg", ".", "VAL_IMG_ROOT", ",", "train_with_ref_d", "=", "None", ",", "logger", "=", "self", ".", "logger", ",", "input_tag", "=", "\"sensor-D\"", ",", "method_tag", "=", "\"\\mnet\"", ",", "width", "=", "self", ".", "cfg", ".", "EVAL_WIDTH", ",", "height", "=", "self", ".", "cfg", ".", "EVAL_HEIGHT", ",", "dataset", "=", "self", ".", "dataset_name", ")", "\n", "mirror3d_eval_mesh", "=", "Mirror3dEval", "(", "dataset_root", "=", "self", ".", "cfg", ".", "VAL_IMG_ROOT", ",", "train_with_ref_d", "=", "None", ",", "logger", "=", "self", ".", "logger", ",", "input_tag", "=", "\"mesh-D\"", ",", "method_tag", "=", "\"\\mnet\"", ",", "width", "=", "self", ".", "cfg", ".", "EVAL_WIDTH", ",", "height", "=", "self", ".", "cfg", ".", "EVAL_HEIGHT", ",", "dataset", "=", "self", ".", "dataset_name", ")", "\n", "\n", "have_mesh_D", "=", "False", "\n", "imgPath_info", "=", "dict", "(", ")", "\n", "\n", "input_json", "=", "read_json", "(", "self", ".", "cfg", ".", "VAL_COCO_JSON", ")", "\n", "for", "item", "in", "input_json", "[", "\"images\"", "]", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "VAL_IMG_ROOT", ",", "item", "[", "\"mirror_color_image_path\"", "]", ")", "\n", "\n", "imgPath_info", "[", "img_path", "]", "=", "item", "\n", "\n", "", "for", "i", ",", "item", "in", "enumerate", "(", "output_list", ")", ":", "\n", "            ", "one_output", ",", "one_input", "=", "item", "\n", "instances", "=", "one_output", "[", "0", "]", "[", "0", "]", "[", "\"instances\"", "]", "\n", "color_img_path", "=", "one_input", "[", "0", "]", "[", "\"mirror_color_image_path\"", "]", "\n", "hole_raw_depth_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "VAL_IMG_ROOT", ",", "imgPath_info", "[", "color_img_path", "]", "[", "\"raw_sensorD_path\"", "]", ")", "\n", "mesh_raw_depth_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "VAL_IMG_ROOT", ",", "imgPath_info", "[", "color_img_path", "]", "[", "\"raw_meshD_path\"", "]", ")", "\n", "\n", "pred_mask", "=", "np", ".", "zeros", "(", "instances", ".", "image_size", ")", "\n", "pred_mask", "=", "pred_mask", ".", "astype", "(", "bool", ")", "\n", "\n", "hole_depth_to_ref", "=", "cv2", ".", "imread", "(", "hole_raw_depth_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "if", "mesh_raw_depth_path", "!=", "hole_raw_depth_path", ":", "\n", "                ", "mesh_depth_to_ref", "=", "cv2", ".", "imread", "(", "mesh_raw_depth_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "\n", "", "hole_depth_to_ref_output_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "OUTPUT_DIR", ",", "\"hole_raw_depth_mirror3d_refine\"", ")", "\n", "os", ".", "makedirs", "(", "hole_depth_to_ref_output_folder", ",", "exist_ok", "=", "True", ")", "\n", "mesh_depth_to_ref_output_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "OUTPUT_DIR", ",", "\"mesh_raw_depth_mirror3d_refine\"", ")", "\n", "os", ".", "makedirs", "(", "mesh_depth_to_ref_output_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "\n", "if", "instances", ".", "to", "(", "\"cpu\"", ")", ".", "has", "(", "\"pred_masks\"", ")", ":", "\n", "                ", "for", "index", ",", "one_pred_mask", "in", "enumerate", "(", "instances", ".", "to", "(", "\"cpu\"", ")", ".", "pred_masks", ")", ":", "\n", "\n", "                    ", "to_refine_area", "=", "one_pred_mask", ".", "numpy", "(", ")", ".", "astype", "(", "bool", ")", "\n", "to_refine_area", "=", "np", ".", "logical_and", "(", "pred_mask", "==", "False", ",", "to_refine_area", ")", "\n", "if", "to_refine_area", ".", "sum", "(", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "pred_mask", "=", "np", ".", "logical_or", "(", "pred_mask", ",", "one_pred_mask", ")", "\n", "if", "instances", ".", "to", "(", "\"cpu\"", ")", ".", "pred_anchor_classes", "[", "index", "]", ">=", "anchor_normal", ".", "shape", "[", "0", "]", ":", "\n", "                        ", "continue", "\n", "", "pred_normal", "=", "anchor_normal", "[", "instances", ".", "to", "(", "\"cpu\"", ")", ".", "pred_anchor_classes", "[", "index", "]", "]", "+", "instances", ".", "to", "(", "\"cpu\"", ")", ".", "pred_residuals", "[", "index", "]", ".", "numpy", "(", ")", "\n", "pred_normal", "=", "unit_vector", "(", "pred_normal", ")", "\n", "\n", "if", "mesh_raw_depth_path", "!=", "hole_raw_depth_path", ":", "\n", "                        ", "if", "\"border\"", "in", "self", ".", "cfg", ".", "REF_MODE", ":", "\n", "                            ", "mesh_depth_to_ref", "=", "refine_depth_fun", ".", "refine_depth_by_mirror_border", "(", "one_pred_mask", ".", "numpy", "(", ")", ".", "astype", "(", "bool", ")", ".", "squeeze", "(", ")", ",", "pred_normal", ",", "mesh_depth_to_ref", ")", "\n", "", "else", ":", "\n", "                            ", "mesh_depth_to_ref", "=", "refine_depth_fun", ".", "refine_depth_by_mirror_area", "(", "one_pred_mask", ".", "numpy", "(", ")", ".", "astype", "(", "bool", ")", ".", "squeeze", "(", ")", ",", "pred_normal", ",", "mesh_depth_to_ref", ")", "\n", "\n", "", "", "if", "\"border\"", "in", "self", ".", "cfg", ".", "REF_MODE", ":", "\n", "                        ", "hole_depth_to_ref", "=", "refine_depth_fun", ".", "refine_depth_by_mirror_border", "(", "one_pred_mask", ".", "numpy", "(", ")", ".", "astype", "(", "bool", ")", ".", "squeeze", "(", ")", ",", "pred_normal", ",", "hole_depth_to_ref", ")", "\n", "", "else", ":", "\n", "                        ", "hole_depth_to_ref", "=", "refine_depth_fun", ".", "refine_depth_by_mirror_area", "(", "one_pred_mask", ".", "numpy", "(", ")", ".", "astype", "(", "bool", ")", ".", "squeeze", "(", ")", ",", "pred_normal", ",", "hole_depth_to_ref", ")", "\n", "\n", "", "", "", "hole_depth_to_ref", "[", "hole_depth_to_ref", "<", "0", "]", "=", "0", "\n", "\n", "mirror3d_eval_hole", ".", "compute_and_update_mirror3D_metrics", "(", "hole_depth_to_ref", "/", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "color_img_path", ",", "one_input", "[", "0", "]", "[", "\"raw_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"refined_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "mirror3d_eval_sensorD", ".", "compute_and_update_mirror3D_metrics", "(", "cv2", ".", "imread", "(", "hole_raw_depth_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "/", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "color_img_path", ",", "one_input", "[", "0", "]", "[", "\"raw_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"refined_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "if", "self", ".", "cfg", ".", "EVAL_SAVE_DEPTH", ":", "\n", "                ", "mirror3d_eval_hole", ".", "save_result", "(", "hole_depth_to_ref_output_folder", ",", "hole_depth_to_ref", "/", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "color_img_path", ",", "one_input", "[", "0", "]", "[", "\"raw_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"refined_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "\n", "", "if", "mesh_raw_depth_path", "!=", "hole_raw_depth_path", ":", "\n", "                ", "have_mesh_D", "=", "True", "\n", "mesh_depth_to_ref", "[", "mesh_depth_to_ref", "<", "0", "]", "=", "0", "\n", "mirror3d_eval_mesh", ".", "compute_and_update_mirror3D_metrics", "(", "mesh_depth_to_ref", "/", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "color_img_path", ",", "one_input", "[", "0", "]", "[", "\"raw_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"refined_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "mirror3d_eval_meshD", ".", "compute_and_update_mirror3D_metrics", "(", "cv2", ".", "imread", "(", "mesh_raw_depth_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "/", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "color_img_path", ",", "one_input", "[", "0", "]", "[", "\"raw_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"refined_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "if", "self", ".", "cfg", ".", "EVAL_SAVE_DEPTH", ":", "\n", "                    ", "mirror3d_eval_mesh", ".", "save_result", "(", "mesh_depth_to_ref_output_folder", ",", "mesh_depth_to_ref", "/", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "color_img_path", ",", "one_input", "[", "0", "]", "[", "\"raw_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"refined_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "os", ".", "rmdir", "(", "mesh_depth_to_ref_output_folder", ")", "\n", "\n", "", "", "print", "(", "\"############# hole raw depth + Mirror3dNet result #############\"", ")", "\n", "mirror3d_eval_hole", ".", "print_mirror3D_score", "(", ")", "\n", "print", "(", "\"############# hole raw (sensor) depth result #############\"", ")", "\n", "mirror3d_eval_sensorD", ".", "print_mirror3D_score", "(", ")", "\n", "if", "have_mesh_D", ":", "\n", "            ", "print", "(", "\"############# mesh raw depth + Mirror3dNet result #############\"", ")", "\n", "mirror3d_eval_mesh", ".", "print_mirror3D_score", "(", ")", "\n", "print", "(", "\"############# mesh raw (meshD) depth refine result #############\"", ")", "\n", "mirror3d_eval_meshD", ".", "print_mirror3D_score", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.eval_raw_DEbranch_predD": [[238, 272], ["RefineDepth", "Mirror3dEval", "print", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.logger.info", "Mirror3dEval.print_mirror3D_score", "[].detach().cpu().numpy", "cv2.imread", "[].detach().cpu().numpy.astype", "Mirror3dEval.compute_and_update_mirror3D_metrics", "os.path.join", "os.makedirs", "Mirror3dEval.save_result", "[].detach().cpu", "[].detach"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.print_mirror3D_score", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.compute_and_update_mirror3D_metrics", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.save_result"], ["", "", "def", "eval_raw_DEbranch_predD", "(", "self", ",", "output_list", ")", ":", "\n", "\n", "        ", "refine_depth_fun", "=", "RefineDepth", "(", "self", ".", "cfg", ".", "FOCAL_LENGTH", ",", "self", ".", "cfg", ".", "REF_BORDER_WIDTH", ",", "self", ".", "cfg", ".", "EVAL_WIDTH", ",", "self", ".", "cfg", ".", "EVAL_HEIGHT", ")", "\n", "\n", "if", "not", "self", ".", "cfg", ".", "OBJECT_CLS", ":", "\n", "            ", "input_tag", "=", "\"RGB\"", "\n", "method_tag", "=", "\"PlaneRCNN-DE\"", "\n", "", "else", ":", "\n", "            ", "input_tag", "=", "\"RGB\"", "\n", "method_tag", "=", "\"\\mnet-DE\"", "\n", "\n", "", "if", "self", ".", "cfg", ".", "REFINED_DEPTH", ":", "\n", "            ", "train_with_refD", "=", "True", "\n", "", "else", ":", "\n", "            ", "train_with_refD", "=", "False", "\n", "\n", "", "mirror3d_eval", "=", "Mirror3dEval", "(", "dataset_root", "=", "self", ".", "cfg", ".", "VAL_IMG_ROOT", ",", "train_with_ref_d", "=", "train_with_refD", ",", "logger", "=", "self", ".", "logger", ",", "input_tag", "=", "input_tag", ",", "method_tag", "=", "method_tag", ",", "width", "=", "self", ".", "cfg", ".", "EVAL_WIDTH", ",", "height", "=", "self", ".", "cfg", ".", "EVAL_HEIGHT", ",", "dataset", "=", "self", ".", "dataset_name", ")", "\n", "\n", "for", "one_output", ",", "one_input", "in", "output_list", ":", "\n", "            ", "pred_depth", "=", "one_output", "[", "1", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "gt_depth", "=", "cv2", ".", "imread", "(", "one_input", "[", "0", "]", "[", "\"refined_meshD_path\"", "]", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "\n", "np_pred_depth", "=", "pred_depth", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "\n", "mirror3d_eval", ".", "compute_and_update_mirror3D_metrics", "(", "np_pred_depth", "/", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "one_input", "[", "0", "]", "[", "\"mirror_color_image_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"raw_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"refined_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "EVAL_SAVE_DEPTH", ":", "\n", "                ", "raw_branch_output_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "OUTPUT_DIR", ",", "\"DE_branch_pred_depth\"", ")", "\n", "os", ".", "makedirs", "(", "raw_branch_output_folder", ",", "exist_ok", "=", "True", ")", "\n", "mirror3d_eval", ".", "save_result", "(", "raw_branch_output_folder", ",", "np_pred_depth", "/", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "one_input", "[", "0", "]", "[", "\"mirror_color_image_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"raw_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"refined_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "\n", "", "", "print", "(", "\"evaluate DE result for {}\"", ".", "format", "(", "method_tag", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"evaluate DE result for {}\"", ".", "format", "(", "method_tag", ")", ")", "\n", "mirror3d_eval", ".", "print_mirror3D_score", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.refine_DEbranch_predD_and_eval": [[273, 327], ["RefineDepth", "Mirror3dEval", "print", "Mirror3dEval.print_mirror3D_score", "mirror3d_DE_IOU_eval.Mirror3DNet_Eval.cfg.MODEL.WEIGHTS.find", "[].detach().cpu().numpy", "[].detach().cpu().numpy.copy", "[].detach().cpu().numpy.copy", "numpy.load", "enumerate", "np_pred_depth.astype.astype.astype", "RefineDepth.refine_depth_by_mirror_area.astype", "Mirror3dEval.compute_and_update_mirror3D_metrics", "instances.pred_masks[].detach().cpu().numpy", "unit_vector", "os.path.join", "os.makedirs", "Mirror3dEval.save_result", "[].detach().cpu", "RefineDepth.refine_depth_by_mirror_border", "RefineDepth.refine_depth_by_mirror_area", "instances.pred_masks[].detach().cpu", "[].detach", "instances.pred_residuals[].detach().cpu().numpy", "instances.pred_masks[].detach", "instances.pred_residuals[].detach().cpu", "instances.pred_residuals[].detach"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.print_mirror3D_score", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.compute_and_update_mirror3D_metrics", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.unit_vector", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.Mirror3dEval.save_result", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.RefineDepth.refine_depth_by_mirror_border", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.plane_pcd_utils.RefineDepth.refine_depth_by_mirror_area"], ["", "def", "refine_DEbranch_predD_and_eval", "(", "self", ",", "output_list", ")", ":", "\n", "\n", "        ", "refine_depth_fun", "=", "RefineDepth", "(", "self", ".", "cfg", ".", "FOCAL_LENGTH", ",", "self", ".", "cfg", ".", "REF_BORDER_WIDTH", ",", "self", ".", "cfg", ".", "EVAL_WIDTH", ",", "self", ".", "cfg", ".", "EVAL_HEIGHT", ")", "\n", "if", "not", "self", ".", "cfg", ".", "OBJECT_CLS", ":", "\n", "            ", "input_tag", "=", "\"RGB\"", "\n", "method_tag", "=", "\"PlaneRCNN\"", "\n", "", "else", ":", "\n", "            ", "input_tag", "=", "\"RGB\"", "\n", "method_tag", "=", "\"\\mnet\"", "\n", "\n", "", "train_with_refD", "=", "None", "\n", "if", "self", ".", "cfg", ".", "MODEL", ".", "WEIGHTS", ".", "find", "(", "\"ref\"", ")", ">", "0", ":", "\n", "            ", "train_with_refD", "=", "True", "\n", "", "else", ":", "\n", "            ", "train_with_refD", "=", "False", "\n", "", "mirror3d_eval", "=", "Mirror3dEval", "(", "dataset_root", "=", "self", ".", "cfg", ".", "VAL_IMG_ROOT", ",", "train_with_ref_d", "=", "train_with_refD", ",", "logger", "=", "self", ".", "logger", ",", "input_tag", "=", "input_tag", ",", "method_tag", "=", "method_tag", ",", "width", "=", "self", ".", "cfg", ".", "EVAL_WIDTH", ",", "height", "=", "self", ".", "cfg", ".", "EVAL_HEIGHT", ",", "dataset", "=", "self", ".", "dataset_name", ")", "\n", "\n", "for", "one_output", ",", "one_input", "in", "output_list", ":", "\n", "            ", "pred_depth", "=", "one_output", "[", "1", "]", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np_pred_depth", "=", "pred_depth", ".", "copy", "(", ")", "\n", "depth_p", "=", "pred_depth", ".", "copy", "(", ")", "\n", "\n", "\n", "# -------------- refine depth with predict anchor normal ------------", "\n", "instances", "=", "one_output", "[", "0", "]", "[", "0", "]", "[", "\"instances\"", "]", "\n", "anchor_normals", "=", "np", ".", "load", "(", "self", ".", "cfg", ".", "ANCHOR_NORMAL_NYP", ")", "\n", "\n", "for", "instance_idx", ",", "pred_anchor_normal_class", "in", "enumerate", "(", "instances", ".", "pred_anchor_classes", ")", ":", "\n", "                ", "instance_mask", "=", "instances", ".", "pred_masks", "[", "instance_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "pred_anchor_normal_class", ">=", "anchor_normals", ".", "shape", "[", "0", "]", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "cfg", ".", "ANCHOR_REG", ":", "\n", "                        ", "plane_normal", "=", "anchor_normals", "[", "pred_anchor_normal_class", "]", "+", "instances", ".", "pred_residuals", "[", "instance_idx", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                        ", "plane_normal", "=", "anchor_normals", "[", "pred_anchor_normal_class", "]", "\n", "", "", "a", ",", "b", ",", "c", "=", "unit_vector", "(", "plane_normal", ")", "\n", "if", "\"border\"", "in", "self", ".", "cfg", ".", "REF_MODE", ":", "\n", "                    ", "depth_p", "=", "refine_depth_fun", ".", "refine_depth_by_mirror_border", "(", "instance_mask", ",", "[", "a", ",", "b", ",", "c", "]", ",", "pred_depth", ")", "\n", "", "else", ":", "\n", "                    ", "depth_p", "=", "refine_depth_fun", ".", "refine_depth_by_mirror_area", "(", "instance_mask", ",", "[", "a", ",", "b", ",", "c", "]", ",", "pred_depth", ")", "\n", "\n", "", "", "np_pred_depth", "=", "np_pred_depth", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "depth_p", "=", "depth_p", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "mirror3d_eval", ".", "compute_and_update_mirror3D_metrics", "(", "depth_p", "/", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "one_input", "[", "0", "]", "[", "\"mirror_color_image_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"raw_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"refined_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "EVAL_SAVE_DEPTH", ":", "\n", "                ", "refined_DE_branch_output_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "OUTPUT_DIR", ",", "\"refined_DE_branch_pred_depth\"", ")", "\n", "os", ".", "makedirs", "(", "refined_DE_branch_output_folder", ",", "exist_ok", "=", "True", ")", "\n", "mirror3d_eval", ".", "save_result", "(", "refined_DE_branch_output_folder", ",", "depth_p", "/", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "self", ".", "cfg", ".", "DEPTH_SHIFT", ",", "one_input", "[", "0", "]", "[", "\"mirror_color_image_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"raw_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"refined_meshD_path\"", "]", ",", "one_input", "[", "0", "]", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "\n", "", "", "print", "(", "\"eval refined depth from DE branch : {}\"", ".", "format", "(", "method_tag", ")", ")", "\n", "mirror3d_eval", ".", "print_mirror3D_score", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.save_masked_image": [[328, 354], ["os.path.join", "os.makedirs", "print", "os.path.join", "img_path.replace", "os.makedirs", "cv2.imread", "detectron2.utils.visualizer.Visualizer", "v.draw_instance_predictions.draw_instance_predictions.draw_instance_predictions", "cv2.imwrite", "os.path.split", "shutil.copy", "print", "instances.to", "v.draw_instance_predictions.draw_instance_predictions.get_image", "img_path.replace().split", "detectron2.data.MetadataCatalog.get", "img_path.replace"], "methods", ["None"], ["", "def", "save_masked_image", "(", "self", ",", "output_list", ")", ":", "\n", "        ", "import", "shutil", "\n", "masked_img_save_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "OUTPUT_DIR", ",", "\"masked_img\"", ")", "\n", "os", ".", "makedirs", "(", "masked_img_save_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "one_output", ",", "one_input", "in", "output_list", ":", "\n", "            ", "instances", "=", "one_output", "[", "0", "]", "[", "0", "]", "[", "\"instances\"", "]", "\n", "img_path", "=", "one_input", "[", "0", "]", "[", "\"mirror_color_image_path\"", "]", "\n", "color_img_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "VAL_IMG_ROOT", ",", "img_path", ".", "replace", "(", "self", ".", "cfg", ".", "VAL_IMG_ROOT", ",", "\"\"", ")", ".", "split", "(", "\"/\"", ")", "[", "1", "]", ")", "\n", "masked_img_save_path", "=", "img_path", ".", "replace", "(", "color_img_folder", ",", "masked_img_save_folder", ")", "\n", "masked_img_save_sub_folder", "=", "os", ".", "path", ".", "split", "(", "masked_img_save_path", ")", "[", "0", "]", "\n", "os", ".", "makedirs", "(", "masked_img_save_sub_folder", ",", "exist_ok", "=", "True", ")", "\n", "if", "instances", ".", "pred_boxes", ".", "tensor", ".", "shape", "[", "0", "]", "<=", "0", ":", "\n", "                ", "shutil", ".", "copy", "(", "img_path", ",", "masked_img_save_path", ")", "\n", "print", "(", "\"######## no detection :\"", ",", "img_path", ")", "\n", "continue", "\n", "", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "v", "=", "Visualizer", "(", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ",", "\n", "metadata", "=", "MetadataCatalog", ".", "get", "(", "\"test_10_precise_normal_mirror\"", ")", ",", "\n", "scale", "=", "0.5", ",", "\n", "instance_mode", "=", "ColorMode", ".", "IMAGE_BW", "\n", ")", "\n", "v", "=", "v", ".", "draw_instance_predictions", "(", "instances", ".", "to", "(", "\"cpu\"", ")", ")", "\n", "output_img", "=", "v", ".", "get_image", "(", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "cv2", ".", "imwrite", "(", "masked_img_save_path", ",", "output_img", ")", "\n", "", "print", "(", "\"masked image saved to : \"", ",", "masked_img_save_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_DE_IOU_eval.Mirror3DNet_Eval.eval_seg": [[356, 385], ["MirrorSegEval", "enumerate", "MirrorSegEval.print_seg_score", "MirrorSegEval.get_results", "numpy.mean", "cv2.imread", "numpy.zeros_like", "pred_mask.numpy().astype.numpy().astype.astype", "instances.to().has", "MirrorSegEval.compute_and_update_seg_metrics", "detectron2.utils.events.get_event_storage", "detectron2.utils.events.get_event_storage.put_scalar", "detectron2.utils.events.get_event_storage.put_scalar", "detectron2.utils.events.get_event_storage.put_scalar", "numpy.mean", "numpy.mean", "numpy.mean", "os.path.exists", "instances.to", "instances.to", "numpy.logical_or", "pred_mask.numpy().astype.numpy().astype.numpy().astype", "pred_mask.numpy().astype.numpy().astype.numpy"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.MirrorSegEval.print_seg_score", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.MirrorSegEval.get_results", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.mirror3d_metrics.MirrorSegEval.compute_and_update_seg_metrics"], ["", "def", "eval_seg", "(", "self", ",", "output_list", ")", ":", "\n", "\n", "        ", "eval_seg_fun", "=", "MirrorSegEval", "(", "self", ".", "cfg", ".", "EVAL_WIDTH", ",", "self", ".", "cfg", ".", "EVAL_HEIGHT", ")", "\n", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "output_list", ")", ":", "\n", "            ", "one_output", ",", "one_input", "=", "item", "\n", "instances", "=", "one_output", "[", "0", "]", "[", "0", "]", "[", "\"instances\"", "]", "\n", "mask_path", "=", "one_input", "[", "0", "]", "[", "\"mirror_instance_mask_path\"", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "mask_path", ")", "or", "\"no_mirror\"", "in", "one_input", "[", "0", "]", "[", "\"mirror_color_image_path\"", "]", ":", "\n", "                ", "continue", "\n", "", "GT_mask", "=", "cv2", ".", "imread", "(", "mask_path", ",", "cv2", ".", "IMREAD_ANYDEPTH", ")", "\n", "GT_mask", "=", "GT_mask", ">", "0", "\n", "pred_mask", "=", "np", ".", "zeros_like", "(", "GT_mask", ")", "\n", "pred_mask", "=", "pred_mask", ".", "astype", "(", "bool", ")", "\n", "if", "instances", ".", "to", "(", "\"cpu\"", ")", ".", "has", "(", "\"pred_masks\"", ")", ":", "\n", "                ", "for", "one_pred_mask", "in", "instances", ".", "to", "(", "\"cpu\"", ")", ".", "pred_masks", ":", "\n", "                    ", "pred_mask", "=", "np", ".", "logical_or", "(", "pred_mask", ",", "one_pred_mask", ")", "\n", "pred_mask", "=", "pred_mask", ".", "numpy", "(", ")", ".", "astype", "(", "bool", ")", "\n", "\n", "", "", "eval_seg_fun", ".", "compute_and_update_seg_metrics", "(", "pred_mask", ",", "GT_mask", ")", "\n", "\n", "", "eval_seg_fun", ".", "print_seg_score", "(", ")", "\n", "IOU_list", ",", "f_measure_list", ",", "MAE_list", "=", "eval_seg_fun", ".", "get_results", "(", ")", "\n", "self", ".", "mean_IOU", "=", "np", ".", "mean", "(", "IOU_list", ")", "\n", "if", "not", "self", ".", "cfg", ".", "EVAL", ":", "\n", "            ", "storage", "=", "get_event_storage", "(", ")", "\n", "storage", ".", "put_scalar", "(", "\"mean IOU\"", ",", "np", ".", "mean", "(", "IOU_list", ")", ")", "\n", "storage", ".", "put_scalar", "(", "\"mean f measure\"", ",", "np", ".", "mean", "(", "f_measure_list", ")", ")", "\n", "storage", ".", "put_scalar", "(", "\"mean MAE\"", ",", "np", ".", "mean", "(", "MAE_list", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator.__init__": [[36, 85], ["mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._tasks_from_config", "torch.device", "logging.getLogger", "detectron2.data.MetadataCatalog.get", "fvcore.common.file_io.PathManager.get_local_path", "hasattr", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._logger.warning", "os.path.join", "detectron2.data.datasets.coco.convert_to_coco_json", "contextlib.redirect_stdout", "mirror3d_coco.mirror3d_COCO", "io.StringIO"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._tasks_from_config", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.meta_arch.rcnn.Mirror3d_GeneralizedRCNN.device"], ["def", "__init__", "(", "self", ",", "dataset_name", ",", "cfg", ",", "distributed", ",", "output_dir", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            dataset_name (str): name of the dataset to be evaluated.\n                It must have either the following corresponding metadata:\n\n                    \"json_file\": the path to the COCO format annotation\n\n                Or it must be in detectron2's standard dataset format\n                so it can be converted to COCO format automatically.\n            cfg (CfgNode): config instance\n            distributed (True): if True, will collect results from all ranks and run evaluation\n                in the main process.\n                Otherwise, will evaluate the results in the current process.\n            output_dir (str): optional, an output directory to dump all\n                results predicted on the dataset. The dump contains two files:\n\n                1. \"instance_predictions.pth\" a file in torch serialization\n                   format that contains all the raw original predictions.\n                2. \"coco_instances_results.json\" a json file in COCO's result\n                   format.\n        \"\"\"", "\n", "self", ".", "_tasks", "=", "self", ".", "_tasks_from_config", "(", "cfg", ")", "\n", "self", ".", "_distributed", "=", "distributed", "\n", "self", ".", "_output_dir", "=", "output_dir", "\n", "\n", "self", ".", "_cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "self", ".", "_logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "self", ".", "_metadata", "=", "MetadataCatalog", ".", "get", "(", "dataset_name", ")", "\n", "if", "not", "hasattr", "(", "self", ".", "_metadata", ",", "\"json_file\"", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "warning", "(", "\n", "f\"json_file was not found in MetaDataCatalog for '{dataset_name}'.\"", "\n", "\" Trying to convert it to COCO format ...\"", "\n", ")", "\n", "\n", "cache_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "f\"{dataset_name}_coco_format.json\"", ")", "\n", "self", ".", "_metadata", ".", "json_file", "=", "cache_path", "\n", "convert_to_coco_json", "(", "dataset_name", ",", "cache_path", ")", "\n", "\n", "", "json_file", "=", "PathManager", ".", "get_local_path", "(", "self", ".", "_metadata", ".", "json_file", ")", "\n", "with", "contextlib", ".", "redirect_stdout", "(", "io", ".", "StringIO", "(", ")", ")", ":", "\n", "            ", "self", ".", "_coco_api", "=", "mirror3d_COCO", "(", "json_file", ")", "\n", "\n", "", "self", ".", "_kpt_oks_sigmas", "=", "cfg", ".", "TEST", ".", "KEYPOINT_OKS_SIGMAS", "\n", "# Test set json files do not contain annotations (evaluation must be", "\n", "# performed using the COCO evaluation server).", "\n", "self", ".", "_do_evaluation", "=", "\"annotations\"", "in", "self", ".", "_coco_api", ".", "dataset", "\n", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator.reset": [[87, 89], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_predictions", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._tasks_from_config": [[90, 101], ["None"], "methods", ["None"], ["", "def", "_tasks_from_config", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            tuple[str]: tasks that can be evaluated under the given configuration.\n        \"\"\"", "\n", "tasks", "=", "(", "\"bbox\"", ",", ")", "\n", "if", "cfg", ".", "MODEL", ".", "MASK_ON", ":", "\n", "            ", "tasks", "=", "tasks", "+", "(", "\"segm\"", ",", ")", "\n", "", "if", "cfg", ".", "MODEL", ".", "KEYPOINT_ON", ":", "\n", "            ", "tasks", "=", "tasks", "+", "(", "\"keypoints\"", ",", ")", "\n", "", "return", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator.process": [[102, 123], ["zip", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._predictions.append", "output[].to", "mirror3d_AP_evaluation.instances_to_coco_json", "output[].to"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.instances_to_coco_json"], ["", "def", "process", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            inputs: the inputs to a COCO model (e.g., GeneralizedRCNN).\n                It is a list of dict. Each dict corresponds to an image and\n                contains keys like \"height\", \"width\", \"file_name\", \"image_id\".\n            outputs: the outputs of a COCO model. It is a list of dicts with key\n                \"instances\" that contains :class:`Instances`.\n        \"\"\"", "\n", "for", "input", ",", "one_output", "in", "zip", "(", "inputs", ",", "outputs", ")", ":", "\n", "# according to changes in rcnn.py inference() : ", "\n", "# outputs[0] --> pred instances ; output[1] --> pred depth", "\n", "            ", "output", "=", "one_output", "[", "0", "]", "\n", "prediction", "=", "{", "\"image_id\"", ":", "input", "[", "\"image_id\"", "]", "}", "\n", "\n", "if", "\"instances\"", "in", "output", ":", "\n", "                ", "instances", "=", "output", "[", "\"instances\"", "]", ".", "to", "(", "self", ".", "_cpu_device", ")", "\n", "prediction", "[", "\"instances\"", "]", "=", "instances_to_coco_json", "(", "instances", ",", "input", "[", "\"image_id\"", "]", ")", "\n", "", "if", "\"proposals\"", "in", "output", ":", "\n", "                ", "prediction", "[", "\"proposals\"", "]", "=", "output", "[", "\"proposals\"", "]", ".", "to", "(", "self", ".", "_cpu_device", ")", "\n", "", "self", ".", "_predictions", ".", "append", "(", "prediction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator.evaluate": [[124, 154], ["collections.OrderedDict", "copy.deepcopy", "detectron2.synchronize", "detectron2.gather", "list", "len", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._logger.warning", "fvcore.common.file_io.PathManager.mkdirs", "os.path.join", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._eval_box_proposals", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._eval_predictions", "itertools.chain", "detectron2.is_main_process", "fvcore.common.file_io.PathManager.open", "torch.save", "set"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._eval_box_proposals", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._eval_predictions"], ["", "", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_distributed", ":", "\n", "            ", "comm", ".", "synchronize", "(", ")", "\n", "predictions", "=", "comm", ".", "gather", "(", "self", ".", "_predictions", ",", "dst", "=", "0", ")", "\n", "predictions", "=", "list", "(", "itertools", ".", "chain", "(", "*", "predictions", ")", ")", "\n", "\n", "if", "not", "comm", ".", "is_main_process", "(", ")", ":", "\n", "                ", "return", "{", "}", "\n", "", "", "else", ":", "\n", "            ", "predictions", "=", "self", ".", "_predictions", "\n", "\n", "", "if", "len", "(", "predictions", ")", "==", "0", ":", "\n", "            ", "self", ".", "_logger", ".", "warning", "(", "\"[COCOEvaluator] Did not receive valid predictions.\"", ")", "\n", "return", "{", "}", "\n", "\n", "# save current evalution .pth file", "\n", "", "if", "self", ".", "_output_dir", ":", "\n", "            ", "PathManager", ".", "mkdirs", "(", "self", ".", "_output_dir", ")", "\n", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_output_dir", ",", "\"instances_predictions.pth\"", ")", "\n", "with", "PathManager", ".", "open", "(", "file_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "torch", ".", "save", "(", "predictions", ",", "f", ")", "\n", "\n", "", "", "self", ".", "_results", "=", "OrderedDict", "(", ")", "\n", "if", "\"proposals\"", "in", "predictions", "[", "0", "]", ":", "\n", "            ", "self", ".", "_eval_box_proposals", "(", "predictions", ")", "\n", "", "if", "\"instances\"", "in", "predictions", "[", "0", "]", ":", "\n", "            ", "self", ".", "_eval_predictions", "(", "set", "(", "self", ".", "_tasks", ")", ",", "predictions", ")", "\n", "# Copy so the caller can do whatever with results", "\n", "\n", "", "return", "copy", ".", "deepcopy", "(", "self", ".", "_results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._eval_predictions": [[155, 196], ["mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._logger.info", "list", "hasattr", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._logger.info", "sorted", "itertools.chain", "os.path.join", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._logger.info", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._logger.info", "fvcore.common.file_io.PathManager.open", "f.write", "f.flush", "mirror3d_AP_evaluation._evaluate_predictions_on_coco", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._metadata.thing_dataset_id_to_contiguous_id.items", "json.dumps", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation._evaluate_predictions_on_coco"], ["", "def", "_eval_predictions", "(", "self", ",", "tasks", ",", "predictions", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate predictions on the given tasks.\n        Fill self._results with the metrics of the tasks.\n        \"\"\"", "\n", "self", ".", "_logger", ".", "info", "(", "\"Preparing results for COCO format ...\"", ")", "\n", "coco_results", "=", "list", "(", "itertools", ".", "chain", "(", "*", "[", "x", "[", "\"instances\"", "]", "for", "x", "in", "predictions", "]", ")", ")", "\n", "\n", "# unmap the category ids for COCO", "\n", "if", "hasattr", "(", "self", ".", "_metadata", ",", "\"thing_dataset_id_to_contiguous_id\"", ")", ":", "\n", "            ", "reverse_id_mapping", "=", "{", "\n", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "_metadata", ".", "thing_dataset_id_to_contiguous_id", ".", "items", "(", ")", "\n", "}", "\n", "for", "result", "in", "coco_results", ":", "\n", "                ", "category_id", "=", "result", "[", "\"category_id\"", "]", "\n", "assert", "(", "\n", "category_id", "in", "reverse_id_mapping", "\n", ")", ",", "\"A prediction has category_id={}, which is not available in the dataset.\"", ".", "format", "(", "\n", "category_id", "\n", ")", "\n", "result", "[", "\"category_id\"", "]", "=", "reverse_id_mapping", "[", "category_id", "]", "\n", "\n", "", "", "if", "self", ".", "_output_dir", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "_output_dir", ",", "\"coco_instances_results.json\"", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Saving results to {}\"", ".", "format", "(", "file_path", ")", ")", "\n", "with", "PathManager", ".", "open", "(", "file_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "coco_results", ")", ")", "\n", "f", ".", "flush", "(", ")", "\n", "\n", "", "", "if", "not", "self", ".", "_do_evaluation", ":", "\n", "            ", "self", ".", "_logger", ".", "info", "(", "\"Annotations are not available for evaluation.\"", ")", "\n", "return", "\n", "\n", "", "self", ".", "_logger", ".", "info", "(", "\"Evaluating predictions ...\"", ")", "\n", "for", "task", "in", "sorted", "(", "tasks", ")", ":", "\n", "            ", "coco_eval", "=", "(", "\n", "_evaluate_predictions_on_coco", "(", "\n", "self", ".", "_coco_api", ",", "coco_results", ",", "task", ",", "kpt_oks_sigmas", "=", "self", ".", "_kpt_oks_sigmas", ",", "cfg", "=", "self", ".", "cfg", "\n", ")", "\n", "if", "len", "(", "coco_results", ")", ">", "0", "\n", "else", "None", "# cocoapi does not handle empty results very well", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._eval_box_proposals": [[198, 236], ["mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._logger.info", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._logger.info", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._logger.info", "areas.items", "ids.append", "boxes.append", "objectness_logits.append", "fvcore.common.file_io.PathManager.open", "pickle.dump", "mirror3d_AP_evaluation._evaluate_box_proposals", "float", "detectron2.utils.logger.create_small_table", "prediction[].proposal_boxes.tensor.numpy", "prediction[].objectness_logits.numpy", "os.path.join", "stats[].item"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation._evaluate_box_proposals"], ["", "", "def", "_eval_box_proposals", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate the box proposals in predictions.\n        Fill self._results with the metrics for \"box_proposals\" task.\n        \"\"\"", "\n", "if", "self", ".", "_output_dir", ":", "\n", "# Saving generated box proposals to file.", "\n", "# Predicted box_proposals are in XYXY_ABS mode.", "\n", "            ", "bbox_mode", "=", "BoxMode", ".", "XYXY_ABS", ".", "value", "\n", "ids", ",", "boxes", ",", "objectness_logits", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "prediction", "in", "predictions", ":", "\n", "                ", "ids", ".", "append", "(", "prediction", "[", "\"image_id\"", "]", ")", "\n", "boxes", ".", "append", "(", "prediction", "[", "\"proposals\"", "]", ".", "proposal_boxes", ".", "tensor", ".", "numpy", "(", ")", ")", "\n", "objectness_logits", ".", "append", "(", "prediction", "[", "\"proposals\"", "]", ".", "objectness_logits", ".", "numpy", "(", ")", ")", "\n", "\n", "", "proposal_data", "=", "{", "\n", "\"boxes\"", ":", "boxes", ",", "\n", "\"objectness_logits\"", ":", "objectness_logits", ",", "\n", "\"ids\"", ":", "ids", ",", "\n", "\"bbox_mode\"", ":", "bbox_mode", ",", "\n", "}", "\n", "with", "PathManager", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_output_dir", ",", "\"box_proposals.pkl\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "proposal_data", ",", "f", ")", "\n", "\n", "", "", "if", "not", "self", ".", "_do_evaluation", ":", "\n", "            ", "self", ".", "_logger", ".", "info", "(", "\"Annotations are not available for evaluation.\"", ")", "\n", "return", "\n", "\n", "", "self", ".", "_logger", ".", "info", "(", "\"Evaluating bbox proposals ...\"", ")", "\n", "res", "=", "{", "}", "\n", "areas", "=", "{", "\"all\"", ":", "\"\"", ",", "\"small\"", ":", "\"s\"", ",", "\"medium\"", ":", "\"m\"", ",", "\"large\"", ":", "\"l\"", "}", "\n", "for", "limit", "in", "[", "100", ",", "1000", "]", ":", "\n", "            ", "for", "area", ",", "suffix", "in", "areas", ".", "items", "(", ")", ":", "\n", "                ", "stats", "=", "_evaluate_box_proposals", "(", "predictions", ",", "self", ".", "_coco_api", ",", "area", "=", "area", ",", "limit", "=", "limit", ")", "\n", "key", "=", "\"AR{}@{:d}\"", ".", "format", "(", "suffix", ",", "limit", ")", "\n", "res", "[", "key", "]", "=", "float", "(", "stats", "[", "\"ar\"", "]", ".", "item", "(", ")", "*", "100", ")", "\n", "", "", "self", ".", "_logger", ".", "info", "(", "\"Proposal metrics: \\n\"", "+", "create_small_table", "(", "res", ")", ")", "\n", "self", ".", "_results", "[", "\"box_proposals\"", "]", "=", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._derive_coco_results": [[237, 304], ["mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._logger.info", "enumerate", "min", "list", "itertools.zip_longest", "tabulate.tabulate.tabulate", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._logger.info", "results.update", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._logger.warn", "float", "numpy.isfinite", "mirror3d_AP_evaluation.Mirror3D_AP_Evaluator._logger.info", "len", "results_per_category.append", "itertools.chain", "float", "enumerate", "detectron2.utils.logger.create_small_table", "sum", "len", "numpy.mean", "float", "len", "results.values", "float", "range"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info"], ["", "def", "_derive_coco_results", "(", "self", ",", "coco_eval", ",", "iou_type", ",", "class_names", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Derive the desired score numbers from summarized COCOeval.\n\n        Args:\n            coco_eval (None or COCOEval): None represents no predictions from model.\n            iou_type (str):\n            class_names (None or list[str]): if provided, will use it to predict\n                per-category AP.\n\n        Returns:\n            a dict of {metric name: score}\n        \"\"\"", "\n", "\n", "metrics", "=", "{", "\n", "\"bbox\"", ":", "[", "\"AP\"", ",", "\"AP50\"", ",", "\"AP75\"", ",", "\"APs\"", ",", "\"APm\"", ",", "\"APl\"", "]", ",", "\n", "\"segm\"", ":", "[", "\"AP\"", ",", "\"AP50\"", ",", "\"AP75\"", ",", "\"APs\"", ",", "\"APm\"", ",", "\"APl\"", "]", ",", "\n", "\"keypoints\"", ":", "[", "\"AP\"", ",", "\"AP50\"", ",", "\"AP75\"", ",", "\"APm\"", ",", "\"APl\"", "]", ",", "\n", "}", "[", "iou_type", "]", "\n", "\n", "if", "coco_eval", "is", "None", ":", "\n", "            ", "self", ".", "_logger", ".", "warn", "(", "\"No predictions from the model!\"", ")", "\n", "return", "{", "metric", ":", "float", "(", "\"nan\"", ")", "for", "metric", "in", "metrics", "}", "\n", "\n", "# the standard metrics", "\n", "", "results", "=", "{", "\n", "metric", ":", "float", "(", "coco_eval", ".", "stats", "[", "idx", "]", "*", "100", "if", "coco_eval", ".", "stats", "[", "idx", "]", ">=", "0", "else", "\"nan\"", ")", "\n", "for", "idx", ",", "metric", "in", "enumerate", "(", "metrics", ")", "\n", "}", "\n", "self", ".", "_logger", ".", "info", "(", "\n", "\"Evaluation results for {}: \\n\"", ".", "format", "(", "iou_type", ")", "+", "create_small_table", "(", "results", ")", "\n", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "sum", "(", "results", ".", "values", "(", ")", ")", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "info", "(", "\"Note that some metrics cannot be computed.\"", ")", "\n", "\n", "", "if", "class_names", "is", "None", "or", "len", "(", "class_names", ")", "<=", "1", ":", "\n", "            ", "return", "results", "\n", "# Compute per-category AP", "\n", "# from https://github.com/facebookresearch/Detectron/blob/a6a835f5b8208c45d0dce217ce9bbda915f44df7/detectron/datasets/json_dataset_evaluator.py#L222-L252 # noqa", "\n", "", "precisions", "=", "coco_eval", ".", "eval", "[", "\"precision\"", "]", "\n", "# precision has dims (iou, recall, cls, area range, max dets)", "\n", "assert", "len", "(", "class_names", ")", "==", "precisions", ".", "shape", "[", "2", "]", "\n", "\n", "results_per_category", "=", "[", "]", "\n", "for", "idx", ",", "name", "in", "enumerate", "(", "class_names", ")", ":", "\n", "# area range index 0: all area ranges", "\n", "# max dets index -1: typically 100 per image", "\n", "            ", "precision", "=", "precisions", "[", ":", ",", ":", ",", "idx", ",", "0", ",", "-", "1", "]", "\n", "precision", "=", "precision", "[", "precision", ">", "-", "1", "]", "\n", "ap", "=", "np", ".", "mean", "(", "precision", ")", "if", "precision", ".", "size", "else", "float", "(", "\"nan\"", ")", "\n", "results_per_category", ".", "append", "(", "(", "\"{}\"", ".", "format", "(", "name", ")", ",", "float", "(", "ap", "*", "100", ")", ")", ")", "\n", "\n", "# tabulate it", "\n", "", "N_COLS", "=", "min", "(", "6", ",", "len", "(", "results_per_category", ")", "*", "2", ")", "\n", "results_flatten", "=", "list", "(", "itertools", ".", "chain", "(", "*", "results_per_category", ")", ")", "\n", "results_2d", "=", "itertools", ".", "zip_longest", "(", "*", "[", "results_flatten", "[", "i", ":", ":", "N_COLS", "]", "for", "i", "in", "range", "(", "N_COLS", ")", "]", ")", "\n", "table", "=", "tabulate", "(", "\n", "results_2d", ",", "\n", "tablefmt", "=", "\"pipe\"", ",", "\n", "floatfmt", "=", "\".3f\"", ",", "\n", "headers", "=", "[", "\"category\"", ",", "\"AP\"", "]", "*", "(", "N_COLS", "//", "2", ")", ",", "\n", "numalign", "=", "\"left\"", ",", "\n", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Per-category {} AP: \\n\"", ".", "format", "(", "iou_type", ")", "+", "table", ")", "\n", "\n", "results", ".", "update", "(", "{", "\"AP-\"", "+", "name", ":", "ap", "for", "name", ",", "ap", "in", "results_per_category", "}", ")", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.instances_to_coco_json": [[306, 375], ["len", "instances.pred_boxes.tensor.numpy", "detectron2.structures.BoxMode.convert", "boxes.tolist.tolist", "instances.scores.tolist", "instances.pred_classes.tolist", "instances.pred_anchor_classes.tolist", "instances.pred_residuals.tolist", "instances.anchor_scores.tolist", "instances.has", "instances.has", "range", "results.append", "rle[].decode", "keypoints[].flatten().tolist", "pycocotools.encode", "numpy.array", "keypoints[].flatten"], "function", ["None"], ["", "", "def", "instances_to_coco_json", "(", "instances", ",", "img_id", ")", ":", "\n", "    ", "\"\"\"\n    Dump an \"Instances\" object to a COCO-format json that's used for evaluation.\n\n    Args:\n        instances (Instances):\n        img_id (int): the image id\n\n    Returns:\n        list[dict]: list of json annotations in COCO format.\n    \"\"\"", "\n", "num_instance", "=", "len", "(", "instances", ")", "\n", "if", "num_instance", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "boxes", "=", "instances", ".", "pred_boxes", ".", "tensor", ".", "numpy", "(", ")", "\n", "boxes", "=", "BoxMode", ".", "convert", "(", "boxes", ",", "BoxMode", ".", "XYXY_ABS", ",", "BoxMode", ".", "XYWH_ABS", ")", "\n", "boxes", "=", "boxes", ".", "tolist", "(", ")", "\n", "scores", "=", "instances", ".", "scores", ".", "tolist", "(", ")", "\n", "classes", "=", "instances", ".", "pred_classes", ".", "tolist", "(", ")", "\n", "pred_anchor_classes", "=", "instances", ".", "pred_anchor_classes", ".", "tolist", "(", ")", "\n", "pred_residuals", "=", "instances", ".", "pred_residuals", ".", "tolist", "(", ")", "\n", "anchor_scores", "=", "instances", ".", "anchor_scores", ".", "tolist", "(", ")", "\n", "\n", "\n", "\n", "has_mask", "=", "instances", ".", "has", "(", "\"pred_masks\"", ")", "\n", "if", "has_mask", ":", "\n", "# use RLE to encode the masks, because they are too large and takes memory", "\n", "# since this evaluator stores outputs of the entire dataset", "\n", "        ", "rles", "=", "[", "\n", "mask_util", ".", "encode", "(", "np", ".", "array", "(", "mask", "[", ":", ",", ":", ",", "None", "]", ",", "order", "=", "\"F\"", ",", "dtype", "=", "\"uint8\"", ")", ")", "[", "0", "]", "\n", "for", "mask", "in", "instances", ".", "pred_masks", "\n", "]", "\n", "for", "rle", "in", "rles", ":", "\n", "# \"counts\" is an array encoded by mask_util as a byte-stream. Python3's", "\n", "# json writer which always produces strings cannot serialize a bytestream", "\n", "# unless you decode it. Thankfully, utf-8 works out (which is also what", "\n", "# the pycocotools/_mask.pyx does).", "\n", "            ", "rle", "[", "\"counts\"", "]", "=", "rle", "[", "\"counts\"", "]", ".", "decode", "(", "\"utf-8\"", ")", "\n", "\n", "", "", "has_keypoints", "=", "instances", ".", "has", "(", "\"pred_keypoints\"", ")", "\n", "if", "has_keypoints", ":", "\n", "        ", "keypoints", "=", "instances", ".", "pred_keypoints", "\n", "\n", "", "results", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_instance", ")", ":", "\n", "        ", "result", "=", "{", "\n", "\"image_id\"", ":", "img_id", ",", "\n", "\"category_id\"", ":", "classes", "[", "k", "]", ",", "\n", "\"bbox\"", ":", "boxes", "[", "k", "]", ",", "\n", "\"score\"", ":", "scores", "[", "k", "]", ",", "\n", "\"anchor_normal_residual\"", ":", "pred_residuals", "[", "k", "]", ",", "\n", "\"anchor_normal_class\"", ":", "pred_anchor_classes", "[", "k", "]", ",", "\n", "\"anchor_score\"", ":", "anchor_scores", "[", "k", "]", ",", "\n", "# \"DEPTH_ESTs\":DEPTH_ESTs,", "\n", "}", "\n", "if", "has_mask", ":", "\n", "            ", "result", "[", "\"segmentation\"", "]", "=", "rles", "[", "k", "]", "\n", "", "if", "has_keypoints", ":", "\n", "# In COCO annotations,", "\n", "# keypoints coordinates are pixel indices.", "\n", "# However our predictions are floating point coordinates.", "\n", "# Therefore we subtract 0.5 to be consistent with the annotation format.", "\n", "# This is the inverse of data loading logic in `datasets/coco.py`.", "\n", "            ", "keypoints", "[", "k", "]", "[", ":", ",", ":", "2", "]", "-=", "0.5", "\n", "result", "[", "\"keypoints\"", "]", "=", "keypoints", "[", "k", "]", ".", "flatten", "(", ")", ".", "tolist", "(", ")", "\n", "", "results", ".", "append", "(", "result", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation._evaluate_box_proposals": [[379, 486], ["torch.sort", "torch.zeros_like", "enumerate", "torch.zeros_like.mean", "coco_api.getAnnIds", "coco_api.loadAnns", "torch.as_tensor().reshape", "detectron2.structures.Boxes", "torch.as_tensor", "len", "detectron2.structures.pairwise_iou", "torch.zeros", "range", "gt_overlaps.append", "len", "torch.cat", "torch.zeros", "torch.arange", "predictions.objectness_logits.sort", "detectron2.structures.BoxMode.convert", "len", "len", "min", "detectron2.structures.pairwise_iou.max", "max_overlaps.max", "float", "torch.as_tensor", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.getAnnIds", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadAnns"], ["", "def", "_evaluate_box_proposals", "(", "dataset_predictions", ",", "coco_api", ",", "thresholds", "=", "None", ",", "area", "=", "\"all\"", ",", "limit", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate detection proposal recall metrics. This function is a much\n    faster alternative to the official COCO API recall evaluation code. However,\n    it produces slightly different results.\n    \"\"\"", "\n", "# Record max overlap value for each gt box", "\n", "# Return vector of overlap values", "\n", "areas", "=", "{", "\n", "\"all\"", ":", "0", ",", "\n", "\"small\"", ":", "1", ",", "\n", "\"medium\"", ":", "2", ",", "\n", "\"large\"", ":", "3", ",", "\n", "\"96-128\"", ":", "4", ",", "\n", "\"128-256\"", ":", "5", ",", "\n", "\"256-512\"", ":", "6", ",", "\n", "\"512-inf\"", ":", "7", ",", "\n", "}", "\n", "area_ranges", "=", "[", "\n", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "# all", "\n", "[", "0", "**", "2", ",", "32", "**", "2", "]", ",", "# small", "\n", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "# medium", "\n", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", ",", "# large", "\n", "[", "96", "**", "2", ",", "128", "**", "2", "]", ",", "# 96-128", "\n", "[", "128", "**", "2", ",", "256", "**", "2", "]", ",", "# 128-256", "\n", "[", "256", "**", "2", ",", "512", "**", "2", "]", ",", "# 256-512", "\n", "[", "512", "**", "2", ",", "1e5", "**", "2", "]", ",", "\n", "]", "# 512-inf", "\n", "assert", "area", "in", "areas", ",", "\"Unknown area range: {}\"", ".", "format", "(", "area", ")", "\n", "area_range", "=", "area_ranges", "[", "areas", "[", "area", "]", "]", "\n", "gt_overlaps", "=", "[", "]", "\n", "num_pos", "=", "0", "\n", "\n", "for", "prediction_dict", "in", "dataset_predictions", ":", "\n", "        ", "predictions", "=", "prediction_dict", "[", "\"proposals\"", "]", "\n", "\n", "# sort predictions in descending order", "\n", "inds", "=", "predictions", ".", "objectness_logits", ".", "sort", "(", "descending", "=", "True", ")", "[", "1", "]", "\n", "predictions", "=", "predictions", "[", "inds", "]", "\n", "\n", "ann_ids", "=", "coco_api", ".", "getAnnIds", "(", "imgIds", "=", "prediction_dict", "[", "\"image_id\"", "]", ")", "\n", "anno", "=", "coco_api", ".", "loadAnns", "(", "ann_ids", ")", "\n", "gt_boxes", "=", "[", "\n", "BoxMode", ".", "convert", "(", "obj", "[", "\"bbox\"", "]", ",", "BoxMode", ".", "XYWH_ABS", ",", "BoxMode", ".", "XYXY_ABS", ")", "\n", "for", "obj", "in", "anno", "\n", "if", "obj", "[", "\"iscrowd\"", "]", "==", "0", "\n", "]", "\n", "gt_boxes", "=", "torch", ".", "as_tensor", "(", "gt_boxes", ")", ".", "reshape", "(", "-", "1", ",", "4", ")", "# guard against no boxes", "\n", "gt_boxes", "=", "Boxes", "(", "gt_boxes", ")", "\n", "gt_areas", "=", "torch", ".", "as_tensor", "(", "[", "obj", "[", "\"area\"", "]", "for", "obj", "in", "anno", "if", "obj", "[", "\"iscrowd\"", "]", "==", "0", "]", ")", "\n", "\n", "if", "len", "(", "gt_boxes", ")", "==", "0", "or", "len", "(", "predictions", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "valid_gt_inds", "=", "(", "gt_areas", ">=", "area_range", "[", "0", "]", ")", "&", "(", "gt_areas", "<=", "area_range", "[", "1", "]", ")", "\n", "gt_boxes", "=", "gt_boxes", "[", "valid_gt_inds", "]", "\n", "\n", "num_pos", "+=", "len", "(", "gt_boxes", ")", "\n", "\n", "if", "len", "(", "gt_boxes", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "limit", "is", "not", "None", "and", "len", "(", "predictions", ")", ">", "limit", ":", "\n", "            ", "predictions", "=", "predictions", "[", ":", "limit", "]", "\n", "\n", "", "overlaps", "=", "pairwise_iou", "(", "predictions", ".", "proposal_boxes", ",", "gt_boxes", ")", "\n", "\n", "_gt_overlaps", "=", "torch", ".", "zeros", "(", "len", "(", "gt_boxes", ")", ")", "\n", "for", "j", "in", "range", "(", "min", "(", "len", "(", "predictions", ")", ",", "len", "(", "gt_boxes", ")", ")", ")", ":", "\n", "# find which proposal box maximally covers each gt box", "\n", "# and get the iou amount of coverage for each gt box", "\n", "            ", "max_overlaps", ",", "argmax_overlaps", "=", "overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "\n", "# find which gt box is 'best' covered (i.e. 'best' = most iou)", "\n", "gt_ovr", ",", "gt_ind", "=", "max_overlaps", ".", "max", "(", "dim", "=", "0", ")", "\n", "assert", "gt_ovr", ">=", "0", "\n", "# find the proposal box that covers the best covered gt box", "\n", "box_ind", "=", "argmax_overlaps", "[", "gt_ind", "]", "\n", "# record the iou coverage of this gt box", "\n", "_gt_overlaps", "[", "j", "]", "=", "overlaps", "[", "box_ind", ",", "gt_ind", "]", "\n", "assert", "_gt_overlaps", "[", "j", "]", "==", "gt_ovr", "\n", "# mark the proposal box and the gt box as used", "\n", "overlaps", "[", "box_ind", ",", ":", "]", "=", "-", "1", "\n", "overlaps", "[", ":", ",", "gt_ind", "]", "=", "-", "1", "\n", "\n", "# append recorded iou coverage level", "\n", "", "gt_overlaps", ".", "append", "(", "_gt_overlaps", ")", "\n", "", "gt_overlaps", "=", "(", "\n", "torch", ".", "cat", "(", "gt_overlaps", ",", "dim", "=", "0", ")", "if", "len", "(", "gt_overlaps", ")", "else", "torch", ".", "zeros", "(", "0", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", ")", "\n", "gt_overlaps", ",", "_", "=", "torch", ".", "sort", "(", "gt_overlaps", ")", "\n", "\n", "if", "thresholds", "is", "None", ":", "\n", "        ", "step", "=", "0.05", "\n", "thresholds", "=", "torch", ".", "arange", "(", "0.5", ",", "0.95", "+", "1e-5", ",", "step", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "", "recalls", "=", "torch", ".", "zeros_like", "(", "thresholds", ")", "\n", "# compute recall for each iou threshold", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "recalls", "[", "i", "]", "=", "(", "gt_overlaps", ">=", "t", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "/", "float", "(", "num_pos", ")", "\n", "# ar = 2 * np.trapz(recalls, thresholds)", "\n", "", "ar", "=", "recalls", ".", "mean", "(", ")", "\n", "return", "{", "\n", "\"ar\"", ":", "ar", ",", "\n", "\"recalls\"", ":", "recalls", ",", "\n", "\"thresholds\"", ":", "thresholds", ",", "\n", "\"gt_overlaps\"", ":", "gt_overlaps", ",", "\n", "\"num_pos\"", ":", "num_pos", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation._evaluate_predictions_on_coco": [[489, 557], ["coco_gt.loadRes", "mirror3d_AP_eval.Mirror3dCOCOeval", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "len", "copy.deepcopy", "numpy.array", "mirror3d_AP_eval.Mirror3dCOCOeval.evaluate_degree_ap", "mirror3d_AP_eval.Mirror3dCOCOeval.accumulate", "print", "mirror3d_AP_eval.Mirror3dCOCOeval.chris_summarize", "mirror3d_AP_eval.Mirror3dCOCOeval.evaluate", "mirror3d_AP_eval.Mirror3dCOCOeval.accumulate", "print", "mirror3d_AP_eval.Mirror3dCOCOeval.chris_summarize", "mirror3d_AP_eval.Mirror3dCOCOeval.evaluate_anchor_ap", "mirror3d_AP_eval.Mirror3dCOCOeval.anchor_accumulate", "print", "mirror3d_AP_eval.Mirror3dCOCOeval.chris_summarize", "print", "mirror3d_AP_eval.Mirror3dCOCOeval.evaluate_normal", "c.pop", "len", "len"], "function", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadRes", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.evaluate_degree_ap", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.accumulate", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.chris_summarize", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_evaluation.Mirror3D_AP_Evaluator.evaluate", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.accumulate", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.chris_summarize", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.evaluate_anchor_ap", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.anchor_accumulate", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.chris_summarize", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.evaluate_normal"], ["", "def", "_evaluate_predictions_on_coco", "(", "coco_gt", ",", "coco_results", ",", "iou_type", ",", "kpt_oks_sigmas", "=", "None", ",", "cfg", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Evaluate the coco results using COCOEval API.\n    \"\"\"", "\n", "assert", "len", "(", "coco_results", ")", ">", "0", "\n", "\n", "if", "iou_type", "==", "\"segm\"", ":", "\n", "        ", "coco_results", "=", "copy", ".", "deepcopy", "(", "coco_results", ")", "\n", "# When evaluating mask AP, if the results contain bbox, cocoapi will", "\n", "# use the box area as the area of the instance, instead of the mask area.", "\n", "# This leads to a different definition of small/medium/large.", "\n", "# We remove the bbox field to let mask AP use mask area.", "\n", "for", "c", "in", "coco_results", ":", "\n", "            ", "c", ".", "pop", "(", "\"bbox\"", ",", "None", ")", "\n", "\n", "", "", "coco_dt", "=", "coco_gt", ".", "loadRes", "(", "coco_results", ")", "\n", "coco_eval", "=", "Mirror3dCOCOeval", "(", "coco_gt", ",", "coco_dt", ",", "iou_type", ",", "cfg", ")", "\n", "# Use the COCO default keypoint OKS sigmas unless overrides are specified", "\n", "if", "kpt_oks_sigmas", ":", "\n", "        ", "coco_eval", ".", "params", ".", "kpt_oks_sigmas", "=", "np", ".", "array", "(", "kpt_oks_sigmas", ")", "\n", "\n", "", "if", "iou_type", "==", "\"keypoints\"", ":", "\n", "        ", "num_keypoints", "=", "len", "(", "coco_results", "[", "0", "]", "[", "\"keypoints\"", "]", ")", "//", "3", "\n", "assert", "len", "(", "coco_eval", ".", "params", ".", "kpt_oks_sigmas", ")", "==", "num_keypoints", ",", "(", "\n", "\"[COCOEvaluator] The length of cfg.TEST.KEYPOINT_OKS_SIGMAS (default: 17) \"", "\n", "\"must be equal to the number of keypoints. However the prediction has {} \"", "\n", "\"keypoints! For more information please refer to \"", "\n", "\"http://cocodataset.org/#keypoints-eval.\"", ".", "format", "(", "num_keypoints", ")", "\n", ")", "\n", "\n", "", "print", "(", "\"#################################### {:20} ####################################\"", ".", "format", "(", "\"cfg\"", ")", ")", "\n", "print", "(", "\"cfg.MODEL.WEIGHTS\"", ",", "cfg", ".", "MODEL", ".", "WEIGHTS", ")", "\n", "print", "(", "\"cfg.ANCHOR_REG_METHOD\"", ",", "cfg", ".", "ANCHOR_REG_METHOD", ")", "\n", "print", "(", "\"cfg.ANCHOR_CLS\"", ",", "cfg", ".", "ANCHOR_CLS", ")", "\n", "print", "(", "\"cfg.ANCHOR_REG\"", ",", "cfg", ".", "ANCHOR_REG", ")", "\n", "print", "(", "\"cfg.OBJECT_SEG\"", ",", "cfg", ".", "OBJECT_SEG", ")", "\n", "print", "(", "\"cfg.OBJECT_CLS\"", ",", "cfg", ".", "OBJECT_CLS", ")", "\n", "print", "(", "\"cfg.OBJECT_BBOX_REG\"", ",", "cfg", ".", "OBJECT_BBOX_REG", ")", "\n", "print", "(", "\"cfg.RGBD_INPUT\"", ",", "cfg", ".", "RGBD_INPUT", ")", "\n", "print", "(", "\"cfg.ANCHOR_NORMAL_CLASS_NUM\"", ",", "cfg", ".", "ANCHOR_NORMAL_CLASS_NUM", ")", "\n", "print", "(", "\"cfg.OUTPUT_DIR\"", ",", "cfg", ".", "OUTPUT_DIR", ")", "\n", "\n", "\n", "if", "cfg", ".", "EVAL_CLS_AP", ":", "\n", "\n", "        ", "coco_eval", ".", "evaluate_degree_ap", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "print", "(", "\"#################################### {:20} ####################################\"", ".", "format", "(", "\"10 degree mAP\"", ")", ")", "\n", "coco_eval", ".", "chris_summarize", "(", "\"10 degree\"", ")", "\n", "\n", "coco_eval", ".", "evaluate", "(", ")", "\n", "coco_eval", ".", "accumulate", "(", ")", "\n", "print", "(", "\"#################################### {:20} ####################################\"", ".", "format", "(", "\"classification mAP\"", ")", ")", "\n", "coco_eval", ".", "chris_summarize", "(", "\"cls\"", ")", "\n", "\n", "", "if", "cfg", ".", "EVAL_ANCHOR_AP", ":", "\n", "        ", "coco_eval", ".", "evaluate_anchor_ap", "(", ")", "\n", "coco_eval", ".", "anchor_accumulate", "(", ")", "\n", "print", "(", "\"#################################### {:20} ####################################\"", ".", "format", "(", "\"anchor mAP\"", ")", ")", "\n", "coco_eval", ".", "chris_summarize", "(", "\"anchor\"", ")", "\n", "\n", "\n", "", "if", "cfg", ".", "EVAL_NORMAL", ":", "\n", "        ", "print", "(", "\"#################################### {:20} ####################################\"", ".", "format", "(", "\"evaluate normal\"", ")", ")", "\n", "coco_eval", ".", "evaluate_normal", "(", "cfg", ")", "\n", "\n", "\n", "", "return", "coco_eval", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.__init__": [[63, 96], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "mirror3d_AP_eval.Planercnn_Params", "numpy.load", "numpy.load", "print", "sorted", "sorted", "range", "cocoGt.getImgIds", "cocoGt.getCatIds", "range", "len", "numpy.sqrt", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.getImgIds", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.getCatIds"], ["    ", "def", "__init__", "(", "self", ",", "cocoGt", "=", "None", ",", "cocoDt", "=", "None", ",", "iouType", "=", "'segm'", ",", "cfg", "=", "None", ")", ":", "\n", "        ", "'''\n        Initialize CocoEval using coco APIs for gt and dt\n        :param cocoGt: coco object with ground truth annotations\n        :param cocoDt: coco object with detection results\n        :return: None\n        '''", "\n", "if", "not", "iouType", ":", "\n", "            ", "print", "(", "'iouType not specified. use default iouType segm'", ")", "\n", "", "self", ".", "cocoGt", "=", "cocoGt", "# ground truth COCO API", "\n", "self", ".", "cocoDt", "=", "cocoDt", "# detections COCO API", "\n", "self", ".", "evalImgs", "=", "defaultdict", "(", "list", ")", "# per-image per-category evaluation results [KxAxI] elements", "\n", "self", ".", "anchor_evalImgs", "=", "defaultdict", "(", "list", ")", "# per-image per-category evaluation results [KxAxI] elements", "\n", "self", ".", "eval", "=", "{", "}", "# accumulated evaluation results", "\n", "self", ".", "_gts", "=", "defaultdict", "(", "list", ")", "# gt for evaluation", "\n", "self", ".", "_dts", "=", "defaultdict", "(", "list", ")", "# dt for evaluation", "\n", "self", ".", "_anchor_gts", "=", "defaultdict", "(", "list", ")", "# gt for evaluation", "\n", "self", ".", "_anchor_dts", "=", "defaultdict", "(", "list", ")", "# dt for evaluation", "\n", "self", ".", "params", "=", "Planercnn_Params", "(", "iouType", "=", "iouType", ")", "# parameters", "\n", "self", ".", "_paramsEval", "=", "{", "}", "# parameters for evaluation", "\n", "self", ".", "stats", "=", "[", "]", "# result summarization", "\n", "self", ".", "ious", "=", "{", "}", "# ious between all gts and dts", "\n", "if", "not", "cocoGt", "is", "None", ":", "\n", "            ", "self", ".", "params", ".", "imgIds", "=", "sorted", "(", "cocoGt", ".", "getImgIds", "(", ")", ")", "\n", "self", ".", "params", ".", "catIds", "=", "sorted", "(", "cocoGt", ".", "getCatIds", "(", ")", ")", "# one class : 1", "\n", "# self.params.catIds = [0,1]", "\n", "\n", "", "self", ".", "params", ".", "anchor_catIds", "=", "[", "i", "for", "i", "in", "range", "(", "cfg", ".", "ANCHOR_NORMAL_CLASS_NUM", ")", "]", "\n", "self", ".", "anchor_normals", "=", "np", ".", "load", "(", "cfg", ".", "ANCHOR_NORMAL_NYP", ")", "\n", "if", "cfg", ".", "UNIT_ANCHOR_NORMAL", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "anchor_normals", ")", ")", ":", "\n", "                ", "self", ".", "anchor_normals", "[", "i", "]", "=", "self", ".", "anchor_normals", "[", "i", "]", "/", "(", "np", ".", "sqrt", "(", "self", ".", "anchor_normals", "[", "i", "]", "[", "0", "]", "**", "2", "+", "self", ".", "anchor_normals", "[", "i", "]", "[", "1", "]", "**", "2", "+", "self", ".", "anchor_normals", "[", "i", "]", "[", "2", "]", "**", "2", ")", ")", "\n", "", "", "self", ".", "cfg", "=", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval._prepare": [[100, 165], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "mirror3d_AP_eval.Mirror3dCOCOeval.cocoGt.loadAnns", "mirror3d_AP_eval.Mirror3dCOCOeval.cocoDt.loadAnns", "mirror3d_AP_eval.Mirror3dCOCOeval.cocoGt.loadAnns", "mirror3d_AP_eval.Mirror3dCOCOeval.cocoDt.loadAnns", "mirror3d_AP_eval.Mirror3dCOCOeval._prepare._toMask"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadAnns", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadAnns", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadAnns", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadAnns"], ["", "def", "_prepare", "(", "self", ")", ":", "\n", "        ", "'''\n        Prepare ._gts and ._dts for evaluation based on params\n        :return: None\n        '''", "\n", "def", "_toMask", "(", "anns", ",", "coco", ")", ":", "\n", "# modify ann['segmentation'] by reference", "\n", "            ", "for", "ann", "in", "anns", ":", "\n", "                ", "rle", "=", "coco", ".", "annToRLE", "(", "ann", ")", "\n", "ann", "[", "'segmentation'", "]", "=", "rle", "\n", "", "", "p", "=", "self", ".", "params", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gts", "=", "self", ".", "cocoGt", ".", "loadAnns", "(", "self", ".", "cocoGt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ",", "catIds", "=", "p", ".", "catIds", ")", ")", "\n", "dts", "=", "self", ".", "cocoDt", ".", "loadAnns", "(", "self", ".", "cocoDt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ",", "catIds", "=", "p", ".", "catIds", ")", ")", "\n", "", "else", ":", "\n", "            ", "gts", "=", "self", ".", "cocoGt", ".", "loadAnns", "(", "self", ".", "cocoGt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ")", ")", "\n", "dts", "=", "self", ".", "cocoDt", ".", "loadAnns", "(", "self", ".", "cocoDt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ")", ")", "\n", "\n", "# convert ground truth to mask if iouType == 'segm'", "\n", "", "if", "p", ".", "iouType", "==", "'segm'", ":", "\n", "            ", "_toMask", "(", "gts", ",", "self", ".", "cocoGt", ")", "\n", "_toMask", "(", "dts", ",", "self", ".", "cocoDt", ")", "\n", "# set ignore flag", "\n", "", "for", "gt", "in", "gts", ":", "\n", "            ", "gt", "[", "'ignore'", "]", "=", "gt", "[", "'ignore'", "]", "if", "'ignore'", "in", "gt", "else", "0", "\n", "gt", "[", "'ignore'", "]", "=", "'iscrowd'", "in", "gt", "and", "gt", "[", "'iscrowd'", "]", "\n", "if", "p", ".", "iouType", "==", "'keypoints'", ":", "\n", "                ", "gt", "[", "'ignore'", "]", "=", "(", "gt", "[", "'num_keypoints'", "]", "==", "0", ")", "or", "gt", "[", "'ignore'", "]", "\n", "", "", "self", ".", "_gts", "=", "defaultdict", "(", "list", ")", "# gt for evaluation", "\n", "self", ".", "_dts", "=", "defaultdict", "(", "list", ")", "# dt for evaluation", "\n", "\n", "for", "gt", "in", "gts", ":", "\n", "            ", "self", ".", "_gts", "[", "gt", "[", "'image_id'", "]", ",", "gt", "[", "'category_id'", "]", "]", ".", "append", "(", "gt", ")", "\n", "", "for", "dt", "in", "dts", ":", "\n", "            ", "self", ".", "_dts", "[", "dt", "[", "'image_id'", "]", ",", "dt", "[", "'category_id'", "]", "]", ".", "append", "(", "dt", ")", "\n", "\n", "", "self", ".", "evalImgs", "=", "defaultdict", "(", "list", ")", "# per-image per-category evaluation results", "\n", "self", ".", "anchor_evalImgs", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "eval", "=", "{", "}", "# accumulated evaluation results", "\n", "\n", "if", "self", ".", "cfg", ".", "ANCHOR_CLS", ":", "\n", "            ", "if", "p", ".", "useCats", ":", "\n", "                ", "anchor_gts", "=", "self", ".", "cocoGt", ".", "loadAnns", "(", "self", ".", "cocoGt", ".", "get_achorAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ",", "catIds", "=", "p", ".", "anchor_catIds", ")", ")", "\n", "anchor_dts", "=", "self", ".", "cocoDt", ".", "loadAnns", "(", "self", ".", "cocoDt", ".", "get_achorAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ",", "catIds", "=", "p", ".", "anchor_catIds", ")", ")", "\n", "", "else", ":", "\n", "                ", "anchor_gts", "=", "self", ".", "cocoGt", ".", "loadAnns", "(", "self", ".", "cocoGt", ".", "get_achorAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ")", ")", "\n", "anchor_dts", "=", "self", ".", "cocoDt", ".", "loadAnns", "(", "self", ".", "cocoDt", ".", "get_achorAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ")", ")", "\n", "\n", "# convert ground truth to mask if iouType == 'segm'", "\n", "", "if", "p", ".", "iouType", "==", "'segm'", ":", "\n", "                ", "_toMask", "(", "anchor_gts", ",", "self", ".", "cocoGt", ")", "\n", "_toMask", "(", "anchor_dts", ",", "self", ".", "cocoDt", ")", "\n", "# set ignore flag", "\n", "", "for", "gt", "in", "anchor_gts", ":", "\n", "                ", "gt", "[", "'ignore'", "]", "=", "gt", "[", "'ignore'", "]", "if", "'ignore'", "in", "gt", "else", "0", "\n", "gt", "[", "'ignore'", "]", "=", "'iscrowd'", "in", "gt", "and", "gt", "[", "'iscrowd'", "]", "\n", "if", "p", ".", "iouType", "==", "'keypoints'", ":", "\n", "                    ", "gt", "[", "'ignore'", "]", "=", "(", "gt", "[", "'num_keypoints'", "]", "==", "0", ")", "or", "gt", "[", "'ignore'", "]", "\n", "", "", "self", ".", "_anchor_gts", "=", "defaultdict", "(", "list", ")", "# gt for evaluation", "\n", "self", ".", "_anchor_dts", "=", "defaultdict", "(", "list", ")", "# dt for evaluation", "\n", "\n", "for", "gt", "in", "anchor_gts", ":", "\n", "                ", "self", ".", "_anchor_gts", "[", "gt", "[", "'image_id'", "]", ",", "gt", "[", "'anchor_normal_class'", "]", "]", ".", "append", "(", "gt", ")", "\n", "", "for", "dt", "in", "anchor_dts", ":", "\n", "                ", "self", ".", "_anchor_dts", "[", "dt", "[", "'image_id'", "]", ",", "dt", "[", "'anchor_normal_class'", "]", "]", ".", "append", "(", "dt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.evaluateImg_degree": [[167, 253], ["numpy.argsort", "numpy.argsort", "numpy.argsort", "numpy.argsort", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array().reshape", "numpy.array().reshape", "numpy.logical_or", "numpy.logical_or", "int", "enumerate", "numpy.logical_and", "numpy.logical_and", "len", "len", "len", "len", "enumerate", "numpy.array", "numpy.array", "len", "numpy.repeat", "numpy.repeat", "min", "enumerate", "unit_vector", "unit_vector", "angle", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.unit_vector", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.unit_vector", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.utils.algorithm.angle"], ["", "", "", "def", "evaluateImg_degree", "(", "self", ",", "imgId", ",", "catId", ",", "aRng", ",", "maxDet", ")", ":", "\n", "        ", "'''\n        perform evaluation for single category and image\n        :return: dict (single image results)\n        '''", "\n", "\n", "p", "=", "self", ".", "params", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gt", "=", "self", ".", "_gts", "[", "imgId", ",", "catId", "]", "\n", "dt", "=", "self", ".", "_dts", "[", "imgId", ",", "catId", "]", "\n", "", "else", ":", "\n", "            ", "gt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_gts", "[", "imgId", ",", "cId", "]", "]", "\n", "dt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_dts", "[", "imgId", ",", "cId", "]", "]", "\n", "", "if", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "for", "g", "in", "gt", ":", "\n", "            ", "if", "g", "[", "'ignore'", "]", "or", "(", "g", "[", "'area'", "]", "<", "aRng", "[", "0", "]", "or", "g", "[", "'area'", "]", ">", "aRng", "[", "1", "]", ")", ":", "\n", "                ", "g", "[", "'_ignore'", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "g", "[", "'_ignore'", "]", "=", "0", "\n", "\n", "# sort dt highest score first, sort gt ignore last", "\n", "", "", "gtind", "=", "np", ".", "argsort", "(", "[", "g", "[", "'_ignore'", "]", "for", "g", "in", "gt", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "gt", "=", "[", "gt", "[", "i", "]", "for", "i", "in", "gtind", "]", "\n", "dtind", "=", "np", ".", "argsort", "(", "[", "-", "d", "[", "'score'", "]", "for", "d", "in", "dt", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "dt", "=", "[", "dt", "[", "i", "]", "for", "i", "in", "dtind", "[", "0", ":", "maxDet", "]", "]", "\n", "iscrowd", "=", "[", "int", "(", "o", "[", "'iscrowd'", "]", ")", "for", "o", "in", "gt", "]", "\n", "# load computed ious", "\n", "ious", "=", "self", ".", "ious", "[", "imgId", ",", "catId", "]", "[", ":", ",", "gtind", "]", "if", "len", "(", "self", ".", "ious", "[", "imgId", ",", "catId", "]", ")", ">", "0", "else", "self", ".", "ious", "[", "imgId", ",", "catId", "]", "\n", "\n", "T", "=", "len", "(", "p", ".", "iouThrs", ")", "\n", "G", "=", "len", "(", "gt", ")", "\n", "D", "=", "len", "(", "dt", ")", "\n", "gtm", "=", "np", ".", "zeros", "(", "(", "T", ",", "G", ")", ")", "\n", "dtm", "=", "np", ".", "zeros", "(", "(", "T", ",", "D", ")", ")", "\n", "gtIg", "=", "np", ".", "array", "(", "[", "g", "[", "'_ignore'", "]", "for", "g", "in", "gt", "]", ")", "\n", "dtIg", "=", "np", ".", "zeros", "(", "(", "T", ",", "D", ")", ")", "\n", "if", "not", "len", "(", "ious", ")", "==", "0", ":", "\n", "            ", "for", "tind", ",", "t", "in", "enumerate", "(", "p", ".", "iouThrs", ")", ":", "\n", "                ", "for", "dind", ",", "d", "in", "enumerate", "(", "dt", ")", ":", "\n", "# information about best match so far (m=-1 -> unmatched)", "\n", "                    ", "iou", "=", "min", "(", "[", "t", ",", "1", "-", "1e-10", "]", ")", "\n", "m", "=", "-", "1", "\n", "\n", "\n", "for", "gind", ",", "g", "in", "enumerate", "(", "gt", ")", ":", "\n", "# if this gt already matched, and not a crowd, continue", "\n", "                        ", "if", "gtm", "[", "tind", ",", "gind", "]", ">", "0", "and", "not", "iscrowd", "[", "gind", "]", ":", "\n", "                            ", "continue", "\n", "# if dt matched to reg gt, and on ignore gt, stop", "\n", "", "if", "m", ">", "-", "1", "and", "gtIg", "[", "m", "]", "==", "0", "and", "gtIg", "[", "gind", "]", "==", "1", ":", "\n", "                            ", "break", "\n", "# continue to next gt unless better match made", "\n", "", "if", "ious", "[", "dind", ",", "gind", "]", "<", "iou", "or", "d", "[", "\"anchor_normal_class\"", "]", "==", "self", ".", "anchor_normals", ".", "shape", "[", "0", "]", ":", "\n", "                            ", "continue", "\n", "# if match successful and best so far, store appropriately", "\n", "", "mirror_GT_normal", "=", "unit_vector", "(", "self", ".", "anchor_normals", "[", "g", "[", "\"anchor_normal_class\"", "]", "]", "+", "np", ".", "array", "(", "g", "[", "\"anchor_normal_residual\"", "]", ")", ")", "\n", "mirror_pred_normal", "=", "unit_vector", "(", "self", ".", "anchor_normals", "[", "d", "[", "\"anchor_normal_class\"", "]", "]", "+", "np", ".", "array", "(", "d", "[", "\"anchor_normal_residual\"", "]", ")", ")", "#  pred mirror normal", "\n", "angle_diff", "=", "angle", "(", "mirror_GT_normal", ",", "mirror_pred_normal", ")", "\n", "if", "angle_diff", ">", "10", ":", "\n", "                            ", "continue", "\n", "", "iou", "=", "ious", "[", "dind", ",", "gind", "]", "\n", "m", "=", "gind", "\n", "# if match made store id of match for both dt and gt", "\n", "", "if", "m", "==", "-", "1", ":", "\n", "                        ", "continue", "\n", "", "dtIg", "[", "tind", ",", "dind", "]", "=", "gtIg", "[", "m", "]", "\n", "dtm", "[", "tind", ",", "dind", "]", "=", "gt", "[", "m", "]", "[", "'id'", "]", "\n", "gtm", "[", "tind", ",", "m", "]", "=", "d", "[", "'id'", "]", "\n", "# set unmatched detections outside of area range to ignore", "\n", "", "", "", "a", "=", "np", ".", "array", "(", "[", "d", "[", "'area'", "]", "<", "aRng", "[", "0", "]", "or", "d", "[", "'area'", "]", ">", "aRng", "[", "1", "]", "for", "d", "in", "dt", "]", ")", ".", "reshape", "(", "(", "1", ",", "len", "(", "dt", ")", ")", ")", "\n", "dtIg", "=", "np", ".", "logical_or", "(", "dtIg", ",", "np", ".", "logical_and", "(", "dtm", "==", "0", ",", "np", ".", "repeat", "(", "a", ",", "T", ",", "0", ")", ")", ")", "\n", "# store results for given image and category", "\n", "return", "{", "\n", "'image_id'", ":", "imgId", ",", "\n", "'category_id'", ":", "catId", ",", "\n", "'aRng'", ":", "aRng", ",", "\n", "'maxDet'", ":", "maxDet", ",", "\n", "'dtIds'", ":", "[", "d", "[", "'id'", "]", "for", "d", "in", "dt", "]", ",", "\n", "'gtIds'", ":", "[", "g", "[", "'id'", "]", "for", "g", "in", "gt", "]", ",", "\n", "'dtMatches'", ":", "dtm", ",", "\n", "'gtMatches'", ":", "gtm", ",", "\n", "'dtScores'", ":", "[", "d", "[", "'score'", "]", "for", "d", "in", "dt", "]", ",", "\n", "'gtIgnore'", ":", "gtIg", ",", "\n", "'dtIgnore'", ":", "dtIg", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.evaluate_degree_ap": [[255, 297], ["time.time", "print", "print", "list", "sorted", "mirror3d_AP_eval.Mirror3dCOCOeval._prepare", "copy.deepcopy", "time.time", "print", "print", "numpy.unique", "numpy.unique", "list", "computeIoU", "evaluateImg", "numpy.unique", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval._prepare"], ["", "def", "evaluate_degree_ap", "(", "self", ")", ":", "\n", "\n", "        ", "'''\n        Run per image evaluation on given images and store results (a list of dict) in self.evalImgs\n        :return: None\n        '''", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Running per image evaluation...'", ")", "\n", "p", "=", "self", ".", "params", "\n", "# add backward compatibility if useSegm is specified in params", "\n", "if", "not", "p", ".", "useSegm", "is", "None", ":", "\n", "            ", "p", ".", "iouType", "=", "'segm'", "if", "p", ".", "useSegm", "==", "1", "else", "'bbox'", "\n", "print", "(", "'useSegm (deprecated) is not None. Running {} evaluation'", ".", "format", "(", "p", ".", "iouType", ")", ")", "\n", "", "print", "(", "'Evaluate annotation type *{}*'", ".", "format", "(", "p", ".", "iouType", ")", ")", "\n", "p", ".", "imgIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "imgIds", ")", ")", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "p", ".", "catIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "catIds", ")", ")", "\n", "", "p", ".", "maxDets", "=", "sorted", "(", "p", ".", "maxDets", ")", "\n", "self", ".", "params", "=", "p", "\n", "\n", "self", ".", "_prepare", "(", ")", "\n", "# loop through images, area range, max detection number", "\n", "catIds", "=", "p", ".", "catIds", "if", "p", ".", "useCats", "else", "[", "-", "1", "]", "\n", "\n", "if", "p", ".", "iouType", "==", "'segm'", "or", "p", ".", "iouType", "==", "'bbox'", ":", "\n", "            ", "computeIoU", "=", "self", ".", "computeIoU", "\n", "", "elif", "p", ".", "iouType", "==", "'keypoints'", ":", "\n", "            ", "computeIoU", "=", "self", ".", "computeOks", "\n", "", "self", ".", "ious", "=", "{", "(", "imgId", ",", "catId", ")", ":", "computeIoU", "(", "imgId", ",", "catId", ")", "for", "imgId", "in", "p", ".", "imgIds", "\n", "for", "catId", "in", "catIds", "}", "\n", "\n", "evaluateImg", "=", "self", ".", "evaluateImg_degree", "\n", "maxDet", "=", "p", ".", "maxDets", "[", "-", "1", "]", "\n", "self", ".", "evalImgs", "=", "[", "evaluateImg", "(", "imgId", ",", "catId", ",", "areaRng", ",", "maxDet", ")", "\n", "for", "catId", "in", "catIds", "\n", "for", "areaRng", "in", "p", ".", "areaRng", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "]", "\n", "self", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "self", ".", "params", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'DONE (t={:0.2f}s).'", ".", "format", "(", "toc", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.evaluate_anchor_ap": [[299, 343], ["time.time", "print", "print", "list", "sorted", "mirror3d_AP_eval.Mirror3dCOCOeval._prepare", "copy.deepcopy", "time.time", "print", "print", "numpy.unique", "numpy.unique", "mirror3d_AP_eval.Mirror3dCOCOeval.anchor_specific_computeIoU"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval._prepare", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.anchor_specific_computeIoU"], ["", "def", "evaluate_anchor_ap", "(", "self", ")", ":", "\n", "\n", "\n", "        ", "'''\n        Run per image evaluation on given images and store results (a list of dict) in self.evalImgs\n        :return: None\n        '''", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'Running per image evaluation...'", ")", "\n", "p", "=", "self", ".", "params", "\n", "# add backward compatibility if useSegm is specified in params", "\n", "if", "not", "p", ".", "useSegm", "is", "None", ":", "\n", "            ", "p", ".", "iouType", "=", "'segm'", "if", "p", ".", "useSegm", "==", "1", "else", "'bbox'", "\n", "print", "(", "'useSegm (deprecated) is not None. Running {} evaluation'", ".", "format", "(", "p", ".", "iouType", ")", ")", "\n", "", "print", "(", "'Evaluate annotation type *{}*'", ".", "format", "(", "p", ".", "iouType", ")", ")", "\n", "p", ".", "imgIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "imgIds", ")", ")", "\n", "\n", "p", ".", "maxDets", "=", "sorted", "(", "p", ".", "maxDets", ")", "\n", "self", ".", "params", "=", "p", "\n", "\n", "self", ".", "_prepare", "(", ")", "\n", "# loop through images, area range, max detection number", "\n", "\n", "if", "p", ".", "iouType", "==", "'segm'", "or", "p", ".", "iouType", "==", "'bbox'", ":", "\n", "            ", "anchor_specific_computeIoU", "=", "self", ".", "anchor_specific_computeIoU", "\n", "", "elif", "p", ".", "iouType", "==", "'keypoints'", ":", "\n", "            ", "anchor_specific_computeIoU", "=", "self", ".", "computeOks", "\n", "# ious between all gts and dts : self.ious = img_ID : {anchor_specific_computeIoU}", "\n", "", "self", ".", "ious", "=", "{", "(", "imgId", ",", "catId", ")", ":", "anchor_specific_computeIoU", "(", "imgId", ",", "catId", ")", "for", "imgId", "in", "p", ".", "imgIds", "\n", "for", "catId", "in", "p", ".", "anchor_catIds", "}", "\n", "\n", "evaluateImg", "=", "self", ".", "anchor_evaluateImg", "\n", "maxDet", "=", "p", ".", "maxDets", "[", "-", "1", "]", "# 100  ", "\n", "self", ".", "anchor_evalImgs", "=", "[", "evaluateImg", "(", "imgId", ",", "anchor_catId", ",", "areaRng", ",", "maxDet", ")", "# thresholds on max detections per image", "\n", "for", "anchor_catId", "in", "p", ".", "anchor_catIds", "\n", "for", "areaRng", "in", "p", ".", "areaRng", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "]", "\n", "\n", "self", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "self", ".", "params", ")", "\n", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'DONE (t={:0.2f}s).'", ".", "format", "(", "toc", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.evaluate_normal": [[344, 514], ["zip", "dict", "dict", "dict", "dict", "mirror3d_AP_eval.Mirror3dCOCOeval.evaluate_normal.print_score"], "methods", ["None"], ["", "def", "evaluate_normal", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "import", "random", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "import", "os", "\n", "import", "time", "\n", "import", "cv2", "\n", "\n", "\n", "def", "cos_sim", "(", "vector_a", ",", "vector_b", ")", ":", "\n", "            ", "vector_a", "=", "np", ".", "mat", "(", "vector_a", ")", "\n", "vector_b", "=", "np", ".", "mat", "(", "vector_b", ")", "\n", "num", "=", "float", "(", "vector_a", "*", "vector_b", ".", "T", ")", "\n", "denom", "=", "np", ".", "linalg", ".", "norm", "(", "vector_a", ")", "*", "np", ".", "linalg", ".", "norm", "(", "vector_b", ")", "\n", "cos", "=", "num", "/", "denom", "\n", "sim", "=", "0.5", "+", "0.5", "*", "cos", "\n", "if", "np", ".", "isnan", "(", "sim", ")", ":", "\n", "                ", "sim", "=", "1", "\n", "", "return", "sim", "\n", "\n", "", "def", "save_txt", "(", "save_path", ",", "data", ")", ":", "\n", "            ", "with", "open", "(", "save_path", ",", "\"w\"", ")", "as", "file", ":", "\n", "                ", "for", "info", "in", "data", ":", "\n", "                    ", "file", ".", "write", "(", "str", "(", "info", ")", ")", "\n", "file", ".", "write", "(", "\"\\n\"", ")", "\n", "", "", "print", "(", "\"-------------------------------- txt saved to : \"", ",", "save_path", ",", "len", "(", "data", ")", ")", "\n", "\n", "", "def", "read_txt", "(", "txt_path", ")", ":", "\n", "            ", "with", "open", "(", "txt_path", ",", "\"r\"", ")", "as", "file", ":", "\n", "                ", "lines", "=", "file", ".", "readlines", "(", ")", "\n", "", "return", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "\n", "", "def", "draw_bbox", "(", "pred_bboxes", ",", "gt_bboxes", ",", "image_path", ",", "img_save_folder", ",", "improve", ",", "distance", ")", ":", "\n", "            ", "success_save_folder", "=", "os", ".", "path", ".", "join", "(", "img_save_folder", ",", "\"success\"", ")", "\n", "fail_save_folder", "=", "os", ".", "path", ".", "join", "(", "img_save_folder", ",", "\"fail\"", ")", "\n", "os", ".", "makedirs", "(", "success_save_folder", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "fail_save_folder", ",", "exist_ok", "=", "True", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "image_path", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "(", "int", "(", "gt_bboxes", "[", "0", "]", ")", ",", "int", "(", "gt_bboxes", "[", "1", "]", ")", ")", ",", "(", "int", "(", "gt_bboxes", "[", "0", "]", ")", "+", "int", "(", "gt_bboxes", "[", "2", "]", ")", ",", "int", "(", "gt_bboxes", "[", "1", "]", ")", "+", "int", "(", "gt_bboxes", "[", "3", "]", ")", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "3", ")", "\n", "cv2", ".", "rectangle", "(", "img", ",", "(", "int", "(", "pred_bboxes", "[", "0", "]", ")", ",", "int", "(", "pred_bboxes", "[", "1", "]", ")", ")", ",", "(", "int", "(", "pred_bboxes", "[", "0", "]", ")", "+", "int", "(", "pred_bboxes", "[", "2", "]", ")", ",", "int", "(", "pred_bboxes", "[", "1", "]", ")", "+", "int", "(", "pred_bboxes", "[", "3", "]", ")", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "3", ")", "\n", "\n", "if", "improve", ">=", "0", ":", "\n", "                ", "cv2", ".", "putText", "(", "img", ",", "\"dis {:0.2f} +{:0.2f}\"", ".", "format", "(", "distance", ",", "improve", ")", ",", "(", "40", ",", "40", ")", ",", "1", ",", "3", ",", "(", "0", ",", "255", ",", "0", ")", ",", "2", ")", "\n", "img_save_name", "=", "\"{:0.2f}_success_bbox_vis_\"", ".", "format", "(", "improve", ")", "+", "image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "3", "]", "+", "\"_\"", "+", "image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "img_save_path", "=", "os", ".", "path", ".", "join", "(", "success_save_folder", ",", "img_save_name", ")", "\n", "", "else", ":", "\n", "                ", "cv2", ".", "putText", "(", "img", ",", "\"dis {:0.2f} {:0.2f}\"", ".", "format", "(", "distance", ",", "improve", ")", ",", "(", "40", ",", "40", ")", ",", "1", ",", "3", ",", "(", "0", ",", "255", ",", "0", ")", ",", "2", ")", "\n", "img_save_name", "=", "\"{:0.2f}_fail_bbox_vis_\"", ".", "format", "(", "improve", ")", "+", "image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "3", "]", "+", "\"_\"", "+", "image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "img_save_path", "=", "os", ".", "path", ".", "join", "(", "fail_save_folder", ",", "img_save_name", ")", "\n", "", "cv2", ".", "imwrite", "(", "img_save_path", ",", "img", ")", "\n", "print", "(", "\"bbox_vis image saved to : \"", ",", "img_save_path", ",", "\"distance {:0.4f} improve {:0.4f}\"", ".", "format", "(", "distance", ",", "improve", ")", ")", "\n", "\n", "", "def", "print_score", "(", "score_tag", ",", "iou_predNum_noneNum", ",", "iou_scoreList", ")", ":", "\n", "            ", "IOU_list", "=", "[", "]", "\n", "for", "iou", "in", "self", ".", "params", ".", "iouThrs", ":", "\n", "                ", "if", "len", "(", "iou_predNum_noneNum", "[", "iou", "]", "[", "0", "]", ")", ":", "\n", "                    ", "IOU_list", ".", "append", "(", "[", "np", ".", "array", "(", "iou_scoreList", "[", "iou", "]", ")", "[", ":", ",", "0", "]", ".", "mean", "(", ")", ",", "np", ".", "array", "(", "iou_scoreList", "[", "iou", "]", ")", "[", ":", ",", "1", "]", ".", "mean", "(", ")", ",", "np", ".", "array", "(", "iou_scoreList", "[", "iou", "]", ")", "[", ":", ",", "2", "]", ".", "mean", "(", ")", "]", ")", "\n", "\n", "", "", "print", "(", "\"| {:45} | IOU 0.5:0.95 | {:15} {:5f} |\"", ".", "format", "(", "\"mirror_pred_anchor & mirror_GT_normal\"", ",", "score_tag", ",", "np", ".", "array", "(", "IOU_list", ")", "[", ":", ",", "0", "]", ".", "mean", "(", ")", ")", ")", "\n", "print", "(", "\"| {:45} | IOU 0.5:0.95 | {:15} {:5f} |\"", ".", "format", "(", "\"mirror_pred_normal & mirror_GT_normal\"", ",", "score_tag", ",", "np", ".", "array", "(", "IOU_list", ")", "[", ":", ",", "1", "]", ".", "mean", "(", ")", ")", ")", "\n", "print", "(", "\"| {:45} | IOU 0.5:0.95 | {:15} {:5f} |\"", ".", "format", "(", "\"mirror_pred_res & mirror_GT_res\"", ",", "score_tag", ",", "np", ".", "array", "(", "IOU_list", ")", "[", ":", ",", "2", "]", ".", "mean", "(", ")", ")", ")", "\n", "\n", "", "all_areaRng", "=", "None", "\n", "for", "areaRng", ",", "areaRngLbl", "in", "zip", "(", "self", ".", "params", ".", "areaRng", ",", "self", ".", "params", ".", "areaRngLbl", ")", ":", "\n", "            ", "if", "areaRngLbl", "==", "\"all\"", ":", "\n", "                ", "all_areaRng", "=", "areaRng", "\n", "break", "\n", "\n", "", "", "iou_l2lossList", "=", "dict", "(", ")", "\n", "for", "iou", "in", "self", ".", "params", ".", "iouThrs", ":", "\n", "            ", "iou_l2lossList", "[", "iou", "]", "=", "[", "]", "\n", "\n", "", "iou_CSlist", "=", "dict", "(", ")", "\n", "for", "iou", "in", "self", ".", "params", ".", "iouThrs", ":", "\n", "            ", "iou_CSlist", "[", "iou", "]", "=", "[", "]", "\n", "\n", "", "iou_angle_list", "=", "dict", "(", ")", "\n", "for", "iou", "in", "self", ".", "params", ".", "iouThrs", ":", "\n", "            ", "iou_angle_list", "[", "iou", "]", "=", "[", "]", "\n", "\n", "", "iou_predNum_noneNum", "=", "dict", "(", ")", "\n", "for", "iou", "in", "self", ".", "params", ".", "iouThrs", ":", "\n", "            ", "iou_predNum_noneNum", "[", "iou", "]", "=", "[", "set", "(", ")", ",", "set", "(", ")", "]", "\n", "\n", "\n", "\n", "", "for", "one_eval_img", "in", "self", ".", "anchor_evalImgs", ":", "#  [evaluateImg(imgId (81), anchor_catId (anchor_normal_num + bg), areaRng (4 : s m l all), maxDet (100))", "\n", "            ", "if", "one_eval_img", ":", "# if one_eval_img is not None", "\n", "                ", "if", "one_eval_img", "[", "\"aRng\"", "]", "==", "all_areaRng", ":", "# only care about the performace on \"All\" image prediction", "\n", "                    ", "for", "iou_idx", ",", "iou", "in", "enumerate", "(", "self", ".", "params", ".", "iouThrs", ")", ":", "\n", "                        ", "image_id", "=", "one_eval_img", "[", "\"image_id\"", "]", "\n", "anchor_cat_id", "=", "one_eval_img", "[", "\"category_id\"", "]", "\n", "gt_anchor_id", "=", "one_eval_img", "[", "\"dtMatches\"", "]", "[", "iou_idx", "]", "# GT index that dt match", "\n", "dt_anchor_id", "=", "one_eval_img", "[", "\"gtMatches\"", "]", "[", "iou_idx", "]", "# dt index that GT match", "\n", "\n", "zero_count", "=", "0", "\n", "for", "idx", ",", "one_match_gt_id", "in", "enumerate", "(", "gt_anchor_id", ")", ":", "\n", "                            ", "if", "one_match_gt_id", ">", "0", ":", "# one_match_gt_id = 0 then this instance match background (gt[0] is background)", "\n", "# get the matched GT instance ", "\n", "\n", "                                ", "for", "gt_item", "in", "self", ".", "_anchor_gts", "[", "image_id", ",", "anchor_cat_id", "]", ":", "\n", "                                    ", "if", "gt_item", "[", "\"id\"", "]", "==", "one_match_gt_id", ":", "\n", "                                        ", "mirror_GT_normal", "=", "unit_vector", "(", "self", ".", "anchor_normals", "[", "gt_item", "[", "\"anchor_normal_class\"", "]", "]", "+", "np", ".", "array", "(", "gt_item", "[", "\"anchor_normal_residual\"", "]", ")", ")", "# GT mirror normal ", "\n", "mirror_GT_res", "=", "np", ".", "array", "(", "gt_item", "[", "\"anchor_normal_residual\"", "]", ")", "\n", "mirror_GT_anchor", "=", "self", ".", "anchor_normals", "[", "gt_item", "[", "\"anchor_normal_class\"", "]", "]", "\n", "mirror_GT_normal_class", "=", "gt_item", "[", "\"anchor_normal_class\"", "]", "\n", "mirror_GT_bboxes", "=", "gt_item", "[", "\"bbox\"", "]", "\n", "mirror_image_path", "=", "gt_item", "[", "\"mirror_color_image_path\"", "]", "\n", "break", "\n", "\n", "# get the matched predicted instance ", "\n", "", "", "have_match", "=", "False", "\n", "for", "pred_item", "in", "self", ".", "_anchor_dts", "[", "image_id", ",", "anchor_cat_id", "]", ":", "\n", "                                    ", "if", "pred_item", "[", "\"id\"", "]", "==", "dt_anchor_id", "[", "idx", "-", "zero_count", "]", ":", "\n", "                                        ", "mirror_pred_normal", "=", "unit_vector", "(", "self", ".", "anchor_normals", "[", "pred_item", "[", "\"anchor_normal_class\"", "]", "]", "+", "np", ".", "array", "(", "pred_item", "[", "\"anchor_normal_residual\"", "]", ")", ")", "#  pred mirror normal", "\n", "mirror_pred_res", "=", "np", ".", "array", "(", "pred_item", "[", "\"anchor_normal_residual\"", "]", ")", "\n", "mirror_pred_anchor", "=", "self", ".", "anchor_normals", "[", "pred_item", "[", "\"anchor_normal_class\"", "]", "]", "\n", "mirror_pred_normal_class", "=", "pred_item", "[", "\"anchor_normal_class\"", "]", "\n", "mirror_pred_bboxes", "=", "pred_item", "[", "\"bbox\"", "]", "\n", "have_match", "=", "True", "\n", "break", "\n", "", "", "try", ":", "\n", "                                    ", "improve", "=", "np", ".", "linalg", ".", "norm", "(", "mirror_pred_anchor", "-", "mirror_GT_normal", ")", "-", "np", ".", "linalg", ".", "norm", "(", "mirror_pred_normal", "-", "mirror_GT_normal", ")", "\n", "distance", "=", "np", ".", "linalg", ".", "norm", "(", "mirror_GT_normal", "-", "mirror_GT_anchor", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                                    ", "improve", "=", "0", "\n", "distance", "=", "0", "\n", "print", "(", "e", ")", "\n", "print", "(", "\"error ------------ one_match_gt_id, gt_anchor_id : \"", ",", "one_match_gt_id", ",", "gt_anchor_id", ")", "\n", "mirror_pred_anchor", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "mirror_GT_normal", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "mirror_pred_normal", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "mirror_GT_anchor", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "mirror_GT_res", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "mirror_pred_res", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "print", "(", "dt_anchor_id", "[", "idx", "-", "zero_count", "]", ",", "dt_anchor_id", ")", "\n", "\n", "", "if", "not", "have_match", ":", "\n", "                                    ", "iou_predNum_noneNum", "[", "iou", "]", "[", "0", "]", ".", "add", "(", "image_id", ")", "\n", "continue", "\n", "#################################### get L2 loss ####################################  ", "\n", "", "iou_l2lossList", "[", "iou", "]", ".", "append", "(", "[", "np", ".", "linalg", ".", "norm", "(", "mirror_pred_anchor", "-", "mirror_GT_normal", ")", ",", "np", ".", "linalg", ".", "norm", "(", "mirror_pred_normal", "-", "mirror_GT_normal", ")", ",", "np", ".", "linalg", ".", "norm", "(", "mirror_pred_res", "-", "mirror_GT_res", ")", ",", "improve", ",", "distance", "]", ")", "\n", "#################################### get cos similarity ####################################", "\n", "iou_CSlist", "[", "iou", "]", ".", "append", "(", "[", "cos_sim", "(", "mirror_pred_anchor", ",", "mirror_GT_normal", ")", ",", "cos_sim", "(", "mirror_pred_normal", ",", "mirror_GT_normal", ")", ",", "cos_sim", "(", "mirror_pred_res", ",", "mirror_GT_res", ")", "]", ")", "\n", "iou_angle_list", "[", "iou", "]", ".", "append", "(", "[", "angle", "(", "mirror_pred_anchor", ",", "mirror_GT_normal", ")", ",", "angle", "(", "mirror_pred_normal", ",", "mirror_GT_normal", ")", ",", "angle", "(", "mirror_pred_res", ",", "mirror_GT_res", ")", "]", ")", "\n", "iou_predNum_noneNum", "[", "iou", "]", "[", "0", "]", ".", "add", "(", "image_id", ")", "\n", "\n", "", "else", ":", "\n", "                                ", "zero_count", "+=", "1", "\n", "iou_predNum_noneNum", "[", "iou", "]", "[", "1", "]", ".", "add", "(", "image_id", ")", "\n", "\n", "\n", "#################################### print prediction situation ####################################  ", "\n", "", "", "", "", "", "", "for", "iou", "in", "self", ".", "params", ".", "iouThrs", ":", "\n", "            ", "print", "(", "\"| IOU {:.2f} : {:5}/{:5} matched / all_detection|\"", ".", "format", "(", "iou", ",", "len", "(", "iou_predNum_noneNum", "[", "iou", "]", "[", "0", "]", ")", ",", "len", "(", "iou_predNum_noneNum", "[", "iou", "]", "[", "0", "]", ".", "union", "(", "iou_predNum_noneNum", "[", "iou", "]", "[", "1", "]", ")", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "iou_predNum_noneNum", "[", "self", ".", "params", ".", "iouThrs", "[", "0", "]", "]", "[", "0", "]", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "\n", "", "print_score", "(", "\"L2_loss\"", ",", "iou_predNum_noneNum", ",", "iou_l2lossList", ")", "\n", "print_score", "(", "\"SSIM\"", ",", "iou_predNum_noneNum", ",", "iou_CSlist", ")", "\n", "print_score", "(", "\"angle_diff\"", ",", "iou_predNum_noneNum", ",", "iou_angle_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.anchor_specific_computeIoU": [[516, 545], ["numpy.argsort", "numpy.argsort", "pycocotools.cocoeval.maskUtils.iou", "len", "int", "len", "len", "Exception"], "methods", ["None"], ["", "def", "anchor_specific_computeIoU", "(", "self", ",", "imgId", ",", "catId", ")", ":", "\n", "        ", "p", "=", "self", ".", "params", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gt", "=", "self", ".", "_anchor_gts", "[", "imgId", ",", "catId", "]", "\n", "dt", "=", "self", ".", "_anchor_dts", "[", "imgId", ",", "catId", "]", "\n", "", "else", ":", "\n", "            ", "gt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_anchor_gts", "[", "imgId", ",", "cId", "]", "]", "\n", "dt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_anchor_dts", "[", "imgId", ",", "cId", "]", "]", "\n", "", "if", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "# ! sort pred_instance by anchor_score", "\n", "", "inds", "=", "np", ".", "argsort", "(", "[", "-", "d", "[", "'anchor_score'", "]", "for", "d", "in", "dt", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "dt", "=", "[", "dt", "[", "i", "]", "for", "i", "in", "inds", "]", "\n", "if", "len", "(", "dt", ")", ">", "p", ".", "maxDets", "[", "-", "1", "]", ":", "\n", "            ", "dt", "=", "dt", "[", "0", ":", "p", ".", "maxDets", "[", "-", "1", "]", "]", "\n", "\n", "", "if", "p", ".", "iouType", "==", "'segm'", ":", "\n", "            ", "g", "=", "[", "g", "[", "'segmentation'", "]", "for", "g", "in", "gt", "]", "\n", "d", "=", "[", "d", "[", "'segmentation'", "]", "for", "d", "in", "dt", "]", "\n", "", "elif", "p", ".", "iouType", "==", "'bbox'", ":", "\n", "            ", "g", "=", "[", "g", "[", "'bbox'", "]", "for", "g", "in", "gt", "]", "\n", "d", "=", "[", "d", "[", "'bbox'", "]", "for", "d", "in", "dt", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unknown iouType for iou computation'", ")", "\n", "\n", "# compute iou between each dt and gt region", "\n", "", "iscrowd", "=", "[", "int", "(", "o", "[", "'iscrowd'", "]", ")", "for", "o", "in", "gt", "]", "\n", "ious", "=", "maskUtils", ".", "iou", "(", "d", ",", "g", ",", "iscrowd", ")", "\n", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.accumulate": [[546, 652], ["print", "time.time", "len", "len", "len", "len", "set", "set", "set", "set", "len", "len", "enumerate", "time.time", "print", "print", "len", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "map", "enumerate", "datetime.datetime.now().strftime", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "map", "numpy.concatenate", "numpy.concatenate", "numpy.argsort", "numpy.argsort", "numpy.concatenate", "numpy.concatenate", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.cumsum().astype", "numpy.cumsum().astype", "numpy.cumsum().astype", "numpy.cumsum().astype", "enumerate", "datetime.datetime.now", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "zip", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pr.tolist.tolist.tolist", "q.tolist.tolist.tolist", "range", "numpy.searchsorted", "numpy.searchsorted", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "tuple", "numpy.cumsum", "numpy.cumsum", "numpy.cumsum", "numpy.cumsum", "enumerate", "numpy.spacing", "numpy.spacing"], "methods", ["None"], ["", "def", "accumulate", "(", "self", ",", "p", "=", "None", ")", ":", "\n", "        ", "'''\n        Accumulate per image evaluation results and store the result in self.eval\n        :param p: input params for evaluation\n        :return: None\n        '''", "\n", "print", "(", "'Accumulating evaluation results...'", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "not", "self", ".", "evalImgs", ":", "\n", "            ", "print", "(", "'Please run evaluate() first'", ")", "\n", "# allows input customized parameters", "\n", "", "if", "p", "is", "None", ":", "\n", "            ", "p", "=", "self", ".", "params", "\n", "", "p", ".", "catIds", "=", "p", ".", "catIds", "if", "p", ".", "useCats", "==", "1", "else", "[", "-", "1", "]", "\n", "T", "=", "len", "(", "p", ".", "iouThrs", ")", "\n", "R", "=", "len", "(", "p", ".", "recThrs", ")", "\n", "K", "=", "len", "(", "p", ".", "catIds", ")", "if", "p", ".", "useCats", "else", "1", "\n", "A", "=", "len", "(", "p", ".", "areaRng", ")", "\n", "M", "=", "len", "(", "p", ".", "maxDets", ")", "\n", "precision", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "R", ",", "K", ",", "A", ",", "M", ")", ")", "# -1 for the precision of absent categories", "\n", "recall", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "K", ",", "A", ",", "M", ")", ")", "\n", "scores", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "R", ",", "K", ",", "A", ",", "M", ")", ")", "\n", "\n", "# create dictionary for future indexing", "\n", "_pe", "=", "self", ".", "_paramsEval", "\n", "catIds", "=", "_pe", ".", "catIds", "if", "_pe", ".", "useCats", "else", "[", "-", "1", "]", "\n", "setK", "=", "set", "(", "catIds", ")", "\n", "setA", "=", "set", "(", "map", "(", "tuple", ",", "_pe", ".", "areaRng", ")", ")", "\n", "setM", "=", "set", "(", "_pe", ".", "maxDets", ")", "\n", "setI", "=", "set", "(", "_pe", ".", "imgIds", ")", "\n", "# get inds to evaluate", "\n", "k_list", "=", "[", "n", "for", "n", ",", "k", "in", "enumerate", "(", "p", ".", "catIds", ")", "if", "k", "in", "setK", "]", "\n", "m_list", "=", "[", "m", "for", "n", ",", "m", "in", "enumerate", "(", "p", ".", "maxDets", ")", "if", "m", "in", "setM", "]", "\n", "a_list", "=", "[", "n", "for", "n", ",", "a", "in", "enumerate", "(", "map", "(", "lambda", "x", ":", "tuple", "(", "x", ")", ",", "p", ".", "areaRng", ")", ")", "if", "a", "in", "setA", "]", "\n", "i_list", "=", "[", "n", "for", "n", ",", "i", "in", "enumerate", "(", "p", ".", "imgIds", ")", "if", "i", "in", "setI", "]", "\n", "I0", "=", "len", "(", "_pe", ".", "imgIds", ")", "\n", "A0", "=", "len", "(", "_pe", ".", "areaRng", ")", "\n", "# retrieve E at each category, area range, and max number of detections", "\n", "for", "k", ",", "k0", "in", "enumerate", "(", "k_list", ")", ":", "\n", "            ", "Nk", "=", "k0", "*", "A0", "*", "I0", "\n", "for", "a", ",", "a0", "in", "enumerate", "(", "a_list", ")", ":", "\n", "                ", "Na", "=", "a0", "*", "I0", "\n", "for", "m", ",", "maxDet", "in", "enumerate", "(", "m_list", ")", ":", "\n", "                    ", "E", "=", "[", "self", ".", "evalImgs", "[", "Nk", "+", "Na", "+", "i", "]", "for", "i", "in", "i_list", "]", "\n", "E", "=", "[", "e", "for", "e", "in", "E", "if", "not", "e", "is", "None", "]", "\n", "if", "len", "(", "E", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "dtScores", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtScores'", "]", "[", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ")", "\n", "\n", "# different sorting method generates slightly different results.", "\n", "# mergesort is used to be consistent as Matlab implementation.", "\n", "inds", "=", "np", ".", "argsort", "(", "-", "dtScores", ",", "kind", "=", "'mergesort'", ")", "\n", "dtScoresSorted", "=", "dtScores", "[", "inds", "]", "\n", "\n", "dtm", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtMatches'", "]", "[", ":", ",", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "inds", "]", "\n", "dtIg", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtIgnore'", "]", "[", ":", ",", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "inds", "]", "\n", "gtIg", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'gtIgnore'", "]", "for", "e", "in", "E", "]", ")", "\n", "npig", "=", "np", ".", "count_nonzero", "(", "gtIg", "==", "0", ")", "\n", "if", "npig", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "tps", "=", "np", ".", "logical_and", "(", "dtm", ",", "np", ".", "logical_not", "(", "dtIg", ")", ")", "\n", "fps", "=", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "dtm", ")", ",", "np", ".", "logical_not", "(", "dtIg", ")", ")", "\n", "\n", "tp_sum", "=", "np", ".", "cumsum", "(", "tps", ",", "axis", "=", "1", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float", ")", "\n", "fp_sum", "=", "np", ".", "cumsum", "(", "fps", ",", "axis", "=", "1", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float", ")", "\n", "for", "t", ",", "(", "tp", ",", "fp", ")", "in", "enumerate", "(", "zip", "(", "tp_sum", ",", "fp_sum", ")", ")", ":", "\n", "                        ", "tp", "=", "np", ".", "array", "(", "tp", ")", "\n", "fp", "=", "np", ".", "array", "(", "fp", ")", "\n", "nd", "=", "len", "(", "tp", ")", "\n", "rc", "=", "tp", "/", "npig", "\n", "pr", "=", "tp", "/", "(", "fp", "+", "tp", "+", "np", ".", "spacing", "(", "1", ")", ")", "\n", "q", "=", "np", ".", "zeros", "(", "(", "R", ",", ")", ")", "\n", "ss", "=", "np", ".", "zeros", "(", "(", "R", ",", ")", ")", "\n", "\n", "if", "nd", ":", "\n", "                            ", "recall", "[", "t", ",", "k", ",", "a", ",", "m", "]", "=", "rc", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                            ", "recall", "[", "t", ",", "k", ",", "a", ",", "m", "]", "=", "0", "\n", "\n", "# numpy is slow without cython optimization for accessing elements", "\n", "# use python array gets significant speed improvement", "\n", "", "pr", "=", "pr", ".", "tolist", "(", ")", ";", "q", "=", "q", ".", "tolist", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nd", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "                            ", "if", "pr", "[", "i", "]", ">", "pr", "[", "i", "-", "1", "]", ":", "\n", "                                ", "pr", "[", "i", "-", "1", "]", "=", "pr", "[", "i", "]", "\n", "\n", "", "", "inds", "=", "np", ".", "searchsorted", "(", "rc", ",", "p", ".", "recThrs", ",", "side", "=", "'left'", ")", "\n", "try", ":", "\n", "                            ", "for", "ri", ",", "pi", "in", "enumerate", "(", "inds", ")", ":", "\n", "                                ", "q", "[", "ri", "]", "=", "pr", "[", "pi", "]", "\n", "ss", "[", "ri", "]", "=", "dtScoresSorted", "[", "pi", "]", "\n", "", "", "except", ":", "\n", "                            ", "pass", "\n", "", "precision", "[", "t", ",", ":", ",", "k", ",", "a", ",", "m", "]", "=", "np", ".", "array", "(", "q", ")", "\n", "scores", "[", "t", ",", ":", ",", "k", ",", "a", ",", "m", "]", "=", "np", ".", "array", "(", "ss", ")", "\n", "", "", "", "", "self", ".", "eval", "=", "{", "\n", "'params'", ":", "p", ",", "\n", "'counts'", ":", "[", "T", ",", "R", ",", "K", ",", "A", ",", "M", "]", ",", "\n", "'date'", ":", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "'precision'", ":", "precision", ",", "\n", "'recall'", ":", "recall", ",", "\n", "'scores'", ":", "scores", ",", "\n", "}", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'DONE (t={:0.2f}s).'", ".", "format", "(", "toc", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.anchor_accumulate": [[653, 759], ["print", "time.time", "len", "len", "len", "len", "set", "set", "set", "set", "len", "len", "enumerate", "time.time", "print", "print", "len", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.ones", "map", "enumerate", "datetime.datetime.now().strftime", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "map", "numpy.concatenate", "numpy.concatenate", "numpy.argsort", "numpy.argsort", "numpy.concatenate", "numpy.concatenate", "numpy.count_nonzero", "numpy.count_nonzero", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.cumsum().astype", "numpy.cumsum().astype", "numpy.cumsum().astype", "numpy.cumsum().astype", "enumerate", "datetime.datetime.now", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "zip", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "pr.tolist.tolist.tolist", "q.tolist.tolist.tolist", "range", "numpy.searchsorted", "numpy.searchsorted", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "tuple", "numpy.cumsum", "numpy.cumsum", "numpy.cumsum", "numpy.cumsum", "enumerate", "numpy.spacing", "numpy.spacing"], "methods", ["None"], ["", "def", "anchor_accumulate", "(", "self", ",", "p", "=", "None", ")", ":", "\n", "        ", "'''\n        Accumulate per image evaluation results and store the result in self.eval\n        :param p: input params for evaluation\n        :return: None\n        '''", "\n", "print", "(", "'Accumulating evaluation results...'", ")", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "not", "self", ".", "anchor_evalImgs", ":", "\n", "            ", "print", "(", "'Please run evaluate() first'", ")", "\n", "# allows input customized parameters", "\n", "", "if", "p", "is", "None", ":", "\n", "            ", "p", "=", "self", ".", "params", "\n", "", "p", ".", "anchor_catIds", "=", "p", ".", "anchor_catIds", "if", "p", ".", "useCats", "==", "1", "else", "[", "-", "1", "]", "\n", "T", "=", "len", "(", "p", ".", "iouThrs", ")", "\n", "R", "=", "len", "(", "p", ".", "recThrs", ")", "\n", "K", "=", "len", "(", "p", ".", "anchor_catIds", ")", "if", "p", ".", "useCats", "else", "1", "\n", "A", "=", "len", "(", "p", ".", "areaRng", ")", "\n", "M", "=", "len", "(", "p", ".", "maxDets", ")", "\n", "precision", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "R", ",", "K", ",", "A", ",", "M", ")", ")", "# -1 for the precision of absent categories", "\n", "recall", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "K", ",", "A", ",", "M", ")", ")", "\n", "scores", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "R", ",", "K", ",", "A", ",", "M", ")", ")", "\n", "\n", "# create dictionary for future indexing", "\n", "_pe", "=", "self", ".", "_paramsEval", "\n", "anchor_catIds", "=", "_pe", ".", "anchor_catIds", "if", "_pe", ".", "useCats", "else", "[", "-", "1", "]", "\n", "setK", "=", "set", "(", "anchor_catIds", ")", "\n", "setA", "=", "set", "(", "map", "(", "tuple", ",", "_pe", ".", "areaRng", ")", ")", "\n", "setM", "=", "set", "(", "_pe", ".", "maxDets", ")", "\n", "setI", "=", "set", "(", "_pe", ".", "imgIds", ")", "\n", "# get inds to evaluate", "\n", "k_list", "=", "[", "n", "for", "n", ",", "k", "in", "enumerate", "(", "p", ".", "anchor_catIds", ")", "if", "k", "in", "setK", "]", "\n", "m_list", "=", "[", "m", "for", "n", ",", "m", "in", "enumerate", "(", "p", ".", "maxDets", ")", "if", "m", "in", "setM", "]", "\n", "a_list", "=", "[", "n", "for", "n", ",", "a", "in", "enumerate", "(", "map", "(", "lambda", "x", ":", "tuple", "(", "x", ")", ",", "p", ".", "areaRng", ")", ")", "if", "a", "in", "setA", "]", "\n", "i_list", "=", "[", "n", "for", "n", ",", "i", "in", "enumerate", "(", "p", ".", "imgIds", ")", "if", "i", "in", "setI", "]", "\n", "I0", "=", "len", "(", "_pe", ".", "imgIds", ")", "\n", "A0", "=", "len", "(", "_pe", ".", "areaRng", ")", "\n", "# retrieve E at each category, area range, and max number of detections", "\n", "for", "k", ",", "k0", "in", "enumerate", "(", "k_list", ")", ":", "\n", "            ", "Nk", "=", "k0", "*", "A0", "*", "I0", "\n", "for", "a", ",", "a0", "in", "enumerate", "(", "a_list", ")", ":", "\n", "                ", "Na", "=", "a0", "*", "I0", "\n", "for", "m", ",", "maxDet", "in", "enumerate", "(", "m_list", ")", ":", "\n", "                    ", "E", "=", "[", "self", ".", "anchor_evalImgs", "[", "Nk", "+", "Na", "+", "i", "]", "for", "i", "in", "i_list", "]", "\n", "E", "=", "[", "e", "for", "e", "in", "E", "if", "not", "e", "is", "None", "]", "\n", "if", "len", "(", "E", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "dtScores", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtScores'", "]", "[", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ")", "\n", "\n", "# different sorting method generates slightly different results.", "\n", "# mergesort is used to be consistent as Matlab implementation.", "\n", "inds", "=", "np", ".", "argsort", "(", "-", "dtScores", ",", "kind", "=", "'mergesort'", ")", "\n", "dtScoresSorted", "=", "dtScores", "[", "inds", "]", "\n", "\n", "dtm", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtMatches'", "]", "[", ":", ",", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "inds", "]", "\n", "dtIg", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtIgnore'", "]", "[", ":", ",", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "inds", "]", "\n", "gtIg", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'gtIgnore'", "]", "for", "e", "in", "E", "]", ")", "\n", "npig", "=", "np", ".", "count_nonzero", "(", "gtIg", "==", "0", ")", "\n", "if", "npig", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "tps", "=", "np", ".", "logical_and", "(", "dtm", ",", "np", ".", "logical_not", "(", "dtIg", ")", ")", "\n", "fps", "=", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "dtm", ")", ",", "np", ".", "logical_not", "(", "dtIg", ")", ")", "\n", "\n", "tp_sum", "=", "np", ".", "cumsum", "(", "tps", ",", "axis", "=", "1", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float", ")", "\n", "fp_sum", "=", "np", ".", "cumsum", "(", "fps", ",", "axis", "=", "1", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float", ")", "\n", "for", "t", ",", "(", "tp", ",", "fp", ")", "in", "enumerate", "(", "zip", "(", "tp_sum", ",", "fp_sum", ")", ")", ":", "\n", "                        ", "tp", "=", "np", ".", "array", "(", "tp", ")", "\n", "fp", "=", "np", ".", "array", "(", "fp", ")", "\n", "nd", "=", "len", "(", "tp", ")", "\n", "rc", "=", "tp", "/", "npig", "\n", "pr", "=", "tp", "/", "(", "fp", "+", "tp", "+", "np", ".", "spacing", "(", "1", ")", ")", "\n", "q", "=", "np", ".", "zeros", "(", "(", "R", ",", ")", ")", "\n", "ss", "=", "np", ".", "zeros", "(", "(", "R", ",", ")", ")", "\n", "\n", "if", "nd", ":", "\n", "                            ", "recall", "[", "t", ",", "k", ",", "a", ",", "m", "]", "=", "rc", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                            ", "recall", "[", "t", ",", "k", ",", "a", ",", "m", "]", "=", "0", "\n", "\n", "# numpy is slow without cython optimization for accessing elements", "\n", "# use python array gets significant speed improvement", "\n", "", "pr", "=", "pr", ".", "tolist", "(", ")", ";", "q", "=", "q", ".", "tolist", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nd", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "                            ", "if", "pr", "[", "i", "]", ">", "pr", "[", "i", "-", "1", "]", ":", "\n", "                                ", "pr", "[", "i", "-", "1", "]", "=", "pr", "[", "i", "]", "\n", "\n", "", "", "inds", "=", "np", ".", "searchsorted", "(", "rc", ",", "p", ".", "recThrs", ",", "side", "=", "'left'", ")", "\n", "try", ":", "\n", "                            ", "for", "ri", ",", "pi", "in", "enumerate", "(", "inds", ")", ":", "\n", "                                ", "q", "[", "ri", "]", "=", "pr", "[", "pi", "]", "\n", "ss", "[", "ri", "]", "=", "dtScoresSorted", "[", "pi", "]", "\n", "", "", "except", ":", "\n", "                            ", "pass", "\n", "", "precision", "[", "t", ",", ":", ",", "k", ",", "a", ",", "m", "]", "=", "np", ".", "array", "(", "q", ")", "\n", "scores", "[", "t", ",", ":", ",", "k", ",", "a", ",", "m", "]", "=", "np", ".", "array", "(", "ss", ")", "\n", "", "", "", "", "self", ".", "eval", "=", "{", "\n", "'params'", ":", "p", ",", "\n", "'counts'", ":", "[", "T", ",", "R", ",", "K", ",", "A", ",", "M", "]", ",", "\n", "'date'", ":", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "'precision'", ":", "precision", ",", "\n", "'recall'", ":", "recall", ",", "\n", "'scores'", ":", "scores", ",", "\n", "}", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'DONE (t={:0.2f}s).'", ".", "format", "(", "toc", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.anchor_evaluateImg": [[760, 839], ["numpy.argsort", "numpy.argsort", "numpy.argsort", "numpy.argsort", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "numpy.array().reshape", "numpy.array().reshape", "numpy.logical_or", "numpy.logical_or", "int", "enumerate", "numpy.logical_and", "numpy.logical_and", "len", "len", "len", "len", "enumerate", "numpy.array", "numpy.array", "len", "numpy.repeat", "numpy.repeat", "min", "enumerate"], "methods", ["None"], ["", "def", "anchor_evaluateImg", "(", "self", ",", "imgId", ",", "catId", ",", "aRng", ",", "maxDet", ")", ":", "\n", "        ", "'''\n        perform evaluation for single category and image\n        :return: dict (single image results)\n        '''", "\n", "p", "=", "self", ".", "params", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gt", "=", "self", ".", "_anchor_gts", "[", "imgId", ",", "catId", "]", "\n", "dt", "=", "self", ".", "_anchor_dts", "[", "imgId", ",", "catId", "]", "\n", "", "else", ":", "\n", "            ", "gt", "=", "[", "_", "for", "cId", "in", "p", ".", "anchor_catIds", "for", "_", "in", "self", ".", "_anchor_gts", "[", "imgId", ",", "cId", "]", "]", "\n", "dt", "=", "[", "_", "for", "cId", "in", "p", ".", "anchor_catIds", "for", "_", "in", "self", ".", "_anchor_dts", "[", "imgId", ",", "cId", "]", "]", "\n", "", "if", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "for", "g", "in", "gt", ":", "\n", "            ", "if", "g", "[", "'ignore'", "]", "or", "(", "g", "[", "'area'", "]", "<", "aRng", "[", "0", "]", "or", "g", "[", "'area'", "]", ">", "aRng", "[", "1", "]", ")", ":", "\n", "                ", "g", "[", "'_ignore'", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "g", "[", "'_ignore'", "]", "=", "0", "\n", "\n", "# sort dt highest score first, sort gt ignore last", "\n", "", "", "gtind", "=", "np", ".", "argsort", "(", "[", "g", "[", "'_ignore'", "]", "for", "g", "in", "gt", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "gt", "=", "[", "gt", "[", "i", "]", "for", "i", "in", "gtind", "]", "\n", "dtind", "=", "np", ".", "argsort", "(", "[", "-", "d", "[", "'anchor_score'", "]", "for", "d", "in", "dt", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "dt", "=", "[", "dt", "[", "i", "]", "for", "i", "in", "dtind", "[", "0", ":", "maxDet", "]", "]", "\n", "iscrowd", "=", "[", "int", "(", "o", "[", "'iscrowd'", "]", ")", "for", "o", "in", "gt", "]", "\n", "# load computed ious", "\n", "ious", "=", "self", ".", "ious", "[", "imgId", ",", "catId", "]", "[", ":", ",", "gtind", "]", "if", "len", "(", "self", ".", "ious", "[", "imgId", ",", "catId", "]", ")", ">", "0", "else", "self", ".", "ious", "[", "imgId", ",", "catId", "]", "# ious between all gts and dts", "\n", "\n", "T", "=", "len", "(", "p", ".", "iouThrs", ")", "\n", "G", "=", "len", "(", "gt", ")", "\n", "D", "=", "len", "(", "dt", ")", "\n", "gtm", "=", "np", ".", "zeros", "(", "(", "T", ",", "G", ")", ")", "\n", "dtm", "=", "np", ".", "zeros", "(", "(", "T", ",", "D", ")", ")", "\n", "gtIg", "=", "np", ".", "array", "(", "[", "g", "[", "'_ignore'", "]", "for", "g", "in", "gt", "]", ")", "\n", "dtIg", "=", "np", ".", "zeros", "(", "(", "T", ",", "D", ")", ")", "\n", "if", "not", "len", "(", "ious", ")", "==", "0", ":", "\n", "            ", "for", "tind", ",", "t", "in", "enumerate", "(", "p", ".", "iouThrs", ")", ":", "\n", "                ", "for", "dind", ",", "d", "in", "enumerate", "(", "dt", ")", ":", "\n", "# information about best match so far (m=-1 -> unmatched)", "\n", "                    ", "iou", "=", "min", "(", "[", "t", ",", "1", "-", "1e-10", "]", ")", "\n", "m", "=", "-", "1", "\n", "for", "gind", ",", "g", "in", "enumerate", "(", "gt", ")", ":", "\n", "# if this gt already matched, and not a crowd, continue", "\n", "                        ", "if", "gtm", "[", "tind", ",", "gind", "]", ">", "0", "and", "not", "iscrowd", "[", "gind", "]", ":", "\n", "                            ", "continue", "\n", "# if dt matched to reg gt, and on ignore gt, stop", "\n", "", "if", "m", ">", "-", "1", "and", "gtIg", "[", "m", "]", "==", "0", "and", "gtIg", "[", "gind", "]", "==", "1", ":", "\n", "                            ", "break", "\n", "# continue to next gt unless better match made", "\n", "", "if", "ious", "[", "dind", ",", "gind", "]", "<", "iou", ":", "\n", "                            ", "continue", "\n", "# if match successful and best so far, store appropriately", "\n", "", "iou", "=", "ious", "[", "dind", ",", "gind", "]", "\n", "m", "=", "gind", "\n", "# if match made store id of match for both dt and gt", "\n", "", "if", "m", "==", "-", "1", ":", "\n", "                        ", "continue", "\n", "", "dtIg", "[", "tind", ",", "dind", "]", "=", "gtIg", "[", "m", "]", "\n", "dtm", "[", "tind", ",", "dind", "]", "=", "gt", "[", "m", "]", "[", "'id'", "]", "\n", "gtm", "[", "tind", ",", "m", "]", "=", "d", "[", "'id'", "]", "\n", "# set unmatched detections outside of area range to ignore", "\n", "", "", "", "a", "=", "np", ".", "array", "(", "[", "d", "[", "'area'", "]", "<", "aRng", "[", "0", "]", "or", "d", "[", "'area'", "]", ">", "aRng", "[", "1", "]", "for", "d", "in", "dt", "]", ")", ".", "reshape", "(", "(", "1", ",", "len", "(", "dt", ")", ")", ")", "\n", "dtIg", "=", "np", ".", "logical_or", "(", "dtIg", ",", "np", ".", "logical_and", "(", "dtm", "==", "0", ",", "np", ".", "repeat", "(", "a", ",", "T", ",", "0", ")", ")", ")", "\n", "# store results for given image and category", "\n", "\n", "return", "{", "\n", "'image_id'", ":", "imgId", ",", "\n", "'category_id'", ":", "catId", ",", "\n", "'aRng'", ":", "aRng", ",", "\n", "'maxDet'", ":", "maxDet", ",", "\n", "'dtIds'", ":", "[", "d", "[", "'id'", "]", "for", "d", "in", "dt", "]", ",", "#  stores all the predict_instance_id if the predict_instance category the same as catID;", "\n", "'gtIds'", ":", "[", "g", "[", "'id'", "]", "for", "g", "in", "gt", "]", ",", "#  stores all the GT_instance_id if the GT_instance category the same as catID; cloud be [] if there is no gt_instance in the image of class catID", "\n", "'dtMatches'", ":", "dtm", ",", "# if 'gtIds' = [] this must be ([[0],[0]...])", "\n", "'gtMatches'", ":", "gtm", ",", "# if 'gtIds' = [] this must be blank", "\n", "'dtScores'", ":", "[", "d", "[", "'anchor_score'", "]", "for", "d", "in", "dt", "]", ",", "\n", "'gtIgnore'", ":", "gtIg", ",", "\n", "'dtIgnore'", ":", "dtIg", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Mirror3dCOCOeval.chris_summarize": [[841, 878], ["print", "len", "numpy.mean", "numpy.mean", "mirror3d_AP_eval.Mirror3dCOCOeval.chris_summarize._summarize"], "methods", ["None"], ["", "def", "chris_summarize", "(", "self", ",", "tag", ")", ":", "\n", "        ", "'''\n        Compute and display summary metrics for evaluation results.\n        Note this functin can *only* be applied on the default parameter setting\n        '''", "\n", "def", "_summarize", "(", "ap", "=", "1", ",", "iouThr", "=", "None", ",", "areaRng", "=", "'all'", ",", "maxDets", "=", "100", ")", ":", "\n", "            ", "p", "=", "self", ".", "params", "\n", "iStr", "=", "' {:<18} {} @[ IoU={:<9} | area={:>6s} | maxDets={:>3d} ] = {:0.3f}'", "\n", "titleStr", "=", "'Average Precision'", "if", "ap", "==", "1", "else", "'Average Recall'", "\n", "typeStr", "=", "'(AP)'", "if", "ap", "==", "1", "else", "'(AR)'", "\n", "iouStr", "=", "'{:0.2f}:{:0.2f}'", ".", "format", "(", "p", ".", "iouThrs", "[", "0", "]", ",", "p", ".", "iouThrs", "[", "-", "1", "]", ")", "if", "iouThr", "is", "None", "else", "'{:0.2f}'", ".", "format", "(", "iouThr", ")", "\n", "\n", "aind", "=", "[", "i", "for", "i", ",", "aRng", "in", "enumerate", "(", "p", ".", "areaRngLbl", ")", "if", "aRng", "==", "areaRng", "]", "\n", "mind", "=", "[", "i", "for", "i", ",", "mDet", "in", "enumerate", "(", "p", ".", "maxDets", ")", "if", "mDet", "==", "maxDets", "]", "\n", "if", "ap", "==", "1", ":", "\n", "# dimension of precision: [TxRxKxAxM]", "\n", "                ", "s", "=", "self", ".", "eval", "[", "'precision'", "]", "\n", "# IoU", "\n", "if", "iouThr", "is", "not", "None", ":", "\n", "                    ", "t", "=", "np", ".", "where", "(", "iouThr", "==", "p", ".", "iouThrs", ")", "[", "0", "]", "\n", "s", "=", "s", "[", "t", "]", "\n", "", "s", "=", "s", "[", ":", ",", ":", ",", ":", ",", "aind", ",", "mind", "]", "\n", "", "else", ":", "\n", "# dimension of recall: [TxKxAxM]", "\n", "                ", "s", "=", "self", ".", "eval", "[", "'recall'", "]", "\n", "if", "iouThr", "is", "not", "None", ":", "\n", "                    ", "t", "=", "np", ".", "where", "(", "iouThr", "==", "p", ".", "iouThrs", ")", "[", "0", "]", "\n", "s", "=", "s", "[", "t", "]", "\n", "", "s", "=", "s", "[", ":", ",", ":", ",", "aind", ",", "mind", "]", "\n", "", "if", "len", "(", "s", "[", "s", ">", "-", "1", "]", ")", "==", "0", ":", "\n", "                ", "mean_s", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "mean_s", "=", "np", ".", "mean", "(", "s", "[", "s", ">", "-", "1", "]", ")", "\n", "", "return", "mean_s", "\n", "", "title", "=", "tag", "+", "\"_AP\"", "\n", "print", "(", "\"| {:45} | IOU 0.5:0.95 |  {:5f} |\"", ".", "format", "(", "title", ",", "_summarize", "(", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Planercnn_Params.setDetParams": [[884, 895], ["numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "int", "int", "numpy.round", "numpy.round", "numpy.round", "numpy.round"], "methods", ["None"], ["def", "setDetParams", "(", "self", ")", ":", "\n", "        ", "self", ".", "imgIds", "=", "[", "]", "\n", "self", ".", "catIds", "=", "[", "]", "\n", "self", ".", "anchor_catIds", "=", "[", "]", "\n", "# np.arange causes trouble.  the data point on arange is slightly larger than the true value", "\n", "self", ".", "iouThrs", "=", "np", ".", "linspace", "(", ".5", ",", "0.95", ",", "int", "(", "np", ".", "round", "(", "(", "0.95", "-", ".5", ")", "/", ".05", ")", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "self", ".", "recThrs", "=", "np", ".", "linspace", "(", ".0", ",", "1.00", ",", "int", "(", "np", ".", "round", "(", "(", "1.00", "-", ".0", ")", "/", ".01", ")", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "self", ".", "maxDets", "=", "[", "1", ",", "10", ",", "100", "]", "\n", "self", ".", "areaRng", "=", "[", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "[", "0", "**", "2", ",", "32", "**", "2", "]", ",", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", "]", "\n", "self", ".", "areaRngLbl", "=", "[", "'all'", ",", "'small'", ",", "'medium'", ",", "'large'", "]", "\n", "self", ".", "useCats", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Planercnn_Params.setKpParams": [[896, 908], ["numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.array", "numpy.array", "int", "int", "numpy.round", "numpy.round", "numpy.round", "numpy.round"], "methods", ["None"], ["", "def", "setKpParams", "(", "self", ")", ":", "\n", "        ", "self", ".", "imgIds", "=", "[", "]", "\n", "self", ".", "catIds", "=", "[", "]", "\n", "self", ".", "anchor_catIds", "=", "[", "]", "\n", "# np.arange causes trouble.  the data point on arange is slightly larger than the true value", "\n", "self", ".", "iouThrs", "=", "np", ".", "linspace", "(", ".5", ",", "0.95", ",", "int", "(", "np", ".", "round", "(", "(", "0.95", "-", ".5", ")", "/", ".05", ")", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "self", ".", "recThrs", "=", "np", ".", "linspace", "(", ".0", ",", "1.00", ",", "int", "(", "np", ".", "round", "(", "(", "1.00", "-", ".0", ")", "/", ".01", ")", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "self", ".", "maxDets", "=", "[", "20", "]", "\n", "self", ".", "areaRng", "=", "[", "[", "0", "**", "2", ",", "1e5", "**", "2", "]", ",", "[", "32", "**", "2", ",", "96", "**", "2", "]", ",", "[", "96", "**", "2", ",", "1e5", "**", "2", "]", "]", "\n", "self", ".", "areaRngLbl", "=", "[", "'all'", ",", "'medium'", ",", "'large'", "]", "\n", "self", ".", "useCats", "=", "1", "\n", "self", ".", "kpt_oks_sigmas", "=", "np", ".", "array", "(", "[", ".26", ",", ".25", ",", ".25", ",", ".35", ",", ".35", ",", ".79", ",", ".79", ",", ".72", ",", ".72", ",", ".62", ",", ".62", ",", "1.07", ",", "1.07", ",", ".87", ",", ".87", ",", ".89", ",", ".89", "]", ")", "/", "10.0", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Planercnn_Params.__init__": [[909, 919], ["mirror3d_AP_eval.Planercnn_Params.setDetParams", "mirror3d_AP_eval.Planercnn_Params.setKpParams", "Exception"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Planercnn_Params.setDetParams", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_AP_eval.Planercnn_Params.setKpParams"], ["", "def", "__init__", "(", "self", ",", "iouType", "=", "'segm'", ")", ":", "\n", "        ", "if", "iouType", "==", "'segm'", "or", "iouType", "==", "'bbox'", ":", "\n", "            ", "self", ".", "setDetParams", "(", ")", "\n", "", "elif", "iouType", "==", "'keypoints'", ":", "\n", "            ", "self", ".", "setKpParams", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'iouType not supported'", ")", "\n", "", "self", ".", "iouType", "=", "iouType", "\n", "# useSegm is deprecated", "\n", "self", ".", "useSegm", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.__init__": [[27, 45], ["dict", "dict", "dict", "dict", "collections.defaultdict", "collections.defaultdict", "print", "time.time", "json.load", "print", "mirror3d_coco.mirror3d_COCO.createIndex", "open", "type", "type", "time.time"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.createIndex"], ["\n", "from", "pycocotools", ".", "coco", "import", "COCO", "\n", "\n", "timer", "=", "Timer", "(", ")", "\n", "json_file", "=", "PathManager", ".", "get_local_path", "(", "json_file", ")", "\n", "with", "contextlib", ".", "redirect_stdout", "(", "io", ".", "StringIO", "(", ")", ")", ":", "\n", "        ", "coco_api", "=", "COCO", "(", "json_file", ")", "\n", "", "if", "timer", ".", "seconds", "(", ")", ">", "1", ":", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.createIndex": [[46, 76], ["print", "print", "collections.defaultdict", "collections.defaultdict", "imgToAnns[].append", "catToImgs[].append"], "methods", ["None"], ["        ", "logger", ".", "info", "(", "\"Loading {} takes {:.2f} seconds.\"", ".", "format", "(", "json_file", ",", "timer", ".", "seconds", "(", ")", ")", ")", "\n", "\n", "", "id_map", "=", "None", "\n", "if", "dataset_name", "is", "not", "None", ":", "\n", "        ", "meta", "=", "MetadataCatalog", ".", "get", "(", "dataset_name", ")", "\n", "cat_ids", "=", "sorted", "(", "coco_api", ".", "getCatIds", "(", ")", ")", "\n", "cats", "=", "coco_api", ".", "loadCats", "(", "cat_ids", ")", "\n", "# The categories in a custom json file may not be sorted.", "\n", "thing_classes", "=", "[", "c", "[", "\"name\"", "]", "for", "c", "in", "sorted", "(", "cats", ",", "key", "=", "lambda", "x", ":", "x", "[", "\"id\"", "]", ")", "]", "\n", "meta", ".", "thing_classes", "=", "thing_classes", "\n", "\n", "# In COCO, certain category ids are artificially removed,", "\n", "# and by convention they are always ignored.", "\n", "# We deal with COCO's id issue and translate", "\n", "# the category ids to contiguous ids in [0, 80).", "\n", "\n", "# It works by looking at the \"categories\" field in the json, therefore", "\n", "# if users' own json also have incontiguous ids, we'll", "\n", "# apply this mapping as well but print a warning.", "\n", "if", "not", "(", "min", "(", "cat_ids", ")", "==", "1", "and", "max", "(", "cat_ids", ")", "==", "len", "(", "cat_ids", ")", ")", ":", "\n", "            ", "if", "\"coco\"", "not", "in", "dataset_name", ":", "\n", "                ", "logger", ".", "warning", "(", "\n", "\"\"\"\n                    Category ids in annotations are not in [1, #categories]! We'll apply a mapping for you.\n                    \"\"\"", "\n", ")", "\n", "", "", "id_map", "=", "{", "v", ":", "i", "for", "i", ",", "v", "in", "enumerate", "(", "cat_ids", ")", "}", "# gt_classes would start from 0 ", "\n", "meta", ".", "thing_dataset_id_to_contiguous_id", "=", "id_map", "\n", "\n", "# sort indices for reproducible results", "\n", "", "img_ids", "=", "sorted", "(", "list", "(", "coco_api", ".", "imgs", ".", "keys", "(", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.info": [[77, 84], ["mirror3d_coco.mirror3d_COCO.dataset[].items", "print"], "methods", ["None"], ["# imgs is a list of dicts, each looks something like:", "\n", "# {'license': 4,", "\n", "#  'url': 'http://farm6.staticflickr.com/5454/9413846304_881d5e5c3b_z.jpg',", "\n", "#  'file_name': 'COCO_val2014_000000001268.jpg',", "\n", "#  'height': 427,", "\n", "#  'width': 640,", "\n", "#  'date_captured': '2013-11-17 05:57:24',", "\n", "#  'id': 1268}", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.getAnnIds": [[85, 112], ["mirror3d_coco._isArrayLike", "mirror3d_coco._isArrayLike", "len", "len", "len", "list", "len", "itertools.chain.from_iterable", "len", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco._isArrayLike", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco._isArrayLike"], ["imgs", "=", "coco_api", ".", "loadImgs", "(", "img_ids", ")", "\n", "# anns is a list[list[dict]], where each dict is an annotation", "\n", "# record for an object. The inner list enumerates the objects in an image", "\n", "# and the outer list enumerates over images. Example of anns[0]:", "\n", "# [{'segmentation': [[192.81,", "\n", "#     247.09,", "\n", "#     ...", "\n", "#     219.03,", "\n", "#     249.06]],", "\n", "#   'area': 1035.749,", "\n", "#   'iscrowd': 0,", "\n", "#   'image_id': 1268,", "\n", "#   'bbox': [192.81, 224.8, 74.73, 33.43],", "\n", "#   'category_id': 16,", "\n", "#   'id': 42986},", "\n", "#  ...]", "\n", "anns", "=", "[", "coco_api", ".", "imgToAnns", "[", "img_id", "]", "for", "img_id", "in", "img_ids", "]", "\n", "\n", "if", "\"minival\"", "not", "in", "json_file", ":", "\n", "# The popular valminusminival & minival annotations for COCO2014 contain this bug.", "\n", "# However the ratio of buggy annotations there is tiny and does not affect accuracy.", "\n", "# Therefore we explicitly white-list them.", "\n", "        ", "ann_ids", "=", "[", "ann", "[", "\"id\"", "]", "for", "anns_per_image", "in", "anns", "for", "ann", "in", "anns_per_image", "]", "\n", "assert", "len", "(", "set", "(", "ann_ids", ")", ")", "==", "len", "(", "ann_ids", ")", ",", "\"Annotation ids in '{}' are not unique!\"", ".", "format", "(", "\n", "json_file", "\n", ")", "\n", "\n", "", "imgs_anns", "=", "list", "(", "zip", "(", "imgs", ",", "anns", ")", ")", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.getCatIds": [[113, 134], ["mirror3d_coco._isArrayLike", "mirror3d_coco._isArrayLike", "mirror3d_coco._isArrayLike", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco._isArrayLike", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco._isArrayLike", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco._isArrayLike"], ["\n", "logger", ".", "info", "(", "\"Loaded {} images in COCO format from {}\"", ".", "format", "(", "len", "(", "imgs_anns", ")", ",", "json_file", ")", ")", "\n", "\n", "dataset_dicts", "=", "[", "]", "\n", "\n", "ann_keys", "=", "[", "\"iscrowd\"", ",", "\"bbox\"", ",", "\"keypoints\"", ",", "\"category_id\"", "]", "+", "(", "extra_annotation_keys", "or", "[", "]", ")", "\n", "\n", "num_instances_without_valid_segmentation", "=", "0", "\n", "for", "(", "img_dict", ",", "anno_dict_list", ")", "in", "imgs_anns", ":", "\n", "        ", "record", "=", "{", "}", "\n", "if", "image_root", ":", "\n", "            ", "record", "[", "\"mirror_color_image_path\"", "]", "=", "os", ".", "path", ".", "join", "(", "image_root", ",", "img_dict", "[", "\"mirror_color_image_path\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "record", "[", "\"mirror_color_image_path\"", "]", "=", "img_dict", "[", "\"mirror_color_image_path\"", "]", "\n", "", "if", "\"mirror_instance_mask_path\"", "in", "img_dict", ":", "\n", "            ", "record", "[", "\"mirror_instance_mask_path\"", "]", "=", "os", ".", "path", ".", "join", "(", "image_root", ",", "img_dict", "[", "\"mirror_instance_mask_path\"", "]", ")", "\n", "", "if", "\"raw_sensorD_path\"", "in", "img_dict", ":", "\n", "            ", "record", "[", "\"raw_sensorD_path\"", "]", "=", "os", ".", "path", ".", "join", "(", "image_root", ",", "img_dict", "[", "\"raw_sensorD_path\"", "]", ")", "\n", "", "if", "\"refined_sensorD_path\"", "in", "img_dict", ":", "\n", "            ", "record", "[", "\"refined_sensorD_path\"", "]", "=", "os", ".", "path", ".", "join", "(", "image_root", ",", "img_dict", "[", "\"refined_sensorD_path\"", "]", ")", "\n", "", "if", "\"raw_meshD_path\"", "in", "img_dict", ":", "\n", "            ", "record", "[", "\"raw_meshD_path\"", "]", "=", "os", ".", "path", ".", "join", "(", "image_root", ",", "img_dict", "[", "\"raw_meshD_path\"", "]", ")", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.getImgIds": [[135, 155], ["list", "mirror3d_coco._isArrayLike", "mirror3d_coco._isArrayLike", "len", "len", "mirror3d_coco.mirror3d_COCO.imgs.keys", "set", "enumerate", "set", "set", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco._isArrayLike", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco._isArrayLike"], ["", "if", "\"refined_meshD_path\"", "in", "img_dict", ":", "\n", "            ", "record", "[", "\"refined_meshD_path\"", "]", "=", "os", ".", "path", ".", "join", "(", "image_root", ",", "img_dict", "[", "\"refined_meshD_path\"", "]", ")", "\n", "", "record", "[", "\"height\"", "]", "=", "img_dict", "[", "\"height\"", "]", "\n", "record", "[", "\"width\"", "]", "=", "img_dict", "[", "\"width\"", "]", "\n", "record", "[", "\"dataset_name\"", "]", "=", "dataset_name", "\n", "\n", "\n", "\n", "image_id", "=", "record", "[", "\"image_id\"", "]", "=", "img_dict", "[", "\"id\"", "]", "\n", "\n", "objs", "=", "[", "]", "\n", "for", "anno", "in", "anno_dict_list", ":", "\n", "# Check that the image_id in this annotation is the same as", "\n", "# the image_id we're looking at.", "\n", "# This fails only when the data parsing logic or the annotation file is buggy.", "\n", "\n", "# The original COCO valminusminival2014 & minival2014 annotation files", "\n", "# actually contains bugs that, together with certain ways of using COCO API,", "\n", "# can trigger this assertion.", "\n", "            ", "assert", "anno", "[", "\"image_id\"", "]", "==", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadAnns": [[156, 166], ["mirror3d_coco._isArrayLike", "type"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco._isArrayLike"], ["assert", "anno", ".", "get", "(", "\"ignore\"", ",", "0", ")", "==", "0", "\n", "\n", "obj", "=", "{", "key", ":", "anno", "[", "key", "]", "for", "key", "in", "ann_keys", "if", "key", "in", "anno", "}", "\n", "\n", "segm", "=", "anno", ".", "get", "(", "\"segmentation\"", ",", "None", ")", "\n", "if", "segm", ":", "# either list[list[float]] or dict(RLE)", "\n", "                ", "if", "not", "isinstance", "(", "segm", ",", "dict", ")", ":", "\n", "# filter out invalid polygons (< 3 points)", "\n", "                    ", "segm", "=", "[", "poly", "for", "poly", "in", "segm", "if", "len", "(", "poly", ")", "%", "2", "==", "0", "and", "len", "(", "poly", ")", ">=", "6", "]", "\n", "if", "len", "(", "segm", ")", "==", "0", ":", "\n", "                        ", "num_instances_without_valid_segmentation", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadCats": [[167, 177], ["mirror3d_coco._isArrayLike", "type"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco._isArrayLike"], ["continue", "# ignore this instance", "\n", "", "", "obj", "[", "\"segmentation\"", "]", "=", "segm", "\n", "\n", "", "keypts", "=", "anno", ".", "get", "(", "\"keypoints\"", ",", "None", ")", "\n", "if", "keypts", ":", "# list[int]", "\n", "                ", "for", "idx", ",", "v", "in", "enumerate", "(", "keypts", ")", ":", "\n", "                    ", "if", "idx", "%", "3", "!=", "2", ":", "\n", "# COCO's segmentation coordinates are floating points in [0, H or W],", "\n", "# but keypoint coordinates are integers in [0, H-1 or W-1]", "\n", "# Therefore we assume the coordinates are \"pixel indices\" and", "\n", "# add 0.5 to convert to floating point coordinates.", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadImgs": [[178, 188], ["mirror3d_coco._isArrayLike", "type"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco._isArrayLike"], ["                        ", "keypts", "[", "idx", "]", "=", "v", "+", "0.5", "\n", "", "", "obj", "[", "\"keypoints\"", "]", "=", "keypts", "\n", "\n", "", "obj", "[", "\"bbox_mode\"", "]", "=", "BoxMode", ".", "XYWH_ABS", "\n", "if", "id_map", ":", "\n", "                ", "obj", "[", "\"category_id\"", "]", "=", "id_map", "[", "obj", "[", "\"category_id\"", "]", "]", "\n", "if", "\"anchor_normal_class\"", "in", "anno", ":", "\n", "                    ", "obj", "[", "\"anchor_normal_residual\"", "]", "=", "anno", "[", "\"anchor_normal_residual\"", "]", "\n", "obj", "[", "\"anchor_normal_class\"", "]", "=", "anno", "[", "\"anchor_normal_class\"", "]", "\n", "obj", "[", "\"mirror_normal_camera\"", "]", "=", "anno", "[", "\"mirror_normal_camera\"", "]", "\n", "", "", "objs", ".", "append", "(", "obj", ")", "\n"]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.showAnns": [[189, 252], ["len", "matplotlib.gca", "matplotlib.gca.set_autoscale_on", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "Exception", "numpy.array", "matplotlib.plot", "matplotlib.plot", "print", "type", "pycocotools.mask.decode", "numpy.ones", "range", "matplotlib.gca.imshow", "type", "numpy.array", "numpy.all", "numpy.array().reshape", "polygons.append", "color.append", "type", "pycocotools.mask.frPyObjects", "numpy.dstack", "matplotlib.plot", "matplotlib.patches.Polygon", "numpy.array", "numpy.random.random().tolist", "numpy.random.random", "numpy.array", "int", "mirror3d_coco.mirror3d_COCO.loadCats", "numpy.random.random", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadCats"], ["\n", "", "if", "objs", ":", "\n", "            ", "record", "[", "\"annotations\"", "]", "=", "objs", "\n", "", "dataset_dicts", ".", "append", "(", "record", ")", "\n", "\n", "", "if", "num_instances_without_valid_segmentation", ">", "0", ":", "\n", "        ", "logger", ".", "warn", "(", "\n", "\"Filtered out {} instances without valid segmentation. \"", "\n", "\"There might be issues in your dataset generation process.\"", ".", "format", "(", "\n", "num_instances_without_valid_segmentation", "\n", ")", "\n", ")", "\n", "", "return", "dataset_dicts", "\n", "", ""]], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadRes": [[253, 313], ["mirror3d_coco.mirror3d_COCO", "print", "time.time", "print", "mirror3d_coco.mirror3d_COCO.createIndex", "json.load", "type", "set", "enumerate", "type", "open", "type", "mirror3d_coco.mirror3d_COCO.loadNumpyAnnotations", "set", "set", "set", "set", "copy.deepcopy", "enumerate", "type", "mirror3d_coco.mirror3d_COCO.getImgIds", "copy.deepcopy", "enumerate", "time.time", "pycocotools.mask.area", "copy.deepcopy", "enumerate", "pycocotools.mask.toBbox", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.createIndex", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadNumpyAnnotations", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.getImgIds"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.download": [[314, 337], ["len", "enumerate", "print", "len", "mirror3d_coco.mirror3d_COCO.imgs.values", "mirror3d_coco.mirror3d_COCO.loadImgs", "os.path.exists", "os.makedirs", "time.time", "os.path.join", "print", "os.path.exists", "urlretrieve", "time.time"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadImgs"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.loadNumpyAnnotations": [[338, 360], ["print", "print", "range", "type", "print", "int", "int"], "methods", ["None"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.annToRLE": [[361, 381], ["type", "pycocotools.mask.frPyObjects", "pycocotools.mask.merge", "type", "pycocotools.mask.frPyObjects"], "methods", ["None"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco.mirror3d_COCO.get_achorAnnIds": [[383, 410], ["mirror3d_coco._isArrayLike", "mirror3d_coco._isArrayLike", "len", "len", "len", "list", "len", "itertools.chain.from_iterable", "len", "len"], "methods", ["home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco._isArrayLike", "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco._isArrayLike"], []], "home.repos.pwc.inspect_result.3dlg-hcvc_mirror3d.evaluation.mirror3d_coco._isArrayLike": [[21, 23], ["hasattr", "hasattr"], "function", ["None"], []]}