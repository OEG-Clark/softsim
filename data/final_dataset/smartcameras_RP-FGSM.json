{"home.repos.pwc.inspect_result.smartcameras_RP-FGSM.None.rp-fgsm.attack.__init__": [[42, 59], ["libs.misc_functions.createDirectories", "int", "len", "min"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.createDirectories"], ["def", "__init__", "(", "self", ",", "models", ",", "epsilon", ",", "lb", ",", "up", ",", "args", ")", ":", "\n", "\n", "\t\t", "self", ".", "models", "=", "models", "\n", "\n", "# FGSM parameters", "\n", "self", ".", "delta", "=", "1", "/", "255.", "\n", "self", ".", "eps", "=", "args", ".", "eps", "\n", "self", ".", "numIterations", "=", "int", "(", "min", "(", "self", ".", "eps", "*", "255", "*", "1.25", ",", "self", ".", "eps", "*", "255", "+", "4", ")", ")", "*", "len", "(", "self", ".", "models", ")", "\n", "\n", "# Image boundaries", "\n", "self", ".", "lb", "=", "lb", "\n", "self", ".", "up", "=", "up", "\n", "\n", "# Create the folder to export images if not exists", "\n", "self", ".", "adv_path", "=", "createDirectories", "(", "args", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.None.rp-fgsm.attack.getRandom": [[60, 78], ["numpy.empty", "numpy.random.shuffle", "numpy.unique", "int", "len", "numpy.concatenate", "len", "numpy.concatenate", "dict", "zip", "numpy.repeat", "numpy.random.choice"], "methods", ["None"], ["", "def", "getRandom", "(", "self", ",", "options", ",", "howmany", ")", ":", "\n", "\n", "\t\t", "if", "howmany", "!=", "0", ":", "\n", "\t\t\t", "div", "=", "int", "(", "howmany", ")", "/", "len", "(", "options", ")", "\n", "rands", "=", "np", ".", "empty", "(", "0", ",", "dtype", "=", "int", ")", "\n", "for", "option", "in", "options", ":", "\n", "\t\t\t\t", "rands", "=", "np", ".", "concatenate", "(", "(", "rands", ",", "np", ".", "repeat", "(", "option", ",", "div", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "rest", "=", "howmany", "%", "len", "(", "options", ")", "\n", "if", "rest", "!=", "0", ":", "\n", "\t\t\t\t", "rands", "=", "np", ".", "concatenate", "(", "(", "rands", ",", "np", ".", "random", ".", "choice", "(", "options", ",", "size", "=", "rest", ",", "p", "=", "None", ",", "replace", "=", "False", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "np", ".", "random", ".", "shuffle", "(", "rands", ")", "\n", "unique", ",", "counts", "=", "np", ".", "unique", "(", "rands", ",", "return_counts", "=", "True", ")", "\n", "\n", "return", "rands", ",", "dict", "(", "zip", "(", "unique", ",", "counts", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.None.rp-fgsm.attack.generate": [[79, 176], ["classes2target.copy", "numpy.random.randint", "torch.autograd.Variable", "target_class_var.to.to.to", "libs.misc_functions.preprocess_image", "libs.misc_functions.preprocess_image.data.clone", "torch.nn.CrossEntropyLoss", "rp-fgsm.attack.getRandom", "rp-fgsm.attack.getRandom", "range", "range", "f1.write", "libs.misc_functions.saveImage", "torch.from_numpy", "counts.keys", "rp-fgsm.attack.getRandom", "counts.keys", "rp-fgsm.attack.getRandom", "counts.keys", "rp-fgsm.attack.getRandom", "list", "torch.autograd.Variable", "image.to.to.to", "torch.nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.backward", "libs.misc_functions.addNoise_v2", "libs.misc_functions.preprocess_image.data.clone", "libs.misc_functions.from255ToStandar", "len", "torch.nn.functional.softmax().data.squeeze", "torch.nn.functional.softmax().data.squeeze.sort", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "len", "numpy.asarray", "numpy.arange", "libs.misc_functions.standarTo255", "libs.misc_functions.standarise", "numpy.delete", "org_class_prob.item", "target_class_prob.item", "current_class.item", "current_class_prob.item", "len", "image.to.to.clone", "libs.misc_functions.standarise", "numpy.delete", "libs.misc_functions.preprocess_image.clone", "libs.misc_functions.reduce_precision", "libs.misc_functions.standarise", "numpy.delete", "torch.nn.functional.softmax", "image.to.to.clone", "libs.misc_functions.medianFilter", "libs.DiffJPEG.DiffJPEG", "libs.DiffJPEG.DiffJPEG.", "image.to.to.clone", "int", "image.to.to.clone"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.preprocess_image", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.None.rp-fgsm.attack.getRandom", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.None.rp-fgsm.attack.getRandom", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.saveImage", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.None.rp-fgsm.attack.getRandom", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.None.rp-fgsm.attack.getRandom", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.None.rp-fgsm.attack.getRandom", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.addNoise_v2", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.from255ToStandar", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.standarTo255", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.standarise", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.standarise", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.reduce_precision", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.standarise", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.medianFilter"], ["", "", "def", "generate", "(", "self", ",", "original_image", ",", "img_name", ",", "org_class", ",", "classes2target", ",", "f1", ")", ":", "\n", "\n", "\t\t", "all_classes2target", "=", "classes2target", ".", "copy", "(", ")", "\n", "\n", "# Pick randomly target_class from the set", "\n", "rand", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "high", "=", "len", "(", "classes2target", ")", ")", "\n", "target_class", "=", "classes2target", "[", "rand", "]", "\n", "target_class_var", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "[", "target_class", "]", ")", ")", ")", "\n", "\n", "\n", "target_class_var", "=", "target_class_var", ".", "to", "(", "device", ")", "\n", "\n", "# Process image", "\n", "adv_img", "=", "preprocess_image", "(", "original_image", ")", "\n", "org_img", "=", "adv_img", ".", "data", ".", "clone", "(", ")", "\n", "\n", "# Define loss functions", "\n", "ce_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "text", "=", "img_name", "+", "'\\t'", "\n", "\n", "# Start iteration", "\n", "#randsT = np.random.choice([0,1,2,3], size=self.numIterations, p=None)", "\n", "#randsBIT = np.random.choice([1,2,3,4,5,6,7], size=self.numIterations, p=None)", "\n", "#randsMEDIAN = np.random.choice([2,3,5], size=self.numIterations, p=None)", "\n", "#randsJPEG = np.random.choice([25,50,75], size=self.numIterations, p=None)", "\n", "#randsM = np.random.choice(len(self.models), size=self.numIterations, p=None)", "\n", "\n", "'''\n\t\tRandomly choose one of the filter: Bit reduction, Median smoothing or JPEG compression\n\t\tFollowed by randomly choose one parameter for the chosen filter\n\t\t'''", "\n", "randsT", ",", "counts", "=", "self", ".", "getRandom", "(", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "self", ".", "numIterations", ")", "\n", "if", "1", "in", "counts", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "randsBIT", ",", "_", "=", "self", ".", "getRandom", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", ",", "counts", "[", "1", "]", ")", "\n", "#print('BIT', randsBIT)", "\n", "", "if", "2", "in", "counts", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "randsMEDIAN", ",", "_", "=", "self", ".", "getRandom", "(", "[", "2", ",", "3", ",", "5", "]", ",", "counts", "[", "2", "]", ")", "\n", "#print('MEDIAN', randsMEDIAN)", "\n", "", "if", "3", "in", "counts", ".", "keys", "(", ")", ":", "\n", "\t\t\t", "randsJPEG", ",", "_", "=", "self", ".", "getRandom", "(", "[", "25", ",", "50", ",", "75", "]", ",", "counts", "[", "3", "]", ")", "\n", "#print('JPG', randsJPEG)", "\n", "", "randsM", ",", "_", "=", "self", ".", "getRandom", "(", "list", "(", "np", ".", "arange", "(", "len", "(", "self", ".", "models", ")", ")", ")", ",", "self", ".", "numIterations", ")", "\n", "\n", "for", "it", "in", "range", "(", "self", ".", "numIterations", ")", ":", "\n", "\n", "# To [0,1]", "\n", "\t\t\t", "image", "=", "standarTo255", "(", "adv_img", ".", "clone", "(", ")", ".", "data", ")", "/", "255", "\n", "image", "=", "Variable", "(", "image", ",", "requires_grad", "=", "True", ")", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "\n", "if", "randsT", "[", "it", "]", "==", "0", ":", "\n", "\t\t\t\t", "imageT", "=", "standarise", "(", "image", ".", "clone", "(", ")", ")", "\n", "\n", "", "elif", "randsT", "[", "it", "]", "==", "1", ":", "# Bit reduction", "\n", "\t\t\t\t", "imageT", "=", "standarise", "(", "reduce_precision", "(", "image", ".", "clone", "(", ")", ",", "2", "**", "randsBIT", "[", "0", "]", ",", "diff", "=", "True", ")", ")", "\n", "\n", "", "elif", "randsT", "[", "it", "]", "==", "2", ":", "# Median smoothing", "\n", "\t\t\t\t", "imageT", "=", "standarise", "(", "medianFilter", "(", "image", ".", "clone", "(", ")", ",", "int", "(", "randsMEDIAN", "[", "0", "]", ")", ")", ")", "\n", "\n", "", "elif", "randsT", "[", "it", "]", "==", "3", ":", "# JPEG compression", "\n", "\t\t\t\t", "jpeg", "=", "DiffJPEG", "(", "height", "=", "224", ",", "width", "=", "224", ",", "differentiable", "=", "True", ",", "quality", "=", "randsJPEG", "[", "0", "]", ")", "\n", "imageT", "=", "jpeg", "(", "image", ".", "clone", "(", ")", ")", "\n", "\n", "", "image", ".", "grad", "=", "None", "\n", "logit", "=", "self", ".", "models", "[", "randsM", "[", "it", "]", "]", "(", "imageT", ")", "\n", "\n", "pred_loss", "=", "ce_loss", "(", "logit", ",", "target_class_var", ")", "\n", "pred_loss", ".", "backward", "(", ")", "\n", "\n", "adv_img", ".", "data", "=", "addNoise_v2", "(", "adv_img", ".", "data", ",", "image", ".", "grad", ".", "data", ",", "self", ".", "delta", ",", "self", ".", "lb", ",", "self", ".", "up", ",", "clip", "=", "True", ")", "\n", "image2save", "=", "adv_img", ".", "data", ".", "clone", "(", ")", "\n", "adv_img", ".", "data", "=", "from255ToStandar", "(", "adv_img", ".", "data", ")", "\n", "\n", "if", "randsT", "[", "it", "]", "==", "1", ":", "\n", "\t\t\t\t", "randsBIT", "=", "np", ".", "delete", "(", "randsBIT", ",", "0", ")", "\n", "", "elif", "randsT", "[", "it", "]", "==", "2", ":", "\n", "\t\t\t\t", "randsMEDIAN", "=", "np", ".", "delete", "(", "randsMEDIAN", ",", "0", ")", "\n", "", "elif", "randsT", "[", "it", "]", "==", "3", ":", "\n", "\t\t\t\t", "randsJPEG", "=", "np", ".", "delete", "(", "randsJPEG", ",", "0", ")", "\n", "\n", "# Output of transformed adversarial", "\n", "", "", "for", "modelID", "in", "range", "(", "len", "(", "self", ".", "models", ")", ")", ":", "\n", "\t\t\t", "logit", "=", "self", ".", "models", "[", "modelID", "]", "(", "adv_img", ")", "\n", "h_x", "=", "F", ".", "softmax", "(", "logit", ")", ".", "data", ".", "squeeze", "(", ")", "\n", "probs", ",", "idx", "=", "h_x", ".", "sort", "(", "0", ",", "True", ")", "\n", "\n", "current_class", "=", "idx", "[", "0", "]", "\n", "current_class_prob", "=", "probs", "[", "0", "]", "\n", "target_class_prob", "=", "h_x", "[", "target_class", "]", "\n", "org_class_prob", "=", "h_x", "[", "org_class", "[", "modelID", "]", "]", "\n", "text", "+=", "'{:d}\\t{:.5f}\\t{:d}\\t{:.5f}\\t{:d}\\t{:.5f}\\t'", ".", "format", "(", "org_class", "[", "modelID", "]", ",", "org_class_prob", ".", "item", "(", ")", ",", "target_class", ",", "target_class_prob", ".", "item", "(", ")", ",", "current_class", ".", "item", "(", ")", ",", "current_class_prob", ".", "item", "(", ")", ")", "\n", "\n", "", "text", "+=", "'\\n'", "\n", "f1", ".", "write", "(", "text", ")", "\n", "saveImage", "(", "os", ".", "path", ".", "join", "(", "self", ".", "adv_path", ",", "img_name", ")", ",", "image2save", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.DiffJPEG.DiffJPEG.__init__": [[11, 29], ["torch.Module.__init__", "libs.utils.quality_to_factor", "libs.compression.compress_jpeg", "libs.decompression.decompress_jpeg"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.utils.quality_to_factor"], ["    ", "def", "__init__", "(", "self", ",", "height", ",", "width", ",", "differentiable", "=", "True", ",", "quality", "=", "80", ")", ":", "\n", "        ", "''' Initialize the DiffJPEG layer\n        Inputs:\n            height(int): Original image hieght\n            width(int): Original image width\n            differentiable(bool): If true uses custom differentiable\n                rounding function, if false uses standrard torch.round\n            quality(float): Quality factor for jpeg compression scheme. \n        '''", "\n", "super", "(", "DiffJPEG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "differentiable", ":", "\n", "            ", "rounding", "=", "diff_round", "\n", "", "else", ":", "\n", "            ", "rounding", "=", "torch", ".", "round", "\n", "", "factor", "=", "quality_to_factor", "(", "quality", ")", "\n", "self", ".", "compress", "=", "compress_jpeg", "(", "rounding", "=", "rounding", ",", "factor", "=", "factor", ")", "\n", "self", ".", "decompress", "=", "decompress_jpeg", "(", "height", ",", "width", ",", "rounding", "=", "rounding", ",", "\n", "factor", "=", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.DiffJPEG.DiffJPEG.forward": [[30, 37], ["DiffJPEG.DiffJPEG.compress", "DiffJPEG.DiffJPEG.decompress"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''\n\n        '''", "\n", "y", ",", "cb", ",", "cr", "=", "self", ".", "compress", "(", "x", ")", "\n", "recovered", "=", "self", ".", "decompress", "(", "y", ",", "cb", ",", "cr", ")", "\n", "return", "recovered", "\n", "", "", ""]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.addNoise": [[29, 47], ["misc_functions.destandarise", "misc_functions.standarTo255", "sum().sign", "torch.min", "torch.clamp", "misc_functions.standarise", "torch.max", "sum"], "function", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.destandarise", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.standarTo255", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.standarise"], ["def", "addNoise", "(", "img", ",", "grads", ",", "delta", ",", "lb", ",", "ub", ",", "clip", "=", "True", ")", ":", "\n", "\n", "\t", "adv_noise", "=", "delta", "*", "sum", "(", "grads", ")", ".", "sign", "(", ")", "\n", "\n", "# De-standarise image", "\n", "img", "=", "destandarise", "(", "img", ")", "\n", "\n", "# Add noise", "\n", "img", "-=", "adv_noise", "\n", "\n", "# Clip", "\n", "if", "clip", ":", "\n", "\t\t", "img", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "img", ",", "lb", ")", ",", "ub", ")", "\n", "", "else", ":", "\n", "\t\t", "img", "=", "torch", ".", "clamp", "(", "x", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "\n", "# Make sure image goes to 255 for accounting with rounding", "\n", "", "return", "standarTo255", "(", "standarise", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.addNoise_v2": [[48, 66], ["misc_functions.destandarise", "misc_functions.standarTo255", "grad.sign", "torch.min", "torch.clamp", "misc_functions.standarise", "torch.max"], "function", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.destandarise", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.standarTo255", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.standarise"], ["", "def", "addNoise_v2", "(", "img", ",", "grad", ",", "delta", ",", "lb", ",", "ub", ",", "clip", "=", "True", ")", ":", "\n", "\n", "\t", "adv_noise", "=", "delta", "*", "grad", ".", "sign", "(", ")", "\n", "\n", "# De-standarise image", "\n", "img", "=", "destandarise", "(", "img", ")", "\n", "#import pdb; pdb.set_trace()", "\n", "# Add noise", "\n", "img", "-=", "adv_noise", "\n", "\n", "# Clip", "\n", "if", "clip", ":", "\n", "\t\t", "img", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "img", ",", "lb", ")", ",", "ub", ")", "\n", "", "else", ":", "\n", "\t\t", "img", "=", "torch", ".", "clamp", "(", "x", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "\n", "# Make sure image goes to 255 for accounting with rounding", "\n", "", "return", "standarTo255", "(", "standarise", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.calculate_bounds": [[67, 97], ["numpy.float32", "numpy.ascontiguousarray", "torch.from_numpy().float.transpose", "enumerate", "torch.from_numpy().float", "torch.from_numpy().float.unsqueeze_", "torch.autograd.Variable", "torch.autograd.Variable", "torch.clamp", "torch.clamp", "lb.to.to", "ub.to.to", "torch.from_numpy().float.clone", "torch.from_numpy().float.clone", "torch.from_numpy"], "function", ["None"], ["", "def", "calculate_bounds", "(", "img", ",", "epsilon", ")", ":", "\n", "\n", "\t", "img", "=", "np", ".", "float32", "(", "img", ")", "\n", "img", "=", "np", ".", "ascontiguousarray", "(", "img", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# Convert array to D,W,H", "\n", "\n", "# Normalize the channels", "\n", "for", "c", ",", "_", "in", "enumerate", "(", "img", ")", ":", "\n", "\t\t", "img", "[", "c", "]", "/=", "255", "\n", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "float", "(", ")", "\n", "img", ".", "unsqueeze_", "(", "0", ")", "\n", "\n", "lb", "=", "Variable", "(", "img", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "ub", "=", "Variable", "(", "img", ".", "clone", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n", "# Compute the bounds", "\n", "lb", "-=", "epsilon", "\n", "ub", "+=", "epsilon", "\n", "\n", "# Clip between [0,1]", "\n", "lb", "=", "torch", ".", "clamp", "(", "lb", ",", "0.", ",", "1.", ")", "\n", "ub", "=", "torch", ".", "clamp", "(", "ub", ",", "0.", ",", "1.", ")", "\n", "\n", "lb", "=", "lb", ".", "to", "(", "device", ")", "\n", "ub", "=", "ub", ".", "to", "(", "device", ")", "\n", "\n", "#cv2.imwrite('./lb.png', recreate_image(lb))", "\n", "#cv2.imwrite('./ub.png', recreate_image(ub))", "\n", "return", "lb", ",", "ub", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.saveImage": [[99, 104], ["np.uint8().transpose.squeeze().cpu().detach().numpy", "numpy.uint8().transpose", "cv2.imwrite", "np.uint8().transpose.squeeze().cpu().detach", "numpy.uint8", "np.uint8().transpose.squeeze().cpu", "np.uint8().transpose.squeeze"], "function", ["None"], ["", "def", "saveImage", "(", "path", ",", "img", ")", ":", "\n", "\t", "img", "=", "img", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "img", "=", "np", ".", "uint8", "(", "img", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "img", "=", "img", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "cv2", ".", "imwrite", "(", "path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.preprocess_image": [[105, 128], ["numpy.float32", "numpy.ascontiguousarray", "im_as_arr.transpose.transpose", "enumerate", "torch.from_numpy().float", "torch.from_numpy().float.unsqueeze_", "torch.autograd.Variable", "cv2.resize", "torch.from_numpy().float.to", "torch.from_numpy"], "function", ["None"], ["", "def", "preprocess_image", "(", "cv2im", ",", "resize_im", "=", "True", ")", ":", "\n", "\n", "\t", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "# Resize image", "\n", "if", "resize_im", ":", "\n", "\t\t", "cv2im", "=", "cv2", ".", "resize", "(", "cv2im", ",", "(", "224", ",", "224", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "im_as_arr", "=", "np", ".", "float32", "(", "cv2im", ")", "\n", "im_as_arr", "=", "np", ".", "ascontiguousarray", "(", "im_as_arr", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "im_as_arr", "=", "im_as_arr", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# Convert array to D,W,H", "\n", "# Normalize the channels", "\n", "for", "channel", ",", "_", "in", "enumerate", "(", "im_as_arr", ")", ":", "\n", "\t\t", "im_as_arr", "[", "channel", "]", "/=", "255", "\n", "im_as_arr", "[", "channel", "]", "-=", "mean", "[", "channel", "]", "\n", "im_as_arr", "[", "channel", "]", "/=", "std", "[", "channel", "]", "\n", "# Convert to float tensor", "\n", "", "im_as_ten", "=", "torch", ".", "from_numpy", "(", "im_as_arr", ")", ".", "float", "(", ")", "\n", "# Add one more channel to the beginning. Tensor shape = 1,3,224,224", "\n", "im_as_ten", ".", "unsqueeze_", "(", "0", ")", "\n", "# Convert to Pytorch variable", "\n", "im_as_var", "=", "Variable", "(", "im_as_ten", ".", "to", "(", "device", ")", ",", "requires_grad", "=", "True", ")", "\n", "return", "im_as_var", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.standarTo255": [[130, 143], ["range"], "function", ["None"], ["", "def", "standarTo255", "(", "img", ")", ":", "\n", "\n", "\t", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "\t\t", "img", "[", "0", ",", "c", ",", ":", ",", ":", "]", "*=", "std", "[", "c", "]", "\n", "img", "[", "0", ",", "c", ",", ":", ",", ":", "]", "+=", "mean", "[", "c", "]", "\n", "\n", "", "img", "[", "img", ">", "1", "]", "=", "1", "\n", "img", "[", "img", "<", "0", "]", "=", "0", "\n", "\n", "return", "(", "img", "*", "255", ")", ".", "round", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.from255ToStandar": [[146, 157], ["range", "img.float"], "function", ["None"], ["", "def", "from255ToStandar", "(", "img", ")", ":", "\n", "\n", "\t", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "\n", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "\t\t", "img", "[", "0", ",", "c", ",", ":", ",", ":", "]", "/=", "255", "\n", "img", "[", "0", ",", "c", ",", ":", ",", ":", "]", "-=", "mean", "[", "c", "]", "\n", "img", "[", "0", ",", "c", ",", ":", ",", ":", "]", "/=", "std", "[", "c", "]", "\n", "\n", "", "return", "img", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.recreate_image": [[158, 173], ["copy.copy", "range", "numpy.round", "numpy.uint8().transpose", "im_as_var.cpu().data.numpy", "numpy.uint8", "im_as_var.cpu"], "function", ["None"], ["", "def", "recreate_image", "(", "im_as_var", ")", ":", "\n", "\n", "\t", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "recreated_im", "=", "copy", ".", "copy", "(", "im_as_var", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", "0", "]", ")", "\n", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "\t\t", "recreated_im", "[", "c", "]", "*=", "std", "[", "c", "]", "\n", "recreated_im", "[", "c", "]", "+=", "mean", "[", "c", "]", "\n", "", "recreated_im", "[", "recreated_im", ">", "1", "]", "=", "1", "\n", "recreated_im", "[", "recreated_im", "<", "0", "]", "=", "0", "\n", "recreated_im", "=", "np", ".", "round", "(", "recreated_im", "*", "255", ")", "\n", "recreated_im", "=", "np", ".", "uint8", "(", "recreated_im", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "# Convert RBG to GBR", "\n", "recreated_im", "=", "recreated_im", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "return", "recreated_im", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.destandarise": [[175, 183], ["range"], "function", ["None"], ["", "def", "destandarise", "(", "img", ")", ":", "\n", "\n", "\t", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "\t\t", "img", "[", "0", ",", "c", ",", ":", ",", ":", "]", "*=", "std", "[", "c", "]", "\n", "img", "[", "0", ",", "c", ",", ":", ",", ":", "]", "+=", "mean", "[", "c", "]", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.standarise": [[185, 194], ["range"], "function", ["None"], ["", "def", "standarise", "(", "img", ")", ":", "\n", "\n", "\t", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", "\n", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "\t\t", "img", "[", "0", ",", "c", ",", ":", ",", ":", "]", "-=", "mean", "[", "c", "]", "\n", "img", "[", "0", ",", "c", ",", ":", ",", ":", "]", "/=", "std", "[", "c", "]", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.initialise": [[195, 222], ["glob.glob", "glob.glob", "torch.load", "model.load_state_dict", "model.to", "model.eval", "allModels.append", "os.access", "print", "os.system", "os.system", "print", "str.replace", "os.path.exists", "os.makedirs", "checkpoint[].items"], "function", ["None"], ["", "def", "initialise", "(", "args", ")", ":", "\n", "\n", "\t", "image_list", "=", "glob", ".", "glob", "(", "'{}*.png'", ".", "format", "(", "args", ".", "dataset", ")", ")", "+", "glob", ".", "glob", "(", "'{}*.jpg'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "\n", "allModels", "=", "[", "]", "\n", "for", "arch", "in", "args", ".", "models", ":", "\n", "\t\t", "model_file", "=", "'models/%s_places365.pth.tar'", "%", "arch", "\n", "if", "not", "os", ".", "access", "(", "model_file", ",", "os", ".", "W_OK", ")", ":", "\n", "\n", "\t\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "'models'", ")", ":", "\n", "\t\t\t\t", "os", ".", "makedirs", "(", "'models'", ")", "\n", "\n", "", "weight_url", "=", "'http://places2.csail.mit.edu/models_places365/'", "+", "arch", "+", "'_places365.pth.tar'", "\n", "print", "(", "weight_url", ")", "\n", "os", ".", "system", "(", "'wget '", "+", "weight_url", ")", "\n", "os", ".", "system", "(", "'mv *.pth.tar ./models'", ")", "\n", "print", "(", "'Model downloaded!'", ")", "\n", "\n", "", "model", "=", "models", ".", "__dict__", "[", "arch", "]", "(", "num_classes", "=", "365", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_file", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "state_dict", "=", "{", "str", ".", "replace", "(", "k", ",", "'module.'", ",", "''", ")", ":", "v", "for", "k", ",", "v", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", "}", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "allModels", ".", "append", "(", "model", ")", "\n", "\n", "", "return", "allModels", ",", "image_list", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.prepareImage": [[225, 264], ["cv2.imread", "cv2.resize", "misc_functions.calculate_bounds", "misc_functions.preprocess_image", "functools.reduce", "img_path.split", "model.forward", "torch.nn.functional.softmax().data.squeeze", "F.softmax().data.squeeze.sort", "numpy.array", "numpy.array", "org_class.append", "org_class_prob.append", "numpy.cumsum", "list_classes2target.append", "np.array.cpu", "np.array.cpu", "idx[].item", "probs[].item", "torch.nn.functional.softmax"], "function", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.calculate_bounds", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.preprocess_image", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.forward"], ["", "def", "prepareImage", "(", "image_list", ",", "index", ",", "models", ",", "args", ")", ":", "\n", "\n", "# Read image", "\n", "\t", "img_path", "=", "image_list", "[", "index", "]", "\n", "img_name", "=", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "original_image", "=", "cv2", ".", "imread", "(", "img_path", ",", "1", ")", "\n", "original_image", "=", "cv2", ".", "resize", "(", "original_image", ",", "(", "224", ",", "224", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "# Image boundaries", "\n", "lb", ",", "ub", "=", "calculate_bounds", "(", "original_image", ",", "args", ".", "eps", ")", "\n", "\n", "# Process image", "\n", "image", "=", "preprocess_image", "(", "original_image", ")", "\n", "\n", "org_class", "=", "[", "]", "\n", "org_class_prob", "=", "[", "]", "\n", "list_classes2target", "=", "[", "]", "\n", "for", "model", "in", "models", ":", "\n", "\n", "# forward pass", "\n", "\t\t", "logit", "=", "model", ".", "forward", "(", "image", ")", "\n", "h_x", "=", "F", ".", "softmax", "(", "logit", ")", ".", "data", ".", "squeeze", "(", ")", "\n", "probs", ",", "idx", "=", "h_x", ".", "sort", "(", "0", ",", "True", ")", "\n", "\n", "probs", "=", "np", ".", "array", "(", "probs", ".", "cpu", "(", ")", ")", "\n", "idx", "=", "np", ".", "array", "(", "idx", ".", "cpu", "(", ")", ")", "\n", "\n", "org_class", ".", "append", "(", "idx", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "org_class_prob", ".", "append", "(", "probs", "[", "0", "]", ".", "item", "(", ")", ")", "\n", "\n", "cumSum", "=", "np", ".", "cumsum", "(", "probs", ")", "\n", "classes2target", "=", "idx", "[", "cumSum", ">", "args", ".", "gamma", "]", "\n", "classes2target", "=", "classes2target", "[", "1", ":", "]", "\n", "list_classes2target", ".", "append", "(", "classes2target", ")", "\n", "\n", "#Intersection", "\n", "", "classes2target", "=", "reduce", "(", "np", ".", "intersect1d", ",", "(", "list_classes2target", ")", ")", "#functools", "\n", "\n", "return", "original_image", ",", "img_name", ",", "lb", ",", "ub", ",", "org_class", ",", "org_class_prob", ",", "classes2target", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.createLogFiles": [[266, 279], ["open", "open", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "createLogFiles", "(", "args", ")", ":", "\n", "\t", "if", "not", "os", ".", "path", ".", "exists", "(", "'results'", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "'results'", ")", "\n", "", "f1_name", "=", "'results/log'", "\n", "f2_name", "=", "'results/logTimes'", "\n", "for", "model", "in", "args", ".", "models", ":", "\n", "\t\t", "f1_name", "+=", "'_{}'", ".", "format", "(", "model", ")", "\n", "f2_name", "+=", "'_{}'", ".", "format", "(", "model", ")", "\n", "", "f1_name", "+=", "'_eps{:.5f}_gamma{:.2f}.txt'", ".", "format", "(", "args", ".", "eps", ",", "args", ".", "gamma", ")", "\n", "f2_name", "+=", "'_eps{:.5f}_gamma{:.2f}.txt'", ".", "format", "(", "args", ".", "eps", ",", "args", ".", "gamma", ")", "\n", "f1", "=", "open", "(", "f1_name", ",", "\"w\"", ")", "\n", "f2", "=", "open", "(", "f2_name", ",", "\"w\"", ")", "\n", "return", "f1", ",", "f2", ",", "f1_name", ",", "f2_name", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.createDirectories": [[281, 291], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "createDirectories", "(", "args", ")", ":", "\n", "\t", "adv_path", "=", "'results/adv'", "\n", "for", "model", "in", "args", ".", "models", ":", "\n", "\t\t", "adv_path", "+=", "'_{}'", ".", "format", "(", "model", ")", "\n", "", "adv_path", "+=", "'_eps{:.5f}_gamma{:.2f}'", ".", "format", "(", "args", ".", "eps", ",", "args", ".", "gamma", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "adv_path", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "adv_path", ")", "\n", "\n", "", "return", "adv_path", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.padding": [[293, 309], ["img.size", "max", "max", "max", "max"], "function", ["None"], ["", "def", "padding", "(", "img", ",", "kernel", ")", ":", "\n", "\t", "ih", ",", "iw", "=", "img", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "if", "ih", "%", "1", "==", "0", ":", "\n", "\t\t", "ph", "=", "max", "(", "kernel", "-", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "\t\t", "ph", "=", "max", "(", "kernel", "-", "(", "ih", "%", "1", ")", ",", "0", ")", "\n", "", "if", "iw", "%", "1", "==", "0", ":", "\n", "\t\t", "pw", "=", "max", "(", "kernel", "-", "1", ",", "0", ")", "\n", "", "else", ":", "\n", "\t\t", "pw", "=", "max", "(", "kernel", "-", "(", "iw", "%", "1", ")", ",", "0", ")", "\n", "", "pl", "=", "pw", "//", "2", "\n", "pr", "=", "pw", "-", "pl", "\n", "pt", "=", "ph", "//", "2", "\n", "pb", "=", "ph", "-", "pt", "\n", "padding", "=", "(", "pl", ",", "pr", ",", "pt", ",", "pb", ")", "\n", "return", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.medianFilter": [[310, 315], ["torch.nn.functional.pad", "img.unfold().unfold.unfold().unfold", "misc_functions.padding", "img.unfold().unfold.contiguous().view().median", "img.unfold().unfold.unfold", "img.unfold().unfold.contiguous().view", "img.unfold().unfold.contiguous", "img.unfold().unfold.size"], "function", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.padding"], ["", "def", "medianFilter", "(", "img", ",", "kernel", ")", ":", "\n", "\t", "img", "=", "F", ".", "pad", "(", "img", ",", "padding", "(", "img", ",", "kernel", ")", ",", "mode", "=", "'reflect'", ")", "\n", "img", "=", "img", ".", "unfold", "(", "2", ",", "kernel", ",", "1", ")", ".", "unfold", "(", "3", ",", "kernel", ",", "1", ")", "\n", "img", "=", "img", ".", "contiguous", "(", ")", ".", "view", "(", "img", ".", "size", "(", ")", "[", ":", "4", "]", "+", "(", "-", "1", ",", ")", ")", ".", "median", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.diff_round": [[317, 319], ["torch.round", "torch.round"], "function", ["None"], ["", "def", "diff_round", "(", "x", ")", ":", "\n", "\t", "return", "torch", ".", "round", "(", "x", ")", "+", "(", "x", "-", "torch", ".", "round", "(", "x", ")", ")", "**", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.reduce_precision": [[320, 328], ["misc_functions.diff_round"], "function", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.utils.diff_round"], ["", "def", "reduce_precision", "(", "x", ",", "npp", ",", "diff", "=", "False", ")", ":", "\n", "\t", "npp_int", "=", "npp", "-", "1", "\n", "if", "diff", "==", "False", ":", "\n", "\t\t", "x_int", "=", "(", "x", "*", "npp_int", ")", ".", "round", "(", ")", "\n", "", "else", ":", "\n", "\t\t", "x_int", "=", "diff_round", "(", "x", "*", "npp_int", ")", "\n", "", "x_float", "=", "x_int", "/", "npp_int", "\n", "return", "x_float", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.jpeg_compression": [[330, 344], ["x.squeeze().cpu().detach().numpy", "numpy.uint8().transpose", "cv2.imwrite", "misc_functions.preprocess_image", "cv2.imread", "misc_functions.standarTo255", "x.squeeze().cpu().detach", "numpy.uint8", "int", "preprocess_image.clone", "x.squeeze().cpu", "x.squeeze"], "function", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.preprocess_image", "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.misc_functions.standarTo255"], ["", "def", "jpeg_compression", "(", "x", ",", "quality", ",", "args", ")", ":", "\n", "\t", "nx", "=", "x", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "nx", "=", "np", ".", "uint8", "(", "nx", "*", "255", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "nx", "=", "nx", "[", "...", ",", ":", ":", "-", "1", "]", "\n", "\n", "tmpImageName", "=", "'tmp_'", "\n", "for", "model", "in", "args", ".", "models", ":", "\n", "\t\t", "tmpImageName", "+=", "model", "\n", "", "tmpImageName", "+=", "'.jpg'", "\n", "\n", "cv2", ".", "imwrite", "(", "tmpImageName", ",", "nx", ",", "[", "int", "(", "cv2", ".", "IMWRITE_JPEG_QUALITY", ")", ",", "quality", "]", ")", "\n", "img_jpeg", "=", "preprocess_image", "(", "cv2", ".", "imread", "(", "tmpImageName", ")", ")", "\n", "img_jpeg", "=", "standarTo255", "(", "img_jpeg", ".", "clone", "(", ")", ".", "data", ")", "/", "255", "\n", "return", "img_jpeg", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.rgb_to_ycbcr_jpeg.__init__": [[20, 28], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.array", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "rgb_to_ycbcr_jpeg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "matrix", "=", "np", ".", "array", "(", "\n", "[", "[", "0.299", ",", "0.587", ",", "0.114", "]", ",", "[", "-", "0.168736", ",", "-", "0.331264", ",", "0.5", "]", ",", "\n", "[", "0.5", ",", "-", "0.418688", ",", "-", "0.081312", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "self", ".", "shift", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0.", ",", "128.", ",", "128.", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "#", "\n", "self", ".", "matrix", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "matrix", ")", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.rgb_to_ycbcr_jpeg.forward": [[29, 35], ["image.permute.permute.permute", "result.view", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "image", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "result", "=", "torch", ".", "tensordot", "(", "image", ",", "self", ".", "matrix", ",", "dims", "=", "1", ")", "+", "self", ".", "shift", "\n", "#    result = torch.from_numpy(result)", "\n", "result", ".", "view", "(", "image", ".", "shape", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.chroma_subsampling.__init__": [[47, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "chroma_subsampling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.chroma_subsampling.forward": [[50, 59], ["image.permute().clone", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d.", "torch.AvgPool2d.", "cb.permute.permute.permute", "cr.permute.permute.permute", "image_2[].unsqueeze", "image_2[].unsqueeze", "cb.permute.permute.squeeze", "cr.permute.permute.squeeze", "image.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "image_2", "=", "image", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "clone", "(", ")", "\n", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "(", "2", ",", "2", ")", ",", "\n", "count_include_pad", "=", "False", ")", "\n", "cb", "=", "avg_pool", "(", "image_2", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "cr", "=", "avg_pool", "(", "image_2", "[", ":", ",", "2", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "cb", "=", "cb", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "cr", "=", "cr", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "image", "[", ":", ",", ":", ",", ":", ",", "0", "]", ",", "cb", ".", "squeeze", "(", "3", ")", ",", "cr", ".", "squeeze", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.block_splitting.__init__": [[68, 71], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "block_splitting", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "8", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.block_splitting.forward": [[72, 78], ["image.view", "image.view.permute", "image.view.permute.contiguous().view", "image.view.permute.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "height", ",", "width", "=", "image", ".", "shape", "[", "1", ":", "3", "]", "\n", "batch_size", "=", "image", ".", "shape", "[", "0", "]", "\n", "image_reshaped", "=", "image", ".", "view", "(", "batch_size", ",", "height", "//", "self", ".", "k", ",", "self", ".", "k", ",", "-", "1", ",", "self", ".", "k", ")", "\n", "image_transposed", "=", "image_reshaped", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", "\n", "return", "image_transposed", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "k", ",", "self", ".", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.dct_8x8.__init__": [[87, 97], ["torch.Module.__init__", "numpy.zeros", "itertools.product", "numpy.array", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "numpy.cos", "numpy.cos", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.sqrt", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.outer"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "dct_8x8", ",", "self", ")", ".", "__init__", "(", ")", "\n", "tensor", "=", "np", ".", "zeros", "(", "(", "8", ",", "8", ",", "8", ",", "8", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "x", ",", "y", ",", "u", ",", "v", "in", "itertools", ".", "product", "(", "range", "(", "8", ")", ",", "repeat", "=", "4", ")", ":", "\n", "            ", "tensor", "[", "x", ",", "y", ",", "u", ",", "v", "]", "=", "np", ".", "cos", "(", "(", "2", "*", "x", "+", "1", ")", "*", "u", "*", "np", ".", "pi", "/", "16", ")", "*", "np", ".", "cos", "(", "\n", "(", "2", "*", "y", "+", "1", ")", "*", "v", "*", "np", ".", "pi", "/", "16", ")", "\n", "", "alpha", "=", "np", ".", "array", "(", "[", "1.", "/", "np", ".", "sqrt", "(", "2", ")", "]", "+", "[", "1", "]", "*", "7", ")", "\n", "#", "\n", "self", ".", "tensor", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "tensor", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "np", ".", "outer", "(", "alpha", ",", "alpha", ")", "*", "0.25", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.dct_8x8.forward": [[98, 103], ["result.view", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "image", "-", "128", "\n", "result", "=", "self", ".", "scale", "*", "torch", ".", "tensordot", "(", "image", ",", "self", ".", "tensor", ",", "dims", "=", "2", ")", "\n", "result", ".", "view", "(", "image", ".", "shape", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.y_quantize.__init__": [[114, 119], ["torch.Module.__init__", "libs.utils.y_table.to"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ",", "rounding", ",", "factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "y_quantize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rounding", "=", "rounding", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "y_table", "=", "utils", ".", "y_table", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.y_quantize.forward": [[120, 124], ["compression.y_quantize.rounding", "compression.y_quantize.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "image", ".", "float", "(", ")", "/", "(", "self", ".", "y_table", "*", "self", ".", "factor", ")", "\n", "image", "=", "self", ".", "rounding", "(", "image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.c_quantize.__init__": [[135, 140], ["torch.Module.__init__", "libs.utils.c_table.to"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ",", "rounding", ",", "factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "c_quantize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rounding", "=", "rounding", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "c_table", "=", "utils", ".", "c_table", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.c_quantize.forward": [[141, 145], ["compression.c_quantize.rounding", "compression.c_quantize.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "image", "=", "image", ".", "float", "(", ")", "/", "(", "self", ".", "c_table", "*", "self", ".", "factor", ")", "\n", "image", "=", "self", ".", "rounding", "(", "image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.compress_jpeg.__init__": [[156, 168], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "compression.c_quantize", "compression.y_quantize", "compression.rgb_to_ycbcr_jpeg", "compression.chroma_subsampling", "compression.block_splitting", "compression.dct_8x8"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ",", "rounding", "=", "torch", ".", "round", ",", "factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "compress_jpeg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "\n", "rgb_to_ycbcr_jpeg", "(", ")", ",", "\n", "chroma_subsampling", "(", ")", "\n", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Sequential", "(", "\n", "block_splitting", "(", ")", ",", "\n", "dct_8x8", "(", ")", "\n", ")", "\n", "self", ".", "c_quantize", "=", "c_quantize", "(", "rounding", "=", "rounding", ",", "factor", "=", "factor", ")", "\n", "self", ".", "y_quantize", "=", "y_quantize", "(", "rounding", "=", "rounding", ",", "factor", "=", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.compression.compress_jpeg.forward": [[169, 182], ["compression.compress_jpeg.l1", "components.keys", "compression.compress_jpeg.l2", "compression.compress_jpeg.c_quantize", "compression.compress_jpeg.y_quantize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "y", ",", "cb", ",", "cr", "=", "self", ".", "l1", "(", "image", "*", "255", ")", "\n", "components", "=", "{", "'y'", ":", "y", ",", "'cb'", ":", "cb", ",", "'cr'", ":", "cr", "}", "\n", "for", "k", "in", "components", ".", "keys", "(", ")", ":", "\n", "            ", "comp", "=", "self", ".", "l2", "(", "components", "[", "k", "]", ")", "\n", "if", "k", "in", "(", "'cb'", ",", "'cr'", ")", ":", "\n", "                ", "comp", "=", "self", ".", "c_quantize", "(", "comp", ")", "\n", "", "else", ":", "\n", "                ", "comp", "=", "self", ".", "y_quantize", "(", "comp", ")", "\n", "\n", "", "components", "[", "k", "]", "=", "comp", "\n", "\n", "", "return", "components", "[", "'y'", "]", ",", "components", "[", "'cb'", "]", ",", "components", "[", "'cr'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.utils.diff_round": [[24, 32], ["torch.round", "torch.round", "torch.round", "torch.round"], "function", ["None"], ["def", "diff_round", "(", "x", ")", ":", "\n", "    ", "\"\"\" Differentiable rounding function\n    Input:\n        x(tensor)\n    Output:\n        x(tensor)\n    \"\"\"", "\n", "return", "torch", ".", "round", "(", "x", ")", "+", "(", "x", "-", "torch", ".", "round", "(", "x", ")", ")", "**", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.utils.quality_to_factor": [[34, 46], ["None"], "function", ["None"], ["", "def", "quality_to_factor", "(", "quality", ")", ":", "\n", "    ", "\"\"\" Calculate factor corresponding to quality\n    Input:\n        quality(float): Quality for jpeg compression\n    Output:\n        factor(float): Compression factor\n    \"\"\"", "\n", "if", "quality", "<", "50", ":", "\n", "        ", "quality", "=", "5000.", "/", "quality", "\n", "", "else", ":", "\n", "        ", "quality", "=", "200.", "-", "quality", "*", "2", "\n", "", "return", "quality", "/", "100.", "\n", "", ""]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.y_dequantize.__init__": [[22, 26], ["torch.Module.__init__", "libs.utils.y_table.to"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ",", "factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "y_dequantize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "y_table", "=", "utils", ".", "y_table", ".", "to", "(", "device", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.y_dequantize.forward": [[27, 29], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "image", "*", "(", "self", ".", "y_table", "*", "self", ".", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.c_dequantize.__init__": [[40, 44], ["torch.Module.__init__", "libs.utils.c_table.to"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ",", "factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "c_dequantize", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "factor", "=", "factor", "\n", "self", ".", "c_table", "=", "utils", ".", "c_table", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.c_dequantize.forward": [[45, 47], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "image", "*", "(", "self", ".", "c_table", "*", "self", ".", "factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.idct_8x8.__init__": [[56, 65], ["torch.Module.__init__", "numpy.array", "torch.Parameter", "torch.Parameter", "numpy.zeros", "itertools.product", "torch.Parameter", "torch.Parameter", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "range", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "numpy.cos", "numpy.cos", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.sqrt", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.outer"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "idct_8x8", ",", "self", ")", ".", "__init__", "(", ")", "\n", "alpha", "=", "np", ".", "array", "(", "[", "1.", "/", "np", ".", "sqrt", "(", "2", ")", "]", "+", "[", "1", "]", "*", "7", ")", "\n", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "np", ".", "outer", "(", "alpha", ",", "alpha", ")", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ")", "\n", "tensor", "=", "np", ".", "zeros", "(", "(", "8", ",", "8", ",", "8", ",", "8", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "x", ",", "y", ",", "u", ",", "v", "in", "itertools", ".", "product", "(", "range", "(", "8", ")", ",", "repeat", "=", "4", ")", ":", "\n", "            ", "tensor", "[", "x", ",", "y", ",", "u", ",", "v", "]", "=", "np", ".", "cos", "(", "(", "2", "*", "u", "+", "1", ")", "*", "x", "*", "np", ".", "pi", "/", "16", ")", "*", "np", ".", "cos", "(", "\n", "(", "2", "*", "v", "+", "1", ")", "*", "y", "*", "np", ".", "pi", "/", "16", ")", "\n", "", "self", ".", "tensor", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "tensor", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.idct_8x8.forward": [[66, 72], ["result.view", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "\n", "        ", "image", "=", "image", "*", "self", ".", "alpha", "\n", "result", "=", "0.25", "*", "torch", ".", "tensordot", "(", "image", ",", "self", ".", "tensor", ",", "dims", "=", "2", ")", "+", "128", "\n", "result", ".", "view", "(", "image", ".", "shape", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.block_merging.__init__": [[83, 85], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "block_merging", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.block_merging.forward": [[86, 92], ["patches.view", "patches.view.permute", "patches.view.permute.contiguous().view", "patches.view.permute.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "patches", ",", "height", ",", "width", ")", ":", "\n", "        ", "k", "=", "8", "\n", "batch_size", "=", "patches", ".", "shape", "[", "0", "]", "\n", "image_reshaped", "=", "patches", ".", "view", "(", "batch_size", ",", "height", "//", "k", ",", "width", "//", "k", ",", "k", ",", "k", ")", "\n", "image_transposed", "=", "image_reshaped", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ",", "4", ")", "\n", "return", "image_transposed", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "height", ",", "width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.chroma_upsampling.__init__": [[103, 105], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "chroma_upsampling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.chroma_upsampling.forward": [[106, 118], ["decompression.chroma_upsampling.forward.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y", ",", "cb", ",", "cr", ")", ":", "\n", "        ", "def", "repeat", "(", "x", ",", "k", "=", "2", ")", ":", "\n", "            ", "height", ",", "width", "=", "x", ".", "shape", "[", "1", ":", "3", "]", "\n", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x", "=", "x", ".", "repeat", "(", "1", ",", "1", ",", "k", ",", "k", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "height", "*", "k", ",", "width", "*", "k", ")", "\n", "return", "x", "\n", "\n", "", "cb", "=", "repeat", "(", "cb", ")", "\n", "cr", "=", "repeat", "(", "cr", ")", "\n", "\n", "return", "torch", ".", "cat", "(", "[", "y", ".", "unsqueeze", "(", "3", ")", ",", "cb", ".", "unsqueeze", "(", "3", ")", ",", "cr", ".", "unsqueeze", "(", "3", ")", "]", ",", "dim", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.ycbcr_to_rgb_jpeg.__init__": [[127, 135], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.array", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ycbcr_to_rgb_jpeg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "matrix", "=", "np", ".", "array", "(", "\n", "[", "[", "1.", ",", "0.", ",", "1.402", "]", ",", "[", "1", ",", "-", "0.344136", ",", "-", "0.714136", "]", ",", "[", "1", ",", "1.772", ",", "0", "]", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ".", "T", "\n", "self", ".", "shift", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "0", ",", "-", "128.", ",", "-", "128.", "]", ")", ".", "to", "(", "device", ")", ")", "\n", "self", ".", "matrix", "=", "nn", ".", "Parameter", "(", "torch", ".", "from_numpy", "(", "matrix", ")", ".", "to", "(", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.ycbcr_to_rgb_jpeg.forward": [[136, 141], ["torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot", "torch.tensordot.view", "torch.tensordot.view", "torch.tensordot.permute", "torch.tensordot.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "result", "=", "torch", ".", "tensordot", "(", "image", "+", "self", ".", "shift", ",", "self", ".", "matrix", ",", "dims", "=", "1", ")", "\n", "#result = torch.from_numpy(result)", "\n", "result", ".", "view", "(", "image", ".", "shape", ")", "\n", "return", "result", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__": [[152, 162], ["torch.Module.__init__", "decompression.c_dequantize", "decompression.y_dequantize", "decompression.idct_8x8", "decompression.block_merging", "decompression.chroma_upsampling", "decompression.ycbcr_to_rgb_jpeg"], "methods", ["home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.__init__"], ["def", "__init__", "(", "self", ",", "height", ",", "width", ",", "rounding", "=", "torch", ".", "round", ",", "factor", "=", "1", ")", ":", "\n", "        ", "super", "(", "decompress_jpeg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "c_dequantize", "=", "c_dequantize", "(", "factor", "=", "factor", ")", "\n", "self", ".", "y_dequantize", "=", "y_dequantize", "(", "factor", "=", "factor", ")", "\n", "self", ".", "idct", "=", "idct_8x8", "(", ")", "\n", "self", ".", "merging", "=", "block_merging", "(", ")", "\n", "self", ".", "chroma", "=", "chroma_upsampling", "(", ")", "\n", "self", ".", "colors", "=", "ycbcr_to_rgb_jpeg", "(", ")", "\n", "\n", "self", ".", "height", ",", "self", ".", "width", "=", "height", ",", "width", "\n", "\n"]], "home.repos.pwc.inspect_result.smartcameras_RP-FGSM.libs.decompression.decompress_jpeg.forward": [[163, 181], ["components.keys", "decompression.decompress_jpeg.chroma", "decompression.decompress_jpeg.colors", "torch.min", "torch.min", "torch.min", "torch.min", "decompression.decompress_jpeg.idct", "decompression.decompress_jpeg.merging", "torch.max", "torch.max", "torch.max", "torch.max", "decompression.decompress_jpeg.c_dequantize", "decompression.decompress_jpeg.y_dequantize", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "int", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y", ",", "cb", ",", "cr", ")", ":", "\n", "        ", "components", "=", "{", "'y'", ":", "y", ",", "'cb'", ":", "cb", ",", "'cr'", ":", "cr", "}", "\n", "for", "k", "in", "components", ".", "keys", "(", ")", ":", "\n", "            ", "if", "k", "in", "(", "'cb'", ",", "'cr'", ")", ":", "\n", "                ", "comp", "=", "self", ".", "c_dequantize", "(", "components", "[", "k", "]", ")", "\n", "height", ",", "width", "=", "int", "(", "self", ".", "height", "/", "2", ")", ",", "int", "(", "self", ".", "width", "/", "2", ")", "\n", "", "else", ":", "\n", "                ", "comp", "=", "self", ".", "y_dequantize", "(", "components", "[", "k", "]", ")", "\n", "height", ",", "width", "=", "self", ".", "height", ",", "self", ".", "width", "\n", "", "comp", "=", "self", ".", "idct", "(", "comp", ")", "\n", "components", "[", "k", "]", "=", "self", ".", "merging", "(", "comp", ",", "height", ",", "width", ")", "\n", "#", "\n", "", "image", "=", "self", ".", "chroma", "(", "components", "[", "'y'", "]", ",", "components", "[", "'cb'", "]", ",", "components", "[", "'cr'", "]", ")", "\n", "image", "=", "self", ".", "colors", "(", "image", ")", "\n", "\n", "image", "=", "torch", ".", "min", "(", "255", "*", "torch", ".", "ones_like", "(", "image", ")", ",", "\n", "torch", ".", "max", "(", "torch", ".", "zeros_like", "(", "image", ")", ",", "image", ")", ")", "\n", "return", "image", "/", "255", "\n", "", "", ""]]}