{"home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.None.main.main": [[13, 37], ["util.initPara.para", "print", "boardio.close", "model.vcrnet_model.testVCRNet", "model.vcrnet_model.trainVCRNet", "model.dcp_model.testDCP", "model.lpdnet_model.trainLPD", "model.lpdnet_model.testLPD", "model.dcp_model.trainDCP", "model.icp_model.testICP", "print"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.para", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.close", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.testVCRNet", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.trainVCRNet", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.testDCP", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.trainLPD", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.testLPD", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.trainDCP", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.icp_model.testICP"], ["def", "main", "(", ")", ":", "\n", "    ", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", "=", "para", "(", ")", "\n", "\n", "if", "args", ".", "eval", ":", "\n", "        ", "if", "args", ".", "model", "==", "'vcrnet'", ":", "\n", "            ", "testVCRNet", "(", "args", ",", "net", ",", "test_loader", ",", "boardio", ",", "textio", ")", "\n", "", "elif", "args", ".", "model", "==", "'dcp'", ":", "\n", "            ", "testDCP", "(", "args", ",", "net", ",", "test_loader", ",", "boardio", ",", "textio", ")", "\n", "", "elif", "args", ".", "model", "==", "'lpd'", ":", "\n", "            ", "testLPD", "(", "args", ",", "net", ",", "test_loader", ",", "boardio", ",", "textio", ")", "\n", "", "elif", "args", ".", "model", "==", "'icp'", ":", "\n", "            ", "testICP", "(", "args", ",", "net", ",", "test_loader", ",", "boardio", ",", "textio", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "args", ".", "model", "==", "'vcrnet'", ":", "\n", "            ", "trainVCRNet", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", ")", "\n", "", "elif", "args", ".", "model", "==", "'lpd'", ":", "\n", "            ", "trainLPD", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", ")", "\n", "", "elif", "args", ".", "model", "==", "'dcp'", ":", "\n", "            ", "trainDCP", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", ")", "\n", "", "elif", "args", ".", "model", "==", "'icp'", ":", "\n", "            ", "print", "(", "\"icp can't be trained\"", ")", "\n", "\n", "", "", "print", "(", "'FINISH'", ")", "\n", "boardio", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.TranformNet.__init__": [[25, 43], ["torch.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["def", "__init__", "(", "self", ",", "k", "=", "3", ",", "negative_slope", "=", "1e-2", ")", ":", "\n", "        ", "super", "(", "TranformNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv1d", "(", "k", ",", "64", ",", "1", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "1", ")", "\n", "self", ".", "conv3", "=", "torch", ".", "nn", ".", "Conv1d", "(", "128", ",", "1024", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "k", "*", "k", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "self", ".", "negative_slope", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "\n", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.TranformNet.forward": [[44, 71], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "x.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lpdnet_model.TranformNet.fc3", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "torch.eye().view().repeat", "x.view.view.view", "x.view.view.size", "lpdnet_model.TranformNet.bn1", "lpdnet_model.TranformNet.bn2", "lpdnet_model.TranformNet.bn3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "lpdnet_model.TranformNet.bn4", "lpdnet_model.TranformNet.bn5", "lpdnet_model.TranformNet.conv1", "lpdnet_model.TranformNet.conv2", "lpdnet_model.TranformNet.conv3", "lpdnet_model.TranformNet.fc1", "lpdnet_model.TranformNet.fc2", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye().view", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"forward function for TranformNet\n\n        Args:\n            x: [B,num_dims,num]\n\n        Returns:\n            Transformation matrix of size numxnum\n        \"\"\"", "\n", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "fc1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "fc2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "iden", "=", "torch", ".", "eye", "(", "self", ".", "k", ",", "dtype", "=", "torch", ".", "float32", ",", "device", "=", "device", ")", ".", "view", "(", "1", ",", "self", ".", "k", "*", "self", ".", "k", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "\n", "x", "=", "x", "+", "iden", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "k", ",", "self", ".", "k", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.LPDNet.__init__": [[78, 100], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "lpdnet_model.TranformNet", "lpdnet_model.TranformNet"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "negative_slope", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "LPDNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "negative_slope", "=", "negative_slope", "\n", "self", ".", "k", "=", "20", "\n", "self", ".", "t3d", "=", "args", ".", "t3d", "\n", "self", ".", "tfea", "=", "args", ".", "tfea", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "# [b,6,num,20]", "\n", "self", ".", "convDG1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "64", "*", "2", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "self", ".", "negative_slope", ")", ")", "\n", "self", ".", "convDG2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "self", ".", "negative_slope", ")", ")", "\n", "self", ".", "convSN1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "128", "*", "2", ",", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "self", ".", "negative_slope", ")", ")", "\n", "\n", "self", ".", "conv1_lpd", "=", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv2_lpd", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "conv3_lpd", "=", "nn", ".", "Conv1d", "(", "512", ",", "self", ".", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "True", ")", "\n", "if", "self", ".", "t3d", ":", "\n", "            ", "self", ".", "t_net3d", "=", "TranformNet", "(", "3", ")", "\n", "", "if", "self", ".", "tfea", ":", "\n", "            ", "self", ".", "t_net_fea", "=", "TranformNet", "(", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.LPDNet.forward": [[103, 138], ["x.transpose.transpose.size", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "util.util.get_graph_feature", "lpdnet_model.LPDNet.convDG1", "lpdnet_model.LPDNet.convDG2", "util.util.knn", "util.util.get_graph_feature", "lpdnet_model.LPDNet.convSN1", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat().squeeze", "torch.leaky_relu().view", "torch.leaky_relu().view", "torch.leaky_relu().view", "torch.leaky_relu().view", "lpdnet_model.LPDNet.t_net3d", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "torch.bmm().transpose", "lpdnet_model.LPDNet.conv1_lpd", "lpdnet_model.LPDNet.conv2_lpd", "lpdnet_model.LPDNet.t_net_fea", "x.transpose.transpose.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "x.transpose.transpose.transpose", "x.transpose.transpose.max", "x.transpose.transpose.max", "x2.squeeze", "x.transpose.transpose.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.leaky_relu", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "lpdnet_model.LPDNet.conv3_lpd", "x.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.get_graph_feature", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.knn", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.get_graph_feature"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", ",", "num_dims", ",", "num_points", "=", "x", ".", "size", "(", ")", "\n", "#", "\n", "xInit3d", "=", "x", "\n", "if", "self", ".", "t3d", ":", "\n", "            ", "trans", "=", "self", ".", "t_net3d", "(", "x", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ".", "transpose", "(", "2", ",", "1", ")", ",", "trans", ")", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv1_lpd", "(", "x", ")", ",", "negative_slope", "=", "self", ".", "negative_slope", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv2_lpd", "(", "x", ")", ",", "negative_slope", "=", "self", ".", "negative_slope", ")", "\n", "\n", "if", "self", ".", "tfea", ":", "\n", "            ", "trans_feat", "=", "self", ".", "t_net_fea", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "x", "=", "torch", ".", "bmm", "(", "x", ",", "trans_feat", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "# Serial structure", "\n", "# Dynamic Graph cnn for feature space", "\n", "", "x", "=", "get_graph_feature", "(", "x", ",", "k", "=", "self", ".", "k", ")", "# [b,64*2,num,20]", "\n", "x", "=", "self", ".", "convDG1", "(", "x", ")", "# [b,128,num,20]", "\n", "x1", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# [b,128,num,1]", "\n", "x", "=", "self", ".", "convDG2", "(", "x", ")", "# [b,128,num,20]", "\n", "x2", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# [b,128,num,1]", "\n", "\n", "# Spatial Neighborhood fusion for cartesian space", "\n", "idx", "=", "knn", "(", "xInit3d", ",", "k", "=", "self", ".", "k", ")", "\n", "x", "=", "get_graph_feature", "(", "x2", ".", "squeeze", "(", "-", "1", ")", ",", "idx", "=", "idx", ",", "k", "=", "self", ".", "k", ")", "# [b,128*2,num,20]", "\n", "x", "=", "self", ".", "convSN1", "(", "x", ")", "# [b,256,num,20]", "\n", "x3", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# [b,256,num,1]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ")", ",", "dim", "=", "1", ")", ".", "squeeze", "(", "-", "1", ")", "# [b,512,num]", "\n", "x", "=", "F", ".", "leaky_relu", "(", "self", ".", "conv3_lpd", "(", "x", ")", ",", "negative_slope", "=", "self", ".", "negative_slope", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "\n", "num_points", ")", "# [b,emb_dims,num]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.LPD.__init__": [[141, 148], ["torch.Module.__init__", "lpdnet_model.LPDNet"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "LPD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "num_points", "=", "args", ".", "num_points", "\n", "self", ".", "negative_slope", "=", "0.2", "\n", "self", ".", "emb_nn", "=", "LPDNet", "(", "args", ",", "negative_slope", "=", "self", ".", "negative_slope", ")", "\n", "self", ".", "cycle", "=", "args", ".", "cycle", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.LPD.forward": [[149, 162], ["src.size", "lpdnet_model.LPD.emb_nn", "lpdnet_model.LPD.emb_nn", "lpdnet_model.LPD.getLoss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.LPD.getLoss"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "# [B,3,num]", "\n", "        ", "src", "=", "input", "[", "0", "]", "\n", "tgt", "=", "input", "[", "1", "]", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "src_embedding", "=", "self", ".", "emb_nn", "(", "src", ")", "\n", "tgt_embedding", "=", "self", ".", "emb_nn", "(", "tgt", ")", "\n", "\n", "loss", "=", "self", ".", "getLoss", "(", "src", ",", "src_embedding", ",", "tgt_embedding", ")", "\n", "mse_ab_", "=", "torch", ".", "mean", "(", "(", "src_embedding", "-", "tgt_embedding", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", "*", "batch_size", "\n", "mae_ab_", "=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "src_embedding", "-", "tgt_embedding", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", "*", "batch_size", "\n", "\n", "return", "src_embedding", ",", "tgt_embedding", ",", "loss", ",", "mse_ab_", ",", "mae_ab_", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.LPD.kfn": [[163, 172], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sum.transpose().contiguous", "torch.sum.transpose().contiguous", "torch.sum.transpose().contiguous", "torch.sum.transpose().contiguous", "pairwise_distance.topk", "x.transpose().contiguous", "torch.sum.transpose", "torch.sum.transpose", "torch.sum.transpose", "torch.sum.transpose", "x.transpose"], "methods", ["None"], ["", "def", "kfn", "(", "self", ",", "x", ",", "k", "=", "20", ")", ":", "\n", "        ", "inner", "=", "-", "2", "*", "torch", ".", "matmul", "(", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "x", ")", "# [b,num,num]", "\n", "xx", "=", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# [b,1,num] ", "\n", "\n", "pairwise_distance", "=", "xx", "+", "inner", "\n", "pairwise_distance", "=", "pairwise_distance", "+", "xx", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# [b,num,num]", "\n", "\n", "idx", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "k", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "# (batch_size, k, neg_k)", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.LPD.triplet_loss": [[176, 189], ["tgt_embedding_k.size", "topFarTgt.size", "src_embedding_k.unsqueeze.unsqueeze.unsqueeze", "src_embedding_k.unsqueeze.unsqueeze.repeat", "src_embedding_k.unsqueeze.unsqueeze.repeat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor"], "methods", ["None"], ["", "def", "triplet_loss", "(", "self", ",", "src_embedding_k", ",", "tgt_embedding_k", ",", "topFarTgt", ")", ":", "\n", "        ", "batch_size", ",", "dims", ",", "k", ",", "num_pos", "=", "tgt_embedding_k", ".", "size", "(", ")", "\n", "batch_size", ",", "dims", ",", "k", ",", "num_neg", "=", "topFarTgt", ".", "size", "(", ")", "\n", "margin", "=", "1.0", "\n", "src_embedding_k", "=", "src_embedding_k", ".", "unsqueeze", "(", "3", ")", "\n", "src_embedding_k_p", "=", "src_embedding_k", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "num_pos", ")", "\n", "src_embedding_k_n", "=", "src_embedding_k", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "num_neg", ")", "\n", "dp_loss", "=", "torch", ".", "mean", "(", "(", "(", "src_embedding_k_p", "-", "tgt_embedding_k", ")", "**", "2", ")", ",", "dim", "=", "[", "1", ",", "3", "]", ")", "\n", "dn_loss", "=", "torch", ".", "mean", "(", "(", "(", "src_embedding_k_n", "-", "topFarTgt", ")", "**", "2", ")", ",", "dim", "=", "[", "1", ",", "3", "]", ")", "\n", "\n", "loss", "=", "torch", ".", "max", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "[", "0.0", "]", ")", ",", "1", "-", "dn_loss", "/", "(", "margin", "+", "dp_loss", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.LPD.getLoss": [[191, 230], ["src.size", "src_embedding.transpose().contiguous.transpose().contiguous.size", "util.util.farthest_point_sample", "util.util.farthest_point_sample.unsqueeze().repeat", "util.util.farthest_point_sample.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "lpdnet_model.LPD.kfn", "idx.view.view.view", "topFarTgt.view().permute.view().permute.view().permute", "torch.gather.unsqueeze", "torch.gather.unsqueeze", "torch.gather.unsqueeze", "torch.gather.unsqueeze", "lpdnet_model.LPD.triplet_loss", "src_embedding.transpose().contiguous.transpose().contiguous.transpose().contiguous", "tgt_embedding.transpose().contiguous.transpose().contiguous.transpose().contiguous", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.empty().fill_", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.gather.transpose().contiguous().view", "torch.gather.transpose().contiguous().view", "torch.gather.transpose().contiguous().view", "torch.gather.transpose().contiguous().view", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "lpdnet_model.LPD.mean", "util.util.farthest_point_sample.unsqueeze", "util.util.farthest_point_sample.unsqueeze", "topFarTgt.view().permute.view().permute.view", "src_embedding.transpose().contiguous.transpose().contiguous.transpose", "tgt_embedding.transpose().contiguous.transpose().contiguous.transpose", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.gather.transpose().contiguous", "torch.gather.transpose().contiguous", "torch.gather.transpose().contiguous", "torch.gather.transpose().contiguous", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.gather.transpose", "torch.gather.transpose", "torch.gather.transpose", "torch.gather.transpose", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.fps.farthest_point_sample", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.LPD.kfn", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.LPD.triplet_loss"], ["", "def", "getLoss", "(", "self", ",", "src", ",", "src_embedding", ",", "tgt_embedding", ",", "k", "=", "32", ",", "neg_k", "=", "8", ")", ":", "\n", "        ", "batch_size", ",", "pt_dims", ",", "num_points", "=", "src", ".", "size", "(", ")", "\n", "_", ",", "emb_dims", ",", "_", "=", "src_embedding", ".", "size", "(", ")", "\n", "\n", "sampleIdx", "=", "farthest_point_sample", "(", "src", ",", "npoint", "=", "k", ")", "# [B,K]", "\n", "sample_PtIdx", "=", "sampleIdx", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "pt_dims", ",", "1", ")", "\n", "sample_EmbIdx", "=", "sampleIdx", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "emb_dims", ",", "1", ")", "\n", "src_k", "=", "torch", ".", "gather", "(", "src", ",", "index", "=", "sample_PtIdx", ",", "dim", "=", "2", ")", "\n", "src_embedding_k", "=", "torch", ".", "gather", "(", "src_embedding", ",", "index", "=", "sample_EmbIdx", ",", "dim", "=", "2", ")", "# [B,dims,k]", "\n", "tgt_embedding_k", "=", "torch", ".", "gather", "(", "tgt_embedding", ",", "index", "=", "sample_EmbIdx", ",", "dim", "=", "2", ")", "# [B,dims,k]", "\n", "\n", "idx", "=", "self", ".", "kfn", "(", "src_k", ",", "k", "=", "neg_k", ")", "\n", "\n", "idx_base", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "k", "\n", "\n", "idx", "=", "idx", "+", "idx_base", "# (batch_size, k, neg_k)", "\n", "\n", "idx", "=", "idx", ".", "view", "(", "-", "1", ")", "# (batch_size * k * neg_k)", "\n", "\n", "topFarTgt", "=", "tgt_embedding_k", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", "*", "k", ",", "-", "1", ")", "[", "idx", ",", "\n", ":", "]", "# (batch_size * k * neg_k,emb_dims)", "\n", "topFarTgt", "=", "topFarTgt", ".", "view", "(", "batch_size", ",", "k", ",", "neg_k", ",", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "tgt_embedding_k_p", "=", "tgt_embedding_k", ".", "unsqueeze", "(", "3", ")", "\n", "loss_triplet", "=", "self", ".", "triplet_loss", "(", "src_embedding_k", ",", "tgt_embedding_k_p", ",", "topFarTgt", ")", "\n", "\n", "src_embedding", "=", "src_embedding", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "tgt_embedding", "=", "tgt_embedding", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "src_length", "=", "torch", ".", "norm", "(", "src_embedding", ",", "dim", "=", "-", "1", ")", "\n", "tgt_length", "=", "torch", ".", "norm", "(", "tgt_embedding", ",", "dim", "=", "-", "1", ")", "\n", "identity", "=", "torch", ".", "empty", "(", "(", "batch_size", ",", "num_points", ")", ",", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ")", ".", "fill_", "(", "1", ")", "\n", "loss_norm1", "=", "torch", ".", "sqrt", "(", "F", ".", "mse_loss", "(", "src_length", ",", "identity", ")", ")", "\n", "loss_norm2", "=", "torch", ".", "sqrt", "(", "F", ".", "mse_loss", "(", "tgt_length", ",", "identity", ")", ")", "\n", "\n", "loss", "=", "loss_triplet", ".", "mean", "(", ")", "+", "(", "loss_norm1", "+", "loss_norm2", ")", "/", "2.0", "*", "0.03", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.test_one_epoch": [[232, 255], ["net.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "src.cuda.cuda", "target.cuda.cuda", "src.cuda.size", "net", "mse_ab_.sum().item", "mae_ab_.sum().item", "loss.sum().item", "mse_ab_.sum", "mae_ab_.sum", "loss.sum"], "function", ["None"], ["", "", "def", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "mse_ab", "=", "0", "\n", "mae_ab", "=", "0", "\n", "\n", "total_loss", "=", "0", "\n", "num_examples", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "euler_ab", ",", "euler_ba", ",", "label", "in", "tqdm", "(", "\n", "test_loader", ")", ":", "\n", "            ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "num_examples", "+=", "batch_size", "\n", "# [b, emb_dims, num]", "\n", "src_embedding", ",", "tgt_embedding", ",", "loss", ",", "mse_ab_", ",", "mae_ab_", "=", "net", "(", "src", ",", "target", ")", "\n", "\n", "total_loss", "+=", "loss", ".", "sum", "(", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mse_ab", "+=", "mse_ab_", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mae_ab", "+=", "mae_ab_", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "return", "total_loss", "*", "1.0", "/", "num_examples", ",", "mse_ab", "*", "1.0", "/", "num_examples", ",", "mae_ab", "*", "1.0", "/", "num_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.train_one_epoch": [[257, 283], ["net.train", "tqdm.tqdm", "src.cuda.cuda", "target.cuda.cuda", "src.cuda.size", "opt.zero_grad", "net", "loss.sum.sum", "loss.sum.backward", "opt.step", "mse_ab_.sum().item", "mae_ab_.sum().item", "loss.sum.item", "mse_ab_.sum", "mae_ab_.sum"], "function", ["None"], ["", "def", "train_one_epoch", "(", "args", ",", "net", ",", "train_loader", ",", "opt", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "\n", "mse_ab", "=", "0", "\n", "mae_ab", "=", "0", "\n", "\n", "total_loss", "=", "0", "\n", "num_examples", "=", "0", "\n", "\n", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "euler_ab", ",", "euler_ba", ",", "label", "in", "tqdm", "(", "\n", "train_loader", ")", ":", "\n", "        ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "num_examples", "+=", "batch_size", "\n", "\n", "src_embedding", ",", "tgt_embedding", ",", "loss", ",", "mse_ab_", ",", "mae_ab_", "=", "net", "(", "src", ",", "target", ")", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "mse_ab", "+=", "mse_ab_", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "mae_ab", "+=", "mae_ab_", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "return", "total_loss", "*", "1.0", "/", "num_examples", ",", "mse_ab", "*", "1.0", "/", "num_examples", ",", "mae_ab", "*", "1.0", "/", "num_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.testLPD": [[285, 294], ["lpdnet_model.test_one_epoch", "numpy.sqrt", "textio.cprint", "textio.cprint", "textio.cprint"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.test_one_epoch", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint"], ["", "def", "testLPD", "(", "args", ",", "net", ",", "test_loader", ",", "boardio", ",", "textio", ")", ":", "\n", "    ", "test_loss", ",", "test_mse_ab", ",", "test_mae_ab", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "test_rmse_ab", "=", "np", ".", "sqrt", "(", "test_mse_ab", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==FINAL TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f'", "\n", "%", "(", "-", "1", ",", "test_loss", ",", "test_mse_ab", ",", "test_rmse_ab", ",", "test_mae_ab", ")", ")", "\n", "return", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.lpdnet_model.trainLPD": [[296, 372], ["torch.optim.lr_scheduler.MultiStepLR", "range", "print", "torch.SGD", "print", "torch.Adam", "lpdnet_model.train_one_epoch", "lpdnet_model.test_one_epoch", "torch.optim.lr_scheduler.MultiStepLR.step", "numpy.sqrt", "numpy.sqrt", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "gc.collect", "net.parameters", "net.parameters", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "net.module.state_dict", "net.state_dict", "net.module.state_dict", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.train_one_epoch", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.test_one_epoch", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint"], ["", "def", "trainLPD", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", ")", ":", "\n", "    ", "if", "args", ".", "use_sgd", ":", "\n", "        ", "print", "(", "\"Use SGD\"", ")", "\n", "opt", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", "*", "100", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Use Adam\"", ")", "\n", "opt", "=", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "", "scheduler", "=", "MultiStepLR", "(", "opt", ",", "milestones", "=", "[", "75", ",", "150", ",", "200", "]", ",", "gamma", "=", "0.1", ")", "\n", "\n", "best_test_loss", "=", "np", ".", "inf", "\n", "\n", "best_test_mse_ab", "=", "np", ".", "inf", "\n", "best_test_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_mae_ab", "=", "np", ".", "inf", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "\n", "        ", "train_loss", ",", "train_mse_ab", ",", "train_mae_ab", "=", "train_one_epoch", "(", "args", ",", "net", ",", "train_loader", ",", "opt", ")", "\n", "\n", "test_loss", ",", "test_mse_ab", ",", "test_mae_ab", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "train_rmse_ab", "=", "np", ".", "sqrt", "(", "train_mse_ab", ")", "\n", "test_rmse_ab", "=", "np", ".", "sqrt", "(", "test_mse_ab", ")", "\n", "\n", "if", "best_test_loss", ">=", "test_loss", ":", "\n", "            ", "best_test_loss", "=", "test_loss", "\n", "best_test_mse_ab", "=", "test_mse_ab", "\n", "best_test_rmse_ab", "=", "test_rmse_ab", "\n", "best_test_mae_ab", "=", "test_mae_ab", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "module", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.best.t7'", "%", "args", ".", "exp_name", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.best.t7'", "%", "args", ".", "exp_name", ")", "\n", "\n", "", "", "textio", ".", "cprint", "(", "'==TRAIN=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f'", "\n", "%", "(", "epoch", ",", "train_loss", ",", "train_mse_ab", ",", "train_rmse_ab", ",", "train_mae_ab", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f'", "\n", "%", "(", "epoch", ",", "test_loss", ",", "test_mse_ab", ",", "test_rmse_ab", ",", "test_mae_ab", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==BEST TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f'", "\n", "%", "(", "epoch", ",", "best_test_loss", ",", "best_test_mse_ab", ",", "best_test_rmse_ab", ",", "best_test_mae_ab", ")", ")", "\n", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/loss'", ",", "train_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/MSE'", ",", "train_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/RMSE'", ",", "train_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/MAE'", ",", "train_mae_ab", ",", "epoch", ")", "\n", "\n", "############TEST", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/loss'", ",", "test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/MSE'", ",", "test_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/RMSE'", ",", "test_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/MAE'", ",", "test_mae_ab", ",", "epoch", ")", "\n", "\n", "############BEST TEST", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/loss'", ",", "best_test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/MSE'", ",", "best_test_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/RMSE'", ",", "best_test_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/MAE'", ",", "best_test_mae_ab", ",", "epoch", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "torch", ".", "save", "(", "net", ".", "module", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.%d.t7'", "%", "(", "args", ".", "exp_name", ",", "epoch", ")", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.%d.t7'", "%", "(", "args", ".", "exp_name", ",", "epoch", ")", ")", "\n", "\n", "", "gc", ".", "collect", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.PointNet.__init__": [[66, 80], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dims", "=", "512", ")", ":", "\n", "        ", "super", "(", "PointNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv1d", "(", "128", ",", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "emb_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.PointNet.forward": [[81, 88], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vcrnet_model.PointNet.bn1", "vcrnet_model.PointNet.bn2", "vcrnet_model.PointNet.bn3", "vcrnet_model.PointNet.bn4", "vcrnet_model.PointNet.bn5", "vcrnet_model.PointNet.conv1", "vcrnet_model.PointNet.conv2", "vcrnet_model.PointNet.conv3", "vcrnet_model.PointNet.conv4", "vcrnet_model.PointNet.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.DGCNN.__init__": [[91, 103], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dims", "=", "512", ")", ":", "\n", "        ", "super", "(", "DGCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "6", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "512", ",", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "emb_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.DGCNN.forward": [[104, 124], ["torch.relu().view.size", "util.util.get_graph_feature", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.relu().view", "vcrnet_model.DGCNN.bn1", "torch.relu().view.max", "vcrnet_model.DGCNN.bn2", "torch.relu().view.max", "vcrnet_model.DGCNN.bn3", "torch.relu().view.max", "vcrnet_model.DGCNN.bn4", "torch.relu().view.max", "vcrnet_model.DGCNN.conv1", "vcrnet_model.DGCNN.conv2", "vcrnet_model.DGCNN.conv3", "vcrnet_model.DGCNN.conv4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "vcrnet_model.DGCNN.bn5", "vcrnet_model.DGCNN.conv5"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.get_graph_feature"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", ",", "num_dims", ",", "num_points", "=", "x", ".", "size", "(", ")", "# [b,3,num]", "\n", "x", "=", "get_graph_feature", "(", "x", ")", "# [b,6,num,20]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "# [b,64,num,20]", "\n", "x1", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# [b,64,num,1]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "# [b,64,num,20]", "\n", "x2", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# [b,64,num,1]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "# [b,128,num,20]", "\n", "x3", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# [b,128,num,1]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "# [b,256,num,20]", "\n", "x4", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# [b,256,num,1]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "dim", "=", "1", ")", "# [b,512,num,1]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_points", ")", "# [b,512,num]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.MLPHead.__init__": [[127, 142], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "MLPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "emb_dims", "=", "emb_dims", "\n", "self", ".", "nn", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "emb_dims", "*", "2", ",", "emb_dims", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dims", "//", "2", ",", "emb_dims", "//", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dims", "//", "4", ",", "emb_dims", "//", "8", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "proj_rot", "=", "nn", ".", "Linear", "(", "emb_dims", "//", "8", ",", "4", ")", "\n", "self", ".", "proj_trans", "=", "nn", ".", "Linear", "(", "emb_dims", "//", "8", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.MLPHead.forward": [[143, 152], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vcrnet_model.MLPHead.nn", "vcrnet_model.MLPHead.proj_rot", "vcrnet_model.MLPHead.proj_trans", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "util.util.quat2mat", "vcrnet_model.MLPHead.max"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.quat2mat"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src_embedding", "=", "input", "[", "0", "]", "\n", "tgt_embedding", "=", "input", "[", "1", "]", "\n", "embedding", "=", "torch", ".", "cat", "(", "(", "src_embedding", ",", "tgt_embedding", ")", ",", "dim", "=", "1", ")", "\n", "embedding", "=", "self", ".", "nn", "(", "embedding", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "\n", "rotation", "=", "self", ".", "proj_rot", "(", "embedding", ")", "\n", "rotation", "=", "rotation", "/", "torch", ".", "norm", "(", "rotation", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "translation", "=", "self", ".", "proj_trans", "(", "embedding", ")", "\n", "return", "quat2mat", "(", "rotation", ")", ",", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.Identity.__init__": [[155, 157], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.Identity.forward": [[158, 160], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VcpTopK.__init__": [[167, 172], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "VcpTopK", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_nn", "=", "args", ".", "emb_nn", "\n", "self", ".", "partial", "=", "args", ".", "partial", "\n", "self", ".", "overlap2", "=", "args", ".", "overlap2", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VcpTopK.forward": [[173, 189], ["vcrnet_model.VcpTopK.selectCom", "vcrnet_model.VcpTopK.getCopair", "vcrnet_model.VcpTopK.getCopairALL"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VcpTopK.selectCom", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VcpTopK.getCopair", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VcpTopK.getCopairALL"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src_embedding", "=", "input", "[", "0", "]", "\n", "tgt_embedding", "=", "input", "[", "1", "]", "\n", "\n", "src", "=", "input", "[", "2", "]", "\n", "tgt", "=", "input", "[", "3", "]", "\n", "\n", "if", "self", ".", "partial", ":", "\n", "            ", "src_overlap", ",", "src_embedding_overlap", ",", "tgt_overlap", ",", "tgt_embedding_overlap", ",", "src_remain", ",", "tgt_remain", "=", "self", ".", "selectCom", "(", "src", ",", "src_embedding", ",", "tgt", ",", "tgt_embedding", ",", "overlap2", "=", "self", ".", "overlap2", ")", "\n", "src", ",", "src_corr", "=", "self", ".", "getCopair", "(", "src_overlap", ",", "src_embedding_overlap", ",", "tgt_overlap", ",", "tgt_embedding_overlap", ",", "\n", "self", ".", "overlap2", ")", "\n", "", "else", ":", "\n", "            ", "src", ",", "src_corr", "=", "self", ".", "getCopairALL", "(", "src", ",", "src_embedding", ",", "tgt", ",", "tgt_embedding", ")", "\n", "\n", "", "return", "src", ",", "src_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VcpTopK.selectCom": [[190, 263], ["src.transpose().contiguous.transpose().contiguous.size", "tgt.transpose().contiguous.transpose().contiguous.size", "numpy.arange", "numpy.arange", "src_emb.view().permute.view().permute.size", "int", "int", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "idxColSum.view.view.view", "numpy.setdiff1d", "tgt.transpose().contiguous.transpose().contiguous.transpose().contiguous", "tgt_overlap.view().permute.view().permute.view().permute", "tgt_remain.view().permute.view().permute.view().permute", "tgt_emb.view().permute.view().permute.transpose().contiguous", "tgt_emb.view().permute.view().permute.view().permute", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "idxRowSum.view.view.view", "numpy.setdiff1d", "src.transpose().contiguous.transpose().contiguous.transpose().contiguous", "src_overlap.view().permute.view().permute.view().permute", "src_remain.view().permute.view().permute.view().permute", "src_emb.view().permute.view().permute.transpose().contiguous", "src_emb.view().permute.view().permute.view().permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.sum.topk", "torch.sum.topk", "torch.sum.topk", "torch.sum.topk", "numpy.arange.reshape", "idxColSum.view.view.detach().cpu().numpy", "tgt.transpose().contiguous.transpose().contiguous.view", "tgt.transpose().contiguous.transpose().contiguous.view", "tgt_emb.view().permute.view().permute.view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.sum.topk", "torch.sum.topk", "torch.sum.topk", "torch.sum.topk", "idxRowSum.view.view.detach().cpu().numpy", "src.transpose().contiguous.transpose().contiguous.view", "src.transpose().contiguous.transpose().contiguous.view", "src_emb.view().permute.view().permute.view", "src_emb.view().permute.view().permute.transpose().contiguous", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "tgt.transpose().contiguous.transpose().contiguous.transpose", "tgt_overlap.view().permute.view().permute.view", "tgt_remain.view().permute.view().permute.view", "tgt_emb.view().permute.view().permute.transpose", "tgt_emb.view().permute.view().permute.view", "src.transpose().contiguous.transpose().contiguous.transpose", "src_overlap.view().permute.view().permute.view", "src_remain.view().permute.view().permute.view", "src_emb.view().permute.view().permute.transpose", "src_emb.view().permute.view().permute.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "idxColSum.view.view.detach().cpu", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "idxRowSum.view.view.detach().cpu", "src_emb.view().permute.view().permute.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "idxColSum.view.view.detach", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "idxRowSum.view.view.detach", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["", "def", "selectCom", "(", "self", ",", "src", ",", "src_emb", ",", "tgt", ",", "tgt_emb", ",", "overlap2", "=", "0.75", ")", ":", "\n", "        ", "\"\"\"Select the points that overlap between two point cluods.\n\n        Args:\n            src: source point cloud\n            src_emb: embedded source\n            tgt: target\n            tgt_emb: embeded target\n            overlap2: ratio of points that overlap in the original point cloud.\n\n        Returns:\n            src, src_emb, tgt, tgt_emb after selection (batch_size, 3, num)\n        \"\"\"", "\n", "batch_size", ",", "n_dims", ",", "num_points_src", "=", "src", ".", "size", "(", ")", "\n", "batch_size", ",", "n_dims", ",", "num_points_tgt", "=", "tgt", ".", "size", "(", ")", "\n", "all_index_src", "=", "np", ".", "arange", "(", "batch_size", "*", "num_points_src", ")", "\n", "all_index_tgt", "=", "np", ".", "arange", "(", "batch_size", "*", "num_points_tgt", ")", "\n", "_", ",", "n_fdims", ",", "_", "=", "src_emb", ".", "size", "(", ")", "\n", "srcK", "=", "int", "(", "num_points_src", "*", "0.84", "*", "overlap2", ")", "\n", "tgtK", "=", "int", "(", "num_points_tgt", "*", "0.84", "*", "overlap2", ")", "\n", "\n", "inner", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src_emb", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "tgt_emb", ")", "\n", "xx", "=", "torch", ".", "sum", "(", "src_emb", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "yy", "=", "torch", ".", "sum", "(", "tgt_emb", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "pairwise_distance", "=", "-", "xx", "-", "inner", "\n", "scores", "=", "pairwise_distance", "-", "yy", "\n", "\n", "idx_base_tgt", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "num_points_tgt", "\n", "\n", "scoresSoft", "=", "torch", ".", "softmax", "(", "scores", ",", "dim", "=", "2", ")", "# [b,num,num]", "\n", "scoresColSum", "=", "torch", ".", "sum", "(", "scoresSoft", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "idxColSum", "=", "scoresColSum", ".", "topk", "(", "k", "=", "tgtK", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "\n", "idxColSum", "=", "idxColSum", "+", "idx_base_tgt", "\n", "idxColSum", "=", "idxColSum", ".", "view", "(", "-", "1", ")", "# (batch_size* tgtK)", "\n", "\n", "index_remain", "=", "np", ".", "setdiff1d", "(", "all_index_tgt", ".", "reshape", "(", "-", "1", ")", ",", "idxColSum", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# choose src topK", "\n", "tgt", "=", "tgt", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num, 3)", "\n", "tgt_overlap", "=", "tgt", ".", "view", "(", "batch_size", "*", "num_points_tgt", ",", "n_dims", ")", "[", "idxColSum", ",", ":", "]", "\n", "tgt_overlap", "=", "tgt_overlap", ".", "view", "(", "batch_size", ",", "tgtK", ",", "n_dims", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (batch_size, 3, num)", "\n", "tgt_remain", "=", "tgt", ".", "view", "(", "batch_size", "*", "num_points_tgt", ",", "n_dims", ")", "[", "index_remain", ",", ":", "]", "\n", "tgt_remain", "=", "tgt_remain", ".", "view", "(", "batch_size", ",", "-", "1", ",", "n_dims", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (batch_size, 3, num)", "\n", "\n", "# choose src topK", "\n", "tgt_emb", "=", "tgt_emb", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num, 3)", "\n", "tgt_emb", "=", "tgt_emb", ".", "view", "(", "batch_size", "*", "num_points_tgt", ",", "n_fdims", ")", "[", "idxColSum", ",", ":", "]", "\n", "tgt_emb", "=", "tgt_emb", ".", "view", "(", "batch_size", ",", "tgtK", ",", "n_fdims", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (batch_size, 3, num)", "\n", "\n", "idx_base_src", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "num_points_src", "\n", "scoresSoft", "=", "torch", ".", "softmax", "(", "scores", ",", "dim", "=", "1", ")", "# [b,num,num]", "\n", "scoresRowSum", "=", "torch", ".", "sum", "(", "scoresSoft", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "idxRowSum", "=", "scoresRowSum", ".", "topk", "(", "k", "=", "srcK", ",", "dim", "=", "-", "2", ")", "[", "1", "]", "# (batch_size, srcK, 1)", "\n", "\n", "idxRowSum", "=", "idxRowSum", "+", "idx_base_src", "\n", "idxRowSum", "=", "idxRowSum", ".", "view", "(", "-", "1", ")", "# (batch_size* srcK)", "\n", "index_remain", "=", "np", ".", "setdiff1d", "(", "all_index_src", ",", "idxRowSum", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "# choose src topK", "\n", "src", "=", "src", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num, 3)", "\n", "src_overlap", "=", "src", ".", "view", "(", "batch_size", "*", "num_points_src", ",", "n_dims", ")", "[", "idxRowSum", ",", ":", "]", "\n", "src_overlap", "=", "src_overlap", ".", "view", "(", "batch_size", ",", "srcK", ",", "n_dims", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (batch_size, 3, num)", "\n", "src_remain", "=", "src", ".", "view", "(", "batch_size", "*", "num_points_src", ",", "n_dims", ")", "[", "index_remain", ",", ":", "]", "\n", "src_remain", "=", "src_remain", ".", "view", "(", "batch_size", ",", "-", "1", ",", "n_dims", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (batch_size, 3, num)", "\n", "\n", "# choose src topK", "\n", "src_emb", "=", "src_emb", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num, 3)", "\n", "src_emb", "=", "src_emb", ".", "view", "(", "batch_size", "*", "num_points_src", ",", "n_fdims", ")", "[", "idxRowSum", ",", ":", "]", "\n", "src_emb", "=", "src_emb", ".", "view", "(", "batch_size", ",", "srcK", ",", "n_fdims", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (batch_size, 3, num)", "\n", "\n", "return", "src_overlap", ",", "src_emb", ",", "tgt_overlap", ",", "tgt_emb", ",", "src_remain", ",", "tgt_remain", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VcpTopK.getCopair": [[264, 333], ["src.view().permute.view().permute.size", "tgt.transpose().contiguous.transpose().contiguous.size", "src_emb.size", "int", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "idx.view.view.view", "tgt.transpose().contiguous.transpose().contiguous.transpose().contiguous", "candidates.view.view.view", "idx.view.view.view", "tgtCandidates.view().permute.view().permute.view().permute", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "torch.div", "valCandidates.view().unsqueeze.view().unsqueeze.view().unsqueeze", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "torch.matmul().squeeze().permute", "src.view().permute.view().permute.transpose().contiguous", "src.view().permute.view().permute.view().permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax.topk", "torch.softmax.topk", "torch.softmax.topk", "torch.softmax.topk", "torch.softmax.topk", "torch.softmax.topk", "torch.softmax.topk", "torch.softmax.topk", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "tgt.transpose().contiguous.transpose().contiguous.view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "torch.sum().topk", "candidates.view.view.view", "torch.div.view", "torch.div.view", "torch.div.view", "torch.div.view", "src.view().permute.view().permute.view", "src_emb.transpose().contiguous", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "tgt.transpose().contiguous.transpose().contiguous.transpose", "tgtCandidates.view().permute.view().permute.view", "valCandidates.view().unsqueeze.view().unsqueeze.view", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "src.view().permute.view().permute.transpose", "src.view().permute.view().permute.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "src_emb.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["", "def", "getCopair", "(", "self", ",", "src", ",", "src_emb", ",", "tgt", ",", "tgt_emb", ",", "overlap2", ")", ":", "\n", "        ", "\"\"\"Get virtual corresponding point clouds\n\n        The VCP is acquired by weighted sum of related #tgtK points\n\n        Args:\n            src: source point cloud\n            src_emb: embedded source\n            tgt: target\n            tgt_emb: embeded target\n\n        Returns:\n\n        \"\"\"", "\n", "\n", "batch_size", ",", "n_dims", ",", "num_src", "=", "src", ".", "size", "(", ")", "\n", "batch_size", ",", "n_dims", ",", "num_tgt", "=", "tgt", ".", "size", "(", ")", "\n", "_", ",", "f_dims", ",", "_", "=", "src_emb", ".", "size", "(", ")", "\n", "\n", "tgtK", "=", "1", "#", "\n", "srcK", "=", "int", "(", "num_src", "*", "0.52", "*", "overlap2", ")", "\n", "\n", "# 1). in form of softmax weights", "\n", "inner", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src_emb", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "tgt_emb", ")", "\n", "xx", "=", "torch", ".", "sum", "(", "src_emb", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "yy", "=", "torch", ".", "sum", "(", "tgt_emb", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "pairwise_distance", "=", "-", "xx", "-", "inner", "\n", "pairwise_distance", "=", "pairwise_distance", "-", "yy", "\n", "# for clarification, call it negative pair-wise distance would be better", "\n", "\n", "pairwise_distance", "=", "torch", ".", "softmax", "(", "pairwise_distance", ",", "dim", "=", "2", ")", "# [b,num_src,num_tgt]", "\n", "\n", "idx", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "tgtK", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "val", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "tgtK", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "\n", "# 2). choose tgtK tgt candidates", "\n", "idx_base", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "num_tgt", "\n", "idx", "=", "idx", "+", "idx_base", "\n", "idx", "=", "idx", ".", "view", "(", "-", "1", ")", "# batch_size * num_src * tgtK", "\n", "tgt", "=", "tgt", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "candidates", "=", "tgt", ".", "view", "(", "batch_size", "*", "num_tgt", ",", "-", "1", ")", "[", "idx", ",", ":", "]", "\n", "candidates", "=", "candidates", ".", "view", "(", "batch_size", ",", "num_src", ",", "tgtK", ",", "n_dims", ")", "# (batch_size,num_src, tgtK, 3)", "\n", "\n", "# choose tgt topK", "\n", "idx_base", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "num_src", "\n", "idx", "=", "torch", ".", "sum", "(", "val", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "topk", "(", "k", "=", "srcK", ",", "dim", "=", "-", "2", ")", "[", "1", "]", "# (batch_size, srcK, 1)", "\n", "idx", "=", "idx", "+", "idx_base", "\n", "idx", "=", "idx", ".", "view", "(", "-", "1", ")", "# (batch_size* srcK)", "\n", "tgtCandidates", "=", "candidates", ".", "view", "(", "batch_size", "*", "num_src", ",", "tgtK", ",", "n_dims", ")", "[", "idx", ",", ":", ",", ":", "]", "\n", "tgtCandidates", "=", "tgtCandidates", ".", "view", "(", "batch_size", ",", "srcK", ",", "tgtK", ",", "n_dims", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "\n", "2", ")", "# (batch_size,srcK, 3, tgtK)", "\n", "\n", "# 3). choose val topK origin val, which is the weight in the sum (batch_size, num_src, tgtK)", "\n", "val_sum", "=", "torch", ".", "sum", "(", "val", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "val", "=", "torch", ".", "div", "(", "val", ",", "val_sum", ")", "\n", "valCandidates", "=", "val", ".", "view", "(", "batch_size", "*", "num_src", ",", "tgtK", ")", "[", "idx", ",", ":", "]", "\n", "valCandidates", "=", "valCandidates", ".", "view", "(", "batch_size", ",", "srcK", ",", "tgtK", ")", ".", "unsqueeze", "(", "-", "1", ")", "# (batch_size, srcK, tgtK, 1)", "\n", "\n", "src_corr", "=", "torch", ".", "matmul", "(", "tgtCandidates", ",", "valCandidates", ")", ".", "squeeze", "(", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "# choose src topK", "\n", "src", "=", "src", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num, 3)", "\n", "src", "=", "src", ".", "view", "(", "batch_size", "*", "num_src", ",", "n_dims", ")", "[", "idx", ",", ":", "]", "\n", "src", "=", "src", ".", "view", "(", "batch_size", ",", "srcK", ",", "n_dims", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (batch_size, 3, srcK)", "\n", "\n", "return", "src", ",", "src_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VcpTopK.getCopairALL": [[334, 348], ["src.size", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "src_emb.transpose().contiguous", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.softmax.transpose", "torch.softmax.transpose", "torch.softmax.transpose", "torch.softmax.transpose", "src_emb.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "getCopairALL", "(", "self", ",", "src", ",", "src_emb", ",", "tgt", ",", "tgt_emb", ")", ":", "\n", "        ", "batch_size", ",", "n_dims", ",", "num_points", "=", "src", ".", "size", "(", ")", "\n", "# Calculate the distance matrix", "\n", "inner", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src_emb", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "tgt_emb", ")", "\n", "xx", "=", "torch", ".", "sum", "(", "src_emb", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "yy", "=", "torch", ".", "sum", "(", "tgt_emb", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "pairwise_distance", "=", "-", "xx", "-", "inner", "\n", "pairwise_distance", "=", "pairwise_distance", "-", "yy", "\n", "\n", "scores", "=", "torch", ".", "softmax", "(", "pairwise_distance", ",", "dim", "=", "2", ")", "# [b,num,num]", "\n", "src_corr", "=", "torch", ".", "matmul", "(", "tgt", ",", "scores", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "return", "src", ",", "src_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.SVDHead.__init__": [[351, 355], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SVDHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reflect", "=", "nn", ".", "Parameter", "(", "torch", ".", "eye", "(", "3", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "reflect", "[", "2", ",", "2", "]", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.SVDHead.forward": [[356, 400], ["src.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "src.mean", "src_corr.mean", "src_corr_centered.transpose().contiguous", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "print", "print", "print", "print", "src.size", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "src_corr.mean", "t.view", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "print", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "torch.isnan().sum", "print", "u.transpose().contiguous", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "src.mean", "src_corr_centered.transpose", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "u.transpose().contiguous", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "u.transpose", "u.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "src", ",", "src_corr", ")", ":", "\n", "\n", "        ", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "\n", "src_centered", "=", "src", "-", "src", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "src_corr_centered", "=", "src_corr", "-", "src_corr", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "H", "=", "torch", ".", "matmul", "(", "src_centered", ",", "src_corr_centered", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "if", "torch", ".", "isnan", "(", "H", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "print", "(", "''", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "''", ")", "\n", "print", "(", "'H :nan'", ")", "\n", "if", "torch", ".", "isnan", "(", "src_centered", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "print", "(", "'src_centered :nan'", ")", "\n", "", "if", "torch", ".", "isnan", "(", "src_corr_centered", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "                ", "print", "(", "'src_corr_centered :nan'", ")", "\n", "\n", "", "", "U", ",", "S", ",", "V", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "R", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "src", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "r_det", "=", "torch", ".", "det", "(", "r", ")", "\n", "if", "r_det", "<", "0", ":", "\n", "                ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "v", "=", "torch", ".", "matmul", "(", "v", ",", "self", ".", "reflect", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "", "R", ".", "append", "(", "r", ")", "\n", "U", ".", "append", "(", "u", ")", "\n", "S", ".", "append", "(", "s", ")", "\n", "V", ".", "append", "(", "v", ")", "\n", "\n", "", "U", "=", "torch", ".", "stack", "(", "U", ",", "dim", "=", "0", ")", "\n", "V", "=", "torch", ".", "stack", "(", "V", ",", "dim", "=", "0", ")", "\n", "S", "=", "torch", ".", "stack", "(", "S", ",", "dim", "=", "0", ")", "\n", "R", "=", "torch", ".", "stack", "(", "R", ",", "dim", "=", "0", ")", "\n", "\n", "t", "=", "torch", ".", "matmul", "(", "-", "R", ",", "src", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ")", "+", "src_corr", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "return", "R", ",", "t", ".", "view", "(", "batch_size", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VcpByDis.__init__": [[403, 406], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "VcpByDis", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_nn", "=", "args", ".", "emb_nn", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VcpByDis.forward": [[407, 422], ["src_embedding.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "src_embedding.transpose().contiguous", "torch.softmax.transpose", "torch.softmax.transpose", "torch.softmax.transpose", "torch.softmax.transpose", "src_embedding.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src_embedding", "=", "input", "[", "0", "]", "\n", "tgt_embedding", "=", "input", "[", "1", "]", "\n", "\n", "src", "=", "input", "[", "2", "]", "\n", "tgt", "=", "input", "[", "3", "]", "\n", "\n", "d_k", "=", "src_embedding", ".", "size", "(", "1", ")", "\n", "\n", "scores", "=", "torch", ".", "matmul", "(", "src_embedding", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "tgt_embedding", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "scores", "=", "torch", ".", "softmax", "(", "scores", ",", "dim", "=", "2", ")", "\n", "\n", "src_corr", "=", "torch", ".", "matmul", "(", "tgt", ",", "scores", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "return", "src", ",", "src_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VcpAtt.__init__": [[425, 433], ["torch.Module.__init__", "model.transformer.clones", "model.transformer.clones", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.clones", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.clones"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "VcpAtt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "linears_emb", "=", "clones", "(", "nn", ".", "Linear", "(", "self", ".", "emb_dims", ",", "self", ".", "emb_dims", ")", ",", "2", ")", "\n", "self", ".", "linears_3d", "=", "clones", "(", "nn", ".", "Linear", "(", "3", ",", "3", ")", ",", "2", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "None", "\n", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VcpAtt.forward": [[434, 461], ["src_embedding.transpose().contiguous", "tgt_embedding.transpose().contiguous", "query.transpose().contiguous.transpose().contiguous.transpose().contiguous", "key.transpose().contiguous.transpose().contiguous.transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "src_embedding.transpose", "tgt_embedding.transpose", "query.transpose().contiguous.transpose().contiguous.transpose", "key.transpose().contiguous.transpose().contiguous.transpose", "query.transpose().contiguous.transpose().contiguous.transpose().contiguous", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.softmax.transpose", "torch.softmax.transpose", "torch.softmax.transpose", "torch.softmax.transpose", "query.transpose().contiguous.transpose().contiguous.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src_embedding", "=", "input", "[", "0", "]", "\n", "tgt_embedding", "=", "input", "[", "1", "]", "\n", "\n", "src", "=", "input", "[", "2", "]", "\n", "tgt", "=", "input", "[", "3", "]", "\n", "\n", "query", "=", "src_embedding", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "key", "=", "tgt_embedding", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "value", "=", "tgt", "\n", "\n", "query", "=", "self", ".", "linears_emb", "[", "0", "]", "(", "query", ")", "\n", "key", "=", "self", ".", "linears_emb", "[", "1", "]", "(", "key", ")", "\n", "\n", "query", "=", "query", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "key", "=", "key", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "inner", "=", "-", "2", "*", "torch", ".", "matmul", "(", "query", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "key", ")", "\n", "xx", "=", "torch", ".", "sum", "(", "query", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "yy", "=", "torch", ".", "sum", "(", "key", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "pairwise_distance", "=", "-", "xx", "-", "inner", "\n", "pairwise_distance", "=", "pairwise_distance", "-", "yy", "\n", "\n", "scores", "=", "torch", ".", "softmax", "(", "pairwise_distance", ",", "dim", "=", "2", ")", "# [b,num,num]", "\n", "src_corr", "=", "torch", ".", "matmul", "(", "value", ",", "scores", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "return", "src", ",", "src_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VCRNet.__init__": [[464, 494], ["torch.Module.__init__", "vcrnet_model.SVDHead", "vcrnet_model.PointNet", "vcrnet_model.Identity", "vcrnet_model.VcpTopK", "vcrnet_model.DGCNN", "model.transformer.Transformer", "vcrnet_model.VcpAtt", "model.lpdnet_model.LPDNet", "Exception", "vcrnet_model.VcpByDis", "Exception"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "VCRNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "# Dimension of embeddings, default = 512", "\n", "self", ".", "cycle", "=", "args", ".", "cycle", "# Whether to use cycle consistency, default = False", "\n", "if", "args", ".", "emb_nn", "==", "'pointnet'", ":", "\n", "            ", "self", ".", "emb_nn", "=", "PointNet", "(", "emb_dims", "=", "self", ".", "emb_dims", ")", "\n", "", "elif", "args", ".", "emb_nn", "==", "'dgcnn'", ":", "\n", "            ", "self", ".", "emb_nn", "=", "DGCNN", "(", "emb_dims", "=", "self", ".", "emb_dims", ")", "\n", "", "elif", "args", ".", "emb_nn", "==", "'lpdnet'", ":", "# default", "\n", "            ", "self", ".", "emb_nn", "=", "LPDNet", "(", "args", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Not implemented'", ")", "\n", "\n", "", "if", "args", ".", "pointer", "==", "'identity'", ":", "\n", "            ", "self", ".", "pointer", "=", "Identity", "(", ")", "\n", "", "elif", "args", ".", "pointer", "==", "'transformer'", ":", "# default", "\n", "            ", "self", ".", "pointer", "=", "Transformer", "(", "args", "=", "args", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pointer", "=", "None", "\n", "\n", "", "if", "args", ".", "vcp_nn", "==", "'topK'", ":", "# default", "\n", "            ", "self", ".", "head", "=", "VcpTopK", "(", "args", "=", "args", ")", "\n", "", "elif", "args", ".", "vcp_nn", "==", "'att'", ":", "\n", "            ", "self", ".", "head", "=", "VcpAtt", "(", "args", "=", "args", ")", "\n", "", "elif", "args", ".", "vcp_nn", "==", "'dist'", ":", "\n", "            ", "self", ".", "head", "=", "VcpByDis", "(", "args", "=", "args", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Not implemented\"", ")", "\n", "\n", "", "self", ".", "svd", "=", "SVDHead", "(", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.VCRNet.forward": [[495, 519], ["vcrnet_model.VCRNet.emb_nn", "vcrnet_model.VCRNet.emb_nn", "vcrnet_model.VCRNet.head", "vcrnet_model.VCRNet.svd", "vcrnet_model.VCRNet.pointer", "vcrnet_model.VCRNet.head", "vcrnet_model.VCRNet.svd", "rotation_ab.transpose().contiguous", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "rotation_ab.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "translation_ab.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src", "=", "input", "[", "0", "]", "\n", "tgt", "=", "input", "[", "1", "]", "\n", "\n", "src_embedding", "=", "self", ".", "emb_nn", "(", "src", ")", "\n", "tgt_embedding", "=", "self", ".", "emb_nn", "(", "tgt", ")", "\n", "\n", "if", "self", ".", "pointer", "is", "not", "None", ":", "\n", "            ", "src_embedding_p", ",", "tgt_embedding_p", "=", "self", ".", "pointer", "(", "src_embedding", ",", "tgt_embedding", ")", "\n", "src_embedding", "=", "src_embedding", "+", "src_embedding_p", "\n", "tgt_embedding", "=", "tgt_embedding", "+", "tgt_embedding_p", "\n", "\n", "", "srcK", ",", "src_corrK", "=", "self", ".", "head", "(", "src_embedding", ",", "tgt_embedding", ",", "src", ",", "tgt", ")", "\n", "\n", "rotation_ab", ",", "translation_ab", "=", "self", ".", "svd", "(", "srcK", ",", "src_corrK", ")", "\n", "\n", "if", "self", ".", "cycle", ":", "\n", "            ", "srcK_ba", ",", "src_corrK_ba", "=", "self", ".", "head", "(", "tgt_embedding", ",", "src_embedding", ",", "tgt", ",", "src", ")", "\n", "rotation_ba", ",", "translation_ba", "=", "self", ".", "svd", "(", "srcK_ba", ",", "src_corrK_ba", ")", "\n", "", "else", ":", "\n", "            ", "rotation_ba", "=", "rotation_ab", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "translation_ba", "=", "-", "torch", ".", "matmul", "(", "rotation_ba", ",", "translation_ab", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "", "return", "srcK", ",", "src_corrK", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.vcrnetIter": [[21, 44], ["range", "torch.matmul.transpose().contiguous", "net", "util.util.transform_point_cloud", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "rotation_ab_pred.detach", "translation_ab_pred.detach", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.transpose", "rotation_ab_pred.detach", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "translation_ab_pred.detach", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "translation_ab_pred.detach.unsqueeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rotation_ab_pred.detach", "translation_ab_pred.detach.unsqueeze"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud"], ["def", "vcrnetIter", "(", "net", ",", "src", ",", "tgt", ",", "iter", "=", "1", ")", ":", "\n", "    ", "transformed_src", "=", "src", "\n", "bFirst", "=", "True", "\n", "\n", "for", "i", "in", "range", "(", "iter", ")", ":", "\n", "        ", "srcK", ",", "src_corrK", ",", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", "=", "net", "(", "\n", "transformed_src", ",", "tgt", ")", "\n", "transformed_src", "=", "transform_point_cloud", "(", "transformed_src", ",", "rotation_ab_pred", ",", "translation_ab_pred", ")", "\n", "\n", "if", "bFirst", ":", "\n", "            ", "bFirst", "=", "False", "\n", "rotation_ab_pred_final", "=", "rotation_ab_pred", ".", "detach", "(", ")", "\n", "translation_ab_pred_final", "=", "translation_ab_pred", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "rotation_ab_pred_final", "=", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "detach", "(", ")", ",", "rotation_ab_pred_final", ")", "\n", "translation_ab_pred_final", "=", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "detach", "(", ")", ",", "\n", "translation_ab_pred_final", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "\n", "2", ")", "+", "translation_ab_pred", ".", "detach", "(", ")", "\n", "\n", "", "", "rotation_ba_pred_final", "=", "rotation_ab_pred_final", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "translation_ba_pred_final", "=", "-", "torch", ".", "matmul", "(", "rotation_ba_pred_final", ",", "translation_ab_pred_final", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "return", "srcK", ",", "src_corrK", ",", "rotation_ab_pred_final", ",", "translation_ab_pred_final", ",", "rotation_ba_pred_final", ",", "translation_ba_pred_final", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.vcrnetIcpNet": [[46, 63], ["model.icp_model.ICP().cuda", "net", "util.util.transform_point_cloud", "ICP().cuda.", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.transpose().contiguous", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "model.icp_model.ICP", "torch.matmul.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "translation_ab_pred.unsqueeze", "translation_ab_pred.unsqueeze"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud"], ["", "def", "vcrnetIcpNet", "(", "args", ",", "net", ",", "src", ",", "tgt", ")", ":", "\n", "    ", "icpNet", "=", "ICP", "(", "max_iterations", "=", "args", ".", "max_iterations", ")", ".", "cuda", "(", ")", "\n", "srcK", ",", "src_corrK", ",", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", "=", "net", "(", "src", ",", "tgt", ")", "\n", "\n", "transformed_src", "=", "transform_point_cloud", "(", "src", ",", "rotation_ab_pred", ",", "translation_ab_pred", ")", "\n", "\n", "_", ",", "_", ",", "rotation_ab_pred_icp", ",", "translation_ab_pred_icp", ",", "rotation_ba_pred_icp", ",", "translation_ba_pred_icp", "=", "icpNet", "(", "\n", "transformed_src", ",", "tgt", ")", "\n", "\n", "rotation_ab_pred", "=", "torch", ".", "matmul", "(", "rotation_ab_pred_icp", ",", "rotation_ab_pred", ")", "\n", "translation_ab_pred", "=", "torch", ".", "matmul", "(", "rotation_ab_pred_icp", ",", "translation_ab_pred", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "\n", "2", ")", "+", "translation_ab_pred_icp", "\n", "\n", "rotation_ba_pred", "=", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "translation_ba_pred", "=", "-", "torch", ".", "matmul", "(", "rotation_ba_pred", ",", "translation_ab_pred", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "return", "transformed_src", ",", "tgt", ",", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.test_one_epoch": [[521, 650], ["net.eval", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "src.cuda.cuda", "target.cuda.cuda", "rotation_ab.cuda.cuda", "translation_ab.cuda.cuda", "rotation_ba.cuda.cuda", "translation_ba.cuda.cuda", "src.cuda.size", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "util.util.transform_point_cloud", "util.util.transform_point_cloud", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "vcrnet_model.vcrnetIter", "rotation_ab.cuda.detach().cpu().numpy", "translation_ab.cuda.detach().cpu().numpy", "rotation_ab_pred.detach().cpu().numpy", "translation_ab_pred.detach().cpu().numpy", "euler_ab.numpy", "rotation_ba.cuda.detach().cpu().numpy", "translation_ba.cuda.detach().cpu().numpy", "rotation_ba_pred.detach().cpu().numpy", "translation_ba_pred.detach().cpu().numpy", "euler_ba.numpy", "torch.mse_loss", "torch.mse_loss", "torch.nn.functional.mse_loss.item", "torch.mse_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss_pose.item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "vcrnet_model.vcrnetIcpNet", "RuntimeError", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.mse_loss", "torch.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "util.util.transform_point_cloud", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda().unsqueeze().repeat.clone", "rotation_ab.cuda.detach().cpu", "translation_ab.cuda.detach().cpu", "rotation_ab_pred.detach().cpu", "translation_ab_pred.detach().cpu", "rotation_ba.cuda.detach().cpu", "translation_ba.cuda.detach().cpu", "rotation_ba_pred.detach().cpu", "translation_ba_pred.detach().cpu", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mse_loss", "torch.mse_loss", "rotation_ab_pred.transpose", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "rotation_ab_pred.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "cycle_loss.item", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "rotation_ab.cuda.detach", "translation_ab.cuda.detach", "rotation_ab_pred.detach", "translation_ab_pred.detach", "rotation_ba.cuda.detach", "translation_ba.cuda.detach", "rotation_ba_pred.detach", "translation_ba_pred.detach", "rotation_ab_pred.transpose", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rotation_ba_pred.transpose", "translation_ab_pred.view"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.vcrnetIter", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.vcrnetIcpNet", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud"], ["", "", "def", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "mse_ab", "=", "0", "\n", "mae_ab", "=", "0", "\n", "mse_ba", "=", "0", "\n", "mae_ba", "=", "0", "\n", "\n", "total_loss_VCRNet", "=", "0", "\n", "\n", "total_loss", "=", "0", "\n", "total_cycle_loss", "=", "0", "\n", "num_examples", "=", "0", "\n", "rotations_ab", "=", "[", "]", "\n", "translations_ab", "=", "[", "]", "\n", "rotations_ab_pred", "=", "[", "]", "\n", "translations_ab_pred", "=", "[", "]", "\n", "\n", "rotations_ba", "=", "[", "]", "\n", "translations_ba", "=", "[", "]", "\n", "rotations_ba_pred", "=", "[", "]", "\n", "translations_ba_pred", "=", "[", "]", "\n", "\n", "eulers_ab", "=", "[", "]", "\n", "eulers_ba", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "euler_ab", ",", "euler_ba", ",", "label", "in", "tqdm", "(", "\n", "test_loader", ")", ":", "\n", "\n", "            ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "cuda", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "cuda", "(", ")", "\n", "rotation_ba", "=", "rotation_ba", ".", "cuda", "(", ")", "\n", "translation_ba", "=", "translation_ba", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "num_examples", "+=", "batch_size", "\n", "\n", "if", "args", ".", "iter", ">", "0", ":", "\n", "                ", "srcK", ",", "src_corrK", ",", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", "=", "vcrnetIter", "(", "\n", "net", ",", "src", ",", "target", ",", "iter", "=", "args", ".", "iter", ")", "\n", "", "elif", "args", ".", "iter", "==", "0", ":", "\n", "                ", "srcK", ",", "src_corrK", ",", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", "=", "vcrnetIcpNet", "(", "\n", "args", ",", "net", ",", "src", ",", "target", ")", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'args.iter'", ")", "\n", "\n", "## save rotation and translation", "\n", "", "rotations_ab", ".", "append", "(", "rotation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab", ".", "append", "(", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ab_pred", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab_pred", ".", "append", "(", "translation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ab", ".", "append", "(", "euler_ab", ".", "numpy", "(", ")", ")", "\n", "##", "\n", "rotations_ba", ".", "append", "(", "rotation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba", ".", "append", "(", "translation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ba_pred", ".", "append", "(", "rotation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba_pred", ".", "append", "(", "translation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ba", ".", "append", "(", "euler_ba", ".", "numpy", "(", ")", ")", "\n", "\n", "# Predicted point cloud", "\n", "transformed_target", "=", "transform_point_cloud", "(", "target", ",", "rotation_ba_pred", ",", "translation_ba_pred", ")", "\n", "# Real point cloud", "\n", "transformed_srcK", "=", "transform_point_cloud", "(", "srcK", ",", "rotation_ab", ",", "translation_ab", ")", "\n", "\n", "# transformed_src = transform_point_cloud(src, rotation_ab_pred, translation_ab_pred)", "\n", "# from PC_reg_gif.draw import plot3d2", "\n", "# plot3d2(transformed_src[1], target[1])", "\n", "# plot3d2(transformed_target[1], src[1])", "\n", "\n", "###########################", "\n", "identity", "=", "torch", ".", "eye", "(", "3", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "if", "args", ".", "loss", "==", "'pose'", ":", "\n", "                ", "loss_VCRNet", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "\n", "", "elif", "args", ".", "loss", "==", "'point'", ":", "\n", "                ", "loss_VCRNet", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "transformed_srcK", ",", "src_corrK", ")", "\n", "", "else", ":", "\n", "                ", "lossPose", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "\n", "transformed_src", "=", "transform_point_cloud", "(", "src", ",", "rotation_ab_pred", ",", "translation_ab_pred", ")", "\n", "lossPoint", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "transformed_src", ",", "target", ")", "\n", "loss_VCRNet", "=", "lossPose", "+", "0.1", "*", "lossPoint", "\n", "\n", "", "loss_pose", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "\n", "\n", "total_loss_VCRNet", "+=", "loss_VCRNet", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "if", "args", ".", "cycle", ":", "\n", "                ", "rotation_loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ",", "rotation_ab_pred", ")", ",", "identity", ".", "clone", "(", ")", ")", "\n", "translation_loss", "=", "torch", ".", "mean", "(", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "\n", "translation_ab_pred", ".", "view", "(", "batch_size", ",", "3", ",", "1", ")", ")", ".", "view", "(", "batch_size", ",", "\n", "3", ")", "\n", "+", "translation_ba_pred", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", "]", ")", "\n", "cycle_loss", "=", "rotation_loss", "+", "translation_loss", "\n", "\n", "loss_pose", "=", "loss_pose", "+", "cycle_loss", "*", "0.1", "\n", "\n", "", "total_loss", "+=", "loss_pose", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "if", "args", ".", "cycle", ":", "\n", "                ", "total_cycle_loss", "=", "total_cycle_loss", "+", "cycle_loss", ".", "item", "(", ")", "*", "0.1", "*", "batch_size", "\n", "\n", "", "mse_ab", "+=", "torch", ".", "mean", "(", "(", "transformed_srcK", "-", "src_corrK", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ab", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_srcK", "-", "src_corrK", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "mse_ba", "+=", "torch", ".", "mean", "(", "(", "transformed_target", "-", "src", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ba", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_target", "-", "src", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "", "", "rotations_ab", "=", "np", ".", "concatenate", "(", "rotations_ab", ",", "axis", "=", "0", ")", "\n", "translations_ab", "=", "np", ".", "concatenate", "(", "translations_ab", ",", "axis", "=", "0", ")", "\n", "rotations_ab_pred", "=", "np", ".", "concatenate", "(", "rotations_ab_pred", ",", "axis", "=", "0", ")", "\n", "translations_ab_pred", "=", "np", ".", "concatenate", "(", "translations_ab_pred", ",", "axis", "=", "0", ")", "\n", "\n", "rotations_ba", "=", "np", ".", "concatenate", "(", "rotations_ba", ",", "axis", "=", "0", ")", "\n", "translations_ba", "=", "np", ".", "concatenate", "(", "translations_ba", ",", "axis", "=", "0", ")", "\n", "rotations_ba_pred", "=", "np", ".", "concatenate", "(", "rotations_ba_pred", ",", "axis", "=", "0", ")", "\n", "translations_ba_pred", "=", "np", ".", "concatenate", "(", "translations_ba_pred", ",", "axis", "=", "0", ")", "\n", "\n", "eulers_ab", "=", "np", ".", "concatenate", "(", "eulers_ab", ",", "axis", "=", "0", ")", "\n", "eulers_ba", "=", "np", ".", "concatenate", "(", "eulers_ba", ",", "axis", "=", "0", ")", "\n", "\n", "return", "total_loss", "*", "1.0", "/", "num_examples", ",", "total_cycle_loss", "/", "num_examples", ",", "mse_ab", "*", "1.0", "/", "num_examples", ",", "mae_ab", "*", "1.0", "/", "num_examples", ",", "mse_ba", "*", "1.0", "/", "num_examples", ",", "mae_ba", "*", "1.0", "/", "num_examples", ",", "rotations_ab", ",", "translations_ab", ",", "rotations_ab_pred", ",", "translations_ab_pred", ",", "rotations_ba", ",", "translations_ba", ",", "rotations_ba_pred", ",", "translations_ba_pred", ",", "eulers_ab", ",", "eulers_ba", ",", "total_loss_VCRNet", "*", "1.0", "/", "num_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.train_one_epoch": [[652, 766], ["net.train", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "src.cuda.cuda", "target.cuda.cuda", "rotation_ab.cuda.cuda", "translation_ab.cuda.cuda", "rotation_ba.cuda.cuda", "translation_ba.cuda.cuda", "src.cuda.size", "opt.zero_grad", "net", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "util.util.transform_point_cloud", "util.util.transform_point_cloud", "util.util.transform_point_cloud", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.nn.functional.mse_loss.backward", "opt.step", "rotation_ab.cuda.detach().cpu().numpy", "translation_ab.cuda.detach().cpu().numpy", "rotation_ab_pred.detach().cpu().numpy", "translation_ab_pred.detach().cpu().numpy", "euler_ab.numpy", "rotation_ba.cuda.detach().cpu().numpy", "translation_ba.cuda.detach().cpu().numpy", "rotation_ba_pred.detach().cpu().numpy", "translation_ba_pred.detach().cpu().numpy", "euler_ba.numpy", "torch.nn.functional.mse_loss.item", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss_pose.item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.mse_loss", "torch.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda().unsqueeze().repeat.clone", "rotation_ab.cuda.detach().cpu", "translation_ab.cuda.detach().cpu", "rotation_ab_pred.detach().cpu", "translation_ab_pred.detach().cpu", "rotation_ba.cuda.detach().cpu", "translation_ba.cuda.detach().cpu", "rotation_ba_pred.detach().cpu", "translation_ba_pred.detach().cpu", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mse_loss", "torch.mse_loss", "rotation_ab_pred.transpose", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "rotation_ab_pred.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "cycle_loss.item", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "rotation_ab.cuda.detach", "translation_ab.cuda.detach", "rotation_ab_pred.detach", "translation_ab_pred.detach", "rotation_ba.cuda.detach", "translation_ba.cuda.detach", "rotation_ba_pred.detach", "translation_ba_pred.detach", "rotation_ab_pred.transpose", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rotation_ba_pred.transpose", "translation_ab_pred.view"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud"], ["", "def", "train_one_epoch", "(", "args", ",", "net", ",", "train_loader", ",", "opt", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "\n", "\n", "mse_ab", "=", "0", "\n", "mae_ab", "=", "0", "\n", "mse_ba", "=", "0", "\n", "mae_ba", "=", "0", "\n", "\n", "total_loss_VCRNet", "=", "0", "\n", "\n", "total_loss", "=", "0", "\n", "total_cycle_loss", "=", "0", "\n", "num_examples", "=", "0", "\n", "rotations_ab", "=", "[", "]", "\n", "translations_ab", "=", "[", "]", "\n", "rotations_ab_pred", "=", "[", "]", "\n", "translations_ab_pred", "=", "[", "]", "\n", "\n", "rotations_ba", "=", "[", "]", "\n", "translations_ba", "=", "[", "]", "\n", "rotations_ba_pred", "=", "[", "]", "\n", "translations_ba_pred", "=", "[", "]", "\n", "\n", "eulers_ab", "=", "[", "]", "\n", "eulers_ba", "=", "[", "]", "\n", "\n", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "euler_ab", ",", "euler_ba", ",", "label", "in", "tqdm", "(", "\n", "train_loader", ")", ":", "\n", "        ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "cuda", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "cuda", "(", ")", "\n", "rotation_ba", "=", "rotation_ba", ".", "cuda", "(", ")", "\n", "translation_ba", "=", "translation_ba", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "num_examples", "+=", "batch_size", "\n", "srcK", ",", "src_corrK", ",", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", "=", "net", "(", "src", ",", "target", ")", "\n", "\n", "## save rotation and translation", "\n", "rotations_ab", ".", "append", "(", "rotation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab", ".", "append", "(", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ab_pred", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab_pred", ".", "append", "(", "translation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ab", ".", "append", "(", "euler_ab", ".", "numpy", "(", ")", ")", "\n", "##", "\n", "rotations_ba", ".", "append", "(", "rotation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba", ".", "append", "(", "translation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ba_pred", ".", "append", "(", "rotation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba_pred", ".", "append", "(", "translation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ba", ".", "append", "(", "euler_ba", ".", "numpy", "(", ")", ")", "\n", "\n", "transformed_src", "=", "transform_point_cloud", "(", "src", ",", "rotation_ab_pred", ",", "translation_ab_pred", ")", "\n", "transformed_target", "=", "transform_point_cloud", "(", "target", ",", "rotation_ba_pred", ",", "translation_ba_pred", ")", "\n", "\n", "transformed_srcK", "=", "transform_point_cloud", "(", "srcK", ",", "rotation_ab", ",", "translation_ab", ")", "\n", "###########################", "\n", "identity", "=", "torch", ".", "eye", "(", "3", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "if", "args", ".", "loss", "==", "'pose'", ":", "\n", "            ", "loss_VCRNet", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "\n", "", "elif", "args", ".", "loss", "==", "'point'", ":", "\n", "            ", "loss_VCRNet", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "transformed_srcK", ",", "src_corrK", ")", "\n", "", "else", ":", "\n", "            ", "lossPose", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "\n", "lossPoint", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "transformed_src", ",", "target", ")", "\n", "loss_VCRNet", "=", "lossPose", "+", "0.1", "*", "lossPoint", "\n", "\n", "", "loss_VCRNet", ".", "backward", "(", ")", "\n", "total_loss_VCRNet", "+=", "loss_VCRNet", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "loss_pose", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "\n", "if", "args", ".", "cycle", ":", "\n", "            ", "rotation_loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ",", "rotation_ab_pred", ")", ",", "identity", ".", "clone", "(", ")", ")", "\n", "translation_loss", "=", "torch", ".", "mean", "(", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "\n", "translation_ab_pred", ".", "view", "(", "batch_size", ",", "3", ",", "1", ")", ")", ".", "view", "(", "batch_size", ",", "3", ")", "\n", "+", "translation_ba_pred", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", "]", ")", "\n", "cycle_loss", "=", "rotation_loss", "+", "translation_loss", "\n", "\n", "loss_pose", "=", "loss_pose", "+", "cycle_loss", "*", "0.1", "\n", "\n", "", "opt", ".", "step", "(", ")", "\n", "total_loss", "+=", "loss_pose", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "if", "args", ".", "cycle", ":", "\n", "            ", "total_cycle_loss", "=", "total_cycle_loss", "+", "cycle_loss", ".", "item", "(", ")", "*", "0.1", "*", "batch_size", "\n", "\n", "", "mse_ab", "+=", "torch", ".", "mean", "(", "(", "transformed_srcK", "-", "src_corrK", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ab", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_srcK", "-", "src_corrK", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "mse_ba", "+=", "torch", ".", "mean", "(", "(", "transformed_target", "-", "src", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ba", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_target", "-", "src", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "", "rotations_ab", "=", "np", ".", "concatenate", "(", "rotations_ab", ",", "axis", "=", "0", ")", "\n", "translations_ab", "=", "np", ".", "concatenate", "(", "translations_ab", ",", "axis", "=", "0", ")", "\n", "rotations_ab_pred", "=", "np", ".", "concatenate", "(", "rotations_ab_pred", ",", "axis", "=", "0", ")", "\n", "translations_ab_pred", "=", "np", ".", "concatenate", "(", "translations_ab_pred", ",", "axis", "=", "0", ")", "\n", "\n", "rotations_ba", "=", "np", ".", "concatenate", "(", "rotations_ba", ",", "axis", "=", "0", ")", "\n", "translations_ba", "=", "np", ".", "concatenate", "(", "translations_ba", ",", "axis", "=", "0", ")", "\n", "rotations_ba_pred", "=", "np", ".", "concatenate", "(", "rotations_ba_pred", ",", "axis", "=", "0", ")", "\n", "translations_ba_pred", "=", "np", ".", "concatenate", "(", "translations_ba_pred", ",", "axis", "=", "0", ")", "\n", "\n", "eulers_ab", "=", "np", ".", "concatenate", "(", "eulers_ab", ",", "axis", "=", "0", ")", "\n", "eulers_ba", "=", "np", ".", "concatenate", "(", "eulers_ba", ",", "axis", "=", "0", ")", "\n", "\n", "return", "total_loss", "*", "1.0", "/", "num_examples", ",", "total_cycle_loss", "/", "num_examples", ",", "mse_ab", "*", "1.0", "/", "num_examples", ",", "mae_ab", "*", "1.0", "/", "num_examples", ",", "mse_ba", "*", "1.0", "/", "num_examples", ",", "mae_ba", "*", "1.0", "/", "num_examples", ",", "rotations_ab", ",", "translations_ab", ",", "rotations_ab_pred", ",", "translations_ab_pred", ",", "rotations_ba", ",", "translations_ba", ",", "rotations_ba_pred", ",", "translations_ba_pred", ",", "eulers_ab", ",", "eulers_ba", ",", "total_loss_VCRNet", "*", "1.0", "/", "num_examples", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.testVCRNet": [[768, 816], ["vcrnet_model.test_one_epoch", "numpy.sqrt", "numpy.sqrt", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "textio.cprint", "textio.cprint", "textio.cprint", "util.util.npmat2euler", "numpy.sum", "numpy.argsort", "numpy.sum", "numpy.argsort", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "textio.cprint", "textio.cprint", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.test_one_epoch", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint"], ["", "def", "testVCRNet", "(", "args", ",", "net", ",", "test_loader", ",", "boardio", ",", "textio", ")", ":", "\n", "    ", "test_loss_Pose", ",", "test_cycle_loss_Pose", ",", "test_mse_ab", ",", "test_mae_ab", ",", "test_mse_ba", ",", "test_mae_ba", ",", "test_rotations_ab", ",", "test_translations_ab", ",", "test_rotations_ab_pred", ",", "test_translations_ab_pred", ",", "test_rotations_ba", ",", "test_translations_ba", ",", "test_rotations_ba_pred", ",", "test_translations_ba_pred", ",", "test_eulers_ab", ",", "test_eulers_ba", ",", "test_loss_VCRNet", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "test_rmse_ab", "=", "np", ".", "sqrt", "(", "test_mse_ab", ")", "\n", "test_rmse_ba", "=", "np", ".", "sqrt", "(", "test_mse_ba", ")", "\n", "test_rotations_ab_pred_euler", "=", "npmat2euler", "(", "test_rotations_ab_pred", ")", "\n", "test_r_mse_ab", "=", "np", ".", "mean", "(", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ab", "=", "np", ".", "sqrt", "(", "test_r_mse_ab", ")", "\n", "test_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", ")", "\n", "test_t_mse_ab", "=", "np", ".", "mean", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ab", "=", "np", ".", "sqrt", "(", "test_t_mse_ab", ")", "\n", "test_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", ")", "\n", "\n", "test_rotations_ba_pred_euler", "=", "npmat2euler", "(", "test_rotations_ba_pred", ",", "'xyz'", ")", "\n", "test_r_mse_ba", "=", "np", ".", "mean", "(", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ba", "=", "np", ".", "sqrt", "(", "test_r_mse_ba", ")", "\n", "test_r_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", ")", "\n", "test_t_mse_ba", "=", "np", ".", "mean", "(", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ba", "=", "np", ".", "sqrt", "(", "test_t_mse_ba", ")", "\n", "test_t_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==FINAL TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "\n", "'EPOCH:: %d, Loss: %f, test_LossPose: %f, Cycle Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "-", "1", ",", "test_loss_VCRNet", ",", "test_loss_Pose", ",", "test_cycle_loss_Pose", ",", "test_mse_ab", ",", "test_rmse_ab", ",", "test_mae_ab", ",", "\n", "test_r_mse_ab", ",", "test_r_rmse_ab", ",", "\n", "test_r_mae_ab", ",", "test_t_mse_ab", ",", "test_t_rmse_ab", ",", "test_t_mae_ab", ")", ")", "\n", "if", "args", ".", "cycle", ":", "\n", "        ", "textio", ".", "cprint", "(", "'B--------->A'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, test_LossPose, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "-", "1", ",", "test_loss_VCRNet", ",", "test_loss_Pose", ",", "test_mse_ba", ",", "test_rmse_ba", ",", "test_mae_ba", ",", "test_r_mse_ba", ",", "\n", "test_r_rmse_ba", ",", "\n", "test_r_mae_ba", ",", "test_t_mse_ba", ",", "test_t_rmse_ba", ",", "test_t_mae_ba", ")", ")", "\n", "\n", "", "test_rotations_ab_pred_euler", "=", "npmat2euler", "(", "test_rotations_ab_pred", ")", "\n", "loss", "=", "np", ".", "sum", "(", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "**", "2", ",", "axis", "=", "-", "1", ")", "\n", "idx", "=", "np", ".", "argsort", "(", "loss", ",", "axis", "=", "-", "1", ",", "kind", "=", "'quicksort'", ",", "order", "=", "None", ")", "\n", "\n", "loss", "=", "np", ".", "sum", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ",", "axis", "=", "-", "1", ")", "\n", "idx", "=", "np", ".", "argsort", "(", "loss", ",", "axis", "=", "-", "1", ",", "kind", "=", "'quicksort'", ",", "order", "=", "None", ")", "\n", "\n", "return", "test_loss_Pose", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.vcrnet_model.trainVCRNet": [[818, 1018], ["torch.optim.lr_scheduler.ReduceLROnPlateau", "range", "torch.SGD", "torch.Adam", "vcrnet_model.train_one_epoch", "vcrnet_model.test_one_epoch", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "gc.collect", "net.parameters", "net.parameters", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "net.module.state_dict", "net.state_dict", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "net.module.state_dict", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.train_one_epoch", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.test_one_epoch", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint"], ["", "def", "trainVCRNet", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", ")", ":", "\n", "    ", "if", "args", ".", "use_sgd", ":", "\n", "# print(\"Use SGD\")", "\n", "        ", "opt", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", "*", "100", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "", "else", ":", "\n", "# print(\"Use Adam\")", "\n", "        ", "opt", "=", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "", "scheduler", "=", "ReduceLROnPlateau", "(", "opt", ",", "mode", "=", "'min'", ",", "factor", "=", "0.1", ",", "patience", "=", "10", ",", "verbose", "=", "False", ",", "threshold", "=", "0.000001", ")", "\n", "\n", "best_test_loss", "=", "np", ".", "inf", "\n", "best_test_cycle_loss", "=", "np", ".", "inf", "\n", "best_test_mse_ab", "=", "np", ".", "inf", "\n", "best_test_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_mae_ab", "=", "np", ".", "inf", "\n", "\n", "best_test_r_mse_ab", "=", "np", ".", "inf", "\n", "best_test_r_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_r_mae_ab", "=", "np", ".", "inf", "\n", "best_test_t_mse_ab", "=", "np", ".", "inf", "\n", "best_test_t_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_t_mae_ab", "=", "np", ".", "inf", "\n", "\n", "best_test_mse_ba", "=", "np", ".", "inf", "\n", "best_test_rmse_ba", "=", "np", ".", "inf", "\n", "best_test_mae_ba", "=", "np", ".", "inf", "\n", "\n", "best_test_r_mse_ba", "=", "np", ".", "inf", "\n", "best_test_r_rmse_ba", "=", "np", ".", "inf", "\n", "best_test_r_mae_ba", "=", "np", ".", "inf", "\n", "best_test_t_mse_ba", "=", "np", ".", "inf", "\n", "best_test_t_rmse_ba", "=", "np", ".", "inf", "\n", "best_test_t_mae_ba", "=", "np", ".", "inf", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "        ", "train_loss_Pose", ",", "train_cycle_loss", ",", "train_mse_ab", ",", "train_mae_ab", ",", "train_mse_ba", ",", "train_mae_ba", ",", "train_rotations_ab", ",", "train_translations_ab", ",", "train_rotations_ab_pred", ",", "train_translations_ab_pred", ",", "train_rotations_ba", ",", "train_translations_ba", ",", "train_rotations_ba_pred", ",", "train_translations_ba_pred", ",", "train_eulers_ab", ",", "train_eulers_ba", ",", "train_loss_VCRNet", "=", "train_one_epoch", "(", "args", ",", "net", ",", "\n", "train_loader", ",", "\n", "opt", ")", "\n", "\n", "test_loss_Pose", ",", "test_cycle_loss_Pose", ",", "test_mse_ab", ",", "test_mae_ab", ",", "test_mse_ba", ",", "test_mae_ba", ",", "test_rotations_ab", ",", "test_translations_ab", ",", "test_rotations_ab_pred", ",", "test_translations_ab_pred", ",", "test_rotations_ba", ",", "test_translations_ba", ",", "test_rotations_ba_pred", ",", "test_translations_ba_pred", ",", "test_eulers_ab", ",", "test_eulers_ba", ",", "test_loss_VCRNet", "=", "test_one_epoch", "(", "args", ",", "net", ",", "\n", "test_loader", ")", "\n", "\n", "train_rmse_ab", "=", "np", ".", "sqrt", "(", "train_mse_ab", ")", "\n", "test_rmse_ab", "=", "np", ".", "sqrt", "(", "test_mse_ab", ")", "\n", "\n", "train_rmse_ba", "=", "np", ".", "sqrt", "(", "train_mse_ba", ")", "\n", "test_rmse_ba", "=", "np", ".", "sqrt", "(", "test_mse_ba", ")", "\n", "\n", "train_rotations_ab_pred_euler", "=", "npmat2euler", "(", "train_rotations_ab_pred", ")", "\n", "train_r_mse_ab", "=", "np", ".", "mean", "(", "(", "train_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ab", ")", ")", "**", "2", ")", "\n", "train_r_rmse_ab", "=", "np", ".", "sqrt", "(", "train_r_mse_ab", ")", "\n", "train_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ab", ")", ")", ")", "\n", "train_t_mse_ab", "=", "np", ".", "mean", "(", "(", "train_translations_ab", "-", "train_translations_ab_pred", ")", "**", "2", ")", "\n", "train_t_rmse_ab", "=", "np", ".", "sqrt", "(", "train_t_mse_ab", ")", "\n", "train_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_translations_ab", "-", "train_translations_ab_pred", ")", ")", "\n", "\n", "train_rotations_ba_pred_euler", "=", "npmat2euler", "(", "train_rotations_ba_pred", ",", "'xyz'", ")", "\n", "train_r_mse_ba", "=", "np", ".", "mean", "(", "(", "train_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ba", ")", ")", "**", "2", ")", "\n", "train_r_rmse_ba", "=", "np", ".", "sqrt", "(", "train_r_mse_ba", ")", "\n", "train_r_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ba", ")", ")", ")", "\n", "train_t_mse_ba", "=", "np", ".", "mean", "(", "(", "train_translations_ba", "-", "train_translations_ba_pred", ")", "**", "2", ")", "\n", "train_t_rmse_ba", "=", "np", ".", "sqrt", "(", "train_t_mse_ba", ")", "\n", "train_t_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_translations_ba", "-", "train_translations_ba_pred", ")", ")", "\n", "\n", "test_rotations_ab_pred_euler", "=", "npmat2euler", "(", "test_rotations_ab_pred", ")", "\n", "test_r_mse_ab", "=", "np", ".", "mean", "(", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ab", "=", "np", ".", "sqrt", "(", "test_r_mse_ab", ")", "\n", "test_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", ")", "\n", "test_t_mse_ab", "=", "np", ".", "mean", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ab", "=", "np", ".", "sqrt", "(", "test_t_mse_ab", ")", "\n", "test_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", ")", "\n", "\n", "test_rotations_ba_pred_euler", "=", "npmat2euler", "(", "test_rotations_ba_pred", ",", "'xyz'", ")", "\n", "test_r_mse_ba", "=", "np", ".", "mean", "(", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ba", "=", "np", ".", "sqrt", "(", "test_r_mse_ba", ")", "\n", "test_r_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", ")", "\n", "test_t_mse_ba", "=", "np", ".", "mean", "(", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ba", "=", "np", ".", "sqrt", "(", "test_t_mse_ba", ")", "\n", "test_t_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", ")", "\n", "\n", "if", "best_test_loss", ">=", "test_loss_Pose", ":", "\n", "            ", "best_test_loss", "=", "test_loss_Pose", "\n", "best_test_cycle_loss", "=", "test_cycle_loss_Pose", "\n", "\n", "best_test_mse_ab", "=", "test_mse_ab", "\n", "best_test_rmse_ab", "=", "test_rmse_ab", "\n", "best_test_mae_ab", "=", "test_mae_ab", "\n", "\n", "best_test_r_mse_ab", "=", "test_r_mse_ab", "\n", "best_test_r_rmse_ab", "=", "test_r_rmse_ab", "\n", "best_test_r_mae_ab", "=", "test_r_mae_ab", "\n", "\n", "best_test_t_mse_ab", "=", "test_t_mse_ab", "\n", "best_test_t_rmse_ab", "=", "test_t_rmse_ab", "\n", "best_test_t_mae_ab", "=", "test_t_mae_ab", "\n", "\n", "best_test_mse_ba", "=", "test_mse_ba", "\n", "best_test_rmse_ba", "=", "test_rmse_ba", "\n", "best_test_mae_ba", "=", "test_mae_ba", "\n", "\n", "best_test_r_mse_ba", "=", "test_r_mse_ba", "\n", "best_test_r_rmse_ba", "=", "test_r_rmse_ba", "\n", "best_test_r_mae_ba", "=", "test_r_mae_ba", "\n", "\n", "best_test_t_mse_ba", "=", "test_t_mse_ba", "\n", "best_test_t_rmse_ba", "=", "test_t_rmse_ba", "\n", "best_test_t_mae_ba", "=", "test_t_mae_ba", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "module", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.best.t7'", "%", "args", ".", "exp_name", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.best.t7'", "%", "args", ".", "exp_name", ")", "\n", "\n", "# scheduler.step()", "\n", "", "", "scheduler", ".", "step", "(", "best_test_loss", ")", "\n", "lr", "=", "opt", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "if", "lr", "<=", "0.0000011", ":", "\n", "            ", "break", "\n", "\n", "", "textio", ".", "cprint", "(", "'==TRAIN=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "\n", "'EPOCH:: %d, Loss: %f, LossPose: %f, Cycle Loss:, %f, lr: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "\n", "epoch", ",", "train_loss_VCRNet", ",", "train_loss_Pose", ",", "train_cycle_loss", ",", "lr", ",", "train_mse_ab", ",", "train_rmse_ab", ",", "\n", "train_mae_ab", ",", "\n", "train_r_mse_ab", ",", "\n", "train_r_rmse_ab", ",", "train_r_mae_ab", ",", "train_t_mse_ab", ",", "train_t_rmse_ab", ",", "train_t_mae_ab", ")", ")", "\n", "if", "args", ".", "cycle", ":", "\n", "            ", "textio", ".", "cprint", "(", "'B--------->A'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, LossPose: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "train_loss_VCRNet", ",", "train_loss_Pose", ",", "train_mse_ba", ",", "train_rmse_ba", ",", "train_mae_ba", ",", "\n", "train_r_mse_ba", ",", "train_r_rmse_ba", ",", "\n", "train_r_mae_ba", ",", "train_t_mse_ba", ",", "train_t_rmse_ba", ",", "train_t_mae_ba", ")", ")", "\n", "\n", "", "textio", ".", "cprint", "(", "'==TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "\n", "'EPOCH:: %d, Loss: %f, LossPose: %f, Cycle Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "test_loss_VCRNet", ",", "test_loss_Pose", ",", "test_cycle_loss_Pose", ",", "test_mse_ab", ",", "test_rmse_ab", ",", "test_mae_ab", ",", "\n", "test_r_mse_ab", ",", "\n", "test_r_rmse_ab", ",", "test_r_mae_ab", ",", "test_t_mse_ab", ",", "test_t_rmse_ab", ",", "test_t_mae_ab", ")", ")", "\n", "if", "args", ".", "cycle", ":", "\n", "            ", "textio", ".", "cprint", "(", "'B--------->A'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, LossPose: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "\n", "epoch", ",", "test_loss_VCRNet", ",", "test_loss_Pose", ",", "test_mse_ba", ",", "test_rmse_ba", ",", "test_mae_ba", ",", "\n", "test_r_mse_ba", ",", "\n", "test_r_rmse_ba", ",", "\n", "test_r_mae_ba", ",", "test_t_mse_ba", ",", "test_t_rmse_ba", ",", "test_t_mae_ba", ")", ")", "\n", "\n", "", "textio", ".", "cprint", "(", "'==BEST TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, Cycle Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "best_test_loss", ",", "best_test_cycle_loss", ",", "best_test_mse_ab", ",", "best_test_rmse_ab", ",", "\n", "best_test_mae_ab", ",", "best_test_r_mse_ab", ",", "best_test_r_rmse_ab", ",", "\n", "best_test_r_mae_ab", ",", "best_test_t_mse_ab", ",", "best_test_t_rmse_ab", ",", "best_test_t_mae_ab", ")", ")", "\n", "if", "args", ".", "cycle", ":", "\n", "            ", "textio", ".", "cprint", "(", "'B--------->A'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "best_test_loss", ",", "best_test_mse_ba", ",", "best_test_rmse_ba", ",", "best_test_mae_ba", ",", "\n", "best_test_r_mse_ba", ",", "best_test_r_rmse_ba", ",", "\n", "best_test_r_mae_ba", ",", "best_test_t_mse_ba", ",", "best_test_t_rmse_ba", ",", "best_test_t_mae_ba", ")", ")", "\n", "\n", "", "boardio", ".", "add_scalar", "(", "'A->B/train/loss'", ",", "train_loss_VCRNet", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/lossPose'", ",", "train_loss_Pose", ",", "epoch", ")", "\n", "\n", "############TEST", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/loss'", ",", "test_loss_VCRNet", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/lossPose'", ",", "test_loss_Pose", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/rotation/RMSE'", ",", "test_r_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/translation/MAE'", ",", "test_t_mae_ab", ",", "epoch", ")", "\n", "\n", "############BEST TEST", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/lr'", ",", "lr", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/loss'", ",", "best_test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/rotation/MAE'", ",", "best_test_r_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/translation/MAE'", ",", "best_test_t_mae_ab", ",", "epoch", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "torch", ".", "save", "(", "net", ".", "module", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.%d.t7'", "%", "(", "args", ".", "exp_name", ",", "epoch", ")", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.%d.t7'", "%", "(", "args", ".", "exp_name", ",", "epoch", ")", ")", "\n", "\n", "", "gc", ".", "collect", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.icp_model.ICP.__init__": [[17, 24], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_iterations", "=", "10", ",", "tolerance", "=", "0.001", ")", ":", "\n", "        ", "super", "(", "ICP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "max_iterations", "=", "max_iterations", "\n", "self", ".", "tolerance", "=", "tolerance", "\n", "self", ".", "reflect", "=", "nn", ".", "Parameter", "(", "torch", ".", "eye", "(", "3", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "reflect", "[", "2", ",", "2", "]", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.icp_model.ICP.forward": [[26, 49], ["time.time.time", "range", "icp_model.ICP.best_fit_transform", "rotation_ab.transpose().contiguous", "print", "icp_model.ICP.nearest_neighbor", "icp_model.ICP.best_fit_transform", "util.util.transform_point_cloud", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "rotation_ab.transpose", "time.time.time", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "translation_ab.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.icp.best_fit_transform", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.nearest_neighbor", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.icp.best_fit_transform", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud"], ["", "def", "forward", "(", "self", ",", "srcInit", ",", "dst", ")", ":", "\n", "        ", "icp_start", "=", "time", "(", ")", "\n", "src", "=", "srcInit", "\n", "prev_error", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "max_iterations", ")", ":", "\n", "# find the nearest neighbors between the current source and destination points", "\n", "            ", "mean_error", ",", "src_corr", "=", "self", ".", "nearest_neighbor", "(", "src", ",", "dst", ")", "\n", "# compute the transformation between the current source and nearest destination points", "\n", "rotation_ab", ",", "translation_ab", "=", "self", ".", "best_fit_transform", "(", "src", ",", "src_corr", ")", "\n", "src", "=", "transform_point_cloud", "(", "src", ",", "rotation_ab", ",", "translation_ab", ")", "\n", "\n", "if", "torch", ".", "abs", "(", "prev_error", "-", "mean_error", ")", "<", "self", ".", "tolerance", ":", "\n", "                ", "break", "\n", "", "prev_error", "=", "mean_error", "\n", "\n", "# calculate final transformation", "\n", "", "rotation_ab", ",", "translation_ab", "=", "self", ".", "best_fit_transform", "(", "srcInit", ",", "src", ")", "\n", "\n", "rotation_ba", "=", "rotation_ab", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "translation_ba", "=", "-", "torch", ".", "matmul", "(", "rotation_ba", ",", "translation_ab", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "print", "(", "\"icp: \"", ",", "time", "(", ")", "-", "icp_start", ")", "\n", "return", "srcInit", ",", "src", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.icp_model.ICP.nearest_neighbor": [[50, 74], ["src.size", "src.size", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum().transpose().contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "idx.view.view.view", "dst.transpose().contiguous.transpose().contiguous.transpose().contiguous", "candidates.view().squeeze.view().squeeze.view().squeeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "pairwise_distance.topk", "pairwise_distance.topk", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "dst.transpose().contiguous.transpose().contiguous.view", "val.mean", "candidates.view().squeeze.view().squeeze.transpose().contiguous", "src.transpose().contiguous", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "torch.sum().transpose", "dst.transpose().contiguous.transpose().contiguous.transpose", "candidates.view().squeeze.view().squeeze.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "candidates.view().squeeze.view().squeeze.transpose", "src.transpose", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["None"], ["", "def", "nearest_neighbor", "(", "self", ",", "src", ",", "dst", ")", ":", "\n", "\n", "        ", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "num_points", "=", "src", ".", "size", "(", "2", ")", "\n", "\n", "inner", "=", "-", "2", "*", "torch", ".", "matmul", "(", "src", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "dst", ")", "\n", "xx", "=", "torch", ".", "sum", "(", "src", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "yy", "=", "torch", ".", "sum", "(", "dst", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "pairwise_distance", "=", "-", "xx", "-", "inner", "\n", "pairwise_distance", "=", "pairwise_distance", "-", "yy", "\n", "\n", "idx", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "1", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "val", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "1", ",", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "\n", "idx_base", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "num_points", "\n", "idx", "=", "idx", "+", "idx_base", "\n", "idx", "=", "idx", ".", "view", "(", "-", "1", ")", "\n", "dst", "=", "dst", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "candidates", "=", "dst", ".", "view", "(", "batch_size", "*", "num_points", ",", "-", "1", ")", "[", "idx", ",", ":", "]", "\n", "candidates", "=", "candidates", ".", "view", "(", "batch_size", ",", "num_points", ",", "1", ",", "3", ")", ".", "squeeze", "(", "-", "2", ")", "# (batch_size,num, tgtK, 3)", "\n", "\n", "return", "val", ".", "mean", "(", ")", ",", "candidates", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.icp_model.ICP.best_fit_transform": [[75, 109], ["src.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "src.mean", "src_corr.mean", "src_corr_centered.transpose().contiguous", "src.size", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "src_corr.mean", "t.view", "u.transpose().contiguous", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "src.mean", "src_corr_centered.transpose", "u.transpose().contiguous", "u.transpose", "u.transpose"], "methods", ["None"], ["", "def", "best_fit_transform", "(", "self", ",", "src", ",", "src_corr", ")", ":", "\n", "\n", "        ", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "\n", "src_centered", "=", "src", "-", "src", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "src_corr_centered", "=", "src_corr", "-", "src_corr", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "H", "=", "torch", ".", "matmul", "(", "src_centered", ",", "src_corr_centered", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "U", ",", "S", ",", "V", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "R", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "src", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "r_det", "=", "torch", ".", "det", "(", "r", ")", "\n", "if", "r_det", "<", "0", ":", "\n", "                ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "v", "=", "torch", ".", "matmul", "(", "v", ",", "self", ".", "reflect", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "", "R", ".", "append", "(", "r", ")", "\n", "U", ".", "append", "(", "u", ")", "\n", "S", ".", "append", "(", "s", ")", "\n", "V", ".", "append", "(", "v", ")", "\n", "\n", "", "U", "=", "torch", ".", "stack", "(", "U", ",", "dim", "=", "0", ")", "\n", "V", "=", "torch", ".", "stack", "(", "V", ",", "dim", "=", "0", ")", "\n", "S", "=", "torch", ".", "stack", "(", "S", ",", "dim", "=", "0", ")", "\n", "R", "=", "torch", ".", "stack", "(", "R", ",", "dim", "=", "0", ")", "\n", "\n", "t", "=", "torch", ".", "matmul", "(", "-", "R", ",", "src", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ")", "+", "src_corr", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "return", "R", ",", "t", ".", "view", "(", "batch_size", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.icp_model.jitter_pointcloud": [[111, 115], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "", "def", "jitter_pointcloud", "(", "pointcloud", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "    ", "N", ",", "C", "=", "pointcloud", ".", "shape", "\n", "pointcloud", "+=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "return", "pointcloud", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.icp_model.getDateset": [[117, 172], ["range", "numpy.asarray().reshape", "numpy.asarray().reshape", "numpy.asarray().reshape", "numpy.asarray().reshape", "numpy.random.seed", "numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.array", "numpy.array", "numpy.array", "np.array.dot().dot", "numpy.array", "scipy.spatial.transform.Rotation.from_euler", "np.asarray().reshape.append", "np.asarray().reshape.append", "np.asarray().reshape.append", "np.asarray().reshape.append", "np.asarray().reshape.astype", "np.asarray().reshape.astype", "np.asarray().reshape.astype", "np.asarray().reshape.astype", "numpy.random.rand", "icp_model.jitter_pointcloud", "numpy.expand_dims", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "np.array.dot", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "Rotation.from_euler.apply", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.jitter_pointcloud"], ["", "def", "getDateset", "(", "batch_size", "=", "8", ",", "gaussian_noise", "=", "False", ",", "angle", "=", "4", ",", "num_points", "=", "512", ",", "dims", "=", "3", ",", "tTld", "=", "0.5", ")", ":", "\n", "    ", "pointcloud1All", "=", "[", "]", "\n", "pointcloud2All", "=", "[", "]", "\n", "R_abAll", "=", "[", "]", "\n", "translation_abAll", "=", "[", "]", "\n", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "pointcloud", "=", "np", ".", "random", ".", "rand", "(", "num_points", ",", "dims", ")", "-", "0.5", "\n", "\n", "if", "gaussian_noise", ":", "\n", "            ", "pointcloud", "=", "jitter_pointcloud", "(", "pointcloud", ")", "\n", "\n", "", "np", ".", "random", ".", "seed", "(", "b", ")", "\n", "anglex", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "angle", "/", "180.0", "*", "np", ".", "pi", "\n", "angley", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "angle", "/", "180.0", "*", "np", ".", "pi", "\n", "anglez", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "angle", "/", "180.0", "*", "np", ".", "pi", "\n", "\n", "cosx", "=", "np", ".", "cos", "(", "anglex", ")", ";", "\n", "cosy", "=", "np", ".", "cos", "(", "angley", ")", ";", "\n", "cosz", "=", "np", ".", "cos", "(", "anglez", ")", "\n", "sinx", "=", "np", ".", "sin", "(", "anglex", ")", ";", "\n", "siny", "=", "np", ".", "sin", "(", "angley", ")", ";", "\n", "sinz", "=", "np", ".", "sin", "(", "anglez", ")", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cosx", ",", "-", "sinx", "]", ",", "\n", "[", "0", ",", "sinx", ",", "cosx", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "cosy", ",", "0", ",", "siny", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "siny", ",", "0", ",", "cosy", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "cosz", ",", "-", "sinz", ",", "0", "]", ",", "\n", "[", "sinz", ",", "cosz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R_ab", "=", "Rx", ".", "dot", "(", "Ry", ")", ".", "dot", "(", "Rz", ")", "\n", "\n", "translation_ab", "=", "np", ".", "array", "(", "[", "np", ".", "random", ".", "uniform", "(", "-", "tTld", ",", "tTld", ")", ",", "np", ".", "random", ".", "uniform", "(", "-", "tTld", ",", "tTld", ")", ",", "\n", "np", ".", "random", ".", "uniform", "(", "-", "tTld", ",", "tTld", ")", "]", ")", "\n", "\n", "pointcloud1", "=", "pointcloud", ".", "T", "# [3,num]", "\n", "\n", "rotation_ab", "=", "Rotation", ".", "from_euler", "(", "'zyx'", ",", "[", "anglez", ",", "angley", ",", "anglex", "]", ")", "\n", "pointcloud2", "=", "rotation_ab", ".", "apply", "(", "pointcloud1", ".", "T", ")", ".", "T", "+", "np", ".", "expand_dims", "(", "translation_ab", ",", "axis", "=", "1", ")", "\n", "\n", "pointcloud1All", ".", "append", "(", "pointcloud1", ")", "\n", "pointcloud2All", ".", "append", "(", "pointcloud2", ")", "\n", "R_abAll", ".", "append", "(", "R_ab", ")", "\n", "translation_abAll", ".", "append", "(", "translation_ab", ")", "\n", "\n", "", "pointcloud1All", "=", "np", ".", "asarray", "(", "pointcloud1All", ")", ".", "reshape", "(", "batch_size", ",", "dims", ",", "num_points", ")", "\n", "pointcloud2All", "=", "np", ".", "asarray", "(", "pointcloud2All", ")", ".", "reshape", "(", "batch_size", ",", "dims", ",", "num_points", ")", "\n", "R_abAll", "=", "np", ".", "asarray", "(", "R_abAll", ")", ".", "reshape", "(", "batch_size", ",", "3", ",", "3", ")", "\n", "translation_abAll", "=", "np", ".", "asarray", "(", "translation_abAll", ")", ".", "reshape", "(", "batch_size", ",", "3", ")", "\n", "\n", "# [3,num_points]", "\n", "return", "pointcloud1All", ".", "astype", "(", "'float32'", ")", ",", "pointcloud2All", ".", "astype", "(", "'float32'", ")", ",", "R_abAll", ".", "astype", "(", "\n", "'float32'", ")", ",", "translation_abAll", ".", "astype", "(", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.icp_model.test_one_epoch": [[174, 284], ["net.eval", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "[].transpose.cuda", "[].transpose.cuda", "rotation_ab.cuda.cuda", "translation_ab.cuda.cuda", "rotation_ba.cuda.cuda", "translation_ba.cuda.cuda", "[].transpose.size", "net", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "util.util.transform_point_cloud", "util.util.transform_point_cloud", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "[].transpose", "[].transpose", "rotation_ab.cuda.detach().cpu().numpy", "translation_ab.cuda.detach().cpu().numpy", "rotation_ab_pred.detach().cpu().numpy", "translation_ab_pred.detach().cpu().numpy", "euler_ab.numpy", "rotation_ba.cuda.detach().cpu().numpy", "translation_ba.cuda.detach().cpu().numpy", "rotation_ba_pred.detach().cpu().numpy", "translation_ba_pred.detach().cpu().numpy", "euler_ba.numpy", "torch.mse_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean.item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.mse_loss", "torch.mse_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda().unsqueeze().repeat.clone", "rotation_ab.cuda.detach().cpu", "translation_ab.cuda.detach().cpu", "rotation_ab_pred.detach().cpu", "translation_ab_pred.detach().cpu", "rotation_ba.cuda.detach().cpu", "translation_ba.cuda.detach().cpu", "rotation_ba_pred.detach().cpu", "translation_ba_pred.detach().cpu", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mse_loss", "torch.mse_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "[].transpose.transpose().split", "[].transpose.transpose().split", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "rotation_ab_pred.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "cycle_loss.item", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "rotation_ab.cuda.detach", "translation_ab.cuda.detach", "rotation_ab_pred.detach", "translation_ab_pred.detach", "rotation_ba.cuda.detach", "translation_ba.cuda.detach", "rotation_ba_pred.detach", "translation_ba_pred.detach", "rotation_ab_pred.transpose", "[].transpose.transpose", "[].transpose.transpose", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "rotation_ba_pred.transpose", "translation_ab_pred.view"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud"], ["", "def", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "mse_ab", "=", "0", "\n", "mae_ab", "=", "0", "\n", "mse_ba", "=", "0", "\n", "mae_ba", "=", "0", "\n", "\n", "total_loss", "=", "0", "\n", "total_cycle_loss", "=", "0", "\n", "num_examples", "=", "0", "\n", "rotations_ab", "=", "[", "]", "\n", "translations_ab", "=", "[", "]", "\n", "rotations_ab_pred", "=", "[", "]", "\n", "translations_ab_pred", "=", "[", "]", "\n", "\n", "rotations_ba", "=", "[", "]", "\n", "translations_ba", "=", "[", "]", "\n", "rotations_ba_pred", "=", "[", "]", "\n", "translations_ba_pred", "=", "[", "]", "\n", "\n", "eulers_ab", "=", "[", "]", "\n", "eulers_ba", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "euler_ab", ",", "euler_ba", ",", "label", "in", "tqdm", "(", "\n", "test_loader", ")", ":", "\n", "            ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "cuda", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "cuda", "(", ")", "\n", "rotation_ba", "=", "rotation_ba", ".", "cuda", "(", ")", "\n", "translation_ba", "=", "translation_ba", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "num_examples", "+=", "batch_size", "\n", "srcInit", ",", "src", ",", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", "=", "net", "(", "src", ",", "\n", "target", ")", "\n", "\n", "if", "args", ".", "use_mFea", ":", "\n", "                ", "src", "=", "src", ".", "transpose", "(", "2", ",", "1", ")", ".", "split", "(", "[", "3", ",", "5", "]", ",", "dim", "=", "2", ")", "[", "0", "]", ".", "transpose", "(", "2", ",", "1", ")", "\n", "target", "=", "target", ".", "transpose", "(", "2", ",", "1", ")", ".", "split", "(", "[", "3", ",", "5", "]", ",", "dim", "=", "2", ")", "[", "0", "]", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "## save rotation and translation", "\n", "", "rotations_ab", ".", "append", "(", "rotation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab", ".", "append", "(", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ab_pred", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab_pred", ".", "append", "(", "translation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ab", ".", "append", "(", "euler_ab", ".", "numpy", "(", ")", ")", "\n", "\n", "rotations_ba", ".", "append", "(", "rotation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba", ".", "append", "(", "translation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ba_pred", ".", "append", "(", "rotation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba_pred", ".", "append", "(", "translation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ba", ".", "append", "(", "euler_ba", ".", "numpy", "(", ")", ")", "\n", "\n", "transformed_src", "=", "transform_point_cloud", "(", "src", ",", "rotation_ab_pred", ",", "translation_ab_pred", ")", "\n", "\n", "transformed_target", "=", "transform_point_cloud", "(", "target", ",", "rotation_ba_pred", ",", "translation_ba_pred", ")", "\n", "\n", "###########################", "\n", "identity", "=", "torch", ".", "eye", "(", "3", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "if", "args", ".", "loss", "==", "'pose'", ":", "\n", "                ", "loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "\n", "", "elif", "args", ".", "loss", "==", "'point'", ":", "\n", "                ", "loss", "=", "torch", ".", "mean", "(", "(", "transformed_src", "-", "target", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "", "else", ":", "\n", "                ", "lossPose", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "\n", "lossPoint", "=", "torch", ".", "mean", "(", "(", "transformed_src", "-", "target", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", "\n", "loss", "=", "lossPose", "+", "0.1", "*", "lossPoint", "\n", "", "if", "args", ".", "cycle", ":", "\n", "                ", "rotation_loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ",", "rotation_ab_pred", ")", ",", "identity", ".", "clone", "(", ")", ")", "\n", "translation_loss", "=", "torch", ".", "mean", "(", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "\n", "translation_ab_pred", ".", "view", "(", "batch_size", ",", "3", ",", "1", ")", ")", ".", "view", "(", "batch_size", ",", "\n", "3", ")", "\n", "+", "translation_ba_pred", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", "]", ")", "\n", "cycle_loss", "=", "rotation_loss", "+", "translation_loss", "\n", "\n", "loss", "=", "loss", "+", "cycle_loss", "*", "0.1", "\n", "\n", "", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "if", "args", ".", "cycle", ":", "\n", "                ", "total_cycle_loss", "=", "total_cycle_loss", "+", "cycle_loss", ".", "item", "(", ")", "*", "0.1", "*", "batch_size", "\n", "\n", "", "mse_ab", "+=", "torch", ".", "mean", "(", "(", "transformed_src", "-", "target", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ab", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_src", "-", "target", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "mse_ba", "+=", "torch", ".", "mean", "(", "(", "transformed_target", "-", "src", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ba", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_target", "-", "src", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "", "", "rotations_ab", "=", "np", ".", "concatenate", "(", "rotations_ab", ",", "axis", "=", "0", ")", "\n", "translations_ab", "=", "np", ".", "concatenate", "(", "translations_ab", ",", "axis", "=", "0", ")", "\n", "rotations_ab_pred", "=", "np", ".", "concatenate", "(", "rotations_ab_pred", ",", "axis", "=", "0", ")", "\n", "translations_ab_pred", "=", "np", ".", "concatenate", "(", "translations_ab_pred", ",", "axis", "=", "0", ")", "\n", "\n", "rotations_ba", "=", "np", ".", "concatenate", "(", "rotations_ba", ",", "axis", "=", "0", ")", "\n", "translations_ba", "=", "np", ".", "concatenate", "(", "translations_ba", ",", "axis", "=", "0", ")", "\n", "rotations_ba_pred", "=", "np", ".", "concatenate", "(", "rotations_ba_pred", ",", "axis", "=", "0", ")", "\n", "translations_ba_pred", "=", "np", ".", "concatenate", "(", "translations_ba_pred", ",", "axis", "=", "0", ")", "\n", "\n", "eulers_ab", "=", "np", ".", "concatenate", "(", "eulers_ab", ",", "axis", "=", "0", ")", "\n", "eulers_ba", "=", "np", ".", "concatenate", "(", "eulers_ba", ",", "axis", "=", "0", ")", "\n", "\n", "return", "total_loss", "*", "1.0", "/", "num_examples", ",", "total_cycle_loss", "/", "num_examples", ",", "mse_ab", "*", "1.0", "/", "num_examples", ",", "mae_ab", "*", "1.0", "/", "num_examples", ",", "mse_ba", "*", "1.0", "/", "num_examples", ",", "mae_ba", "*", "1.0", "/", "num_examples", ",", "rotations_ab", ",", "translations_ab", ",", "rotations_ab_pred", ",", "translations_ab_pred", ",", "rotations_ba", ",", "translations_ba", ",", "rotations_ba_pred", ",", "translations_ba_pred", ",", "eulers_ab", ",", "eulers_ba", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.icp_model.testICP": [[286, 326], ["icp_model.test_one_epoch", "numpy.sqrt", "numpy.sqrt", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "textio.cprint", "textio.cprint", "textio.cprint", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "textio.cprint", "textio.cprint", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.test_one_epoch", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint"], ["", "def", "testICP", "(", "args", ",", "net", ",", "test_loader", ",", "boardio", ",", "textio", ")", ":", "\n", "    ", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_mae_ab", ",", "test_mse_ba", ",", "test_mae_ba", ",", "test_rotations_ab", ",", "test_translations_ab", ",", "test_rotations_ab_pred", ",", "test_translations_ab_pred", ",", "test_rotations_ba", ",", "test_translations_ba", ",", "test_rotations_ba_pred", ",", "test_translations_ba_pred", ",", "test_eulers_ab", ",", "test_eulers_ba", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "test_rmse_ab", "=", "np", ".", "sqrt", "(", "test_mse_ab", ")", "\n", "test_rmse_ba", "=", "np", ".", "sqrt", "(", "test_mse_ba", ")", "\n", "\n", "test_rotations_ab_pred_euler", "=", "npmat2euler", "(", "test_rotations_ab_pred", ")", "\n", "test_r_mse_ab", "=", "np", ".", "mean", "(", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ab", "=", "np", ".", "sqrt", "(", "test_r_mse_ab", ")", "\n", "test_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", ")", "\n", "test_t_mse_ab", "=", "np", ".", "mean", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ab", "=", "np", ".", "sqrt", "(", "test_t_mse_ab", ")", "\n", "test_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", ")", "\n", "\n", "test_rotations_ba_pred_euler", "=", "npmat2euler", "(", "test_rotations_ba_pred", ",", "'xyz'", ")", "\n", "test_r_mse_ba", "=", "np", ".", "mean", "(", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ba", "=", "np", ".", "sqrt", "(", "test_r_mse_ba", ")", "\n", "test_r_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", ")", "\n", "test_t_mse_ba", "=", "np", ".", "mean", "(", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ba", "=", "np", ".", "sqrt", "(", "test_t_mse_ba", ")", "\n", "test_t_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==FINAL TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "\n", "'EPOCH:: %d, Loss: %f, Cycle Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f,  rot_MAE: %f,trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "-", "1", ",", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_rmse_ab", ",", "test_mae_ab", ",", "test_r_mse_ab", ",", "test_r_rmse_ab", ",", "test_r_mae_ab", ",", "test_t_mse_ab", ",", "test_t_rmse_ab", ",", "test_t_mae_ab", ")", ")", "\n", "if", "args", ".", "cycle", ":", "\n", "        ", "textio", ".", "cprint", "(", "'B--------->A'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "-", "1", ",", "test_loss", ",", "test_mse_ba", ",", "test_rmse_ba", ",", "test_mae_ba", ",", "test_r_mse_ba", ",", "test_r_rmse_ba", ",", "\n", "test_r_mae_ba", ",", "test_t_mse_ba", ",", "test_t_rmse_ba", ",", "test_t_mae_ba", ")", ")", "\n", "", "return", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.EncoderDecoder.__init__": [[64, 71], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ",", "src_embed", ",", "tgt_embed", ",", "generator", ")", ":", "\n", "        ", "super", "(", "EncoderDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "src_embed", "=", "src_embed", "# nn.Sequential()", "\n", "self", ".", "tgt_embed", "=", "tgt_embed", "# nn.Sequential()", "\n", "self", ".", "generator", "=", "generator", "# nn.Sequential()", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.EncoderDecoder.forward": [[72, 77], ["transformer.EncoderDecoder.decode", "transformer.EncoderDecoder.encode"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.EncoderDecoder.decode", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.EncoderDecoder.encode"], ["", "def", "forward", "(", "self", ",", "src", ",", "tgt", ",", "src_mask", ",", "tgt_mask", ",", "src_tgt", "=", "True", ")", ":", "\n", "        ", "\"Take in and process masked src and target sequences.\"", "\n", "re", "=", "self", ".", "decode", "(", "self", ".", "encode", "(", "src", ",", "src_mask", ")", ",", "src_mask", ",", "tgt", ",", "tgt_mask", ")", "\n", "\n", "return", "re", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.EncoderDecoder.encode": [[78, 80], ["transformer.EncoderDecoder.encoder", "transformer.EncoderDecoder.src_embed"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "src", ",", "src_mask", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "self", ".", "src_embed", "(", "src", ")", ",", "src_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.EncoderDecoder.decode": [[81, 83], ["transformer.EncoderDecoder.generator", "transformer.EncoderDecoder.decoder", "transformer.EncoderDecoder.tgt_embed"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "memory", ",", "src_mask", ",", "tgt", ",", "tgt_mask", ")", ":", "\n", "        ", "return", "self", ".", "generator", "(", "self", ".", "decoder", "(", "self", ".", "tgt_embed", "(", "tgt", ")", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.Generator.__init__": [[86, 99], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dims", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nn", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "emb_dims", ",", "emb_dims", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dims", "//", "2", ",", "emb_dims", "//", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dims", "//", "4", ",", "emb_dims", "//", "8", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "proj_rot", "=", "nn", ".", "Linear", "(", "emb_dims", "//", "8", ",", "4", ")", "\n", "self", ".", "proj_trans", "=", "nn", ".", "Linear", "(", "emb_dims", "//", "8", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.Generator.forward": [[100, 106], ["transformer.Generator.nn", "transformer.Generator.proj_rot", "transformer.Generator.proj_trans", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "transformer.Generator.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "nn", "(", "x", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ")", "\n", "rotation", "=", "self", ".", "proj_rot", "(", "x", ")", "\n", "translation", "=", "self", ".", "proj_trans", "(", "x", ")", "\n", "rotation", "=", "rotation", "/", "torch", ".", "norm", "(", "rotation", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "rotation", ",", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.Encoder.__init__": [[109, 113], ["torch.Module.__init__", "transformer.clones", "transformer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.clones"], ["    ", "def", "__init__", "(", "self", ",", "layer", ",", "N", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "clones", "(", "layer", ",", "N", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "layer", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.Encoder.forward": [[114, 118], ["transformer.Encoder.norm", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "mask", ")", "\n", "", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.Decoder.__init__": [[123, 127], ["torch.Module.__init__", "transformer.clones", "transformer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.clones"], ["def", "__init__", "(", "self", ",", "layer", ",", "N", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "clones", "(", "layer", ",", "N", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "layer", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.Decoder.forward": [[128, 132], ["transformer.Decoder.norm", "layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", "\n", "", "return", "self", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.LayerNorm.__init__": [[135, 140], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "features", ")", ")", "\n", "self", ".", "b_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "features", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.LayerNorm.forward": [[141, 145], ["x.mean", "x.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "x", ".", "std", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "self", ".", "a_2", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "b_2", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.SublayerConnection.__init__": [[148, 151], ["torch.Module.__init__", "transformer.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", "SublayerConnection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.SublayerConnection.forward": [[152, 154], ["sublayer", "transformer.SublayerConnection.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sublayer", ")", ":", "\n", "        ", "return", "x", "+", "sublayer", "(", "self", ".", "norm", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.EncoderLayer.__init__": [[157, 163], ["torch.Module.__init__", "transformer.clones", "transformer.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.clones"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "self_attn", ",", "feed_forward", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "EncoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer", "=", "clones", "(", "SublayerConnection", "(", "size", ",", "dropout", ")", ",", "2", ")", "\n", "self", ".", "size", "=", "size", "# 512", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.EncoderLayer.forward": [[164, 167], ["transformer.EncoderLayer.self_attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "        ", "x", "=", "self", ".", "sublayer", "[", "0", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "mask", ")", ")", "\n", "return", "self", ".", "sublayer", "[", "1", "]", "(", "x", ",", "self", ".", "feed_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.DecoderLayer.__init__": [[172, 179], ["torch.Module.__init__", "transformer.clones", "transformer.SublayerConnection"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.clones"], ["def", "__init__", "(", "self", ",", "size", ",", "self_attn", ",", "src_attn", ",", "feed_forward", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "self_attn", "=", "self_attn", "\n", "self", ".", "src_attn", "=", "src_attn", "\n", "self", ".", "feed_forward", "=", "feed_forward", "\n", "self", ".", "sublayer", "=", "clones", "(", "SublayerConnection", "(", "size", ",", "dropout", ")", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.DecoderLayer.forward": [[180, 186], ["transformer.DecoderLayer.self_attn", "transformer.DecoderLayer.src_attn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "memory", ",", "src_mask", ",", "tgt_mask", ")", ":", "\n", "        ", "\"Follow Figure 1 (right) for connections.\"", "\n", "m", "=", "memory", "\n", "x", "=", "self", ".", "sublayer", "[", "0", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "self_attn", "(", "x", ",", "x", ",", "x", ",", "tgt_mask", ")", ")", "\n", "x", "=", "self", ".", "sublayer", "[", "1", "]", "(", "x", ",", "lambda", "x", ":", "self", ".", "src_attn", "(", "x", ",", "m", ",", "m", ",", "src_mask", ")", ")", "\n", "return", "self", ".", "sublayer", "[", "2", "]", "(", "x", ",", "self", ".", "feed_forward", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.MultiHeadedAttention.__init__": [[189, 201], ["torch.Module.__init__", "transformer.clones", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.clones"], ["    ", "def", "__init__", "(", "self", ",", "h", ",", "d_model", ",", "is_src", "=", "False", ",", "overlap2", "=", "0.75", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "\"Take in model size and number of heads.\"", "\n", "super", "(", "MultiHeadedAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "d_model", "%", "h", "==", "0", "\n", "# We assume d_v always equals d_k", "\n", "self", ".", "d_k", "=", "d_model", "//", "h", "# 512//4", "\n", "self", ".", "h", "=", "h", "\n", "self", ".", "linears", "=", "clones", "(", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ")", ",", "4", ")", "\n", "self", ".", "attn", "=", "None", "\n", "self", ".", "dropout", "=", "None", "\n", "self", ".", "is_src", "=", "is_src", "\n", "self", ".", "overlap2", "=", "overlap2", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.MultiHeadedAttention.forward": [[202, 225], ["query.size", "transformer.attention", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "mask.unsqueeze.unsqueeze.unsqueeze", "l().view().transpose().contiguous", "zip", "x.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "l().view().transpose", "x.transpose().contiguous().view.transpose().contiguous().view.transpose", "l().view", "l"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.attention"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"Implements Figure 2\"", "\n", "if", "mask", "is", "not", "None", ":", "\n", "# Same mask applied to all h heads.", "\n", "            ", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "", "nbatches", "=", "query", ".", "size", "(", "0", ")", "\n", "# query=key=value=[B,1024,512]", "\n", "# 1) Do all the linear projections in batch from d_model => h x d_k", "\n", "query", ",", "key", ",", "value", "=", "[", "l", "(", "x", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", ",", "self", ".", "d_k", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "for", "l", ",", "x", "in", "zip", "(", "self", ".", "linears", ",", "(", "query", ",", "key", ",", "value", ")", ")", "]", "\n", "# [B,4,1024,128]=q=k=v", "\n", "# 2) Apply attention on all the projected vectors in batch.", "\n", "\n", "x", ",", "self", ".", "attn", "=", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "mask", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "is_src", "=", "self", ".", "is_src", ",", "overlap2", "=", "self", ".", "overlap2", ")", "\n", "\n", "self", ".", "attn", "=", "torch", ".", "sum", "(", "self", ".", "attn", ",", "dim", "=", "1", ")", "\n", "\n", "# 3) \"Concat\" using a view and apply a final linear.", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "nbatches", ",", "-", "1", ",", "self", ".", "h", "*", "self", ".", "d_k", ")", "\n", "return", "self", ".", "linears", "[", "-", "1", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.PositionwiseFeedForward.__init__": [[230, 236], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["def", "__init__", "(", "self", ",", "d_model", ",", "d_ff", ",", "dropout", "=", "0.1", ")", ":", "\n", "        ", "super", "(", "PositionwiseFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "w_1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_ff", ")", "\n", "self", ".", "norm", "=", "nn", ".", "Sequential", "(", ")", "# nn.BatchNorm1d(d_ff)", "\n", "self", ".", "w_2", "=", "nn", ".", "Linear", "(", "d_ff", ",", "d_model", ")", "\n", "self", ".", "dropout", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.PositionwiseFeedForward.forward": [[237, 239], ["transformer.PositionwiseFeedForward.w_2", "transformer.PositionwiseFeedForward.norm().transpose().contiguous", "transformer.PositionwiseFeedForward.norm().transpose", "transformer.PositionwiseFeedForward.norm", "torch.relu().transpose().contiguous", "torch.relu().transpose().contiguous", "torch.relu().transpose().contiguous", "torch.relu().transpose", "torch.relu().transpose", "torch.relu().transpose", "torch.relu", "torch.relu", "torch.relu", "transformer.PositionwiseFeedForward.w_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "w_2", "(", "self", ".", "norm", "(", "F", ".", "relu", "(", "self", ".", "w_1", "(", "x", ")", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.Transformer.__init__": [[242, 263], ["torch.Module.__init__", "transformer.MultiHeadedAttention", "transformer.PositionwiseFeedForward", "transformer.EncoderDecoder", "transformer.MultiHeadedAttention", "transformer.MultiHeadedAttention", "transformer.Encoder", "transformer.Decoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "transformer.EncoderLayer", "transformer.DecoderLayer", "c", "c", "c", "c", "c"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "N", "=", "args", ".", "n_blocks", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "ff_dims", "=", "args", ".", "ff_dims", "\n", "self", ".", "n_heads", "=", "args", ".", "n_heads", "\n", "self", ".", "overlap2", "=", "args", ".", "overlap2", "# the amount of points that overlap between two PCs", "\n", "c", "=", "copy", ".", "deepcopy", "\n", "attn", "=", "MultiHeadedAttention", "(", "self", ".", "n_heads", ",", "self", ".", "emb_dims", ",", "is_src", "=", "False", ")", "\n", "if", "args", ".", "partial", ":", "\n", "            ", "src_attn", "=", "MultiHeadedAttention", "(", "self", ".", "n_heads", ",", "self", ".", "emb_dims", ",", "is_src", "=", "True", ",", "overlap2", "=", "self", ".", "overlap2", ")", "\n", "", "else", ":", "\n", "            ", "src_attn", "=", "MultiHeadedAttention", "(", "self", ".", "n_heads", ",", "self", ".", "emb_dims", ",", "is_src", "=", "False", ")", "\n", "", "ff", "=", "PositionwiseFeedForward", "(", "self", ".", "emb_dims", ",", "self", ".", "ff_dims", ",", "self", ".", "dropout", ")", "\n", "self", ".", "model", "=", "EncoderDecoder", "(", "Encoder", "(", "EncoderLayer", "(", "self", ".", "emb_dims", ",", "c", "(", "attn", ")", ",", "c", "(", "ff", ")", ",", "self", ".", "dropout", ")", ",", "self", ".", "N", ")", ",", "\n", "Decoder", "(", "DecoderLayer", "(", "self", ".", "emb_dims", ",", "c", "(", "attn", ")", ",", "c", "(", "src_attn", ")", ",", "c", "(", "ff", ")", ",", "self", ".", "dropout", ")", ",", "\n", "self", ".", "N", ")", ",", "\n", "nn", ".", "Sequential", "(", ")", ",", "\n", "nn", ".", "Sequential", "(", ")", ",", "\n", "nn", ".", "Sequential", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.Transformer.forward": [[264, 273], ["src.transpose().contiguous.transpose().contiguous.transpose().contiguous", "tgt.transpose().contiguous.transpose().contiguous.transpose().contiguous", "transformer.Transformer.model().transpose().contiguous", "transformer.Transformer.model().transpose().contiguous", "src.transpose().contiguous.transpose().contiguous.transpose", "tgt.transpose().contiguous.transpose().contiguous.transpose", "transformer.Transformer.model().transpose", "transformer.Transformer.model().transpose", "transformer.Transformer.model", "transformer.Transformer.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src", "=", "input", "[", "0", "]", "\n", "tgt", "=", "input", "[", "1", "]", "\n", "src", "=", "src", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "tgt", "=", "tgt", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "tgt_embedding", "=", "self", ".", "model", "(", "src", ",", "tgt", ",", "None", ",", "None", ",", "src_tgt", "=", "False", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "src_embedding", "=", "self", ".", "model", "(", "tgt", ",", "src", ",", "None", ",", "None", ",", "src_tgt", "=", "True", ")", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "return", "src_embedding", ",", "tgt_embedding", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.clones": [[9, 11], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["def", "clones", "(", "module", ",", "N", ")", ":", "\n", "    ", "return", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "module", ")", "for", "_", "in", "range", "(", "N", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.transformer.attention": [[13, 56], ["query.size", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "scores.masked_fill.masked_fill", "key.size", "query.size", "torch.sum", "torch.sum", "torch.sum", "int", "idxColSum.view.view", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.full().cpu.transpose().contiguous().view().repeat", "scores.masked_fill.masked_fill", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "key.transpose().contiguous", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.sum.topk", "torch.full().cuda", "torch.full().cuda", "torch.full().cuda", "torch.full().cpu", "torch.full().cpu", "torch.full().cpu", "torch.full().cpu.view", "torch.full().cpu.transpose().contiguous().view", "key.transpose", "torch.arange", "torch.arange", "torch.arange", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full().cpu.transpose().contiguous", "torch.device", "torch.device", "torch.device", "torch.full().cpu.transpose", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "function", ["None"], ["", "def", "attention", "(", "query", ",", "key", ",", "value", ",", "mask", "=", "None", ",", "dropout", "=", "None", ",", "is_src", "=", "False", ",", "overlap2", "=", "0.75", ")", ":", "\n", "    ", "\"\"\"\n        single attention calculation\n\n        Args:\n            query: vector Q\n            key: vector K\n            value: vector V\n            mask: shows which grid would have a score of -1e9, matrix\n            dropout: not used\n            is_src: is source point net\n            overlap2: ratio of the point net after removing the non-relevant points. Only considered when is_src=True\n\n        Returns:\n            self-attention result, softmax result\n        \"\"\"", "\n", "d_k", "=", "query", ".", "size", "(", "-", "1", ")", "\n", "scores", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ".", "contiguous", "(", ")", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "scores", "=", "scores", ".", "masked_fill", "(", "mask", "==", "0", ",", "-", "1e9", ")", "\n", "\n", "", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "# weight obtained from softmax", "\n", "if", "is_src", ":", "\n", "        ", "batch_size", ",", "n_head", ",", "num_points_key", ",", "n_dims", "=", "key", ".", "size", "(", ")", "\n", "_", ",", "_", ",", "num_points_query", ",", "_", "=", "query", ".", "size", "(", ")", "\n", "idx_base", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "*", "num_points_key", "\n", "scoresColSum", "=", "torch", ".", "sum", "(", "p_attn", ",", "dim", "=", "[", "1", ",", "2", "]", ",", "keepdim", "=", "True", ")", "\n", "tgtK", "=", "int", "(", "num_points_key", "*", "overlap2", ")", "\n", "idxColSum", "=", "scoresColSum", ".", "topk", "(", "k", "=", "tgtK", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "idxColSum", "=", "idxColSum", "+", "idx_base", "\n", "idxColSum", "=", "idxColSum", ".", "view", "(", "-", "1", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "mask2", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "num_points_key", ",", "num_points_query", ")", ",", "fill_value", "=", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "mask2", "=", "torch", ".", "full", "(", "(", "batch_size", ",", "num_points_key", ",", "num_points_query", ")", ",", "fill_value", "=", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cpu", "(", ")", "\n", "", "mask2", ".", "view", "(", "batch_size", "*", "num_points_key", ",", "num_points_query", ")", "[", "idxColSum", ",", ":", "]", "=", "1", "\n", "mask2", "=", "mask2", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "1", ",", "num_points_query", ",", "num_points_key", ")", ".", "repeat", "(", "\n", "(", "1", ",", "n_head", ",", "1", ",", "1", ")", ")", "\n", "scores", "=", "scores", ".", "masked_fill", "(", "mask2", "==", "0", ",", "-", "1e9", ")", "\n", "p_attn", "=", "F", ".", "softmax", "(", "scores", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "torch", ".", "matmul", "(", "p_attn", ",", "value", ")", ",", "p_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.PointNet.__init__": [[22, 36], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dims", "=", "512", ")", ":", "\n", "        ", "super", "(", "PointNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv1d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv1d", "(", "64", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv1d", "(", "128", ",", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm1d", "(", "64", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm1d", "(", "128", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm1d", "(", "emb_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.PointNet.forward": [[37, 44], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dcp_model.PointNet.bn1", "dcp_model.PointNet.bn2", "dcp_model.PointNet.bn3", "dcp_model.PointNet.bn4", "dcp_model.PointNet.bn5", "dcp_model.PointNet.conv1", "dcp_model.PointNet.conv2", "dcp_model.PointNet.conv3", "dcp_model.PointNet.conv4", "dcp_model.PointNet.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.DGCNN.__init__": [[47, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "emb_dims", "=", "512", ")", ":", "\n", "        ", "super", "(", "DGCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "6", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "512", ",", "emb_dims", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "128", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "256", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "emb_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.DGCNN.forward": [[60, 80], ["torch.relu().view.size", "util.util.get_graph_feature", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu().view", "torch.relu().view", "torch.relu().view", "torch.relu().view", "dcp_model.DGCNN.bn1", "torch.relu().view.max", "dcp_model.DGCNN.bn2", "torch.relu().view.max", "dcp_model.DGCNN.bn3", "torch.relu().view.max", "dcp_model.DGCNN.bn4", "torch.relu().view.max", "dcp_model.DGCNN.conv1", "dcp_model.DGCNN.conv2", "dcp_model.DGCNN.conv3", "dcp_model.DGCNN.conv4", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dcp_model.DGCNN.bn5", "dcp_model.DGCNN.conv5"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.get_graph_feature"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", ",", "num_dims", ",", "num_points", "=", "x", ".", "size", "(", ")", "# [b,3,num]", "\n", "x", "=", "get_graph_feature", "(", "x", ")", "# [b,6,num,20]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "# [b,64,num,20]", "\n", "x1", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# [b,64,num,1]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "# [b,64,num,20]", "\n", "x2", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# [b,64,num,1]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "# [b,128,num,20]", "\n", "x3", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# [b,128,num,1]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "x", ")", ")", ")", "# [b,256,num,20]", "\n", "x4", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "# [b,256,num,1]", "\n", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ",", "x4", ")", ",", "dim", "=", "1", ")", "# [b,512,num,1]", "\n", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_points", ")", "# [b,512,num]", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.MLPHead.__init__": [[83, 98], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "MLPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "emb_dims", "=", "emb_dims", "\n", "self", ".", "nn", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "emb_dims", "*", "2", ",", "emb_dims", "//", "2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dims", "//", "2", ",", "emb_dims", "//", "4", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "emb_dims", "//", "4", ",", "emb_dims", "//", "8", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "emb_dims", "//", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "proj_rot", "=", "nn", ".", "Linear", "(", "emb_dims", "//", "8", ",", "4", ")", "\n", "self", ".", "proj_trans", "=", "nn", ".", "Linear", "(", "emb_dims", "//", "8", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.MLPHead.forward": [[99, 108], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "dcp_model.MLPHead.nn", "dcp_model.MLPHead.proj_rot", "dcp_model.MLPHead.proj_trans", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "util.util.quat2mat", "dcp_model.MLPHead.max"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.quat2mat"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src_embedding", "=", "input", "[", "0", "]", "\n", "tgt_embedding", "=", "input", "[", "1", "]", "\n", "embedding", "=", "torch", ".", "cat", "(", "(", "src_embedding", ",", "tgt_embedding", ")", ",", "dim", "=", "1", ")", "\n", "embedding", "=", "self", ".", "nn", "(", "embedding", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", "\n", "rotation", "=", "self", ".", "proj_rot", "(", "embedding", ")", "\n", "rotation", "=", "rotation", "/", "torch", ".", "norm", "(", "rotation", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "translation", "=", "self", ".", "proj_trans", "(", "embedding", ")", "\n", "return", "quat2mat", "(", "rotation", ")", ",", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.Identity.__init__": [[111, 113], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.Identity.forward": [[114, 116], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.SVDHead.__init__": [[119, 125], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "SVDHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "reflect", "=", "nn", ".", "Parameter", "(", "torch", ".", "eye", "(", "3", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "reflect", "[", "2", ",", "2", "]", "=", "-", "1", "\n", "self", ".", "use_mFea", "=", "args", ".", "use_mFea", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.SVDHead.forward": [[126, 175], ["[].transpose.size", "src_embedding.size", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "[].transpose", "[].transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.sqrt", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "torch.softmax.transpose().contiguous", "[].transpose.mean", "torch.matmul.mean", "torch.matmul.mean", "torch.matmul.mean", "torch.matmul.mean", "src_corr_centered.transpose().contiguous", "[].transpose.size", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.det", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.mean", "torch.matmul.mean", "torch.matmul.mean", "torch.matmul.mean", "t.view", "src_embedding.transpose().contiguous", "u.transpose().contiguous", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.svd", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "[].transpose.mean", "torch.softmax.transpose", "torch.softmax.transpose", "torch.softmax.transpose", "torch.softmax.transpose", "src_corr_centered.transpose", "u.transpose().contiguous", "input[].transpose().split", "input[].transpose().split", "src_embedding.transpose", "u.transpose", "u.transpose", "input[].transpose", "input[].transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "        ", "src_embedding", "=", "input", "[", "0", "]", "\n", "tgt_embedding", "=", "input", "[", "1", "]", "\n", "\n", "if", "self", ".", "use_mFea", ":", "\n", "            ", "src", "=", "input", "[", "2", "]", ".", "transpose", "(", "2", ",", "1", ")", ".", "split", "(", "[", "3", ",", "5", "]", ",", "dim", "=", "2", ")", "[", "0", "]", ".", "transpose", "(", "2", ",", "1", ")", "\n", "tgt", "=", "input", "[", "3", "]", ".", "transpose", "(", "2", ",", "1", ")", ".", "split", "(", "[", "3", ",", "5", "]", ",", "dim", "=", "2", ")", "[", "0", "]", ".", "transpose", "(", "2", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "src", "=", "input", "[", "2", "]", "\n", "tgt", "=", "input", "[", "3", "]", "\n", "\n", "", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "\n", "d_k", "=", "src_embedding", ".", "size", "(", "1", ")", "\n", "scores", "=", "torch", ".", "matmul", "(", "src_embedding", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "tgt_embedding", ")", "/", "math", ".", "sqrt", "(", "d_k", ")", "\n", "scores", "=", "torch", ".", "softmax", "(", "scores", ",", "dim", "=", "2", ")", "\n", "\n", "src_corr", "=", "torch", ".", "matmul", "(", "tgt", ",", "scores", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "src_centered", "=", "src", "-", "src", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "src_corr_centered", "=", "src_corr", "-", "src_corr", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "\n", "H", "=", "torch", ".", "matmul", "(", "src_centered", ",", "src_corr_centered", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "\n", "U", ",", "S", ",", "V", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "R", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "src", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "r_det", "=", "torch", ".", "det", "(", "r", ")", "\n", "if", "r_det", "<", "0", ":", "\n", "                ", "u", ",", "s", ",", "v", "=", "torch", ".", "svd", "(", "H", "[", "i", "]", ")", "\n", "v", "=", "torch", ".", "matmul", "(", "v", ",", "self", ".", "reflect", ")", "\n", "r", "=", "torch", ".", "matmul", "(", "v", ",", "u", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", ")", "\n", "", "R", ".", "append", "(", "r", ")", "\n", "\n", "U", ".", "append", "(", "u", ")", "\n", "S", ".", "append", "(", "s", ")", "\n", "V", ".", "append", "(", "v", ")", "\n", "\n", "", "U", "=", "torch", ".", "stack", "(", "U", ",", "dim", "=", "0", ")", "\n", "V", "=", "torch", ".", "stack", "(", "V", ",", "dim", "=", "0", ")", "\n", "S", "=", "torch", ".", "stack", "(", "S", ",", "dim", "=", "0", ")", "\n", "R", "=", "torch", ".", "stack", "(", "R", ",", "dim", "=", "0", ")", "\n", "\n", "t", "=", "torch", ".", "matmul", "(", "-", "R", ",", "src", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ")", "+", "src_corr", ".", "mean", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "return", "R", ",", "t", ".", "view", "(", "batch_size", ",", "3", ")", ",", "src", ",", "src_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.DCP.__init__": [[178, 204], ["torch.Module.__init__", "dcp_model.PointNet", "dcp_model.Identity", "dcp_model.MLPHead", "dcp_model.DGCNN", "model.transformer.Transformer", "Exception", "dcp_model.SVDHead", "Exception", "model.lpdnet_model.LPDNet", "Exception"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "DCP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "emb_dims", "=", "args", ".", "emb_dims", "\n", "self", ".", "cycle", "=", "args", ".", "cycle", "\n", "if", "args", ".", "emb_nn", "==", "'pointnet'", ":", "\n", "            ", "self", ".", "emb_nn", "=", "PointNet", "(", "emb_dims", "=", "self", ".", "emb_dims", ")", "\n", "", "elif", "args", ".", "emb_nn", "==", "'dgcnn'", ":", "\n", "            ", "self", ".", "emb_nn", "=", "DGCNN", "(", "emb_dims", "=", "self", ".", "emb_dims", ")", "\n", "", "elif", "args", ".", "emb_nn", "==", "'lpdnet'", ":", "\n", "            ", "self", ".", "emb_nn", "=", "LPDNet", "(", "args", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Not implemented'", ")", "\n", "\n", "", "if", "args", ".", "pointer", "==", "'identity'", ":", "\n", "            ", "self", ".", "pointer", "=", "Identity", "(", ")", "\n", "", "elif", "args", ".", "pointer", "==", "'transformer'", ":", "\n", "            ", "self", ".", "pointer", "=", "Transformer", "(", "args", "=", "args", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Not implemented\"", ")", "\n", "\n", "", "if", "args", ".", "head", "==", "'mlp'", ":", "\n", "            ", "self", ".", "head", "=", "MLPHead", "(", "args", "=", "args", ")", "\n", "", "elif", "args", ".", "head", "==", "'svd'", ":", "\n", "            ", "self", ".", "head", "=", "SVDHead", "(", "args", "=", "args", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Not implemented'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.DCP.forward": [[205, 224], ["dcp_model.DCP.emb_nn", "dcp_model.DCP.emb_nn", "dcp_model.DCP.pointer", "dcp_model.DCP.head", "dcp_model.DCP.head", "rotation_ab.transpose().contiguous", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "torch.matmul().squeeze", "rotation_ab.transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "translation_ab.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "*", "input", ")", ":", "\n", "# [B,3,num]", "\n", "        ", "src", "=", "input", "[", "0", "]", "\n", "tgt", "=", "input", "[", "1", "]", "\n", "src_embedding", "=", "self", ".", "emb_nn", "(", "src", ")", "\n", "tgt_embedding", "=", "self", ".", "emb_nn", "(", "tgt", ")", "\n", "\n", "src_embedding_p", ",", "tgt_embedding_p", "=", "self", ".", "pointer", "(", "src_embedding", ",", "tgt_embedding", ")", "\n", "\n", "src_embedding", "=", "src_embedding", "+", "src_embedding_p", "\n", "tgt_embedding", "=", "tgt_embedding", "+", "tgt_embedding_p", "\n", "\n", "rotation_ab", ",", "translation_ab", ",", "src", ",", "src_corr", "=", "self", ".", "head", "(", "src_embedding", ",", "tgt_embedding", ",", "src", ",", "tgt", ")", "\n", "if", "self", ".", "cycle", ":", "\n", "            ", "rotation_ba", ",", "translation_ba", "=", "self", ".", "head", "(", "tgt_embedding", ",", "src_embedding", ",", "tgt", ",", "src", ")", "\n", "", "else", ":", "\n", "            ", "rotation_ba", "=", "rotation_ab", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "translation_ba", "=", "-", "torch", ".", "matmul", "(", "rotation_ba", ",", "translation_ab", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", "2", ")", "\n", "", "return", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "src", ",", "src_corr", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.test_one_epoch": [[226, 340], ["net.eval", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "[].transpose.cuda", "[].transpose.cuda", "rotation_ab.cuda.cuda", "translation_ab.cuda.cuda", "rotation_ba.cuda.cuda", "translation_ba.cuda.cuda", "[].transpose.size", "net", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "util.util.transform_point_cloud", "util.util.transform_point_cloud", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "[].transpose", "[].transpose", "rotation_ab.cuda.detach().cpu().numpy", "translation_ab.cuda.detach().cpu().numpy", "rotation_ab_pred.detach().cpu().numpy", "translation_ab_pred.detach().cpu().numpy", "euler_ab.numpy", "rotation_ba.cuda.detach().cpu().numpy", "translation_ba.cuda.detach().cpu().numpy", "rotation_ba_pred.detach().cpu().numpy", "translation_ba_pred.detach().cpu().numpy", "euler_ba.numpy", "torch.mse_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.nn.functional.mse_loss.item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.mse_loss", "torch.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda().unsqueeze().repeat.clone", "rotation_ab.cuda.detach().cpu", "translation_ab.cuda.detach().cpu", "rotation_ab_pred.detach().cpu", "translation_ab_pred.detach().cpu", "rotation_ba.cuda.detach().cpu", "translation_ba.cuda.detach().cpu", "rotation_ba_pred.detach().cpu", "translation_ba_pred.detach().cpu", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "[].transpose.transpose().split", "[].transpose.transpose().split", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "rotation_ab_pred.transpose", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "cycle_loss.item", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "rotation_ab.cuda.detach", "translation_ab.cuda.detach", "rotation_ab_pred.detach", "translation_ab_pred.detach", "rotation_ba.cuda.detach", "translation_ba.cuda.detach", "rotation_ba_pred.detach", "translation_ba_pred.detach", "[].transpose.transpose", "[].transpose.transpose", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rotation_ba_pred.transpose", "translation_ab_pred.view"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud"], ["", "", "def", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "mse_ab", "=", "0", "\n", "mae_ab", "=", "0", "\n", "mse_ba", "=", "0", "\n", "mae_ba", "=", "0", "\n", "\n", "total_loss", "=", "0", "\n", "total_cycle_loss", "=", "0", "\n", "num_examples", "=", "0", "\n", "rotations_ab", "=", "[", "]", "\n", "translations_ab", "=", "[", "]", "\n", "rotations_ab_pred", "=", "[", "]", "\n", "translations_ab_pred", "=", "[", "]", "\n", "\n", "rotations_ba", "=", "[", "]", "\n", "translations_ba", "=", "[", "]", "\n", "rotations_ba_pred", "=", "[", "]", "\n", "translations_ba_pred", "=", "[", "]", "\n", "\n", "eulers_ab", "=", "[", "]", "\n", "eulers_ba", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "euler_ab", ",", "euler_ba", ",", "label", "in", "tqdm", "(", "\n", "test_loader", ")", ":", "\n", "            ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "cuda", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "cuda", "(", ")", "\n", "rotation_ba", "=", "rotation_ba", ".", "cuda", "(", ")", "\n", "translation_ba", "=", "translation_ba", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "num_examples", "+=", "batch_size", "\n", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", ",", "src", ",", "src_corr", "=", "net", "(", "src", ",", "\n", "target", ")", "\n", "\n", "# save(src,src_corr, rotation_ba, translation_ba, rotation_ab_pred, translation_ab_pred)", "\n", "\n", "if", "args", ".", "use_mFea", ":", "\n", "                ", "src", "=", "src", ".", "transpose", "(", "2", ",", "1", ")", ".", "split", "(", "[", "3", ",", "5", "]", ",", "dim", "=", "2", ")", "[", "0", "]", ".", "transpose", "(", "2", ",", "1", ")", "\n", "target", "=", "target", ".", "transpose", "(", "2", ",", "1", ")", ".", "split", "(", "[", "3", ",", "5", "]", ",", "dim", "=", "2", ")", "[", "0", "]", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "## save rotation and translation", "\n", "", "rotations_ab", ".", "append", "(", "rotation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab", ".", "append", "(", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ab_pred", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab_pred", ".", "append", "(", "translation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ab", ".", "append", "(", "euler_ab", ".", "numpy", "(", ")", ")", "\n", "##", "\n", "rotations_ba", ".", "append", "(", "rotation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba", ".", "append", "(", "translation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ba_pred", ".", "append", "(", "rotation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba_pred", ".", "append", "(", "translation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ba", ".", "append", "(", "euler_ba", ".", "numpy", "(", ")", ")", "\n", "\n", "transformed_src", "=", "transform_point_cloud", "(", "src", ",", "rotation_ab_pred", ",", "translation_ab_pred", ")", "\n", "\n", "# savePlt(args,target,transformed_src,name='corrpose')", "\n", "\n", "transformed_target", "=", "transform_point_cloud", "(", "target", ",", "rotation_ba_pred", ",", "translation_ba_pred", ")", "\n", "\n", "# if args.", "\n", "# visualization_test(args,src, target,transformed_target,folderName='visualization')", "\n", "\n", "###########################", "\n", "identity", "=", "torch", ".", "eye", "(", "3", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "\n", "if", "args", ".", "loss", "==", "'pose'", ":", "\n", "                ", "loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "\n", "", "elif", "args", ".", "loss", "==", "'point'", ":", "\n", "                ", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "transformed_src", ",", "src_corr", ")", "\n", "\n", "", "if", "args", ".", "cycle", ":", "\n", "                ", "rotation_loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ",", "rotation_ab_pred", ")", ",", "identity", ".", "clone", "(", ")", ")", "\n", "translation_loss", "=", "torch", ".", "mean", "(", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "\n", "translation_ab_pred", ".", "view", "(", "batch_size", ",", "3", ",", "1", ")", ")", ".", "view", "(", "batch_size", ",", "\n", "3", ")", "\n", "+", "translation_ba_pred", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", "]", ")", "\n", "cycle_loss", "=", "rotation_loss", "+", "translation_loss", "\n", "\n", "loss", "=", "loss", "+", "cycle_loss", "*", "0.1", "\n", "\n", "", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "if", "args", ".", "cycle", ":", "\n", "                ", "total_cycle_loss", "=", "total_cycle_loss", "+", "cycle_loss", ".", "item", "(", ")", "*", "0.1", "*", "batch_size", "\n", "\n", "", "mse_ab", "+=", "torch", ".", "mean", "(", "(", "transformed_src", "-", "target", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ab", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_src", "-", "target", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "mse_ba", "+=", "torch", ".", "mean", "(", "(", "transformed_target", "-", "src", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ba", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_target", "-", "src", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "", "", "rotations_ab", "=", "np", ".", "concatenate", "(", "rotations_ab", ",", "axis", "=", "0", ")", "\n", "translations_ab", "=", "np", ".", "concatenate", "(", "translations_ab", ",", "axis", "=", "0", ")", "\n", "rotations_ab_pred", "=", "np", ".", "concatenate", "(", "rotations_ab_pred", ",", "axis", "=", "0", ")", "\n", "translations_ab_pred", "=", "np", ".", "concatenate", "(", "translations_ab_pred", ",", "axis", "=", "0", ")", "\n", "\n", "rotations_ba", "=", "np", ".", "concatenate", "(", "rotations_ba", ",", "axis", "=", "0", ")", "\n", "translations_ba", "=", "np", ".", "concatenate", "(", "translations_ba", ",", "axis", "=", "0", ")", "\n", "rotations_ba_pred", "=", "np", ".", "concatenate", "(", "rotations_ba_pred", ",", "axis", "=", "0", ")", "\n", "translations_ba_pred", "=", "np", ".", "concatenate", "(", "translations_ba_pred", ",", "axis", "=", "0", ")", "\n", "\n", "eulers_ab", "=", "np", ".", "concatenate", "(", "eulers_ab", ",", "axis", "=", "0", ")", "\n", "eulers_ba", "=", "np", ".", "concatenate", "(", "eulers_ba", ",", "axis", "=", "0", ")", "\n", "\n", "return", "total_loss", "*", "1.0", "/", "num_examples", ",", "total_cycle_loss", "/", "num_examples", ",", "mse_ab", "*", "1.0", "/", "num_examples", ",", "mae_ab", "*", "1.0", "/", "num_examples", ",", "mse_ba", "*", "1.0", "/", "num_examples", ",", "mae_ba", "*", "1.0", "/", "num_examples", ",", "rotations_ab", ",", "translations_ab", ",", "rotations_ab_pred", ",", "translations_ab_pred", ",", "rotations_ba", ",", "translations_ba", ",", "rotations_ba_pred", ",", "translations_ba_pred", ",", "eulers_ab", ",", "eulers_ba", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.train_one_epoch": [[342, 449], ["net.train", "tqdm.tqdm", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "[].transpose.cuda", "[].transpose.cuda", "rotation_ab.cuda.cuda", "translation_ab.cuda.cuda", "rotation_ba.cuda.cuda", "translation_ba.cuda.cuda", "[].transpose.size", "opt.zero_grad", "net", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "util.util.transform_point_cloud", "util.util.transform_point_cloud", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.eye().cuda().unsqueeze().repeat", "torch.nn.functional.mse_loss.backward", "opt.step", "[].transpose", "[].transpose", "rotation_ab.cuda.detach().cpu().numpy", "translation_ab.cuda.detach().cpu().numpy", "rotation_ab_pred.detach().cpu().numpy", "translation_ab_pred.detach().cpu().numpy", "euler_ab.numpy", "rotation_ba.cuda.detach().cpu().numpy", "translation_ba.cuda.detach().cpu().numpy", "rotation_ba_pred.detach().cpu().numpy", "translation_ba_pred.detach().cpu().numpy", "euler_ba.numpy", "torch.mse_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.nn.functional.mse_loss.item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.eye().cuda().unsqueeze", "torch.mse_loss", "torch.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.nn.functional.mse_loss", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().cuda().unsqueeze().repeat.clone", "rotation_ab.cuda.detach().cpu", "translation_ab.cuda.detach().cpu", "rotation_ab_pred.detach().cpu", "translation_ab_pred.detach().cpu", "rotation_ba.cuda.detach().cpu", "translation_ba.cuda.detach().cpu", "rotation_ba_pred.detach().cpu", "translation_ba_pred.detach().cpu", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "[].transpose.transpose().split", "[].transpose.transpose().split", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "rotation_ab_pred.transpose", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "cycle_loss.item", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "rotation_ab.cuda.detach", "translation_ab.cuda.detach", "rotation_ab_pred.detach", "translation_ab_pred.detach", "rotation_ba.cuda.detach", "translation_ba.cuda.detach", "rotation_ba_pred.detach", "translation_ba_pred.detach", "[].transpose.transpose", "[].transpose.transpose", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "rotation_ba_pred.transpose", "translation_ab_pred.view"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud"], ["", "def", "train_one_epoch", "(", "args", ",", "net", ",", "train_loader", ",", "opt", ")", ":", "\n", "    ", "net", ".", "train", "(", ")", "\n", "\n", "mse_ab", "=", "0", "\n", "mae_ab", "=", "0", "\n", "mse_ba", "=", "0", "\n", "mae_ba", "=", "0", "\n", "\n", "total_loss", "=", "0", "\n", "total_cycle_loss", "=", "0", "\n", "num_examples", "=", "0", "\n", "rotations_ab", "=", "[", "]", "\n", "translations_ab", "=", "[", "]", "\n", "rotations_ab_pred", "=", "[", "]", "\n", "translations_ab_pred", "=", "[", "]", "\n", "\n", "rotations_ba", "=", "[", "]", "\n", "translations_ba", "=", "[", "]", "\n", "rotations_ba_pred", "=", "[", "]", "\n", "translations_ba_pred", "=", "[", "]", "\n", "\n", "eulers_ab", "=", "[", "]", "\n", "eulers_ba", "=", "[", "]", "\n", "\n", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "euler_ab", ",", "euler_ba", ",", "label", "in", "tqdm", "(", "\n", "train_loader", ")", ":", "\n", "        ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "rotation_ab", "=", "rotation_ab", ".", "cuda", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "cuda", "(", ")", "\n", "rotation_ba", "=", "rotation_ba", ".", "cuda", "(", ")", "\n", "translation_ba", "=", "translation_ba", ".", "cuda", "(", ")", "\n", "\n", "batch_size", "=", "src", ".", "size", "(", "0", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "num_examples", "+=", "batch_size", "\n", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", ",", "src", ",", "src_corr", "=", "net", "(", "src", ",", "target", ")", "\n", "\n", "if", "args", ".", "use_mFea", ":", "\n", "            ", "src", "=", "src", ".", "transpose", "(", "2", ",", "1", ")", ".", "split", "(", "[", "3", ",", "5", "]", ",", "dim", "=", "2", ")", "[", "0", "]", ".", "transpose", "(", "2", ",", "1", ")", "\n", "target", "=", "target", ".", "transpose", "(", "2", ",", "1", ")", ".", "split", "(", "[", "3", ",", "5", "]", ",", "dim", "=", "2", ")", "[", "0", "]", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "## save rotation and translation", "\n", "", "rotations_ab", ".", "append", "(", "rotation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab", ".", "append", "(", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ab_pred", ".", "append", "(", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ab_pred", ".", "append", "(", "translation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ab", ".", "append", "(", "euler_ab", ".", "numpy", "(", ")", ")", "\n", "##", "\n", "rotations_ba", ".", "append", "(", "rotation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba", ".", "append", "(", "translation_ba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "rotations_ba_pred", ".", "append", "(", "rotation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "translations_ba_pred", ".", "append", "(", "translation_ba_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "eulers_ba", ".", "append", "(", "euler_ba", ".", "numpy", "(", ")", ")", "\n", "\n", "transformed_src", "=", "transform_point_cloud", "(", "src", ",", "rotation_ab_pred", ",", "translation_ab_pred", ")", "\n", "\n", "transformed_target", "=", "transform_point_cloud", "(", "target", ",", "rotation_ba_pred", ",", "translation_ba_pred", ")", "\n", "###########################", "\n", "identity", "=", "torch", ".", "eye", "(", "3", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "batch_size", ",", "1", ",", "1", ")", "\n", "\n", "if", "args", ".", "loss", "==", "'pose'", ":", "\n", "            ", "loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ab_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "rotation_ab", ")", ",", "identity", ")", "+", "F", ".", "mse_loss", "(", "translation_ab_pred", ",", "translation_ab", ")", "\n", "", "elif", "args", ".", "loss", "==", "'point'", ":", "\n", "            ", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "mse_loss", "(", "transformed_src", ",", "src_corr", ")", "\n", "\n", "", "if", "args", ".", "cycle", ":", "\n", "            ", "rotation_loss", "=", "F", ".", "mse_loss", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ",", "rotation_ab_pred", ")", ",", "identity", ".", "clone", "(", ")", ")", "\n", "translation_loss", "=", "torch", ".", "mean", "(", "(", "torch", ".", "matmul", "(", "rotation_ba_pred", ".", "transpose", "(", "2", ",", "1", ")", ",", "\n", "translation_ab_pred", ".", "view", "(", "batch_size", ",", "3", ",", "1", ")", ")", ".", "view", "(", "batch_size", ",", "3", ")", "\n", "+", "translation_ba_pred", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", "]", ")", "\n", "cycle_loss", "=", "rotation_loss", "+", "translation_loss", "\n", "\n", "loss", "=", "loss", "+", "cycle_loss", "*", "0.1", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "if", "args", ".", "cycle", ":", "\n", "            ", "total_cycle_loss", "=", "total_cycle_loss", "+", "cycle_loss", ".", "item", "(", ")", "*", "0.1", "*", "batch_size", "\n", "\n", "", "mse_ab", "+=", "torch", ".", "mean", "(", "(", "transformed_src", "-", "target", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ab", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_src", "-", "target", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "mse_ba", "+=", "torch", ".", "mean", "(", "(", "transformed_target", "-", "src", ")", "**", "2", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "mae_ba", "+=", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "transformed_target", "-", "src", ")", ",", "dim", "=", "[", "0", ",", "1", ",", "2", "]", ")", ".", "item", "(", ")", "*", "batch_size", "\n", "\n", "", "rotations_ab", "=", "np", ".", "concatenate", "(", "rotations_ab", ",", "axis", "=", "0", ")", "\n", "translations_ab", "=", "np", ".", "concatenate", "(", "translations_ab", ",", "axis", "=", "0", ")", "\n", "rotations_ab_pred", "=", "np", ".", "concatenate", "(", "rotations_ab_pred", ",", "axis", "=", "0", ")", "\n", "translations_ab_pred", "=", "np", ".", "concatenate", "(", "translations_ab_pred", ",", "axis", "=", "0", ")", "\n", "\n", "rotations_ba", "=", "np", ".", "concatenate", "(", "rotations_ba", ",", "axis", "=", "0", ")", "\n", "translations_ba", "=", "np", ".", "concatenate", "(", "translations_ba", ",", "axis", "=", "0", ")", "\n", "rotations_ba_pred", "=", "np", ".", "concatenate", "(", "rotations_ba_pred", ",", "axis", "=", "0", ")", "\n", "translations_ba_pred", "=", "np", ".", "concatenate", "(", "translations_ba_pred", ",", "axis", "=", "0", ")", "\n", "\n", "eulers_ab", "=", "np", ".", "concatenate", "(", "eulers_ab", ",", "axis", "=", "0", ")", "\n", "eulers_ba", "=", "np", ".", "concatenate", "(", "eulers_ba", ",", "axis", "=", "0", ")", "\n", "\n", "return", "total_loss", "*", "1.0", "/", "num_examples", ",", "total_cycle_loss", "/", "num_examples", ",", "mse_ab", "*", "1.0", "/", "num_examples", ",", "mae_ab", "*", "1.0", "/", "num_examples", ",", "mse_ba", "*", "1.0", "/", "num_examples", ",", "mae_ba", "*", "1.0", "/", "num_examples", ",", "rotations_ab", ",", "translations_ab", ",", "rotations_ab_pred", ",", "translations_ab_pred", ",", "rotations_ba", ",", "translations_ba", ",", "rotations_ba_pred", ",", "translations_ba_pred", ",", "eulers_ab", ",", "eulers_ba", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.testDCP": [[451, 504], ["dcp_model.test_one_epoch", "numpy.sqrt", "numpy.sqrt", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "textio.cprint", "textio.cprint", "textio.cprint", "util.util.npmat2euler", "numpy.sum", "numpy.argsort", "numpy.sum", "numpy.argsort", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "textio.cprint", "textio.cprint", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.test_one_epoch", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint"], ["", "def", "testDCP", "(", "args", ",", "net", ",", "test_loader", ",", "boardio", ",", "textio", ")", ":", "\n", "    ", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_mae_ab", ",", "test_mse_ba", ",", "test_mae_ba", ",", "test_rotations_ab", ",", "test_translations_ab", ",", "test_rotations_ab_pred", ",", "test_translations_ab_pred", ",", "test_rotations_ba", ",", "test_translations_ba", ",", "test_rotations_ba_pred", ",", "test_translations_ba_pred", ",", "test_eulers_ab", ",", "test_eulers_ba", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "test_rmse_ab", "=", "np", ".", "sqrt", "(", "test_mse_ab", ")", "\n", "test_rmse_ba", "=", "np", ".", "sqrt", "(", "test_mse_ba", ")", "\n", "\n", "test_rotations_ab_pred_euler", "=", "npmat2euler", "(", "test_rotations_ab_pred", ")", "\n", "test_r_mse_ab", "=", "np", ".", "mean", "(", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ab", "=", "np", ".", "sqrt", "(", "test_r_mse_ab", ")", "\n", "test_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", ")", "\n", "\n", "test_t_mse_ab", "=", "np", ".", "mean", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ab", "=", "np", ".", "sqrt", "(", "test_t_mse_ab", ")", "\n", "test_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", ")", "\n", "\n", "test_rotations_ba_pred_euler", "=", "npmat2euler", "(", "test_rotations_ba_pred", ",", "'xyz'", ")", "\n", "test_r_mse_ba", "=", "np", ".", "mean", "(", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ba", "=", "np", ".", "sqrt", "(", "test_r_mse_ba", ")", "\n", "test_r_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", ")", "\n", "test_t_mse_ba", "=", "np", ".", "mean", "(", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ba", "=", "np", ".", "sqrt", "(", "test_t_mse_ba", ")", "\n", "test_t_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", ")", "\n", "\n", "textio", ".", "cprint", "(", "'==FINAL TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, Cycle Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "-", "1", ",", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_rmse_ab", ",", "test_mae_ab", ",", "\n", "test_r_mse_ab", ",", "test_r_rmse_ab", ",", "\n", "test_r_mae_ab", ",", "test_t_mse_ab", ",", "test_t_rmse_ab", ",", "test_t_mae_ab", ")", ")", "\n", "if", "args", ".", "cycle", ":", "\n", "        ", "textio", ".", "cprint", "(", "'B--------->A'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "-", "1", ",", "test_loss", ",", "test_mse_ba", ",", "test_rmse_ba", ",", "test_mae_ba", ",", "test_r_mse_ba", ",", "test_r_rmse_ba", ",", "\n", "test_r_mae_ba", ",", "test_t_mse_ba", ",", "test_t_rmse_ba", ",", "test_t_mae_ba", ")", ")", "\n", "\n", "", "K", "=", "5", "\n", "test_rotations_ab_pred_euler", "=", "npmat2euler", "(", "test_rotations_ab_pred", ")", "\n", "loss", "=", "np", ".", "sum", "(", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "**", "2", ",", "axis", "=", "-", "1", ")", "\n", "idx", "=", "np", ".", "argsort", "(", "loss", ",", "axis", "=", "-", "1", ",", "kind", "=", "'quicksort'", ",", "order", "=", "None", ")", "\n", "idTopKRot", "=", "idx", "[", "-", "K", ":", "]", "\n", "\n", "loss", "=", "np", ".", "sum", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ",", "axis", "=", "-", "1", ")", "\n", "idx", "=", "np", ".", "argsort", "(", "loss", ",", "axis", "=", "-", "1", ",", "kind", "=", "'quicksort'", ",", "order", "=", "None", ")", "\n", "idTopKTrans", "=", "idx", "[", "-", "K", ":", "]", "\n", "\n", "# showBad(args, net, test_loader, idTopKRot, idTopKTrans)", "\n", "\n", "return", "test_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.showBad": [[506, 556], ["net.eval", "numpy.zeros", "numpy.zeros", "range", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm", "src.cuda.cuda", "target.cuda.cuda", "net", "util.util.transform_point_cloud", "rotation_ab_pred.detach().cpu().numpy.detach().cpu().numpy", "translation_ab_pred.detach().cpu().numpy.detach().cpu().numpy", "euler_ab.detach().cpu().numpy.detach().cpu().numpy", "translation_ab.detach().cpu().numpy.detach().cpu().numpy", "scipy.spatial.transform.Rotation.from_dcm", "Rotation.from_dcm.as_euler", "numpy.mean", "numpy.mean", "rotation_ab_pred.detach().cpu().numpy.detach().cpu", "translation_ab_pred.detach().cpu().numpy.detach().cpu", "euler_ab.detach().cpu().numpy.detach().cpu", "translation_ab.detach().cpu().numpy.detach().cpu", "numpy.degrees", "numpy.abs", "str", "str", "numpy.abs", "str", "str", "rotation_ab_pred.detach().cpu().numpy.detach", "translation_ab_pred.detach().cpu().numpy.detach", "euler_ab.detach().cpu().numpy.detach", "translation_ab.detach().cpu().numpy.detach", "str", "str"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud"], ["", "def", "showBad", "(", "args", ",", "net", ",", "test_loader", ",", "idTopKRot", ",", "idTopKTrans", ")", ":", "\n", "    ", "net", ".", "eval", "(", ")", "\n", "idTopKRotPair", "=", "np", ".", "zeros", "(", "(", "idTopKRot", ".", "shape", "[", "0", "]", ",", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "idTopKTransPair", "=", "np", ".", "zeros", "(", "(", "idTopKTrans", ".", "shape", "[", "0", "]", ",", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "idTopKRot", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "idTopKRotPair", "[", "i", ",", "0", "]", "=", "idTopKRot", "[", "i", "]", "//", "args", ".", "test_batch_size", "\n", "idTopKRotPair", "[", "i", ",", "1", "]", "=", "idTopKRot", "[", "i", "]", "%", "args", ".", "test_batch_size", "\n", "idTopKTransPair", "[", "i", ",", "0", "]", "=", "idTopKTrans", "[", "i", "]", "//", "args", ".", "test_batch_size", "\n", "idTopKTransPair", "[", "i", ",", "1", "]", "=", "idTopKTrans", "[", "i", "]", "%", "args", ".", "test_batch_size", "\n", "\n", "", "batch_id", "=", "-", "1", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "src", ",", "target", ",", "rotation_ab", ",", "translation_ab", ",", "rotation_ba", ",", "translation_ba", ",", "euler_ab", ",", "euler_ba", ",", "label", "in", "tqdm", "(", "\n", "test_loader", ")", ":", "\n", "            ", "src", "=", "src", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "# rotation_ab = rotation_ab.cuda()", "\n", "# translation_ab = translation_ab.cuda()", "\n", "batch_id", "=", "batch_id", "+", "1", "\n", "if", "(", "batch_id", "in", "idTopKRotPair", "[", ":", ",", "0", "]", ")", "or", "(", "batch_id", "in", "idTopKTransPair", "[", ":", ",", "0", "]", ")", ":", "\n", "\n", "                ", "rotation_ab_pred", ",", "translation_ab_pred", ",", "rotation_ba_pred", ",", "translation_ba_pred", "=", "net", "(", "src", ",", "target", ")", "\n", "\n", "transformed_src", "=", "transform_point_cloud", "(", "src", ",", "rotation_ab_pred", ",", "translation_ab_pred", ")", "\n", "\n", "idR", "=", "idTopKRotPair", "[", "idTopKRotPair", "[", ":", ",", "0", "]", "==", "batch_id", ",", "1", "]", "\n", "idt", "=", "idTopKTransPair", "[", "idTopKTransPair", "[", ":", ",", "0", "]", "==", "batch_id", ",", "1", "]", "\n", "\n", "rotation_ab_pred", "=", "rotation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "translation_ab_pred", "=", "translation_ab_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "euler_ab", "=", "euler_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "translation_ab", "=", "translation_ab", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "for", "id_R", "in", "idR", ":", "\n", "                    ", "r", "=", "Rotation", ".", "from_dcm", "(", "rotation_ab_pred", "[", "id_R", ",", ":", ",", ":", "]", ")", "\n", "eulers_ab_pred", "=", "r", ".", "as_euler", "(", "'zyx'", ",", "degrees", "=", "True", ")", "\n", "euler_ab_i", "=", "euler_ab", "[", "id_R", ",", ":", "]", "\n", "euler_delta", "=", "eulers_ab_pred", "-", "np", ".", "degrees", "(", "euler_ab_i", ")", "\n", "mae", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "euler_delta", ")", ")", "\n", "title", "=", "'euler error: '", "+", "str", "(", "euler_delta", ")", "+", "' mae: '", "+", "str", "(", "mae", ")", "\n", "filename", "=", "str", "(", "batch_id", "*", "args", ".", "test_batch_size", "+", "id_R", ")", "+", "'-R'", "\n", "# savePlt(args, target[id_R,:,:], transformed_src[id_R,:,:], folderName='bad_cp', title=title,filename=filename)", "\n", "\n", "", "for", "id_t", "in", "idt", ":", "\n", "                    ", "translation_ab_pred_i", "=", "translation_ab_pred", "[", "id_t", ",", ":", "]", "\n", "translation_ab_i", "=", "translation_ab", "[", "id_t", ",", ":", "]", "\n", "translation_delta", "=", "translation_ab_pred_i", "-", "translation_ab_i", "\n", "mae", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "translation_delta", ")", ")", "\n", "title", "=", "'trans error: '", "+", "str", "(", "translation_delta", ")", "+", "' mae: '", "+", "str", "(", "mae", ")", "\n", "filename", "=", "str", "(", "batch_id", "*", "args", ".", "test_batch_size", "+", "id_t", ")", "+", "'-T'", "\n", "# savePlt(args, target[id_t,:,:], transformed_src[id_t,:,:], folderName='bad_cp', title=title,filename=filename)", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.trainDCP": [[559, 800], ["torch.optim.lr_scheduler.ReduceLROnPlateau", "range", "print", "torch.SGD", "print", "torch.Adam", "dcp_model.train_one_epoch", "dcp_model.test_one_epoch", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "util.util.npmat2euler", "numpy.mean", "numpy.sqrt", "numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.mean", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "boardio.add_scalar", "gc.collect", "net.parameters", "net.parameters", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "textio.cprint", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "net.module.state_dict", "net.state_dict", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "numpy.degrees", "net.module.state_dict", "net.state_dict"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.train_one_epoch", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.model.dcp_model.test_one_epoch", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint"], ["", "", "", "", "", "def", "trainDCP", "(", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", ")", ":", "\n", "    ", "if", "args", ".", "use_sgd", ":", "\n", "        ", "print", "(", "\"Use SGD\"", ")", "\n", "opt", "=", "optim", ".", "SGD", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", "*", "100", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Use Adam\"", ")", "\n", "opt", "=", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "1e-4", ")", "\n", "\n", "# scheduler = MultiStepLR(opt, milestones=[75, 150, 200], gamma=0.1)", "\n", "", "scheduler", "=", "ReduceLROnPlateau", "(", "opt", ",", "mode", "=", "'min'", ",", "factor", "=", "0.1", ",", "patience", "=", "5", ",", "verbose", "=", "False", ",", "threshold", "=", "0.000001", ")", "\n", "\n", "best_test_loss", "=", "np", ".", "inf", "\n", "best_test_cycle_loss", "=", "np", ".", "inf", "\n", "best_test_mse_ab", "=", "np", ".", "inf", "\n", "best_test_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_mae_ab", "=", "np", ".", "inf", "\n", "\n", "best_test_r_mse_ab", "=", "np", ".", "inf", "\n", "best_test_r_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_r_mae_ab", "=", "np", ".", "inf", "\n", "best_test_t_mse_ab", "=", "np", ".", "inf", "\n", "best_test_t_rmse_ab", "=", "np", ".", "inf", "\n", "best_test_t_mae_ab", "=", "np", ".", "inf", "\n", "\n", "best_test_mse_ba", "=", "np", ".", "inf", "\n", "best_test_rmse_ba", "=", "np", ".", "inf", "\n", "best_test_mae_ba", "=", "np", ".", "inf", "\n", "\n", "best_test_r_mse_ba", "=", "np", ".", "inf", "\n", "best_test_r_rmse_ba", "=", "np", ".", "inf", "\n", "best_test_r_mae_ba", "=", "np", ".", "inf", "\n", "best_test_t_mse_ba", "=", "np", ".", "inf", "\n", "best_test_t_rmse_ba", "=", "np", ".", "inf", "\n", "best_test_t_mae_ba", "=", "np", ".", "inf", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "# scheduler.step()", "\n", "        ", "train_loss", ",", "train_cycle_loss", ",", "train_mse_ab", ",", "train_mae_ab", ",", "train_mse_ba", ",", "train_mae_ba", ",", "train_rotations_ab", ",", "train_translations_ab", ",", "train_rotations_ab_pred", ",", "train_translations_ab_pred", ",", "train_rotations_ba", ",", "train_translations_ba", ",", "train_rotations_ba_pred", ",", "train_translations_ba_pred", ",", "train_eulers_ab", ",", "train_eulers_ba", "=", "train_one_epoch", "(", "args", ",", "net", ",", "train_loader", ",", "opt", ")", "\n", "\n", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_mae_ab", ",", "test_mse_ba", ",", "test_mae_ba", ",", "test_rotations_ab", ",", "test_translations_ab", ",", "test_rotations_ab_pred", ",", "test_translations_ab_pred", ",", "test_rotations_ba", ",", "test_translations_ba", ",", "test_rotations_ba_pred", ",", "test_translations_ba_pred", ",", "test_eulers_ab", ",", "test_eulers_ba", "=", "test_one_epoch", "(", "args", ",", "net", ",", "test_loader", ")", "\n", "\n", "train_rmse_ab", "=", "np", ".", "sqrt", "(", "train_mse_ab", ")", "\n", "test_rmse_ab", "=", "np", ".", "sqrt", "(", "test_mse_ab", ")", "\n", "\n", "train_rmse_ba", "=", "np", ".", "sqrt", "(", "train_mse_ba", ")", "\n", "test_rmse_ba", "=", "np", ".", "sqrt", "(", "test_mse_ba", ")", "\n", "\n", "train_rotations_ab_pred_euler", "=", "npmat2euler", "(", "train_rotations_ab_pred", ")", "\n", "train_r_mse_ab", "=", "np", ".", "mean", "(", "(", "train_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ab", ")", ")", "**", "2", ")", "\n", "train_r_rmse_ab", "=", "np", ".", "sqrt", "(", "train_r_mse_ab", ")", "\n", "train_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ab", ")", ")", ")", "\n", "train_t_mse_ab", "=", "np", ".", "mean", "(", "(", "train_translations_ab", "-", "train_translations_ab_pred", ")", "**", "2", ")", "\n", "train_t_rmse_ab", "=", "np", ".", "sqrt", "(", "train_t_mse_ab", ")", "\n", "train_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_translations_ab", "-", "train_translations_ab_pred", ")", ")", "\n", "\n", "train_rotations_ba_pred_euler", "=", "npmat2euler", "(", "train_rotations_ba_pred", ",", "'xyz'", ")", "\n", "train_r_mse_ba", "=", "np", ".", "mean", "(", "(", "train_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ba", ")", ")", "**", "2", ")", "\n", "train_r_rmse_ba", "=", "np", ".", "sqrt", "(", "train_r_mse_ba", ")", "\n", "train_r_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "train_eulers_ba", ")", ")", ")", "\n", "train_t_mse_ba", "=", "np", ".", "mean", "(", "(", "train_translations_ba", "-", "train_translations_ba_pred", ")", "**", "2", ")", "\n", "train_t_rmse_ba", "=", "np", ".", "sqrt", "(", "train_t_mse_ba", ")", "\n", "train_t_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "train_translations_ba", "-", "train_translations_ba_pred", ")", ")", "\n", "\n", "test_rotations_ab_pred_euler", "=", "npmat2euler", "(", "test_rotations_ab_pred", ")", "\n", "test_r_mse_ab", "=", "np", ".", "mean", "(", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ab", "=", "np", ".", "sqrt", "(", "test_r_mse_ab", ")", "\n", "test_r_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ab_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ab", ")", ")", ")", "\n", "test_t_mse_ab", "=", "np", ".", "mean", "(", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ab", "=", "np", ".", "sqrt", "(", "test_t_mse_ab", ")", "\n", "test_t_mae_ab", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ab", "-", "test_translations_ab_pred", ")", ")", "\n", "\n", "test_rotations_ba_pred_euler", "=", "npmat2euler", "(", "test_rotations_ba_pred", ",", "'xyz'", ")", "\n", "test_r_mse_ba", "=", "np", ".", "mean", "(", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", "**", "2", ")", "\n", "test_r_rmse_ba", "=", "np", ".", "sqrt", "(", "test_r_mse_ba", ")", "\n", "test_r_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_rotations_ba_pred_euler", "-", "np", ".", "degrees", "(", "test_eulers_ba", ")", ")", ")", "\n", "test_t_mse_ba", "=", "np", ".", "mean", "(", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", "**", "2", ")", "\n", "test_t_rmse_ba", "=", "np", ".", "sqrt", "(", "test_t_mse_ba", ")", "\n", "test_t_mae_ba", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "test_translations_ba", "-", "test_translations_ba_pred", ")", ")", "\n", "\n", "if", "best_test_loss", ">=", "test_loss", ":", "\n", "            ", "best_test_loss", "=", "test_loss", "\n", "best_test_cycle_loss", "=", "test_cycle_loss", "\n", "\n", "best_test_mse_ab", "=", "test_mse_ab", "\n", "best_test_rmse_ab", "=", "test_rmse_ab", "\n", "best_test_mae_ab", "=", "test_mae_ab", "\n", "\n", "best_test_r_mse_ab", "=", "test_r_mse_ab", "\n", "best_test_r_rmse_ab", "=", "test_r_rmse_ab", "\n", "best_test_r_mae_ab", "=", "test_r_mae_ab", "\n", "\n", "best_test_t_mse_ab", "=", "test_t_mse_ab", "\n", "best_test_t_rmse_ab", "=", "test_t_rmse_ab", "\n", "best_test_t_mae_ab", "=", "test_t_mae_ab", "\n", "\n", "best_test_mse_ba", "=", "test_mse_ba", "\n", "best_test_rmse_ba", "=", "test_rmse_ba", "\n", "best_test_mae_ba", "=", "test_mae_ba", "\n", "\n", "best_test_r_mse_ba", "=", "test_r_mse_ba", "\n", "best_test_r_rmse_ba", "=", "test_r_rmse_ba", "\n", "best_test_r_mae_ba", "=", "test_r_mae_ba", "\n", "\n", "best_test_t_mse_ba", "=", "test_t_mse_ba", "\n", "best_test_t_rmse_ba", "=", "test_t_rmse_ba", "\n", "best_test_t_mae_ba", "=", "test_t_mae_ba", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "module", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.best.t7'", "%", "args", ".", "exp_name", ")", "\n", "", "else", ":", "\n", "                ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.best.t7'", "%", "args", ".", "exp_name", ")", "\n", "\n", "", "", "scheduler", ".", "step", "(", "best_test_loss", ")", "\n", "lr", "=", "opt", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "if", "lr", "<=", "0.0000011", ":", "\n", "            ", "break", "\n", "", "textio", ".", "cprint", "(", "'==TRAIN=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "\n", "'EPOCH:: %d, Loss: %f, Cycle Loss:, %f,lr: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "train_loss", ",", "train_cycle_loss", ",", "lr", ",", "train_mse_ab", ",", "train_rmse_ab", ",", "train_mae_ab", ",", "train_r_mse_ab", ",", "\n", "train_r_rmse_ab", ",", "train_r_mae_ab", ",", "train_t_mse_ab", ",", "train_t_rmse_ab", ",", "train_t_mae_ab", ")", ")", "\n", "if", "args", ".", "cycle", ":", "\n", "            ", "textio", ".", "cprint", "(", "'B--------->A'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "\n", "epoch", ",", "train_loss", ",", "train_mse_ba", ",", "train_rmse_ba", ",", "train_mae_ba", ",", "train_r_mse_ba", ",", "\n", "train_r_rmse_ba", ",", "\n", "train_r_mae_ba", ",", "train_t_mse_ba", ",", "train_t_rmse_ba", ",", "train_t_mae_ba", ")", ")", "\n", "\n", "", "textio", ".", "cprint", "(", "'==TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, Cycle Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "test_loss", ",", "test_cycle_loss", ",", "test_mse_ab", ",", "test_rmse_ab", ",", "test_mae_ab", ",", "test_r_mse_ab", ",", "\n", "test_r_rmse_ab", ",", "test_r_mae_ab", ",", "test_t_mse_ab", ",", "test_t_rmse_ab", ",", "test_t_mae_ab", ")", ")", "\n", "if", "args", ".", "cycle", ":", "\n", "            ", "textio", ".", "cprint", "(", "'B--------->A'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "test_loss", ",", "test_mse_ba", ",", "test_rmse_ba", ",", "test_mae_ba", ",", "test_r_mse_ba", ",", "test_r_rmse_ba", ",", "\n", "test_r_mae_ba", ",", "test_t_mse_ba", ",", "test_t_rmse_ba", ",", "test_t_mae_ba", ")", ")", "\n", "\n", "", "textio", ".", "cprint", "(", "'==BEST TEST=='", ")", "\n", "textio", ".", "cprint", "(", "'A--------->B'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, Cycle Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "best_test_loss", ",", "best_test_cycle_loss", ",", "best_test_mse_ab", ",", "best_test_rmse_ab", ",", "\n", "best_test_mae_ab", ",", "best_test_r_mse_ab", ",", "best_test_r_rmse_ab", ",", "\n", "best_test_r_mae_ab", ",", "best_test_t_mse_ab", ",", "best_test_t_rmse_ab", ",", "best_test_t_mae_ab", ")", ")", "\n", "if", "args", ".", "cycle", ":", "\n", "            ", "textio", ".", "cprint", "(", "'B--------->A'", ")", "\n", "textio", ".", "cprint", "(", "'EPOCH:: %d, Loss: %f, MSE: %f, RMSE: %f, MAE: %f, rot_MSE: %f, rot_RMSE: %f, '", "\n", "'rot_MAE: %f, trans_MSE: %f, trans_RMSE: %f, trans_MAE: %f'", "\n", "%", "(", "epoch", ",", "best_test_loss", ",", "best_test_mse_ba", ",", "best_test_rmse_ba", ",", "best_test_mae_ba", ",", "\n", "best_test_r_mse_ba", ",", "best_test_r_rmse_ba", ",", "\n", "best_test_r_mae_ba", ",", "best_test_t_mse_ba", ",", "best_test_t_rmse_ba", ",", "best_test_t_mae_ba", ")", ")", "\n", "\n", "", "boardio", ".", "add_scalar", "(", "'A->B/train/loss'", ",", "train_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/MSE'", ",", "train_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/RMSE'", ",", "train_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/MAE'", ",", "train_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/rotation/MSE'", ",", "train_r_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/rotation/RMSE'", ",", "train_r_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/rotation/MAE'", ",", "train_r_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/translation/MSE'", ",", "train_t_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/translation/RMSE'", ",", "train_t_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/train/translation/MAE'", ",", "train_t_mae_ab", ",", "epoch", ")", "\n", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/loss'", ",", "train_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/MSE'", ",", "train_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/RMSE'", ",", "train_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/MAE'", ",", "train_mae_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/rotation/MSE'", ",", "train_r_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/rotation/RMSE'", ",", "train_r_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/rotation/MAE'", ",", "train_r_mae_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/translation/MSE'", ",", "train_t_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/translation/RMSE'", ",", "train_t_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/train/translation/MAE'", ",", "train_t_mae_ba", ",", "epoch", ")", "\n", "\n", "############TEST", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/loss'", ",", "test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/MSE'", ",", "test_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/RMSE'", ",", "test_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/MAE'", ",", "test_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/rotation/MSE'", ",", "test_r_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/rotation/RMSE'", ",", "test_r_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/rotation/MAE'", ",", "test_r_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/translation/MSE'", ",", "test_t_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/translation/RMSE'", ",", "test_t_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/test/translation/MAE'", ",", "test_t_mae_ab", ",", "epoch", ")", "\n", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/loss'", ",", "test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/MSE'", ",", "test_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/RMSE'", ",", "test_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/MAE'", ",", "test_mae_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/rotation/MSE'", ",", "test_r_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/rotation/RMSE'", ",", "test_r_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/rotation/MAE'", ",", "test_r_mae_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/translation/MSE'", ",", "test_t_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/translation/RMSE'", ",", "test_t_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/test/translation/MAE'", ",", "test_t_mae_ba", ",", "epoch", ")", "\n", "\n", "############BEST TEST", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/loss'", ",", "best_test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/MSE'", ",", "best_test_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/RMSE'", ",", "best_test_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/MAE'", ",", "best_test_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/rotation/MSE'", ",", "best_test_r_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/rotation/RMSE'", ",", "best_test_r_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/rotation/MAE'", ",", "best_test_r_mae_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/translation/MSE'", ",", "best_test_t_mse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/translation/RMSE'", ",", "best_test_t_rmse_ab", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'A->B/best_test/translation/MAE'", ",", "best_test_t_mae_ab", ",", "epoch", ")", "\n", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/loss'", ",", "best_test_loss", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/MSE'", ",", "best_test_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/RMSE'", ",", "best_test_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/MAE'", ",", "best_test_mae_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/rotation/MSE'", ",", "best_test_r_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/rotation/RMSE'", ",", "best_test_r_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/rotation/MAE'", ",", "best_test_r_mae_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/translation/MSE'", ",", "best_test_t_mse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/translation/RMSE'", ",", "best_test_t_rmse_ba", ",", "epoch", ")", "\n", "boardio", ".", "add_scalar", "(", "'B->A/best_test/translation/MAE'", ",", "best_test_t_mae_ba", ",", "epoch", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "torch", ".", "save", "(", "net", ".", "module", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.%d.t7'", "%", "(", "args", ".", "exp_name", ",", "epoch", ")", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "save", "(", "net", ".", "state_dict", "(", ")", ",", "'checkpoints/%s/models/model.%d.t7'", "%", "(", "args", ".", "exp_name", ",", "epoch", ")", ")", "\n", "", "gc", ".", "collect", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.icp.best_fit_transform": [[10, 52], ["numpy.mean", "numpy.mean", "numpy.dot", "numpy.linalg.svd", "numpy.dot", "numpy.identity", "numpy.linalg.det", "numpy.dot", "numpy.dot"], "function", ["None"], ["def", "best_fit_transform", "(", "A", ",", "B", ")", ":", "\n", "    ", "'''\n    Calculates the least-squares best-fit transform that maps corresponding points A to B in m spatial dimensions\n    Input:\n      A: Nxm numpy array of corresponding points\n      B: Nxm numpy array of corresponding points\n    Returns:\n      T: (m+1)x(m+1) homogeneous transformation matrix that maps A on to B\n      R: mxm rotation matrix\n      t: mx1 translation vector\n    '''", "\n", "\n", "assert", "A", ".", "shape", "==", "B", ".", "shape", "\n", "\n", "# get number of dimensions", "\n", "m", "=", "A", ".", "shape", "[", "1", "]", "\n", "\n", "# translate points to their centroids", "\n", "centroid_A", "=", "np", ".", "mean", "(", "A", ",", "axis", "=", "0", ")", "\n", "centroid_B", "=", "np", ".", "mean", "(", "B", ",", "axis", "=", "0", ")", "\n", "AA", "=", "A", "-", "centroid_A", "\n", "BB", "=", "B", "-", "centroid_B", "\n", "\n", "# rotation matrix", "\n", "H", "=", "np", ".", "dot", "(", "AA", ".", "T", ",", "BB", ")", "\n", "U", ",", "S", ",", "Vt", "=", "np", ".", "linalg", ".", "svd", "(", "H", ")", "\n", "R", "=", "np", ".", "dot", "(", "Vt", ".", "T", ",", "U", ".", "T", ")", "\n", "\n", "# special reflection case", "\n", "if", "np", ".", "linalg", ".", "det", "(", "R", ")", "<", "0", ":", "\n", "        ", "Vt", "[", "m", "-", "1", ",", ":", "]", "*=", "-", "1", "\n", "R", "=", "np", ".", "dot", "(", "Vt", ".", "T", ",", "U", ".", "T", ")", "\n", "\n", "# translation", "\n", "", "t", "=", "centroid_B", ".", "T", "-", "np", ".", "dot", "(", "R", ",", "centroid_A", ".", "T", ")", "\n", "\n", "# homogeneous transformation", "\n", "T", "=", "np", ".", "identity", "(", "m", "+", "1", ")", "\n", "T", "[", ":", "m", ",", ":", "m", "]", "=", "R", "\n", "T", "[", ":", "m", ",", "m", "]", "=", "t", "\n", "\n", "return", "T", ",", "R", ",", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.icp.nearest_neighbor": [[54, 71], ["sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "sklearn.neighbors.NearestNeighbors.kneighbors", "distances.ravel", "indices.ravel"], "function", ["None"], ["", "def", "nearest_neighbor", "(", "src", ",", "dst", ")", ":", "\n", "    ", "'''\n    Find the nearest (Euclidean) neighbor in dst for each point in src\n    Input:\n        src: Nxm array of points\n        dst: Nxm array of points\n    Output:\n        distances: Euclidean distances of the nearest neighbor\n        indices: dst indices of the nearest neighbor\n    '''", "\n", "\n", "assert", "src", ".", "shape", "==", "dst", ".", "shape", "\n", "\n", "neigh", "=", "NearestNeighbors", "(", "n_neighbors", "=", "1", ")", "\n", "neigh", ".", "fit", "(", "dst", ")", "\n", "distances", ",", "indices", "=", "neigh", ".", "kneighbors", "(", "src", ",", "return_distance", "=", "True", ")", "\n", "return", "distances", ".", "ravel", "(", ")", ",", "indices", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.icp.icp": [[73, 125], ["numpy.ones", "numpy.ones", "numpy.copy", "numpy.copy", "range", "icp.best_fit_transform", "numpy.dot", "icp.nearest_neighbor", "icp.best_fit_transform", "numpy.dot", "numpy.mean", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.icp.best_fit_transform", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.nearest_neighbor", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.icp.best_fit_transform"], ["", "def", "icp", "(", "A", ",", "B", ",", "init_pose", "=", "None", ",", "max_iterations", "=", "100", ",", "tolerance", "=", "0.001", ")", ":", "\n", "    ", "'''\n    The Iterative Closest Point method: finds best-fit transform that maps points A on to points B\n    Input:\n        A: Nxm numpy array of source mD points\n        B: Nxm numpy array of destination mD point\n        init_pose: (m+1)x(m+1) homogeneous transformation\n        max_iterations: exit algorithm after max_iterations\n        tolerance: convergence criteria\n    Output:\n        T: final homogeneous transformation that maps A on to B\n        distances: Euclidean distances (errors) of the nearest neighbor\n        i: number of iterations to converge\n    '''", "\n", "\n", "assert", "A", ".", "shape", "==", "B", ".", "shape", "\n", "\n", "# get number of dimensions", "\n", "m", "=", "A", ".", "shape", "[", "1", "]", "\n", "\n", "# make points homogeneous, copy them to maintain the originals", "\n", "src", "=", "np", ".", "ones", "(", "(", "m", "+", "1", ",", "A", ".", "shape", "[", "0", "]", ")", ")", "\n", "dst", "=", "np", ".", "ones", "(", "(", "m", "+", "1", ",", "B", ".", "shape", "[", "0", "]", ")", ")", "\n", "src", "[", ":", "m", ",", ":", "]", "=", "np", ".", "copy", "(", "A", ".", "T", ")", "\n", "dst", "[", ":", "m", ",", ":", "]", "=", "np", ".", "copy", "(", "B", ".", "T", ")", "\n", "\n", "# apply the initial pose estimation", "\n", "if", "init_pose", "is", "not", "None", ":", "\n", "        ", "src", "=", "np", ".", "dot", "(", "init_pose", ",", "src", ")", "\n", "\n", "", "prev_error", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "max_iterations", ")", ":", "\n", "# find the nearest neighbors between the current source and destination points", "\n", "        ", "distances", ",", "indices", "=", "nearest_neighbor", "(", "src", "[", ":", "m", ",", ":", "]", ".", "T", ",", "dst", "[", ":", "m", ",", ":", "]", ".", "T", ")", "\n", "\n", "# compute the transformation between the current source and nearest destination points", "\n", "T", ",", "_", ",", "_", "=", "best_fit_transform", "(", "src", "[", ":", "m", ",", ":", "]", ".", "T", ",", "dst", "[", ":", "m", ",", "indices", "]", ".", "T", ")", "\n", "\n", "# update the current source", "\n", "src", "=", "np", ".", "dot", "(", "T", ",", "src", ")", "\n", "\n", "# check error", "\n", "mean_error", "=", "np", ".", "mean", "(", "distances", ")", "\n", "if", "np", ".", "abs", "(", "prev_error", "-", "mean_error", ")", "<", "tolerance", ":", "\n", "            ", "break", "\n", "", "prev_error", "=", "mean_error", "\n", "\n", "# calculate final transformation", "\n", "", "T", ",", "_", ",", "_", "=", "best_fit_transform", "(", "A", ",", "src", "[", ":", "m", ",", ":", "]", ".", "T", ")", "\n", "\n", "return", "T", ",", "distances", ",", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.icp.rotation_matrix": [[127, 135], ["numpy.cos", "numpy.array", "numpy.sqrt", "numpy.sin", "numpy.dot"], "function", ["None"], ["", "def", "rotation_matrix", "(", "axis", ",", "theta", ")", ":", "\n", "    ", "axis", "=", "axis", "/", "np", ".", "sqrt", "(", "np", ".", "dot", "(", "axis", ",", "axis", ")", ")", "\n", "a", "=", "np", ".", "cos", "(", "theta", "/", "2.", ")", "\n", "b", ",", "c", ",", "d", "=", "-", "axis", "*", "np", ".", "sin", "(", "theta", "/", "2.", ")", "\n", "\n", "return", "np", ".", "array", "(", "[", "[", "a", "*", "a", "+", "b", "*", "b", "-", "c", "*", "c", "-", "d", "*", "d", ",", "2", "*", "(", "b", "*", "c", "-", "a", "*", "d", ")", ",", "2", "*", "(", "b", "*", "d", "+", "a", "*", "c", ")", "]", ",", "\n", "[", "2", "*", "(", "b", "*", "c", "+", "a", "*", "d", ")", ",", "a", "*", "a", "+", "c", "*", "c", "-", "b", "*", "b", "-", "d", "*", "d", ",", "2", "*", "(", "c", "*", "d", "-", "a", "*", "b", ")", "]", ",", "\n", "[", "2", "*", "(", "b", "*", "d", "-", "a", "*", "c", ")", ",", "2", "*", "(", "c", "*", "d", "+", "a", "*", "b", ")", ",", "a", "*", "a", "+", "d", "*", "d", "-", "b", "*", "b", "-", "c", "*", "c", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.__init__": [[78, 80], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "f", "=", "open", "(", "path", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint": [[81, 88], ["print", "initPara.IOStream.f.write", "initPara.IOStream.f.flush"], "methods", ["None"], ["", "def", "cprint", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"print to cmd and save to a txt file at the same time\n\n        \"\"\"", "\n", "print", "(", "text", ")", "\n", "self", ".", "f", ".", "write", "(", "text", "+", "'\\n'", ")", "\n", "self", ".", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.close": [[89, 91], ["initPara.IOStream.f.close"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.delModule": [[25, 36], ["torch.load", "torch.load", "OrderedDict", "torch.load.items"], "function", ["None"], ["def", "delModule", "(", "path", ")", ":", "\n", "    ", "state_dict", "=", "torch", ".", "load", "(", "path", ")", "\n", "from", "collections", "import", "OrderedDict", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "[", "0", ":", "6", "]", "==", "'module'", ":", "\n", "            ", "name", "=", "k", "[", "7", ":", "]", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "new_state_dict", "[", "k", "]", "=", "v", "\n", "", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.initNet": [[38, 66], ["hasattr", "hasattr", "print", "lpdNet.modules", "print", "range", "range", "isinstance", "torch.init.eye_", "torch.init.constant_", "torch.init.eye_", "torch.init.constant_", "torch.init.kaiming_uniform_", "isinstance", "torch.init.kaiming_uniform_", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["", "def", "initNet", "(", "vcrnet", ")", ":", "\n", "    ", "lpdNet", "=", "vcrnet", ".", "emb_nn", "\n", "if", "hasattr", "(", "lpdNet", ",", "'convDG1'", ")", ":", "\n", "        ", "print", "(", "'init lpdNet'", ")", "\n", "for", "m", "in", "lpdNet", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "a", "=", "lpdNet", ".", "negative_slope", ",", "mode", "=", "\"fan_in\"", ",", "nonlinearity", "=", "\"leaky_relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_uniform_", "(", "m", ".", "weight", ",", "a", "=", "lpdNet", ".", "negative_slope", ",", "mode", "=", "\"fan_in\"", ",", "nonlinearity", "=", "\"leaky_relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "1e-3", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "attHead", "=", "vcrnet", ".", "head", "\n", "if", "hasattr", "(", "attHead", ",", "'linears_emb'", ")", ":", "\n", "        ", "print", "(", "'init attHead'", ")", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "nn", ".", "init", ".", "eye_", "(", "attHead", ".", "linears_emb", "[", "i", "]", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "attHead", ".", "linears_emb", "[", "i", "]", ".", "bias", ",", "0", ")", "\n", "", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "nn", ".", "init", ".", "eye_", "(", "attHead", ".", "linears_3d", "[", "i", "]", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "attHead", ".", "linears_3d", "[", "i", "]", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.saveNetAsExcel": [[68, 75], ["list", "pandas.DataFrame", "pandas.ExcelWriter", "pd.DataFrame.to_excel", "pd.ExcelWriter.save", "list.named_parameters"], "function", ["None"], ["", "", "", "def", "saveNetAsExcel", "(", "net", ")", ":", "\n", "    ", "net", "=", "list", "(", "net", ".", "named_parameters", "(", ")", ")", "\n", "net_df", "=", "pd", ".", "DataFrame", "(", "net", ")", "\n", "# create and writer pd.DataFrame to excel", "\n", "writer", "=", "pd", ".", "ExcelWriter", "(", "'Net.xlsx'", ")", "\n", "net_df", ".", "to_excel", "(", "writer", ",", "'page_1'", ",", "float_format", "=", "'%.5f'", ")", "\n", "writer", ".", "save", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara._init_": [[93, 126], ["sympy.Symbol", "numpy.asarray", "range", "os.path.exists", "os.makedirs", "datetime.datetime.now().strftime", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "sympy.solve", "socket.gethostname", "datetime.datetime.now", "type"], "function", ["None"], ["", "", "def", "_init_", "(", "args", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'checkpoints'", ")", "\n", "", "args", ".", "exp_name", "=", "args", ".", "model", "+", "'-'", "+", "args", ".", "emb_nn", "+", "'-'", "+", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%d-%H-%M-%S\"", ")", "\n", "if", "args", ".", "eval", ":", "\n", "        ", "subDir", "=", "'test/'", "\n", "", "else", ":", "\n", "        ", "subDir", "=", "'train/'", "\n", "", "args", ".", "exp_name", "=", "args", ".", "exp_name", "+", "'-'", "+", "socket", ".", "gethostname", "(", ")", "[", ":", "3", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints/'", "+", "subDir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'checkpoints/'", "+", "subDir", ")", "\n", "", "args", ".", "exp_name", "=", "subDir", "+", "args", ".", "exp_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints/'", "+", "args", ".", "exp_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'checkpoints/'", "+", "args", ".", "exp_name", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/'", "+", "'models'", ")", "\n", "\n", "# when reserve is 0.75", "\n", "# if we cut (1-reserve) percent of 2 pcls, the real overlapping of 2 pcls is between 50% and 100% relative to origin whole pcl.", "\n", "# so we solve reserve to make the expectation of real overlapping be overlap which we input to args", "\n", "# at last overlap2 represents overlapping relative to cut pcl.", "\n", "# when overlap is 0.575, reserve is 0.75", "\n", "", "n", "=", "sp", ".", "Symbol", "(", "'n'", ")", "\n", "a", "=", "(", "n", "-", "3.0", "/", "2.0", "*", "n", "**", "2", ")", "*", "(", "1.0", "-", "2.0", "*", "n", ")", "\n", "b", "=", "0.5", "*", "(", "n", "-", "1.0", ")", "**", "2", "*", "n", "-", "1.0", "/", "6.0", "*", "(", "1.0", "-", "n", ")", "**", "3", "+", "1.0", "/", "6.0", "*", "(", "1.0", "-", "2.0", "*", "n", ")", "**", "3", "\n", "f", "=", "(", "(", "a", "+", "b", ")", "*", "2.0", "+", "(", "1.0", "-", "2.0", "*", "n", ")", "**", "3", ")", "/", "(", "1.0", "-", "n", ")", "**", "2", "-", "args", ".", "overlap", "\n", "re", "=", "np", ".", "asarray", "(", "sp", ".", "solve", "(", "f", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "if", "type", "(", "re", "[", "i", "]", ")", "==", "spFloat", "and", "re", "[", "i", "]", "<=", "0.5", "and", "re", "[", "i", "]", ">=", "0.0", ":", "\n", "            ", "args", ".", "reserve", "=", "1", "-", "re", "[", "i", "]", "\n", "break", "\n", "", "", "args", ".", "overlap2", "=", "args", ".", "overlap", "/", "args", ".", "reserve", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.para": [[128, 264], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "initPara._init_", "tensorboardX.SummaryWriter", "initPara.IOStream", "initPara.IOStream.cprint", "sum", "initPara.IOStream.cprint", "torch.DataParallel", "initPara.IOStream.cprint", "str", "torch.cuda.is_available", "torch.cuda.is_available", "initPara.IOStream.cprint", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.dcp_model.DCP().cuda", "initPara.IOStream.cprint", "os.path.exists", "initPara.IOStream.cprint", "initPara.IOStream.cprint", "ICP().cuda.load_state_dict", "util.data.ModelNet40", "util.data.ModelNet40", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Exception", "model.lpdnet_model.LPD().cuda", "torch.load", "torch.load", "numpy.prod", "ICP().cuda._get_name", "torch.cuda.device_count", "torch.cuda.device_count", "util.data.KITTI", "util.data.KITTI", "model.dcp_model.DCP", "model.vcrnet_model.VCRNet().cuda", "initPara.initNet", "list", "ICP().cuda.parameters", "model.lpdnet_model.LPD", "model.icp_model.ICP().cuda", "Exception", "p.size", "model.vcrnet_model.VCRNet", "model.icp_model.ICP"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara._init_", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.cprint", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.initNet"], ["", "def", "para", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Point Cloud Registration'", ")", "\n", "parser", ".", "add_argument", "(", "'--iter'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'--overlap'", ",", "type", "=", "float", ",", "default", "=", "0.75", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'vcrnet'", ",", "\n", "choices", "=", "[", "'dcp'", ",", "'lpd'", ",", "'vcrnet'", ",", "'icp'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--gaussian_noise'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Wheter to add gaussian noise'", ")", "\n", "parser", ".", "add_argument", "(", "'--unseen'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Wheter to test on unseen category'", ")", "\n", "parser", ".", "add_argument", "(", "'--factor'", ",", "type", "=", "float", ",", "default", "=", "4", ",", "\n", "help", "=", "'Divided factor for rotations'", ")", "\n", "parser", ".", "add_argument", "(", "'--emb_nn'", ",", "type", "=", "str", ",", "default", "=", "'lpdnet'", ",", "\n", "choices", "=", "[", "'pointnet'", ",", "'dgcnn'", ",", "'lpdnet'", ",", "'lpdnetorigin'", "]", ",", "\n", "help", "=", "'Embedding nn to use, [pointnet, dgcnn, lpdnet]'", ")", "\n", "parser", ".", "add_argument", "(", "'--vcp_nn'", ",", "type", "=", "str", ",", "default", "=", "'topK'", ",", "\n", "choices", "=", "[", "'topK'", ",", "'att'", ",", "'dist'", "]", ",", "\n", "help", "=", "'Strategy to generate virtual corresponding points, [topK, att, dist]'", ")", "\n", "parser", ".", "add_argument", "(", "'--emb_dims'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "\n", "help", "=", "'Dimension of embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "metavar", "=", "'batch_size'", ",", "\n", "help", "=", "'Size of batch)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "24", ",", "metavar", "=", "'batch_size'", ",", "\n", "help", "=", "'Size of batch)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.001, 0.1 if using sgd)'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_points'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "\n", "help", "=", "'Num of points to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--max_iterations'", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "'--ff_dims'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "\n", "help", "=", "'Num of dimensions of fc in transformer'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'evaluate the model'", ")", "\n", "parser", ".", "add_argument", "(", "'--partial'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'use part of the point cloud'", ")", "\n", "parser", ".", "add_argument", "(", "'--t3d'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'3d tranform '", ")", "\n", "parser", ".", "add_argument", "(", "'--tfea'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'feature transform'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss'", ",", "type", "=", "str", ",", "default", "=", "'point'", ",", "\n", "choices", "=", "[", "'pose'", ",", "'point'", "]", ",", "\n", "help", "=", "'Name of the experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--cycle'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Whether to use cycle consistency'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Pretrained model path'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'modelnet40'", ",", "\n", "choices", "=", "[", "'modelnet40'", ",", "'kitti'", "]", ",", "\n", "help", "=", "'dataset to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_blocks'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Num of blocks of encoder&decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_heads'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'Num of heads in multiheadedattention'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "\n", "help", "=", "'Dropout ratio in transformer'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "\n", "help", "=", "'number of episode to train '", ")", "\n", "parser", ".", "add_argument", "(", "'--use_sgd'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Use SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "'SGD momentum (default: 0.9)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1234", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'exp'", ",", "\n", "help", "=", "'Name of the experiment'", ")", "\n", "parser", ".", "add_argument", "(", "'--pointer'", ",", "type", "=", "str", ",", "default", "=", "'transformer'", ",", "\n", "help", "=", "'Attention-based pointer generator to use, [identity, transformer]'", ")", "\n", "parser", ".", "add_argument", "(", "'--head'", ",", "type", "=", "str", ",", "default", "=", "'svd'", ",", "\n", "choices", "=", "[", "'mlp'", ",", "'svd'", ",", "]", ",", "\n", "help", "=", "'Head to use, [mlp, svd]'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_point_loss'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Use the L2 distance between the matched points for loss'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "args", "=", "_init_", "(", "args", ")", "\n", "boardio", "=", "SummaryWriter", "(", "log_dir", "=", "'checkpoints/'", "+", "args", ".", "exp_name", ")", "\n", "\n", "textio", "=", "IOStream", "(", "'checkpoints/'", "+", "args", ".", "exp_name", "+", "'/run.log'", ")", "\n", "textio", ".", "cprint", "(", "str", "(", "args", ")", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "textio", ".", "cprint", "(", "'no cuda detect!'", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'modelnet40'", ":", "\n", "        ", "train_loader", "=", "DataLoader", "(", "\n", "ModelNet40", "(", "args", "=", "args", ",", "partition", "=", "'train'", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "ModelNet40", "(", "args", "=", "args", ",", "partition", "=", "'test'", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'kitti'", ":", "\n", "        ", "train_loader", "=", "DataLoader", "(", "\n", "KITTI", "(", "args", "=", "args", ",", "partition", "=", "'train'", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "KITTI", "(", "args", "=", "args", ",", "partition", "=", "'test'", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"not implemented for the dataset: {}\"", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "'dcp'", ":", "\n", "        ", "net", "=", "DCP", "(", "args", ")", ".", "cuda", "(", ")", "\n", "", "elif", "args", ".", "model", "==", "'lpd'", ":", "\n", "        ", "net", "=", "LPD", "(", "args", ")", ".", "cuda", "(", ")", "\n", "", "elif", "args", ".", "model", "==", "'vcrnet'", ":", "\n", "        ", "net", "=", "VCRNet", "(", "args", ")", ".", "cuda", "(", ")", "\n", "initNet", "(", "net", ")", "\n", "", "elif", "args", ".", "model", "==", "'icp'", ":", "\n", "        ", "net", "=", "ICP", "(", "max_iterations", "=", "args", ".", "max_iterations", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'Not implemented for the model: {}'", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "\n", "", "if", "args", ".", "model_path", "==", "''", ":", "\n", "        ", "model_path", "=", "'checkpoints'", "+", "'/'", "+", "args", ".", "exp_name", "+", "'/models/model.best.t7'", "\n", "", "else", ":", "\n", "        ", "model_path", "=", "args", ".", "model_path", "\n", "textio", ".", "cprint", "(", "model_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "        ", "textio", ".", "cprint", "(", "\"can't find pretrained model\"", ")", "\n", "", "else", ":", "\n", "        ", "textio", ".", "cprint", "(", "\"load pretrained model\"", ")", "\n", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ",", "strict", "=", "False", ")", "\n", "\n", "", "para", "=", "sum", "(", "[", "np", ".", "prod", "(", "list", "(", "p", ".", "size", "(", ")", ")", ")", "for", "p", "in", "net", ".", "parameters", "(", ")", "]", ")", "\n", "\n", "textio", ".", "cprint", "(", "'Model {} : params: {:4f}M'", ".", "format", "(", "net", ".", "_get_name", "(", ")", ",", "para", "*", "4", "/", "1000", "/", "1000", ")", ")", "\n", "\n", "net", "=", "nn", ".", "DataParallel", "(", "net", ")", "\n", "textio", ".", "cprint", "(", "\"Let's use {} GPUs!\"", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "\n", "return", "args", ",", "net", ",", "train_loader", ",", "test_loader", ",", "boardio", ",", "textio", "\n", "", ""]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.KITTI.__init__": [[148, 156], ["print", "data.load_data"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.load_data"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "reserve", "=", "args", ".", "reserve", "\n", "self", ".", "num_points", "=", "args", ".", "num_points", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "gaussian_noise", "=", "args", ".", "gaussian_noise", "\n", "self", ".", "partial", "=", "args", ".", "partial", "\n", "print", "(", "'Load KITTI Dataset'", ")", "\n", "self", ".", "all_idx", ",", "self", ".", "rotations", ",", "self", ".", "translations", "=", "load_data", "(", "partition", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.KITTI.__getitem__": [[157, 219], ["data.getPointCloud", "numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.array", "numpy.array", "numpy.array", "numpy.array.dot().dot", "scipy.spatial.transform.Rotation.from_euler", "numpy.asarray", "numpy.random.seed", "numpy.array", "numpy.array", "R_ba.dot", "numpy.random.permutation", "numpy.expand_dims", "data.nearest_neighbor", "numpy.random.permutation", "data.nearest_neighbor", "numpy.random.permutation", "nearest_neighbor.astype", "nearest_neighbor.astype", "np.array.dot().dot.astype", "numpy.array.astype", "R_ba.astype", "translation_ba.astype", "numpy.asarray.astype", "euler_ba.astype", "numpy.array.dot", "scipy.spatial.transform.Rotation.from_euler.apply", "int", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.getPointCloud", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.nearest_neighbor", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.nearest_neighbor"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "pointcloud", "=", "getPointCloud", "(", "self", ".", "all_idx", "[", "item", ",", "0", "]", "+", "11", ",", "self", ".", "all_idx", "[", "item", ",", "1", "]", ",", "self", ".", "all_idx", "[", "item", ",", "2", "]", ",", "\n", "num_points", "=", "int", "(", "self", ".", "num_points", "/", "self", ".", "reserve", ")", "+", "1", ")", "\n", "zoom", "=", "True", "\n", "if", "zoom", ":", "\n", "            ", "pointcloud", "=", "pointcloud", "/", "30.0", "\n", "\n", "", "if", "self", ".", "partition", "!=", "'train'", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "item", ")", "\n", "\n", "", "anglex", "=", "(", "np", ".", "random", ".", "uniform", "(", ")", "-", "0.5", ")", "*", "2", "*", "5.0", "/", "180.0", "*", "np", ".", "pi", "\n", "angley", "=", "(", "np", ".", "random", ".", "uniform", "(", ")", "-", "0.5", ")", "*", "2", "*", "5.0", "/", "180.0", "*", "np", ".", "pi", "\n", "anglez", "=", "(", "np", ".", "random", ".", "uniform", "(", ")", "-", "0.5", ")", "*", "2", "*", "30.0", "/", "180.0", "*", "np", ".", "pi", "\n", "\n", "cosx", "=", "np", ".", "cos", "(", "anglex", ")", ";", "\n", "cosy", "=", "np", ".", "cos", "(", "angley", ")", ";", "\n", "cosz", "=", "np", ".", "cos", "(", "anglez", ")", "\n", "sinx", "=", "np", ".", "sin", "(", "anglex", ")", ";", "\n", "siny", "=", "np", ".", "sin", "(", "angley", ")", ";", "\n", "sinz", "=", "np", ".", "sin", "(", "anglez", ")", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cosx", ",", "-", "sinx", "]", ",", "\n", "[", "0", ",", "sinx", ",", "cosx", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "cosy", ",", "0", ",", "siny", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "siny", ",", "0", ",", "cosy", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "cosz", ",", "-", "sinz", ",", "0", "]", ",", "\n", "[", "sinz", ",", "cosz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R_ab", "=", "Rx", ".", "dot", "(", "Ry", ")", ".", "dot", "(", "Rz", ")", "\n", "R_ba", "=", "R_ab", ".", "T", "\n", "\n", "if", "zoom", ":", "\n", "            ", "translation_ab", "=", "np", ".", "array", "(", "\n", "[", "np", ".", "random", ".", "uniform", "(", "-", "5.0", ",", "5.0", ")", "/", "30.0", ",", "np", ".", "random", ".", "uniform", "(", "-", "5.0", ",", "5.0", ")", "/", "30.0", ",", "\n", "np", ".", "random", ".", "uniform", "(", "-", "1.0", ",", "1.0", ")", "/", "30.0", "]", ")", "\n", "", "else", ":", "\n", "            ", "translation_ab", "=", "np", ".", "array", "(", "\n", "[", "np", ".", "random", ".", "uniform", "(", "-", "5.0", ",", "5.0", ")", ",", "np", ".", "random", ".", "uniform", "(", "-", "5.0", ",", "5.0", ")", ",", "np", ".", "random", ".", "uniform", "(", "-", "1.0", ",", "1.0", ")", "]", ")", "\n", "\n", "", "translation_ba", "=", "-", "R_ba", ".", "dot", "(", "translation_ab", ")", "\n", "\n", "pointcloud1", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud", ")", ".", "T", "\n", "rotation_ab", "=", "Rotation", ".", "from_euler", "(", "'zyx'", ",", "[", "anglez", ",", "angley", ",", "anglex", "]", ")", "\n", "pointcloud2", "=", "rotation_ab", ".", "apply", "(", "pointcloud1", ".", "T", ")", ".", "T", "+", "np", ".", "expand_dims", "(", "translation_ab", ",", "axis", "=", "1", ")", "\n", "\n", "euler_ab", "=", "np", ".", "asarray", "(", "[", "anglez", ",", "angley", ",", "anglex", "]", ")", "\n", "euler_ba", "=", "-", "euler_ab", "[", ":", ":", "-", "1", "]", "\n", "\n", "if", "self", ".", "partial", ":", "\n", "            ", "pointcloud1", "=", "nearest_neighbor", "(", "pointcloud1", ",", "self", ".", "reserve", ")", "\n", "", "pointcloud1", "=", "pointcloud1", "[", ":", ",", ":", "self", ".", "num_points", "]", "\n", "pointcloud1", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud1", ".", "T", ")", ".", "T", "\n", "\n", "if", "self", ".", "partial", ":", "\n", "            ", "pointcloud2", "=", "nearest_neighbor", "(", "pointcloud2", ",", "self", ".", "reserve", ")", "\n", "", "pointcloud2", "=", "pointcloud2", "[", ":", ",", ":", "self", ".", "num_points", "]", "\n", "pointcloud2", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud2", ".", "T", ")", ".", "T", "\n", "\n", "return", "pointcloud1", ".", "astype", "(", "'float32'", ")", ",", "pointcloud2", ".", "astype", "(", "'float32'", ")", ",", "R_ab", ".", "astype", "(", "'float32'", ")", ",", "translation_ab", ".", "astype", "(", "'float32'", ")", ",", "R_ba", ".", "astype", "(", "'float32'", ")", ",", "translation_ba", ".", "astype", "(", "'float32'", ")", ",", "euler_ab", ".", "astype", "(", "'float32'", ")", ",", "euler_ba", ".", "astype", "(", "'float32'", ")", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.KITTI.__len__": [[220, 222], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "all_idx", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.ModelNet40.__init__": [[225, 246], ["print", "data.load_data", "data.ModelNet40.label.squeeze"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.load_data"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "args", ".", "dataset", "\n", "self", ".", "num_points", "=", "args", ".", "num_points", "\n", "self", ".", "partition", "=", "partition", "\n", "self", ".", "reserve", "=", "args", ".", "reserve", "\n", "self", ".", "gaussian_noise", "=", "args", ".", "gaussian_noise", "\n", "self", ".", "model", "=", "args", ".", "model", "\n", "self", ".", "factor", "=", "args", ".", "factor", "\n", "self", ".", "partial", "=", "args", ".", "partial", "\n", "print", "(", "'Load ModelNet40 Dataset'", ")", "\n", "self", ".", "data", ",", "self", ".", "label", "=", "load_data", "(", "partition", ",", "args", ")", "\n", "self", ".", "label", "=", "self", ".", "label", ".", "squeeze", "(", ")", "\n", "self", ".", "unseen", "=", "args", ".", "unseen", "\n", "if", "self", ".", "unseen", ":", "\n", "######## simulate testing on first 20 categories while training on last 20 categories", "\n", "            ", "if", "self", ".", "partition", "==", "'test'", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", ">=", "20", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", ">=", "20", "]", "\n", "", "elif", "self", ".", "partition", "==", "'train'", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "label", "<", "20", "]", "\n", "self", ".", "label", "=", "self", ".", "label", "[", "self", ".", "label", "<", "20", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.ModelNet40.__getitem__": [[247, 315], ["numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.array", "numpy.array", "numpy.array", "numpy.array.dot().dot", "scipy.spatial.transform.Rotation.from_euler", "numpy.asarray", "data.jitter_pointcloud", "numpy.random.seed", "numpy.array", "numpy.array", "R_ba.dot", "numpy.expand_dims", "numpy.concatenate", "nearest_neighbor.astype", "nearest_neighbor.astype", "np.array.dot().dot.astype", "numpy.array.astype", "R_ba.astype", "translation_ba.astype", "numpy.asarray.astype", "euler_ba.astype", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.array.dot", "numpy.random.permutation", "scipy.spatial.transform.Rotation.from_euler.apply", "numpy.random.permutation", "data.nearest_neighbor", "numpy.random.permutation", "data.nearest_neighbor", "numpy.random.permutation", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.jitter_pointcloud", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.nearest_neighbor", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.nearest_neighbor"], ["", "", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "label", "=", "0", "\n", "\n", "# [num,num_dim]", "\n", "pointcloud", "=", "self", ".", "data", "[", "item", "]", "\n", "\n", "if", "self", ".", "gaussian_noise", ":", "\n", "            ", "pointcloud", "=", "jitter_pointcloud", "(", "pointcloud", ")", "\n", "", "if", "self", ".", "partition", "!=", "'train'", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "item", ")", "\n", "\n", "", "anglex", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "np", ".", "pi", "/", "self", ".", "factor", "\n", "angley", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "np", ".", "pi", "/", "self", ".", "factor", "\n", "anglez", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "np", ".", "pi", "/", "self", ".", "factor", "\n", "\n", "cosx", "=", "np", ".", "cos", "(", "anglex", ")", "\n", "cosy", "=", "np", ".", "cos", "(", "angley", ")", "\n", "cosz", "=", "np", ".", "cos", "(", "anglez", ")", "\n", "sinx", "=", "np", ".", "sin", "(", "anglex", ")", "\n", "siny", "=", "np", ".", "sin", "(", "angley", ")", "\n", "sinz", "=", "np", ".", "sin", "(", "anglez", ")", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cosx", ",", "-", "sinx", "]", ",", "\n", "[", "0", ",", "sinx", ",", "cosx", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "cosy", ",", "0", ",", "siny", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "siny", ",", "0", ",", "cosy", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "cosz", ",", "-", "sinz", ",", "0", "]", ",", "\n", "[", "sinz", ",", "cosz", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R_ab", "=", "Rx", ".", "dot", "(", "Ry", ")", ".", "dot", "(", "Rz", ")", "\n", "R_ba", "=", "R_ab", ".", "T", "\n", "\n", "if", "self", ".", "partition", "==", "'train'", ":", "\n", "            ", "translation_ab", "=", "np", ".", "array", "(", "[", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", ",", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", ",", "\n", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "translation_ab", "=", "np", ".", "array", "(", "[", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", ",", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", ",", "\n", "np", ".", "random", ".", "uniform", "(", "-", "0.5", ",", "0.5", ")", "]", ")", "\n", "\n", "", "translation_ba", "=", "-", "R_ba", ".", "dot", "(", "translation_ab", ")", "\n", "\n", "pointcloud1", "=", "(", "(", "np", ".", "random", ".", "permutation", "(", "pointcloud", ")", ")", "[", ":", "self", ".", "num_points", "]", ")", ".", "T", "\n", "rotation_ab", "=", "Rotation", ".", "from_euler", "(", "'zyx'", ",", "[", "anglez", ",", "angley", ",", "anglex", "]", ")", "\n", "pointcloud2", "=", "rotation_ab", ".", "apply", "(", "pointcloud1", ".", "T", ")", ".", "T", "+", "np", ".", "expand_dims", "(", "translation_ab", ",", "axis", "=", "1", ")", "\n", "\n", "euler_ab", "=", "np", ".", "asarray", "(", "[", "anglez", ",", "angley", ",", "anglex", "]", ")", "\n", "\n", "euler_ba", "=", "-", "euler_ab", "[", ":", ":", "-", "1", "]", "\n", "\n", "if", "not", "self", ".", "model", "==", "'lpd'", ":", "\n", "            ", "pointcloud1", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud1", ".", "T", ")", ".", "T", "\n", "if", "self", ".", "partial", ":", "\n", "                ", "pointcloud1", "=", "nearest_neighbor", "(", "pointcloud1", ",", "self", ".", "reserve", ")", "\n", "", "pointcloud2", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud2", ".", "T", ")", ".", "T", "\n", "if", "self", ".", "partial", ":", "\n", "                ", "pointcloud2", "=", "nearest_neighbor", "(", "pointcloud2", ",", "self", ".", "reserve", ")", "\n", "", "", "else", ":", "\n", "# [3,num_points]", "\n", "            ", "pointcloud", "=", "np", ".", "concatenate", "(", "(", "pointcloud1", ",", "pointcloud2", ")", ",", "axis", "=", "0", ")", "\n", "pointcloud", "=", "np", ".", "random", ".", "permutation", "(", "pointcloud", ".", "T", ")", ".", "T", "\n", "pointcloud1", "=", "pointcloud", "[", "0", ":", "3", ",", ":", "]", "\n", "pointcloud2", "=", "pointcloud", "[", "3", ":", "6", ",", ":", "]", "\n", "\n", "# [3,num_points]", "\n", "", "return", "pointcloud1", ".", "astype", "(", "'float32'", ")", ",", "pointcloud2", ".", "astype", "(", "'float32'", ")", ",", "R_ab", ".", "astype", "(", "'float32'", ")", ",", "translation_ab", ".", "astype", "(", "'float32'", ")", ",", "R_ba", ".", "astype", "(", "'float32'", ")", ",", "translation_ba", ".", "astype", "(", "'float32'", ")", ",", "euler_ab", ".", "astype", "(", "'float32'", ")", ",", "euler_ba", ".", "astype", "(", "'float32'", ")", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.ModelNet40.__len__": [[316, 318], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.download": [[16, 27], ["os.path.dirname", "os.path.join", "os.path.abspath", "os.path.exists", "os.mkdir", "os.path.exists", "os.path.basename", "os.system", "os.system", "os.system", "os.path.join"], "function", ["None"], ["def", "download", "(", ")", ":", "\n", "    ", "BASE_DIR", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "DATA_DIR", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "'../../dataset'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "DATA_DIR", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "DATA_DIR", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'modelnet40_ply_hdf5_2048'", ")", ")", ":", "\n", "        ", "www", "=", "'https://shapenet.cs.stanford.edu/media/modelnet40_ply_hdf5_2048.zip'", "\n", "zipfile", "=", "os", ".", "path", ".", "basename", "(", "www", ")", "\n", "os", ".", "system", "(", "'wget %s --no-check-certificate; unzip %s'", "%", "(", "www", ",", "zipfile", ")", ")", "\n", "os", ".", "system", "(", "'mv %s %s'", "%", "(", "zipfile", "[", ":", "-", "4", "]", ",", "DATA_DIR", ")", ")", "\n", "os", ".", "system", "(", "'rm %s'", "%", "(", "zipfile", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.load_data": [[29, 85], ["os.path.dirname", "os.path.join", "os.path.abspath", "data.download", "glob.glob", "numpy.concatenate", "numpy.concatenate", "os.path.join", "h5py.File", "[].astype", "[].astype", "h5py.File.close", "np.concatenate.append", "np.concatenate.append", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "h5py.File", "[].astype", "[].astype", "[].astype", "h5py.File.close", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "h5py.File", "[].astype", "[].astype", "[].astype", "h5py.File.close", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.download", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.close", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.close", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.initPara.IOStream.close"], ["", "", "def", "load_data", "(", "partition", "=", "'train'", ",", "args", "=", "None", ")", ":", "\n", "    ", "BASE_DIR", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "DATA_DIR", "=", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "'../../dataset'", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'modelnet40'", ":", "\n", "        ", "download", "(", ")", "\n", "all_data", "=", "[", "]", "\n", "all_label", "=", "[", "]", "\n", "fileTemplate", "=", "'ply_data_%s*.h5'", "\n", "for", "h5_name", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'modelnet40_ply_hdf5_2048'", ",", "fileTemplate", "%", "partition", ")", ")", ":", "\n", "            ", "f", "=", "h5py", ".", "File", "(", "h5_name", ",", "mode", "=", "'r'", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", ".", "astype", "(", "'float32'", ")", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", ".", "astype", "(", "'int64'", ")", "\n", "f", ".", "close", "(", ")", "\n", "all_data", ".", "append", "(", "data", ")", "\n", "all_label", ".", "append", "(", "label", ")", "\n", "", "all_data", "=", "np", ".", "concatenate", "(", "all_data", ",", "axis", "=", "0", ")", "\n", "all_label", "=", "np", ".", "concatenate", "(", "all_label", ",", "axis", "=", "0", ")", "\n", "return", "all_data", ",", "all_label", "\n", "", "elif", "args", ".", "dataset", "==", "'kitti'", ":", "\n", "        ", "all_idx", "=", "[", "]", "\n", "rotations", "=", "[", "]", "\n", "translations", "=", "[", "]", "\n", "DATA_DIR", "=", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'kitti_down/h5'", ")", "\n", "listTrain", "=", "[", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'00.h5'", ")", ",", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'03.h5'", ")", ",", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'05.h5'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'07.h5'", ")", ",", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'10.h5'", ")", "]", "\n", "listTest", "=", "[", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'02.h5'", ")", ",", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'04.h5'", ")", ",", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'06.h5'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'08.h5'", ")", ",", "os", ".", "path", ".", "join", "(", "DATA_DIR", ",", "'09.h5'", ")", "]", "\n", "if", "partition", "==", "'train'", ":", "\n", "            ", "for", "h5_name", "in", "listTrain", ":", "\n", "                ", "f", "=", "h5py", ".", "File", "(", "h5_name", ",", "mode", "=", "'r'", ")", "\n", "idx_train", "=", "f", "[", "'idx_train'", "]", "[", ":", ":", "3", "]", ".", "astype", "(", "'int32'", ")", "\n", "rotations_train", "=", "f", "[", "'rotations_train'", "]", "[", ":", ":", "3", "]", ".", "astype", "(", "'float32'", ")", "\n", "translations_train", "=", "f", "[", "'translations_train'", "]", "[", ":", ":", "3", "]", ".", "astype", "(", "'float32'", ")", "\n", "f", ".", "close", "(", ")", "\n", "all_idx", ".", "append", "(", "idx_train", ")", "\n", "rotations", ".", "append", "(", "rotations_train", ")", "\n", "translations", ".", "append", "(", "translations_train", ")", "\n", "", "all_idx", "=", "np", ".", "concatenate", "(", "all_idx", ",", "axis", "=", "0", ")", "\n", "rotations", "=", "np", ".", "concatenate", "(", "rotations", ",", "axis", "=", "0", ")", "\n", "translations", "=", "np", ".", "concatenate", "(", "translations", ",", "axis", "=", "0", ")", "\n", "return", "all_idx", ",", "rotations", ",", "translations", "\n", "", "else", ":", "\n", "            ", "for", "h5_name", "in", "listTest", ":", "\n", "                ", "f", "=", "h5py", ".", "File", "(", "h5_name", ",", "mode", "=", "'r'", ")", "\n", "idx_odo", "=", "f", "[", "'idx_odo'", "]", "[", ":", "]", ".", "astype", "(", "'int32'", ")", "\n", "rotations_odo", "=", "f", "[", "'rotations_odo'", "]", "[", ":", "]", ".", "astype", "(", "'float32'", ")", "\n", "translations_odo", "=", "f", "[", "'translations_odo'", "]", "[", ":", "]", ".", "astype", "(", "'float32'", ")", "\n", "f", ".", "close", "(", ")", "\n", "all_idx", ".", "append", "(", "idx_odo", ")", "\n", "rotations", ".", "append", "(", "rotations_odo", ")", "\n", "translations", ".", "append", "(", "translations_odo", ")", "\n", "", "all_idx", "=", "np", ".", "concatenate", "(", "all_idx", ",", "axis", "=", "0", ")", "\n", "rotations", "=", "np", ".", "concatenate", "(", "rotations", ",", "axis", "=", "0", ")", "\n", "translations", "=", "np", ".", "concatenate", "(", "translations", ",", "axis", "=", "0", ")", "\n", "return", "all_idx", ",", "rotations", ",", "translations", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.Normalization": [[87, 89], ["None"], "function", ["None"], ["", "", "", "def", "Normalization", "(", ")", ":", "\n", "    ", "data", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.translate_pointcloud": [[91, 97], ["numpy.random.uniform", "numpy.random.uniform", "numpy.add().astype", "numpy.add", "numpy.multiply"], "function", ["None"], ["", "def", "translate_pointcloud", "(", "pointcloud", ")", ":", "\n", "    ", "xyz1", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "2.", "/", "3.", ",", "high", "=", "3.", "/", "2.", ",", "size", "=", "[", "3", "]", ")", "\n", "xyz2", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "-", "0.2", ",", "high", "=", "0.2", ",", "size", "=", "[", "3", "]", ")", "\n", "\n", "translated_pointcloud", "=", "np", ".", "add", "(", "np", ".", "multiply", "(", "pointcloud", ",", "xyz1", ")", ",", "xyz2", ")", ".", "astype", "(", "'float32'", ")", "\n", "return", "translated_pointcloud", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.jitter_pointcloud": [[99, 103], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_pointcloud", "(", "pointcloud", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "    ", "N", ",", "C", "=", "pointcloud", ".", "shape", "\n", "pointcloud", "+=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "return", "pointcloud", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.getPointCloud": [[105, 145], ["numpy.fromfile().reshape", "numpy.tile", "numpy.concatenate", "numpy.fromfile().reshape", "numpy.tile", "numpy.concatenate", "numpy.fromfile().reshape", "numpy.tile", "numpy.concatenate", "str().zfill", "str().zfill", "numpy.matmul", "translation_ab.reshape", "str().zfill", "numpy.fromfile", "numpy.fromfile", "numpy.fromfile", "str().zfill", "str", "str().zfill", "str", "str().zfill", "str", "str", "str", "str"], "function", ["None"], ["", "def", "getPointCloud", "(", "seqN", ",", "binNum", ",", "binNumNext", ",", "R_ab", "=", "None", ",", "translation_ab", "=", "None", ",", "num_points", "=", "None", ")", ":", "\n", "    ", "if", "seqN", "<", "11", ":", "\n", "        ", "path", "=", "'./data/kitti_down/bin/'", "+", "str", "(", "\n", "seqN", ")", ".", "zfill", "(", "2", ")", "+", "'/velodyne/'", "+", "str", "(", "binNum", ")", ".", "zfill", "(", "6", ")", "+", "'.bin'", "\n", "pointcloud", "=", "np", ".", "fromfile", "(", "path", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "[", ":", ",", "0", ":", "3", "]", ";", "\n", "points", "=", "pointcloud", ".", "shape", "[", "0", "]", "\n", "supply_idx", "=", "points", "//", "6", "\n", "\n", "if", "points", "<", "num_points", ":", "\n", "            ", "point_supply", "=", "np", ".", "tile", "(", "pointcloud", "[", "supply_idx", ",", ":", "]", ",", "(", "num_points", "-", "points", ",", "1", ")", ")", "\n", "pointcloud1", "=", "np", ".", "concatenate", "(", "(", "pointcloud", ",", "point_supply", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "pointcloud1", "=", "pointcloud", "[", ":", "num_points", "]", "\n", "\n", "", "path", "=", "'./data/kitti_down/bin/'", "+", "str", "(", "\n", "seqN", ")", ".", "zfill", "(", "2", ")", "+", "'/velodyne/'", "+", "str", "(", "binNumNext", ")", ".", "zfill", "(", "6", ")", "+", "'.bin'", "\n", "pointcloud", "=", "np", ".", "fromfile", "(", "path", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "[", ":", ",", "0", ":", "3", "]", ";", "\n", "points", "=", "pointcloud", ".", "shape", "[", "0", "]", "\n", "if", "points", "<", "num_points", ":", "\n", "\n", "            ", "point_supply", "=", "np", ".", "tile", "(", "pointcloud1", "[", "supply_idx", ",", ":", "]", ",", "(", "num_points", "-", "points", ",", "1", ")", ")", "\n", "point_supply", "=", "np", ".", "matmul", "(", "R_ab", ",", "point_supply", ".", "T", ")", "+", "translation_ab", ".", "reshape", "(", "[", "3", ",", "1", "]", ")", "\n", "pointcloud2", "=", "np", ".", "concatenate", "(", "(", "pointcloud", ",", "point_supply", ".", "T", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "pointcloud2", "=", "pointcloud", "[", ":", "num_points", "]", "\n", "\n", "", "return", "pointcloud1", ".", "T", ",", "pointcloud2", ".", "T", "\n", "", "else", ":", "\n", "        ", "seqN", "=", "seqN", "-", "11", "\n", "path", "=", "'./data/kitti_down/bin/'", "+", "str", "(", "\n", "seqN", ")", ".", "zfill", "(", "2", ")", "+", "'/velodyne/'", "+", "str", "(", "binNum", ")", ".", "zfill", "(", "6", ")", "+", "'.bin'", "\n", "pointcloud", "=", "np", ".", "fromfile", "(", "path", ",", "dtype", "=", "np", ".", "float32", ",", "count", "=", "-", "1", ")", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "[", ":", ",", "0", ":", "3", "]", ";", "\n", "points", "=", "pointcloud", ".", "shape", "[", "0", "]", "\n", "supply_idx", "=", "points", "//", "6", "\n", "if", "points", "<", "num_points", ":", "\n", "            ", "point_supply", "=", "np", ".", "tile", "(", "pointcloud", "[", "supply_idx", ",", ":", "]", ",", "(", "num_points", "-", "points", ",", "1", ")", ")", "\n", "pointcloud1", "=", "np", ".", "concatenate", "(", "(", "pointcloud", ",", "point_supply", ")", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "pointcloud1", "=", "pointcloud", "[", ":", "num_points", "]", "\n", "", "return", "pointcloud1", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.data.nearest_neighbor": [[320, 330], ["numpy.max", "int", "dst[].reshape", "sklearn.neighbors.NearestNeighbors", "sklearn.neighbors.NearestNeighbors.fit", "sklearn.neighbors.NearestNeighbors.kneighbors", "indices.ravel.ravel"], "function", ["None"], ["", "", "def", "nearest_neighbor", "(", "dst", ",", "reserve", ")", ":", "\n", "    ", "dst", "=", "dst", ".", "T", "\n", "num", "=", "np", ".", "max", "(", "[", "dst", ".", "shape", "[", "0", "]", ",", "dst", ".", "shape", "[", "1", "]", "]", ")", "\n", "num", "=", "int", "(", "num", "*", "reserve", ")", "\n", "src", "=", "dst", "[", "-", "1", ",", ":", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "neigh", "=", "NearestNeighbors", "(", "n_neighbors", "=", "num", ")", "\n", "neigh", ".", "fit", "(", "dst", ")", "\n", "indices", "=", "neigh", ".", "kneighbors", "(", "src", ",", "return_distance", "=", "False", ")", "\n", "indices", "=", "indices", ".", "ravel", "(", ")", "\n", "return", "dst", "[", "indices", ",", ":", "]", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.__init__": [[36, 45], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "self_att_src", "=", "None", "\n", "self", ".", "cross_self_att_src", "=", "None", "\n", "self", ".", "cross_att_src", "=", "None", "\n", "self", ".", "self_att_tgt", "=", "None", "\n", "self", ".", "cross_self_att_tgt", "=", "None", "\n", "self", ".", "cross_att_tgt", "=", "None", "\n", "self", ".", "src", "=", "None", "\n", "self", ".", "tgt", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.transform_np": [[46, 61], ["print", "util.GlobalVar.format", "util.GlobalVar.format", "util.GlobalVar.format", "util.GlobalVar.format", "util.GlobalVar.format", "util.GlobalVar.format", "util.GlobalVar.format", "util.GlobalVar.format"], "methods", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.format", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.format", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.format", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.format", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.format", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.format", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.format", "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.format"], ["", "def", "transform_np", "(", "self", ")", ":", "\n", "        ", "\"\"\"transform all the attributes into numpy.array\n\n        Returns:\n            none\n        \"\"\"", "\n", "print", "(", "self", ".", "self_att_src", ".", "shape", ")", "\n", "self", ".", "self_att_src", "=", "self", ".", "format", "(", "self", ".", "self_att_src", ")", "\n", "self", ".", "cross_self_att_src", "=", "self", ".", "format", "(", "self", ".", "cross_self_att_src", ")", "\n", "self", ".", "cross_att_src", "=", "self", ".", "format", "(", "self", ".", "cross_att_src", ")", "\n", "self", ".", "self_att_tgt", "=", "self", ".", "format", "(", "self", ".", "self_att_tgt", ")", "\n", "self", ".", "cross_self_att_tgt", "=", "self", ".", "format", "(", "self", ".", "cross_self_att_tgt", ")", "\n", "self", ".", "cross_att_tgt", "=", "self", ".", "format", "(", "self", ".", "cross_att_tgt", ")", "\n", "self", ".", "src", "=", "self", ".", "format", "(", "self", ".", "src", ")", "\n", "self", ".", "tgt", "=", "self", ".", "format", "(", "self", ".", "tgt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.GlobalVar.format": [[62, 74], ["numpy.squeeze", "type", "data.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "data.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "data.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["None"], ["", "def", "format", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"reformat the tensor into numpy array\n\n        Args:\n            data: input Tensor or numpy array\n\n        Returns:\n            reformatted numpy array\n        \"\"\"", "\n", "if", "type", "(", "data", ")", "is", "torch", ".", "Tensor", ":", "data", "=", "data", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "data", "=", "np", ".", "squeeze", "(", "data", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.print_gpu": [[20, 29], ["print", "torch.cuda.device_count", "pynvml.nvmlDeviceGetMemoryInfo", "pynvml.nvmlDeviceGetMemoryInfo", "pynvml.nvmlDeviceGetMemoryInfo"], "function", ["None"], ["def", "print_gpu", "(", "s", "=", "\"\"", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "meminfo0", "=", "pynvml", ".", "nvmlDeviceGetMemoryInfo", "(", "handle0", ")", "\n", "meminfo1", "=", "pynvml", ".", "nvmlDeviceGetMemoryInfo", "(", "handle0", ")", "\n", "used", "=", "(", "meminfo0", ".", "used", "+", "meminfo1", ".", "used", ")", "/", "ratio", "\n", "", "else", ":", "\n", "        ", "meminfo0", "=", "pynvml", ".", "nvmlDeviceGetMemoryInfo", "(", "handle0", ")", "\n", "used", "=", "meminfo0", ".", "used", "/", "ratio", "\n", "", "print", "(", "s", "+", "\" used: \"", ",", "used", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.quat2mat": [[76, 89], ["quat.size", "torch.stack().reshape", "w.pow", "x.pow", "y.pow", "z.pow", "torch.stack"], "function", ["None"], ["", "", "def", "quat2mat", "(", "quat", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", ",", "w", "=", "quat", "[", ":", ",", "0", "]", ",", "quat", "[", ":", ",", "1", "]", ",", "quat", "[", ":", ",", "2", "]", ",", "quat", "[", ":", ",", "3", "]", "\n", "\n", "B", "=", "quat", ".", "size", "(", "0", ")", "\n", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "w", ".", "pow", "(", "2", ")", ",", "x", ".", "pow", "(", "2", ")", ",", "y", ".", "pow", "(", "2", ")", ",", "z", ".", "pow", "(", "2", ")", "\n", "wx", ",", "wy", ",", "wz", "=", "w", "*", "x", ",", "w", "*", "y", ",", "w", "*", "z", "\n", "xy", ",", "xz", ",", "yz", "=", "x", "*", "y", ",", "x", "*", "z", ",", "y", "*", "z", "\n", "\n", "rotMat", "=", "torch", ".", "stack", "(", "[", "w2", "+", "x2", "-", "y2", "-", "z2", ",", "2", "*", "xy", "-", "2", "*", "wz", ",", "2", "*", "wy", "+", "2", "*", "xz", ",", "\n", "2", "*", "wz", "+", "2", "*", "xy", ",", "w2", "-", "x2", "+", "y2", "-", "z2", ",", "2", "*", "yz", "-", "2", "*", "wx", ",", "\n", "2", "*", "xz", "-", "2", "*", "wy", ",", "2", "*", "wx", "+", "2", "*", "yz", ",", "w2", "-", "x2", "-", "y2", "+", "z2", "]", ",", "dim", "=", "1", ")", ".", "reshape", "(", "B", ",", "3", ",", "3", ")", "\n", "return", "rotMat", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.transform_point_cloud": [[91, 97], ["len", "util.quat2mat", "torch.matmul", "translation.unsqueeze", "rotation.size"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.quat2mat"], ["", "def", "transform_point_cloud", "(", "point_cloud", ",", "rotation", ",", "translation", ")", ":", "\n", "    ", "if", "len", "(", "rotation", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "        ", "rot_mat", "=", "quat2mat", "(", "rotation", ")", "\n", "", "else", ":", "\n", "        ", "rot_mat", "=", "rotation", "\n", "", "return", "torch", ".", "matmul", "(", "rot_mat", ",", "point_cloud", ")", "+", "translation", ".", "unsqueeze", "(", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.npmat2euler": [[99, 105], ["range", "numpy.asarray", "scipy.spatial.transform.Rotation.from_dcm", "eulers.append", "Rotation.from_dcm.as_euler"], "function", ["None"], ["", "def", "npmat2euler", "(", "mats", ",", "seq", "=", "'zyx'", ")", ":", "\n", "    ", "eulers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "mats", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "r", "=", "Rotation", ".", "from_dcm", "(", "mats", "[", "i", "]", ")", "\n", "eulers", ".", "append", "(", "r", ".", "as_euler", "(", "seq", ",", "degrees", "=", "True", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "eulers", ",", "dtype", "=", "'float32'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.farthest_point_sample": [[107, 141], ["xyz.transpose.transpose", "torch.zeros().to", "torch.arange().to", "torch.sum", "barycenter.view.view", "torch.sum", "range", "torch.ones().to", "torch.max", "xyz[].view", "torch.sum", "torch.zeros", "torch.arange", "torch.max", "torch.ones"], "function", ["None"], ["", "def", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: pointcloud data, [B, 3, N]\n        npoint: number of samples\n    Return:\n        centroids: sampled pointcloud index, [B, npoint]\n    \"\"\"", "\n", "\n", "xyz", "=", "xyz", ".", "transpose", "(", "2", ",", "1", ")", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "\n", "centroids", "=", "torch", ".", "zeros", "(", "B", ",", "npoint", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "# sample point matrix\uff08B, npoint\uff09", "\n", "distance", "=", "torch", ".", "ones", "(", "B", ",", "N", ")", ".", "to", "(", "device", ")", "*", "1e10", "# distance from sample points to all the points\uff08B, N\uff09", "\n", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "# batch_size ", "\n", "\n", "barycenter", "=", "torch", ".", "sum", "(", "(", "xyz", ")", ",", "1", ")", "# calculate the barycenter as well as the farthest point ", "\n", "barycenter", "=", "barycenter", "/", "xyz", ".", "shape", "[", "1", "]", "\n", "barycenter", "=", "barycenter", ".", "view", "(", "B", ",", "1", ",", "3", ")", "\n", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "barycenter", ")", "**", "2", ",", "-", "1", ")", "\n", "farthest", "=", "torch", ".", "max", "(", "dist", ",", "1", ")", "[", "1", "]", "# take the farthest as the first point", "\n", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "centroids", "[", ":", ",", "i", "]", "=", "farthest", "# update i^th point", "\n", "centroid", "=", "xyz", "[", "batch_indices", ",", "farthest", ",", ":", "]", ".", "view", "(", "B", ",", "1", ",", "3", ")", "# ", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "centroid", ")", "**", "2", ",", "-", "1", ")", "# calculate Euclidian distances", "\n", "mask", "=", "dist", "<", "distance", "\n", "distance", "[", "mask", "]", "=", "dist", "[", "mask", "]", "# update distance\uff0cremember the least distance", "\n", "farthest", "=", "torch", ".", "max", "(", "distance", ",", "-", "1", ")", "[", "1", "]", "\n", "\n", "", "return", "centroids", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.knn": [[143, 174], ["torch.sum", "torch.matmul", "torch.sum.transpose().contiguous", "x.transpose().contiguous", "pairwise_distance.topk", "torch.sum.transpose", "x.transpose"], "function", ["None"], ["", "def", "knn", "(", "x", ",", "k", ")", ":", "\n", "    ", "\"\"\"get k nearest neighbors based on distance in feature space\n\n    Args:\n        x: [b,dims(=3),num]\n        k: number of neighbors to select\n\n    Returns:\n        k nearest neighbors (batch_size, num_points, k)\n    \"\"\"", "\n", "inner", "=", "-", "2", "*", "torch", ".", "matmul", "(", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", ",", "x", ")", "# [b,num,num]", "\n", "\n", "xx", "=", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# [b,1,num]", "\n", "\n", "pairwise_distance", "=", "-", "xx", "-", "inner", "\n", "pairwise_distance", "=", "pairwise_distance", "-", "xx", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# [b,num,num]", "\n", "idx", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "k", "+", "1", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "[", ":", ",", ":", ",", "1", ":", "]", "# (batch_size, num_points, k)", "\n", "return", "idx", "\n", "\n", "# input x [B,dims,num]", "\n", "# output [B, dims*2, num, k] neighbor feature tensor", "\n", "\"\"\"\n\n    Args:\n        x: [B,dims,num]\n        k:\n        idx:\n\n    Returns:\n        tensor [B, dims*2, num, k]\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.get_graph_feature": [[176, 200], ["x.view().repeat.size", "x.view().repeat.view", "torch.device", "knn.view", "x.view().repeat.transpose().contiguous", "torch.cat().permute.view", "x.view().repeat.view().repeat", "torch.cat().permute", "util.knn", "torch.arange().view", "x.view().repeat.view", "torch.cuda.is_available", "x.view().repeat.transpose", "x.view().repeat.view", "torch.cat", "torch.arange"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.knn"], ["", "def", "get_graph_feature", "(", "x", ",", "k", "=", "20", ",", "idx", "=", "None", ")", ":", "\n", "    ", "batch_size", ",", "dims", ",", "num_points", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_points", ")", "\n", "if", "idx", "is", "None", ":", "\n", "        ", "idx", "=", "knn", "(", "x", ",", "k", "=", "k", ")", "# (batch_size, num_points, k)", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "idx_base", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "device", ")", ".", "view", "(", "-", "1", ",", "1", ",", "\n", "1", ")", "*", "num_points", "# (batch_size, 1, 1) [0 num_points ... num_points*(B-1)]", "\n", "\n", "idx", "=", "idx", "+", "idx_base", "# (batch_size, num_points, k)", "\n", "\n", "idx", "=", "idx", ".", "view", "(", "-", "1", ")", "# (batch_size * num_points * k)", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num_points, dims)", "\n", "\n", "feature", "=", "x", ".", "view", "(", "batch_size", "*", "num_points", ",", "-", "1", ")", "[", "idx", ",", ":", "]", "# (batch_size * num_points * k,dims)", "\n", "\n", "feature", "=", "feature", ".", "view", "(", "batch_size", ",", "num_points", ",", "k", ",", "dims", ")", "# (batch_size, num_points, k, dims)", "\n", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "num_points", ",", "1", ",", "dims", ")", ".", "repeat", "(", "1", ",", "1", ",", "k", ",", "1", ")", "# [B, num, k, dims]", "\n", "# representation from dgcnn", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "feature", ",", "x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# [B, dims*2, num, k]", "\n", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.get_graph_featureNew": [[204, 214], ["x.unsqueeze().repeat.size", "knn.view().unsqueeze().repeat", "torch.gather().view", "x.unsqueeze().repeat.unsqueeze().repeat", "torch.cat", "util.knn", "knn.view().unsqueeze", "torch.gather", "x.unsqueeze().repeat.unsqueeze", "knn.view"], "function", ["home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.util.knn"], ["", "def", "get_graph_featureNew", "(", "x", ",", "k", "=", "20", ",", "idx", "=", "None", ")", ":", "\n", "    ", "batch_size", ",", "dims", ",", "num_points", "=", "x", ".", "size", "(", ")", "\n", "if", "idx", "is", "None", ":", "\n", "        ", "idx", "=", "knn", "(", "x", ",", "k", "=", "k", ")", "# (batch_size, num_points, k)", "\n", "", "idx", "=", "idx", ".", "view", "(", "batch_size", ",", "num_points", "*", "k", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "dims", ",", "1", ")", "\n", "feature", "=", "torch", ".", "gather", "(", "x", ",", "index", "=", "idx", ",", "dim", "=", "2", ")", ".", "view", "(", "batch_size", ",", "dims", ",", "num_points", ",", "k", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "3", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "k", ")", "\n", "feature", "=", "torch", ".", "cat", "(", "(", "feature", ",", "x", ")", ",", "dim", "=", "1", ")", "# [B, dims*2, num, k]", "\n", "\n", "return", "feature", "\n", "", ""]], "home.repos.pwc.inspect_result.qiaozhijian_VCR-Net.util.fps.farthest_point_sample": [[10, 50], ["xyz.transpose.transpose", "torch.zeros().to", "torch.arange().to", "torch.sum", "barycenter.view.view", "torch.sum", "range", "torch.ones().to", "torch.max", "print", "print", "xyz[].view", "torch.sum", "print", "print", "print", "torch.zeros", "torch.arange", "torch.max", "torch.ones"], "function", ["None"], ["def", "farthest_point_sample", "(", "xyz", ",", "npoint", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        xyz: pointcloud data, [B, N, 3]\n        npoint: number of samples\n    Return:\n        centroids: sampled pointcloud index, [B, npoint]\n    \"\"\"", "\n", "\n", "xyz", "=", "xyz", ".", "transpose", "(", "2", ",", "1", ")", "\n", "device", "=", "xyz", ".", "device", "\n", "B", ",", "N", ",", "C", "=", "xyz", ".", "shape", "\n", "\n", "centroids", "=", "torch", ".", "zeros", "(", "B", ",", "npoint", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "# \uff08B, npoint\uff09", "\n", "distance", "=", "torch", ".", "ones", "(", "B", ",", "N", ")", ".", "to", "(", "device", ")", "*", "1e10", "# \uff08B, N\uff09", "\n", "\n", "batch_indices", "=", "torch", ".", "arange", "(", "B", ",", "dtype", "=", "torch", ".", "long", ")", ".", "to", "(", "device", ")", "# batch_size ", "\n", "\n", "barycenter", "=", "torch", ".", "sum", "(", "(", "xyz", ")", ",", "1", ")", "\n", "barycenter", "=", "barycenter", "/", "xyz", ".", "shape", "[", "1", "]", "\n", "barycenter", "=", "barycenter", ".", "view", "(", "B", ",", "1", ",", "3", ")", "\n", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "barycenter", ")", "**", "2", ",", "-", "1", ")", "\n", "farthest", "=", "torch", ".", "max", "(", "dist", ",", "1", ")", "[", "1", "]", "\n", "\n", "for", "i", "in", "range", "(", "npoint", ")", ":", "\n", "        ", "print", "(", "\"-------------------------------------------------------\"", ")", "\n", "print", "(", "\"The %d farthest pts %s \"", "%", "(", "i", ",", "farthest", ")", ")", "\n", "centroids", "[", ":", ",", "i", "]", "=", "farthest", "\n", "centroid", "=", "xyz", "[", "batch_indices", ",", "farthest", ",", ":", "]", ".", "view", "(", "B", ",", "1", ",", "3", ")", "\n", "dist", "=", "torch", ".", "sum", "(", "(", "xyz", "-", "centroid", ")", "**", "2", ",", "-", "1", ")", "\n", "print", "(", "\"dist    : \"", ",", "dist", ")", "\n", "mask", "=", "dist", "<", "distance", "\n", "print", "(", "\"mask %i : %s\"", "%", "(", "i", ",", "mask", ")", ")", "\n", "distance", "[", "mask", "]", "=", "dist", "[", "mask", "]", "\n", "print", "(", "\"distance: \"", ",", "distance", ")", "\n", "\n", "farthest", "=", "torch", ".", "max", "(", "distance", ",", "-", "1", ")", "[", "1", "]", "\n", "\n", "", "return", "centroids", "\n", "\n"]]}