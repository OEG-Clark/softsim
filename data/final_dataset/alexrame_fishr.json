{"home.repos.pwc.inspect_result.alexrame_fishr.domainbed.command_launchers.local_launcher": [[13, 17], ["subprocess.call"], "function", ["None"], ["def", "local_launcher", "(", "commands", ")", ":", "\n", "    ", "\"\"\"Launch commands serially on the local machine.\"\"\"", "\n", "for", "cmd", "in", "commands", ":", "\n", "        ", "subprocess", ".", "call", "(", "cmd", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.command_launchers.dummy_launcher": [[18, 25], ["print"], "function", ["None"], ["", "", "def", "dummy_launcher", "(", "commands", ")", ":", "\n", "    ", "\"\"\"\n    Doesn't run anything; instead, prints each command.\n    Useful for testing.\n    \"\"\"", "\n", "for", "cmd", "in", "commands", ":", "\n", "        ", "print", "(", "f'Dummy launcher: {cmd}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.command_launchers.multi_gpu_launcher": [[26, 50], ["print", "torch.cuda.device_count", "len", "range", "time.sleep", "p.wait", "commands.pop", "subprocess.Popen", "proc.poll"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "", "def", "multi_gpu_launcher", "(", "commands", ")", ":", "\n", "    ", "\"\"\"\n    Launch commands on the local machine, using all GPUs in parallel.\n    \"\"\"", "\n", "print", "(", "'WARNING: using experimental multi_gpu_launcher.'", ")", "\n", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "procs_by_gpu", "=", "[", "None", "]", "*", "n_gpus", "\n", "\n", "while", "len", "(", "commands", ")", ">", "0", ":", "\n", "        ", "for", "gpu_idx", "in", "range", "(", "n_gpus", ")", ":", "\n", "            ", "proc", "=", "procs_by_gpu", "[", "gpu_idx", "]", "\n", "if", "(", "proc", "is", "None", ")", "or", "(", "proc", ".", "poll", "(", ")", "is", "not", "None", ")", ":", "\n", "# Nothing is running on this GPU; launch a command.", "\n", "                ", "cmd", "=", "commands", ".", "pop", "(", "0", ")", "\n", "new_proc", "=", "subprocess", ".", "Popen", "(", "\n", "f'CUDA_VISIBLE_DEVICES={gpu_idx} {cmd}'", ",", "shell", "=", "True", ")", "\n", "procs_by_gpu", "[", "gpu_idx", "]", "=", "new_proc", "\n", "break", "\n", "", "", "time", ".", "sleep", "(", "1", ")", "\n", "\n", "# Wait for the last few tasks to finish before returning", "\n", "", "for", "p", "in", "procs_by_gpu", ":", "\n", "        ", "if", "p", "is", "not", "None", ":", "\n", "            ", "p", ".", "wait", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.SelectionMethod.__init__": [[15, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "TypeError", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.SelectionMethod.run_acc": [[18, 25], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "run_acc", "(", "self", ",", "run_records", ")", ":", "\n", "        ", "\"\"\"\n        Given records from a run, return a {val_acc, test_acc} dict representing\n        the best val-acc and corresponding test-acc for that run.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.SelectionMethod.hparams_accs": [[26, 40], ["records.group().map().filter().sorted", "records.group().map().filter", "records.group().map", "records.group", "model_selection.SelectionMethod.run_acc"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sorted", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.map", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.group", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.LeaveOneOutSelectionMethod.run_acc"], ["", "@", "classmethod", "\n", "def", "hparams_accs", "(", "self", ",", "records", ")", ":", "\n", "        ", "\"\"\"\n        Given all records from a single (dataset, algorithm, test env) pair,\n        return a sorted list of (run_acc, records) tuples.\n        \"\"\"", "\n", "return", "(", "records", ".", "group", "(", "'args.hparams_seed'", ")", "\n", ".", "map", "(", "lambda", "_", ",", "run_records", ":", "\n", "(", "\n", "self", ".", "run_acc", "(", "run_records", ")", ",", "\n", "run_records", "\n", ")", "\n", ")", ".", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "is", "not", "None", ")", "\n", ".", "sorted", "(", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", "[", "'val_acc'", "]", ")", "[", ":", ":", "-", "1", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.SelectionMethod.sweep_acc": [[42, 53], ["model_selection.SelectionMethod.hparams_accs", "len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.SelectionMethod.hparams_accs", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "@", "classmethod", "\n", "def", "sweep_acc", "(", "self", ",", "records", ")", ":", "\n", "        ", "\"\"\"\n        Given all records from a single (dataset, algorithm, test env) pair,\n        return the mean test acc of the k runs with the top val accs.\n        \"\"\"", "\n", "_hparams_accs", "=", "self", ".", "hparams_accs", "(", "records", ")", "\n", "if", "len", "(", "_hparams_accs", ")", ":", "\n", "            ", "return", "_hparams_accs", "[", "0", "]", "[", "0", "]", "[", "'test_acc'", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.OracleSelectionMethod.run_acc": [[60, 73], ["run_records.filter.filter.filter", "len", "run_records.filter.filter.sorted", "len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sorted", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["@", "classmethod", "\n", "def", "run_acc", "(", "self", ",", "run_records", ")", ":", "\n", "        ", "run_records", "=", "run_records", ".", "filter", "(", "lambda", "r", ":", "\n", "len", "(", "r", "[", "'args'", "]", "[", "'test_envs'", "]", ")", "==", "1", ")", "\n", "if", "not", "len", "(", "run_records", ")", ":", "\n", "            ", "return", "None", "\n", "", "test_env", "=", "run_records", "[", "0", "]", "[", "'args'", "]", "[", "'test_envs'", "]", "[", "0", "]", "\n", "test_out_acc_key", "=", "'env{}_out_acc'", ".", "format", "(", "test_env", ")", "\n", "test_in_acc_key", "=", "'env{}_in_acc'", ".", "format", "(", "test_env", ")", "\n", "chosen_record", "=", "run_records", ".", "sorted", "(", "lambda", "r", ":", "r", "[", "'step'", "]", ")", "[", "-", "1", "]", "\n", "return", "{", "\n", "'val_acc'", ":", "chosen_record", "[", "test_out_acc_key", "]", ",", "\n", "'test_acc'", ":", "chosen_record", "[", "test_in_acc_key", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.IIDAccuracySelectionMethod._step_acc": [[79, 93], ["itertools.count", "numpy.mean", "val_env_keys.append"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean"], ["@", "classmethod", "\n", "def", "_step_acc", "(", "self", ",", "record", ")", ":", "\n", "        ", "\"\"\"Given a single record, return a {val_acc, test_acc} dict.\"\"\"", "\n", "test_env", "=", "record", "[", "'args'", "]", "[", "'test_envs'", "]", "[", "0", "]", "\n", "val_env_keys", "=", "[", "]", "\n", "for", "i", "in", "itertools", ".", "count", "(", ")", ":", "\n", "            ", "if", "f'env{i}_out_acc'", "not", "in", "record", ":", "\n", "                ", "break", "\n", "", "if", "i", "!=", "test_env", ":", "\n", "                ", "val_env_keys", ".", "append", "(", "f'env{i}_out_acc'", ")", "\n", "", "", "test_in_acc_key", "=", "'env{}_in_acc'", ".", "format", "(", "test_env", ")", "\n", "return", "{", "\n", "'val_acc'", ":", "np", ".", "mean", "(", "[", "record", "[", "key", "]", "for", "key", "in", "val_env_keys", "]", ")", ",", "\n", "'test_acc'", ":", "record", "[", "test_in_acc_key", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.IIDAccuracySelectionMethod.run_acc": [[95, 101], ["model_selection.get_test_records", "get_test_records.map().argmax", "len", "get_test_records.map"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.get_test_records", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.argmax", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.map"], ["", "@", "classmethod", "\n", "def", "run_acc", "(", "self", ",", "run_records", ")", ":", "\n", "        ", "test_records", "=", "get_test_records", "(", "run_records", ")", "\n", "if", "not", "len", "(", "test_records", ")", ":", "\n", "            ", "return", "None", "\n", "", "return", "test_records", ".", "map", "(", "self", ".", "_step_acc", ")", ".", "argmax", "(", "'val_acc'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.LeaveOneOutSelectionMethod._step_acc": [[106, 131], ["model_selection.get_test_records", "itertools.count", "records.filter", "any", "len", "numpy.zeros", "list", "list", "numpy.sum", "len", "set", "set"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.get_test_records", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["@", "classmethod", "\n", "def", "_step_acc", "(", "self", ",", "records", ")", ":", "\n", "        ", "\"\"\"Return the {val_acc, test_acc} for a group of records corresponding\n        to a single step.\"\"\"", "\n", "test_records", "=", "get_test_records", "(", "records", ")", "\n", "if", "len", "(", "test_records", ")", "!=", "1", ":", "\n", "            ", "return", "None", "\n", "\n", "", "test_env", "=", "test_records", "[", "0", "]", "[", "'args'", "]", "[", "'test_envs'", "]", "[", "0", "]", "\n", "n_envs", "=", "0", "\n", "for", "i", "in", "itertools", ".", "count", "(", ")", ":", "\n", "            ", "if", "f'env{i}_out_acc'", "not", "in", "records", "[", "0", "]", ":", "\n", "                ", "break", "\n", "", "n_envs", "+=", "1", "\n", "", "val_accs", "=", "np", ".", "zeros", "(", "n_envs", ")", "-", "1", "\n", "for", "r", "in", "records", ".", "filter", "(", "lambda", "r", ":", "len", "(", "r", "[", "'args'", "]", "[", "'test_envs'", "]", ")", "==", "2", ")", ":", "\n", "            ", "val_env", "=", "(", "set", "(", "r", "[", "'args'", "]", "[", "'test_envs'", "]", ")", "-", "set", "(", "[", "test_env", "]", ")", ")", ".", "pop", "(", ")", "\n", "val_accs", "[", "val_env", "]", "=", "r", "[", "'env{}_in_acc'", ".", "format", "(", "val_env", ")", "]", "\n", "", "val_accs", "=", "list", "(", "val_accs", "[", ":", "test_env", "]", ")", "+", "list", "(", "val_accs", "[", "test_env", "+", "1", ":", "]", ")", "\n", "if", "any", "(", "[", "v", "==", "-", "1", "for", "v", "in", "val_accs", "]", ")", ":", "\n", "            ", "return", "None", "\n", "", "val_acc", "=", "np", ".", "sum", "(", "val_accs", ")", "/", "(", "n_envs", "-", "1", ")", "\n", "return", "{", "\n", "'val_acc'", ":", "val_acc", ",", "\n", "'test_acc'", ":", "test_records", "[", "0", "]", "[", "'env{}_in_acc'", ".", "format", "(", "test_env", ")", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.LeaveOneOutSelectionMethod.run_acc": [[133, 142], ["records.group().map().filter_not_none", "len", "records.group().map().filter_not_none.argmax", "records.group().map", "records.group", "model_selection.LeaveOneOutSelectionMethod._step_acc"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter_not_none", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.argmax", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.map", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.group", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.LeaveOneOutSelectionMethod._step_acc"], ["", "@", "classmethod", "\n", "def", "run_acc", "(", "self", ",", "records", ")", ":", "\n", "        ", "step_accs", "=", "records", ".", "group", "(", "'step'", ")", ".", "map", "(", "lambda", "step", ",", "step_records", ":", "\n", "self", ".", "_step_acc", "(", "step_records", ")", "\n", ")", ".", "filter_not_none", "(", ")", "\n", "if", "len", "(", "step_accs", ")", ":", "\n", "            ", "return", "step_accs", ".", "argmax", "(", "'val_acc'", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.get_test_records": [[6, 10], ["records.filter", "len"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["def", "get_test_records", "(", "records", ")", ":", "\n", "    ", "\"\"\"Given records with a common test env, get the test records (i.e. the\n    records with *only* that single test env and no other test envs)\"\"\"", "\n", "return", "records", ".", "filter", "(", "lambda", "r", ":", "len", "(", "r", "[", "'args'", "]", "[", "'test_envs'", "]", ")", "==", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Identity.__init__": [[38, 40], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Identity.forward": [[41, 43], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.MLP.__init__": [[47, 56], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "n_inputs", ",", "n_outputs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input", "=", "nn", ".", "Linear", "(", "n_inputs", ",", "hparams", "[", "'mlp_width'", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "hparams", "[", "'mlp_dropout'", "]", ")", "\n", "self", ".", "hiddens", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Linear", "(", "hparams", "[", "'mlp_width'", "]", ",", "hparams", "[", "'mlp_width'", "]", ")", "\n", "for", "_", "in", "range", "(", "hparams", "[", "'mlp_depth'", "]", "-", "2", ")", "]", ")", "\n", "self", ".", "output", "=", "nn", ".", "Linear", "(", "hparams", "[", "'mlp_width'", "]", ",", "n_outputs", ")", "\n", "self", ".", "n_outputs", "=", "n_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.MLP.forward": [[57, 67], ["networks.MLP.input", "networks.MLP.dropout", "torch.relu", "torch.relu", "torch.relu", "networks.MLP.output", "hidden", "networks.MLP.dropout", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "input", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "for", "hidden", "in", "self", ".", "hiddens", ":", "\n", "            ", "x", "=", "hidden", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "", "x", "=", "self", ".", "output", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.ResNet.__init__": [[71, 101], ["super().__init__", "networks.Identity", "networks.ResNet.freeze_bn", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torchvision.models.resnet18", "torchvision.models.resnet50", "networks.ResNet.network.conv1.weight.data.clone", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "range"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.ResNet.freeze_bn"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "hparams", "[", "'resnet18'", "]", ":", "\n", "            ", "self", ".", "network", "=", "torchvision", ".", "models", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "n_outputs", "=", "512", "\n", "", "else", ":", "\n", "            ", "self", ".", "network", "=", "torchvision", ".", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "self", ".", "n_outputs", "=", "2048", "\n", "\n", "# self.network = remove_batch_norm_from_resnet(self.network)", "\n", "\n", "# adapt number of channels", "\n", "", "nc", "=", "input_shape", "[", "0", "]", "\n", "if", "nc", "!=", "3", ":", "\n", "            ", "tmp", "=", "self", ".", "network", ".", "conv1", ".", "weight", ".", "data", ".", "clone", "(", ")", "\n", "\n", "self", ".", "network", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "nc", ",", "64", ",", "kernel_size", "=", "(", "7", ",", "7", ")", ",", "\n", "stride", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "(", "3", ",", "3", ")", ",", "bias", "=", "False", ")", "\n", "\n", "for", "i", "in", "range", "(", "nc", ")", ":", "\n", "                ", "self", ".", "network", ".", "conv1", ".", "weight", ".", "data", "[", ":", ",", "i", ",", ":", ",", ":", "]", "=", "tmp", "[", ":", ",", "i", "%", "3", ",", ":", ",", ":", "]", "\n", "\n", "# save memory", "\n", "", "", "del", "self", ".", "network", ".", "fc", "\n", "self", ".", "network", ".", "fc", "=", "Identity", "(", ")", "\n", "\n", "self", ".", "freeze_bn", "(", ")", "\n", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "hparams", "[", "'resnet_dropout'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.ResNet.forward": [[102, 105], ["networks.ResNet.dropout", "networks.ResNet.network"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"Encode x into a feature vector of size n_outputs.\"\"\"", "\n", "return", "self", ".", "dropout", "(", "self", ".", "network", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.ResNet.train": [[106, 112], ["super().train", "networks.ResNet.freeze_bn"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.ResNet.train", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.ResNet.freeze_bn"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Override the default train() to freeze the BN parameters\n        \"\"\"", "\n", "super", "(", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "freeze_bn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.ResNet.freeze_bn": [[113, 117], ["networks.ResNet.network.modules", "isinstance", "m.eval"], "methods", ["None"], ["", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "network", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.MNIST_CNN.__init__": [[128, 141], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "super", "(", "MNIST_CNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "input_shape", "[", "0", "]", ",", "64", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "1", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "bn0", "=", "nn", ".", "GroupNorm", "(", "8", ",", "64", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "GroupNorm", "(", "8", ",", "128", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "GroupNorm", "(", "8", ",", "128", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "GroupNorm", "(", "8", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.MNIST_CNN.forward": [[142, 162], ["networks.MNIST_CNN.conv1", "torch.relu", "torch.relu", "torch.relu", "networks.MNIST_CNN.bn0", "networks.MNIST_CNN.conv2", "torch.relu", "torch.relu", "torch.relu", "networks.MNIST_CNN.bn1", "networks.MNIST_CNN.conv3", "torch.relu", "torch.relu", "torch.relu", "networks.MNIST_CNN.bn2", "networks.MNIST_CNN.conv4", "torch.relu", "torch.relu", "torch.relu", "networks.MNIST_CNN.bn3", "networks.MNIST_CNN.avgpool", "x.view.view.view", "len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn0", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "len", "(", "x", ")", ",", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.ContextNet.__init__": [[165, 178], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "super", "(", "ContextNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Keep same dimensions", "\n", "padding", "=", "(", "5", "-", "1", ")", "//", "2", "\n", "self", ".", "context_net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_shape", "[", "0", "]", ",", "64", ",", "5", ",", "padding", "=", "padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "5", ",", "padding", "=", "padding", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "1", ",", "5", ",", "padding", "=", "padding", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.ContextNet.forward": [[180, 182], ["networks.ContextNet.context_net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "context_net", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.WholeFish.__init__": [[211, 223], ["torch.Module.__init__", "networks.Featurizer", "networks.Classifier", "torch.Sequential", "torch.Sequential", "torch.Sequential", "networks.WholeFish.load_state_dict", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Featurizer", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Classifier"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "hparams", ",", "weights", "=", "None", ")", ":", "\n", "        ", "super", "(", "WholeFish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "featurizer", "=", "Featurizer", "(", "input_shape", ",", "hparams", ")", "\n", "classifier", "=", "Classifier", "(", "\n", "featurizer", ".", "n_outputs", ",", "\n", "num_classes", ",", "\n", "hparams", "[", "'nonlinear_classifier'", "]", ")", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "featurizer", ",", "classifier", "\n", ")", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_state_dict", "(", "copy", ".", "deepcopy", "(", "weights", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.WholeFish.reset_weights": [[224, 226], ["networks.WholeFish.load_state_dict", "copy.deepcopy"], "methods", ["None"], ["", "", "def", "reset_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "self", ".", "load_state_dict", "(", "copy", ".", "deepcopy", "(", "weights", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.WholeFish.forward": [[227, 229], ["networks.WholeFish.net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "net", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.remove_batch_norm_from_resnet": [[12, 34], ["model.eval", "fuse", "networks.Identity", "model.named_modules", "model.train", "name.startswith", "enumerate", "len", "bottleneck.named_modules", "isinstance", "name2.startswith", "fuse", "networks.Identity", "setattr", "setattr", "fuse", "networks.Identity", "getattr"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.ResNet.train", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["def", "remove_batch_norm_from_resnet", "(", "model", ")", ":", "\n", "    ", "fuse", "=", "torch", ".", "nn", ".", "utils", ".", "fusion", ".", "fuse_conv_bn_eval", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "model", ".", "conv1", "=", "fuse", "(", "model", ".", "conv1", ",", "model", ".", "bn1", ")", "\n", "model", ".", "bn1", "=", "Identity", "(", ")", "\n", "\n", "for", "name", ",", "module", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "name", ".", "startswith", "(", "\"layer\"", ")", "and", "len", "(", "name", ")", "==", "6", ":", "\n", "            ", "for", "b", ",", "bottleneck", "in", "enumerate", "(", "module", ")", ":", "\n", "                ", "for", "name2", ",", "module2", "in", "bottleneck", ".", "named_modules", "(", ")", ":", "\n", "                    ", "if", "name2", ".", "startswith", "(", "\"conv\"", ")", ":", "\n", "                        ", "bn_name", "=", "\"bn\"", "+", "name2", "[", "-", "1", "]", "\n", "setattr", "(", "bottleneck", ",", "name2", ",", "\n", "fuse", "(", "module2", ",", "getattr", "(", "bottleneck", ",", "bn_name", ")", ")", ")", "\n", "setattr", "(", "bottleneck", ",", "bn_name", ",", "Identity", "(", ")", ")", "\n", "", "", "if", "isinstance", "(", "bottleneck", ".", "downsample", ",", "torch", ".", "nn", ".", "Sequential", ")", ":", "\n", "                    ", "bottleneck", ".", "downsample", "[", "0", "]", "=", "fuse", "(", "bottleneck", ".", "downsample", "[", "0", "]", ",", "\n", "bottleneck", ".", "downsample", "[", "1", "]", ")", "\n", "bottleneck", ".", "downsample", "[", "1", "]", "=", "Identity", "(", ")", "\n", "", "", "", "", "model", ".", "train", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Featurizer": [[184, 196], ["len", "networks.MLP", "networks.MNIST_CNN", "domainbed.lib.wide_resnet.Wide_ResNet", "networks.ResNet"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "", "def", "Featurizer", "(", "input_shape", ",", "hparams", ")", ":", "\n", "    ", "\"\"\"Auto-select an appropriate featurizer for the given input shape.\"\"\"", "\n", "if", "len", "(", "input_shape", ")", "==", "1", ":", "\n", "        ", "return", "MLP", "(", "input_shape", "[", "0", "]", ",", "hparams", "[", "\"mlp_width\"", "]", ",", "hparams", ")", "\n", "", "elif", "input_shape", "[", "1", ":", "3", "]", "==", "(", "28", ",", "28", ")", ":", "\n", "        ", "return", "MNIST_CNN", "(", "input_shape", ")", "\n", "", "elif", "input_shape", "[", "1", ":", "3", "]", "==", "(", "32", ",", "32", ")", ":", "\n", "        ", "return", "wide_resnet", ".", "Wide_ResNet", "(", "input_shape", ",", "16", ",", "2", ",", "0.", ")", "\n", "", "elif", "input_shape", "[", "1", ":", "3", "]", "==", "(", "224", ",", "224", ")", ":", "\n", "        ", "return", "ResNet", "(", "input_shape", ",", "hparams", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Classifier": [[198, 208], ["torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "function", ["None"], ["", "", "def", "Classifier", "(", "in_features", ",", "out_features", ",", "is_nonlinear", "=", "False", ")", ":", "\n", "    ", "if", "is_nonlinear", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "in_features", ",", "in_features", "//", "2", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "in_features", "//", "2", ",", "in_features", "//", "4", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "in_features", "//", "4", ",", "out_features", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.hparams_registry._define_hparam": [[6, 8], ["None"], "function", ["None"], ["def", "_define_hparam", "(", "hparams", ",", "hparam_name", ",", "default_val", ",", "random_val_fn", ")", ":", "\n", "    ", "hparams", "[", "hparam_name", "]", "=", "(", "hparams", ",", "hparam_name", ",", "default_val", ",", "random_val_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.hparams_registry._hparams": [[10, 142], ["hparams_registry._hparams._hparam"], "function", ["None"], ["", "def", "_hparams", "(", "algorithm", ",", "dataset", ",", "random_seed", ")", ":", "\n", "    ", "\"\"\"\n    Global registry of hyperparams. Each entry is a (default, random) tuple.\n    New algorithms / networks / etc. should add entries here.\n    \"\"\"", "\n", "SMALL_IMAGES", "=", "[", "'Debug28'", ",", "'RotatedMNIST'", ",", "'ColoredMNIST'", "]", "\n", "\n", "hparams", "=", "{", "}", "\n", "\n", "def", "_hparam", "(", "name", ",", "default_val", ",", "random_val_fn", ")", ":", "\n", "        ", "\"\"\"Define a hyperparameter. random_val_fn takes a RandomState and\n        returns a random hyperparameter value.\"\"\"", "\n", "assert", "(", "name", "not", "in", "hparams", ")", "\n", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "\n", "misc", ".", "seed_hash", "(", "random_seed", ",", "name", ")", "\n", ")", "\n", "hparams", "[", "name", "]", "=", "(", "default_val", ",", "random_val_fn", "(", "random_state", ")", ")", "\n", "\n", "# Unconditional hparam definitions.", "\n", "\n", "", "_hparam", "(", "'data_augmentation'", ",", "True", ",", "lambda", "r", ":", "True", ")", "\n", "_hparam", "(", "'resnet18'", ",", "False", ",", "lambda", "r", ":", "False", ")", "\n", "_hparam", "(", "'resnet_dropout'", ",", "0.", ",", "lambda", "r", ":", "r", ".", "choice", "(", "[", "0.", ",", "0.1", ",", "0.5", "]", ")", ")", "\n", "_hparam", "(", "'class_balanced'", ",", "False", ",", "lambda", "r", ":", "False", ")", "\n", "# TODO: nonlinear classifiers disabled", "\n", "_hparam", "(", "'nonlinear_classifier'", ",", "False", ",", "\n", "lambda", "r", ":", "bool", "(", "r", ".", "choice", "(", "[", "False", ",", "False", "]", ")", ")", ")", "\n", "\n", "# Algorithm-specific hparam definitions. Each block of code below", "\n", "# corresponds to exactly one algorithm.", "\n", "\n", "if", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", ":", "\n", "        ", "_hparam", "(", "'lambda'", ",", "1.0", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "2", ",", "2", ")", ")", "\n", "_hparam", "(", "'weight_decay_d'", ",", "0.", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "6", ",", "-", "2", ")", ")", "\n", "_hparam", "(", "'d_steps_per_g_step'", ",", "1", ",", "lambda", "r", ":", "int", "(", "2", "**", "r", ".", "uniform", "(", "0", ",", "3", ")", ")", ")", "\n", "_hparam", "(", "'grad_penalty'", ",", "0.", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "2", ",", "1", ")", ")", "\n", "_hparam", "(", "'beta1'", ",", "0.5", ",", "lambda", "r", ":", "r", ".", "choice", "(", "[", "0.", ",", "0.5", "]", ")", ")", "\n", "_hparam", "(", "'mlp_width'", ",", "256", ",", "lambda", "r", ":", "int", "(", "2", "**", "r", ".", "uniform", "(", "6", ",", "10", ")", ")", ")", "\n", "_hparam", "(", "'mlp_depth'", ",", "3", ",", "lambda", "r", ":", "int", "(", "r", ".", "choice", "(", "[", "3", ",", "4", ",", "5", "]", ")", ")", ")", "\n", "_hparam", "(", "'mlp_dropout'", ",", "0.", ",", "lambda", "r", ":", "r", ".", "choice", "(", "[", "0.", ",", "0.1", ",", "0.5", "]", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "'Fish'", ":", "\n", "        ", "_hparam", "(", "'meta_lr'", ",", "0.5", ",", "lambda", "r", ":", "r", ".", "choice", "(", "[", "0.05", ",", "0.1", ",", "0.5", "]", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"RSC\"", ":", "\n", "        ", "_hparam", "(", "'rsc_f_drop_factor'", ",", "1", "/", "3", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0", ",", "0.5", ")", ")", "\n", "_hparam", "(", "'rsc_b_drop_factor'", ",", "1", "/", "3", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0", ",", "0.5", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"SagNet\"", ":", "\n", "        ", "_hparam", "(", "'sag_w_adv'", ",", "0.1", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "2", ",", "1", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"IRM\"", ":", "\n", "        ", "_hparam", "(", "'irm_lambda'", ",", "1e2", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "1", ",", "5", ")", ")", "\n", "_hparam", "(", "'irm_penalty_anneal_iters'", ",", "500", ",", "\n", "lambda", "r", ":", "int", "(", "10", "**", "r", ".", "uniform", "(", "0", ",", "4", ")", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"Mixup\"", ":", "\n", "        ", "_hparam", "(", "'mixup_alpha'", ",", "0.2", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "1", ",", "-", "1", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"GroupDRO\"", ":", "\n", "        ", "_hparam", "(", "'groupdro_eta'", ",", "1e-2", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "3", ",", "-", "1", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"MMD\"", "or", "algorithm", "==", "\"CORAL\"", ":", "\n", "        ", "_hparam", "(", "'mmd_gamma'", ",", "1.", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"MLDG\"", ":", "\n", "        ", "_hparam", "(", "'mldg_beta'", ",", "1.", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"MTL\"", ":", "\n", "        ", "_hparam", "(", "'mtl_ema'", ",", ".99", ",", "lambda", "r", ":", "r", ".", "choice", "(", "[", "0.5", ",", "0.9", ",", "0.99", ",", "1.", "]", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"VREx\"", ":", "\n", "        ", "_hparam", "(", "'vrex_lambda'", ",", "1e1", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "1", ",", "5", ")", ")", "\n", "_hparam", "(", "'vrex_penalty_anneal_iters'", ",", "500", ",", "\n", "lambda", "r", ":", "int", "(", "10", "**", "r", ".", "uniform", "(", "0", ",", "4", ")", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"SD\"", ":", "\n", "        ", "_hparam", "(", "'sd_reg'", ",", "0.1", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "5", ",", "-", "1", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"ANDMask\"", ":", "\n", "        ", "_hparam", "(", "'tau'", ",", "1", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0.5", ",", "1.", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"IGA\"", ":", "\n", "        ", "_hparam", "(", "'penalty'", ",", "1000", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "1", ",", "5", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"SANDMask\"", ":", "\n", "        ", "_hparam", "(", "'tau'", ",", "1.0", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0.0", ",", "1.", ")", ")", "\n", "_hparam", "(", "'k'", ",", "1e+1", ",", "lambda", "r", ":", "int", "(", "10", "**", "r", ".", "uniform", "(", "-", "3", ",", "5", ")", ")", ")", "\n", "\n", "", "elif", "algorithm", "==", "\"Fishr\"", ":", "\n", "        ", "_hparam", "(", "'lambda'", ",", "1000.", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "1.", ",", "4.", ")", ")", "\n", "_hparam", "(", "'penalty_anneal_iters'", ",", "1500", ",", "lambda", "r", ":", "int", "(", "r", ".", "uniform", "(", "0.", ",", "5000.", ")", ")", ")", "\n", "_hparam", "(", "'ema'", ",", "0.95", ",", "lambda", "r", ":", "r", ".", "uniform", "(", "0.90", ",", "0.99", ")", ")", "\n", "\n", "# Dataset-and-algorithm-specific hparam definitions. Each block of code", "\n", "# below corresponds to exactly one hparam. Avoid nested conditionals.", "\n", "\n", "", "if", "dataset", "in", "SMALL_IMAGES", ":", "\n", "        ", "_hparam", "(", "'lr'", ",", "1e-3", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "4.5", ",", "-", "2.5", ")", ")", "\n", "", "else", ":", "\n", "        ", "_hparam", "(", "'lr'", ",", "5e-5", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "5", ",", "-", "3.5", ")", ")", "\n", "\n", "", "if", "dataset", "in", "SMALL_IMAGES", ":", "\n", "        ", "_hparam", "(", "'weight_decay'", ",", "0.", ",", "lambda", "r", ":", "0.", ")", "\n", "", "else", ":", "\n", "        ", "_hparam", "(", "'weight_decay'", ",", "0.", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "6", ",", "-", "2", ")", ")", "\n", "\n", "", "if", "dataset", "in", "SMALL_IMAGES", ":", "\n", "        ", "_hparam", "(", "'batch_size'", ",", "64", ",", "lambda", "r", ":", "int", "(", "2", "**", "r", ".", "uniform", "(", "3", ",", "9", ")", ")", ")", "\n", "", "elif", "algorithm", "==", "'ARM'", ":", "\n", "        ", "_hparam", "(", "'batch_size'", ",", "8", ",", "lambda", "r", ":", "8", ")", "\n", "", "elif", "dataset", "==", "'DomainNet'", ":", "\n", "        ", "_hparam", "(", "'batch_size'", ",", "32", ",", "lambda", "r", ":", "int", "(", "2", "**", "r", ".", "uniform", "(", "3", ",", "5", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "_hparam", "(", "'batch_size'", ",", "32", ",", "lambda", "r", ":", "int", "(", "2", "**", "r", ".", "uniform", "(", "3", ",", "5.5", ")", ")", ")", "\n", "\n", "", "if", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", "and", "dataset", "in", "SMALL_IMAGES", ":", "\n", "        ", "_hparam", "(", "'lr_g'", ",", "1e-3", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "4.5", ",", "-", "2.5", ")", ")", "\n", "", "elif", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", ":", "\n", "        ", "_hparam", "(", "'lr_g'", ",", "5e-5", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "5", ",", "-", "3.5", ")", ")", "\n", "\n", "", "if", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", "and", "dataset", "in", "SMALL_IMAGES", ":", "\n", "        ", "_hparam", "(", "'lr_d'", ",", "1e-3", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "4.5", ",", "-", "2.5", ")", ")", "\n", "", "elif", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", ":", "\n", "        ", "_hparam", "(", "'lr_d'", ",", "5e-5", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "5", ",", "-", "3.5", ")", ")", "\n", "\n", "", "if", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", "and", "dataset", "in", "SMALL_IMAGES", ":", "\n", "        ", "_hparam", "(", "'weight_decay_g'", ",", "0.", ",", "lambda", "r", ":", "0.", ")", "\n", "", "elif", "algorithm", "in", "[", "'DANN'", ",", "'CDANN'", "]", ":", "\n", "        ", "_hparam", "(", "'weight_decay_g'", ",", "0.", ",", "lambda", "r", ":", "10", "**", "r", ".", "uniform", "(", "-", "6", ",", "-", "2", ")", ")", "\n", "\n", "", "return", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.hparams_registry.default_hparams": [[144, 146], ["_hparams().items", "hparams_registry._hparams"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.hparams_registry._hparams"], ["", "def", "default_hparams", "(", "algorithm", ",", "dataset", ")", ":", "\n", "    ", "return", "{", "a", ":", "b", "for", "a", ",", "(", "b", ",", "c", ")", "in", "_hparams", "(", "algorithm", ",", "dataset", ",", "0", ")", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.hparams_registry.random_hparams": [[148, 150], ["_hparams().items", "hparams_registry._hparams"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.hparams_registry._hparams"], ["", "def", "random_hparams", "(", "algorithm", ",", "dataset", ",", "seed", ")", ":", "\n", "    ", "return", "{", "a", ":", "c", "for", "a", ",", "(", "b", ",", "c", ")", "in", "_hparams", "(", "algorithm", ",", "dataset", ",", "seed", ")", ".", "items", "(", ")", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Algorithm.__init__": [[63, 66], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "Algorithm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hparams", "=", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Algorithm.update": [[67, 76], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Perform one update step, given a list of (x, y) tuples for all\n        environments.\n\n        Admits an optional list of unlabeled minibatches from the test domains,\n        when task is domain_adaptation.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Algorithm.predict": [[77, 79], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.ERM.__init__": [[86, 98], ["algorithms.Algorithm.__init__", "domainbed.networks.Featurizer", "domainbed.networks.Classifier", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "algorithms.ERM.network.parameters"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Featurizer", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Classifier"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "ERM", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "self", ".", "featurizer", "=", "networks", ".", "Featurizer", "(", "input_shape", ",", "self", ".", "hparams", ")", "\n", "self", ".", "classifier", "=", "networks", ".", "Classifier", "(", "\n", "self", ".", "featurizer", ".", "n_outputs", ",", "num_classes", ",", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", "\n", ")", "\n", "\n", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "self", ".", "featurizer", ",", "self", ".", "classifier", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "network", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.ERM.update": [[100, 110], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.ERM.optimizer.zero_grad", "torch.cross_entropy.backward", "algorithms.ERM.optimizer.step", "algorithms.ERM.predict", "torch.cross_entropy.item"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr.predict"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "self", ".", "predict", "(", "all_x", ")", ",", "all_y", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.ERM.predict": [[111, 113], ["algorithms.ERM.network"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "network", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fish.__init__": [[121, 133], ["algorithms.Algorithm.__init__", "domainbed.networks.WholeFish", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "algorithms.Fish.network.parameters"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "Fish", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "network", "=", "networks", ".", "WholeFish", "(", "input_shape", ",", "num_classes", ",", "hparams", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "network", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n", "self", ".", "optimizer_inner_state", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fish.create_clone": [[134, 145], ["domainbed.networks.WholeFish().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "algorithms.Fish.network_inner.parameters", "algorithms.Fish.optimizer_inner.load_state_dict", "domainbed.networks.WholeFish", "algorithms.Fish.network.state_dict"], "methods", ["None"], ["", "def", "create_clone", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "network_inner", "=", "networks", ".", "WholeFish", "(", "\n", "self", ".", "input_shape", ",", "self", ".", "num_classes", ",", "self", ".", "hparams", ",", "weights", "=", "self", ".", "network", ".", "state_dict", "(", ")", "\n", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "optimizer_inner", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "network_inner", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n", "if", "self", ".", "optimizer_inner_state", "is", "not", "None", ":", "\n", "            ", "self", ".", "optimizer_inner", ".", "load_state_dict", "(", "self", ".", "optimizer_inner_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fish.fish": [[146, 151], ["domainbed.lib.misc.ParamDict", "domainbed.lib.misc.ParamDict"], "methods", ["None"], ["", "", "def", "fish", "(", "self", ",", "meta_weights", ",", "inner_weights", ",", "lr_meta", ")", ":", "\n", "        ", "meta_weights", "=", "ParamDict", "(", "meta_weights", ")", "\n", "inner_weights", "=", "ParamDict", "(", "inner_weights", ")", "\n", "meta_weights", "+=", "lr_meta", "*", "(", "inner_weights", "-", "meta_weights", ")", "\n", "return", "meta_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fish.update": [[152, 170], ["algorithms.Fish.create_clone", "algorithms.Fish.optimizer_inner.state_dict", "algorithms.Fish.fish", "algorithms.Fish.network.reset_weights", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.Fish.optimizer_inner.zero_grad", "torch.cross_entropy.backward", "algorithms.Fish.optimizer_inner.step", "torch.cross_entropy.item", "algorithms.Fish.network_inner", "algorithms.Fish.network.state_dict", "algorithms.Fish.network_inner.state_dict"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fish.create_clone", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fish.fish", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.WholeFish.reset_weights"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "self", ".", "create_clone", "(", "minibatches", "[", "0", "]", "[", "0", "]", ".", "device", ")", "\n", "\n", "for", "x", ",", "y", "in", "minibatches", ":", "\n", "            ", "loss", "=", "F", ".", "cross_entropy", "(", "self", ".", "network_inner", "(", "x", ")", ",", "y", ")", "\n", "self", ".", "optimizer_inner", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_inner", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "optimizer_inner_state", "=", "self", ".", "optimizer_inner", ".", "state_dict", "(", ")", "\n", "meta_weights", "=", "self", ".", "fish", "(", "\n", "meta_weights", "=", "self", ".", "network", ".", "state_dict", "(", ")", ",", "\n", "inner_weights", "=", "self", ".", "network_inner", ".", "state_dict", "(", ")", ",", "\n", "lr_meta", "=", "self", ".", "hparams", "[", "\"meta_lr\"", "]", "\n", ")", "\n", "self", ".", "network", ".", "reset_weights", "(", "meta_weights", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fish.predict": [[171, 173], ["algorithms.Fish.network"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "network", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.ARM.__init__": [[178, 184], ["algorithms.ERM.__init__", "domainbed.networks.ContextNet"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "original_input_shape", "=", "input_shape", "\n", "input_shape", "=", "(", "1", "+", "original_input_shape", "[", "0", "]", ",", ")", "+", "original_input_shape", "[", "1", ":", "]", "\n", "super", "(", "ARM", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "self", ".", "context_net", "=", "networks", ".", "ContextNet", "(", "original_input_shape", ")", "\n", "self", ".", "support_size", "=", "hparams", "[", "'batch_size'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.ARM.predict": [[185, 198], ["algorithms.ARM.context_net", "torch.repeat_interleave.reshape", "torch.repeat_interleave.reshape", "torch.repeat_interleave.reshape", "torch.repeat_interleave.reshape", "torch.repeat_interleave.mean", "torch.repeat_interleave.mean", "torch.repeat_interleave.mean", "torch.repeat_interleave.mean", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.repeat_interleave", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.ARM.network"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", ",", "c", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "if", "batch_size", "%", "self", ".", "support_size", "==", "0", ":", "\n", "            ", "meta_batch_size", "=", "batch_size", "//", "self", ".", "support_size", "\n", "support_size", "=", "self", ".", "support_size", "\n", "", "else", ":", "\n", "            ", "meta_batch_size", ",", "support_size", "=", "1", ",", "batch_size", "\n", "", "context", "=", "self", ".", "context_net", "(", "x", ")", "\n", "context", "=", "context", ".", "reshape", "(", "(", "meta_batch_size", ",", "support_size", ",", "1", ",", "h", ",", "w", ")", ")", "\n", "context", "=", "context", ".", "mean", "(", "dim", "=", "1", ")", "\n", "context", "=", "torch", ".", "repeat_interleave", "(", "context", ",", "repeats", "=", "support_size", ",", "dim", "=", "0", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "context", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "network", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.AbstractDANN.__init__": [[203, 232], ["algorithms.Algorithm.__init__", "algorithms.AbstractDANN.register_buffer", "domainbed.networks.Featurizer", "domainbed.networks.Classifier", "domainbed.networks.MLP", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "list", "list", "list", "list", "algorithms.AbstractDANN.discriminator.parameters", "algorithms.AbstractDANN.class_embeddings.parameters", "algorithms.AbstractDANN.featurizer.parameters", "algorithms.AbstractDANN.classifier.parameters"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Featurizer", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Classifier"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ",", "conditional", ",", "class_balance", ")", ":", "\n", "\n", "        ", "super", "(", "AbstractDANN", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'update_count'", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ")", "\n", "self", ".", "conditional", "=", "conditional", "\n", "self", ".", "class_balance", "=", "class_balance", "\n", "\n", "# Algorithms", "\n", "self", ".", "featurizer", "=", "networks", ".", "Featurizer", "(", "input_shape", ",", "self", ".", "hparams", ")", "\n", "self", ".", "classifier", "=", "networks", ".", "Classifier", "(", "\n", "self", ".", "featurizer", ".", "n_outputs", ",", "num_classes", ",", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", "\n", ")", "\n", "self", ".", "discriminator", "=", "networks", ".", "MLP", "(", "self", ".", "featurizer", ".", "n_outputs", ",", "num_domains", ",", "self", ".", "hparams", ")", "\n", "self", ".", "class_embeddings", "=", "nn", ".", "Embedding", "(", "num_classes", ",", "self", ".", "featurizer", ".", "n_outputs", ")", "\n", "\n", "# Optimizers", "\n", "self", ".", "disc_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "(", "list", "(", "self", ".", "discriminator", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "class_embeddings", ".", "parameters", "(", ")", ")", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr_d\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay_d'", "]", ",", "\n", "betas", "=", "(", "self", ".", "hparams", "[", "'beta1'", "]", ",", "0.9", ")", "\n", ")", "\n", "\n", "self", ".", "gen_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "(", "list", "(", "self", ".", "featurizer", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr_g\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay_g'", "]", ",", "\n", "betas", "=", "(", "self", ".", "hparams", "[", "'beta1'", "]", ",", "0.9", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.AbstractDANN.update": [[234, 283], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.AbstractDANN.featurizer", "algorithms.AbstractDANN.discriminator", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.one_hot().sum", "torch.one_hot().sum", "torch.one_hot().sum", "torch.one_hot().sum", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "algorithms.AbstractDANN.disc_opt.zero_grad", "torch.cross_entropy.backward", "algorithms.AbstractDANN.disc_opt.step", "algorithms.AbstractDANN.classifier", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.AbstractDANN.disc_opt.zero_grad", "algorithms.AbstractDANN.gen_opt.zero_grad", "gen_loss.backward", "algorithms.AbstractDANN.gen_opt.step", "algorithms.AbstractDANN.class_embeddings", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "disc_softmax[].sum", "algorithms.AbstractDANN.update_count.item", "torch.cross_entropy.item", "gen_loss.item", "enumerate", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.one_hot"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "minibatches", "[", "0", "]", "[", "0", "]", ".", "is_cuda", "else", "\"cpu\"", "\n", "self", ".", "update_count", "+=", "1", "\n", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_z", "=", "self", ".", "featurizer", "(", "all_x", ")", "\n", "if", "self", ".", "conditional", ":", "\n", "            ", "disc_input", "=", "all_z", "+", "self", ".", "class_embeddings", "(", "all_y", ")", "\n", "", "else", ":", "\n", "            ", "disc_input", "=", "all_z", "\n", "", "disc_out", "=", "self", ".", "discriminator", "(", "disc_input", ")", "\n", "disc_labels", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "torch", ".", "full", "(", "(", "x", ".", "shape", "[", "0", "]", ",", ")", ",", "i", ",", "dtype", "=", "torch", ".", "int64", ",", "device", "=", "device", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "minibatches", ")", "\n", "]", "\n", ")", "\n", "\n", "if", "self", ".", "class_balance", ":", "\n", "            ", "y_counts", "=", "F", ".", "one_hot", "(", "all_y", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "weights", "=", "1.", "/", "(", "y_counts", "[", "all_y", "]", "*", "y_counts", ".", "shape", "[", "0", "]", ")", ".", "float", "(", ")", "\n", "disc_loss", "=", "F", ".", "cross_entropy", "(", "disc_out", ",", "disc_labels", ",", "reduction", "=", "'none'", ")", "\n", "disc_loss", "=", "(", "weights", "*", "disc_loss", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "disc_loss", "=", "F", ".", "cross_entropy", "(", "disc_out", ",", "disc_labels", ")", "\n", "\n", "", "disc_softmax", "=", "F", ".", "softmax", "(", "disc_out", ",", "dim", "=", "1", ")", "\n", "input_grad", "=", "autograd", ".", "grad", "(", "\n", "disc_softmax", "[", ":", ",", "disc_labels", "]", ".", "sum", "(", ")", ",", "[", "disc_input", "]", ",", "create_graph", "=", "True", "\n", ")", "[", "0", "]", "\n", "grad_penalty", "=", "(", "input_grad", "**", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "disc_loss", "+=", "self", ".", "hparams", "[", "'grad_penalty'", "]", "*", "grad_penalty", "\n", "\n", "d_steps_per_g", "=", "self", ".", "hparams", "[", "'d_steps_per_g_step'", "]", "\n", "if", "(", "self", ".", "update_count", ".", "item", "(", ")", "%", "(", "1", "+", "d_steps_per_g", ")", "<", "d_steps_per_g", ")", ":", "\n", "\n", "            ", "self", ".", "disc_opt", ".", "zero_grad", "(", ")", "\n", "disc_loss", ".", "backward", "(", ")", "\n", "self", ".", "disc_opt", ".", "step", "(", ")", "\n", "return", "{", "'disc_loss'", ":", "disc_loss", ".", "item", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "all_preds", "=", "self", ".", "classifier", "(", "all_z", ")", "\n", "classifier_loss", "=", "F", ".", "cross_entropy", "(", "all_preds", ",", "all_y", ")", "\n", "gen_loss", "=", "(", "classifier_loss", "+", "(", "self", ".", "hparams", "[", "'lambda'", "]", "*", "-", "disc_loss", ")", ")", "\n", "self", ".", "disc_opt", ".", "zero_grad", "(", ")", "\n", "self", ".", "gen_opt", ".", "zero_grad", "(", ")", "\n", "gen_loss", ".", "backward", "(", ")", "\n", "self", ".", "gen_opt", ".", "step", "(", ")", "\n", "return", "{", "'gen_loss'", ":", "gen_loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.AbstractDANN.predict": [[284, 286], ["algorithms.AbstractDANN.classifier", "algorithms.AbstractDANN.featurizer"], "methods", ["None"], ["", "", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "classifier", "(", "self", ".", "featurizer", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.DANN.__init__": [[291, 294], ["algorithms.AbstractDANN.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "DANN", ",", "self", ")", ".", "__init__", "(", "\n", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ",", "conditional", "=", "False", ",", "class_balance", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.CDANN.__init__": [[300, 303], ["algorithms.AbstractDANN.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "CDANN", ",", "self", ")", ".", "__init__", "(", "\n", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ",", "conditional", "=", "True", ",", "class_balance", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.IRM.__init__": [[309, 312], ["algorithms.ERM.__init__", "algorithms.IRM.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "IRM", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "self", ".", "register_buffer", "(", "'update_count'", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.IRM._irm_penalty": [[313, 323], ["torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.tensor().to().requires_grad_", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum"], ["", "@", "staticmethod", "\n", "def", "_irm_penalty", "(", "logits", ",", "y", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "logits", "[", "0", "]", "[", "0", "]", ".", "is_cuda", "else", "\"cpu\"", "\n", "scale", "=", "torch", ".", "tensor", "(", "1.", ")", ".", "to", "(", "device", ")", ".", "requires_grad_", "(", ")", "\n", "loss_1", "=", "F", ".", "cross_entropy", "(", "logits", "[", ":", ":", "2", "]", "*", "scale", ",", "y", "[", ":", ":", "2", "]", ")", "\n", "loss_2", "=", "F", ".", "cross_entropy", "(", "logits", "[", "1", ":", ":", "2", "]", "*", "scale", ",", "y", "[", "1", ":", ":", "2", "]", ")", "\n", "grad_1", "=", "autograd", ".", "grad", "(", "loss_1", ",", "[", "scale", "]", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "grad_2", "=", "autograd", ".", "grad", "(", "loss_2", ",", "[", "scale", "]", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "result", "=", "torch", ".", "sum", "(", "grad_1", "*", "grad_2", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.IRM.update": [[324, 360], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.IRM.network", "enumerate", "len", "len", "algorithms.IRM.optimizer.zero_grad", "loss.backward", "algorithms.IRM.optimizer.step", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.IRM._irm_penalty", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "loss.item", "nll.item", "penalty.item", "algorithms.IRM.network.parameters"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.IRM._irm_penalty"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "minibatches", "[", "0", "]", "[", "0", "]", ".", "is_cuda", "else", "\"cpu\"", "\n", "penalty_weight", "=", "(", "\n", "self", ".", "hparams", "[", "'irm_lambda'", "]", "\n", "if", "self", ".", "update_count", ">=", "self", ".", "hparams", "[", "'irm_penalty_anneal_iters'", "]", "else", "1.0", "\n", ")", "\n", "nll", "=", "0.", "\n", "penalty", "=", "0.", "\n", "\n", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_logits", "=", "self", ".", "network", "(", "all_x", ")", "\n", "all_logits_idx", "=", "0", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "minibatches", ")", ":", "\n", "            ", "logits", "=", "all_logits", "[", "all_logits_idx", ":", "all_logits_idx", "+", "x", ".", "shape", "[", "0", "]", "]", "\n", "all_logits_idx", "+=", "x", ".", "shape", "[", "0", "]", "\n", "nll", "+=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "penalty", "+=", "self", ".", "_irm_penalty", "(", "logits", ",", "y", ")", "\n", "", "nll", "/=", "len", "(", "minibatches", ")", "\n", "penalty", "/=", "len", "(", "minibatches", ")", "\n", "loss", "=", "nll", "+", "(", "penalty_weight", "*", "penalty", ")", "\n", "\n", "if", "self", ".", "update_count", "==", "self", ".", "hparams", "[", "'irm_penalty_anneal_iters'", "]", ":", "\n", "# Reset Adam, because it doesn't like the sharp jump in gradient", "\n", "# magnitudes that happens at this step.", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "network", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "update_count", "+=", "1", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'nll'", ":", "nll", ".", "item", "(", ")", ",", "'penalty'", ":", "penalty", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.VREx.__init__": [[365, 368], ["algorithms.ERM.__init__", "algorithms.VREx.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "VREx", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "self", ".", "register_buffer", "(", "'update_count'", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.VREx.update": [[369, 406], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.VREx.network", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "torch.zeros.mean", "torch.zeros.mean", "torch.zeros.mean", "torch.zeros.mean", "algorithms.VREx.optimizer.zero_grad", "loss.backward", "algorithms.VREx.optimizer.step", "len", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "loss.item", "torch.cross_entropy.item", "penalty.item", "algorithms.VREx.network.parameters"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "update_count", ">=", "self", ".", "hparams", "[", "\"vrex_penalty_anneal_iters\"", "]", ":", "\n", "            ", "penalty_weight", "=", "self", ".", "hparams", "[", "\"vrex_lambda\"", "]", "\n", "", "else", ":", "\n", "            ", "penalty_weight", "=", "1.0", "\n", "\n", "", "nll", "=", "0.", "\n", "\n", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_logits", "=", "self", ".", "network", "(", "all_x", ")", "\n", "all_logits_idx", "=", "0", "\n", "losses", "=", "torch", ".", "zeros", "(", "len", "(", "minibatches", ")", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "minibatches", ")", ":", "\n", "            ", "logits", "=", "all_logits", "[", "all_logits_idx", ":", "all_logits_idx", "+", "x", ".", "shape", "[", "0", "]", "]", "\n", "all_logits_idx", "+=", "x", ".", "shape", "[", "0", "]", "\n", "nll", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "losses", "[", "i", "]", "=", "nll", "\n", "\n", "", "mean", "=", "losses", ".", "mean", "(", ")", "\n", "penalty", "=", "(", "(", "losses", "-", "mean", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "loss", "=", "mean", "+", "penalty_weight", "*", "penalty", "\n", "\n", "if", "self", ".", "update_count", "==", "self", ".", "hparams", "[", "'vrex_penalty_anneal_iters'", "]", ":", "\n", "# Reset Adam (like IRM), because it doesn't like the sharp jump in", "\n", "# gradient magnitudes that happens at this step.", "\n", "            ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "network", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "update_count", "+=", "1", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'nll'", ":", "nll", ".", "item", "(", ")", ",", "'penalty'", ":", "penalty", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Mixup.__init__": [[415, 417], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "Mixup", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Mixup.update": [[418, 437], ["domainbed.lib.misc.random_pairs_of_minibatches", "len", "algorithms.Mixup.optimizer.zero_grad", "objective.backward", "algorithms.Mixup.optimizer.step", "numpy.random.beta", "algorithms.Mixup.predict", "objective.item", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.random_pairs_of_minibatches", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr.predict"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "objective", "=", "0", "\n", "\n", "for", "(", "xi", ",", "yi", ")", ",", "(", "xj", ",", "yj", ")", "in", "random_pairs_of_minibatches", "(", "minibatches", ")", ":", "\n", "            ", "lam", "=", "np", ".", "random", ".", "beta", "(", "self", ".", "hparams", "[", "\"mixup_alpha\"", "]", ",", "self", ".", "hparams", "[", "\"mixup_alpha\"", "]", ")", "\n", "\n", "x", "=", "lam", "*", "xi", "+", "(", "1", "-", "lam", ")", "*", "xj", "\n", "predictions", "=", "self", ".", "predict", "(", "x", ")", "\n", "\n", "objective", "+=", "lam", "*", "F", ".", "cross_entropy", "(", "predictions", ",", "yi", ")", "\n", "objective", "+=", "(", "1", "-", "lam", ")", "*", "F", ".", "cross_entropy", "(", "predictions", ",", "yj", ")", "\n", "\n", "", "objective", "/=", "len", "(", "minibatches", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "objective", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "objective", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.GroupDRO.__init__": [[445, 448], ["algorithms.ERM.__init__", "algorithms.GroupDRO.register_buffer", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "GroupDRO", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "self", ".", "register_buffer", "(", "\"q\"", ",", "torch", ".", "Tensor", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.GroupDRO.update": [[449, 471], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "algorithms.GroupDRO.q.sum", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "torch.dot", "algorithms.GroupDRO.optimizer.zero_grad", "torch.dot.backward", "torch.dot.backward", "torch.dot.backward", "torch.dot.backward", "algorithms.GroupDRO.optimizer.step", "len", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "len", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.dot.item", "torch.dot.item", "torch.dot.item", "torch.dot.item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "algorithms.GroupDRO.predict", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr.predict", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "minibatches", "[", "0", "]", "[", "0", "]", ".", "is_cuda", "else", "\"cpu\"", "\n", "\n", "if", "not", "len", "(", "self", ".", "q", ")", ":", "\n", "            ", "self", ".", "q", "=", "torch", ".", "ones", "(", "len", "(", "minibatches", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "losses", "=", "torch", ".", "zeros", "(", "len", "(", "minibatches", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "m", "in", "range", "(", "len", "(", "minibatches", ")", ")", ":", "\n", "            ", "x", ",", "y", "=", "minibatches", "[", "m", "]", "\n", "losses", "[", "m", "]", "=", "F", ".", "cross_entropy", "(", "self", ".", "predict", "(", "x", ")", ",", "y", ")", "\n", "self", ".", "q", "[", "m", "]", "*=", "(", "self", ".", "hparams", "[", "\"groupdro_eta\"", "]", "*", "losses", "[", "m", "]", ".", "data", ")", ".", "exp", "(", ")", "\n", "\n", "", "self", ".", "q", "/=", "self", ".", "q", ".", "sum", "(", ")", "\n", "\n", "loss", "=", "torch", ".", "dot", "(", "losses", ",", "self", ".", "q", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.MLDG.__init__": [[481, 483], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "MLDG", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.MLDG.update": [[484, 552], ["len", "algorithms.MLDG.optimizer.zero_grad", "algorithms.MLDG.network.parameters", "domainbed.lib.misc.random_pairs_of_minibatches", "len", "algorithms.MLDG.optimizer.step", "copy.deepcopy", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.cross_entropy.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "zip", "torch.cross_entropy.item", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "zip", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "copy.deepcopy.parameters", "copy.deepcopy.", "algorithms.MLDG.network.parameters", "copy.deepcopy.parameters", "copy.deepcopy.", "copy.deepcopy.parameters", "algorithms.MLDG.network.parameters", "p_tgt.grad.data.add_", "p.grad.data.add_"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.random_pairs_of_minibatches", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Terms being computed:\n            * Li = Loss(xi, yi, params)\n            * Gi = Grad(Li, params)\n\n            * Lj = Loss(xj, yj, Optimizer(params, grad(Li, params)))\n            * Gj = Grad(Lj, params)\n\n            * params = Optimizer(params, Grad(Li + beta * Lj, params))\n            *        = Optimizer(params, Gi + beta * Gj)\n\n        That is, when calling .step(), we want grads to be Gi + beta * Gj\n\n        For computational efficiency, we do not compute second derivatives.\n        \"\"\"", "\n", "num_mb", "=", "len", "(", "minibatches", ")", "\n", "objective", "=", "0", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "for", "p", "in", "self", ".", "network", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                ", "p", ".", "grad", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "\n", "", "", "for", "(", "xi", ",", "yi", ")", ",", "(", "xj", ",", "yj", ")", "in", "random_pairs_of_minibatches", "(", "minibatches", ")", ":", "\n", "# fine tune clone-network on task \"i\"", "\n", "            ", "inner_net", "=", "copy", ".", "deepcopy", "(", "self", ".", "network", ")", "\n", "\n", "inner_opt", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "inner_net", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n", "\n", "inner_obj", "=", "F", ".", "cross_entropy", "(", "inner_net", "(", "xi", ")", ",", "yi", ")", "\n", "\n", "inner_opt", ".", "zero_grad", "(", ")", "\n", "inner_obj", ".", "backward", "(", ")", "\n", "inner_opt", ".", "step", "(", ")", "\n", "\n", "# The network has now accumulated gradients Gi", "\n", "# The clone-network has now parameters P - lr * Gi", "\n", "for", "p_tgt", ",", "p_src", "in", "zip", "(", "self", ".", "network", ".", "parameters", "(", ")", ",", "inner_net", ".", "parameters", "(", ")", ")", ":", "\n", "                ", "if", "p_src", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "p_tgt", ".", "grad", ".", "data", ".", "add_", "(", "p_src", ".", "grad", ".", "data", "/", "num_mb", ")", "\n", "\n", "# `objective` is populated for reporting purposes", "\n", "", "", "objective", "+=", "inner_obj", ".", "item", "(", ")", "\n", "\n", "# this computes Gj on the clone-network", "\n", "loss_inner_j", "=", "F", ".", "cross_entropy", "(", "inner_net", "(", "xj", ")", ",", "yj", ")", "\n", "grad_inner_j", "=", "autograd", ".", "grad", "(", "loss_inner_j", ",", "inner_net", ".", "parameters", "(", ")", ",", "allow_unused", "=", "True", ")", "\n", "\n", "# `objective` is populated for reporting purposes", "\n", "objective", "+=", "(", "self", ".", "hparams", "[", "'mldg_beta'", "]", "*", "loss_inner_j", ")", ".", "item", "(", ")", "\n", "\n", "for", "p", ",", "g_j", "in", "zip", "(", "self", ".", "network", ".", "parameters", "(", ")", ",", "grad_inner_j", ")", ":", "\n", "                ", "if", "g_j", "is", "not", "None", ":", "\n", "                    ", "p", ".", "grad", ".", "data", ".", "add_", "(", "self", ".", "hparams", "[", "'mldg_beta'", "]", "*", "g_j", ".", "data", "/", "num_mb", ")", "\n", "\n", "# The network has now accumulated gradients Gi + beta * Gj", "\n", "# Repeat for all train-test splits, do .step()", "\n", "\n", "", "", "", "objective", "/=", "len", "(", "minibatches", ")", "\n", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "objective", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.AbstractMMD.__init__": [[591, 597], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ",", "gaussian", ")", ":", "\n", "        ", "super", "(", "AbstractMMD", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "if", "gaussian", ":", "\n", "            ", "self", ".", "kernel_type", "=", "\"gaussian\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "kernel_type", "=", "\"mean_cov\"", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.AbstractMMD.my_cdist": [[598, 605], ["x1.pow().sum", "x2.pow().sum", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_", "torch.addmm().add_.clamp_min_", "torch.addmm().add_.clamp_min_", "torch.addmm().add_.clamp_min_", "torch.addmm().add_.clamp_min_", "x1.pow", "x2.pow", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "torch.addmm", "x2.pow().sum.transpose", "x2.transpose"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum"], ["", "", "def", "my_cdist", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1_norm", "=", "x1", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "x2_norm", "=", "x2", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "res", "=", "torch", ".", "addmm", "(", "\n", "x2_norm", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "x1", ",", "x2", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "alpha", "=", "-", "2", "\n", ")", ".", "add_", "(", "x1_norm", ")", "\n", "return", "res", ".", "clamp_min_", "(", "1e-30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.AbstractMMD.gaussian_kernel": [[606, 614], ["algorithms.AbstractMMD.my_cdist", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.add_", "torch.zeros_like.add_", "torch.zeros_like.add_", "torch.zeros_like.add_", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "algorithms.AbstractMMD.mul"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.AbstractMMD.my_cdist"], ["", "def", "gaussian_kernel", "(", "self", ",", "x", ",", "y", ",", "gamma", "=", "[", "0.001", ",", "0.01", ",", "0.1", ",", "1", ",", "10", ",", "100", ",", "1000", "]", ")", ":", "\n", "        ", "D", "=", "self", ".", "my_cdist", "(", "x", ",", "y", ")", "\n", "K", "=", "torch", ".", "zeros_like", "(", "D", ")", "\n", "\n", "for", "g", "in", "gamma", ":", "\n", "            ", "K", ".", "add_", "(", "torch", ".", "exp", "(", "D", ".", "mul", "(", "-", "g", ")", ")", ")", "\n", "\n", "", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.AbstractMMD.mmd": [[615, 633], ["algorithms.AbstractMMD.gaussian_kernel().mean", "algorithms.AbstractMMD.gaussian_kernel().mean", "algorithms.AbstractMMD.gaussian_kernel().mean", "x.mean", "y.mean", "algorithms.AbstractMMD.gaussian_kernel", "algorithms.AbstractMMD.gaussian_kernel", "algorithms.AbstractMMD.gaussian_kernel", "cent_x.t", "len", "cent_y.t", "len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.AbstractMMD.gaussian_kernel", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.AbstractMMD.gaussian_kernel", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.AbstractMMD.gaussian_kernel", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "mmd", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "kernel_type", "==", "\"gaussian\"", ":", "\n", "            ", "Kxx", "=", "self", ".", "gaussian_kernel", "(", "x", ",", "x", ")", ".", "mean", "(", ")", "\n", "Kyy", "=", "self", ".", "gaussian_kernel", "(", "y", ",", "y", ")", ".", "mean", "(", ")", "\n", "Kxy", "=", "self", ".", "gaussian_kernel", "(", "x", ",", "y", ")", ".", "mean", "(", ")", "\n", "return", "Kxx", "+", "Kyy", "-", "2", "*", "Kxy", "\n", "", "else", ":", "\n", "            ", "mean_x", "=", "x", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "mean_y", "=", "y", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "cent_x", "=", "x", "-", "mean_x", "\n", "cent_y", "=", "y", "-", "mean_y", "\n", "cova_x", "=", "(", "cent_x", ".", "t", "(", ")", "@", "cent_x", ")", "/", "(", "len", "(", "x", ")", "-", "1", ")", "\n", "cova_y", "=", "(", "cent_y", ".", "t", "(", ")", "@", "cent_y", ")", "/", "(", "len", "(", "y", ")", "-", "1", ")", "\n", "\n", "mean_diff", "=", "(", "mean_x", "-", "mean_y", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "cova_diff", "=", "(", "cova_x", "-", "cova_y", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n", "return", "mean_diff", "+", "cova_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.AbstractMMD.update": [[634, 660], ["len", "range", "algorithms.AbstractMMD.optimizer.zero_grad", "algorithms.AbstractMMD.optimizer.step", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "algorithms.AbstractMMD.featurizer", "algorithms.AbstractMMD.classifier", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "range", "penalty.item.item.item", "objective.item", "algorithms.AbstractMMD.mmd"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.AbstractMMD.mmd"], ["", "", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "objective", "=", "0", "\n", "penalty", "=", "0", "\n", "nmb", "=", "len", "(", "minibatches", ")", "\n", "\n", "features", "=", "[", "self", ".", "featurizer", "(", "xi", ")", "for", "xi", ",", "_", "in", "minibatches", "]", "\n", "classifs", "=", "[", "self", ".", "classifier", "(", "fi", ")", "for", "fi", "in", "features", "]", "\n", "targets", "=", "[", "yi", "for", "_", ",", "yi", "in", "minibatches", "]", "\n", "\n", "for", "i", "in", "range", "(", "nmb", ")", ":", "\n", "            ", "objective", "+=", "F", ".", "cross_entropy", "(", "classifs", "[", "i", "]", ",", "targets", "[", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "nmb", ")", ":", "\n", "                ", "penalty", "+=", "self", ".", "mmd", "(", "features", "[", "i", "]", ",", "features", "[", "j", "]", ")", "\n", "\n", "", "", "objective", "/=", "nmb", "\n", "if", "nmb", ">", "1", ":", "\n", "            ", "penalty", "/=", "(", "nmb", "*", "(", "nmb", "-", "1", ")", "/", "2", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "(", "objective", "+", "(", "self", ".", "hparams", "[", "'mmd_gamma'", "]", "*", "penalty", ")", ")", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "torch", ".", "is_tensor", "(", "penalty", ")", ":", "\n", "            ", "penalty", "=", "penalty", ".", "item", "(", ")", "\n", "\n", "", "return", "{", "'loss'", ":", "objective", ".", "item", "(", ")", ",", "'penalty'", ":", "penalty", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.MMD.__init__": [[667, 669], ["algorithms.AbstractMMD.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "MMD", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ",", "gaussian", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.CORAL.__init__": [[676, 678], ["algorithms.AbstractMMD.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "CORAL", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ",", "gaussian", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.MTL.__init__": [[687, 703], ["algorithms.Algorithm.__init__", "domainbed.networks.Featurizer", "domainbed.networks.Classifier", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "algorithms.MTL.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "list", "list", "algorithms.MTL.featurizer.parameters", "algorithms.MTL.classifier.parameters"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Featurizer", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Classifier"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "MTL", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "self", ".", "featurizer", "=", "networks", ".", "Featurizer", "(", "input_shape", ",", "self", ".", "hparams", ")", "\n", "self", ".", "classifier", "=", "networks", ".", "Classifier", "(", "\n", "self", ".", "featurizer", ".", "n_outputs", "*", "2", ",", "num_classes", ",", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", "\n", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "list", "(", "self", ".", "featurizer", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", "\n", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'embeddings'", ",", "torch", ".", "zeros", "(", "num_domains", ",", "self", ".", "featurizer", ".", "n_outputs", ")", ")", "\n", "\n", "self", ".", "ema", "=", "self", ".", "hparams", "[", "'mtl_ema'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.MTL.update": [[704, 714], ["enumerate", "algorithms.MTL.optimizer.zero_grad", "loss.backward", "algorithms.MTL.optimizer.step", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "loss.item", "algorithms.MTL.predict"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr.predict"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "for", "env", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "minibatches", ")", ":", "\n", "            ", "loss", "+=", "F", ".", "cross_entropy", "(", "self", ".", "predict", "(", "x", ",", "env", ")", ",", "y", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.MTL.update_embeddings_": [[715, 725], ["features.mean", "features.mean.view().repeat", "features.mean.clone().detach", "len", "features.mean.view", "features.mean.clone"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "update_embeddings_", "(", "self", ",", "features", ",", "env", "=", "None", ")", ":", "\n", "        ", "return_embedding", "=", "features", ".", "mean", "(", "0", ")", "\n", "\n", "if", "env", "is", "not", "None", ":", "\n", "            ", "return_embedding", "=", "self", ".", "ema", "*", "return_embedding", "+", "(", "1", "-", "self", ".", "ema", ")", "*", "self", ".", "embeddings", "[", "env", "]", "\n", "\n", "self", ".", "embeddings", "[", "env", "]", "=", "return_embedding", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "return", "return_embedding", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "len", "(", "features", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.MTL.predict": [[726, 730], ["algorithms.MTL.featurizer", "algorithms.MTL.update_embeddings_().normal_", "algorithms.MTL.classifier", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.MTL.update_embeddings_"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.MTL.update_embeddings_"], ["", "def", "predict", "(", "self", ",", "x", ",", "env", "=", "None", ")", ":", "\n", "        ", "features", "=", "self", ".", "featurizer", "(", "x", ")", "\n", "embedding", "=", "self", ".", "update_embeddings_", "(", "features", ",", "env", ")", ".", "normal_", "(", ")", "\n", "return", "self", ".", "classifier", "(", "torch", ".", "cat", "(", "(", "features", ",", "embedding", ")", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SagNet.__init__": [[738, 785], ["algorithms.Algorithm.__init__", "domainbed.networks.Featurizer", "domainbed.networks.Classifier", "domainbed.networks.Classifier", "algorithms.SagNet.__init__.opt"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Featurizer", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Classifier", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Classifier"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "SagNet", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "# featurizer network", "\n", "self", ".", "network_f", "=", "networks", ".", "Featurizer", "(", "input_shape", ",", "self", ".", "hparams", ")", "\n", "# content network", "\n", "self", ".", "network_c", "=", "networks", ".", "Classifier", "(", "\n", "self", ".", "network_f", ".", "n_outputs", ",", "num_classes", ",", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", "\n", ")", "\n", "# style network", "\n", "self", ".", "network_s", "=", "networks", ".", "Classifier", "(", "\n", "self", ".", "network_f", ".", "n_outputs", ",", "num_classes", ",", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", "\n", ")", "\n", "\n", "# # This commented block of code implements something closer to the", "\n", "# # original paper, but is specific to ResNet and puts in disadvantage", "\n", "# # the other algorithms.", "\n", "# resnet_c = networks.Featurizer(input_shape, self.hparams)", "\n", "# resnet_s = networks.Featurizer(input_shape, self.hparams)", "\n", "# # featurizer network", "\n", "# self.network_f = torch.nn.Sequential(", "\n", "#         resnet_c.network.conv1,", "\n", "#         resnet_c.network.bn1,", "\n", "#         resnet_c.network.relu,", "\n", "#         resnet_c.network.maxpool,", "\n", "#         resnet_c.network.layer1,", "\n", "#         resnet_c.network.layer2,", "\n", "#         resnet_c.network.layer3)", "\n", "# # content network", "\n", "# self.network_c = torch.nn.Sequential(", "\n", "#         resnet_c.network.layer4,", "\n", "#         resnet_c.network.avgpool,", "\n", "#         networks.Flatten(),", "\n", "#         resnet_c.network.fc)", "\n", "# # style network", "\n", "# self.network_s = torch.nn.Sequential(", "\n", "#         resnet_s.network.layer4,", "\n", "#         resnet_s.network.avgpool,", "\n", "#         networks.Flatten(),", "\n", "#         resnet_s.network.fc)", "\n", "\n", "def", "opt", "(", "p", ")", ":", "\n", "            ", "return", "torch", ".", "optim", ".", "Adam", "(", "p", ",", "lr", "=", "hparams", "[", "\"lr\"", "]", ",", "weight_decay", "=", "hparams", "[", "\"weight_decay\"", "]", ")", "\n", "\n", "", "self", ".", "optimizer_f", "=", "opt", "(", "self", ".", "network_f", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_c", "=", "opt", "(", "self", ".", "network_c", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer_s", "=", "opt", "(", "self", ".", "network_s", ".", "parameters", "(", ")", ")", "\n", "self", ".", "weight_adv", "=", "hparams", "[", "\"sag_w_adv\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SagNet.forward_c": [[786, 789], ["algorithms.SagNet.network_c", "algorithms.SagNet.randomize", "algorithms.SagNet.network_f"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SagNet.randomize"], ["", "def", "forward_c", "(", "self", ",", "x", ")", ":", "\n", "# learning content network on randomized style", "\n", "        ", "return", "self", ".", "network_c", "(", "self", ".", "randomize", "(", "self", ".", "network_f", "(", "x", ")", ",", "\"style\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SagNet.forward_s": [[790, 793], ["algorithms.SagNet.network_s", "algorithms.SagNet.randomize", "algorithms.SagNet.network_f"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SagNet.randomize"], ["", "def", "forward_s", "(", "self", ",", "x", ")", ":", "\n", "# learning style network on randomized content", "\n", "        ", "return", "self", ".", "network_s", "(", "self", ".", "randomize", "(", "self", ".", "network_f", "(", "x", ")", ",", "\"content\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SagNet.randomize": [[794, 817], ["x[].detach.size", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "x[].detach.mean", "x[].detach.var", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "x[].detach.view", "len", "x[].detach.view", "alpha.unsqueeze.unsqueeze.unsqueeze", "x[].detach", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "randomize", "(", "self", ",", "x", ",", "what", "=", "\"style\"", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "x", ".", "is_cuda", "else", "\"cpu\"", "\n", "sizes", "=", "x", ".", "size", "(", ")", "\n", "alpha", "=", "torch", ".", "rand", "(", "sizes", "[", "0", "]", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "len", "(", "sizes", ")", "==", "4", ":", "\n", "            ", "x", "=", "x", ".", "view", "(", "sizes", "[", "0", "]", ",", "sizes", "[", "1", "]", ",", "-", "1", ")", "\n", "alpha", "=", "alpha", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "var", "=", "x", ".", "var", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "x", "=", "(", "x", "-", "mean", ")", "/", "(", "var", "+", "eps", ")", ".", "sqrt", "(", ")", "\n", "\n", "idx_swap", "=", "torch", ".", "randperm", "(", "sizes", "[", "0", "]", ")", "\n", "if", "what", "==", "\"style\"", ":", "\n", "            ", "mean", "=", "alpha", "*", "mean", "+", "(", "1", "-", "alpha", ")", "*", "mean", "[", "idx_swap", "]", "\n", "var", "=", "alpha", "*", "var", "+", "(", "1", "-", "alpha", ")", "*", "var", "[", "idx_swap", "]", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", "[", "idx_swap", "]", ".", "detach", "(", ")", "\n", "\n", "", "x", "=", "x", "*", "(", "var", "+", "eps", ")", ".", "sqrt", "(", ")", "+", "mean", "\n", "return", "x", ".", "view", "(", "*", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SagNet.update": [[818, 844], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.SagNet.optimizer_f.zero_grad", "algorithms.SagNet.optimizer_c.zero_grad", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy.backward", "algorithms.SagNet.optimizer_f.step", "algorithms.SagNet.optimizer_c.step", "algorithms.SagNet.optimizer_s.zero_grad", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy.backward", "algorithms.SagNet.optimizer_s.step", "algorithms.SagNet.optimizer_f.zero_grad", "loss_adv.backward", "algorithms.SagNet.optimizer_f.step", "algorithms.SagNet.forward_c", "algorithms.SagNet.forward_s", "torch.log_softmax().mean().mean", "torch.log_softmax().mean().mean", "torch.log_softmax().mean().mean", "torch.log_softmax().mean().mean", "torch.cross_entropy.item", "torch.cross_entropy.item", "loss_adv.item", "torch.log_softmax().mean", "torch.log_softmax().mean", "torch.log_softmax().mean", "torch.log_softmax().mean", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "algorithms.SagNet.forward_s"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SagNet.forward_c", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SagNet.forward_s", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SagNet.forward_s"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "\n", "# learn content", "\n", "self", ".", "optimizer_f", ".", "zero_grad", "(", ")", "\n", "self", ".", "optimizer_c", ".", "zero_grad", "(", ")", "\n", "loss_c", "=", "F", ".", "cross_entropy", "(", "self", ".", "forward_c", "(", "all_x", ")", ",", "all_y", ")", "\n", "loss_c", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_f", ".", "step", "(", ")", "\n", "self", ".", "optimizer_c", ".", "step", "(", ")", "\n", "\n", "# learn style", "\n", "self", ".", "optimizer_s", ".", "zero_grad", "(", ")", "\n", "loss_s", "=", "F", ".", "cross_entropy", "(", "self", ".", "forward_s", "(", "all_x", ")", ",", "all_y", ")", "\n", "loss_s", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_s", ".", "step", "(", ")", "\n", "\n", "# learn adversary", "\n", "self", ".", "optimizer_f", ".", "zero_grad", "(", ")", "\n", "loss_adv", "=", "-", "F", ".", "log_softmax", "(", "self", ".", "forward_s", "(", "all_x", ")", ",", "dim", "=", "1", ")", ".", "mean", "(", "1", ")", ".", "mean", "(", ")", "\n", "loss_adv", "=", "loss_adv", "*", "self", ".", "weight_adv", "\n", "loss_adv", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_f", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss_c'", ":", "loss_c", ".", "item", "(", ")", ",", "'loss_s'", ":", "loss_s", ".", "item", "(", ")", ",", "'loss_adv'", ":", "loss_adv", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SagNet.predict": [[845, 847], ["algorithms.SagNet.network_c", "algorithms.SagNet.network_f"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "network_c", "(", "self", ".", "network_f", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.RSC.__init__": [[851, 856], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "RSC", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "self", ".", "drop_f", "=", "(", "1", "-", "hparams", "[", "'rsc_f_drop_factor'", "]", ")", "*", "100", "\n", "self", ".", "drop_b", "=", "(", "1", "-", "hparams", "[", "'rsc_b_drop_factor'", "]", ")", "*", "100", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.RSC.update": [[857, 904], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "torch.nn.functional.one_hot", "algorithms.RSC.featurizer", "algorithms.RSC.classifier", "numpy.percentile", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "percentiles.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "all_g.lt().float", "algorithms.RSC.classifier", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "numpy.percentile", "changes.lt().float().view", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "torch.logical_or().float", "algorithms.RSC.classifier", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.RSC.optimizer.zero_grad", "torch.cross_entropy.backward", "algorithms.RSC.optimizer.step", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "all_g.cpu", "all_g.size", "changes.detach().cpu", "torch.cross_entropy.item", "percentiles.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "all_g.lt", "changes.lt().float", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "torch.logical_or", "percentiles.unsqueeze().repeat.unsqueeze().repeat.to", "changes.detach", "changes.lt"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "device", "=", "\"cuda\"", "if", "minibatches", "[", "0", "]", "[", "0", "]", ".", "is_cuda", "else", "\"cpu\"", "\n", "\n", "# inputs", "\n", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "# labels", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "_", ",", "y", "in", "minibatches", "]", ")", "\n", "# one-hot labels", "\n", "all_o", "=", "torch", ".", "nn", ".", "functional", ".", "one_hot", "(", "all_y", ",", "self", ".", "num_classes", ")", "\n", "# features", "\n", "all_f", "=", "self", ".", "featurizer", "(", "all_x", ")", "\n", "# predictions", "\n", "all_p", "=", "self", ".", "classifier", "(", "all_f", ")", "\n", "\n", "# Equation (1): compute gradients with respect to representation", "\n", "all_g", "=", "autograd", ".", "grad", "(", "(", "all_p", "*", "all_o", ")", ".", "sum", "(", ")", ",", "all_f", ")", "[", "0", "]", "\n", "\n", "# Equation (2): compute top-gradient-percentile mask", "\n", "percentiles", "=", "np", ".", "percentile", "(", "all_g", ".", "cpu", "(", ")", ",", "self", ".", "drop_f", ",", "axis", "=", "1", ")", "\n", "percentiles", "=", "torch", ".", "Tensor", "(", "percentiles", ")", "\n", "percentiles", "=", "percentiles", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "all_g", ".", "size", "(", "1", ")", ")", "\n", "mask_f", "=", "all_g", ".", "lt", "(", "percentiles", ".", "to", "(", "device", ")", ")", ".", "float", "(", ")", "\n", "\n", "# Equation (3): mute top-gradient-percentile activations", "\n", "all_f_muted", "=", "all_f", "*", "mask_f", "\n", "\n", "# Equation (4): compute muted predictions", "\n", "all_p_muted", "=", "self", ".", "classifier", "(", "all_f_muted", ")", "\n", "\n", "# Section 3.3: Batch Percentage", "\n", "all_s", "=", "F", ".", "softmax", "(", "all_p", ",", "dim", "=", "1", ")", "\n", "all_s_muted", "=", "F", ".", "softmax", "(", "all_p_muted", ",", "dim", "=", "1", ")", "\n", "changes", "=", "(", "all_s", "*", "all_o", ")", ".", "sum", "(", "1", ")", "-", "(", "all_s_muted", "*", "all_o", ")", ".", "sum", "(", "1", ")", "\n", "percentile", "=", "np", ".", "percentile", "(", "changes", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "self", ".", "drop_b", ")", "\n", "mask_b", "=", "changes", ".", "lt", "(", "percentile", ")", ".", "float", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "mask", "=", "torch", ".", "logical_or", "(", "mask_f", ",", "mask_b", ")", ".", "float", "(", ")", "\n", "\n", "# Equations (3) and (4) again, this time mutting over examples", "\n", "all_p_muted_again", "=", "self", ".", "classifier", "(", "all_f", "*", "mask", ")", "\n", "\n", "# Equation (5): update", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "all_p_muted_again", ",", "all_y", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SD.__init__": [[912, 915], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "SD", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "self", ".", "sd_reg", "=", "hparams", "[", "\"sd_reg\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SD.update": [[916, 930], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.SD.predict", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.SD.optimizer.zero_grad", "objective.backward", "algorithms.SD.optimizer.step", "torch.cross_entropy.item", "penalty.item"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr.predict"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_p", "=", "self", ".", "predict", "(", "all_x", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "all_p", ",", "all_y", ")", "\n", "penalty", "=", "(", "all_p", "**", "2", ")", ".", "mean", "(", ")", "\n", "objective", "=", "loss", "+", "self", ".", "sd_reg", "*", "penalty", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "objective", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", ",", "'penalty'", ":", "penalty", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.ANDMask.__init__": [[938, 942], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "ANDMask", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "\n", "self", ".", "tau", "=", "hparams", "[", "\"tau\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.ANDMask.update": [[943, 961], ["enumerate", "algorithms.ANDMask.optimizer.zero_grad", "algorithms.ANDMask.mask_grads", "algorithms.ANDMask.optimizer.step", "algorithms.ANDMask.network", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "zip", "algorithms.ANDMask.network.parameters", "algorithms.ANDMask.network.parameters", "torch.cross_entropy.item", "len", "algorithms.ANDMask.network.parameters", "grads.append"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SANDMask.mask_grads", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "        ", "mean_loss", "=", "0", "\n", "param_gradients", "=", "[", "[", "]", "for", "_", "in", "self", ".", "network", ".", "parameters", "(", ")", "]", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "minibatches", ")", ":", "\n", "            ", "logits", "=", "self", ".", "network", "(", "x", ")", "\n", "\n", "env_loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "mean_loss", "+=", "env_loss", ".", "item", "(", ")", "/", "len", "(", "minibatches", ")", "\n", "\n", "env_grads", "=", "autograd", ".", "grad", "(", "env_loss", ",", "self", ".", "network", ".", "parameters", "(", ")", ")", "\n", "for", "grads", ",", "env_grad", "in", "zip", "(", "param_gradients", ",", "env_grads", ")", ":", "\n", "                ", "grads", ".", "append", "(", "env_grad", ")", "\n", "\n", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "self", ".", "mask_grads", "(", "self", ".", "tau", ",", "param_gradients", ",", "self", ".", "network", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "mean_loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.ANDMask.mask_grads": [[962, 976], ["zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "mask.to.to.to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "torch.mean().abs", "mask.to.to.sum", "mask.to.to.numel", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean"], ["", "def", "mask_grads", "(", "self", ",", "tau", ",", "gradients", ",", "params", ")", ":", "\n", "\n", "        ", "for", "param", ",", "grads", "in", "zip", "(", "params", ",", "gradients", ")", ":", "\n", "            ", "grads", "=", "torch", ".", "stack", "(", "grads", ",", "dim", "=", "0", ")", "\n", "grad_signs", "=", "torch", ".", "sign", "(", "grads", ")", "\n", "mask", "=", "torch", ".", "mean", "(", "grad_signs", ",", "dim", "=", "0", ")", ".", "abs", "(", ")", ">=", "self", ".", "tau", "\n", "mask", "=", "mask", ".", "to", "(", "torch", ".", "float32", ")", "\n", "avg_grad", "=", "torch", ".", "mean", "(", "grads", ",", "dim", "=", "0", ")", "\n", "\n", "mask_t", "=", "(", "mask", ".", "sum", "(", ")", "/", "mask", ".", "numel", "(", ")", ")", "\n", "param", ".", "grad", "=", "mask", "*", "avg_grad", "\n", "param", ".", "grad", "*=", "(", "1.", "/", "(", "1e-10", "+", "mask_t", ")", ")", "\n", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.IGA.__init__": [[984, 986], ["algorithms.ERM.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "in_features", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "IGA", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.IGA.update": [[987, 1016], ["enumerate", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "algorithms.IGA.optimizer.zero_grad", "objective.backward", "algorithms.IGA.optimizer.step", "algorithms.IGA.network", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "grads.append", "len", "algorithms.IGA.network.parameters", "zip", "mean_loss.item", "penalty_value.item", "algorithms.IGA.network.parameters"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "False", ")", ":", "\n", "        ", "total_loss", "=", "0", "\n", "grads", "=", "[", "]", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "minibatches", ")", ":", "\n", "            ", "logits", "=", "self", ".", "network", "(", "x", ")", "\n", "\n", "env_loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "total_loss", "+=", "env_loss", "\n", "\n", "env_grad", "=", "autograd", ".", "grad", "(", "env_loss", ",", "self", ".", "network", ".", "parameters", "(", ")", ",", "create_graph", "=", "True", ")", "\n", "\n", "grads", ".", "append", "(", "env_grad", ")", "\n", "\n", "", "mean_loss", "=", "total_loss", "/", "len", "(", "minibatches", ")", "\n", "mean_grad", "=", "autograd", ".", "grad", "(", "mean_loss", ",", "self", ".", "network", ".", "parameters", "(", ")", ",", "retain_graph", "=", "True", ")", "\n", "\n", "# compute trace penalty", "\n", "penalty_value", "=", "0", "\n", "for", "grad", "in", "grads", ":", "\n", "            ", "for", "g", ",", "mean_g", "in", "zip", "(", "grad", ",", "mean_grad", ")", ":", "\n", "                ", "penalty_value", "+=", "(", "g", "-", "mean_g", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "objective", "=", "mean_loss", "+", "self", ".", "hparams", "[", "'penalty'", "]", "*", "penalty_value", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "objective", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "mean_loss", ".", "item", "(", ")", ",", "'penalty'", ":", "penalty_value", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SelfReg.__init__": [[1020, 1032], ["algorithms.ERM.__init__", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "SelfReg", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "MSEloss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "input_feat_size", "=", "self", ".", "featurizer", ".", "n_outputs", "\n", "hidden_size", "=", "input_feat_size", "if", "input_feat_size", "==", "2048", "else", "input_feat_size", "*", "2", "\n", "\n", "self", ".", "cdpl", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_feat_size", ",", "hidden_size", ")", ",", "nn", ".", "BatchNorm1d", "(", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ",", "nn", ".", "BatchNorm1d", "(", "hidden_size", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "nn", ".", "Linear", "(", "hidden_size", ",", "input_feat_size", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "input_feat_size", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SelfReg.update": [[1034, 1103], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.random.beta", "algorithms.SelfReg.featurizer", "algorithms.SelfReg.cdpl", "algorithms.SelfReg.classifier", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "algorithms.SelfReg.MSEloss", "algorithms.SelfReg.MSEloss", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "min", "algorithms.SelfReg.optimizer.zero_grad", "loss.backward", "algorithms.SelfReg.optimizer.step", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "enumerate", "enumerate", "intervals.append", "range", "algorithms.SelfReg.MSEloss", "algorithms.SelfReg.MSEloss", "torch.cross_entropy.item", "loss.item", "intervals.append", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.min"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "\n", "        ", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "_", ",", "y", "in", "minibatches", "]", ")", "\n", "\n", "lam", "=", "np", ".", "random", ".", "beta", "(", "0.5", ",", "0.5", ")", "\n", "\n", "batch_size", "=", "all_y", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "# cluster and order features into same-class group", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sorted_y", ",", "indices", "=", "torch", ".", "sort", "(", "all_y", ")", "\n", "sorted_x", "=", "torch", ".", "zeros_like", "(", "all_x", ")", "\n", "for", "idx", ",", "order", "in", "enumerate", "(", "indices", ")", ":", "\n", "                ", "sorted_x", "[", "idx", "]", "=", "all_x", "[", "order", "]", "\n", "", "intervals", "=", "[", "]", "\n", "ex", "=", "0", "\n", "for", "idx", ",", "val", "in", "enumerate", "(", "sorted_y", ")", ":", "\n", "                ", "if", "ex", "==", "val", ":", "\n", "                    ", "continue", "\n", "", "intervals", ".", "append", "(", "idx", ")", "\n", "ex", "=", "val", "\n", "", "intervals", ".", "append", "(", "batch_size", ")", "\n", "\n", "all_x", "=", "sorted_x", "\n", "all_y", "=", "sorted_y", "\n", "\n", "", "feat", "=", "self", ".", "featurizer", "(", "all_x", ")", "\n", "proj", "=", "self", ".", "cdpl", "(", "feat", ")", "\n", "\n", "output", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "\n", "# shuffle", "\n", "output_2", "=", "torch", ".", "zeros_like", "(", "output", ")", "\n", "feat_2", "=", "torch", ".", "zeros_like", "(", "proj", ")", "\n", "output_3", "=", "torch", ".", "zeros_like", "(", "output", ")", "\n", "feat_3", "=", "torch", ".", "zeros_like", "(", "proj", ")", "\n", "ex", "=", "0", "\n", "for", "end", "in", "intervals", ":", "\n", "            ", "shuffle_indices", "=", "torch", ".", "randperm", "(", "end", "-", "ex", ")", "+", "ex", "\n", "shuffle_indices2", "=", "torch", ".", "randperm", "(", "end", "-", "ex", ")", "+", "ex", "\n", "for", "idx", "in", "range", "(", "end", "-", "ex", ")", ":", "\n", "                ", "output_2", "[", "idx", "+", "ex", "]", "=", "output", "[", "shuffle_indices", "[", "idx", "]", "]", "\n", "feat_2", "[", "idx", "+", "ex", "]", "=", "proj", "[", "shuffle_indices", "[", "idx", "]", "]", "\n", "output_3", "[", "idx", "+", "ex", "]", "=", "output", "[", "shuffle_indices2", "[", "idx", "]", "]", "\n", "feat_3", "[", "idx", "+", "ex", "]", "=", "proj", "[", "shuffle_indices2", "[", "idx", "]", "]", "\n", "", "ex", "=", "end", "\n", "\n", "# mixup", "\n", "", "output_3", "=", "lam", "*", "output_2", "+", "(", "1", "-", "lam", ")", "*", "output_3", "\n", "feat_3", "=", "lam", "*", "feat_2", "+", "(", "1", "-", "lam", ")", "*", "feat_3", "\n", "\n", "# regularization", "\n", "L_ind_logit", "=", "self", ".", "MSEloss", "(", "output", ",", "output_2", ")", "\n", "L_hdl_logit", "=", "self", ".", "MSEloss", "(", "output", ",", "output_3", ")", "\n", "L_ind_feat", "=", "0.3", "*", "self", ".", "MSEloss", "(", "feat", ",", "feat_2", ")", "\n", "L_hdl_feat", "=", "0.3", "*", "self", ".", "MSEloss", "(", "feat", ",", "feat_3", ")", "\n", "\n", "cl_loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "all_y", ")", "\n", "C_scale", "=", "min", "(", "cl_loss", ".", "item", "(", ")", ",", "1.", ")", "\n", "loss", "=", "cl_loss", "+", "C_scale", "*", "(", "\n", "lam", "*", "(", "L_ind_logit", "+", "L_ind_feat", ")", "+", "(", "1", "-", "lam", ")", "*", "(", "L_hdl_logit", "+", "L_hdl_feat", ")", "\n", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SANDMask.__init__": [[1111, 1125], ["algorithms.ERM.__init__", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "algorithms.SANDMask.register_buffer", "algorithms.SANDMask.network.parameters", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "SANDMask", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "\n", "self", ".", "tau", "=", "hparams", "[", "\"tau\"", "]", "\n", "self", ".", "k", "=", "hparams", "[", "\"k\"", "]", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "network", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "'weight_decay'", "]", ",", "\n", "betas", "=", "betas", "\n", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'update_count'", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SANDMask.update": [[1126, 1146], ["enumerate", "algorithms.SANDMask.optimizer.zero_grad", "algorithms.SANDMask.mask_grads", "algorithms.SANDMask.optimizer.step", "algorithms.SANDMask.network", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.grad", "torch.grad", "torch.grad", "torch.grad", "zip", "algorithms.SANDMask.network.parameters", "algorithms.SANDMask.network.parameters", "torch.cross_entropy.item", "len", "algorithms.SANDMask.network.parameters", "grads.append"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SANDMask.mask_grads", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "None", ")", ":", "\n", "\n", "        ", "mean_loss", "=", "0", "\n", "param_gradients", "=", "[", "[", "]", "for", "_", "in", "self", ".", "network", ".", "parameters", "(", ")", "]", "\n", "for", "i", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "minibatches", ")", ":", "\n", "            ", "logits", "=", "self", ".", "network", "(", "x", ")", "\n", "\n", "env_loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ")", "\n", "mean_loss", "+=", "env_loss", ".", "item", "(", ")", "/", "len", "(", "minibatches", ")", "\n", "env_grads", "=", "autograd", ".", "grad", "(", "env_loss", ",", "self", ".", "network", ".", "parameters", "(", ")", ",", "retain_graph", "=", "True", ")", "\n", "for", "grads", ",", "env_grad", "in", "zip", "(", "param_gradients", ",", "env_grads", ")", ":", "\n", "                ", "grads", ".", "append", "(", "env_grad", ")", "\n", "\n", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "# gradient masking applied here", "\n", "self", ".", "mask_grads", "(", "param_gradients", ",", "self", ".", "network", ".", "parameters", "(", ")", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "update_count", "+=", "1", "\n", "\n", "return", "{", "'loss'", ":", "mean_loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.SANDMask.mask_grads": [[1147, 1167], ["zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.stack.var", "torch.stack.var", "torch.stack.var", "torch.stack.var", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.max.sum", "torch.max.sum", "torch.max.sum", "torch.max.sum", "torch.max.numel", "torch.max.numel", "torch.max.numel", "torch.max.numel", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sign.mean", "torch.sign.mean", "torch.sign.mean", "torch.sign.mean"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean"], ["", "def", "mask_grads", "(", "self", ",", "gradients", ",", "params", ")", ":", "\n", "        ", "'''\n        Here a mask with continuous values in the range [0,1] is formed to control the amount of update for each\n        parameter based on the agreement of gradients coming from different environments.\n        '''", "\n", "device", "=", "gradients", "[", "0", "]", "[", "0", "]", ".", "device", "\n", "for", "param", ",", "grads", "in", "zip", "(", "params", ",", "gradients", ")", ":", "\n", "            ", "grads", "=", "torch", ".", "stack", "(", "grads", ",", "dim", "=", "0", ")", "\n", "avg_grad", "=", "torch", ".", "mean", "(", "grads", ",", "dim", "=", "0", ")", "\n", "grad_signs", "=", "torch", ".", "sign", "(", "grads", ")", "\n", "gamma", "=", "torch", ".", "tensor", "(", "1.0", ")", ".", "to", "(", "device", ")", "\n", "grads_var", "=", "grads", ".", "var", "(", "dim", "=", "0", ")", "\n", "grads_var", "[", "torch", ".", "isnan", "(", "grads_var", ")", "]", "=", "1e-17", "\n", "lam", "=", "(", "gamma", "*", "grads_var", ")", ".", "pow", "(", "-", "1", ")", "\n", "mask", "=", "torch", ".", "tanh", "(", "self", ".", "k", "*", "lam", "*", "(", "torch", ".", "abs", "(", "grad_signs", ".", "mean", "(", "dim", "=", "0", ")", ")", "-", "self", ".", "tau", ")", ")", "\n", "mask", "=", "torch", ".", "max", "(", "mask", ",", "torch", ".", "zeros_like", "(", "mask", ")", ")", "\n", "mask", "[", "torch", ".", "isnan", "(", "mask", ")", "]", "=", "1e-17", "\n", "mask_t", "=", "(", "mask", ".", "sum", "(", ")", "/", "mask", ".", "numel", "(", ")", ")", "\n", "param", ".", "grad", "=", "mask", "*", "avg_grad", "\n", "param", ".", "grad", "*=", "(", "1.", "/", "(", "1e-10", "+", "mask_t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr.__init__": [[1172, 1194], ["algorithms.Algorithm.__init__", "domainbed.networks.Featurizer", "extend", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "algorithms.Fishr.register_buffer", "extend", "algorithms.Fishr._init_optimizer", "domainbed.networks.Classifier", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "domainbed.lib.misc.MovingAverage", "range"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Featurizer", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr._init_optimizer", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.Classifier"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", ":", "\n", "        ", "assert", "backpack", "is", "not", "None", ",", "\"Install backpack with: 'pip install backpack-for-pytorch==1.3.0'\"", "\n", "super", "(", "Fishr", ",", "self", ")", ".", "__init__", "(", "input_shape", ",", "num_classes", ",", "num_domains", ",", "hparams", ")", "\n", "self", ".", "num_domains", "=", "num_domains", "\n", "\n", "self", ".", "featurizer", "=", "networks", ".", "Featurizer", "(", "input_shape", ",", "self", ".", "hparams", ")", "\n", "self", ".", "classifier", "=", "extend", "(", "\n", "networks", ".", "Classifier", "(", "\n", "self", ".", "featurizer", ".", "n_outputs", ",", "\n", "num_classes", ",", "\n", "self", ".", "hparams", "[", "'nonlinear_classifier'", "]", ",", "\n", ")", "\n", ")", "\n", "self", ".", "network", "=", "nn", ".", "Sequential", "(", "self", ".", "featurizer", ",", "self", ".", "classifier", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"update_count\"", ",", "torch", ".", "tensor", "(", "[", "0", "]", ")", ")", "\n", "self", ".", "bce_extended", "=", "extend", "(", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", ")", "\n", "self", ".", "ema_per_domain", "=", "[", "\n", "MovingAverage", "(", "ema", "=", "self", ".", "hparams", "[", "\"ema\"", "]", ",", "oneminusema_correction", "=", "True", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_domains", ")", "\n", "]", "\n", "self", ".", "_init_optimizer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr._init_optimizer": [[1195, 1200], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "list", "list", "algorithms.Fishr.featurizer.parameters", "algorithms.Fishr.classifier.parameters"], "methods", ["None"], ["", "def", "_init_optimizer", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "list", "(", "self", ".", "featurizer", ".", "parameters", "(", ")", ")", "+", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "self", ".", "hparams", "[", "\"lr\"", "]", ",", "\n", "weight_decay", "=", "self", ".", "hparams", "[", "\"weight_decay\"", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr.update": [[1202, 1229], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "algorithms.Fishr.featurizer", "algorithms.Fishr.classifier", "algorithms.Fishr.compute_fishr_penalty", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "algorithms.Fishr.optimizer.zero_grad", "objective.backward", "algorithms.Fishr.optimizer.step", "len", "objective.item", "torch.cross_entropy.item", "algorithms.Fishr.item", "algorithms.Fishr._init_optimizer"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr.compute_fishr_penalty", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr._init_optimizer"], ["", "def", "update", "(", "self", ",", "minibatches", ",", "unlabeled", "=", "False", ")", ":", "\n", "        ", "assert", "len", "(", "minibatches", ")", "==", "self", ".", "num_domains", "\n", "all_x", "=", "torch", ".", "cat", "(", "[", "x", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "all_y", "=", "torch", ".", "cat", "(", "[", "y", "for", "x", ",", "y", "in", "minibatches", "]", ")", "\n", "len_minibatches", "=", "[", "x", ".", "shape", "[", "0", "]", "for", "x", ",", "y", "in", "minibatches", "]", "\n", "\n", "all_z", "=", "self", ".", "featurizer", "(", "all_x", ")", "\n", "all_logits", "=", "self", ".", "classifier", "(", "all_z", ")", "\n", "\n", "penalty", "=", "self", ".", "compute_fishr_penalty", "(", "all_logits", ",", "all_y", ",", "len_minibatches", ")", "\n", "all_nll", "=", "F", ".", "cross_entropy", "(", "all_logits", ",", "all_y", ")", "\n", "\n", "penalty_weight", "=", "0", "\n", "if", "self", ".", "update_count", ">=", "self", ".", "hparams", "[", "\"penalty_anneal_iters\"", "]", ":", "\n", "            ", "penalty_weight", "=", "self", ".", "hparams", "[", "\"lambda\"", "]", "\n", "if", "self", ".", "update_count", "==", "self", ".", "hparams", "[", "\"penalty_anneal_iters\"", "]", "!=", "0", ":", "\n", "# Reset Adam as in IRM or V-REx, because it may not like the sharp jump in", "\n", "# gradient magnitudes that happens at this step.", "\n", "                ", "self", ".", "_init_optimizer", "(", ")", "\n", "", "", "self", ".", "update_count", "+=", "1", "\n", "\n", "objective", "=", "all_nll", "+", "penalty_weight", "*", "penalty", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "objective", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "return", "{", "'loss'", ":", "objective", ".", "item", "(", ")", ",", "'nll'", ":", "all_nll", ".", "item", "(", ")", ",", "'penalty'", ":", "penalty", ".", "item", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr.compute_fishr_penalty": [[1230, 1234], ["algorithms.Fishr._get_grads", "algorithms.Fishr._get_grads_var_per_domain", "algorithms.Fishr._compute_distance_grads_var"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr._get_grads", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr._get_grads_var_per_domain", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr._compute_distance_grads_var"], ["", "def", "compute_fishr_penalty", "(", "self", ",", "all_logits", ",", "all_y", ",", "len_minibatches", ")", ":", "\n", "        ", "dict_grads", "=", "self", ".", "_get_grads", "(", "all_logits", ",", "all_y", ")", "\n", "grads_var_per_domain", "=", "self", ".", "_get_grads_var_per_domain", "(", "dict_grads", ",", "len_minibatches", ")", "\n", "return", "self", ".", "_compute_distance_grads_var", "(", "grads_var_per_domain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr._get_grads": [[1235, 1251], ["algorithms.Fishr.optimizer.zero_grad", "algorithms.Fishr.bce_extended().sum", "collections.OrderedDict", "backpack", "algorithms.Fishr.backward", "algorithms.Fishr.bce_extended", "BatchGrad", "list", "weights.grad_batch.clone().view", "algorithms.Fishr.classifier.named_parameters", "algorithms.Fishr.classifier.parameters", "weights.grad_batch.size", "weights.grad_batch.clone"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum"], ["", "def", "_get_grads", "(", "self", ",", "logits", ",", "y", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "self", ".", "bce_extended", "(", "logits", ",", "y", ")", ".", "sum", "(", ")", "\n", "with", "backpack", "(", "BatchGrad", "(", ")", ")", ":", "\n", "            ", "loss", ".", "backward", "(", "\n", "inputs", "=", "list", "(", "self", ".", "classifier", ".", "parameters", "(", ")", ")", ",", "retain_graph", "=", "True", ",", "create_graph", "=", "True", "\n", ")", "\n", "\n", "# compute individual grads for all samples across all domains simultaneously", "\n", "", "dict_grads", "=", "OrderedDict", "(", "\n", "[", "\n", "(", "name", ",", "weights", ".", "grad_batch", ".", "clone", "(", ")", ".", "view", "(", "weights", ".", "grad_batch", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "for", "name", ",", "weights", "in", "self", ".", "classifier", ".", "named_parameters", "(", ")", "\n", "]", "\n", ")", "\n", "return", "dict_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr._get_grads_var_per_domain": [[1252, 1271], ["dict_grads.items", "range", "enumerate", "algorithms.Fishr.ema_per_domain[].update", "range", "env_grads.mean", "env_grads_centered.pow().mean", "env_grads_centered.pow"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.MovingAverage.update", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean"], ["", "def", "_get_grads_var_per_domain", "(", "self", ",", "dict_grads", ",", "len_minibatches", ")", ":", "\n", "# grads var per domain", "\n", "        ", "grads_var_per_domain", "=", "[", "{", "}", "for", "_", "in", "range", "(", "self", ".", "num_domains", ")", "]", "\n", "for", "name", ",", "_grads", "in", "dict_grads", ".", "items", "(", ")", ":", "\n", "            ", "all_idx", "=", "0", "\n", "for", "domain_id", ",", "bsize", "in", "enumerate", "(", "len_minibatches", ")", ":", "\n", "                ", "env_grads", "=", "_grads", "[", "all_idx", ":", "all_idx", "+", "bsize", "]", "\n", "all_idx", "+=", "bsize", "\n", "env_mean", "=", "env_grads", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "\n", "env_grads_centered", "=", "env_grads", "-", "env_mean", "\n", "grads_var_per_domain", "[", "domain_id", "]", "[", "name", "]", "=", "(", "env_grads_centered", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "\n", "# moving average", "\n", "", "", "for", "domain_id", "in", "range", "(", "self", ".", "num_domains", ")", ":", "\n", "            ", "grads_var_per_domain", "[", "domain_id", "]", "=", "self", ".", "ema_per_domain", "[", "domain_id", "]", ".", "update", "(", "\n", "grads_var_per_domain", "[", "domain_id", "]", "\n", ")", "\n", "\n", "", "return", "grads_var_per_domain", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr._compute_distance_grads_var": [[1272, 1295], ["collections.OrderedDict", "range", "domainbed.lib.misc.l2_between_dicts", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "grads_var_per_domain[].keys", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.l2_between_dicts", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean"], ["", "def", "_compute_distance_grads_var", "(", "self", ",", "grads_var_per_domain", ")", ":", "\n", "\n", "# compute gradient variances averaged across domains", "\n", "        ", "grads_var", "=", "OrderedDict", "(", "\n", "[", "\n", "(", "\n", "name", ",", "\n", "torch", ".", "stack", "(", "\n", "[", "\n", "grads_var_per_domain", "[", "domain_id", "]", "[", "name", "]", "\n", "for", "domain_id", "in", "range", "(", "self", ".", "num_domains", ")", "\n", "]", ",", "\n", "dim", "=", "0", "\n", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", ")", "\n", "for", "name", "in", "grads_var_per_domain", "[", "0", "]", ".", "keys", "(", ")", "\n", "]", "\n", ")", "\n", "\n", "penalty", "=", "0", "\n", "for", "domain_id", "in", "range", "(", "self", ".", "num_domains", ")", ":", "\n", "            ", "penalty", "+=", "l2_between_dicts", "(", "grads_var_per_domain", "[", "domain_id", "]", ",", "grads_var", ")", "\n", "", "return", "penalty", "/", "self", ".", "num_domains", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr.predict": [[1296, 1298], ["algorithms.Fishr.network"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "network", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.get_algorithm_class": [[48, 53], ["globals", "NotImplementedError", "globals"], "function", ["None"], ["def", "get_algorithm_class", "(", "algorithm_name", ")", ":", "\n", "    ", "\"\"\"Return the algorithm class with the given name.\"\"\"", "\n", "if", "algorithm_name", "not", "in", "globals", "(", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Algorithm not found: {}\"", ".", "format", "(", "algorithm_name", ")", ")", "\n", "", "return", "globals", "(", ")", "[", "algorithm_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.MultipleDomainDataset.__getitem__": [[54, 56], ["None"], "methods", ["None"], ["def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.MultipleDomainDataset.__len__": [[57, 59], ["len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.Debug.__init__": [[62, 72], ["super().__init__", "datasets.Debug.datasets.append", "torch.utils.data.TensorDataset", "torch.randn", "torch.randint"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_shape", "=", "self", ".", "INPUT_SHAPE", "\n", "self", ".", "num_classes", "=", "2", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "for", "_", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "            ", "self", ".", "datasets", ".", "append", "(", "\n", "TensorDataset", "(", "\n", "torch", ".", "randn", "(", "16", ",", "*", "self", ".", "INPUT_SHAPE", ")", ",", "\n", "torch", ".", "randint", "(", "0", ",", "self", ".", "num_classes", ",", "(", "16", ",", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.MultipleEnvironmentMNIST.__init__": [[85, 114], ["super().__init__", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.cat", "torch.cat", "torch.randperm", "range", "ValueError", "len", "len", "datasets.MultipleEnvironmentMNIST.datasets.append", "dataset_transform", "len", "len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "environments", ",", "dataset_transform", ",", "input_shape", ",", "\n", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "root", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Data directory not specified!'", ")", "\n", "\n", "", "original_dataset_tr", "=", "MNIST", "(", "root", ",", "train", "=", "True", ",", "download", "=", "True", ")", "\n", "original_dataset_te", "=", "MNIST", "(", "root", ",", "train", "=", "False", ",", "download", "=", "True", ")", "\n", "\n", "original_images", "=", "torch", ".", "cat", "(", "(", "original_dataset_tr", ".", "data", ",", "\n", "original_dataset_te", ".", "data", ")", ")", "\n", "\n", "original_labels", "=", "torch", ".", "cat", "(", "(", "original_dataset_tr", ".", "targets", ",", "\n", "original_dataset_te", ".", "targets", ")", ")", "\n", "\n", "shuffle", "=", "torch", ".", "randperm", "(", "len", "(", "original_images", ")", ")", "\n", "\n", "original_images", "=", "original_images", "[", "shuffle", "]", "\n", "original_labels", "=", "original_labels", "[", "shuffle", "]", "\n", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "environments", ")", ")", ":", "\n", "            ", "images", "=", "original_images", "[", "i", ":", ":", "len", "(", "environments", ")", "]", "\n", "labels", "=", "original_labels", "[", "i", ":", ":", "len", "(", "environments", ")", "]", "\n", "self", ".", "datasets", ".", "append", "(", "dataset_transform", "(", "images", ",", "labels", ",", "environments", "[", "i", "]", ")", ")", "\n", "\n", "", "self", ".", "input_shape", "=", "input_shape", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.ColoredMNIST.__init__": [[119, 125], ["datasets.MultipleEnvironmentMNIST.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "ColoredMNIST", ",", "self", ")", ".", "__init__", "(", "root", ",", "[", "0.1", ",", "0.2", ",", "0.9", "]", ",", "\n", "self", ".", "color_dataset", ",", "(", "2", ",", "28", ",", "28", ",", ")", ",", "2", ")", "\n", "\n", "self", ".", "input_shape", "=", "(", "2", ",", "28", ",", "28", ",", ")", "\n", "self", ".", "num_classes", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.ColoredMNIST.color_dataset": [[126, 148], ["datasets.ColoredMNIST.torch_xor_", "datasets.ColoredMNIST.torch_xor_", "torch.stack", "torch.stack.float().div_", "datasets.ColoredMNIST.view().long", "torch.utils.data.TensorDataset", "datasets.ColoredMNIST.torch_bernoulli_", "datasets.ColoredMNIST.torch_bernoulli_", "len", "len", "torch.stack.float", "datasets.ColoredMNIST.view", "torch.tensor", "range", "len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.ColoredMNIST.torch_xor_", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.ColoredMNIST.torch_xor_", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.ColoredMNIST.torch_bernoulli_", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.ColoredMNIST.torch_bernoulli_", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "color_dataset", "(", "self", ",", "images", ",", "labels", ",", "environment", ")", ":", "\n", "# # Subsample 2x for computational convenience", "\n", "# images = images.reshape((-1, 28, 28))[:, ::2, ::2]", "\n", "# Assign a binary label based on the digit", "\n", "        ", "labels", "=", "(", "labels", "<", "5", ")", ".", "float", "(", ")", "\n", "# Flip label with probability 0.25", "\n", "labels", "=", "self", ".", "torch_xor_", "(", "labels", ",", "\n", "self", ".", "torch_bernoulli_", "(", "0.25", ",", "len", "(", "labels", ")", ")", ")", "\n", "\n", "# Assign a color based on the label; flip the color with probability e", "\n", "colors", "=", "self", ".", "torch_xor_", "(", "labels", ",", "\n", "self", ".", "torch_bernoulli_", "(", "environment", ",", "\n", "len", "(", "labels", ")", ")", ")", "\n", "images", "=", "torch", ".", "stack", "(", "[", "images", ",", "images", "]", ",", "dim", "=", "1", ")", "\n", "# Apply the color to the image by zeroing out the other color channel", "\n", "images", "[", "torch", ".", "tensor", "(", "range", "(", "len", "(", "images", ")", ")", ")", ",", "(", "\n", "1", "-", "colors", ")", ".", "long", "(", ")", ",", ":", ",", ":", "]", "*=", "0", "\n", "\n", "x", "=", "images", ".", "float", "(", ")", ".", "div_", "(", "255.0", ")", "\n", "y", "=", "labels", ".", "view", "(", "-", "1", ")", ".", "long", "(", ")", "\n", "\n", "return", "TensorDataset", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.ColoredMNIST.torch_bernoulli_": [[149, 151], ["torch.rand"], "methods", ["None"], ["", "def", "torch_bernoulli_", "(", "self", ",", "p", ",", "size", ")", ":", "\n", "        ", "return", "(", "torch", ".", "rand", "(", "size", ")", "<", "p", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.ColoredMNIST.torch_xor_": [[152, 154], ["None"], "methods", ["None"], ["", "def", "torch_xor_", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "(", "a", "-", "b", ")", ".", "abs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.RotatedMNIST.__init__": [[159, 162], ["datasets.MultipleEnvironmentMNIST.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "super", "(", "RotatedMNIST", ",", "self", ")", ".", "__init__", "(", "root", ",", "[", "0", ",", "15", ",", "30", ",", "45", ",", "60", ",", "75", "]", ",", "\n", "self", ".", "rotate_dataset", ",", "(", "1", ",", "28", ",", "28", ",", ")", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.RotatedMNIST.rotate_dataset": [[163, 177], ["torchvision.transforms.Compose", "torch.zeros", "range", "labels.view", "torch.utils.data.TensorDataset", "len", "len", "torchvision.transforms.Compose.", "torchvision.transforms.ToPILImage", "torchvision.transforms.Lambda", "torchvision.transforms.ToTensor", "torchvision.transforms.functional.rotate"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "rotate_dataset", "(", "self", ",", "images", ",", "labels", ",", "angle", ")", ":", "\n", "        ", "rotation", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Lambda", "(", "lambda", "x", ":", "rotate", "(", "x", ",", "angle", ",", "fill", "=", "(", "0", ",", ")", ",", "\n", "interpolation", "=", "torchvision", ".", "transforms", ".", "InterpolationMode", ".", "BILINEAR", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "]", ")", "\n", "\n", "x", "=", "torch", ".", "zeros", "(", "len", "(", "images", ")", ",", "1", ",", "28", ",", "28", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "            ", "x", "[", "i", "]", "=", "rotation", "(", "images", "[", "i", "]", ")", "\n", "\n", "", "y", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "\n", "return", "TensorDataset", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.MultipleEnvironmentImageFolder.__init__": [[180, 219], ["super().__init__", "sorted", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "enumerate", "len", "os.path.join", "torchvision.datasets.ImageFolder", "datasets.MultipleEnvironmentImageFolder.datasets.append", "os.scandir", "f.is_dir", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.RandomGrayscale", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sorted", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "augment", ",", "hparams", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "environments", "=", "[", "f", ".", "name", "for", "f", "in", "os", ".", "scandir", "(", "root", ")", "if", "f", ".", "is_dir", "(", ")", "]", "\n", "environments", "=", "sorted", "(", "environments", ")", "\n", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "augment_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "# transforms.Resize((224,224)),", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "0.7", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.3", ",", "0.3", ",", "0.3", ",", "0.3", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "]", ")", "\n", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "for", "i", ",", "environment", "in", "enumerate", "(", "environments", ")", ":", "\n", "\n", "            ", "if", "augment", "and", "(", "i", "not", "in", "test_envs", ")", ":", "\n", "                ", "env_transform", "=", "augment_transform", "\n", "", "else", ":", "\n", "                ", "env_transform", "=", "transform", "\n", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "environment", ")", "\n", "env_dataset", "=", "ImageFolder", "(", "path", ",", "\n", "transform", "=", "env_transform", ")", "\n", "\n", "self", ".", "datasets", ".", "append", "(", "env_dataset", ")", "\n", "\n", "", "self", ".", "input_shape", "=", "(", "3", ",", "224", ",", "224", ",", ")", "\n", "self", ".", "num_classes", "=", "len", "(", "self", ".", "datasets", "[", "-", "1", "]", ".", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.VLCS.__init__": [[223, 226], ["os.path.join", "datasets.MultipleEnvironmentImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"VLCS/\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dir", ",", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.PACS.__init__": [[230, 233], ["os.path.join", "datasets.MultipleEnvironmentImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"PACS/\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dir", ",", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.DomainNet.__init__": [[237, 240], ["os.path.join", "datasets.MultipleEnvironmentImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"domain_net/\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dir", ",", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.OfficeHome.__init__": [[244, 247], ["os.path.join", "datasets.MultipleEnvironmentImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"office_home/\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dir", ",", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.TerraIncognita.__init__": [[251, 254], ["os.path.join", "datasets.MultipleEnvironmentImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "root", ",", "test_envs", ",", "hparams", ")", ":", "\n", "        ", "self", ".", "dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"terra_incognita/\"", ")", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dir", ",", "test_envs", ",", "hparams", "[", "'data_augmentation'", "]", ",", "hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.get_dataset_class": [[36, 41], ["globals", "NotImplementedError", "globals"], "function", ["None"], ["def", "get_dataset_class", "(", "dataset_name", ")", ":", "\n", "    ", "\"\"\"Return the dataset class with the given name.\"\"\"", "\n", "if", "dataset_name", "not", "in", "globals", "(", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Dataset not found: {}\"", ".", "format", "(", "dataset_name", ")", ")", "\n", "", "return", "globals", "(", ")", "[", "dataset_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.num_environments": [[43, 45], ["len", "datasets.get_dataset_class"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.get_dataset_class"], ["", "def", "num_environments", "(", "dataset_name", ")", ":", "\n", "    ", "return", "len", "(", "get_dataset_class", "(", "dataset_name", ")", ".", "ENVIRONMENTS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.fast_data_loader._InfiniteSampler.__init__": [[7, 9], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ")", ":", "\n", "        ", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.fast_data_loader._InfiniteSampler.__iter__": [[10, 14], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "for", "batch", "in", "self", ".", "sampler", ":", "\n", "                ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.fast_data_loader.InfiniteDataLoader.__init__": [[16, 39], ["super().__init__", "torch.utils.data.BatchSampler", "iter", "torch.utils.data.WeightedRandomSampler", "torch.utils.data.RandomSampler", "torch.ones", "torch.utils.data.DataLoader", "len", "fast_data_loader._InfiniteSampler"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "weights", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "weights", "is", "not", "None", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "WeightedRandomSampler", "(", "weights", ",", "\n", "replacement", "=", "True", ",", "\n", "num_samples", "=", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "dataset", ",", "\n", "replacement", "=", "True", ")", "\n", "\n", "", "if", "weights", "==", "None", ":", "\n", "            ", "weights", "=", "torch", ".", "ones", "(", "len", "(", "dataset", ")", ")", "\n", "\n", "", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "BatchSampler", "(", "\n", "sampler", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "drop_last", "=", "True", ")", "\n", "\n", "self", ".", "_infinite_iterator", "=", "iter", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "_InfiniteSampler", "(", "batch_sampler", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.fast_data_loader.InfiniteDataLoader.__iter__": [[41, 44], ["next"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "yield", "next", "(", "self", ".", "_infinite_iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.fast_data_loader.InfiniteDataLoader.__len__": [[45, 47], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.fast_data_loader.FastDataLoader.__init__": [[51, 67], ["super().__init__", "torch.utils.data.BatchSampler", "iter", "len", "torch.utils.data.RandomSampler", "torch.utils.data.DataLoader", "fast_data_loader._InfiniteSampler"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "BatchSampler", "(", "\n", "torch", ".", "utils", ".", "data", ".", "RandomSampler", "(", "dataset", ",", "replacement", "=", "False", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "drop_last", "=", "False", "\n", ")", "\n", "\n", "self", ".", "_infinite_iterator", "=", "iter", "(", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "_InfiniteSampler", "(", "batch_sampler", ")", "\n", ")", ")", "\n", "\n", "self", ".", "_length", "=", "len", "(", "batch_sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.fast_data_loader.FastDataLoader.__iter__": [[68, 71], ["range", "len", "next"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "next", "(", "self", ".", "_infinite_iterator", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.fast_data_loader.FastDataLoader.__len__": [[72, 74], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_length", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.__init__": [[54, 57], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["    ", "def", "__init__", "(", "self", ",", "list_", ")", ":", "\n", "        ", "super", "(", "Q", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_list", "=", "list_", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.__len__": [[58, 60], ["query.Q.len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.__getitem__": [[61, 63], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_list", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.__eq__": [[64, 69], ["isinstance"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "self", ".", "__class__", ")", ":", "\n", "            ", "return", "self", ".", "_list", "==", "other", ".", "_list", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_list", "==", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.__str__": [[70, 72], ["str"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.__repr__": [[73, 75], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q._append": [[76, 79], ["query.Q._list.append"], "methods", ["None"], ["", "def", "_append", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"Unsafe, be careful you know what you're doing.\"\"\"", "\n", "self", ".", "_list", ".", "append", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.group": [[80, 95], ["query.make_selector_fn", "query.Q", "make_selector_fn.", "query.hashable", "[]._append", "query.Q.sorted"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.make_selector_fn", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.hashable", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q._append", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sorted"], ["", "def", "group", "(", "self", ",", "selector", ")", ":", "\n", "        ", "\"\"\"\n        Group elements by selector and return a list of (group, group_records)\n        tuples.\n        \"\"\"", "\n", "selector", "=", "make_selector_fn", "(", "selector", ")", "\n", "groups", "=", "{", "}", "\n", "for", "x", "in", "self", ".", "_list", ":", "\n", "            ", "group", "=", "selector", "(", "x", ")", "\n", "group_key", "=", "hashable", "(", "group", ")", "\n", "if", "group_key", "not", "in", "groups", ":", "\n", "                ", "groups", "[", "group_key", "]", "=", "(", "group", ",", "Q", "(", "[", "]", ")", ")", "\n", "", "groups", "[", "group_key", "]", "[", "1", "]", ".", "_append", "(", "x", ")", "\n", "", "results", "=", "[", "groups", "[", "key", "]", "for", "key", "in", "sorted", "(", "groups", ".", "keys", "(", ")", ")", "]", "\n", "return", "Q", "(", "results", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.group_map": [[96, 102], ["query.Q.group().map", "query.Q.group"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.map", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.group"], ["", "def", "group_map", "(", "self", ",", "selector", ",", "fn", ")", ":", "\n", "        ", "\"\"\"\n        Group elements by selector, apply fn to each group, and return a list\n        of the results.\n        \"\"\"", "\n", "return", "self", ".", "group", "(", "selector", ")", ".", "map", "(", "fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.map": [[103, 112], ["query.Q.len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "map", "(", "self", ",", "fn", ")", ":", "\n", "        ", "\"\"\"\n        map self onto fn. If fn takes multiple args, tuple-unpacking\n        is applied.\n        \"\"\"", "\n", "if", "len", "(", "inspect", ".", "signature", "(", "fn", ")", ".", "parameters", ")", ">", "1", ":", "\n", "            ", "return", "Q", "(", "[", "fn", "(", "*", "x", ")", "for", "x", "in", "self", ".", "_list", "]", ")", "\n", "", "else", ":", "\n", "            ", "return", "Q", "(", "[", "fn", "(", "x", ")", "for", "x", "in", "self", ".", "_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.select": [[113, 116], ["query.make_selector_fn", "query.Q", "make_selector_fn."], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.make_selector_fn"], ["", "", "def", "select", "(", "self", ",", "selector", ")", ":", "\n", "        ", "selector", "=", "make_selector_fn", "(", "selector", ")", "\n", "return", "Q", "(", "[", "selector", "(", "x", ")", "for", "x", "in", "self", ".", "_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.min": [[117, 119], ["query.Q.min"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.min"], ["", "def", "min", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max": [[120, 122], ["query.Q.max"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max"], ["", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum": [[123, 125], ["query.Q.sum"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum"], ["", "def", "sum", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len": [[126, 128], ["query.Q.len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "len", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean": [[129, 133], ["warnings.catch_warnings", "warnings.simplefilter", "float", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean"], ["", "def", "mean", "(", "self", ")", ":", "\n", "        ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "            ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "return", "float", "(", "np", ".", "mean", "(", "self", ".", "_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.std": [[134, 138], ["warnings.catch_warnings", "warnings.simplefilter", "float", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.std"], ["", "", "def", "std", "(", "self", ")", ":", "\n", "        ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "            ", "warnings", ".", "simplefilter", "(", "\"ignore\"", ")", "\n", "return", "float", "(", "np", ".", "std", "(", "self", ".", "_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean_std": [[139, 141], ["query.Q.mean", "query.Q.std"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.std"], ["", "", "def", "mean_std", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "mean", "(", ")", ",", "self", ".", "std", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.argmax": [[142, 145], ["query.make_selector_fn", "query.Q.max"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.make_selector_fn", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.max"], ["", "def", "argmax", "(", "self", ",", "selector", ")", ":", "\n", "        ", "selector", "=", "make_selector_fn", "(", "selector", ")", "\n", "return", "max", "(", "self", ".", "_list", ",", "key", "=", "selector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter": [[146, 148], ["query.Q", "fn"], "methods", ["None"], ["", "def", "filter", "(", "self", ",", "fn", ")", ":", "\n", "        ", "return", "Q", "(", "[", "x", "for", "x", "in", "self", ".", "_list", "if", "fn", "(", "x", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter_equals": [[149, 153], ["query.make_selector_fn", "query.Q.filter", "make_selector_fn."], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.make_selector_fn", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter"], ["", "def", "filter_equals", "(", "self", ",", "selector", ",", "value", ")", ":", "\n", "        ", "\"\"\"like [x for x in y if x.selector == value]\"\"\"", "\n", "selector", "=", "make_selector_fn", "(", "selector", ")", "\n", "return", "self", ".", "filter", "(", "lambda", "r", ":", "selector", "(", "r", ")", "==", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter_not_none": [[154, 156], ["query.Q.filter"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter"], ["", "def", "filter_not_none", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "filter", "(", "lambda", "r", ":", "r", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter_not_nan": [[157, 159], ["query.Q.filter", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter"], ["", "def", "filter_not_nan", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "filter", "(", "lambda", "r", ":", "not", "np", ".", "isnan", "(", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.flatten": [[160, 162], ["query.Q"], "methods", ["None"], ["", "def", "flatten", "(", "self", ")", ":", "\n", "        ", "return", "Q", "(", "[", "y", "for", "x", "in", "self", ".", "_list", "for", "y", "in", "x", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.unique": [[163, 172], ["set", "query.Q", "query.hashable", "set.add", "result.append"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.hashable"], ["", "def", "unique", "(", "self", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "result_set", "=", "set", "(", ")", "\n", "for", "x", "in", "self", ".", "_list", ":", "\n", "            ", "hashable_x", "=", "hashable", "(", "x", ")", "\n", "if", "hashable_x", "not", "in", "result_set", ":", "\n", "                ", "result_set", ".", "add", "(", "hashable_x", ")", "\n", "result", ".", "append", "(", "x", ")", "\n", "", "", "return", "Q", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sorted": [[173, 183], ["query.Q", "key", "query.Q.sorted"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sorted"], ["", "def", "sorted", "(", "self", ",", "key", "=", "None", ")", ":", "\n", "        ", "if", "key", "is", "None", ":", "\n", "            ", "key", "=", "lambda", "x", ":", "x", "\n", "", "def", "key2", "(", "x", ")", ":", "\n", "            ", "x", "=", "key", "(", "x", ")", "\n", "if", "isinstance", "(", "x", ",", "(", "np", ".", "floating", ",", "float", ")", ")", "and", "np", ".", "isnan", "(", "x", ")", ":", "\n", "                ", "return", "float", "(", "'-inf'", ")", "\n", "", "else", ":", "\n", "                ", "return", "x", "\n", "", "", "return", "Q", "(", "sorted", "(", "self", ".", "_list", ",", "key", "=", "key2", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.make_selector_fn": [[16, 45], ["isinstance", "isinstance", "selector.split", "query.make_selector_fn", "tuple", "selector.split", "selector.strip", "query.make_selector_fn", "sel", "sel"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.make_selector_fn", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.make_selector_fn"], ["def", "make_selector_fn", "(", "selector", ")", ":", "\n", "    ", "\"\"\"\n    If selector is a function, return selector.\n    Otherwise, return a function corresponding to the selector string. Examples\n    of valid selector strings and the corresponding functions:\n        x       lambda obj: obj['x']\n        x.y     lambda obj: obj['x']['y']\n        x,y     lambda obj: (obj['x'], obj['y'])\n    \"\"\"", "\n", "if", "isinstance", "(", "selector", ",", "str", ")", ":", "\n", "        ", "if", "','", "in", "selector", ":", "\n", "            ", "parts", "=", "selector", ".", "split", "(", "','", ")", "\n", "part_selectors", "=", "[", "make_selector_fn", "(", "part", ")", "for", "part", "in", "parts", "]", "\n", "return", "lambda", "obj", ":", "tuple", "(", "sel", "(", "obj", ")", "for", "sel", "in", "part_selectors", ")", "\n", "", "elif", "'.'", "in", "selector", ":", "\n", "            ", "parts", "=", "selector", ".", "split", "(", "'.'", ")", "\n", "part_selectors", "=", "[", "make_selector_fn", "(", "part", ")", "for", "part", "in", "parts", "]", "\n", "def", "f", "(", "obj", ")", ":", "\n", "                ", "for", "sel", "in", "part_selectors", ":", "\n", "                    ", "obj", "=", "sel", "(", "obj", ")", "\n", "", "return", "obj", "\n", "", "return", "f", "\n", "", "else", ":", "\n", "            ", "key", "=", "selector", ".", "strip", "(", ")", "\n", "return", "lambda", "obj", ":", "obj", "[", "key", "]", "\n", "", "", "elif", "isinstance", "(", "selector", ",", "types", ".", "FunctionType", ")", ":", "\n", "        ", "return", "selector", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.hashable": [[46, 52], ["hash", "json.dumps"], "function", ["None"], ["", "", "def", "hashable", "(", "obj", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "hash", "(", "obj", ")", "\n", "return", "obj", "\n", "", "except", "TypeError", ":", "\n", "        ", "return", "json", ".", "dumps", "(", "{", "'_'", ":", "obj", "}", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.wide_resnet.wide_basic.__init__": [[38, 54], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "bias", "=", "True", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.wide_resnet.wide_basic.forward": [[55, 61], ["wide_resnet.wide_basic.dropout", "wide_resnet.wide_basic.conv2", "wide_resnet.wide_basic.shortcut", "wide_resnet.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wide_resnet.wide_basic.bn2", "wide_resnet.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.wide_resnet.Wide_ResNet.__init__": [[65, 86], ["torch.Module.__init__", "wide_resnet.conv3x3", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "wide_resnet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__", "home.repos.pwc.inspect_result.alexrame_fishr.lib.wide_resnet.conv3x3", "home.repos.pwc.inspect_result.alexrame_fishr.lib.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.alexrame_fishr.lib.wide_resnet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.alexrame_fishr.lib.wide_resnet.Wide_ResNet._wide_layer"], ["def", "__init__", "(", "self", ",", "input_shape", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "# print('| Wide-Resnet %dx%d' % (depth, k))", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "input_shape", "[", "0", "]", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "\n", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "\n", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "\n", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "\n", "self", ".", "n_outputs", "=", "nStages", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.wide_resnet.Wide_ResNet._wide_layer": [[87, 96], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.wide_resnet.Wide_ResNet.forward": [[97, 105], ["wide_resnet.Wide_ResNet.conv1", "wide_resnet.Wide_ResNet.layer1", "wide_resnet.Wide_ResNet.layer2", "wide_resnet.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wide_resnet.Wide_ResNet.bn1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "return", "out", "[", ":", ",", ":", ",", "0", ",", "0", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.wide_resnet.conv3x3": [[17, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.wide_resnet.conv_init": [[27, 35], ["classname.find", "torch.xavier_uniform_", "torch.constant_", "classname.find", "torch.constant_", "torch.constant_", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.MovingAverage.__init__": [[33, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "ema", ",", "oneminusema_correction", "=", "True", ")", ":", "\n", "        ", "self", ".", "ema", "=", "ema", "\n", "self", ".", "named_parameters", "=", "{", "}", "\n", "self", ".", "_updates", "=", "0", "\n", "self", ".", "_oneminusema_correction", "=", "oneminusema_correction", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.MovingAverage.update": [[39, 57], ["dict_data.items", "data.view.view.view", "ema_data.clone().detach", "torch.zeros_like", "ema_data.clone"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "dict_data", ")", ":", "\n", "        ", "ema_dict_data", "=", "{", "}", "\n", "for", "name", ",", "data", "in", "dict_data", ".", "items", "(", ")", ":", "\n", "            ", "data", "=", "data", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "if", "self", ".", "_updates", "==", "0", ":", "\n", "                ", "previous_data", "=", "torch", ".", "zeros_like", "(", "data", ")", "\n", "", "else", ":", "\n", "                ", "previous_data", "=", "self", ".", "named_parameters", "[", "name", "]", "\n", "\n", "", "ema_data", "=", "self", ".", "ema", "*", "previous_data", "+", "(", "1", "-", "self", ".", "ema", ")", "*", "data", "\n", "if", "self", ".", "_oneminusema_correction", ":", "\n", "                ", "ema_dict_data", "[", "name", "]", "=", "ema_data", "/", "(", "1", "-", "self", ".", "ema", ")", "\n", "", "else", ":", "\n", "                ", "ema_dict_data", "[", "name", "]", "=", "ema_data", "\n", "", "self", ".", "named_parameters", "[", "name", "]", "=", "ema_data", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "self", ".", "_updates", "+=", "1", "\n", "return", "ema_dict_data", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc._SplitDataset.__init__": [[112, 116], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "underlying_dataset", ",", "keys", ")", ":", "\n", "        ", "super", "(", "_SplitDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "underlying_dataset", "=", "underlying_dataset", "\n", "self", ".", "keys", "=", "keys", "\n", "", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc._SplitDataset.__getitem__": [[116, 118], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "underlying_dataset", "[", "self", ".", "keys", "[", "key", "]", "]", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc._SplitDataset.__len__": [[118, 120], ["len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.Tee.__init__": [[177, 180], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fname", ",", "mode", "=", "\"a\"", ")", ":", "\n", "        ", "self", ".", "stdout", "=", "sys", ".", "stdout", "\n", "self", ".", "file", "=", "open", "(", "fname", ",", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.Tee.write": [[181, 185], ["misc.Tee.stdout.write", "misc.Tee.file.write", "misc.Tee.flush"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.Tee.write", "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.Tee.write", "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.Tee.flush"], ["", "def", "write", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "stdout", ".", "write", "(", "message", ")", "\n", "self", ".", "file", ".", "write", "(", "message", ")", "\n", "self", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.Tee.flush": [[186, 189], ["misc.Tee.stdout.flush", "misc.Tee.file.flush"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.Tee.flush", "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.Tee.flush"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "stdout", ".", "flush", "(", ")", "\n", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.ParamDict.__init__": [[195, 197], ["collections.OrderedDict.__init__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "*", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.ParamDict._prototype": [[198, 205], ["isinstance", "misc.ParamDict", "isinstance", "misc.ParamDict", "op", "misc.ParamDict.items", "op"], "methods", ["None"], ["", "def", "_prototype", "(", "self", ",", "other", ",", "op", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "Number", ")", ":", "\n", "            ", "return", "ParamDict", "(", "{", "k", ":", "op", "(", "v", ",", "other", ")", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", "}", ")", "\n", "", "elif", "isinstance", "(", "other", ",", "dict", ")", ":", "\n", "            ", "return", "ParamDict", "(", "{", "k", ":", "op", "(", "self", "[", "k", "]", ",", "other", "[", "k", "]", ")", "for", "k", "in", "self", "}", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.ParamDict.__add__": [[206, 208], ["misc.ParamDict._prototype"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.ParamDict._prototype"], ["", "", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_prototype", "(", "other", ",", "operator", ".", "add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.ParamDict.__rmul__": [[209, 211], ["misc.ParamDict._prototype"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.ParamDict._prototype"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_prototype", "(", "other", ",", "operator", ".", "mul", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.ParamDict.__neg__": [[214, 216], ["misc.ParamDict", "misc.ParamDict.items"], "methods", ["None"], ["def", "__neg__", "(", "self", ")", ":", "\n", "        ", "return", "ParamDict", "(", "{", "k", ":", "-", "v", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.ParamDict.__rsub__": [[217, 220], ["misc.ParamDict.__add__", "other.__neg__"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.ParamDict.__add__", "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.ParamDict.__neg__"], ["", "def", "__rsub__", "(", "self", ",", "other", ")", ":", "\n", "# a- b := a + (-b)", "\n", "        ", "return", "self", ".", "__add__", "(", "other", ".", "__neg__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.ParamDict.__truediv__": [[223, 225], ["misc.ParamDict._prototype"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.ParamDict._prototype"], ["def", "__truediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_prototype", "(", "other", ",", "operator", ".", "truediv", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.l2_between_dicts": [[22, 30], ["len", "len", "sorted", "sorted", "dict_1.keys", "dict_1.keys", "torch.cat", "torch.cat", "tuple", "tuple", "t.view", "t.view"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sorted", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sorted"], ["def", "l2_between_dicts", "(", "dict_1", ",", "dict_2", ")", ":", "\n", "    ", "assert", "len", "(", "dict_1", ")", "==", "len", "(", "dict_2", ")", "\n", "dict_1_values", "=", "[", "dict_1", "[", "key", "]", "for", "key", "in", "sorted", "(", "dict_1", ".", "keys", "(", ")", ")", "]", "\n", "dict_2_values", "=", "[", "dict_2", "[", "key", "]", "for", "key", "in", "sorted", "(", "dict_1", ".", "keys", "(", ")", ")", "]", "\n", "return", "(", "\n", "torch", ".", "cat", "(", "tuple", "(", "[", "t", ".", "view", "(", "-", "1", ")", "for", "t", "in", "dict_1_values", "]", ")", ")", "-", "\n", "torch", ".", "cat", "(", "tuple", "(", "[", "t", ".", "view", "(", "-", "1", ")", "for", "t", "in", "dict_2_values", "]", ")", ")", "\n", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.make_weights_for_balanced_classes": [[60, 79], ["collections.Counter", "len", "torch.zeros", "enumerate", "int", "classes.append", "len", "int"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "", "def", "make_weights_for_balanced_classes", "(", "dataset", ")", ":", "\n", "    ", "counts", "=", "Counter", "(", ")", "\n", "classes", "=", "[", "]", "\n", "for", "_", ",", "y", "in", "dataset", ":", "\n", "        ", "y", "=", "int", "(", "y", ")", "\n", "counts", "[", "y", "]", "+=", "1", "\n", "classes", ".", "append", "(", "y", ")", "\n", "\n", "", "n_classes", "=", "len", "(", "counts", ")", "\n", "\n", "weight_per_class", "=", "{", "}", "\n", "for", "y", "in", "counts", ":", "\n", "        ", "weight_per_class", "[", "y", "]", "=", "1", "/", "(", "counts", "[", "y", "]", "*", "n_classes", ")", "\n", "\n", "", "weights", "=", "torch", ".", "zeros", "(", "len", "(", "dataset", ")", ")", "\n", "for", "i", ",", "y", "in", "enumerate", "(", "classes", ")", ":", "\n", "        ", "weights", "[", "i", "]", "=", "weight_per_class", "[", "int", "(", "y", ")", "]", "\n", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.pdb": [[80, 85], ["print", "pdb.set_trace"], "function", ["None"], ["", "def", "pdb", "(", ")", ":", "\n", "    ", "sys", ".", "stdout", "=", "sys", ".", "__stdout__", "\n", "import", "pdb", "\n", "print", "(", "\"Launching PDB, enter 'n' to step to parent function.\"", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.seed_hash": [[86, 92], ["str", "int", "hashlib.md5().hexdigest", "hashlib.md5", "str.encode"], "function", ["None"], ["", "def", "seed_hash", "(", "*", "args", ")", ":", "\n", "    ", "\"\"\"\n    Derive an integer hash from all args, for use as a random seed.\n    \"\"\"", "\n", "args_str", "=", "str", "(", "args", ")", "\n", "return", "int", "(", "hashlib", ".", "md5", "(", "args_str", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", ",", "16", ")", "%", "(", "2", "**", "31", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.print_separator": [[93, 95], ["print"], "function", ["None"], ["", "def", "print_separator", "(", ")", ":", "\n", "    ", "print", "(", "\"=\"", "*", "80", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.print_row": [[96, 109], ["print", "numpy.issubdtype", "sep.join", "type", "str().ljust", "misc.print_row.format_val"], "function", ["None"], ["", "def", "print_row", "(", "row", ",", "colwidth", "=", "10", ",", "latex", "=", "False", ")", ":", "\n", "    ", "if", "latex", ":", "\n", "        ", "sep", "=", "\" & \"", "\n", "end_", "=", "\"\\\\\\\\\"", "\n", "", "else", ":", "\n", "        ", "sep", "=", "\"  \"", "\n", "end_", "=", "\"\"", "\n", "\n", "", "def", "format_val", "(", "x", ")", ":", "\n", "        ", "if", "np", ".", "issubdtype", "(", "type", "(", "x", ")", ",", "np", ".", "floating", ")", ":", "\n", "            ", "x", "=", "\"{:.10f}\"", ".", "format", "(", "x", ")", "\n", "", "return", "str", "(", "x", ")", ".", "ljust", "(", "colwidth", ")", "[", ":", "colwidth", "]", "\n", "", "print", "(", "sep", ".", "join", "(", "[", "format_val", "(", "x", ")", "for", "x", "in", "row", "]", ")", ",", "end_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.split_dataset": [[121, 133], ["list", "numpy.random.RandomState().shuffle", "len", "range", "misc._SplitDataset", "misc._SplitDataset", "len", "numpy.random.RandomState"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "", "def", "split_dataset", "(", "dataset", ",", "n", ",", "seed", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Return a pair of datasets corresponding to a random split of the given\n    dataset, with n datapoints in the first dataset and the rest in the last,\n    using the given random seed\n    \"\"\"", "\n", "assert", "(", "n", "<=", "len", "(", "dataset", ")", ")", "\n", "keys", "=", "list", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", "\n", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "shuffle", "(", "keys", ")", "\n", "keys_1", "=", "keys", "[", ":", "n", "]", "\n", "keys_2", "=", "keys", "[", "n", ":", "]", "\n", "return", "_SplitDataset", "(", "dataset", ",", "keys_1", ")", ",", "_SplitDataset", "(", "dataset", ",", "keys_2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.random_pairs_of_minibatches": [[134, 149], ["torch.randperm().tolist", "range", "len", "min", "pairs.append", "torch.randperm", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.min", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "def", "random_pairs_of_minibatches", "(", "minibatches", ")", ":", "\n", "    ", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "minibatches", ")", ")", ".", "tolist", "(", ")", "\n", "pairs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "minibatches", ")", ")", ":", "\n", "        ", "j", "=", "i", "+", "1", "if", "i", "<", "(", "len", "(", "minibatches", ")", "-", "1", ")", "else", "0", "\n", "\n", "xi", ",", "yi", "=", "minibatches", "[", "perm", "[", "i", "]", "]", "[", "0", "]", ",", "minibatches", "[", "perm", "[", "i", "]", "]", "[", "1", "]", "\n", "xj", ",", "yj", "=", "minibatches", "[", "perm", "[", "j", "]", "]", "[", "0", "]", ",", "minibatches", "[", "perm", "[", "j", "]", "]", "[", "1", "]", "\n", "\n", "min_n", "=", "min", "(", "len", "(", "xi", ")", ",", "len", "(", "xj", ")", ")", "\n", "\n", "pairs", ".", "append", "(", "(", "(", "xi", "[", ":", "min_n", "]", ",", "yi", "[", ":", "min_n", "]", ")", ",", "(", "xj", "[", ":", "min_n", "]", ",", "yj", "[", ":", "min_n", "]", ")", ")", ")", "\n", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.accuracy": [[150, 175], ["network.eval", "network.train", "torch.no_grad", "x.to.to", "y.to.to", "network.predict", "torch.ones.to", "torch.ones.sum().item", "torch.ones", "len", "network.predict.size", "len", "torch.ones.sum", "len", "network.predict.gt().eq().float", "torch.ones.view", "network.predict.argmax().eq().float", "network.predict.gt().eq", "network.predict.argmax().eq", "network.predict.gt", "network.predict.argmax"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.domainbed.networks.ResNet.train", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.algorithms.Fishr.predict", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.argmax"], ["", "def", "accuracy", "(", "network", ",", "loader", ",", "weights", ",", "device", ")", ":", "\n", "    ", "correct", "=", "0", "\n", "total", "=", "0", "\n", "weights_offset", "=", "0", "\n", "\n", "network", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "x", ",", "y", "in", "loader", ":", "\n", "            ", "x", "=", "x", ".", "to", "(", "device", ")", "\n", "y", "=", "y", ".", "to", "(", "device", ")", "\n", "p", "=", "network", ".", "predict", "(", "x", ")", "\n", "if", "weights", "is", "None", ":", "\n", "                ", "batch_weights", "=", "torch", ".", "ones", "(", "len", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                ", "batch_weights", "=", "weights", "[", "weights_offset", ":", "weights_offset", "+", "len", "(", "x", ")", "]", "\n", "weights_offset", "+=", "len", "(", "x", ")", "\n", "", "batch_weights", "=", "batch_weights", ".", "to", "(", "device", ")", "\n", "if", "p", ".", "size", "(", "1", ")", "==", "1", ":", "\n", "                ", "correct", "+=", "(", "p", ".", "gt", "(", "0", ")", ".", "eq", "(", "y", ")", ".", "float", "(", ")", "*", "batch_weights", ".", "view", "(", "-", "1", ",", "1", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "correct", "+=", "(", "p", ".", "argmax", "(", "1", ")", ".", "eq", "(", "y", ")", ".", "float", "(", ")", "*", "batch_weights", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "total", "+=", "batch_weights", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "network", ".", "train", "(", ")", "\n", "\n", "return", "correct", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.reporting.load_records": [[12, 26], ["tqdm.tqdm", "domainbed.lib.query.Q", "list", "os.path.join", "enumerate", "os.listdir", "open", "records.append", "json.loads"], "function", ["None"], ["def", "load_records", "(", "path", ")", ":", "\n", "    ", "records", "=", "[", "]", "\n", "for", "i", ",", "subdir", "in", "tqdm", ".", "tqdm", "(", "list", "(", "enumerate", "(", "os", ".", "listdir", "(", "path", ")", ")", ")", ",", "\n", "ncols", "=", "80", ",", "\n", "leave", "=", "False", ")", ":", "\n", "        ", "results_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "subdir", ",", "\"results.jsonl\"", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "results_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "f", ":", "\n", "                    ", "records", ".", "append", "(", "json", ".", "loads", "(", "line", "[", ":", "-", "1", "]", ")", ")", "\n", "", "", "", "except", "IOError", ":", "\n", "            ", "pass", "\n", "\n", "", "", "return", "Q", "(", "records", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.lib.reporting.get_grouped_records": [[27, 41], ["collections.defaultdict", "domainbed.lib.query.Q", "result[].append", "domainbed.lib.query.Q", "collections.defaultdict.items"], "function", ["None"], ["", "def", "get_grouped_records", "(", "records", ")", ":", "\n", "    ", "\"\"\"Group records by (trial_seed, dataset, algorithm, test_env). Because\n    records can have multiple test envs, a given record may appear in more than\n    one group.\"\"\"", "\n", "result", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "[", "]", ")", "\n", "for", "r", "in", "records", ":", "\n", "        ", "for", "test_env", "in", "r", "[", "\"args\"", "]", "[", "\"test_envs\"", "]", ":", "\n", "            ", "group", "=", "(", "r", "[", "\"args\"", "]", "[", "\"trial_seed\"", "]", ",", "\n", "r", "[", "\"args\"", "]", "[", "\"dataset\"", "]", ",", "\n", "r", "[", "\"args\"", "]", "[", "\"algorithm\"", "]", ",", "\n", "test_env", ")", "\n", "result", "[", "group", "]", ".", "append", "(", "r", ")", "\n", "", "", "return", "Q", "(", "[", "{", "\"trial_seed\"", ":", "t", ",", "\"dataset\"", ":", "d", ",", "\"algorithm\"", ":", "a", ",", "\"test_env\"", ":", "e", ",", "\n", "\"records\"", ":", "Q", "(", "r", ")", "}", "for", "(", "t", ",", "d", ",", "a", ",", "e", ")", ",", "r", "in", "result", ".", "items", "(", ")", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.list_top_hparams.todo_rename": [[33, 107], ["domainbed.lib.reporting.get_grouped_records().map().filter", "domainbed.lib.query.Q().select().unique", "domainbed.lib.query.Q().select().unique().sorted", "enumerate", "print_table", "range", "enumerate", "print_table", "print", "print", "enumerate", "domainbed.lib.reporting.get_grouped_records().map", "domainbed.lib.query.Q().select", "domainbed.lib.query.Q().select().unique", "print", "print", "domainbed.datasets.num_environments", "enumerate", "list", "reporting.get_grouped_records().map().filter.filter_equals().group().map", "format_mean", "means.append", "reporting.get_grouped_records().map().filter.filter_equals().select", "format_mean", "means.append", "domainbed.lib.reporting.get_grouped_records", "domainbed.lib.query.Q", "domainbed.lib.query.Q().select", "domainbed.datasets.get_dataset_class", "reporting.get_grouped_records().map().filter.filter_equals().group", "group.select().mean", "sum", "len", "selection_method.sweep_acc", "reporting.get_grouped_records().map().filter.filter_equals", "sum", "len", "domainbed.lib.query.Q", "reporting.get_grouped_records().map().filter.filter_equals", "group.select"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.unique", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sorted", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.collect_results.print_table", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.collect_results.print_table", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.map", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.select", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.unique", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.num_environments", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.map", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.collect_results.format_mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.select", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.collect_results.format_mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.reporting.get_grouped_records", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.select", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.get_dataset_class", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.group", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.SelectionMethod.sweep_acc", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter_equals", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter_equals", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.select"], ["def", "todo_rename", "(", "records", ",", "selection_method", ",", "latex", ")", ":", "\n", "\n", "    ", "grouped_records", "=", "reporting", ".", "get_grouped_records", "(", "records", ")", ".", "map", "(", "lambda", "group", ":", "\n", "{", "**", "group", ",", "\"sweep_acc\"", ":", "selection_method", ".", "sweep_acc", "(", "group", "[", "\"records\"", "]", ")", "}", "\n", ")", ".", "filter", "(", "lambda", "g", ":", "g", "[", "\"sweep_acc\"", "]", "is", "not", "None", ")", "\n", "\n", "# read algorithm names and sort (predefined order)", "\n", "alg_names", "=", "Q", "(", "records", ")", ".", "select", "(", "\"args.algorithm\"", ")", ".", "unique", "(", ")", "\n", "alg_names", "=", "(", "[", "n", "for", "n", "in", "algorithms", ".", "ALGORITHMS", "if", "n", "in", "alg_names", "]", "+", "\n", "[", "n", "for", "n", "in", "alg_names", "if", "n", "not", "in", "algorithms", ".", "ALGORITHMS", "]", ")", "\n", "\n", "# read dataset names and sort (lexicographic order)", "\n", "dataset_names", "=", "Q", "(", "records", ")", ".", "select", "(", "\"args.dataset\"", ")", ".", "unique", "(", ")", ".", "sorted", "(", ")", "\n", "dataset_names", "=", "[", "d", "for", "d", "in", "datasets", ".", "DATASETS", "if", "d", "in", "dataset_names", "]", "\n", "\n", "for", "dataset", "in", "dataset_names", ":", "\n", "        ", "if", "latex", ":", "\n", "            ", "print", "(", ")", "\n", "print", "(", "\"\\\\subsubsection{{{}}}\"", ".", "format", "(", "dataset", ")", ")", "\n", "", "test_envs", "=", "range", "(", "datasets", ".", "num_environments", "(", "dataset", ")", ")", "\n", "\n", "table", "=", "[", "[", "None", "for", "_", "in", "[", "*", "test_envs", ",", "\"Avg\"", "]", "]", "for", "_", "in", "alg_names", "]", "\n", "for", "i", ",", "algorithm", "in", "enumerate", "(", "alg_names", ")", ":", "\n", "            ", "means", "=", "[", "]", "\n", "for", "j", ",", "test_env", "in", "enumerate", "(", "test_envs", ")", ":", "\n", "                ", "trial_accs", "=", "(", "grouped_records", "\n", ".", "filter_equals", "(", "\n", "\"dataset, algorithm, test_env\"", ",", "\n", "(", "dataset", ",", "algorithm", ",", "test_env", ")", "\n", ")", ".", "select", "(", "\"sweep_acc\"", ")", ")", "\n", "mean", ",", "err", ",", "table", "[", "i", "]", "[", "j", "]", "=", "format_mean", "(", "trial_accs", ",", "latex", ")", "\n", "means", ".", "append", "(", "mean", ")", "\n", "", "if", "None", "in", "means", ":", "\n", "                ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"X\"", "\n", "", "else", ":", "\n", "                ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"{:.1f}\"", ".", "format", "(", "sum", "(", "means", ")", "/", "len", "(", "means", ")", ")", "\n", "\n", "", "", "col_labels", "=", "[", "\n", "\"Algorithm\"", ",", "\n", "*", "datasets", ".", "get_dataset_class", "(", "dataset", ")", ".", "ENVIRONMENTS", ",", "\n", "\"Avg\"", "\n", "]", "\n", "header_text", "=", "(", "f\"Dataset: {dataset}, \"", "\n", "f\"model selection method: {selection_method.name}\"", ")", "\n", "print_table", "(", "table", ",", "header_text", ",", "alg_names", ",", "list", "(", "col_labels", ")", ",", "\n", "colwidth", "=", "20", ",", "latex", "=", "latex", ")", "\n", "\n", "# Print an \"averages\" table", "\n", "", "if", "latex", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "\"\\\\subsubsection{Averages}\"", ")", "\n", "\n", "", "table", "=", "[", "[", "None", "for", "_", "in", "[", "*", "dataset_names", ",", "\"Avg\"", "]", "]", "for", "_", "in", "alg_names", "]", "\n", "for", "i", ",", "algorithm", "in", "enumerate", "(", "alg_names", ")", ":", "\n", "        ", "means", "=", "[", "]", "\n", "for", "j", ",", "dataset", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "            ", "trial_averages", "=", "(", "grouped_records", "\n", ".", "filter_equals", "(", "\"algorithm, dataset\"", ",", "(", "algorithm", ",", "dataset", ")", ")", "\n", ".", "group", "(", "\"trial_seed\"", ")", "\n", ".", "map", "(", "lambda", "trial_seed", ",", "group", ":", "\n", "group", ".", "select", "(", "\"sweep_acc\"", ")", ".", "mean", "(", ")", "\n", ")", "\n", ")", "\n", "mean", ",", "err", ",", "table", "[", "i", "]", "[", "j", "]", "=", "format_mean", "(", "trial_averages", ",", "latex", ")", "\n", "means", ".", "append", "(", "mean", ")", "\n", "", "if", "None", "in", "means", ":", "\n", "            ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"X\"", "\n", "", "else", ":", "\n", "            ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"{:.1f}\"", ".", "format", "(", "sum", "(", "means", ")", "/", "len", "(", "means", ")", ")", "\n", "\n", "", "", "col_labels", "=", "[", "\"Algorithm\"", ",", "*", "dataset_names", ",", "\"Avg\"", "]", "\n", "header_text", "=", "f\"Averages, model selection method: {selection_method.name}\"", "\n", "print_table", "(", "table", ",", "header_text", ",", "alg_names", ",", "col_labels", ",", "colwidth", "=", "25", ",", "\n", "latex", "=", "latex", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__init__": [[35, 57], ["json.dumps", "hashlib.md5().hexdigest", "os.path.join", "copy.deepcopy", "sorted", "os.path.exists", "sweep.Job.train_args.items", "isinstance", "command.append", "os.path.join", "os.path.exists", "hashlib.md5", "isinstance", "json.dumps.encode", "shlex.quote", "str"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sorted"], ["def", "__init__", "(", "self", ",", "train_args", ",", "sweep_output_dir", ")", ":", "\n", "        ", "args_str", "=", "json", ".", "dumps", "(", "train_args", ",", "sort_keys", "=", "True", ")", "\n", "args_hash", "=", "hashlib", ".", "md5", "(", "args_str", ".", "encode", "(", "'utf-8'", ")", ")", ".", "hexdigest", "(", ")", "\n", "self", ".", "output_dir", "=", "os", ".", "path", ".", "join", "(", "sweep_output_dir", ",", "args_hash", ")", "\n", "\n", "self", ".", "train_args", "=", "copy", ".", "deepcopy", "(", "train_args", ")", "\n", "self", ".", "train_args", "[", "'output_dir'", "]", "=", "self", ".", "output_dir", "\n", "command", "=", "[", "'python'", ",", "'-m'", ",", "'domainbed.scripts.train'", "]", "\n", "for", "k", ",", "v", "in", "sorted", "(", "self", ".", "train_args", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "list", ")", ":", "\n", "                ", "v", "=", "' '", ".", "join", "(", "[", "str", "(", "v_", ")", "for", "v_", "in", "v", "]", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                ", "v", "=", "shlex", ".", "quote", "(", "v", ")", "\n", "", "command", ".", "append", "(", "f'--{k} {v}'", ")", "\n", "", "self", ".", "command_str", "=", "' '", ".", "join", "(", "command", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "'done'", ")", ")", ":", "\n", "            ", "self", ".", "state", "=", "Job", ".", "DONE", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "self", ".", "output_dir", ")", ":", "\n", "            ", "self", ".", "state", "=", "Job", ".", "INCOMPLETE", "\n", "", "else", ":", "\n", "            ", "self", ".", "state", "=", "Job", ".", "NOT_LAUNCHED", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.__str__": [[58, 67], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "job_info", "=", "(", "self", ".", "train_args", "[", "'dataset'", "]", ",", "\n", "self", ".", "train_args", "[", "'algorithm'", "]", ",", "\n", "self", ".", "train_args", "[", "'test_envs'", "]", ",", "\n", "self", ".", "train_args", "[", "'hparams_seed'", "]", ")", "\n", "return", "'{}: {} {}'", ".", "format", "(", "\n", "self", ".", "state", ",", "\n", "self", ".", "output_dir", ",", "\n", "job_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.launch": [[68, 79], ["print", "jobs.copy.copy.copy", "numpy.random.shuffle", "print", "tqdm.tqdm", "launcher_fn", "print", "os.makedirs", "len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "@", "staticmethod", "\n", "def", "launch", "(", "jobs", ",", "launcher_fn", ")", ":", "\n", "        ", "print", "(", "'Launching...'", ")", "\n", "jobs", "=", "jobs", ".", "copy", "(", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "jobs", ")", "\n", "print", "(", "'Making job directories:'", ")", "\n", "for", "job", "in", "tqdm", ".", "tqdm", "(", "jobs", ",", "leave", "=", "False", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "job", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "commands", "=", "[", "job", ".", "command_str", "for", "job", "in", "jobs", "]", "\n", "launcher_fn", "(", "commands", ")", "\n", "print", "(", "f'Launched {len(jobs)} jobs!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.Job.delete": [[80, 86], ["print", "print", "shutil.rmtree", "len"], "methods", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["", "@", "staticmethod", "\n", "def", "delete", "(", "jobs", ")", ":", "\n", "        ", "print", "(", "'Deleting...'", ")", "\n", "for", "job", "in", "jobs", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "job", ".", "output_dir", ")", "\n", "", "print", "(", "f'Deleted {len(jobs)} jobs!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.all_test_env_combinations": [[87, 97], ["range", "range"], "function", ["None"], ["", "", "def", "all_test_env_combinations", "(", "n", ")", ":", "\n", "    ", "\"\"\"\n    For a dataset with n >= 3 envs, return all combinations of 1 and 2 test\n    envs.\n    \"\"\"", "\n", "assert", "(", "n", ">=", "3", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "yield", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n", ")", ":", "\n", "            ", "yield", "[", "i", ",", "j", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.make_args_list": [[98, 129], ["range", "sweep.all_test_env_combinations", "range", "domainbed.datasets.num_environments", "domainbed.lib.misc.seed_hash", "args_list.append", "range", "domainbed.datasets.num_environments"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.all_test_env_combinations", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.num_environments", "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.seed_hash", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.num_environments"], ["", "", "", "def", "make_args_list", "(", "n_trials", ",", "dataset_names", ",", "algorithms", ",", "n_hparams_from", ",", "n_hparams", ",", "steps", ",", "\n", "data_dir", ",", "task", ",", "holdout_fraction", ",", "single_test_envs", ",", "hparams", ")", ":", "\n", "    ", "args_list", "=", "[", "]", "\n", "for", "trial_seed", "in", "range", "(", "n_trials", ")", ":", "\n", "        ", "for", "dataset", "in", "dataset_names", ":", "\n", "            ", "for", "algorithm", "in", "algorithms", ":", "\n", "                ", "if", "single_test_envs", ":", "\n", "                    ", "all_test_envs", "=", "[", "\n", "[", "i", "]", "for", "i", "in", "range", "(", "datasets", ".", "num_environments", "(", "dataset", ")", ")", "]", "\n", "", "else", ":", "\n", "                    ", "all_test_envs", "=", "all_test_env_combinations", "(", "\n", "datasets", ".", "num_environments", "(", "dataset", ")", ")", "\n", "", "for", "test_envs", "in", "all_test_envs", ":", "\n", "                    ", "for", "hparams_seed", "in", "range", "(", "n_hparams_from", ",", "n_hparams", ")", ":", "\n", "                        ", "train_args", "=", "{", "}", "\n", "train_args", "[", "'dataset'", "]", "=", "dataset", "\n", "train_args", "[", "'algorithm'", "]", "=", "algorithm", "\n", "train_args", "[", "'test_envs'", "]", "=", "test_envs", "\n", "train_args", "[", "'holdout_fraction'", "]", "=", "holdout_fraction", "\n", "train_args", "[", "'hparams_seed'", "]", "=", "hparams_seed", "\n", "train_args", "[", "'data_dir'", "]", "=", "data_dir", "\n", "train_args", "[", "'task'", "]", "=", "task", "\n", "train_args", "[", "'trial_seed'", "]", "=", "trial_seed", "\n", "train_args", "[", "'seed'", "]", "=", "misc", ".", "seed_hash", "(", "dataset", ",", "\n", "algorithm", ",", "test_envs", ",", "hparams_seed", ",", "trial_seed", ")", "\n", "if", "steps", "is", "not", "None", ":", "\n", "                            ", "train_args", "[", "'steps'", "]", "=", "steps", "\n", "", "if", "hparams", "is", "not", "None", ":", "\n", "                            ", "train_args", "[", "'hparams'", "]", "=", "hparams", "\n", "", "args_list", ".", "append", "(", "train_args", ")", "\n", "", "", "", "", "", "return", "args_list", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.sweep.ask_for_confirmation": [[130, 135], ["input", "print", "exit", "input.lower().strip", "input.lower"], "function", ["None"], ["", "def", "ask_for_confirmation", "(", ")", ":", "\n", "    ", "response", "=", "input", "(", "'Are you sure? (y/n) '", ")", "\n", "if", "not", "response", ".", "lower", "(", ")", ".", "strip", "(", ")", "[", ":", "1", "]", "==", "\"y\"", ":", "\n", "        ", "print", "(", "'Nevermind!'", ")", "\n", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.stage_path": [[20, 27], ["os.path.join", "os.path.exists", "os.makedirs"], "function", ["None"], ["def", "stage_path", "(", "data_dir", ",", "name", ")", ":", "\n", "    ", "full_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "name", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "full_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "full_path", ")", "\n", "\n", "", "return", "full_path", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.download_and_extract": [[29, 49], ["gdown.download", "dst.endswith", "dst.endswith", "dst.endswith", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "tarfile.open", "tarfile.open.extractall", "tarfile.open.close", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close", "os.remove", "os.path.dirname", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["", "def", "download_and_extract", "(", "url", ",", "dst", ",", "remove", "=", "True", ")", ":", "\n", "    ", "gdown", ".", "download", "(", "url", ",", "dst", ",", "quiet", "=", "False", ")", "\n", "\n", "if", "dst", ".", "endswith", "(", "\".tar.gz\"", ")", ":", "\n", "        ", "tar", "=", "tarfile", ".", "open", "(", "dst", ",", "\"r:gz\"", ")", "\n", "tar", ".", "extractall", "(", "os", ".", "path", ".", "dirname", "(", "dst", ")", ")", "\n", "tar", ".", "close", "(", ")", "\n", "\n", "", "if", "dst", ".", "endswith", "(", "\".tar\"", ")", ":", "\n", "        ", "tar", "=", "tarfile", ".", "open", "(", "dst", ",", "\"r:\"", ")", "\n", "tar", ".", "extractall", "(", "os", ".", "path", ".", "dirname", "(", "dst", ")", ")", "\n", "tar", ".", "close", "(", ")", "\n", "\n", "", "if", "dst", ".", "endswith", "(", "\".zip\"", ")", ":", "\n", "        ", "zf", "=", "ZipFile", "(", "dst", ",", "\"r\"", ")", "\n", "zf", ".", "extractall", "(", "os", ".", "path", ".", "dirname", "(", "dst", ")", ")", "\n", "zf", ".", "close", "(", ")", "\n", "\n", "", "if", "remove", ":", "\n", "        ", "os", ".", "remove", "(", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.download_vlcs": [[97, 103], ["download.stage_path", "download.download_and_extract", "os.path.join"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.stage_path", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.download_and_extract"], ["", "", "def", "download_vlcs", "(", "data_dir", ")", ":", "\n", "# Original URL: http://www.eecs.qmul.ac.uk/~dl307/project_iccv2017", "\n", "    ", "full_path", "=", "stage_path", "(", "data_dir", ",", "\"VLCS\"", ")", "\n", "\n", "download_and_extract", "(", "\"https://drive.google.com/uc?id=1skwblH1_okBwxWxmRsp9_qi15hyPpxg8\"", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"VLCS.tar.gz\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.download_mnist": [[107, 111], ["download.stage_path", "torchvision.datasets.MNIST"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.stage_path"], ["", "def", "download_mnist", "(", "data_dir", ")", ":", "\n", "# Original URL: http://yann.lecun.com/exdb/mnist/", "\n", "    ", "full_path", "=", "stage_path", "(", "data_dir", ",", "\"MNIST\"", ")", "\n", "MNIST", "(", "full_path", ",", "download", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.download_pacs": [[115, 124], ["download.stage_path", "download.download_and_extract", "os.rename", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.stage_path", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.download_and_extract"], ["", "def", "download_pacs", "(", "data_dir", ")", ":", "\n", "# Original URL: http://www.eecs.qmul.ac.uk/~dl307/project_iccv2017", "\n", "    ", "full_path", "=", "stage_path", "(", "data_dir", ",", "\"PACS\"", ")", "\n", "\n", "download_and_extract", "(", "\"https://drive.google.com/uc?id=0B6x7gtvErXgfbF9CSk53UkRxVzg\"", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"PACS.zip\"", ")", ")", "\n", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"kfold\"", ")", ",", "\n", "full_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.download_office_home": [[128, 137], ["download.stage_path", "download.download_and_extract", "os.rename", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.stage_path", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.download_and_extract"], ["", "def", "download_office_home", "(", "data_dir", ")", ":", "\n", "# Original URL: http://hemanthdv.org/OfficeHome-Dataset/", "\n", "    ", "full_path", "=", "stage_path", "(", "data_dir", ",", "\"office_home\"", ")", "\n", "\n", "download_and_extract", "(", "\"https://drive.google.com/uc?id=0B81rNlvomiwed0V1YUxQdC1uOTg\"", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"office_home.zip\"", ")", ")", "\n", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"OfficeHomeDataset_10072016\"", ")", ",", "\n", "full_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.download_domain_net": [[141, 163], ["download.stage_path", "download.download_and_extract", "open", "f.readlines", "os.path.join", "os.remove", "url.split", "os.path.join", "line.strip"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.stage_path", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.download_and_extract"], ["", "def", "download_domain_net", "(", "data_dir", ")", ":", "\n", "# Original URL: http://ai.bu.edu/M3SDA/", "\n", "    ", "full_path", "=", "stage_path", "(", "data_dir", ",", "\"domain_net\"", ")", "\n", "\n", "urls", "=", "[", "\n", "\"http://csr.bu.edu/ftp/visda/2019/multi-source/groundtruth/clipart.zip\"", ",", "\n", "\"http://csr.bu.edu/ftp/visda/2019/multi-source/infograph.zip\"", ",", "\n", "\"http://csr.bu.edu/ftp/visda/2019/multi-source/groundtruth/painting.zip\"", ",", "\n", "\"http://csr.bu.edu/ftp/visda/2019/multi-source/quickdraw.zip\"", ",", "\n", "\"http://csr.bu.edu/ftp/visda/2019/multi-source/real.zip\"", ",", "\n", "\"http://csr.bu.edu/ftp/visda/2019/multi-source/sketch.zip\"", "\n", "]", "\n", "\n", "for", "url", "in", "urls", ":", "\n", "        ", "download_and_extract", "(", "url", ",", "os", ".", "path", ".", "join", "(", "full_path", ",", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "with", "open", "(", "\"domainbed/misc/domain_net_duplicates.txt\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "full_path", ",", "line", ".", "strip", "(", ")", ")", ")", "\n", "", "except", "OSError", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.download_terra_incognita": [[167, 246], ["download.stage_path", "download.download_and_extract", "download.download_and_extract", "os.path.join", "os.path.join", "shutil.rmtree", "os.remove", "os.path.join", "os.path.join", "os.path.exists", "os.mkdir", "open", "json.load", "os.path.join", "os.path.exists", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "shutil.copyfile", "str", "os.path.exists", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.stage_path", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.download_and_extract", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.download.download_and_extract"], ["", "", "", "", "def", "download_terra_incognita", "(", "data_dir", ")", ":", "\n", "# Original URL: https://beerys.github.io/CaltechCameraTraps/", "\n", "# New URL: http://lila.science/datasets/caltech-camera-traps", "\n", "\n", "    ", "full_path", "=", "stage_path", "(", "data_dir", ",", "\"terra_incognita\"", ")", "\n", "\n", "download_and_extract", "(", "\n", "\"https://lilablobssc.blob.core.windows.net/caltechcameratraps/eccv_18_all_images_sm.tar.gz\"", ",", "\n", "os", ".", "path", ".", "join", "(", "full_path", ",", "\"terra_incognita_images.tar.gz\"", ")", ")", "\n", "\n", "download_and_extract", "(", "\n", "\"https://lilablobssc.blob.core.windows.net/caltechcameratraps/labels/caltech_camera_traps.json.zip\"", ",", "\n", "os", ".", "path", ".", "join", "(", "full_path", ",", "\"caltech_camera_traps.json.zip\"", ")", ")", "\n", "\n", "include_locations", "=", "[", "\"38\"", ",", "\"46\"", ",", "\"100\"", ",", "\"43\"", "]", "\n", "\n", "include_categories", "=", "[", "\n", "\"bird\"", ",", "\"bobcat\"", ",", "\"cat\"", ",", "\"coyote\"", ",", "\"dog\"", ",", "\"empty\"", ",", "\"opossum\"", ",", "\"rabbit\"", ",", "\n", "\"raccoon\"", ",", "\"squirrel\"", "\n", "]", "\n", "\n", "images_folder", "=", "os", ".", "path", ".", "join", "(", "full_path", ",", "\"eccv_18_all_images_sm/\"", ")", "\n", "annotations_file", "=", "os", ".", "path", ".", "join", "(", "full_path", ",", "\"caltech_images_20210113.json\"", ")", "\n", "destination_folder", "=", "full_path", "\n", "\n", "stats", "=", "{", "}", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "destination_folder", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "destination_folder", ")", "\n", "\n", "", "with", "open", "(", "annotations_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "category_dict", "=", "{", "}", "\n", "for", "item", "in", "data", "[", "'categories'", "]", ":", "\n", "        ", "category_dict", "[", "item", "[", "'id'", "]", "]", "=", "item", "[", "'name'", "]", "\n", "\n", "", "for", "image", "in", "data", "[", "'images'", "]", ":", "\n", "        ", "image_location", "=", "image", "[", "'location'", "]", "\n", "\n", "if", "image_location", "not", "in", "include_locations", ":", "\n", "            ", "continue", "\n", "\n", "", "loc_folder", "=", "os", ".", "path", ".", "join", "(", "destination_folder", ",", "\n", "'location_'", "+", "str", "(", "image_location", ")", "+", "'/'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "loc_folder", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "loc_folder", ")", "\n", "\n", "", "image_id", "=", "image", "[", "'id'", "]", "\n", "image_fname", "=", "image", "[", "'file_name'", "]", "\n", "\n", "for", "annotation", "in", "data", "[", "'annotations'", "]", ":", "\n", "            ", "if", "annotation", "[", "'image_id'", "]", "==", "image_id", ":", "\n", "                ", "if", "image_location", "not", "in", "stats", ":", "\n", "                    ", "stats", "[", "image_location", "]", "=", "{", "}", "\n", "\n", "", "category", "=", "category_dict", "[", "annotation", "[", "'category_id'", "]", "]", "\n", "\n", "if", "category", "not", "in", "include_categories", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "category", "not", "in", "stats", "[", "image_location", "]", ":", "\n", "                    ", "stats", "[", "image_location", "]", "[", "category", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "stats", "[", "image_location", "]", "[", "category", "]", "+=", "1", "\n", "\n", "", "loc_cat_folder", "=", "os", ".", "path", ".", "join", "(", "loc_folder", ",", "category", "+", "'/'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "loc_cat_folder", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "loc_cat_folder", ")", "\n", "\n", "", "dst_path", "=", "os", ".", "path", ".", "join", "(", "loc_cat_folder", ",", "image_fname", ")", "\n", "src_path", "=", "os", ".", "path", ".", "join", "(", "images_folder", ",", "image_fname", ")", "\n", "\n", "shutil", ".", "copyfile", "(", "src_path", ",", "dst_path", ")", "\n", "\n", "", "", "", "shutil", ".", "rmtree", "(", "images_folder", ")", "\n", "os", ".", "remove", "(", "annotations_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.collect_results.format_mean": [[26, 37], ["len", "numpy.mean", "numpy.std", "list", "list", "numpy.sqrt", "len"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.std", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len"], ["def", "format_mean", "(", "data", ",", "latex", ")", ":", "\n", "    ", "\"\"\"Given a list of datapoints, return a string describing their mean and\n    standard error\"\"\"", "\n", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "        ", "return", "None", ",", "None", ",", "\"X\"", "\n", "", "mean", "=", "100", "*", "np", ".", "mean", "(", "list", "(", "data", ")", ")", "\n", "err", "=", "100", "*", "np", ".", "std", "(", "list", "(", "data", ")", "/", "np", ".", "sqrt", "(", "len", "(", "data", ")", ")", ")", "\n", "if", "latex", ":", "\n", "        ", "return", "mean", ",", "err", ",", "\"{:.1f} $\\\\pm$ {:.1f}\"", ".", "format", "(", "mean", ",", "err", ")", "\n", "", "else", ":", "\n", "        ", "return", "mean", ",", "err", ",", "\"{:.1f} +/- {:.1f}\"", ".", "format", "(", "mean", ",", "err", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.collect_results.print_table": [[38, 68], ["print", "zip", "table.insert", "enumerate", "len", "print", "print", "print", "print", "print", "row.insert", "domainbed.lib.misc.print_row", "print", "print", "print", "print", "str().replace", "str"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.misc.print_row"], ["", "", "def", "print_table", "(", "table", ",", "header_text", ",", "row_labels", ",", "col_labels", ",", "colwidth", "=", "10", ",", "\n", "latex", "=", "True", ")", ":", "\n", "    ", "\"\"\"Pretty-print a 2D array of data, optionally with row/col labels\"\"\"", "\n", "print", "(", "\"\"", ")", "\n", "\n", "if", "latex", ":", "\n", "        ", "num_cols", "=", "len", "(", "table", "[", "0", "]", ")", "\n", "print", "(", "\"\\\\begin{center}\"", ")", "\n", "print", "(", "\"\\\\adjustbox{max width=\\\\textwidth}{%\"", ")", "\n", "print", "(", "\"\\\\begin{tabular}{l\"", "+", "\"c\"", "*", "num_cols", "+", "\"}\"", ")", "\n", "print", "(", "\"\\\\toprule\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"--------\"", ",", "header_text", ")", "\n", "\n", "", "for", "row", ",", "label", "in", "zip", "(", "table", ",", "row_labels", ")", ":", "\n", "        ", "row", ".", "insert", "(", "0", ",", "label", ")", "\n", "\n", "", "if", "latex", ":", "\n", "        ", "col_labels", "=", "[", "\"\\\\textbf{\"", "+", "str", "(", "col_label", ")", ".", "replace", "(", "\"%\"", ",", "\"\\\\%\"", ")", "+", "\"}\"", "\n", "for", "col_label", "in", "col_labels", "]", "\n", "", "table", ".", "insert", "(", "0", ",", "col_labels", ")", "\n", "\n", "for", "r", ",", "row", "in", "enumerate", "(", "table", ")", ":", "\n", "        ", "misc", ".", "print_row", "(", "row", ",", "colwidth", "=", "colwidth", ",", "latex", "=", "latex", ")", "\n", "if", "latex", "and", "r", "==", "0", ":", "\n", "            ", "print", "(", "\"\\\\midrule\"", ")", "\n", "", "", "if", "latex", ":", "\n", "        ", "print", "(", "\"\\\\bottomrule\"", ")", "\n", "print", "(", "\"\\\\end{tabular}}\"", ")", "\n", "print", "(", "\"\\\\end{center}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.alexrame_fishr.scripts.collect_results.print_results_tables": [[69, 143], ["domainbed.lib.reporting.get_grouped_records().map().filter", "domainbed.lib.query.Q().select().unique", "domainbed.lib.query.Q().select().unique().sorted", "enumerate", "collect_results.print_table", "range", "enumerate", "collect_results.print_table", "print", "print", "enumerate", "domainbed.lib.reporting.get_grouped_records().map", "domainbed.lib.query.Q().select", "domainbed.lib.query.Q().select().unique", "print", "print", "domainbed.datasets.num_environments", "enumerate", "list", "reporting.get_grouped_records().map().filter.filter_equals().group().map", "collect_results.format_mean", "means.append", "reporting.get_grouped_records().map().filter.filter_equals().select", "collect_results.format_mean", "means.append", "domainbed.lib.reporting.get_grouped_records", "domainbed.lib.query.Q", "domainbed.lib.query.Q().select", "domainbed.datasets.get_dataset_class", "reporting.get_grouped_records().map().filter.filter_equals().group", "group.select().mean", "sum", "len", "selection_method.sweep_acc", "reporting.get_grouped_records().map().filter.filter_equals", "sum", "len", "domainbed.lib.query.Q", "reporting.get_grouped_records().map().filter.filter_equals", "group.select"], "function", ["home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.unique", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sorted", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.collect_results.print_table", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.collect_results.print_table", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.map", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.select", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.unique", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.num_environments", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.map", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.collect_results.format_mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.select", "home.repos.pwc.inspect_result.alexrame_fishr.scripts.collect_results.format_mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.reporting.get_grouped_records", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.select", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.datasets.get_dataset_class", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.group", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.mean", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.domainbed.model_selection.SelectionMethod.sweep_acc", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter_equals", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.sum", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.len", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.filter_equals", "home.repos.pwc.inspect_result.alexrame_fishr.lib.query.Q.select"], ["", "", "def", "print_results_tables", "(", "records", ",", "selection_method", ",", "latex", ")", ":", "\n", "    ", "\"\"\"Given all records, print a results table for each dataset.\"\"\"", "\n", "grouped_records", "=", "reporting", ".", "get_grouped_records", "(", "records", ")", ".", "map", "(", "lambda", "group", ":", "\n", "{", "**", "group", ",", "\"sweep_acc\"", ":", "selection_method", ".", "sweep_acc", "(", "group", "[", "\"records\"", "]", ")", "}", "\n", ")", ".", "filter", "(", "lambda", "g", ":", "g", "[", "\"sweep_acc\"", "]", "is", "not", "None", ")", "\n", "\n", "# read algorithm names and sort (predefined order)", "\n", "alg_names", "=", "Q", "(", "records", ")", ".", "select", "(", "\"args.algorithm\"", ")", ".", "unique", "(", ")", "\n", "alg_names", "=", "(", "[", "n", "for", "n", "in", "algorithms", ".", "ALGORITHMS", "if", "n", "in", "alg_names", "]", "+", "\n", "[", "n", "for", "n", "in", "alg_names", "if", "n", "not", "in", "algorithms", ".", "ALGORITHMS", "]", ")", "\n", "\n", "# read dataset names and sort (lexicographic order)", "\n", "dataset_names", "=", "Q", "(", "records", ")", ".", "select", "(", "\"args.dataset\"", ")", ".", "unique", "(", ")", ".", "sorted", "(", ")", "\n", "dataset_names", "=", "[", "d", "for", "d", "in", "datasets", ".", "DATASETS", "if", "d", "in", "dataset_names", "]", "\n", "\n", "for", "dataset", "in", "dataset_names", ":", "\n", "        ", "if", "latex", ":", "\n", "            ", "print", "(", ")", "\n", "print", "(", "\"\\\\subsubsection{{{}}}\"", ".", "format", "(", "dataset", ")", ")", "\n", "", "test_envs", "=", "range", "(", "datasets", ".", "num_environments", "(", "dataset", ")", ")", "\n", "\n", "table", "=", "[", "[", "None", "for", "_", "in", "[", "*", "test_envs", ",", "\"Avg\"", "]", "]", "for", "_", "in", "alg_names", "]", "\n", "for", "i", ",", "algorithm", "in", "enumerate", "(", "alg_names", ")", ":", "\n", "            ", "means", "=", "[", "]", "\n", "for", "j", ",", "test_env", "in", "enumerate", "(", "test_envs", ")", ":", "\n", "                ", "trial_accs", "=", "(", "grouped_records", "\n", ".", "filter_equals", "(", "\n", "\"dataset, algorithm, test_env\"", ",", "\n", "(", "dataset", ",", "algorithm", ",", "test_env", ")", "\n", ")", ".", "select", "(", "\"sweep_acc\"", ")", ")", "\n", "mean", ",", "err", ",", "table", "[", "i", "]", "[", "j", "]", "=", "format_mean", "(", "trial_accs", ",", "latex", ")", "\n", "means", ".", "append", "(", "mean", ")", "\n", "", "if", "None", "in", "means", ":", "\n", "                ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"X\"", "\n", "", "else", ":", "\n", "                ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"{:.1f}\"", ".", "format", "(", "sum", "(", "means", ")", "/", "len", "(", "means", ")", ")", "\n", "\n", "", "", "col_labels", "=", "[", "\n", "\"Algorithm\"", ",", "\n", "*", "datasets", ".", "get_dataset_class", "(", "dataset", ")", ".", "ENVIRONMENTS", ",", "\n", "\"Avg\"", "\n", "]", "\n", "header_text", "=", "(", "f\"Dataset: {dataset}, \"", "\n", "f\"model selection method: {selection_method.name}\"", ")", "\n", "print_table", "(", "table", ",", "header_text", ",", "alg_names", ",", "list", "(", "col_labels", ")", ",", "\n", "colwidth", "=", "20", ",", "latex", "=", "latex", ")", "\n", "\n", "# Print an \"averages\" table", "\n", "", "if", "latex", ":", "\n", "        ", "print", "(", ")", "\n", "print", "(", "\"\\\\subsubsection{Averages}\"", ")", "\n", "\n", "", "table", "=", "[", "[", "None", "for", "_", "in", "[", "*", "dataset_names", ",", "\"Avg\"", "]", "]", "for", "_", "in", "alg_names", "]", "\n", "for", "i", ",", "algorithm", "in", "enumerate", "(", "alg_names", ")", ":", "\n", "        ", "means", "=", "[", "]", "\n", "for", "j", ",", "dataset", "in", "enumerate", "(", "dataset_names", ")", ":", "\n", "            ", "trial_averages", "=", "(", "grouped_records", "\n", ".", "filter_equals", "(", "\"algorithm, dataset\"", ",", "(", "algorithm", ",", "dataset", ")", ")", "\n", ".", "group", "(", "\"trial_seed\"", ")", "\n", ".", "map", "(", "lambda", "trial_seed", ",", "group", ":", "\n", "group", ".", "select", "(", "\"sweep_acc\"", ")", ".", "mean", "(", ")", "\n", ")", "\n", ")", "\n", "mean", ",", "err", ",", "table", "[", "i", "]", "[", "j", "]", "=", "format_mean", "(", "trial_averages", ",", "latex", ")", "\n", "means", ".", "append", "(", "mean", ")", "\n", "", "if", "None", "in", "means", ":", "\n", "            ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"X\"", "\n", "", "else", ":", "\n", "            ", "table", "[", "i", "]", "[", "-", "1", "]", "=", "\"{:.1f}\"", ".", "format", "(", "sum", "(", "means", ")", "/", "len", "(", "means", ")", ")", "\n", "\n", "", "", "col_labels", "=", "[", "\"Algorithm\"", ",", "*", "dataset_names", ",", "\"Avg\"", "]", "\n", "header_text", "=", "f\"Averages, model selection method: {selection_method.name}\"", "\n", "print_table", "(", "table", ",", "header_text", ",", "alg_names", ",", "col_labels", ",", "colwidth", "=", "25", ",", "\n", "latex", "=", "latex", ")", "\n", "\n"]]}