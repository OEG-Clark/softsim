{"home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.code.utils.AverageMeter.__init__": [[10, 12], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.code.utils.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.code.utils.AverageMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.code.utils.RecorderMeter.__init__": [[28, 30], ["utils.RecorderMeter.reset"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.reset"], ["def", "__init__", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "self", ".", "reset", "(", "total_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.code.utils.RecorderMeter.reset": [[31, 40], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "assert", "total_epoch", ">", "0", "\n", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "epoch_losses", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_losses", "=", "self", ".", "epoch_losses", "-", "1", "\n", "\n", "self", ".", "epoch_accuracy", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_accuracy", "=", "self", ".", "epoch_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.code.utils.RecorderMeter.update": [[41, 48], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "idx", ",", "train_loss", ",", "train_acc", ",", "val_loss", ",", "val_acc", ")", ":", "\n", "    ", "assert", "idx", ">=", "0", "and", "idx", "<", "self", ".", "total_epoch", ",", "'total_epoch : {} , but update with the {} index'", ".", "format", "(", "self", ".", "total_epoch", ",", "idx", ")", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "0", "]", "=", "train_loss", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "1", "]", "=", "val_loss", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "0", "]", "=", "train_acc", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "1", "]", "=", "val_acc", "\n", "self", ".", "current_epoch", "=", "idx", "+", "1", "\n", "# return self.max_accuracy(False) == val_acc", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.code.utils.RecorderMeter.max_accuracy": [[50, 54], ["utils.RecorderMeter.epoch_accuracy[].max", "utils.RecorderMeter.epoch_accuracy[].max"], "methods", ["None"], ["", "def", "max_accuracy", "(", "self", ",", "istrain", ")", ":", "\n", "    ", "if", "self", ".", "current_epoch", "<=", "0", ":", "return", "0", "\n", "if", "istrain", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "0", "]", ".", "max", "(", ")", "\n", "else", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "1", "]", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.code.utils.RecorderMeter.plot_curve": [[55, 99], ["matplotlib.figure", "matplotlib.figure", "numpy.array", "numpy.zeros", "matplotlib.xlim", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.ylim", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.grid", "matplotlib.grid", "matplotlib.title", "matplotlib.title", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.close", "matplotlib.close", "numpy.arange", "numpy.arange", "matplotlib.figure.savefig", "print", "float", "float", "range"], "methods", ["None"], ["", "def", "plot_curve", "(", "self", ",", "save_path", ")", ":", "\n", "    ", "title", "=", "'the accuracy/loss curve of train/val'", "\n", "dpi", "=", "80", "\n", "width", ",", "height", "=", "1200", ",", "800", "\n", "legend_fontsize", "=", "10", "\n", "scale_distance", "=", "48.8", "\n", "figsize", "=", "width", "/", "float", "(", "dpi", ")", ",", "height", "/", "float", "(", "dpi", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "x_axis", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "total_epoch", ")", "]", ")", "# epochs", "\n", "y_axis", "=", "np", ".", "zeros", "(", "self", ".", "total_epoch", ")", "\n", "\n", "plt", ".", "xlim", "(", "0", ",", "self", ".", "total_epoch", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "100", ")", "\n", "interval_y", "=", "5", "\n", "interval_x", "=", "5", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "self", ".", "total_epoch", "+", "interval_x", ",", "interval_x", ")", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "100", "+", "interval_y", ",", "interval_y", ")", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'the training epoch'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "ylabel", "(", "'accuracy'", ",", "fontsize", "=", "16", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'g'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'train-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'y'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'valid-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'g'", ",", "linestyle", "=", "':'", ",", "label", "=", "'train-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'y'", ",", "linestyle", "=", "':'", ",", "label", "=", "'valid-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "      ", "fig", ".", "savefig", "(", "save_path", ",", "dpi", "=", "dpi", ",", "bbox_inches", "=", "'tight'", ")", "\n", "print", "(", "'---- save figure {} into {}'", ".", "format", "(", "title", ",", "save_path", ")", ")", "\n", "", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.code.utils.time_string": [[101, 105], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["", "", "def", "time_string", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.code.utils.convert_secs2time": [[106, 111], ["int", "int", "int"], "function", ["None"], ["", "def", "convert_secs2time", "(", "epoch_time", ")", ":", "\n", "  ", "need_hour", "=", "int", "(", "epoch_time", "/", "3600", ")", "\n", "need_mins", "=", "int", "(", "(", "epoch_time", "-", "3600", "*", "need_hour", ")", "/", "60", ")", "\n", "need_secs", "=", "int", "(", "epoch_time", "-", "3600", "*", "need_hour", "-", "60", "*", "need_mins", ")", "\n", "return", "need_hour", ",", "need_mins", ",", "need_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.code.utils.time_file_str": [[112, 116], ["time.strftime", "time.gmtime", "random.randint", "time.time"], "function", ["None"], ["", "def", "time_file_str", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d'", "\n", "string", "=", "'{}'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "+", "'-{}'", ".", "format", "(", "random", ".", "randint", "(", "1", ",", "10000", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noisy_resnet_cifar.DownsampleA.__init__": [[11, 15], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.__init__"], ["  ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "    ", "super", "(", "DownsampleA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "2", "\n", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noisy_resnet_cifar.DownsampleA.forward": [[16, 19], ["noisy_resnet_cifar.DownsampleA.avg", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "noisy_resnet_cifar.DownsampleA.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "avg", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "x", ".", "mul", "(", "0", ")", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noisy_resnet_cifar.ResNetBasicblock.__init__": [[25, 35], ["torch.Module.__init__", "noise_layer.noise_Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "noise_layer.noise_Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "    ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_a", "=", "noise_Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_a", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv_b", "=", "noise_Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_b", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noisy_resnet_cifar.ResNetBasicblock.forward": [[36, 50], ["noisy_resnet_cifar.ResNetBasicblock.conv_a", "noisy_resnet_cifar.ResNetBasicblock.bn_a", "torch.relu", "torch.relu", "torch.relu", "noisy_resnet_cifar.ResNetBasicblock.conv_b", "noisy_resnet_cifar.ResNetBasicblock.bn_b", "torch.relu", "torch.relu", "torch.relu", "noisy_resnet_cifar.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "basicblock", "=", "self", ".", "conv_a", "(", "x", ")", "\n", "basicblock", "=", "self", ".", "bn_a", "(", "basicblock", ")", "\n", "basicblock", "=", "F", ".", "relu", "(", "basicblock", ",", "inplace", "=", "True", ")", "\n", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "basicblock", "=", "self", ".", "bn_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "F", ".", "relu", "(", "residual", "+", "basicblock", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noisy_resnet_cifar.CifarResNet.__init__": [[56, 93], ["torch.Module.__init__", "print", "noise_layer.noise_Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "noisy_resnet_cifar.CifarResNet._make_layer", "noisy_resnet_cifar.CifarResNet._make_layer", "noisy_resnet_cifar.CifarResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "noise_layer.noise_Linear", "noisy_resnet_cifar.CifarResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "torch.nn.init.kaiming_normal", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.__init__", "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.CifarResNet._make_layer", "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.CifarResNet._make_layer", "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.CifarResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "depth", ",", "num_classes", ")", ":", "\n", "    ", "\"\"\" Constructor\n    Args:\n      depth: number of layers.\n      num_classes: number of classes\n      base_width: base width\n    \"\"\"", "\n", "super", "(", "CifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "print", "(", "'CifarResNet : Depth : {} , Layers for each block : {}'", ".", "format", "(", "depth", ",", "layer_blocks", ")", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "conv_1_3x3", "=", "noise_Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "stage_1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layer_blocks", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "noise_Linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "#m.bias.data.zero_()", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noisy_resnet_cifar.CifarResNet._make_layer": [[94, 106], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "noisy_resnet_cifar.DownsampleA", "block", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "      ", "downsample", "=", "DownsampleA", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noisy_resnet_cifar.CifarResNet.forward": [[107, 116], ["noisy_resnet_cifar.CifarResNet.conv_1_3x3", "torch.relu", "torch.relu", "torch.relu", "noisy_resnet_cifar.CifarResNet.stage_1", "noisy_resnet_cifar.CifarResNet.stage_2", "noisy_resnet_cifar.CifarResNet.stage_3", "noisy_resnet_cifar.CifarResNet.avgpool", "x.view.view.view", "noisy_resnet_cifar.CifarResNet.classifier", "noisy_resnet_cifar.CifarResNet.bn_1", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv_1_3x3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn_1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "stage_1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noisy_resnet_cifar.noise_resnet20": [[117, 124], ["noisy_resnet_cifar.CifarResNet"], "function", ["None"], ["", "", "def", "noise_resnet20", "(", "num_classes", "=", "10", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-20 model for CIFAR-10 (by default)\n  Args:\n    num_classes (uint): number of classes\n  \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "20", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noisy_resnet_cifar.noise_resnet32": [[125, 132], ["noisy_resnet_cifar.CifarResNet"], "function", ["None"], ["", "def", "noise_resnet32", "(", "num_classes", "=", "10", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-32 model for CIFAR-10 (by default)\n  Args:\n    num_classes (uint): number of classes\n  \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "32", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noisy_resnet_cifar.noise_resnet44": [[133, 140], ["noisy_resnet_cifar.CifarResNet"], "function", ["None"], ["", "def", "noise_resnet44", "(", "num_classes", "=", "10", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-44 model for CIFAR-10 (by default)\n  Args:\n    num_classes (uint): number of classes\n  \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "44", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noisy_resnet_cifar.noise_resnet56": [[141, 148], ["noisy_resnet_cifar.CifarResNet"], "function", ["None"], ["", "def", "noise_resnet56", "(", "num_classes", "=", "10", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-56 model for CIFAR-10 (by default)\n  Args:\n    num_classes (uint): number of classes\n  \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "56", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noisy_resnet_cifar.vanilla_resnet110": [[149, 156], ["noisy_resnet_cifar.CifarResNet"], "function", ["None"], ["", "def", "vanilla_resnet110", "(", "num_classes", "=", "10", ")", ":", "\n", "  ", "\"\"\"Constructs a ResNet-110 model for CIFAR-10 (by default)\n  Args:\n    num_classes (uint): number of classes\n  \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "110", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.nomarlization_layer.Normalize_layer.__init__": [[6, 10], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "super", "(", "Normalize_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "mean", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "std", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "std", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.nomarlization_layer.Normalize_layer.forward": [[11, 14], ["input.sub().div", "input.sub"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "return", "input", ".", "sub", "(", "self", ".", "mean", ")", ".", "div", "(", "self", ".", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.nomarlization_layer.noise_Normalize_layer.__init__": [[18, 24], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor().unsqueeze().unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "std", ",", "input_noise", "=", "False", ")", ":", "\n", "        ", "super", "(", "noise_Normalize_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "mean", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "std", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "std", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "input_noise", "=", "input_noise", "\n", "self", ".", "alpha_i", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "0.25", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.nomarlization_layer.noise_Normalize_layer.forward": [[25, 32], ["input.sub().div", "input.sub().div.std().item", "input.sub().div.clone().normal_", "input.sub", "input.sub().div.std", "input.sub().div.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "input", ".", "sub", "(", "self", ".", "mean", ")", ".", "div", "(", "self", ".", "std", ")", "\n", "\n", "input_std", "=", "output", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "input_noise", "=", "output", ".", "clone", "(", ")", ".", "normal_", "(", "0", ",", "input_std", ")", "\n", "\n", "return", "output", "+", "input_noise", "*", "self", ".", "alpha_i", "*", "self", ".", "input_noise", "\n", "", "", ""]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.attack_model.Attack.__init__": [[10, 26], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataloader", ",", "criterion", "=", "None", ",", "gpu_id", "=", "0", ",", "\n", "epsilon", "=", "0.031", ",", "attack_method", "=", "'pgd'", ")", ":", "\n", "\n", "        ", "if", "criterion", "is", "not", "None", ":", "\n", "            ", "self", ".", "criterion", "=", "criterion", "\n", "", "else", ":", "\n", "            ", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "self", ".", "dataloader", "=", "dataloader", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "gpu_id", "=", "gpu_id", "#this is integer", "\n", "\n", "if", "attack_method", "is", "'fgsm'", ":", "\n", "            ", "self", ".", "attack_method", "=", "self", ".", "fgsm", "\n", "", "elif", "attack_method", "is", "'pgd'", ":", "\n", "            ", "self", ".", "attack_method", "=", "self", ".", "pgd", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.attack_model.Attack.update_params": [[27, 38], ["None"], "methods", ["None"], ["", "", "def", "update_params", "(", "self", ",", "epsilon", "=", "None", ",", "dataloader", "=", "None", ",", "attack_method", "=", "None", ")", ":", "\n", "        ", "if", "epsilon", "is", "not", "None", ":", "\n", "            ", "self", ".", "epsilon", "=", "epsilon", "\n", "", "if", "dataloader", "is", "not", "None", ":", "\n", "            ", "self", ".", "dataloader", "=", "dataloader", "\n", "\n", "", "if", "attack_method", "is", "not", "None", ":", "\n", "            ", "if", "attack_method", "is", "'fgsm'", ":", "\n", "                ", "self", ".", "attack_method", "=", "self", ".", "fgsm", "\n", "", "elif", "attack_method", "is", "'pgd'", ":", "\n", "                ", "self", ".", "attack_method", "=", "self", ".", "pgd", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.attack_model.Attack.fgsm": [[40, 66], ["model.eval", "data.clone", "model", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy.backward", "data.clone.grad.data.sign", "data.clone.grad.data.zero_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "data.clone.clamp_"], "methods", ["None"], ["", "", "", "def", "fgsm", "(", "self", ",", "model", ",", "data", ",", "target", ",", "data_min", "=", "0", ",", "data_max", "=", "1", ")", ":", "\n", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "# perturbed_data = copy.deepcopy(data)", "\n", "perturbed_data", "=", "data", ".", "clone", "(", ")", "\n", "\n", "perturbed_data", ".", "requires_grad", "=", "True", "\n", "output", "=", "model", "(", "perturbed_data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "\n", "if", "perturbed_data", ".", "grad", "is", "not", "None", ":", "\n", "            ", "perturbed_data", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "\n", "# Collect the element-wise sign of the data gradient", "\n", "sign_data_grad", "=", "perturbed_data", ".", "grad", ".", "data", ".", "sign", "(", ")", "\n", "perturbed_data", ".", "requires_grad", "=", "False", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Create the perturbed image by adjusting each pixel of the input image", "\n", "            ", "perturbed_data", "+=", "self", ".", "epsilon", "*", "sign_data_grad", "\n", "# Adding clipping to maintain [min,max] range, default 0,1 for image", "\n", "perturbed_data", ".", "clamp_", "(", "data_min", ",", "data_max", ")", "\n", "\n", "", "return", "perturbed_data", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.attack_model.Attack.pgd": [[68, 105], ["model.eval", "data.clone", "data_max.clamp_", "data_min.clamp_", "range", "model", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy.backward", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "data.clone.data.clamp_", "data.clone.grad.data.zero_", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "data.clone.uniform_", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min"], "methods", ["None"], ["", "def", "pgd", "(", "self", ",", "model", ",", "data", ",", "target", ",", "k", "=", "7", ",", "a", "=", "0.01", ",", "random_start", "=", "True", ",", "\n", "d_min", "=", "0", ",", "d_max", "=", "1", ")", ":", "\n", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "# perturbed_data = copy.deepcopy(data)", "\n", "perturbed_data", "=", "data", ".", "clone", "(", ")", "\n", "\n", "perturbed_data", ".", "requires_grad", "=", "True", "\n", "\n", "data_max", "=", "data", "+", "self", ".", "epsilon", "\n", "data_min", "=", "data", "-", "self", ".", "epsilon", "\n", "data_max", ".", "clamp_", "(", "d_min", ",", "d_max", ")", "\n", "data_min", ".", "clamp_", "(", "d_min", ",", "d_max", ")", "\n", "\n", "if", "random_start", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "perturbed_data", ".", "data", "=", "data", "+", "perturbed_data", ".", "uniform_", "(", "-", "1", "*", "self", ".", "epsilon", ",", "self", ".", "epsilon", ")", "\n", "perturbed_data", ".", "data", ".", "clamp_", "(", "d_min", ",", "d_max", ")", "\n", "\n", "", "", "for", "_", "in", "range", "(", "k", ")", ":", "\n", "\n", "            ", "output", "=", "model", "(", "perturbed_data", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "\n", "if", "perturbed_data", ".", "grad", "is", "not", "None", ":", "\n", "                ", "perturbed_data", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "data_grad", "=", "perturbed_data", ".", "grad", ".", "data", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "perturbed_data", ".", "data", "+=", "a", "*", "torch", ".", "sign", "(", "data_grad", ")", "\n", "perturbed_data", ".", "data", "=", "torch", ".", "max", "(", "torch", ".", "min", "(", "perturbed_data", ",", "data_max", ")", ",", "\n", "data_min", ")", "\n", "", "", "perturbed_data", ".", "requires_grad", "=", "False", "\n", "\n", "return", "perturbed_data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noise_layer.noise_Linear.__init__": [[10, 23], ["torch.Linear.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "noise_layer.noise_Linear.weight.size"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "pni", "=", "'layerwise'", ",", "w_noise", "=", "True", ")", ":", "\n", "        ", "super", "(", "noise_Linear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "\n", "self", ".", "pni", "=", "pni", "\n", "if", "self", ".", "pni", "is", "'layerwise'", ":", "\n", "            ", "self", ".", "alpha_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "0.25", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "elif", "self", ".", "pni", "is", "'channelwise'", ":", "\n", "            ", "self", ".", "alpha_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "out_features", ")", ".", "view", "(", "-", "1", ",", "1", ")", "*", "0.25", ",", "\n", "requires_grad", "=", "True", ")", "\n", "", "elif", "self", ".", "pni", "is", "'elementwise'", ":", "\n", "            ", "self", ".", "alpha_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "*", "0.25", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "self", ".", "w_noise", "=", "w_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noise_layer.noise_Linear.forward": [[24, 34], ["torch.linear", "torch.linear", "torch.linear", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "noise_layer.noise_Linear.weight.std().item", "noise_layer.noise_Linear.weight.clone().normal_", "noise_layer.noise_Linear.weight.std", "noise_layer.noise_Linear.weight.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "std", "=", "self", ".", "weight", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "noise", "=", "self", ".", "weight", ".", "clone", "(", ")", ".", "normal_", "(", "0", ",", "std", ")", "\n", "\n", "", "noise_weight", "=", "self", ".", "weight", "+", "self", ".", "alpha_w", "*", "noise", "*", "self", ".", "w_noise", "\n", "output", "=", "F", ".", "linear", "(", "input", ",", "noise_weight", ",", "self", ".", "bias", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noise_layer.noise_Conv2d.__init__": [[39, 54], ["torch.Conv2d.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones().view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "noise_layer.noise_Conv2d.weight.size"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "bias", "=", "True", ",", "pni", "=", "'layerwise'", ",", "w_noise", "=", "True", ")", ":", "\n", "        ", "super", "(", "noise_Conv2d", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "\n", "padding", ",", "dilation", ",", "groups", ",", "bias", ")", "\n", "\n", "self", ".", "pni", "=", "pni", "\n", "if", "self", ".", "pni", "is", "'layerwise'", ":", "\n", "            ", "self", ".", "alpha_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "0.25", "]", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "elif", "self", ".", "pni", "is", "'channelwise'", ":", "\n", "            ", "self", ".", "alpha_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "out_channels", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "*", "0.25", ",", "\n", "requires_grad", "=", "True", ")", "\n", "", "elif", "self", ".", "pni", "is", "'elementwise'", ":", "\n", "            ", "self", ".", "alpha_w", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "weight", ".", "size", "(", ")", ")", "*", "0.25", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "self", ".", "w_noise", "=", "w_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.models.noise_layer.noise_Conv2d.forward": [[56, 67], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "noise_layer.noise_Conv2d.weight.std().item", "noise_layer.noise_Conv2d.weight.clone().normal_", "noise_layer.noise_Conv2d.weight.std", "noise_layer.noise_Conv2d.weight.clone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "std", "=", "self", ".", "weight", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "noise", "=", "self", ".", "weight", ".", "clone", "(", ")", ".", "normal_", "(", "0", ",", "std", ")", "\n", "\n", "", "noise_weight", "=", "self", ".", "weight", "+", "self", ".", "alpha_w", "*", "noise", "*", "self", ".", "w_noise", "\n", "output", "=", "F", ".", "conv2d", "(", "input", ",", "noise_weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ")", "\n", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.DownsampleA.__init__": [[9, 13], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nIn", ",", "nOut", ",", "stride", ")", ":", "\n", "        ", "super", "(", "DownsampleA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "stride", "==", "2", "\n", "self", ".", "avg", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.DownsampleA.forward": [[14, 17], ["vanilla_resnet_cifar.DownsampleA.avg", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "vanilla_resnet_cifar.DownsampleA.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "avg", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "(", "x", ",", "x", ".", "mul", "(", "0", ")", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.ResNetBasicblock.__init__": [[25, 37], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNetBasicblock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_a", "=", "nn", ".", "Conv2d", "(", "\n", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_a", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv_b", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_b", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.ResNetBasicblock.forward": [[38, 52], ["vanilla_resnet_cifar.ResNetBasicblock.conv_a", "vanilla_resnet_cifar.ResNetBasicblock.bn_a", "torch.relu", "torch.relu", "torch.relu", "vanilla_resnet_cifar.ResNetBasicblock.conv_b", "vanilla_resnet_cifar.ResNetBasicblock.bn_b", "torch.relu", "torch.relu", "torch.relu", "vanilla_resnet_cifar.ResNetBasicblock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "basicblock", "=", "self", ".", "conv_a", "(", "x", ")", "\n", "basicblock", "=", "self", ".", "bn_a", "(", "basicblock", ")", "\n", "basicblock", "=", "F", ".", "relu", "(", "basicblock", ",", "inplace", "=", "True", ")", "\n", "\n", "basicblock", "=", "self", ".", "conv_b", "(", "basicblock", ")", "\n", "basicblock", "=", "self", ".", "bn_b", "(", "basicblock", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "return", "F", ".", "relu", "(", "residual", "+", "basicblock", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.CifarResNet.__init__": [[60, 99], ["torch.Module.__init__", "print", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "vanilla_resnet_cifar.CifarResNet._make_layer", "vanilla_resnet_cifar.CifarResNet._make_layer", "vanilla_resnet_cifar.CifarResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "vanilla_resnet_cifar.CifarResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.__init__", "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.CifarResNet._make_layer", "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.CifarResNet._make_layer", "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.CifarResNet._make_layer"], ["def", "__init__", "(", "self", ",", "block", ",", "depth", ",", "num_classes", ")", ":", "\n", "        ", "\"\"\" Constructor\n        Args:\n          depth: number of layers.\n          num_classes: number of classes\n          base_width: base width\n        \"\"\"", "\n", "super", "(", "CifarResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Model type specifies number of layers for CIFAR-10 and CIFAR-100 model", "\n", "assert", "(", "depth", "-", "2", ")", "%", "6", "==", "0", ",", "'depth should be one of 20, 32, 44, 56, 110'", "\n", "layer_blocks", "=", "(", "depth", "-", "2", ")", "//", "6", "\n", "print", "(", "'CifarResNet : Depth : {} , Layers for each block : {}'", ".", "format", "(", "\n", "depth", ",", "layer_blocks", ")", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "conv_1_3x3", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "stage_1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layer_blocks", ",", "1", ")", "\n", "self", ".", "stage_2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "stage_3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layer_blocks", ",", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "# m.bias.data.zero_()", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.CifarResNet._make_layer": [[100, 113], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vanilla_resnet_cifar.DownsampleA", "block", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "DownsampleA", "(", "\n", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.CifarResNet.forward": [[114, 123], ["vanilla_resnet_cifar.CifarResNet.conv_1_3x3", "torch.relu", "torch.relu", "torch.relu", "vanilla_resnet_cifar.CifarResNet.stage_1", "vanilla_resnet_cifar.CifarResNet.stage_2", "vanilla_resnet_cifar.CifarResNet.stage_3", "vanilla_resnet_cifar.CifarResNet.avgpool", "x.view.view.view", "vanilla_resnet_cifar.CifarResNet.classifier", "vanilla_resnet_cifar.CifarResNet.bn_1", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv_1_3x3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn_1", "(", "x", ")", ",", "inplace", "=", "True", ")", "\n", "x", "=", "self", ".", "stage_1", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_2", "(", "x", ")", "\n", "x", "=", "self", ".", "stage_3", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.vanilla_resnet20": [[125, 132], ["vanilla_resnet_cifar.CifarResNet"], "function", ["None"], ["", "", "def", "vanilla_resnet20", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-20 model for CIFAR-10 (by default)\n    Args:\n      num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "20", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.vanilla_resnet32": [[134, 141], ["vanilla_resnet_cifar.CifarResNet"], "function", ["None"], ["", "def", "vanilla_resnet32", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-32 model for CIFAR-10 (by default)\n    Args:\n      num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "32", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.vanilla_resnet44": [[143, 150], ["vanilla_resnet_cifar.CifarResNet"], "function", ["None"], ["", "def", "vanilla_resnet44", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-44 model for CIFAR-10 (by default)\n    Args:\n      num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "44", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.vanilla_resnet56": [[152, 159], ["vanilla_resnet_cifar.CifarResNet"], "function", ["None"], ["", "def", "vanilla_resnet56", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-56 model for CIFAR-10 (by default)\n    Args:\n      num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "56", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.vanilla_models.vanilla_resnet_cifar.vanilla_resnet110": [[161, 168], ["vanilla_resnet_cifar.CifarResNet"], "function", ["None"], ["", "def", "vanilla_resnet110", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-110 model for CIFAR-10 (by default)\n    Args:\n      num_classes (uint): number of classes\n    \"\"\"", "\n", "model", "=", "CifarResNet", "(", "ResNetBasicblock", ",", "110", ",", "num_classes", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.model_summary.summary": [[8, 86], ["device.lower.lower", "isinstance", "collections.OrderedDict", "model.apply", "model", "print", "print", "print", "print", "print", "print", "print", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.autograd.Variable().type", "h.remove", "print", "len", "collections.OrderedDict", "list", "isinstance", "hooks.append", "torch.autograd.Variable().type", "str", "[].split", "input[].size", "list", "hasattr", "hasattr", "torch.prod", "torch.prod", "hasattr", "hasattr", "torch.prod", "torch.prod", "isinstance", "isinstance", "module.register_forward_hook", "torch.autograd.Variable", "output.size", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.autograd.Variable", "torch.rand", "torch.rand", "list", "list", "torch.rand", "torch.rand", "str().split", "list", "module.weight.size", "module.bias.size", "o.size", "str"], "function", ["None"], ["def", "summary", "(", "model", ",", "input_size", ",", "device", "=", "\"cuda\"", ")", ":", "\n", "\t", "def", "register_hook", "(", "module", ")", ":", "\n", "\t\t", "def", "hook", "(", "module", ",", "input", ",", "output", ")", ":", "\n", "\t\t\t", "class_name", "=", "str", "(", "module", ".", "__class__", ")", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", ".", "split", "(", "\"'\"", ")", "[", "0", "]", "\n", "module_idx", "=", "len", "(", "summary", ")", "\n", "\n", "m_key", "=", "'%s-%i'", "%", "(", "class_name", ",", "module_idx", "+", "1", ")", "\n", "summary", "[", "m_key", "]", "=", "OrderedDict", "(", ")", "\n", "summary", "[", "m_key", "]", "[", "'input_shape'", "]", "=", "list", "(", "input", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "summary", "[", "m_key", "]", "[", "'input_shape'", "]", "[", "0", "]", "=", "-", "1", "\n", "if", "isinstance", "(", "output", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "\t\t\t\t", "summary", "[", "m_key", "]", "[", "'output_shape'", "]", "=", "[", "[", "-", "1", "]", "+", "list", "(", "o", ".", "size", "(", ")", ")", "[", "1", ":", "]", "for", "o", "in", "output", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "summary", "[", "m_key", "]", "[", "'output_shape'", "]", "=", "list", "(", "output", ".", "size", "(", ")", ")", "\n", "summary", "[", "m_key", "]", "[", "'output_shape'", "]", "[", "0", "]", "=", "-", "1", "\n", "\n", "", "params", "=", "0", "\n", "if", "hasattr", "(", "module", ",", "'weight'", ")", "and", "hasattr", "(", "module", ".", "weight", ",", "'size'", ")", ":", "\n", "\t\t\t\t", "params", "+=", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "weight", ".", "size", "(", ")", ")", ")", ")", "\n", "summary", "[", "m_key", "]", "[", "'trainable'", "]", "=", "module", ".", "weight", ".", "requires_grad", "\n", "", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "hasattr", "(", "module", ".", "bias", ",", "'size'", ")", ":", "\n", "\t\t\t\t", "params", "+=", "torch", ".", "prod", "(", "torch", ".", "LongTensor", "(", "list", "(", "module", ".", "bias", ".", "size", "(", ")", ")", ")", ")", "\n", "", "summary", "[", "m_key", "]", "[", "'nb_params'", "]", "=", "params", "\n", "\n", "", "if", "(", "not", "isinstance", "(", "module", ",", "nn", ".", "Sequential", ")", "and", "\n", "not", "isinstance", "(", "module", ",", "nn", ".", "ModuleList", ")", "and", "\n", "not", "(", "module", "==", "model", ")", ")", ":", "\n", "\t\t\t", "hooks", ".", "append", "(", "module", ".", "register_forward_hook", "(", "hook", ")", ")", "\n", "\n", "", "", "device", "=", "device", ".", "lower", "(", ")", "\n", "assert", "device", "in", "[", "\"cuda\"", ",", "\"cpu\"", "]", ",", "\"Input device is not valid, please specify 'cuda' or 'cpu'\"", "\n", "\n", "if", "device", "==", "\"cuda\"", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "\t\t", "dtype", "=", "torch", ".", "cuda", ".", "FloatTensor", "\n", "", "else", ":", "\n", "\t\t", "dtype", "=", "torch", ".", "FloatTensor", "\n", "\n", "# check if there are multiple inputs to the network", "\n", "", "if", "isinstance", "(", "input_size", "[", "0", "]", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "\t\t", "x", "=", "[", "Variable", "(", "torch", ".", "rand", "(", "2", ",", "*", "in_size", ")", ")", ".", "type", "(", "dtype", ")", "for", "in_size", "in", "input_size", "]", "\n", "", "else", ":", "\n", "\t\t", "x", "=", "Variable", "(", "torch", ".", "rand", "(", "2", ",", "*", "input_size", ")", ")", ".", "type", "(", "dtype", ")", "\n", "\n", "# print(type(x[0]))", "\n", "# create properties", "\n", "", "summary", "=", "OrderedDict", "(", ")", "\n", "hooks", "=", "[", "]", "\n", "# register hook", "\n", "model", ".", "apply", "(", "register_hook", ")", "\n", "# make a forward pass", "\n", "# print(x.shape)", "\n", "model", "(", "x", ")", "\n", "# remove these hooks", "\n", "for", "h", "in", "hooks", ":", "\n", "\t\t", "h", ".", "remove", "(", ")", "\n", "\n", "", "print", "(", "'----------------------------------------------------------------'", ")", "\n", "line_new", "=", "'{:>20}  {:>25} {:>15}'", ".", "format", "(", "'Layer (type)'", ",", "'Output Shape'", ",", "'Param #'", ")", "\n", "print", "(", "line_new", ")", "\n", "print", "(", "'================================================================'", ")", "\n", "total_params", "=", "0", "\n", "trainable_params", "=", "0", "\n", "for", "layer", "in", "summary", ":", "\n", "# input_shape, output_shape, trainable, nb_params", "\n", "\t\t", "line_new", "=", "'{:>20}  {:>25} {:>15}'", ".", "format", "(", "layer", ",", "str", "(", "summary", "[", "layer", "]", "[", "'output_shape'", "]", ")", ",", "\n", "'{0:,}'", ".", "format", "(", "summary", "[", "layer", "]", "[", "'nb_params'", "]", ")", ")", "\n", "total_params", "+=", "summary", "[", "layer", "]", "[", "'nb_params'", "]", "\n", "if", "'trainable'", "in", "summary", "[", "layer", "]", ":", "\n", "\t\t\t", "if", "summary", "[", "layer", "]", "[", "'trainable'", "]", "==", "True", ":", "\n", "\t\t\t\t", "trainable_params", "+=", "summary", "[", "layer", "]", "[", "'nb_params'", "]", "\n", "", "", "print", "(", "line_new", ")", "\n", "", "print", "(", "'================================================================'", ")", "\n", "print", "(", "'Total params: {0:,}'", ".", "format", "(", "total_params", ")", ")", "\n", "print", "(", "'Trainable params: {0:,}'", ".", "format", "(", "trainable_params", ")", ")", "\n", "print", "(", "'Non-trainable params: {0:,}'", ".", "format", "(", "total_params", "-", "trainable_params", ")", ")", "\n", "print", "(", "'----------------------------------------------------------------'", ")", "\n", "\n", "return", "summary", "", "", ""]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.AverageMeter.__init__": [[10, 12], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.AverageMeter.reset": [[13, 18], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.AverageMeter.update": [[19, 24], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.__init__": [[28, 30], ["utils.RecorderMeter.reset"], "methods", ["home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.reset"], ["def", "__init__", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "self", ".", "reset", "(", "total_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.reset": [[31, 40], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "total_epoch", ")", ":", "\n", "    ", "assert", "total_epoch", ">", "0", "\n", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "epoch_losses", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_losses", "=", "self", ".", "epoch_losses", "-", "1", "\n", "\n", "self", ".", "epoch_accuracy", "=", "np", ".", "zeros", "(", "(", "self", ".", "total_epoch", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "# [epoch, train/val]", "\n", "self", ".", "epoch_accuracy", "=", "self", ".", "epoch_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.update": [[41, 48], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "idx", ",", "train_loss", ",", "train_acc", ",", "val_loss", ",", "val_acc", ")", ":", "\n", "    ", "assert", "idx", ">=", "0", "and", "idx", "<", "self", ".", "total_epoch", ",", "'total_epoch : {} , but update with the {} index'", ".", "format", "(", "self", ".", "total_epoch", ",", "idx", ")", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "0", "]", "=", "train_loss", "\n", "self", ".", "epoch_losses", "[", "idx", ",", "1", "]", "=", "val_loss", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "0", "]", "=", "train_acc", "\n", "self", ".", "epoch_accuracy", "[", "idx", ",", "1", "]", "=", "val_acc", "\n", "self", ".", "current_epoch", "=", "idx", "+", "1", "\n", "# return self.max_accuracy(False) == val_acc", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.max_accuracy": [[50, 54], ["utils.RecorderMeter.epoch_accuracy[].max", "utils.RecorderMeter.epoch_accuracy[].max"], "methods", ["None"], ["", "def", "max_accuracy", "(", "self", ",", "istrain", ")", ":", "\n", "    ", "if", "self", ".", "current_epoch", "<=", "0", ":", "return", "0", "\n", "if", "istrain", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "0", "]", ".", "max", "(", ")", "\n", "else", ":", "return", "self", ".", "epoch_accuracy", "[", ":", "self", ".", "current_epoch", ",", "1", "]", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.RecorderMeter.plot_curve": [[55, 99], ["matplotlib.figure", "matplotlib.figure", "numpy.array", "numpy.zeros", "matplotlib.xlim", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.ylim", "matplotlib.xticks", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.yticks", "matplotlib.grid", "matplotlib.grid", "matplotlib.title", "matplotlib.title", "matplotlib.xlabel", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylabel", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.legend", "matplotlib.close", "matplotlib.close", "numpy.arange", "numpy.arange", "matplotlib.figure.savefig", "print", "float", "float", "range"], "methods", ["None"], ["", "def", "plot_curve", "(", "self", ",", "save_path", ")", ":", "\n", "    ", "title", "=", "'the accuracy/loss curve of train/val'", "\n", "dpi", "=", "80", "\n", "width", ",", "height", "=", "1200", ",", "800", "\n", "legend_fontsize", "=", "10", "\n", "scale_distance", "=", "48.8", "\n", "figsize", "=", "width", "/", "float", "(", "dpi", ")", ",", "height", "/", "float", "(", "dpi", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "figsize", ")", "\n", "x_axis", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "total_epoch", ")", "]", ")", "# epochs", "\n", "y_axis", "=", "np", ".", "zeros", "(", "self", ".", "total_epoch", ")", "\n", "\n", "plt", ".", "xlim", "(", "0", ",", "self", ".", "total_epoch", ")", "\n", "plt", ".", "ylim", "(", "0", ",", "100", ")", "\n", "interval_y", "=", "5", "\n", "interval_x", "=", "5", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0", ",", "self", ".", "total_epoch", "+", "interval_x", ",", "interval_x", ")", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0", ",", "100", "+", "interval_y", ",", "interval_y", ")", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "title", "(", "title", ",", "fontsize", "=", "20", ")", "\n", "plt", ".", "xlabel", "(", "'the training epoch'", ",", "fontsize", "=", "16", ")", "\n", "plt", ".", "ylabel", "(", "'accuracy'", ",", "fontsize", "=", "16", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'g'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'train-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_accuracy", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", ",", "color", "=", "'y'", ",", "linestyle", "=", "'-'", ",", "label", "=", "'valid-accuracy'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "0", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'g'", ",", "linestyle", "=", "':'", ",", "label", "=", "'train-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "y_axis", "[", ":", "]", "=", "self", ".", "epoch_losses", "[", ":", ",", "1", "]", "\n", "plt", ".", "plot", "(", "x_axis", ",", "y_axis", "*", "50", ",", "color", "=", "'y'", ",", "linestyle", "=", "':'", ",", "label", "=", "'valid-loss-x50'", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "4", ",", "fontsize", "=", "legend_fontsize", ")", "\n", "\n", "if", "save_path", "is", "not", "None", ":", "\n", "      ", "fig", ".", "savefig", "(", "save_path", ",", "dpi", "=", "dpi", ",", "bbox_inches", "=", "'tight'", ")", "\n", "print", "(", "'---- save figure {} into {}'", ".", "format", "(", "title", ",", "save_path", ")", ")", "\n", "", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.time_string": [[101, 105], ["time.strftime", "time.gmtime", "time.time"], "function", ["None"], ["", "", "def", "time_string", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d %X'", "\n", "string", "=", "'[{}]'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.convert_secs2time": [[106, 111], ["int", "int", "int"], "function", ["None"], ["", "def", "convert_secs2time", "(", "epoch_time", ")", ":", "\n", "  ", "need_hour", "=", "int", "(", "epoch_time", "/", "3600", ")", "\n", "need_mins", "=", "int", "(", "(", "epoch_time", "-", "3600", "*", "need_hour", ")", "/", "60", ")", "\n", "need_secs", "=", "int", "(", "epoch_time", "-", "3600", "*", "need_hour", "-", "60", "*", "need_mins", ")", "\n", "return", "need_hour", ",", "need_mins", ",", "need_secs", "\n", "\n"]], "home.repos.pwc.inspect_result.elliothe_CVPR_2019_PNI.utils_.utils.time_file_str": [[112, 116], ["time.strftime", "time.gmtime", "random.randint", "time.time"], "function", ["None"], ["", "def", "time_file_str", "(", ")", ":", "\n", "  ", "ISOTIMEFORMAT", "=", "'%Y-%m-%d'", "\n", "string", "=", "'{}'", ".", "format", "(", "time", ".", "strftime", "(", "ISOTIMEFORMAT", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", ")", ")", ")", "\n", "return", "string", "+", "'-{}'", ".", "format", "(", "random", ".", "randint", "(", "1", ",", "10000", ")", ")", "\n", "\n"]]}