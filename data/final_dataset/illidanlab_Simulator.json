{"home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Distribution.sample": [[8, 11], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "sample", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.PoissonDistribution.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lam", ")", ":", "\n", "        ", "self", ".", "_lambda", "=", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.PoissonDistribution.sample": [[17, 20], ["numpy.random.seed", "numpy.random.poisson"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "return", "np", ".", "random", ".", "poisson", "(", "self", ".", "_lambda", ",", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.GaussianDistribution.__init__": [[24, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "mu", ",", "sigma", "=", "args", "\n", "self", ".", "mu", "=", "mu", "# mean", "\n", "self", ".", "sigma", "=", "sigma", "# standard deviation", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.GaussianDistribution.sample": [[29, 32], ["numpy.random.seed", "numpy.random.normal"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "seed", "=", "0", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "return", "np", ".", "random", ".", "normal", "(", "self", ".", "mu", ",", "self", ".", "sigma", ",", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.__init__": [[40, 57], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "index", ")", ":", "\n", "# private", "\n", "        ", "self", ".", "_index", "=", "index", "# unique node index.", "\n", "\n", "# public", "\n", "self", ".", "neighbors", "=", "[", "]", "# a list of nodes that neighboring the Nodes", "\n", "self", ".", "orders", "=", "[", "]", "# a list of orders", "\n", "self", ".", "drivers", "=", "{", "}", "# a dictionary of driver objects contained in this node", "\n", "self", ".", "order_num", "=", "0", "\n", "self", ".", "idle_driver_num", "=", "0", "# number of idle drivers in this node", "\n", "self", ".", "offline_driver_num", "=", "0", "\n", "self", ".", "order_generator", "=", "None", "\n", "\n", "self", ".", "n_side", "=", "0", "# the topology is a n-sided map", "\n", "self", ".", "layers_neighbors", "=", "[", "]", "# layer 1 indices: layers_neighbors[0] = [[1,1], [0, 1], ...],", "\n", "# layer 2 indices layers_neighbors[1]", "\n", "self", ".", "layers_neighbors_id", "=", "[", "]", "# layer 1: layers_neighbors_id[0] = [2, 1,.]", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.clean_node": [[58, 64], ["None"], "methods", ["None"], ["", "def", "clean_node", "(", "self", ")", ":", "\n", "        ", "self", ".", "orders", "=", "[", "]", "\n", "self", ".", "order_num", "=", "0", "\n", "self", ".", "drivers", "=", "{", "}", "\n", "self", ".", "idle_driver_num", "=", "0", "\n", "self", ".", "offline_driver_num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_layers_neighbors": [[65, 77], ["utilities.ids_1dto2d", "utilities.get_layers_neighbors", "objects.Node.get_node_index", "objects.Node.layers_neighbors_id.append", "utilities.ids_2dto1d", "temp.append"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_1dto2d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.get_layers_neighbors", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d"], ["", "def", "get_layers_neighbors", "(", "self", ",", "l_max", ",", "M", ",", "N", ",", "env", ")", ":", "\n", "\n", "        ", "x", ",", "y", "=", "ids_1dto2d", "(", "self", ".", "get_node_index", "(", ")", ",", "M", ",", "N", ")", "\n", "self", ".", "layers_neighbors", "=", "get_layers_neighbors", "(", "x", ",", "y", ",", "l_max", ",", "M", ",", "N", ")", "\n", "for", "layer_neighbors", "in", "self", ".", "layers_neighbors", ":", "\n", "            ", "temp", "=", "[", "]", "\n", "for", "item", "in", "layer_neighbors", ":", "\n", "                ", "x", ",", "y", "=", "item", "\n", "node_id", "=", "ids_2dto1d", "(", "x", ",", "y", ",", "M", ",", "N", ")", "\n", "if", "env", ".", "nodes", "[", "node_id", "]", "is", "not", "None", ":", "\n", "                    ", "temp", ".", "append", "(", "node_id", ")", "\n", "", "", "self", ".", "layers_neighbors_id", ".", "append", "(", "temp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index": [[78, 80], ["None"], "methods", ["None"], ["", "", "def", "get_node_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_index", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_driver_numbers": [[81, 83], ["None"], "methods", ["None"], ["", "def", "get_driver_numbers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "idle_driver_num", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_idle_driver_numbers_loop": [[84, 90], ["objects.Node.drivers.iteritems"], "methods", ["None"], ["", "def", "get_idle_driver_numbers_loop", "(", "self", ")", ":", "\n", "        ", "temp_idle_driver", "=", "0", "\n", "for", "key", ",", "driver", "in", "self", ".", "drivers", ".", "iteritems", "(", ")", ":", "\n", "            ", "if", "driver", ".", "onservice", "is", "False", "and", "driver", ".", "online", "is", "True", ":", "\n", "                ", "temp_idle_driver", "+=", "1", "\n", "", "", "return", "temp_idle_driver", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_off_driver_numbers_loop": [[91, 97], ["objects.Node.drivers.iteritems"], "methods", ["None"], ["", "def", "get_off_driver_numbers_loop", "(", "self", ")", ":", "\n", "        ", "temp_idle_driver", "=", "0", "\n", "for", "key", ",", "driver", "in", "self", ".", "drivers", ".", "iteritems", "(", ")", ":", "\n", "            ", "if", "driver", ".", "onservice", "is", "False", "and", "driver", ".", "online", "is", "False", ":", "\n", "                ", "temp_idle_driver", "+=", "1", "\n", "", "", "return", "temp_idle_driver", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.order_distribution": [[98, 106], ["objects.PoissonDistribution", "objects.GaussianDistribution"], "methods", ["None"], ["", "def", "order_distribution", "(", "self", ",", "distribution", ",", "dis_paras", ")", ":", "\n", "\n", "        ", "if", "distribution", "==", "'Poisson'", ":", "\n", "            ", "self", ".", "order_generator", "=", "PoissonDistribution", "(", "dis_paras", ")", "\n", "", "elif", "distribution", "==", "'Gaussian'", ":", "\n", "            ", "self", ".", "order_generator", "=", "GaussianDistribution", "(", "dis_paras", ")", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.generate_order_random": [[107, 126], ["objects.Node.order_generator.sample", "numpy.arange", "objects.Node.get_node_index", "objects.Node.orders.append", "numpy.random.normal", "objects.Order", "numpy.arange", "len", "numpy.random.choice", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.DiagGaussianPd.sample", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index"], ["", "", "def", "generate_order_random", "(", "self", ",", "city_time", ",", "nodes", ",", "seed", ")", ":", "\n", "        ", "\"\"\"Generate new orders at each time step\n        \"\"\"", "\n", "num_order_t", "=", "self", ".", "order_generator", ".", "sample", "(", "seed", ")", "\n", "self", ".", "order_num", "+=", "num_order_t", "\n", "\n", "for", "ii", "in", "np", ".", "arange", "(", "num_order_t", ")", ":", "\n", "            ", "price", "=", "np", ".", "random", ".", "normal", "(", "50", ",", "5", ",", "1", ")", "[", "0", "]", "\n", "price", "=", "10", "if", "price", "<", "0", "else", "price", "\n", "\n", "current_node_id", "=", "self", ".", "get_node_index", "(", ")", "\n", "destination_node", "=", "[", "kk", "for", "kk", "in", "np", ".", "arange", "(", "len", "(", "nodes", ")", ")", "if", "kk", "!=", "current_node_id", "]", "\n", "self", ".", "orders", ".", "append", "(", "Order", "(", "nodes", "[", "current_node_id", "]", ",", "\n", "nodes", "[", "np", ".", "random", ".", "choice", "(", "destination_node", ",", "1", ")", "[", "0", "]", "]", ",", "\n", "city_time", ",", "\n", "# city_time + np.random.choice(5, 1)[0]+1,", "\n", "np", ".", "random", ".", "choice", "(", "2", ",", "1", ")", "[", "0", "]", "+", "1", ",", "# duration", "\n", "price", ",", "1", ")", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.generate_order_real": [[127, 155], ["objects.Node.order_generator.sample", "numpy.arange", "objects.Node.get_node_index", "numpy.arange", "objects.Node.orders.append", "numpy.random.choice", "numpy.random.normal", "objects.Order", "numpy.arange", "destination_node.append", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.DiagGaussianPd.sample", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index"], ["", "def", "generate_order_real", "(", "self", ",", "l_max", ",", "order_time_dist", ",", "order_price_dist", ",", "city_time", ",", "nodes", ",", "seed", ")", ":", "\n", "        ", "\"\"\"Generate new orders at each time step\n        \"\"\"", "\n", "num_order_t", "=", "self", ".", "order_generator", ".", "sample", "(", "seed", ")", "\n", "self", ".", "order_num", "+=", "num_order_t", "\n", "for", "ii", "in", "np", ".", "arange", "(", "num_order_t", ")", ":", "\n", "\n", "            ", "if", "l_max", "==", "1", ":", "\n", "                ", "duration", "=", "1", "\n", "", "else", ":", "\n", "\n", "                ", "duration", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "1", ",", "l_max", "+", "1", ")", ",", "p", "=", "order_time_dist", ")", "\n", "", "price_mean", ",", "price_std", "=", "order_price_dist", "[", "duration", "-", "1", "]", "\n", "price", "=", "np", ".", "random", ".", "normal", "(", "price_mean", ",", "price_std", ",", "1", ")", "[", "0", "]", "\n", "price", "=", "price", "if", "price", ">", "0", "else", "price_mean", "\n", "\n", "current_node_id", "=", "self", ".", "get_node_index", "(", ")", "\n", "destination_node", "=", "[", "]", "\n", "for", "jj", "in", "np", ".", "arange", "(", "duration", ")", ":", "\n", "                ", "for", "kk", "in", "self", ".", "layers_neighbors_id", "[", "jj", "]", ":", "\n", "                    ", "if", "nodes", "[", "kk", "]", "is", "not", "None", ":", "\n", "                        ", "destination_node", ".", "append", "(", "kk", ")", "\n", "", "", "", "self", ".", "orders", ".", "append", "(", "Order", "(", "nodes", "[", "current_node_id", "]", ",", "\n", "nodes", "[", "np", ".", "random", ".", "choice", "(", "destination_node", ",", "1", ")", "[", "0", "]", "]", ",", "\n", "city_time", ",", "\n", "duration", ",", "\n", "price", ",", "1", ")", ")", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.add_order_real": [[156, 164], ["objects.Node.get_node_index", "objects.Node.orders.append", "objects.Order"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index"], ["", "def", "add_order_real", "(", "self", ",", "city_time", ",", "destination_node", ",", "duration", ",", "price", ")", ":", "\n", "        ", "current_node_id", "=", "self", ".", "get_node_index", "(", ")", "\n", "self", ".", "orders", ".", "append", "(", "Order", "(", "self", ",", "\n", "destination_node", ",", "\n", "city_time", ",", "\n", "duration", ",", "\n", "price", ",", "0", ")", ")", "\n", "self", ".", "order_num", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.set_neighbors": [[165, 168], ["len"], "methods", ["None"], ["", "def", "set_neighbors", "(", "self", ",", "nodes_list", ")", ":", "\n", "        ", "self", ".", "neighbors", "=", "nodes_list", "\n", "self", ".", "n_side", "=", "len", "(", "nodes_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.remove_idle_driver_random": [[169, 180], ["objects.Node.drivers.iteritems", "objects.Node.remove_driver"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.remove_driver"], ["", "def", "remove_idle_driver_random", "(", "self", ")", ":", "\n", "        ", "\"\"\"Randomly remove one idle driver from current grid\"\"\"", "\n", "removed_driver_id", "=", "\"NA\"", "\n", "for", "key", ",", "item", "in", "self", ".", "drivers", ".", "iteritems", "(", ")", ":", "\n", "            ", "if", "item", ".", "onservice", "is", "False", "and", "item", ".", "online", "is", "True", ":", "\n", "                ", "self", ".", "remove_driver", "(", "key", ")", "\n", "removed_driver_id", "=", "key", "\n", "", "if", "removed_driver_id", "!=", "\"NA\"", ":", "\n", "                ", "break", "\n", "", "", "assert", "removed_driver_id", "!=", "\"NA\"", "\n", "return", "removed_driver_id", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.set_idle_driver_offline_random": [[181, 192], ["objects.Node.drivers.iteritems", "item.set_offline"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_offline"], ["", "def", "set_idle_driver_offline_random", "(", "self", ")", ":", "\n", "        ", "\"\"\"Randomly set one idle driver offline\"\"\"", "\n", "removed_driver_id", "=", "\"NA\"", "\n", "for", "key", ",", "item", "in", "self", ".", "drivers", ".", "iteritems", "(", ")", ":", "\n", "            ", "if", "item", ".", "onservice", "is", "False", "and", "item", ".", "online", "is", "True", ":", "\n", "                ", "item", ".", "set_offline", "(", ")", "\n", "removed_driver_id", "=", "key", "\n", "", "if", "removed_driver_id", "!=", "\"NA\"", ":", "\n", "                ", "break", "\n", "", "", "assert", "removed_driver_id", "!=", "\"NA\"", "\n", "return", "removed_driver_id", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.set_offline_driver_online": [[193, 204], ["objects.Node.drivers.iteritems", "item.set_online"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_online"], ["", "def", "set_offline_driver_online", "(", "self", ")", ":", "\n", "\n", "        ", "online_driver_id", "=", "\"NA\"", "\n", "for", "key", ",", "item", "in", "self", ".", "drivers", ".", "iteritems", "(", ")", ":", "\n", "            ", "if", "item", ".", "onservice", "is", "False", "and", "item", ".", "online", "is", "False", ":", "\n", "                ", "item", ".", "set_online", "(", ")", "\n", "online_driver_id", "=", "key", "\n", "", "if", "online_driver_id", "!=", "\"NA\"", ":", "\n", "                ", "break", "\n", "", "", "assert", "online_driver_id", "!=", "\"NA\"", "\n", "return", "online_driver_id", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_driver_random": [[205, 213], ["objects.Node.drivers.iterkeys"], "methods", ["None"], ["", "def", "get_driver_random", "(", "self", ")", ":", "\n", "        ", "\"\"\"Randomly get one driver\"\"\"", "\n", "assert", "self", ".", "idle_driver_num", ">", "0", "\n", "get_driver_id", "=", "0", "\n", "for", "key", "in", "self", ".", "drivers", ".", "iterkeys", "(", ")", ":", "\n", "            ", "get_driver_id", "=", "key", "\n", "break", "\n", "", "return", "self", ".", "drivers", "[", "get_driver_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.remove_driver": [[214, 222], ["objects.Node.drivers.pop", "ValueError"], "methods", ["None"], ["", "def", "remove_driver", "(", "self", ",", "driver_id", ")", ":", "\n", "\n", "        ", "removed_driver", "=", "self", ".", "drivers", ".", "pop", "(", "driver_id", ",", "None", ")", "\n", "self", ".", "idle_driver_num", "-=", "1", "\n", "if", "removed_driver", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Nodes.remove_driver: Remove a driver that is not in this node'", ")", "\n", "\n", "", "return", "removed_driver", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.add_driver": [[223, 226], ["None"], "methods", ["None"], ["", "def", "add_driver", "(", "self", ",", "driver_id", ",", "driver", ")", ":", "\n", "        ", "self", ".", "drivers", "[", "driver_id", "]", "=", "driver", "\n", "self", ".", "idle_driver_num", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.remove_unfinished_order": [[227, 242], ["enumerate", "len", "len", "un_finished_order_index.append", "un_finished_order_index.append", "o.get_wait_time", "o.get_begin_time", "o.get_assigned_time", "enumerate", "o.get_assigned_time", "o.get_duration"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_wait_time", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_begin_time", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_assigned_time", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_assigned_time", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_duration"], ["", "def", "remove_unfinished_order", "(", "self", ",", "city_time", ")", ":", "\n", "        ", "un_finished_order_index", "=", "[", "]", "\n", "for", "idx", ",", "o", "in", "enumerate", "(", "self", ".", "orders", ")", ":", "\n", "# order un served", "\n", "            ", "if", "o", ".", "get_wait_time", "(", ")", "+", "o", ".", "get_begin_time", "(", ")", "<", "city_time", ":", "\n", "                ", "un_finished_order_index", ".", "append", "(", "idx", ")", "\n", "\n", "# order completed", "\n", "", "if", "o", ".", "get_assigned_time", "(", ")", "+", "o", ".", "get_duration", "(", ")", "==", "city_time", "and", "o", ".", "get_assigned_time", "(", ")", "!=", "-", "1", ":", "\n", "                ", "un_finished_order_index", ".", "append", "(", "idx", ")", "\n", "\n", "", "", "if", "len", "(", "un_finished_order_index", ")", "!=", "0", ":", "\n", "# remove unfinished orders", "\n", "            ", "self", ".", "orders", "=", "[", "i", "for", "j", ",", "i", "in", "enumerate", "(", "self", ".", "orders", ")", "if", "j", "not", "in", "un_finished_order_index", "]", "\n", "self", ".", "order_num", "=", "len", "(", "self", ".", "orders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.simple_order_assign": [[243, 269], ["min", "numpy.arange", "len", "len", "order_to_serve.set_assigned_time", "order_to_serve.get_price", "served_order_index.append", "objects.Node.drivers.iteritems", "len", "enumerate", "assigned_driver.take_order", "objects.Node.drivers.pop", "assigned_driver.get_driver_id"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.set_assigned_time", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_price", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.take_order", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.get_driver_id"], ["", "", "def", "simple_order_assign", "(", "self", ",", "city_time", ",", "city", ")", ":", "\n", "        ", "reward", "=", "0", "\n", "num_assigned_order", "=", "min", "(", "self", ".", "order_num", ",", "self", ".", "idle_driver_num", ")", "\n", "served_order_index", "=", "[", "]", "\n", "for", "idx", "in", "np", ".", "arange", "(", "num_assigned_order", ")", ":", "\n", "            ", "order_to_serve", "=", "self", ".", "orders", "[", "idx", "]", "\n", "order_to_serve", ".", "set_assigned_time", "(", "city_time", ")", "\n", "self", ".", "order_num", "-=", "1", "\n", "reward", "+=", "order_to_serve", ".", "get_price", "(", ")", "\n", "served_order_index", ".", "append", "(", "idx", ")", "\n", "for", "key", ",", "assigned_driver", "in", "self", ".", "drivers", ".", "iteritems", "(", ")", ":", "\n", "                ", "if", "assigned_driver", ".", "onservice", "is", "False", "and", "assigned_driver", ".", "online", "is", "True", ":", "\n", "                    ", "assigned_driver", ".", "take_order", "(", "order_to_serve", ")", "\n", "removed_driver", "=", "self", ".", "drivers", ".", "pop", "(", "assigned_driver", ".", "get_driver_id", "(", ")", ",", "None", ")", "\n", "assert", "removed_driver", "is", "not", "None", "\n", "city", ".", "n_drivers", "-=", "1", "\n", "break", "\n", "\n", "", "", "", "all_order_num", "=", "len", "(", "self", ".", "orders", ")", "\n", "finished_order_num", "=", "len", "(", "served_order_index", ")", "\n", "\n", "# remove served orders", "\n", "self", ".", "orders", "=", "[", "i", "for", "j", ",", "i", "in", "enumerate", "(", "self", ".", "orders", ")", "if", "j", "not", "in", "served_order_index", "]", "\n", "assert", "self", ".", "order_num", "==", "len", "(", "self", ".", "orders", ")", "\n", "\n", "return", "reward", ",", "all_order_num", ",", "finished_order_num", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.simple_order_assign_real": [[270, 300], ["min", "numpy.arange", "len", "len", "order_to_serve.set_assigned_time", "order_to_serve.get_price", "served_order_index.append", "objects.Node.drivers.iteritems", "len", "enumerate", "order_to_serve.get_end_position", "assigned_driver.take_order", "objects.Node.drivers.pop", "assigned_driver.set_offline", "assigned_driver.get_driver_id"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.set_assigned_time", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_price", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_end_position", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.take_order", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_offline", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.get_driver_id"], ["", "def", "simple_order_assign_real", "(", "self", ",", "city_time", ",", "city", ")", ":", "\n", "\n", "        ", "reward", "=", "0", "\n", "num_assigned_order", "=", "min", "(", "self", ".", "order_num", ",", "self", ".", "idle_driver_num", ")", "\n", "served_order_index", "=", "[", "]", "\n", "for", "idx", "in", "np", ".", "arange", "(", "num_assigned_order", ")", ":", "\n", "            ", "order_to_serve", "=", "self", ".", "orders", "[", "idx", "]", "\n", "order_to_serve", ".", "set_assigned_time", "(", "city_time", ")", "\n", "self", ".", "order_num", "-=", "1", "\n", "reward", "+=", "order_to_serve", ".", "get_price", "(", ")", "\n", "served_order_index", ".", "append", "(", "idx", ")", "\n", "for", "key", ",", "assigned_driver", "in", "self", ".", "drivers", ".", "iteritems", "(", ")", ":", "\n", "                ", "if", "assigned_driver", ".", "onservice", "is", "False", "and", "assigned_driver", ".", "online", "is", "True", ":", "\n", "                    ", "if", "order_to_serve", ".", "get_end_position", "(", ")", "is", "not", "None", ":", "\n", "                        ", "assigned_driver", ".", "take_order", "(", "order_to_serve", ")", "\n", "removed_driver", "=", "self", ".", "drivers", ".", "pop", "(", "assigned_driver", ".", "get_driver_id", "(", ")", ",", "None", ")", "\n", "assert", "removed_driver", "is", "not", "None", "\n", "", "else", ":", "\n", "                        ", "assigned_driver", ".", "set_offline", "(", ")", "# order destination is not in target region", "\n", "", "city", ".", "n_drivers", "-=", "1", "\n", "break", "\n", "\n", "", "", "", "all_order_num", "=", "len", "(", "self", ".", "orders", ")", "\n", "finished_order_num", "=", "len", "(", "served_order_index", ")", "\n", "\n", "# remove served orders", "\n", "self", ".", "orders", "=", "[", "i", "for", "j", ",", "i", "in", "enumerate", "(", "self", ".", "orders", ")", "if", "j", "not", "in", "served_order_index", "]", "\n", "assert", "self", ".", "order_num", "==", "len", "(", "self", ".", "orders", ")", "\n", "\n", "return", "reward", ",", "all_order_num", ",", "finished_order_num", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.simple_order_assign_broadcast_update": [[302, 319], ["len", "min", "objects.Node.utility_assign_orders_neighbor", "neighbor_node.get_node_index"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.utility_assign_orders_neighbor", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index"], ["", "def", "simple_order_assign_broadcast_update", "(", "self", ",", "city", ",", "neighbor_node_reward", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "idle_driver_num", "==", "0", "\n", "reward", "=", "0", "\n", "num_finished_orders", "=", "0", "\n", "for", "neighbor_node", "in", "self", ".", "neighbors", ":", "\n", "            ", "if", "neighbor_node", "is", "not", "None", "and", "neighbor_node", ".", "idle_driver_num", ">", "0", ":", "\n", "                ", "num_assigned_order", "=", "min", "(", "self", ".", "order_num", ",", "neighbor_node", ".", "idle_driver_num", ")", "\n", "rr", "=", "self", ".", "utility_assign_orders_neighbor", "(", "city", ",", "neighbor_node", ",", "num_assigned_order", ")", "\n", "reward", "+=", "rr", "\n", "neighbor_node_reward", "[", "neighbor_node", ".", "get_node_index", "(", ")", "]", "+=", "rr", "\n", "num_finished_orders", "+=", "num_assigned_order", "\n", "", "if", "self", ".", "order_num", "==", "0", ":", "\n", "                ", "break", "\n", "\n", "", "", "assert", "self", ".", "order_num", "==", "len", "(", "self", ".", "orders", ")", "\n", "return", "reward", ",", "num_finished_orders", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.utility_assign_orders_neighbor": [[320, 347], ["numpy.arange", "order_to_serve.set_assigned_time", "order_to_serve.get_price", "served_order_index.append", "neighbor_node.drivers.iteritems", "len", "enumerate", "order_to_serve.get_end_position", "assigned_driver.take_order", "neighbor_node.drivers.pop", "assigned_driver.set_offline", "assigned_driver.get_driver_id"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.set_assigned_time", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_price", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_end_position", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.take_order", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_offline", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.get_driver_id"], ["", "def", "utility_assign_orders_neighbor", "(", "self", ",", "city", ",", "neighbor_node", ",", "num_assigned_order", ")", ":", "\n", "\n", "        ", "served_order_index", "=", "[", "]", "\n", "reward", "=", "0", "\n", "curr_city_time", "=", "city", ".", "city_time", "\n", "for", "idx", "in", "np", ".", "arange", "(", "num_assigned_order", ")", ":", "\n", "            ", "order_to_serve", "=", "self", ".", "orders", "[", "idx", "]", "\n", "order_to_serve", ".", "set_assigned_time", "(", "curr_city_time", ")", "\n", "self", ".", "order_num", "-=", "1", "\n", "reward", "+=", "order_to_serve", ".", "get_price", "(", ")", "\n", "served_order_index", ".", "append", "(", "idx", ")", "\n", "for", "key", ",", "assigned_driver", "in", "neighbor_node", ".", "drivers", ".", "iteritems", "(", ")", ":", "\n", "                ", "if", "assigned_driver", ".", "onservice", "is", "False", "and", "assigned_driver", ".", "online", "is", "True", ":", "\n", "                    ", "if", "order_to_serve", ".", "get_end_position", "(", ")", "is", "not", "None", ":", "\n", "                        ", "assigned_driver", ".", "take_order", "(", "order_to_serve", ")", "\n", "removed_driver", "=", "neighbor_node", ".", "drivers", ".", "pop", "(", "assigned_driver", ".", "get_driver_id", "(", ")", ",", "None", ")", "\n", "assert", "removed_driver", "is", "not", "None", "\n", "", "else", ":", "\n", "                        ", "assigned_driver", ".", "set_offline", "(", ")", "\n", "", "city", ".", "n_drivers", "-=", "1", "\n", "break", "\n", "\n", "# remove served orders", "\n", "", "", "", "self", ".", "orders", "=", "[", "i", "for", "j", ",", "i", "in", "enumerate", "(", "self", ".", "orders", ")", "if", "j", "not", "in", "served_order_index", "]", "\n", "assert", "self", ".", "order_num", "==", "len", "(", "self", ".", "orders", ")", "\n", "\n", "return", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.__init__": [[352, 361], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "driver_id", ")", ":", "\n", "        ", "self", ".", "online", "=", "True", "\n", "self", ".", "onservice", "=", "False", "\n", "self", ".", "order", "=", "None", "# the order this driver is serving", "\n", "self", ".", "node", "=", "None", "# the node that contain this driver.", "\n", "self", ".", "city_time", "=", "0", "# track the current system time", "\n", "\n", "# private", "\n", "self", ".", "_driver_id", "=", "driver_id", "# unique driver id.", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_position": [[362, 364], ["None"], "methods", ["None"], ["", "def", "set_position", "(", "self", ",", "node", ")", ":", "\n", "        ", "self", ".", "node", "=", "node", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_order_start": [[365, 367], ["None"], "methods", ["None"], ["", "def", "set_order_start", "(", "self", ",", "order", ")", ":", "\n", "        ", "self", ".", "order", "=", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_order_finish": [[368, 371], ["None"], "methods", ["None"], ["", "def", "set_order_finish", "(", "self", ")", ":", "\n", "        ", "self", ".", "order", "=", "None", "\n", "self", ".", "onservice", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.get_driver_id": [[372, 374], ["None"], "methods", ["None"], ["", "def", "get_driver_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_driver_id", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.update_city_time": [[375, 377], ["None"], "methods", ["None"], ["", "def", "update_city_time", "(", "self", ")", ":", "\n", "        ", "self", ".", "city_time", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_city_time": [[378, 380], ["None"], "methods", ["None"], ["", "def", "set_city_time", "(", "self", ",", "city_time", ")", ":", "\n", "        ", "self", ".", "city_time", "=", "city_time", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_offline": [[381, 386], ["None"], "methods", ["None"], ["", "def", "set_offline", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "onservice", "is", "False", "and", "self", ".", "online", "is", "True", "\n", "self", ".", "online", "=", "False", "\n", "self", ".", "node", ".", "idle_driver_num", "-=", "1", "\n", "self", ".", "node", ".", "offline_driver_num", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_offline_for_start_dispatch": [[387, 391], ["None"], "methods", ["None"], ["", "def", "set_offline_for_start_dispatch", "(", "self", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "onservice", "is", "False", "\n", "self", ".", "online", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_online": [[392, 397], ["None"], "methods", ["None"], ["", "def", "set_online", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "onservice", "is", "False", "\n", "self", ".", "online", "=", "True", "\n", "self", ".", "node", ".", "idle_driver_num", "+=", "1", "\n", "self", ".", "node", ".", "offline_driver_num", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_online_for_finish_dispatch": [[398, 402], ["None"], "methods", ["None"], ["", "def", "set_online_for_finish_dispatch", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "online", "=", "True", "\n", "assert", "self", ".", "onservice", "is", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.take_order": [[403, 410], ["objects.Driver.set_order_start"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_order_start"], ["", "def", "take_order", "(", "self", ",", "order", ")", ":", "\n", "        ", "\"\"\" take order, driver show up at destination when order is finished\n        \"\"\"", "\n", "assert", "self", ".", "online", "==", "True", "\n", "self", ".", "set_order_start", "(", "order", ")", "\n", "self", ".", "onservice", "=", "True", "\n", "self", ".", "node", ".", "idle_driver_num", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.status_control_eachtime": [[411, 426], ["objects.Driver.order.get_assigned_time", "objects.Driver.order.get_duration", "objects.Driver.set_position", "objects.Driver.set_order_finish", "objects.Driver.node.add_driver", "objects.Driver.order.get_end_position", "ValueError"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_assigned_time", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_duration", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_position", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Driver.set_order_finish", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.add_driver", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_end_position"], ["", "def", "status_control_eachtime", "(", "self", ",", "city", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "city_time", "==", "city", ".", "city_time", "\n", "if", "self", ".", "onservice", "is", "True", ":", "\n", "            ", "assert", "self", ".", "online", "is", "True", "\n", "order_end_time", "=", "self", ".", "order", ".", "get_assigned_time", "(", ")", "+", "self", ".", "order", ".", "get_duration", "(", ")", "\n", "if", "self", ".", "city_time", "==", "order_end_time", ":", "\n", "                ", "self", ".", "set_position", "(", "self", ".", "order", ".", "get_end_position", "(", ")", ")", "\n", "self", ".", "set_order_finish", "(", ")", "\n", "self", ".", "node", ".", "add_driver", "(", "self", ".", "_driver_id", ",", "self", ")", "\n", "city", ".", "n_drivers", "+=", "1", "\n", "", "elif", "self", ".", "city_time", "<", "order_end_time", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Driver: status_control_eachtime(): order end time less than city time'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.__init__": [[432, 441], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "begin_position", ",", "end_position", ",", "begin_time", ",", "duration", ",", "price", ",", "wait_time", ")", ":", "\n", "        ", "self", ".", "_begin_p", "=", "begin_position", "# node", "\n", "self", ".", "_end_p", "=", "end_position", "# node", "\n", "self", ".", "_begin_t", "=", "begin_time", "\n", "# self._end_t = end_time", "\n", "self", ".", "_t", "=", "duration", "# the duration of order.", "\n", "self", ".", "_p", "=", "price", "\n", "self", ".", "_waiting_time", "=", "wait_time", "# a order can last for \"wait_time\" to be taken", "\n", "self", ".", "_assigned_time", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_begin_position": [[442, 444], ["None"], "methods", ["None"], ["", "def", "get_begin_position", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_begin_p", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_begin_position_id": [[445, 447], ["objects.Order._begin_p.get_node_index"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index"], ["", "def", "get_begin_position_id", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_begin_p", ".", "get_node_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_end_position": [[448, 450], ["None"], "methods", ["None"], ["", "def", "get_end_position", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_end_p", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_begin_time": [[451, 453], ["None"], "methods", ["None"], ["", "def", "get_begin_time", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_begin_t", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.set_assigned_time": [[454, 456], ["None"], "methods", ["None"], ["", "def", "set_assigned_time", "(", "self", ",", "city_time", ")", ":", "\n", "        ", "self", ".", "_assigned_time", "=", "city_time", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_assigned_time": [[457, 459], ["None"], "methods", ["None"], ["", "def", "get_assigned_time", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_assigned_time", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_duration": [[463, 465], ["None"], "methods", ["None"], ["", "def", "get_duration", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_t", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_price": [[466, 468], ["None"], "methods", ["None"], ["", "def", "get_price", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_p", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Order.get_wait_time": [[469, 471], ["None"], "methods", ["None"], ["", "def", "get_wait_time", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_waiting_time", "\n", "", "", ""]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.datetime_range": [[9, 14], ["None"], "function", ["None"], ["def", "datetime_range", "(", "start", ",", "end", ",", "delta", ")", ":", "\n", "    ", "current", "=", "start", "\n", "while", "current", "<", "end", ":", "\n", "        ", "yield", "current", "\n", "current", "+=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.mkdir_p": [[16, 24], ["os.makedirs", "os.path.isdir"], "function", ["None"], ["", "", "def", "mkdir_p", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "exc", ":", "# Python >2.5", "\n", "        ", "if", "exc", ".", "errno", "==", "errno", ".", "EEXIST", "and", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d": [[26, 36], ["None"], "function", ["None"], ["", "", "", "def", "ids_2dto1d", "(", "i", ",", "j", ",", "M", ",", "N", ")", ":", "\n", "    ", "'''\n    convert (i,j) in a M by N matrix to index in M*N list. (row wise)\n    matrix: [[1,2,3], [4, 5, 6]]\n    list: [0, 1, 2, 3, 4, 5, 6]\n    index start from 0\n    '''", "\n", "assert", "0", "<=", "i", "<", "M", "and", "0", "<=", "j", "<", "N", "\n", "index", "=", "i", "*", "N", "+", "j", "\n", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_1dto2d": [[38, 45], ["None"], "function", ["None"], ["", "def", "ids_1dto2d", "(", "ids", ",", "M", ",", "N", ")", ":", "\n", "    ", "''' inverse of ids_2dto1d(i, j, M, N)\n        index start from 0\n    '''", "\n", "i", "=", "ids", "/", "N", "\n", "j", "=", "ids", "-", "N", "*", "i", "\n", "return", "(", "i", ",", "j", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.get_neighbor_list": [[47, 98], ["utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d", "utilities.ids_2dto1d"], "function", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d"], ["", "def", "get_neighbor_list", "(", "i", ",", "j", ",", "M", ",", "N", ",", "n", ",", "nodes", ")", ":", "\n", "    ", "''' n: n-sided polygon, construct for a 2d map\n                 1\n             6       2\n               center\n             5       3\n                 4\n    return index of neighbor 1, 2, 3, 4, 5,6 in the matrix\n    '''", "\n", "\n", "neighbor_list", "=", "[", "None", "]", "*", "n", "\n", "if", "n", "==", "6", ":", "\n", "# hexagonal", "\n", "        ", "if", "j", "%", "2", "==", "0", ":", "\n", "            ", "if", "i", "-", "1", ">=", "0", ":", "\n", "                ", "neighbor_list", "[", "0", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", "-", "1", ",", "j", ",", "M", ",", "N", ")", "]", "\n", "", "if", "j", "+", "1", "<", "N", ":", "\n", "                ", "neighbor_list", "[", "1", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", ",", "j", "+", "1", ",", "M", ",", "N", ")", "]", "\n", "", "if", "i", "+", "1", "<", "M", "and", "j", "+", "1", "<", "N", ":", "\n", "                ", "neighbor_list", "[", "2", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", "+", "1", ",", "j", "+", "1", ",", "M", ",", "N", ")", "]", "\n", "", "if", "i", "+", "1", "<", "M", ":", "\n", "                ", "neighbor_list", "[", "3", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", "+", "1", ",", "j", ",", "M", ",", "N", ")", "]", "\n", "", "if", "i", "+", "1", "<", "M", "and", "j", "-", "1", ">=", "0", ":", "\n", "                ", "neighbor_list", "[", "4", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", "+", "1", ",", "j", "-", "1", ",", "M", ",", "N", ")", "]", "\n", "", "if", "j", "-", "1", ">=", "0", ":", "\n", "                ", "neighbor_list", "[", "5", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", ",", "j", "-", "1", ",", "M", ",", "N", ")", "]", "\n", "", "", "elif", "j", "%", "2", "==", "1", ":", "\n", "            ", "if", "i", "-", "1", ">=", "0", ":", "\n", "                ", "neighbor_list", "[", "0", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", "-", "1", ",", "j", ",", "M", ",", "N", ")", "]", "\n", "", "if", "i", "-", "1", ">=", "0", "and", "j", "+", "1", "<", "N", ":", "\n", "                ", "neighbor_list", "[", "1", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", "-", "1", ",", "j", "+", "1", ",", "M", ",", "N", ")", "]", "\n", "", "if", "j", "+", "1", "<", "N", ":", "\n", "                ", "neighbor_list", "[", "2", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", ",", "j", "+", "1", ",", "M", ",", "N", ")", "]", "\n", "", "if", "i", "+", "1", "<", "M", ":", "\n", "                ", "neighbor_list", "[", "3", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", "+", "1", ",", "j", ",", "M", ",", "N", ")", "]", "\n", "", "if", "j", "-", "1", ">=", "0", ":", "\n", "                ", "neighbor_list", "[", "4", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", ",", "j", "-", "1", ",", "M", ",", "N", ")", "]", "\n", "", "if", "i", "-", "1", ">=", "0", "and", "j", "-", "1", ">=", "0", ":", "\n", "                ", "neighbor_list", "[", "5", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", "-", "1", ",", "j", "-", "1", ",", "M", ",", "N", ")", "]", "\n", "", "", "", "elif", "n", "==", "4", ":", "\n", "# square", "\n", "        ", "if", "i", "-", "1", ">=", "0", ":", "\n", "            ", "neighbor_list", "[", "0", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", "-", "1", ",", "j", ",", "M", ",", "N", ")", "]", "\n", "", "if", "j", "+", "1", "<", "N", ":", "\n", "            ", "neighbor_list", "[", "1", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", ",", "j", "+", "1", ",", "M", ",", "N", ")", "]", "\n", "", "if", "i", "+", "1", "<", "M", ":", "\n", "            ", "neighbor_list", "[", "2", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", "+", "1", ",", "j", ",", "M", ",", "N", ")", "]", "\n", "", "if", "j", "-", "1", ">=", "0", ":", "\n", "            ", "neighbor_list", "[", "3", "]", "=", "nodes", "[", "ids_2dto1d", "(", "i", ",", "j", "-", "1", ",", "M", ",", "N", ")", "]", "\n", "\n", "", "", "return", "neighbor_list", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.get_neighbor_index": [[100, 126], ["None"], "function", ["None"], ["", "def", "get_neighbor_index", "(", "i", ",", "j", ")", ":", "\n", "    ", "\"\"\"\n                 1\n             6       2\n                center\n             5       3\n                 4\n    return index of neighbor 1, 2, 3, 4, 5,6 in the matrix\n    \"\"\"", "\n", "neighbor_matrix_ids", "=", "[", "]", "\n", "if", "j", "%", "2", "==", "0", ":", "\n", "        ", "neighbor_matrix_ids", "=", "[", "[", "i", "-", "1", ",", "j", "]", ",", "\n", "[", "i", ",", "j", "+", "1", "]", ",", "\n", "[", "i", "+", "1", ",", "j", "+", "1", "]", ",", "\n", "[", "i", "+", "1", ",", "j", "]", ",", "\n", "[", "i", "+", "1", ",", "j", "-", "1", "]", ",", "\n", "[", "i", ",", "j", "-", "1", "]", "]", "\n", "", "elif", "j", "%", "2", "==", "1", ":", "\n", "        ", "neighbor_matrix_ids", "=", "[", "[", "i", "-", "1", ",", "j", "]", ",", "\n", "[", "i", "-", "1", ",", "j", "+", "1", "]", ",", "\n", "[", "i", ",", "j", "+", "1", "]", ",", "\n", "[", "i", "+", "1", ",", "j", "]", ",", "\n", "[", "i", ",", "j", "-", "1", "]", ",", "\n", "[", "i", "-", "1", ",", "j", "-", "1", "]", "]", "\n", "\n", "", "return", "neighbor_matrix_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.get_layers_neighbors": [[128, 176], ["utilities.get_neighbor_index", "layers_neighbors.append", "set", "utilities.ids_2dto1d", "set.add", "layers_neighbors.append", "temp.append", "node_id_neighbors.append", "utilities.ids_2dto1d", "utilities.get_neighbor_index", "utilities.ids_2dto1d", "layer_neighbor.append", "set.add"], "function", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.get_neighbor_index", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.ReplayMemory.add", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.get_neighbor_index", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.ReplayMemory.add"], ["", "def", "get_layers_neighbors", "(", "i", ",", "j", ",", "l_max", ",", "M", ",", "N", ")", ":", "\n", "    ", "\"\"\"get neighbors of node layer by layer, todo BFS.\n       i, j: center node location\n       L_max: max number of layers\n       layers_neighbors: layers_neighbors[0] first layer neighbor: 6 nodes: can arrived in 1 time step.\n       layers_neighbors[1]: 2nd layer nodes id\n       M, N: matrix rows and columns.\n    \"\"\"", "\n", "assert", "l_max", ">=", "1", "\n", "layers_neighbors", "=", "[", "]", "\n", "layer1_neighbor", "=", "get_neighbor_index", "(", "i", ",", "j", ")", "#[[1,1], [0, 1], ...]", "\n", "temp", "=", "[", "]", "\n", "for", "item", "in", "layer1_neighbor", ":", "\n", "        ", "x", ",", "y", "=", "item", "\n", "if", "0", "<=", "x", "<=", "M", "-", "1", "and", "0", "<=", "y", "<=", "N", "-", "1", ":", "\n", "            ", "temp", ".", "append", "(", "item", ")", "\n", "", "", "layers_neighbors", ".", "append", "(", "temp", ")", "\n", "\n", "node_id_neighbors", "=", "[", "]", "\n", "for", "item", "in", "layer1_neighbor", ":", "\n", "        ", "x", ",", "y", "=", "item", "\n", "if", "0", "<=", "x", "<=", "M", "-", "1", "and", "0", "<=", "y", "<=", "N", "-", "1", ":", "\n", "            ", "node_id_neighbors", ".", "append", "(", "ids_2dto1d", "(", "x", ",", "y", ",", "M", ",", "N", ")", ")", "\n", "\n", "", "", "layers_neighbors_set", "=", "set", "(", "node_id_neighbors", ")", "\n", "curr_ndoe_id", "=", "ids_2dto1d", "(", "i", ",", "j", ",", "M", ",", "N", ")", "\n", "layers_neighbors_set", ".", "add", "(", "curr_ndoe_id", ")", "\n", "\n", "t", "=", "1", "\n", "while", "t", "<", "l_max", ":", "\n", "        ", "t", "+=", "1", "\n", "layer_neighbor_temp", "=", "[", "]", "\n", "for", "item", "in", "layers_neighbors", "[", "-", "1", "]", ":", "\n", "            ", "x", ",", "y", "=", "item", "\n", "if", "0", "<=", "x", "<=", "M", "-", "1", "and", "0", "<=", "y", "<=", "N", "-", "1", ":", "\n", "                ", "layer_neighbor_temp", "+=", "get_neighbor_index", "(", "x", ",", "y", ")", "\n", "\n", "", "", "layer_neighbor", "=", "[", "]", "# remove previous layer neighbors", "\n", "for", "item", "in", "layer_neighbor_temp", ":", "\n", "            ", "x", ",", "y", "=", "item", "\n", "if", "0", "<=", "x", "<=", "M", "-", "1", "and", "0", "<=", "y", "<=", "N", "-", "1", ":", "\n", "                ", "node_id", "=", "ids_2dto1d", "(", "x", ",", "y", ",", "M", ",", "N", ")", "\n", "if", "node_id", "not", "in", "layers_neighbors_set", ":", "\n", "                    ", "layer_neighbor", ".", "append", "(", "item", ")", "\n", "layers_neighbors_set", ".", "add", "(", "node_id", ")", "\n", "", "", "", "layers_neighbors", ".", "append", "(", "layer_neighbor", ")", "\n", "\n", "", "return", "layers_neighbors", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.get_driver_status": [[178, 188], ["numpy.zeros", "env.drivers.iteritems", "cur_drivers.node.get_node_index", "utilities.ids_1dto2d"], "function", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_1dto2d"], ["", "def", "get_driver_status", "(", "env", ")", ":", "\n", "    ", "idle_driver_dist", "=", "np", ".", "zeros", "(", "(", "env", ".", "M", ",", "env", ".", "N", ")", ")", "\n", "for", "driver_id", ",", "cur_drivers", "in", "env", ".", "drivers", ".", "iteritems", "(", ")", ":", "\n", "        ", "if", "cur_drivers", ".", "node", "is", "not", "None", ":", "\n", "            ", "node_id", "=", "cur_drivers", ".", "node", ".", "get_node_index", "(", ")", "\n", "row", ",", "col", "=", "ids_1dto2d", "(", "node_id", ",", "env", ".", "M", ",", "env", ".", "N", ")", "\n", "if", "cur_drivers", ".", "onservice", "is", "False", "and", "cur_drivers", ".", "online", "is", "True", ":", "\n", "                ", "idle_driver_dist", "[", "row", ",", "col", "]", "+=", "1", "\n", "\n", "", "", "", "return", "idle_driver_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.debug_print_drivers": [[189, 199], ["print", "print", "node.drivers.iteritems", "print", "node.get_node_index", "cur_drivers.node.get_node_index"], "function", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index"], ["", "def", "debug_print_drivers", "(", "node", ")", ":", "\n", "    ", "print", "(", "\"Status of all drivers in the node {}\"", ".", "format", "(", "node", ".", "get_node_index", "(", ")", ")", ")", "\n", "print", "(", "\"|{:12}|{:12}|{:12}|{:12}|\"", ".", "format", "(", "\"driver id\"", ",", "\"driver location\"", ",", "\"online\"", ",", "\"onservice\"", ")", ")", "\n", "\n", "for", "driver_id", ",", "cur_drivers", "in", "node", ".", "drivers", ".", "iteritems", "(", ")", ":", "\n", "        ", "if", "cur_drivers", ".", "node", "is", "not", "None", ":", "\n", "            ", "node_id", "=", "cur_drivers", ".", "node", ".", "get_node_index", "(", ")", "\n", "", "else", ":", "\n", "            ", "node_id", "=", "\"none\"", "\n", "", "print", "(", "\"|{:12}|{:12}|{:12}|{:12}|\"", ".", "format", "(", "driver_id", ",", "node_id", ",", "cur_drivers", ".", "online", ",", "cur_drivers", ".", "onservice", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.Estimator.__init__": [[11, 62], ["enumerate", "numpy.ones", "numpy.zeros", "numpy.zeros", "enumerate", "tensorflow.variable_scope", "IDQN.Estimator._build_model", "neighbor_ids.append", "IDQN.Estimator.neighbors_list.append", "enumerate", "os.path.join", "tensorflow.summary.FileWriter", "env.target_grids.index", "os.path.exists", "os.makedirs", "env.nodes[].get_node_index", "neighbor.get_node_index", "env.target_grids.index"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.Estimator._build_model", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index"], ["def", "__init__", "(", "self", ",", "\n", "sess", ",", "\n", "action_dim", ",", "\n", "state_dim", ",", "\n", "env", ",", "\n", "scope", "=", "\"estimator\"", ",", "\n", "summaries_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "n_valid_grid", "=", "env", ".", "n_valid_grids", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "state_dim", "=", "state_dim", "\n", "self", ".", "M", "=", "env", ".", "M", "\n", "self", ".", "N", "=", "env", ".", "N", "\n", "self", ".", "scope", "=", "scope", "\n", "self", ".", "T", "=", "144", "\n", "self", ".", "env", "=", "env", "\n", "\n", "# Writes Tensorboard summaries to disk", "\n", "self", ".", "summary_writer", "=", "None", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "# Build the graph", "\n", "            ", "self", ".", "_build_model", "(", ")", "\n", "if", "summaries_dir", ":", "\n", "                ", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "summaries_dir", ",", "\"summaries_{}\"", ".", "format", "(", "scope", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "summary_dir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "summary_dir", ")", "\n", "", "self", ".", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "summary_dir", ")", "\n", "\n", "", "", "self", ".", "neighbors_list", "=", "[", "]", "\n", "for", "idx", ",", "node_id", "in", "enumerate", "(", "env", ".", "target_grids", ")", ":", "\n", "            ", "neighbor_indices", "=", "env", ".", "nodes", "[", "node_id", "]", ".", "layers_neighbors_id", "[", "0", "]", "# index in env.nodes", "\n", "neighbor_ids", "=", "[", "env", ".", "target_grids", ".", "index", "(", "env", ".", "nodes", "[", "item", "]", ".", "get_node_index", "(", ")", ")", "for", "item", "in", "neighbor_indices", "]", "\n", "neighbor_ids", ".", "append", "(", "idx", ")", "\n", "# index in env.target_grids == index in state", "\n", "self", ".", "neighbors_list", ".", "append", "(", "neighbor_ids", ")", "\n", "\n", "# compute valid action mask.", "\n", "", "self", ".", "valid_action_mask", "=", "np", ".", "ones", "(", "(", "self", ".", "n_valid_grid", ",", "self", ".", "action_dim", ")", ")", "\n", "self", ".", "valid_neighbor_node_id", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_valid_grid", ",", "self", ".", "action_dim", ")", ")", "# id in env.nodes", "\n", "self", ".", "valid_neighbor_grid_id", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_valid_grid", ",", "self", ".", "action_dim", ")", ")", "# id in env.target_grids", "\n", "for", "grid_idx", ",", "grid_id", "in", "enumerate", "(", "env", ".", "target_grids", ")", ":", "\n", "            ", "for", "neighbor_idx", ",", "neighbor", "in", "enumerate", "(", "self", ".", "env", ".", "nodes", "[", "grid_id", "]", ".", "neighbors", ")", ":", "\n", "                ", "if", "neighbor", "is", "None", ":", "\n", "                    ", "self", ".", "valid_action_mask", "[", "grid_idx", ",", "neighbor_idx", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "node_index", "=", "neighbor", ".", "get_node_index", "(", ")", "# node_index in env.nodes", "\n", "self", ".", "valid_neighbor_node_id", "[", "grid_idx", ",", "neighbor_idx", "]", "=", "node_index", "\n", "self", ".", "valid_neighbor_grid_id", "[", "grid_idx", ",", "neighbor_idx", "]", "=", "env", ".", "target_grids", ".", "index", "(", "node_index", ")", "\n", "\n", "", "", "self", ".", "valid_neighbor_node_id", "[", "grid_idx", ",", "-", "1", "]", "=", "grid_id", "\n", "self", ".", "valid_neighbor_grid_id", "[", "grid_idx", ",", "-", "1", "]", "=", "grid_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.Estimator._build_model": [[65, 98], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.layers.dense", "tensorflow.reduce_sum", "tensorflow.squared_difference", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.summary.merge", "tensorflow.train.AdamOptimizer", "tensorflow.summary.scalar", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.scalar", "tensorflow.reduce_max"], "methods", ["None"], ["", "", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "trainable", "=", "True", "\n", "self", ".", "state", "=", "X", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "self", ".", "state_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"X\"", ")", "\n", "\n", "# The TD target value", "\n", "self", ".", "y_pl", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"y\"", ")", "\n", "\n", "# action chosen", "\n", "self", ".", "ACTION", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "self", ".", "action_dim", "]", ",", "'action_chosen'", ")", "\n", "\n", "self", ".", "loss_lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "None", ",", "\"learning_rate\"", ")", "\n", "\n", "# 3 layers feed forward network.", "\n", "l1", "=", "tf", ".", "layers", ".", "dense", "(", "X", ",", "128", ",", "tf", ".", "nn", ".", "elu", ",", "trainable", "=", "trainable", ")", "\n", "l2", "=", "tf", ".", "layers", ".", "dense", "(", "l1", ",", "64", ",", "tf", ".", "nn", ".", "elu", ",", "trainable", "=", "trainable", ")", "\n", "l3", "=", "tf", ".", "layers", ".", "dense", "(", "l2", ",", "32", ",", "tf", ".", "nn", ".", "elu", ",", "trainable", "=", "trainable", ")", "\n", "self", ".", "qvalue", "=", "tf", ".", "layers", ".", "dense", "(", "l3", ",", "self", ".", "action_dim", ",", "tf", ".", "nn", ".", "elu", ",", "trainable", "=", "trainable", ")", "\n", "\n", "\n", "# get the Q(s,a) for chosen action", "\n", "self", ".", "action_predictions", "=", "tf", ".", "reduce_sum", "(", "self", ".", "qvalue", "*", "self", ".", "ACTION", ",", "axis", "=", "1", ")", "\n", "\n", "self", ".", "losses", "=", "tf", ".", "squared_difference", "(", "self", ".", "y_pl", ",", "self", ".", "action_predictions", ")", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "losses", ")", "\n", "\n", "self", ".", "train_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "loss_lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n", "# Summaries for Tensorboard", "\n", "self", ".", "summaries", "=", "tf", ".", "summary", ".", "merge", "(", "[", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss\"", ",", "self", ".", "loss", ")", ",", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"loss_hist\"", ",", "self", ".", "losses", ")", ",", "\n", "tf", ".", "summary", ".", "histogram", "(", "\"q_values_hist\"", ",", "self", ".", "qvalue", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"max_q_value\"", ",", "tf", ".", "reduce_max", "(", "self", ".", "qvalue", ")", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.Estimator.predict": [[100, 104], ["IDQN.Estimator.sess.run", "numpy.max"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "s", ")", ":", "\n", "        ", "qvalues", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "qvalue", ",", "{", "self", ".", "state", ":", "s", "}", ")", "\n", "max_qvalue", "=", "np", ".", "max", "(", "qvalues", ",", "axis", "=", "1", ")", "\n", "return", "max_qvalue", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.Estimator.action": [[105, 157], ["IDQN.Estimator.sess.run", "numpy.zeros", "numpy.argmax", "enumerate", "numpy.where", "zip", "valid_probs.append", "enumerate", "action_starting_gridids.append", "len", "len", "numpy.sum", "numpy.random.multinomial", "numpy.argmax", "numpy.zeros", "numpy.count_nonzero", "numpy.random.multinomial", "action_tuple.append", "numpy.sum", "numpy.sum", "int", "float", "int", "int", "action_idx.append", "action_idx_valid.append", "action_neighbor_idx.append", "int", "int"], "methods", ["None"], ["", "def", "action", "(", "self", ",", "s", ",", "context", ",", "epsilon", ")", ":", "\n", "        ", "\"\"\" Compute Q(s, a) for all actions give states\n        :return:\n        \"\"\"", "\n", "# A = np.ones(self.action_dim, dtype=float) * epsilon / self.action_dim", "\n", "qvalues", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "qvalue", ",", "{", "self", ".", "state", ":", "s", "}", ")", "\n", "action_idx", "=", "[", "]", "# go to which node, the index in nodes", "\n", "action_idx_valid", "=", "[", "]", "#the index in env.target_grids", "\n", "action_neighbor_idx", "=", "[", "]", "\n", "action_tuple_mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "env", ".", "nodes", ")", ",", "len", "(", "self", ".", "env", ".", "nodes", ")", ")", ")", "\n", "action_tuple", "=", "[", "]", "\n", "action_starting_gridids", "=", "[", "]", "\n", "\n", "grid_ids", "=", "np", ".", "argmax", "(", "s", "[", ":", ",", "-", "self", ".", "n_valid_grid", ":", "]", ",", "axis", "=", "1", ")", "# starting grid of each sample", "\n", "valid_probs", "=", "[", "]", "\n", "\n", "for", "idx", ",", "grid_valid_idx", "in", "enumerate", "(", "grid_ids", ")", ":", "\n", "            ", "curr_qvalue", "=", "qvalues", "[", "idx", "]", "\n", "temp_qvalue", "=", "self", ".", "valid_action_mask", "[", "grid_valid_idx", "]", "*", "curr_qvalue", "\n", "\n", "if", "np", ".", "sum", "(", "temp_qvalue", ")", "==", "0", ":", "# encourage exploration", "\n", "                ", "temp_qvalue", "[", "self", ".", "valid_action_mask", "[", "grid_valid_idx", "]", ">", "0", "]", "=", "1.", "/", "np", ".", "sum", "(", "self", ".", "valid_action_mask", "[", "grid_valid_idx", "]", ")", "\n", "action_prob", "=", "temp_qvalue", "/", "np", ".", "sum", "(", "temp_qvalue", ")", "\n", "curr_action_indices", "=", "np", ".", "random", ".", "multinomial", "(", "int", "(", "context", "[", "idx", "]", ")", ",", "action_prob", ")", "\n", "", "else", ":", "\n", "                ", "best_action", "=", "np", ".", "argmax", "(", "temp_qvalue", ")", "\n", "action_prob", "=", "np", ".", "zeros", "(", "self", ".", "action_dim", ")", "\n", "num_valid_action", "=", "np", ".", "count_nonzero", "(", "temp_qvalue", ")", "\n", "action_prob", "[", "temp_qvalue", ">", "0", "]", "=", "epsilon", "/", "float", "(", "num_valid_action", ")", "\n", "action_prob", "[", "best_action", "]", "+=", "1", "-", "epsilon", "\n", "curr_action_indices", "=", "np", ".", "random", ".", "multinomial", "(", "int", "(", "context", "[", "idx", "]", ")", ",", "action_prob", ")", "\n", "\n", "", "valid_probs", ".", "append", "(", "action_prob", ")", "\n", "start_node_id", "=", "self", ".", "env", ".", "target_grids", "[", "grid_valid_idx", "]", "\n", "num_distinct_action", "=", "0", "\n", "for", "curr_action_idx", ",", "num_driver", "in", "enumerate", "(", "curr_action_indices", ")", ":", "\n", "                ", "if", "num_driver", ">", "0", ":", "\n", "                    ", "end_node_id", "=", "int", "(", "self", ".", "valid_neighbor_node_id", "[", "grid_valid_idx", ",", "curr_action_idx", "]", ")", "\n", "\n", "action_idx", ".", "append", "(", "end_node_id", ")", "\n", "action_idx_valid", ".", "append", "(", "int", "(", "self", ".", "valid_neighbor_grid_id", "[", "grid_valid_idx", ",", "curr_action_idx", "]", ")", ")", "\n", "action_neighbor_idx", ".", "append", "(", "curr_action_idx", ")", "\n", "action_tuple_mat", "[", "start_node_id", ",", "end_node_id", "]", "=", "num_driver", "\n", "num_distinct_action", "+=", "1", "\n", "", "", "action_starting_gridids", ".", "append", "(", "num_distinct_action", ")", "\n", "\n", "", "action_indices", "=", "np", ".", "where", "(", "action_tuple_mat", ">", "0", ")", "\n", "for", "xx", ",", "yy", "in", "zip", "(", "action_indices", "[", "0", "]", ",", "action_indices", "[", "1", "]", ")", ":", "\n", "            ", "if", "xx", "!=", "yy", ":", "\n", "                ", "action_tuple", ".", "append", "(", "(", "xx", ",", "yy", ",", "int", "(", "action_tuple_mat", "[", "xx", ",", "yy", "]", ")", ")", ")", "\n", "\n", "", "", "return", "qvalues", ",", "action_idx", ",", "action_idx_valid", ",", "action_neighbor_idx", ",", "action_tuple", ",", "action_starting_gridids", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.Estimator.update": [[158, 177], ["sess.run", "IDQN.Estimator.summary_writer.add_summary"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "s", ",", "a", ",", "y", ",", "learning_rate", ",", "global_step", ")", ":", "\n", "        ", "\"\"\"\n        Updates the estimator towards the given targets.\n\n        Args:\n          s: State input of shape [batch_size, state_dim]\n          a: Chosen actions of shape [batch_size, action_dim], 0, 1 mask\n          y: Targets of shape [batch_size]\n\n        Returns:\n          The calculated loss on the batch.\n        \"\"\"", "\n", "sess", "=", "self", ".", "sess", "\n", "feed_dict", "=", "{", "self", ".", "state", ":", "s", ",", "self", ".", "y_pl", ":", "y", ",", "self", ".", "ACTION", ":", "a", ",", "self", ".", "loss_lr", ":", "learning_rate", "}", "\n", "summaries", ",", "_", ",", "loss", "=", "sess", ".", "run", "(", "[", "self", ".", "summaries", ",", "self", ".", "train_op", ",", "self", ".", "loss", "]", ",", "feed_dict", ")", "\n", "\n", "if", "self", ".", "summary_writer", ":", "\n", "            ", "self", ".", "summary_writer", ".", "add_summary", "(", "summaries", ",", "global_step", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.stateProcessor.__init__": [[185, 195], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "target_id_states", ",", "\n", "target_grids", ",", "\n", "n_valid_grids", ")", ":", "\n", "        ", "self", ".", "target_id_states", "=", "target_id_states", "# valid grid index for driver and order distribution.", "\n", "self", ".", "target_grids", "=", "target_grids", "# valid grid id [22, 24, ...]  504", "\n", "self", ".", "n_valid_grids", "=", "n_valid_grids", "\n", "self", ".", "T", "=", "144", "\n", "self", ".", "action_dim", "=", "7", "\n", "self", ".", "extend_state", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.stateProcessor.utility_conver_states": [[196, 200], ["numpy.array().flatten", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "utility_conver_states", "(", "self", ",", "curr_state", ")", ":", "\n", "        ", "curr_s", "=", "np", ".", "array", "(", "curr_state", ")", ".", "flatten", "(", ")", "\n", "curr_s_new", "=", "[", "curr_s", "[", "idx", "]", "for", "idx", "in", "self", ".", "target_id_states", "]", "\n", "return", "np", ".", "array", "(", "curr_s_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.stateProcessor.utility_conver_reward": [[201, 204], ["numpy.array"], "methods", ["None"], ["", "def", "utility_conver_reward", "(", "self", ",", "reward_node", ")", ":", "\n", "        ", "reward_node_new", "=", "[", "reward_node", "[", "idx", "]", "for", "idx", "in", "self", ".", "target_grids", "]", "\n", "return", "np", ".", "array", "(", "reward_node_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.stateProcessor.reward_wrapper": [[205, 218], ["IDQN.stateProcessor.utility_conver_reward"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.utility_conver_reward"], ["", "def", "reward_wrapper", "(", "self", ",", "info", ",", "curr_s", ")", ":", "\n", "        ", "\"\"\"\n        :param info: [node_reward(including neighbors), neighbor_reward]\n        :param curr_s:\n        :return:\n        \"\"\"", "\n", "\n", "info_reward", "=", "info", "[", "0", "]", "\n", "valid_nodes_reward", "=", "self", ".", "utility_conver_reward", "(", "info_reward", "[", "0", "]", ")", "\n", "devide", "=", "curr_s", "[", ":", "self", ".", "n_valid_grids", "]", "\n", "devide", "[", "devide", "==", "0", "]", "=", "1", "\n", "valid_nodes_reward", "=", "valid_nodes_reward", "/", "devide", "\n", "return", "valid_nodes_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.stateProcessor.compute_context": [[219, 224], ["info.flatten"], "methods", ["None"], ["", "def", "compute_context", "(", "self", ",", "info", ")", ":", "\n", "# compute context", "\n", "        ", "context", "=", "info", ".", "flatten", "(", ")", "\n", "context", "=", "[", "context", "[", "idx", "]", "for", "idx", "in", "self", ".", "target_grids", "]", "\n", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.stateProcessor.utility_normalize_states": [[225, 233], ["numpy.max", "numpy.max", "numpy.zeros_like"], "methods", ["None"], ["", "def", "utility_normalize_states", "(", "self", ",", "curr_s", ")", ":", "\n", "        ", "max_driver_num", "=", "np", ".", "max", "(", "curr_s", "[", ":", "self", ".", "n_valid_grids", "]", ")", "\n", "max_order_num", "=", "np", ".", "max", "(", "curr_s", "[", "self", ".", "n_valid_grids", ":", "]", ")", "\n", "\n", "curr_s_new", "=", "np", ".", "zeros_like", "(", "curr_s", ")", "\n", "curr_s_new", "[", ":", "self", ".", "n_valid_grids", "]", "=", "curr_s", "[", ":", "self", ".", "n_valid_grids", "]", "/", "max_driver_num", "\n", "curr_s_new", "[", "self", ".", "n_valid_grids", ":", "]", "=", "curr_s", "[", "self", ".", "n_valid_grids", ":", "]", "/", "max_order_num", "\n", "return", "curr_s_new", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.stateProcessor.to_grid_states": [[235, 248], ["numpy.zeros", "numpy.eye", "numpy.zeros", "numpy.stack", "numpy.stack", "numpy.array"], "methods", ["None"], ["", "def", "to_grid_states", "(", "self", ",", "curr_s", ",", "curr_city_time", ")", ":", "\n", "        ", "T", "=", "self", ".", "T", "\n", "\n", "# curr_s = self.utility_conver_states(curr_state)", "\n", "time_one_hot", "=", "np", ".", "zeros", "(", "(", "T", ")", ")", "\n", "time_one_hot", "[", "curr_city_time", "%", "T", "]", "=", "1", "\n", "onehot_grid_id", "=", "np", ".", "eye", "(", "self", ".", "n_valid_grids", ")", "\n", "\n", "s_grid", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_valid_grids", ",", "self", ".", "n_valid_grids", "*", "3", "+", "T", ")", ")", "\n", "s_grid", "[", ":", ",", ":", "self", ".", "n_valid_grids", "*", "2", "]", "=", "np", ".", "stack", "(", "[", "curr_s", "]", "*", "self", ".", "n_valid_grids", ")", "\n", "s_grid", "[", ":", ",", "self", ".", "n_valid_grids", "*", "2", ":", "self", ".", "n_valid_grids", "*", "2", "+", "T", "]", "=", "np", ".", "stack", "(", "[", "time_one_hot", "]", "*", "self", ".", "n_valid_grids", ")", "\n", "s_grid", "[", ":", ",", "-", "self", ".", "n_valid_grids", ":", "]", "=", "onehot_grid_id", "\n", "return", "np", ".", "array", "(", "s_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.stateProcessor.to_grid_rewards": [[249, 255], ["numpy.array", "r_grid.append"], "methods", ["None"], ["", "def", "to_grid_rewards", "(", "self", ",", "action_idx_valid", ",", "node_reward", ")", ":", "\n", "        ", "r_grid", "=", "[", "]", "\n", "for", "end_grid_id", "in", "action_idx_valid", ":", "\n", "            ", "r_grid", ".", "append", "(", "node_reward", "[", "end_grid_id", "]", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "r_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.stateProcessor.to_grid_next_states": [[257, 277], ["IDQN.stateProcessor.utility_normalize_states", "numpy.zeros", "numpy.zeros", "IDQN.stateProcessor.utility_conver_states", "numpy.array", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.stateProcessor.utility_normalize_states", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.utility_conver_states"], ["", "def", "to_grid_next_states", "(", "self", ",", "s_grid", ",", "next_state", ",", "action_index", ",", "curr_city_time", ")", ":", "\n", "        ", "\"\"\"\n        :param s_grid:  batch_size x state_dimension\n        :param action_index: batch_size, end_valid_grid_id, next grid id.\n        :return:\n        \"\"\"", "\n", "T", "=", "self", ".", "T", "\n", "next_s", "=", "self", ".", "utility_normalize_states", "(", "self", ".", "utility_conver_states", "(", "next_state", ")", ")", "\n", "\n", "time_one_hot", "=", "np", ".", "zeros", "(", "(", "T", ")", ")", "\n", "time_one_hot", "[", "curr_city_time", "%", "T", "]", "=", "1", "\n", "\n", "s_grid_next", "=", "np", ".", "zeros", "(", "s_grid", ".", "shape", ")", "\n", "s_grid_next", "[", ":", ",", ":", "self", ".", "n_valid_grids", "*", "2", "]", "=", "next_s", "\n", "s_grid_next", "[", ":", ",", "self", ".", "n_valid_grids", "*", "2", ":", "self", ".", "n_valid_grids", "*", "2", "+", "T", "]", "=", "time_one_hot", "\n", "\n", "action_index", "=", "np", ".", "array", "(", "action_index", ")", "+", "self", ".", "n_valid_grids", "*", "2", "+", "T", "\n", "s_grid_next", "[", "np", ".", "arange", "(", "s_grid_next", ".", "shape", "[", "0", "]", ")", ",", "action_index", "]", "=", "1", "\n", "\n", "return", "s_grid_next", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.stateProcessor.to_grid_state_for_training": [[278, 284], ["enumerate", "numpy.array"], "methods", ["None"], ["", "def", "to_grid_state_for_training", "(", "self", ",", "s_grid", ",", "action_starting_gridids", ")", ":", "\n", "        ", "s_grid_new", "=", "[", "]", "\n", "for", "idx", ",", "num_extend", "in", "enumerate", "(", "action_starting_gridids", ")", ":", "\n", "            ", "temp_s", "=", "s_grid", "[", "idx", "]", "\n", "s_grid_new", "+=", "[", "temp_s", "]", "*", "num_extend", "\n", "", "return", "np", ".", "array", "(", "s_grid_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.stateProcessor.to_action_mat": [[285, 289], ["numpy.zeros", "len", "numpy.arange"], "methods", ["None"], ["", "def", "to_action_mat", "(", "self", ",", "action_neighbor_idx", ")", ":", "\n", "        ", "action_mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "action_neighbor_idx", ")", ",", "self", ".", "action_dim", ")", ")", "\n", "action_mat", "[", "np", ".", "arange", "(", "action_mat", ".", "shape", "[", "0", "]", ")", ",", "action_neighbor_idx", "]", "=", "1", "\n", "return", "action_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.ReplayMemory.__init__": [[296, 306], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "memory_size", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "states", "=", "[", "]", "\n", "self", ".", "next_states", "=", "[", "]", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "memory_size", "=", "memory_size", "\n", "self", ".", "current", "=", "0", "\n", "self", ".", "curr_lens", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.ReplayMemory.add": [[307, 329], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "random.randint"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "s", ",", "a", ",", "r", ",", "next_s", ")", ":", "\n", "        ", "if", "self", ".", "curr_lens", "==", "0", ":", "\n", "            ", "self", ".", "states", "=", "s", "\n", "self", ".", "actions", "=", "a", "\n", "self", ".", "rewards", "=", "r", "\n", "self", ".", "next_states", "=", "next_s", "\n", "self", ".", "curr_lens", "=", "self", ".", "states", ".", "shape", "[", "0", "]", "\n", "\n", "", "elif", "self", ".", "curr_lens", "<=", "self", ".", "memory_size", ":", "\n", "            ", "self", ".", "states", "=", "np", ".", "concatenate", "(", "(", "self", ".", "states", ",", "s", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "next_states", "=", "np", ".", "concatenate", "(", "(", "self", ".", "next_states", ",", "next_s", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "actions", "=", "np", ".", "concatenate", "(", "(", "self", ".", "actions", ",", "a", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "rewards", "=", "np", ".", "concatenate", "(", "(", "self", ".", "rewards", ",", "r", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "curr_lens", "=", "self", ".", "states", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "new_sample_lens", "=", "s", ".", "shape", "[", "0", "]", "\n", "index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "curr_lens", "-", "new_sample_lens", ")", "\n", "\n", "self", ".", "states", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "s", "\n", "self", ".", "actions", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "a", "\n", "self", ".", "rewards", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "r", "\n", "self", ".", "next_states", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "next_s", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.ReplayMemory.sample": [[330, 340], ["random.sample", "range"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.DiagGaussianPd.sample"], ["", "", "def", "sample", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "curr_lens", "<=", "self", ".", "batch_size", ":", "\n", "            ", "return", "[", "self", ".", "states", ",", "self", ".", "actions", ",", "self", ".", "rewards", ",", "self", ".", "next_states", "]", "\n", "", "indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "self", ".", "curr_lens", ")", ",", "self", ".", "batch_size", ")", "\n", "batch_s", "=", "self", ".", "states", "[", "indices", "]", "\n", "batch_a", "=", "self", ".", "actions", "[", "indices", "]", "\n", "batch_r", "=", "self", ".", "rewards", "[", "indices", "]", "\n", "batch_next_s", "=", "self", ".", "next_states", "[", "indices", "]", "\n", "return", "[", "batch_s", ",", "batch_a", ",", "batch_r", ",", "batch_next_s", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.ReplayMemory.reset": [[341, 347], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "states", "=", "[", "]", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "next_states", "=", "[", "]", "\n", "self", ".", "curr_lens", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.ModelParametersCopier.__init__": [[354, 370], ["sorted", "sorted", "zip", "e2_v.assign", "IDQN.ModelParametersCopier.update_ops.append", "tensorflow.trainable_variables", "t.name.startswith", "tensorflow.trainable_variables", "t.name.startswith"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "estimator1", ",", "estimator2", ")", ":", "\n", "        ", "\"\"\"\n        Defines copy-work operation graph.\n        Args:\n          estimator1: Estimator to copy the paramters from\n          estimator2: Estimator to copy the parameters to\n        \"\"\"", "\n", "e1_params", "=", "[", "t", "for", "t", "in", "tf", ".", "trainable_variables", "(", ")", "if", "t", ".", "name", ".", "startswith", "(", "estimator1", ".", "scope", ")", "]", "\n", "e1_params", "=", "sorted", "(", "e1_params", ",", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "e2_params", "=", "[", "t", "for", "t", "in", "tf", ".", "trainable_variables", "(", ")", "if", "t", ".", "name", ".", "startswith", "(", "estimator2", ".", "scope", ")", "]", "\n", "e2_params", "=", "sorted", "(", "e2_params", ",", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "\n", "self", ".", "update_ops", "=", "[", "]", "\n", "for", "e1_v", ",", "e2_v", "in", "zip", "(", "e1_params", ",", "e2_params", ")", ":", "\n", "            ", "op", "=", "e2_v", ".", "assign", "(", "e1_v", ")", "\n", "self", ".", "update_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.IDQN.ModelParametersCopier.make": [[371, 378], ["sess.run"], "methods", ["None"], ["", "", "def", "make", "(", "self", ",", "sess", ")", ":", "\n", "        ", "\"\"\"\n        Makes copy.\n        Args:\n            sess: Tensorflow session instance\n        \"\"\"", "\n", "sess", ".", "run", "(", "self", ".", "update_ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.Estimator.__init__": [[12, 73], ["tensorflow.summary.merge", "enumerate", "numpy.ones", "numpy.zeros", "numpy.zeros", "enumerate", "tensorflow.variable_scope", "cDQN.Estimator._build_model", "tensorflow.gradients", "os.path.join", "tensorflow.summary.FileWriter", "neighbor_ids.append", "cDQN.Estimator.neighbors_list.append", "enumerate", "tensorflow.trainable_variables", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "os.path.exists", "os.makedirs", "env.target_grids.index", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "env.nodes[].get_node_index", "neighbor.get_node_index", "env.target_grids.index", "tensorflow.norm"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.Estimator._build_model", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index"], ["def", "__init__", "(", "self", ",", "\n", "sess", ",", "\n", "action_dim", ",", "\n", "state_dim", ",", "\n", "env", ",", "\n", "scope", "=", "\"estimator\"", ",", "\n", "summaries_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "n_valid_grid", "=", "env", ".", "n_valid_grids", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "state_dim", "=", "state_dim", "\n", "self", ".", "M", "=", "env", ".", "M", "\n", "self", ".", "N", "=", "env", ".", "N", "\n", "self", ".", "scope", "=", "scope", "\n", "self", ".", "T", "=", "144", "\n", "self", ".", "env", "=", "env", "\n", "\n", "# Writes Tensorboard summaries to disk", "\n", "self", ".", "summary_writer", "=", "None", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "# Build the graph", "\n", "            ", "self", ".", "_build_model", "(", ")", "\n", "\n", "self", ".", "loss_gradients", "=", "tf", ".", "gradients", "(", "self", ".", "loss", ",", "tf", ".", "trainable_variables", "(", "scope", "=", "scope", ")", ")", "\n", "# tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self.scope))", "\n", "# Summaries for Tensorboard", "\n", "", "self", ".", "summaries", "=", "tf", ".", "summary", ".", "merge", "(", "[", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss\"", ",", "self", ".", "loss", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"value_output\"", ",", "tf", ".", "reduce_mean", "(", "self", ".", "value_output", ")", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"gradient_norm_policy\"", ",", "tf", ".", "reduce_sum", "(", "[", "tf", ".", "norm", "(", "item", ")", "for", "item", "in", "self", ".", "loss_gradients", "]", ")", ")", "\n", "]", ")", "\n", "\n", "if", "summaries_dir", ":", "\n", "            ", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "summaries_dir", ",", "\"summaries_{}\"", ".", "format", "(", "scope", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "summary_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "summary_dir", ")", "\n", "", "self", ".", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "summary_dir", ")", "\n", "\n", "", "self", ".", "neighbors_list", "=", "[", "]", "\n", "for", "idx", ",", "node_id", "in", "enumerate", "(", "env", ".", "target_grids", ")", ":", "\n", "            ", "neighbor_indices", "=", "env", ".", "nodes", "[", "node_id", "]", ".", "layers_neighbors_id", "[", "0", "]", "# index in env.nodes", "\n", "neighbor_ids", "=", "[", "env", ".", "target_grids", ".", "index", "(", "env", ".", "nodes", "[", "item", "]", ".", "get_node_index", "(", ")", ")", "for", "item", "in", "neighbor_indices", "]", "\n", "neighbor_ids", ".", "append", "(", "idx", ")", "\n", "# index in env.target_grids == index in state", "\n", "self", ".", "neighbors_list", ".", "append", "(", "neighbor_ids", ")", "\n", "\n", "# compute valid action mask.", "\n", "", "self", ".", "valid_action_mask", "=", "np", ".", "ones", "(", "(", "self", ".", "n_valid_grid", ",", "self", ".", "action_dim", ")", ")", "\n", "self", ".", "valid_neighbor_node_id", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_valid_grid", ",", "self", ".", "action_dim", ")", ")", "# id in env.nodes", "\n", "self", ".", "valid_neighbor_grid_id", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_valid_grid", ",", "self", ".", "action_dim", ")", ")", "# id in env.target_grids", "\n", "for", "grid_idx", ",", "grid_id", "in", "enumerate", "(", "env", ".", "target_grids", ")", ":", "\n", "            ", "for", "neighbor_idx", ",", "neighbor", "in", "enumerate", "(", "self", ".", "env", ".", "nodes", "[", "grid_id", "]", ".", "neighbors", ")", ":", "\n", "                ", "if", "neighbor", "is", "None", ":", "\n", "                    ", "self", ".", "valid_action_mask", "[", "grid_idx", ",", "neighbor_idx", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "node_index", "=", "neighbor", ".", "get_node_index", "(", ")", "# node_index in env.nodes", "\n", "self", ".", "valid_neighbor_node_id", "[", "grid_idx", ",", "neighbor_idx", "]", "=", "node_index", "\n", "self", ".", "valid_neighbor_grid_id", "[", "grid_idx", ",", "neighbor_idx", "]", "=", "env", ".", "target_grids", ".", "index", "(", "node_index", ")", "\n", "\n", "", "", "self", ".", "valid_neighbor_node_id", "[", "grid_idx", ",", "-", "1", "]", "=", "grid_id", "\n", "self", ".", "valid_neighbor_grid_id", "[", "grid_idx", ",", "-", "1", "]", "=", "grid_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.Estimator._build_model": [[74, 96], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "alg_utility.fc", "alg_utility.fc", "alg_utility.fc", "alg_utility.fc", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.squared_difference", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.fc", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.fc", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.fc", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.fc"], ["", "", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "trainable", "=", "True", "\n", "self", ".", "state", "=", "X", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "self", ".", "state_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"X\"", ")", "\n", "\n", "# The TD target value", "\n", "self", ".", "y_pl", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"y\"", ")", "\n", "\n", "self", ".", "loss_lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "None", ",", "\"learning_rate\"", ")", "\n", "\n", "# 3 layers feed forward network.", "\n", "l1", "=", "fc", "(", "X", ",", "\"l1\"", ",", "128", ",", "act", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "l2", "=", "fc", "(", "l1", ",", "\"l2\"", ",", "64", ",", "act", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "l3", "=", "fc", "(", "l2", ",", "\"l3\"", ",", "32", ",", "act", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "# l1 = tf.layers.dense(X, 1024, tf.nn.sigmoid, trainable=trainable)", "\n", "# l2 = tf.layers.dense(l1, 512, tf.nn.sigmoid, trainable=trainable)", "\n", "# l3 = tf.layers.dense(l2, 32, tf.nn.sigmoid, trainable=trainable)", "\n", "self", ".", "value_output", "=", "fc", "(", "l3", ",", "\"value_output\"", ",", "1", ",", "act", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "# self.losses = tf.square(self.y_pl - self.value_output)", "\n", "self", ".", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "squared_difference", "(", "self", ".", "y_pl", ",", "self", ".", "value_output", ")", ")", "\n", "\n", "self", ".", "train_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "loss_lr", ")", ".", "minimize", "(", "self", ".", "loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.Estimator.predict": [[98, 102], ["cDQN.Estimator.sess.run"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "s", ")", ":", "\n", "        ", "value_output", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "value_output", ",", "{", "self", ".", "state", ":", "s", "}", ")", "\n", "\n", "return", "value_output", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.Estimator.action": [[103, 152], ["cDQN.Estimator.sess.run().flatten", "numpy.argmax", "enumerate", "numpy.zeros", "numpy.random.multinomial", "enumerate", "numpy.stack", "cDQN.Estimator.sess.run", "numpy.sum", "valid_prob.append", "numpy.argmax", "numpy.count_nonzero", "numpy.zeros_like", "valid_prob.append", "int", "int", "numpy.sum", "float", "int", "action_tuple.append"], "methods", ["None"], ["", "def", "action", "(", "self", ",", "s", ",", "context", ",", "epsilon", ")", ":", "\n", "        ", "\"\"\" Compute current action for all grids give states\n\n        :param s: 504 x stat_dim,\n        :return:\n        \"\"\"", "\n", "\n", "# value of each grid at next time step, dispatched according to this value.", "\n", "value_output", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "value_output", ",", "{", "self", ".", "state", ":", "s", "}", ")", ".", "flatten", "(", ")", "\n", "action_tuple", "=", "[", "]", "\n", "valid_prob", "=", "[", "]", "\n", "\n", "grid_ids", "=", "np", ".", "argmax", "(", "s", "[", ":", ",", "-", "self", ".", "n_valid_grid", ":", "]", ",", "axis", "=", "1", ")", "\n", "\n", "for", "idx", ",", "grid_valid_idx", "in", "enumerate", "(", "grid_ids", ")", ":", "\n", "            ", "valid_qvalues", "=", "value_output", "[", "self", ".", "neighbors_list", "[", "grid_valid_idx", "]", "]", "\n", "temp_qvalue", "=", "np", ".", "zeros", "(", "self", ".", "action_dim", ")", "\n", "\n", "if", "np", ".", "sum", "(", "valid_qvalues", ")", "==", "0", ":", "\n", "# all value equals to 0. this could explores conflicts action.", "\n", "                ", "temp_qvalue", "[", "self", ".", "valid_action_mask", "[", "grid_valid_idx", "]", ">", "0", "]", "=", "1.", "/", "np", ".", "sum", "(", "\n", "self", ".", "valid_action_mask", "[", "grid_valid_idx", "]", ")", "\n", "action_prob", "=", "temp_qvalue", "\n", "valid_prob", ".", "append", "(", "action_prob", ")", "\n", "", "else", ":", "\n", "\n", "                ", "temp_qvalue", "[", "self", ".", "valid_action_mask", "[", "grid_valid_idx", "]", ">", "0", "]", "=", "valid_qvalues", "\n", "temp_qvalue", "[", "temp_qvalue", "<", "temp_qvalue", "[", "-", "1", "]", "]", "=", "0", "\n", "\n", "best_action", "=", "np", ".", "argmax", "(", "temp_qvalue", ")", "\n", "num_valid_action", "=", "np", ".", "count_nonzero", "(", "temp_qvalue", ")", "\n", "action_prob", "=", "np", ".", "zeros_like", "(", "temp_qvalue", ")", "\n", "action_prob", "[", "temp_qvalue", ">", "0", "]", "=", "epsilon", "/", "float", "(", "num_valid_action", ")", "\n", "action_prob", "[", "best_action", "]", "+=", "1", "-", "epsilon", "\n", "valid_prob", ".", "append", "(", "action_prob", ")", "\n", "\n", "", "if", "int", "(", "context", "[", "idx", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "curr_action_indices", "=", "np", ".", "random", ".", "multinomial", "(", "int", "(", "context", "[", "idx", "]", ")", ",", "\n", "action_prob", ")", "\n", "\n", "start_node_id", "=", "self", ".", "env", ".", "target_grids", "[", "grid_valid_idx", "]", "\n", "for", "curr_action_idx", ",", "num_driver", "in", "enumerate", "(", "curr_action_indices", ")", ":", "\n", "                ", "if", "num_driver", ">", "0", ":", "\n", "                    ", "end_node_id", "=", "int", "(", "self", ".", "valid_neighbor_node_id", "[", "grid_valid_idx", ",", "curr_action_idx", "]", ")", "\n", "if", "end_node_id", "!=", "start_node_id", ":", "\n", "                        ", "action_tuple", ".", "append", "(", "(", "start_node_id", ",", "end_node_id", ",", "num_driver", ")", ")", "\n", "\n", "", "", "", "", "return", "action_tuple", ",", "np", ".", "stack", "(", "valid_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.Estimator.compute_targets": [[153, 166], ["node_reward.flatten.flatten.flatten", "cDQN.Estimator.sess.run().flatten", "numpy.arange", "numpy.array().reshape", "numpy.argmax", "targets.append", "cDQN.Estimator.sess.run", "numpy.array"], "methods", ["None"], ["", "def", "compute_targets", "(", "self", ",", "valid_prob", ",", "next_state", ",", "node_reward", ",", "gamma", ")", ":", "\n", "        ", "targets", "=", "[", "]", "\n", "node_reward", "=", "node_reward", ".", "flatten", "(", ")", "\n", "qvalue_next", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "value_output", ",", "{", "self", ".", "state", ":", "next_state", "}", ")", ".", "flatten", "(", ")", "# qvalue of next state", "\n", "\n", "for", "idx", "in", "np", ".", "arange", "(", "self", ".", "n_valid_grid", ")", ":", "\n", "            ", "grid_prob", "=", "valid_prob", "[", "idx", "]", "[", "self", ".", "valid_action_mask", "[", "idx", "]", ">", "0", "]", "\n", "neighbor_grid_ids", "=", "self", ".", "neighbors_list", "[", "idx", "]", "\n", "best_grid", "=", "np", ".", "argmax", "(", "grid_prob", ")", "\n", "curr_grid_target", "=", "node_reward", "[", "neighbor_grid_ids", "]", "[", "best_grid", "]", "+", "gamma", "*", "qvalue_next", "[", "neighbor_grid_ids", "]", "[", "best_grid", "]", "\n", "targets", ".", "append", "(", "curr_grid_target", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "targets", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.Estimator.initialization": [[167, 172], ["sess.run"], "methods", ["None"], ["", "def", "initialization", "(", "self", ",", "s", ",", "y", ",", "learning_rate", ")", ":", "\n", "        ", "sess", "=", "self", ".", "sess", "\n", "feed_dict", "=", "{", "self", ".", "state", ":", "s", ",", "self", ".", "y_pl", ":", "y", ",", "self", ".", "loss_lr", ":", "learning_rate", "}", "\n", "_", ",", "loss", "=", "sess", ".", "run", "(", "[", "self", ".", "train_op", ",", "self", ".", "loss", "]", ",", "feed_dict", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.Estimator.update": [[173, 193], ["sess.run", "cDQN.Estimator.summary_writer.add_summary", "cDQN.Estimator.summary_writer.flush"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "s", ",", "y", ",", "learning_rate", ",", "global_step", ")", ":", "\n", "        ", "\"\"\"\n        Updates the estimator towards the given targets.\n\n        Args:\n          s: State input of shape [batch_size, state_dim]\n          a: Chosen actions of shape [batch_size, action_dim], 0, 1 mask\n          y: Targets of shape [batch_size]\n\n        Returns:\n          The calculated loss on the batch.\n        \"\"\"", "\n", "sess", "=", "self", ".", "sess", "\n", "feed_dict", "=", "{", "self", ".", "state", ":", "s", ",", "self", ".", "y_pl", ":", "y", ",", "self", ".", "loss_lr", ":", "learning_rate", "}", "\n", "summaries", ",", "_", ",", "loss", "=", "sess", ".", "run", "(", "[", "self", ".", "summaries", ",", "self", ".", "train_op", ",", "self", ".", "loss", "]", ",", "feed_dict", ")", "\n", "\n", "if", "self", ".", "summary_writer", ":", "\n", "            ", "self", ".", "summary_writer", ".", "add_summary", "(", "summaries", ",", "global_step", ")", "\n", "self", ".", "summary_writer", ".", "flush", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.Estimator._build_cnn_model": [[194, 218], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.contrib.layers.conv2d", "tensorflow.contrib.layers.conv2d", "tensorflow.contrib.layers.conv2d", "tensorflow.contrib.layers.flatten", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.shape"], "methods", ["None"], ["", "def", "_build_cnn_model", "(", "self", ")", ":", "\n", "\n", "# states of grid id and time", "\n", "        ", "self", ".", "state_spacetime", "=", "Xst", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "self", ".", "n_valid_grid", "+", "self", ".", "T", "]", ",", "dtype", "=", "tf", ".", "uint8", ",", "name", "=", "\"Xst\"", ")", "\n", "\n", "# states of distribution", "\n", "self", ".", "state", "=", "X", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "self", ".", "M", ",", "self", ".", "N", ",", "4", "]", ",", "dtype", "=", "tf", ".", "uint8", ",", "name", "=", "\"X\"", ")", "\n", "\n", "# The TD target value", "\n", "self", ".", "y_pl", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"y\"", ")", "\n", "\n", "batch_size", "=", "tf", ".", "shape", "(", "self", ".", "state", ")", "[", "0", "]", "\n", "\n", "conv1", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d", "(", "\n", "X", ",", "32", ",", "8", ",", "4", ",", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "conv2", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d", "(", "\n", "conv1", ",", "64", ",", "4", ",", "2", ",", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "conv3", "=", "tf", ".", "contrib", ".", "layers", ".", "conv2d", "(", "\n", "conv2", ",", "64", ",", "3", ",", "1", ",", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "# Fully connected layers", "\n", "flattened", "=", "tf", ".", "contrib", ".", "layers", ".", "flatten", "(", "conv3", ")", "\n", "fc1", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "flattened", ",", "512", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "fc1", ",", "self", ".", "action_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.stateProcessor.__init__": [[225, 235], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "target_id_states", ",", "\n", "target_grids", ",", "\n", "n_valid_grids", ")", ":", "\n", "        ", "self", ".", "target_id_states", "=", "target_id_states", "# valid grid index for driver and order distribution.", "\n", "self", ".", "target_grids", "=", "target_grids", "# valid grid id [22, 24, ...]", "\n", "self", ".", "n_valid_grids", "=", "n_valid_grids", "\n", "self", ".", "T", "=", "144", "\n", "self", ".", "action_dim", "=", "7", "\n", "self", ".", "extend_state", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.stateProcessor.utility_conver_states": [[236, 240], ["numpy.array().flatten", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "utility_conver_states", "(", "self", ",", "curr_state", ")", ":", "\n", "        ", "curr_s", "=", "np", ".", "array", "(", "curr_state", ")", ".", "flatten", "(", ")", "\n", "curr_s_new", "=", "[", "curr_s", "[", "idx", "]", "for", "idx", "in", "self", ".", "target_id_states", "]", "\n", "return", "np", ".", "array", "(", "curr_s_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.stateProcessor.utility_normalize_states": [[241, 249], ["numpy.max", "numpy.max", "numpy.zeros_like"], "methods", ["None"], ["", "def", "utility_normalize_states", "(", "self", ",", "curr_s", ")", ":", "\n", "        ", "max_driver_num", "=", "np", ".", "max", "(", "curr_s", "[", ":", "self", ".", "n_valid_grids", "]", ")", "\n", "max_order_num", "=", "np", ".", "max", "(", "curr_s", "[", "self", ".", "n_valid_grids", ":", "]", ")", "\n", "\n", "curr_s_new", "=", "np", ".", "zeros_like", "(", "curr_s", ")", "\n", "curr_s_new", "[", ":", "self", ".", "n_valid_grids", "]", "=", "curr_s", "[", ":", "self", ".", "n_valid_grids", "]", "/", "max_driver_num", "\n", "curr_s_new", "[", "self", ".", "n_valid_grids", ":", "]", "=", "curr_s", "[", "self", ".", "n_valid_grids", ":", "]", "/", "max_order_num", "\n", "return", "curr_s_new", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.stateProcessor.utility_conver_reward": [[250, 253], ["numpy.array"], "methods", ["None"], ["", "def", "utility_conver_reward", "(", "self", ",", "reward_node", ")", ":", "\n", "        ", "reward_node_new", "=", "[", "reward_node", "[", "idx", "]", "for", "idx", "in", "self", ".", "target_grids", "]", "\n", "return", "np", ".", "array", "(", "reward_node_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.stateProcessor.reward_wrapper": [[254, 261], ["cDQN.stateProcessor.utility_conver_reward"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.utility_conver_reward"], ["", "def", "reward_wrapper", "(", "self", ",", "info", ",", "curr_s", ")", ":", "\n", "        ", "info_reward", "=", "info", "[", "0", "]", "\n", "valid_nodes_reward", "=", "self", ".", "utility_conver_reward", "(", "info_reward", "[", "0", "]", ")", "\n", "devide", "=", "curr_s", "[", ":", "self", ".", "n_valid_grids", "]", "\n", "devide", "[", "devide", "==", "0", "]", "=", "1", "\n", "valid_nodes_reward", "=", "valid_nodes_reward", "/", "devide", "\n", "return", "valid_nodes_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.stateProcessor.compute_context": [[262, 267], ["info.flatten"], "methods", ["None"], ["", "def", "compute_context", "(", "self", ",", "info", ")", ":", "\n", "# \u8ba1\u7b97context", "\n", "        ", "context", "=", "info", ".", "flatten", "(", ")", "\n", "context", "=", "[", "context", "[", "idx", "]", "for", "idx", "in", "self", ".", "target_grids", "]", "\n", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.stateProcessor.to_grid_states": [[268, 283], ["numpy.zeros", "numpy.eye", "numpy.zeros", "numpy.stack", "numpy.stack", "numpy.array"], "methods", ["None"], ["", "def", "to_grid_states", "(", "self", ",", "curr_s", ",", "curr_city_time", ")", ":", "\n", "\n", "        ", "T", "=", "self", ".", "T", "\n", "\n", "# curr_s = self.utility_conver_states(curr_state)", "\n", "time_one_hot", "=", "np", ".", "zeros", "(", "(", "T", ")", ")", "\n", "time_one_hot", "[", "curr_city_time", "%", "T", "]", "=", "1", "\n", "onehot_grid_id", "=", "np", ".", "eye", "(", "self", ".", "n_valid_grids", ")", "\n", "\n", "s_grid", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_valid_grids", ",", "self", ".", "n_valid_grids", "*", "3", "+", "T", ")", ")", "\n", "s_grid", "[", ":", ",", ":", "self", ".", "n_valid_grids", "*", "2", "]", "=", "np", ".", "stack", "(", "[", "curr_s", "]", "*", "self", ".", "n_valid_grids", ")", "\n", "s_grid", "[", ":", ",", "self", ".", "n_valid_grids", "*", "2", ":", "self", ".", "n_valid_grids", "*", "2", "+", "T", "]", "=", "np", ".", "stack", "(", "[", "time_one_hot", "]", "*", "self", ".", "n_valid_grids", ")", "\n", "s_grid", "[", ":", ",", "-", "self", ".", "n_valid_grids", ":", "]", "=", "onehot_grid_id", "\n", "\n", "return", "np", ".", "array", "(", "s_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.stateProcessor.to_grid_rewards": [[284, 286], ["numpy.array().reshape", "numpy.array"], "methods", ["None"], ["", "def", "to_grid_rewards", "(", "self", ",", "node_reward", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "node_reward", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.stateProcessor.to_action_mat": [[287, 291], ["numpy.zeros", "len", "numpy.arange"], "methods", ["None"], ["", "def", "to_action_mat", "(", "self", ",", "action_neighbor_idx", ")", ":", "\n", "        ", "action_mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "action_neighbor_idx", ")", ",", "self", ".", "action_dim", ")", ")", "\n", "action_mat", "[", "np", ".", "arange", "(", "action_mat", ".", "shape", "[", "0", "]", ")", ",", "action_neighbor_idx", "]", "=", "1", "\n", "return", "action_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.ReplayMemory.__init__": [[297, 307], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "memory_size", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "states", "=", "[", "]", "\n", "self", ".", "next_states", "=", "[", "]", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "memory_size", "=", "memory_size", "\n", "self", ".", "current", "=", "0", "\n", "self", ".", "curr_lens", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.ReplayMemory.add": [[308, 330], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "random.randint"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "s", ",", "a", ",", "r", ",", "next_s", ")", ":", "\n", "        ", "if", "self", ".", "curr_lens", "==", "0", ":", "\n", "            ", "self", ".", "states", "=", "s", "\n", "self", ".", "actions", "=", "a", "\n", "self", ".", "rewards", "=", "r", "\n", "self", ".", "next_states", "=", "next_s", "\n", "self", ".", "curr_lens", "=", "self", ".", "states", ".", "shape", "[", "0", "]", "\n", "\n", "", "elif", "self", ".", "curr_lens", "<=", "self", ".", "memory_size", ":", "\n", "            ", "self", ".", "states", "=", "np", ".", "concatenate", "(", "(", "self", ".", "states", ",", "s", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "next_states", "=", "np", ".", "concatenate", "(", "(", "self", ".", "next_states", ",", "next_s", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "actions", "=", "np", ".", "concatenate", "(", "(", "self", ".", "actions", ",", "a", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "rewards", "=", "np", ".", "concatenate", "(", "(", "self", ".", "rewards", ",", "r", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "curr_lens", "=", "self", ".", "states", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "new_sample_lens", "=", "s", ".", "shape", "[", "0", "]", "\n", "index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "curr_lens", "-", "new_sample_lens", ")", "\n", "\n", "self", ".", "states", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "s", "\n", "self", ".", "actions", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "a", "\n", "self", ".", "rewards", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "r", "\n", "self", ".", "next_states", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "next_s", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.ReplayMemory.sample": [[331, 341], ["random.sample", "range"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.DiagGaussianPd.sample"], ["", "", "def", "sample", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "curr_lens", "<=", "self", ".", "batch_size", ":", "\n", "            ", "return", "[", "self", ".", "states", ",", "self", ".", "actions", ",", "self", ".", "rewards", ",", "self", ".", "next_states", "]", "\n", "", "indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "self", ".", "curr_lens", ")", ",", "self", ".", "batch_size", ")", "\n", "batch_s", "=", "self", ".", "states", "[", "indices", "]", "\n", "batch_a", "=", "self", ".", "actions", "[", "indices", "]", "\n", "batch_r", "=", "self", ".", "rewards", "[", "indices", "]", "\n", "batch_next_s", "=", "self", ".", "next_states", "[", "indices", "]", "\n", "return", "[", "batch_s", ",", "batch_a", ",", "batch_r", ",", "batch_next_s", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.ReplayMemory.reset": [[342, 348], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "states", "=", "[", "]", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "next_states", "=", "[", "]", "\n", "self", ".", "curr_lens", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.ModelParametersCopier.__init__": [[356, 372], ["sorted", "sorted", "zip", "e2_v.assign", "cDQN.ModelParametersCopier.update_ops.append", "tensorflow.trainable_variables", "t.name.startswith", "tensorflow.trainable_variables", "t.name.startswith"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "estimator1", ",", "estimator2", ")", ":", "\n", "        ", "\"\"\"\n        Defines copy-work operation graph.\n        Args:\n          estimator1: Estimator to copy the paramters from\n          estimator2: Estimator to copy the parameters to\n        \"\"\"", "\n", "e1_params", "=", "[", "t", "for", "t", "in", "tf", ".", "trainable_variables", "(", ")", "if", "t", ".", "name", ".", "startswith", "(", "estimator1", ".", "scope", ")", "]", "\n", "e1_params", "=", "sorted", "(", "e1_params", ",", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "e2_params", "=", "[", "t", "for", "t", "in", "tf", ".", "trainable_variables", "(", ")", "if", "t", ".", "name", ".", "startswith", "(", "estimator2", ".", "scope", ")", "]", "\n", "e2_params", "=", "sorted", "(", "e2_params", ",", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "\n", "self", ".", "update_ops", "=", "[", "]", "\n", "for", "e1_v", ",", "e2_v", "in", "zip", "(", "e1_params", ",", "e2_params", ")", ":", "\n", "            ", "op", "=", "e2_v", ".", "assign", "(", "e1_v", ")", "\n", "self", ".", "update_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cDQN.ModelParametersCopier.make": [[373, 380], ["sess.run"], "methods", ["None"], ["", "", "def", "make", "(", "self", ",", "sess", ")", ":", "\n", "        ", "\"\"\"\n        Makes copy.\n        Args:\n            sess: Tensorflow session instance\n        \"\"\"", "\n", "sess", ".", "run", "(", "self", ".", "update_ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.Estimator.__init__": [[12, 89], ["tensorflow.summary.merge", "tensorflow.summary.merge", "enumerate", "numpy.ones", "numpy.zeros", "numpy.zeros", "enumerate", "tensorflow.variable_scope", "cA2C.Estimator._build_value_model", "os.path.join", "tensorflow.summary.FileWriter", "neighbor_ids.append", "cA2C.Estimator.neighbors_list.append", "enumerate", "tensorflow.variable_scope", "cA2C.Estimator._build_mlp_policy", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "os.path.exists", "os.makedirs", "env.target_grids.index", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "env.nodes[].get_node_index", "neighbor.get_node_index", "env.target_grids.index"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.Estimator._build_value_model", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.Estimator._build_mlp_policy", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index", "home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.objects.Node.get_node_index"], ["def", "__init__", "(", "self", ",", "\n", "sess", ",", "\n", "action_dim", ",", "\n", "state_dim", ",", "\n", "env", ",", "\n", "scope", "=", "\"estimator\"", ",", "\n", "summaries_dir", "=", "None", ")", ":", "\n", "        ", "self", ".", "sess", "=", "sess", "\n", "self", ".", "n_valid_grid", "=", "env", ".", "n_valid_grids", "\n", "self", ".", "action_dim", "=", "action_dim", "\n", "self", ".", "state_dim", "=", "state_dim", "\n", "self", ".", "M", "=", "env", ".", "M", "\n", "self", ".", "N", "=", "env", ".", "N", "\n", "self", ".", "scope", "=", "scope", "\n", "self", ".", "T", "=", "144", "\n", "self", ".", "env", "=", "env", "\n", "\n", "# Writes Tensorboard summaries to disk", "\n", "self", ".", "summary_writer", "=", "None", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "\n", "# Build the value function graph", "\n", "# with tf.variable_scope(\"value\"):", "\n", "            ", "value_loss", "=", "self", ".", "_build_value_model", "(", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"policy\"", ")", ":", "\n", "                ", "actor_loss", ",", "entropy", "=", "self", ".", "_build_mlp_policy", "(", ")", "\n", "\n", "", "self", ".", "loss", "=", "actor_loss", "+", ".5", "*", "value_loss", "-", "10", "*", "entropy", "\n", "\n", "\n", "# self.loss_gradients = tf.gradients(self.value_loss, tf.trainable_variables(scope=scope))", "\n", "# tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope=self.scope))", "\n", "\n", "# Summaries for Tensorboard", "\n", "", "self", ".", "summaries", "=", "tf", ".", "summary", ".", "merge", "(", "[", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"value_loss\"", ",", "self", ".", "value_loss", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"value_output\"", ",", "tf", ".", "reduce_mean", "(", "self", ".", "value_output", ")", ")", ",", "\n", "# tf.summary.scalar(\"gradient_norm_policy\", tf.reduce_sum([tf.norm(item) for item in self.loss_gradients]))", "\n", "]", ")", "\n", "\n", "self", ".", "policy_summaries", "=", "tf", ".", "summary", ".", "merge", "(", "[", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"policy_loss\"", ",", "self", ".", "policy_loss", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"adv\"", ",", "tf", ".", "reduce_mean", "(", "self", ".", "tfadv", ")", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"entropy\"", ",", "self", ".", "entropy", ")", ",", "\n", "# tf.summary.scalar(\"gradient_norm_policy\", tf.reduce_sum([tf.norm(item) for item in self.loss_gradients]))", "\n", "]", ")", "\n", "\n", "if", "summaries_dir", ":", "\n", "            ", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "summaries_dir", ",", "\"summaries_{}\"", ".", "format", "(", "scope", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "summary_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "summary_dir", ")", "\n", "", "self", ".", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "summary_dir", ")", "\n", "\n", "", "self", ".", "neighbors_list", "=", "[", "]", "\n", "for", "idx", ",", "node_id", "in", "enumerate", "(", "env", ".", "target_grids", ")", ":", "\n", "            ", "neighbor_indices", "=", "env", ".", "nodes", "[", "node_id", "]", ".", "layers_neighbors_id", "[", "0", "]", "# index in env.nodes", "\n", "neighbor_ids", "=", "[", "env", ".", "target_grids", ".", "index", "(", "env", ".", "nodes", "[", "item", "]", ".", "get_node_index", "(", ")", ")", "for", "item", "in", "neighbor_indices", "]", "\n", "neighbor_ids", ".", "append", "(", "idx", ")", "\n", "# index in env.target_grids == index in state", "\n", "self", ".", "neighbors_list", ".", "append", "(", "neighbor_ids", ")", "\n", "\n", "# compute valid action mask.", "\n", "", "self", ".", "valid_action_mask", "=", "np", ".", "ones", "(", "(", "self", ".", "n_valid_grid", ",", "self", ".", "action_dim", ")", ")", "\n", "self", ".", "valid_neighbor_node_id", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_valid_grid", ",", "self", ".", "action_dim", ")", ")", "# id in env.nodes", "\n", "self", ".", "valid_neighbor_grid_id", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_valid_grid", ",", "self", ".", "action_dim", ")", ")", "# id in env.target_grids", "\n", "for", "grid_idx", ",", "grid_id", "in", "enumerate", "(", "env", ".", "target_grids", ")", ":", "\n", "            ", "for", "neighbor_idx", ",", "neighbor", "in", "enumerate", "(", "self", ".", "env", ".", "nodes", "[", "grid_id", "]", ".", "neighbors", ")", ":", "\n", "                ", "if", "neighbor", "is", "None", ":", "\n", "                    ", "self", ".", "valid_action_mask", "[", "grid_idx", ",", "neighbor_idx", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "node_index", "=", "neighbor", ".", "get_node_index", "(", ")", "# node_index in env.nodes", "\n", "self", ".", "valid_neighbor_node_id", "[", "grid_idx", ",", "neighbor_idx", "]", "=", "node_index", "\n", "self", ".", "valid_neighbor_grid_id", "[", "grid_idx", ",", "neighbor_idx", "]", "=", "env", ".", "target_grids", ".", "index", "(", "node_index", ")", "\n", "\n", "", "", "self", ".", "valid_neighbor_node_id", "[", "grid_idx", ",", "-", "1", "]", "=", "grid_id", "\n", "self", ".", "valid_neighbor_grid_id", "[", "grid_idx", ",", "-", "1", "]", "=", "grid_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.Estimator._build_value_model": [[90, 114], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "alg_utility.fc", "alg_utility.fc", "alg_utility.fc", "alg_utility.fc", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.squared_difference", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.fc", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.fc", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.fc", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.fc"], ["", "", "def", "_build_value_model", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "state", "=", "X", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "self", ".", "state_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"X\"", ")", "\n", "\n", "# The TD target value", "\n", "self", ".", "y_pl", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"y\"", ")", "\n", "\n", "self", ".", "loss_lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "None", ",", "\"learning_rate\"", ")", "\n", "\n", "# 3 layers feed forward network.", "\n", "l1", "=", "fc", "(", "X", ",", "\"l1\"", ",", "128", ",", "act", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "l2", "=", "fc", "(", "l1", ",", "\"l2\"", ",", "64", ",", "act", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "l3", "=", "fc", "(", "l2", ",", "\"l3\"", ",", "32", ",", "act", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "# l1 = tf.layers.dense(X, 1024, tf.nn.sigmoid, trainable=trainable)", "\n", "# l2 = tf.layers.dense(l1, 512, tf.nn.sigmoid, trainable=trainable)", "\n", "# l3 = tf.layers.dense(l2, 32, tf.nn.sigmoid, trainable=trainable)", "\n", "self", ".", "value_output", "=", "fc", "(", "l3", ",", "\"value_output\"", ",", "1", ",", "act", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "# self.losses = tf.square(self.y_pl - self.value_output)", "\n", "self", ".", "value_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "squared_difference", "(", "self", ".", "y_pl", ",", "self", ".", "value_output", ")", ")", "\n", "\n", "self", ".", "value_train_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "loss_lr", ")", ".", "minimize", "(", "self", ".", "value_loss", ")", "\n", "\n", "return", "self", ".", "value_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.Estimator._build_mlp_policy": [[115, 141], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "alg_utility.fc", "alg_utility.fc", "alg_utility.fc", "tensorflow.nn.softmax", "tensorflow.nn.log_softmax", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer().minimize", "alg_utility.fc", "tensorflow.log", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.fc", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.fc", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.fc", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.fc"], ["", "def", "_build_mlp_policy", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "policy_state", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "self", ".", "state_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"P\"", ")", "\n", "self", ".", "ACTION", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "self", ".", "action_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"action\"", ")", "\n", "self", ".", "tfadv", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "'advantage'", ")", "\n", "self", ".", "neighbor_mask", "=", "tf", ".", "placeholder", "(", "shape", "=", "[", "None", ",", "self", ".", "action_dim", "]", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "\"neighbormask\"", ")", "\n", "# this mask filter invalid actions and those action smaller than current grid value.", "\n", "\n", "l1", "=", "fc", "(", "self", ".", "policy_state", ",", "\"l1\"", ",", "128", ",", "act", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "l2", "=", "fc", "(", "l1", ",", "\"l2\"", ",", "64", ",", "act", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "l3", "=", "fc", "(", "l2", ",", "\"l3\"", ",", "32", ",", "act", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "self", ".", "logits", "=", "logits", "=", "fc", "(", "l3", ",", "\"logits\"", ",", "self", ".", "action_dim", ",", "act", "=", "tf", ".", "nn", ".", "relu", ")", "+", "1", "# avoid valid_logits are all zeros", "\n", "self", ".", "valid_logits", "=", "logits", "*", "self", ".", "neighbor_mask", "\n", "\n", "self", ".", "softmaxprob", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "log", "(", "self", ".", "valid_logits", "+", "1e-8", ")", ")", "\n", "self", ".", "logsoftmaxprob", "=", "tf", ".", "nn", ".", "log_softmax", "(", "self", ".", "softmaxprob", ")", "\n", "\n", "self", ".", "neglogprob", "=", "-", "self", ".", "logsoftmaxprob", "*", "self", ".", "ACTION", "\n", "self", ".", "actor_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "self", ".", "neglogprob", "*", "self", ".", "tfadv", ",", "axis", "=", "1", ")", ")", "\n", "self", ".", "entropy", "=", "-", "tf", ".", "reduce_mean", "(", "self", ".", "softmaxprob", "*", "self", ".", "logsoftmaxprob", ")", "\n", "\n", "self", ".", "policy_loss", "=", "self", ".", "actor_loss", "-", "0.01", "*", "self", ".", "entropy", "\n", "\n", "self", ".", "policy_train_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "loss_lr", ")", ".", "minimize", "(", "self", ".", "policy_loss", ")", "\n", "return", "self", ".", "actor_loss", ",", "self", ".", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.Estimator.predict": [[142, 146], ["cA2C.Estimator.sess.run"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "s", ")", ":", "\n", "        ", "value_output", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "value_output", ",", "{", "self", ".", "state", ":", "s", "}", ")", "\n", "\n", "return", "value_output", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.Estimator.action": [[147, 221], ["cA2C.Estimator.sess.run().flatten", "numpy.argmax", "copy.deepcopy", "enumerate", "cA2C.Estimator.sess.run", "enumerate", "numpy.zeros", "valid_prob.append", "numpy.random.choice", "enumerate", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "cA2C.Estimator.sess.run", "numpy.sum", "int", "int", "numpy.where", "int", "numpy.zeros", "action_choosen_mat.append", "policy_state.append", "curr_state_value.append", "next_state_ids.append", "curr_neighbor_mask_policy.append", "numpy.sum", "action_tuple.append"], "methods", ["None"], ["", "def", "action", "(", "self", ",", "s", ",", "context", ",", "epsilon", ")", ":", "\n", "        ", "\"\"\" Compute current action for all grids give states\n\n        :param s: 504 x stat_dim,\n        :return:\n        \"\"\"", "\n", "\n", "value_output", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "value_output", ",", "{", "self", ".", "state", ":", "s", "}", ")", ".", "flatten", "(", ")", "\n", "action_tuple", "=", "[", "]", "\n", "valid_prob", "=", "[", "]", "\n", "\n", "# for training policy gradient.", "\n", "action_choosen_mat", "=", "[", "]", "\n", "policy_state", "=", "[", "]", "\n", "curr_state_value", "=", "[", "]", "\n", "next_state_ids", "=", "[", "]", "\n", "\n", "grid_ids", "=", "np", ".", "argmax", "(", "s", "[", ":", ",", "-", "self", ".", "n_valid_grid", ":", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# compute neighbor mask according to centralized value", "\n", "curr_neighbor_mask", "=", "deepcopy", "(", "self", ".", "valid_action_mask", ")", "\n", "for", "idx", ",", "grid_valid_idx", "in", "enumerate", "(", "grid_ids", ")", ":", "\n", "            ", "valid_qvalues", "=", "value_output", "[", "self", ".", "neighbors_list", "[", "grid_valid_idx", "]", "]", "# value of current and its nearby grids", "\n", "temp_qvalue", "=", "np", ".", "zeros", "(", "self", ".", "action_dim", ")", "\n", "temp_qvalue", "[", "curr_neighbor_mask", "[", "grid_valid_idx", "]", ">", "0", "]", "=", "valid_qvalues", "\n", "temp_qvalue", "[", "temp_qvalue", "<", "temp_qvalue", "[", "-", "1", "]", "]", "=", "0", "\n", "curr_neighbor_mask", "[", "grid_valid_idx", "]", "[", "np", ".", "where", "(", "temp_qvalue", "<", "temp_qvalue", "[", "-", "1", "]", ")", "]", "=", "0", "\n", "if", "np", ".", "sum", "(", "curr_neighbor_mask", "[", "grid_valid_idx", "]", ")", "==", "0", ":", "\n", "                ", "curr_neighbor_mask", "[", "grid_valid_idx", "]", "=", "self", ".", "valid_action_mask", "[", "grid_valid_idx", "]", "\n", "\n", "# compute policy probability.", "\n", "", "", "action_probs", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "softmaxprob", ",", "{", "self", ".", "policy_state", ":", "s", ",", "\n", "self", ".", "neighbor_mask", ":", "curr_neighbor_mask", "}", ")", "\n", "\n", "curr_neighbor_mask_policy", "=", "[", "]", "\n", "# sample action.", "\n", "for", "idx", ",", "grid_valid_idx", "in", "enumerate", "(", "grid_ids", ")", ":", "\n", "            ", "action_prob", "=", "action_probs", "[", "idx", "]", "\n", "\n", "# cast invalid action to zero, avlid numerical issue.", "\n", "action_prob", "[", "self", ".", "valid_action_mask", "[", "grid_valid_idx", "]", "==", "0", "]", "=", "0", "\n", "\n", "valid_prob", ".", "append", "(", "action_prob", ")", "# action probability for state value function", "\n", "if", "int", "(", "context", "[", "idx", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "curr_action_indices_temp", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "action_dim", ",", "int", "(", "context", "[", "idx", "]", ")", ",", "\n", "p", "=", "action_prob", "/", "np", ".", "sum", "(", "action_prob", ")", ")", "\n", "# num of drivers dispatched to nearby locations [2,3,2,3,1,3,3]", "\n", "# for numerically stable, avoid sum of action_prob > 1 with small value", "\n", "\n", "curr_action_indices", "=", "[", "0", "]", "*", "self", ".", "action_dim", "\n", "for", "kk", "in", "curr_action_indices_temp", ":", "\n", "                ", "curr_action_indices", "[", "kk", "]", "+=", "1", "\n", "\n", "", "start_node_id", "=", "self", ".", "env", ".", "target_grids", "[", "grid_valid_idx", "]", "\n", "for", "curr_action_idx", ",", "num_driver", "in", "enumerate", "(", "curr_action_indices", ")", ":", "\n", "                ", "if", "num_driver", ">", "0", ":", "\n", "                    ", "end_node_id", "=", "int", "(", "self", ".", "valid_neighbor_node_id", "[", "grid_valid_idx", ",", "curr_action_idx", "]", ")", "\n", "if", "end_node_id", "!=", "start_node_id", ":", "\n", "                        ", "action_tuple", ".", "append", "(", "(", "start_node_id", ",", "end_node_id", ",", "num_driver", ")", ")", "\n", "\n", "# book keeping for training", "\n", "", "temp_a", "=", "np", ".", "zeros", "(", "self", ".", "action_dim", ")", "\n", "temp_a", "[", "curr_action_idx", "]", "=", "1", "\n", "action_choosen_mat", ".", "append", "(", "temp_a", ")", "\n", "policy_state", ".", "append", "(", "s", "[", "idx", "]", ")", "\n", "curr_state_value", ".", "append", "(", "value_output", "[", "idx", "]", ")", "\n", "next_state_ids", ".", "append", "(", "self", ".", "valid_neighbor_grid_id", "[", "grid_valid_idx", ",", "curr_action_idx", "]", ")", "\n", "curr_neighbor_mask_policy", ".", "append", "(", "curr_neighbor_mask", "[", "idx", "]", ")", "\n", "\n", "", "", "", "return", "action_tuple", ",", "np", ".", "stack", "(", "valid_prob", ")", ",", "np", ".", "stack", "(", "policy_state", ")", ",", "np", ".", "stack", "(", "action_choosen_mat", ")", ",", "curr_state_value", ",", "np", ".", "stack", "(", "curr_neighbor_mask_policy", ")", ",", "next_state_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.Estimator.compute_advantage": [[222, 233], ["node_reward.flatten.flatten.flatten", "cA2C.Estimator.sess.run().flatten", "enumerate", "int", "advantage.append", "cA2C.Estimator.sess.run"], "methods", ["None"], ["", "def", "compute_advantage", "(", "self", ",", "curr_state_value", ",", "next_state_ids", ",", "next_state", ",", "node_reward", ",", "gamma", ")", ":", "\n", "        ", "\"\"\"for policy network\"\"\"", "\n", "advantage", "=", "[", "]", "\n", "node_reward", "=", "node_reward", ".", "flatten", "(", ")", "\n", "qvalue_next", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "value_output", ",", "{", "self", ".", "state", ":", "next_state", "}", ")", ".", "flatten", "(", ")", "\n", "\n", "for", "idx", ",", "next_state_id", "in", "enumerate", "(", "next_state_ids", ")", ":", "\n", "            ", "next_state_id", "=", "int", "(", "next_state_id", ")", "\n", "temp_adv", "=", "node_reward", "[", "next_state_id", "]", "+", "gamma", "*", "qvalue_next", "[", "next_state_id", "]", "-", "curr_state_value", "[", "idx", "]", "\n", "advantage", ".", "append", "(", "temp_adv", ")", "\n", "", "return", "advantage", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.Estimator.compute_targets": [[234, 247], ["node_reward.flatten.flatten.flatten", "cA2C.Estimator.sess.run().flatten", "numpy.arange", "numpy.array().reshape", "numpy.sum", "targets.append", "cA2C.Estimator.sess.run", "numpy.array"], "methods", ["None"], ["", "def", "compute_targets", "(", "self", ",", "valid_prob", ",", "next_state", ",", "node_reward", ",", "gamma", ")", ":", "\n", "        ", "targets", "=", "[", "]", "\n", "node_reward", "=", "node_reward", ".", "flatten", "(", ")", "\n", "qvalue_next", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "value_output", ",", "{", "self", ".", "state", ":", "next_state", "}", ")", ".", "flatten", "(", ")", "\n", "\n", "for", "idx", "in", "np", ".", "arange", "(", "self", ".", "n_valid_grid", ")", ":", "\n", "            ", "grid_prob", "=", "valid_prob", "[", "idx", "]", "[", "self", ".", "valid_action_mask", "[", "idx", "]", ">", "0", "]", "\n", "neighbor_grid_ids", "=", "self", ".", "neighbors_list", "[", "idx", "]", "\n", "curr_grid_target", "=", "np", ".", "sum", "(", "grid_prob", "*", "(", "node_reward", "[", "neighbor_grid_ids", "]", "+", "gamma", "*", "qvalue_next", "[", "neighbor_grid_ids", "]", ")", ")", "\n", "# assert np.sum(grid_prob) == 1 numerical issue.", "\n", "targets", ".", "append", "(", "curr_grid_target", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "targets", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.Estimator.initialization": [[248, 253], ["sess.run"], "methods", ["None"], ["", "def", "initialization", "(", "self", ",", "s", ",", "y", ",", "learning_rate", ")", ":", "\n", "        ", "sess", "=", "self", ".", "sess", "\n", "feed_dict", "=", "{", "self", ".", "state", ":", "s", ",", "self", ".", "y_pl", ":", "y", ",", "self", ".", "loss_lr", ":", "learning_rate", "}", "\n", "_", ",", "value_loss", "=", "sess", ".", "run", "(", "[", "self", ".", "value_train_op", ",", "self", ".", "value_loss", "]", ",", "feed_dict", ")", "\n", "return", "value_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.Estimator.update_policy": [[254, 267], ["sess.run", "cA2C.Estimator.summary_writer.add_summary", "cA2C.Estimator.summary_writer.flush"], "methods", ["None"], ["", "def", "update_policy", "(", "self", ",", "policy_state", ",", "advantage", ",", "action_choosen_mat", ",", "curr_neighbor_mask", ",", "learning_rate", ",", "global_step", ")", ":", "\n", "        ", "sess", "=", "self", ".", "sess", "\n", "feed_dict", "=", "{", "self", ".", "policy_state", ":", "policy_state", ",", "\n", "self", ".", "tfadv", ":", "advantage", ",", "\n", "self", ".", "ACTION", ":", "action_choosen_mat", ",", "\n", "self", ".", "neighbor_mask", ":", "curr_neighbor_mask", ",", "\n", "self", ".", "loss_lr", ":", "learning_rate", "}", "\n", "summaries", ",", "_", ",", "loss", "=", "sess", ".", "run", "(", "[", "self", ".", "policy_summaries", ",", "self", ".", "policy_train_op", ",", "self", ".", "policy_loss", "]", ",", "feed_dict", ")", "\n", "\n", "if", "self", ".", "summary_writer", ":", "\n", "            ", "self", ".", "summary_writer", ".", "add_summary", "(", "summaries", ",", "global_step", ")", "\n", "self", ".", "summary_writer", ".", "flush", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.Estimator.update_value": [[268, 288], ["sess.run", "cA2C.Estimator.summary_writer.add_summary", "cA2C.Estimator.summary_writer.flush"], "methods", ["None"], ["", "def", "update_value", "(", "self", ",", "s", ",", "y", ",", "learning_rate", ",", "global_step", ")", ":", "\n", "        ", "\"\"\"\n        Updates the estimator towards the given targets.\n\n        Args:\n          s: State input of shape [batch_size, state_dim]\n          a: Chosen actions of shape [batch_size, action_dim], 0, 1 mask\n          y: Targets of shape [batch_size]\n\n        Returns:\n          The calculated loss on the batch.\n        \"\"\"", "\n", "sess", "=", "self", ".", "sess", "\n", "feed_dict", "=", "{", "self", ".", "state", ":", "s", ",", "self", ".", "y_pl", ":", "y", ",", "self", ".", "loss_lr", ":", "learning_rate", "}", "\n", "summaries", ",", "_", ",", "loss", "=", "sess", ".", "run", "(", "[", "self", ".", "summaries", ",", "self", ".", "value_train_op", ",", "self", ".", "value_loss", "]", ",", "feed_dict", ")", "\n", "\n", "if", "self", ".", "summary_writer", ":", "\n", "            ", "self", ".", "summary_writer", ".", "add_summary", "(", "summaries", ",", "global_step", ")", "\n", "self", ".", "summary_writer", ".", "flush", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.stateProcessor.__init__": [[297, 307], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "target_id_states", ",", "\n", "target_grids", ",", "\n", "n_valid_grids", ")", ":", "\n", "        ", "self", ".", "target_id_states", "=", "target_id_states", "# valid grid index for driver and order distribution.", "\n", "self", ".", "target_grids", "=", "target_grids", "# valid grid id [22, 24, ...]  504 grids", "\n", "self", ".", "n_valid_grids", "=", "n_valid_grids", "\n", "self", ".", "T", "=", "144", "\n", "self", ".", "action_dim", "=", "7", "\n", "self", ".", "extend_state", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.stateProcessor.utility_conver_states": [[308, 312], ["numpy.array().flatten", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "utility_conver_states", "(", "self", ",", "curr_state", ")", ":", "\n", "        ", "curr_s", "=", "np", ".", "array", "(", "curr_state", ")", ".", "flatten", "(", ")", "\n", "curr_s_new", "=", "[", "curr_s", "[", "idx", "]", "for", "idx", "in", "self", ".", "target_id_states", "]", "\n", "return", "np", ".", "array", "(", "curr_s_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.stateProcessor.utility_normalize_states": [[313, 324], ["numpy.max", "numpy.max", "numpy.zeros_like"], "methods", ["None"], ["", "def", "utility_normalize_states", "(", "self", ",", "curr_s", ")", ":", "\n", "        ", "max_driver_num", "=", "np", ".", "max", "(", "curr_s", "[", ":", "self", ".", "n_valid_grids", "]", ")", "\n", "max_order_num", "=", "np", ".", "max", "(", "curr_s", "[", "self", ".", "n_valid_grids", ":", "]", ")", "\n", "if", "max_order_num", "==", "0", ":", "\n", "            ", "max_order_num", "=", "1", "\n", "", "if", "max_driver_num", "==", "0", ":", "\n", "            ", "max_driver_num", "=", "1", "\n", "", "curr_s_new", "=", "np", ".", "zeros_like", "(", "curr_s", ")", "\n", "curr_s_new", "[", ":", "self", ".", "n_valid_grids", "]", "=", "curr_s", "[", ":", "self", ".", "n_valid_grids", "]", "/", "max_driver_num", "\n", "curr_s_new", "[", "self", ".", "n_valid_grids", ":", "]", "=", "curr_s", "[", "self", ".", "n_valid_grids", ":", "]", "/", "max_order_num", "\n", "return", "curr_s_new", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.stateProcessor.utility_conver_reward": [[325, 328], ["numpy.array"], "methods", ["None"], ["", "def", "utility_conver_reward", "(", "self", ",", "reward_node", ")", ":", "\n", "        ", "reward_node_new", "=", "[", "reward_node", "[", "idx", "]", "for", "idx", "in", "self", ".", "target_grids", "]", "\n", "return", "np", ".", "array", "(", "reward_node_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.stateProcessor.reward_wrapper": [[329, 342], ["cA2C.stateProcessor.utility_conver_reward"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.utility_conver_reward"], ["", "def", "reward_wrapper", "(", "self", ",", "info", ",", "curr_s", ")", ":", "\n", "        ", "\"\"\" reformat reward from env to the input of model.\n        :param info: [node_reward(including neighbors), neighbor_reward]\n        :param curr_s:  processed by utility_conver_states, same time step as info.\n        :return:\n        \"\"\"", "\n", "\n", "info_reward", "=", "info", "[", "0", "]", "\n", "valid_nodes_reward", "=", "self", ".", "utility_conver_reward", "(", "info_reward", "[", "0", "]", ")", "\n", "devide", "=", "curr_s", "[", ":", "self", ".", "n_valid_grids", "]", "\n", "devide", "[", "devide", "==", "0", "]", "=", "1", "\n", "valid_nodes_reward", "=", "valid_nodes_reward", "/", "devide", "# averaged rewards for drivers arriving this grid", "\n", "return", "valid_nodes_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.stateProcessor.compute_context": [[343, 348], ["info.flatten"], "methods", ["None"], ["", "def", "compute_context", "(", "self", ",", "info", ")", ":", "\n", "# compute context", "\n", "        ", "context", "=", "info", ".", "flatten", "(", ")", "\n", "context", "=", "[", "context", "[", "idx", "]", "for", "idx", "in", "self", ".", "target_grids", "]", "\n", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.stateProcessor.to_grid_states": [[349, 369], ["numpy.zeros", "numpy.eye", "numpy.zeros", "numpy.stack", "numpy.stack", "numpy.array"], "methods", ["None"], ["", "def", "to_grid_states", "(", "self", ",", "curr_s", ",", "curr_city_time", ")", ":", "\n", "        ", "\"\"\" extend global state to all agents' state.\n\n        :param curr_s:\n        :param curr_city_time: curr_s time step\n        :return:\n        \"\"\"", "\n", "T", "=", "self", ".", "T", "\n", "\n", "# curr_s = self.utility_conver_states(curr_state)", "\n", "time_one_hot", "=", "np", ".", "zeros", "(", "(", "T", ")", ")", "\n", "time_one_hot", "[", "curr_city_time", "%", "T", "]", "=", "1", "\n", "onehot_grid_id", "=", "np", ".", "eye", "(", "self", ".", "n_valid_grids", ")", "\n", "\n", "s_grid", "=", "np", ".", "zeros", "(", "(", "self", ".", "n_valid_grids", ",", "self", ".", "n_valid_grids", "*", "3", "+", "T", ")", ")", "\n", "s_grid", "[", ":", ",", ":", "self", ".", "n_valid_grids", "*", "2", "]", "=", "np", ".", "stack", "(", "[", "curr_s", "]", "*", "self", ".", "n_valid_grids", ")", "\n", "s_grid", "[", ":", ",", "self", ".", "n_valid_grids", "*", "2", ":", "self", ".", "n_valid_grids", "*", "2", "+", "T", "]", "=", "np", ".", "stack", "(", "[", "time_one_hot", "]", "*", "self", ".", "n_valid_grids", ")", "\n", "s_grid", "[", ":", ",", "-", "self", ".", "n_valid_grids", ":", "]", "=", "onehot_grid_id", "\n", "\n", "return", "np", ".", "array", "(", "s_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.stateProcessor.to_grid_rewards": [[370, 376], ["numpy.array().reshape", "numpy.array"], "methods", ["None"], ["", "def", "to_grid_rewards", "(", "self", ",", "node_reward", ")", ":", "\n", "        ", "\"\"\"\n        :param node_reward: curr_city_time + 1 's reward\n        :return:\n        \"\"\"", "\n", "return", "np", ".", "array", "(", "node_reward", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.stateProcessor.to_action_mat": [[377, 381], ["numpy.zeros", "len", "numpy.arange"], "methods", ["None"], ["", "def", "to_action_mat", "(", "self", ",", "action_neighbor_idx", ")", ":", "\n", "        ", "action_mat", "=", "np", ".", "zeros", "(", "(", "len", "(", "action_neighbor_idx", ")", ",", "self", ".", "action_dim", ")", ")", "\n", "action_mat", "[", "np", ".", "arange", "(", "action_mat", ".", "shape", "[", "0", "]", ")", ",", "action_neighbor_idx", "]", "=", "1", "\n", "return", "action_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.policyReplayMemory.__init__": [[384, 395], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "memory_size", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "states", "=", "[", "]", "\n", "# self.next_states = []", "\n", "self", ".", "neighbor_mask", "=", "[", "]", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "# advantages", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "memory_size", "=", "memory_size", "\n", "self", ".", "current", "=", "0", "\n", "self", ".", "curr_lens", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.policyReplayMemory.add": [[396, 419], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "random.randint"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "s", ",", "a", ",", "r", ",", "mask", ")", ":", "\n", "        ", "if", "self", ".", "curr_lens", "==", "0", ":", "\n", "            ", "self", ".", "states", "=", "s", "\n", "self", ".", "actions", "=", "a", "\n", "self", ".", "rewards", "=", "r", "\n", "self", ".", "neighbor_mask", "=", "mask", "\n", "self", ".", "curr_lens", "=", "self", ".", "states", ".", "shape", "[", "0", "]", "\n", "\n", "", "elif", "self", ".", "curr_lens", "<=", "self", ".", "memory_size", ":", "\n", "            ", "self", ".", "states", "=", "np", ".", "concatenate", "(", "(", "self", ".", "states", ",", "s", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "neighbor_mask", "=", "np", ".", "concatenate", "(", "(", "self", ".", "neighbor_mask", ",", "mask", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "actions", "=", "np", ".", "concatenate", "(", "(", "self", ".", "actions", ",", "a", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "rewards", "=", "np", ".", "concatenate", "(", "(", "self", ".", "rewards", ",", "r", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "curr_lens", "=", "self", ".", "states", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "new_sample_lens", "=", "s", ".", "shape", "[", "0", "]", "\n", "# random.seed(0)", "\n", "index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "curr_lens", "-", "new_sample_lens", ")", "\n", "\n", "self", ".", "states", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "s", "\n", "self", ".", "actions", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "a", "\n", "self", ".", "rewards", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "r", "\n", "self", ".", "neighbor_mask", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.policyReplayMemory.sample": [[420, 431], ["random.sample", "range", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.DiagGaussianPd.sample"], ["", "", "def", "sample", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "curr_lens", "<=", "self", ".", "batch_size", ":", "\n", "            ", "return", "[", "self", ".", "states", ",", "self", ".", "actions", ",", "np", ".", "array", "(", "self", ".", "rewards", ")", ",", "self", ".", "neighbor_mask", "]", "\n", "# random.seed(0)", "\n", "", "indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "self", ".", "curr_lens", ")", ",", "self", ".", "batch_size", ")", "\n", "batch_s", "=", "self", ".", "states", "[", "indices", "]", "\n", "batch_a", "=", "self", ".", "actions", "[", "indices", "]", "\n", "batch_r", "=", "self", ".", "rewards", "[", "indices", "]", "\n", "batch_mask", "=", "self", ".", "neighbor_mask", "[", "indices", "]", "\n", "return", "[", "batch_s", ",", "batch_a", ",", "batch_r", ",", "batch_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.policyReplayMemory.reset": [[432, 438], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "states", "=", "[", "]", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "neighbor_mask", "=", "[", "]", "\n", "self", ".", "curr_lens", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.ReplayMemory.__init__": [[444, 454], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "memory_size", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "states", "=", "[", "]", "\n", "self", ".", "next_states", "=", "[", "]", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "memory_size", "=", "memory_size", "\n", "self", ".", "current", "=", "0", "\n", "self", ".", "curr_lens", "=", "0", "# current memory lens", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.ReplayMemory.add": [[455, 478], ["numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "random.randint"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "s", ",", "a", ",", "r", ",", "next_s", ")", ":", "\n", "        ", "if", "self", ".", "curr_lens", "==", "0", ":", "\n", "            ", "self", ".", "states", "=", "s", "\n", "self", ".", "actions", "=", "a", "\n", "self", ".", "rewards", "=", "r", "\n", "self", ".", "next_states", "=", "next_s", "\n", "self", ".", "curr_lens", "=", "self", ".", "states", ".", "shape", "[", "0", "]", "\n", "\n", "", "elif", "self", ".", "curr_lens", "<=", "self", ".", "memory_size", ":", "\n", "            ", "self", ".", "states", "=", "np", ".", "concatenate", "(", "(", "self", ".", "states", ",", "s", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "next_states", "=", "np", ".", "concatenate", "(", "(", "self", ".", "next_states", ",", "next_s", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "actions", "=", "np", ".", "concatenate", "(", "(", "self", ".", "actions", ",", "a", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "rewards", "=", "np", ".", "concatenate", "(", "(", "self", ".", "rewards", ",", "r", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "curr_lens", "=", "self", ".", "states", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "new_sample_lens", "=", "s", ".", "shape", "[", "0", "]", "\n", "# random.seed(0)", "\n", "index", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "curr_lens", "-", "new_sample_lens", ")", "\n", "\n", "self", ".", "states", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "s", "\n", "self", ".", "actions", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "a", "\n", "self", ".", "rewards", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "r", "\n", "self", ".", "next_states", "[", "index", ":", "(", "index", "+", "new_sample_lens", ")", "]", "=", "next_s", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.ReplayMemory.sample": [[479, 490], ["random.sample", "range"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.DiagGaussianPd.sample"], ["", "", "def", "sample", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "curr_lens", "<=", "self", ".", "batch_size", ":", "\n", "            ", "return", "[", "self", ".", "states", ",", "self", ".", "actions", ",", "self", ".", "rewards", ",", "self", ".", "next_states", "]", "\n", "# random.seed(0)", "\n", "", "indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "self", ".", "curr_lens", ")", ",", "self", ".", "batch_size", ")", "\n", "batch_s", "=", "self", ".", "states", "[", "indices", "]", "\n", "batch_a", "=", "self", ".", "actions", "[", "indices", "]", "\n", "batch_r", "=", "self", ".", "rewards", "[", "indices", "]", "\n", "batch_mask", "=", "self", ".", "next_states", "[", "indices", "]", "\n", "return", "[", "batch_s", ",", "batch_a", ",", "batch_r", ",", "batch_mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.ReplayMemory.reset": [[491, 497], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "states", "=", "[", "]", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "next_states", "=", "[", "]", "\n", "self", ".", "curr_lens", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.ModelParametersCopier.__init__": [[505, 521], ["sorted", "sorted", "zip", "e2_v.assign", "cA2C.ModelParametersCopier.update_ops.append", "tensorflow.trainable_variables", "t.name.startswith", "tensorflow.trainable_variables", "t.name.startswith"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "estimator1", ",", "estimator2", ")", ":", "\n", "        ", "\"\"\"\n        Defines copy-work operation graph.\n        Args:\n          estimator1: Estimator to copy the paramters from\n          estimator2: Estimator to copy the parameters to\n        \"\"\"", "\n", "e1_params", "=", "[", "t", "for", "t", "in", "tf", ".", "trainable_variables", "(", ")", "if", "t", ".", "name", ".", "startswith", "(", "estimator1", ".", "scope", ")", "]", "\n", "e1_params", "=", "sorted", "(", "e1_params", ",", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "e2_params", "=", "[", "t", "for", "t", "in", "tf", ".", "trainable_variables", "(", ")", "if", "t", ".", "name", ".", "startswith", "(", "estimator2", ".", "scope", ")", "]", "\n", "e2_params", "=", "sorted", "(", "e2_params", ",", "key", "=", "lambda", "v", ":", "v", ".", "name", ")", "\n", "\n", "self", ".", "update_ops", "=", "[", "]", "\n", "for", "e1_v", ",", "e2_v", "in", "zip", "(", "e1_params", ",", "e2_params", ")", ":", "\n", "            ", "op", "=", "e2_v", ".", "assign", "(", "e1_v", ")", "\n", "self", ".", "update_ops", ".", "append", "(", "op", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.ModelParametersCopier.make": [[522, 529], ["sess.run"], "methods", ["None"], ["", "", "def", "make", "(", "self", ",", "sess", ")", ":", "\n", "        ", "\"\"\"\n        Makes copy.\n        Args:\n            sess: Tensorflow session instance\n        \"\"\"", "\n", "sess", ".", "run", "(", "self", ".", "update_ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.Pd.mode": [[17, 19], ["None"], "methods", ["None"], ["def", "mode", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.Pd.neglogp": [[20, 23], ["None"], "methods", ["None"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "# Usually it's easier to define the negative logprob", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.Pd.kl": [[24, 26], ["None"], "methods", ["None"], ["", "def", "kl", "(", "self", ",", "other", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.Pd.entropy": [[27, 29], ["None"], "methods", ["None"], ["", "def", "entropy", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.Pd.sample": [[30, 32], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.Pd.logp": [[33, 35], ["alg_utility.Pd.neglogp"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.DiagGaussianPd.neglogp"], ["", "def", "logp", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "-", "self", ".", "neglogp", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.DiagGaussianPd.__init__": [[38, 42], ["tensorflow.exp"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mu", ",", "logstd", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mu", "\n", "self", ".", "logstd", "=", "logstd", "\n", "self", ".", "std", "=", "tf", ".", "exp", "(", "logstd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.DiagGaussianPd.mode": [[43, 45], ["None"], "methods", ["None"], ["", "def", "mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.DiagGaussianPd.neglogp": [[46, 51], ["alg_utility.tfsum", "alg_utility.tfsum", "tensorflow.to_float", "tensorflow.square", "numpy.log", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.tfsum", "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.tfsum"], ["", "def", "neglogp", "(", "self", ",", "x", ")", ":", "\n", "# axis = -1, sum over last dimension, first dimension is batch size", "\n", "        ", "return", "0.5", "*", "tfsum", "(", "tf", ".", "square", "(", "(", "x", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ",", "axis", "=", "-", "1", ")", "+", "0.5", "*", "np", ".", "log", "(", "2.0", "*", "np", ".", "pi", ")", "*", "tf", ".", "to_float", "(", "tf", ".", "shape", "(", "x", ")", "[", "-", "1", "]", ")", "+", "tfsum", "(", "self", ".", "logstd", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.DiagGaussianPd.sample": [[52, 54], ["tensorflow.random_normal", "tensorflow.shape"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mean", "+", "self", ".", "std", "*", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "self", ".", "mean", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.tfsum": [[8, 11], ["tensorflow.reduce_sum"], "function", ["None"], ["def", "tfsum", "(", "x", ",", "axis", "=", "None", ",", "keepdims", "=", "False", ")", ":", "\n", "    ", "axis", "=", "None", "if", "axis", "is", "None", "else", "[", "axis", "]", "\n", "return", "tf", ".", "reduce_sum", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "keepdims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.normalize_reward": [[57, 62], ["numpy.mean", "numpy.std"], "function", ["None"], ["", "", "def", "normalize_reward", "(", "discounted_epr", ")", ":", "\n", "    ", "reward_mean", "=", "np", ".", "mean", "(", "discounted_epr", ")", "\n", "reward_std", "=", "np", ".", "std", "(", "discounted_epr", ")", "\n", "discounted_epr", "=", "(", "discounted_epr", "-", "reward_mean", ")", "/", "reward_std", "\n", "return", "discounted_epr", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.continuous_quadratic_knapsack": [[76, 129], ["len", "numpy.zeros", "float", "numpy.concatenate", "numpy.minimum", "float", "len", "numpy.median", "numpy.where", "numpy.where", "numpy.maximum", "len", "len", "numpy.dot", "numpy.dot", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "continuous_quadratic_knapsack", "(", "b", ",", "u", ",", "r", ")", ":", "\n", "    ", "\"\"\"\n    OBJECTIVE\n     min 1/2*||x||_2^2\n     s.t. b'*x = r, 0<= x <= u,  b > 0\n    \n    Related paper\n     [1] KC. Kiwiel. On linear-time algorithms for the continuous \n         quadratic knapsack problem, Journal of Optimization Theory \n         and Applications, 2007\n    Coding Reference: \n    https://github.com/jiayuzhou/MALSAR/blob/master/MALSAR/functions/CMTL/bsa_ihb.m\n    \"\"\"", "\n", "n", "=", "len", "(", "b", ")", "\n", "break_flag", "=", "0", "\n", "t_l", "=", "np", ".", "zeros", "(", "n", ")", "\n", "t_u", "=", "-", "u", "# ( 0 - u)/1", "\n", "t_L", "=", "-", "float", "(", "'Inf'", ")", "\n", "t_U", "=", "float", "(", "'Inf'", ")", "\n", "g_tL", "=", "0", "\n", "g_tU", "=", "0", "\n", "T", "=", "np", ".", "concatenate", "(", "(", "t_l", ",", "t_u", ")", ",", "axis", "=", "0", ")", "\n", "n_iter", "=", "0", "\n", "while", "len", "(", "T", ")", "!=", "0", ":", "\n", "        ", "n_iter", "+=", "1", "\n", "g_t", "=", "0", "\n", "t_hat", "=", "np", ".", "median", "(", "T", ")", "\n", "\n", "U_inds", "=", "np", ".", "where", "(", "t_hat", "<", "t_u", ")", "\n", "M", "=", "np", ".", "where", "(", "(", "t_u", "<=", "t_hat", ")", "&", "(", "t_hat", "<=", "t_l", ")", ")", "\n", "\n", "if", "len", "(", "U_inds", "[", "0", "]", ")", "!=", "0", ":", "\n", "            ", "g_t", "=", "g_t", "+", "np", ".", "dot", "(", "b", "[", "U_inds", "]", ",", "u", "[", "U_inds", "]", ")", "\n", "\n", "", "if", "len", "(", "M", "[", "0", "]", ")", "!=", "0", ":", "\n", "            ", "g_t", "=", "g_t", "-", "np", ".", "dot", "(", "b", "[", "M", "]", ",", "t_hat", "*", "b", "[", "M", "]", ")", "# a = 0   np.sum(b(M).*(a(M) - t_hat*b(M)))", "\n", "", "if", "g_t", ">", "r", ":", "\n", "            ", "t_L", "=", "t_hat", "\n", "T", "=", "T", "[", "np", ".", "where", "(", "T", ">", "t_hat", ")", "]", "\n", "g_tL", "=", "g_t", "\n", "", "elif", "g_t", "<", "r", ":", "\n", "            ", "t_U", "=", "t_hat", "\n", "T", "=", "T", "[", "np", ".", "where", "(", "T", "<", "t_hat", ")", "]", "\n", "g_tU", "=", "g_t", "\n", "", "else", ":", "\n", "            ", "t_star", "=", "t_hat", "\n", "break_flag", "=", "1", "\n", "break", "\n", "\n", "", "", "if", "break_flag", "==", "0", ":", "\n", "         ", "t_star", "=", "t_L", "-", "(", "g_tL", "-", "r", ")", "*", "(", "t_U", "-", "t_L", ")", "/", "(", "g_tU", "-", "g_tL", ")", "\n", "", "x_star", "=", "np", ".", "minimum", "(", "np", ".", "maximum", "(", "0", ",", "-", "t_star", "*", "b", ")", ",", "u", ")", "\n", "return", "x_star", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.projection_fast": [[131, 136], ["numpy.ones", "alg_utility.continuous_quadratic_knapsack", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.continuous_quadratic_knapsack"], ["", "def", "projection_fast", "(", "u", ",", "n", ",", "num_idle_driver", ")", ":", "\n", "    ", "b", "=", "np", ".", "ones", "(", "(", "n", ")", ")", "\n", "r", "=", "np", ".", "sum", "(", "u", ")", "-", "num_idle_driver", "\n", "x_star", "=", "continuous_quadratic_knapsack", "(", "b", ",", "u", ",", "r", ")", "\n", "return", "u", "-", "x_star", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.categorical_sample_split": [[138, 149], ["tensorflow.multinomial", "numpy.arange", "tensorflow.reduce_max"], "function", ["None"], ["", "def", "categorical_sample_split", "(", "logits", ",", "d", "=", "6", ")", ":", "\n", "    ", "\"\"\"\n    :param logits: sampling according to the probability exp(logits)\n    :param d: first dimension of logits. 6 in our case.\n    :return:\n    \"\"\"", "\n", "\n", "value", "=", "[", "tf", ".", "multinomial", "(", "logits", "[", "i", "]", "-", "tf", ".", "reduce_max", "(", "logits", "[", "i", "]", ",", "[", "1", "]", ",", "keep_dims", "=", "True", ")", ",", "1", ")", "\n", "for", "i", "in", "np", ".", "arange", "(", "d", ")", "\n", "]", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.fc": [[150, 159], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "act", "tensorflow.matmul", "x.get_shape", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer"], "function", ["None"], ["", "def", "fc", "(", "x", ",", "scope", ",", "nh", ",", "act", "=", "tf", ".", "nn", ".", "relu", ",", "init_scale", "=", "1.0", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "nin", "=", "x", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "# w = tf.get_variable(\"w\", [nin, nh], initializer=ortho_init(init_scale))", "\n", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "[", "nin", ",", "nh", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "uniform", "=", "True", ",", "seed", "=", "0", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "nh", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "z", "=", "tf", ".", "matmul", "(", "x", ",", "w", ")", "+", "b", "\n", "h", "=", "act", "(", "z", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.ortho_init": [[161, 178], ["tuple", "numpy.random.seed", "numpy.random.normal", "numpy.linalg.svd", "q.reshape.reshape", "len", "len", "numpy.prod"], "function", ["None"], ["", "", "def", "ortho_init", "(", "scale", "=", "1.0", ")", ":", "\n", "    ", "def", "_ortho_init", "(", "shape", ",", "dtype", ",", "partition_info", "=", "None", ")", ":", "\n", "#lasagne ortho init for tf", "\n", "        ", "shape", "=", "tuple", "(", "shape", ")", "\n", "if", "len", "(", "shape", ")", "==", "2", ":", "\n", "            ", "flat_shape", "=", "shape", "\n", "", "elif", "len", "(", "shape", ")", "==", "4", ":", "# assumes NHWC", "\n", "            ", "flat_shape", "=", "(", "np", ".", "prod", "(", "shape", "[", ":", "-", "1", "]", ")", ",", "shape", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "np", ".", "random", ".", "seed", "(", "1", ")", "\n", "a", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "1.0", ",", "flat_shape", ")", "\n", "u", ",", "_", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "a", ",", "full_matrices", "=", "False", ")", "\n", "q", "=", "u", "if", "u", ".", "shape", "==", "flat_shape", "else", "v", "# pick the one with the correct shape", "\n", "q", "=", "q", ".", "reshape", "(", "shape", ")", "\n", "return", "(", "scale", "*", "q", "[", ":", "shape", "[", "0", "]", ",", ":", "shape", "[", "1", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "return", "_ortho_init", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.get_target_ids_local": [[184, 193], ["numpy.where", "zip", "ids_2dto1d", "target_ids_local.append"], "function", ["home.repos.pwc.inspect_result.illidanlab_Simulator.simulator.utilities.ids_2dto1d"], ["", "def", "get_target_ids_local", "(", "mapped_matrix_int_local", ")", ":", "\n", "    ", "row_inds", ",", "col_inds", "=", "np", ".", "where", "(", "mapped_matrix_int_local", ">=", "0", ")", "\n", "\n", "M_local", ",", "N_local", "=", "mapped_matrix_int_local", ".", "shape", "\n", "target_ids_local", "=", "[", "]", "# start from 0.", "\n", "for", "x", ",", "y", "in", "zip", "(", "row_inds", ",", "col_inds", ")", ":", "\n", "        ", "node_id", "=", "ids_2dto1d", "(", "x", ",", "y", ",", "M_local", ",", "N_local", ")", "\n", "target_ids_local", ".", "append", "(", "node_id", ")", "\n", "", "return", "target_ids_local", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.collision_action": [[194, 206], ["set", "set.add", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.cA2C.ReplayMemory.add"], ["", "def", "collision_action", "(", "action_tuple", ")", ":", "\n", "    ", "count", "=", "0", "\n", "action_set", "=", "set", "(", "(", ")", ")", "\n", "for", "item", "in", "action_tuple", ":", "\n", "        ", "if", "item", "[", "1", "]", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "grid_id_key", "=", "str", "(", "item", "[", "0", "]", ")", "+", "\"-\"", "+", "str", "(", "item", "[", "1", "]", ")", "\n", "action_set", ".", "add", "(", "grid_id_key", ")", "\n", "conflict_id_key", "=", "str", "(", "item", "[", "1", "]", ")", "+", "\"-\"", "+", "str", "(", "item", "[", "0", "]", ")", "\n", "if", "conflict_id_key", "in", "action_set", ":", "\n", "            ", "count", "+=", "1", "\n", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.construct_grid_nodeid_mapping": [[207, 214], ["zip"], "function", ["None"], ["", "def", "construct_grid_nodeid_mapping", "(", "target_ids_local", ",", "grid_ids_local", ")", ":", "\n", "    ", "node_mapping", "=", "{", "}", "\n", "grid_mapping", "=", "{", "}", "#", "\n", "for", "nodeid", ",", "gridid", "in", "zip", "(", "target_ids_local", ",", "grid_ids_local", ")", ":", "\n", "        ", "node_mapping", "[", "gridid", "]", "=", "nodeid", "\n", "grid_mapping", "[", "nodeid", "]", "=", "gridid", "\n", "", "return", "node_mapping", ",", "grid_mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.utility_conver_states": [[215, 218], ["numpy.array"], "function", ["None"], ["", "def", "utility_conver_states", "(", "curr_s", ",", "target_id_states", ")", ":", "\n", "    ", "curr_s_new", "=", "[", "curr_s", "[", "idx", "]", "for", "idx", "in", "target_id_states", "]", "\n", "return", "np", ".", "array", "(", "curr_s_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.utility_conver_reward": [[219, 222], ["numpy.array"], "function", ["None"], ["", "def", "utility_conver_reward", "(", "reward_node", ",", "target_id_states", ")", ":", "\n", "    ", "reward_node_new", "=", "[", "reward_node", "[", "idx", "]", "for", "idx", "in", "target_id_states", "]", "\n", "return", "np", ".", "array", "(", "reward_node_new", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.illidanlab_Simulator.algorithm.alg_utility.compute_sum_qtable": [[226, 233], ["numpy.sum"], "function", ["None"], ["", "def", "compute_sum_qtable", "(", "temp_qtable", ")", ":", "\n", "    ", "temp_q", "=", "0", "\n", "for", "item", "in", "temp_qtable", ":", "\n", "        ", "for", "jj", "in", "item", ":", "\n", "            ", "temp_q", "+=", "np", ".", "sum", "(", "jj", ")", "\n", "\n", "", "", "return", "temp_q", "", "", ""]]}