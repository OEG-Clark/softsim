{"home.repos.pwc.inspect_result.joisino_wordtour.None.statistics.five": [[5, 35], ["print", "scipy.io.loadmat", "print", "print", "print", "numpy.vstack", "numpy.unique", "print", "numpy.mean", "print", "numpy.unique", "print", "print", "len", "len", "vs.append"], "function", ["None"], ["def", "five", "(", "filename", ")", ":", "\n", "    ", "print", "(", "filename", ")", "\n", "data", "=", "scipy", ".", "io", ".", "loadmat", "(", "filename", ")", "\n", "\n", "n", "=", "data", "[", "'TE'", "]", ".", "shape", "[", "1", "]", "\n", "m", "=", "data", "[", "'TR'", "]", ".", "shape", "[", "1", "]", "\n", "\n", "print", "(", "'Number of total documents:'", ",", "n", "+", "m", ")", "\n", "print", "(", "'Number of training documents:'", ",", "m", ")", "\n", "print", "(", "'Number of test documents:'", ",", "n", ")", "\n", "\n", "vs", "=", "[", "]", "\n", "for", "v", "in", "data", "[", "'X'", "]", "[", "0", "]", ":", "\n", "        ", "if", "v", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "            ", "vs", ".", "append", "(", "v", ".", "T", ")", "\n", "", "", "X", "=", "np", ".", "vstack", "(", "vs", ")", "\n", "uni", "=", "np", ".", "unique", "(", "X", ",", "axis", "=", "0", ")", "\n", "\n", "print", "(", "'Size of dictionary:'", ",", "len", "(", "uni", ")", ")", "\n", "\n", "a", "=", "[", "r", ".", "shape", "[", "1", "]", "for", "r", "in", "data", "[", "'X'", "]", "[", "0", "]", "]", "\n", "ave", "=", "np", ".", "mean", "(", "a", ")", "\n", "\n", "print", "(", "'Unique words in a document: {:.1f}'", ".", "format", "(", "ave", ")", ")", "\n", "\n", "uni", "=", "np", ".", "unique", "(", "data", "[", "'Y'", "]", ")", "\n", "\n", "print", "(", "'Number of Classes:'", ",", "len", "(", "uni", ")", ")", "\n", "\n", "print", "(", "'Type: five-fold'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.statistics.one": [[37, 71], ["print", "scipy.io.loadmat", "print", "print", "print", "numpy.vstack", "numpy.unique", "print", "numpy.mean", "print", "numpy.unique", "print", "print", "len", "numpy.hstack", "len", "vs.append", "vs.append"], "function", ["None"], ["", "def", "one", "(", "filename", ")", ":", "\n", "    ", "print", "(", "filename", ")", "\n", "data", "=", "scipy", ".", "io", ".", "loadmat", "(", "filename", ")", "\n", "\n", "n", "=", "data", "[", "'xte'", "]", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "m", "=", "data", "[", "'xtr'", "]", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "print", "(", "'Number of total documents:'", ",", "n", "+", "m", ")", "\n", "print", "(", "'Number of training documents:'", ",", "m", ")", "\n", "print", "(", "'Number of test documents:'", ",", "n", ")", "\n", "\n", "vs", "=", "[", "]", "\n", "for", "v", "in", "data", "[", "'xtr'", "]", "[", "0", "]", ":", "\n", "        ", "if", "v", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "            ", "vs", ".", "append", "(", "v", ".", "T", ")", "\n", "", "", "for", "v", "in", "data", "[", "'xte'", "]", "[", "0", "]", ":", "\n", "        ", "if", "v", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "            ", "vs", ".", "append", "(", "v", ".", "T", ")", "\n", "", "", "X", "=", "np", ".", "vstack", "(", "vs", ")", "\n", "uni", "=", "np", ".", "unique", "(", "X", ",", "axis", "=", "0", ")", "\n", "\n", "print", "(", "'Size of dictionary:'", ",", "len", "(", "uni", ")", ")", "\n", "\n", "a", "=", "[", "r", ".", "shape", "[", "1", "]", "for", "r", "in", "data", "[", "'xte'", "]", "[", "0", "]", "]", "\n", "b", "=", "[", "r", ".", "shape", "[", "1", "]", "for", "r", "in", "data", "[", "'xtr'", "]", "[", "0", "]", "]", "\n", "ave", "=", "np", ".", "mean", "(", "a", "+", "b", ")", "\n", "\n", "print", "(", "'Unique words in a document: {:.1f}'", ".", "format", "(", "ave", ")", ")", "\n", "\n", "uni", "=", "np", ".", "unique", "(", "np", ".", "hstack", "(", "[", "data", "[", "'yte'", "]", ",", "data", "[", "'ytr'", "]", "]", ")", ")", "\n", "\n", "print", "(", "'Number of Classes:'", ",", "len", "(", "uni", ")", ")", "\n", "\n", "print", "(", "'Type: one-fold'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.generate_order_file.load_ordering": [[6, 27], ["len", "util.load_glove", "numpy.random.seed", "numpy.argsort", "sklearn.decomposition.PCA", "pca.fit_transform.fit_transform", "numpy.argsort", "numpy.argsort", "open", "f.readlines", "numpy.random.randn", "map"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.util.load_glove"], ["def", "load_ordering", "(", ")", ":", "\n", "    ", "with", "open", "(", "'LKH-3.0.6/wordtour.out'", ")", "as", "f", ":", "\n", "        ", "lkh", "=", "f", ".", "readlines", "(", ")", "\n", "", "n", "=", "len", "(", "lkh", "[", "6", ":", "-", "2", "]", ")", "\n", "\n", "words", ",", "emb", ",", "_", ",", "_", "=", "load_glove", "(", "n", "=", "n", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "rand_proj", "=", "np", ".", "argsort", "(", "emb", "@", "np", ".", "random", ".", "randn", "(", "300", ")", ")", "\n", "rand_proj", "=", "[", "words", "[", "i", "]", "for", "i", "in", "rand_proj", "]", "\n", "\n", "pca", "=", "PCA", "(", "n_components", "=", "4", ",", "random_state", "=", "0", ")", "\n", "pca", "=", "pca", ".", "fit_transform", "(", "emb", ")", "\n", "pca1", "=", "np", ".", "argsort", "(", "pca", "[", ":", ",", "0", "]", ")", "\n", "pca1", "=", "[", "words", "[", "i", "]", "for", "i", "in", "pca1", "]", "\n", "pca4", "=", "np", ".", "argsort", "(", "pca", "[", ":", ",", "3", "]", ")", "\n", "pca4", "=", "[", "words", "[", "i", "]", "for", "i", "in", "pca4", "]", "\n", "\n", "lkh", "=", "[", "words", "[", "i", "-", "1", "]", "for", "i", "in", "map", "(", "int", ",", "lkh", "[", "6", ":", "-", "2", "]", ")", "]", "\n", "\n", "return", "words", ",", "lkh", ",", "rand_proj", ",", "pca1", ",", "pca4", ",", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.generate_order_file.save_ordering": [[29, 41], ["open", "print"], "function", ["None"], ["", "def", "save_ordering", "(", "lkh", ",", "rand_proj", ",", "pca1", ",", "pca4", ")", ":", "\n", "    ", "output_list", "=", "[", "\n", "(", "'wordtour.txt'", ",", "lkh", ")", ",", "\n", "(", "'order_randproj.txt'", ",", "rand_proj", ")", ",", "\n", "(", "'order_pca1.txt'", ",", "pca1", ")", ",", "\n", "(", "'order_pca4.txt'", ",", "pca4", ")", "\n", "]", "\n", "\n", "for", "filename", ",", "ordering", "in", "output_list", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "w", "in", "ordering", ":", "\n", "                ", "print", "(", "w", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.generate_order_file.save_amt_csv": [[43, 72], ["open", "print", "range", "numpy.random.seed", "lkh.index", "rand_proj.index", "pca1.index", "pca4.index", "lkh_seg.replace.replace", "base_seg.replace.replace", "numpy.random.randint", "print", "print", "numpy.random.randint", "len"], "function", ["None"], ["", "", "", "", "def", "save_amt_csv", "(", "words", ",", "lkh", ",", "rand_proj", ",", "pca1", ",", "pca4", ")", ":", "\n", "    ", "with", "open", "(", "'amt.csv'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "print", "(", "'text1,text2,gt1,gt2'", ",", "file", "=", "f", ")", "\n", "for", "i", "in", "range", "(", "300", ")", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "i", ")", "\n", "w", "=", "lkh", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "words", ")", ")", "]", "\n", "lkh_index", "=", "lkh", ".", "index", "(", "w", ")", "\n", "rand_proj_index", "=", "rand_proj", ".", "index", "(", "w", ")", "\n", "pca1_index", "=", "pca1", ".", "index", "(", "w", ")", "\n", "pca4_index", "=", "pca4", ".", "index", "(", "w", ")", "\n", "lkh_seg", "=", "', '", ".", "join", "(", "lkh", "[", "lkh_index", "-", "5", ":", "lkh_index", "+", "6", "]", ")", "\n", "rand_proj_seg", "=", "', '", ".", "join", "(", "rand_proj", "[", "rand_proj_index", "-", "5", ":", "rand_proj_index", "+", "6", "]", ")", "\n", "pca1_seg", "=", "', '", ".", "join", "(", "pca1", "[", "pca1_index", "-", "5", ":", "pca1_index", "+", "6", "]", ")", "\n", "pca4_seg", "=", "', '", ".", "join", "(", "pca1", "[", "pca4_index", "-", "5", ":", "pca4_index", "+", "6", "]", ")", "\n", "if", "i", "<", "100", ":", "\n", "                ", "base_seg", "=", "rand_proj_seg", "\n", "base_name", "=", "'rand'", "\n", "", "elif", "i", "<", "200", ":", "\n", "                ", "base_seg", "=", "pca1_seg", "\n", "base_name", "=", "'pca1'", "\n", "", "else", ":", "\n", "                ", "base_seg", "=", "pca4_seg", "\n", "base_name", "=", "'pca4'", "\n", "", "lkh_seg", "=", "lkh_seg", ".", "replace", "(", "'\"'", ",", "'\"\"'", ")", "\n", "base_seg", "=", "base_seg", ".", "replace", "(", "'\"'", ",", "'\"\"'", ")", "\n", "if", "np", ".", "random", ".", "randint", "(", "2", ")", "==", "0", ":", "\n", "                ", "print", "(", "'\"'", "+", "lkh_seg", "+", "'\",'", "+", "'\"'", "+", "base_seg", "+", "'\",'", "+", "'lkh,{}'", ".", "format", "(", "base_name", ")", ",", "file", "=", "f", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'\"'", "+", "base_seg", "+", "'\",'", "+", "'\"'", "+", "lkh_seg", "+", "'\",'", "+", "'{},lkh'", ".", "format", "(", "base_name", ")", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.generate_order_file.save_amt_word_csv": [[74, 101], ["len", "open", "print", "range", "numpy.random.seed", "lkh.index", "rand_proj.index", "pca1.index", "pca4.index", "lkh_word.replace.replace", "base_word.replace.replace", "numpy.random.randint", "print", "print", "numpy.random.randint", "len"], "function", ["None"], ["", "", "", "", "def", "save_amt_word_csv", "(", "words", ",", "lkh", ",", "rand_proj", ",", "pca1", ",", "pca4", ")", ":", "\n", "    ", "n", "=", "len", "(", "words", ")", "\n", "with", "open", "(", "'amt_word.csv'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "print", "(", "'center,word1,word2,gt1,gt2'", ",", "file", "=", "f", ")", "\n", "for", "i", "in", "range", "(", "300", ")", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "i", ")", "\n", "w", "=", "lkh", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "words", ")", ")", "]", "\n", "lkh_index", "=", "lkh", ".", "index", "(", "w", ")", "\n", "rand_proj_index", "=", "rand_proj", ".", "index", "(", "w", ")", "\n", "pca1_index", "=", "pca1", ".", "index", "(", "w", ")", "\n", "pca4_index", "=", "pca4", ".", "index", "(", "w", ")", "\n", "lkh_word", "=", "lkh", "[", "(", "lkh_index", "+", "1", ")", "%", "n", "]", "\n", "if", "i", "<", "100", ":", "\n", "                ", "base_word", "=", "rand_proj", "[", "(", "rand_proj_index", "+", "1", ")", "%", "n", "]", "\n", "base_name", "=", "'rand'", "\n", "", "elif", "i", "<", "200", ":", "\n", "                ", "base_word", "=", "pca1", "[", "(", "pca1_index", "+", "1", ")", "%", "n", "]", "\n", "base_name", "=", "'pca1'", "\n", "", "else", ":", "\n", "                ", "base_word", "=", "pca4", "[", "(", "pca4_index", "+", "1", ")", "%", "n", "]", "\n", "base_name", "=", "'pca4'", "\n", "", "lkh_word", "=", "lkh_word", ".", "replace", "(", "'\"'", ",", "'\"\"'", ")", "\n", "base_word", "=", "base_word", ".", "replace", "(", "'\"'", ",", "'\"\"'", ")", "\n", "if", "np", ".", "random", ".", "randint", "(", "2", ")", "==", "0", ":", "\n", "                ", "print", "(", "'\"'", "+", "w", "+", "'\",\"'", "+", "lkh_word", "+", "'\",\"'", "+", "base_word", "+", "'\",'", "+", "'lkh,{}'", ".", "format", "(", "base_name", ")", ",", "file", "=", "f", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'\"'", "+", "w", "+", "'\",\"'", "+", "base_word", "+", "'\",\"'", "+", "lkh_word", "+", "'\",'", "+", "'{},lkh'", ".", "format", "(", "base_name", ")", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.generate_order_file.save_amt_word_glove_csv": [[103, 122], ["len", "open", "print", "range", "numpy.random.seed", "lkh.index", "words.index", "lkh_word.replace.replace", "base_word.replace.replace", "numpy.random.randint", "print", "print", "numpy.random.randint", "len", "numpy.argsort", "numpy.linalg.norm"], "function", ["None"], ["", "", "", "", "def", "save_amt_word_glove_csv", "(", "words", ",", "lkh", ",", "emb", ")", ":", "\n", "    ", "n", "=", "len", "(", "words", ")", "\n", "with", "open", "(", "'amt_word_glove.csv'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "print", "(", "'center,word1,word2,gt1,gt2'", ",", "file", "=", "f", ")", "\n", "for", "i", "in", "range", "(", "300", ",", "400", ")", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "i", ")", "\n", "w", "=", "lkh", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "words", ")", ")", "]", "\n", "lkh_index", "=", "lkh", ".", "index", "(", "w", ")", "\n", "emb_index", "=", "words", ".", "index", "(", "w", ")", "\n", "lkh_word", "=", "lkh", "[", "(", "lkh_index", "+", "1", ")", "%", "n", "]", "\n", "base_word", "=", "words", "[", "np", ".", "argsort", "(", "np", ".", "linalg", ".", "norm", "(", "emb", "-", "emb", "[", "emb_index", "]", ",", "axis", "=", "1", ")", ")", "[", "1", "]", "]", "\n", "if", "lkh_word", "==", "base_word", ":", "\n", "                ", "continue", "\n", "", "lkh_word", "=", "lkh_word", ".", "replace", "(", "'\"'", ",", "'\"\"'", ")", "\n", "base_word", "=", "base_word", ".", "replace", "(", "'\"'", ",", "'\"\"'", ")", "\n", "if", "np", ".", "random", ".", "randint", "(", "2", ")", "==", "0", ":", "\n", "                ", "print", "(", "'\"'", "+", "w", "+", "'\",\"'", "+", "lkh_word", "+", "'\",\"'", "+", "base_word", "+", "'\",'", "+", "'lkh,glove'", ",", "file", "=", "f", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'\"'", "+", "w", "+", "'\",\"'", "+", "base_word", "+", "'\",\"'", "+", "lkh_word", "+", "'\",'", "+", "'glove,lkh'", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.generate_order_file.main": [[124, 130], ["generate_order_file.load_ordering", "generate_order_file.save_ordering", "generate_order_file.save_amt_csv", "generate_order_file.save_amt_word_csv", "generate_order_file.save_amt_word_glove_csv"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.generate_order_file.load_ordering", "home.repos.pwc.inspect_result.joisino_wordtour.None.generate_order_file.save_ordering", "home.repos.pwc.inspect_result.joisino_wordtour.None.generate_order_file.save_amt_csv", "home.repos.pwc.inspect_result.joisino_wordtour.None.generate_order_file.save_amt_word_csv", "home.repos.pwc.inspect_result.joisino_wordtour.None.generate_order_file.save_amt_word_glove_csv"], ["", "", "", "", "def", "main", "(", ")", ":", "\n", "    ", "words", ",", "lkh", ",", "rand_proj", ",", "pca1", ",", "pca4", ",", "emb", "=", "load_ordering", "(", ")", "\n", "save_ordering", "(", "lkh", ",", "rand_proj", ",", "pca1", ",", "pca4", ")", "\n", "save_amt_csv", "(", "words", ",", "lkh", ",", "rand_proj", ",", "pca1", ",", "pca4", ")", "\n", "save_amt_word_csv", "(", "words", ",", "lkh", ",", "rand_proj", ",", "pca1", ",", "pca4", ")", "\n", "save_amt_word_glove_csv", "(", "words", ",", "lkh", ",", "emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.blur_bow": [[14, 21], ["X.copy", "range", "sklearn.preprocessing.normalize", "scipy.sparse.hstack", "scipy.sparse.hstack", "numpy.exp", "scipy.sparse.hstack", "scipy.sparse.hstack", "numpy.exp"], "function", ["None"], ["def", "blur_bow", "(", "X", ",", "sigma", ")", ":", "\n", "    ", "res", "=", "X", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "11", ")", ":", "\n", "        ", "res", "+=", "scipy", ".", "sparse", ".", "hstack", "(", "[", "X", "[", ":", ",", "i", ":", "]", ",", "X", "[", ":", ",", ":", "i", "]", "]", ")", "*", "np", ".", "exp", "(", "-", "(", "i", "**", "2", ")", "/", "sigma", ")", "\n", "res", "+=", "scipy", ".", "sparse", ".", "hstack", "(", "[", "X", "[", ":", ",", "-", "i", ":", "]", ",", "X", "[", ":", ",", ":", "-", "i", "]", "]", ")", "*", "np", ".", "exp", "(", "-", "(", "i", "**", "2", ")", "/", "sigma", ")", "\n", "", "res", "=", "normalize", "(", "res", ",", "axis", "=", "1", ",", "norm", "=", "'l1'", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.evaluate_D": [[23, 61], ["sklearn.model_selection.GridSearchCV", "sklearn.model_selection.GridSearchCV.fit", "float", "sklearn.neighbors.KNeighborsClassifier", "sklearn.model_selection.GridSearchCV.best_estimator_.score", "range"], "function", ["None"], ["", "def", "evaluate_D", "(", "y_train", ",", "y_test", ",", "D", ",", "D_train", ")", ":", "\n", "    ", "\"\"\"\n    Evaluation using distance metrices\n\n    Parameters\n    ----------\n    y_train : numpy.array\n        Labels of training samples\n        Shape: (n,), where n is the number of training documents\n        y[i] is the label of document i\n\n    y_test : numpy.array\n        Labels of test samples\n        Shape: (m,), where m is the number of test documents\n        y[i] is the label of document i\n\n    D : numpy.array\n        Distance matrix of training and test samples\n        Shape: (n, m), where n is the number of training documents, m is the number of test documents\n        D[i, j] is the distance between training document i and test document j\n\n    D_train : numpy.array\n        Distance matrix of training samples\n        Shape: (n, n), where n is the number of training documents\n        D[i, j] is the distance between training documents i and j\n\n    Returns\n    -------\n    acc : float\n        Accuracy\n    \"\"\"", "\n", "\n", "parameters", "=", "{", "\n", "'n_neighbors'", ":", "[", "i", "for", "i", "in", "range", "(", "1", ",", "20", ")", "]", "\n", "}", "\n", "clf", "=", "GridSearchCV", "(", "KNeighborsClassifier", "(", "metric", "=", "'precomputed'", ")", ",", "parameters", ",", "n_jobs", "=", "-", "1", ")", "\n", "clf", ".", "fit", "(", "D_train", ",", "y_train", ")", "\n", "return", "float", "(", "clf", ".", "best_estimator_", ".", "score", "(", "D", ",", "y_test", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.select_k_sigma": [[63, 104], ["evaluate.blur_bow", "sklearn.metrics.pairwise_distances", "sklearn.model_selection.GridSearchCV", "sklearn.model_selection.GridSearchCV.fit", "sklearn.neighbors.KNeighborsClassifier", "range"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.blur_bow"], ["", "def", "select_k_sigma", "(", "y_train", ",", "X_train", ")", ":", "\n", "    ", "\"\"\"\n    Select the hyperparameter k using validation data\n\n    Parameters\n    ----------\n    y_train : numpy.array\n        Labels of training samples\n        Shape: (n,), where n is the number of training documents\n        y[i] is the label of document i\n\n    X_train : numpy.array\n        BOW vectors of training samples\n        Shape: (n, d), where n is the number of training documents, d is the size of the vocabulary\n        X[i, j] is the number of occurences of word j in document i\n\n    Returns\n    -------\n    best_estimator : KNeighborsClassifier\n        Chosen model\n\n    best_sigma : int\n        Chosen hyperparamter sigma\n    \"\"\"", "\n", "\n", "best_score", "=", "None", "\n", "best_sigma", "=", "None", "\n", "best_estimator", "=", "None", "\n", "for", "sigma", "in", "[", "0.01", ",", "0.1", ",", "1.0", ",", "10.0", ",", "100", ",", "1000", "]", ":", "\n", "        ", "X_blur", "=", "blur_bow", "(", "X_train", ",", "sigma", ")", "\n", "D_train", "=", "pairwise_distances", "(", "X_blur", ",", "metric", "=", "'l1'", ")", "\n", "parameters", "=", "{", "\n", "'n_neighbors'", ":", "[", "i", "for", "i", "in", "range", "(", "1", ",", "20", ")", "]", "\n", "}", "\n", "clf", "=", "GridSearchCV", "(", "KNeighborsClassifier", "(", "metric", "=", "'precomputed'", ")", ",", "parameters", ",", "n_jobs", "=", "-", "1", ")", "\n", "clf", ".", "fit", "(", "D_train", ",", "y_train", ")", "\n", "if", "best_score", "is", "None", "or", "clf", ".", "best_score_", ">", "best_score", ":", "\n", "            ", "best_score", "=", "clf", ".", "best_score_", "\n", "best_sigma", "=", "sigma", "\n", "best_estimator", "=", "clf", ".", "best_estimator_", "\n", "", "", "return", "best_estimator", ",", "best_sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.evaluate_onehot": [[106, 158], ["evaluate.select_k_sigma", "evaluate.blur_bow", "evaluate.blur_bow", "sklearn.metrics.pairwise_distances", "float", "sklearn.preprocessing.normalize", "sklearn.preprocessing.normalize", "sklearn.metrics.pairwise_distances", "sklearn.metrics.pairwise_distances", "evaluate.evaluate_D", "clf.score"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.select_k_sigma", "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.blur_bow", "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.blur_bow", "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.evaluate_D"], ["", "def", "evaluate_onehot", "(", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", ",", "blur_flag", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Evaluation using onhot vectors\n\n    Parameters\n    ----------\n    X_train : numpy.array\n        BOW vectors of training samples\n        Shape: (n, d), where n is the number of training documents, d is the size of the vocabulary\n        X[i, j] is the number of occurences of word j in document i\n\n    y_train : numpy.array\n        Labels of training samples\n        Shape: (n,), where n is the number of training documents\n        y[i] is the label of document i\n\n    X_test : numpy.array\n        BOW vectors of test samples\n        Shape: (m, d), where m is the number of test documents, d is the size of the vocabulary\n        X[i, j] is the number of occurences of word j in document i\n\n    y_test : numpy.array\n        Labels of test samples\n        Shape: (m,), where m is the number of test documents\n        y[i] is the label of document i\n\n    blur_flag: bool\n        Blur the BoW or not\n\n    Returns\n    -------\n    acc : float\n        Accuracy\n    \"\"\"", "\n", "\n", "if", "blur_flag", ":", "\n", "        ", "clf", ",", "sigma", "=", "select_k_sigma", "(", "y_train", ",", "X_train", ")", "\n", "\n", "X_train", "=", "blur_bow", "(", "X_train", ",", "sigma", ")", "\n", "X_test", "=", "blur_bow", "(", "X_test", ",", "sigma", ")", "\n", "\n", "D", "=", "pairwise_distances", "(", "X_test", ",", "X_train", ",", "metric", "=", "'l1'", ")", "\n", "\n", "return", "float", "(", "clf", ".", "score", "(", "D", ",", "y_test", ")", ")", "\n", "", "else", ":", "\n", "        ", "X_train", "=", "normalize", "(", "X_train", ",", "axis", "=", "1", ",", "norm", "=", "'l1'", ")", "\n", "X_test", "=", "normalize", "(", "X_test", ",", "axis", "=", "1", ",", "norm", "=", "'l1'", ")", "\n", "\n", "D", "=", "pairwise_distances", "(", "X_test", ",", "X_train", ",", "metric", "=", "'l1'", ")", "\n", "D_train", "=", "pairwise_distances", "(", "X_train", ",", "metric", "=", "'l1'", ")", "\n", "\n", "return", "evaluate_D", "(", "y_train", ",", "y_test", ",", "D", ",", "D_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.five": [[160, 202], ["range", "numpy.array", "accs.append", "evaluate.evaluate_onehot"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.evaluate_onehot"], ["", "", "def", "five", "(", "data", ",", "X", ",", "y", ",", "blur_flag", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Evaluation for five-fold datasets\n\n    Parameters\n    ----------\n    data : dict\n        Dataset dictionary compatible with the original code\n        data['TR'] is the indices of the training samples\n        data['TE'] is the indices of the test samples\n        The indices are 1-indexed\n\n    X : numpy.array\n        BOW vectors\n        Shape: (n, d), where n is the number of documents, d is the size of the vocabulary\n        X[i, j] is the number of occurences of word j in document i\n\n    y : numpy.array\n        Labels\n        Shape: (n,), where n is the number of documents\n        y[i] is the label of document i\n\n    blur_flag: bool\n        Blur the BoW or not\n\n    Returns\n    -------\n    accs : numpy.array\n        accs.shape is (5,)\n        Each element represents an accuracy for each fold.\n    \"\"\"", "\n", "\n", "accs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "train", "=", "data", "[", "'TR'", "]", "[", "i", "]", "\n", "test", "=", "data", "[", "'TE'", "]", "[", "i", "]", "\n", "X_train", "=", "X", "[", "train", "]", "\n", "y_train", "=", "y", "[", "train", "]", "\n", "X_test", "=", "X", "[", "test", "]", "\n", "y_test", "=", "y", "[", "test", "]", "\n", "accs", ".", "append", "(", "evaluate_onehot", "(", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", ",", "blur_flag", ")", ")", "\n", "", "return", "np", ".", "array", "(", "accs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.fiveD": [[204, 241], ["range", "numpy.array", "accs.append", "evaluate.evaluate_D"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.evaluate_D"], ["", "def", "fiveD", "(", "data", ",", "y", ",", "D", ")", ":", "\n", "    ", "\"\"\"\n    Evaluation for five-fold datasets using a distance matrix\n\n    Parameters\n    ----------\n    data : dict\n        Dataset dictionary compatible with the original code\n        data['TR'] is the indices of the training samples\n        data['TE'] is the indices of the test samples\n        The indices are 1-indexed\n\n    y : numpy.array\n        Labels\n        Shape: (n,), where n is the number of documents\n        y[i] is the label of document i\n\n    D : numpy.array\n        Distance matrix\n        Shape: (n, n), where n is the number of documents\n        D[i, j] is the distance between documents i and j\n\n    Returns\n    -------\n    accs : numpy.array\n        accs.shape is (5,)\n        Each element represents an accuracy for each fold.\n    \"\"\"", "\n", "\n", "accs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "train", "=", "data", "[", "'TR'", "]", "[", "i", "]", "\n", "test", "=", "data", "[", "'TE'", "]", "[", "i", "]", "\n", "y_train", "=", "y", "[", "train", "]", "\n", "y_test", "=", "y", "[", "test", "]", "\n", "accs", ".", "append", "(", "evaluate_D", "(", "y_train", ",", "y_test", ",", "D", "[", "test", "]", "[", ":", ",", "train", "]", ",", "D", "[", "train", "]", "[", ":", ",", "train", "]", ")", ")", "\n", "", "return", "np", ".", "array", "(", "accs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.load_order": [[243, 249], ["open", "order.append", "r.strip"], "function", ["None"], ["", "def", "load_order", "(", "filepath", ",", "word_to_id", ")", ":", "\n", "    ", "order", "=", "[", "]", "\n", "with", "open", "(", "filepath", ")", "as", "f", ":", "\n", "        ", "for", "r", "in", "f", ":", "\n", "            ", "order", ".", "append", "(", "word_to_id", "[", "r", ".", "strip", "(", ")", "]", ")", "\n", "", "", "return", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.evaluate_five": [[251, 277], ["print", "print", "scipy.io.loadmat", "scipy.io.loadmat", "print", "util.load_glove", "print", "evaluate.load_order", "print", "numpy.load", "print", "len", "evaluate.five", "res[].mean", "res[].std", "evaluate.five", "res[].mean", "res[].std", "evaluate.fiveD", "res[].mean", "res[].std"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.util.load_glove", "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.load_order", "home.repos.pwc.inspect_result.joisino_wordtour.None.preprocess.load", "home.repos.pwc.inspect_result.joisino_wordtour.None.preprocess.five", "home.repos.pwc.inspect_result.joisino_wordtour.None.preprocess.five", "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.fiveD"], ["", "def", "evaluate_five", "(", "filename", ",", "wmd_flag", ")", ":", "\n", "    ", "print", "(", "filename", ")", "\n", "print", "(", "'-'", "*", "len", "(", "filename", ")", ")", "\n", "data", "=", "scipy", ".", "io", ".", "loadmat", "(", "'data/{}'", ".", "format", "(", "filename", ")", ")", "\n", "X", "=", "data", "[", "'bow'", "]", "\n", "y", "=", "data", "[", "'Y'", "]", "[", "0", "]", "\n", "\n", "res", "=", "{", "}", "\n", "res", "[", "'BoW'", "]", "=", "(", "1", "-", "five", "(", "data", ",", "X", ",", "y", ",", "blur_flag", "=", "False", ")", ")", "*", "100", "\n", "print", "(", "'BOW {:.1f} {:.1f}'", ".", "format", "(", "res", "[", "'BoW'", "]", ".", "mean", "(", ")", ",", "res", "[", "'BoW'", "]", ".", "std", "(", ")", ")", ")", "\n", "\n", "_", ",", "_", ",", "word_to_id", ",", "_", "=", "load_glove", "(", ")", "\n", "for", "order_filename", "in", "[", "'wordtour.txt'", ",", "'order_randproj.txt'", ",", "'order_pca1.txt'", ",", "'order_pca4.txt'", "]", ":", "\n", "        ", "order", "=", "load_order", "(", "order_filename", ",", "word_to_id", ")", "\n", "res", "[", "order_filename", "]", "=", "(", "1", "-", "five", "(", "data", ",", "X", "[", ":", ",", "order", "]", ",", "y", ")", ")", "*", "100", "\n", "print", "(", "'{} {:.1f} {:.1f}'", ".", "format", "(", "order_filename", ",", "res", "[", "order_filename", "]", ".", "mean", "(", ")", ",", "res", "[", "order_filename", "]", ".", "std", "(", ")", ")", ")", "\n", "\n", "", "if", "wmd_flag", ":", "\n", "        ", "D", "=", "np", ".", "load", "(", "'distance/{}.npy'", ".", "format", "(", "filename", ")", ")", "\n", "\n", "res", "[", "'WMD'", "]", "=", "(", "1", "-", "fiveD", "(", "data", ",", "y", ",", "D", ")", ")", "*", "100", "\n", "print", "(", "'WMD\\t{:.1f} \u00b1 {:.1f}'", ".", "format", "(", "res", "[", "'WMD'", "]", ".", "mean", "(", ")", ",", "res", "[", "'WMD'", "]", ".", "std", "(", ")", ")", ")", "\n", "\n", "", "print", "(", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.evaluate_one": [[279, 308], ["print", "print", "scipy.io.loadmat", "scipy.io.loadmat", "print", "util.load_glove", "print", "evaluate.load_order", "print", "numpy.load", "numpy.load", "print", "len", "evaluate.evaluate_onehot", "evaluate.evaluate_onehot", "evaluate.evaluate_D"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.util.load_glove", "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.load_order", "home.repos.pwc.inspect_result.joisino_wordtour.None.preprocess.load", "home.repos.pwc.inspect_result.joisino_wordtour.None.preprocess.load", "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.evaluate_onehot", "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.evaluate_onehot", "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.evaluate_D"], ["", "def", "evaluate_one", "(", "filename", ",", "wmd_flag", ")", ":", "\n", "    ", "print", "(", "filename", ")", "\n", "print", "(", "'-'", "*", "len", "(", "filename", ")", ")", "\n", "data", "=", "scipy", ".", "io", ".", "loadmat", "(", "'data/{}'", ".", "format", "(", "filename", ")", ")", "\n", "X_train", "=", "data", "[", "'bow_tr'", "]", "\n", "y_train", "=", "data", "[", "'ytr'", "]", "[", "0", "]", "\n", "X_test", "=", "data", "[", "'bow_te'", "]", "\n", "y_test", "=", "data", "[", "'yte'", "]", "[", "0", "]", "\n", "\n", "res", "=", "{", "}", "\n", "res", "[", "'BoW'", "]", "=", "(", "1", "-", "evaluate_onehot", "(", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", ",", "blur_flag", "=", "False", ")", ")", "*", "100", "\n", "print", "(", "'BOW\\t{:.1f}'", ".", "format", "(", "res", "[", "'BoW'", "]", ")", ")", "\n", "\n", "_", ",", "_", ",", "word_to_id", ",", "_", "=", "load_glove", "(", ")", "\n", "for", "order_filename", "in", "[", "'wordtour.txt'", ",", "'order_randproj.txt'", ",", "'order_pca1.txt'", ",", "'order_pca4.txt'", "]", ":", "\n", "        ", "order", "=", "load_order", "(", "order_filename", ",", "word_to_id", ")", "\n", "res", "[", "order_filename", "]", "=", "(", "1", "-", "evaluate_onehot", "(", "X_train", "[", ":", ",", "order", "]", ",", "y_train", ",", "X_test", "[", ":", ",", "order", "]", ",", "y_test", ")", ")", "*", "100", "\n", "print", "(", "'{} {:.1f}'", ".", "format", "(", "order_filename", ",", "res", "[", "order_filename", "]", ")", ")", "\n", "\n", "", "if", "wmd_flag", ":", "\n", "        ", "D", "=", "np", ".", "load", "(", "'distance/{}.npy'", ".", "format", "(", "filename", ")", ")", "\n", "D_train", "=", "np", ".", "load", "(", "'distance/{}-train.npy'", ".", "format", "(", "filename", ")", ")", "\n", "\n", "res", "[", "'WMD'", "]", "=", "(", "1", "-", "evaluate_D", "(", "y_train", ",", "y_test", ",", "D", ",", "D_train", ")", ")", "*", "100", "\n", "print", "(", "'WMD\\t{:.1f}'", ".", "format", "(", "res", "[", "'WMD'", "]", ")", ")", "\n", "\n", "", "print", "(", ")", "\n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.output_summary": [[310, 343], ["print", "print", "li.append", "li.append", "type", "type", "type", "result[].mean", "result[].mean", "result[].mean", "type", "result[].mean", "result[].std"], "function", ["None"], ["", "def", "output_summary", "(", "result", ")", ":", "\n", "    ", "methods", "=", "[", "\n", "(", "'BoW'", ",", "'BoW'", ")", ",", "\n", "(", "'wordtour.txt'", ",", "'WordTour'", ")", ",", "\n", "(", "'order_randproj.txt'", ",", "'RandProj'", ")", ",", "\n", "(", "'order_pca1.txt'", ",", "'PCA1'", ")", ",", "\n", "(", "'order_pca4.txt'", ",", "'PCA4'", ")", ",", "\n", "(", "'WMD'", ",", "'WMD'", ")", ",", "\n", "]", "\n", "for", "method", ",", "method_name", "in", "methods", ":", "\n", "        ", "li", "=", "[", "]", "\n", "for", "result", "in", "results", ":", "\n", "            ", "if", "type", "(", "result", "[", "method", "]", ")", "==", "float", ":", "\n", "                ", "text", "=", "'{:.1f}'", ".", "format", "(", "result", "[", "method", "]", ")", "\n", "", "elif", "type", "(", "result", "[", "method", "]", ")", "==", "np", ".", "ndarray", ":", "\n", "                ", "text", "=", "'{:.1f} $\\\\pm$ {:.1f}'", ".", "format", "(", "result", "[", "method", "]", ".", "mean", "(", ")", ",", "result", "[", "method", "]", ".", "std", "(", ")", ")", "\n", "", "li", ".", "append", "(", "text", ")", "\n", "", "print", "(", "method_name", "+", "' & '", "+", "' & '", ".", "join", "(", "li", ")", "+", "' \\\\\\\\'", ")", "\n", "\n", "", "base", "=", "'wordtour.txt'", "\n", "li", "=", "[", "]", "\n", "for", "result", "in", "results", ":", "\n", "        ", "if", "type", "(", "result", "[", "base", "]", ")", "==", "float", ":", "\n", "            ", "base_val", "=", "result", "[", "base", "]", "\n", "bow_val", "=", "result", "[", "'BoW'", "]", "\n", "wmd_val", "=", "result", "[", "'WMD'", "]", "\n", "", "elif", "type", "(", "result", "[", "base", "]", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "base_val", "=", "result", "[", "base", "]", ".", "mean", "(", ")", "\n", "bow_val", "=", "result", "[", "'BoW'", "]", ".", "mean", "(", ")", "\n", "wmd_val", "=", "result", "[", "'WMD'", "]", ".", "mean", "(", ")", "\n", "", "improve_ratio", "=", "(", "1", "-", "(", "base_val", "-", "wmd_val", ")", "/", "(", "bow_val", "-", "wmd_val", ")", ")", "*", "100", "\n", "li", ".", "append", "(", "'{:.1f}'", ".", "format", "(", "improve_ratio", ")", ")", "\n", "", "print", "(", "'rel.'", "+", "' & '", "+", "' & '", ".", "join", "(", "li", ")", "+", "' \\\\\\\\'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.speed.compute_distance": [[14, 22], ["sklearn.metrics.pairwise_distances", "evaluate.blur_bow", "sklearn.preprocessing.normalize"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.blur_bow"], ["def", "compute_distance", "(", "X", ",", "blur_flag", ")", ":", "\n", "    ", "if", "blur_flag", ":", "\n", "        ", "X", "=", "blur_bow", "(", "X", ",", "10.0", ")", "\n", "", "else", ":", "\n", "        ", "X", "=", "normalize", "(", "X", ",", "axis", "=", "1", ",", "norm", "=", "'l1'", ")", "\n", "\n", "", "D", "=", "pairwise_distances", "(", "X", ",", "X", ",", "metric", "=", "'l1'", ")", "\n", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.speed.evaluate": [[24, 57], ["time.time", "speed.compute_distance", "time.time", "print", "util.load_glove", "evaluate.load_order", "time.time", "speed.compute_distance", "time.time", "print", "numpy.random.seed", "time.time", "range", "time.time", "print", "print", "numpy.random.randint", "sklearn.metrics.pairwise_distances", "ot.emd", "numpy.ones", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.speed.compute_distance", "home.repos.pwc.inspect_result.joisino_wordtour.None.util.load_glove", "home.repos.pwc.inspect_result.joisino_wordtour.None.evaluate.load_order", "home.repos.pwc.inspect_result.joisino_wordtour.None.speed.compute_distance"], ["", "def", "evaluate", "(", "bow", ",", "X", ")", ":", "\n", "    ", "n", "=", "bow", ".", "shape", "[", "0", "]", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "compute_distance", "(", "bow", ",", "False", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "par_element_bow", "=", "(", "end", "-", "start", ")", "/", "(", "n", "*", "n", ")", "\n", "print", "(", "'BoW {:.0f} ns'", ".", "format", "(", "par_element_bow", "*", "1e9", ")", ")", "\n", "\n", "_", ",", "_", ",", "word_to_id", ",", "_", "=", "load_glove", "(", ")", "\n", "order", "=", "load_order", "(", "'wordtour.txt'", ",", "word_to_id", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "compute_distance", "(", "bow", "[", ":", ",", "order", "]", ",", "True", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "par_element_wordtour", "=", "(", "end", "-", "start", ")", "/", "(", "n", "*", "n", ")", "\n", "print", "(", "'WordTour {:.0f} ns'", ".", "format", "(", "par_element_wordtour", "*", "1e9", ")", ")", "\n", "\n", "N", "=", "1000", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "_", "in", "range", "(", "N", ")", ":", "\n", "        ", "i", ",", "j", "=", "np", ".", "random", ".", "randint", "(", "n", ",", "size", "=", "2", ")", "\n", "D", "=", "pairwise_distances", "(", "X", "[", "0", ",", "i", "]", ".", "T", ",", "X", "[", "0", ",", "j", "]", ".", "T", ")", "\n", "a", "=", "np", ".", "ones", "(", "D", ".", "shape", "[", "0", "]", ")", "/", "D", ".", "shape", "[", "0", "]", "\n", "b", "=", "np", ".", "ones", "(", "D", ".", "shape", "[", "1", "]", ")", "/", "D", ".", "shape", "[", "1", "]", "\n", "T", "=", "ot", ".", "emd", "(", "a", ",", "b", ",", "D", ")", "\n", "_", "=", "(", "T", "*", "D", ")", ".", "sum", "(", ")", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "par_element_wmd", "=", "(", "end", "-", "start", ")", "/", "N", "\n", "print", "(", "'WMD {:.2f} ms'", ".", "format", "(", "par_element_wmd", "*", "1e3", ")", ")", "\n", "print", "(", ")", "\n", "\n", "return", "par_element_bow", ",", "par_element_wordtour", ",", "par_element_wmd", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.speed.evaluate_five": [[59, 64], ["print", "print", "scipy.io.loadmat", "scipy.io.loadmat", "speed.evaluate", "len"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.speed.evaluate"], ["", "def", "evaluate_five", "(", "filename", ")", ":", "\n", "    ", "print", "(", "filename", ")", "\n", "print", "(", "'-'", "*", "len", "(", "filename", ")", ")", "\n", "data", "=", "scipy", ".", "io", ".", "loadmat", "(", "'data/{}'", ".", "format", "(", "filename", ")", ")", "\n", "return", "evaluate", "(", "data", "[", "'bow'", "]", ",", "data", "[", "'X'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.speed.evaluate_one": [[66, 71], ["print", "print", "scipy.io.loadmat", "scipy.io.loadmat", "speed.evaluate", "len"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.speed.evaluate"], ["", "def", "evaluate_one", "(", "filename", ")", ":", "\n", "    ", "print", "(", "filename", ")", "\n", "print", "(", "'-'", "*", "len", "(", "filename", ")", ")", "\n", "data", "=", "scipy", ".", "io", ".", "loadmat", "(", "'data/{}'", ".", "format", "(", "filename", ")", ")", "\n", "return", "evaluate", "(", "data", "[", "'bow_tr'", "]", ",", "data", "[", "'xtr'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.speed.output_summary": [[73, 88], ["print", "enumerate", "print", "enumerate", "print", "enumerate", "print", "print", "print", "len", "len", "len"], "function", ["None"], ["", "def", "output_summary", "(", "results", ")", ":", "\n", "    ", "print", "(", "'BoW'", ",", "end", "=", "' & '", ")", "\n", "for", "i", ",", "result", "in", "enumerate", "(", "results", ")", ":", "\n", "        ", "end", "=", "' \\\\\\\\\\n'", "if", "i", "==", "len", "(", "results", ")", "-", "1", "else", "' & '", "\n", "print", "(", "'{:.0f} \\\\textbf{{ns}}'", ".", "format", "(", "result", "[", "0", "]", "*", "1e9", ")", ",", "end", "=", "end", ")", "\n", "\n", "", "print", "(", "'WordTour'", ",", "end", "=", "' & '", ")", "\n", "for", "i", ",", "result", "in", "enumerate", "(", "results", ")", ":", "\n", "        ", "end", "=", "' \\\\\\\\\\n'", "if", "i", "==", "len", "(", "results", ")", "-", "1", "else", "' & '", "\n", "print", "(", "'{:.0f} \\\\textbf{{ns}}'", ".", "format", "(", "result", "[", "1", "]", "*", "1e9", ")", ",", "end", "=", "end", ")", "\n", "\n", "", "print", "(", "'WMD'", ",", "end", "=", "' & '", ")", "\n", "for", "i", ",", "result", "in", "enumerate", "(", "results", ")", ":", "\n", "        ", "end", "=", "' \\\\\\\\\\n'", "if", "i", "==", "len", "(", "results", ")", "-", "1", "else", "' & '", "\n", "print", "(", "'{:.2f} \\\\textbf{{ms}}'", ".", "format", "(", "result", "[", "2", "]", "*", "1e3", ")", ",", "end", "=", "end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.preprocess.load": [[19, 49], ["[].reshape", "numpy.array", "codecs.open", "labels.append", "[].reshape.append", "r.split", "len", "r.split", "len", "numpy.array", "numpy.array", "vecs.append", "data.append", "col.append", "row.append", "len"], "function", ["None"], ["", "", "def", "load", "(", "filename", ",", "label_ma", "=", "None", ",", "remove_stopwords", "=", "True", ")", ":", "\n", "    ", "row", "=", "[", "]", "\n", "col", "=", "[", "]", "\n", "data", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "if", "label_ma", "is", "None", ":", "\n", "        ", "label_ma", "=", "{", "}", "\n", "", "X", "=", "[", "]", "\n", "with", "codecs", ".", "open", "(", "filename", ",", "'r'", ",", "'utf-8'", ",", "'ignore'", ")", "as", "f", ":", "\n", "        ", "for", "r", "in", "f", ":", "\n", "            ", "vecs", "=", "[", "]", "\n", "for", "w", "in", "r", ".", "split", "(", ")", "[", "1", ":", "]", ":", "\n", "                ", "if", "not", "(", "remove_stopwords", "and", "w", "in", "stopwords", ")", ":", "\n", "                    ", "if", "w", "in", "word_to_id", ":", "\n", "                        ", "vecs", ".", "append", "(", "word_to_embedding", "[", "w", "]", ")", "\n", "w", "=", "word_to_id", "[", "w", "]", "\n", "data", ".", "append", "(", "1", ")", "\n", "col", ".", "append", "(", "w", ")", "\n", "row", ".", "append", "(", "len", "(", "labels", ")", ")", "\n", "", "", "", "if", "len", "(", "vecs", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "label", "=", "r", ".", "split", "(", ")", "[", "0", "]", "\n", "if", "label", "not", "in", "label_ma", ":", "\n", "                ", "label_ma", "[", "label", "]", "=", "len", "(", "label_ma", ")", "\n", "", "label", "=", "label_ma", "[", "label", "]", "\n", "labels", ".", "append", "(", "label", ")", "\n", "X", ".", "append", "(", "np", ".", "array", "(", "vecs", ")", ".", "T", ")", "\n", "", "", "X", "=", "np", ".", "array", "(", "X", "+", "[", "[", "]", "]", ",", "dtype", "=", "object", ")", "[", ":", "-", "1", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "y", "=", "np", ".", "array", "(", "labels", ")", "\n", "return", "X", ",", "y", ",", "data", ",", "row", ",", "col", ",", "label_ma", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.preprocess.five": [[51, 86], ["print", "preprocess.load", "scipy.sparse.csr_matrix", "len", "sklearn.metrics.pairwise_distances", "numpy.ones", "numpy.random.seed", "numpy.random.permutation", "range", "numpy.vstack", "numpy.vstack", "scipy.io.savemat", "scipy.sparse.coo_matrix", "numpy.arange", "sklearn.model_selection.train_test_split", "np.vstack.append", "np.vstack.append", "numpy.arange", "numpy.arange", "numpy.arange", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.preprocess.load"], ["", "def", "five", "(", "rawfile", ",", "tofile", ",", "remove_stopwords", "=", "True", ")", ":", "\n", "    ", "print", "(", "rawfile", ")", "\n", "X", ",", "y", ",", "data", ",", "row", ",", "col", ",", "_", "=", "load", "(", "rawfile", ",", "remove_stopwords", "=", "remove_stopwords", ")", "\n", "bow", "=", "csr_matrix", "(", "coo_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "len", "(", "y", ")", ",", "len", "(", "word_to_id", ")", ")", ")", ")", "\n", "\n", "n", "=", "len", "(", "y", ")", "\n", "D", "=", "pairwise_distances", "(", "bow", ")", "\n", "D", "[", "np", ".", "arange", "(", "n", ")", ",", "np", ".", "arange", "(", "n", ")", "]", "=", "1", "\n", "dup", "=", "(", "D", "==", "0", ")", "\n", "mask", "=", "np", ".", "ones", "(", "n", ",", "dtype", "=", "int", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "n", ")", ":", "\n", "        ", "if", "(", "dup", "[", "i", "]", "*", "mask", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "mask", "[", "i", "]", "=", "0", "\n", "", "", "ind", "=", "np", ".", "arange", "(", "n", ")", "[", "mask", "==", "1", "]", "\n", "bow", "=", "bow", "[", "ind", "]", "\n", "X", "=", "X", "[", ":", ",", "ind", "]", "\n", "y", "=", "y", "[", "ind", "]", "\n", "\n", "train", "=", "[", "]", "\n", "test", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "train_i", ",", "test_i", "=", "train_test_split", "(", "np", ".", "arange", "(", "len", "(", "y", ")", ")", ",", "test_size", "=", "0.3", ",", "random_state", "=", "i", ")", "\n", "train", ".", "append", "(", "train_i", ")", "\n", "test", ".", "append", "(", "test_i", ")", "\n", "", "train", "=", "np", ".", "vstack", "(", "train", ")", "\n", "test", "=", "np", ".", "vstack", "(", "test", ")", "\n", "dic", "=", "{", "\n", "'X'", ":", "X", ",", "\n", "'Y'", ":", "y", ",", "\n", "'TR'", ":", "train", ",", "\n", "'TE'", ":", "test", ",", "\n", "'bow'", ":", "bow", ",", "\n", "}", "\n", "scipy", ".", "io", ".", "savemat", "(", "tofile", ",", "dic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.preprocess.one": [[88, 122], ["print", "preprocess.load", "preprocess.load", "scipy.sparse.csr_matrix", "sklearn.metrics.pairwise_distances", "numpy.ones", "numpy.random.seed", "numpy.random.permutation", "scipy.io.savemat", "scipy.sparse.coo_matrix", "len", "len", "numpy.arange", "len", "len", "len", "numpy.arange", "numpy.arange", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.joisino_wordtour.None.preprocess.load", "home.repos.pwc.inspect_result.joisino_wordtour.None.preprocess.load"], ["", "def", "one", "(", "rawfile_train", ",", "rawfile_test", ",", "tofile", ",", "remove_stopwords", "=", "True", ")", ":", "\n", "    ", "print", "(", "rawfile_train", ",", "rawfile_test", ")", "\n", "xtr", ",", "ytr", ",", "data_tr", ",", "row_tr", ",", "col_tr", ",", "label_ma", "=", "load", "(", "rawfile_train", ",", "remove_stopwords", "=", "remove_stopwords", ")", "\n", "xte", ",", "yte", ",", "data_te", ",", "row_te", ",", "col_te", ",", "label_ma", "=", "load", "(", "rawfile_test", ",", "label_ma", ",", "remove_stopwords", "=", "remove_stopwords", ")", "\n", "row_te", "=", "[", "row", "+", "len", "(", "ytr", ")", "for", "row", "in", "row_te", "]", "\n", "bow", "=", "csr_matrix", "(", "coo_matrix", "(", "(", "data_tr", "+", "data_te", ",", "(", "row_tr", "+", "row_te", ",", "col_tr", "+", "col_te", ")", ")", ",", "shape", "=", "(", "len", "(", "ytr", ")", "+", "len", "(", "yte", ")", ",", "len", "(", "word_to_id", ")", ")", ")", ")", "\n", "\n", "n", "=", "len", "(", "ytr", ")", "+", "len", "(", "yte", ")", "\n", "D", "=", "pairwise_distances", "(", "bow", ")", "\n", "D", "[", "np", ".", "arange", "(", "n", ")", ",", "np", ".", "arange", "(", "n", ")", "]", "=", "1", "\n", "dup", "=", "(", "D", "==", "0", ")", "\n", "mask", "=", "np", ".", "ones", "(", "n", ",", "dtype", "=", "int", ")", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "for", "i", "in", "np", ".", "random", ".", "permutation", "(", "n", ")", ":", "\n", "        ", "if", "(", "dup", "[", "i", "]", "*", "mask", ")", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "mask", "[", "i", "]", "=", "0", "\n", "", "", "ind", "=", "np", ".", "arange", "(", "n", ")", "[", "mask", "==", "1", "]", "\n", "bow", "=", "bow", "[", "ind", "]", "\n", "xte", "=", "xte", "[", ":", ",", "ind", "[", "ind", ">=", "len", "(", "ytr", ")", "]", "-", "len", "(", "ytr", ")", "]", "\n", "xtr", "=", "xtr", "[", ":", ",", "ind", "[", "ind", "<", "len", "(", "ytr", ")", "]", "]", "\n", "yte", "=", "yte", "[", "ind", "[", "ind", ">=", "len", "(", "ytr", ")", "]", "-", "len", "(", "ytr", ")", "]", "\n", "ytr", "=", "ytr", "[", "ind", "[", "ind", "<", "len", "(", "ytr", ")", "]", "]", "\n", "\n", "bow_tr", "=", "bow", "[", ":", "len", "(", "ytr", ")", "]", "\n", "bow_te", "=", "bow", "[", "len", "(", "ytr", ")", ":", "]", "\n", "dic", "=", "{", "\n", "'xtr'", ":", "xtr", ",", "\n", "'xte'", ":", "xte", ",", "\n", "'ytr'", ":", "ytr", ",", "\n", "'yte'", ":", "yte", ",", "\n", "'bow_tr'", ":", "bow_tr", ",", "\n", "'bow_te'", ":", "bow_te", "\n", "}", "\n", "scipy", ".", "io", ".", "savemat", "(", "tofile", ",", "dic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.joisino_wordtour.None.util.load_glove": [[4, 22], ["numpy.array", "open", "enumerate", "r.split", "numpy.array", "words.append", "np.array.append", "list", "len", "map"], "function", ["None"], ["def", "load_glove", "(", "filepath", "=", "'glove.6B/glove.6B.300d.txt'", ",", "n", "=", "40000", ")", ":", "\n", "    ", "words", "=", "[", "]", "\n", "embeddings", "=", "[", "]", "\n", "word_to_embedding", "=", "{", "}", "\n", "word_to_id", "=", "{", "}", "\n", "with", "open", "(", "filepath", ")", "as", "f", ":", "\n", "        ", "for", "i", ",", "r", "in", "enumerate", "(", "f", ")", ":", "\n", "            ", "li", "=", "r", ".", "split", "(", ")", "\n", "word", "=", "li", "[", "0", "]", "\n", "embedding", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "li", "[", "1", ":", "]", ")", ")", ")", "\n", "words", ".", "append", "(", "word", ")", "\n", "embeddings", ".", "append", "(", "embedding", ")", "\n", "word_to_embedding", "[", "word", "]", "=", "embedding", "\n", "word_to_id", "[", "word", "]", "=", "i", "\n", "if", "len", "(", "word_to_id", ")", "==", "n", ":", "\n", "                ", "break", "\n", "", "", "", "embeddings", "=", "np", ".", "array", "(", "embeddings", ")", "\n", "return", "words", ",", "embeddings", ",", "word_to_id", ",", "word_to_embedding", "\n", "", ""]]}