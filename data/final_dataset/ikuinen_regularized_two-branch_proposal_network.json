{"home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.train.parse_args": [[6, 13], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.train.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--config-path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "required", "=", "True", ",", "\n", "help", "=", "''", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.train.debug": [[15, 22], ["open", "json.load", "json.load.items", "exit", "print", "v.keys"], "function", ["None"], ["", "def", "debug", "(", ")", ":", "\n", "    ", "import", "json", "\n", "with", "open", "(", "'data/didemo/train_data.json'", ")", "as", "fp", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fp", ")", "\n", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "v", ".", "keys", "(", ")", ")", "\n", "", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.train.main": [[24, 51], ["random.seed", "np.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "logging.basicConfig", "utils.load_json", "print", "MainRunner", "MainRunner.train"], "function", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.scripts.build_vocab.load_json", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.train"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "import", "logging", "\n", "import", "numpy", "as", "np", "\n", "import", "random", "\n", "import", "torch", "\n", "from", "runners", "import", "MainRunner", "\n", "\n", "# debug()", "\n", "# exit(0)", "\n", "\n", "seed", "=", "8", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", "+", "1", ")", "\n", "torch", ".", "manual_seed", "(", "seed", "+", "2", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", "+", "3", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", "+", "4", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ",", "format", "=", "'%(asctime)s - %(message)s'", ")", "\n", "# logging.info('base seed {}'.format(seed))", "\n", "args", "=", "load_json", "(", "args", ".", "config_path", ")", "\n", "print", "(", "args", ")", "\n", "\n", "runner", "=", "MainRunner", "(", "args", ")", "\n", "\n", "runner", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.AverageMeter.__init__": [[36, 38], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.StopwatchMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.AverageMeter.reset": [[39, 44], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.AverageMeter.update": [[45, 50], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.__init__": [[55, 57], ["utils.TimeMeter.reset"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.StopwatchMeter.reset"], ["def", "__init__", "(", "self", ",", "init", "=", "0", ")", ":", "\n", "        ", "self", ".", "reset", "(", "init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.reset": [[58, 62], ["time.time"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "init", "=", "0", ")", ":", "\n", "        ", "self", ".", "init", "=", "init", "\n", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "n", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.update": [[63, 65], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", "=", "1", ")", ":", "\n", "        ", "self", ".", "n", "+=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.avg": [[66, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "/", "self", ".", "elapsed_time", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.elapsed_time": [[70, 73], ["time.time"], "methods", ["None"], ["", "@", "property", "\n", "def", "elapsed_time", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "init", "+", "(", "time", ".", "time", "(", ")", "-", "self", ".", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.StopwatchMeter.__init__": [[78, 80], ["utils.StopwatchMeter.reset"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.StopwatchMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.StopwatchMeter.start": [[81, 83], ["time.time"], "methods", ["None"], ["", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.StopwatchMeter.stop": [[84, 90], ["time.time"], "methods", ["None"], ["", "def", "stop", "(", "self", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "start_time", "is", "not", "None", ":", "\n", "            ", "delta", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "sum", "+=", "delta", "\n", "self", ".", "n", "+=", "n", "\n", "self", ".", "start_time", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.StopwatchMeter.reset": [[91, 95], ["None"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum", "=", "0", "\n", "self", ".", "n", "=", "0", "\n", "self", ".", "start_time", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.StopwatchMeter.avg": [[96, 99], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sum", "/", "self", ".", "n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.load_json": [[7, 10], ["open", "json.load"], "function", ["None"], ["def", "load_json", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "encoding", "=", "'utf8'", ")", "as", "fr", ":", "\n", "        ", "return", "json", ".", "load", "(", "fr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.iou": [[12, 31], ["isinstance", "isinstance", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.maximum", "isinstance", "isinstance", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "iou", "(", "pred", ",", "gt", ")", ":", "\n", "    ", "assert", "isinstance", "(", "pred", ",", "list", ")", "and", "isinstance", "(", "gt", ",", "list", ")", "\n", "pred_is_list", "=", "isinstance", "(", "pred", "[", "0", "]", ",", "list", ")", "\n", "gt_is_list", "=", "isinstance", "(", "gt", "[", "0", "]", ",", "list", ")", "\n", "if", "not", "pred_is_list", ":", "pred", "=", "[", "pred", "]", "\n", "if", "not", "gt_is_list", ":", "gt", "=", "[", "gt", "]", "\n", "pred", ",", "gt", "=", "np", ".", "array", "(", "pred", ")", ",", "np", ".", "array", "(", "gt", ")", "\n", "inter_left", "=", "np", ".", "maximum", "(", "pred", "[", ":", ",", "0", ",", "None", "]", ",", "gt", "[", "None", ",", ":", ",", "0", "]", ")", "\n", "inter_right", "=", "np", ".", "minimum", "(", "pred", "[", ":", ",", "1", ",", "None", "]", ",", "gt", "[", "None", ",", ":", ",", "1", "]", ")", "\n", "inter", "=", "np", ".", "maximum", "(", "0.0", ",", "inter_right", "-", "inter_left", ")", "\n", "union_left", "=", "np", ".", "minimum", "(", "pred", "[", ":", ",", "0", ",", "None", "]", ",", "gt", "[", "None", ",", ":", ",", "0", "]", ")", "\n", "union_right", "=", "np", ".", "maximum", "(", "pred", "[", ":", ",", "1", ",", "None", "]", ",", "gt", "[", "None", ",", ":", ",", "1", "]", ")", "\n", "union", "=", "np", ".", "maximum", "(", "0.0", ",", "union_right", "-", "union_left", ")", "\n", "overlap", "=", "1.0", "*", "(", "inter", "+", "1e-10", ")", "/", "(", "union", "+", "1e-10", ")", "\n", "if", "not", "gt_is_list", ":", "\n", "        ", "overlap", "=", "overlap", "[", ":", ",", "0", "]", "\n", "", "if", "not", "pred_is_list", ":", "\n", "        ", "overlap", "=", "overlap", "[", "0", "]", "\n", "", "return", "overlap", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.activitynet.ActivityNetDataset.__init__": [[12, 150], ["datasets.base_dataset.BaseDataset.__init__", "numpy.reshape", "numpy.reshape", "numpy.stack", "print", "print", "torch.from_numpy", "torch.from_numpy", "datasets.base_dataset.build_collate_data", "numpy.repeat", "numpy.repeat", "numpy.reshape", "numpy.reshape", "numpy.stack", "tmp[].extend", "tmp[].extend", "tmp[].extend", "enumerate", "numpy.concatenate", "utils.iou", "numpy.zeros_like().astype", "numpy.argsort", "range", "numpy.zeros().astype", "range", "print", "exit", "numpy.repeat", "numpy.repeat", "enumerate", "activitynet.ActivityNetDataset.props.tolist", "activitynet.ActivityNetDataset.props.tolist", "range", "activitynet.ActivityNetDataset.props_graph.sum", "numpy.arange", "numpy.arange", "list", "activitynet.ActivityNetDataset.props.append", "numpy.zeros_like", "numpy.zeros", "numpy.arange", "numpy.arange", "range", "numpy.stack", "len", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.build_collate_data", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.iou"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "vocab", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data_path", ",", "vocab", ",", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "num_clips", "=", "args", "[", "'max_num_frames'", "]", "//", "args", "[", "'target_stride'", "]", "\n", "start", "=", "np", ".", "reshape", "(", "np", ".", "repeat", "(", "np", ".", "arange", "(", "0", ",", "self", ".", "num_clips", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "axis", "=", "1", ",", "\n", "repeats", "=", "self", ".", "num_clips", ")", ",", "[", "-", "1", "]", ")", "\n", "end", "=", "np", ".", "reshape", "(", "np", ".", "repeat", "(", "np", ".", "arange", "(", "1", ",", "self", ".", "num_clips", "+", "1", ")", "[", "np", ".", "newaxis", ",", ":", "]", ",", "axis", "=", "0", ",", "\n", "repeats", "=", "self", ".", "num_clips", ")", ",", "[", "-", "1", "]", ")", "\n", "self", ".", "props", "=", "np", ".", "stack", "(", "[", "start", ",", "end", "]", ",", "-", "1", ")", "\n", "\n", "# predefined proposals", "\n", "# idx = self.props[:, 0] < self.props[:, 1]", "\n", "# self.props = self.props[idx]", "\n", "# keep = np.zeros([self.props.shape[0]]).astype(np.bool)", "\n", "#", "\n", "# for i, (s, e) in enumerate(self.props):", "\n", "#     d = e - s", "\n", "#     if 16 < d <= 32:", "\n", "#         if s % 2 != 0:", "\n", "#             continue", "\n", "#     elif d > 32:", "\n", "#         if s % 4 != 0:", "\n", "#             continue", "\n", "#     if d in [8, 15, 24, 32, 48, 56, 64]:", "\n", "#         keep[i] = True", "\n", "# self.props = self.props[keep]", "\n", "# print(self.props)", "\n", "# print(self.props)", "\n", "# exit(0)", "\n", "\n", "# predefined proposals", "\n", "\n", "# idx = self.props[:, 0] % 2 == 0", "\n", "# self.props = self.props[idx]", "\n", "\n", "if", "'is_training'", "in", "kwargs", "and", "False", ":", "\n", "            ", "start", "=", "np", ".", "reshape", "(", "np", ".", "repeat", "(", "np", ".", "arange", "(", "0", ",", "self", ".", "num_clips", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "axis", "=", "1", ",", "\n", "repeats", "=", "self", ".", "num_clips", ")", ",", "[", "-", "1", "]", ")", "\n", "end", "=", "np", ".", "reshape", "(", "np", ".", "repeat", "(", "np", ".", "arange", "(", "1", ",", "self", ".", "num_clips", "+", "1", ")", "[", "np", ".", "newaxis", ",", ":", "]", ",", "axis", "=", "0", ",", "\n", "repeats", "=", "self", ".", "num_clips", ")", ",", "[", "-", "1", "]", ")", "\n", "self", ".", "props", "=", "np", ".", "stack", "(", "[", "start", ",", "end", "]", ",", "-", "1", ")", "\n", "idx", "=", "self", ".", "props", "[", ":", ",", "0", "]", "<", "self", ".", "props", "[", ":", ",", "1", "]", "\n", "self", ".", "props", "=", "self", ".", "props", "[", "idx", "]", "\n", "idx", "=", "(", "self", ".", "props", "[", ":", ",", "1", "]", "-", "self", ".", "props", "[", ":", ",", "0", "]", ")", "<=", "self", ".", "num_clips", "//", "2", "\n", "self", ".", "props", "=", "self", ".", "props", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "props", "=", "[", "]", "\n", "tmp", "=", "[", "[", "1", "]", ",", "[", "2", "]", ",", "[", "2", "]", "]", "\n", "tmp", "[", "0", "]", ".", "extend", "(", "[", "1", "]", "*", "15", ")", "\n", "tmp", "[", "1", "]", ".", "extend", "(", "[", "1", "]", "*", "7", ")", "\n", "tmp", "[", "2", "]", ".", "extend", "(", "[", "1", "]", "*", "7", ")", "\n", "acum_layers", "=", "0", "\n", "stride", "=", "1", "\n", "for", "scale_idx", ",", "strides", "in", "enumerate", "(", "tmp", ")", ":", "\n", "                ", "for", "i", ",", "stride_i", "in", "enumerate", "(", "strides", ")", ":", "\n", "                    ", "stride", "=", "stride", "*", "stride_i", "\n", "keep", "=", "False", "\n", "if", "'is_training'", "in", "kwargs", ":", "\n", "                        ", "if", "scale_idx", "==", "0", "and", "i", "in", "[", "7", ",", "15", "]", ":", "\n", "                            ", "keep", "=", "True", "\n", "", "elif", "scale_idx", "==", "1", "and", "(", "i", "in", "[", "3", ",", "7", "]", ")", ":", "\n", "                            ", "keep", "=", "True", "\n", "", "elif", "scale_idx", "==", "2", "and", "(", "i", "in", "[", "3", ",", "5", ",", "7", "]", ")", ":", "\n", "                            ", "keep", "=", "True", "\n", "", "", "else", ":", "\n", "                        ", "if", "scale_idx", "==", "0", "and", "i", "in", "[", "7", ",", "15", "]", ":", "\n", "                            ", "keep", "=", "True", "\n", "", "elif", "scale_idx", "==", "1", "and", "(", "i", "in", "[", "3", ",", "7", "]", ")", ":", "\n", "                            ", "keep", "=", "True", "\n", "", "elif", "scale_idx", "==", "2", "and", "(", "i", "in", "[", "3", ",", "5", ",", "7", "]", ")", ":", "\n", "                            ", "keep", "=", "True", "\n", "", "", "if", "not", "keep", ":", "\n", "                        ", "continue", "\n", "", "ori_s_idxs", "=", "list", "(", "range", "(", "0", ",", "self", ".", "num_clips", "-", "acum_layers", "-", "i", "*", "stride", ",", "stride", ")", ")", "\n", "ori_e_idxs", "=", "[", "s_idx", "+", "acum_layers", "+", "i", "*", "stride", "for", "s_idx", "in", "ori_s_idxs", "]", "\n", "\n", "self", ".", "props", ".", "append", "(", "np", ".", "stack", "(", "[", "ori_s_idxs", ",", "ori_e_idxs", "]", ",", "-", "1", ")", ")", "\n", "# print(ori_s_idxs)", "\n", "# print(ori_e_idxs)", "\n", "# print('----')", "\n", "", "acum_layers", "+=", "stride", "*", "(", "len", "(", "strides", ")", "+", "1", ")", "\n", "", "self", ".", "props", "=", "np", ".", "concatenate", "(", "self", ".", "props", ",", "0", ")", "\n", "self", ".", "props", "[", ":", ",", "1", "]", "+=", "1", "\n", "\n", "# print(self.props)", "\n", "# exit(0)", "\n", "\n", "# if 'is_training' in kwargs:", "\n", "#     idx = self.props[:, 1] - self.props[:, 0] > 8", "\n", "#     # print(self.props[:, 1] - self.props[:, 0])", "\n", "#     self.props = self.props[idx]", "\n", "#     # print('fuck')", "\n", "", "print", "(", "'candidate proposals'", ",", "self", ".", "props", ".", "shape", ")", "\n", "# exit(0)", "\n", "\n", "# predefined proposals graph", "\n", "iou_predefined", "=", "True", "\n", "print", "(", "'iou_predefined graph'", ",", "iou_predefined", ")", "\n", "if", "iou_predefined", ":", "\n", "# self.props_graph = iou(self.props.tolist(), self.props.tolist())", "\n", "#", "\n", "# min_iou, max_iou = 0.45, 1.0", "\n", "# self.props_graph = (self.props_graph - min_iou) / (max_iou - min_iou)", "\n", "# idx = self.props_graph < 0", "\n", "# self.props_graph[:, :] = 1.0", "\n", "# self.props_graph = self.props_graph.astype(np.int32)", "\n", "# self.props_graph[idx] = 0", "\n", "            ", "props_iou", "=", "iou", "(", "self", ".", "props", ".", "tolist", "(", ")", ",", "self", ".", "props", ".", "tolist", "(", ")", ")", "\n", "self", ".", "props_graph", "=", "np", ".", "zeros_like", "(", "props_iou", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "sort_idx", "=", "np", ".", "argsort", "(", "-", "props_iou", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "props", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "self", ".", "props_graph", "[", "i", ",", "sort_idx", "[", "i", "]", "]", "=", "1", "\n", "low_idx", "=", "props_iou", "[", "i", "]", "<", "0.6", "\n", "self", ".", "props_graph", "[", "i", ",", "low_idx", "]", "=", "0", "\n", "# print(self.props_graph.sum(axis=-1))", "\n", "# exit(0)", "\n", "", "", "else", ":", "\n", "            ", "num_props", "=", "self", ".", "props", ".", "shape", "[", "0", "]", "\n", "self", ".", "props_graph", "=", "np", ".", "zeros", "(", "[", "num_props", ",", "num_props", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "num_props", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_props", ")", ":", "\n", "                    ", "if", "abs", "(", "self", ".", "props", "[", "i", ",", "0", "]", "-", "self", ".", "props", "[", "j", ",", "0", "]", ")", "<=", "4", "and", "abs", "(", "self", ".", "props", "[", "i", ",", "1", "]", "-", "self", ".", "props", "[", "j", ",", "1", "]", ")", "<=", "4", ":", "\n", "                        ", "self", ".", "props_graph", "[", "i", ",", "j", "]", "=", "1", "\n", "", "", "", "print", "(", "self", ".", "props_graph", ".", "sum", "(", "axis", "=", "-", "1", ")", ")", "\n", "exit", "(", "0", ")", "\n", "# print(self.props_graph[:20, :20])", "\n", "# exit(0)", "\n", "\n", "# x1 = np.exp(self.props_graph)", "\n", "# self.props_graph = (x1 / np.sum(x1, keepdims=True, axis=-1)).astype(np.float32)", "\n", "\n", "", "self", ".", "props_torch", "=", "torch", ".", "from_numpy", "(", "self", ".", "props", ")", "\n", "self", ".", "props_graph_torch", "=", "torch", ".", "from_numpy", "(", "self", ".", "props_graph", ")", "\n", "\n", "self", ".", "collate_fn", "=", "build_collate_data", "(", "args", "[", "'max_num_frames'", "]", ",", "args", "[", "'max_num_words'", "]", ",", "\n", "args", "[", "'frame_dim'", "]", ",", "args", "[", "'word_dim'", "]", ",", "\n", "self", ".", "props_torch", ",", "self", ".", "props_graph_torch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.activitynet.ActivityNetDataset._load_frame_features": [[151, 154], ["h5py.File", "numpy.asarray().astype", "os.path.join", "numpy.asarray"], "methods", ["None"], ["", "def", "_load_frame_features", "(", "self", ",", "vid", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", "[", "'feature_path'", "]", ",", "'%s.h5'", "%", "vid", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "fr", "[", "'feature'", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.activitynet.ActivityNetDataset.collate_data": [[155, 157], ["activitynet.ActivityNetDataset.collate_fn"], "methods", ["None"], ["", "", "def", "collate_data", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "self", ".", "collate_fn", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.activitynet.ActivityNet.__init__": [[160, 164], ["datasets.base_dataset.BaseDataset.__init__", "datasets.base_dataset.build_collate_data"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.build_collate_data"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "vocab", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data_path", ",", "vocab", ",", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "collate_fn", "=", "build_collate_data", "(", "args", "[", "'max_num_frames'", "]", ",", "args", "[", "'max_num_words'", "]", ",", "\n", "args", "[", "'frame_dim'", "]", ",", "args", "[", "'word_dim'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.activitynet.ActivityNet._load_frame_features": [[165, 168], ["h5py.File", "numpy.asarray().astype", "os.path.join", "numpy.asarray"], "methods", ["None"], ["", "def", "_load_frame_features", "(", "self", ",", "vid", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", "[", "'feature_path'", "]", ",", "'%s.h5'", "%", "vid", ")", ",", "'r'", ")", "as", "fr", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "fr", "[", "'feature'", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.activitynet.ActivityNet.collate_data": [[169, 171], ["activitynet.ActivityNet.collate_fn"], "methods", ["None"], ["", "", "def", "collate_data", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "self", ".", "collate_fn", "(", "samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.BaseDataset.__init__": [[19, 27], ["utils.load_json"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.scripts.build_vocab.load_json"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "vocab", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data", "=", "load_json", "(", "data_path", ")", "\n", "self", ".", "ori_data", "=", "self", ".", "data", "\n", "self", ".", "max_num_frames", "=", "args", "[", "'max_num_frames'", "]", "\n", "self", ".", "max_num_words", "=", "args", "[", "'max_num_words'", "]", "\n", "self", ".", "target_stride", "=", "args", "[", "'target_stride'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.BaseDataset.load_data": [[28, 30], ["None"], "methods", ["None"], ["", "def", "load_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.BaseDataset._load_frame_features": [[31, 33], ["None"], "methods", ["None"], ["", "def", "_load_frame_features", "(", "self", ",", "vid", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.BaseDataset.__len__": [[34, 36], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.BaseDataset.__getitem__": [[37, 70], ["float", "base_dataset.BaseDataset._load_frame_features", "torch.tensor().unsqueeze().expand().float", "base_dataset.calculate_IoU_batch", "torch.zeros().float", "w.lower", "base_dataset.BaseDataset.vocab[].astype", "gensim.utils.tokenize", "base_dataset.BaseDataset.props_torch.float", "torch.tensor().unsqueeze().expand", "torch.argmax", "torch.zeros", "props.size", "torch.tensor().unsqueeze", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.charades.CharadesSTA._load_frame_features", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.loss.calculate_IoU_batch"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "vid", ",", "duration", ",", "timestamps", ",", "sentence", "=", "self", ".", "data", "[", "index", "]", "\n", "duration", "=", "float", "(", "duration", ")", "\n", "\n", "words", "=", "[", "w", ".", "lower", "(", ")", "for", "w", "in", "tokenize", "(", "sentence", ")", "]", "\n", "words", "=", "[", "w", "for", "w", "in", "words", "if", "w", "in", "self", ".", "vocab", "]", "\n", "frames_feat", "=", "self", ".", "_load_frame_features", "(", "vid", ")", "\n", "words_feat", "=", "[", "self", ".", "vocab", "[", "w", "]", ".", "astype", "(", "np", ".", "float32", ")", "for", "w", "in", "words", "]", "\n", "\n", "num_clips", "=", "self", ".", "max_num_frames", "//", "self", ".", "target_stride", "\n", "# s_times = torch.arange(0, num_clips).float() * duration / num_clips", "\n", "# e_times = torch.arange(1, num_clips + 1).float() * duration / num_clips", "\n", "\n", "# s_idx = int(timestamps[0] / duration * (num_clips - 1))", "\n", "# e_idx = int(timestamps[1] / duration * num_clips)", "\n", "# frame_gt = np.zeros([num_clips])", "\n", "# frame_gt[s_idx:e_idx] = 1", "\n", "\n", "props", "=", "self", ".", "props_torch", ".", "float", "(", ")", "*", "duration", "/", "num_clips", "\n", "gts", "=", "torch", ".", "tensor", "(", "[", "timestamps", "[", "0", "]", ",", "timestamps", "[", "1", "]", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "props", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "map_gt", "=", "calculate_IoU_batch", "(", "(", "props", "[", ":", ",", "0", "]", ",", "props", "[", ":", ",", "1", "]", ")", ",", "(", "gts", "[", ":", ",", "0", "]", ",", "gts", "[", ":", ",", "1", "]", ")", ")", "\n", "\n", "reg_gt", "=", "self", ".", "props_torch", "[", "torch", ".", "argmax", "(", "map_gt", ")", "]", "\n", "frame_gt", "=", "torch", ".", "zeros", "(", "num_clips", ")", ".", "float", "(", ")", "\n", "frame_gt", "[", "reg_gt", "[", "0", "]", ":", "reg_gt", "[", "1", "]", "-", "1", "]", "=", "1.0", "\n", "\n", "return", "{", "\n", "'frames_feat'", ":", "frames_feat", ",", "\n", "'words_feat'", ":", "words_feat", ",", "\n", "'map_gt'", ":", "map_gt", ",", "\n", "'reg_gt'", ":", "reg_gt", ",", "\n", "'frame_gt'", ":", "frame_gt", ",", "\n", "'raw'", ":", "[", "vid", ",", "duration", ",", "timestamps", ",", "sentence", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.BaseDataset2.__init__": [[74, 82], ["utils.load_json"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.scripts.build_vocab.load_json"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "vocab", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "data", "=", "load_json", "(", "data_path", ")", "\n", "self", ".", "ori_data", "=", "self", ".", "data", "\n", "self", ".", "max_num_frames", "=", "args", "[", "'max_num_frames'", "]", "\n", "self", ".", "max_num_words", "=", "args", "[", "'max_num_words'", "]", "\n", "self", ".", "target_stride", "=", "args", "[", "'target_stride'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.BaseDataset2.load_data": [[83, 85], ["None"], "methods", ["None"], ["", "def", "load_data", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.BaseDataset2._load_frame_features": [[86, 88], ["None"], "methods", ["None"], ["", "def", "_load_frame_features", "(", "self", ",", "vid", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.BaseDataset2.__len__": [[89, 91], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.BaseDataset2.__getitem__": [[92, 115], ["float", "base_dataset.BaseDataset2._load_frame_features", "base_dataset.BaseDataset2.props_torch.float", "torch.tensor().unsqueeze().expand().float", "base_dataset.calculate_IoU_batch", "w.lower", "base_dataset.BaseDataset2.vocab[].astype", "gensim.utils.tokenize", "torch.tensor().unsqueeze().expand", "base_dataset.BaseDataset2.size", "torch.tensor().unsqueeze", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.charades.CharadesSTA._load_frame_features", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.loss.calculate_IoU_batch"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "vid", ",", "duration", ",", "timestamps", ",", "sentence", "=", "self", ".", "data", "[", "index", "]", "\n", "duration", "=", "float", "(", "duration", ")", "\n", "\n", "words", "=", "[", "w", ".", "lower", "(", ")", "for", "w", "in", "tokenize", "(", "sentence", ")", "]", "\n", "words", "=", "[", "w", "for", "w", "in", "words", "if", "w", "in", "self", ".", "vocab", "]", "\n", "frames_feat", "=", "self", ".", "_load_frame_features", "(", "vid", ")", "\n", "words_feat", "=", "[", "self", ".", "vocab", "[", "w", "]", ".", "astype", "(", "np", ".", "float32", ")", "for", "w", "in", "words", "]", "\n", "\n", "# num_clips = self.max_num_frames // self.target_stride", "\n", "# s_times = torch.arange(0, num_clips).float() * duration / num_clips", "\n", "# e_times = torch.arange(1, num_clips + 1).float() * duration / num_clips", "\n", "\n", "props", "=", "self", ".", "props_torch", ".", "float", "(", ")", "\n", "\n", "gts", "=", "torch", ".", "tensor", "(", "[", "timestamps", "[", "0", "]", ",", "timestamps", "[", "1", "]", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "props", ".", "size", "(", "0", ")", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "map_gt", "=", "calculate_IoU_batch", "(", "(", "props", "[", ":", ",", "0", "]", ",", "props", "[", ":", ",", "1", "]", ")", ",", "(", "gts", "[", ":", ",", "0", "]", ",", "gts", "[", ":", ",", "1", "]", ")", ")", "\n", "\n", "return", "{", "\n", "'frames_feat'", ":", "frames_feat", ",", "\n", "'words_feat'", ":", "words_feat", ",", "\n", "'map_gt'", ":", "map_gt", ",", "\n", "'raw'", ":", "[", "vid", ",", "duration", ",", "timestamps", ",", "sentence", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.calculate_IoU_batch": [[9, 16], ["torch.min", "torch.max", "torch.max", "torch.min", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["def", "calculate_IoU_batch", "(", "i0", ",", "i1", ")", ":", "\n", "    ", "union", "=", "(", "torch", ".", "min", "(", "torch", ".", "stack", "(", "[", "i0", "[", "0", "]", ",", "i1", "[", "0", "]", "]", ",", "0", ")", ",", "0", ")", "[", "0", "]", ",", "torch", ".", "max", "(", "torch", ".", "stack", "(", "[", "i0", "[", "1", "]", ",", "i1", "[", "1", "]", "]", ",", "0", ")", ",", "0", ")", "[", "0", "]", ")", "\n", "inter", "=", "(", "torch", ".", "max", "(", "torch", ".", "stack", "(", "[", "i0", "[", "0", "]", ",", "i1", "[", "0", "]", "]", ",", "0", ")", ",", "0", ")", "[", "0", "]", ",", "torch", ".", "min", "(", "torch", ".", "stack", "(", "[", "i0", "[", "1", "]", ",", "i1", "[", "1", "]", "]", ",", "0", ")", ",", "0", ")", "[", "0", "]", ")", "\n", "iou", "=", "1.0", "*", "(", "inter", "[", "1", "]", "-", "inter", "[", "0", "]", "+", "1e-10", ")", "/", "(", "union", "[", "1", "]", "-", "union", "[", "0", "]", "+", "1e-10", ")", "\n", "iou", "[", "union", "[", "1", "]", "-", "union", "[", "0", "]", "<", "-", "1e-5", "]", "=", "0", "\n", "iou", "[", "iou", "<", "0", "]", "=", "0.0", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.build_collate_data": [[118, 206], ["len", "enumerate", "numpy.zeros().astype", "numpy.zeros().astype", "enumerate", "numpy.asarray", "numpy.sqrt", "numpy.exp", "numpy.sum", "range", "numpy.asarray", "batch.update", "frames_len.append", "words_len.append", "min", "np.asarray.append", "numpy.sum", "numpy.random.choice", "np.asarray.append", "min", "min", "numpy.zeros", "numpy.zeros", "len", "numpy.mean", "numpy.round().astype", "map_gt.append", "reg_gt.append", "frame_gt.append", "range", "numpy.power", "len", "len", "len", "len", "len", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.stack", "torch.stack", "torch.stack", "props.unsqueeze", "props_graph.unsqueeze", "max", "numpy.arange", "numpy.round", "[].mean", "numpy.asarray", "numpy.asarray", "len", "len"], "function", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.update"], ["", "", "def", "build_collate_data", "(", "max_num_frames", ",", "max_num_words", ",", "frame_dim", ",", "word_dim", ",", "props", "=", "None", ",", "props_graph", "=", "None", ")", ":", "\n", "    ", "def", "collate_data", "(", "samples", ")", ":", "\n", "        ", "bsz", "=", "len", "(", "samples", ")", "\n", "batch", "=", "{", "\n", "'raw'", ":", "[", "sample", "[", "'raw'", "]", "for", "sample", "in", "samples", "]", ",", "\n", "}", "\n", "\n", "frames_len", "=", "[", "]", "\n", "words_len", "=", "[", "]", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "samples", ")", ":", "\n", "            ", "frames_len", ".", "append", "(", "min", "(", "len", "(", "sample", "[", "'frames_feat'", "]", ")", ",", "max_num_frames", ")", ")", "\n", "words_len", ".", "append", "(", "min", "(", "len", "(", "sample", "[", "'words_feat'", "]", ")", ",", "max_num_words", ")", ")", "\n", "\n", "# frames_feat = np.zeros([bsz, max(frames_len), frame_dim]).astype(np.float32)", "\n", "", "frames_feat", "=", "np", ".", "zeros", "(", "[", "bsz", ",", "max_num_frames", ",", "frame_dim", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "words_feat", "=", "np", ".", "zeros", "(", "[", "bsz", ",", "max", "(", "words_len", ")", ",", "word_dim", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# map_gt = np.zeros([bsz, num_clips, num_clips]).astype(np.float32)", "\n", "map_gt", "=", "[", "]", "\n", "reg_gt", "=", "[", "]", "\n", "frame_gt", "=", "[", "]", "\n", "\n", "rep", "=", "[", "]", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "samples", ")", ":", "\n", "            ", "keep", "=", "min", "(", "len", "(", "sample", "[", "'words_feat'", "]", ")", ",", "words_feat", ".", "shape", "[", "1", "]", ")", "\n", "words_feat", "[", "i", ",", ":", "keep", "]", "=", "sample", "[", "'words_feat'", "]", "[", ":", "keep", "]", "\n", "\n", "rep", ".", "append", "(", "np", ".", "mean", "(", "sample", "[", "'words_feat'", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "if", "len", "(", "sample", "[", "'frames_feat'", "]", ")", "<", "frames_feat", ".", "shape", "[", "1", "]", "and", "False", ":", "\n", "                ", "frames_feat", "[", "i", ",", ":", "len", "(", "sample", "[", "'frames_feat'", "]", ")", "]", "=", "sample", "[", "'frames_feat'", "]", "\n", "", "else", ":", "\n", "# keep_idx = np.linspace(start=0, stop=len(sample['frames_feat']) - 1,", "\n", "#                        num=frames_feat.shape[1]).astype(np.int32)", "\n", "# print(sample['raw'][0], keep_idx)", "\n", "                ", "keep_idx", "=", "np", ".", "arange", "(", "0", ",", "frames_feat", ".", "shape", "[", "1", "]", "+", "1", ")", "/", "frames_feat", ".", "shape", "[", "1", "]", "*", "len", "(", "sample", "[", "'frames_feat'", "]", ")", "\n", "keep_idx", "=", "np", ".", "round", "(", "keep_idx", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "keep_idx", "[", "keep_idx", ">=", "len", "(", "sample", "[", "'frames_feat'", "]", ")", "]", "=", "len", "(", "sample", "[", "'frames_feat'", "]", ")", "-", "1", "\n", "frames_len", "[", "i", "]", "=", "frames_feat", ".", "shape", "[", "1", "]", "\n", "\n", "map_gt", ".", "append", "(", "sample", "[", "'map_gt'", "]", ")", "\n", "reg_gt", ".", "append", "(", "sample", "[", "'reg_gt'", "]", ")", "\n", "frame_gt", ".", "append", "(", "sample", "[", "'frame_gt'", "]", ")", "\n", "\n", "for", "j", "in", "range", "(", "frames_feat", ".", "shape", "[", "1", "]", ")", ":", "\n", "                    ", "s", ",", "e", "=", "keep_idx", "[", "j", "]", ",", "keep_idx", "[", "j", "+", "1", "]", "\n", "assert", "s", "<=", "e", "\n", "if", "s", "==", "e", ":", "\n", "                        ", "frames_feat", "[", "i", ",", "j", "]", "=", "sample", "[", "'frames_feat'", "]", "[", "s", "]", "\n", "", "else", ":", "\n", "                        ", "frames_feat", "[", "i", ",", "j", "]", "=", "sample", "[", "'frames_feat'", "]", "[", "s", ":", "e", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "", "", "", "", "rep", "=", "np", ".", "asarray", "(", "rep", ")", "\n", "# rep = rep / np.sqrt(np.sum(np.power(rep, 2), axis=1, keepdims=True))", "\n", "# dist = np.matmul(rep, rep.T)", "\n", "dist", "=", "rep", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "-", "rep", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "dist", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "power", "(", "dist", ",", "2", ")", ",", "-", "1", ")", ")", "\n", "\n", "dist", "=", "np", ".", "exp", "(", "-", "dist", ")", "\n", "dist", "/=", "np", ".", "sum", "(", "dist", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "neg", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "# print(i, np.argsort(dist[i]))", "\n", "# idx = np.random.choice(np.argsort(-dist[i])[:32])", "\n", "# print(dist[i])", "\n", "            ", "idx", "=", "np", ".", "random", ".", "choice", "(", "bsz", ",", "p", "=", "dist", "[", "i", "]", ")", "\n", "neg", ".", "append", "(", "idx", ")", "\n", "", "neg", "=", "np", ".", "asarray", "(", "neg", ")", "\n", "# print(neg)", "\n", "# exit(0)", "\n", "batch", ".", "update", "(", "{", "\n", "'net_input'", ":", "{", "\n", "'frames_feat'", ":", "torch", ".", "from_numpy", "(", "frames_feat", ")", ",", "\n", "'frames_len'", ":", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "frames_len", ")", ")", ",", "\n", "'words_feat'", ":", "torch", ".", "from_numpy", "(", "words_feat", ")", ",", "\n", "'words_len'", ":", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "words_len", ")", ")", ",", "\n", "'map_gt'", ":", "torch", ".", "stack", "(", "map_gt", ",", "0", ")", ",", "\n", "'reg_gt'", ":", "torch", ".", "stack", "(", "reg_gt", ",", "0", ")", ",", "\n", "'frame_gt'", ":", "torch", ".", "stack", "(", "frame_gt", ",", "0", ")", ",", "\n", "'props'", ":", "props", ".", "unsqueeze", "(", "0", ")", ",", "\n", "'props_graph'", ":", "props_graph", ".", "unsqueeze", "(", "0", ")", ",", "\n", "'neg'", ":", "neg", ",", "\n", "}", "\n", "}", ")", "\n", "\n", "return", "batch", "\n", "\n", "", "return", "collate_data", "\n", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.charades.CharadesSTA.__init__": [[11, 69], ["datasets.base_dataset.BaseDataset.__init__", "numpy.reshape", "numpy.reshape", "numpy.stack", "print", "torch.from_numpy", "torch.from_numpy", "datasets.base_dataset.build_collate_data", "numpy.repeat", "numpy.repeat", "print", "print", "utils.iou", "numpy.zeros_like().astype", "range", "numpy.zeros().astype", "range", "charades.CharadesSTA.props.tolist", "charades.CharadesSTA.props.tolist", "numpy.argsort", "range", "numpy.arange", "numpy.arange", "numpy.zeros_like", "numpy.zeros", "abs", "abs"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.base_dataset.build_collate_data", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.iou"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "vocab", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "data_path", ",", "vocab", ",", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "num_clips", "=", "args", "[", "'max_num_frames'", "]", "//", "args", "[", "'target_stride'", "]", "\n", "start", "=", "np", ".", "reshape", "(", "np", ".", "repeat", "(", "np", ".", "arange", "(", "0", ",", "self", ".", "num_clips", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "axis", "=", "1", ",", "\n", "repeats", "=", "self", ".", "num_clips", ")", ",", "[", "-", "1", "]", ")", "\n", "end", "=", "np", ".", "reshape", "(", "np", ".", "repeat", "(", "np", ".", "arange", "(", "1", ",", "self", ".", "num_clips", "+", "1", ")", "[", "np", ".", "newaxis", ",", ":", "]", ",", "axis", "=", "0", ",", "\n", "repeats", "=", "self", ".", "num_clips", ")", ",", "[", "-", "1", "]", ")", "\n", "self", ".", "props", "=", "np", ".", "stack", "(", "[", "start", ",", "end", "]", ",", "-", "1", ")", "\n", "\n", "# predefined proposals", "\n", "idx", "=", "self", ".", "props", "[", ":", ",", "0", "]", "<", "self", ".", "props", "[", ":", ",", "1", "]", "\n", "self", ".", "props", "=", "self", ".", "props", "[", "idx", "]", "\n", "\n", "if", "'is_training'", "in", "kwargs", ":", "\n", "            ", "idx", "=", "(", "self", ".", "props", "[", ":", ",", "1", "]", "-", "self", ".", "props", "[", ":", ",", "0", "]", ")", "<=", "self", ".", "num_clips", "//", "2", "\n", "self", ".", "props", "=", "self", ".", "props", "[", "idx", "]", "\n", "idx", "=", "(", "self", ".", "props", "[", ":", ",", "1", "]", "-", "self", ".", "props", "[", ":", ",", "0", "]", ")", "%", "2", "==", "1", "\n", "self", ".", "props", "=", "self", ".", "props", "[", "idx", "]", "\n", "print", "(", "'train candidate proposals'", ",", "self", ".", "props", ".", "shape", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'test candidate proposals'", ",", "self", ".", "props", ".", "shape", ")", "\n", "\n", "# predefined proposals graph", "\n", "", "iou_predefined", "=", "True", "\n", "print", "(", "'iou_predefined graph'", ",", "iou_predefined", ")", "\n", "if", "iou_predefined", ":", "\n", "# self.props_graph = iou(self.props.tolist(), self.props.tolist())", "\n", "# min_iou, max_iou = 0.6, 1.0", "\n", "# self.props_graph = (self.props_graph - min_iou) / (max_iou - min_iou)", "\n", "# idx = self.props_graph < 0", "\n", "# self.props_graph[:, :] = 1.0", "\n", "# self.props_graph = self.props_graph.astype(np.int32)", "\n", "# self.props_graph[idx] = 0", "\n", "\n", "            ", "props_iou", "=", "iou", "(", "self", ".", "props", ".", "tolist", "(", ")", ",", "self", ".", "props", ".", "tolist", "(", ")", ")", "\n", "self", ".", "props_graph", "=", "np", ".", "zeros_like", "(", "props_iou", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "sort_idx", "=", "np", ".", "argsort", "(", "-", "props_iou", ",", "-", "1", ")", "[", ":", ",", ":", "11", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "props", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "self", ".", "props_graph", "[", "i", ",", "sort_idx", "[", "i", "]", "]", "=", "1", "\n", "low_idx", "=", "props_iou", "[", "i", "]", "<", "0.6", "\n", "self", ".", "props_graph", "[", "i", ",", "low_idx", "]", "=", "0", "\n", "", "", "else", ":", "\n", "            ", "num_props", "=", "self", ".", "props", ".", "shape", "[", "0", "]", "\n", "self", ".", "props_graph", "=", "np", ".", "zeros", "(", "[", "num_props", ",", "num_props", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "num_props", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "num_props", ")", ":", "\n", "                    ", "if", "abs", "(", "self", ".", "props", "[", "i", ",", "0", "]", "-", "self", ".", "props", "[", "j", ",", "0", "]", ")", "<=", "2", "and", "abs", "(", "self", ".", "props", "[", "i", ",", "1", "]", "-", "self", ".", "props", "[", "j", ",", "1", "]", ")", "<=", "2", ":", "\n", "                        ", "self", ".", "props_graph", "[", "i", ",", "j", "]", "=", "1", "\n", "# print(self.props_graph.sum(axis=-1))", "\n", "# exit(0)", "\n", "\n", "", "", "", "", "self", ".", "props_torch", "=", "torch", ".", "from_numpy", "(", "self", ".", "props", ")", "\n", "self", ".", "props_graph_torch", "=", "torch", ".", "from_numpy", "(", "self", ".", "props_graph", ")", "\n", "\n", "self", ".", "collate_fn", "=", "build_collate_data", "(", "args", "[", "'max_num_frames'", "]", ",", "args", "[", "'max_num_words'", "]", ",", "\n", "args", "[", "'frame_dim'", "]", ",", "args", "[", "'word_dim'", "]", ",", "\n", "self", ".", "props_torch", ",", "self", ".", "props_graph_torch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.charades.CharadesSTA._load_frame_features": [[70, 73], ["numpy.asarray().astype", "numpy.asarray", "numpy.load", "os.path.join"], "methods", ["None"], ["", "def", "_load_frame_features", "(", "self", ",", "vid", ")", ":", "\n", "        ", "return", "np", ".", "asarray", "(", "\n", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", "[", "'feature_path'", "]", ",", "'%s.npy'", "%", "vid", ")", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.datasets.charades.CharadesSTA.collate_data": [[74, 76], ["charades.CharadesSTA.collate_fn"], "methods", ["None"], ["", "def", "collate_data", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "self", ".", "collate_fn", "(", "samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.adam_optimizer.AdamOptimizer.__init__": [[16, 21], ["optimizers.base_optimizer.FairseqOptimizer.__init__", "adam_optimizer.Adam"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "params", ")", "\n", "self", ".", "lr", "=", "args", "[", "'lr'", "]", "\n", "self", ".", "weight_decay", "=", "args", "[", "'weight_decay'", "]", "\n", "self", ".", "_optimizer", "=", "Adam", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.adam_optimizer.AdamOptimizer.add_args": [[22, 30], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizers-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--adam-betas'", ",", "default", "=", "'(0.9, 0.999)'", ",", "metavar", "=", "'B'", ",", "\n", "help", "=", "'betas for Adam optimizers'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam-eps'", ",", "type", "=", "float", ",", "default", "=", "1e-8", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'epsilon for Adam optimizers'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.adam_optimizer.AdamOptimizer.optimizer_config": [[32, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizers\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizers args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "lr", ",", "\n", "'weight_decay'", ":", "self", ".", "weight_decay", ",", "\n", "# 'betas': eval(self.args.adam_betas),", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.adam_optimizer.Adam.__init__": [[75, 80], ["dict", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "Adam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.adam_optimizer.Adam.step": [[81, 142], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.max", "torch.max", "torch.max", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "p.data.add_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "exp_avg.mul_", "exp_avg_sq.mul_", "math.sqrt", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "group", "[", "'lr'", "]", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.__init__": [[15, 19], ["object.__init__", "list"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "params", "=", "list", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.add_args": [[20, 24], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizers-specific arguments to the parser.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.optimizer": [[25, 33], ["hasattr", "isinstance", "ValueError"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return a torch.optimizers.optimizers.Optimizer instance.\"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "'_optimizer'", ")", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "not", "isinstance", "(", "self", ".", "_optimizer", ",", "torch", ".", "optim", ".", "Optimizer", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'_optimizer must be an instance of torch.optimizers.Optimizer'", ")", "\n", "", "return", "self", ".", "_optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.optimizer_config": [[34, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizers\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizers args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.get_lr": [[44, 47], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the current learning rate.\"\"\"", "\n", "return", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.set_lr": [[48, 52], ["None"], "methods", ["None"], ["", "def", "set_lr", "(", "self", ",", "lr", ")", ":", "\n", "        ", "\"\"\"Set the learning rate.\"\"\"", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.state_dict": [[53, 56], ["base_optimizer.FairseqOptimizer.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fairseq_lr_scheduler.FairseqLRScheduler.state_dict"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the optimizers's state dict.\"\"\"", "\n", "return", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.load_state_dict": [[57, 71], ["base_optimizer.FairseqOptimizer.optimizer.load_state_dict", "len", "group.update"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.update"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "optimizer_overrides", "=", "None", ")", ":", "\n", "        ", "\"\"\"Load an optimizers state dict.\n\n        In general we should prefer the configuration of the existing optimizers\n        instance (e.g., learning rate) over that found in the state_dict. This\n        allows us to resume training from a checkpoint using a new set of\n        optimizers args.\n        \"\"\"", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "if", "optimizer_overrides", "is", "not", "None", "and", "len", "(", "optimizer_overrides", ")", ">", "0", ":", "\n", "# override learning rate, momentum, etc. with latest values", "\n", "            ", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", ".", "update", "(", "optimizer_overrides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.backward": [[72, 75], ["loss.backward"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.backward"], ["", "", "", "def", "backward", "(", "self", ",", "loss", ")", ":", "\n", "        ", "\"\"\"Computes the sum of gradients of the given tensor w.r.t. graph leaves.\"\"\"", "\n", "loss", ".", "backward", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.multiply_grads": [[76, 81], ["p.grad.data.mul_"], "methods", ["None"], ["", "def", "multiply_grads", "(", "self", ",", "c", ")", ":", "\n", "        ", "\"\"\"Multiplies grads by a constant *c*.\"\"\"", "\n", "for", "p", "in", "self", ".", "params", ":", "\n", "            ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                ", "p", ".", "grad", ".", "data", ".", "mul_", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.clip_grad_norm": [[82, 88], ["torch.nn.utils.clip_grad_norm_", "math.sqrt", "sum", "p.grad.data.norm"], "methods", ["None"], ["", "", "", "def", "clip_grad_norm", "(", "self", ",", "max_norm", ")", ":", "\n", "        ", "\"\"\"Clips gradient norm.\"\"\"", "\n", "if", "max_norm", ">", "0", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "params", ",", "max_norm", ")", "\n", "", "else", ":", "\n", "            ", "return", "math", ".", "sqrt", "(", "sum", "(", "p", ".", "grad", ".", "data", ".", "norm", "(", ")", "**", "2", "for", "p", "in", "self", ".", "params", "if", "p", ".", "grad", "is", "not", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.step": [[89, 92], ["base_optimizer.FairseqOptimizer.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.step"], ["", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\"\"\"", "\n", "self", ".", "optimizer", ".", "step", "(", "closure", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.zero_grad": [[93, 99], ["base_optimizer.FairseqOptimizer.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clears the gradients of all optimized parameters.\"\"\"", "\n", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "p", ".", "grad", "=", "None", "\n", "", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.reduce_lr_on_plateau.ReduceLROnPlateau.__init__": [[17, 26], ["fairseq_lr_scheduler.FairseqLRScheduler.__init__", "torch.optim.lr_scheduler.ReduceLROnPlateau", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with reduce_lr_on_plateau.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "self", ".", "optimizer", ".", "optimizer", ",", "patience", "=", "0", ",", "factor", "=", "args", ".", "lr_shrink", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.reduce_lr_on_plateau.ReduceLROnPlateau.state_dict": [[27, 32], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the LR scheduler state dict.\"\"\"", "\n", "return", "{", "\n", "'best'", ":", "self", ".", "lr_scheduler", ".", "best", ",", "\n", "'last_epoch'", ":", "self", ".", "lr_scheduler", ".", "last_epoch", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.reduce_lr_on_plateau.ReduceLROnPlateau.load_state_dict": [[34, 39], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Load an LR scheduler state dict.\"\"\"", "\n", "self", ".", "lr_scheduler", ".", "best", "=", "state_dict", "[", "'best'", "]", "\n", "if", "'last_epoch'", "in", "state_dict", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "last_epoch", "=", "state_dict", "[", "'last_epoch'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.reduce_lr_on_plateau.ReduceLROnPlateau.step": [[40, 47], ["reduce_lr_on_plateau.ReduceLROnPlateau.optimizer.get_lr", "reduce_lr_on_plateau.ReduceLROnPlateau.lr_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.get_lr", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.step"], ["", "", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "if", "val_loss", "is", "not", "None", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "step", "(", "val_loss", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "last_epoch", "=", "epoch", "\n", "", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.inverse_square_root_schedule.InverseSquareRootSchedule.__init__": [[32, 54], ["fairseq_lr_scheduler.FairseqLRScheduler.__init__", "inverse_square_root_schedule.InverseSquareRootSchedule.optimizer.set_lr"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.set_lr"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "None", ",", "optimizer", ")", "\n", "# if len(args.lr) > 1:", "\n", "#     raise ValueError(", "\n", "#         'Cannot use a fixed learning rate schedule with inverse_sqrt.'", "\n", "#         ' Consider --lr-scheduler=fixed instead.'", "\n", "#     )", "\n", "warmup_end_lr", "=", "optimizer", ".", "lr", "\n", "if", "args", "[", "'warmup_init_lr'", "]", "<", "0", ":", "\n", "            ", "warmup_init_lr", "=", "warmup_end_lr", "\n", "", "self", ".", "warmup_init_lr", "=", "args", "[", "'warmup_init_lr'", "]", "\n", "self", ".", "warmup_updates", "=", "args", "[", "'warmup_updates'", "]", "\n", "\n", "# linearly warmup for the first args.warmup_updates", "\n", "self", ".", "lr_step", "=", "(", "warmup_end_lr", "-", "self", ".", "warmup_init_lr", ")", "/", "self", ".", "warmup_updates", "\n", "\n", "# then, decay prop. to the inverse square root of the update number", "\n", "self", ".", "decay_factor", "=", "warmup_end_lr", "*", "self", ".", "warmup_updates", "**", "0.5", "\n", "\n", "# initial learning rate", "\n", "self", ".", "lr", "=", "self", ".", "warmup_init_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.inverse_square_root_schedule.InverseSquareRootSchedule.add_args": [[55, 63], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--warmup-updates'", ",", "default", "=", "4000", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-init-lr'", ",", "default", "=", "-", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial learning rate during warmup phase; default is args.lr'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.inverse_square_root_schedule.InverseSquareRootSchedule.step": [[65, 70], ["super().step", "inverse_square_root_schedule.InverseSquareRootSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.step", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# we don't change the learning rate at epoch boundaries", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.inverse_square_root_schedule.InverseSquareRootSchedule.step_update": [[71, 79], ["inverse_square_root_schedule.InverseSquareRootSchedule.optimizer.set_lr"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.set_lr"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "if", "num_updates", "<", "self", ".", "warmup_updates", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "warmup_init_lr", "+", "num_updates", "*", "self", ".", "lr_step", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "decay_factor", "*", "num_updates", "**", "-", "0.5", "\n", "", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "return", "self", ".", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.inverse_linear_root_schedule.InverseLinearRootSchedule.__init__": [[33, 53], ["fairseq_lr_scheduler.FairseqLRScheduler.__init__", "inverse_linear_root_schedule.InverseLinearRootSchedule.optimizer.set_lr"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.set_lr"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "# if len(args.lr) > 1:", "\n", "#     raise ValueError(", "\n", "#         'Cannot use a fixed learning rate schedule with inverse_sqrt.'", "\n", "#         ' Consider --lr-scheduler=fixed instead.'", "\n", "#     )", "\n", "warmup_end_lr", "=", "args", ".", "lr", "\n", "if", "args", ".", "warmup_init_lr", "<", "0", ":", "\n", "            ", "args", ".", "warmup_init_lr", "=", "warmup_end_lr", "\n", "\n", "# linearly warmup for the first args.warmup_updates", "\n", "", "self", ".", "lr_step", "=", "(", "warmup_end_lr", "-", "args", ".", "warmup_init_lr", ")", "/", "args", ".", "warmup_updates", "\n", "\n", "# then, decay prop. to the inverse square root of the update number", "\n", "self", ".", "decay_factor", "=", "warmup_end_lr", "\n", "\n", "# initial learning rate", "\n", "self", ".", "lr", "=", "args", ".", "warmup_init_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.inverse_linear_root_schedule.InverseLinearRootSchedule.add_args": [[54, 62], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--warmup-updates'", ",", "default", "=", "4000", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-init-lr'", ",", "default", "=", "-", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial learning rate during warmup phase; default is args.lr'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.inverse_linear_root_schedule.InverseLinearRootSchedule.step": [[64, 69], ["super().step", "inverse_linear_root_schedule.InverseLinearRootSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.step", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# we don't change the learning rate at epoch boundaries", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.inverse_linear_root_schedule.InverseLinearRootSchedule.step_update": [[70, 78], ["inverse_linear_root_schedule.InverseLinearRootSchedule.optimizer.set_lr"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.set_lr"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "if", "num_updates", "<", "self", ".", "args", ".", "warmup_updates", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "args", ".", "warmup_init_lr", "+", "num_updates", "*", "self", ".", "lr_step", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "decay_factor", "*", "0.8", "**", "(", "num_updates", "/", "(", "5", "*", "self", ".", "args", ".", "warmup_updates", ")", ")", "\n", "", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "return", "self", ".", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fairseq_lr_scheduler.FairseqLRScheduler.__init__": [[13, 20], ["object.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "optimizer", ",", "FairseqOptimizer", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'optimizers must be an instance of FairseqOptimizer'", ")", "\n", "", "self", ".", "args", "=", "args", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "best", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fairseq_lr_scheduler.FairseqLRScheduler.add_args": [[21, 25], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fairseq_lr_scheduler.FairseqLRScheduler.state_dict": [[26, 29], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the LR scheduler state dict.\"\"\"", "\n", "return", "{", "'best'", ":", "self", ".", "best", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict": [[30, 33], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Load an LR scheduler state dict.\"\"\"", "\n", "self", ".", "best", "=", "state_dict", "[", "'best'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fairseq_lr_scheduler.FairseqLRScheduler.step": [[34, 41], ["min"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "if", "val_loss", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "best", "is", "None", ":", "\n", "                ", "self", ".", "best", "=", "val_loss", "\n", "", "else", ":", "\n", "                ", "self", ".", "best", "=", "min", "(", "self", ".", "best", ",", "val_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fairseq_lr_scheduler.FairseqLRScheduler.step_update": [[42, 45], ["fairseq_lr_scheduler.FairseqLRScheduler.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.get_lr"], ["", "", "", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fixed_schedule.FixedSchedule.__init__": [[15, 26], ["fairseq_lr_scheduler.FairseqLRScheduler.__init__", "getattr"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "\n", "# set defaults", "\n", "args", ".", "warmup_updates", "=", "getattr", "(", "args", ",", "'warmup_updates'", ",", "0", ")", "or", "0", "\n", "\n", "self", ".", "lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "if", "args", ".", "warmup_updates", ">", "0", ":", "\n", "            ", "self", ".", "warmup_factor", "=", "1.", "/", "args", ".", "warmup_updates", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_factor", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fixed_schedule.FixedSchedule.add_args": [[27, 35], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--force-anneal'", ",", "'--fa'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'force annealing at specified epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-updates'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fixed_schedule.FixedSchedule.get_next_lr": [[37, 46], ["min", "len"], "methods", ["None"], ["", "def", "get_next_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "lrs", "=", "self", ".", "args", ".", "lr", "\n", "if", "self", ".", "args", ".", "force_anneal", "is", "None", "or", "epoch", "<", "self", ".", "args", ".", "force_anneal", ":", "\n", "# use fixed LR schedule", "\n", "            ", "next_lr", "=", "lrs", "[", "min", "(", "epoch", ",", "len", "(", "lrs", ")", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "# annneal based on lr_shrink", "\n", "            ", "next_lr", "=", "lrs", "[", "-", "1", "]", "*", "self", ".", "args", ".", "lr_shrink", "**", "(", "epoch", "+", "1", "-", "self", ".", "args", ".", "force_anneal", ")", "\n", "", "return", "next_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fixed_schedule.FixedSchedule.step": [[47, 53], ["super().step", "fixed_schedule.FixedSchedule.get_next_lr", "fixed_schedule.FixedSchedule.optimizer.set_lr", "fixed_schedule.FixedSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.step", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fixed_schedule.FixedSchedule.get_next_lr", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.set_lr", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "self", ".", "lr", "=", "self", ".", "get_next_lr", "(", "epoch", ")", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "warmup_factor", "*", "self", ".", "lr", ")", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fixed_schedule.FixedSchedule.step_update": [[54, 60], ["fixed_schedule.FixedSchedule.optimizer.get_lr", "fixed_schedule.FixedSchedule.optimizer.set_lr", "float"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.get_lr", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.set_lr"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "if", "self", ".", "args", ".", "warmup_updates", ">", "0", "and", "num_updates", "<=", "self", ".", "args", ".", "warmup_updates", ":", "\n", "            ", "self", ".", "warmup_factor", "=", "num_updates", "/", "float", "(", "self", ".", "args", ".", "warmup_updates", ")", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "warmup_factor", "*", "self", ".", "lr", ")", "\n", "", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.__init__.build_lr_scheduler": [[17, 19], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.__init__.register_lr_scheduler": [[21, 33], ["ValueError", "issubclass", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.triangular_lr_scheduler.TriangularSchedule.__init__": [[20, 40], ["fairseq_lr_scheduler.FairseqLRScheduler.__init__", "triangular_lr_scheduler.TriangularSchedule.optimizer.set_lr", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.set_lr"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with triangular.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "\n", "", "lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "\n", "assert", "args", ".", "max_lr", ">", "lr", ",", "'max_lr must be more than lr'", "\n", "self", ".", "min_lr", "=", "lr", "\n", "self", ".", "max_lr", "=", "args", ".", "max_lr", "\n", "self", ".", "stepsize", "=", "args", ".", "lr_period_updates", "//", "2", "\n", "self", ".", "lr_shrink", "=", "args", ".", "lr_shrink", "\n", "self", ".", "shrink_min", "=", "args", ".", "shrink_min", "\n", "\n", "# initial learning rate", "\n", "self", ".", "lr", "=", "self", ".", "min_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.triangular_lr_scheduler.TriangularSchedule.add_args": [[41, 51], ["parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--max-lr'", ",", "required", "=", "True", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'max learning rate, must be more than args.lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-period-updates'", ",", "default", "=", "5000", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial number of updates per period (cycle length)'", ")", "\n", "parser", ".", "add_argument", "(", "'--shrink-min'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, also shrinks min lr'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.triangular_lr_scheduler.TriangularSchedule.step": [[53, 58], ["super().step", "triangular_lr_scheduler.TriangularSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.step", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# we don't change the learning rate at epoch boundaries", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.triangular_lr_scheduler.TriangularSchedule.step_update": [[59, 75], ["math.floor", "abs", "triangular_lr_scheduler.TriangularSchedule.optimizer.set_lr", "max"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.set_lr"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "cycle", "=", "math", ".", "floor", "(", "num_updates", "/", "(", "2", "*", "self", ".", "stepsize", ")", ")", "\n", "\n", "lr_shrink", "=", "self", ".", "lr_shrink", "**", "cycle", "\n", "max_lr", "=", "self", ".", "max_lr", "*", "lr_shrink", "\n", "if", "self", ".", "shrink_min", ":", "\n", "            ", "min_lr", "=", "self", ".", "min_lr", "*", "lr_shrink", "\n", "", "else", ":", "\n", "            ", "min_lr", "=", "self", ".", "min_lr", "\n", "\n", "", "x", "=", "abs", "(", "num_updates", "/", "self", ".", "stepsize", "-", "2", "*", "(", "cycle", "+", "1", ")", "+", "1", ")", "\n", "self", ".", "lr", "=", "min_lr", "+", "(", "max_lr", "-", "min_lr", ")", "*", "max", "(", "0", ",", "(", "1", "-", "x", ")", ")", "\n", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "return", "self", ".", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.__init__": [[37, 73], ["fairseq_lr_scheduler.FairseqLRScheduler.__init__", "cosine_lr_scheduler.CosineSchedule.optimizer.set_lr", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.set_lr"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with cosine.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "\n", "", "warmup_end_lr", "=", "args", ".", "max_lr", "\n", "if", "args", ".", "warmup_init_lr", "<", "0", ":", "\n", "            ", "args", ".", "warmup_init_lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "\n", "", "self", ".", "min_lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "self", ".", "max_lr", "=", "args", ".", "max_lr", "\n", "\n", "assert", "self", ".", "max_lr", ">", "self", ".", "min_lr", ",", "'max_lr must be more than lr'", "\n", "\n", "self", ".", "t_mult", "=", "args", ".", "t_mult", "\n", "self", ".", "period", "=", "args", ".", "lr_period_updates", "\n", "\n", "if", "self", ".", "period", "<=", "0", ":", "\n", "            ", "assert", "args", ".", "max_update", ">=", "0", ",", "'Either --max_update or --lr-period-updates must be set'", "\n", "self", ".", "period", "=", "args", ".", "max_update", "-", "args", ".", "warmup_updates", "\n", "\n", "", "if", "args", ".", "warmup_updates", ">", "0", ":", "\n", "# linearly warmup for the first args.warmup_updates", "\n", "            ", "self", ".", "lr_step", "=", "(", "warmup_end_lr", "-", "args", ".", "warmup_init_lr", ")", "/", "args", ".", "warmup_updates", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr_step", "=", "1", "\n", "\n", "", "self", ".", "warmup_updates", "=", "args", ".", "warmup_updates", "\n", "self", ".", "lr_shrink", "=", "args", ".", "lr_shrink", "\n", "\n", "# initial learning rate", "\n", "self", ".", "lr", "=", "args", ".", "warmup_init_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.add_args": [[74, 88], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--warmup-updates'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-init-lr'", ",", "default", "=", "-", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial learning rate during warmup phase; default is args.lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-lr'", ",", "required", "=", "True", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'max learning rate, must be more than args.lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--t-mult'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'factor to grow the length of each period'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-period-updates'", ",", "default", "=", "-", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial number of updates per period'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.step": [[90, 95], ["super().step", "cosine_lr_scheduler.CosineSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.step", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# we don't change the learning rate at epoch boundaries", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.step_update": [[96, 119], ["cosine_lr_scheduler.CosineSchedule.optimizer.set_lr", "math.floor", "math.floor", "math.log", "math.cos"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.set_lr"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "if", "num_updates", "<", "self", ".", "args", ".", "warmup_updates", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "args", ".", "warmup_init_lr", "+", "num_updates", "*", "self", ".", "lr_step", "\n", "", "else", ":", "\n", "            ", "curr_updates", "=", "num_updates", "-", "self", ".", "args", ".", "warmup_updates", "\n", "if", "self", ".", "t_mult", "!=", "1", ":", "\n", "                ", "i", "=", "math", ".", "floor", "(", "math", ".", "log", "(", "1", "-", "curr_updates", "/", "self", ".", "period", "*", "(", "1", "-", "self", ".", "t_mult", ")", ",", "self", ".", "t_mult", ")", ")", "\n", "t_i", "=", "self", ".", "t_mult", "**", "i", "*", "self", ".", "period", "\n", "t_curr", "=", "curr_updates", "-", "(", "1", "-", "self", ".", "t_mult", "**", "i", ")", "/", "(", "1", "-", "self", ".", "t_mult", ")", "*", "self", ".", "period", "\n", "", "else", ":", "\n", "                ", "i", "=", "math", ".", "floor", "(", "curr_updates", "/", "self", ".", "period", ")", "\n", "t_i", "=", "self", ".", "period", "\n", "t_curr", "=", "curr_updates", "-", "(", "self", ".", "period", "*", "i", ")", "\n", "\n", "", "lr_shrink", "=", "self", ".", "lr_shrink", "**", "i", "\n", "min_lr", "=", "self", ".", "min_lr", "*", "lr_shrink", "\n", "max_lr", "=", "self", ".", "max_lr", "*", "lr_shrink", "\n", "\n", "self", ".", "lr", "=", "min_lr", "+", "0.5", "*", "(", "max_lr", "-", "min_lr", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "t_curr", "/", "t_i", ")", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "return", "self", ".", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.scripts.build_vocab.load_json": [[7, 10], ["open", "json.load"], "function", ["None"], ["def", "load_json", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "encoding", "=", "'utf8'", ")", "as", "fr", ":", "\n", "        ", "return", "json", ".", "load", "(", "fr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.scripts.build_vocab.build_glove": [[12, 47], ["gensim.models.KeyedVectors", "print", "set", "print", "gensim.models.KeyedVectors.save_word2vec_format", "enumerate", "len", "gensim.models.KeyedVectors.add", "len", "buf1.append", "buf2.append", "set.add", "build_vocab.load_json", "gensim.corpora.wikicorpus.tokenize", "len", "w.lower.lower", "gensim.models.KeyedVectors.add", "build_vocab.build_glove.clear_buffer"], "function", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.scripts.build_vocab.load_json"], ["", "", "def", "build_glove", "(", "word2vec", ",", "target_files", ",", "output_path", ")", ":", "\n", "    ", "word2vec1", "=", "KeyedVectors", "(", "vector_size", "=", "300", ")", "\n", "print", "(", "word2vec1", ".", "vectors", ".", "shape", ",", "(", "len", "(", "word2vec1", ".", "vocab", ")", ",", "word2vec1", ".", "vector_size", ")", ")", "\n", "buf1", "=", "[", "]", "\n", "buf2", "=", "[", "]", "\n", "contains", "=", "set", "(", ")", "\n", "\n", "def", "add_buffer", "(", "w", ",", "f", ")", ":", "\n", "        ", "nonlocal", "buf1", ",", "buf2", "\n", "if", "w", "not", "in", "contains", ":", "\n", "            ", "buf1", ".", "append", "(", "w", ")", "\n", "buf2", ".", "append", "(", "f", ")", "\n", "contains", ".", "add", "(", "w", ")", "\n", "\n", "", "", "def", "clear_buffer", "(", ")", ":", "\n", "        ", "nonlocal", "buf1", ",", "buf2", "\n", "buf1", "=", "[", "]", "\n", "buf2", "=", "[", "]", "\n", "\n", "", "for", "f", "in", "target_files", ":", "\n", "        ", "for", "i", ",", "s", "in", "enumerate", "(", "load_json", "(", "f", ")", ",", "1", ")", ":", "\n", "            ", "sentence", "=", "s", "[", "'description'", "]", "\n", "\n", "for", "w", "in", "tokenize", "(", "sentence", ")", ":", "\n", "                ", "w", "=", "w", ".", "lower", "(", ")", "\n", "if", "w", "in", "word2vec", ":", "\n", "                    ", "add_buffer", "(", "w", ",", "word2vec", "[", "w", "]", ")", "\n", "", "", "if", "i", "%", "10", "==", "0", "and", "len", "(", "buf1", ")", ">", "0", ":", "\n", "                ", "word2vec1", ".", "add", "(", "buf1", ",", "buf2", ",", "replace", "=", "False", ")", "\n", "clear_buffer", "(", ")", "\n", "", "", "", "if", "len", "(", "buf1", ")", ">", "0", ":", "\n", "        ", "word2vec1", ".", "add", "(", "buf1", ",", "buf2", ",", "replace", "=", "False", ")", "\n", "\n", "", "print", "(", "word2vec1", ".", "vectors", ".", "shape", ",", "(", "len", "(", "word2vec1", ".", "vocab", ")", ",", "word2vec1", ".", "vector_size", ")", ")", "\n", "KeyedVectors", ".", "save_word2vec_format", "(", "word2vec1", ",", "output_path", ",", "binary", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.net_vlad.NetVLAD.__init__": [[26, 39], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "math.sqrt", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cluster_size", ":", "object", ",", "feature_size", ":", "object", ",", "add_batch_norm", ":", "object", "=", "True", ")", "->", "object", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "feature_size", "=", "feature_size", "\n", "self", ".", "cluster_size", "=", "cluster_size", "\n", "init_sc", "=", "(", "1", "/", "math", ".", "sqrt", "(", "feature_size", ")", ")", "\n", "# The `clusters` weights are the `(w,b)` in the paper", "\n", "self", ".", "clusters", "=", "nn", ".", "Parameter", "(", "init_sc", "*", "th", ".", "randn", "(", "feature_size", ",", "cluster_size", ")", ")", "\n", "# The `clusters2` weights are the visual words `c_k` in the paper", "\n", "self", ".", "clusters2", "=", "nn", ".", "Parameter", "(", "init_sc", "*", "th", ".", "randn", "(", "1", ",", "feature_size", ",", "cluster_size", ")", ")", "\n", "self", ".", "add_batch_norm", "=", "add_batch_norm", "\n", "self", ".", "batch_norm", "=", "nn", ".", "BatchNorm1d", "(", "cluster_size", ")", "\n", "self", ".", "out_dim", "=", "cluster_size", "*", "feature_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.net_vlad.NetVLAD.reset_parameters": [[40, 47], ["net_vlad.NetVLAD.batch_norm.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "# init_sc = (1 / math.sqrt(self.feature_size))", "\n", "# The `clusters` weights are the `(w,b)` in the paper", "\n", "# self.clusters = nn.Parameter(init_sc * th.randn(self.feature_size, self.cluster_size))", "\n", "# # The `clusters2` weights are the visual words `c_k` in the paper", "\n", "# self.clusters2 = nn.Parameter(init_sc * th.randn(1, self.feature_size, self.cluster_size))", "\n", "        ", "self", ".", "batch_norm", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.net_vlad.NetVLAD.forward": [[48, 98], ["x.view.view.contiguous().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "assignment.masked_fill.masked_fill.view", "torch.sum", "torch.sum", "torch.sum", "assignment.masked_fill.masked_fill.transpose", "x.view.view.view", "torch.matmul", "torch.matmul", "torch.matmul", "vlad.transpose.transpose.transpose", "torch.normalize", "torch.normalize", "torch.normalize", "x.view.view.size", "net_vlad.NetVLAD.batch_norm", "assignment.masked_fill.masked_fill.masked_fill", "vlad.transpose.transpose.view", "torch.normalize", "torch.normalize", "torch.normalize", "vlad.transpose.transpose.transpose", "x.view.view.contiguous", "x_mask.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_mask", "=", "None", ",", "flatten", "=", "True", ")", ":", "\n", "        ", "\"\"\"Aggregates feature maps into a fixed size representation.  In the following\n        notation, B = batch_size, N = num_features, K = num_clusters, D = feature_size.\n\n        Args:\n            x (th.Tensor): B x N x D\n            x_mask: B x N\n            flatten: boolean\n        Returns:\n            (th.Tensor): B x DK\n        \"\"\"", "\n", "# self.sanity_checks(x)", "\n", "max_sample", "=", "x", ".", "size", "(", ")", "[", "1", "]", "\n", "# print(x.size(), self.feature_size)", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "self", ".", "feature_size", ")", "# B x N x D -> BN x D", "\n", "# if x.device != self.clusters.device:", "\n", "#      import ipdb; ipdb.set_trace()", "\n", "assignment", "=", "th", ".", "matmul", "(", "x", ",", "self", ".", "clusters", ")", "# (BN x D) x (D x K) -> BN x K", "\n", "\n", "if", "self", ".", "add_batch_norm", ":", "\n", "            ", "assignment", "=", "self", ".", "batch_norm", "(", "assignment", ")", "\n", "\n", "# if x_mask is not None:", "\n", "#     assignment = assignment.masked_fill(x_mask.unsqueeze(-1) == 0, -1e30)", "\n", "", "assignment", "=", "F", ".", "softmax", "(", "assignment", ",", "dim", "=", "1", ")", "# BN x K -> BN x K", "\n", "assignment", "=", "assignment", ".", "view", "(", "-", "1", ",", "max_sample", ",", "self", ".", "cluster_size", ")", "# -> B x N x K", "\n", "if", "x_mask", "is", "not", "None", ":", "\n", "            ", "assignment", "=", "assignment", ".", "masked_fill", "(", "x_mask", ".", "unsqueeze", "(", "-", "1", ")", "==", "0", ",", "0", ")", "\n", "# assert not th.isnan(assignment).any()", "\n", "", "a_sum", "=", "th", ".", "sum", "(", "assignment", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# B x N x K -> B x 1 x K", "\n", "a", "=", "a_sum", "*", "self", ".", "clusters2", "# B x D x K", "\n", "\n", "assignment", "=", "assignment", ".", "transpose", "(", "1", ",", "2", ")", "# B x N x K -> B x K x N", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "max_sample", ",", "self", ".", "feature_size", ")", "# BN x D -> B x N x D", "\n", "vlad", "=", "th", ".", "matmul", "(", "assignment", ",", "x", ")", "# (B x K x N) x (B x N x D) -> B x K x D", "\n", "vlad", "=", "vlad", ".", "transpose", "(", "1", ",", "2", ")", "# -> B x D x K", "\n", "vlad", "=", "vlad", "-", "a", "\n", "\n", "# L2 intra norm", "\n", "vlad", "=", "F", ".", "normalize", "(", "vlad", ")", "\n", "\n", "# flattening + L2 norm", "\n", "if", "flatten", ":", "\n", "            ", "vlad", "=", "vlad", ".", "view", "(", "-", "1", ",", "self", ".", "cluster_size", "*", "self", ".", "feature_size", ")", "# -> B x DK", "\n", "vlad", "=", "F", ".", "normalize", "(", "vlad", ")", "\n", "", "else", ":", "\n", "# vlad = vlad.transpose(-1, -2) / x_mask.sum(dim=-1).unsqueeze(-1).unsqueeze(-1).float()", "\n", "            ", "vlad", "=", "vlad", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "", "return", "vlad", "# B x DK or B x K x D", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.tanh_attention.TanhAttention.__init__": [[7, 13], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# self.dropout = nn.Dropout(dropout)", "\n", "self", ".", "ws1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ",", "bias", "=", "True", ")", "\n", "self", ".", "ws2", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "self", ".", "wst", "=", "nn", ".", "Linear", "(", "d_model", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.tanh_attention.TanhAttention.reset_parameters": [[14, 18], ["tanh_attention.TanhAttention.ws1.reset_parameters", "tanh_attention.TanhAttention.ws2.reset_parameters", "tanh_attention.TanhAttention.wst.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "ws1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "ws2", ".", "reset_parameters", "(", ")", "\n", "self", ".", "wst", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.tanh_attention.TanhAttention.forward": [[19, 37], ["torch.softmax", "torch.softmax", "torch.softmax", "tanh_attention.TanhAttention.ws1", "tanh_attention.TanhAttention.ws2", "tanh_attention.TanhAttention.wst().squeeze", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear().squeeze", "torch.linear().squeeze", "torch.linear().squeeze", "memory_mask.unsqueeze.unsqueeze.unsqueeze", "S.masked_fill.masked_fill.masked_fill", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.linear.unsqueeze", "torch.linear.unsqueeze", "torch.linear.unsqueeze", "torch.linear.unsqueeze", "float", "tanh_attention.TanhAttention.wst", "torch.linear", "torch.linear", "torch.linear", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "memory", ",", "memory_mask", "=", "None", ",", "fast_weights", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "fast_weights", "is", "None", ":", "\n", "            ", "item1", "=", "self", ".", "ws1", "(", "x", ")", "# [nb, len1, d]", "\n", "item2", "=", "self", ".", "ws2", "(", "memory", ")", "# [nb, len2, d]", "\n", "# print(item1.shape, item2.shape)", "\n", "item", "=", "item1", ".", "unsqueeze", "(", "2", ")", "+", "item2", ".", "unsqueeze", "(", "1", ")", "# [nb, len1, len2, d]", "\n", "S", "=", "self", ".", "wst", "(", "torch", ".", "tanh", "(", "item", ")", ")", ".", "squeeze", "(", "-", "1", ")", "# [nb, len1, len2]", "\n", "", "else", ":", "\n", "            ", "item1", "=", "F", ".", "linear", "(", "x", ",", "fast_weights", "[", "'ws1.weight'", "]", ",", "fast_weights", "[", "'ws1.bias'", "]", ")", "# [nb, len1, d]", "\n", "item2", "=", "F", ".", "linear", "(", "memory", ",", "fast_weights", "[", "'ws2.weight'", "]", ")", "# [nb, len2, d]", "\n", "# print(item1.shape, item2.shape)", "\n", "item", "=", "item1", ".", "unsqueeze", "(", "2", ")", "+", "item2", ".", "unsqueeze", "(", "1", ")", "# [nb, len1, len2, d]", "\n", "S", "=", "F", ".", "linear", "(", "torch", ".", "tanh", "(", "item", ")", ",", "fast_weights", "[", "'wst.weight'", "]", ")", ".", "squeeze", "(", "-", "1", ")", "# [nb, len1, len2]", "\n", "", "if", "memory_mask", "is", "not", "None", ":", "\n", "            ", "memory_mask", "=", "memory_mask", ".", "unsqueeze", "(", "1", ")", "# [nb, 1, len2]", "\n", "S", "=", "S", ".", "masked_fill", "(", "memory_mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", "\n", "", "S", "=", "F", ".", "softmax", "(", "S", ",", "-", "1", ")", "\n", "return", "torch", ".", "matmul", "(", "S", ",", "memory", ")", ",", "S", "# [nb, len1, d]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.__init__": [[13, 40], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "mutihead_attention.MultiheadAttention.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "mutihead_attention.MultiheadAttention.register_parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters"], ["def", "__init__", "(", "self", ",", "embed_dim", ",", "num_heads", ",", "dropout", "=", "0.", ",", "bias", "=", "True", ",", "add_bias_kv", "=", "False", ",", "add_zero_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "assert", "self", ".", "head_dim", "*", "num_heads", "==", "self", ".", "embed_dim", ",", "\"embed_dim must be divisible by num_heads\"", "\n", "self", ".", "scaling", "=", "self", ".", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "in_proj_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "3", "*", "embed_dim", ",", "embed_dim", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "in_proj_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "3", "*", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'in_proj_bias'", ",", "None", ")", "\n", "", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "if", "add_bias_kv", ":", "\n", "            ", "self", ".", "bias_k", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "self", ".", "bias_v", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_k", "=", "self", ".", "bias_v", "=", "None", "\n", "\n", "", "self", ".", "add_zero_attn", "=", "add_zero_attn", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "self", ".", "onnx_trace", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.prepare_for_onnx_export_": [[41, 43], ["None"], "methods", ["None"], ["", "def", "prepare_for_onnx_export_", "(", "self", ")", ":", "\n", "        ", "self", ".", "onnx_trace", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.reset_parameters": [[44, 54], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "in_proj_weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "out_proj", ".", "weight", ")", "\n", "if", "self", ".", "in_proj_bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "in_proj_bias", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "out_proj", ".", "bias", ",", "0.", ")", "\n", "", "if", "self", ".", "bias_k", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "bias_k", ")", "\n", "", "if", "self", ".", "bias_v", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "bias_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.forward": [[55, 207], ["query.size", "mutihead_attention.MultiheadAttention.contiguous().view().transpose", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "utils.softmax().type_as", "torch.dropout", "torch.dropout", "torch.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "mutihead_attention.MultiheadAttention.out_proj", "query.data_ptr", "key.data_ptr", "value.data_ptr", "key.data_ptr", "value.data_ptr", "list", "key.size", "value.size", "mutihead_attention.MultiheadAttention._get_input_buffer", "mutihead_attention.MultiheadAttention.in_proj_qkv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "mutihead_attention.MultiheadAttention._set_input_buffer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "list", "attn_mask.repeat.repeat.unsqueeze", "attn_weights.float().masked_fill().type_as.float().masked_fill().type_as.view", "attn_weights.float().masked_fill().type_as.float().masked_fill().type_as.view", "list", "attn.transpose().contiguous().view.transpose().contiguous().view.contiguous().view", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "attn_weights.float().masked_fill().type_as.float().masked_fill().type_as.view", "query.size", "mutihead_attention.MultiheadAttention.in_proj_q", "mutihead_attention.MultiheadAttention.in_proj_q", "mutihead_attention.MultiheadAttention.in_proj_k", "mutihead_attention.MultiheadAttention.in_proj_v", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mutihead_attention.MultiheadAttention.contiguous().view", "saved_state[].view", "saved_state[].view", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attn_weights.float().masked_fill().type_as.float().masked_fill().type_as.size", "attn_mask.repeat.repeat.repeat", "torch.where().type_as", "torch.where().type_as", "torch.where().type_as", "torch.where().type_as", "torch.where().type_as", "torch.where().type_as", "torch.where().type_as", "torch.where().type_as", "torch.where().type_as", "attn_weights.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "utils.softmax", "attn.transpose().contiguous().view.transpose().contiguous().view.size", "attn.transpose().contiguous().view.transpose().contiguous().view.size", "attn_weights.float().masked_fill().type_as.float().masked_fill().type_as.sum", "mutihead_attention.MultiheadAttention.in_proj_kv", "mutihead_attention.MultiheadAttention.bias_k.repeat", "mutihead_attention.MultiheadAttention.bias_v.repeat", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "attn_weights.float().masked_fill().type_as.float().masked_fill().type_as.size", "attn.transpose().contiguous().view.transpose().contiguous().view.contiguous", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "attn_mask.repeat.repeat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "mutihead_attention.MultiheadAttention.contiguous", "attn_mask.repeat.repeat.new_zeros", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "attn_weights.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_mask.repeat.repeat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "attn_mask.repeat.repeat.size", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "attn_weights.float().masked_fill().type_as.float().masked_fill().type_as.float", "float", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "attn_weights.float().masked_fill().type_as.float().masked_fill().type_as.float", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "float", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.in_proj_qkv", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.in_proj_q", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.in_proj_q", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.in_proj_k", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.in_proj_v", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.in_proj_kv"], ["", "", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "key_padding_mask", "=", "None", ",", "incremental_state", "=", "None", ",", "\n", "need_weights", "=", "True", ",", "static_kv", "=", "False", ",", "attn_mask", "=", "None", ",", "fast_weights", "=", "None", ")", ":", "\n", "        ", "\"\"\"Input shape: Time x Batch x Channel\n\n        Self-attention can be implemented by passing in the same arguments for\n        query, key and value. Timesteps can be masked by supplying a T x T mask in the\n        `attn_mask` argument. Padding elements can be excluded from\n        the key by passing a binary ByteTensor (`key_padding_mask`) with shape:\n        batch x src_len, where padding elements are indicated by 1s.\n        \"\"\"", "\n", "\n", "qkv_same", "=", "query", ".", "data_ptr", "(", ")", "==", "key", ".", "data_ptr", "(", ")", "==", "value", ".", "data_ptr", "(", ")", "\n", "kv_same", "=", "key", ".", "data_ptr", "(", ")", "==", "value", ".", "data_ptr", "(", ")", "\n", "\n", "tgt_len", ",", "bsz", ",", "embed_dim", "=", "query", ".", "size", "(", ")", "\n", "assert", "embed_dim", "==", "self", ".", "embed_dim", "\n", "assert", "list", "(", "query", ".", "size", "(", ")", ")", "==", "[", "tgt_len", ",", "bsz", ",", "embed_dim", "]", "\n", "assert", "key", ".", "size", "(", ")", "==", "value", ".", "size", "(", ")", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "saved_state", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "'prev_key'", "in", "saved_state", ":", "\n", "# previous time steps are cached - no need to recompute", "\n", "# key and value if they are static", "\n", "                ", "if", "static_kv", ":", "\n", "                    ", "assert", "kv_same", "and", "not", "qkv_same", "\n", "key", "=", "value", "=", "None", "\n", "", "", "", "else", ":", "\n", "            ", "saved_state", "=", "None", "\n", "\n", "", "if", "qkv_same", ":", "\n", "# self-attention", "\n", "            ", "q", ",", "k", ",", "v", "=", "self", ".", "in_proj_qkv", "(", "query", ")", "\n", "", "elif", "kv_same", ":", "\n", "# encoder-decoder attention", "\n", "            ", "q", "=", "self", ".", "in_proj_q", "(", "query", ")", "\n", "if", "key", "is", "None", ":", "\n", "                ", "assert", "value", "is", "None", "\n", "k", "=", "v", "=", "None", "\n", "", "else", ":", "\n", "                ", "k", ",", "v", "=", "self", ".", "in_proj_kv", "(", "key", ")", "\n", "", "", "else", ":", "\n", "            ", "q", "=", "self", ".", "in_proj_q", "(", "query", ")", "\n", "k", "=", "self", ".", "in_proj_k", "(", "key", ")", "\n", "v", "=", "self", ".", "in_proj_v", "(", "value", ")", "\n", "", "q", "*=", "self", ".", "scaling", "\n", "\n", "if", "self", ".", "bias_k", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "bias_v", "is", "not", "None", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "self", ".", "bias_k", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "self", ".", "bias_v", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "[", "attn_mask", ",", "attn_mask", ".", "new_zeros", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                ", "key_padding_mask", "=", "torch", ".", "cat", "(", "\n", "[", "key_padding_mask", ",", "key_padding_mask", ".", "new_zeros", "(", "key_padding_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "k", "is", "not", "None", ":", "\n", "            ", "k", "=", "k", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "if", "v", "is", "not", "None", ":", "\n", "            ", "v", "=", "v", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "if", "saved_state", "is", "not", "None", ":", "\n", "# saved states are stored with shape (bsz, num_heads, seq_len, head_dim)", "\n", "            ", "if", "'prev_key'", "in", "saved_state", ":", "\n", "                ", "prev_key", "=", "saved_state", "[", "'prev_key'", "]", ".", "view", "(", "bsz", "*", "self", ".", "num_heads", ",", "-", "1", ",", "self", ".", "head_dim", ")", "\n", "if", "static_kv", ":", "\n", "                    ", "k", "=", "prev_key", "\n", "", "else", ":", "\n", "                    ", "k", "=", "torch", ".", "cat", "(", "(", "prev_key", ",", "k", ")", ",", "dim", "=", "1", ")", "\n", "", "", "if", "'prev_value'", "in", "saved_state", ":", "\n", "                ", "prev_value", "=", "saved_state", "[", "'prev_value'", "]", ".", "view", "(", "bsz", "*", "self", ".", "num_heads", ",", "-", "1", ",", "self", ".", "head_dim", ")", "\n", "if", "static_kv", ":", "\n", "                    ", "v", "=", "prev_value", "\n", "", "else", ":", "\n", "                    ", "v", "=", "torch", ".", "cat", "(", "(", "prev_value", ",", "v", ")", ",", "dim", "=", "1", ")", "\n", "", "", "saved_state", "[", "'prev_key'", "]", "=", "k", ".", "view", "(", "bsz", ",", "self", ".", "num_heads", ",", "-", "1", ",", "self", ".", "head_dim", ")", "\n", "saved_state", "[", "'prev_value'", "]", "=", "v", ".", "view", "(", "bsz", ",", "self", ".", "num_heads", ",", "-", "1", ",", "self", ".", "head_dim", ")", "\n", "\n", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "saved_state", ")", "\n", "\n", "", "src_len", "=", "k", ".", "size", "(", "1", ")", "\n", "\n", "# This is part of a workaround to get around fork/join parallelism", "\n", "# not supporting Optional types.", "\n", "if", "key_padding_mask", "is", "not", "None", "and", "key_padding_mask", ".", "shape", "==", "torch", ".", "Size", "(", "[", "]", ")", ":", "\n", "            ", "key_padding_mask", "=", "None", "\n", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "assert", "key_padding_mask", ".", "size", "(", "0", ")", "==", "bsz", "\n", "assert", "key_padding_mask", ".", "size", "(", "1", ")", "==", "src_len", "\n", "\n", "", "if", "self", ".", "add_zero_attn", ":", "\n", "            ", "src_len", "+=", "1", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "k", ".", "new_zeros", "(", "(", "k", ".", "size", "(", "0", ")", ",", "1", ")", "+", "k", ".", "size", "(", ")", "[", "2", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "v", ".", "new_zeros", "(", "(", "v", ".", "size", "(", "0", ")", ",", "1", ")", "+", "v", ".", "size", "(", ")", "[", "2", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "[", "attn_mask", ",", "attn_mask", ".", "new_zeros", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                ", "key_padding_mask", "=", "torch", ".", "cat", "(", "\n", "[", "key_padding_mask", ",", "torch", ".", "zeros", "(", "key_padding_mask", ".", "size", "(", "0", ")", ",", "1", ")", ".", "type_as", "(", "key_padding_mask", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "", "attn_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "assert", "list", "(", "attn_weights", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", "]", "\n", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "0", ")", "\n", "if", "self", ".", "onnx_trace", ":", "\n", "                ", "attn_mask", "=", "attn_mask", ".", "repeat", "(", "attn_weights", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "", "attn_weights", "+=", "attn_mask", "\n", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "# don't attend to padding symbols", "\n", "            ", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", ",", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "if", "self", ".", "onnx_trace", ":", "\n", "                ", "attn_weights", "=", "torch", ".", "where", "(", "\n", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ",", "\n", "torch", ".", "Tensor", "(", "[", "float", "(", "\"-Inf\"", ")", "]", ")", ",", "\n", "attn_weights", ".", "float", "(", ")", "\n", ")", ".", "type_as", "(", "attn_weights", ")", "\n", "", "else", ":", "\n", "                ", "attn_weights", "=", "attn_weights", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "==", "1", ",", "\n", "float", "(", "'-1e30'", ")", ",", "\n", ")", ".", "type_as", "(", "attn_weights", ")", "# FP16 support: cast to float and back", "\n", "", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "\n", "", "from", "fairseq", "import", "utils", "\n", "attn_weights", "=", "utils", ".", "softmax", "(", "\n", "attn_weights", ",", "dim", "=", "-", "1", ",", "onnx_trace", "=", "self", ".", "onnx_trace", ",", "\n", ")", ".", "type_as", "(", "attn_weights", ")", "\n", "attn_weights", "=", "F", ".", "dropout", "(", "attn_weights", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "attn", "=", "torch", ".", "bmm", "(", "attn_weights", ",", "v", ")", "\n", "assert", "list", "(", "attn", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "self", ".", "head_dim", "]", "\n", "if", "(", "self", ".", "onnx_trace", "and", "attn", ".", "size", "(", "1", ")", "==", "1", ")", ":", "\n", "# when ONNX tracing a single decoder step (sequence length == 1)", "\n", "# the transpose is a no-op copy before view, thus unnecessary", "\n", "            ", "attn", "=", "attn", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "attn", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "embed_dim", ")", "\n", "", "attn", "=", "self", ".", "out_proj", "(", "attn", ")", "\n", "\n", "if", "need_weights", ":", "\n", "# average attention weights over heads", "\n", "            ", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", ",", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "attn_weights", "=", "attn_weights", ".", "sum", "(", "dim", "=", "1", ")", "/", "self", ".", "num_heads", "\n", "", "else", ":", "\n", "            ", "attn_weights", "=", "None", "\n", "\n", "", "return", "attn", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.in_proj_qkv": [[208, 210], ["mutihead_attention.MultiheadAttention._in_proj().chunk", "mutihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention._in_proj"], ["", "def", "in_proj_qkv", "(", "self", ",", "query", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "query", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.in_proj_kv": [[211, 213], ["mutihead_attention.MultiheadAttention._in_proj().chunk", "mutihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention._in_proj"], ["", "def", "in_proj_kv", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "key", ",", "start", "=", "self", ".", "embed_dim", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.in_proj_q": [[214, 216], ["mutihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention._in_proj"], ["", "def", "in_proj_q", "(", "self", ",", "query", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "query", ",", "end", "=", "self", ".", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.in_proj_k": [[217, 219], ["mutihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention._in_proj"], ["", "def", "in_proj_k", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "key", ",", "start", "=", "self", ".", "embed_dim", ",", "end", "=", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.in_proj_v": [[220, 222], ["mutihead_attention.MultiheadAttention._in_proj"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention._in_proj"], ["", "def", "in_proj_v", "(", "self", ",", "value", ")", ":", "\n", "        ", "return", "self", ".", "_in_proj", "(", "value", ",", "start", "=", "2", "*", "self", ".", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention._in_proj": [[223, 230], ["torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "_in_proj", "(", "self", ",", "input", ",", "start", "=", "0", ",", "end", "=", "None", ")", ":", "\n", "        ", "weight", "=", "self", ".", "in_proj_weight", "\n", "bias", "=", "self", ".", "in_proj_bias", "\n", "weight", "=", "weight", "[", "start", ":", "end", ",", ":", "]", "\n", "if", "bias", "is", "not", "None", ":", "\n", "            ", "bias", "=", "bias", "[", "start", ":", "end", "]", "\n", "", "return", "F", ".", "linear", "(", "input", ",", "weight", ",", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.MultiheadAttention.reorder_incremental_state": [[231, 238], ["mutihead_attention.MultiheadAttention._get_input_buffer", "mutihead_attention.MultiheadAttention.keys", "mutihead_attention.MultiheadAttention._set_input_buffer", "input_buffer[].index_select"], "methods", ["None"], ["", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "\"\"\"Reorder buffered internal state (for incremental generation).\"\"\"", "\n", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "not", "None", ":", "\n", "            ", "for", "k", "in", "input_buffer", ".", "keys", "(", ")", ":", "\n", "                ", "input_buffer", "[", "k", "]", "=", "input_buffer", "[", "k", "]", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "input_buffer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.mutihead_attention.fill_with_neg_inf": [[240, 243], ["t.float().fill_().type_as", "t.float().fill_", "float", "t.float"], "function", ["None"], ["", "", "", "def", "fill_with_neg_inf", "(", "t", ")", ":", "\n", "    ", "\"\"\"FP16-compatible function that fills a tensor with -inf.\"\"\"", "\n", "return", "t", ".", "float", "(", ")", ".", "fill_", "(", "float", "(", "'-inf'", ")", ")", ".", "type_as", "(", "t", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.dynamic_rnn.DynamicGRU.__init__": [[20, 26], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.GRU"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "num_layers", "=", "1", ",", "bias", "=", "True", ",", "\n", "batch_first", "=", "False", ",", "dropout", "=", "0", ",", "bidirectional", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "input_size", ",", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "bias", "=", "bias", ",", "\n", "batch_first", "=", "batch_first", ",", "dropout", "=", "dropout", ",", "bidirectional", "=", "bidirectional", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.dynamic_rnn.DynamicGRU.forward": [[27, 65], ["x.size", "x.size", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "dynamic_rnn.DynamicGRU.gru.flatten_parameters", "dynamic_rnn.DynamicGRU.gru", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "dynamic_rnn.DynamicGRU.gru.flatten_parameters", "dynamic_rnn.DynamicGRU.gru", "x.index_select", "x.index_select", "sorted_seq_len.cpu().data.numpy", "unpacked_x.index_select", "unpacked_x.index_select", "torch.pad", "torch.pad", "torch.pad", "sorted_seq_len.cpu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "seq_len", ",", "**", "kwargs", ")", ":", "\n", "# if 'fast_weights' in kwargs:", "\n", "#     fast_weights = get_sub_layer('gru.', kwargs['fast_weights'])", "\n", "# else:", "\n", "#     fast_weights = None", "\n", "        ", "if", "self", ".", "batch_first", ":", "\n", "            ", "max_num_steps", "=", "x", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "max_num_steps", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "", "if", "seq_len", "is", "not", "None", ":", "\n", "            ", "sorted_seq_len", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "seq_len", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "_", ",", "original_idx", "=", "torch", ".", "sort", "(", "sorted_idx", ",", "dim", "=", "0", ",", "descending", "=", "False", ")", "\n", "if", "self", ".", "batch_first", ":", "\n", "                ", "sorted_x", "=", "x", ".", "index_select", "(", "0", ",", "sorted_idx", ")", "\n", "", "else", ":", "\n", "# print(sorted_idx)", "\n", "                ", "sorted_x", "=", "x", ".", "index_select", "(", "1", ",", "sorted_idx", ")", "\n", "\n", "", "packed_x", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "sorted_x", ",", "sorted_seq_len", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "\n", "self", ".", "gru", ".", "flatten_parameters", "(", ")", "\n", "out", ",", "state", "=", "self", ".", "gru", "(", "packed_x", ")", "\n", "\n", "unpacked_x", ",", "unpacked_len", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "out", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "\n", "if", "self", ".", "batch_first", ":", "\n", "                ", "out", "=", "unpacked_x", ".", "index_select", "(", "0", ",", "original_idx", ")", "\n", "if", "out", ".", "shape", "[", "1", "]", "<", "max_num_steps", ":", "\n", "                    ", "out", "=", "F", ".", "pad", "(", "out", ",", "[", "0", ",", "0", ",", "0", ",", "max_num_steps", "-", "out", ".", "shape", "[", "1", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "out", "=", "unpacked_x", ".", "index_select", "(", "1", ",", "original_idx", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "gru", ".", "flatten_parameters", "(", ")", "\n", "out", ",", "state", "=", "self", ".", "gru", "(", "x", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.dynamic_rnn.DynamicLSTM.__init__": [[68, 74], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "num_layers", "=", "1", ",", "bias", "=", "True", ",", "\n", "batch_first", "=", "False", ",", "dropout", "=", "0", ",", "bidirectional", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", ",", "hidden_size", ",", "num_layers", "=", "num_layers", ",", "bias", "=", "bias", ",", "\n", "batch_first", "=", "batch_first", ",", "dropout", "=", "dropout", ",", "bidirectional", "=", "bidirectional", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.dynamic_rnn.DynamicLSTM.forward": [[75, 112], ["dynamic_rnn.DynamicLSTM.lstm.flatten_parameters", "x.size", "x.size", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "dynamic_rnn.DynamicLSTM.lstm", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "dynamic_rnn.DynamicLSTM.lstm.flatten_parameters", "dynamic_rnn.DynamicLSTM.lstm", "x.index_select", "x.index_select", "sorted_seq_len.cpu().data.numpy", "unpacked_x.index_select", "unpacked_x.index_select", "torch.pad", "torch.pad", "torch.pad", "sorted_seq_len.cpu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "seq_len", ")", ":", "\n", "        ", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "if", "self", ".", "batch_first", ":", "\n", "            ", "max_num_steps", "=", "x", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "max_num_steps", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "", "if", "seq_len", "is", "not", "None", ":", "\n", "            ", "sorted_seq_len", ",", "sorted_idx", "=", "torch", ".", "sort", "(", "seq_len", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "_", ",", "original_idx", "=", "torch", ".", "sort", "(", "sorted_idx", ",", "dim", "=", "0", ",", "descending", "=", "False", ")", "\n", "if", "self", ".", "batch_first", ":", "\n", "                ", "sorted_x", "=", "x", ".", "index_select", "(", "0", ",", "sorted_idx", ")", "\n", "", "else", ":", "\n", "# print(sorted_idx)", "\n", "                ", "sorted_x", "=", "x", ".", "index_select", "(", "1", ",", "sorted_idx", ")", "\n", "\n", "", "packed_x", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "sorted_x", ",", "sorted_seq_len", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "\n", "out", ",", "state", "=", "self", ".", "lstm", "(", "packed_x", ")", "\n", "\n", "unpacked_x", ",", "unpacked_len", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "out", ",", "batch_first", "=", "self", ".", "batch_first", ")", "\n", "\n", "if", "self", ".", "batch_first", ":", "\n", "                ", "out", "=", "unpacked_x", ".", "index_select", "(", "0", ",", "original_idx", ")", "\n", "if", "out", ".", "shape", "[", "1", "]", "<", "max_num_steps", ":", "\n", "                    ", "out", "=", "F", ".", "pad", "(", "out", ",", "[", "0", ",", "0", ",", "0", ",", "max_num_steps", "-", "out", ".", "shape", "[", "1", "]", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "out", "=", "unpacked_x", ".", "index_select", "(", "1", ",", "original_idx", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "out", ",", "state", "=", "self", ".", "lstm", "(", "x", ")", "\n", "# if out.shape[0] < max_num_frames:", "\n", "#     out = F.pad(out, [0, 0, 0, 0, 0, max_num_frames - out.shape[0]])", "\n", "\n", "# state = state.transpose(0, 1).contiguous().view(out.size(0), -1)", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.cross_gate.CrossGate.__init__": [[7, 11], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc_gate1", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "self", ".", "fc_gate2", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.cross_gate.CrossGate.reset_parameters": [[12, 15], ["cross_gate.CrossGate.fc_gate1.reset_parameters", "cross_gate.CrossGate.fc_gate2.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "fc_gate1", ".", "reset_parameters", "(", ")", "\n", "self", ".", "fc_gate2", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.modules.cross_gate.CrossGate.forward": [[16, 28], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "cross_gate.CrossGate.fc_gate1", "cross_gate.CrossGate.fc_gate2", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "fast_weights", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "fast_weights", "is", "None", ":", "\n", "            ", "g1", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc_gate1", "(", "x1", ")", ")", "\n", "x2_", "=", "g1", "*", "x2", "\n", "g2", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc_gate2", "(", "x2", ")", ")", "\n", "x1_", "=", "g2", "*", "x1", "\n", "", "else", ":", "\n", "            ", "g1", "=", "torch", ".", "sigmoid", "(", "F", ".", "linear", "(", "x1", ",", "fast_weights", "[", "'fc_gate1.weight'", "]", ")", ")", "\n", "x2_", "=", "g1", "*", "x2", "\n", "g2", "=", "torch", ".", "sigmoid", "(", "F", ".", "linear", "(", "x2", ",", "fast_weights", "[", "'fc_gate2.weight'", "]", ")", ")", "\n", "x1_", "=", "g2", "*", "x1", "\n", "", "return", "x1_", ",", "x2_", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.fusion.BaseFusion.__init__": [[10, 15], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "models.weakly.prop.SparsePropMaxPool"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BaseFusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "hidden_size", "=", "config", "[", "'hidden_size'", "]", "\n", "self", ".", "vis_conv", "=", "nn", ".", "Conv2d", "(", "hidden_size", ",", "hidden_size", ",", "1", ",", "1", ")", "\n", "self", ".", "prop", "=", "SparsePropMaxPool", "(", "config", "[", "'SparsePropMaxPool'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.fusion.BaseFusion.forward": [[16, 25], ["fusion.BaseFusion.prop", "fusion.BaseFusion.vis_conv", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "visual_input.transpose", "torch.normalize", "torch.normalize", "enumerate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "textual_input", ",", "text_len", ",", "textual_mask", ",", "\n", "visual_input", ",", "visual_len", ",", "visual_mask", ",", "fast_weights", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "map_h", ",", "map_mask", "=", "self", ".", "prop", "(", "visual_input", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "map_h", "=", "self", ".", "vis_conv", "(", "map_h", ")", "\n", "txt_h", "=", "torch", ".", "stack", "(", "[", "textual_input", "[", "i", "]", "[", "l", "-", "1", "]", "for", "i", ",", "l", "in", "enumerate", "(", "text_len", ")", "]", ")", "\n", "txt_h", "=", "txt_h", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "fused_h", "=", "F", ".", "normalize", "(", "txt_h", "*", "map_h", ")", "*", "map_mask", "\n", "return", "fused_h", ",", "map_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.fusion.BaseFusion.reset_parameters": [[26, 28], ["fusion.BaseFusion.vis_conv.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "vis_conv", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.fusion.BetterFusion.__init__": [[31, 38], ["torch.nn.Module.__init__", "models.modules.TanhAttention", "models.modules.CrossGate", "models.modules.DynamicGRU"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BetterFusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "hidden_size", "=", "config", "[", "'hidden_size'", "]", "\n", "self", ".", "fuse_attn", "=", "TanhAttention", "(", "hidden_size", ")", "\n", "self", ".", "fuse_gate", "=", "CrossGate", "(", "hidden_size", ")", "\n", "self", ".", "fuse_gru", "=", "DynamicGRU", "(", "hidden_size", "*", "2", ",", "hidden_size", "//", "2", ",", "\n", "num_layers", "=", "1", ",", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.fusion.BetterFusion.reset_parameters": [[39, 43], ["fusion.BetterFusion.fuse_attn.reset_parameters", "fusion.BetterFusion.fuse_gate.reset_parameters", "fusion.BetterFusion.fuse_gru.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "fuse_attn", ".", "reset_parameters", "(", ")", "\n", "self", ".", "fuse_gate", ".", "reset_parameters", "(", ")", "\n", "self", ".", "fuse_gru", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.fusion.BetterFusion.forward": [[44, 61], ["fusion.BetterFusion.fuse_attn", "fusion.BetterFusion.fuse_gate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fusion.BetterFusion.fuse_gru"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "textual_input", ",", "text_len", ",", "textual_mask", ",", "visual_input", ",", "visual_len", "=", "None", ",", "visual_mask", "=", "None", ",", "fast_weights", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "fast_weights", "is", "not", "None", ":", "\n", "# fast_weights1 = get_sub_layer('fuse_attn.', fast_weights)", "\n", "# agg_txt_h, _ = self.fuse_attn(visual_input, textual_input, textual_mask, fast_weights=fast_weights1)", "\n", "# fast_weights1 = get_sub_layer('fuse_gate.', fast_weights)", "\n", "# visual_h, agg_txt_h = self.fuse_gate(visual_input, agg_txt_h, fast_weights=fast_weights1)", "\n", "# fast_weights1 = get_sub_layer('fuse_gru.', fast_weights)", "\n", "# fused_h = self.fuse_gru(torch.cat([visual_h, agg_txt_h], -1), None, fast_weights=fast_weights1)", "\n", "            ", "fused_h", "=", "None", "\n", "return", "None", ",", "None", "\n", "", "else", ":", "\n", "            ", "agg_txt_h", ",", "_", "=", "self", ".", "fuse_attn", "(", "visual_input", ",", "textual_input", ",", "textual_mask", ")", "\n", "visual_h", ",", "agg_txt_h", "=", "self", ".", "fuse_gate", "(", "visual_input", ",", "agg_txt_h", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "visual_h", ",", "agg_txt_h", "]", ",", "-", "1", ")", "\n", "fused_h", "=", "self", ".", "fuse_gru", "(", "x", ",", "None", ")", "\n", "return", "fused_h", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.video_encoder.FrameAvgPool.__init__": [[7, 12], ["torch.nn.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.AvgPool1d", "torch.nn.AvgPool1d"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "FrameAvgPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vis_conv", "=", "nn", ".", "Conv1d", "(", "config", "[", "'input_size'", "]", ",", "config", "[", "'hidden_size'", "]", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool1d", "(", "config", "[", "'kernel_size'", "]", ",", "config", "[", "'stride'", "]", ")", "\n", "# self.bn = nn.BatchNorm1d(config['hidden_size'])", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.video_encoder.FrameAvgPool.forward": [[14, 21], ["video_encoder.FrameAvgPool.vis_conv", "video_encoder.FrameAvgPool.avg_pool", "vis_h.transpose.transpose.transpose", "visual_input.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "visual_input", ",", "fast_weights", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# visual_input = F.normalize(visual_input, dim=1)", "\n", "        ", "vis_h", "=", "self", ".", "vis_conv", "(", "visual_input", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "vis_h", "=", "self", ".", "avg_pool", "(", "vis_h", ")", "\n", "# vis_h = self.bn(vis_h)", "\n", "vis_h", "=", "vis_h", ".", "transpose", "(", "1", ",", "2", ")", "\n", "return", "vis_h", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.video_encoder.FrameAvgPool.reset_parameters": [[22, 24], ["video_encoder.FrameAvgPool.vis_conv.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "vis_conv", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.video_encoder.FrameMaxPool.__init__": [[27, 31], ["torch.nn.Module.__init__", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.MaxPool1d", "torch.nn.MaxPool1d"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "FrameMaxPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vis_conv", "=", "nn", ".", "Conv1d", "(", "config", "[", "'input_size'", "]", ",", "config", "[", "'hidden_size'", "]", ",", "1", ",", "1", ")", "\n", "self", ".", "max_pool", "=", "nn", ".", "MaxPool1d", "(", "config", "[", "'kernel_size'", "]", ",", "config", "[", "'stride'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.video_encoder.FrameMaxPool.forward": [[32, 38], ["video_encoder.FrameMaxPool.vis_conv", "video_encoder.FrameMaxPool.max_pool", "vis_h.transpose.transpose.transpose", "visual_input.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "visual_input", ")", ":", "\n", "        ", "vis_h", "=", "self", ".", "vis_conv", "(", "visual_input", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "vis_h", "=", "self", ".", "max_pool", "(", "vis_h", ")", "\n", "vis_h", "=", "vis_h", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# vis_h = F.normalize(vis_h, dim=-1)", "\n", "return", "vis_h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.prop.SparsePropMaxPool.__init__": [[5, 23], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "enumerate", "torch.nn.ModuleList", "torch.nn.ModuleList.extend", "prop.SparsePropMaxPool.layers.append", "torch.nn.MaxPool1d", "torch.nn.MaxPool1d", "torch.nn.MaxPool1d", "torch.nn.MaxPool1d", "range"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "SparsePropMaxPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_scale_layers", "=", "config", "[", "'num_scale_layers'", "]", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "scale_idx", ",", "num_layer", "in", "enumerate", "(", "self", ".", "num_scale_layers", ")", ":", "\n", "            ", "scale_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "scale_idx", "==", "0", ":", "\n", "                ", "first_layer", "=", "nn", ".", "MaxPool1d", "(", "1", ",", "1", ")", "\n", "", "elif", "scale_idx", "==", "1", ":", "\n", "                ", "first_layer", "=", "nn", ".", "MaxPool1d", "(", "3", ",", "2", ")", "\n", "", "else", ":", "\n", "# first_layer = nn.MaxPool1d(5, 4)", "\n", "                ", "first_layer", "=", "nn", ".", "MaxPool1d", "(", "3", ",", "2", ")", "\n", "", "rest_layers", "=", "[", "nn", ".", "MaxPool1d", "(", "2", ",", "1", ")", "for", "_", "in", "range", "(", "1", ",", "num_layer", ")", "]", "\n", "scale_layers", ".", "extend", "(", "[", "first_layer", "]", "+", "rest_layers", ")", "\n", "self", ".", "layers", ".", "append", "(", "scale_layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.prop.SparsePropMaxPool.reset_parameters": [[24, 26], ["None"], "methods", ["None"], ["", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.prop.SparsePropMaxPool.forward": [[27, 55], ["layer.size", "layer.new_zeros", "layer.new_zeros", "enumerate", "enumerate", "props_h.transpose", "layer", "list", "range", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "props", ",", "**", "kwargs", ")", ":", "\n", "        ", "batch_size", ",", "hidden_size", ",", "ori_num_clips", "=", "x", ".", "size", "(", ")", "\n", "acum_layers", "=", "0", "\n", "stride", "=", "1", "\n", "ori_map_h", "=", "x", ".", "new_zeros", "(", "batch_size", ",", "hidden_size", ",", "ori_num_clips", ",", "ori_num_clips", ")", "\n", "ori_map_mask", "=", "x", ".", "new_zeros", "(", "batch_size", ",", "1", ",", "ori_num_clips", ",", "ori_num_clips", ")", "\n", "for", "scale_idx", ",", "scale_layers", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "for", "i", ",", "layer", "in", "enumerate", "(", "scale_layers", ")", ":", "\n", "                ", "stride", "=", "stride", "*", "layer", ".", "stride", "\n", "x", "=", "layer", "(", "x", ")", "\n", "ori_s_idxs", "=", "list", "(", "range", "(", "0", ",", "ori_num_clips", "-", "acum_layers", "-", "i", "*", "stride", ",", "stride", ")", ")", "\n", "ori_e_idxs", "=", "[", "s_idx", "+", "acum_layers", "+", "i", "*", "stride", "for", "s_idx", "in", "ori_s_idxs", "]", "\n", "ori_map_h", "[", ":", ",", ":", ",", "ori_s_idxs", ",", "ori_e_idxs", "]", "=", "x", "\n", "ori_map_mask", "[", ":", ",", ":", ",", "ori_s_idxs", ",", "ori_e_idxs", "]", "=", "1", "\n", "# print(ori_s_idxs)", "\n", "# print(ori_e_idxs)", "\n", "# print('=====================')", "\n", "", "acum_layers", "+=", "stride", "*", "(", "len", "(", "scale_layers", ")", "+", "1", ")", "\n", "", "props_h", "=", "ori_map_h", "[", ":", ",", ":", ",", "props", "[", ":", ",", "0", "]", ",", "props", "[", ":", ",", "1", "]", "-", "1", "]", "\n", "\n", "# ori_map_h1 = x.new_zeros(batch_size, hidden_size, ori_num_clips, ori_num_clips)", "\n", "# ori_map_h1[:, :, props[:, 0], props[:, 1] - 1] = ori_map_h[:, :, props[:, 0], props[:, 1] - 1]", "\n", "ori_map_mask", "[", ":", ",", ":", ",", "props", "[", ":", ",", "0", "]", ",", "props", "[", ":", ",", "1", "]", "-", "1", "]", "=", "1", "\n", "# ori_map_h = ori_map_h1", "\n", "# ori_map_h *= ori_map_mask", "\n", "# print(props[:, 0], props[:, 1] - 1)", "\n", "# exit(0)", "\n", "return", "props_h", ".", "transpose", "(", "1", ",", "2", ")", ",", "ori_map_h", ",", "ori_map_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.prop.DensePropMaxPool.__init__": [[58, 66], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.Identity", "torch.nn.MaxPool1d", "range"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DensePropMaxPool", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_layers", "=", "config", "[", "'num_layers'", "]", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "nn", ".", "Identity", "(", ")", "]", "\n", "+", "[", "nn", ".", "MaxPool1d", "(", "2", ",", "stride", "=", "1", ")", "for", "_", "in", "range", "(", "num_layers", "-", "1", ")", "]", "\n", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.prop.DensePropMaxPool.forward": [[67, 83], ["pool.new_zeros().cuda", "pool.new_zeros().cuda", "enumerate", "pool", "props_h.transpose", "pool.new_zeros", "pool.new_zeros", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "props", ",", "**", "kwargs", ")", ":", "\n", "        ", "batch_size", ",", "hidden_size", ",", "num_clips", "=", "x", ".", "shape", "\n", "map_h", "=", "x", ".", "new_zeros", "(", "batch_size", ",", "hidden_size", ",", "num_clips", ",", "num_clips", ")", ".", "cuda", "(", ")", "\n", "map_mask", "=", "x", ".", "new_zeros", "(", "batch_size", ",", "1", ",", "num_clips", ",", "num_clips", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "dig_idx", ",", "pool", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "pool", "(", "x", ")", "\n", "start_idxs", "=", "[", "s_idx", "for", "s_idx", "in", "range", "(", "0", ",", "num_clips", "-", "dig_idx", ",", "1", ")", "]", "\n", "end_idxs", "=", "[", "s_idx", "+", "dig_idx", "for", "s_idx", "in", "start_idxs", "]", "\n", "map_h", "[", ":", ",", ":", ",", "start_idxs", ",", "end_idxs", "]", "=", "x", "\n", "map_mask", "[", ":", ",", ":", ",", "start_idxs", ",", "end_idxs", "]", "=", "1", "\n", "", "props_h", "=", "map_h", "[", ":", ",", ":", ",", "props", "[", ":", ",", "0", "]", ",", "props", "[", ":", ",", "1", "]", "-", "1", "]", "\n", "# map_mask[:, :, props[:, 0], props[:, 1] - 1] = 1", "\n", "# print(props[:, 0], props[:, 1] - 1)", "\n", "# exit(0)", "\n", "return", "props_h", ".", "transpose", "(", "1", ",", "2", ")", ",", "map_h", ",", "map_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.loss.sigmoid_and_normalize": [[5, 11], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid.min", "torch.sigmoid.max"], "function", ["None"], ["def", "sigmoid_and_normalize", "(", "scores", ")", ":", "\n", "    ", "joint_prob", "=", "torch", ".", "sigmoid", "(", "scores", ")", "\n", "min_prob", ",", "max_prob", "=", "joint_prob", ".", "min", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ",", "joint_prob", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "joint_prob_norm", "=", "(", "joint_prob", "-", "min_prob", "+", "1e-10", ")", "/", "(", "max_prob", "-", "min_prob", "+", "1e-10", ")", "\n", "return", "joint_prob", ",", "joint_prob_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.loss.bce_rescale_loss": [[13, 30], ["loss.sigmoid_and_normalize", "torch.binary_cross_entropy", "F.binary_cross_entropy.mean", "loss_value.sum.mean", "loss_value.sum.sum"], "function", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.loss.sigmoid_and_normalize"], ["", "def", "bce_rescale_loss", "(", "scores", ",", "targets", ",", "min_iou", "=", "0.5", ",", "max_iou", "=", "1.0", ",", "bias", "=", "0.0", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "joint_prob", ",", "joint_prob_norm", "=", "sigmoid_and_normalize", "(", "scores", ")", "\n", "joint_prob", "=", "joint_prob_norm", "\n", "\n", "target_prob", "=", "(", "targets", "-", "min_iou", ")", "*", "(", "1", "-", "bias", ")", "/", "(", "max_iou", "-", "min_iou", ")", "\n", "target_prob", "[", "target_prob", ">", "0", "]", "+=", "bias", "\n", "target_prob", "[", "target_prob", ">", "1", "]", "=", "1", "\n", "target_prob", "[", "target_prob", "<", "0", "]", "=", "0", "\n", "loss", "=", "F", ".", "binary_cross_entropy", "(", "joint_prob_norm", ",", "target_prob", ",", "reduction", "=", "'none'", ")", "\n", "loss_value", "=", "loss", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "if", "reduction", "==", "'mean'", ":", "\n", "        ", "loss_value", "=", "loss_value", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "", "elif", "reduction", "==", "'none'", ":", "\n", "        ", "loss_value", "=", "loss_value", "\n", "", "else", ":", "\n", "        ", "loss_value", "=", "loss_value", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "return", "loss_value", ",", "joint_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.loss.weakly_supervised_loss": [[32, 117], ["loss.weakly_supervised_loss.calc_loss"], "function", ["None"], ["", "def", "weakly_supervised_loss", "(", "pos_score", ",", "neg_score1", ",", "neg_score2", ",", "neg_weight2", ",", "weight_gt", ",", "props", ",", "\n", "num_cands", ",", "log_fp", "=", "None", ",", "loss_meter", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "info", "=", "''", "\n", "\n", "def", "calc_loss", "(", "score", ",", "positive", "=", "True", ")", ":", "\n", "        ", "bsz", ",", "num_clips", "=", "score", ".", "size", "(", ")", "\n", "joint_prob", ",", "joint_prob_norm", "=", "sigmoid_and_normalize", "(", "score", ")", "\n", "# joint_prob = joint_prob_norm", "\n", "\n", "idx", "=", "torch", ".", "argsort", "(", "joint_prob_norm", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "props1", "=", "props", "[", "idx", "[", ":", ",", ":", "num_cands", "]", "]", ".", "contiguous", "(", ")", "# [bsz, 200, 2]", "\n", "props2", "=", "props1", "[", ":", ",", "0", "]", "\n", "props2", "=", "props2", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bsz", ",", "num_cands", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bsz", "*", "num_cands", ",", "2", ")", "\n", "props1", "=", "props1", ".", "view", "(", "bsz", "*", "num_cands", ",", "2", ")", "\n", "iou", "=", "calculate_IoU_batch", "(", "(", "props2", "[", ":", ",", "0", "]", ",", "props2", "[", ":", ",", "1", "]", ")", ",", "(", "props1", "[", ":", ",", "0", "]", ",", "props1", "[", ":", ",", "1", "]", ")", ")", "\n", "iou", "=", "iou", ".", "contiguous", "(", ")", ".", "view", "(", "bsz", ",", "num_cands", ")", "\n", "iou", "=", "iou", ".", "type_as", "(", "joint_prob_norm", ")", "\n", "\n", "sort_idx", "=", "torch", ".", "argsort", "(", "iou", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "[", ":", ",", ":", "kwargs", "[", "'topK'", "]", "]", "\n", "idx1", "=", "idx", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "sort_idx", ")", "\n", "tmp", "=", "joint_prob", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "idx1", ")", "\n", "# tmp = joint_prob.gather(dim=-1, index=idx)[:, :kwargs['topK']]", "\n", "align_score", "=", "tmp", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# log_fp.write('{}, {}\\n'.format(positive, tmp[0]))", "\n", "if", "positive", ":", "\n", "            ", "tmp1", "=", "joint_prob_norm", ".", "mean", "(", ")", "\n", "nonlocal", "info", "\n", "info", "+=", "'soc {}, '", ".", "format", "(", "float", "(", "tmp1", ")", ")", "\n", "# tmp1 = F.relu(joint_prob_norm.mean(dim=-1) - 0.6).mean()", "\n", "# tmp2 = (tmp * F.log_softmax(tmp, -1)).mean()", "\n", "tmp2", "=", "-", "(", "tmp", ".", "softmax", "(", "dim", "=", "-", "1", ")", "*", "tmp", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "tmp2", "=", "-", "(", "tmp", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", ".", "mean", "(", ")", "\n", "# tmp2 = F.log_softmax(tmp, -1).mean()", "\n", "# charades: 5e-2, 1e-1", "\n", "# norm_loss = 1e-2 * tmp1 + 1e-2 * tmp2", "\n", "norm_loss", "=", "tmp1", "+", "tmp2", "\n", "", "else", ":", "\n", "            ", "norm_loss", "=", "None", "\n", "\n", "", "return", "joint_prob_norm", ",", "align_score", ",", "norm_loss", "\n", "\n", "", "joint_prob_norm", ",", "pos_score", ",", "norm_loss1", "=", "calc_loss", "(", "pos_score", ",", "positive", "=", "True", ")", "\n", "_", ",", "neg_score1", ",", "neg_norm_loss1", "=", "calc_loss", "(", "neg_score1", ",", "positive", "=", "False", ")", "\n", "info", "+=", "'pos {}, neg1 {}, '", ".", "format", "(", "float", "(", "pos_score", ".", "mean", "(", "dim", "=", "-", "1", ")", ")", ",", "float", "(", "neg_score1", ".", "mean", "(", "dim", "=", "-", "1", ")", ")", ")", "\n", "# inter_loss = F.relu(neg_score1 - pos_score + 0.2).mean(dim=-1)", "\n", "inter_loss", "=", "(", "-", "torch", ".", "log", "(", "pos_score", "+", "1e-10", ")", "+", "-", "torch", ".", "log", "(", "1.0", "-", "neg_score1", "+", "1e-10", ")", ")", ".", "mean", "(", ")", "\n", "loss_meter", "[", "'inter_loss'", "]", ".", "update", "(", "F", ".", "relu", "(", "neg_score1", "-", "pos_score", "+", "0.2", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "item", "(", ")", ")", "\n", "# print(pos_score.mean(), neg_score1.mean())", "\n", "# loss_meter['inter_loss'].update(inter_loss.item())", "\n", "loss_meter", "[", "'norm_loss1'", "]", ".", "update", "(", "norm_loss1", ".", "item", "(", ")", ")", "\n", "\n", "if", "neg_score2", "is", "not", "None", ":", "\n", "        ", "_", ",", "neg_score2", ",", "_", "=", "calc_loss", "(", "neg_score2", ",", "positive", "=", "False", ")", "\n", "# Charades: 1e-1, 1e-2, 1e-2", "\n", "# weight_max, weight_min = neg_weight2.max(dim=-1, keepdim=True)[0], neg_weight2.min(dim=-1, keepdim=True)[0]", "\n", "# weight_nrom = (neg_weight2 - weight_min + 1e-10) / (weight_max - weight_min + 1e-10)", "\n", "neg_weight2", "=", "neg_weight2", ".", "squeeze", "(", "-", "1", ")", "\n", "intra_loss", "=", "F", ".", "relu", "(", "neg_score2", "-", "pos_score", "+", "0.2", ")", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "tmp", "=", "-", "(", "neg_weight2", ".", "softmax", "(", "dim", "=", "-", "1", ")", "*", "neg_weight2", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", ")", ".", "mean", "(", ")", "\n", "# print()", "\n", "# print(neg_weight2[0].tolist())", "\n", "# exit(0)", "\n", "# print(neg_weight2.mean())", "\n", "# norm_loss2 = neg_weight2.mean() + tmp", "\n", "# print(neg_weight2[0])", "\n", "norm_loss2", "=", "neg_weight2", ".", "mean", "(", ")", "+", "tmp", "\n", "# weight_loss = F.binary_cross_entropy(neg_weight2, weight_gt)", "\n", "\n", "info", "+=", "'neg2 {}'", ".", "format", "(", "float", "(", "neg_score2", ".", "mean", "(", ")", ")", ")", "\n", "loss_meter", "[", "'intra_loss'", "]", ".", "update", "(", "intra_loss", ".", "item", "(", ")", ")", "\n", "loss_meter", "[", "'norm_loss2'", "]", ".", "update", "(", "norm_loss2", ".", "item", "(", ")", ")", "\n", "# loss_meter['weight_loss'].update(weight_loss.item())", "\n", "", "else", ":", "\n", "        ", "intra_loss", "=", "0.0", "\n", "norm_loss2", "=", "0.0", "\n", "", "if", "log_fp", "is", "not", "None", ":", "\n", "        ", "log_fp", ".", "write", "(", "info", "+", "'\\n'", ")", "\n", "log_fp", ".", "flush", "(", ")", "\n", "", "final_loss", "=", "inter_loss", "+", "kwargs", "[", "'norm1'", "]", "*", "norm_loss1", "+", "kwargs", "[", "'intra'", "]", "*", "intra_loss", "+", "kwargs", "[", "'norm2'", "]", "*", "norm_loss2", "\n", "# final_loss = inter_loss + 1e-2 * norm_loss1 + 1e-1 * intra_loss + 1e-2 * norm_loss2", "\n", "return", "final_loss", ",", "joint_prob_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.loss.weakly_supervised_loss_fuck": [[119, 169], ["loss.weakly_supervised_loss.calc_loss"], "function", ["None"], ["", "def", "weakly_supervised_loss_fuck", "(", "pos_score", ",", "neg_score1", ",", "neg_score2", ",", "neg_weight2", ",", "weight_gt", ",", "props", ",", "\n", "num_cands", ",", "log_fp", "=", "None", ",", "loss_meter", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "info", "=", "''", "\n", "\n", "def", "calc_loss", "(", "score", ",", "positive", "=", "True", ")", ":", "\n", "        ", "bsz", ",", "num_clips", "=", "score", ".", "size", "(", ")", "\n", "joint_prob", ",", "joint_prob_norm", "=", "sigmoid_and_normalize", "(", "score", ")", "\n", "# joint_prob = joint_prob_norm", "\n", "\n", "idx", "=", "torch", ".", "argsort", "(", "joint_prob_norm", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "\n", "props1", "=", "props", "[", "idx", "[", ":", ",", ":", "num_cands", "]", "]", ".", "contiguous", "(", ")", "# [bsz, 200, 2]", "\n", "props2", "=", "props1", "[", ":", ",", "0", "]", "\n", "props2", "=", "props2", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "bsz", ",", "num_cands", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bsz", "*", "num_cands", ",", "2", ")", "\n", "props1", "=", "props1", ".", "view", "(", "bsz", "*", "num_cands", ",", "2", ")", "\n", "iou", "=", "calculate_IoU_batch", "(", "(", "props2", "[", ":", ",", "0", "]", ",", "props2", "[", ":", ",", "1", "]", ")", ",", "(", "props1", "[", ":", ",", "0", "]", ",", "props1", "[", ":", ",", "1", "]", ")", ")", "\n", "iou", "=", "iou", ".", "contiguous", "(", ")", ".", "view", "(", "bsz", ",", "num_cands", ")", "\n", "iou", "=", "iou", ".", "type_as", "(", "joint_prob_norm", ")", "\n", "\n", "sort_idx", "=", "torch", ".", "argsort", "(", "iou", ",", "dim", "=", "-", "1", ",", "descending", "=", "True", ")", "[", ":", ",", ":", "kwargs", "[", "'topK'", "]", "]", "\n", "idx1", "=", "idx", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "sort_idx", ")", "\n", "tmp", "=", "joint_prob", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "idx1", ")", "\n", "# tmp = joint_prob.gather(dim=-1, index=idx)[:, :kwargs['topK']]", "\n", "align_score", "=", "tmp", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "\n", "# log_fp.write('{}, {}\\n'.format(positive, tmp[0]))", "\n", "if", "positive", ":", "\n", "            ", "tmp1", "=", "joint_prob_norm", ".", "mean", "(", ")", "\n", "nonlocal", "info", "\n", "info", "+=", "'soc {}, '", ".", "format", "(", "float", "(", "tmp1", ")", ")", "\n", "# tmp1 = F.relu(joint_prob_norm.mean(dim=-1) - 0.6).mean()", "\n", "# tmp2 = (tmp * F.log_softmax(tmp, -1)).mean()", "\n", "tmp2", "=", "-", "(", "tmp", ".", "softmax", "(", "dim", "=", "-", "1", ")", "*", "tmp", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "mean", "(", ")", "\n", "tmp2", "=", "-", "(", "tmp", ".", "log_softmax", "(", "dim", "=", "-", "1", ")", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", ")", ".", "mean", "(", ")", "\n", "# tmp2 = F.log_softmax(tmp, -1).mean()", "\n", "# charades: 5e-2, 1e-1", "\n", "# norm_loss = 1e-2 * tmp1 + 1e-2 * tmp2", "\n", "norm_loss", "=", "tmp1", "+", "tmp2", "\n", "", "else", ":", "\n", "            ", "norm_loss", "=", "None", "\n", "\n", "", "return", "joint_prob_norm", ",", "align_score", ",", "norm_loss", "\n", "\n", "", "joint_prob_norm", ",", "pos_score", ",", "norm_loss1", "=", "calc_loss", "(", "pos_score", ",", "positive", "=", "True", ")", "\n", "\n", "_", ",", "neg_score2", ",", "_", "=", "calc_loss", "(", "neg_score2", ",", "positive", "=", "False", ")", "\n", "# Charades: 1e-1, 1e-2, 1e-2", "\n", "# weight_max, weight_min = neg_weight2.max(dim=-1, keepdim=True)[0], neg_weight2.min(dim=-1, keepdim=True)[0]", "\n", "# weight_nrom = (neg_weight2 - weight_min + 1e-10) / (weight_max - weight_min + 1e-10)", "\n", "\n", "return", "neg_score2", ",", "pos_score", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.loss.calculate_IoU_batch": [[171, 178], ["torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "calculate_IoU_batch", "(", "i0", ",", "i1", ")", ":", "\n", "    ", "union", "=", "(", "torch", ".", "min", "(", "torch", ".", "stack", "(", "[", "i0", "[", "0", "]", ",", "i1", "[", "0", "]", "]", ",", "0", ")", ",", "0", ")", "[", "0", "]", ",", "torch", ".", "max", "(", "torch", ".", "stack", "(", "[", "i0", "[", "1", "]", ",", "i1", "[", "1", "]", "]", ",", "0", ")", ",", "0", ")", "[", "0", "]", ")", "\n", "inter", "=", "(", "torch", ".", "max", "(", "torch", ".", "stack", "(", "[", "i0", "[", "0", "]", ",", "i1", "[", "0", "]", "]", ",", "0", ")", ",", "0", ")", "[", "0", "]", ",", "torch", ".", "min", "(", "torch", ".", "stack", "(", "[", "i0", "[", "1", "]", ",", "i1", "[", "1", "]", "]", ",", "0", ")", ",", "0", ")", "[", "0", "]", ")", "\n", "iou", "=", "1.0", "*", "(", "inter", "[", "1", "]", "-", "inter", "[", "0", "]", "+", "1e-10", ")", "/", "(", "union", "[", "1", "]", "-", "union", "[", "0", "]", "+", "1e-10", ")", "\n", "iou", "[", "union", "[", "1", "]", "-", "union", "[", "0", "]", "<", "-", "1e-5", "]", "=", "0", "\n", "iou", "[", "iou", "<", "0", "]", "=", "0.0", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.loss.calculate_IoU_batch_didemo": [[180, 187], ["torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "calculate_IoU_batch_didemo", "(", "i0", ",", "i1", ")", ":", "\n", "    ", "union", "=", "(", "torch", ".", "min", "(", "torch", ".", "stack", "(", "[", "i0", "[", "0", "]", ",", "i1", "[", "0", "]", "]", ",", "0", ")", ",", "0", ")", "[", "0", "]", ",", "torch", ".", "max", "(", "torch", ".", "stack", "(", "[", "i0", "[", "1", "]", ",", "i1", "[", "1", "]", "]", ",", "0", ")", ",", "0", ")", "[", "0", "]", ")", "\n", "inter", "=", "(", "torch", ".", "max", "(", "torch", ".", "stack", "(", "[", "i0", "[", "0", "]", ",", "i1", "[", "0", "]", "]", ",", "0", ")", ",", "0", ")", "[", "0", "]", ",", "torch", ".", "min", "(", "torch", ".", "stack", "(", "[", "i0", "[", "1", "]", ",", "i1", "[", "1", "]", "]", ",", "0", ")", ",", "0", ")", "[", "0", "]", ")", "\n", "iou", "=", "1.0", "*", "(", "inter", "[", "1", "]", "-", "inter", "[", "0", "]", "+", "1.0", ")", "/", "(", "union", "[", "1", "]", "-", "union", "[", "0", "]", "+", "1.0", ")", "\n", "iou", "[", "union", "[", "1", "]", "-", "union", "[", "0", "]", "<", "-", "1e-5", "]", "=", "0", "\n", "iou", "[", "iou", "<", "0", "]", "=", "0.0", "\n", "return", "iou", "\n", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.model.Filter.__init__": [[14, 22], ["torch.Module.__init__", "models.modules.NetVLAD", "models.modules.NetVLAD", "models.modules.NetVLAD", "models.modules.NetVLAD", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "hidden_size", "=", "512", "\n", "self", ".", "word_vlad", "=", "NetVLAD", "(", "cluster_size", "=", "8", ",", "feature_size", "=", "hidden_size", ")", "\n", "self", ".", "word_fc", "=", "nn", ".", "Linear", "(", "8", "*", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "fc_gate1", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "fc_gate2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.model.Filter.forward": [[26, 58], ["model.Filter.word_vlad", "model.Filter.word_fc", "word_des.unsqueeze.unsqueeze.unsqueeze", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "model.Filter.fc_gate2", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "x.unsqueeze.unsqueeze.squeeze", "x.unsqueeze.unsqueeze.unsqueeze", "frames_feat.detach", "words_feat.detach", "model.Filter.fc_gate1", "x.unsqueeze.unsqueeze.max", "x.unsqueeze.unsqueeze.min"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "frames_feat", ",", "words_feat", ",", "words_len", ",", "words_mask", ",", "**", "kwargs", ")", ":", "\n", "        ", "frames_feat", ",", "words_feat", "=", "frames_feat", ".", "detach", "(", ")", ",", "words_feat", ".", "detach", "(", ")", "\n", "\n", "word_des", "=", "self", ".", "word_vlad", "(", "words_feat", ",", "words_mask", ",", "True", ")", "\n", "word_des", "=", "self", ".", "word_fc", "(", "word_des", ")", "\n", "\n", "# word_des = []", "\n", "# for i in range(words_len.size(0)):", "\n", "#     word_des.append(words_feat[i, :words_len[i]].mean(dim=0))", "\n", "# word_des = torch.stack(word_des, 0)", "\n", "word_des", "=", "word_des", ".", "unsqueeze", "(", "1", ")", "\n", "# word_des = word_des.expand(*frames_feat.size())", "\n", "# NET:mIoU 0.6055 | IoU@0.1 0.9683 | IoU@0.3 0.9297 | IoU@0.5 0.6561 | IoU@0.7 0.3870 | IoU@0.9 0.1048 |", "\n", "x", "=", "frames_feat", "*", "word_des", "\n", "x", "=", "torch", ".", "tanh", "(", "self", ".", "fc_gate1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc_gate2", "(", "x", ")", "\n", "x1", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n", "# x = frames_feat", "\n", "# x = torch.tanh(self.self_gate1(x))", "\n", "# x = self.self_gate2(x)", "\n", "# x2 = torch.sigmoid(x)", "\n", "\n", "x", "=", "x1", "\n", "\n", "x", "=", "x", ".", "squeeze", "(", "-", "1", ")", "\n", "x_max", ",", "x_min", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ",", "x", ".", "min", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "(", "x", "-", "x_min", "+", "1e-10", ")", "/", "(", "x_max", "-", "x_min", "+", "1e-10", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# [nb, len, 1]", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.model.WeaklyModel.__init__": [[61, 77], ["torch.Module.__init__", "models.weakly.prop.SparsePropMaxPool", "models.weakly.prop.SparsePropMaxPool", "models.weakly.prop.SparsePropMaxPool", "models.weakly.prop.SparsePropMaxPool", "torch.Parameter", "torch.Parameter", "torch.Parameter", "getattr", "getattr", "getattr", "getattr", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.Filter"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "video_encoder", "=", "getattr", "(", "video_encoder", ",", "config", "[", "'VideoEncoder'", "]", "[", "'name'", "]", ")", "(", "config", "[", "'VideoEncoder'", "]", ")", "\n", "self", ".", "query_encoder", "=", "getattr", "(", "query_encoder", ",", "config", "[", "'QueryEncoder'", "]", "[", "'name'", "]", ")", "(", "config", "[", "'QueryEncoder'", "]", ")", "\n", "self", ".", "fusion", "=", "getattr", "(", "fusion", ",", "config", "[", "'Fusion'", "]", "[", "'name'", "]", ")", "(", "config", "[", "'Fusion'", "]", ")", "\n", "# self.fusion1 = getattr(fusion, config['Fusion']['name'])(config['Fusion'])", "\n", "self", ".", "prop", "=", "SparsePropMaxPool", "(", "config", "[", "'Fusion'", "]", "[", "'SparsePropMaxPool'", "]", ")", "\n", "# self.prop = DensePropMaxPool(config['Fusion']['SparsePropMaxPool'])", "\n", "self", ".", "scorer", "=", "getattr", "(", "scorer", ",", "config", "[", "'Scorer'", "]", "[", "'name'", "]", ")", "(", "config", "[", "'Scorer'", "]", ")", "\n", "# self.scorer1 = getattr(scorer, config['Scorer']['name'])(config['Scorer'])", "\n", "self", ".", "back", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "512", ")", ",", "requires_grad", "=", "False", ")", "\n", "# from torch.nn import init", "\n", "# init.normal_(self.back, 0, 1.0 / 512)", "\n", "self", ".", "filter_branch", "=", "config", "[", "'filter_branch'", "]", "\n", "if", "self", ".", "filter_branch", ":", "\n", "            ", "self", ".", "filter", "=", "Filter", "(", "config", "[", "'Filter'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.model.WeaklyModel.forward": [[78, 149], ["model.WeaklyModel.video_encoder", "kwargs[].squeeze", "kwargs[].squeeze", "model.generate_mask", "model.WeaklyModel.query_encoder", "torch.dropout", "torch.dropout", "torch.dropout", "model.WeaklyModel.prop", "model.WeaklyModel.scorer", "model.WeaklyModel.filter", "model.WeaklyModel.fusion", "model.WeaklyModel.fusion", "model.WeaklyModel.transpose", "frames_feat.size", "list", "torch.dropout", "torch.dropout", "torch.dropout", "model.WeaklyModel.prop", "model.WeaklyModel.scorer", "res.update", "model.WeaklyModel.fusion", "torch.dropout", "torch.dropout", "torch.dropout", "model.WeaklyModel.prop", "model.WeaklyModel.scorer", "res.update", "res.update", "reversed", "model.WeaklyModel.filter", "model.WeaklyModel.fusion", "model.WeaklyModel.fusion", "model.WeaklyModel.transpose", "model.WeaklyModel.transpose", "range"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.model.generate_mask", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.update", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.update", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.update"], ["", "", "def", "forward", "(", "self", ",", "frames_feat", ",", "frames_len", ",", "words_feat", ",", "words_len", ",", "bias", ",", "get_negative", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "dropout_rate", "=", "0.1", "\n", "frames_encoded", "=", "self", ".", "video_encoder", "(", "frames_feat", ")", "\n", "\n", "kwargs", "[", "'props'", "]", "=", "kwargs", "[", "'props'", "]", ".", "squeeze", "(", "0", ")", "\n", "kwargs", "[", "'props_graph'", "]", "=", "kwargs", "[", "'props_graph'", "]", ".", "squeeze", "(", "0", ")", "\n", "\n", "words_mask", "=", "generate_mask", "(", "words_feat", ",", "words_len", ")", "\n", "words_encoded", "=", "self", ".", "query_encoder", "(", "words_feat", ",", "words_len", ",", "words_mask", ")", "\n", "\n", "if", "self", ".", "filter_branch", ":", "\n", "            ", "weight", "=", "self", ".", "filter", "(", "frames_encoded", ",", "words_encoded", ",", "words_len", ",", "words_mask", ",", "**", "kwargs", ")", "\n", "# weight = kwargs['frame_gt'].unsqueeze(-1)", "\n", "fused_h", "=", "self", ".", "fusion", "(", "words_encoded", ",", "words_len", ",", "words_mask", ",", "\n", "frames_encoded", "*", "weight", "+", "self", ".", "back", "*", "(", "1", "-", "weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "None", "\n", "fused_h", "=", "self", ".", "fusion", "(", "words_encoded", ",", "words_len", ",", "words_mask", ",", "frames_encoded", ")", "\n", "", "fused_h", "=", "F", ".", "dropout", "(", "fused_h", ",", "dropout_rate", ",", "self", ".", "training", ")", "\n", "props_h", ",", "map_h", ",", "map_mask", "=", "self", ".", "prop", "(", "fused_h", ".", "transpose", "(", "1", ",", "2", ")", ",", "**", "kwargs", ")", "\n", "score", "=", "self", ".", "scorer", "(", "props_h", "=", "props_h", ",", "map_h", "=", "map_h", ",", "map_mask", "=", "map_mask", ",", "**", "kwargs", ")", "\n", "res", "=", "{", "\n", "'score'", ":", "score", ",", "\n", "}", "\n", "\n", "if", "get_negative", ":", "\n", "            ", "bsz", "=", "frames_feat", ".", "size", "(", "0", ")", "\n", "if", "self", ".", "filter_branch", ":", "\n", "                ", "fused_h", "=", "self", ".", "fusion", "(", "words_encoded", ",", "words_len", ",", "words_mask", ",", "\n", "frames_encoded", "*", "(", "1", "-", "weight", ")", "+", "self", ".", "back", "*", "weight", ")", "\n", "fused_h", "=", "F", ".", "dropout", "(", "fused_h", ",", "dropout_rate", ",", "self", ".", "training", ")", "\n", "props_h", ",", "map_h", ",", "map_mask", "=", "self", ".", "prop", "(", "fused_h", ".", "transpose", "(", "1", ",", "2", ")", ",", "**", "kwargs", ")", "\n", "score", "=", "self", ".", "scorer", "(", "props_h", "=", "props_h", ",", "map_h", "=", "map_h", ",", "map_mask", "=", "map_mask", ",", "**", "kwargs", ")", "\n", "res", ".", "update", "(", "{", "\n", "'intra_neg'", ":", "{", "\n", "'weight'", ":", "weight", ",", "\n", "'neg_score'", ":", "score", ",", "\n", "}", "\n", "}", ")", "\n", "", "else", ":", "\n", "                ", "res", ".", "update", "(", "{", "\n", "'intra_neg'", ":", "{", "\n", "'weight'", ":", "None", ",", "\n", "'neg_score'", ":", "None", ",", "\n", "}", "\n", "}", ")", "\n", "\n", "# frames_encoded = frames_encoded[list(reversed(range(bsz)))]", "\n", "# words_encoded = words_encoded[kwargs['neg']]", "\n", "", "idx", "=", "kwargs", "[", "'neg'", "]", "\n", "idx", "=", "list", "(", "reversed", "(", "range", "(", "bsz", ")", ")", ")", "\n", "# words_encoded, words_mask, words_len = words_encoded[idx], words_mask[idx], words_len[idx]", "\n", "frames_encoded", "=", "frames_encoded", "[", "idx", "]", "\n", "# exit(0)", "\n", "# idx = list(reversed(range(bsz)))", "\n", "# frames_encoded = frames_encoded[idx]", "\n", "if", "self", ".", "filter_branch", ":", "\n", "                ", "weight", "=", "self", ".", "filter", "(", "frames_encoded", ",", "words_encoded", ",", "words_len", ",", "words_mask", ")", "\n", "fused_h", "=", "self", ".", "fusion", "(", "words_encoded", ",", "words_len", ",", "words_mask", ",", "\n", "frames_encoded", "*", "weight", "+", "self", ".", "back", "*", "(", "1", "-", "weight", ")", ")", "\n", "", "else", ":", "\n", "                ", "fused_h", "=", "self", ".", "fusion", "(", "words_encoded", ",", "words_len", ",", "words_mask", ",", "frames_encoded", ")", "\n", "", "fused_h", "=", "F", ".", "dropout", "(", "fused_h", ",", "dropout_rate", ",", "self", ".", "training", ")", "\n", "props_h", ",", "map_h", ",", "map_mask", "=", "self", ".", "prop", "(", "fused_h", ".", "transpose", "(", "1", ",", "2", ")", ",", "**", "kwargs", ")", "\n", "score", "=", "self", ".", "scorer", "(", "props_h", "=", "props_h", ",", "map_h", "=", "map_h", ",", "map_mask", "=", "map_mask", ",", "**", "kwargs", ")", "\n", "res", ".", "update", "(", "{", "\n", "'inter_neg'", ":", "{", "\n", "'neg_score'", ":", "score", ",", "\n", "}", "\n", "}", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.model.Filter2.__init__": [[164, 173], ["torch.Module.__init__", "models.modules.NetVLAD", "models.modules.NetVLAD", "models.modules.NetVLAD", "models.modules.NetVLAD", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "hidden_size", "=", "512", "\n", "self", ".", "word_vlad", "=", "NetVLAD", "(", "cluster_size", "=", "4", ",", "feature_size", "=", "hidden_size", ")", "\n", "\n", "self", ".", "ws1", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ",", "bias", "=", "True", ")", "\n", "self", ".", "ws2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "wst", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.model.Filter2.forward": [[174, 191], ["model.Filter2.word_vlad", "model.Filter2.ws1", "model.Filter2.ws2", "model.Filter2.wst().squeeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.mean", "x.unsqueeze.unsqueeze.unsqueeze", "frames_feat.detach", "words_feat.detach", "model.Filter2.wst", "x.unsqueeze.unsqueeze.max", "x.unsqueeze.unsqueeze.min", "model.Filter2.unsqueeze", "model.Filter2.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "frames_feat", ",", "words_feat", ",", "words_len", ",", "words_mask", ",", "**", "kwargs", ")", ":", "\n", "        ", "frames_feat", ",", "words_feat", "=", "frames_feat", ".", "detach", "(", ")", ",", "words_feat", ".", "detach", "(", ")", "\n", "\n", "k", "=", "self", ".", "word_vlad", "(", "words_feat", ",", "words_mask", ",", "False", ")", "\n", "\n", "q", "=", "self", ".", "ws1", "(", "frames_feat", ")", "# [nb, len1, d]", "\n", "k", "=", "self", ".", "ws2", "(", "k", ")", "# [nb, len2, d]", "\n", "\n", "sim", "=", "self", ".", "wst", "(", "(", "q", ".", "unsqueeze", "(", "2", ")", "+", "k", ".", "unsqueeze", "(", "1", ")", ")", ".", "tanh", "(", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "sim", "=", "F", ".", "softmax", "(", "sim", ",", "-", "1", ")", "\n", "\n", "x", "=", "sim", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "x_max", ",", "x_min", "=", "x", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ",", "x", ".", "min", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "(", "x", "-", "x_min", "+", "1e-10", ")", "/", "(", "x_max", "-", "x_min", "+", "1e-10", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.model.generate_mask": [[151, 161], ["torch.stack", "torch.stack", "torch.stack", "int", "x.size", "torch.stack.append", "x_len.min", "torch.zeros().byte().cuda", "torch.zeros().byte().cuda", "torch.zeros().byte().cuda", "torch.zeros().byte", "torch.zeros().byte", "torch.zeros().byte", "torch.zeros", "torch.zeros", "torch.zeros", "x.size"], "function", ["None"], ["", "", "def", "generate_mask", "(", "x", ",", "x_len", ")", ":", "\n", "    ", "if", "False", "and", "int", "(", "x_len", ".", "min", "(", ")", ")", "==", "x", ".", "size", "(", "1", ")", ":", "\n", "        ", "mask", "=", "None", "\n", "", "else", ":", "\n", "        ", "mask", "=", "[", "]", "\n", "for", "l", "in", "x_len", ":", "\n", "            ", "mask", ".", "append", "(", "torch", ".", "zeros", "(", "[", "x", ".", "size", "(", "1", ")", "]", ")", ".", "byte", "(", ")", ".", "cuda", "(", ")", ")", "\n", "mask", "[", "-", "1", "]", "[", ":", "l", "]", "=", "1", "\n", "", "mask", "=", "torch", ".", "stack", "(", "mask", ",", "0", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.GraphConv.__init__": [[27, 30], ["torch.nn.Module.__init__", "torch_geometric.nn.GCNConv"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gcn", "=", "GCNConv", "(", "input_size", ",", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.GraphConv._get_buffer": [[31, 42], ["hasattr", "graph.new_zeros", "range", "torch_geometric.utils.dense_to_sparse", "setattr", "setattr", "getattr", "getattr", "x.size", "x.size", "edge_index.size"], "methods", ["None"], ["", "def", "_get_buffer", "(", "self", ",", "x", ",", "graph", ",", "bsz", ",", "len_", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'buffer_edge_index'", ")", ":", "\n", "            ", "adj_mat", "=", "graph", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "                ", "adj_mat", "[", "i", "*", "len_", ":", "(", "i", "+", "1", ")", "*", "len_", ",", "i", "*", "len_", ":", "(", "i", "+", "1", ")", "*", "len_", "]", "=", "graph", "\n", "", "edge_index", ",", "edge_attr", "=", "dense_to_sparse", "(", "adj_mat", ")", "\n", "# print(edge_index.size(1) / bsz)", "\n", "setattr", "(", "self", ",", "'num_edges_per_graph'", ",", "edge_index", ".", "size", "(", "1", ")", "//", "bsz", ")", "\n", "setattr", "(", "self", ",", "'buffer_edge_index'", ",", "edge_index", ")", "\n", "", "total_edges", "=", "getattr", "(", "self", ",", "'num_edges_per_graph'", ")", "*", "bsz", "\n", "return", "getattr", "(", "self", ",", "'buffer_edge_index'", ")", "[", ":", ",", ":", "total_edges", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.GraphConv.forward": [[43, 51], ["scorer.GraphConv.size", "scorer.GraphConv.contiguous().view", "scorer.GraphConv._get_buffer", "scorer.GraphConv.gcn", "scorer.GraphConv.contiguous().view", "graph.squeeze", "torch.relu", "torch.relu", "scorer.GraphConv.contiguous", "scorer.GraphConv.contiguous"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.GeneralGraphConv._get_buffer"], ["", "def", "forward", "(", "self", ",", "x", ",", "graph", ")", ":", "\n", "        ", "bsz", ",", "len_", ",", "hid_dim", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "hid_dim", ")", "\n", "edge_index", "=", "self", ".", "_get_buffer", "(", "x", ",", "graph", ".", "squeeze", "(", "0", ")", ",", "bsz", ",", "len_", ")", "\n", "res", "=", "x", "\n", "x", "=", "self", ".", "gcn", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "+", "res", "\n", "return", "x", ".", "contiguous", "(", ")", ".", "view", "(", "bsz", ",", "len_", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.GATGraphConv.__init__": [[54, 58], ["torch.nn.Module.__init__", "torch_geometric.nn.GATConv"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "num_heads", "=", "2", "\n", "self", ".", "gat", "=", "GATConv", "(", "input_size", ",", "output_size", "//", "num_heads", ",", "heads", "=", "num_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.GATGraphConv._get_buffer": [[59, 70], ["graph.new_zeros", "range", "torch_geometric.utils.dense_to_sparse", "setattr", "setattr", "getattr", "getattr", "hasattr", "x.size", "x.size", "edge_index.size", "edge_index.size"], "methods", ["None"], ["", "def", "_get_buffer", "(", "self", ",", "x", ",", "graph", ",", "bsz", ",", "len_", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'buffer_edge_index'", ")", "or", "True", ":", "\n", "            ", "adj_mat", "=", "graph", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "                ", "adj_mat", "[", "i", "*", "len_", ":", "(", "i", "+", "1", ")", "*", "len_", ",", "i", "*", "len_", ":", "(", "i", "+", "1", ")", "*", "len_", "]", "=", "graph", "\n", "", "edge_index", ",", "edge_attr", "=", "dense_to_sparse", "(", "adj_mat", ")", "\n", "assert", "edge_index", ".", "size", "(", "1", ")", "%", "bsz", "==", "0", "\n", "setattr", "(", "self", ",", "'num_edges_per_graph'", ",", "edge_index", ".", "size", "(", "1", ")", "//", "bsz", ")", "\n", "setattr", "(", "self", ",", "'buffer_edge_index'", ",", "edge_index", ")", "\n", "", "total_edges", "=", "getattr", "(", "self", ",", "'num_edges_per_graph'", ")", "*", "bsz", "\n", "return", "getattr", "(", "self", ",", "'buffer_edge_index'", ")", "[", ":", ",", ":", "total_edges", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.GATGraphConv.forward": [[71, 79], ["scorer.GATGraphConv.size", "scorer.GATGraphConv.contiguous().view", "scorer.GATGraphConv._get_buffer", "scorer.GATGraphConv.gat", "scorer.GATGraphConv.contiguous().view", "graph.squeeze", "torch.relu", "torch.relu", "scorer.GATGraphConv.contiguous", "scorer.GATGraphConv.contiguous"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.GeneralGraphConv._get_buffer"], ["", "def", "forward", "(", "self", ",", "x", ",", "graph", ")", ":", "\n", "        ", "bsz", ",", "len_", ",", "hid_dim", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "hid_dim", ")", "\n", "edge_index", "=", "self", ".", "_get_buffer", "(", "x", ",", "graph", ".", "squeeze", "(", "0", ")", ",", "bsz", ",", "len_", ")", "\n", "res", "=", "x", "\n", "x", "=", "self", ".", "gat", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "+", "res", "\n", "return", "x", ".", "contiguous", "(", ")", ".", "view", "(", "bsz", ",", "len_", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.GeneralGraphConv.__init__": [[82, 85], ["torch.nn.Module.__init__", "gcn_class"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gcn_class", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gcn", "=", "gcn_class", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.GeneralGraphConv._get_buffer": [[86, 97], ["graph.new_zeros", "range", "torch_geometric.utils.dense_to_sparse", "setattr", "setattr", "getattr", "getattr", "hasattr", "x.size", "x.size", "edge_index.size", "edge_index.size"], "methods", ["None"], ["", "def", "_get_buffer", "(", "self", ",", "x", ",", "graph", ",", "bsz", ",", "len_", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'buffer_edge_index'", ")", "or", "True", ":", "\n", "            ", "adj_mat", "=", "graph", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "                ", "adj_mat", "[", "i", "*", "len_", ":", "(", "i", "+", "1", ")", "*", "len_", ",", "i", "*", "len_", ":", "(", "i", "+", "1", ")", "*", "len_", "]", "=", "graph", "\n", "", "edge_index", ",", "edge_attr", "=", "dense_to_sparse", "(", "adj_mat", ")", "\n", "assert", "edge_index", ".", "size", "(", "1", ")", "%", "bsz", "==", "0", "\n", "setattr", "(", "self", ",", "'num_edges_per_graph'", ",", "edge_index", ".", "size", "(", "1", ")", "//", "bsz", ")", "\n", "setattr", "(", "self", ",", "'buffer_edge_index'", ",", "edge_index", ")", "\n", "", "total_edges", "=", "getattr", "(", "self", ",", "'num_edges_per_graph'", ")", "*", "bsz", "\n", "return", "getattr", "(", "self", ",", "'buffer_edge_index'", ")", "[", ":", ",", ":", "total_edges", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.GeneralGraphConv.forward": [[98, 107], ["scorer.GeneralGraphConv.size", "scorer.GeneralGraphConv.contiguous().view", "scorer.GeneralGraphConv._get_buffer", "scorer.GeneralGraphConv.unsqueeze", "scorer.GeneralGraphConv.gcn", "scorer.GeneralGraphConv.contiguous().view", "graph.squeeze", "torch.relu", "torch.relu", "scorer.GeneralGraphConv.contiguous", "scorer.GeneralGraphConv.contiguous"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.GeneralGraphConv._get_buffer"], ["", "def", "forward", "(", "self", ",", "x", ",", "graph", ")", ":", "\n", "        ", "bsz", ",", "len_", ",", "hid_dim", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "hid_dim", ")", "\n", "edge_index", "=", "self", ".", "_get_buffer", "(", "x", ",", "graph", ".", "squeeze", "(", "0", ")", ",", "bsz", ",", "len_", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "res", "=", "x", "\n", "x", "=", "self", ".", "gcn", "(", "x", ",", "edge_index", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "+", "res", "\n", "return", "x", ".", "contiguous", "(", ")", ".", "view", "(", "bsz", ",", "len_", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.MapGraph.__init__": [[110, 122], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "enumerate", "torch.nn.Linear", "torch.nn.Linear", "scorer.MapGraph.convs.append", "scorer.GATGraphConv"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "MapGraph", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_size", "=", "config", "[", "'input_size'", "]", "\n", "hidden_sizes", "=", "config", "[", "'hidden_sizes'", "]", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "channel_sizes", "=", "[", "input_size", "]", "+", "hidden_sizes", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "hidden_sizes", ")", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "GATGraphConv", "(", "channel_sizes", "[", "i", "]", ",", "channel_sizes", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "pred_layer", "=", "nn", ".", "Linear", "(", "channel_sizes", "[", "-", "1", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.MapGraph.forward": [[123, 129], ["scorer.MapGraph.pred_layer().squeeze", "c", "scorer.MapGraph.pred_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "props_h", ",", "props_graph", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "props_h", "\n", "for", "c", "in", "self", ".", "convs", ":", "\n", "            ", "x", "=", "c", "(", "x", ",", "props_graph", ")", "\n", "", "x", "=", "self", ".", "pred_layer", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.MapGraph.reset_parameters": [[130, 132], ["scorer.MapGraph.pred_layer.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "pred_layer", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.MapConv.__init__": [[135, 152], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "enumerate", "torch.nn.Conv2d", "torch.nn.Conv2d", "zip", "scorer.MapConv.convs.append", "len", "len", "len", "len", "len", "len", "len", "len", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "MapConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_size", "=", "config", "[", "'input_size'", "]", "\n", "hidden_sizes", "=", "config", "[", "'hidden_sizes'", "]", "\n", "kernel_sizes", "=", "config", "[", "'kernel_sizes'", "]", "\n", "strides", "=", "config", "[", "'strides'", "]", "\n", "paddings", "=", "config", "[", "'paddings'", "]", "\n", "dilations", "=", "config", "[", "'dilations'", "]", "\n", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "assert", "len", "(", "hidden_sizes", ")", "==", "len", "(", "kernel_sizes", ")", "and", "len", "(", "hidden_sizes", ")", "==", "len", "(", "strides", ")", "and", "len", "(", "hidden_sizes", ")", "==", "len", "(", "paddings", ")", "and", "len", "(", "hidden_sizes", ")", "==", "len", "(", "dilations", ")", "\n", "channel_sizes", "=", "[", "input_size", "]", "+", "hidden_sizes", "\n", "for", "i", ",", "(", "k", ",", "s", ",", "p", ",", "d", ")", "in", "enumerate", "(", "zip", "(", "kernel_sizes", ",", "strides", ",", "paddings", ",", "dilations", ")", ")", ":", "\n", "            ", "self", ".", "convs", ".", "append", "(", "nn", ".", "Conv2d", "(", "channel_sizes", "[", "i", "]", ",", "channel_sizes", "[", "i", "+", "1", "]", ",", "k", ",", "s", ",", "p", ",", "d", ")", ")", "\n", "", "self", ".", "pred_layer", "=", "nn", ".", "Conv2d", "(", "hidden_sizes", "[", "-", "1", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.MapConv.forward": [[153, 169], ["enumerate", "scorer.MapConv.pred_layer", "torch.relu_", "torch.relu_", "torch.relu_", "torch.relu_", "scorer.get_padded_mask_and_weight", "pred"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.get_padded_mask_and_weight"], ["", "def", "forward", "(", "self", ",", "map_h", ",", "map_mask", ",", "props", ",", "**", "kwargs", ")", ":", "\n", "        ", "padded_mask", "=", "map_mask", "\n", "x", "=", "map_h", "\n", "for", "i", ",", "pred", "in", "enumerate", "(", "self", ".", "convs", ")", ":", "\n", "# print(x.size())", "\n", "# x = F.relu(pred(x))", "\n", "            ", "x", "=", "torch", ".", "relu_", "(", "pred", "(", "x", ")", ")", "\n", "padded_mask", ",", "masked_weight", "=", "get_padded_mask_and_weight", "(", "padded_mask", ",", "pred", ")", "\n", "x", "=", "x", "*", "masked_weight", "\n", "", "x", "=", "self", ".", "pred_layer", "(", "x", ")", "\n", "# print(x.size())", "\n", "# exit(0)", "\n", "x", "=", "x", "[", ":", ",", "0", ",", "props", "[", ":", ",", "0", "]", ",", "props", "[", ":", ",", "1", "]", "-", "1", "]", "\n", "# print(x.size())", "\n", "# exit(0)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.MapConv.reset_parameters": [[170, 174], ["scorer.MapConv.pred_layer.reset_parameters", "c.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "c", "in", "self", ".", "convs", ":", "\n", "            ", "c", ".", "reset_parameters", "(", ")", "\n", "", "self", ".", "pred_layer", ".", "reset_parameters", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.scorer.get_padded_mask_and_weight": [[8, 24], ["len", "torch.round", "torch.round", "torch.conv2d", "len", "torch.round", "torch.round", "mask.clone().float", "torch.ones().cuda", "torch.ones().cuda", "torch.conv2d", "mask.clone().float", "torch.ones().cuda", "torch.ones().cuda", "mask.clone", "torch.ones", "torch.ones", "mask.clone", "torch.ones", "torch.ones"], "function", ["None"], ["def", "get_padded_mask_and_weight", "(", "*", "args", ")", ":", "\n", "    ", "if", "len", "(", "args", ")", "==", "2", ":", "\n", "        ", "mask", ",", "conv", "=", "args", "\n", "masked_weight", "=", "torch", ".", "round", "(", "F", ".", "conv2d", "(", "mask", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "*", "conv", ".", "kernel_size", ")", ".", "cuda", "(", ")", ",", "\n", "stride", "=", "conv", ".", "stride", ",", "padding", "=", "conv", ".", "padding", ",", "dilation", "=", "conv", ".", "dilation", ")", ")", "\n", "", "elif", "len", "(", "args", ")", "==", "5", ":", "\n", "        ", "mask", ",", "k", ",", "s", ",", "p", ",", "d", "=", "args", "\n", "masked_weight", "=", "torch", ".", "round", "(", "\n", "F", ".", "conv2d", "(", "mask", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "k", ",", "k", ")", ".", "cuda", "(", ")", ",", "stride", "=", "s", ",", "padding", "=", "p", ",", "dilation", "=", "d", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "masked_weight", "[", "masked_weight", ">", "0", "]", "=", "1", "/", "masked_weight", "[", "masked_weight", ">", "0", "]", "# conv.kernel_size[0] * conv.kernel_size[1]", "\n", "padded_mask", "=", "masked_weight", ">", "0", "\n", "\n", "return", "padded_mask", ",", "masked_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.__init__": [[20, 27], ["torch.nn.Module.__init__", "models.modules.DynamicGRU"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "QueryEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "txt_gru", "=", "DynamicGRU", "(", "config", "[", "'input_size'", "]", ",", "\n", "config", "[", "'hidden_size'", "]", "//", "2", "if", "config", "[", "'gru'", "]", "[", "'bidirectional'", "]", "else", "config", "[", "\n", "'hidden_size'", "]", ",", "\n", "num_layers", "=", "config", "[", "'gru'", "]", "[", "'num_layers'", "]", ",", "\n", "bidirectional", "=", "config", "[", "'gru'", "]", "[", "'bidirectional'", "]", ",", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters": [[28, 30], ["query_encoder.QueryEncoder.txt_gru.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "txt_gru", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.QueryEncoder.forward": [[31, 36], ["query_encoder.QueryEncoder.txt_gru"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "textual_input", ",", "textual_len", ",", "textual_mask", ",", "fast_weights", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# if fast_weights is not None:", "\n", "#     fast_weights = get_sub_layer('txt_gru.', fast_weights)", "\n", "        ", "txt_h", "=", "self", ".", "txt_gru", "(", "textual_input", ",", "textual_len", ",", "fast_weights", "=", "fast_weights", ")", "\n", "return", "txt_h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.query_encoder.get_padded_mask_and_weight": [[8, 17], ["torch.round", "torch.round", "torch.conv1d", "mask.clone().float", "torch.ones().cuda", "torch.ones().cuda", "mask.clone", "torch.ones", "torch.ones"], "function", ["None"], ["def", "get_padded_mask_and_weight", "(", "*", "args", ")", ":", "\n", "    ", "mask", ",", "conv", "=", "args", "\n", "masked_weight", "=", "torch", ".", "round", "(", "F", ".", "conv1d", "(", "mask", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "torch", ".", "ones", "(", "1", ",", "1", ",", "*", "conv", ".", "kernel_size", ")", ".", "cuda", "(", ")", ",", "\n", "stride", "=", "conv", ".", "stride", ",", "padding", "=", "conv", ".", "padding", ",", "dilation", "=", "conv", ".", "dilation", ")", ")", "\n", "\n", "masked_weight", "[", "masked_weight", ">", "0", "]", "=", "1", "/", "masked_weight", "[", "masked_weight", ">", "0", "]", "# conv.kernel_size[0] * conv.kernel_size[1]", "\n", "padded_mask", "=", "masked_weight", ">", "0", "\n", "\n", "return", "padded_mask", ",", "masked_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.__init__": [[17, 26], ["main_runner.MainRunner._build_dataset", "main_runner.MainRunner._build_model", "main_runner.MainRunner._build_optimizer"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner._build_dataset", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner._build_model", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner._build_optimizer"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "_build_dataset", "(", ")", "\n", "self", ".", "_build_model", "(", ")", "\n", "if", "'train'", "in", "args", ":", "\n", "            ", "self", ".", "_build_optimizer", "(", ")", "\n", "self", ".", "num_updates", "=", "0", "\n", "\n", "", "self", ".", "num_clips", "=", "args", "[", "'dataset'", "]", "[", "'max_num_frames'", "]", "//", "args", "[", "'dataset'", "]", "[", "'target_stride'", "]", "\n", "# self.props = self.test_set.props", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.train": [[28, 46], ["logging.info", "logging.info", "range", "print", "logging.info", "os.makedirs", "os.path.join", "main_runner.MainRunner._train_one_epoch", "main_runner.MainRunner._save_model", "main_runner.MainRunner.eval", "main_runner.MainRunner.eval", "logging.info"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner._train_one_epoch", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner._save_model", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.eval", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.eval"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "for", "bias", "in", "[", "0.0", "]", ":", "\n", "            ", "logging", ".", "info", "(", "'bias = {}.'", ".", "format", "(", "bias", ")", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "20", ")", ":", "\n", "                ", "logging", ".", "info", "(", "'Start Epoch {}'", ".", "format", "(", "epoch", ")", ")", "\n", "self", ".", "model_saved_path", "=", "self", ".", "args", "[", "'train'", "]", "[", "'model_saved_path'", "]", "\n", "os", ".", "makedirs", "(", "self", ".", "model_saved_path", ",", "mode", "=", "0o755", ",", "exist_ok", "=", "True", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_saved_path", ",", "'model-{}.pt'", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "self", ".", "_train_one_epoch", "(", "epoch", ",", "bias", "=", "bias", ")", "\n", "self", ".", "_save_model", "(", "save_path", ")", "\n", "self", ".", "eval", "(", "bias", "=", "bias", ")", "\n", "self", ".", "eval", "(", "bias", "=", "bias", ",", "top_n", "=", "5", ",", "thresh", "=", "0.45", ")", "\n", "logging", ".", "info", "(", "'='", "*", "60", ")", "\n", "\n", "", "print", "(", "'-'", "*", "120", ")", "\n", "", "logging", ".", "info", "(", "'Done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner._train_one_epoch": [[47, 110], ["main_runner.MainRunner.model.train", "utils.TimeMeter", "collections.defaultdict", "enumerate", "open.write", "open.flush", "open.close", "collections.defaultdict.items", "logging.info", "open", "open", "main_runner.MainRunner.optimizer.zero_grad", "fairseq.utils.move_to_cuda", "net_input[].expand", "net_input[].expand", "main_runner.MainRunner.model", "weakly_supervised_loss", "loss.backward", "torch.nn.utils.clip_grad_norm_", "main_runner.MainRunner.optimizer.step", "main_runner.MainRunner.lr_scheduler.step_update", "utils.TimeMeter.update", "loss_meter[].update", "main_runner.MainRunner._train_one_epoch.print_log"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.train", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.zero_grad", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.loss.weakly_supervised_loss", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.optimizers.base_optimizer.FairseqOptimizer.backward", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.step", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.step_update", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.update", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.update"], ["", "def", "_train_one_epoch", "(", "self", ",", "epoch", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "def", "print_log", "(", ")", ":", "\n", "            ", "msg", "=", "'Epoch {}, Batch {}, lr = {:.5f}, '", ".", "format", "(", "epoch", ",", "bid", ",", "curr_lr", ")", "\n", "for", "k", ",", "v", "in", "loss_meter", ".", "items", "(", ")", ":", "\n", "                ", "msg", "+=", "'{} = {:.4f}, '", ".", "format", "(", "k", ",", "v", ".", "avg", ")", "\n", "v", ".", "reset", "(", ")", "\n", "", "msg", "+=", "'{:.3f} seconds/batch'", ".", "format", "(", "1.0", "/", "time_meter", ".", "avg", ")", "\n", "logging", ".", "info", "(", "msg", ")", "\n", "\n", "", "from", "models", ".", "weakly", ".", "loss", "import", "weakly_supervised_loss", "\n", "\n", "display_n_batches", ",", "bid", "=", "50", ",", "0", "\n", "time_meter", "=", "TimeMeter", "(", ")", "\n", "loss_meter", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "AverageMeter", "(", ")", ")", "\n", "if", "self", ".", "args", "[", "'dataset'", "]", "[", "'dataset'", "]", "==", "'ActivityNet'", ":", "\n", "            ", "num_cands", "=", "153", "\n", "fp", "=", "open", "(", "'append.log'", ",", "encoding", "=", "'utf8'", ",", "mode", "=", "'a'", ")", "\n", "", "else", ":", "\n", "            ", "num_cands", "=", "200", "\n", "fp", "=", "open", "(", "'append2.log'", ",", "encoding", "=", "'utf8'", ",", "mode", "=", "'a'", ")", "\n", "# 31self.args['train']['topK'] = 48", "\n", "# if self.num_updates < 50:", "\n", "#     self.args['train']['topK'] = 195", "\n", "# else:", "\n", "#     self.args['train']['topK'] = 48", "\n", "", "for", "bid", ",", "batch", "in", "enumerate", "(", "self", ".", "train_loader", ",", "1", ")", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "net_input", "=", "move_to_cuda", "(", "batch", "[", "'net_input'", "]", ")", "\n", "net_input", "[", "'props'", "]", "=", "net_input", "[", "'props'", "]", ".", "expand", "(", "len", "(", "self", ".", "device_ids", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "net_input", "[", "'props_graph'", "]", "=", "net_input", "[", "'props_graph'", "]", ".", "expand", "(", "len", "(", "self", ".", "device_ids", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "output", "=", "self", ".", "model", "(", "**", "net_input", ",", "get_negative", "=", "True", ",", "**", "kwargs", ")", "\n", "# Act: 153, 32,", "\n", "# Char: 100, 32", "\n", "loss", ",", "_", "=", "weakly_supervised_loss", "(", "pos_score", "=", "output", "[", "'score'", "]", ",", "\n", "neg_score1", "=", "output", "[", "'inter_neg'", "]", "[", "'neg_score'", "]", ",", "\n", "neg_score2", "=", "output", "[", "'intra_neg'", "]", "[", "'neg_score'", "]", ",", "\n", "neg_weight2", "=", "output", "[", "'intra_neg'", "]", "[", "'weight'", "]", ",", "\n", "weight_gt", "=", "net_input", "[", "'frame_gt'", "]", ",", "\n", "props", "=", "net_input", "[", "'props'", "]", "[", "0", "]", ",", "\n", "log_fp", "=", "fp", ",", "num_cands", "=", "num_cands", ",", "\n", "loss_meter", "=", "loss_meter", ",", "**", "self", ".", "args", "[", "'train'", "]", ")", "\n", "# backward", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "10", ")", "\n", "\n", "# update", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "num_updates", "+=", "1", "\n", "curr_lr", "=", "self", ".", "lr_scheduler", ".", "step_update", "(", "self", ".", "num_updates", ")", "\n", "time_meter", ".", "update", "(", ")", "\n", "loss_meter", "[", "'loss'", "]", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "if", "bid", "%", "display_n_batches", "==", "0", ":", "\n", "                ", "print_log", "(", ")", "\n", "\n", "", "", "if", "bid", "%", "display_n_batches", "!=", "0", ":", "\n", "            ", "print_log", "(", ")", "\n", "\n", "", "fp", ".", "write", "(", "'='", "*", "60", "+", "'\\n'", ")", "\n", "fp", ".", "flush", "(", ")", "\n", "fp", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.eval": [[111, 187], ["main_runner.MainRunner.model.eval", "collections.defaultdict", "collections.defaultdict.items", "print", "torch.no_grad", "enumerate", "print", "utils.AverageMeter", "fairseq.utils.move_to_cuda", "net_input[].expand", "net_input[].expand", "main_runner.MainRunner.model", "numpy.asarray", "numpy.asarray", "bce_rescale_loss", "weakly_supervised_loss_fuck", "metrics_logger[].update", "numpy.reshape.size", "numpy.reshape", "numpy.argmax", "numpy.argmax", "top_n_metric.items", "len", "len", "loss.item", "numpy.reshape.cpu().numpy", "numpy.reshape", "[].cpu().numpy", "numpy.argsort", "list", "range", "main_runner.top_n_metric", "main_runner.top_1_metric", "main_runner.top_1_metric", "metrics_logger[].update", "[].cpu().numpy", "range", "top_n_selected_props.append", "numpy.reshape.cpu", "[].cpu", "numpy.repeat", "main_runner.calculate_IoU_batch2", "selected_props.append", "numpy.asarray", "[].cpu", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner.eval", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.loss.bce_rescale_loss", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.weakly.loss.weakly_supervised_loss_fuck", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.update", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.top_n_metric", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.top_1_metric", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.top_1_metric", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.None.utils.TimeMeter.update", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.calculate_IoU_batch2"], ["", "def", "eval", "(", "self", ",", "top_n", "=", "1", ",", "thresh", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "metrics_logger", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "AverageMeter", "(", ")", ")", "\n", "from", "models", ".", "weakly", ".", "loss", "import", "bce_rescale_loss", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "bid", ",", "batch", "in", "enumerate", "(", "self", ".", "test_loader", ",", "1", ")", ":", "\n", "                ", "net_input", "=", "move_to_cuda", "(", "batch", "[", "'net_input'", "]", ")", "\n", "net_input", "[", "'props'", "]", "=", "net_input", "[", "'props'", "]", ".", "expand", "(", "len", "(", "self", ".", "device_ids", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "net_input", "[", "'props_graph'", "]", "=", "net_input", "[", "'props_graph'", "]", ".", "expand", "(", "len", "(", "self", ".", "device_ids", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "# forward", "\n", "output", "=", "self", ".", "model", "(", "**", "net_input", ",", "get_negative", "=", "True", ",", "**", "kwargs", ")", "\n", "durations", "=", "np", ".", "asarray", "(", "[", "i", "[", "1", "]", "for", "i", "in", "batch", "[", "'raw'", "]", "]", ")", "\n", "gt", "=", "np", ".", "asarray", "(", "[", "i", "[", "2", "]", "for", "i", "in", "batch", "[", "'raw'", "]", "]", ")", "\n", "\n", "loss", ",", "prob", "=", "bce_rescale_loss", "(", "output", "[", "'score'", "]", ",", "net_input", "[", "'map_gt'", "]", ")", "\n", "from", "models", ".", "weakly", ".", "loss", "import", "weakly_supervised_loss_fuck", "\n", "neg", ",", "pos", "=", "weakly_supervised_loss_fuck", "(", "pos_score", "=", "output", "[", "'score'", "]", ",", "\n", "neg_score1", "=", "output", "[", "'inter_neg'", "]", "[", "'neg_score'", "]", ",", "\n", "neg_score2", "=", "output", "[", "'intra_neg'", "]", "[", "'neg_score'", "]", ",", "\n", "neg_weight2", "=", "output", "[", "'intra_neg'", "]", "[", "'weight'", "]", ",", "\n", "weight_gt", "=", "net_input", "[", "'frame_gt'", "]", ",", "\n", "props", "=", "net_input", "[", "'props'", "]", "[", "0", "]", ",", "\n", "log_fp", "=", "None", ",", "num_cands", "=", "153", ",", "\n", "loss_meter", "=", "None", ",", "**", "self", ".", "args", "[", "'train'", "]", ")", "\n", "metrics_logger", "[", "'loss'", "]", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "bsz", "=", "prob", ".", "size", "(", "0", ")", "\n", "prob", "=", "np", ".", "reshape", "(", "prob", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "[", "bsz", ",", "-", "1", "]", ")", "\n", "idx", "=", "np", ".", "argmax", "(", "prob", ",", "-", "1", ")", "\n", "\n", "idx1", "=", "np", ".", "argmax", "(", "np", ".", "reshape", "(", "output", "[", "'intra_neg'", "]", "[", "'neg_score'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "[", "bsz", ",", "-", "1", "]", ")", ",", "-", "1", ")", "\n", "selected_props", "=", "self", ".", "test_set", ".", "props", "[", "idx", "]", "# [bsz, 2]", "\n", "neg_props", "=", "self", ".", "test_set", ".", "props", "[", "idx1", "]", "\n", "\n", "weight", "=", "output", "[", "'intra_neg'", "]", "[", "'weight'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "if", "top_n", ">", "1", ":", "\n", "                    ", "num_clips", "=", "self", ".", "num_clips", "\n", "sort_idx", "=", "np", ".", "argsort", "(", "-", "prob", ",", "-", "1", ")", "\n", "cand_props", "=", "list", "(", "self", ".", "test_set", ".", "props", "[", "sort_idx", "]", ")", "# [bsz, cand_props, 2]", "\n", "top_n_selected_props", "=", "[", "selected_props", "]", "\n", "\n", "for", "it", "in", "range", "(", "1", ",", "top_n", ")", ":", "\n", "                        ", "ptr_props", "=", "top_n_selected_props", "[", "-", "1", "]", "\n", "selected_props", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "                            ", "p2", "=", "cand_props", "[", "i", "]", "\n", "p1", "=", "np", ".", "repeat", "(", "np", ".", "expand_dims", "(", "ptr_props", "[", "i", "]", ",", "0", ")", ",", "\n", "p2", ".", "shape", "[", "0", "]", ",", "0", ")", "\n", "\n", "iou", "=", "calculate_IoU_batch2", "(", "(", "p1", "[", ":", ",", "0", "]", ",", "p1", "[", ":", ",", "1", "]", ")", ",", "(", "p2", "[", ":", ",", "0", "]", ",", "p2", "[", ":", ",", "1", "]", ")", ")", "\n", "keep", "=", "iou", "<=", "thresh", "\n", "# print(keep.shape, cand_props[i].shape)", "\n", "cand_props", "[", "i", "]", "=", "cand_props", "[", "i", "]", "[", "keep", "]", "\n", "# print(cand_props[i].shape)", "\n", "selected_props", ".", "append", "(", "cand_props", "[", "i", "]", "[", "0", "]", ")", "\n", "", "top_n_selected_props", "[", "-", "1", "]", "=", "top_n_selected_props", "[", "-", "1", "]", "*", "durations", "[", ":", ",", "np", ".", "newaxis", "]", "/", "num_clips", "\n", "# print(np.asarray(selected_props).shape, selected_props[0].shape)", "\n", "top_n_selected_props", ".", "append", "(", "np", ".", "asarray", "(", "selected_props", ")", ")", "\n", "\n", "", "top_n_selected_props", "[", "-", "1", "]", "=", "top_n_selected_props", "[", "-", "1", "]", "*", "durations", "[", ":", ",", "np", ".", "newaxis", "]", "/", "num_clips", "\n", "# top_n_selected_props = np.asarray(top_n_selected_props)", "\n", "res", "=", "top_n_metric", "(", "top_n_selected_props", ",", "gt", ")", "\n", "", "else", ":", "\n", "                    ", "ori_props", "=", "selected_props", "\n", "selected_props", "=", "selected_props", "*", "durations", "[", ":", ",", "np", ".", "newaxis", "]", "/", "self", ".", "num_clips", "\n", "neg_props", "=", "neg_props", "*", "durations", "[", ":", ",", "np", ".", "newaxis", "]", "/", "self", ".", "num_clips", "\n", "\n", "res", ",", "iou", "=", "top_1_metric", "(", "selected_props", ",", "gt", ")", "\n", "neg_res", ",", "neg_iou", "=", "top_1_metric", "(", "neg_props", ",", "gt", ")", "\n", "", "for", "k", ",", "v", "in", "res", ".", "items", "(", ")", ":", "\n", "                    ", "metrics_logger", "[", "k", "]", ".", "update", "(", "v", ",", "bsz", ")", "\n", "\n", "", "", "", "for", "k", ",", "v", "in", "metrics_logger", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'| {} {:.4f}'", ".", "format", "(", "k", ",", "v", ".", "avg", ")", ",", "end", "=", "' '", ")", "\n", "", "print", "(", "'|'", ")", "\n", "return", "metrics_logger", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner._build_dataset": [[188, 208], ["getattr", "KeyedVectors.load_word2vec_format", "getattr.", "getattr.", "logging.info", "DataLoader", "DataLoader", "getattr.", "DataLoader", "len", "len"], "methods", ["None"], ["", "def", "_build_dataset", "(", "self", ")", ":", "\n", "        ", "import", "datasets", "as", "da", "\n", "from", "gensim", ".", "models", "import", "KeyedVectors", "\n", "from", "torch", ".", "utils", ".", "data", "import", "DataLoader", "\n", "args", "=", "self", ".", "args", "[", "'dataset'", "]", "\n", "cls", "=", "getattr", "(", "da", ",", "args", "[", "'dataset'", "]", ",", "None", ")", "\n", "vocab", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "args", "[", "'vocab_path'", "]", ",", "binary", "=", "True", ")", "\n", "self", ".", "train_set", "=", "cls", "(", "data_path", "=", "args", "[", "'train_data'", "]", ",", "vocab", "=", "vocab", ",", "args", "=", "args", ",", "is_training", "=", "True", ")", "\n", "self", ".", "test_set", "=", "cls", "(", "data_path", "=", "args", "[", "'test_data'", "]", ",", "vocab", "=", "vocab", ",", "args", "=", "args", ")", "\n", "self", ".", "val_set", "=", "cls", "(", "data_path", "=", "args", "[", "'val_data'", "]", ",", "vocab", "=", "vocab", ",", "args", "=", "args", ")", "if", "args", "[", "'val_data'", "]", "else", "None", "\n", "logging", ".", "info", "(", "'train: {} samples, test: {} samples'", ".", "format", "(", "len", "(", "self", ".", "train_set", ")", ",", "len", "(", "self", ".", "test_set", ")", ")", ")", "\n", "batch_size", "=", "self", ".", "args", "[", "'train'", "]", "[", "'batch_size'", "]", "\n", "self", ".", "train_loader", "=", "DataLoader", "(", "self", ".", "train_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "self", ".", "train_set", ".", "collate_data", ",", "num_workers", "=", "1", ")", "\n", "self", ".", "test_loader", "=", "DataLoader", "(", "self", ".", "test_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "self", ".", "test_set", ".", "collate_data", ",", "\n", "num_workers", "=", "4", ")", "\n", "self", ".", "val_loader", "=", "DataLoader", "(", "self", ".", "val_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "self", ".", "val_set", ".", "collate_data", ",", "\n", "num_workers", "=", "4", ")", "if", "args", "[", "'val_data'", "]", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner._build_model": [[209, 220], ["list", "logging.info", "main_runner.MainRunner.model.cuda", "print", "torch.nn.DataParallel", "range", "getattr", "len", "os.environ[].split"], "methods", ["None"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "model_config", "=", "self", ".", "args", "[", "'model'", "]", "\n", "import", "models", "\n", "\n", "device_ids", "=", "list", "(", "range", "(", "len", "(", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", ".", "split", "(", "','", ")", ")", ")", ")", "\n", "logging", ".", "info", "(", "'GPU: {}'", ".", "format", "(", "device_ids", ")", ")", "\n", "self", ".", "model", "=", "getattr", "(", "models", ",", "model_config", "[", "'name'", "]", ",", "None", ")", "(", "model_config", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", "device_ids", "[", "0", "]", ")", "\n", "print", "(", "self", ".", "model", ")", "\n", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "self", ".", "device_ids", "=", "device_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner._build_optimizer": [[221, 228], ["list", "AdamOptimizer", "InverseSquareRootSchedule", "main_runner.MainRunner.model.parameters"], "methods", ["None"], ["", "def", "_build_optimizer", "(", "self", ")", ":", "\n", "        ", "from", "optimizers", "import", "AdamOptimizer", "\n", "from", "optimizers", ".", "lr_schedulers", "import", "InverseSquareRootSchedule", "\n", "parameters", "=", "list", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "args", "=", "self", ".", "args", "[", "'train'", "]", "\n", "self", ".", "optimizer", "=", "AdamOptimizer", "(", "args", ",", "parameters", ")", "\n", "self", ".", "lr_scheduler", "=", "InverseSquareRootSchedule", "(", "args", ",", "self", ".", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner._save_model": [[229, 237], ["torch.save", "logging.info", "main_runner.MainRunner.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fairseq_lr_scheduler.FairseqLRScheduler.state_dict"], ["", "def", "_save_model", "(", "self", ",", "path", ")", ":", "\n", "        ", "state_dict", "=", "{", "\n", "'num_updates'", ":", "self", ".", "num_updates", ",", "\n", "'config'", ":", "self", ".", "args", ",", "\n", "'model_parameters'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "state_dict", ",", "path", ")", "\n", "logging", ".", "info", "(", "'save model to {}, num_updates {}.'", ".", "format", "(", "path", ",", "self", ".", "num_updates", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.MainRunner._load_model": [[238, 246], ["torch.load", "main_runner.MainRunner.lr_scheduler.step_update", "main_runner.MainRunner.model.load_state_dict", "logging.info"], "methods", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.cosine_lr_scheduler.CosineSchedule.step_update", "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.lr_schedulers.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict"], ["", "def", "_load_model", "(", "self", ",", "path", ")", ":", "\n", "# path = os.path.join(self.args.model_saved_path, name)", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "path", ")", "\n", "self", ".", "num_updates", "=", "state_dict", "[", "'num_updates'", "]", "\n", "self", ".", "lr_scheduler", ".", "step_update", "(", "self", ".", "num_updates", ")", "\n", "parameters", "=", "state_dict", "[", "'model_parameters'", "]", "\n", "self", ".", "model", ".", "load_state_dict", "(", "parameters", ")", "\n", "logging", ".", "info", "(", "'load model from {}, num_updates {}.'", ".", "format", "(", "path", ",", "self", ".", "num_updates", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.calculate_IoU": [[248, 256], ["min", "max", "max", "min"], "function", ["None"], ["", "", "def", "calculate_IoU", "(", "i0", ",", "i1", ")", ":", "\n", "    ", "union", "=", "(", "min", "(", "i0", "[", "0", "]", ",", "i1", "[", "0", "]", ")", ",", "max", "(", "i0", "[", "1", "]", ",", "i1", "[", "1", "]", ")", ")", "\n", "inter", "=", "(", "max", "(", "i0", "[", "0", "]", ",", "i1", "[", "0", "]", ")", ",", "min", "(", "i0", "[", "1", "]", ",", "i1", "[", "1", "]", ")", ")", "\n", "\n", "if", "union", "[", "1", "]", "-", "union", "[", "0", "]", "<", "-", "1e-5", ":", "\n", "        ", "return", "0", "\n", "", "iou", "=", "1.0", "*", "(", "inter", "[", "1", "]", "-", "inter", "[", "0", "]", "+", "1e-10", ")", "/", "(", "union", "[", "1", "]", "-", "union", "[", "0", "]", "+", "1e-10", ")", "\n", "return", "iou", "if", "iou", ">=", "0.0", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.calculate_IoU_batch1": [[258, 266], ["numpy.min", "numpy.max", "numpy.max", "numpy.min", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack"], "function", ["None"], ["", "def", "calculate_IoU_batch1", "(", "i0", ",", "i1", ")", ":", "\n", "    ", "union", "=", "(", "np", ".", "min", "(", "np", ".", "stack", "(", "[", "i0", "[", "0", "]", ",", "i1", "[", "0", "]", "]", ",", "0", ")", ",", "0", ")", ",", "np", ".", "max", "(", "np", ".", "stack", "(", "[", "i0", "[", "1", "]", ",", "i1", "[", "1", "]", "]", ",", "0", ")", ",", "0", ")", ")", "\n", "inter", "=", "(", "np", ".", "max", "(", "np", ".", "stack", "(", "[", "i0", "[", "0", "]", ",", "i1", "[", "0", "]", "]", ",", "0", ")", ",", "0", ")", ",", "np", ".", "min", "(", "np", ".", "stack", "(", "[", "i0", "[", "1", "]", ",", "i1", "[", "1", "]", "]", ",", "0", ")", ",", "0", ")", ")", "\n", "# iou = 1.0 * (inter[1] - inter[0] + 1e-10) / (union[1] - union[0] + 1e-10)", "\n", "iou", "=", "1.0", "*", "(", "inter", "[", "1", "]", "-", "inter", "[", "0", "]", "+", "1", ")", "/", "(", "union", "[", "1", "]", "-", "union", "[", "0", "]", "+", "1", ")", "\n", "iou", "[", "union", "[", "1", "]", "-", "union", "[", "0", "]", "<", "-", "1e-5", "]", "=", "0", "\n", "iou", "[", "iou", "<", "0", "]", "=", "0.0", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.calculate_IoU_batch2": [[268, 276], ["numpy.min", "numpy.max", "numpy.max", "numpy.min", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack"], "function", ["None"], ["", "def", "calculate_IoU_batch2", "(", "i0", ",", "i1", ")", ":", "\n", "    ", "union", "=", "(", "np", ".", "min", "(", "np", ".", "stack", "(", "[", "i0", "[", "0", "]", ",", "i1", "[", "0", "]", "]", ",", "0", ")", ",", "0", ")", ",", "np", ".", "max", "(", "np", ".", "stack", "(", "[", "i0", "[", "1", "]", ",", "i1", "[", "1", "]", "]", ",", "0", ")", ",", "0", ")", ")", "\n", "inter", "=", "(", "np", ".", "max", "(", "np", ".", "stack", "(", "[", "i0", "[", "0", "]", ",", "i1", "[", "0", "]", "]", ",", "0", ")", ",", "0", ")", ",", "np", ".", "min", "(", "np", ".", "stack", "(", "[", "i0", "[", "1", "]", ",", "i1", "[", "1", "]", "]", ",", "0", ")", ",", "0", ")", ")", "\n", "# iou = 1.0 * (inter[1] - inter[0] + 1e-10) / (union[1] - union[0] + 1e-10)", "\n", "iou", "=", "1.0", "*", "(", "inter", "[", "1", "]", "-", "inter", "[", "0", "]", "+", "1e-10", ")", "/", "(", "union", "[", "1", "]", "-", "union", "[", "0", "]", "+", "1e-10", ")", "\n", "iou", "[", "union", "[", "1", "]", "-", "union", "[", "0", "]", "<", "-", "1e-5", "]", "=", "0", "\n", "iou", "[", "iou", "<", "0", "]", "=", "0.0", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.top_n_metric": [[279, 291], ["numpy.max", "numpy.mean", "range", "main_runner.calculate_IoU_batch1", "top_iou.append", "numpy.stack", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.calculate_IoU_batch1"], ["", "def", "top_n_metric", "(", "preds", ",", "label", ")", ":", "\n", "    ", "result", "=", "{", "}", "\n", "bsz", "=", "preds", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "top_iou", "=", "[", "]", "\n", "for", "pred", "in", "preds", ":", "\n", "        ", "iou", "=", "calculate_IoU_batch1", "(", "(", "pred", "[", ":", ",", "0", "]", ",", "pred", "[", ":", ",", "1", "]", ")", ",", "(", "label", "[", ":", ",", "0", "]", ",", "label", "[", ":", ",", "1", "]", ")", ")", "\n", "top_iou", ".", "append", "(", "iou", ")", "\n", "", "iou", "=", "np", ".", "max", "(", "np", ".", "stack", "(", "top_iou", ",", "1", ")", ",", "1", ")", "\n", "result", "[", "'mIoU'", "]", "=", "np", ".", "mean", "(", "iou", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ",", "2", ")", ":", "\n", "        ", "result", "[", "'IoU@0.{}'", ".", "format", "(", "i", ")", "]", "=", "1.0", "*", "np", ".", "sum", "(", "iou", ">=", "i", "/", "10", ")", "/", "bsz", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.top_1_metric": [[293, 301], ["main_runner.calculate_IoU_batch2", "numpy.mean", "range", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.ikuinen_regularized_two-branch_proposal_network.runners.main_runner.calculate_IoU_batch2"], ["", "def", "top_1_metric", "(", "pred", ",", "label", ")", ":", "\n", "    ", "result", "=", "{", "}", "\n", "bsz", "=", "pred", ".", "shape", "[", "0", "]", "\n", "iou", "=", "calculate_IoU_batch2", "(", "(", "pred", "[", ":", ",", "0", "]", ",", "pred", "[", ":", ",", "1", "]", ")", ",", "(", "label", "[", ":", ",", "0", "]", ",", "label", "[", ":", ",", "1", "]", ")", ")", "\n", "result", "[", "'mIoU'", "]", "=", "np", ".", "mean", "(", "iou", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "10", ",", "2", ")", ":", "\n", "        ", "result", "[", "'IoU@0.{}'", ".", "format", "(", "i", ")", "]", "=", "1.0", "*", "np", ".", "sum", "(", "iou", ">=", "i", "/", "10", ")", "/", "bsz", "\n", "", "return", "result", ",", "iou", "\n", "", ""]]}