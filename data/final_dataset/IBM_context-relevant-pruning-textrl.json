{"home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.BootstrapFilter.__init__": [[90, 96], ["bootstrap_utils.BootstrapFilter.load_cc_embeddings", "bootstrap_utils.BootstrapFilter.load_bs_action_token"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.BootstrapFilter.load_cc_embeddings"], ["    ", "def", "__init__", "(", "self", ",", "threshold", "=", "0.3", ",", "\n", "filter_sentence", "=", "False", ")", ":", "\n", "        ", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "load_cc_embeddings", "(", ")", "\n", "self", ".", "load_bs_action_token", "(", ")", "\n", "self", ".", "filter_sent", "=", "filter_sentence", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.BootstrapFilter.load_cc_embeddings": [[97, 109], ["os.path.expanduser", "pickle.load", "pickle.load", "bcolz.open", "open", "open"], "methods", ["None"], ["", "def", "load_cc_embeddings", "(", "self", ")", ":", "\n", "        ", "embed_size", "=", "300", "\n", "cc_path", "=", "os", ".", "path", ".", "expanduser", "(", "'~/Data/nlp/conceptNet'", ")", "\n", "filename", "=", "'{0}/numberbatch-en-19.08.txt'", ".", "format", "(", "cc_path", ")", "\n", "rootdir", "=", "'{0}/glove.dat'", ".", "format", "(", "cc_path", ")", "\n", "words_file", "=", "'{0}/CC_words.pkl'", ".", "format", "(", "cc_path", ",", "embed_size", ")", "\n", "idx_file", "=", "'{0}/CC_idx.pkl'", ".", "format", "(", "cc_path", ",", "embed_size", ")", "\n", "\n", "words", "=", "pickle", ".", "load", "(", "open", "(", "words_file", ",", "'rb'", ")", ")", "\n", "word2idx", "=", "pickle", ".", "load", "(", "open", "(", "idx_file", ",", "'rb'", ")", ")", "\n", "vectors", "=", "bcolz", ".", "open", "(", "rootdir", ")", "\n", "self", ".", "w2v", "=", "{", "w", ":", "vectors", "[", "word2idx", "[", "w", "]", "]", "for", "w", "in", "words", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.CREST.__init__": [[112, 125], ["print", "print", "print", "bootstrap_utils.CREST.load_cc_embeddings", "bootstrap_utils.CREST.load_glove_embeddings", "bootstrap_utils.CREST.load_w2v_embeddings"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.BootstrapFilter.load_cc_embeddings", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.CREST.load_glove_embeddings", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.CREST.load_w2v_embeddings"], ["    ", "def", "__init__", "(", "self", ",", "threshold", "=", "0.3", ",", "embeddings", "=", "'cnet'", ")", ":", "# 'cnet' | 'glove' | 'word2vec' | 'bert'", "\n", "        ", "self", ".", "threshold", "=", "threshold", "\n", "\n", "print", "(", "'##'", "*", "30", ")", "\n", "print", "(", "'Using embedding : '", ",", "embeddings", ")", "\n", "print", "(", "'##'", "*", "30", ")", "\n", "\n", "if", "embeddings", "==", "'cnet'", ":", "\n", "            ", "self", ".", "load_cc_embeddings", "(", ")", "\n", "", "elif", "embeddings", "==", "'glove'", ":", "\n", "            ", "self", ".", "load_glove_embeddings", "(", ")", "\n", "", "elif", "embeddings", "==", "'word2vec'", ":", "\n", "            ", "self", ".", "load_w2v_embeddings", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.CREST.load_glove_embeddings": [[126, 137], ["os.path.expanduser", "pickle.load", "pickle.load", "bcolz.open", "open", "open"], "methods", ["None"], ["", "", "def", "load_glove_embeddings", "(", "self", ")", ":", "\n", "        ", "embed_size", "=", "100", "\n", "glove_path", "=", "os", ".", "path", ".", "expanduser", "(", "'~/Data/nlp/glove/glove.6B'", ")", "\n", "rootdir", "=", "'{0}/6B.{1}.dat'", ".", "format", "(", "glove_path", ",", "embed_size", ")", "\n", "words_file", "=", "'{0}/6B.{1}_words.pkl'", ".", "format", "(", "glove_path", ",", "embed_size", ")", "\n", "idx_file", "=", "'{0}/6B.{1}_idx.pkl'", ".", "format", "(", "glove_path", ",", "embed_size", ")", "\n", "\n", "vectors", "=", "bcolz", ".", "open", "(", "rootdir", ")", "[", ":", "]", "\n", "words", "=", "pickle", ".", "load", "(", "open", "(", "words_file", ",", "'rb'", ")", ")", "\n", "word2idx", "=", "pickle", ".", "load", "(", "open", "(", "idx_file", ",", "'rb'", ")", ")", "\n", "self", ".", "w2v", "=", "{", "w", ":", "vectors", "[", "word2idx", "[", "w", "]", "]", "for", "w", "in", "words", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.CREST.load_w2v_embeddings": [[138, 140], ["gensim.models.KeyedVectors.load_word2vec_format"], "methods", ["None"], ["", "def", "load_w2v_embeddings", "(", "self", ")", ":", "\n", "        ", "self", ".", "w2v", "=", "gensim", ".", "models", ".", "KeyedVectors", ".", "load_word2vec_format", "(", "'data/Googlemodel.bin'", ",", "binary", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.CREST.prune_state": [[141, 157], ["bootstrap_utils.CREST.prune_state.get_scores"], "methods", ["None"], ["", "def", "prune_state", "(", "self", ",", "noisy_string", ",", "expert_words", ",", "return_details", "=", "False", ",", "add_prefix", "=", "True", ")", ":", "\n", "        ", "def", "get_scores", "(", "noisy_string_x", ",", "mean", "=", "True", ")", ":", "\n", "            ", "s_wsx", "=", "normalize", "(", "noisy_string_x", ")", "\n", "sim_dictx", "=", "correlate_state", "(", "s_wsx", ",", "object_list", "=", "expert_words", ",", "w2v", "=", "self", ".", "w2v", ",", "mean", "=", "mean", ")", "\n", "return", "sim_dictx", "\n", "", "sentence_pruned_str_joined", "=", "noisy_string", "\n", "sim_dict", "=", "get_scores", "(", "sentence_pruned_str_joined", ",", "mean", "=", "False", ")", "\n", "final_str", "=", "get_thresholded", "(", "sim_dict", ",", "t", "=", "self", ".", "threshold", ")", "\n", "if", "add_prefix", ":", "\n", "            ", "final_str", "=", "'-= Unknown =- '", "+", "' '", ".", "join", "(", "final_str", ")", "\n", "", "else", ":", "\n", "            ", "final_str", "=", "' '", ".", "join", "(", "final_str", ")", "\n", "", "if", "return_details", ":", "\n", "            ", "return", "final_str", ",", "sim_dict", "\n", "", "else", ":", "\n", "            ", "return", "final_str", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.get_init_hidden": [[17, 25], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["def", "get_init_hidden", "(", "bsz", ",", "hidden_size", ",", "use_cuda", ")", ":", "\n", "    ", "h_0", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "FloatTensor", "(", "bsz", ",", "hidden_size", ")", ".", "zero_", "(", ")", ")", "\n", "c_0", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "FloatTensor", "(", "bsz", ",", "hidden_size", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "h_0", ",", "c_0", "=", "h_0", ".", "cuda", "(", ")", ",", "c_0", ".", "cuda", "(", ")", "\n", "\n", "", "return", "h_0", ",", "c_0", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.similarity": [[26, 44], ["numpy.dot", "numpy.zeros", "numpy.zeros", "numpy.sum", "numpy.sum", "numpy.linalg.norm", "numpy.linalg.norm", "len", "numpy.sum", "numpy.sum", "len"], "function", ["None"], ["", "def", "similarity", "(", "w1", ",", "w2", ",", "w2v", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "vec1", "=", "w2v", "[", "w1", "]", "\n", "", "except", "KeyError", ":", "\n", "        ", "vec1", "=", "np", ".", "zeros", "(", "(", "300", ",", ")", ")", "\n", "", "try", ":", "\n", "        ", "vec2", "=", "w2v", "[", "w2", "]", "\n", "", "except", "KeyError", ":", "\n", "        ", "vec2", "=", "np", ".", "zeros", "(", "(", "300", ",", ")", ")", "\n", "\n", "", "if", "np", ".", "sum", "(", "vec1", ")", "==", "0", "and", "np", ".", "sum", "(", "vec2", ")", "!=", "0", ":", "\n", "        ", "vec1", "=", "vec1", "[", ":", "len", "(", "vec2", ")", "]", "\n", "", "elif", "np", ".", "sum", "(", "vec1", ")", "!=", "0", "and", "np", ".", "sum", "(", "vec2", ")", "==", "0", ":", "\n", "        ", "vec2", "=", "vec2", "[", ":", "len", "(", "vec1", ")", "]", "\n", "\n", "", "unit_vec1", "=", "vec1", "/", "(", "np", ".", "linalg", ".", "norm", "(", "vec1", ")", "+", "eps", ")", "\n", "unit_vec2", "=", "vec2", "/", "(", "np", ".", "linalg", ".", "norm", "(", "vec2", ")", "+", "eps", ")", "\n", "return", "np", ".", "dot", "(", "unit_vec1", ",", "unit_vec2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.normalize": [[46, 55], ["state.lower.lower", "state.lower.translate", "str.maketrans", "nltk.tokenize.word_tokenize", "nltk.tokenize.word_tokenize"], "function", ["None"], ["", "def", "normalize", "(", "state", ",", "remove_articles", "=", "True", ")", ":", "\n", "    ", "state", "=", "state", ".", "lower", "(", ")", "\n", "out", "=", "state", ".", "translate", "(", "str", ".", "maketrans", "(", "''", ",", "''", ",", "string", ".", "punctuation", ")", ")", "\n", "if", "remove_articles", ":", "\n", "        ", "out", "=", "word_tokenize", "(", "out", ")", "\n", "s_ws", "=", "[", "w", "for", "w", "in", "out", "if", "not", "w", "in", "stop_words", "]", "\n", "", "else", ":", "\n", "        ", "s_ws", "=", "word_tokenize", "(", "out", ")", "\n", "", "return", "s_ws", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.get_thresholded": [[57, 63], ["sim_dict.items", "final_words.append"], "function", ["None"], ["", "def", "get_thresholded", "(", "sim_dict", ",", "t", "=", "0.2", ")", ":", "\n", "    ", "final_words", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "sim_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", ">=", "t", ":", "\n", "            ", "final_words", ".", "append", "(", "k", ")", "\n", "", "", "return", "final_words", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.statistics_score": [[65, 70], ["sim_dict.items", "scores.append", "numpy.mean", "numpy.max"], "function", ["None"], ["", "def", "statistics_score", "(", "sim_dict", ",", "kind", "=", "'avg'", ")", ":", "\n", "    ", "scores", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "sim_dict", ".", "items", "(", ")", ":", "\n", "        ", "scores", ".", "append", "(", "v", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", "if", "kind", "==", "'avg'", "else", "np", ".", "max", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.correlate_state": [[72, 87], ["isinstance", "isinstance", "sim_list.append", "numpy.mean", "numpy.max", "object_list.items", "bootstrap_utils.similarity", "sim_list.append", "numpy.mean", "numpy.max", "bootstrap_utils.similarity"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.similarity", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.similarity"], ["", "def", "correlate_state", "(", "s_ws", ",", "object_list", ",", "w2v", ",", "mean", "=", "True", ")", ":", "\n", "    ", "sim_dict", "=", "{", "}", "\n", "if", "isinstance", "(", "object_list", ",", "list", ")", ":", "\n", "        ", "for", "w", "in", "s_ws", ":", "\n", "            ", "sim_list", "=", "[", "]", "\n", "for", "w_obj", "in", "object_list", ":", "\n", "                ", "sim_list", ".", "append", "(", "similarity", "(", "w_obj", ",", "w", ",", "w2v", ")", ")", "\n", "", "sim_dict", "[", "w", "]", "=", "np", ".", "mean", "(", "sim_list", ")", "if", "mean", "else", "np", ".", "max", "(", "sim_list", ")", "\n", "", "", "elif", "isinstance", "(", "object_list", ",", "dict", ")", ":", "\n", "        ", "for", "w", "in", "s_ws", ":", "\n", "            ", "sim_list", "=", "[", "]", "\n", "for", "w_obj", ",", "val", "in", "object_list", ".", "items", "(", ")", ":", "\n", "                ", "sim_list", ".", "append", "(", "val", "*", "similarity", "(", "w_obj", ",", "w", ",", "w2v", ")", ")", "\n", "", "sim_dict", "[", "w", "]", "=", "np", ".", "mean", "(", "sim_list", ")", "if", "mean", "else", "np", ".", "max", "(", "sim_list", ")", "\n", "", "", "return", "sim_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.nlp_utils.is_whitespace": [[7, 11], ["ord"], "function", ["None"], ["def", "is_whitespace", "(", "c", ",", "use_space", "=", "True", ")", ":", "\n", "    ", "if", "(", "c", "==", "\" \"", "and", "use_space", ")", "or", "c", "==", "\"\\t\"", "or", "c", "==", "\"\\r\"", "or", "c", "==", "\"\\n\"", "or", "ord", "(", "c", ")", "==", "0x202F", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.nlp_utils.compact_text": [[12, 27], ["nlp_utils.is_whitespace", "doc_tokens.append", "doc_tokens.append", "doc_tokens.append"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.is_whitespace"], ["", "def", "compact_text", "(", "paragraph_text", ")", ":", "\n", "    ", "doc_tokens", "=", "[", "]", "\n", "prev_is_whitespace", "=", "True", "\n", "for", "c", "in", "paragraph_text", ":", "\n", "        ", "if", "is_whitespace", "(", "c", ")", ":", "\n", "            ", "prev_is_whitespace", "=", "True", "\n", "", "else", ":", "\n", "            ", "if", "prev_is_whitespace", ":", "\n", "                ", "doc_tokens", ".", "append", "(", "' '", ")", "\n", "doc_tokens", ".", "append", "(", "c", ")", "\n", "prev_is_whitespace", "=", "False", "\n", "", "else", ":", "\n", "                ", "doc_tokens", ".", "append", "(", "c", ")", "\n", "prev_is_whitespace", "=", "False", "\n", "", "", "", "return", "''", ".", "join", "(", "doc_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.nlp_utils.normalize_text": [[29, 35], ["text.lower", "text.lower.translate", "nltk.tokenize.word_tokenize", "str.maketrans"], "function", ["None"], ["", "def", "normalize_text", "(", "text", ")", ":", "\n", "    ", "state", "=", "text", ".", "lower", "(", ")", "\n", "out", "=", "state", ".", "translate", "(", "str", ".", "maketrans", "(", "''", ",", "''", ",", "string", ".", "punctuation", ")", ")", "\n", "out", "=", "word_tokenize", "(", "out", ")", "\n", "s_ws", "=", "[", "w", "for", "w", "in", "out", "if", "not", "w", "in", "stop_words", "]", "\n", "return", "s_ws", "", "", ""]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.LayerNorm.__init__": [[22, 27], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Word.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", "LayerNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "input_dim", ")", ")", "\n", "self", ".", "beta", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "input_dim", ")", ")", "\n", "self", ".", "eps", "=", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.LayerNorm.forward": [[28, 35], ["x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "mask.unsqueeze", "x.var"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "# x:        nbatch x hidden", "\n", "# mask:     nbatch", "\n", "        ", "mean", "=", "x", ".", "mean", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "std", "=", "torch", ".", "sqrt", "(", "x", ".", "var", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", "\n", "output", "=", "self", ".", "gamma", "*", "(", "x", "-", "mean", ")", "/", "(", "std", "+", "self", ".", "eps", ")", "+", "self", ".", "beta", "\n", "return", "output", "*", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.Embedding.__init__": [[44, 50], ["super().__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Word.__init__"], ["def", "__init__", "(", "self", ",", "embedding_size", ",", "vocab_size", ",", "enable_cuda", "=", "False", ")", ":", "\n", "        ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding_size", "=", "embedding_size", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "enable_cuda", "=", "enable_cuda", "\n", "self", ".", "embedding_layer", "=", "torch", ".", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "embedding_size", ",", "padding_idx", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.Embedding.compute_mask": [[51, 56], ["torch.ne().float", "torch.ne().float", "torch.ne().float", "torch.ne().float", "mask.cuda.cuda.cuda", "torch.ne", "torch.ne", "torch.ne", "torch.ne"], "methods", ["None"], ["", "def", "compute_mask", "(", "self", ",", "x", ")", ":", "\n", "        ", "mask", "=", "torch", ".", "ne", "(", "x", ",", "0", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "enable_cuda", ":", "\n", "            ", "mask", "=", "mask", ".", "cuda", "(", ")", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.Embedding.forward": [[57, 61], ["layers.Embedding.embedding_layer", "layers.Embedding.compute_mask"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.Embedding.compute_mask"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "embeddings", "=", "self", ".", "embedding_layer", "(", "x", ")", "# batch x time x emb", "\n", "mask", "=", "self", ".", "compute_mask", "(", "x", ")", "# batch x time", "\n", "return", "embeddings", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.LSTMCell.__init__": [[67, 89], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "layers.LSTMCell.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "layers.LSTMCell.register_parameter", "layers.LayerNorm", "layers.LayerNorm", "layers.LayerNorm", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Word.__init__", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.LSTMCell.reset_parameters"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "use_layernorm", "=", "False", ",", "use_bias", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Most parts are copied from torch.nn.LSTMCell.\n        \"\"\"", "\n", "\n", "super", "(", "LSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "use_layernorm", "=", "use_layernorm", "\n", "self", ".", "weight_ih", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "input_size", ",", "4", "*", "hidden_size", ")", ")", "\n", "self", ".", "weight_hh", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "hidden_size", ",", "4", "*", "hidden_size", ")", ")", "\n", "if", "use_bias", ":", "\n", "            ", "self", ".", "bias_f", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "hidden_size", ")", ")", "\n", "self", ".", "bias_iog", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "3", "*", "hidden_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "if", "self", ".", "use_layernorm", ":", "\n", "            ", "self", ".", "layernorm_i", "=", "LayerNorm", "(", "input_dim", "=", "self", ".", "hidden_size", "*", "4", ")", "\n", "self", ".", "layernorm_h", "=", "LayerNorm", "(", "input_dim", "=", "self", ".", "hidden_size", "*", "4", ")", "\n", "self", ".", "layernorm_c", "=", "LayerNorm", "(", "input_dim", "=", "self", ".", "hidden_size", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.LSTMCell.reset_parameters": [[90, 96], ["torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "layers.LSTMCell.bias_f.data.fill_", "layers.LSTMCell.bias_iog.data.fill_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "weight_hh", ".", "data", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight_ih", ".", "data", ",", "gain", "=", "1", ")", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "self", ".", "bias_f", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "self", ".", "bias_iog", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.LSTMCell.get_init_hidden": [[97, 105], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.FloatTensor().zero_", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "get_init_hidden", "(", "self", ",", "bsz", ",", "use_cuda", ")", ":", "\n", "        ", "h_0", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "FloatTensor", "(", "bsz", ",", "self", ".", "hidden_size", ")", ".", "zero_", "(", ")", ")", "\n", "c_0", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "FloatTensor", "(", "bsz", ",", "self", ".", "hidden_size", ")", ".", "zero_", "(", ")", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "            ", "h_0", ",", "c_0", "=", "h_0", ".", "cuda", "(", ")", ",", "c_0", ".", "cuda", "(", ")", "\n", "\n", "", "return", "h_0", ",", "c_0", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.LSTMCell.forward": [[106, 137], ["torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.split", "torch.split", "torch.split", "torch.split", "mask_.unsqueeze", "layers.LSTMCell.get_init_hidden", "layers.LSTMCell.layernorm_i", "layers.LSTMCell.layernorm_h", "input_.size", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "layers.LSTMCell.layernorm_c", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.LSTMCell.get_init_hidden", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.size"], ["", "def", "forward", "(", "self", ",", "input_", ",", "mask_", ",", "h_0", "=", "None", ",", "c_0", "=", "None", ",", "dropped_h_0", "=", "None", ")", ":", "\n", "        ", "if", "h_0", "is", "None", "or", "c_0", "is", "None", ":", "\n", "            ", "h_init", ",", "c_init", "=", "self", ".", "get_init_hidden", "(", "input_", ".", "size", "(", "0", ")", ",", "use_cuda", "=", "input_", ".", "is_cuda", ")", "\n", "if", "h_0", "is", "None", ":", "\n", "                ", "h_0", "=", "h_init", "\n", "\n", "", "if", "c_0", "is", "None", ":", "\n", "                ", "c_0", "=", "c_init", "\n", "\n", "", "", "if", "dropped_h_0", "is", "None", ":", "\n", "            ", "dropped_h_0", "=", "h_0", "\n", "\n", "", "wh", "=", "torch", ".", "mm", "(", "dropped_h_0", ",", "self", ".", "weight_hh", ")", "\n", "wi", "=", "torch", ".", "mm", "(", "input_", ",", "self", ".", "weight_ih", ")", "\n", "if", "self", ".", "use_layernorm", ":", "\n", "            ", "wi", "=", "self", ".", "layernorm_i", "(", "wi", ",", "mask_", ")", "\n", "wh", "=", "self", ".", "layernorm_h", "(", "wh", ",", "mask_", ")", "\n", "", "pre_act", "=", "wi", "+", "wh", "\n", "if", "self", ".", "use_bias", ":", "\n", "            ", "pre_act", "=", "pre_act", "+", "torch", ".", "cat", "(", "[", "self", ".", "bias_f", ",", "self", ".", "bias_iog", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "f", ",", "i", ",", "o", ",", "g", "=", "torch", ".", "split", "(", "pre_act", ",", "split_size_or_sections", "=", "self", ".", "hidden_size", ",", "dim", "=", "1", ")", "\n", "expand_mask_", "=", "mask_", ".", "unsqueeze", "(", "1", ")", "# batch x None", "\n", "c_1", "=", "torch", ".", "sigmoid", "(", "f", ")", "*", "c_0", "+", "torch", ".", "sigmoid", "(", "i", ")", "*", "torch", ".", "tanh", "(", "g", ")", "\n", "c_1", "=", "c_1", "*", "expand_mask_", "+", "c_0", "*", "(", "1", "-", "expand_mask_", ")", "\n", "if", "self", ".", "use_layernorm", ":", "\n", "            ", "h_1", "=", "torch", ".", "sigmoid", "(", "o", ")", "*", "torch", ".", "tanh", "(", "self", ".", "layernorm_c", "(", "c_1", ",", "mask_", ")", ")", "\n", "", "else", ":", "\n", "            ", "h_1", "=", "torch", ".", "sigmoid", "(", "o", ")", "*", "torch", ".", "tanh", "(", "c_1", ")", "\n", "", "h_1", "=", "h_1", "*", "expand_mask_", "+", "h_0", "*", "(", "1", "-", "expand_mask_", ")", "\n", "return", "h_1", ",", "c_1", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.LSTMCell.__repr__": [[138, 141], ["s.format"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "'{name}({input_size}, {hidden_size})'", "\n", "return", "s", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.__init__": [[144, 160], ["super().__init__", "len", "layers.FastUniLSTM.stack_rnns", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Word.__init__", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.stack_rnns"], ["    ", "def", "__init__", "(", "self", ",", "ninp", ",", "nhids", ",", "dropout_between_rnn_layers", "=", "0.", ")", ":", "\n", "        ", "super", "(", "FastUniLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ninp", "=", "ninp", "\n", "self", ".", "nhids", "=", "nhids", "\n", "self", ".", "nlayers", "=", "len", "(", "self", ".", "nhids", ")", "\n", "self", ".", "dropout_between_rnn_layers", "=", "dropout_between_rnn_layers", "\n", "self", ".", "stack_rnns", "(", ")", "\n", "\n", "if", "self", ".", "dropout_between_rnn_layers", ">", "0", ":", "\n", "            ", "print", "(", "'##'", "*", "30", ")", "\n", "print", "(", "'Using Dropout'", ")", "\n", "print", "(", "'##'", "*", "30", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'##'", "*", "30", ")", "\n", "print", "(", "'Not Using Dropout'", ")", "\n", "print", "(", "'##'", "*", "30", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.stack_rnns": [[162, 168], ["torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.LSTM", "range"], "methods", ["None"], ["", "", "def", "stack_rnns", "(", "self", ")", ":", "\n", "        ", "rnns", "=", "[", "torch", ".", "nn", ".", "LSTM", "(", "self", ".", "ninp", "if", "i", "==", "0", "else", "self", ".", "nhids", "[", "i", "-", "1", "]", ",", "\n", "self", ".", "nhids", "[", "i", "]", ",", "\n", "num_layers", "=", "1", ",", "\n", "bidirectional", "=", "False", ")", "for", "i", "in", "range", "(", "self", ".", "nlayers", ")", "]", "\n", "self", ".", "rnns", "=", "torch", ".", "nn", ".", "ModuleList", "(", "rnns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.forward": [[169, 247], ["x.transpose.transpose.size", "mask.data.eq().long().sum", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "list", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "x.transpose.transpose.index_select", "numpy.count_nonzero", "x.transpose.transpose.transpose", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "range", "enumerate", "torch.cat.transpose", "torch.cat.transpose", "layers.FastUniLSTM.forward.pad_"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "mask", ")", ":", "\n", "\n", "        ", "def", "pad_", "(", "tensor", ",", "n", ")", ":", "\n", "            ", "if", "n", ">", "0", ":", "\n", "                ", "zero_pad", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "zeros", "(", "(", "n", ",", ")", "+", "tensor", ".", "size", "(", ")", "[", "1", ":", "]", ")", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "                    ", "zero_pad", "=", "zero_pad", ".", "cuda", "(", ")", "\n", "", "tensor", "=", "torch", ".", "cat", "(", "[", "tensor", ",", "zero_pad", "]", ")", "\n", "", "return", "tensor", "\n", "# Compute sorted sequence lengths", "\n", "", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "lengths", "=", "mask", ".", "data", ".", "eq", "(", "1", ")", ".", "long", "(", ")", ".", "sum", "(", "1", ")", "# .squeeze()", "\n", "_", ",", "idx_sort", "=", "torch", ".", "sort", "(", "lengths", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "_", ",", "idx_unsort", "=", "torch", ".", "sort", "(", "idx_sort", ",", "dim", "=", "0", ")", "\n", "\n", "lengths", "=", "list", "(", "lengths", "[", "idx_sort", "]", ")", "\n", "idx_sort", "=", "torch", ".", "autograd", ".", "Variable", "(", "idx_sort", ")", "\n", "idx_unsort", "=", "torch", ".", "autograd", ".", "Variable", "(", "idx_unsort", ")", "\n", "\n", "# Sort x", "\n", "x", "=", "x", ".", "index_select", "(", "0", ",", "idx_sort", ")", "\n", "\n", "# remove non-zero rows, and remember how many zeros", "\n", "n_nonzero", "=", "np", ".", "count_nonzero", "(", "lengths", ")", "\n", "n_zero", "=", "batch_size", "-", "n_nonzero", "\n", "if", "n_zero", "!=", "0", ":", "\n", "            ", "lengths", "=", "lengths", "[", ":", "n_nonzero", "]", "\n", "x", "=", "x", "[", ":", "n_nonzero", "]", "\n", "\n", "# Transpose batch and sequence dims", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# Pack it up", "\n", "rnn_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "x", ",", "lengths", ")", "\n", "\n", "# Encode all layers", "\n", "outputs", "=", "[", "rnn_input", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nlayers", ")", ":", "\n", "            ", "rnn_input", "=", "outputs", "[", "-", "1", "]", "\n", "\n", "# dropout between rnn layers", "\n", "if", "self", ".", "dropout_between_rnn_layers", ">", "0", ":", "\n", "                ", "dropout_input", "=", "F", ".", "dropout", "(", "rnn_input", ".", "data", ",", "p", "=", "self", ".", "dropout_between_rnn_layers", ",", "\n", "training", "=", "self", ".", "training", ")", "\n", "rnn_input", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "PackedSequence", "(", "dropout_input", ",", "rnn_input", ".", "batch_sizes", ")", "\n", "\n", "\n", "", "seq", ",", "last", "=", "self", ".", "rnns", "[", "i", "]", "(", "rnn_input", ")", "\n", "outputs", ".", "append", "(", "seq", ")", "\n", "if", "i", "==", "self", ".", "nlayers", "-", "1", ":", "\n", "# last layer", "\n", "                ", "last_state", "=", "last", "[", "0", "]", "# (num_layers * num_directions, batch, hidden_size)", "\n", "last_state", "=", "last_state", "[", "0", "]", "# batch x hidden_size", "\n", "\n", "# Unpack everything", "\n", "", "", "for", "i", ",", "o", "in", "enumerate", "(", "outputs", "[", "1", ":", "]", ",", "1", ")", ":", "\n", "            ", "outputs", "[", "i", "]", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "o", ")", "[", "0", "]", "\n", "", "output", "=", "outputs", "[", "-", "1", "]", "\n", "\n", "# Transpose and unsort", "\n", "output", "=", "output", ".", "transpose", "(", "0", ",", "1", ")", "# batch x time x enc", "\n", "\n", "# re-padding", "\n", "output", "=", "pad_", "(", "output", ",", "n_zero", ")", "\n", "last_state", "=", "pad_", "(", "last_state", ",", "n_zero", ")", "\n", "\n", "output", "=", "output", ".", "index_select", "(", "0", ",", "idx_unsort", ")", "\n", "last_state", "=", "last_state", ".", "index_select", "(", "0", ",", "idx_unsort", ")", "\n", "\n", "# Pad up to original batch sequence length", "\n", "if", "output", ".", "size", "(", "1", ")", "!=", "mask", ".", "size", "(", "1", ")", ":", "\n", "            ", "padding", "=", "torch", ".", "zeros", "(", "output", ".", "size", "(", "0", ")", ",", "\n", "mask", ".", "size", "(", "1", ")", "-", "output", ".", "size", "(", "1", ")", ",", "\n", "output", ".", "size", "(", "2", ")", ")", ".", "type", "(", "output", ".", "data", ".", "type", "(", ")", ")", "\n", "output", "=", "torch", ".", "cat", "(", "[", "output", ",", "torch", ".", "autograd", ".", "Variable", "(", "padding", ")", "]", ",", "1", ")", "\n", "\n", "", "output", "=", "output", ".", "contiguous", "(", ")", "*", "mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "output", ",", "last_state", ",", "mask", "", "", "", ""]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.masked_mean": [[5, 18], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.sum.unsqueeze"], "function", ["None"], ["def", "masked_mean", "(", "x", ",", "m", "=", "None", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n        mean pooling when there're paddings\n        input:  tensor: batch x time x h\n                mask:   batch x time\n        output: tensor: batch x h\n    \"\"\"", "\n", "if", "m", "is", "None", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "x", ",", "dim", "=", "dim", ")", "\n", "", "mask_sum", "=", "torch", ".", "sum", "(", "m", ",", "dim", "=", "-", "1", ")", "# batch", "\n", "res", "=", "torch", ".", "sum", "(", "x", ",", "dim", "=", "1", ")", "# batch x h", "\n", "res", "=", "res", "/", "(", "mask_sum", ".", "unsqueeze", "(", "-", "1", ")", "+", "1e-6", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN.__init__": [[14, 25], ["super().__init__", "len", "len", "len", "model.LSTM_DQN.read_config", "model.LSTM_DQN._def_layers", "model.LSTM_DQN.init_weights"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Word.__init__", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN.read_config", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN._def_layers", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN.init_weights"], ["def", "__init__", "(", "self", ",", "model_config", ",", "word_vocab", ",", "verb_map", ",", "noun_map", ",", "enable_cuda", "=", "False", ")", ":", "\n", "        ", "super", "(", "LSTM_DQN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_config", "=", "model_config", "\n", "self", ".", "enable_cuda", "=", "enable_cuda", "\n", "self", ".", "word_vocab_size", "=", "len", "(", "word_vocab", ")", "\n", "self", ".", "id2word", "=", "word_vocab", "\n", "self", ".", "n_actions", "=", "len", "(", "verb_map", ")", "\n", "self", ".", "n_objects", "=", "len", "(", "noun_map", ")", "\n", "self", ".", "read_config", "(", ")", "\n", "self", ".", "_def_layers", "(", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "# self.print_parameters()", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN.print_parameters": [[27, 37], ["model.LSTM_DQN.parameters", "print", "filter", "print", "numpy.prod", "model.LSTM_DQN.parameters", "numpy.prod", "p.size", "p.size"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.size", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.size"], ["", "def", "print_parameters", "(", "self", ")", ":", "\n", "        ", "amount", "=", "0", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "amount", "+=", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "\n", "", "print", "(", "\"total number of parameters: %s\"", "%", "(", "amount", ")", ")", "\n", "parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "amount", "=", "0", "\n", "for", "p", "in", "parameters", ":", "\n", "            ", "amount", "+=", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "\n", "", "print", "(", "\"number of trainable parameters: %s\"", "%", "(", "amount", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN.read_config": [[38, 46], ["None"], "methods", ["None"], ["", "def", "read_config", "(", "self", ")", ":", "\n", "# model config", "\n", "        ", "config", "=", "self", ".", "model_config", "[", "self", ".", "model_name", "]", "\n", "self", ".", "embedding_size", "=", "config", "[", "'embedding_size'", "]", "\n", "self", ".", "encoder_rnn_hidden_size", "=", "config", "[", "'encoder_rnn_hidden_size'", "]", "\n", "self", ".", "action_scorer_hidden_dim", "=", "config", "[", "'action_scorer_hidden_dim'", "]", "\n", "# import ipdb; ipdb.set_trace()", "\n", "self", ".", "dropout_between_rnn_layers", "=", "config", "[", "'dropout_between_rnn_layers'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN._def_layers": [[47, 63], ["crest.helper.layers.Embedding", "crest.helper.layers.FastUniLSTM", "crest.helper.layers.LSTMCell", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["None"], ["", "def", "_def_layers", "(", "self", ")", ":", "\n", "# word embeddings", "\n", "        ", "self", ".", "word_embedding", "=", "Embedding", "(", "embedding_size", "=", "self", ".", "embedding_size", ",", "vocab_size", "=", "self", ".", "word_vocab_size", ",", "enable_cuda", "=", "self", ".", "enable_cuda", ")", "\n", "\n", "# lstm encoder", "\n", "self", ".", "encoder", "=", "FastUniLSTM", "(", "ninp", "=", "self", ".", "embedding_size", ",", "nhids", "=", "self", ".", "encoder_rnn_hidden_size", ",", "\n", "dropout_between_rnn_layers", "=", "self", ".", "dropout_between_rnn_layers", ")", "\n", "\n", "# Recurrent network for temporal dependencies (a.k.a history).", "\n", "self", ".", "action_scorer_shared_recurrent", "=", "LSTMCell", "(", "input_size", "=", "self", ".", "encoder_rnn_hidden_size", "[", "-", "1", "]", ",", "\n", "hidden_size", "=", "self", ".", "action_scorer_hidden_dim", ")", "\n", "\n", "self", ".", "action_scorer_shared", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "encoder_rnn_hidden_size", "[", "-", "1", "]", ",", "self", ".", "action_scorer_hidden_dim", ")", "\n", "self", ".", "action_scorer_action", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "action_scorer_hidden_dim", ",", "self", ".", "n_actions", ",", "bias", "=", "False", ")", "\n", "self", ".", "action_scorer_object", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "action_scorer_hidden_dim", ",", "self", ".", "n_objects", ",", "bias", "=", "False", ")", "\n", "self", ".", "fake_recurrent_mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN.init_weights": [[64, 69], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "model.LSTM_DQN.action_scorer_shared.bias.data.fill_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "action_scorer_shared", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "action_scorer_action", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "action_scorer_object", ".", "weight", ".", "data", ",", "gain", "=", "1", ")", "\n", "self", ".", "action_scorer_shared", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN.representation_generator": [[70, 75], ["model.LSTM_DQN.word_embedding.forward", "model.LSTM_DQN.encoder.forward", "crest.helper.layers.masked_mean"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.forward", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.forward", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.masked_mean"], ["", "def", "representation_generator", "(", "self", ",", "_input_words", ")", ":", "\n", "        ", "embeddings", ",", "mask", "=", "self", ".", "word_embedding", ".", "forward", "(", "_input_words", ")", "# batch x time x emb", "\n", "encoding_sequence", ",", "_", ",", "_", "=", "self", ".", "encoder", ".", "forward", "(", "embeddings", ",", "mask", ")", "# batch x time x h", "\n", "mean_encoding", "=", "masked_mean", "(", "encoding_sequence", ",", "mask", ")", "# batch x h", "\n", "return", "mean_encoding", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN.recurrent_action_scorer": [[76, 89], ["model.LSTM_DQN.action_scorer_shared_recurrent.forward", "model.LSTM_DQN.action_scorer_action.forward", "model.LSTM_DQN.action_scorer_object.forward", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model.LSTM_DQN.fake_recurrent_mask.size", "state_representation.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "model.LSTM_DQN.fake_recurrent_mask.cuda", "state_representation.size"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.forward", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.forward", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.forward", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.size", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.size", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.size"], ["", "def", "recurrent_action_scorer", "(", "self", ",", "state_representation", ",", "last_hidden", "=", "None", ",", "last_cell", "=", "None", ")", ":", "\n", "# state representation: batch x input", "\n", "# last hidden / last cell: batch x hid", "\n", "        ", "if", "self", ".", "fake_recurrent_mask", "is", "None", "or", "self", ".", "fake_recurrent_mask", ".", "size", "(", "0", ")", "!=", "state_representation", ".", "size", "(", "0", ")", ":", "\n", "            ", "self", ".", "fake_recurrent_mask", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "ones", "(", "state_representation", ".", "size", "(", "0", ")", ",", ")", ")", "\n", "if", "self", ".", "enable_cuda", ":", "\n", "                ", "self", ".", "fake_recurrent_mask", "=", "self", ".", "fake_recurrent_mask", ".", "cuda", "(", ")", "\n", "\n", "", "", "new_h", ",", "new_c", "=", "self", ".", "action_scorer_shared_recurrent", ".", "forward", "(", "state_representation", ",", "self", ".", "fake_recurrent_mask", ",", "\n", "last_hidden", ",", "last_cell", ")", "\n", "action_rank", "=", "self", ".", "action_scorer_action", ".", "forward", "(", "new_h", ")", "# batch x n_action", "\n", "object_rank", "=", "self", ".", "action_scorer_object", ".", "forward", "(", "new_h", ")", "# batch x n_object", "\n", "return", "action_rank", ",", "object_rank", ",", "new_h", ",", "new_c", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN.action_scorer": [[90, 96], ["model.LSTM_DQN.action_scorer_shared.forward", "torch.relu", "torch.relu", "torch.relu", "model.LSTM_DQN.action_scorer_action.forward", "model.LSTM_DQN.action_scorer_object.forward"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.forward", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.forward", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.forward"], ["", "def", "action_scorer", "(", "self", ",", "state_representation", ")", ":", "\n", "        ", "hidden", "=", "self", ".", "action_scorer_shared", ".", "forward", "(", "state_representation", ")", "# batch x hid", "\n", "hidden", "=", "F", ".", "relu", "(", "hidden", ")", "# batch x hid", "\n", "action_rank", "=", "self", ".", "action_scorer_action", ".", "forward", "(", "hidden", ")", "# batch x n_action", "\n", "object_rank", "=", "self", ".", "action_scorer_object", ".", "forward", "(", "hidden", ")", "# batch x n_object", "\n", "return", "action_rank", ",", "object_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN_ATT.__init__": [[101, 109], ["model.LSTM_DQN.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "model.LSTM_DQN_ATT.attn_inner.cuda", "model.LSTM_DQN_ATT.attn_outer.cuda"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Word.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LSTM_DQN_ATT", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "# self.attn = torch.nn.Linear(self.encoder_rnn_hidden_size[0], 1)", "\n", "self", ".", "attn_inner", "=", "torch", ".", "nn", ".", "Linear", "(", "self", ".", "encoder_rnn_hidden_size", "[", "0", "]", ",", "32", ")", "\n", "self", ".", "attn_outer", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "1", ",", "bias", "=", "False", ")", "\n", "if", "self", ".", "enable_cuda", ":", "\n", "            ", "self", ".", "attn_inner", "=", "self", ".", "attn_inner", ".", "cuda", "(", ")", "\n", "self", ".", "attn_outer", "=", "self", ".", "attn_outer", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN_ATT.representation_generator": [[110, 130], ["model.LSTM_DQN_ATT.word_embedding.forward", "model.LSTM_DQN_ATT.encoder.forward", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "softmax_att.cuda.cuda.cuda", "len", "int", "model.LSTM_DQN_ATT.attn_outer", "torch.softmax().squeeze", "torch.softmax().squeeze", "torch.softmax().squeeze", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.tanh", "torch.tanh", "torch.tanh", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "model.LSTM_DQN_ATT.attn_inner", "torch.softmax", "torch.softmax", "torch.softmax", "softmax_att.cuda.cuda.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.forward", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.layers.FastUniLSTM.forward"], ["", "", "def", "representation_generator", "(", "self", ",", "_input_words", ",", "return_att", "=", "False", ",", "att_mask", "=", "None", ")", ":", "\n", "        ", "embeddings", ",", "mask", "=", "self", ".", "word_embedding", ".", "forward", "(", "_input_words", ")", "# batch x time x emb", "\n", "encoding_sequence", ",", "_", ",", "_", "=", "self", ".", "encoder", ".", "forward", "(", "embeddings", ",", "mask", ")", "# batch x time x h", "\n", "\n", "softmax_att", "=", "torch", ".", "zeros", "(", "encoding_sequence", ".", "shape", "[", ":", "-", "1", "]", ",", "requires_grad", "=", "True", ")", "\n", "if", "self", ".", "enable_cuda", ":", "\n", "            ", "softmax_att", "=", "softmax_att", ".", "cuda", "(", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "encoding_sequence", ")", ")", ":", "\n", "            ", "numel", "=", "int", "(", "torch", ".", "sum", "(", "mask", "[", "i", "]", ")", ".", "item", "(", ")", ")", "\n", "logit_attn", "=", "self", ".", "attn_outer", "(", "F", ".", "tanh", "(", "self", ".", "attn_inner", "(", "encoding_sequence", "[", "i", "]", "[", ":", "numel", "]", ")", ")", ")", "\n", "softmax_att", "[", "i", ",", ":", "numel", "]", "=", "F", ".", "softmax", "(", "logit_attn", ",", "0", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "", "if", "att_mask", "is", "not", "None", ":", "\n", "            ", "softmax_att", "=", "softmax_att", "*", "att_mask", "\n", "", "mean_encoding", "=", "torch", ".", "bmm", "(", "softmax_att", ".", "unsqueeze", "(", "1", ")", ",", "encoding_sequence", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "return_att", ":", "\n", "            ", "return", "mean_encoding", ",", "softmax_att", "\n", "", "else", ":", "\n", "            ", "return", "mean_encoding", "", "", "", "", ""]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.config_utils.change_config": [[8, 112], ["[].replace().replace().replace", "[].replace().replace", "[].replace", "[].replace", "[].replace().replace", "print", "print", "print", "print", "print", "time.sleep", "warnings.simplefilter", "os.path.join", "open", "yaml.safe_load", "hasattr", "hasattr", "hasattr", "print", "os.path.exists", "os.path.exists", "os.path.join", "[].replace().replace", "[].replace", "[].replace", "input", "print", "print", "print", "shutil.rmtree", "print", "os.path.join", "os.path.join", "print", "print", "print", "shutil.rmtree", "[].replace"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.hasattr", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.hasattr", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.hasattr"], ["def", "change_config", "(", "args", ",", "method", "=", "'drqn'", ",", "wait_time", "=", "2", ",", "kind", "=", "'normal'", ",", "tf", "=", "False", ",", "ensemble", "=", "False", ",", "test", "=", "False", ")", ":", "# kind = noisy | normal", "\n", "    ", "student", "=", "args", ".", "student", "\n", "exp_act_list", "=", "args", ".", "exp_act", "\n", "challenge_type", "=", "'coin_collector'", "\n", "\n", "if", "args", ".", "very_verbose", ":", "\n", "        ", "args", ".", "verbose", "=", "args", ".", "very_verbose", "\n", "warnings", ".", "simplefilter", "(", "\"default\"", ",", "textworld", ".", "TextworldGenerationWarning", ")", "\n", "\n", "# Read config from yaml file.", "\n", "", "if", "challenge_type", "==", "'custom_tw'", "or", "challenge_type", "==", "'treasure_hunter'", ":", "\n", "        ", "config_file", "=", "pjoin", "(", "args", ".", "config_dir", ",", "'config_{}_{}.yaml'", ".", "format", "(", "args", ".", "type", ",", "args", ".", "num_games", ")", ")", "\n", "", "elif", "challenge_type", "==", "'coin_collector'", ":", "# args.type is not None:", "\n", "        ", "if", "args", ".", "num_games", "is", "not", "None", ":", "\n", "            ", "config_file", "=", "pjoin", "(", "args", ".", "config_dir", ",", "'config_{}_{}.yaml'", ".", "format", "(", "args", ".", "type", ",", "args", ".", "num_games", ")", ")", "\n", "", "else", ":", "\n", "            ", "config_file", "=", "pjoin", "(", "args", ".", "config_dir", ",", "'config_{}.yaml'", ".", "format", "(", "args", ".", "type", ",", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "config_file", "=", "pjoin", "(", "args", ".", "config_dir", ",", "'config.yaml'", ")", "\n", "\n", "", "with", "open", "(", "config_file", ")", "as", "reader", ":", "\n", "        ", "config", "=", "yaml", ".", "safe_load", "(", "reader", ")", "\n", "\n", "", "prefixed_method_name", "=", "method", "+", "(", "'_att'", "if", "args", ".", "use_attention", "else", "''", ")", "\n", "prefixed_method_name", "=", "'coin_collector_'", "+", "prefixed_method_name", "\n", "\n", "config", "[", "'bootstrap'", "]", "[", "'threshold'", "]", "=", "args", ".", "threshold", "\n", "config", "[", "'bootstrap'", "]", "[", "'prune'", "]", "=", "args", ".", "prune", "if", "hasattr", "(", "args", ",", "'prune'", ")", "else", "False", "\n", "config", "[", "'bootstrap'", "]", "[", "'embed'", "]", "=", "args", ".", "embed", "if", "hasattr", "(", "args", ",", "'embed'", ")", "else", "'cnet'", "\n", "use_dropout", "=", "args", ".", "dropout", "if", "hasattr", "(", "args", ",", "'dropout'", ")", "else", "None", "\n", "\n", "if", "exp_act_list", ":", "\n", "        ", "prefixed_method_name", "+=", "'_exp_act'", "\n", "\n", "", "if", "use_dropout", "is", "not", "None", "and", "not", "student", ":", "# student model does not use drop-out", "\n", "        ", "prefixed_method_name", "+=", "'_drop_{}'", ".", "format", "(", "use_dropout", ")", "\n", "\n", "######## Base model path #################", "\n", "", "teacher_model_path", "=", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'model_checkpoint_path'", "]", ".", "replace", "(", "'dqrn'", ",", "prefixed_method_name", ")", ".", "replace", "(", "'summary_'", ",", "''", ")", ".", "replace", "(", "'.pt'", ",", "'_train.pt'", ")", "\n", "\n", "######## Bootstrapped model path #################", "\n", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'teacher_model_checkpoint_path'", "]", "=", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'model_checkpoint_path'", "]", ".", "replace", "(", "'dqrn'", ",", "prefixed_method_name", ")", ".", "replace", "(", "'summary_'", ",", "''", ")", "\n", "\n", "config", "[", "'general'", "]", "[", "'student'", "]", "=", "student", "\n", "if", "student", ":", "\n", "        ", "print", "(", "'##'", ")", "\n", "prefixed_method_name", "+=", "'_student'", "\n", "\n", "prefixed_method_name", "+=", "'_thres_{}'", ".", "format", "(", "config", "[", "'bootstrap'", "]", "[", "'threshold'", "]", ")", "\n", "if", "config", "[", "'bootstrap'", "]", "[", "'prune'", "]", ":", "\n", "            ", "prefixed_method_name", "+=", "'_prune'", "\n", "\n", "", "if", "config", "[", "'bootstrap'", "]", "[", "'embed'", "]", "is", "not", "'cnet'", ":", "\n", "            ", "prefixed_method_name", "+=", "'_embed_{}'", ".", "format", "(", "config", "[", "'bootstrap'", "]", "[", "'embed'", "]", ")", "\n", "\n", "## Change the method specific info here", "\n", "", "", "config", "[", "'general'", "]", "[", "'experiment_tag'", "]", "=", "config", "[", "'general'", "]", "[", "'experiment_tag'", "]", ".", "replace", "(", "'drqn'", ",", "method", ")", "\n", "config", "[", "'general'", "]", "[", "'experiments_dir'", "]", "=", "config", "[", "'general'", "]", "[", "'experiments_dir'", "]", ".", "replace", "(", "'summary'", ",", "prefixed_method_name", ")", "\n", "\n", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'model_checkpoint_path'", "]", "=", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'model_checkpoint_path'", "]", ".", "replace", "(", "'dqrn'", ",", "prefixed_method_name", ")", ".", "replace", "(", "'summary_'", ",", "''", ")", "\n", "\n", "config", "[", "'general'", "]", "[", "'teacher_model_path'", "]", "=", "teacher_model_path", "\n", "\n", "config", "[", "'general'", "]", "[", "'use_attention'", "]", "=", "args", ".", "use_attention", "\n", "config", "[", "'general'", "]", "[", "'student'", "]", "=", "student", "\n", "config", "[", "'general'", "]", "[", "'exp_act'", "]", "=", "exp_act_list", "\n", "\n", "print", "(", "config", "[", "'general'", "]", "[", "'experiment_tag'", "]", ")", "\n", "print", "(", "config", "[", "'general'", "]", "[", "'experiments_dir'", "]", ")", "\n", "print", "(", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'model_checkpoint_path'", "]", ")", "\n", "\n", "print", "(", "'Train env name : '", ",", "config", "[", "'general'", "]", "[", "'env_id'", "]", ")", "\n", "print", "(", "'Valid env name : '", ",", "config", "[", "'general'", "]", "[", "'valid_env_id'", "]", ")", "\n", "\n", "time", ".", "sleep", "(", "wait_time", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "config", "[", "'general'", "]", "[", "'experiments_dir'", "]", ")", "and", "not", "test", ":", "\n", "        ", "if", "not", "args", ".", "force_remove", ":", "\n", "            ", "prompt", "=", "input", "(", "'Are you sure you want to delete {} (yes/no):'", ".", "\n", "format", "(", "config", "[", "'general'", "]", "[", "'experiments_dir'", "]", ")", ")", "\n", "# if prompt == 'yes' or do_not_prompt:", "\n", "if", "prompt", "==", "'yes'", ":", "\n", "                ", "print", "(", "'##'", "*", "30", ")", "\n", "print", "(", "'Removing directory '", ",", "config", "[", "'general'", "]", "[", "'experiments_dir'", "]", ")", "\n", "print", "(", "'##'", "*", "30", ")", "\n", "shutil", ".", "rmtree", "(", "config", "[", "'general'", "]", "[", "'experiments_dir'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'##'", "*", "30", ")", "\n", "print", "(", "'Removing directory '", ",", "config", "[", "'general'", "]", "[", "'experiments_dir'", "]", ")", "\n", "print", "(", "'##'", "*", "30", ")", "\n", "shutil", ".", "rmtree", "(", "config", "[", "'general'", "]", "[", "'experiments_dir'", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "config", "[", "'general'", "]", "[", "'experiments_dir'", "]", ")", ":", "\n", "            ", "print", "(", "'{} already exists. If you want to delete and '", "\n", "'start fresh use \\'-fr\\' option.'", ".", "\n", "format", "(", "config", "[", "'general'", "]", "[", "'experiments_dir'", "]", ")", ")", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.config_utils.get_prefix": [[114, 122], ["None"], "function", ["None"], ["", "def", "get_prefix", "(", "args", ",", "method", "=", "'drqn'", ")", ":", "\n", "    ", "prefixed_method_name", "=", "'coin_collector_'", "\n", "prefixed_method_name", "+=", "(", "method", "+", "(", "'_att'", "if", "args", ".", "use_attention", "else", "''", ")", ")", "\n", "if", "args", ".", "exp_act", ":", "\n", "        ", "prefixed_method_name", "+=", "'_exp_act'", "\n", "", "prefixed_method_name", "+=", "'_ng_{}'", ".", "format", "(", "args", ".", "num_games", ")", "\n", "prefixed_method_name", "+=", "'_type_{}'", ".", "format", "(", "args", ".", "type", ")", "\n", "return", "prefixed_method_name", "", "", ""]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.__init__": [[13, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "steps", "=", "100", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "steps", "=", "steps", "\n", "self", ".", "t", "=", "0", "\n", "self", ".", "ns", "=", "[", "]", "\n", "self", ".", "avgs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.add": [[20, 29], ["math.isnan", "generic.SlidingAverage.ns.append", "len", "generic.SlidingAverage.ns.pop", "generic.SlidingAverage.avgs.append"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.pop"], ["", "def", "add", "(", "self", ",", "n", ")", ":", "\n", "        ", "if", "math", ".", "isnan", "(", "n", ")", ":", "\n", "            ", "n", "=", "0", "\n", "", "self", ".", "ns", ".", "append", "(", "n", ")", "\n", "if", "len", "(", "self", ".", "ns", ")", ">", "self", ".", "steps", ":", "\n", "            ", "self", ".", "ns", ".", "pop", "(", "0", ")", "\n", "", "self", ".", "t", "+=", "1", "\n", "if", "self", ".", "t", "%", "self", ".", "steps", "==", "0", ":", "\n", "            ", "self", ".", "avgs", ".", "append", "(", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.value": [[30, 34], ["len", "sum", "len"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "ns", ")", "==", "0", ":", "return", "0", "\n", "return", "sum", "(", "self", ".", "ns", ")", "/", "(", "len", "(", "self", ".", "ns", ")", "+", "0.0000000001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.std": [[35, 40], ["numpy.std", "len", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.std"], ["", "@", "property", "\n", "def", "std", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "ns", ")", "==", "0", ":", "return", "0", "\n", "std", "=", "np", ".", "std", "(", "self", ".", "ns", ")", "\n", "return", "std", "if", "not", "np", ".", "isnan", "(", "std", ")", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.__str__": [[41, 43], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"%s=%.4f\"", "%", "(", "self", ".", "name", ",", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.__gt__": [[44, 45], ["None"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "value", ")", ":", "return", "self", ".", "value", ">", "value", "\n", "def", "__lt__", "(", "self", ",", "value", ")", ":", "return", "self", ".", "value", "<", "value", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.__lt__": [[45, 46], ["None"], "methods", ["None"], ["def", "__lt__", "(", "self", ",", "value", ")", ":", "return", "self", ".", "value", "<", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.state_dict": [[47, 51], ["tuple", "tuple"], "methods", ["None"], ["def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "'t'", ":", "self", ".", "t", ",", "\n", "'ns'", ":", "tuple", "(", "self", ".", "ns", ")", ",", "\n", "'avgs'", ":", "tuple", "(", "self", ".", "avgs", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.load_state_dict": [[52, 56], ["list", "list"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "t", "=", "state", "[", "\"t\"", "]", "\n", "self", ".", "ns", "=", "list", "(", "state", "[", "\"ns\"", "]", ")", "\n", "self", ".", "avgs", "=", "list", "(", "state", "[", "\"avgs\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_np": [[58, 62], ["isinstance", "x.data.cpu().numpy", "x.data.cpu"], "function", ["None"], ["", "", "def", "to_np", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "return", "x", "\n", "", "return", "x", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_pt": [[64, 75], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().type().cuda", "torch.from_numpy().type", "torch.autograd.Variable", "torch.autograd.Variable", "torch.from_numpy().type().cuda", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy().type", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "to_pt", "(", "np_matrix", ",", "enable_cuda", "=", "False", ",", "type", "=", "'long'", ")", ":", "\n", "    ", "if", "type", "==", "'long'", ":", "\n", "        ", "if", "enable_cuda", ":", "\n", "            ", "return", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "from_numpy", "(", "np_matrix", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "from_numpy", "(", "np_matrix", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", ")", "\n", "", "", "elif", "type", "==", "'float'", ":", "\n", "        ", "if", "enable_cuda", ":", "\n", "            ", "return", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "from_numpy", "(", "np_matrix", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "from_numpy", "(", "np_matrix", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.get_experiment_dir": [[77, 86], ["os.path.join", "textworld.utils.maybe_mkdir"], "function", ["None"], ["", "", "", "def", "get_experiment_dir", "(", "config", ",", "makedir", "=", "True", ")", ":", "\n", "    ", "env_id", "=", "config", "[", "'general'", "]", "[", "'env_id'", "]", "\n", "exps_dir", "=", "config", "[", "'general'", "]", "[", "'experiments_dir'", "]", "\n", "exp_tag", "=", "config", "[", "'general'", "]", "[", "'experiment_tag'", "]", "\n", "exp_dir", "=", "pjoin", "(", "exps_dir", ",", "env_id", "+", "\"_\"", "+", "exp_tag", ")", "\n", "if", "makedir", ":", "\n", "        ", "return", "maybe_mkdir", "(", "exp_dir", ")", "\n", "", "else", ":", "\n", "        ", "return", "exp_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.dict2list": [[88, 93], ["res.append"], "function", ["None"], ["", "", "def", "dict2list", "(", "id2w_dict", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "item", "in", "id2w_dict", ":", "\n", "        ", "res", ".", "append", "(", "id2w_dict", "[", "item", "]", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic._words_to_ids": [[95, 103], ["ids.append", "ids.append"], "function", ["None"], ["", "def", "_words_to_ids", "(", "words", ",", "word2id", ")", ":", "\n", "    ", "ids", "=", "[", "]", "\n", "for", "word", "in", "words", ":", "\n", "        ", "try", ":", "\n", "            ", "ids", ".", "append", "(", "word2id", "[", "word", "]", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "ids", ".", "append", "(", "1", ")", "\n", "", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.preproc": [[105, 127], ["s.strip.replace", "s.strip.strip", "nltk.tokenize.word_tokenize", "s.strip.strip", "len", "s.strip.split", "t.lower", "s.strip.split", "s.strip.split", "s.strip.split"], "function", ["None"], ["", "def", "preproc", "(", "s", ",", "str_type", "=", "'None'", ",", "lower_case", "=", "False", ")", ":", "\n", "    ", "s", "=", "s", ".", "replace", "(", "\"\\n\"", ",", "' '", ")", "\n", "if", "s", ".", "strip", "(", ")", "==", "\"\"", ":", "\n", "        ", "return", "[", "\"nothing\"", "]", "\n", "", "if", "str_type", "==", "'description'", ":", "\n", "        ", "s", "=", "s", ".", "split", "(", "\"=-\"", ")", "[", "1", "]", "\n", "", "elif", "str_type", "==", "'inventory'", ":", "\n", "        ", "s", "=", "s", ".", "split", "(", "\"carrying\"", ")", "[", "1", "]", "\n", "if", "s", "[", "0", "]", "==", "':'", ":", "\n", "            ", "s", "=", "s", "[", "1", ":", "]", "\n", "", "", "elif", "str_type", "==", "'feedback'", ":", "\n", "        ", "if", "\"Welcome to Textworld\"", "in", "s", ":", "\n", "            ", "s", "=", "s", ".", "split", "(", "\"Welcome to Textworld\"", ")", "[", "1", "]", "\n", "", "if", "\"-=\"", "in", "s", ":", "\n", "            ", "s", "=", "s", ".", "split", "(", "\"-=\"", ")", "[", "0", "]", "\n", "", "", "s", "=", "s", ".", "strip", "(", ")", "\n", "if", "len", "(", "s", ")", "==", "0", ":", "\n", "        ", "return", "[", "\"nothing\"", "]", "\n", "", "tokens", "=", "wt", "(", "s", ")", "\n", "if", "lower_case", ":", "\n", "        ", "tokens", "=", "[", "t", ".", "lower", "(", ")", "for", "t", "in", "tokens", "]", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.max_len": [[129, 131], ["max", "map"], "function", ["None"], ["", "def", "max_len", "(", "list_of_list", ")", ":", "\n", "    ", "return", "max", "(", "map", "(", "len", ",", "list_of_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.pad_sequences": [[133, 192], ["len", "tuple", "enumerate", "len", "numpy.max", "numpy.asarray", "len", "len", "ValueError", "numpy.ones", "ValueError", "ValueError", "numpy.asarray", "len", "len"], "function", ["None"], ["", "def", "pad_sequences", "(", "sequences", ",", "maxlen", "=", "None", ",", "dtype", "=", "'int32'", ",", "padding", "=", "'pre'", ",", "truncating", "=", "'pre'", ",", "value", "=", "0.", ")", ":", "\n", "    ", "'''\n    FROM KERAS\n    Pads each sequence to the same length:\n    the length of the longest sequence.\n    If maxlen is provided, any sequence longer\n    than maxlen is truncated to maxlen.\n    Truncation happens off either the beginning (default) or\n    the end of the sequence.\n    Supports post-padding and pre-padding (default).\n    # Arguments\n        sequences: list of lists where each element is a sequence\n        maxlen: int, maximum length\n        dtype: type to cast the resulting sequence.\n        padding: 'pre' or 'post', pad either before or after each sequence.\n        truncating: 'pre' or 'post', remove values from sequences larger than\n            maxlen either in the beginning or in the end of the sequence\n        value: float, value to pad the sequences to the desired value.\n    # Returns\n        x: numpy array with dimensions (number_of_sequences, maxlen)\n    '''", "\n", "lengths", "=", "[", "len", "(", "s", ")", "for", "s", "in", "sequences", "]", "\n", "\n", "nb_samples", "=", "len", "(", "sequences", ")", "\n", "if", "maxlen", "is", "None", ":", "\n", "        ", "maxlen", "=", "np", ".", "max", "(", "lengths", ")", "\n", "\n", "# take the sample shape from the first non empty sequence", "\n", "# checking for consistency in the main loop below.", "\n", "", "sample_shape", "=", "tuple", "(", ")", "\n", "for", "s", "in", "sequences", ":", "\n", "        ", "if", "len", "(", "s", ")", ">", "0", ":", "\n", "            ", "sample_shape", "=", "np", ".", "asarray", "(", "s", ")", ".", "shape", "[", "1", ":", "]", "\n", "break", "\n", "\n", "", "", "x", "=", "(", "np", ".", "ones", "(", "(", "nb_samples", ",", "maxlen", ")", "+", "sample_shape", ")", "*", "value", ")", ".", "astype", "(", "dtype", ")", "\n", "for", "idx", ",", "s", "in", "enumerate", "(", "sequences", ")", ":", "\n", "        ", "if", "len", "(", "s", ")", "==", "0", ":", "\n", "            ", "continue", "# empty list was found", "\n", "", "if", "truncating", "==", "'pre'", ":", "\n", "            ", "trunc", "=", "s", "[", "-", "maxlen", ":", "]", "\n", "", "elif", "truncating", "==", "'post'", ":", "\n", "            ", "trunc", "=", "s", "[", ":", "maxlen", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Truncating type \"%s\" not understood'", "%", "truncating", ")", "\n", "\n", "# check `trunc` has expected shape", "\n", "", "trunc", "=", "np", ".", "asarray", "(", "trunc", ",", "dtype", "=", "dtype", ")", "\n", "if", "trunc", ".", "shape", "[", "1", ":", "]", "!=", "sample_shape", ":", "\n", "            ", "raise", "ValueError", "(", "'Shape of sample %s of sequence at position %s is different from expected shape %s'", "%", "\n", "(", "trunc", ".", "shape", "[", "1", ":", "]", ",", "idx", ",", "sample_shape", ")", ")", "\n", "\n", "", "if", "padding", "==", "'post'", ":", "\n", "            ", "x", "[", "idx", ",", ":", "len", "(", "trunc", ")", "]", "=", "trunc", "\n", "", "elif", "padding", "==", "'pre'", ":", "\n", "            ", "x", "[", "idx", ",", "-", "len", "(", "trunc", ")", ":", "]", "=", "trunc", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Padding type \"%s\" not understood'", "%", "padding", ")", "\n", "", "", "return", "x", "", "", ""]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.__init__": [[81, 83], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "items", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.isEmpty": [[84, 86], ["None"], "methods", ["None"], ["", "def", "isEmpty", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "items", "==", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.push": [[87, 89], ["utils.Queue.items.append"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "item", ")", ":", "\n", "        ", "self", ".", "items", ".", "append", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.pop": [[90, 94], ["None"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "item", "=", "self", ".", "items", "[", "0", "]", "\n", "del", "(", "self", ".", "items", "[", "0", "]", ")", "\n", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.peek": [[95, 97], ["None"], "methods", ["None"], ["", "def", "peek", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "items", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.size": [[98, 100], ["len"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.is_whitespace": [[9, 13], ["ord"], "function", ["None"], ["def", "is_whitespace", "(", "c", ",", "use_space", "=", "True", ")", ":", "\n", "    ", "if", "(", "c", "==", "\" \"", "and", "use_space", ")", "or", "c", "==", "\"\\t\"", "or", "c", "==", "\"\\r\"", "or", "c", "==", "\"\\n\"", "or", "ord", "(", "c", ")", "==", "0x202F", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.normalize": [[15, 23], ["word.lower", "chars.append"], "function", ["None"], ["", "def", "normalize", "(", "word", ",", "ignore_spaces", "=", "True", ")", ":", "\n", "    ", "chars", "=", "[", "]", "\n", "for", "c", "in", "word", ".", "lower", "(", ")", ":", "\n", "        ", "if", "c", "==", "' '", "and", "ignore_spaces", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "chars", ".", "append", "(", "c", ")", "\n", "", "", "return", "''", ".", "join", "(", "chars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.clean_str": [[25, 31], ["utils.is_whitespace"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.is_whitespace"], ["", "def", "clean_str", "(", "str_in", ")", ":", "\n", "    ", "str_out", "=", "''", "\n", "for", "c", "in", "str_in", ":", "\n", "        ", "if", "not", "is_whitespace", "(", "c", ",", "use_space", "=", "False", ")", ":", "\n", "            ", "str_out", "+=", "c", "\n", "", "", "return", "str_out", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.compact_text": [[33, 48], ["utils.is_whitespace", "doc_tokens.append", "doc_tokens.append", "doc_tokens.append"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.is_whitespace"], ["", "def", "compact_text", "(", "paragraph_text", ")", ":", "\n", "    ", "doc_tokens", "=", "[", "]", "\n", "prev_is_whitespace", "=", "True", "\n", "for", "c", "in", "paragraph_text", ":", "\n", "        ", "if", "is_whitespace", "(", "c", ")", ":", "\n", "            ", "prev_is_whitespace", "=", "True", "\n", "", "else", ":", "\n", "            ", "if", "prev_is_whitespace", ":", "\n", "                ", "doc_tokens", ".", "append", "(", "' '", ")", "\n", "doc_tokens", ".", "append", "(", "c", ")", "\n", "prev_is_whitespace", "=", "False", "\n", "", "else", ":", "\n", "                ", "doc_tokens", ".", "append", "(", "c", ")", "\n", "prev_is_whitespace", "=", "False", "\n", "", "", "", "return", "''", ".", "join", "(", "doc_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.read_file": [[53, 58], ["open", "f.readlines", "x.strip"], "function", ["None"], ["", "def", "read_file", "(", "txtfile", ",", "join", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "txtfile", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "readlines", "(", ")", "\n", "", "content", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "content", "]", "\n", "return", "(", "' '", ".", "join", "(", "content", ")", "if", "join", "else", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.save2file": [[60, 67], ["open", "tqdm.tqdm", "open.close", "range", "open.write", "len"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.close"], ["", "def", "save2file", "(", "filename", ",", "listofstrings", ")", ":", "\n", "# to read : self.word_vocab = f.read().split(\"\\n\")", "\n", "    ", "fp", "=", "open", "(", "filename", ",", "\"w\"", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "listofstrings", ")", ")", ")", ":", "\n", "        ", "str_state", "=", "listofstrings", "[", "i", "]", "+", "'\\n'", "\n", "fp", ".", "write", "(", "str_state", ")", "\n", "", "fp", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.print_bars": [[72, 76], ["print", "print", "print", "int", "int"], "function", ["None"], ["def", "print_bars", "(", "s", ",", "num", "=", "20", ")", ":", "\n", "    ", "print", "(", "\"##\"", "*", "int", "(", "num", ")", ")", "\n", "print", "(", "s", ")", "\n", "print", "(", "\"##\"", "*", "int", "(", "num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.to_tensor": [[105, 110], ["torch.tensor", "t_x.cuda.cuda"], "function", ["None"], ["", "", "def", "to_tensor", "(", "x", ",", "cuda", "=", "True", ")", ":", "\n", "    ", "t_x", "=", "torch", ".", "tensor", "(", "x", ")", "\n", "if", "cuda", ":", "\n", "        ", "t_x", "=", "t_x", ".", "cuda", "(", ")", "\n", "", "return", "t_x", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.to_numpy": [[112, 118], ["x.cpu.numpy", "x.cpu.detach", "x.cpu.cpu"], "function", ["None"], ["", "def", "to_numpy", "(", "x", ",", "cuda", "=", "True", ",", "var", "=", "False", ")", ":", "\n", "    ", "if", "var", ":", "\n", "        ", "x", "=", "x", ".", "detach", "(", ")", "\n", "", "if", "cuda", ":", "\n", "        ", "x", "=", "x", ".", "cpu", "(", ")", "\n", "", "return", "x", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.make_one_hot": [[120, 124], ["numpy.zeros", "torch.tensor"], "function", ["None"], ["", "def", "make_one_hot", "(", "n", ",", "idx", ",", "make_torch", "=", "False", ")", ":", "\n", "    ", "a", "=", "np", ".", "zeros", "(", "(", "n", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "a", "[", "idx", "]", "=", "1.", "\n", "return", "torch", ".", "tensor", "(", "a", ")", "if", "make_torch", "else", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.evaluate_agents_att.Evaluator.__init__": [[64, 69], ["print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "args", ",", "threshold", "=", "0.3", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "args", "=", "args", "\n", "teacher_path", "=", "config", "[", "'general'", "]", "[", "'teacher_model_path'", "]", "\n", "print", "(", "'Setting up TextWorld environment...'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.evaluate_agents_att.Evaluator.load_valid_env": [[70, 76], ["gym_textworld.make_batch", "gym.make", "evaluate_agents_att.Evaluator.valid_env.seed", "print"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.utils.make_batch", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed"], ["", "def", "load_valid_env", "(", "self", ",", "valid_env_name", ")", ":", "\n", "        ", "test_batch_size", "=", "1", "\n", "valid_env_id", "=", "gym_textworld", ".", "make_batch", "(", "env_id", "=", "valid_env_name", ",", "batch_size", "=", "test_batch_size", ",", "parallel", "=", "True", ")", "\n", "self", ".", "valid_env", "=", "gym", ".", "make", "(", "valid_env_id", ")", "\n", "self", ".", "valid_env", ".", "seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "print", "(", "'Loaded env name: '", ",", "valid_env_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.evaluate_agents_att.Evaluator.load_agent": [[77, 85], ["evaluate_agents_att.get_agent", "model_checkpoint_path.replace", "print", "evaluate_agents_att.Evaluator.agent.model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.prepare_gist.get_agent", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.load_state_dict"], ["", "def", "load_agent", "(", "self", ")", ":", "\n", "        ", "self", ".", "agent", "=", "get_agent", "(", "config", ",", "self", ".", "valid_env", ")", "\n", "model_checkpoint_path", "=", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'model_checkpoint_path'", "]", "\n", "load_path", "=", "model_checkpoint_path", ".", "replace", "(", "'.pt'", ",", "'_best.pt'", ")", "\n", "print", "(", "'Loading model from : '", ",", "load_path", ")", "\n", "self", ".", "agent", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "load_path", ")", ")", "\n", "self", ".", "hidden_size", "=", "config", "[", "'model'", "]", "[", "'lstm_dqn'", "]", "[", "'action_scorer_hidden_dim'", "]", "\n", "self", ".", "hash_features", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.evaluate_agents_att.Evaluator.inference": [[86, 170], ["agent.model.eval", "env.reset", "agent.reset", "agent.get_game_step_info", "evaluate_agents_att.Evaluator.id_string_list.append", "agent.finish", "agent.final_rewards.mean", "agent.step_used_before_done.mean", "agent.final_intermediate_rewards.mean", "msg.format.format.format", "print", "print", "evaluate_agents_att.Evaluator.result_logs[].append", "evaluate_agents_att.Evaluator.result_logs[].append", "evaluate_agents_att.Evaluator.result_logs[].append", "agent.get_observation_strings", "agent.get_similarity_scores", "evaluate_agents_att.Evaluator.desc.append", "evaluate_agents_att.Evaluator.desc_scores.append", "evaluate_agents_att.Evaluator.desc_strings.append", "print", "all", "agent.generate_one_command", "agent.get_qvalues", "agent.choose_maxQ_command", "agent.get_chosen_strings", "env.step", "agent.rewards.append", "agent.dones.append", "agent.intermediate_rewards.append", "agent.get_game_step_info", "list", "list", "agent.get_softmax_attention", "v_idx_maxq.detach", "n_idx_maxq.detach", "type", "agent.get_similarity_scores", "evaluate_agents_att.Evaluator.desc.append", "evaluate_agents_att.Evaluator.desc_scores.append", "evaluate_agents_att.Evaluator.desc_strings.append", "agent.get_game_step_info", "zip", "range", "desc_disc.keys", "desc_disc.values", "list", "list", "desc_disc.keys", "desc_disc.values"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.finish", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_observation_strings", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_similarity_scores", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.generate_one_command", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_qvalues", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.choose_maxQ_command", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_chosen_strings", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.step", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_softmax_attention", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_similarity_scores", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info"], ["", "def", "inference", "(", "self", ",", "agent", ",", "env", ",", "prune", "=", "False", ",", "action_dist", "=", "None", ")", ":", "\n", "        ", "batch_size", "=", "1", "\n", "assert", "batch_size", "==", "1", ",", "\"Batchsize should be 1 during inference\"", "\n", "agent", ".", "model", ".", "eval", "(", ")", "\n", "obs", ",", "infos", "=", "env", ".", "reset", "(", ")", "\n", "agent", ".", "reset", "(", "infos", ")", "\n", "id_string_0", "=", "agent", ".", "get_observation_strings", "(", "infos", ")", "[", "0", "]", "\n", "\n", "provide_prev_action", "=", "self", ".", "config", "[", "'general'", "]", "[", "'provide_prev_action'", "]", "\n", "dones", "=", "[", "False", "]", "*", "batch_size", "\n", "\n", "rewards", "=", "[", "0", "]", "\n", "prev_actions", "=", "[", "\"\"", "for", "_", "in", "range", "(", "batch_size", ")", "]", "if", "provide_prev_action", "else", "None", "\n", "\n", "input_description", ",", "description_id_list", ",", "desc", ",", "_", "=", "agent", ".", "get_game_step_info", "(", "obs", ",", "infos", ",", "prev_actions", ",", "prune", "=", "prune", ",", "\n", "teacher_actions", "=", "action_dist", ",", "ret_desc", "=", "True", ",", ")", "\n", "curr_ras_hidden", ",", "curr_ras_cell", "=", "None", ",", "None", "# ras: recurrent action scorer", "\n", "\n", "if", "prune", ":", "\n", "            ", "desc_strings", ",", "desc_disc", "=", "agent", ".", "get_similarity_scores", "(", "obs", ",", "infos", ",", "prev_actions", ",", "prune", "=", "prune", ",", "\n", "teacher_actions", "=", "action_dist", ",", "ret_desc", "=", "True", ",", ")", "\n", "self", ".", "desc", ".", "append", "(", "list", "(", "desc_disc", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "desc_scores", ".", "append", "(", "list", "(", "desc_disc", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "desc_strings", ".", "append", "(", "desc_strings", ")", "\n", "\n", "", "if", "id_string_0", "in", "self", ".", "id_string_list", ":", "\n", "            ", "print", "(", "'Already encountered this game. Skipping...'", ")", "\n", "return", "\n", "\n", "", "self", ".", "id_string_list", ".", "append", "(", "id_string_0", ")", "\n", "self", ".", "game_num", "+=", "1", "\n", "\n", "while", "not", "all", "(", "dones", ")", ":", "\n", "            ", "v_idx", ",", "n_idx", ",", "_", ",", "curr_ras_hidden", ",", "curr_ras_cell", "=", "agent", ".", "generate_one_command", "(", "input_description", ",", "curr_ras_hidden", ",", "curr_ras_cell", ",", "\n", "epsilon", "=", "0.0", ",", "return_att", "=", "args", ".", "use_attention", ")", "\n", "if", "args", ".", "use_attention", ":", "\n", "                ", "softmax_att", "=", "agent", ".", "get_softmax_attention", "(", ")", "\n", "", "else", ":", "\n", "                ", "softmax_att", "=", "None", "\n", "", "qv", ",", "qn", "=", "agent", ".", "get_qvalues", "(", ")", "\n", "_", ",", "v_idx_maxq", ",", "_", ",", "n_idx_maxq", "=", "agent", ".", "choose_maxQ_command", "(", "qv", ",", "qn", ")", "\n", "chosen_strings", "=", "agent", ".", "get_chosen_strings", "(", "v_idx_maxq", ".", "detach", "(", ")", ",", "n_idx_maxq", ".", "detach", "(", ")", ")", "\n", "\n", "sorted_tokens", "=", "None", "\n", "sorted_atts", "=", "None", "\n", "\n", "obs", ",", "rewards", ",", "dones", ",", "infos", "=", "env", ".", "step", "(", "chosen_strings", ")", "\n", "if", "provide_prev_action", ":", "\n", "                ", "prev_actions", "=", "chosen_strings", "\n", "", "IR", "=", "[", "info", "[", "\"intermediate_reward\"", "]", "for", "info", "in", "infos", "]", "\n", "if", "type", "(", "dones", ")", "is", "bool", ":", "\n", "                ", "dones", "=", "[", "dones", "]", "*", "batch_size", "\n", "\n", "", "agent", ".", "rewards", ".", "append", "(", "rewards", ")", "\n", "agent", ".", "dones", ".", "append", "(", "dones", ")", "\n", "agent", ".", "intermediate_rewards", ".", "append", "(", "[", "info", "[", "\"intermediate_reward\"", "]", "for", "info", "in", "infos", "]", ")", "\n", "\n", "input_description", ",", "description_id_list", ",", "desc", ",", "_", "=", "agent", ".", "get_game_step_info", "(", "obs", ",", "infos", ",", "prev_actions", ",", "prune", "=", "prune", ",", "teacher_actions", "=", "action_dist", ",", "ret_desc", "=", "True", ",", ")", "\n", "\n", "if", "prune", ":", "\n", "                ", "desc_strings", ",", "desc_disc", "=", "agent", ".", "get_similarity_scores", "(", "obs", ",", "infos", ",", "prev_actions", ",", "prune", "=", "prune", ",", "teacher_actions", "=", "action_dist", ",", "ret_desc", "=", "True", ")", "\n", "self", ".", "desc", ".", "append", "(", "list", "(", "desc_disc", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "desc_scores", ".", "append", "(", "list", "(", "desc_disc", ".", "values", "(", ")", ")", ")", "\n", "self", ".", "desc_strings", ".", "append", "(", "desc_strings", ")", "\n", "\n", "_", ",", "_", ",", "orig_desc", ",", "_", "=", "agent", ".", "get_game_step_info", "(", "obs", ",", "infos", ",", "prev_actions", ",", "prune", "=", "False", ",", "ret_desc", "=", "True", ",", ")", "\n", "for", "x", ",", "y", "in", "zip", "(", "orig_desc", ",", "desc", ")", ":", "\n", "                    ", "self", ".", "orig_data", "+=", "[", "' '", ".", "join", "(", "x", ")", ",", "' '", ".", "join", "(", "y", ")", "]", "\n", "\n", "", "", "", "agent", ".", "finish", "(", ")", "\n", "R", "=", "agent", ".", "final_rewards", ".", "mean", "(", ")", "\n", "S", "=", "agent", ".", "step_used_before_done", ".", "mean", "(", ")", "\n", "IR", "=", "agent", ".", "final_intermediate_rewards", ".", "mean", "(", ")", "\n", "\n", "msg", "=", "'====EVAL==== R={:.3f}, IR={:.3f}, S={:.3f}'", "\n", "msg", "=", "msg", ".", "format", "(", "R", ",", "IR", ",", "S", ")", "\n", "print", "(", "msg", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n", "self", ".", "result_logs", "[", "'R'", "]", ".", "append", "(", "R", ")", "\n", "self", ".", "result_logs", "[", "'IR'", "]", ".", "append", "(", "IR", ")", "\n", "self", ".", "result_logs", "[", "'S'", "]", ".", "append", "(", "S", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.evaluate_agents_att.Evaluator.infer": [[171, 211], ["[].replace().replace", "[].replace().replace", "print", "crest.helper.utils.save2file", "numpy.savez", "crest.helper.config_utils.get_prefix", "numpy.load", "set", "numpy.load.keys", "len", "int", "print", "[].replace", "[].replace", "set.update", "evaluate_agents_att.Evaluator.inference", "evaluate_agents_att.Evaluator.inference", "action_dist.keys", "list"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.save2file", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.config_utils.get_prefix", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.update", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.evaluate_agents_att.Evaluator.inference", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.evaluate_agents_att.Evaluator.inference"], ["", "def", "infer", "(", "self", ")", ":", "\n", "        ", "numgames", "=", "self", ".", "args", ".", "num_test_games", "\n", "prune", "=", "self", ".", "args", ".", "prune", "\n", "save_dict", "=", "{", "}", "\n", "count", "=", "0", "\n", "self", ".", "id_string_list", "=", "[", "]", "\n", "self", ".", "result_logs", "=", "{", "'R'", ":", "[", "]", ",", "'IR'", ":", "[", "]", ",", "'S'", ":", "[", "]", "}", "\n", "\n", "if", "prune", ":", "\n", "            ", "self", ".", "prune_filename", "=", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'model_checkpoint_path'", "]", ".", "replace", "(", "'.pt'", ",", "'_level_{}_logs.txt'", ".", "format", "(", "args", ".", "level", ")", ")", ".", "replace", "(", "'saved_models'", ",", "'prune_logs'", ")", "\n", "self", ".", "score_filename", "=", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'model_checkpoint_path'", "]", ".", "replace", "(", "'.pt'", ",", "'_level_{}_logs.npz'", ".", "format", "(", "args", ".", "level", ")", ")", ".", "replace", "(", "'saved_models'", ",", "'score_logs'", ")", "\n", "self", ".", "orig_data", "=", "[", "]", "\n", "self", ".", "desc", "=", "[", "]", "\n", "self", ".", "desc_scores", "=", "[", "]", "\n", "self", ".", "desc_strings", "=", "[", "]", "\n", "\n", "", "if", "args", ".", "method", "==", "'drqn'", ":", "\n", "            ", "if", "prune", ":", "\n", "                ", "prefix_name", "=", "get_prefix", "(", "self", ".", "args", ")", "\n", "filename", "=", "'./data/teacher_data/{}.npz'", ".", "format", "(", "prefix_name", ")", "\n", "teacher_dict", "=", "np", ".", "load", "(", "filename", ",", "allow_pickle", "=", "True", ")", "\n", "global_action_set", "=", "set", "(", ")", "\n", "for", "k", "in", "teacher_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "k", "==", "'allow_pickle'", ":", "\n", "                        ", "continue", "\n", "", "action_dist", "=", "teacher_dict", "[", "k", "]", "[", "-", "1", "]", "\n", "action_dist", "=", "[", "x", "for", "x", "in", "action_dist", ".", "keys", "(", ")", "]", "\n", "global_action_set", ".", "update", "(", "action_dist", ")", "\n", "", "", "self", ".", "game_num", "=", "0", "\n", "print", "(", "'here'", ")", "\n", "while", "(", "len", "(", "self", ".", "id_string_list", ")", "<", "int", "(", "numgames", ")", ")", ":", "\n", "                ", "print", "(", "'Game number : '", ",", "self", ".", "game_num", ")", "\n", "if", "prune", ":", "\n", "                    ", "self", ".", "inference", "(", "self", ".", "agent", ",", "self", ".", "valid_env", ",", "prune", "=", "prune", ",", "action_dist", "=", "[", "list", "(", "global_action_set", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "inference", "(", "self", ".", "agent", ",", "self", ".", "valid_env", ",", "prune", "=", "False", ")", "\n", "", "", "", "if", "prune", ":", "\n", "            ", "save2file", "(", "self", ".", "prune_filename", ",", "self", ".", "orig_data", ")", "\n", "np", ".", "savez", "(", "self", ".", "score_filename", ",", "desc", "=", "self", ".", "desc", ",", "desc_scores", "=", "self", ".", "desc_scores", ",", "desc_strings", "=", "self", ".", "desc_strings", ")", "\n", "", "return", "self", ".", "result_logs", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.evaluate_agents_att.get_agent": [[22, 61], ["crest.helper.generic.dict2list", "enumerate", "print", "print", "print", "print", "print", "print", "print", "crest.helper.utils.read_file", "crest.helper.utils.read_file", "crest.agents.lstm_drqn.agent.RLAgent", "crest.agents.lstm_drqn.agent.RLAgent", "word2id.keys", "len", "word2id.keys", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.dict2list", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.read_file", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.read_file"], ["def", "get_agent", "(", "config", ",", "env", ")", ":", "\n", "    ", "word_vocab", "=", "dict2list", "(", "env", ".", "observation_space", ".", "id2w", ")", "\n", "word2id", "=", "{", "}", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "word_vocab", ")", ":", "\n", "        ", "word2id", "[", "w", "]", "=", "i", "\n", "\n", "", "if", "config", "[", "'general'", "]", "[", "'exp_act'", "]", ":", "\n", "        ", "verb_list", "=", "read_file", "(", "\"data/vocabs/trial_run_custom_tw/verb_vocab.txt\"", ")", "\n", "object_name_list", "=", "read_file", "(", "\"data/vocabs/common_nouns.txt\"", ")", "\n", "", "else", ":", "\n", "        ", "verb_list", "=", "[", "\"go\"", ",", "\"take\"", ",", "\"unlock\"", ",", "\"lock\"", ",", "\"drop\"", ",", "\"look\"", ",", "\"insert\"", ",", "\"open\"", ",", "\"inventory\"", ",", "\"close\"", "]", "\n", "object_name_list", "=", "[", "\"east\"", ",", "\"west\"", ",", "\"north\"", ",", "\"south\"", ",", "\"coin\"", ",", "\"apple\"", ",", "\"carrot\"", ",", "\"textbook\"", ",", "\"passkey\"", ",", "\"keycard\"", "]", "\n", "\n", "# Add missing words in word2id", "\n", "", "for", "w", "in", "verb_list", ":", "\n", "        ", "if", "w", "not", "in", "word2id", ".", "keys", "(", ")", ":", "\n", "            ", "word2id", "[", "w", "]", "=", "len", "(", "word2id", ")", "\n", "word_vocab", "+=", "[", "w", ",", "]", "\n", "", "", "for", "w", "in", "object_name_list", ":", "\n", "        ", "if", "w", "not", "in", "word2id", ".", "keys", "(", ")", ":", "\n", "            ", "word2id", "[", "w", "]", "=", "len", "(", "word2id", ")", "\n", "word_vocab", "+=", "[", "w", ",", "]", "\n", "\n", "", "", "verb_map", "=", "[", "word2id", "[", "w", "]", "for", "w", "in", "verb_list", "if", "w", "in", "word2id", "]", "\n", "noun_map", "=", "[", "word2id", "[", "w", "]", "for", "w", "in", "object_name_list", "if", "w", "in", "word2id", "]", "\n", "print", "(", "'Loaded {} verbs'", ".", "format", "(", "len", "(", "verb_map", ")", ")", ")", "\n", "print", "(", "'Loaded {} nouns'", ".", "format", "(", "len", "(", "noun_map", ")", ")", ")", "\n", "print", "(", "'##'", "*", "30", ")", "\n", "\n", "print", "(", "'Missing verbs and objects:'", ")", "\n", "print", "(", "[", "w", "for", "w", "in", "verb_list", "if", "w", "not", "in", "word2id", "]", ")", "\n", "print", "(", "[", "w", "for", "w", "in", "object_name_list", "if", "w", "not", "in", "word2id", "]", ")", "\n", "print", "(", "'Loading DRQN agent'", ")", "\n", "if", "config", "[", "'general'", "]", "[", "'student'", "]", ":", "\n", "        ", "agent", "=", "RLAgent", "(", "config", ",", "word_vocab", ",", "verb_map", ",", "noun_map", ",", "att", "=", "config", "[", "'general'", "]", "[", "'use_attention'", "]", ",", "\n", "bootstrap", "=", "config", "[", "'general'", "]", "[", "'student'", "]", ",", "embed", "=", "config", "[", "'bootstrap'", "]", "[", "'embed'", "]", ")", "\n", "", "else", ":", "\n", "        ", "agent", "=", "RLAgent", "(", "config", ",", "word_vocab", ",", "verb_map", ",", "noun_map", ",", "att", "=", "config", "[", "'general'", "]", "[", "'use_attention'", "]", ",", "bootstrap", "=", "config", "[", "'general'", "]", "[", "'student'", "]", ",", ")", "\n", "", "return", "agent", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ReplayMemory.__init__": [[20, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", "=", "100000", ")", ":", "\n", "# vanilla replay memory", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "position", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ReplayMemory.push": [[26, 32], ["Transition", "len", "agent.ReplayMemory.memory.append"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"Saves a transition.\"\"\"", "\n", "if", "len", "(", "self", ".", "memory", ")", "<", "self", ".", "capacity", ":", "\n", "            ", "self", ".", "memory", ".", "append", "(", "None", ")", "\n", "", "self", ".", "memory", "[", "self", ".", "position", "]", "=", "Transition", "(", "*", "args", ")", "\n", "self", ".", "position", "=", "(", "self", ".", "position", "+", "1", ")", "%", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ReplayMemory.get_batch": [[33, 51], ["list", "len", "len", "numpy.random.randint", "numpy.any", "list.append", "len", "map", "zip", "len"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ",", "batch_size", ",", "history_size", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "memory", ")", "<=", "history_size", ":", "\n", "            ", "return", "None", "\n", "", "res", "=", "[", "]", "\n", "tried_times", "=", "0", "\n", "while", "len", "(", "res", ")", "<", "batch_size", ":", "\n", "            ", "tried_times", "+=", "1", "\n", "if", "tried_times", ">=", "500", ":", "\n", "                ", "break", "\n", "", "idx", "=", "np", ".", "random", ".", "randint", "(", "history_size", "-", "1", ",", "len", "(", "self", ".", "memory", ")", "-", "1", ")", "\n", "# only last frame can be (is_final == True)", "\n", "if", "np", ".", "any", "(", "[", "item", ".", "is_final", "for", "item", "in", "self", ".", "memory", "[", "idx", "-", "(", "history_size", "-", "1", ")", ":", "idx", "]", "]", ")", ":", "\n", "                ", "continue", "\n", "", "res", ".", "append", "(", "self", ".", "memory", "[", "idx", "-", "(", "history_size", "-", "1", ")", ":", "idx", "+", "1", "]", ")", "\n", "", "if", "len", "(", "res", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "res", "=", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "res", ")", ")", ")", "# list (history size) of list (batch) of tuples", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ReplayMemory.sample": [[52, 54], ["random.sample"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ReplayMemory.sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "random", ".", "sample", "(", "self", ".", "memory", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ReplayMemory.__len__": [[55, 57], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.PrioritizedReplayMemory.__init__": [[60, 67], ["int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", "=", "100000", ",", "priority_fraction", "=", "0.0", ")", ":", "\n", "# prioritized replay memory", "\n", "        ", "self", ".", "priority_fraction", "=", "priority_fraction", "\n", "self", ".", "alpha_capacity", "=", "int", "(", "capacity", "*", "priority_fraction", ")", "\n", "self", ".", "beta_capacity", "=", "capacity", "-", "self", ".", "alpha_capacity", "\n", "self", ".", "alpha_memory", ",", "self", ".", "beta_memory", "=", "[", "]", ",", "[", "]", "\n", "self", ".", "alpha_position", ",", "self", ".", "beta_position", "=", "0", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.PrioritizedReplayMemory.push": [[68, 80], ["Transition", "Transition", "len", "agent.PrioritizedReplayMemory.alpha_memory.append", "len", "agent.PrioritizedReplayMemory.beta_memory.append"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "is_prior", "=", "False", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"Saves a transition.\"\"\"", "\n", "if", "is_prior", ":", "\n", "            ", "if", "len", "(", "self", ".", "alpha_memory", ")", "<", "self", ".", "alpha_capacity", ":", "\n", "                ", "self", ".", "alpha_memory", ".", "append", "(", "None", ")", "\n", "", "self", ".", "alpha_memory", "[", "self", ".", "alpha_position", "]", "=", "Transition", "(", "*", "args", ")", "\n", "self", ".", "alpha_position", "=", "(", "self", ".", "alpha_position", "+", "1", ")", "%", "self", ".", "alpha_capacity", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "beta_memory", ")", "<", "self", ".", "beta_capacity", ":", "\n", "                ", "self", ".", "beta_memory", ".", "append", "(", "None", ")", "\n", "", "self", ".", "beta_memory", "[", "self", ".", "beta_position", "]", "=", "Transition", "(", "*", "args", ")", "\n", "self", ".", "beta_position", "=", "(", "self", ".", "beta_position", "+", "1", ")", "%", "self", ".", "beta_capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.PrioritizedReplayMemory._get_batch": [[81, 99], ["len", "len", "numpy.random.randint", "numpy.any", "res.append", "len", "len"], "methods", ["None"], ["", "", "def", "_get_batch", "(", "self", ",", "batch_size", ",", "history_size", ",", "which_memory", ")", ":", "\n", "        ", "if", "len", "(", "which_memory", ")", "<=", "history_size", ":", "\n", "            ", "return", "None", "\n", "", "res", "=", "[", "]", "\n", "tried_times", "=", "0", "\n", "while", "len", "(", "res", ")", "<", "batch_size", ":", "\n", "            ", "tried_times", "+=", "1", "\n", "if", "tried_times", ">=", "500", ":", "\n", "                ", "break", "\n", "", "idx", "=", "np", ".", "random", ".", "randint", "(", "history_size", "-", "1", ",", "len", "(", "which_memory", ")", "-", "1", ")", "\n", "# only last frame can be (is_final == True)", "\n", "if", "np", ".", "any", "(", "[", "item", ".", "is_final", "for", "item", "in", "which_memory", "[", "idx", "-", "(", "history_size", "-", "1", ")", ":", "idx", "]", "]", ")", ":", "\n", "                ", "continue", "\n", "", "res", ".", "append", "(", "which_memory", "[", "idx", "-", "(", "history_size", "-", "1", ")", ":", "idx", "+", "1", "]", ")", "\n", "\n", "", "if", "len", "(", "res", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.PrioritizedReplayMemory.get_batch": [[100, 115], ["min", "min", "agent.PrioritizedReplayMemory._get_batch", "agent.PrioritizedReplayMemory._get_batch", "random.shuffle", "list", "int", "len", "len", "map", "int", "zip"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.PrioritizedReplayMemory._get_batch", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.PrioritizedReplayMemory._get_batch"], ["", "def", "get_batch", "(", "self", ",", "batch_size", ",", "history_size", ")", ":", "\n", "        ", "from_alpha", "=", "min", "(", "int", "(", "self", ".", "priority_fraction", "*", "batch_size", ")", ",", "len", "(", "self", ".", "alpha_memory", ")", ")", "\n", "from_beta", "=", "min", "(", "batch_size", "-", "int", "(", "self", ".", "priority_fraction", "*", "batch_size", ")", ",", "len", "(", "self", ".", "beta_memory", ")", ")", "\n", "res", "=", "[", "]", "\n", "res_alpha", "=", "self", ".", "_get_batch", "(", "from_alpha", ",", "history_size", ",", "self", ".", "alpha_memory", ")", "\n", "res_beta", "=", "self", ".", "_get_batch", "(", "from_beta", ",", "history_size", ",", "self", ".", "beta_memory", ")", "\n", "if", "res_alpha", "is", "None", "and", "res_beta", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "res_alpha", "is", "not", "None", ":", "\n", "            ", "res", "+=", "res_alpha", "\n", "", "if", "res_beta", "is", "not", "None", ":", "\n", "            ", "res", "+=", "res_beta", "\n", "", "random", ".", "shuffle", "(", "res", ")", "\n", "res", "=", "list", "(", "map", "(", "list", ",", "zip", "(", "*", "res", ")", ")", ")", "# list (history size) of list (batch) of tuples", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.PrioritizedReplayMemory.__len__": [[116, 118], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "alpha_memory", ")", "+", "len", "(", "self", ".", "beta_memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ObservationHistoryCache.__init__": [[121, 126], ["agent.ObservationHistoryCache.reset"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset"], ["    ", "def", "__init__", "(", "self", ",", "capacity", "=", "1", ")", ":", "\n", "# vanilla replay memory", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ObservationHistoryCache.push": [[127, 132], ["range"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "stuff", ")", ":", "\n", "        ", "\"\"\"stuff is list.\"\"\"", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "capacity", ")", ":", "\n", "            ", "self", ".", "memory", "[", "i", "-", "1", "]", "=", "self", ".", "memory", "[", "i", "]", "\n", "", "self", ".", "memory", "[", "-", "1", "]", "=", "stuff", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ObservationHistoryCache.get_all": [[133, 143], ["range", "len", "range", "res.append"], "methods", ["None"], ["", "def", "get_all", "(", "self", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "len", "(", "self", ".", "memory", "[", "-", "1", "]", ")", ")", ":", "\n", "            ", "tmp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "capacity", ")", ":", "\n", "                ", "if", "self", ".", "memory", "[", "i", "]", "==", "[", "]", ":", "\n", "                    ", "continue", "\n", "", "tmp", "+=", "self", ".", "memory", "[", "i", "]", "[", "b", "]", "\n", "", "res", ".", "append", "(", "tmp", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ObservationHistoryCache.reset": [[144, 148], ["range", "agent.ObservationHistoryCache.memory.append"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "memory", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "capacity", ")", ":", "\n", "            ", "self", ".", "memory", ".", "append", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ObservationHistoryCache.__len__": [[149, 151], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.__init__": [[154, 202], ["enumerate", "agent.ObservationHistoryCache", "print", "print", "print", "crest.helper.bootstrap_utils.CREST", "print", "print", "print", "crest.helper.model.LSTM_DQN_ATT", "print", "print", "print", "crest.helper.model.LSTM_DQN", "agent.RLAgent.load_pretrained_model", "agent.RLAgent.model.cuda", "agent.PrioritizedReplayMemory", "agent.ReplayMemory"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.load_pretrained_model"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "word_vocab", ",", "verb_map", ",", "noun_map", ",", "att", "=", "False", ",", "bootstrap", "=", "False", ",", "replay_memory_capacity", "=", "100000", ",", "\n", "replay_memory_priority_fraction", "=", "0.0", ",", "load_pretrained", "=", "False", ",", "embed", "=", "'cnet'", ")", ":", "\n", "# print('Creating RL agent...')", "\n", "        ", "self", ".", "use_dropout_exploration", "=", "True", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "use_cuda", "=", "config", "[", "'general'", "]", "[", "'use_cuda'", "]", "\n", "self", ".", "word_vocab", "=", "word_vocab", "\n", "self", ".", "verb_map", "=", "verb_map", "\n", "self", ".", "noun_map", "=", "noun_map", "\n", "self", ".", "word2id", "=", "{", "}", "\n", "self", ".", "att", "=", "att", "\n", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "word_vocab", ")", ":", "\n", "            ", "self", ".", "word2id", "[", "w", "]", "=", "i", "\n", "\n", "", "self", ".", "bootstrap", "=", "bootstrap", "\n", "if", "bootstrap", ":", "\n", "            ", "print", "(", "'##'", "*", "30", ")", "\n", "print", "(", "'Using Bootstrapping...'", ")", "\n", "print", "(", "'##'", "*", "30", ")", "\n", "self", ".", "bs_thres", "=", "config", "[", "'bootstrap'", "]", "[", "'threshold'", "]", "\n", "self", ".", "bs_obj", "=", "CREST", "(", "threshold", "=", "self", ".", "bs_thres", ",", "embeddings", "=", "embed", ")", "\n", "\n", "", "if", "att", ":", "\n", "            ", "print", "(", "'##'", "*", "30", ")", "\n", "print", "(", "'Using attention...'", ")", "\n", "print", "(", "'##'", "*", "30", ")", "\n", "self", ".", "model", "=", "LSTM_DQN_ATT", "(", "model_config", "=", "config", "[", "\"model\"", "]", ",", "word_vocab", "=", "self", ".", "word_vocab", ",", "\n", "verb_map", "=", "verb_map", ",", "noun_map", "=", "noun_map", ",", "enable_cuda", "=", "self", ".", "use_cuda", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'##'", "*", "30", ")", "\n", "print", "(", "'NOT using attention...'", ")", "\n", "print", "(", "'##'", "*", "30", ")", "\n", "self", ".", "model", "=", "LSTM_DQN", "(", "model_config", "=", "config", "[", "\"model\"", "]", ",", "word_vocab", "=", "self", ".", "word_vocab", ",", "\n", "verb_map", "=", "verb_map", ",", "noun_map", "=", "noun_map", ",", "enable_cuda", "=", "self", ".", "use_cuda", ")", "\n", "\n", "", "self", ".", "action_scorer_hidden_dim", "=", "config", "[", "'model'", "]", "[", "'lstm_dqn'", "]", "[", "'action_scorer_hidden_dim'", "]", "\n", "if", "load_pretrained", ":", "\n", "            ", "self", ".", "load_pretrained_model", "(", "config", "[", "\"model\"", "]", "[", "'global'", "]", "[", "'pretrained_model_save_path'", "]", ")", "\n", "", "if", "self", ".", "use_cuda", ":", "\n", "            ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "", "if", "replay_memory_priority_fraction", ">", "0.0", ":", "\n", "            ", "self", ".", "replay_memory", "=", "PrioritizedReplayMemory", "(", "replay_memory_capacity", ",", "\n", "priority_fraction", "=", "replay_memory_priority_fraction", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "replay_memory", "=", "ReplayMemory", "(", "replay_memory_capacity", ")", "\n", "", "self", ".", "observation_cache_capacity", "=", "config", "[", "'general'", "]", "[", "'observation_cache_capacity'", "]", "\n", "self", ".", "observation_cache", "=", "ObservationHistoryCache", "(", "self", ".", "observation_cache_capacity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.load_pretrained_model": [[203, 211], ["print", "open", "torch.load", "torch.load", "torch.load", "torch.load", "print"], "methods", ["None"], ["", "def", "load_pretrained_model", "(", "self", ",", "load_from", ")", ":", "\n", "# load model, if there is any", "\n", "        ", "print", "(", "\"------------------------------------loading best model------------------------------\\n\"", ")", "\n", "try", ":", "\n", "            ", "save_f", "=", "open", "(", "load_from", ",", "'rb'", ")", "\n", "self", ".", "model", "=", "torch", ".", "load", "(", "save_f", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"failed...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.reset": [[212, 218], ["agent.RLAgent.observation_cache.reset"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset"], ["", "", "def", "reset", "(", "self", ",", "infos", ")", ":", "\n", "        ", "self", ".", "rewards", "=", "[", "]", "\n", "self", ".", "dones", "=", "[", "]", "\n", "self", ".", "intermediate_rewards", "=", "[", "]", "\n", "self", ".", "revisit_counting_rewards", "=", "[", "]", "\n", "self", ".", "observation_cache", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_chosen_strings": [[219, 227], ["crest.helper.generic.to_np", "crest.helper.generic.to_np", "range", "res_str.append"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_np", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_np"], ["", "def", "get_chosen_strings", "(", "self", ",", "v_idx", ",", "n_idx", ")", ":", "\n", "        ", "v_idx_np", "=", "to_np", "(", "v_idx", ")", "\n", "n_idx_np", "=", "to_np", "(", "n_idx", ")", "\n", "res_str", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_idx_np", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "v", ",", "n", "=", "self", ".", "verb_map", "[", "v_idx_np", "[", "i", "]", "]", ",", "self", ".", "noun_map", "[", "n_idx_np", "[", "i", "]", "]", "\n", "res_str", ".", "append", "(", "self", ".", "word_vocab", "[", "v", "]", "+", "\" \"", "+", "self", ".", "word_vocab", "[", "n", "]", ")", "\n", "", "return", "res_str", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.choose_random_command": [[228, 243], ["verb_rank.size", "range", "range", "crest.helper.generic.to_np", "crest.helper.generic.to_np", "v_idx.append", "n_idx.append", "v_qvalue.append", "n_qvalue.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "crest.helper.generic.to_pt", "crest.helper.generic.to_pt", "numpy.array", "numpy.array", "numpy.random.choice", "numpy.random.choice", "len", "len"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.size", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_np", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_np", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_pt", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_pt"], ["", "def", "choose_random_command", "(", "self", ",", "verb_rank", ",", "noun_rank", ")", ":", "\n", "        ", "batch_size", "=", "verb_rank", ".", "size", "(", "0", ")", "\n", "vr", ",", "nr", "=", "to_np", "(", "verb_rank", ")", ",", "to_np", "(", "noun_rank", ")", "\n", "\n", "v_idx", ",", "n_idx", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "v_idx", ".", "append", "(", "np", ".", "random", ".", "choice", "(", "len", "(", "vr", "[", "i", "]", ")", ",", "1", ")", "[", "0", "]", ")", "\n", "n_idx", ".", "append", "(", "np", ".", "random", ".", "choice", "(", "len", "(", "nr", "[", "i", "]", ")", ",", "1", ")", "[", "0", "]", ")", "\n", "", "v_qvalue", ",", "n_qvalue", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "v_qvalue", ".", "append", "(", "verb_rank", "[", "i", "]", "[", "v_idx", "[", "i", "]", "]", ")", "\n", "n_qvalue", ".", "append", "(", "noun_rank", "[", "i", "]", "[", "n_idx", "[", "i", "]", "]", ")", "\n", "", "v_qvalue", ",", "n_qvalue", "=", "torch", ".", "stack", "(", "v_qvalue", ")", ",", "torch", ".", "stack", "(", "n_qvalue", ")", "\n", "v_idx", ",", "n_idx", "=", "to_pt", "(", "np", ".", "array", "(", "v_idx", ")", ",", "self", ".", "use_cuda", ")", ",", "to_pt", "(", "np", ".", "array", "(", "n_idx", ")", ",", "self", ".", "use_cuda", ")", "\n", "return", "v_qvalue", ",", "v_idx", ",", "n_qvalue", ",", "n_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.choose_maxQ_command": [[244, 256], ["verb_rank.size", "numpy.argmax", "numpy.argmax", "range", "crest.helper.generic.to_np", "crest.helper.generic.to_np", "v_qvalue.append", "n_qvalue.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "crest.helper.generic.to_pt", "crest.helper.generic.to_pt"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.size", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_np", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_np", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_pt", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_pt"], ["", "def", "choose_maxQ_command", "(", "self", ",", "verb_rank", ",", "noun_rank", ")", ":", "\n", "        ", "batch_size", "=", "verb_rank", ".", "size", "(", "0", ")", "\n", "vr", ",", "nr", "=", "to_np", "(", "verb_rank", ")", ",", "to_np", "(", "noun_rank", ")", "\n", "v_idx", "=", "np", ".", "argmax", "(", "vr", ",", "-", "1", ")", "\n", "n_idx", "=", "np", ".", "argmax", "(", "nr", ",", "-", "1", ")", "\n", "v_qvalue", ",", "n_qvalue", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "v_qvalue", ".", "append", "(", "verb_rank", "[", "i", "]", "[", "v_idx", "[", "i", "]", "]", ")", "\n", "n_qvalue", ".", "append", "(", "noun_rank", "[", "i", "]", "[", "n_idx", "[", "i", "]", "]", ")", "\n", "", "v_qvalue", ",", "n_qvalue", "=", "torch", ".", "stack", "(", "v_qvalue", ")", ",", "torch", ".", "stack", "(", "n_qvalue", ")", "\n", "v_idx", ",", "n_idx", "=", "to_pt", "(", "v_idx", ",", "self", ".", "use_cuda", ")", ",", "to_pt", "(", "n_idx", ",", "self", ".", "use_cuda", ")", "\n", "return", "v_qvalue", ",", "v_idx", ",", "n_qvalue", ",", "n_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_ranks": [[257, 267], ["agent.RLAgent.model.recurrent_action_scorer", "agent.RLAgent.model.representation_generator", "agent.RLAgent.model.representation_generator"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN.recurrent_action_scorer", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN_ATT.representation_generator", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN_ATT.representation_generator"], ["", "def", "get_ranks", "(", "self", ",", "input_description", ",", "prev_hidden", "=", "None", ",", "prev_cell", "=", "None", ",", "return_att", "=", "False", ",", "att_mask", "=", "None", ")", ":", "\n", "        ", "if", "return_att", ":", "\n", "            ", "state_representation", ",", "softmax_att", "=", "self", ".", "model", ".", "representation_generator", "(", "input_description", ",", "return_att", "=", "True", ",", "att_mask", "=", "att_mask", ")", "\n", "self", ".", "softmax_att", "=", "softmax_att", "\n", "", "else", ":", "\n", "            ", "state_representation", "=", "self", ".", "model", ".", "representation_generator", "(", "input_description", ")", "\n", "", "verb_rank", ",", "noun_rank", ",", "curr_hidden", ",", "curr_cell", "=", "self", ".", "model", ".", "recurrent_action_scorer", "(", "state_representation", ",", "prev_hidden", ",", "prev_cell", ")", "\n", "self", ".", "verb_rank", "=", "verb_rank", "\n", "self", ".", "noun_rank", "=", "noun_rank", "\n", "return", "verb_rank", ",", "noun_rank", ",", "curr_hidden", ",", "curr_cell", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_qvalues_att": [[268, 277], ["agent.RLAgent.model.representation_generator", "agent.RLAgent.model.recurrent_action_scorer", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN_ATT.representation_generator", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.model.LSTM_DQN.recurrent_action_scorer"], ["", "def", "get_qvalues_att", "(", "self", ",", "input_description", ",", "prev_hidden", "=", "None", ",", "prev_cell", "=", "None", ",", "T", "=", "0.1", ")", ":", "\n", "        ", "assert", "self", ".", "att", ",", "\"Attention module must be turned on\"", "\n", "state_representation", ",", "softmax_att", "=", "self", ".", "model", ".", "representation_generator", "(", "input_description", ",", "return_att", "=", "True", ")", "\n", "self", ".", "softmax_att", "=", "softmax_att", "\n", "verb_rank", ",", "noun_rank", ",", "curr_hidden", ",", "curr_cell", "=", "self", ".", "model", ".", "recurrent_action_scorer", "(", "state_representation", ",", "prev_hidden", ",", "prev_cell", ")", "\n", "verb_softmax", "=", "F", ".", "softmax", "(", "verb_rank", "/", "T", ")", "\n", "noun_softmax", "=", "F", ".", "softmax", "(", "noun_rank", "/", "T", ")", "\n", "return", "verb_softmax", ",", "noun_softmax", ",", "curr_hidden", ",", "curr_cell", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_softmax_attention": [[278, 280], ["None"], "methods", ["None"], ["", "def", "get_softmax_attention", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "softmax_att", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_qvalues": [[281, 283], ["None"], "methods", ["None"], ["", "def", "get_qvalues", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "verb_rank", ",", "self", ".", "noun_rank", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_similarity_scores": [[284, 296], ["agent.RLAgent.bs_obj.prune_state", "agent.RLAgent.bs_obj.prune_state", "agent.RLAgent.bs_obj.prune_state"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.CREST.prune_state", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.CREST.prune_state", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.CREST.prune_state"], ["", "def", "get_similarity_scores", "(", "self", ",", "obs", ",", "infos", ",", "prev_actions", "=", "None", ",", "prune", "=", "False", ",", "\n", "ret_desc", "=", "False", ",", "teacher_actions", "=", "None", ")", ":", "\n", "# concat d/i/q/f together as one string", "\n", "        ", "info", "=", "infos", "[", "0", "]", "\n", "inventory_strings", ",", "inv_dict", "=", "self", ".", "bs_obj", ".", "prune_state", "(", "info", "[", "\"inventory\"", "]", ",", "teacher_actions", "[", "0", "]", ",", "\n", "add_prefix", "=", "False", ",", "return_details", "=", "True", ")", "\n", "desc_strings", ",", "desc_disc", "=", "self", ".", "bs_obj", ".", "prune_state", "(", "info", "[", "\"description\"", "]", ",", "teacher_actions", "[", "0", "]", ",", "\n", "add_prefix", "=", "False", ",", "return_details", "=", "True", ")", "\n", "obj_strings", ",", "obj_disc", "=", "self", ".", "bs_obj", ".", "prune_state", "(", "info", "[", "\"objective\"", "]", ",", "teacher_actions", "[", "0", "]", ",", "\n", "add_prefix", "=", "False", ",", "return_details", "=", "True", ")", "\n", "\n", "return", "info", "[", "\"description\"", "]", ",", "desc_disc", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.generate_one_command": [[297, 318], ["agent.RLAgent.get_ranks", "curr_hidden.detach.detach.detach", "curr_cell.detach.detach.detach", "agent.RLAgent.choose_maxQ_command", "agent.RLAgent.choose_random_command", "numpy.random.uniform", "crest.helper.generic.to_pt", "crest.helper.generic.to_pt", "agent.RLAgent.get_chosen_strings", "crest.helper.generic.to_pt.long", "crest.helper.generic.to_pt.long", "v_idx.detach", "n_idx.detach", "input_description.size"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_ranks", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.choose_maxQ_command", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.choose_random_command", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_pt", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_pt", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_chosen_strings", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.Queue.size"], ["", "def", "generate_one_command", "(", "self", ",", "input_description", ",", "prev_hidden", "=", "None", ",", "\n", "prev_cell", "=", "None", ",", "epsilon", "=", "0.2", ",", "return_att", "=", "False", ",", "att_mask", "=", "None", ")", ":", "\n", "        ", "verb_rank", ",", "noun_rank", ",", "curr_hidden", ",", "curr_cell", "=", "self", ".", "get_ranks", "(", "input_description", ",", "prev_hidden", ",", "\n", "prev_cell", ",", "return_att", "=", "return_att", ",", "att_mask", "=", "att_mask", ")", "# batch x n_verb, batch x n_noun", "\n", "curr_hidden", "=", "curr_hidden", ".", "detach", "(", ")", "\n", "curr_cell", "=", "curr_cell", ".", "detach", "(", ")", "\n", "v_qvalue_maxq", ",", "v_idx_maxq", ",", "n_qvalue_maxq", ",", "n_idx_maxq", "=", "self", ".", "choose_maxQ_command", "(", "verb_rank", ",", "noun_rank", ")", "\n", "v_qvalue_random", ",", "v_idx_random", ",", "n_qvalue_random", ",", "n_idx_random", "=", "self", ".", "choose_random_command", "(", "verb_rank", ",", "noun_rank", ")", "\n", "# random number for epsilon greedy", "\n", "rand_num", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "0.0", ",", "high", "=", "1.0", ",", "size", "=", "(", "input_description", ".", "size", "(", "0", ")", ",", ")", ")", "\n", "less_than_epsilon", "=", "(", "rand_num", "<", "epsilon", ")", ".", "astype", "(", "\"float32\"", ")", "# batch", "\n", "greater_than_epsilon", "=", "1.0", "-", "less_than_epsilon", "\n", "less_than_epsilon", "=", "to_pt", "(", "less_than_epsilon", ",", "self", ".", "use_cuda", ",", "type", "=", "'float'", ")", "\n", "greater_than_epsilon", "=", "to_pt", "(", "greater_than_epsilon", ",", "self", ".", "use_cuda", ",", "type", "=", "'float'", ")", "\n", "less_than_epsilon", ",", "greater_than_epsilon", "=", "less_than_epsilon", ".", "long", "(", ")", ",", "greater_than_epsilon", ".", "long", "(", ")", "\n", "v_idx", "=", "less_than_epsilon", "*", "v_idx_random", "+", "greater_than_epsilon", "*", "v_idx_maxq", "\n", "n_idx", "=", "less_than_epsilon", "*", "n_idx_random", "+", "greater_than_epsilon", "*", "n_idx_maxq", "\n", "v_idx", ",", "n_idx", "=", "v_idx", ".", "detach", "(", ")", ",", "n_idx", ".", "detach", "(", ")", "\n", "chosen_strings", "=", "self", ".", "get_chosen_strings", "(", "v_idx", ",", "n_idx", ")", "\n", "return", "v_idx", ",", "n_idx", ",", "chosen_strings", ",", "curr_hidden", ",", "curr_cell", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info": [[319, 381], ["enumerate", "agent.RLAgent.observation_cache.push", "agent.RLAgent.observation_cache.get_all", "crest.helper.generic.pad_sequences().astype", "crest.helper.generic.to_pt", "crest.helper.generic.preproc", "crest.helper.generic._words_to_ids", "crest.helper.generic.preproc", "crest.helper.generic._words_to_ids", "crest.helper.generic.preproc", "crest.helper.generic._words_to_ids", "crest.helper.generic.preproc", "crest.helper.generic._words_to_ids", "agent.RLAgent.bs_obj.prune_state", "agent.RLAgent.bs_obj.prune_state", "agent.RLAgent.bs_obj.prune_state", "crest.helper.generic.preproc", "crest.helper.generic._words_to_ids", "agent.RLAgent.bs_obj.prune_state", "len", "zip", "zip", "crest.helper.generic.pad_sequences", "enumerate", "enumerate", "enumerate", "enumerate", "crest.helper.generic.max_len"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ObservationHistoryCache.push", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ObservationHistoryCache.get_all", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_pt", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.preproc", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic._words_to_ids", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.preproc", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic._words_to_ids", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.preproc", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic._words_to_ids", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.preproc", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic._words_to_ids", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.CREST.prune_state", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.CREST.prune_state", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.CREST.prune_state", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.preproc", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic._words_to_ids", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.bootstrap_utils.CREST.prune_state", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.pad_sequences", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.max_len"], ["", "def", "get_game_step_info", "(", "self", ",", "obs", ",", "infos", ",", "prev_actions", "=", "None", ",", "prune", "=", "False", ",", "\n", "ret_desc", "=", "False", ",", "teacher_actions", "=", "None", ")", ":", "\n", "# concat d/i/q/f together as one string", "\n", "        ", "if", "prune", ":", "\n", "            ", "inventory_strings", "=", "[", "self", ".", "bs_obj", ".", "prune_state", "(", "info", "[", "\"inventory\"", "]", ",", "teacher_actions", "[", "k", "]", ",", "add_prefix", "=", "False", ")", "for", "k", ",", "info", "in", "enumerate", "(", "infos", ")", "]", "\n", "", "else", ":", "\n", "            ", "inventory_strings", "=", "[", "info", "[", "\"inventory\"", "]", "for", "info", "in", "infos", "]", "\n", "", "inventory_token_list", "=", "[", "preproc", "(", "item", ",", "str_type", "=", "'inventory'", ",", "lower_case", "=", "True", ")", "for", "item", "in", "inventory_strings", "]", "\n", "inventory_id_list", "=", "[", "_words_to_ids", "(", "tokens", ",", "self", ".", "word2id", ")", "for", "tokens", "in", "inventory_token_list", "]", "\n", "if", "prune", ":", "\n", "            ", "feedback_strings", "=", "[", "self", ".", "bs_obj", ".", "prune_state", "(", "info", "[", "\"command_feedback\"", "]", ",", "teacher_actions", "[", "k", "]", ",", "add_prefix", "=", "False", ")", "\n", "for", "k", ",", "info", "in", "enumerate", "(", "infos", ")", "]", "\n", "", "else", ":", "\n", "            ", "feedback_strings", "=", "[", "info", "[", "\"command_feedback\"", "]", "for", "info", "in", "infos", "]", "\n", "\n", "", "feedback_token_list", "=", "[", "preproc", "(", "item", ",", "str_type", "=", "'feedback'", ",", "lower_case", "=", "True", ")", "for", "item", "in", "feedback_strings", "]", "\n", "feedback_id_list", "=", "[", "_words_to_ids", "(", "tokens", ",", "self", ".", "word2id", ")", "for", "tokens", "in", "feedback_token_list", "]", "\n", "\n", "orig_quest_string", "=", "[", "info", "[", "\"objective\"", "]", "for", "info", "in", "infos", "]", "\n", "if", "prune", ":", "\n", "            ", "quest_strings", "=", "[", "self", ".", "bs_obj", ".", "prune_state", "(", "info", "[", "\"objective\"", "]", ",", "teacher_actions", "[", "k", "]", ",", "add_prefix", "=", "False", ")", "for", "k", ",", "info", "in", "enumerate", "(", "infos", ")", "]", "\n", "", "else", ":", "\n", "            ", "quest_strings", "=", "[", "info", "[", "\"objective\"", "]", "for", "info", "in", "infos", "]", "\n", "", "quest_token_list", "=", "[", "preproc", "(", "item", ",", "str_type", "=", "'None'", ",", "lower_case", "=", "True", ")", "for", "item", "in", "quest_strings", "]", "\n", "quest_id_list", "=", "[", "_words_to_ids", "(", "tokens", ",", "self", ".", "word2id", ")", "for", "tokens", "in", "quest_token_list", "]", "\n", "\n", "prev_actions", "=", "prev_actions", "\n", "if", "prev_actions", "is", "not", "None", ":", "\n", "            ", "prev_action_token_list", "=", "[", "preproc", "(", "item", ",", "str_type", "=", "'None'", ",", "lower_case", "=", "True", ")", "for", "item", "in", "prev_actions", "]", "\n", "prev_action_id_list", "=", "[", "_words_to_ids", "(", "tokens", ",", "self", ".", "word2id", ")", "for", "tokens", "in", "prev_action_token_list", "]", "\n", "", "else", ":", "\n", "            ", "prev_action_token_list", "=", "[", "[", "]", "for", "_", "in", "infos", "]", "\n", "prev_action_id_list", "=", "[", "[", "]", "for", "_", "in", "infos", "]", "\n", "\n", "", "if", "prune", ":", "\n", "            ", "description_strings", "=", "[", "self", ".", "bs_obj", ".", "prune_state", "(", "info", "[", "\"description\"", "]", ",", "teacher_actions", "[", "k", "]", ")", "for", "k", ",", "info", "in", "enumerate", "(", "infos", ")", "]", "\n", "", "else", ":", "\n", "            ", "description_strings", "=", "[", "info", "[", "\"description\"", "]", "for", "info", "in", "infos", "]", "\n", "\n", "", "description_token_list", "=", "[", "preproc", "(", "item", ",", "str_type", "=", "'description'", ",", "lower_case", "=", "True", ")", "for", "item", "in", "description_strings", "]", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "description_token_list", ")", ":", "\n", "            ", "if", "len", "(", "d", ")", "==", "0", ":", "\n", "                ", "description_token_list", "[", "i", "]", "=", "[", "\"end\"", "]", "# hack here, if empty description, insert word \"end\"", "\n", "", "", "description_id_list", "=", "[", "_words_to_ids", "(", "tokens", ",", "self", ".", "word2id", ")", "for", "tokens", "in", "description_token_list", "]", "\n", "\n", "description_id_list", "=", "[", "_d", "+", "_i", "+", "_q", "+", "_f", "+", "_pa", "for", "(", "_d", ",", "_i", ",", "_q", ",", "_f", ",", "_pa", ")", "in", "\n", "zip", "(", "description_id_list", ",", "inventory_id_list", ",", "quest_id_list", ",", "\n", "feedback_id_list", ",", "prev_action_id_list", ")", "]", "\n", "description_str_list", "=", "[", "_d", "+", "_i", "+", "_q", "+", "_f", "+", "_pa", "for", "(", "_d", ",", "_i", ",", "_q", ",", "_f", ",", "_pa", ")", "in", "\n", "zip", "(", "description_token_list", ",", "inventory_token_list", ",", "\n", "quest_token_list", ",", "feedback_token_list", ",", "prev_action_token_list", ")", "]", "\n", "\n", "self", ".", "observation_cache", ".", "push", "(", "description_id_list", ")", "\n", "description_with_history_id_list", "=", "self", ".", "observation_cache", ".", "get_all", "(", ")", "\n", "input_description", "=", "pad_sequences", "(", "description_with_history_id_list", ",", "\n", "maxlen", "=", "max_len", "(", "description_with_history_id_list", ")", ",", "\n", "padding", "=", "'post'", ")", ".", "astype", "(", "'int32'", ")", "\n", "input_description", "=", "to_pt", "(", "input_description", ",", "self", ".", "use_cuda", ")", "\n", "if", "ret_desc", ":", "\n", "            ", "return", "input_description", ",", "description_with_history_id_list", ",", "description_str_list", ",", "orig_quest_string", "\n", "", "else", ":", "\n", "            ", "return", "input_description", ",", "description_with_history_id_list", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_observation_strings": [[382, 389], ["zip"], "methods", ["None"], ["", "", "def", "get_observation_strings", "(", "self", ",", "infos", ")", ":", "\n", "# concat game_id_d/i/q together as one string", "\n", "        ", "game_file_names", "=", "[", "info", "[", "\"game_file\"", "]", "for", "info", "in", "infos", "]", "\n", "inventory_strings", "=", "[", "info", "[", "\"inventory\"", "]", "for", "info", "in", "infos", "]", "\n", "description_strings", "=", "[", "info", "[", "\"description\"", "]", "for", "info", "in", "infos", "]", "\n", "observation_strings", "=", "[", "_n", "+", "_d", "+", "_i", "for", "(", "_n", ",", "_d", ",", "_i", ")", "in", "zip", "(", "game_file_names", ",", "description_strings", ",", "inventory_strings", ")", "]", "\n", "return", "observation_strings", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.compute_reward": [[390, 413], ["numpy.array", "crest.helper.generic.to_pt", "numpy.array", "crest.helper.generic.to_pt", "len", "len", "len", "len", "range", "range", "len", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_pt", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_pt"], ["", "def", "compute_reward", "(", "self", ",", "revisit_counting_lambda", "=", "0.0", ",", "revisit_counting", "=", "True", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "dones", ")", "==", "1", ":", "\n", "            ", "mask", "=", "[", "1.0", "for", "_", "in", "self", ".", "dones", "[", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "self", ".", "dones", ")", ">", "1", "\n", "mask", "=", "[", "1.0", "if", "not", "self", ".", "dones", "[", "-", "2", "]", "[", "i", "]", "else", "0.0", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dones", "[", "-", "1", "]", ")", ")", "]", "\n", "", "mask", "=", "np", ".", "array", "(", "mask", ",", "dtype", "=", "'float32'", ")", "\n", "mask_pt", "=", "to_pt", "(", "mask", ",", "self", ".", "use_cuda", ",", "type", "=", "'float'", ")", "\n", "\n", "# self.rewards: list of list, max_game_length x batch_size", "\n", "rewards", "=", "np", ".", "array", "(", "self", ".", "rewards", "[", "-", "1", "]", ",", "dtype", "=", "'float32'", ")", "# batch", "\n", "if", "revisit_counting", ":", "\n", "# rewards += np.array(self.intermediate_rewards[-1], dtype='float32')", "\n", "            ", "if", "len", "(", "self", ".", "revisit_counting_rewards", ")", ">", "0", ":", "\n", "                ", "rewards", "=", "rewards", "+", "np", ".", "array", "(", "self", ".", "revisit_counting_rewards", "[", "-", "1", "]", ",", "dtype", "=", "'float32'", ")", "*", "revisit_counting_lambda", "\n", "", "", "rewards_pt", "=", "to_pt", "(", "rewards", ",", "self", ".", "use_cuda", ",", "type", "=", "'float'", ")", "\n", "# memory mask: play one more step after done", "\n", "if", "len", "(", "self", ".", "dones", ")", "<", "3", ":", "\n", "            ", "memory_mask", "=", "[", "1.0", "for", "_", "in", "self", ".", "dones", "[", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "            ", "memory_mask", "=", "[", "1.0", "if", "mask", "[", "i", "]", "==", "1", "or", "(", "(", "not", "self", ".", "dones", "[", "-", "3", "]", "[", "i", "]", ")", "and", "self", ".", "dones", "[", "-", "2", "]", "[", "i", "]", ")", "\n", "else", "0.0", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dones", "[", "-", "1", "]", ")", ")", "]", "\n", "", "return", "rewards", ",", "rewards_pt", ",", "mask", ",", "mask_pt", ",", "memory_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.update": [[414, 468], ["agent.RLAgent.replay_memory.get_batch", "crest.helper.generic.pad_sequences().astype", "crest.helper.generic.to_pt", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "agent.RLAgent.get_ranks", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "len", "Transition", "verb_rank.gather().squeeze", "noun_rank.gather().squeeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "crest.helper.generic.pad_sequences().astype", "crest.helper.generic.to_pt", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "agent.RLAgent.get_ranks", "agent.RLAgent.choose_maxQ_command", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "q_value_max.detach.detach.detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "crest.helper.generic.pad_sequences", "torch.mean.detach", "torch.mean.detach", "curr_ras_hidden.detach", "curr_ras_cell.detach", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "verb_rank.gather().squeeze", "noun_rank.gather().squeeze", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "crest.helper.generic.to_pt", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "losses.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "zip", "verb_rank.gather", "noun_rank.gather", "crest.helper.generic.pad_sequences", "torch.mean.detach", "torch.mean.detach", "curr_ras_hidden.detach", "curr_ras_cell.detach", "numpy.array", "crest.helper.generic.max_len", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "verb_rank.gather", "noun_rank.gather", "len", "crest.helper.generic.max_len", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.stack.unsqueeze", "torch.stack.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.PrioritizedReplayMemory.get_batch", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_pt", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_ranks", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_pt", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_ranks", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.choose_maxQ_command", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.pad_sequences", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_pt", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.pad_sequences", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.max_len", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.max_len"], ["", "def", "update", "(", "self", ",", "replay_batch_size", ",", "history_size", ",", "update_from", "=", "0", ",", "discount_gamma", "=", "0.0", ")", ":", "\n", "\n", "        ", "if", "len", "(", "self", ".", "replay_memory", ")", "<", "replay_batch_size", ":", "\n", "            ", "return", "None", "\n", "", "transitions", "=", "self", ".", "replay_memory", ".", "get_batch", "(", "replay_batch_size", ",", "history_size", "+", "1", ")", "# list (history_size + 1) of list (batch) of tuples", "\n", "# last transitions is just for computing the last Q function", "\n", "if", "transitions", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "sequences", "=", "[", "Transition", "(", "*", "zip", "(", "*", "batch", ")", ")", "for", "batch", "in", "transitions", "]", "\n", "\n", "losses", "=", "[", "]", "\n", "prev_ras_hidden", ",", "prev_ras_cell", "=", "None", ",", "None", "# ras: recurrent action scorer", "\n", "observation_id_list", "=", "pad_sequences", "(", "sequences", "[", "0", "]", ".", "observation_id_list", ",", "maxlen", "=", "max_len", "(", "sequences", "[", "0", "]", ".", "observation_id_list", ")", ",", "padding", "=", "'post'", ")", ".", "astype", "(", "'int32'", ")", "\n", "input_observation", "=", "to_pt", "(", "observation_id_list", ",", "self", ".", "use_cuda", ")", "\n", "v_idx", "=", "torch", ".", "stack", "(", "sequences", "[", "0", "]", ".", "v_idx", ",", "0", ")", "# batch x 1", "\n", "n_idx", "=", "torch", ".", "stack", "(", "sequences", "[", "0", "]", ".", "n_idx", ",", "0", ")", "# batch x 1", "\n", "verb_rank", ",", "noun_rank", ",", "curr_ras_hidden", ",", "curr_ras_cell", "=", "self", ".", "get_ranks", "(", "input_observation", ",", "prev_ras_hidden", ",", "prev_ras_cell", ")", "\n", "v_qvalue", ",", "n_qvalue", "=", "verb_rank", ".", "gather", "(", "1", ",", "v_idx", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", ",", "noun_rank", ".", "gather", "(", "1", ",", "n_idx", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "# batch", "\n", "prev_qvalue", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "v_qvalue", ",", "n_qvalue", "]", ",", "-", "1", ")", ",", "-", "1", ")", "# batch", "\n", "if", "update_from", ">", "0", ":", "\n", "            ", "prev_qvalue", ",", "curr_ras_hidden", ",", "curr_ras_cell", "=", "prev_qvalue", ".", "detach", "(", ")", ",", "curr_ras_hidden", ".", "detach", "(", ")", ",", "curr_ras_cell", ".", "detach", "(", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "len", "(", "sequences", ")", ")", ":", "\n", "            ", "observation_id_list", "=", "pad_sequences", "(", "sequences", "[", "i", "]", ".", "observation_id_list", ",", "\n", "maxlen", "=", "max_len", "(", "sequences", "[", "i", "]", ".", "observation_id_list", ")", ",", "\n", "padding", "=", "'post'", ")", ".", "astype", "(", "'int32'", ")", "\n", "input_observation", "=", "to_pt", "(", "observation_id_list", ",", "self", ".", "use_cuda", ")", "\n", "v_idx", "=", "torch", ".", "stack", "(", "sequences", "[", "i", "]", ".", "v_idx", ",", "0", ")", "# batch x 1", "\n", "n_idx", "=", "torch", ".", "stack", "(", "sequences", "[", "i", "]", ".", "n_idx", ",", "0", ")", "# batch x 1", "\n", "\n", "verb_rank", ",", "noun_rank", ",", "curr_ras_hidden", ",", "curr_ras_cell", "=", "self", ".", "get_ranks", "(", "input_observation", ",", "\n", "curr_ras_hidden", ",", "\n", "curr_ras_cell", ")", "\n", "\n", "v_qvalue_max", ",", "_", ",", "n_qvalue_max", ",", "_", "=", "self", ".", "choose_maxQ_command", "(", "verb_rank", ",", "noun_rank", ")", "\n", "q_value_max", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "v_qvalue_max", ",", "n_qvalue_max", "]", ",", "-", "1", ")", ",", "-", "1", ")", "# batch", "\n", "q_value_max", "=", "q_value_max", ".", "detach", "(", ")", "\n", "v_qvalue", ",", "n_qvalue", "=", "verb_rank", ".", "gather", "(", "1", ",", "v_idx", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", ",", "noun_rank", ".", "gather", "(", "1", ",", "n_idx", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "# batch", "\n", "q_value", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "[", "v_qvalue", ",", "n_qvalue", "]", ",", "-", "1", ")", ",", "-", "1", ")", "# batch", "\n", "if", "i", "<", "update_from", "or", "i", "==", "len", "(", "sequences", ")", "-", "1", ":", "\n", "                ", "q_value", ",", "curr_ras_hidden", ",", "curr_ras_cell", "=", "q_value", ".", "detach", "(", ")", ",", "curr_ras_hidden", ".", "detach", "(", ")", ",", "curr_ras_cell", ".", "detach", "(", ")", "\n", "", "if", "i", ">", "update_from", ":", "\n", "                ", "prev_rewards", "=", "torch", ".", "stack", "(", "sequences", "[", "i", "-", "1", "]", ".", "reward", ")", "# batch", "\n", "prev_not_done", "=", "1.0", "-", "np", ".", "array", "(", "sequences", "[", "i", "-", "1", "]", ".", "done", ",", "dtype", "=", "'float32'", ")", "# batch", "\n", "prev_not_done", "=", "to_pt", "(", "prev_not_done", ",", "self", ".", "use_cuda", ",", "type", "=", "'float'", ")", "\n", "prev_rewards", "=", "prev_rewards", "+", "prev_not_done", "*", "q_value_max", "*", "discount_gamma", "# batch", "\n", "prev_mask", "=", "torch", ".", "stack", "(", "sequences", "[", "i", "-", "1", "]", ".", "mask", ")", "# batch", "\n", "prev_loss", "=", "F", ".", "smooth_l1_loss", "(", "prev_qvalue", "*", "prev_mask", ",", "prev_rewards", "*", "prev_mask", ")", "# huber_loss", "\n", "losses", ".", "append", "(", "prev_loss", ")", "\n", "", "prev_qvalue", "=", "q_value", "\n", "\n", "", "return", "torch", ".", "stack", "(", "losses", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.finish": [[469, 486], ["numpy.array", "numpy.sum", "numpy.array", "numpy.sum", "numpy.array", "numpy.transpose", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array.append", "agent.RLAgent.final_intermediate_rewards.append", "numpy.sum", "float", "int"], "methods", ["None"], ["", "def", "finish", "(", "self", ")", ":", "\n", "        ", "self", ".", "final_rewards", "=", "np", ".", "array", "(", "self", ".", "rewards", "[", "-", "1", "]", ",", "dtype", "=", "'float32'", ")", "# batch", "\n", "self", ".", "final_counting_rewards", "=", "np", ".", "sum", "(", "np", ".", "array", "(", "self", ".", "revisit_counting_rewards", ")", ",", "0", ")", "# batch", "\n", "dones", "=", "[", "]", "\n", "for", "d", "in", "self", ".", "dones", ":", "\n", "            ", "d", "=", "np", ".", "array", "(", "[", "float", "(", "dd", ")", "for", "dd", "in", "d", "]", ",", "dtype", "=", "'float32'", ")", "\n", "dones", ".", "append", "(", "d", ")", "\n", "", "dones", "=", "np", ".", "array", "(", "dones", ")", "\n", "step_used", "=", "1.0", "-", "dones", "\n", "self", ".", "step_used_before_done", "=", "np", ".", "sum", "(", "step_used", ",", "0", ")", "# batch", "\n", "\n", "self", ".", "final_intermediate_rewards", "=", "[", "]", "\n", "intermediate_rewards", "=", "np", ".", "array", "(", "self", ".", "intermediate_rewards", ")", "# step x batch", "\n", "intermediate_rewards", "=", "np", ".", "transpose", "(", "intermediate_rewards", ",", "(", "1", ",", "0", ")", ")", "# batch x step", "\n", "for", "i", "in", "range", "(", "intermediate_rewards", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "final_intermediate_rewards", ".", "append", "(", "np", ".", "sum", "(", "intermediate_rewards", "[", "i", "]", "[", ":", "int", "(", "self", ".", "step_used_before_done", "[", "i", "]", ")", "+", "1", "]", ")", ")", "\n", "", "self", ".", "final_intermediate_rewards", "=", "np", ".", "array", "(", "self", ".", "final_intermediate_rewards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.reset_binarized_counter": [[487, 489], ["range"], "methods", ["None"], ["", "def", "reset_binarized_counter", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "binarized_counter_dict", "=", "[", "{", "}", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_binarized_count": [[490, 503], ["len", "range", "float", "count_rewards.append"], "methods", ["None"], ["", "def", "get_binarized_count", "(", "self", ",", "observation_strings", ",", "update", "=", "True", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "observation_strings", ")", "\n", "count_rewards", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "concat_string", "=", "observation_strings", "[", "i", "]", "\n", "if", "concat_string", "not", "in", "self", ".", "binarized_counter_dict", "[", "i", "]", ":", "\n", "                ", "self", ".", "binarized_counter_dict", "[", "i", "]", "[", "concat_string", "]", "=", "0.0", "\n", "", "if", "update", ":", "\n", "                ", "self", ".", "binarized_counter_dict", "[", "i", "]", "[", "concat_string", "]", "+=", "1.0", "\n", "", "r", "=", "self", ".", "binarized_counter_dict", "[", "i", "]", "[", "concat_string", "]", "\n", "r", "=", "float", "(", "r", "==", "1.0", ")", "\n", "count_rewards", ".", "append", "(", "r", ")", "\n", "", "return", "count_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.state_dict": [[504, 506], ["agent.RLAgent.model.state_dict", "agent.RLAgent.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.state_dict", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "'model'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.load_state_dict": [[507, 510], ["agent.RLAgent.model.load_state_dict", "agent.RLAgent.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.load_state_dict", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "state", "[", "'model'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "state", "[", "'optimizer'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.prepare_gist.GISTSaver.__init__": [[78, 113], ["crest.helper.bootstrap_utils.CREST", "print", "print", "gym_textworld.make_batch", "gym.make", "gym_textworld.make_batch", "gym.make", "prepare_gist.GISTSaver.valid_env.seed", "prepare_gist.get_agent", "print", "prepare_gist.GISTSaver.teacher_agent.model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.utils.make_batch", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.utils.make_batch", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.prepare_gist.get_agent", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "args", ",", "threshold", "=", "0.3", ")", ":", "\n", "        ", "self", ".", "bs_obj", "=", "CREST", "(", "threshold", "=", "threshold", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "validation_games", "=", "20", "\n", "\n", "teacher_path", "=", "config", "[", "'general'", "]", "[", "'teacher_model_path'", "]", "\n", "\n", "print", "(", "'Setting up TextWorld environment...'", ")", "\n", "self", ".", "batch_size", "=", "1", "\n", "# load", "\n", "print", "(", "'Making env id {}'", ".", "format", "(", "config", "[", "'general'", "]", "[", "'env_id'", "]", ")", ")", "\n", "env_id", "=", "gym_textworld", ".", "make_batch", "(", "env_id", "=", "config", "[", "'general'", "]", "[", "'env_id'", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "parallel", "=", "True", ")", "\n", "self", ".", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "# self.env.seed(config['general']['random_seed'])", "\n", "\n", "test_batch_size", "=", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'test_batch_size'", "]", "\n", "\n", "# valid", "\n", "valid_env_name", "=", "config", "[", "'general'", "]", "[", "'valid_env_id'", "]", "\n", "valid_env_id", "=", "gym_textworld", ".", "make_batch", "(", "env_id", "=", "valid_env_name", ",", "\n", "batch_size", "=", "test_batch_size", ",", "\n", "parallel", "=", "True", ")", "\n", "self", ".", "valid_env", "=", "gym", ".", "make", "(", "valid_env_id", ")", "\n", "self", ".", "valid_env", ".", "seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "\n", "self", ".", "teacher_agent", "=", "get_agent", "(", "config", ",", "self", ".", "env", ")", "\n", "print", "(", "'Loading teacher from : '", ",", "teacher_path", ")", "\n", "self", ".", "teacher_agent", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "teacher_path", ")", ")", "\n", "# import time; time.sleep(5)", "\n", "\n", "self", ".", "hidden_size", "=", "config", "[", "'model'", "]", "[", "'lstm_dqn'", "]", "[", "'action_scorer_hidden_dim'", "]", "\n", "self", ".", "hash_features", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.prepare_gist.GISTSaver.inference_teacher": [[116, 210], ["agent.model.eval", "env.reset", "agent.reset", "agent.get_game_step_info", "print", "print", "print", "agent.finish", "agent.final_rewards.mean", "agent.step_used_before_done.mean", "agent.final_intermediate_rewards.mean", "msg.format.format.format", "print", "print", "agent.get_observation_strings", "all", "agent.generate_one_command", "agent.get_qvalues", "agent.choose_maxQ_command", "agent.get_chosen_strings", "print", "obs_list.append", "infos_list.append", "act_list.append", "sorted_tokens_list.append", "sorted_att_list.append", "env.step", "range", "agent.rewards.append", "agent.dones.append", "agent.intermediate_rewards.append", "agent.get_game_step_info", "agent.get_softmax_attention", "v_idx_maxq.detach", "n_idx_maxq.detach", "prepare_gist.topk_attention", "len", "print_command_string[].append", "print_rewards[].append", "print_interm_rewards[].append", "agent.get_observation_strings", "type", "range", "qv.detach().cpu().numpy", "qn.detach().cpu().numpy", "agent.get_observation_strings", "qv.detach().cpu", "qn.detach().cpu", "qv.detach", "qn.detach"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.finish", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_observation_strings", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.generate_one_command", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_qvalues", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.choose_maxQ_command", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_chosen_strings", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.step", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_softmax_attention", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.prepare_gist.topk_attention", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_observation_strings", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_observation_strings"], ["", "def", "inference_teacher", "(", "self", ",", "agent", ",", "env", ",", "noise_std", "=", "0", ")", ":", "\n", "        ", "assert", "self", ".", "batch_size", "==", "1", ",", "\"Batchsize should be 1 during inference\"", "\n", "agent", ".", "model", ".", "eval", "(", ")", "\n", "obs", ",", "infos", "=", "env", ".", "reset", "(", ")", "\n", "agent", ".", "reset", "(", "infos", ")", "\n", "id_string_0", "=", "agent", ".", "get_observation_strings", "(", "infos", ")", "[", "0", "]", "\n", "print_command_string", ",", "print_rewards", "=", "[", "[", "]", "for", "_", "in", "infos", "]", ",", "[", "[", "]", "for", "_", "in", "infos", "]", "\n", "print_interm_rewards", "=", "[", "[", "]", "for", "_", "in", "infos", "]", "\n", "provide_prev_action", "=", "self", ".", "config", "[", "'general'", "]", "[", "'provide_prev_action'", "]", "\n", "dones", "=", "[", "False", "]", "*", "self", ".", "batch_size", "\n", "rewards", "=", "[", "0", "]", "\n", "prev_actions", "=", "[", "\"\"", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", "]", "if", "provide_prev_action", "else", "None", "\n", "input_description", ",", "_", ",", "desc", ",", "_", "=", "agent", ".", "get_game_step_info", "(", "obs", ",", "infos", ",", "prev_actions", ",", "ret_desc", "=", "True", ")", "\n", "curr_ras_hidden", ",", "curr_ras_cell", "=", "None", ",", "None", "# ras: recurrent action scorer", "\n", "# curr_ras_hidden, curr_ras_cell = get_init_hidden(bsz=self.batch_size,", "\n", "#                                                  hidden_size=self.hidden_size, use_cuda=True)", "\n", "print", "(", "\"##\"", "*", "30", ")", "\n", "print", "(", "obs", ")", "\n", "print", "(", "\"##\"", "*", "30", ")", "\n", "obs_list", "=", "[", "]", "\n", "infos_list", "=", "[", "]", "\n", "act_list", "=", "[", "]", "\n", "sorted_tokens_list", "=", "[", "]", "\n", "sorted_att_list", "=", "[", "]", "\n", "id_string", "=", "id_string_0", "\n", "new_rooms", "=", "0", "\n", "while", "not", "all", "(", "dones", ")", ":", "\n", "            ", "v_idx", ",", "n_idx", ",", "_", ",", "curr_ras_hidden", ",", "curr_ras_cell", "=", "agent", ".", "generate_one_command", "(", "input_description", ",", "curr_ras_hidden", ",", "\n", "curr_ras_cell", ",", "epsilon", "=", "0.0", ",", "return_att", "=", "args", ".", "use_attention", ")", "\n", "\n", "if", "args", ".", "use_attention", ":", "\n", "                ", "softmax_att", "=", "agent", ".", "get_softmax_attention", "(", ")", "\n", "", "else", ":", "\n", "                ", "softmax_att", "=", "None", "\n", "", "qv", ",", "qn", "=", "agent", ".", "get_qvalues", "(", ")", "\n", "qv_noisy", "=", "qv", "\n", "qn_noisy", "=", "qn", "\n", "\n", "_", ",", "v_idx_maxq", ",", "_", ",", "n_idx_maxq", "=", "agent", ".", "choose_maxQ_command", "(", "qv_noisy", ",", "qn_noisy", ")", "\n", "chosen_strings", "=", "agent", ".", "get_chosen_strings", "(", "v_idx_maxq", ".", "detach", "(", ")", ",", "n_idx_maxq", ".", "detach", "(", ")", ")", "\n", "if", "args", ".", "use_attention", ":", "\n", "                ", "sorted_tokens", ",", "sorted_atts", "=", "topk_attention", "(", "softmax_att", ",", "desc", ",", "k", "=", "10", ")", "\n", "", "else", ":", "\n", "                ", "sorted_tokens", "=", "None", "\n", "sorted_atts", "=", "None", "\n", "", "print", "(", "'Action : '", ",", "chosen_strings", "[", "0", "]", ")", "\n", "\n", "obs_list", ".", "append", "(", "obs", "[", "0", "]", ")", "\n", "infos_list", ".", "append", "(", "infos", "[", "0", "]", ")", "\n", "act_list", ".", "append", "(", "chosen_strings", "[", "0", "]", ")", "\n", "sorted_tokens_list", ".", "append", "(", "sorted_tokens", ")", "\n", "sorted_att_list", ".", "append", "(", "sorted_atts", ")", "\n", "\n", "obs", ",", "rewards", ",", "dones", ",", "infos", "=", "env", ".", "step", "(", "chosen_strings", ")", "\n", "if", "provide_prev_action", ":", "\n", "                ", "prev_actions", "=", "chosen_strings", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "infos", ")", ")", ":", "\n", "                ", "print_command_string", "[", "i", "]", ".", "append", "(", "chosen_strings", "[", "i", "]", ")", "\n", "print_rewards", "[", "i", "]", ".", "append", "(", "rewards", "[", "i", "]", ")", "\n", "print_interm_rewards", "[", "i", "]", ".", "append", "(", "infos", "[", "i", "]", "[", "\"intermediate_reward\"", "]", ")", "\n", "", "IR", "=", "[", "info", "[", "\"intermediate_reward\"", "]", "for", "info", "in", "infos", "]", "\n", "\n", "new_id_string", "=", "agent", ".", "get_observation_strings", "(", "infos", ")", "[", "0", "]", "\n", "\n", "if", "new_id_string", "!=", "id_string", ":", "\n", "                ", "self", ".", "hash_features", "[", "id_string", "]", "=", "[", "infos", ",", "prev_actions", ",", "qv", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "qn", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "softmax_att", ",", "\n", "desc", ",", "chosen_strings", "]", "\n", "id_string", "=", "agent", ".", "get_observation_strings", "(", "infos", ")", "[", "0", "]", "\n", "new_rooms", "+=", "1", "\n", "if", "new_rooms", ">=", "75", ":", "\n", "                    ", "break", "\n", "\n", "", "", "if", "type", "(", "dones", ")", "is", "bool", ":", "\n", "                ", "dones", "=", "[", "dones", "]", "*", "self", ".", "batch_size", "\n", "", "agent", ".", "rewards", ".", "append", "(", "rewards", ")", "\n", "agent", ".", "dones", ".", "append", "(", "dones", ")", "\n", "agent", ".", "intermediate_rewards", ".", "append", "(", "[", "info", "[", "\"intermediate_reward\"", "]", "for", "info", "in", "infos", "]", ")", "\n", "\n", "input_description", ",", "_", ",", "desc", ",", "_", "=", "agent", ".", "get_game_step_info", "(", "obs", ",", "infos", ",", "prev_actions", ",", "ret_desc", "=", "True", ")", "\n", "\n", "", "agent", ".", "finish", "(", ")", "\n", "R", "=", "agent", ".", "final_rewards", ".", "mean", "(", ")", "\n", "S", "=", "agent", ".", "step_used_before_done", ".", "mean", "(", ")", "\n", "IR", "=", "agent", ".", "final_intermediate_rewards", ".", "mean", "(", ")", "\n", "\n", "msg", "=", "'====EVAL==== R={:.3f}, IR={:.3f}, S={:.3f}, new_rooms={}'", "\n", "msg", "=", "msg", ".", "format", "(", "R", ",", "IR", ",", "S", ",", "new_rooms", ")", "\n", "print", "(", "msg", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "return", "R", ",", "IR", ",", "S", ",", "obs_list", ",", "infos_list", ",", "act_list", ",", "sorted_tokens_list", ",", "sorted_att_list", ",", "id_string_0", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.prepare_gist.GISTSaver.compute_similarity": [[211, 213], ["None"], "methods", ["None"], ["", "def", "compute_similarity", "(", "self", ",", "state_", ",", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.prepare_gist.GISTSaver.compute_action_distribution": [[214, 228], ["action.split", "action_dict.keys", "action_dict.keys"], "methods", ["None"], ["", "def", "compute_action_distribution", "(", "self", ",", "action_list", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "action_dict", "=", "{", "}", "\n", "tot_tokens", "=", "0", "\n", "for", "action", "in", "action_list", ":", "\n", "            ", "for", "token", "in", "action", ".", "split", "(", "\" \"", ")", ":", "\n", "                ", "tot_tokens", "+=", "1", "\n", "if", "token", "in", "action_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "action_dict", "[", "token", "]", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "action_dict", "[", "token", "]", "=", "1", "\n", "", "", "", "if", "normalize", ":", "\n", "            ", "for", "token", "in", "action_dict", ".", "keys", "(", ")", ":", "\n", "                ", "action_dict", "[", "token", "]", "=", "(", "action_dict", "[", "token", "]", "*", "1.", ")", "/", "tot_tokens", "\n", "", "", "return", "action_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.prepare_gist.GISTSaver.infer": [[229, 250], ["range", "print", "crest.helper.config_utils.get_prefix", "numpy.savez", "print", "prepare_gist.GISTSaver.inference_teacher", "prepare_gist.GISTSaver.compute_action_distribution", "open", "pickle.dump"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.config_utils.get_prefix", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.prepare_gist.GISTSaver.inference_teacher", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.prepare_gist.GISTSaver.compute_action_distribution"], ["", "def", "infer", "(", "self", ",", "numgames", ",", "noise_std", "=", "0", ")", ":", "\n", "        ", "save_dict", "=", "{", "}", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "numgames", ")", ":", "\n", "            ", "print", "(", "'Game number : '", ",", "i", ")", "\n", "R", ",", "IR", ",", "S", ",", "obs_list", ",", "infos_list", ",", "act_list", ",", "sorted_tokens_list", ",", "sorted_att_list", ",", "id_string", "=", "self", ".", "inference_teacher", "(", "self", ".", "teacher_agent", ",", "self", ".", "env", ",", "noise_std", "=", "noise_std", ")", "\n", "action_dist", "=", "self", ".", "compute_action_distribution", "(", "act_list", ")", "\n", "if", "R", "==", "1", ":", "\n", "                ", "count", "+=", "1", "\n", "save_dict", "[", "id_string", "]", "=", "[", "obs_list", ",", "infos_list", ",", "act_list", ",", "\n", "sorted_tokens_list", ",", "sorted_att_list", ",", "\n", "action_dist", "]", "\n", "", "", "print", "(", "'saved '", ",", "count", ")", "\n", "prefix_name", "=", "get_prefix", "(", "args", ")", "\n", "filename", "=", "'./data/teacher_data/{}.npz'", ".", "format", "(", "prefix_name", ")", "\n", "hash_filename", "=", "'./data/teacher_data/teacher_softmax_{}.pkl'", ".", "format", "(", "prefix_name", ")", "\n", "np", ".", "savez", "(", "filename", ",", "**", "save_dict", ",", "allow_pickle", "=", "True", ")", "\n", "with", "open", "(", "hash_filename", ",", "'wb'", ")", "as", "fp", ":", "\n", "             ", "pickle", ".", "dump", "(", "self", ".", "hash_features", ",", "fp", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.prepare_gist.get_agent": [[25, 62], ["crest.helper.generic.dict2list", "enumerate", "print", "print", "print", "print", "print", "print", "crest.agents.lstm_drqn.agent.RLAgent", "print", "print", "crest.helper.utils.read_file", "crest.helper.utils.read_file", "word2id.keys", "len", "word2id.keys", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.dict2list", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.read_file", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.read_file"], ["def", "get_agent", "(", "config", ",", "env", ")", ":", "\n", "    ", "word_vocab", "=", "dict2list", "(", "env", ".", "observation_space", ".", "id2w", ")", "\n", "word2id", "=", "{", "}", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "word_vocab", ")", ":", "\n", "        ", "word2id", "[", "w", "]", "=", "i", "\n", "\n", "", "if", "config", "[", "'general'", "]", "[", "'exp_act'", "]", ":", "\n", "        ", "print", "(", "'##'", "*", "30", ")", "\n", "print", "(", "'Using expanded action list for treasure hunter'", ")", "\n", "verb_list", "=", "read_file", "(", "\"data/vocabs/trial_run_custom_tw/verb_vocab.txt\"", ")", "\n", "object_name_list", "=", "read_file", "(", "\"data/vocabs/common_nouns.txt\"", ")", "\n", "", "else", ":", "\n", "        ", "verb_list", "=", "[", "\"go\"", ",", "\"take\"", ",", "\"unlock\"", ",", "\"lock\"", ",", "\"drop\"", ",", "\"look\"", ",", "\"insert\"", ",", "\"open\"", ",", "\"inventory\"", ",", "\"close\"", "]", "\n", "object_name_list", "=", "[", "\"east\"", ",", "\"west\"", ",", "\"north\"", ",", "\"south\"", ",", "\"coin\"", ",", "\"apple\"", ",", "\"carrot\"", ",", "\"textbook\"", ",", "\"passkey\"", ",", "\"keycard\"", "]", "\n", "\n", "# Add missing words in word2id", "\n", "", "for", "w", "in", "verb_list", ":", "\n", "        ", "if", "w", "not", "in", "word2id", ".", "keys", "(", ")", ":", "\n", "            ", "word2id", "[", "w", "]", "=", "len", "(", "word2id", ")", "\n", "word_vocab", "+=", "[", "w", ",", "]", "\n", "", "", "for", "w", "in", "object_name_list", ":", "\n", "        ", "if", "w", "not", "in", "word2id", ".", "keys", "(", ")", ":", "\n", "            ", "word2id", "[", "w", "]", "=", "len", "(", "word2id", ")", "\n", "word_vocab", "+=", "[", "w", ",", "]", "\n", "\n", "", "", "verb_map", "=", "[", "word2id", "[", "w", "]", "for", "w", "in", "verb_list", "if", "w", "in", "word2id", "]", "\n", "noun_map", "=", "[", "word2id", "[", "w", "]", "for", "w", "in", "object_name_list", "if", "w", "in", "word2id", "]", "\n", "print", "(", "'Loaded {} verbs'", ".", "format", "(", "len", "(", "verb_map", ")", ")", ")", "\n", "print", "(", "'Loaded {} nouns'", ".", "format", "(", "len", "(", "noun_map", ")", ")", ")", "\n", "print", "(", "'##'", "*", "30", ")", "\n", "\n", "print", "(", "'Missing verbs and objects:'", ")", "\n", "print", "(", "[", "w", "for", "w", "in", "verb_list", "if", "w", "not", "in", "word2id", "]", ")", "\n", "print", "(", "[", "w", "for", "w", "in", "object_name_list", "if", "w", "not", "in", "word2id", "]", ")", "\n", "\n", "agent", "=", "RLAgent", "(", "config", ",", "word_vocab", ",", "verb_map", ",", "noun_map", ",", "att", "=", "config", "[", "'general'", "]", "[", "'use_attention'", "]", ",", "bootstrap", "=", "False", ",", ")", "\n", "return", "agent", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.prepare_gist.topk_attention": [[64, 75], ["numpy.array", "softmax_att.detach().cpu().numpy", "numpy.sort", "numpy.round", "zip", "softmax_att.detach().cpu", "softmax_att.detach"], "function", ["None"], ["", "def", "topk_attention", "(", "softmax_att", ",", "desc", ",", "k", "=", "10", ")", ":", "\n", "    ", "np_att", "=", "softmax_att", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "desc", "=", "desc", "[", "0", "]", "\n", "dtype", "=", "[", "(", "'token'", ",", "'S10'", ")", ",", "(", "'att'", ",", "float", ")", "]", "\n", "values", "=", "[", "(", "s", ",", "a", ")", "for", "s", ",", "a", "in", "zip", "(", "desc", ",", "np_att", ")", "]", "\n", "val_array", "=", "np", ".", "array", "(", "values", ",", "dtype", "=", "dtype", ")", "\n", "sorted_values", "=", "np", ".", "sort", "(", "val_array", ",", "order", "=", "'att'", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "sorted_tokens", "=", "[", "x", "[", "'token'", "]", "for", "x", "in", "sorted_values", "]", "\n", "sorted_atts", "=", "[", "np", ".", "round", "(", "x", "[", "'att'", "]", ",", "3", ")", "for", "x", "in", "sorted_values", "]", "\n", "return", "sorted_tokens", "[", ":", "k", "]", ",", "sorted_atts", "[", ":", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.train_single_generate_agent.train": [[29, 312], ["print", "gym_textworld.make_batch", "gym.make", "gym.make.seed", "print", "numpy.random.seed", "torch.manual_seed", "torch.cuda.is_available", "crest.helper.generic.dict2list", "enumerate", "print", "print", "print", "print", "print", "print", "crest.agents.lstm_drqn.agent.RLAgent", "print", "crest.helper.generic.get_experiment_dir", "tensorboardX.SummaryWriter", "filter", "crest.helper.generic.SlidingAverage", "crest.helper.generic.SlidingAverage", "crest.helper.generic.SlidingAverage", "range", "gym_textworld.make_batch", "gym.make", "gym.make.seed", "isinstance", "range", "print", "print", "crest.helper.utils.read_file", "crest.helper.utils.read_file", "crest.agents.lstm_drqn.agent.RLAgent.model.parameters", "torch.optim.SGD", "crest.agents.lstm_drqn.agent.RLAgent.model.train", "gym.make.reset", "crest.agents.lstm_drqn.agent.RLAgent.reset", "crest.agents.lstm_drqn.agent.RLAgent.get_observation_strings", "crest.agents.lstm_drqn.agent.RLAgent.get_game_step_info", "enumerate", "crest.agents.lstm_drqn.agent.RLAgent.finish", "numpy.mean", "crest.helper.generic.SlidingAverage.add", "crest.helper.generic.SlidingAverage.add", "crest.helper.generic.SlidingAverage.add", "msg.format.format", "print", "gym_textworld.make_batch", "gym.make", "len", "test_env_list[].seed", "logger.warning", "torch.cuda.manual_seed", "word2id.keys", "len", "word2id.keys", "len", "len", "len", "torch.optim.Adam", "crest.agents.lstm_drqn.agent.RLAgent.reset_binarized_counter", "crest.agents.lstm_drqn.agent.RLAgent.get_binarized_count", "all", "crest.agents.lstm_drqn.agent.RLAgent.model.train", "crest.agents.lstm_drqn.agent.RLAgent.generate_one_command", "gym.make.step", "crest.agents.lstm_drqn.agent.RLAgent.get_observation_strings", "crest.agents.lstm_drqn.agent.RLAgent.revisit_counting_rewards.append", "range", "crest.agents.lstm_drqn.agent.RLAgent.rewards.append", "crest.agents.lstm_drqn.agent.RLAgent.dones.append", "crest.agents.lstm_drqn.agent.RLAgent.intermediate_rewards.append", "crest.agents.lstm_drqn.agent.RLAgent.compute_reward", "crest.agents.lstm_drqn.agent.RLAgent.get_game_step_info", "range", "crest.agents.lstm_drqn.agent.RLAgent.final_rewards.mean", "crest.agents.lstm_drqn.agent.RLAgent.step_used_before_done.mean", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "numpy.mean", "crest.agents.lstm_drqn.agent.RLAgent.final_rewards.mean", "crest.agents.lstm_drqn.agent.RLAgent.final_intermediate_rewards.mean", "crest.agents.lstm_drqn.agent.RLAgent.final_counting_rewards.mean", "numpy.mean", "crest.agents.lstm_drqn.agent.RLAgent.step_used_before_done.mean", "numpy.mean", "torch.save", "print", "zip", "crest.agents.lstm_drqn.test_agent.test", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "range", "range", "crest.agents.lstm_drqn.agent.RLAgent.get_binarized_count", "float", "len", "print_command_string[].append", "print_rewards[].append", "print_interm_rewards[].append", "print_rc_rewards[].append", "type", "memory_cache[].append", "crest.agents.lstm_drqn.agent.RLAgent.update", "torch.optim.Adam.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "np.mean.append", "float", "float", "crest.agents.lstm_drqn.agent.RLAgent.final_rewards.mean", "crest.agents.lstm_drqn.agent.RLAgent.final_intermediate_rewards.mean", "crest.agents.lstm_drqn.agent.RLAgent.final_counting_rewards.mean", "crest.agents.lstm_drqn.agent.RLAgent.step_used_before_done.mean", "crest.agents.lstm_drqn.agent.RLAgent.model.state_dict", "model_checkpoint_path.replace", "print", "print", "print", "print", "print", "torch.save", "print", "range", "range", "format", "crest.agents.lstm_drqn.agent.RLAgent.model.parameters", "crest.helper.generic.to_np", "crest.agents.lstm_drqn.agent.RLAgent.replay_memory.push", "crest.agents.lstm_drqn.agent.RLAgent.replay_memory.push", "crest.agents.lstm_drqn.agent.RLAgent.model.state_dict", "model_checkpoint_path.replace", "len", "crest.agents.lstm_drqn.test_agent.test", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "range", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.utils.make_batch", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.dict2list", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.get_experiment_dir", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.utils.make_batch", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.read_file", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.read_file", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.train_policy_qlearn.train", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_observation_strings", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.finish", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.add", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.add", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.add", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.utils.make_batch", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.reset_binarized_counter", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_binarized_count", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.train_policy_qlearn.train", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.generate_one_command", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.step", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_observation_strings", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.compute_reward", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.test_agent.test", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_binarized_count", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.update", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.step", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.state_dict", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_np", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ObservationHistoryCache.push", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ObservationHistoryCache.push", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.state_dict", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.test_agent.test"], ["def", "train", "(", "config", ",", "args", ")", ":", "\n", "# train env", "\n", "    ", "print", "(", "'Setting up TextWorld environment...'", ")", "\n", "batch_size", "=", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'batch_size'", "]", "\n", "env_id", "=", "gym_textworld", ".", "make_batch", "(", "env_id", "=", "config", "[", "'general'", "]", "[", "'env_id'", "]", ",", "\n", "batch_size", "=", "batch_size", ",", "parallel", "=", "True", ")", "\n", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "env", ".", "seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "\n", "# valid and test env", "\n", "run_test", "=", "config", "[", "'general'", "]", "[", "'run_test'", "]", "\n", "if", "run_test", ":", "\n", "        ", "test_batch_size", "=", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'test_batch_size'", "]", "\n", "# valid", "\n", "valid_env_name", "=", "config", "[", "'general'", "]", "[", "'valid_env_id'", "]", "\n", "\n", "valid_env_id", "=", "gym_textworld", ".", "make_batch", "(", "env_id", "=", "valid_env_name", ",", "batch_size", "=", "test_batch_size", ",", "parallel", "=", "True", ")", "\n", "valid_env", "=", "gym", ".", "make", "(", "valid_env_id", ")", "\n", "valid_env", ".", "seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "\n", "# test", "\n", "test_env_name_list", "=", "config", "[", "'general'", "]", "[", "'test_env_id'", "]", "\n", "assert", "isinstance", "(", "test_env_name_list", ",", "list", ")", "\n", "\n", "test_env_id_list", "=", "[", "gym_textworld", ".", "make_batch", "(", "env_id", "=", "item", ",", "batch_size", "=", "test_batch_size", ",", "parallel", "=", "True", ")", "for", "item", "in", "test_env_name_list", "]", "\n", "test_env_list", "=", "[", "gym", ".", "make", "(", "test_env_id", ")", "for", "test_env_id", "in", "test_env_id_list", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "test_env_list", ")", ")", ":", "\n", "            ", "test_env_list", "[", "i", "]", ".", "seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "# test_env_list[i].reset()", "\n", "\n", "", "", "print", "(", "'Done.'", ")", "\n", "\n", "# Set the random seed manually for reproducibility.", "\n", "np", ".", "random", ".", "seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "if", "not", "config", "[", "'general'", "]", "[", "'use_cuda'", "]", ":", "\n", "            ", "logger", ".", "warning", "(", "\"WARNING: CUDA device detected but 'use_cuda: false' found in config.yaml\"", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "config", "[", "'general'", "]", "[", "'use_cuda'", "]", "=", "False", "# Disable CUDA.", "\n", "", "revisit_counting", "=", "config", "[", "'general'", "]", "[", "'revisit_counting'", "]", "\n", "replay_batch_size", "=", "config", "[", "'general'", "]", "[", "'replay_batch_size'", "]", "\n", "history_size", "=", "config", "[", "'general'", "]", "[", "'history_size'", "]", "\n", "update_from", "=", "config", "[", "'general'", "]", "[", "'update_from'", "]", "\n", "replay_memory_capacity", "=", "config", "[", "'general'", "]", "[", "'replay_memory_capacity'", "]", "\n", "replay_memory_priority_fraction", "=", "config", "[", "'general'", "]", "[", "'replay_memory_priority_fraction'", "]", "\n", "\n", "word_vocab", "=", "dict2list", "(", "env", ".", "observation_space", ".", "id2w", ")", "\n", "word2id", "=", "{", "}", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "word_vocab", ")", ":", "\n", "        ", "word2id", "[", "w", "]", "=", "i", "\n", "\n", "", "if", "config", "[", "'general'", "]", "[", "'exp_act'", "]", ":", "\n", "        ", "print", "(", "'##'", "*", "30", ")", "\n", "print", "(", "'Using expanded verb list'", ")", "\n", "verb_list", "=", "read_file", "(", "\"data/vocabs/trial_run_custom_tw/verb_vocab.txt\"", ")", "\n", "object_name_list", "=", "read_file", "(", "\"data/vocabs/common_nouns.txt\"", ")", "\n", "", "else", ":", "\n", "# \"This option only works for coin collector\"", "\n", "        ", "verb_list", "=", "[", "\"go\"", ",", "\"take\"", ",", "\"unlock\"", ",", "\"lock\"", ",", "\"drop\"", ",", "\"look\"", ",", "\"insert\"", ",", "\"open\"", ",", "\"inventory\"", ",", "\"close\"", "]", "\n", "object_name_list", "=", "[", "\"east\"", ",", "\"west\"", ",", "\"north\"", ",", "\"south\"", ",", "\"coin\"", ",", "\"apple\"", ",", "\"carrot\"", ",", "\"textbook\"", ",", "\"passkey\"", ",", "\"keycard\"", "]", "\n", "\n", "# Add missing words in word2id", "\n", "", "for", "w", "in", "verb_list", ":", "\n", "        ", "if", "w", "not", "in", "word2id", ".", "keys", "(", ")", ":", "\n", "            ", "word2id", "[", "w", "]", "=", "len", "(", "word2id", ")", "\n", "word_vocab", "+=", "[", "w", ",", "]", "\n", "", "", "for", "w", "in", "object_name_list", ":", "\n", "        ", "if", "w", "not", "in", "word2id", ".", "keys", "(", ")", ":", "\n", "            ", "word2id", "[", "w", "]", "=", "len", "(", "word2id", ")", "\n", "word_vocab", "+=", "[", "w", ",", "]", "\n", "\n", "", "", "verb_map", "=", "[", "word2id", "[", "w", "]", "for", "w", "in", "verb_list", "if", "w", "in", "word2id", "]", "\n", "noun_map", "=", "[", "word2id", "[", "w", "]", "for", "w", "in", "object_name_list", "if", "w", "in", "word2id", "]", "\n", "\n", "print", "(", "'Loaded {} verbs'", ".", "format", "(", "len", "(", "verb_map", ")", ")", ")", "\n", "print", "(", "'Loaded {} nouns'", ".", "format", "(", "len", "(", "noun_map", ")", ")", ")", "\n", "print", "(", "'##'", "*", "30", ")", "\n", "\n", "print", "(", "'Missing verbs and objects:'", ")", "\n", "print", "(", "[", "w", "for", "w", "in", "verb_list", "if", "w", "not", "in", "word2id", "]", ")", "\n", "print", "(", "[", "w", "for", "w", "in", "object_name_list", "if", "w", "not", "in", "word2id", "]", ")", "\n", "\n", "agent", "=", "RLAgent", "(", "config", ",", "word_vocab", ",", "verb_map", ",", "noun_map", ",", "\n", "att", "=", "config", "[", "'general'", "]", "[", "'use_attention'", "]", ",", "\n", "bootstrap", "=", "config", "[", "'general'", "]", "[", "'student'", "]", ",", "\n", "replay_memory_capacity", "=", "replay_memory_capacity", ",", "\n", "replay_memory_priority_fraction", "=", "replay_memory_priority_fraction", ")", "\n", "\n", "print", "(", "agent", ".", "model", ")", "\n", "\n", "init_learning_rate", "=", "config", "[", "'training'", "]", "[", "'optimizer'", "]", "[", "'learning_rate'", "]", "\n", "exp_dir", "=", "get_experiment_dir", "(", "config", ")", "\n", "summary", "=", "SummaryWriter", "(", "exp_dir", ")", "\n", "\n", "parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "agent", ".", "model", ".", "parameters", "(", ")", ")", "\n", "if", "config", "[", "'training'", "]", "[", "'optimizer'", "]", "[", "'step_rule'", "]", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "init_learning_rate", ")", "\n", "", "elif", "config", "[", "'training'", "]", "[", "'optimizer'", "]", "[", "'step_rule'", "]", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "init_learning_rate", ")", "\n", "\n", "", "log_every", "=", "100", "\n", "reward_avg", "=", "SlidingAverage", "(", "'reward avg'", ",", "steps", "=", "log_every", ")", "\n", "step_avg", "=", "SlidingAverage", "(", "'step avg'", ",", "steps", "=", "log_every", ")", "\n", "loss_avg", "=", "SlidingAverage", "(", "'loss avg'", ",", "steps", "=", "log_every", ")", "\n", "\n", "# save & reload checkpoint only in 0th agent", "\n", "best_avg_reward", "=", "-", "10000", "\n", "best_avg_step", "=", "10000", "\n", "\n", "# step penalty", "\n", "discount_gamma", "=", "config", "[", "'general'", "]", "[", "'discount_gamma'", "]", "\n", "provide_prev_action", "=", "config", "[", "'general'", "]", "[", "'provide_prev_action'", "]", "\n", "\n", "# epsilon greedy", "\n", "epsilon_anneal_epochs", "=", "config", "[", "'general'", "]", "[", "'epsilon_anneal_epochs'", "]", "\n", "epsilon_anneal_from", "=", "config", "[", "'general'", "]", "[", "'epsilon_anneal_from'", "]", "\n", "epsilon_anneal_to", "=", "config", "[", "'general'", "]", "[", "'epsilon_anneal_to'", "]", "\n", "\n", "# counting reward", "\n", "revisit_counting_lambda_anneal_epochs", "=", "config", "[", "'general'", "]", "[", "'revisit_counting_lambda_anneal_epochs'", "]", "\n", "revisit_counting_lambda_anneal_from", "=", "config", "[", "'general'", "]", "[", "'revisit_counting_lambda_anneal_from'", "]", "\n", "revisit_counting_lambda_anneal_to", "=", "config", "[", "'general'", "]", "[", "'revisit_counting_lambda_anneal_to'", "]", "\n", "model_checkpoint_path", "=", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'model_checkpoint_path'", "]", "\n", "\n", "epsilon", "=", "epsilon_anneal_from", "\n", "revisit_counting_lambda", "=", "revisit_counting_lambda_anneal_from", "\n", "for", "epoch", "in", "range", "(", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'epoch'", "]", ")", ":", "\n", "\n", "        ", "agent", ".", "model", ".", "train", "(", ")", "\n", "obs", ",", "infos", "=", "env", ".", "reset", "(", ")", "\n", "agent", ".", "reset", "(", "infos", ")", "\n", "print_command_string", ",", "print_rewards", "=", "[", "[", "]", "for", "_", "in", "infos", "]", ",", "[", "[", "]", "for", "_", "in", "infos", "]", "\n", "print_interm_rewards", "=", "[", "[", "]", "for", "_", "in", "infos", "]", "\n", "print_rc_rewards", "=", "[", "[", "]", "for", "_", "in", "infos", "]", "\n", "\n", "dones", "=", "[", "False", "]", "*", "batch_size", "\n", "rewards", "=", "None", "\n", "avg_loss_in_this_game", "=", "[", "]", "\n", "\n", "curr_observation_strings", "=", "agent", ".", "get_observation_strings", "(", "infos", ")", "\n", "if", "revisit_counting", ":", "\n", "            ", "agent", ".", "reset_binarized_counter", "(", "batch_size", ")", "\n", "revisit_counting_rewards", "=", "agent", ".", "get_binarized_count", "(", "curr_observation_strings", ")", "\n", "\n", "", "current_game_step", "=", "0", "\n", "prev_actions", "=", "[", "\"\"", "for", "_", "in", "range", "(", "batch_size", ")", "]", "if", "provide_prev_action", "else", "None", "\n", "input_description", ",", "description_id_list", "=", "agent", ".", "get_game_step_info", "(", "obs", ",", "infos", ",", "prev_actions", ")", "\n", "curr_ras_hidden", ",", "curr_ras_cell", "=", "None", ",", "None", "# ras: recurrent action scorer", "\n", "memory_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "solved", "=", "[", "0", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "while", "not", "all", "(", "dones", ")", ":", "\n", "            ", "agent", ".", "model", ".", "train", "(", ")", "\n", "v_idx", ",", "n_idx", ",", "chosen_strings", ",", "curr_ras_hidden", ",", "curr_ras_cell", "=", "agent", ".", "generate_one_command", "(", "input_description", ",", "curr_ras_hidden", ",", "\n", "curr_ras_cell", ",", "epsilon", "=", "epsilon", ")", "\n", "obs", ",", "rewards", ",", "dones", ",", "infos", "=", "env", ".", "step", "(", "chosen_strings", ")", "\n", "curr_observation_strings", "=", "agent", ".", "get_observation_strings", "(", "infos", ")", "\n", "if", "provide_prev_action", ":", "\n", "                ", "prev_actions", "=", "chosen_strings", "\n", "# counting", "\n", "", "if", "revisit_counting", ":", "\n", "                ", "revisit_counting_rewards", "=", "agent", ".", "get_binarized_count", "(", "curr_observation_strings", ",", "update", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "revisit_counting_rewards", "=", "[", "0.0", "for", "b", "in", "range", "(", "batch_size", ")", "]", "\n", "", "agent", ".", "revisit_counting_rewards", ".", "append", "(", "revisit_counting_rewards", ")", "\n", "revisit_counting_rewards", "=", "[", "float", "(", "format", "(", "item", ",", "\".3f\"", ")", ")", "for", "item", "in", "revisit_counting_rewards", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "infos", ")", ")", ":", "\n", "                ", "print_command_string", "[", "i", "]", ".", "append", "(", "chosen_strings", "[", "i", "]", ")", "\n", "print_rewards", "[", "i", "]", ".", "append", "(", "rewards", "[", "i", "]", ")", "\n", "print_interm_rewards", "[", "i", "]", ".", "append", "(", "infos", "[", "i", "]", "[", "\"intermediate_reward\"", "]", ")", "\n", "print_rc_rewards", "[", "i", "]", ".", "append", "(", "revisit_counting_rewards", "[", "i", "]", ")", "\n", "", "if", "type", "(", "dones", ")", "is", "bool", ":", "\n", "                ", "dones", "=", "[", "dones", "]", "*", "batch_size", "\n", "", "agent", ".", "rewards", ".", "append", "(", "rewards", ")", "\n", "agent", ".", "dones", ".", "append", "(", "dones", ")", "\n", "agent", ".", "intermediate_rewards", ".", "append", "(", "[", "info", "[", "\"intermediate_reward\"", "]", "for", "info", "in", "infos", "]", ")", "\n", "# computer rewards, and push into replay memory", "\n", "rewards_np", ",", "rewards_pt", ",", "mask_np", ",", "mask_pt", ",", "memory_mask", "=", "agent", ".", "compute_reward", "(", "revisit_counting_lambda", "=", "revisit_counting_lambda", ",", "\n", "revisit_counting", "=", "revisit_counting", ")", "\n", "\n", "curr_description_id_list", "=", "description_id_list", "\n", "input_description", ",", "description_id_list", "=", "agent", ".", "get_game_step_info", "(", "obs", ",", "infos", ",", "prev_actions", ")", "\n", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "if", "memory_mask", "[", "b", "]", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "dones", "[", "b", "]", "==", "1", "and", "rewards", "[", "b", "]", "==", "0", ":", "\n", "# last possible step", "\n", "                    ", "is_final", "=", "True", "\n", "", "else", ":", "\n", "                    ", "is_final", "=", "mask_np", "[", "b", "]", "==", "0", "\n", "", "if", "rewards", "[", "b", "]", ">", "0.0", ":", "\n", "                    ", "solved", "[", "b", "]", "=", "1", "\n", "# replay memory", "\n", "", "memory_cache", "[", "b", "]", ".", "append", "(", "(", "curr_description_id_list", "[", "b", "]", ",", "v_idx", "[", "b", "]", ",", "n_idx", "[", "b", "]", ",", "rewards_pt", "[", "b", "]", ",", "mask_pt", "[", "b", "]", ",", "dones", "[", "b", "]", ",", "\n", "is_final", ",", "curr_observation_strings", "[", "b", "]", ")", ")", "\n", "\n", "", "if", "current_game_step", ">", "0", "and", "current_game_step", "%", "config", "[", "\"general\"", "]", "[", "\"update_per_k_game_steps\"", "]", "==", "0", ":", "\n", "                ", "policy_loss", "=", "agent", ".", "update", "(", "replay_batch_size", ",", "history_size", ",", "update_from", ",", "discount_gamma", "=", "discount_gamma", ")", "\n", "if", "policy_loss", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "loss", "=", "policy_loss", "\n", "# Backpropagate", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "# `clip_grad_norm` helps prevent the exploding gradient problem in RNNs / LSTMs.", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "agent", ".", "model", ".", "parameters", "(", ")", ",", "config", "[", "'training'", "]", "[", "'optimizer'", "]", "[", "'clip_grad_norm'", "]", ")", "\n", "optimizer", ".", "step", "(", ")", "# apply gradients", "\n", "avg_loss_in_this_game", ".", "append", "(", "to_np", "(", "policy_loss", ")", ")", "\n", "", "current_game_step", "+=", "1", "\n", "\n", "", "for", "i", ",", "mc", "in", "enumerate", "(", "memory_cache", ")", ":", "\n", "            ", "for", "item", "in", "mc", ":", "\n", "                ", "if", "replay_memory_priority_fraction", "==", "0.0", ":", "\n", "# vanilla replay memory", "\n", "                    ", "agent", ".", "replay_memory", ".", "push", "(", "*", "item", ")", "\n", "", "else", ":", "\n", "# prioritized replay memory", "\n", "                    ", "agent", ".", "replay_memory", ".", "push", "(", "solved", "[", "i", "]", ",", "*", "item", ")", "\n", "\n", "", "", "", "agent", ".", "finish", "(", ")", "\n", "avg_loss_in_this_game", "=", "np", ".", "mean", "(", "avg_loss_in_this_game", ")", "\n", "reward_avg", ".", "add", "(", "agent", ".", "final_rewards", ".", "mean", "(", ")", ")", "\n", "step_avg", ".", "add", "(", "agent", ".", "step_used_before_done", ".", "mean", "(", ")", ")", "\n", "loss_avg", ".", "add", "(", "avg_loss_in_this_game", ")", "\n", "# annealing", "\n", "if", "epoch", "<", "epsilon_anneal_epochs", ":", "\n", "            ", "epsilon", "-=", "(", "epsilon_anneal_from", "-", "epsilon_anneal_to", ")", "/", "float", "(", "epsilon_anneal_epochs", ")", "\n", "", "if", "epoch", "<", "revisit_counting_lambda_anneal_epochs", ":", "\n", "            ", "revisit_counting_lambda", "-=", "(", "revisit_counting_lambda_anneal_from", "-", "revisit_counting_lambda_anneal_to", ")", "/", "float", "(", "revisit_counting_lambda_anneal_epochs", ")", "\n", "\n", "# Tensorboard logging #", "\n", "# (1) Log some numbers", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "config", "[", "\"training\"", "]", "[", "\"scheduling\"", "]", "[", "\"logging_frequency\"", "]", "==", "0", ":", "\n", "            ", "summary", ".", "add_scalar", "(", "'avg_reward'", ",", "reward_avg", ".", "value", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'std_reward'", ",", "reward_avg", ".", "std", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'curr_reward'", ",", "agent", ".", "final_rewards", ".", "mean", "(", ")", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'curr_interm_reward'", ",", "agent", ".", "final_intermediate_rewards", ".", "mean", "(", ")", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'curr_counting_reward'", ",", "agent", ".", "final_counting_rewards", ".", "mean", "(", ")", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'avg_step'", ",", "step_avg", ".", "value", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'curr_step'", ",", "agent", ".", "step_used_before_done", ".", "mean", "(", ")", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'loss_avg'", ",", "loss_avg", ".", "value", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'curr_loss'", ",", "avg_loss_in_this_game", ",", "epoch", "+", "1", ")", "\n", "\n", "", "msg", "=", "'E#{:03d}, R={:.3f}/{:.3f}/IR{:.3f}/CR{:.3f}, S={:.3f}/{:.3f}, L={:.3f}/{:.3f}, epsilon={:.4f}, lambda_counting={:.4f}'", "\n", "msg", "=", "msg", ".", "format", "(", "epoch", ",", "\n", "np", ".", "mean", "(", "reward_avg", ".", "value", ")", ",", "agent", ".", "final_rewards", ".", "mean", "(", ")", ",", "agent", ".", "final_intermediate_rewards", ".", "mean", "(", ")", ",", "agent", ".", "final_counting_rewards", ".", "mean", "(", ")", ",", "\n", "np", ".", "mean", "(", "step_avg", ".", "value", ")", ",", "agent", ".", "step_used_before_done", ".", "mean", "(", ")", ",", "\n", "np", ".", "mean", "(", "loss_avg", ".", "value", ")", ",", "avg_loss_in_this_game", ",", "\n", "epsilon", ",", "revisit_counting_lambda", ")", "\n", "if", "(", "epoch", "+", "1", ")", "%", "config", "[", "\"training\"", "]", "[", "\"scheduling\"", "]", "[", "\"logging_frequency\"", "]", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "agent", ".", "model", ".", "state_dict", "(", ")", ",", "model_checkpoint_path", ".", "replace", "(", "'.pt'", ",", "'_train.pt'", ")", ")", "\n", "print", "(", "\"=========================================================\"", ")", "\n", "for", "prt_cmd", ",", "prt_rew", ",", "prt_int_rew", ",", "prt_rc_rew", "in", "zip", "(", "print_command_string", ",", "print_rewards", ",", "print_interm_rewards", ",", "print_rc_rewards", ")", ":", "\n", "                ", "print", "(", "\"------------------------------\"", ")", "\n", "print", "(", "prt_cmd", ")", "\n", "print", "(", "prt_rew", ")", "\n", "print", "(", "prt_int_rew", ")", "\n", "print", "(", "prt_rc_rew", ")", "\n", "", "", "print", "(", "msg", ")", "\n", "# test on a different set of games", "\n", "if", "run_test", "and", "(", "epoch", "+", "1", ")", "%", "config", "[", "\"training\"", "]", "[", "\"scheduling\"", "]", "[", "\"logging_frequency\"", "]", "==", "0", ":", "\n", "            ", "valid_R", ",", "valid_IR", ",", "valid_S", "=", "test", "(", "config", ",", "valid_env", ",", "agent", ",", "test_batch_size", ",", "word2id", ")", "\n", "summary", ".", "add_scalar", "(", "'valid_reward'", ",", "valid_R", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'valid_interm_reward'", ",", "valid_IR", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'valid_step'", ",", "valid_S", ",", "epoch", "+", "1", ")", "\n", "\n", "# save & reload checkpoint by best valid performance", "\n", "if", "valid_R", ">", "best_avg_reward", "or", "(", "valid_R", "==", "best_avg_reward", "and", "valid_S", "<", "best_avg_step", ")", ":", "\n", "                ", "best_avg_reward", "=", "valid_R", "\n", "best_avg_step", "=", "valid_S", "\n", "torch", ".", "save", "(", "agent", ".", "model", ".", "state_dict", "(", ")", ",", "model_checkpoint_path", ".", "replace", "(", "'.pt'", ",", "'_best.pt'", ")", ")", "\n", "print", "(", "\"========= saved checkpoint =========\"", ")", "\n", "for", "test_id", "in", "range", "(", "len", "(", "test_env_list", ")", ")", ":", "\n", "                    ", "R", ",", "IR", ",", "S", "=", "test", "(", "config", ",", "test_env_list", "[", "test_id", "]", ",", "agent", ",", "test_batch_size", ",", "word2id", ")", "\n", "summary", ".", "add_scalar", "(", "'test_reward_'", "+", "str", "(", "test_id", ")", ",", "R", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'test_interm_reward_'", "+", "str", "(", "test_id", ")", ",", "IR", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'test_step_'", "+", "str", "(", "test_id", ")", ",", "S", ",", "epoch", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.train_policy_qlearn.train": [[33, 379], ["print", "gym_textworld.make_batch", "gym.make", "gym.make.seed", "print", "print", "print", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "crest.helper.generic.dict2list", "enumerate", "crest.agents.lstm_drqn.agent.RLAgent", "crest.helper.generic.get_experiment_dir", "tensorboardX.SummaryWriter", "filter", "crest.helper.generic.SlidingAverage", "crest.helper.generic.SlidingAverage", "crest.helper.generic.SlidingAverage", "crest.helper.config_utils.get_prefix", "numpy.load", "set", "print", "print", "print", "time.time", "range", "print", "print", "gym_textworld.make_batch", "gym.make", "gym.make.seed", "isinstance", "range", "print", "print", "crest.helper.utils.read_file", "crest.helper.utils.read_file", "crest.agents.lstm_drqn.agent.RLAgent.model.parameters", "torch.optim.SGD", "torch.optim.SGD", "crest.agents.lstm_drqn.agent.RLAgent.model.train", "gym.make.reset", "crest.agents.lstm_drqn.agent.RLAgent.reset", "crest.agents.lstm_drqn.agent.RLAgent.get_observation_strings", "crest.agents.lstm_drqn.agent.RLAgent.get_observation_strings", "crest.agents.lstm_drqn.agent.RLAgent.get_game_step_info", "enumerate", "crest.agents.lstm_drqn.agent.RLAgent.finish", "numpy.mean", "crest.helper.generic.SlidingAverage.add", "crest.helper.generic.SlidingAverage.add", "crest.helper.generic.SlidingAverage.add", "msg.format.format", "print", "gym_textworld.make_batch", "gym.make", "len", "test_env_list[].seed", "logger.warning", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "word2id.keys", "len", "word2id.keys", "len", "torch.optim.Adam", "torch.optim.Adam", "print", "set.update", "crest.agents.lstm_drqn.agent.RLAgent.reset_binarized_counter", "crest.agents.lstm_drqn.agent.RLAgent.get_binarized_count", "all", "crest.agents.lstm_drqn.agent.RLAgent.model.train", "crest.agents.lstm_drqn.agent.RLAgent.generate_one_command", "gym.make.step", "crest.agents.lstm_drqn.agent.RLAgent.get_observation_strings", "crest.agents.lstm_drqn.agent.RLAgent.revisit_counting_rewards.append", "range", "crest.agents.lstm_drqn.agent.RLAgent.rewards.append", "crest.agents.lstm_drqn.agent.RLAgent.dones.append", "crest.agents.lstm_drqn.agent.RLAgent.intermediate_rewards.append", "crest.agents.lstm_drqn.agent.RLAgent.compute_reward", "crest.agents.lstm_drqn.agent.RLAgent.get_game_step_info", "range", "crest.agents.lstm_drqn.agent.RLAgent.final_rewards.mean", "crest.agents.lstm_drqn.agent.RLAgent.step_used_before_done.mean", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "time.time", "tensorboardX.SummaryWriter.add_scalar", "numpy.mean", "crest.agents.lstm_drqn.agent.RLAgent.final_rewards.mean", "crest.agents.lstm_drqn.agent.RLAgent.final_intermediate_rewards.mean", "crest.agents.lstm_drqn.agent.RLAgent.final_counting_rewards.mean", "numpy.mean", "crest.agents.lstm_drqn.agent.RLAgent.step_used_before_done.mean", "numpy.mean", "torch.save", "torch.save", "print", "zip", "crest.agents.lstm_drqn.test_agent.test", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "np.load.keys", "range", "range", "range", "crest.agents.lstm_drqn.agent.RLAgent.get_binarized_count", "float", "len", "print_command_string[].append", "print_rewards[].append", "print_interm_rewards[].append", "print_rc_rewards[].append", "type", "memory_cache[].append", "crest.agents.lstm_drqn.agent.RLAgent.update", "torch.optim.Adam.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "np.mean.append", "float", "float", "crest.agents.lstm_drqn.agent.RLAgent.final_rewards.mean", "crest.agents.lstm_drqn.agent.RLAgent.final_intermediate_rewards.mean", "crest.agents.lstm_drqn.agent.RLAgent.final_counting_rewards.mean", "crest.agents.lstm_drqn.agent.RLAgent.step_used_before_done.mean", "crest.agents.lstm_drqn.agent.RLAgent.model.state_dict", "model_checkpoint_path.replace", "print", "print", "print", "print", "print", "torch.save", "torch.save", "print", "len", "item.keys", "range", "format", "crest.agents.lstm_drqn.agent.RLAgent.model.parameters", "crest.helper.generic.to_np", "crest.agents.lstm_drqn.agent.RLAgent.replay_memory.push", "crest.agents.lstm_drqn.agent.RLAgent.replay_memory.push", "crest.agents.lstm_drqn.agent.RLAgent.model.state_dict", "model_checkpoint_path.replace", "range", "list"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.utils.make_batch", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.dict2list", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.get_experiment_dir", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.config_utils.get_prefix", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.utils.make_batch", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.read_file", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.utils.read_file", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.train_policy_qlearn.train", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_observation_strings", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_observation_strings", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.finish", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.add", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.add", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.SlidingAverage.add", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.utils.make_batch", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.update", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.reset_binarized_counter", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_binarized_count", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.train_policy_qlearn.train", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.generate_one_command", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.step", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_observation_strings", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.compute_reward", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.test_agent.test", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_binarized_count", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.update", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.step", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.state_dict", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.helper.generic.to_np", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ObservationHistoryCache.push", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.ObservationHistoryCache.push", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.state_dict"], ["def", "train", "(", "config", ",", "prune", "=", "False", ",", "embed", "=", "'cnet'", ")", ":", "\n", "# train env", "\n", "    ", "print", "(", "'Setting up TextWorld environment...'", ")", "\n", "batch_size", "=", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'batch_size'", "]", "\n", "env_id", "=", "gym_textworld", ".", "make_batch", "(", "env_id", "=", "config", "[", "'general'", "]", "[", "'env_id'", "]", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "parallel", "=", "True", ")", "\n", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "env", ".", "seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "\n", "print", "(", "\"##\"", "*", "30", ")", "\n", "if", "prune", ":", "\n", "        ", "print", "(", "'Using state pruning ...'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not using state pruning ...'", ")", "\n", "", "print", "(", "\"##\"", "*", "30", ")", "\n", "\n", "# valid and test env", "\n", "run_test", "=", "config", "[", "'general'", "]", "[", "'run_test'", "]", "\n", "if", "run_test", ":", "\n", "        ", "test_batch_size", "=", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'test_batch_size'", "]", "\n", "# valid", "\n", "valid_env_name", "=", "config", "[", "'general'", "]", "[", "'valid_env_id'", "]", "\n", "\n", "valid_env_id", "=", "gym_textworld", ".", "make_batch", "(", "env_id", "=", "valid_env_name", ",", "batch_size", "=", "test_batch_size", ",", "parallel", "=", "True", ")", "\n", "valid_env", "=", "gym", ".", "make", "(", "valid_env_id", ")", "\n", "valid_env", ".", "seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "# valid_env.reset()", "\n", "\n", "# test", "\n", "test_env_name_list", "=", "config", "[", "'general'", "]", "[", "'test_env_id'", "]", "\n", "assert", "isinstance", "(", "test_env_name_list", ",", "list", ")", "\n", "\n", "test_env_id_list", "=", "[", "gym_textworld", ".", "make_batch", "(", "env_id", "=", "item", ",", "batch_size", "=", "test_batch_size", ",", "parallel", "=", "True", ")", "for", "item", "in", "test_env_name_list", "]", "\n", "test_env_list", "=", "[", "gym", ".", "make", "(", "test_env_id", ")", "for", "test_env_id", "in", "test_env_id_list", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "test_env_list", ")", ")", ":", "\n", "            ", "test_env_list", "[", "i", "]", ".", "seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "# test_env_list[i].reset()", "\n", "", "", "print", "(", "'Done.'", ")", "\n", "\n", "# Set the random seed manually for reproducibility.", "\n", "np", ".", "random", ".", "seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "torch", ".", "manual_seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "if", "not", "config", "[", "'general'", "]", "[", "'use_cuda'", "]", ":", "\n", "            ", "logger", ".", "warning", "(", "\"WARNING: CUDA device detected but 'use_cuda: false' found in config.yaml\"", ")", "\n", "", "else", ":", "\n", "            ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "config", "[", "'general'", "]", "[", "'random_seed'", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "config", "[", "'general'", "]", "[", "'use_cuda'", "]", "=", "False", "# Disable CUDA.", "\n", "", "use_cuda", "=", "config", "[", "'general'", "]", "[", "'use_cuda'", "]", "\n", "revisit_counting", "=", "config", "[", "'general'", "]", "[", "'revisit_counting'", "]", "\n", "replay_batch_size", "=", "config", "[", "'general'", "]", "[", "'replay_batch_size'", "]", "\n", "history_size", "=", "config", "[", "'general'", "]", "[", "'history_size'", "]", "\n", "update_from", "=", "config", "[", "'general'", "]", "[", "'update_from'", "]", "\n", "replay_memory_capacity", "=", "config", "[", "'general'", "]", "[", "'replay_memory_capacity'", "]", "\n", "replay_memory_priority_fraction", "=", "config", "[", "'general'", "]", "[", "'replay_memory_priority_fraction'", "]", "\n", "\n", "word_vocab", "=", "dict2list", "(", "env", ".", "observation_space", ".", "id2w", ")", "\n", "word2id", "=", "{", "}", "\n", "for", "i", ",", "w", "in", "enumerate", "(", "word_vocab", ")", ":", "\n", "        ", "word2id", "[", "w", "]", "=", "i", "\n", "\n", "\n", "", "if", "config", "[", "'general'", "]", "[", "'exp_act'", "]", ":", "\n", "        ", "print", "(", "'##'", "*", "30", ")", "\n", "print", "(", "'Using expanded verb list'", ")", "\n", "verb_list", "=", "read_file", "(", "\"data/vocabs/trial_run_custom_tw/verb_vocab.txt\"", ")", "\n", "object_name_list", "=", "read_file", "(", "\"data/vocabs/common_nouns.txt\"", ")", "\n", "", "else", ":", "\n", "#\"This option only works for coin collector\"", "\n", "        ", "verb_list", "=", "[", "\"go\"", ",", "\"take\"", ",", "\"unlock\"", ",", "\"lock\"", ",", "\"drop\"", ",", "\"look\"", ",", "\"insert\"", ",", "\"open\"", ",", "\"inventory\"", ",", "\"close\"", "]", "\n", "object_name_list", "=", "[", "\"east\"", ",", "\"west\"", ",", "\"north\"", ",", "\"south\"", ",", "\"coin\"", ",", "\"apple\"", ",", "\"carrot\"", ",", "\"textbook\"", ",", "\"passkey\"", ",", "\n", "\"keycard\"", "]", "\n", "# Add missing words in word2id", "\n", "", "for", "w", "in", "verb_list", ":", "\n", "        ", "if", "w", "not", "in", "word2id", ".", "keys", "(", ")", ":", "\n", "            ", "word2id", "[", "w", "]", "=", "len", "(", "word2id", ")", "\n", "word_vocab", "+=", "[", "w", ",", "]", "\n", "", "", "for", "w", "in", "object_name_list", ":", "\n", "        ", "if", "w", "not", "in", "word2id", ".", "keys", "(", ")", ":", "\n", "            ", "word2id", "[", "w", "]", "=", "len", "(", "word2id", ")", "\n", "word_vocab", "+=", "[", "w", ",", "]", "\n", "\n", "", "", "verb_map", "=", "[", "word2id", "[", "w", "]", "for", "w", "in", "verb_list", "if", "w", "in", "word2id", "]", "\n", "noun_map", "=", "[", "word2id", "[", "w", "]", "for", "w", "in", "object_name_list", "if", "w", "in", "word2id", "]", "\n", "\n", "# teacher_path = config['general']['teacher_model_path']", "\n", "# teacher_agent = Agent(config, word_vocab, verb_map, noun_map,", "\n", "#                         att=config['general']['use_attention'],", "\n", "#                         bootstrap=False,", "\n", "#                         replay_memory_capacity=replay_memory_capacity,", "\n", "#                         replay_memory_priority_fraction=replay_memory_priority_fraction)", "\n", "# teacher_agent.model.load_state_dict(torch.load(teacher_path))", "\n", "# teacher_agent.model.eval()", "\n", "\n", "student_agent", "=", "Agent", "(", "config", ",", "word_vocab", ",", "verb_map", ",", "noun_map", ",", "\n", "att", "=", "config", "[", "'general'", "]", "[", "'use_attention'", "]", ",", "\n", "bootstrap", "=", "config", "[", "'general'", "]", "[", "'student'", "]", ",", "\n", "replay_memory_capacity", "=", "replay_memory_capacity", ",", "\n", "replay_memory_priority_fraction", "=", "replay_memory_priority_fraction", ",", "\n", "embed", "=", "embed", ")", "\n", "\n", "\n", "init_learning_rate", "=", "config", "[", "'training'", "]", "[", "'optimizer'", "]", "[", "'learning_rate'", "]", "\n", "exp_dir", "=", "get_experiment_dir", "(", "config", ")", "\n", "summary", "=", "SummaryWriter", "(", "exp_dir", ")", "\n", "\n", "parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "student_agent", ".", "model", ".", "parameters", "(", ")", ")", "\n", "if", "config", "[", "'training'", "]", "[", "'optimizer'", "]", "[", "'step_rule'", "]", "==", "'sgd'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "parameters", ",", "lr", "=", "init_learning_rate", ")", "\n", "", "elif", "config", "[", "'training'", "]", "[", "'optimizer'", "]", "[", "'step_rule'", "]", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "parameters", ",", "lr", "=", "init_learning_rate", ")", "\n", "\n", "", "log_every", "=", "100", "\n", "reward_avg", "=", "SlidingAverage", "(", "'reward avg'", ",", "steps", "=", "log_every", ")", "\n", "step_avg", "=", "SlidingAverage", "(", "'step avg'", ",", "steps", "=", "log_every", ")", "\n", "loss_avg", "=", "SlidingAverage", "(", "'loss avg'", ",", "steps", "=", "log_every", ")", "\n", "\n", "# save & reload checkpoint only in 0th agent", "\n", "best_avg_reward", "=", "-", "10000", "\n", "best_avg_step", "=", "10000", "\n", "\n", "# step penalty", "\n", "discount_gamma", "=", "config", "[", "'general'", "]", "[", "'discount_gamma'", "]", "\n", "provide_prev_action", "=", "config", "[", "'general'", "]", "[", "'provide_prev_action'", "]", "\n", "\n", "# epsilon greedy", "\n", "epsilon_anneal_epochs", "=", "config", "[", "'general'", "]", "[", "'epsilon_anneal_epochs'", "]", "\n", "epsilon_anneal_from", "=", "config", "[", "'general'", "]", "[", "'epsilon_anneal_from'", "]", "\n", "epsilon_anneal_to", "=", "config", "[", "'general'", "]", "[", "'epsilon_anneal_to'", "]", "\n", "\n", "# counting reward", "\n", "revisit_counting_lambda_anneal_epochs", "=", "config", "[", "'general'", "]", "[", "'revisit_counting_lambda_anneal_epochs'", "]", "\n", "revisit_counting_lambda_anneal_from", "=", "config", "[", "'general'", "]", "[", "'revisit_counting_lambda_anneal_from'", "]", "\n", "revisit_counting_lambda_anneal_to", "=", "config", "[", "'general'", "]", "[", "'revisit_counting_lambda_anneal_to'", "]", "\n", "model_checkpoint_path", "=", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'model_checkpoint_path'", "]", "\n", "\n", "epsilon", "=", "epsilon_anneal_from", "\n", "revisit_counting_lambda", "=", "revisit_counting_lambda_anneal_from", "\n", "\n", "#######################################################################", "\n", "#####               Load the teacher data                         #####", "\n", "#######################################################################", "\n", "prefix_name", "=", "get_prefix", "(", "args", ")", "\n", "filename", "=", "'./data/teacher_data/{}.npz'", ".", "format", "(", "prefix_name", ")", "\n", "teacher_dict", "=", "np", ".", "load", "(", "filename", ",", "allow_pickle", "=", "True", ")", "\n", "# import ipdb; ipdb.set_trace()", "\n", "global_action_set", "=", "set", "(", ")", "\n", "\n", "print", "(", "\"##\"", "*", "30", ")", "\n", "print", "(", "\"Training for {} epochs\"", ".", "format", "(", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'epoch'", "]", ")", ")", "\n", "print", "(", "\"##\"", "*", "30", ")", "\n", "\n", "import", "time", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "config", "[", "'training'", "]", "[", "'scheduling'", "]", "[", "'epoch'", "]", ")", ":", "\n", "        ", "student_agent", ".", "model", ".", "train", "(", ")", "\n", "obs", ",", "infos", "=", "env", ".", "reset", "(", ")", "\n", "student_agent", ".", "reset", "(", "infos", ")", "\n", "\n", "# this the string identifier for leading the episodic action distribution", "\n", "id_string", "=", "student_agent", ".", "get_observation_strings", "(", "infos", ")", "\n", "\n", "cont_flag", "=", "False", "\n", "for", "id_", "in", "id_string", ":", "\n", "            ", "if", "id_", "not", "in", "teacher_dict", ".", "keys", "(", ")", ":", "\n", "                ", "cont_flag", "=", "True", "\n", "\n", "", "", "if", "cont_flag", ":", "\n", "            ", "print", "(", "'Skipping this epoch/.....'", ")", "\n", "continue", "\n", "\n", "# Episodic action list", "\n", "", "action_dist", "=", "[", "teacher_dict", "[", "id_string", "[", "k", "]", "]", "[", "-", "1", "]", "for", "k", "in", "range", "(", "len", "(", "id_string", ")", ")", "]", "\n", "action_dist", "=", "[", "[", "x", "for", "x", "in", "item", ".", "keys", "(", ")", "]", "for", "item", "in", "action_dist", "]", "\n", "\n", "for", "item", "in", "action_dist", ":", "\n", "            ", "global_action_set", ".", "update", "(", "item", ")", "\n", "\n", "", "print_command_string", ",", "print_rewards", "=", "[", "[", "]", "for", "_", "in", "infos", "]", ",", "[", "[", "]", "for", "_", "in", "infos", "]", "\n", "print_interm_rewards", "=", "[", "[", "]", "for", "_", "in", "infos", "]", "\n", "print_rc_rewards", "=", "[", "[", "]", "for", "_", "in", "infos", "]", "\n", "dones", "=", "[", "False", "]", "*", "batch_size", "\n", "rewards", "=", "None", "\n", "avg_loss_in_this_game", "=", "[", "]", "\n", "\n", "curr_observation_strings", "=", "student_agent", ".", "get_observation_strings", "(", "infos", ")", "\n", "if", "revisit_counting", ":", "\n", "            ", "student_agent", ".", "reset_binarized_counter", "(", "batch_size", ")", "\n", "revisit_counting_rewards", "=", "student_agent", ".", "get_binarized_count", "(", "curr_observation_strings", ")", "\n", "\n", "", "current_game_step", "=", "0", "\n", "prev_actions", "=", "[", "\"\"", "for", "_", "in", "range", "(", "batch_size", ")", "]", "if", "provide_prev_action", "else", "None", "\n", "\n", "input_description", ",", "description_id_list", ",", "student_desc", ",", "_", "=", "student_agent", ".", "get_game_step_info", "(", "obs", ",", "infos", ",", "prev_actions", ",", "prune", "=", "prune", ",", "\n", "teacher_actions", "=", "action_dist", ",", "ret_desc", "=", "True", ",", ")", "\n", "\n", "curr_ras_hidden", ",", "curr_ras_cell", "=", "None", ",", "None", "# ras: recurrent action scorer", "\n", "memory_cache", "=", "[", "[", "]", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "solved", "=", "[", "0", "for", "_", "in", "range", "(", "batch_size", ")", "]", "\n", "\n", "while", "not", "all", "(", "dones", ")", ":", "\n", "            ", "student_agent", ".", "model", ".", "train", "(", ")", "\n", "\n", "v_idx", ",", "n_idx", ",", "chosen_strings", ",", "curr_ras_hidden", ",", "curr_ras_cell", "=", "student_agent", ".", "generate_one_command", "(", "input_description", ",", "curr_ras_hidden", ",", "\n", "curr_ras_cell", ",", "epsilon", "=", "0.0", ",", "\n", "return_att", "=", "args", ".", "use_attention", ")", "\n", "\n", "obs", ",", "rewards", ",", "dones", ",", "infos", "=", "env", ".", "step", "(", "chosen_strings", ")", "\n", "curr_observation_strings", "=", "student_agent", ".", "get_observation_strings", "(", "infos", ")", "\n", "# print(chosen_strings)", "\n", "if", "provide_prev_action", ":", "\n", "                ", "prev_actions", "=", "chosen_strings", "\n", "# counting", "\n", "", "if", "revisit_counting", ":", "\n", "                ", "revisit_counting_rewards", "=", "student_agent", ".", "get_binarized_count", "(", "curr_observation_strings", ",", "update", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "revisit_counting_rewards", "=", "[", "0.0", "for", "b", "in", "range", "(", "batch_size", ")", "]", "\n", "", "student_agent", ".", "revisit_counting_rewards", ".", "append", "(", "revisit_counting_rewards", ")", "\n", "revisit_counting_rewards", "=", "[", "float", "(", "format", "(", "item", ",", "\".3f\"", ")", ")", "for", "item", "in", "revisit_counting_rewards", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "infos", ")", ")", ":", "\n", "                ", "print_command_string", "[", "i", "]", ".", "append", "(", "chosen_strings", "[", "i", "]", ")", "\n", "print_rewards", "[", "i", "]", ".", "append", "(", "rewards", "[", "i", "]", ")", "\n", "print_interm_rewards", "[", "i", "]", ".", "append", "(", "infos", "[", "i", "]", "[", "\"intermediate_reward\"", "]", ")", "\n", "print_rc_rewards", "[", "i", "]", ".", "append", "(", "revisit_counting_rewards", "[", "i", "]", ")", "\n", "", "if", "type", "(", "dones", ")", "is", "bool", ":", "\n", "                ", "dones", "=", "[", "dones", "]", "*", "batch_size", "\n", "\n", "", "student_agent", ".", "rewards", ".", "append", "(", "rewards", ")", "\n", "student_agent", ".", "dones", ".", "append", "(", "dones", ")", "\n", "student_agent", ".", "intermediate_rewards", ".", "append", "(", "[", "info", "[", "\"intermediate_reward\"", "]", "for", "info", "in", "infos", "]", ")", "\n", "\n", "# computer rewards, and push into replay memory", "\n", "rewards_np", ",", "rewards_pt", ",", "mask_np", ",", "mask_pt", ",", "memory_mask", "=", "student_agent", ".", "compute_reward", "(", "revisit_counting_lambda", "=", "revisit_counting_lambda", ",", "\n", "revisit_counting", "=", "revisit_counting", ")", "\n", "\n", "###############################", "\n", "#####   Pruned state desc #####", "\n", "###############################", "\n", "curr_description_id_list", "=", "description_id_list", "\n", "\n", "input_description", ",", "description_id_list", ",", "student_desc", ",", "_", "=", "student_agent", ".", "get_game_step_info", "(", "obs", ",", "infos", ",", "prev_actions", ",", "prune", "=", "prune", ",", "\n", "teacher_actions", "=", "action_dist", ",", "ret_desc", "=", "True", ",", ")", "\n", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "if", "memory_mask", "[", "b", "]", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "dones", "[", "b", "]", "==", "1", "and", "rewards", "[", "b", "]", "==", "0", ":", "\n", "# last possible step", "\n", "                    ", "is_final", "=", "True", "\n", "", "else", ":", "\n", "                    ", "is_final", "=", "mask_np", "[", "b", "]", "==", "0", "\n", "", "if", "rewards", "[", "b", "]", ">", "0.0", ":", "\n", "                    ", "solved", "[", "b", "]", "=", "1", "\n", "# replay memory", "\n", "", "memory_cache", "[", "b", "]", ".", "append", "(", "\n", "(", "curr_description_id_list", "[", "b", "]", ",", "v_idx", "[", "b", "]", ",", "n_idx", "[", "b", "]", ",", "rewards_pt", "[", "b", "]", ",", "mask_pt", "[", "b", "]", ",", "dones", "[", "b", "]", ",", "\n", "is_final", ",", "curr_observation_strings", "[", "b", "]", ")", ")", "\n", "\n", "", "if", "current_game_step", ">", "0", "and", "current_game_step", "%", "config", "[", "\"general\"", "]", "[", "\"update_per_k_game_steps\"", "]", "==", "0", ":", "\n", "                ", "policy_loss", "=", "student_agent", ".", "update", "(", "replay_batch_size", ",", "history_size", ",", "update_from", ",", "discount_gamma", "=", "discount_gamma", ")", "\n", "if", "policy_loss", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "loss", "=", "policy_loss", "\n", "# Backpropagate", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "# `clip_grad_norm` helps prevent the exploding gradient problem in RNNs / LSTMs.", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "student_agent", ".", "model", ".", "parameters", "(", ")", ",", "config", "[", "'training'", "]", "[", "'optimizer'", "]", "[", "'clip_grad_norm'", "]", ")", "\n", "optimizer", ".", "step", "(", ")", "# apply gradients", "\n", "avg_loss_in_this_game", ".", "append", "(", "to_np", "(", "policy_loss", ")", ")", "\n", "", "current_game_step", "+=", "1", "\n", "\n", "", "for", "i", ",", "mc", "in", "enumerate", "(", "memory_cache", ")", ":", "\n", "            ", "for", "item", "in", "mc", ":", "\n", "                ", "if", "replay_memory_priority_fraction", "==", "0.0", ":", "\n", "# vanilla replay memory", "\n", "                    ", "student_agent", ".", "replay_memory", ".", "push", "(", "*", "item", ")", "\n", "", "else", ":", "\n", "# prioritized replay memory", "\n", "                    ", "student_agent", ".", "replay_memory", ".", "push", "(", "solved", "[", "i", "]", ",", "*", "item", ")", "\n", "\n", "", "", "", "student_agent", ".", "finish", "(", ")", "\n", "\n", "avg_loss_in_this_game", "=", "np", ".", "mean", "(", "avg_loss_in_this_game", ")", "\n", "reward_avg", ".", "add", "(", "student_agent", ".", "final_rewards", ".", "mean", "(", ")", ")", "\n", "step_avg", ".", "add", "(", "student_agent", ".", "step_used_before_done", ".", "mean", "(", ")", ")", "\n", "loss_avg", ".", "add", "(", "avg_loss_in_this_game", ")", "\n", "# annealing", "\n", "if", "epoch", "<", "epsilon_anneal_epochs", ":", "\n", "            ", "epsilon", "-=", "(", "epsilon_anneal_from", "-", "epsilon_anneal_to", ")", "/", "float", "(", "epsilon_anneal_epochs", ")", "\n", "", "if", "epoch", "<", "revisit_counting_lambda_anneal_epochs", ":", "\n", "            ", "revisit_counting_lambda", "-=", "(", "revisit_counting_lambda_anneal_from", "-", "revisit_counting_lambda_anneal_to", ")", "/", "float", "(", "revisit_counting_lambda_anneal_epochs", ")", "\n", "\n", "# Tensorboard logging #", "\n", "# (1) Log some numbers", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "config", "[", "\"training\"", "]", "[", "\"scheduling\"", "]", "[", "\"logging_frequency\"", "]", "==", "0", ":", "\n", "            ", "summary", ".", "add_scalar", "(", "'avg_reward'", ",", "reward_avg", ".", "value", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'curr_reward'", ",", "student_agent", ".", "final_rewards", ".", "mean", "(", ")", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'curr_interm_reward'", ",", "student_agent", ".", "final_intermediate_rewards", ".", "mean", "(", ")", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'curr_counting_reward'", ",", "student_agent", ".", "final_counting_rewards", ".", "mean", "(", ")", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'avg_step'", ",", "step_avg", ".", "value", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'curr_step'", ",", "student_agent", ".", "step_used_before_done", ".", "mean", "(", ")", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'loss_avg'", ",", "loss_avg", ".", "value", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'curr_loss'", ",", "avg_loss_in_this_game", ",", "epoch", "+", "1", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "summary", ".", "add_scalar", "(", "'time'", ",", "t1", "-", "t0", ",", "epoch", "+", "1", ")", "\n", "\n", "", "msg", "=", "'E#{:03d}, R={:.3f}/{:.3f}/IR{:.3f}/CR{:.3f}, S={:.3f}/{:.3f}, L={:.3f}/{:.3f}, epsilon={:.4f}, lambda_counting={:.4f}'", "\n", "msg", "=", "msg", ".", "format", "(", "epoch", ",", "\n", "np", ".", "mean", "(", "reward_avg", ".", "value", ")", ",", "student_agent", ".", "final_rewards", ".", "mean", "(", ")", ",", "student_agent", ".", "final_intermediate_rewards", ".", "mean", "(", ")", ",", "student_agent", ".", "final_counting_rewards", ".", "mean", "(", ")", ",", "\n", "np", ".", "mean", "(", "step_avg", ".", "value", ")", ",", "student_agent", ".", "step_used_before_done", ".", "mean", "(", ")", ",", "\n", "np", ".", "mean", "(", "loss_avg", ".", "value", ")", ",", "avg_loss_in_this_game", ",", "\n", "epsilon", ",", "revisit_counting_lambda", ")", "\n", "if", "(", "epoch", "+", "1", ")", "%", "config", "[", "\"training\"", "]", "[", "\"scheduling\"", "]", "[", "\"logging_frequency\"", "]", "==", "0", ":", "\n", "            ", "torch", ".", "save", "(", "student_agent", ".", "model", ".", "state_dict", "(", ")", ",", "model_checkpoint_path", ".", "replace", "(", "'.pt'", ",", "'_train.pt'", ")", ")", "\n", "print", "(", "\"=========================================================\"", ")", "\n", "for", "prt_cmd", ",", "prt_rew", ",", "prt_int_rew", ",", "prt_rc_rew", "in", "zip", "(", "print_command_string", ",", "print_rewards", ",", "print_interm_rewards", ",", "print_rc_rewards", ")", ":", "\n", "                ", "print", "(", "\"------------------------------\"", ")", "\n", "print", "(", "prt_cmd", ")", "\n", "print", "(", "prt_rew", ")", "\n", "print", "(", "prt_int_rew", ")", "\n", "print", "(", "prt_rc_rew", ")", "\n", "", "", "print", "(", "msg", ")", "\n", "# test on a different set of games", "\n", "if", "run_test", "and", "(", "epoch", ")", "%", "config", "[", "\"training\"", "]", "[", "\"scheduling\"", "]", "[", "\"logging_frequency\"", "]", "==", "0", ":", "\n", "            ", "valid_R", ",", "valid_IR", ",", "valid_S", "=", "test", "(", "config", ",", "valid_env", ",", "student_agent", ",", "test_batch_size", ",", "word2id", ",", "prune", "=", "prune", ",", "\n", "teacher_actions", "=", "[", "list", "(", "global_action_set", ")", "]", "*", "test_batch_size", ")", "\n", "summary", ".", "add_scalar", "(", "'valid_reward'", ",", "valid_R", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'valid_interm_reward'", ",", "valid_IR", ",", "epoch", "+", "1", ")", "\n", "summary", ".", "add_scalar", "(", "'valid_step'", ",", "valid_S", ",", "epoch", "+", "1", ")", "\n", "\n", "# save & reload checkpoint by best valid performance", "\n", "if", "valid_R", ">", "best_avg_reward", "or", "(", "valid_R", "==", "best_avg_reward", "and", "valid_S", "<", "best_avg_step", ")", ":", "\n", "                ", "best_avg_reward", "=", "valid_R", "\n", "best_avg_step", "=", "valid_S", "\n", "torch", ".", "save", "(", "student_agent", ".", "model", ".", "state_dict", "(", ")", ",", "model_checkpoint_path", ".", "replace", "(", "'.pt'", ",", "'_best.pt'", ")", ")", "\n", "print", "(", "\"========= saved checkpoint =========\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.test_agent.test": [[18, 75], ["agent.model.eval", "env.reset", "agent.reset", "agent.finish", "agent.final_rewards.mean", "agent.step_used_before_done.mean", "agent.final_intermediate_rewards.mean", "msg.format.format", "print", "print", "agent.get_game_step_info", "agent.get_game_step_info", "all", "agent.generate_one_command", "env.step", "range", "agent.rewards.append", "agent.dones.append", "agent.intermediate_rewards.append", "len", "print_command_string[].append", "print_rewards[].append", "print_interm_rewards[].append", "type", "agent.get_game_step_info", "agent.get_game_step_info", "range"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.finish", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.generate_one_command", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.step", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.get_game_step_info"], ["def", "test", "(", "config", ",", "env", ",", "agent", ",", "batch_size", ",", "word2id", ",", "prune", "=", "False", ",", "teacher_actions", "=", "None", ")", ":", "\n", "    ", "agent", ".", "model", ".", "eval", "(", ")", "\n", "obs", ",", "infos", "=", "env", ".", "reset", "(", ")", "\n", "agent", ".", "reset", "(", "infos", ")", "\n", "print_command_string", ",", "print_rewards", "=", "[", "[", "]", "for", "_", "in", "infos", "]", ",", "[", "[", "]", "for", "_", "in", "infos", "]", "\n", "print_interm_rewards", "=", "[", "[", "]", "for", "_", "in", "infos", "]", "\n", "\n", "provide_prev_action", "=", "config", "[", "'general'", "]", "[", "'provide_prev_action'", "]", "\n", "\n", "dones", "=", "[", "False", "]", "*", "batch_size", "\n", "rewards", "=", "None", "\n", "prev_actions", "=", "[", "\"\"", "for", "_", "in", "range", "(", "batch_size", ")", "]", "if", "provide_prev_action", "else", "None", "\n", "\n", "if", "prune", ":", "\n", "        ", "input_description", ",", "description_id_list", ",", "desc", ",", "_", "=", "agent", ".", "get_game_step_info", "(", "obs", ",", "infos", ",", "prev_actions", ",", "prune", "=", "prune", ",", "\n", "teacher_actions", "=", "teacher_actions", ",", "ret_desc", "=", "True", ",", ")", "\n", "", "else", ":", "\n", "        ", "input_description", ",", "_", "=", "agent", ".", "get_game_step_info", "(", "obs", ",", "infos", ",", "prev_actions", ")", "\n", "", "curr_ras_hidden", ",", "curr_ras_cell", "=", "None", ",", "None", "# ras: recurrent action scorer", "\n", "\n", "while", "not", "all", "(", "dones", ")", ":", "\n", "        ", "v_idx", ",", "n_idx", ",", "chosen_strings", ",", "curr_ras_hidden", ",", "curr_ras_cell", "=", "agent", ".", "generate_one_command", "(", "input_description", ",", "\n", "curr_ras_hidden", ",", "\n", "curr_ras_cell", ",", "\n", "epsilon", "=", "0.0", ")", "\n", "obs", ",", "rewards", ",", "dones", ",", "infos", "=", "env", ".", "step", "(", "chosen_strings", ")", "\n", "if", "provide_prev_action", ":", "\n", "            ", "prev_actions", "=", "chosen_strings", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "infos", ")", ")", ":", "\n", "            ", "print_command_string", "[", "i", "]", ".", "append", "(", "chosen_strings", "[", "i", "]", ")", "\n", "print_rewards", "[", "i", "]", ".", "append", "(", "rewards", "[", "i", "]", ")", "\n", "print_interm_rewards", "[", "i", "]", ".", "append", "(", "infos", "[", "i", "]", "[", "\"intermediate_reward\"", "]", ")", "\n", "", "if", "type", "(", "dones", ")", "is", "bool", ":", "\n", "            ", "dones", "=", "[", "dones", "]", "*", "batch_size", "\n", "", "agent", ".", "rewards", ".", "append", "(", "rewards", ")", "\n", "agent", ".", "dones", ".", "append", "(", "dones", ")", "\n", "agent", ".", "intermediate_rewards", ".", "append", "(", "[", "info", "[", "\"intermediate_reward\"", "]", "for", "info", "in", "infos", "]", ")", "\n", "\n", "if", "prune", ":", "\n", "            ", "input_description", ",", "description_id_list", ",", "desc", ",", "_", "=", "agent", ".", "get_game_step_info", "(", "obs", ",", "infos", ",", "prev_actions", ",", "prune", "=", "prune", ",", "\n", "teacher_actions", "=", "teacher_actions", ",", "ret_desc", "=", "True", ",", ")", "\n", "", "else", ":", "\n", "            ", "input_description", ",", "_", "=", "agent", ".", "get_game_step_info", "(", "obs", ",", "infos", ",", "prev_actions", ")", "\n", "\n", "", "", "agent", ".", "finish", "(", ")", "\n", "R", "=", "agent", ".", "final_rewards", ".", "mean", "(", ")", "\n", "S", "=", "agent", ".", "step_used_before_done", ".", "mean", "(", ")", "\n", "IR", "=", "agent", ".", "final_intermediate_rewards", ".", "mean", "(", ")", "\n", "\n", "msg", "=", "'====EVAL==== R={:.3f}, IR={:.3f}, S={:.3f}'", "\n", "msg", "=", "msg", ".", "format", "(", "R", ",", "IR", ",", "S", ")", "\n", "print", "(", "msg", ")", "\n", "print", "(", "\"\\n\"", ")", "\n", "return", "R", ",", "IR", ",", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make": [[14, 52], ["re.match", "re.match.group", "int", "int", "int", "int", "re.match.group", "gym.envs.registration.register", "ValueError", "re.match.group", "re.match.group", "re.match.group", "re.match.group", "msg.format"], "function", ["None"], ["def", "make", "(", "env_id", ")", ":", "\n", "    ", "match", "=", "re", ".", "match", "(", "PATTERN", ",", "env_id", ")", "\n", "if", "not", "match", ":", "\n", "        ", "msg", "=", "\"env_id should match the following pattern:\\n{}\"", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "PATTERN", ".", "pattern", ")", ")", "\n", "\n", "", "mode", "=", "match", ".", "group", "(", "1", ")", "\n", "level", "=", "int", "(", "match", ".", "group", "(", "2", ")", ")", "\n", "n_games", "=", "int", "(", "match", ".", "group", "(", "3", ")", ")", "\n", "max_steps", "=", "int", "(", "match", ".", "group", "(", "4", ")", ")", "\n", "random_seed", "=", "int", "(", "match", ".", "group", "(", "5", ")", ")", "\n", "split", "=", "match", ".", "group", "(", "6", ")", "\n", "\n", "game_generator_seed", "=", "SEED_OFFSETS", "[", "split", "]", "+", "MODE2LEVEL", "[", "mode", "]", "*", "10000", "+", "level", "*", "1000", "+", "n_games", "*", "100", "+", "random_seed", "*", "10", "+", "max_steps", "\n", "env_id", "=", "env_id", "+", "\"-v0\"", "\n", "register", "(", "\n", "id", "=", "env_id", ",", "\n", "entry_point", "=", "'gym_textworld.envs:CoinCollectorLevel'", ",", "\n", "max_episode_steps", "=", "max_steps", ",", "\n", "kwargs", "=", "{", "\n", "'n_games'", ":", "n_games", ",", "\n", "'level'", ":", "MODE2LEVEL", "[", "mode", "]", "+", "level", ",", "\n", "'game_generator_seed'", ":", "game_generator_seed", ",", "\n", "'request_infos'", ":", "[", "\n", "\"objective\"", ",", "\n", "\"description\"", ",", "\n", "\"inventory\"", ",", "\n", "\"command_feedback\"", ",", "\n", "\"intermediate_reward\"", ",", "\n", "\"admissible_commands\"", "\n", "]", ",", "\n", "'grammar_flags'", ":", "{", "\n", "\"theme\"", ":", "\"house\"", ",", "\n", "\"only_last_action\"", ":", "True", ",", "\n", "}", "\n", "}", "\n", ")", "\n", "return", "env_id", "\n", "", ""]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.utils.make_infinite_shuffled_iterator": [[6, 20], ["elements.append", "rng.shuffle"], "function", ["None"], ["#########################################", "\n", "#############   NLP Utils ###############", "\n", "#########################################", "\n", "def", "is_whitespace", "(", "c", ",", "use_space", "=", "True", ")", ":", "\n", "    ", "if", "(", "c", "==", "\" \"", "and", "use_space", ")", "or", "c", "==", "\"\\t\"", "or", "c", "==", "\"\\r\"", "or", "c", "==", "\"\\n\"", "or", "ord", "(", "c", ")", "==", "0x202F", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n", "\n", "", "def", "normalize", "(", "word", ",", "ignore_spaces", "=", "True", ")", ":", "\n", "    ", "chars", "=", "[", "]", "\n", "for", "c", "in", "word", ".", "lower", "(", ")", ":", "\n", "        ", "if", "c", "==", "' '", "and", "ignore_spaces", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.utils.make_batch": [[22, 56], ["gym_textworld.make", "gym.envs.registration.spec", "gym.envs.registration.register"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make"], ["", "", "return", "''", ".", "join", "(", "chars", ")", "\n", "\n", "\n", "", "def", "clean_str", "(", "str_in", ")", ":", "\n", "    ", "str_out", "=", "''", "\n", "for", "c", "in", "str_in", ":", "\n", "        ", "if", "not", "is_whitespace", "(", "c", ",", "use_space", "=", "False", ")", ":", "\n", "            ", "str_out", "+=", "c", "\n", "", "", "return", "str_out", "\n", "\n", "\n", "", "def", "compact_text", "(", "paragraph_text", ")", ":", "\n", "    ", "doc_tokens", "=", "[", "]", "\n", "prev_is_whitespace", "=", "True", "\n", "for", "c", "in", "paragraph_text", ":", "\n", "        ", "if", "is_whitespace", "(", "c", ")", ":", "\n", "            ", "prev_is_whitespace", "=", "True", "\n", "", "else", ":", "\n", "            ", "if", "prev_is_whitespace", ":", "\n", "                ", "doc_tokens", ".", "append", "(", "' '", ")", "\n", "doc_tokens", ".", "append", "(", "c", ")", "\n", "prev_is_whitespace", "=", "False", "\n", "", "else", ":", "\n", "                ", "doc_tokens", ".", "append", "(", "c", ")", "\n", "prev_is_whitespace", "=", "False", "\n", "", "", "", "return", "''", ".", "join", "(", "doc_tokens", ")", "\n", "\n", "\n", "#########################################", "\n", "###########   File I/O Utils ############", "\n", "#########################################", "\n", "", "def", "read_file", "(", "txtfile", ",", "join", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "txtfile", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "readlines", "(", ")", "\n", "", "content", "=", "[", "x", ".", "strip", "(", ")", "for", "x", "in", "content", "]", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.textworld_games_env.TextworldGameEnv.__init__": [[11, 17], ["textworld.play", "gym_textworld.spaces.text_spaces.Char", "gym_textworld.spaces.text_spaces.Char"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "gamefile", ",", "ob_max_length", ",", "act_max_length", ",", "vocab", "=", "None", ",", "mode", "=", "\"word\"", ")", ":", "\n", "        ", "self", ".", "gamefile", "=", "gamefile", "\n", "self", ".", "game_env", "=", "textworld", ".", "play", "(", "gamefile", ")", "\n", "self", ".", "action_space", "=", "text_spaces", ".", "Char", "(", "max_length", "=", "act_max_length", ")", "\n", "self", ".", "observation_space", "=", "text_spaces", ".", "Char", "(", "max_length", "=", "ob_max_length", ",", "\n", "extra_vocab", "=", "[", "\".\"", ",", "\",\"", ",", "\"\\n\"", "]", ")", "\n", "# self.action_space = text_spaces.Word(max_length=8, vocab=vocab)", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.textworld_games_env.TextworldGameEnv.step": [[20, 31], ["textworld_games_env.TextworldGameEnv.game_env.step"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "action", "=", "[", "self", ".", "action_space", ".", "id2c", "[", "i", "]", "for", "i", "in", "action", "]", "\n", "text_command", "=", "\"\"", ".", "join", "(", "action", ")", "# Text command", "\n", "# text_command = action", "\n", "\n", "game_state", ",", "reward", ",", "done", "=", "self", ".", "game_env", ".", "step", "(", "text_command", ")", "\n", "\n", "observation", "=", "game_state", ".", "feedback", "\n", "# observation = self.observation_space.tokenize(observation)", "\n", "infos", "=", "{", "\"game_state\"", ":", "game_state", "}", "\n", "return", "observation", ",", "reward", ",", "done", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.textworld_games_env.TextworldGameEnv.seed": [[32, 35], ["textworld_games_env.TextworldGameEnv.game_env.seed"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed"], ["", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "        ", "self", ".", "game_env", ".", "seed", "(", "seed", ")", "\n", "return", "[", "seed", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.textworld_games_env.TextworldGameEnv.reset": [[36, 41], ["textworld_games_env.TextworldGameEnv.game_env.reset"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "game_state", "=", "self", ".", "game_env", ".", "reset", "(", ")", "\n", "observation", "=", "game_state", ".", "feedback", "\n", "# observation = self.observation_space.tokenize(observation)", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.textworld_games_env.TextworldGameEnv.render": [[42, 44], ["textworld_games_env.TextworldGameEnv.game_env.render"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "self", ".", "game_env", ".", "render", "(", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.textworld_games_env.TextworldGameEnv.close": [[45, 50], ["textworld_games_env.TextworldGameEnv.game_env.close"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "game_env", "is", "not", "None", ":", "\n", "            ", "self", ".", "game_env", ".", "close", "(", ")", "\n", "\n", "", "self", ".", "game_env", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.__init__": [[41, 45], ["multiprocessing.Pipe", "multiprocessing.Process", "util_envs._ChildEnv._process.start"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", ")", ":", "\n", "        ", "self", ".", "_pipe", ",", "child_pipe", "=", "mp", ".", "Pipe", "(", ")", "\n", "self", ".", "_process", "=", "mp", ".", "Process", "(", "target", "=", "_child", ",", "args", "=", "(", "id", ",", "child_pipe", ")", ")", "\n", "self", ".", "_process", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.call": [[46, 48], ["util_envs._ChildEnv._pipe.send"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "method", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "_pipe", ".", "send", "(", "(", "\"call\"", ",", "method", ",", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.get": [[49, 51], ["util_envs._ChildEnv._pipe.send"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "attr", ")", ":", "\n", "        ", "self", ".", "_pipe", ".", "send", "(", "(", "\"get\"", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.hasattr": [[52, 54], ["util_envs._ChildEnv._pipe.send"], "methods", ["None"], ["", "def", "hasattr", "(", "self", ",", "attr", ")", ":", "\n", "        ", "self", ".", "_pipe", ".", "send", "(", "(", "\"hasattr\"", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.result": [[55, 57], ["util_envs._ChildEnv._pipe.recv"], "methods", ["None"], ["", "def", "result", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_pipe", ".", "recv", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.call_sync": [[58, 61], ["util_envs._ChildEnv.call", "util_envs._ChildEnv.result"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.call", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.result"], ["", "def", "call_sync", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "call", "(", "*", "args", ")", "\n", "return", "self", ".", "result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.get_sync": [[62, 65], ["util_envs._ChildEnv.get", "util_envs._ChildEnv.result"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.get", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.result"], ["", "def", "get_sync", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "get", "(", "*", "args", ")", "\n", "return", "self", ".", "result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.hasattr_sync": [[66, 69], ["util_envs._ChildEnv.hasattr", "util_envs._ChildEnv.result"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.hasattr", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.result"], ["", "def", "hasattr_sync", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "hasattr", "(", "*", "args", ")", "\n", "return", "self", ".", "result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.close": [[70, 73], ["util_envs._ChildEnv._pipe.close", "util_envs._ChildEnv._process.join"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "_pipe", ".", "close", "(", ")", "\n", "self", ".", "_process", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.ParallelBatchEnv.__init__": [[78, 98], ["util_envs.ParallelBatchEnv.envs[].get_sync", "util_envs.ParallelBatchEnv.envs[].get_sync", "len", "util_envs.ParallelBatchEnv.envs.append", "type", "util_envs._ChildEnv"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.get_sync", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.get_sync"], ["def", "__init__", "(", "self", ",", "env_id", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        env_id : list of str or str\n            Environment IDs that will compose a batch. If only\n            one env_id is provided, it will be repeated `batch_size` times.\n        batch_size : int\n            Number of environment to run in parallel.\n        \"\"\"", "\n", "self", ".", "env_ids", "=", "env_id", "if", "type", "(", "env_id", ")", "is", "list", "else", "[", "env_id", "]", "*", "batch_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "assert", "len", "(", "self", ".", "env_ids", ")", "==", "self", ".", "batch_size", "\n", "\n", "self", ".", "envs", "=", "[", "]", "\n", "for", "id", "in", "self", ".", "env_ids", ":", "\n", "            ", "self", ".", "envs", ".", "append", "(", "_ChildEnv", "(", "id", ")", ")", "\n", "\n", "", "self", ".", "observation_space", "=", "self", ".", "envs", "[", "0", "]", ".", "get_sync", "(", "\"observation_space\"", ")", "\n", "self", ".", "action_space", "=", "self", ".", "envs", "[", "0", "]", ".", "get_sync", "(", "\"action_space\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.ParallelBatchEnv.skip": [[99, 102], ["env.call_sync"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.call_sync"], ["", "def", "skip", "(", "self", ",", "ngames", "=", "1", ")", ":", "\n", "        ", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "env", ".", "call_sync", "(", "\"unwrapped.skip\"", ",", "ngames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.ParallelBatchEnv.seed": [[103, 112], ["numpy.random.RandomState", "list", "zip", "numpy.random.RandomState.randint", "env.call_sync"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.call_sync"], ["", "", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "# Use different seed for each env to decorrelate", "\n", "# the examples in the batch.", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "seeds", "=", "list", "(", "rng", ".", "randint", "(", "65635", ",", "size", "=", "self", ".", "batch_size", ")", ")", "\n", "for", "env", ",", "seed", "in", "zip", "(", "self", ".", "envs", ",", "seeds", ")", ":", "\n", "            ", "env", ".", "call_sync", "(", "\"seed\"", ",", "seed", ")", "\n", "\n", "", "return", "seeds", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.ParallelBatchEnv.reset": [[113, 126], ["env.call", "env.result", "obs.append", "infos.append"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.call", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.result"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "last", "=", "[", "None", "]", "*", "self", ".", "batch_size", "\n", "obs", ",", "infos", "=", "[", "]", ",", "[", "]", "\n", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "env", ".", "call", "(", "\"reset\"", ")", "\n", "\n", "", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "result", "=", "env", ".", "result", "(", ")", "\n", "ob", ",", "info", "=", "result", "\n", "obs", ".", "append", "(", "ob", ")", "\n", "infos", ".", "append", "(", "info", ")", "\n", "\n", "", "return", "obs", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.ParallelBatchEnv.step": [[127, 152], ["enumerate", "enumerate", "zip", "zip", "obs.append", "rewards.append", "dones.append", "infos.append", "results.append", "env.call", "results.append", "env.result"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.call", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.result"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "\n", "for", "i", ",", "(", "env", ",", "action", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "envs", ",", "actions", ")", ")", ":", "\n", "            ", "if", "self", ".", "last", "[", "i", "]", "is", "not", "None", "and", "self", ".", "last", "[", "i", "]", "[", "2", "]", ":", "# Game is done", "\n", "                ", "results", ".", "append", "(", "self", ".", "last", "[", "i", "]", ")", "# Copy last infos over.", "\n", "", "else", ":", "\n", "                ", "env", ".", "call", "(", "\"step\"", ",", "action", ")", "\n", "results", ".", "append", "(", "None", ")", "\n", "\n", "", "", "obs", ",", "rewards", ",", "dones", ",", "infos", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "(", "env", ",", "result", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "envs", ",", "results", ")", ")", ":", "\n", "            ", "if", "result", "is", "None", ":", "\n", "                ", "result", "=", "env", ".", "result", "(", ")", "\n", "\n", "", "ob", ",", "reward", ",", "done", ",", "info", "=", "result", "\n", "\n", "obs", ".", "append", "(", "ob", ")", "\n", "rewards", ".", "append", "(", "reward", ")", "\n", "dones", ".", "append", "(", "done", ")", "\n", "infos", ".", "append", "(", "info", ")", "\n", "\n", "self", ".", "last", "[", "i", "]", "=", "result", "\n", "\n", "", "return", "obs", ",", "rewards", ",", "dones", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.ParallelBatchEnv.render": [[153, 162], ["env.call", "renderings.append", "env.result"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.call", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.result"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "env", ".", "call", "(", "\"render\"", ",", "mode", ")", "\n", "\n", "", "renderings", "=", "[", "]", "\n", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "renderings", ".", "append", "(", "env", ".", "result", "(", ")", ")", "\n", "\n", "", "return", "renderings", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.ParallelBatchEnv.close": [[163, 166], ["env.close"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.BatchEnv.__init__": [[171, 188], ["len", "gym.make", "type", "range"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make"], ["def", "__init__", "(", "self", ",", "env_id", ",", "batch_size", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        env_id : list of str or str\n            Environment IDs that will compose a batch. If only\n            one env_id is provided, it will be repeated `batch_size` times.\n        batch_size : int\n            Number of independent environments to run.\n        \"\"\"", "\n", "self", ".", "env_ids", "=", "env_id", "if", "type", "(", "env_id", ")", "is", "list", "else", "[", "env_id", "]", "*", "batch_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "assert", "len", "(", "self", ".", "env_ids", ")", "==", "self", ".", "batch_size", "\n", "\n", "self", ".", "envs", "=", "[", "gym", ".", "make", "(", "self", ".", "env_ids", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "batch_size", ")", "]", "\n", "self", ".", "observation_space", "=", "self", ".", "envs", "[", "0", "]", ".", "observation_space", "\n", "self", ".", "action_space", "=", "self", ".", "envs", "[", "0", "]", ".", "action_space", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.BatchEnv.skip": [[189, 192], ["env.env.skip"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.skip"], ["", "def", "skip", "(", "self", ",", "ngames", "=", "1", ")", ":", "\n", "        ", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "env", ".", "env", ".", "skip", "(", "ngames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.BatchEnv.seed": [[193, 202], ["numpy.random.RandomState", "list", "zip", "numpy.random.RandomState.randint", "env.seed"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed"], ["", "", "def", "seed", "(", "self", ",", "seed", "=", "None", ")", ":", "\n", "# Use different seed for each env to decorrelate", "\n", "# the examples in the batch.", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "seeds", "=", "list", "(", "rng", ".", "randint", "(", "65635", ",", "size", "=", "self", ".", "batch_size", ")", ")", "\n", "for", "env", ",", "seed", "in", "zip", "(", "self", ".", "envs", ",", "seeds", ")", ":", "\n", "            ", "env", ".", "seed", "(", "seed", ")", "\n", "\n", "", "return", "seeds", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.BatchEnv.reset": [[203, 212], ["env.reset", "obs.append", "infos.append"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "last", "=", "[", "None", "]", "*", "self", ".", "batch_size", "\n", "obs", ",", "infos", "=", "[", "]", ",", "[", "]", "\n", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "ob", ",", "info", "=", "env", ".", "reset", "(", ")", "\n", "obs", ".", "append", "(", "ob", ")", "\n", "infos", ".", "append", "(", "info", ")", "\n", "\n", "", "return", "obs", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.BatchEnv.step": [[213, 228], ["enumerate", "zip", "obs.append", "rewards.append", "dones.append", "infos.append", "env.step"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.step"], ["", "def", "step", "(", "self", ",", "actions", ")", ":", "\n", "        ", "obs", ",", "rewards", ",", "dones", ",", "infos", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "(", "env", ",", "action", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "envs", ",", "actions", ")", ")", ":", "\n", "            ", "if", "self", ".", "last", "[", "i", "]", "is", "not", "None", "and", "self", ".", "last", "[", "i", "]", "[", "2", "]", ":", "# Game is done", "\n", "                ", "ob", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "last", "[", "i", "]", "# Copy last infos over.", "\n", "", "else", ":", "\n", "                ", "ob", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "\n", "", "obs", ".", "append", "(", "ob", ")", "\n", "rewards", ".", "append", "(", "reward", ")", "\n", "dones", ".", "append", "(", "done", ")", "\n", "infos", ".", "append", "(", "info", ")", "\n", "self", ".", "last", "[", "i", "]", "=", "ob", ",", "reward", ",", "done", ",", "info", "\n", "\n", "", "return", "obs", ",", "rewards", ",", "dones", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.BatchEnv.render": [[229, 236], ["env.render", "renderings.append"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.render"], ["", "def", "render", "(", "self", ",", "mode", "=", "'human'", ")", ":", "\n", "        ", "renderings", "=", "[", "]", "\n", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "rendering", "=", "env", ".", "render", "(", "mode", "=", "mode", ")", "\n", "renderings", ".", "append", "(", "rendering", ")", "\n", "\n", "", "return", "renderings", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs.BatchEnv.close": [[237, 240], ["env.close"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "env", "in", "self", ".", "envs", ":", "\n", "            ", "env", ".", "close", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._child": [[8, 35], ["gym.make", "pipe.close", "pipe.recv", "command[].split", "pipe.send", "getattr", "getattr", "getattr.", "getattr", "hasattr"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.close", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.hasattr"], ["def", "_child", "(", "id", ",", "pipe", ")", ":", "\n", "    ", "\"\"\"\n    Event loop run by the child processes\n    \"\"\"", "\n", "env", "=", "gym", ".", "make", "(", "id", ")", "\n", "\n", "try", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "command", "=", "pipe", ".", "recv", "(", ")", "\n", "# command is a tuple like (\"call\" | \"get\", \"name.of.attr\", extra args...)", "\n", "\n", "obj", "=", "env", "\n", "attrs", "=", "command", "[", "1", "]", ".", "split", "(", "\".\"", ")", "\n", "for", "attr", "in", "attrs", "[", ":", "-", "1", "]", ":", "\n", "                ", "obj", "=", "getattr", "(", "obj", ",", "attr", ")", "\n", "\n", "", "if", "command", "[", "0", "]", "==", "\"call\"", ":", "\n", "                ", "fct", "=", "getattr", "(", "obj", ",", "attrs", "[", "-", "1", "]", ")", "\n", "result", "=", "fct", "(", "*", "command", "[", "2", "]", ")", "\n", "", "elif", "command", "[", "0", "]", "==", "\"get\"", ":", "\n", "                ", "result", "=", "getattr", "(", "obj", ",", "attrs", "[", "-", "1", "]", ")", "\n", "", "elif", "command", "[", "0", "]", "==", "\"hasattr\"", ":", "\n", "                ", "result", "=", "hasattr", "(", "obj", ",", "attrs", "[", "-", "1", "]", ")", "\n", "\n", "", "pipe", ".", "send", "(", "result", ")", "\n", "", "", "finally", ":", "\n", "        ", "pipe", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.__init__": [[51, 90], ["coin_collector.CoinCollectorLevel.seed", "textworld.text_utils.extract_vocab", "textworld.text_utils.extract_vocab", "textworld.text_utils.extract_vocab", "textworld.text_utils.extract_vocab", "gym_textworld.spaces.Word", "gym_textworld.spaces.Word"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed"], ["return", "env_id", "\n", "", ""]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel._get_seeds_per_game": [[91, 103], ["range", "coin_collector.CoinCollectorLevel.rng_make.randint", "coin_collector.CoinCollectorLevel.rng_make.randint", "coin_collector.CoinCollectorLevel.rng_make.randint", "coin_collector.CoinCollectorLevel.rng_make.randint", "seeds_per_game.append"], "methods", ["None"], []], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel._make_game": [[104, 113], ["GameOptions", "GrammarOptions", "textworld.challenges.coin_collector.make_game_from_level", "textworld.challenges.coin_collector.make_game_from_level", "coin_collector.encode_seeds", "textworld.generator.compile_game", "textworld.generator.compile_game", "textworld.generator.compile_game", "textworld.generator.compile_game", "os.path.join", "str", "sorted"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.encode_seeds"], []], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel._next_game": [[114, 123], ["next", "numpy.random.RandomState", "coin_collector.CoinCollectorLevel._make_game", "dict"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel._make_game"], []], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed": [[124, 150], ["numpy.random.RandomState", "numpy.random.RandomState", "coin_collector.CoinCollectorLevel.rng_make.randint", "coin_collector.CoinCollectorLevel.rng_make.randint", "coin_collector.CoinCollectorLevel.rng_make.randint", "coin_collector.CoinCollectorLevel.rng_make.randint", "coin_collector.CoinCollectorLevel.rng_make.randint", "coin_collector.CoinCollectorLevel._get_seeds_per_game", "numpy.random.RandomState", "numpy.random.RandomState.shuffle", "gym_textworld.utils.make_infinite_shuffled_iterator", "frozenset", "seeds.items"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel._get_seeds_per_game", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.utils.make_infinite_shuffled_iterator"], []], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset": [[151, 180], ["coin_collector.CoinCollectorLevel._next_game", "os.path.basename", "textworld.start", "textworld.start", "textworld.start", "textworld.start", "set", "coin_collector.CoinCollectorLevel.textworld_env.reset", "coin_collector.CoinCollectorLevel._update_requested_infos", "coin_collector.CoinCollectorLevel.textworld_env.close", "coin_collector.CoinCollectorLevel.textworld_env.activate_state_tracking", "coin_collector.CoinCollectorLevel.textworld_env.activate_state_tracking", "coin_collector.CoinCollectorLevel.textworld_env.compute_intermediate_reward"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel._next_game", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.reset", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel._update_requested_infos", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.close"], []], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel._update_requested_infos": [[181, 187], ["getattr"], "methods", ["None"], []], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.skip": [[188, 191], ["range", "next"], "methods", ["None"], []], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.step": [[192, 198], ["coin_collector.CoinCollectorLevel.textworld_env.step", "coin_collector.CoinCollectorLevel._update_requested_infos"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.step", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel._update_requested_infos"], []], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.render": [[199, 210], ["outfile.write", "io.StringIO", "gym.utils.colorize", "outfile.write"], "methods", ["None"], []], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.close": [[211, 216], ["coin_collector.CoinCollectorLevel.textworld_env.close"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.close"], []], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.encode_seeds": [[37, 40], ["hashids.Hashids", "hashids.Hashids.encode"], "function", ["None"], ["'request_infos'", ":", "[", "\n", "\"objective\"", ",", "\n", "\"description\"", ",", "\n", "\"inventory\"", ",", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Char.__init__": [[25, 59], ["list", "set", "len", "super().__init__", "list", "len", "len", "text_spaces.VocabularyHasDuplicateTokens", "set", "enumerate", "text_spaces.Char.id2c.items", "len"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Word.__init__"], ["def", "__init__", "(", "self", ",", "max_length", ",", "vocab", "=", "None", ",", "extra_vocab", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        max_length : int\n            Maximum number of characters in a text.\n        vocab : list of char, optional\n            Vocabulary defining this space. It shouldn't contain any\n            duplicate characters. If not provided, the vocabulary will consists\n            in characters [a-z0-9], punctuations [\" \", \"-\", \"'\"] and padding '#'.\n        extra_vocab : list of char, optional\n            Additional tokens to add to the vocabulary.\n        \"\"\"", "\n", "if", "vocab", "is", "None", ":", "\n", "            ", "vocab", "=", "list", "(", "string", ".", "ascii_lowercase", "+", "string", ".", "digits", ")", "\n", "vocab", "+=", "[", "\" \"", ",", "\"-\"", ",", "\"'\"", "]", "\n", "\n", "", "vocab", "+=", "extra_vocab", "\n", "\n", "if", "len", "(", "vocab", ")", "!=", "len", "(", "set", "(", "vocab", ")", ")", ":", "\n", "            ", "raise", "VocabularyHasDuplicateTokens", "(", ")", "\n", "\n", "", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "PAD", "=", "\"#\"", "\n", "special_tokens", "=", "[", "self", ".", "PAD", "]", "\n", "self", ".", "vocab", "=", "[", "t", "for", "t", "in", "special_tokens", "if", "t", "not", "in", "vocab", "]", "\n", "self", ".", "vocab", "+=", "list", "(", "vocab", ")", "\n", "self", ".", "vocab_set", "=", "set", "(", "self", ".", "vocab", ")", "# For faster lookup.", "\n", "self", ".", "vocab_size", "=", "len", "(", "self", ".", "vocab", ")", "\n", "self", ".", "id2c", "=", "{", "i", ":", "c", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "vocab", ")", "}", "\n", "self", ".", "c2id", "=", "{", "c", ":", "i", "for", "i", ",", "c", "in", "self", ".", "id2c", ".", "items", "(", ")", "}", "\n", "self", ".", "PAD_id", "=", "self", ".", "c2id", "[", "self", ".", "PAD", "]", "\n", "super", "(", ")", ".", "__init__", "(", "[", "len", "(", "self", ".", "vocab", ")", "-", "1", "]", "*", "self", ".", "max_length", ")", "\n", "self", ".", "dtype", "=", "np", ".", "int64", "# Overwrite Gym's dtype=int8.", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Char.filter_unknown": [[60, 63], ["None"], "methods", ["None"], ["", "def", "filter_unknown", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\" Strip out all characters not in the vocabulary. \"\"\"", "\n", "return", "\"\"", ".", "join", "(", "c", "for", "c", "in", "text", "if", "c", "in", "self", ".", "vocab_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Char.tokenize": [[64, 80], ["text_spaces.Char.filter_unknown", "numpy.array", "text_spaces.Char.lower", "len", "len"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Char.filter_unknown"], ["", "def", "tokenize", "(", "self", ",", "text", ",", "padding", "=", "False", ")", ":", "\n", "        ", "\"\"\" Tokenize characters found in the vocabulary.\n\n        Note: text will be padded up to `self.max_length`.\n        \"\"\"", "\n", "text", "=", "self", ".", "filter_unknown", "(", "text", ".", "lower", "(", ")", ")", "\n", "ids", "=", "[", "self", ".", "c2id", "[", "c", "]", "for", "c", "in", "text", "]", "\n", "\n", "# Add padding.", "\n", "if", "padding", ":", "\n", "            ", "nb_pads", "=", "self", ".", "max_length", "-", "len", "(", "ids", ")", "\n", "msg", "=", "\"Provided `max_length` was not large enough ({} chars).\"", ".", "format", "(", "len", "(", "ids", ")", ")", "\n", "assert", "nb_pads", ">=", "0", ",", "msg", "\n", "ids", "+=", "[", "self", ".", "PAD_id", "]", "*", "nb_pads", "\n", "\n", "", "return", "np", ".", "array", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Char.__repr__": [[81, 83], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Character({})\"", ".", "format", "(", "self", ".", "max_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Word.__init__": [[101, 134], ["list", "set", "len", "super().__init__", "len", "len", "text_spaces.VocabularyHasDuplicateTokens", "set", "enumerate", "text_spaces.Word.id2w.items", "len"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Word.__init__"], ["def", "__init__", "(", "self", ",", "max_length", ",", "vocab", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        max_length : int\n            Maximum number of words in a text.\n        vocab : list of strings\n            Vocabulary defining this space. It shouldn't contain any\n            duplicate words.\n        \"\"\"", "\n", "if", "len", "(", "vocab", ")", "!=", "len", "(", "set", "(", "vocab", ")", ")", ":", "\n", "            ", "raise", "VocabularyHasDuplicateTokens", "(", ")", "\n", "\n", "", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "PAD", "=", "\"<PAD>\"", "\n", "self", ".", "UNK", "=", "\"<UNK>\"", "\n", "self", ".", "BOS", "=", "\"<S>\"", "\n", "self", ".", "EOS", "=", "\"</S>\"", "\n", "self", ".", "SEP", "=", "\"<|>\"", "\n", "special_tokens", "=", "[", "self", ".", "PAD", ",", "self", ".", "UNK", ",", "self", ".", "EOS", ",", "self", ".", "BOS", ",", "self", ".", "SEP", "]", "\n", "self", ".", "vocab", "=", "[", "w", "for", "w", "in", "special_tokens", "if", "w", "not", "in", "vocab", "]", "\n", "self", ".", "vocab", "+=", "list", "(", "vocab", ")", "\n", "self", ".", "vocab_set", "=", "set", "(", "self", ".", "vocab", ")", "# For faster lookup.", "\n", "self", ".", "vocab_size", "=", "len", "(", "self", ".", "vocab", ")", "\n", "self", ".", "id2w", "=", "{", "i", ":", "w", "for", "i", ",", "w", "in", "enumerate", "(", "self", ".", "vocab", ")", "}", "\n", "self", ".", "w2id", "=", "{", "w", ":", "i", "for", "i", ",", "w", "in", "self", ".", "id2w", ".", "items", "(", ")", "}", "\n", "self", ".", "PAD_id", "=", "self", ".", "w2id", "[", "self", ".", "PAD", "]", "\n", "self", ".", "UNK_id", "=", "self", ".", "w2id", "[", "self", ".", "UNK", "]", "\n", "self", ".", "BOS_id", "=", "self", ".", "w2id", "[", "self", ".", "BOS", "]", "\n", "self", ".", "EOS_id", "=", "self", ".", "w2id", "[", "self", ".", "EOS", "]", "\n", "self", ".", "SEP_id", "=", "self", ".", "w2id", "[", "self", ".", "SEP", "]", "\n", "super", "(", ")", ".", "__init__", "(", "[", "len", "(", "self", ".", "vocab", ")", "-", "1", "]", "*", "self", ".", "max_length", ")", "\n", "self", ".", "dtype", "=", "np", ".", "int64", "# Overwrite Gym's dtype=int8.", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Word.tokenize": [[135, 162], ["re.sub.lower", "re.sub", "re.sub", "re.sub", "re.sub.split", "numpy.array", "text_spaces.Word.w2id.get", "len", "len"], "methods", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.util_envs._ChildEnv.get"], ["", "def", "tokenize", "(", "self", ",", "text", ",", "padding", "=", "False", ")", ":", "\n", "        ", "\"\"\" Tokenize words found in the vocabulary.\n\n        Note: text will be padded up to `self.max_length`.\n        \"\"\"", "\n", "text", "=", "text", ".", "lower", "(", ")", "# Work only with lowercase letters.", "\n", "# Find beginning and end of sentences.", "\n", "text", "=", "re", ".", "sub", "(", "\".\"", ",", "\" </S> <S> \"", ",", "text", ")", "\n", "text", "=", "\"<S> \"", "+", "text", "+", "\" </S>\"", "\n", "\n", "# Strip out all non-alphabetic characters.", "\n", "text", "=", "re", ".", "sub", "(", "\"'\"", ",", "\"\"", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "\"[^a-z0-9 ]\"", ",", "\" \"", ",", "text", ")", "\n", "# TODO: convert numbers to text?", "\n", "\n", "# Get words ids and replace unknown words with <UNK>.", "\n", "words", "=", "text", ".", "split", "(", ")", "\n", "ids", "=", "[", "self", ".", "w2id", ".", "get", "(", "w", ",", "self", ".", "UNK_id", ")", "for", "w", "in", "words", "]", "\n", "\n", "# Add padding.", "\n", "if", "padding", ":", "\n", "            ", "nb_pads", "=", "self", ".", "max_length", "-", "len", "(", "ids", ")", "\n", "msg", "=", "\"Provided `max_length` was not large enough ({} words).\"", ".", "format", "(", "len", "(", "ids", ")", ")", "\n", "assert", "nb_pads", ">=", "0", ",", "msg", "\n", "ids", "+=", "[", "self", ".", "PAD_id", "]", "*", "nb_pads", "\n", "\n", "", "return", "np", ".", "array", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.spaces.text_spaces.Word.__repr__": [[163, 165], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Word(L={}, V={})\"", ".", "format", "(", "self", ".", "max_length", ",", "self", ".", "vocab_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.scripts.tw-make.parse_args": [[14, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.scripts.tw-make.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"env_id\"", ",", "\n", "help", "=", "\"Gym-Textworld Environment for which to generate\"", "\n", "\" the games. Should follow this pattern\"", "\n", "\" twcc_[easy|medium|hard]_level[int]_gamesize[int]_step[int]_seed[int]_[train|validation|test]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--env_seed\"", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Random seed for generating the games.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nb-processes\"", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Number of games to generate in parallel.\"", "\n", "\" Default: as many as there are CPU cores.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-v\"", ",", "\"--verbose\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Activate verbose mode.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-vv\"", ",", "\"--very-verbose\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Verbose mode + print warning messages.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.scripts.tw-make._generate_game": [[32, 37], ["gym.make", "gym.make.unwrapped.skip", "gym.make.unwrapped._next_game", "gym.make.close"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.skip", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel._next_game", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.close"], ["", "def", "_generate_game", "(", "env_id", ",", "skip", ")", ":", "\n", "    ", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "env", ".", "unwrapped", ".", "skip", "(", "skip", ")", "\n", "env", ".", "unwrapped", ".", "_next_game", "(", ")", "\n", "env", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.scripts.tw-make.main": [[39, 72], ["tw-make.parse_args", "gym_textworld.make", "gym.make", "gym.make.seed", "range", "tqdm.tqdm", "print", "warnings.simplefilter", "multiprocessing.cpu_count", "multiprocessing.Pool", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "tqdm.tqdm.close", "multiprocessing.Pool.apply_async", "tw-make._generate_game", "tqdm.tqdm.update", "tqdm.tqdm.update"], "function", ["home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.scripts.tw-make.parse_args", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.gym_textworld.coin_collector.make", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.seed", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.close", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.envs.coin_collector.CoinCollectorLevel.close", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.scripts.tw-make._generate_game", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.update", "home.repos.pwc.inspect_result.IBM_context-relevant-pruning-textrl.lstm_drqn.agent.RLAgent.update"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "very_verbose", ":", "\n", "        ", "args", ".", "verbose", "=", "args", ".", "very_verbose", "\n", "warnings", ".", "simplefilter", "(", "\"default\"", ",", "textworld", ".", "TextworldGenerationWarning", ")", "\n", "\n", "", "if", "args", ".", "nb_processes", "is", "None", ":", "\n", "        ", "args", ".", "nb_processes", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "\n", "", "env_id", "=", "gym_textworld", ".", "make", "(", "args", ".", "env_id", ")", "\n", "env", "=", "gym", ".", "make", "(", "env_id", ")", "\n", "env", ".", "seed", "(", "args", ".", "env_seed", ")", "\n", "nb_games", "=", "env", ".", "unwrapped", ".", "n_games", "\n", "skip_list", "=", "range", "(", "nb_games", ")", "\n", "\n", "desc", "=", "\"Generating games for {}\"", ".", "format", "(", "args", ".", "env_id", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "nb_games", ",", "desc", "=", "desc", ")", "\n", "\n", "print", "(", "\"Using {} processes.\"", ".", "format", "(", "args", ".", "nb_processes", ")", ")", "\n", "if", "args", ".", "nb_processes", ">", "1", ":", "\n", "        ", "pool", "=", "multiprocessing", ".", "Pool", "(", "args", ".", "nb_processes", ")", "\n", "for", "skip", "in", "skip_list", ":", "\n", "            ", "pool", ".", "apply_async", "(", "_generate_game", ",", "(", "env_id", ",", "skip", ")", ",", "callback", "=", "lambda", "_", ":", "pbar", ".", "update", "(", ")", ")", "\n", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "pbar", ".", "close", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "for", "skip", "in", "skip_list", ":", "\n", "            ", "_generate_game", "(", "env_id", ",", "skip", ")", "\n", "pbar", ".", "update", "(", ")", "\n", "\n"]]}