{"home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.generate_training_meshes.code_to_mesh": [[14, 128], ["os.path.join", "json.load", "__import__", "__import__.Decoder", "torch.nn.DataParallel", "torch.load", "decoder.module.cuda.load_state_dict", "decoder.module.cuda.module.cuda", "decoder.module.cuda.eval", "deep_sdf.load_pre_trained_latent_vectors", "latent_vectors.cuda.cuda", "deep_sdf.data.get_instance_filenames", "deep_sdf.data.get_instance_filenames", "print", "enumerate", "os.path.isfile", "Exception", "open", "os.path.join", "open", "json.load", "len", "len", "print", "sys.platform.startswith", "os.path.join", "os.path.join", "torch.clamp", "os.path.normpath", "os.path.normpath().split", "os.path.normpath().split", "instance_name.split", "str", "os.path.isdir", "os.makedirs", "numpy.load", "torch.clamp", "deep_sdf.get_normalization_params_filename", "torch.no_grad", "deep_sdf.mesh.create_mesh_octree", "deep_sdf.mesh.create_mesh_octree", "torch.no_grad", "deep_sdf.mesh.create_mesh", "deep_sdf.mesh.create_mesh", "os.path.normpath", "os.path.normpath", "int", "int"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.load_pre_trained_latent_vectors", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.get_instance_filenames", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.get_instance_filenames", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_normalization_params_filename", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.mesh.create_mesh_octree", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.mesh.create_mesh_octree", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.mesh.create_mesh", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.mesh.create_mesh"], ["def", "code_to_mesh", "(", "experiment_directory", ",", "checkpoint", ",", "start_id", ",", "end_id", ",", "\n", "keep_normalized", "=", "False", ",", "use_octree", "=", "True", ",", "resolution", "=", "256", ")", ":", "\n", "\n", "    ", "specs_filename", "=", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "\"specs.json\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "specs_filename", ")", ":", "\n", "        ", "raise", "Exception", "(", "\n", "'The experiment directory does not include specifications file \"specs.json\"'", "\n", ")", "\n", "\n", "", "specs", "=", "json", ".", "load", "(", "open", "(", "specs_filename", ")", ")", "\n", "\n", "arch", "=", "__import__", "(", "\"networks.\"", "+", "specs", "[", "\"NetworkArch\"", "]", ",", "fromlist", "=", "[", "\"Decoder\"", "]", ")", "\n", "\n", "latent_size", "=", "specs", "[", "\"CodeLength\"", "]", "\n", "\n", "decoder", "=", "arch", ".", "Decoder", "(", "latent_size", ",", "**", "specs", "[", "\"NetworkSpecs\"", "]", ")", "\n", "\n", "decoder", "=", "torch", ".", "nn", ".", "DataParallel", "(", "decoder", ")", "\n", "\n", "saved_model_state", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "ws", ".", "model_params_subdir", ",", "checkpoint", "+", "\".pth\"", ")", "\n", ")", "\n", "saved_model_epoch", "=", "saved_model_state", "[", "\"epoch\"", "]", "\n", "\n", "decoder", ".", "load_state_dict", "(", "saved_model_state", "[", "\"model_state_dict\"", "]", ")", "\n", "\n", "decoder", "=", "decoder", ".", "module", ".", "cuda", "(", ")", "\n", "\n", "decoder", ".", "eval", "(", ")", "\n", "\n", "clamping_function", "=", "None", "\n", "if", "specs", "[", "\"NetworkArch\"", "]", "==", "\"deep_sdf_decoder\"", ":", "\n", "        ", "clamping_function", "=", "lambda", "x", ":", "torch", ".", "clamp", "(", "x", ",", "-", "specs", "[", "\"ClampingDistance\"", "]", ",", "specs", "[", "\"ClampingDistance\"", "]", ")", "\n", "", "elif", "specs", "[", "\"NetworkArch\"", "]", "==", "\"deep_implicit_template_decoder\"", ":", "\n", "        ", "clamping_function", "=", "lambda", "x", ":", "torch", ".", "clamp", "(", "x", ",", "-", "specs", "[", "\"ClampingDistance\"", "]", ",", "specs", "[", "\"ClampingDistance\"", "]", ")", "\n", "\n", "", "latent_vectors", "=", "ws", ".", "load_pre_trained_latent_vectors", "(", "experiment_directory", ",", "checkpoint", ")", "\n", "latent_vectors", "=", "latent_vectors", ".", "cuda", "(", ")", "\n", "\n", "train_split_file", "=", "specs", "[", "\"TrainSplit\"", "]", "\n", "\n", "with", "open", "(", "train_split_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "train_split", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "data_source", "=", "specs", "[", "\"DataSource\"", "]", "\n", "\n", "instance_filenames", "=", "deep_sdf", ".", "data", ".", "get_instance_filenames", "(", "data_source", ",", "train_split", ")", "\n", "\n", "print", "(", "len", "(", "instance_filenames", ")", ",", "\" vs \"", ",", "len", "(", "latent_vectors", ")", ")", "\n", "\n", "for", "i", ",", "latent_vector", "in", "enumerate", "(", "latent_vectors", ")", ":", "\n", "        ", "if", "i", "<", "start_id", ":", "\n", "            ", "continue", "\n", "\n", "", "print", "(", "os", ".", "path", ".", "normpath", "(", "instance_filenames", "[", "i", "]", ")", ")", "\n", "if", "sys", ".", "platform", ".", "startswith", "(", "'linux'", ")", ":", "\n", "            ", "dataset_name", ",", "class_name", ",", "instance_name", "=", "os", ".", "path", ".", "normpath", "(", "instance_filenames", "[", "i", "]", ")", ".", "split", "(", "\"/\"", ")", "\n", "", "else", ":", "\n", "            ", "dataset_name", ",", "class_name", ",", "instance_name", "=", "os", ".", "path", ".", "normpath", "(", "instance_filenames", "[", "i", "]", ")", ".", "split", "(", "\"\\\\\"", ")", "\n", "", "instance_name", "=", "instance_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "\n", "mesh_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "experiment_directory", ",", "\n", "ws", ".", "training_meshes_subdir", ",", "\n", "str", "(", "saved_model_epoch", ")", ",", "\n", "dataset_name", ",", "\n", "class_name", ",", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "mesh_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "mesh_dir", ")", "\n", "\n", "", "mesh_filename", "=", "os", ".", "path", ".", "join", "(", "mesh_dir", ",", "instance_name", ")", "\n", "\n", "offset", "=", "None", "\n", "scale", "=", "None", "\n", "\n", "if", "not", "keep_normalized", ":", "\n", "\n", "            ", "normalization_params", "=", "np", ".", "load", "(", "\n", "ws", ".", "get_normalization_params_filename", "(", "\n", "data_source", ",", "dataset_name", ",", "class_name", ",", "instance_name", "\n", ")", "\n", ")", "\n", "offset", "=", "normalization_params", "[", "\"offset\"", "]", "\n", "scale", "=", "normalization_params", "[", "\"scale\"", "]", "\n", "\n", "", "if", "use_octree", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "deep_sdf", ".", "mesh", ".", "create_mesh_octree", "(", "\n", "decoder", ",", "\n", "latent_vector", ",", "\n", "mesh_filename", ",", "\n", "N", "=", "resolution", ",", "\n", "max_batch", "=", "int", "(", "2", "**", "17", ")", ",", "\n", "offset", "=", "offset", ",", "\n", "scale", "=", "scale", ",", "\n", "clamp_func", "=", "clamping_function", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "deep_sdf", ".", "mesh", ".", "create_mesh", "(", "\n", "decoder", ",", "\n", "latent_vector", ",", "\n", "mesh_filename", ",", "\n", "N", "=", "resolution", ",", "\n", "max_batch", "=", "int", "(", "2", "**", "17", ")", ",", "\n", "offset", "=", "offset", ",", "\n", "scale", "=", "scale", "\n", ")", "\n", "\n", "", "", "if", "i", ">=", "end_id", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.render_correspondences.rotationx": [[7, 13], ["numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["def", "rotationx", "(", "theta", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "\n", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "np", ".", "cos", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ",", "np", ".", "sin", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "-", "np", ".", "sin", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ",", "np", ".", "cos", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.render_correspondences.rotationy": [[16, 22], ["numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "rotationy", "(", "theta", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "\n", "[", "np", ".", "cos", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ",", "0.0", ",", "np", ".", "sin", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "1.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ",", "0.0", ",", "np", ".", "cos", "(", "theta", "/", "180", "*", "np", ".", "pi", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.render_correspondences.load_ply_data": [[25, 40], ["plyfile.PlyData.read", "numpy.asarray", "numpy.asarray", "np.asarray.append", "mesh_vc.append", "np.asarray.append", "numpy.asarray", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "load_ply_data", "(", "mesh_path", ")", ":", "\n", "    ", "mesh", "=", "plyfile", ".", "PlyData", ".", "read", "(", "mesh_path", ")", "\n", "mesh_v", "=", "[", "]", "\n", "mesh_vc", "=", "[", "]", "\n", "mesh_f", "=", "[", "]", "\n", "for", "v", "in", "mesh", ".", "elements", "[", "0", "]", ":", "\n", "        ", "mesh_v", ".", "append", "(", "np", ".", "array", "(", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ")", ")", ")", "\n", "mesh_vc", ".", "append", "(", "np", ".", "array", "(", "(", "v", "[", "3", "]", ",", "v", "[", "4", "]", ",", "v", "[", "5", "]", ")", ")", ")", "\n", "", "for", "f", "in", "mesh", ".", "elements", "[", "1", "]", ":", "\n", "        ", "f", "=", "f", "[", "0", "]", "\n", "mesh_f", ".", "append", "(", "np", ".", "array", "(", "[", "f", "[", "0", "]", ",", "f", "[", "1", "]", ",", "f", "[", "2", "]", "]", ")", ")", "\n", "", "mesh_v", "=", "np", ".", "asarray", "(", "mesh_v", ")", "\n", "mesh_f", "=", "np", ".", "asarray", "(", "mesh_f", ")", "\n", "mesh_vc", "=", "np", ".", "asarray", "(", "mesh_vc", ")", "/", "255.0", "\n", "return", "mesh_v", ",", "mesh_vc", ",", "mesh_f", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.render_correspondences.main": [[42, 109], ["pyrender.Scene", "render_correspondences.load_ply_data", "trimesh.Trimesh", "pyrender.Mesh.from_trimesh", "pyrender.Scene.add", "pyrender.IntrinsicsCamera", "numpy.array", "pyrender.DirectionalLight", "pyrender.Scene.add", "pyrender.DirectionalLight", "pyrender.Scene.add", "pyrender.DirectionalLight", "pyrender.Scene.add", "pyrender.DirectionalLight", "pyrender.Scene.add", "pyrender.Scene.add", "pyrender.Viewer", "pyrender.Viewer.close", "numpy.array", "numpy.array", "numpy.array", "numpy.ones", "numpy.matmul", "numpy.ones", "numpy.matmul", "numpy.ones", "numpy.matmul", "numpy.ones", "numpy.matmul", "render_correspondences.rotationy", "render_correspondences.rotationx", "render_correspondences.rotationy", "render_correspondences.rotationx", "render_correspondences.rotationy", "render_correspondences.rotationx", "render_correspondences.rotationy", "render_correspondences.rotationx"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.render_correspondences.load_ply_data", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.render_correspondences.rotationy", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.render_correspondences.rotationx", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.render_correspondences.rotationy", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.render_correspondences.rotationx", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.render_correspondences.rotationy", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.render_correspondences.rotationx", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.render_correspondences.rotationy", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.render_correspondences.rotationx"], ["", "def", "main", "(", "mesh_path", ")", ":", "\n", "# rendering conf", "\n", "    ", "ambient_light", "=", "0.8", "\n", "directional_light", "=", "1.0", "\n", "img_res", "=", "512", "\n", "cam_f", "=", "500", "\n", "cam_c", "=", "img_res", "/", "2.0", "\n", "\n", "scene", "=", "Scene", "(", "ambient_light", "=", "np", ".", "array", "(", "[", "ambient_light", ",", "ambient_light", ",", "ambient_light", ",", "1.0", "]", ")", ")", "\n", "\n", "mesh_v", ",", "mesh_vc", ",", "mesh_f", "=", "load_ply_data", "(", "mesh_path", ")", "\n", "mesh_", "=", "trimesh", ".", "Trimesh", "(", "vertices", "=", "mesh_v", ",", "faces", "=", "mesh_f", ",", "vertex_colors", "=", "mesh_vc", ")", "\n", "points_mesh", "=", "Mesh", ".", "from_trimesh", "(", "mesh_", ",", "smooth", "=", "True", ",", "material", "=", "None", ")", "\n", "mesh_node", "=", "scene", ".", "add", "(", "points_mesh", ")", "\n", "\n", "cam", "=", "IntrinsicsCamera", "(", "fx", "=", "cam_f", ",", "fy", "=", "cam_f", ",", "cx", "=", "cam_c", ",", "cy", "=", "cam_c", ")", "\n", "cam_pose", "=", "np", ".", "array", "(", "[", "\n", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "1.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "1.0", ",", "2.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "\n", "]", ")", "\n", "\n", "direc_l", "=", "DirectionalLight", "(", "color", "=", "np", ".", "ones", "(", "3", ")", ",", "intensity", "=", "directional_light", ")", "\n", "light_node_1", "=", "scene", ".", "add", "(", "direc_l", ",", "pose", "=", "np", ".", "matmul", "(", "rotationy", "(", "30", ")", ",", "rotationx", "(", "45", ")", ")", ")", "\n", "direc_l", "=", "DirectionalLight", "(", "color", "=", "np", ".", "ones", "(", "3", ")", ",", "intensity", "=", "directional_light", ")", "\n", "light_node_2", "=", "scene", ".", "add", "(", "direc_l", ",", "pose", "=", "np", ".", "matmul", "(", "rotationy", "(", "-", "30", ")", ",", "rotationx", "(", "45", ")", ")", ")", "\n", "direc_l", "=", "DirectionalLight", "(", "color", "=", "np", ".", "ones", "(", "3", ")", ",", "intensity", "=", "directional_light", ")", "\n", "light_node_3", "=", "scene", ".", "add", "(", "direc_l", ",", "pose", "=", "np", ".", "matmul", "(", "rotationy", "(", "-", "180", ")", ",", "rotationx", "(", "45", ")", ")", ")", "\n", "direc_l", "=", "DirectionalLight", "(", "color", "=", "np", ".", "ones", "(", "3", ")", ",", "intensity", "=", "(", "directional_light", "-", "0.5", ")", ")", "\n", "light_node_4", "=", "scene", ".", "add", "(", "direc_l", ",", "pose", "=", "np", ".", "matmul", "(", "rotationy", "(", "0", ")", ",", "rotationx", "(", "-", "10", ")", ")", ")", "\n", "\n", "################", "\n", "# rendering", "\n", "cam_node", "=", "scene", ".", "add", "(", "cam", ",", "pose", "=", "cam_pose", ")", "\n", "render_flags", "=", "{", "\n", "'flip_wireframe'", ":", "False", ",", "\n", "'all_wireframe'", ":", "False", ",", "\n", "'all_solid'", ":", "False", ",", "\n", "'shadows'", ":", "True", ",", "\n", "'vertex_normals'", ":", "False", ",", "\n", "'face_normals'", ":", "False", ",", "\n", "'cull_faces'", ":", "True", ",", "\n", "'point_size'", ":", "1.0", ",", "\n", "}", "\n", "viewer_flags", "=", "{", "\n", "'mouse_pressed'", ":", "False", ",", "\n", "'rotate'", ":", "False", ",", "\n", "'rotate_rate'", ":", "np", ".", "pi", "/", "6.0", ",", "\n", "'rotate_axis'", ":", "np", ".", "array", "(", "[", "0.0", ",", "1.0", ",", "0.0", "]", ")", ",", "\n", "'view_center'", ":", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", "]", ")", ",", "\n", "'record'", ":", "False", ",", "\n", "'use_raymond_lighting'", ":", "False", ",", "\n", "'use_direct_lighting'", ":", "False", ",", "\n", "'lighting_intensity'", ":", "3.0", ",", "\n", "'use_perspective_cam'", ":", "True", ",", "\n", "'window_title'", ":", "'DIT'", ",", "\n", "'refresh_rate'", ":", "25.0", ",", "\n", "'fullscreen'", ":", "False", ",", "\n", "'show_world_axis'", ":", "False", ",", "\n", "'show_mesh_axes'", ":", "False", ",", "\n", "'caption'", ":", "None", ",", "\n", "'save_one_frame'", ":", "False", ",", "\n", "}", "\n", "v", "=", "Viewer", "(", "scene", ",", "viewport_size", "=", "(", "512", ",", "512", ")", ",", "render_flags", "=", "render_flags", ",", "\n", "viewer_flags", "=", "viewer_flags", ",", "run_in_thread", "=", "False", ")", "\n", "v", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.evaluate.evaluate_one_instance": [[16, 78], ["logging.debug", "deep_sdf.get_reconstructed_mesh_filename", "logging.debug", "os.path.join", "logging.debug", "os.path.join", "logging.debug", "trimesh.load", "trimesh.load", "numpy.load", "deep_sdf.metrics.chamfer.compute_trimesh_chamfer", "deep_sdf.metrics.chamfer.compute_trimesh_chamfer", "deep_sdf.metrics.emd.compute_trimesh_emd", "deep_sdf.metrics.emd.compute_trimesh_emd", "logging.debug", "os.path.isfile", "print", "os.path.join", "os.path.join", "str"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_reconstructed_mesh_filename", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.metrics.chamfer.compute_trimesh_chamfer", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.metrics.chamfer.compute_trimesh_chamfer", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.metrics.emd.compute_trimesh_emd", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.metrics.emd.compute_trimesh_emd"], ["def", "evaluate_one_instance", "(", "dataset", ",", "class_name", ",", "instance_name", ",", "experiment_directory", ",", "checkpoint", ",", "data_dir", ")", ":", "\n", "    ", "logging", ".", "debug", "(", "\n", "\"evaluating \"", "+", "os", ".", "path", ".", "join", "(", "dataset", ",", "class_name", ",", "instance_name", ")", "\n", ")", "\n", "reconstructed_mesh_filename", "=", "ws", ".", "get_reconstructed_mesh_filename", "(", "\n", "experiment_directory", ",", "checkpoint", ",", "dataset", ",", "class_name", ",", "instance_name", "\n", ")", "\n", "\n", "logging", ".", "debug", "(", "\n", "'reconstructed mesh is \"'", "+", "reconstructed_mesh_filename", "+", "'\"'", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "reconstructed_mesh_filename", ")", ":", "\n", "        ", "print", "(", "'[WARNING] Skipping %s as it doesn\\'t exists'", "%", "reconstructed_mesh_filename", ")", "\n", "return", "\"\"", ",", "0", "\n", "\n", "", "ground_truth_samples_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "data_dir", ",", "\n", "\"SurfaceSamples\"", ",", "\n", "dataset", ",", "\n", "class_name", ",", "\n", "instance_name", "+", "\".ply\"", ",", "\n", ")", "\n", "\n", "logging", ".", "debug", "(", "\n", "\"ground truth samples are \"", "+", "ground_truth_samples_filename", "\n", ")", "\n", "\n", "normalization_params_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "data_dir", ",", "\n", "\"NormalizationParameters\"", ",", "\n", "dataset", ",", "\n", "class_name", ",", "\n", "instance_name", "+", "\".npz\"", ",", "\n", ")", "\n", "\n", "logging", ".", "debug", "(", "\n", "\"normalization params are \"", "+", "ground_truth_samples_filename", "\n", ")", "\n", "\n", "ground_truth_points", "=", "trimesh", ".", "load", "(", "ground_truth_samples_filename", ")", "\n", "reconstruction", "=", "trimesh", ".", "load", "(", "reconstructed_mesh_filename", ")", "\n", "\n", "normalization_params", "=", "np", ".", "load", "(", "normalization_params_filename", ")", "\n", "\n", "chamfer_dist", "=", "deep_sdf", ".", "metrics", ".", "chamfer", ".", "compute_trimesh_chamfer", "(", "\n", "ground_truth_points", ",", "\n", "reconstruction", ",", "\n", "normalization_params", "[", "\"offset\"", "]", ",", "\n", "normalization_params", "[", "\"scale\"", "]", ",", "\n", ")", "\n", "\n", "earthmover_dist", "=", "deep_sdf", ".", "metrics", ".", "emd", ".", "compute_trimesh_emd", "(", "\n", "ground_truth_points", ",", "\n", "reconstruction", ",", "\n", "normalization_params", "[", "\"offset\"", "]", ",", "\n", "normalization_params", "[", "\"scale\"", "]", ",", "\n", ")", "\n", "\n", "logging", ".", "debug", "(", "\"chamfer distance: \"", "+", "str", "(", "chamfer_dist", ")", ")", "\n", "\n", "return", "os", ".", "path", ".", "join", "(", "dataset", ",", "class_name", ",", "instance_name", ")", ",", "chamfer_dist", ",", "earthmover_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.evaluate.evaluate": [[80, 119], ["pathos.multiprocessing.ProcessPool", "print", "print", "pathos.multiprocessing.ProcessPool.map", "print", "print", "open", "json.load", "numpy.mean", "numpy.median", "numpy.mean", "numpy.median", "open", "f.write", "enumerate", "os.path.join", "f.write", "ds.append", "cn.append", "inn.append", "exd.append", "ckp.append", "dtd.append", "deep_sdf.get_evaluation_dir"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_evaluation_dir"], ["", "def", "evaluate", "(", "experiment_directory", ",", "checkpoint", ",", "data_dir", ",", "split_filename", ")", ":", "\n", "\n", "    ", "with", "open", "(", "split_filename", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "split", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "chamfer_results", "=", "[", "]", "\n", "p", "=", "Pool", "(", "8", ")", "\n", "ds", "=", "[", "]", "\n", "cn", "=", "[", "]", "\n", "inn", "=", "[", "]", "\n", "exd", "=", "[", "]", "\n", "ckp", "=", "[", "]", "\n", "dtd", "=", "[", "]", "\n", "\n", "print", "(", "'data_preparing'", ")", "\n", "for", "dataset", "in", "split", ":", "\n", "        ", "for", "class_name", "in", "split", "[", "dataset", "]", ":", "\n", "            ", "for", "iii", ",", "instance_name", "in", "enumerate", "(", "split", "[", "dataset", "]", "[", "class_name", "]", ")", ":", "\n", "                ", "ds", ".", "append", "(", "dataset", ")", "\n", "cn", ".", "append", "(", "class_name", ")", "\n", "inn", ".", "append", "(", "instance_name", ")", "\n", "exd", ".", "append", "(", "experiment_directory", ")", "\n", "ckp", ".", "append", "(", "checkpoint", ")", "\n", "dtd", ".", "append", "(", "data_dir", ")", "\n", "\n", "", "", "", "print", "(", "'multi thread start'", ")", "\n", "chamfer_results", "=", "p", ".", "map", "(", "evaluate_one_instance", ",", "ds", ",", "cn", ",", "inn", ",", "exd", ",", "ckp", ",", "dtd", ")", "\n", "print", "(", "np", ".", "mean", "(", "[", "q", "[", "1", "]", "for", "q", "in", "chamfer_results", "]", ")", ",", "np", ".", "median", "(", "[", "q", "[", "1", "]", "for", "q", "in", "chamfer_results", "]", ")", ")", "\n", "print", "(", "np", ".", "mean", "(", "[", "q", "[", "2", "]", "for", "q", "in", "chamfer_results", "]", ")", ",", "np", ".", "median", "(", "[", "q", "[", "2", "]", "for", "q", "in", "chamfer_results", "]", ")", ")", "\n", "\n", "with", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "ws", ".", "get_evaluation_dir", "(", "experiment_directory", ",", "checkpoint", ",", "True", ")", ",", "\"chamfer_and_emd.csv\"", "\n", ")", ",", "\n", "\"w\"", ",", "\n", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "\"shape, chamfer_dist\\n\"", ")", "\n", "for", "result", "in", "chamfer_results", ":", "\n", "            ", "f", ".", "write", "(", "\"{}, {}, {}\\n\"", ".", "format", "(", "result", "[", "0", "]", ",", "result", "[", "1", "]", ",", "result", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.reconstruct_deep_implicit_templates.reconstruct": [[17, 90], ["int", "torch.optim.Adam", "torch.nn.L1Loss", "range", "type", "type", "torch.ones().normal_().cuda", "torch.normal().cuda", "decoder.eval", "deep_sdf.data.unpack_sdf_samples_from_ram().cuda", "deep_sdf.data.unpack_sdf_samples_from_ram().cuda", "sdf_data[].unsqueeze", "torch.clamp", "reconstruct_deep_implicit_templates.reconstruct.adjust_learning_rate"], "function", ["None"], ["def", "reconstruct", "(", "\n", "decoder", ",", "\n", "num_iterations", ",", "\n", "latent_size", ",", "\n", "test_sdf", ",", "\n", "stat", ",", "\n", "clamp_dist", ",", "\n", "num_samples", "=", "30000", ",", "\n", "lr", "=", "5e-4", ",", "\n", "l2reg", "=", "False", ",", "\n", ")", ":", "\n", "    ", "def", "adjust_learning_rate", "(", "\n", "initial_lr", ",", "optimizer", ",", "num_iterations", ",", "decreased_by", ",", "adjust_lr_every", "\n", ")", ":", "\n", "        ", "lr", "=", "initial_lr", "*", "(", "(", "1", "/", "decreased_by", ")", "**", "(", "num_iterations", "//", "adjust_lr_every", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "\"lr\"", "]", "=", "lr", "\n", "\n", "", "", "decreased_by", "=", "10", "\n", "adjust_lr_every", "=", "int", "(", "num_iterations", "/", "2", ")", "\n", "\n", "if", "type", "(", "stat", ")", "==", "type", "(", "0.1", ")", ":", "\n", "        ", "latent", "=", "torch", ".", "ones", "(", "1", ",", "latent_size", ")", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "stat", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "latent", "=", "torch", ".", "normal", "(", "stat", "[", "0", "]", ".", "detach", "(", ")", ",", "stat", "[", "1", "]", ".", "detach", "(", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "", "latent", ".", "requires_grad", "=", "True", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "[", "latent", "]", ",", "lr", "=", "lr", ")", "\n", "\n", "loss_num", "=", "0", "\n", "loss_l1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "for", "e", "in", "range", "(", "num_iterations", ")", ":", "\n", "\n", "        ", "decoder", ".", "eval", "(", ")", "\n", "sdf_data", "=", "deep_sdf", ".", "data", ".", "unpack_sdf_samples_from_ram", "(", "\n", "test_sdf", ",", "num_samples", "\n", ")", ".", "cuda", "(", ")", "\n", "xyz", "=", "sdf_data", "[", ":", ",", "0", ":", "3", "]", "\n", "sdf_gt", "=", "sdf_data", "[", ":", ",", "3", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "sdf_gt", "=", "torch", ".", "clamp", "(", "sdf_gt", ",", "-", "clamp_dist", ",", "clamp_dist", ")", "\n", "\n", "adjust_learning_rate", "(", "lr", ",", "optimizer", ",", "e", ",", "decreased_by", ",", "adjust_lr_every", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "latent_inputs", "=", "latent", ".", "expand", "(", "num_samples", ",", "-", "1", ")", "\n", "\n", "inputs", "=", "torch", ".", "cat", "(", "[", "latent_inputs", ",", "xyz", "]", ",", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "pred_sdf", "=", "decoder", "(", "inputs", ")", "\n", "\n", "# TODO: why is this needed?", "\n", "if", "e", "==", "0", ":", "\n", "            ", "pred_sdf", "=", "decoder", "(", "inputs", ")", "\n", "\n", "", "pred_sdf", "=", "torch", ".", "clamp", "(", "pred_sdf", ",", "-", "clamp_dist", ",", "clamp_dist", ")", "\n", "\n", "loss", "=", "loss_l1", "(", "pred_sdf", ",", "sdf_gt", ")", "\n", "if", "l2reg", ":", "\n", "            ", "loss", "+=", "1e-4", "*", "torch", ".", "mean", "(", "latent", ".", "pow", "(", "2", ")", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "e", "%", "50", "==", "0", ":", "\n", "            ", "logging", ".", "debug", "(", "loss", ".", "item", "(", ")", ")", "\n", "logging", ".", "debug", "(", "e", ")", "\n", "logging", ".", "debug", "(", "latent", ".", "norm", "(", ")", ")", "\n", "", "loss_num", "=", "loss", ".", "item", "(", ")", "\n", "\n", "", "return", "loss_num", ",", "latent", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.plot_log_multiple.running_mean": [[13, 20], ["numpy.asarray", "numpy.sort", "numpy.cumsum", "numpy.insert", "float", "len"], "function", ["None"], ["def", "running_mean", "(", "x", ",", "N", ")", ":", "\n", "    ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "x_sorted", "=", "np", ".", "sort", "(", "x", ")", "\n", "k", "=", "x_sorted", "[", "len", "(", "x", ")", "-", "200", "]", "\n", "x", "[", "x", ">", "k", "]", "=", "k", "\n", "cumsum", "=", "np", ".", "cumsum", "(", "np", ".", "insert", "(", "x", ",", "0", ",", "0", ")", ")", "\n", "return", "(", "cumsum", "[", "N", ":", "]", "-", "cumsum", "[", ":", "-", "N", "]", ")", "/", "float", "(", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.plot_log_multiple.load_logs": [[22, 49], ["matplotlib.subplots", "enumerate", "ax.grid", "ax.legend", "matplotlib.show", "torch.load", "logging.info", "len", "plot_log_multiple.running_mean", "os.path.join", "ax.plot", "ax.set", "Exception", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.plot_log.running_mean"], ["", "def", "load_logs", "(", "experiment_directories", ",", "type", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "for", "ei", ",", "experiment_directory", "in", "enumerate", "(", "experiment_directories", ")", ":", "\n", "\n", "        ", "logs", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "ws", ".", "logs_filename", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"latest epoch is {}\"", ".", "format", "(", "logs", "[", "\"epoch\"", "]", ")", ")", "\n", "\n", "num_iters", "=", "len", "(", "logs", "[", "\"loss\"", "]", ")", "\n", "iters_per_epoch", "=", "num_iters", "/", "logs", "[", "\"epoch\"", "]", "\n", "smoothed_loss_41", "=", "running_mean", "(", "logs", "[", "\"loss\"", "]", ",", "41", ")", "\n", "\n", "if", "type", "==", "\"loss\"", ":", "\n", "\n", "            ", "ax", ".", "plot", "(", "\n", "np", ".", "arange", "(", "20", ",", "num_iters", "-", "20", ")", "/", "iters_per_epoch", ",", "\n", "smoothed_loss_41", ",", "\n", "label", "=", "experiment_directory", ")", "\n", "\n", "ax", ".", "set", "(", "xlabel", "=", "\"Epoch\"", ",", "ylabel", "=", "\"Loss\"", ",", "title", "=", "\"Training Loss\"", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unrecognized plot type \"{}\"'", ".", "format", "(", "type", ")", ")", "\n", "\n", "", "", "ax", ".", "grid", "(", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.generate_template_mesh.code_to_mesh": [[14, 68], ["os.path.join", "json.load", "__import__", "__import__.Decoder", "torch.nn.DataParallel", "torch.load", "decoder.module.cuda.load_state_dict", "decoder.module.cuda.module.cuda", "decoder.module.cuda.eval", "os.path.join", "os.path.join", "print", "os.path.isfile", "Exception", "open", "os.path.join", "str", "os.path.isdir", "os.makedirs", "torch.no_grad", "deep_sdf.mesh.create_mesh", "deep_sdf.mesh.create_mesh", "int"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.mesh.create_mesh", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.mesh.create_mesh"], ["def", "code_to_mesh", "(", "experiment_directory", ",", "checkpoint", ")", ":", "\n", "\n", "    ", "specs_filename", "=", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "\"specs.json\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "specs_filename", ")", ":", "\n", "        ", "raise", "Exception", "(", "\n", "'The experiment directory does not include specifications file \"specs.json\"'", "\n", ")", "\n", "\n", "", "specs", "=", "json", ".", "load", "(", "open", "(", "specs_filename", ")", ")", "\n", "\n", "arch", "=", "__import__", "(", "\"networks.\"", "+", "specs", "[", "\"NetworkArch\"", "]", ",", "fromlist", "=", "[", "\"Decoder\"", "]", ")", "\n", "\n", "latent_size", "=", "specs", "[", "\"CodeLength\"", "]", "\n", "\n", "decoder", "=", "arch", ".", "Decoder", "(", "latent_size", ",", "**", "specs", "[", "\"NetworkSpecs\"", "]", ")", "\n", "decoder", "=", "torch", ".", "nn", ".", "DataParallel", "(", "decoder", ")", "\n", "\n", "saved_model_state", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "ws", ".", "model_params_subdir", ",", "checkpoint", "+", "\".pth\"", ")", "\n", ")", "\n", "saved_model_epoch", "=", "saved_model_state", "[", "\"epoch\"", "]", "\n", "\n", "decoder", ".", "load_state_dict", "(", "saved_model_state", "[", "\"model_state_dict\"", "]", ")", "\n", "\n", "decoder", "=", "decoder", ".", "module", ".", "cuda", "(", ")", "\n", "\n", "decoder", ".", "eval", "(", ")", "\n", "\n", "mesh_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "experiment_directory", ",", "\n", "ws", ".", "training_meshes_subdir", ",", "\n", "str", "(", "saved_model_epoch", ")", ",", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "mesh_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "mesh_dir", ")", "\n", "\n", "", "mesh_filename", "=", "os", ".", "path", ".", "join", "(", "mesh_dir", ",", "'template'", ")", "\n", "\n", "print", "(", "mesh_filename", ")", "\n", "offset", "=", "None", "\n", "scale", "=", "None", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "deep_sdf", ".", "mesh", ".", "create_mesh", "(", "\n", "decoder", ".", "forward_template", ",", "\n", "None", ",", "\n", "mesh_filename", ",", "\n", "N", "=", "512", ",", "\n", "max_batch", "=", "int", "(", "2", "**", "20", ")", ",", "\n", "offset", "=", "offset", ",", "\n", "scale", "=", "scale", ",", "\n", "volume_size", "=", "2.0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.objio.load_obj_data": [[4, 77], ["open", "open.readlines", "open.close", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "line.strip().split", "list", "len", "filter", "np.asarray.append", "np.asarray.append", "np.asarray.append", "objio.load_obj_data.segElementData"], "function", ["None"], ["def", "load_obj_data", "(", "filename", ")", ":", "\n", "    ", "\"\"\"load model data from .obj file\"\"\"", "\n", "v_list", "=", "[", "]", "# vertex coordinate", "\n", "vt_list", "=", "[", "]", "# vertex texture coordinate", "\n", "vc_list", "=", "[", "]", "# vertex color", "\n", "vn_list", "=", "[", "]", "# vertex normal", "\n", "f_list", "=", "[", "]", "# face vertex indices", "\n", "fn_list", "=", "[", "]", "# face normal indices", "\n", "ft_list", "=", "[", "]", "# face texture indices", "\n", "\n", "# read data", "\n", "fp", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "fp", ".", "close", "(", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "len", "(", "line", ")", "<", "2", ":", "\n", "            ", "continue", "\n", "", "line_data", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "line_data", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", ">", "0", ",", "line_data", ")", ")", "\n", "# parse vertex cocordinate", "\n", "if", "line_data", "[", "0", "]", "==", "'v'", ":", "\n", "            ", "v_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ",", "float", "(", "line_data", "[", "3", "]", ")", ")", ")", "\n", "if", "len", "(", "line_data", ")", "==", "7", ":", "\n", "                ", "vc_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "4", "]", ")", ",", "float", "(", "line_data", "[", "5", "]", ")", ",", "float", "(", "line_data", "[", "6", "]", ")", ")", ")", "\n", "\n", "# parse vertex texture coordinate", "\n", "", "", "if", "line_data", "[", "0", "]", "==", "'vt'", ":", "\n", "            ", "vt_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ")", ")", "\n", "\n", "# parse vertex normal", "\n", "", "if", "line_data", "[", "0", "]", "==", "'vn'", ":", "\n", "            ", "vn_list", ".", "append", "(", "(", "float", "(", "line_data", "[", "1", "]", ")", ",", "float", "(", "line_data", "[", "2", "]", ")", ",", "float", "(", "line_data", "[", "3", "]", ")", ")", ")", "\n", "\n", "# parse face", "\n", "", "if", "line_data", "[", "0", "]", "==", "'f'", ":", "\n", "# used for parsing face element data", "\n", "            ", "def", "segElementData", "(", "ele_str", ")", ":", "\n", "                ", "fv", "=", "None", "\n", "ft", "=", "None", "\n", "fn", "=", "None", "\n", "eles", "=", "ele_str", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "\n", "if", "len", "(", "eles", ")", "==", "1", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "", "elif", "len", "(", "eles", ")", "==", "2", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "ft", "=", "int", "(", "eles", "[", "1", "]", ")", "-", "1", "\n", "", "elif", "len", "(", "eles", ")", "==", "3", ":", "\n", "                    ", "fv", "=", "int", "(", "eles", "[", "0", "]", ")", "-", "1", "\n", "fn", "=", "int", "(", "eles", "[", "2", "]", ")", "-", "1", "\n", "ft", "=", "None", "if", "eles", "[", "1", "]", "==", "''", "else", "int", "(", "eles", "[", "1", "]", ")", "-", "1", "\n", "", "return", "fv", ",", "ft", ",", "fn", "\n", "\n", "", "fv0", ",", "ft0", ",", "fn0", "=", "segElementData", "(", "line_data", "[", "1", "]", ")", "\n", "fv1", ",", "ft1", ",", "fn1", "=", "segElementData", "(", "line_data", "[", "2", "]", ")", "\n", "fv2", ",", "ft2", ",", "fn2", "=", "segElementData", "(", "line_data", "[", "3", "]", ")", "\n", "f_list", ".", "append", "(", "(", "fv0", ",", "fv1", ",", "fv2", ")", ")", "\n", "if", "ft0", "is", "not", "None", "and", "ft1", "is", "not", "None", "and", "ft2", "is", "not", "None", ":", "\n", "                ", "ft_list", ".", "append", "(", "(", "ft0", ",", "ft1", ",", "ft2", ")", ")", "\n", "", "if", "fn0", "is", "not", "None", "and", "fn1", "is", "not", "None", "and", "fn2", "is", "not", "None", ":", "\n", "                ", "fn_list", ".", "append", "(", "(", "fn0", ",", "fn1", ",", "fn2", ")", ")", "\n", "\n", "", "", "", "v_list", "=", "np", ".", "asarray", "(", "v_list", ")", "\n", "vn_list", "=", "np", ".", "asarray", "(", "vn_list", ")", "\n", "vt_list", "=", "np", ".", "asarray", "(", "vt_list", ")", "\n", "vc_list", "=", "np", ".", "asarray", "(", "vc_list", ")", "\n", "f_list", "=", "np", ".", "asarray", "(", "f_list", ")", "\n", "ft_list", "=", "np", ".", "asarray", "(", "ft_list", ")", "\n", "fn_list", "=", "np", ".", "asarray", "(", "fn_list", ")", "\n", "\n", "model", "=", "{", "'v'", ":", "v_list", ",", "'vt'", ":", "vt_list", ",", "'vc'", ":", "vc_list", ",", "'vn'", ":", "vn_list", ",", "\n", "'f'", ":", "f_list", ",", "'ft'", ":", "ft_list", ",", "'fn'", ":", "fn_list", "}", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.objio.save_obj_data": [[79, 125], ["open", "zip", "fp.write", "fp.write", "zip", "fp.write", "fp.write", "fp.write", "zip", "numpy.copy", "numpy.copy", "numpy.copy", "fp.write", "zip", "numpy.copy", "numpy.copy", "fp.write", "fp.write", "numpy.copy", "numpy.copy", "numpy.copy"], "function", ["None"], ["", "def", "save_obj_data", "(", "filename", ",", "model", ")", ":", "\n", "    ", "assert", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", "\n", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "if", "'v'", "in", "model", "and", "model", "[", "'v'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "if", "'vc'", "in", "model", "and", "model", "[", "'vc'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "for", "v", ",", "vc", "in", "zip", "(", "model", "[", "'v'", "]", ",", "model", "[", "'vc'", "]", ")", ":", "\n", "                    ", "fp", ".", "write", "(", "'v %f %f %f %f %f %f\\n'", "%", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ",", "vc", "[", "0", "]", ",", "vc", "[", "1", "]", ",", "vc", "[", "2", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "v", "in", "model", "[", "'v'", "]", ":", "\n", "                    ", "fp", ".", "write", "(", "'v %f %f %f\\n'", "%", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ")", ")", "\n", "\n", "", "", "", "if", "'vn'", "in", "model", "and", "model", "[", "'vn'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vn", "in", "model", "[", "'vn'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vn %f %f %f\\n'", "%", "(", "vn", "[", "0", "]", ",", "vn", "[", "1", "]", ",", "vn", "[", "2", "]", ")", ")", "\n", "\n", "", "", "if", "'vt'", "in", "model", "and", "model", "[", "'vt'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "for", "vt", "in", "model", "[", "'vt'", "]", ":", "\n", "                ", "fp", ".", "write", "(", "'vt %f %f\\n'", "%", "(", "vt", "[", "0", "]", ",", "vt", "[", "1", "]", ")", ")", "\n", "\n", "", "", "if", "'f'", "in", "model", "and", "model", "[", "'f'", "]", ".", "size", "!=", "0", ":", "\n", "            ", "if", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", "and", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d/%d %d/%d/%d %d/%d/%d\\n'", "%", "\n", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'fn'", "in", "model", "and", "model", "[", "'fn'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'fn'", "]", ".", "size", "\n", "for", "f_", ",", "fn_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'fn'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "fn", "=", "np", ".", "copy", "(", "fn_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d//%d %d//%d %d//%d\\n'", "%", "(", "f", "[", "0", "]", ",", "fn", "[", "0", "]", ",", "f", "[", "1", "]", ",", "fn", "[", "1", "]", ",", "f", "[", "2", "]", ",", "fn", "[", "2", "]", ")", ")", "\n", "", "", "elif", "'ft'", "in", "model", "and", "model", "[", "'ft'", "]", ".", "size", "!=", "0", ":", "\n", "                ", "assert", "model", "[", "'f'", "]", ".", "size", "==", "model", "[", "'ft'", "]", ".", "size", "\n", "for", "f_", ",", "ft_", "in", "zip", "(", "model", "[", "'f'", "]", ",", "model", "[", "'ft'", "]", ")", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "ft", "=", "np", ".", "copy", "(", "ft_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d/%d %d/%d %d/%d\\n'", "%", "(", "f", "[", "0", "]", ",", "ft", "[", "0", "]", ",", "f", "[", "1", "]", ",", "ft", "[", "1", "]", ",", "f", "[", "2", "]", ",", "ft", "[", "2", "]", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "f_", "in", "model", "[", "'f'", "]", ":", "\n", "                    ", "f", "=", "np", ".", "copy", "(", "f_", ")", "+", "1", "\n", "fp", ".", "write", "(", "'f %d %d %d\\n'", "%", "(", "f", "[", "0", "]", ",", "f", "[", "1", "]", ",", "f", "[", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.get_spec_with_default": [[24, 29], ["None"], "function", ["None"], ["def", "get_spec_with_default", "(", "specs", ",", "key", ",", "default", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "specs", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "        ", "return", "default", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.get_mean_latent_vector_magnitude": [[31, 33], ["torch.mean", "torch.mean", "torch.mean", "torch.norm", "torch.norm", "torch.norm", "latent_vectors.weight.data.detach"], "function", ["None"], ["", "", "def", "get_mean_latent_vector_magnitude", "(", "latent_vectors", ")", ":", "\n", "    ", "return", "torch", ".", "mean", "(", "torch", ".", "norm", "(", "latent_vectors", ".", "weight", ".", "data", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.append_parameter_magnitudes": [[35, 42], ["model.named_parameters", "param_mag_log[].append", "param_mag_log.keys", "param.data.norm().item", "len", "param.data.norm"], "function", ["None"], ["", "def", "append_parameter_magnitudes", "(", "param_mag_log", ",", "model", ")", ":", "\n", "    ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "len", "(", "name", ")", ">", "7", "and", "name", "[", ":", "7", "]", "==", "\"module.\"", ":", "\n", "            ", "name", "=", "name", "[", "7", ":", "]", "\n", "", "if", "name", "not", "in", "param_mag_log", ".", "keys", "(", ")", ":", "\n", "            ", "param_mag_log", "[", "name", "]", "=", "[", "]", "\n", "", "param_mag_log", "[", "name", "]", ".", "append", "(", "param", ".", "data", ".", "norm", "(", ")", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.apply_curriculum_l1_loss": [[44, 56], ["range", "len", "sdf_loss.append", "sum", "len", "loss_l1_soft"], "function", ["None"], ["", "", "def", "apply_curriculum_l1_loss", "(", "pred_sdf_list", ",", "sdf_gt", ",", "loss_l1_soft", ",", "num_sdf_samples", ")", ":", "\n", "    ", "soft_l1_eps_list", "=", "[", "2.5e-2", ",", "1e-2", ",", "2.5e-3", ",", "0", "]", "\n", "soft_l1_lamb_list", "=", "[", "0", ",", "0.1", ",", "0.2", ",", "0.5", "]", "\n", "sdf_loss", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "pred_sdf_list", ")", ")", ":", "\n", "        ", "eps", "=", "soft_l1_eps_list", "[", "k", "]", "\n", "lamb", "=", "soft_l1_lamb_list", "[", "k", "]", "\n", "l", "=", "loss_l1_soft", "(", "pred_sdf_list", "[", "k", "]", ",", "sdf_gt", ",", "eps", "=", "eps", ",", "lamb", "=", "lamb", ")", "/", "num_sdf_samples", "\n", "# l = loss_l1(pred_sdf_list[k], sdf_gt[i].cuda()) / num_sdf_samples", "\n", "sdf_loss", ".", "append", "(", "l", ")", "\n", "", "sdf_loss", "=", "sum", "(", "sdf_loss", ")", "/", "len", "(", "sdf_loss", ")", "\n", "return", "sdf_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.apply_pointwise_reg": [[58, 66], ["range", "len", "torch.norm", "torch.norm", "torch.norm", "pw_loss.append", "sum", "len", "huber_fn"], "function", ["None"], ["", "def", "apply_pointwise_reg", "(", "warped_xyz_list", ",", "xyz_", ",", "huber_fn", ",", "num_sdf_samples", ")", ":", "\n", "    ", "pw_loss", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "warped_xyz_list", ")", ")", ":", "\n", "        ", "dist", "=", "torch", ".", "norm", "(", "warped_xyz_list", "[", "k", "]", "-", "xyz_", ",", "dim", "=", "-", "1", ")", "\n", "pw_loss", ".", "append", "(", "huber_fn", "(", "dist", ",", "delta", "=", "0.25", ")", "/", "num_sdf_samples", ")", "\n", "# pw_loss.append(torch.sum((warped_xyz_list[k] - xyz_) ** 2) / num_sdf_samples)", "\n", "", "pw_loss", "=", "sum", "(", "pw_loss", ")", "/", "len", "(", "pw_loss", ")", "\n", "return", "pw_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.apply_pointpair_reg": [[68, 83], ["xyz_.view", "delta_xyz.view", "torch.sum", "torch.sum", "torch.sum", "loss_lp", "xyz_reshaped[].view", "xyz_reshaped[].view", "delta_xyz_reshape[].view", "delta_xyz_reshape[].view"], "function", ["None"], ["", "def", "apply_pointpair_reg", "(", "warped_xyz_list", ",", "xyz_", ",", "loss_lp", ",", "scene_per_split", ",", "num_sdf_samples", ")", ":", "\n", "    ", "delta_xyz", "=", "warped_xyz_list", "[", "-", "1", "]", "-", "xyz_", "\n", "xyz_reshaped", "=", "xyz_", ".", "view", "(", "(", "scene_per_split", ",", "-", "1", ",", "3", ")", ")", "\n", "delta_xyz_reshape", "=", "delta_xyz", ".", "view", "(", "(", "scene_per_split", ",", "-", "1", ",", "3", ")", ")", "\n", "k", "=", "xyz_reshaped", ".", "shape", "[", "1", "]", "//", "8", "\n", "lp_loss", "=", "torch", ".", "sum", "(", "loss_lp", "(", "\n", "xyz_reshaped", "[", ":", ",", ":", "k", "]", ".", "view", "(", "scene_per_split", ",", "-", "1", ",", "1", ",", "3", ")", ",", "\n", "xyz_reshaped", "[", ":", ",", "k", ":", "]", ".", "view", "(", "scene_per_split", ",", "1", ",", "-", "1", ",", "3", ")", ",", "\n", "delta_xyz_reshape", "[", ":", ",", ":", "k", "]", ".", "view", "(", "scene_per_split", ",", "-", "1", ",", "1", ",", "3", ")", ",", "\n", "delta_xyz_reshape", "[", ":", ",", "k", ":", "]", ".", "view", "(", "scene_per_split", ",", "1", ",", "-", "1", ",", "3", ")", ",", "\n", ")", ")", "/", "num_sdf_samples", "\n", "# lp_loss = torch.sum(", "\n", "#     loss_sm(xyz_, delta_xyz)", "\n", "# ) / num_sdf_samples", "\n", "return", "lp_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.main_function": [[85, 460], ["logging.info", "datetime.datetime.now", "os.path.join", "deep_sdf.create_code_snapshot", "deep_sdf.load_experiment_specifications", "logging.info", "__import__", "logging.info", "list", "list.sort", "deep_sdf.lr_schedule.get_learning_rate_schedules", "train_deep_implicit_templates.get_spec_with_default", "signal.signal", "train_deep_implicit_templates.get_spec_with_default", "train_deep_implicit_templates.get_spec_with_default", "train_deep_implicit_templates.get_spec_with_default", "__import__.Decoder().cuda", "logging.info", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "train_deep_implicit_templates.get_spec_with_default", "deep_sdf.data.SDFSamples", "deep_sdf.data.SDFSamples", "deep_sdf.data.SDFSamples", "logging.debug", "torch.DataLoader", "logging.debug", "len", "logging.info", "logging.info", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "logging.debug", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "deep_sdf.SoftL1Loss", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "deep_sdf.HuberFunc", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "deep_sdf.create_tensorboard_saver", "logging.info", "logging.info", "logging.info", "train_deep_implicit_templates.get_spec_with_default", "train_deep_implicit_templates.get_spec_with_default", "train_deep_implicit_templates.get_spec_with_default", "train_deep_implicit_templates.get_spec_with_default", "train_deep_implicit_templates.get_spec_with_default", "logging.info", "range", "range", "list.append", "logging.debug", "deep_sdf.save_model", "deep_sdf.save_optimizer", "deep_sdf.save_latent_vectors", "deep_sdf.save_model", "deep_sdf.save_optimizer", "deep_sdf.save_latent_vectors", "logging.info", "sys.exit", "enumerate", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.mean", "torch.mean", "torch.mean", "torch.var", "torch.var", "torch.var", "open", "json.load", "train_deep_implicit_templates.get_spec_with_default", "deep_sdf.LipschitzLoss", "time.time", "logging.info", "torch.nn.DataParallel.train", "train_deep_implicit_templates.main_function.adjust_learning_rate"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.create_code_snapshot", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.load_experiment_specifications", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.lr_schedule.get_learning_rate_schedules", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.get_spec_with_default", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.get_spec_with_default", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.get_spec_with_default", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.get_spec_with_default", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.get_spec_with_default", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.create_tensorboard_saver", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.get_spec_with_default", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.get_spec_with_default", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.get_spec_with_default", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.get_spec_with_default", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.get_spec_with_default", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.save_model", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.save_optimizer", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.save_latent_vectors", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.save_model", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.save_optimizer", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.save_latent_vectors", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.train_deep_implicit_templates.get_spec_with_default"], ["", "def", "main_function", "(", "experiment_directory", ",", "data_source", ",", "continue_from", ",", "batch_split", ")", ":", "\n", "\n", "    ", "logging", ".", "info", "(", "\"running \"", "+", "experiment_directory", ")", "\n", "\n", "# backup code", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "code_bk_path", "=", "os", ".", "path", ".", "join", "(", "\n", "experiment_directory", ",", "'code_bk_%s.tar.gz'", "%", "now", ".", "strftime", "(", "'%Y_%m_%d_%H_%M_%S'", ")", ")", "\n", "ws", ".", "create_code_snapshot", "(", "'./'", ",", "code_bk_path", ",", "\n", "extensions", "=", "(", "'.py'", ",", "'.json'", ",", "'.cpp'", ",", "'.cu'", ",", "'.h'", ",", "'.sh'", ")", ",", "\n", "exclude", "=", "(", "'examples'", ",", "'third-party'", ",", "'bin'", ")", ")", "\n", "\n", "specs", "=", "ws", ".", "load_experiment_specifications", "(", "experiment_directory", ")", "\n", "\n", "logging", ".", "info", "(", "\"Experiment description: \\n\"", "+", "specs", "[", "\"Description\"", "]", ")", "\n", "\n", "# data_source = specs[\"DataSource\"]", "\n", "train_split_file", "=", "specs", "[", "\"TrainSplit\"", "]", "\n", "\n", "arch", "=", "__import__", "(", "\"networks.\"", "+", "specs", "[", "\"NetworkArch\"", "]", ",", "fromlist", "=", "[", "\"Decoder\"", "]", ")", "\n", "\n", "logging", ".", "info", "(", "specs", "[", "\"NetworkSpecs\"", "]", ")", "\n", "\n", "latent_size", "=", "specs", "[", "\"CodeLength\"", "]", "\n", "\n", "checkpoints", "=", "list", "(", "\n", "range", "(", "\n", "specs", "[", "\"SnapshotFrequency\"", "]", ",", "\n", "specs", "[", "\"NumEpochs\"", "]", "+", "1", ",", "\n", "specs", "[", "\"SnapshotFrequency\"", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "for", "checkpoint", "in", "specs", "[", "\"AdditionalSnapshots\"", "]", ":", "\n", "        ", "checkpoints", ".", "append", "(", "checkpoint", ")", "\n", "", "checkpoints", ".", "sort", "(", ")", "\n", "\n", "lr_schedules", "=", "get_learning_rate_schedules", "(", "specs", ")", "\n", "\n", "grad_clip", "=", "get_spec_with_default", "(", "specs", ",", "\"GradientClipNorm\"", ",", "None", ")", "\n", "if", "grad_clip", "is", "not", "None", ":", "\n", "        ", "logging", ".", "debug", "(", "\"clipping gradients to max norm {}\"", ".", "format", "(", "grad_clip", ")", ")", "\n", "\n", "", "def", "save_latest", "(", "epoch", ")", ":", "\n", "\n", "        ", "ws", ".", "save_model", "(", "experiment_directory", ",", "\"latest.pth\"", ",", "decoder", ",", "epoch", ")", "\n", "ws", ".", "save_optimizer", "(", "experiment_directory", ",", "\"latest.pth\"", ",", "optimizer_all", ",", "epoch", ")", "\n", "ws", ".", "save_latent_vectors", "(", "experiment_directory", ",", "\"latest.pth\"", ",", "lat_vecs", ",", "epoch", ")", "\n", "\n", "", "def", "save_checkpoints", "(", "epoch", ")", ":", "\n", "\n", "        ", "ws", ".", "save_model", "(", "experiment_directory", ",", "str", "(", "epoch", ")", "+", "\".pth\"", ",", "decoder", ",", "epoch", ")", "\n", "ws", ".", "save_optimizer", "(", "experiment_directory", ",", "str", "(", "epoch", ")", "+", "\".pth\"", ",", "optimizer_all", ",", "epoch", ")", "\n", "ws", ".", "save_latent_vectors", "(", "experiment_directory", ",", "str", "(", "epoch", ")", "+", "\".pth\"", ",", "lat_vecs", ",", "epoch", ")", "\n", "\n", "", "def", "signal_handler", "(", "sig", ",", "frame", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Stopping early...\"", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "def", "adjust_learning_rate", "(", "lr_schedules", ",", "optimizer", ",", "epoch", ")", ":", "\n", "\n", "        ", "for", "i", ",", "param_group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "            ", "param_group", "[", "\"lr\"", "]", "=", "lr_schedules", "[", "i", "]", ".", "get_learning_rate", "(", "epoch", ")", "\n", "\n", "", "", "def", "empirical_stat", "(", "latent_vecs", ",", "indices", ")", ":", "\n", "        ", "lat_mat", "=", "torch", ".", "zeros", "(", "0", ")", ".", "cuda", "(", ")", "\n", "for", "ind", "in", "indices", ":", "\n", "            ", "lat_mat", "=", "torch", ".", "cat", "(", "[", "lat_mat", ",", "latent_vecs", "[", "ind", "]", "]", ",", "0", ")", "\n", "", "mean", "=", "torch", ".", "mean", "(", "lat_mat", ",", "0", ")", "\n", "var", "=", "torch", ".", "var", "(", "lat_mat", ",", "0", ")", "\n", "return", "mean", ",", "var", "\n", "\n", "", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "signal_handler", ")", "\n", "\n", "num_samp_per_scene", "=", "specs", "[", "\"SamplesPerScene\"", "]", "\n", "scene_per_batch", "=", "specs", "[", "\"ScenesPerBatch\"", "]", "\n", "clamp_dist", "=", "specs", "[", "\"ClampingDistance\"", "]", "\n", "minT", "=", "-", "clamp_dist", "\n", "maxT", "=", "clamp_dist", "\n", "enforce_minmax", "=", "True", "\n", "\n", "assert", "(", "scene_per_batch", "%", "batch_split", "==", "0", ")", "# requirements for computing chamfer loss", "\n", "scene_per_split", "=", "scene_per_batch", "//", "batch_split", "\n", "\n", "do_code_regularization", "=", "get_spec_with_default", "(", "specs", ",", "\"CodeRegularization\"", ",", "True", ")", "\n", "code_reg_lambda", "=", "get_spec_with_default", "(", "specs", ",", "\"CodeRegularizationLambda\"", ",", "1e-4", ")", "\n", "\n", "code_bound", "=", "get_spec_with_default", "(", "specs", ",", "\"CodeBound\"", ",", "None", ")", "\n", "\n", "decoder", "=", "arch", ".", "Decoder", "(", "latent_size", ",", "**", "specs", "[", "\"NetworkSpecs\"", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\"training with {} GPU(s)\"", ".", "format", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ")", "\n", "\n", "# if torch.cuda.device_count() > 1:", "\n", "decoder", "=", "torch", ".", "nn", ".", "DataParallel", "(", "decoder", ")", "\n", "\n", "num_epochs", "=", "specs", "[", "\"NumEpochs\"", "]", "\n", "log_frequency", "=", "get_spec_with_default", "(", "specs", ",", "\"LogFrequency\"", ",", "10", ")", "\n", "\n", "with", "open", "(", "train_split_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "train_split", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "sdf_dataset", "=", "deep_sdf", ".", "data", ".", "SDFSamples", "(", "\n", "data_source", ",", "train_split", ",", "num_samp_per_scene", ",", "load_ram", "=", "True", "\n", ")", "\n", "\n", "if", "sdf_dataset", ".", "load_ram", ":", "\n", "        ", "num_data_loader_threads", "=", "0", "\n", "", "else", ":", "\n", "        ", "num_data_loader_threads", "=", "get_spec_with_default", "(", "specs", ",", "\"DataLoaderThreads\"", ",", "1", ")", "\n", "", "logging", ".", "debug", "(", "\"loading data with {} threads\"", ".", "format", "(", "num_data_loader_threads", ")", ")", "\n", "\n", "sdf_loader", "=", "data_utils", ".", "DataLoader", "(", "\n", "sdf_dataset", ",", "\n", "batch_size", "=", "scene_per_batch", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_data_loader_threads", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "logging", ".", "debug", "(", "\"torch num_threads: {}\"", ".", "format", "(", "torch", ".", "get_num_threads", "(", ")", ")", ")", "\n", "\n", "num_scenes", "=", "len", "(", "sdf_dataset", ")", "\n", "\n", "logging", ".", "info", "(", "\"There are {} scenes\"", ".", "format", "(", "num_scenes", ")", ")", "\n", "\n", "logging", ".", "info", "(", "decoder", ")", "\n", "\n", "lat_vecs", "=", "torch", ".", "nn", ".", "Embedding", "(", "num_scenes", ",", "latent_size", ",", "max_norm", "=", "code_bound", ")", "\n", "torch", ".", "nn", ".", "init", ".", "normal_", "(", "\n", "lat_vecs", ".", "weight", ".", "data", ",", "\n", "0.0", ",", "\n", "get_spec_with_default", "(", "specs", ",", "\"CodeInitStdDev\"", ",", "1.0", ")", "/", "math", ".", "sqrt", "(", "latent_size", ")", ",", "\n", ")", "\n", "\n", "logging", ".", "debug", "(", "\n", "\"initialized with mean magnitude {}\"", ".", "format", "(", "\n", "get_mean_latent_vector_magnitude", "(", "lat_vecs", ")", "\n", ")", "\n", ")", "\n", "\n", "loss_l1", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "\"sum\"", ")", "\n", "loss_l1_soft", "=", "loss", ".", "SoftL1Loss", "(", "reduction", "=", "\"sum\"", ")", "\n", "loss_lp", "=", "torch", ".", "nn", ".", "DataParallel", "(", "loss", ".", "LipschitzLoss", "(", "k", "=", "0.5", ",", "reduction", "=", "\"sum\"", ")", ")", "\n", "huber_fn", "=", "loss", ".", "HuberFunc", "(", "reduction", "=", "\"sum\"", ")", "\n", "\n", "optimizer_all", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "[", "\n", "{", "\n", "\"params\"", ":", "decoder", ".", "module", ".", "warper", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "lr_schedules", "[", "0", "]", ".", "get_learning_rate", "(", "0", ")", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "decoder", ".", "module", ".", "sdf_decoder", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "lr_schedules", "[", "1", "]", ".", "get_learning_rate", "(", "0", ")", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "lat_vecs", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "lr_schedules", "[", "2", "]", ".", "get_learning_rate", "(", "0", ")", ",", "\n", "}", ",", "\n", "]", "\n", ")", "\n", "\n", "tensorboard_saver", "=", "ws", ".", "create_tensorboard_saver", "(", "experiment_directory", ")", "\n", "\n", "loss_log", "=", "[", "]", "\n", "lr_log", "=", "[", "]", "\n", "lat_mag_log", "=", "[", "]", "\n", "timing_log", "=", "[", "]", "\n", "param_mag_log", "=", "{", "}", "\n", "\n", "start_epoch", "=", "1", "\n", "\n", "if", "continue_from", "is", "not", "None", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "ws", ".", "latent_codes_subdir", ",", "continue_from", "+", "\".pth\"", ")", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "ws", ".", "model_params_subdir", ",", "continue_from", "+", "\".pth\"", ")", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "ws", ".", "optimizer_params_subdir", ",", "continue_from", "+", "\".pth\"", ")", ")", ":", "\n", "            ", "logging", ".", "warning", "(", "'\"{}\" does not exist! Ignoring this argument...'", ".", "format", "(", "continue_from", ")", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'continuing from \"{}\"'", ".", "format", "(", "continue_from", ")", ")", "\n", "\n", "lat_epoch", "=", "ws", ".", "load_latent_vectors", "(", "\n", "experiment_directory", ",", "continue_from", "+", "\".pth\"", ",", "lat_vecs", "\n", ")", "\n", "\n", "model_epoch", "=", "ws", ".", "load_model_parameters", "(", "\n", "experiment_directory", ",", "continue_from", ",", "decoder", "\n", ")", "\n", "\n", "optimizer_epoch", "=", "ws", ".", "load_optimizer", "(", "\n", "experiment_directory", ",", "continue_from", "+", "\".pth\"", ",", "optimizer_all", "\n", ")", "\n", "\n", "loss_log", ",", "lr_log", ",", "timing_log", ",", "lat_mag_log", ",", "param_mag_log", ",", "log_epoch", "=", "ws", ".", "load_logs", "(", "\n", "experiment_directory", "\n", ")", "\n", "\n", "if", "not", "log_epoch", "==", "model_epoch", ":", "\n", "                ", "loss_log", ",", "lr_log", ",", "timing_log", ",", "lat_mag_log", ",", "param_mag_log", "=", "ws", ".", "clip_logs", "(", "\n", "loss_log", ",", "lr_log", ",", "timing_log", ",", "lat_mag_log", ",", "param_mag_log", ",", "model_epoch", "\n", ")", "\n", "\n", "", "if", "not", "(", "model_epoch", "==", "optimizer_epoch", "and", "model_epoch", "==", "lat_epoch", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"epoch mismatch: {} vs {} vs {} vs {}\"", ".", "format", "(", "\n", "model_epoch", ",", "optimizer_epoch", ",", "lat_epoch", ",", "log_epoch", "\n", ")", "\n", ")", "\n", "\n", "", "start_epoch", "=", "model_epoch", "+", "1", "\n", "\n", "logging", ".", "debug", "(", "\"loaded\"", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "\"starting from epoch {}\"", ".", "format", "(", "start_epoch", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\n", "\"Number of decoder parameters: {}\"", ".", "format", "(", "\n", "sum", "(", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "decoder", ".", "parameters", "(", ")", ")", "\n", ")", "\n", ")", "\n", "logging", ".", "info", "(", "\n", "\"Number of shape code parameters: {} (# codes {}, code dim {})\"", ".", "format", "(", "\n", "lat_vecs", ".", "num_embeddings", "*", "lat_vecs", ".", "embedding_dim", ",", "\n", "lat_vecs", ".", "num_embeddings", ",", "\n", "lat_vecs", ".", "embedding_dim", ",", "\n", ")", "\n", ")", "\n", "\n", "use_curriculum", "=", "get_spec_with_default", "(", "specs", ",", "\"UseCurriculum\"", ",", "False", ")", "\n", "\n", "use_pointwise_loss", "=", "get_spec_with_default", "(", "specs", ",", "\"UsePointwiseLoss\"", ",", "False", ")", "\n", "pointwise_loss_weight", "=", "get_spec_with_default", "(", "specs", ",", "\"PointwiseLossWeight\"", ",", "0.0", ")", "\n", "\n", "use_pointpair_loss", "=", "get_spec_with_default", "(", "specs", ",", "\"UsePointpairLoss\"", ",", "False", ")", "\n", "pointpair_loss_weight", "=", "get_spec_with_default", "(", "specs", ",", "\"PointpairLossWeight\"", ",", "0.0", ")", "\n", "\n", "logging", ".", "info", "(", "\"pointwise_loss_weight = {}, pointpair_loss_weight = {}\"", ".", "format", "(", "\n", "pointwise_loss_weight", ",", "pointpair_loss_weight", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "num_epochs", "+", "1", ")", ":", "\n", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\"epoch {}...\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "decoder", ".", "train", "(", ")", "\n", "\n", "adjust_learning_rate", "(", "lr_schedules", ",", "optimizer_all", ",", "epoch", ")", "\n", "\n", "batch_num", "=", "len", "(", "sdf_loader", ")", "\n", "for", "bi", ",", "(", "sdf_data", ",", "indices", ")", "in", "enumerate", "(", "sdf_loader", ")", ":", "\n", "\n", "# Process the input data", "\n", "            ", "sdf_data", "=", "sdf_data", ".", "reshape", "(", "-", "1", ",", "4", ")", "\n", "\n", "num_sdf_samples", "=", "sdf_data", ".", "shape", "[", "0", "]", "\n", "\n", "sdf_data", ".", "requires_grad", "=", "False", "\n", "\n", "xyz", "=", "sdf_data", "[", ":", ",", "0", ":", "3", "]", "\n", "sdf_gt", "=", "sdf_data", "[", ":", ",", "3", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "enforce_minmax", ":", "\n", "                ", "sdf_gt", "=", "torch", ".", "clamp", "(", "sdf_gt", ",", "minT", ",", "maxT", ")", "\n", "\n", "", "xyz", "=", "torch", ".", "chunk", "(", "xyz", ",", "batch_split", ")", "\n", "indices", "=", "torch", ".", "chunk", "(", "\n", "indices", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "num_samp_per_scene", ")", ".", "view", "(", "-", "1", ")", ",", "\n", "batch_split", ",", "\n", ")", "\n", "\n", "sdf_gt", "=", "torch", ".", "chunk", "(", "sdf_gt", ",", "batch_split", ")", "\n", "\n", "batch_loss_sdf", "=", "0.0", "\n", "batch_loss_pw", "=", "0.0", "\n", "batch_loss_reg", "=", "0.0", "\n", "batch_loss_pp", "=", "0.0", "\n", "batch_loss", "=", "0.0", "\n", "\n", "optimizer_all", ".", "zero_grad", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch_split", ")", ":", "\n", "\n", "                ", "batch_vecs", "=", "lat_vecs", "(", "indices", "[", "i", "]", ")", "\n", "\n", "input", "=", "torch", ".", "cat", "(", "[", "batch_vecs", ",", "xyz", "[", "i", "]", "]", ",", "dim", "=", "1", ")", "\n", "xyz_", "=", "xyz", "[", "i", "]", ".", "cuda", "(", ")", "\n", "\n", "# NN optimization", "\n", "warped_xyz_list", ",", "pred_sdf_list", ",", "_", "=", "decoder", "(", "\n", "input", ",", "output_warped_points", "=", "True", ",", "output_warping_param", "=", "True", ")", "\n", "\n", "if", "enforce_minmax", ":", "\n", "# pred_sdf = pred_sdf * clamp_dist * 1.0", "\n", "                    ", "for", "k", "in", "range", "(", "len", "(", "pred_sdf_list", ")", ")", ":", "\n", "                        ", "pred_sdf_list", "[", "k", "]", "=", "torch", ".", "clamp", "(", "pred_sdf_list", "[", "k", "]", ",", "minT", ",", "maxT", ")", "\n", "\n", "", "", "if", "use_curriculum", ":", "\n", "                    ", "sdf_loss", "=", "apply_curriculum_l1_loss", "(", "\n", "pred_sdf_list", ",", "sdf_gt", "[", "i", "]", ".", "cuda", "(", ")", ",", "loss_l1_soft", ",", "num_sdf_samples", ")", "\n", "", "else", ":", "\n", "                    ", "sdf_loss", "=", "loss_l1", "(", "pred_sdf_list", "[", "-", "1", "]", ",", "sdf_gt", "[", "i", "]", ".", "cuda", "(", ")", ")", "/", "num_sdf_samples", "\n", "", "batch_loss_sdf", "+=", "sdf_loss", ".", "item", "(", ")", "\n", "chunk_loss", "=", "sdf_loss", "\n", "\n", "if", "do_code_regularization", ":", "\n", "                    ", "l2_size_loss", "=", "torch", ".", "sum", "(", "torch", ".", "norm", "(", "batch_vecs", ",", "dim", "=", "1", ")", ")", "\n", "reg_loss", "=", "l2_size_loss", "/", "num_sdf_samples", "\n", "chunk_loss", "+=", "code_reg_lambda", "*", "min", "(", "1.0", ",", "epoch", "/", "100", ")", "*", "reg_loss", ".", "cuda", "(", ")", "\n", "batch_loss_reg", "+=", "reg_loss", ".", "item", "(", ")", "\n", "\n", "", "if", "use_pointwise_loss", ":", "\n", "                    ", "if", "use_curriculum", ":", "\n", "                        ", "pw_loss", "=", "apply_pointwise_reg", "(", "warped_xyz_list", ",", "xyz_", ",", "huber_fn", ",", "num_sdf_samples", ")", "\n", "", "else", ":", "\n", "                        ", "pw_loss", "=", "apply_pointwise_reg", "(", "warped_xyz_list", "[", "-", "1", ":", "]", ",", "xyz_", ",", "huber_fn", ",", "num_sdf_samples", ")", "\n", "", "batch_loss_pw", "+=", "pw_loss", ".", "item", "(", ")", "\n", "chunk_loss", "=", "chunk_loss", "+", "pw_loss", ".", "cuda", "(", ")", "*", "pointwise_loss_weight", "*", "max", "(", "1.0", ",", "10.0", "*", "(", "1", "-", "epoch", "/", "100", ")", ")", "\n", "\n", "", "if", "use_pointpair_loss", ":", "\n", "                    ", "if", "use_curriculum", ":", "\n", "                        ", "lp_loss", "=", "apply_pointpair_reg", "(", "warped_xyz_list", ",", "xyz_", ",", "loss_lp", ",", "scene_per_split", ",", "num_sdf_samples", ")", "\n", "", "else", ":", "\n", "                        ", "lp_loss", "=", "apply_pointpair_reg", "(", "warped_xyz_list", "[", "-", "1", ":", "]", ",", "xyz_", ",", "loss_lp", ",", "scene_per_split", ",", "num_sdf_samples", ")", "\n", "", "batch_loss_pp", "+=", "lp_loss", ".", "item", "(", ")", "\n", "chunk_loss", "+=", "lp_loss", ".", "cuda", "(", ")", "*", "pointpair_loss_weight", "*", "min", "(", "1.0", ",", "epoch", "/", "100", ")", "\n", "\n", "", "chunk_loss", ".", "backward", "(", ")", "\n", "batch_loss", "+=", "chunk_loss", ".", "item", "(", ")", "\n", "\n", "", "logging", ".", "debug", "(", "\"sdf_loss = {:.9f}, reg_loss = {:.9f}, pw_loss = {:.9f}, pp_loss = {:.9f}\"", ".", "format", "(", "\n", "batch_loss_sdf", ",", "batch_loss_reg", ",", "batch_loss_pw", ",", "batch_loss_pp", ")", ")", "\n", "\n", "ws", ".", "save_tensorboard_logs", "(", "\n", "tensorboard_saver", ",", "epoch", "*", "batch_num", "+", "bi", ",", "\n", "loss_sdf", "=", "batch_loss_sdf", ",", "loss_pw", "=", "batch_loss_pw", ",", "loss_reg", "=", "batch_loss_reg", ",", "\n", "loss_pp", "=", "batch_loss_pp", ",", "loss_", "=", "batch_loss", ")", "\n", "\n", "loss_log", ".", "append", "(", "batch_loss", ")", "\n", "\n", "if", "grad_clip", "is", "not", "None", ":", "\n", "\n", "                ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "decoder", ".", "parameters", "(", ")", ",", "grad_clip", ")", "\n", "\n", "", "optimizer_all", ".", "step", "(", ")", "\n", "\n", "# release memory", "\n", "del", "warped_xyz_list", ",", "pred_sdf_list", ",", "sdf_loss", ",", "pw_loss", ",", "lp_loss", ",", "batch_loss_sdf", ",", "batch_loss_reg", ",", "batch_loss_pp", ",", "batch_loss_pw", ",", "batch_loss", ",", "chunk_loss", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "seconds_elapsed", "=", "end", "-", "start", "\n", "timing_log", ".", "append", "(", "seconds_elapsed", ")", "\n", "\n", "lr_log", ".", "append", "(", "[", "schedule", ".", "get_learning_rate", "(", "epoch", ")", "for", "schedule", "in", "lr_schedules", "]", ")", "\n", "\n", "lat_mag_log", ".", "append", "(", "get_mean_latent_vector_magnitude", "(", "lat_vecs", ")", ")", "\n", "\n", "append_parameter_magnitudes", "(", "param_mag_log", ",", "decoder", ")", "\n", "\n", "if", "epoch", "in", "checkpoints", ":", "\n", "            ", "save_checkpoints", "(", "epoch", ")", "\n", "\n", "", "if", "epoch", "%", "log_frequency", "==", "0", ":", "\n", "\n", "            ", "save_latest", "(", "epoch", ")", "\n", "ws", ".", "save_logs", "(", "\n", "experiment_directory", ",", "\n", "loss_log", ",", "\n", "lr_log", ",", "\n", "timing_log", ",", "\n", "lat_mag_log", ",", "\n", "param_mag_log", ",", "\n", "epoch", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.generate_meshes_correspondence.save_to_ply": [[17, 43], ["verts_color.astype.astype", "numpy.zeros", "range", "range", "numpy.array", "plyfile.PlyElement.describe", "plyfile.PlyElement.describe", "plyfile.PlyData", "logging.debug", "plyfile.PlyData.write", "faces_building.append", "faces[].tolist"], "function", ["None"], ["def", "save_to_ply", "(", "verts", ",", "verts_warped", ",", "faces", ",", "ply_filename_out", ")", ":", "\n", "    ", "num_verts", "=", "verts", ".", "shape", "[", "0", "]", "\n", "num_faces", "=", "faces", ".", "shape", "[", "0", "]", "\n", "\n", "# store canonical coordinates as rgb color (in float format)", "\n", "verts_color", "=", "255", "*", "(", "0.5", "+", "0.5", "*", "verts_warped", ")", "\n", "verts_color", "=", "verts_color", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "verts_tuple", "=", "np", ".", "zeros", "(", "\n", "(", "num_verts", ",", ")", ",", "dtype", "=", "[", "(", "\"x\"", ",", "\"f4\"", ")", ",", "(", "\"y\"", ",", "\"f4\"", ")", ",", "(", "\"z\"", ",", "\"f4\"", ")", ",", "(", "\"red\"", ",", "\"f4\"", ")", ",", "(", "\"green\"", ",", "\"f4\"", ")", ",", "(", "\"blue\"", ",", "\"f4\"", ")", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "num_verts", ")", ":", "\n", "        ", "verts_tuple", "[", "i", "]", "=", "(", "verts", "[", "i", "]", "[", "0", "]", ",", "verts", "[", "i", "]", "[", "1", "]", ",", "verts", "[", "i", "]", "[", "2", "]", ",", "\n", "verts_color", "[", "i", "]", "[", "0", "]", ",", "verts_color", "[", "i", "]", "[", "1", "]", ",", "verts_color", "[", "i", "]", "[", "2", "]", ")", "\n", "\n", "", "faces_building", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "num_faces", ")", ":", "\n", "        ", "faces_building", ".", "append", "(", "(", "(", "faces", "[", "i", ",", ":", "]", ".", "tolist", "(", ")", ",", ")", ")", ")", "\n", "", "faces_tuple", "=", "np", ".", "array", "(", "faces_building", ",", "dtype", "=", "[", "(", "\"vertex_indices\"", ",", "\"i4\"", ",", "(", "3", ",", ")", ")", "]", ")", "\n", "\n", "el_verts", "=", "plyfile", ".", "PlyElement", ".", "describe", "(", "verts_tuple", ",", "\"vertex\"", ")", "\n", "el_faces", "=", "plyfile", ".", "PlyElement", ".", "describe", "(", "faces_tuple", ",", "\"face\"", ")", "\n", "\n", "ply_data", "=", "plyfile", ".", "PlyData", "(", "[", "el_verts", ",", "el_faces", "]", ")", "\n", "logging", ".", "debug", "(", "\"saving mesh to %s\"", "%", "(", "ply_filename_out", ")", ")", "\n", "ply_data", ".", "write", "(", "ply_filename_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.generate_meshes_correspondence.mesh_to_correspondence": [[45, 160], ["os.path.join", "json.load", "__import__", "__import__.Decoder", "torch.nn.DataParallel", "torch.load", "decoder.module.cuda.load_state_dict", "decoder.module.cuda.module.cuda", "decoder.module.cuda.eval", "deep_sdf.load_pre_trained_latent_vectors", "latent_vectors.cuda.cuda", "deep_sdf.data.get_instance_filenames", "deep_sdf.data.get_instance_filenames", "os.path.join", "logging.info", "plyfile.PlyData.read", "range", "range", "numpy.asarray", "numpy.asarray", "generate_meshes_correspondence.save_to_ply", "enumerate", "os.path.isfile", "Exception", "open", "os.path.join", "open", "json.load", "str", "np.asarray.append", "np.asarray.append", "sys.platform.startswith", "os.path.join", "os.path.join", "os.path.exists", "numpy.array", "numpy.array", "os.path.normpath().split", "os.path.normpath().split", "instance_name.split", "str", "os.path.isdir", "os.makedirs", "logging.info", "plyfile.PlyData.read", "numpy.asarray", "numpy.asarray", "torch.from_numpy().cuda", "latent_vector.expand", "torch.cat", "numpy.concatenate", "generate_meshes_correspondence.save_to_ply", "np.asarray.append", "np.asarray.append", "warped_.detach().cpu().numpy.detach().cpu().numpy", "np.concatenate.append", "os.path.normpath", "os.path.normpath", "numpy.array", "numpy.array", "torch.from_numpy", "torch.no_grad", "decoder.module.cuda.", "warped_.detach().cpu().numpy.detach().cpu", "min", "warped_.detach().cpu().numpy.detach"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.load_pre_trained_latent_vectors", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.get_instance_filenames", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.get_instance_filenames", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.generate_meshes_correspondence.save_to_ply", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.generate_meshes_correspondence.save_to_ply"], ["", "def", "mesh_to_correspondence", "(", "experiment_directory", ",", "checkpoint", ",", "start_id", ",", "end_id", ")", ":", "\n", "\n", "    ", "specs_filename", "=", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "\"specs.json\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "specs_filename", ")", ":", "\n", "        ", "raise", "Exception", "(", "\n", "'The experiment directory does not include specifications file \"specs.json\"'", "\n", ")", "\n", "\n", "", "specs", "=", "json", ".", "load", "(", "open", "(", "specs_filename", ")", ")", "\n", "\n", "arch", "=", "__import__", "(", "\"networks.\"", "+", "specs", "[", "\"NetworkArch\"", "]", ",", "fromlist", "=", "[", "\"Decoder\"", "]", ")", "\n", "\n", "latent_size", "=", "specs", "[", "\"CodeLength\"", "]", "\n", "\n", "decoder", "=", "arch", ".", "Decoder", "(", "latent_size", ",", "**", "specs", "[", "\"NetworkSpecs\"", "]", ")", "\n", "\n", "decoder", "=", "torch", ".", "nn", ".", "DataParallel", "(", "decoder", ")", "\n", "\n", "saved_model_state", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "ws", ".", "model_params_subdir", ",", "checkpoint", "+", "\".pth\"", ")", "\n", ")", "\n", "saved_model_epoch", "=", "saved_model_state", "[", "\"epoch\"", "]", "\n", "\n", "decoder", ".", "load_state_dict", "(", "saved_model_state", "[", "\"model_state_dict\"", "]", ")", "\n", "\n", "decoder", "=", "decoder", ".", "module", ".", "cuda", "(", ")", "\n", "\n", "decoder", ".", "eval", "(", ")", "\n", "\n", "latent_vectors", "=", "ws", ".", "load_pre_trained_latent_vectors", "(", "experiment_directory", ",", "checkpoint", ")", "\n", "latent_vectors", "=", "latent_vectors", ".", "cuda", "(", ")", "\n", "\n", "train_split_file", "=", "specs", "[", "\"TrainSplit\"", "]", "\n", "\n", "with", "open", "(", "train_split_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "train_split", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "data_source", "=", "specs", "[", "\"DataSource\"", "]", "\n", "\n", "instance_filenames", "=", "deep_sdf", ".", "data", ".", "get_instance_filenames", "(", "data_source", ",", "train_split", ")", "\n", "\n", "# load template mesh", "\n", "template_filename", "=", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "\n", "ws", ".", "training_meshes_subdir", ",", "\n", "str", "(", "saved_model_epoch", ")", ",", "'template'", ")", "\n", "logging", ".", "info", "(", "\"Loading from %s.ply\"", "%", "template_filename", ")", "\n", "template", "=", "plyfile", ".", "PlyData", ".", "read", "(", "template_filename", "+", "\".ply\"", ")", "\n", "template_v", "=", "[", "]", "#template.elements[0]", "\n", "template_f", "=", "[", "]", "#template.elements[1]", "\n", "for", "i", "in", "range", "(", "template", ".", "elements", "[", "0", "]", ".", "count", ")", ":", "\n", "        ", "v", "=", "template", ".", "elements", "[", "0", "]", "[", "i", "]", "\n", "template_v", ".", "append", "(", "np", ".", "array", "(", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ")", ")", ")", "\n", "", "for", "i", "in", "range", "(", "template", ".", "elements", "[", "1", "]", ".", "count", ")", ":", "\n", "        ", "f", "=", "template", ".", "elements", "[", "1", "]", "[", "i", "]", "[", "0", "]", "\n", "template_f", ".", "append", "(", "np", ".", "array", "(", "[", "f", "[", "0", "]", ",", "f", "[", "1", "]", ",", "f", "[", "2", "]", "]", ")", ")", "\n", "", "template_v", "=", "np", ".", "asarray", "(", "template_v", ")", "\n", "template_f", "=", "np", ".", "asarray", "(", "template_f", ")", "\n", "\n", "save_to_ply", "(", "template_v", ",", "template_v", ",", "template_f", ",", "template_filename", "+", "\"_color_coded.ply\"", ")", "\n", "\n", "for", "i", ",", "latent_vector", "in", "enumerate", "(", "latent_vectors", ")", ":", "\n", "        ", "if", "i", "<", "start_id", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "sys", ".", "platform", ".", "startswith", "(", "'linux'", ")", ":", "\n", "            ", "dataset_name", ",", "class_name", ",", "instance_name", "=", "os", ".", "path", ".", "normpath", "(", "instance_filenames", "[", "i", "]", ")", ".", "split", "(", "\"/\"", ")", "\n", "", "else", ":", "\n", "            ", "dataset_name", ",", "class_name", ",", "instance_name", "=", "os", ".", "path", ".", "normpath", "(", "instance_filenames", "[", "i", "]", ")", ".", "split", "(", "\"\\\\\"", ")", "\n", "", "instance_name", "=", "instance_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "mesh_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "experiment_directory", ",", "\n", "ws", ".", "training_meshes_subdir", ",", "\n", "str", "(", "saved_model_epoch", ")", ",", "\n", "dataset_name", ",", "\n", "class_name", ",", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "mesh_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "mesh_dir", ")", "\n", "\n", "", "mesh_filename", "=", "os", ".", "path", ".", "join", "(", "mesh_dir", ",", "instance_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "mesh_filename", "+", "\".ply\"", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"Loading from %s.ply\"", "%", "mesh_filename", ")", "\n", "\n", "mesh", "=", "plyfile", ".", "PlyData", ".", "read", "(", "mesh_filename", "+", "\".ply\"", ")", "\n", "mesh_v", "=", "[", "]", "\n", "mesh_f", "=", "[", "]", "\n", "for", "v", "in", "mesh", ".", "elements", "[", "0", "]", ":", "\n", "                ", "mesh_v", ".", "append", "(", "np", ".", "array", "(", "(", "v", "[", "0", "]", ",", "v", "[", "1", "]", ",", "v", "[", "2", "]", ")", ")", ")", "\n", "", "for", "f", "in", "mesh", ".", "elements", "[", "1", "]", ":", "\n", "                ", "f", "=", "f", "[", "0", "]", "\n", "mesh_f", ".", "append", "(", "np", ".", "array", "(", "[", "f", "[", "0", "]", ",", "f", "[", "1", "]", ",", "f", "[", "2", "]", "]", ")", ")", "\n", "", "mesh_v", "=", "np", ".", "asarray", "(", "mesh_v", ")", "\n", "mesh_f", "=", "np", ".", "asarray", "(", "mesh_f", ")", "\n", "\n", "queries", "=", "torch", ".", "from_numpy", "(", "mesh_v", ")", ".", "cuda", "(", ")", "\n", "num_samples", "=", "queries", ".", "shape", "[", "0", "]", "\n", "latent_repeat", "=", "latent_vector", ".", "expand", "(", "num_samples", ",", "-", "1", ")", "\n", "inputs", "=", "torch", ".", "cat", "(", "[", "latent_repeat", ",", "queries", "]", ",", "1", ")", "\n", "warped", "=", "[", "]", "\n", "head", "=", "0", "\n", "max_batch", "=", "2", "**", "17", "\n", "while", "head", "<", "num_samples", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "warped_", ",", "_", "=", "decoder", "(", "inputs", "[", "head", ":", "min", "(", "head", "+", "max_batch", ",", "num_samples", ")", "]", ",", "output_warped_points", "=", "True", ")", "\n", "", "warped_", "=", "warped_", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "warped", ".", "append", "(", "warped_", ")", "\n", "head", "+=", "max_batch", "\n", "", "warped", "=", "np", ".", "concatenate", "(", "warped", ",", "axis", "=", "0", ")", "\n", "\n", "save_to_ply", "(", "mesh_v", ",", "warped", ",", "mesh_f", ",", "mesh_filename", "+", "\"_color_coded.ply\"", ")", "\n", "\n", "", "if", "i", ">=", "end_id", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.plot_log.running_mean": [[13, 16], ["numpy.cumsum", "numpy.insert", "float"], "function", ["None"], ["def", "running_mean", "(", "x", ",", "N", ")", ":", "\n", "    ", "cumsum", "=", "np", ".", "cumsum", "(", "np", ".", "insert", "(", "x", ",", "0", ",", "0", ")", ")", "\n", "return", "(", "cumsum", "[", "N", ":", "]", "-", "cumsum", "[", ":", "-", "N", "]", ")", "/", "float", "(", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.plot_log.load_logs": [[18, 80], ["torch.load", "logging.info", "len", "logging.info", "plot_log.running_mean", "plot_log.running_mean", "matplotlib.subplots", "ax.grid", "matplotlib.show", "os.path.join", "ax.plot", "ax.set", "numpy.array", "ax.plot", "ax.set", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "ax.plot", "ax.set", "ax.plot", "ax.set", "logs[].items", "ax.set", "ax.legend", "Exception", "ax.plot", "logs[].keys"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.plot_log.running_mean", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.None.plot_log.running_mean"], ["", "def", "load_logs", "(", "experiment_directory", ",", "type", ")", ":", "\n", "\n", "    ", "logs", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "ws", ".", "logs_filename", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"latest epoch is {}\"", ".", "format", "(", "logs", "[", "\"epoch\"", "]", ")", ")", "\n", "\n", "num_iters", "=", "len", "(", "logs", "[", "\"loss\"", "]", ")", "\n", "iters_per_epoch", "=", "num_iters", "/", "logs", "[", "\"epoch\"", "]", "\n", "\n", "logging", ".", "info", "(", "\"{} iters per epoch\"", ".", "format", "(", "iters_per_epoch", ")", ")", "\n", "\n", "smoothed_loss_41", "=", "running_mean", "(", "logs", "[", "\"loss\"", "]", ",", "41", ")", "\n", "smoothed_loss_1601", "=", "running_mean", "(", "logs", "[", "\"loss\"", "]", ",", "1601", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "if", "type", "==", "\"loss\"", ":", "\n", "\n", "        ", "ax", ".", "plot", "(", "\n", "np", ".", "arange", "(", "num_iters", ")", "/", "iters_per_epoch", ",", "\n", "logs", "[", "\"loss\"", "]", ",", "\n", "\"#82c6eb\"", ",", "\n", "np", ".", "arange", "(", "20", ",", "num_iters", "-", "20", ")", "/", "iters_per_epoch", ",", "\n", "smoothed_loss_41", ",", "\n", "\"#2a9edd\"", ",", "\n", "np", ".", "arange", "(", "800", ",", "num_iters", "-", "800", ")", "/", "iters_per_epoch", ",", "\n", "smoothed_loss_1601", ",", "\n", "\"#16628b\"", ",", "\n", ")", "\n", "\n", "ax", ".", "set", "(", "xlabel", "=", "\"Epoch\"", ",", "ylabel", "=", "\"Loss\"", ",", "title", "=", "\"Training Loss\"", ")", "\n", "\n", "", "elif", "type", "==", "\"learning_rate\"", ":", "\n", "        ", "combined_lrs", "=", "np", ".", "array", "(", "logs", "[", "\"learning_rate\"", "]", ")", "\n", "\n", "ax", ".", "plot", "(", "\n", "np", ".", "arange", "(", "combined_lrs", ".", "shape", "[", "0", "]", ")", ",", "\n", "combined_lrs", "[", ":", ",", "0", "]", ",", "\n", "np", ".", "arange", "(", "combined_lrs", ".", "shape", "[", "0", "]", ")", ",", "\n", "combined_lrs", "[", ":", ",", "1", "]", ",", "\n", ")", "\n", "ax", ".", "set", "(", "xlabel", "=", "\"Epoch\"", ",", "ylabel", "=", "\"Learning Rate\"", ",", "title", "=", "\"Learning Rates\"", ")", "\n", "\n", "", "elif", "type", "==", "\"time\"", ":", "\n", "        ", "ax", ".", "plot", "(", "logs", "[", "\"timing\"", "]", ",", "\"#833eb7\"", ")", "\n", "ax", ".", "set", "(", "xlabel", "=", "\"Epoch\"", ",", "ylabel", "=", "\"Time per Epoch (s)\"", ",", "title", "=", "\"Timing\"", ")", "\n", "\n", "", "elif", "type", "==", "\"lat_mag\"", ":", "\n", "        ", "ax", ".", "plot", "(", "logs", "[", "\"latent_magnitude\"", "]", ")", "\n", "ax", ".", "set", "(", "xlabel", "=", "\"Epoch\"", ",", "ylabel", "=", "\"Magnitude\"", ",", "title", "=", "\"Latent Vector Magnitude\"", ")", "\n", "\n", "", "elif", "type", "==", "\"param_mag\"", ":", "\n", "        ", "for", "_name", ",", "mags", "in", "logs", "[", "\"param_magnitude\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "mags", ")", "\n", "", "ax", ".", "set", "(", "xlabel", "=", "\"Epoch\"", ",", "ylabel", "=", "\"Magnitude\"", ",", "title", "=", "\"Parameter Magnitude\"", ")", "\n", "ax", ".", "legend", "(", "logs", "[", "\"param_magnitude\"", "]", ".", "keys", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'unrecognized plot type \"{}\"'", ".", "format", "(", "type", ")", ")", "\n", "\n", "", "ax", ".", "grid", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.load_experiment_specifications": [[29, 40], ["os.path.join", "json.load", "os.path.isfile", "Exception", "open"], "function", ["None"], ["def", "load_experiment_specifications", "(", "experiment_directory", ")", ":", "\n", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "specifications_filename", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "raise", "Exception", "(", "\n", "\"The experiment directory ({}) does not include specifications file \"", "\n", "+", "'\"specs.json\"'", ".", "format", "(", "experiment_directory", ")", "\n", ")", "\n", "\n", "", "return", "json", ".", "load", "(", "open", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.load_model_parameters": [[42, 56], ["os.path.join", "torch.load", "decoder.load_state_dict", "os.path.isfile", "Exception"], "function", ["None"], ["", "def", "load_model_parameters", "(", "experiment_directory", ",", "checkpoint", ",", "decoder", ")", ":", "\n", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "\n", "experiment_directory", ",", "model_params_subdir", ",", "checkpoint", "+", "\".pth\"", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "raise", "Exception", "(", "'model state dict \"{}\" does not exist'", ".", "format", "(", "filename", ")", ")", "\n", "\n", "", "data", "=", "torch", ".", "load", "(", "filename", ")", "\n", "\n", "decoder", ".", "load_state_dict", "(", "data", "[", "\"model_state_dict\"", "]", ")", "\n", "\n", "return", "data", "[", "\"epoch\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.build_decoder": [[58, 69], ["__import__", "__import__.Decoder().cuda", "__import__.Decoder"], "function", ["None"], ["", "def", "build_decoder", "(", "experiment_directory", ",", "experiment_specs", ")", ":", "\n", "\n", "    ", "arch", "=", "__import__", "(", "\n", "\"networks.\"", "+", "experiment_specs", "[", "\"NetworkArch\"", "]", ",", "fromlist", "=", "[", "\"Decoder\"", "]", "\n", ")", "\n", "\n", "latent_size", "=", "experiment_specs", "[", "\"CodeLength\"", "]", "\n", "\n", "decoder", "=", "arch", ".", "Decoder", "(", "latent_size", ",", "**", "experiment_specs", "[", "\"NetworkSpecs\"", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "return", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.load_decoder": [[71, 83], ["workspace.build_decoder", "workspace.load_model_parameters", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.build_decoder", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.load_model_parameters"], ["", "def", "load_decoder", "(", "\n", "experiment_directory", ",", "experiment_specs", ",", "checkpoint", ",", "data_parallel", "=", "True", "\n", ")", ":", "\n", "\n", "    ", "decoder", "=", "build_decoder", "(", "experiment_directory", ",", "experiment_specs", ")", "\n", "\n", "if", "data_parallel", ":", "\n", "        ", "decoder", "=", "torch", ".", "nn", ".", "DataParallel", "(", "decoder", ")", "\n", "\n", "", "epoch", "=", "load_model_parameters", "(", "experiment_directory", ",", "checkpoint", ",", "decoder", ")", "\n", "\n", "return", "(", "decoder", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.load_pre_trained_latent_vectors": [[85, 118], ["os.path.join", "torch.load", "isinstance", "os.path.isfile", "Exception", "range", "torch.nn.Embedding", "torch.nn.Embedding.load_state_dict", "torch.nn.Embedding.weight.data.detach", "data[].size", "torch.nn.Embedding.append", "[].cuda"], "function", ["None"], ["", "def", "load_pre_trained_latent_vectors", "(", "experiment_directory", ",", "checkpoint", ")", ":", "\n", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "\n", "experiment_directory", ",", "latent_codes_subdir", ",", "checkpoint", "+", "\".pth\"", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "raise", "Exception", "(", "\n", "\"The experiment directory ({}) does not include a latent code file\"", "\n", "+", "\" for checkpoint '{}'\"", ".", "format", "(", "experiment_directory", ",", "checkpoint", ")", "\n", ")", "\n", "\n", "", "data", "=", "torch", ".", "load", "(", "filename", ")", "\n", "\n", "if", "isinstance", "(", "data", "[", "\"latent_codes\"", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "\n", "        ", "num_vecs", "=", "data", "[", "\"latent_codes\"", "]", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "lat_vecs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_vecs", ")", ":", "\n", "            ", "lat_vecs", ".", "append", "(", "data", "[", "\"latent_codes\"", "]", "[", "i", "]", ".", "cuda", "(", ")", ")", "\n", "\n", "", "return", "lat_vecs", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "num_embeddings", ",", "embedding_dim", "=", "data", "[", "\"latent_codes\"", "]", "[", "\"weight\"", "]", ".", "shape", "\n", "\n", "lat_vecs", "=", "torch", ".", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ")", "\n", "\n", "lat_vecs", ".", "load_state_dict", "(", "data", "[", "\"latent_codes\"", "]", ")", "\n", "\n", "return", "lat_vecs", ".", "weight", ".", "data", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.load_latent_vectors": [[120, 151], ["os.path.join", "torch.load", "isinstance", "workspace.get_latent_codes_dir", "os.path.isfile", "Exception", "enumerate", "lat_vecs.load_state_dict", "Exception", "Exception", "data[].size", "data[].size", "data[].size"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_latent_codes_dir"], ["", "", "def", "load_latent_vectors", "(", "experiment_directory", ",", "filename", ",", "lat_vecs", ")", ":", "\n", "\n", "    ", "full_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "get_latent_codes_dir", "(", "experiment_directory", ")", ",", "filename", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "full_filename", ")", ":", "\n", "        ", "raise", "Exception", "(", "'latent state file \"{}\" does not exist'", ".", "format", "(", "full_filename", ")", ")", "\n", "\n", "", "data", "=", "torch", ".", "load", "(", "full_filename", ")", "\n", "\n", "if", "isinstance", "(", "data", "[", "\"latent_codes\"", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "\n", "# for backwards compatibility", "\n", "        ", "if", "not", "lat_vecs", ".", "num_embeddings", "==", "data", "[", "\"latent_codes\"", "]", ".", "size", "(", ")", "[", "0", "]", ":", "\n", "            ", "raise", "Exception", "(", "\n", "\"num latent codes mismatched: {} vs {}\"", ".", "format", "(", "\n", "lat_vecs", ".", "num_embeddings", ",", "data", "[", "\"latent_codes\"", "]", ".", "size", "(", ")", "[", "0", "]", "\n", ")", "\n", ")", "\n", "\n", "", "if", "not", "lat_vecs", ".", "embedding_dim", "==", "data", "[", "\"latent_codes\"", "]", ".", "size", "(", ")", "[", "2", "]", ":", "\n", "            ", "raise", "Exception", "(", "\"latent code dimensionality mismatch\"", ")", "\n", "\n", "", "for", "i", ",", "lat_vec", "in", "enumerate", "(", "data", "[", "\"latent_codes\"", "]", ")", ":", "\n", "            ", "lat_vecs", ".", "weight", ".", "data", "[", "i", ",", ":", "]", "=", "lat_vec", "\n", "\n", "", "", "else", ":", "\n", "        ", "lat_vecs", ".", "load_state_dict", "(", "data", "[", "\"latent_codes\"", "]", ")", "\n", "\n", "", "return", "data", "[", "\"epoch\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.save_model": [[153, 160], ["workspace.get_model_params_dir", "torch.save", "os.path.join", "decoder.state_dict"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_model_params_dir"], ["", "def", "save_model", "(", "experiment_directory", ",", "filename", ",", "decoder", ",", "epoch", ")", ":", "\n", "\n", "    ", "model_params_dir", "=", "get_model_params_dir", "(", "experiment_directory", ",", "True", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\"epoch\"", ":", "epoch", ",", "\"model_state_dict\"", ":", "decoder", ".", "state_dict", "(", ")", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "model_params_dir", ",", "filename", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.save_optimizer": [[163, 170], ["workspace.get_optimizer_params_dir", "torch.save", "os.path.join", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_optimizer_params_dir"], ["", "def", "save_optimizer", "(", "experiment_directory", ",", "filename", ",", "optimizer", ",", "epoch", ")", ":", "\n", "\n", "    ", "optimizer_params_dir", "=", "get_optimizer_params_dir", "(", "experiment_directory", ",", "True", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\"epoch\"", ":", "epoch", ",", "\"optimizer_state_dict\"", ":", "optimizer", ".", "state_dict", "(", ")", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "optimizer_params_dir", ",", "filename", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.load_optimizer": [[173, 189], ["os.path.join", "torch.load", "optimizer.load_state_dict", "workspace.get_optimizer_params_dir", "os.path.isfile", "Exception"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_optimizer_params_dir"], ["", "def", "load_optimizer", "(", "experiment_directory", ",", "filename", ",", "optimizer", ")", ":", "\n", "\n", "    ", "full_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "get_optimizer_params_dir", "(", "experiment_directory", ")", ",", "filename", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "full_filename", ")", ":", "\n", "        ", "raise", "Exception", "(", "\n", "'optimizer state dict \"{}\" does not exist'", ".", "format", "(", "full_filename", ")", "\n", ")", "\n", "\n", "", "data", "=", "torch", ".", "load", "(", "full_filename", ")", "\n", "\n", "optimizer", ".", "load_state_dict", "(", "data", "[", "\"optimizer_state_dict\"", "]", ")", "\n", "\n", "return", "data", "[", "\"epoch\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.save_latent_vectors": [[191, 200], ["workspace.get_latent_codes_dir", "latent_vec.state_dict", "torch.save", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_latent_codes_dir"], ["", "def", "save_latent_vectors", "(", "experiment_directory", ",", "filename", ",", "latent_vec", ",", "epoch", ")", ":", "\n", "\n", "    ", "latent_codes_dir", "=", "get_latent_codes_dir", "(", "experiment_directory", ",", "True", ")", "\n", "\n", "all_latents", "=", "latent_vec", ".", "state_dict", "(", ")", "\n", "\n", "torch", ".", "save", "(", "\n", "{", "\"epoch\"", ":", "epoch", ",", "\"latent_codes\"", ":", "all_latents", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "latent_codes_dir", ",", "filename", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.save_logs": [[203, 223], ["torch.save", "os.path.join"], "function", ["None"], ["", "def", "save_logs", "(", "\n", "experiment_directory", ",", "\n", "loss_log", ",", "\n", "lr_log", ",", "\n", "timing_log", ",", "\n", "lat_mag_log", ",", "\n", "param_mag_log", ",", "\n", "epoch", ",", "\n", ")", ":", "\n", "\n", "    ", "torch", ".", "save", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", ",", "\n", "\"loss\"", ":", "loss_log", ",", "\n", "\"learning_rate\"", ":", "lr_log", ",", "\n", "\"timing\"", ":", "timing_log", ",", "\n", "\"latent_magnitude\"", ":", "lat_mag_log", ",", "\n", "\"param_magnitude\"", ":", "param_mag_log", ",", "\n", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "logs_filename", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.load_logs": [[226, 242], ["os.path.join", "torch.load", "os.path.isfile", "Exception"], "function", ["None"], ["", "def", "load_logs", "(", "experiment_directory", ")", ":", "\n", "\n", "    ", "full_filename", "=", "os", ".", "path", ".", "join", "(", "experiment_directory", ",", "logs_filename", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "full_filename", ")", ":", "\n", "        ", "raise", "Exception", "(", "'log file \"{}\" does not exist'", ".", "format", "(", "full_filename", ")", ")", "\n", "\n", "", "data", "=", "torch", ".", "load", "(", "full_filename", ")", "\n", "\n", "return", "(", "\n", "data", "[", "\"loss\"", "]", ",", "\n", "data", "[", "\"learning_rate\"", "]", ",", "\n", "data", "[", "\"timing\"", "]", ",", "\n", "data", "[", "\"latent_magnitude\"", "]", ",", "\n", "data", "[", "\"param_magnitude\"", "]", ",", "\n", "data", "[", "\"epoch\"", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.clip_logs": [[245, 257], ["len", "len"], "function", ["None"], ["", "def", "clip_logs", "(", "loss_log", ",", "lr_log", ",", "timing_log", ",", "lat_mag_log", ",", "param_mag_log", ",", "epoch", ")", ":", "\n", "\n", "    ", "iters_per_epoch", "=", "len", "(", "loss_log", ")", "//", "len", "(", "lr_log", ")", "\n", "\n", "loss_log", "=", "loss_log", "[", ":", "(", "iters_per_epoch", "*", "epoch", ")", "]", "\n", "lr_log", "=", "lr_log", "[", ":", "epoch", "]", "\n", "timing_log", "=", "timing_log", "[", ":", "epoch", "]", "\n", "lat_mag_log", "=", "lat_mag_log", "[", ":", "epoch", "]", "\n", "for", "n", "in", "param_mag_log", ":", "\n", "        ", "param_mag_log", "[", "n", "]", "=", "param_mag_log", "[", "n", "]", "[", ":", "epoch", "]", "\n", "\n", "", "return", "(", "loss_log", ",", "lr_log", ",", "timing_log", ",", "lat_mag_log", ",", "param_mag_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_data_source_map_filename": [[259, 261], ["os.path.join"], "function", ["None"], ["", "def", "get_data_source_map_filename", "(", "data_dir", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "data_dir", ",", "data_source_map_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_reconstructed_mesh_filename": [[263, 275], ["os.path.join", "str"], "function", ["None"], ["", "def", "get_reconstructed_mesh_filename", "(", "\n", "experiment_dir", ",", "epoch", ",", "dataset", ",", "class_name", ",", "instance_name", "\n", ")", ":", "\n", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "\n", "experiment_dir", ",", "\n", "reconstructions_subdir", ",", "\n", "str", "(", "epoch", ")", ",", "\n", "reconstruction_meshes_subdir", ",", "\n", "dataset", ",", "\n", "class_name", ",", "\n", "instance_name", "+", "\".ply\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_reconstructed_code_filename": [[278, 290], ["os.path.join", "str"], "function", ["None"], ["", "def", "get_reconstructed_code_filename", "(", "\n", "experiment_dir", ",", "epoch", ",", "dataset", ",", "class_name", ",", "instance_name", "\n", ")", ":", "\n", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "\n", "experiment_dir", ",", "\n", "reconstructions_subdir", ",", "\n", "str", "(", "epoch", ")", ",", "\n", "reconstruction_codes_subdir", ",", "\n", "dataset", ",", "\n", "class_name", ",", "\n", "instance_name", "+", "\".pth\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_evaluation_dir": [[293, 301], ["os.path.join", "os.makedirs", "os.path.isdir"], "function", ["None"], ["", "def", "get_evaluation_dir", "(", "experiment_dir", ",", "checkpoint", ",", "create_if_nonexistent", "=", "False", ")", ":", "\n", "\n", "    ", "dir", "=", "os", ".", "path", ".", "join", "(", "experiment_dir", ",", "evaluation_subdir", ",", "checkpoint", ")", "\n", "\n", "if", "create_if_nonexistent", "and", "not", "os", ".", "path", ".", "isdir", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n", "", "return", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_model_params_dir": [[303, 311], ["os.path.join", "os.makedirs", "os.path.isdir"], "function", ["None"], ["", "def", "get_model_params_dir", "(", "experiment_dir", ",", "create_if_nonexistent", "=", "False", ")", ":", "\n", "\n", "    ", "dir", "=", "os", ".", "path", ".", "join", "(", "experiment_dir", ",", "model_params_subdir", ")", "\n", "\n", "if", "create_if_nonexistent", "and", "not", "os", ".", "path", ".", "isdir", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n", "", "return", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_optimizer_params_dir": [[313, 321], ["os.path.join", "os.makedirs", "os.path.isdir"], "function", ["None"], ["", "def", "get_optimizer_params_dir", "(", "experiment_dir", ",", "create_if_nonexistent", "=", "False", ")", ":", "\n", "\n", "    ", "dir", "=", "os", ".", "path", ".", "join", "(", "experiment_dir", ",", "optimizer_params_subdir", ")", "\n", "\n", "if", "create_if_nonexistent", "and", "not", "os", ".", "path", ".", "isdir", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n", "", "return", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_latent_codes_dir": [[323, 331], ["os.path.join", "os.makedirs", "os.path.isdir"], "function", ["None"], ["", "def", "get_latent_codes_dir", "(", "experiment_dir", ",", "create_if_nonexistent", "=", "False", ")", ":", "\n", "\n", "    ", "dir", "=", "os", ".", "path", ".", "join", "(", "experiment_dir", ",", "latent_codes_subdir", ")", "\n", "\n", "if", "create_if_nonexistent", "and", "not", "os", ".", "path", ".", "isdir", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n", "", "return", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_tensorboard_logs_dir": [[333, 340], ["os.path.join", "os.makedirs", "os.path.isdir"], "function", ["None"], ["", "def", "get_tensorboard_logs_dir", "(", "experiment_dir", ",", "create_if_nonexistent", "=", "False", ")", ":", "\n", "    ", "dir", "=", "os", ".", "path", ".", "join", "(", "experiment_dir", ",", "tensorboard_log_subdir", ")", "\n", "\n", "if", "create_if_nonexistent", "and", "not", "os", ".", "path", ".", "isdir", "(", "dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir", ")", "\n", "\n", "", "return", "dir", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_normalization_params_filename": [[342, 351], ["os.path.join"], "function", ["None"], ["", "def", "get_normalization_params_filename", "(", "\n", "data_dir", ",", "dataset_name", ",", "class_name", ",", "instance_name", "\n", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "\n", "data_dir", ",", "\n", "normalization_param_subdir", ",", "\n", "dataset_name", ",", "\n", "class_name", ",", "\n", "instance_name", "+", "\".npz\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.create_tensorboard_saver": [[354, 356], ["tensorboardX.SummaryWriter", "workspace.get_tensorboard_logs_dir"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.get_tensorboard_logs_dir"], ["", "def", "create_tensorboard_saver", "(", "experiment_dir", ")", ":", "\n", "    ", "return", "SummaryWriter", "(", "get_tensorboard_logs_dir", "(", "experiment_dir", ",", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.save_tensorboard_logs": [[358, 362], ["kargs.keys", "saver.add_scalar"], "function", ["None"], ["", "def", "save_tensorboard_logs", "(", "saver", ",", "step", ",", "**", "kargs", ")", ":", "\n", "    ", "if", "step", "%", "10", "==", "0", ":", "\n", "        ", "for", "ln", "in", "kargs", ".", "keys", "(", ")", ":", "\n", "            ", "saver", ".", "add_scalar", "(", "ln", ",", "kargs", "[", "ln", "]", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.workspace.create_code_snapshot": [[364, 382], ["tarfile.open", "Path().rglob", "str", "Path", "len", "path.suffix.lower", "tar.add", "path.as_posix", "path.relative_to().as_posix", "path.relative_to"], "function", ["None"], ["", "", "", "def", "create_code_snapshot", "(", "root", ",", "dst_path", ",", "extensions", "=", "(", "\".py\"", ",", "\".json\"", ")", ",", "exclude", "=", "(", ")", ")", ":", "\n", "    ", "\"\"\"Creates tarball with the source code\"\"\"", "\n", "import", "tarfile", "\n", "from", "pathlib", "import", "Path", "\n", "\n", "with", "tarfile", ".", "open", "(", "str", "(", "dst_path", ")", ",", "\"w:gz\"", ")", "as", "tar", ":", "\n", "        ", "for", "path", "in", "Path", "(", "root", ")", ".", "rglob", "(", "\"*\"", ")", ":", "\n", "            ", "if", "'.git'", "in", "path", ".", "parts", ":", "\n", "                ", "continue", "\n", "", "exclude_flag", "=", "False", "\n", "if", "len", "(", "exclude", ")", ">", "0", ":", "\n", "                ", "for", "k", "in", "exclude", ":", "\n", "                    ", "if", "k", "in", "path", ".", "parts", ":", "\n", "                        ", "exclude_flag", "=", "True", "\n", "", "", "", "if", "exclude_flag", ":", "\n", "                ", "continue", "\n", "", "if", "path", ".", "suffix", ".", "lower", "(", ")", "in", "extensions", ":", "\n", "                ", "tar", ".", "add", "(", "path", ".", "as_posix", "(", ")", ",", "arcname", "=", "path", ".", "relative_to", "(", "root", ")", ".", "as_posix", "(", ")", ",", "recursive", "=", "True", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.mesh.create_mesh": [[14, 69], ["time.time", "torch.arange", "torch.zeros", "sdf_values.reshape.reshape", "time.time", "logging.debug", "mesh.convert_sdf_samples_to_ply", "samples[].cuda", "deep_sdf.utils.decode_sdf().squeeze().detach().cpu", "sdf_values.reshape.data.cpu", "torch.LongTensor", "torch.arange.long", "torch.arange.long", "deep_sdf.utils.decode_sdf().squeeze().detach", "min", "deep_sdf.utils.decode_sdf().squeeze", "min", "deep_sdf.utils.decode_sdf"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.mesh.convert_sdf_samples_to_ply", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.utils.decode_sdf"], ["def", "create_mesh", "(", "\n", "decoder", ",", "latent_vec", ",", "filename", ",", "N", "=", "256", ",", "max_batch", "=", "(", "32", "**", "3", "*", "4", ")", ",", "offset", "=", "None", ",", "scale", "=", "None", ",", "volume_size", "=", "2.0", "\n", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "ply_filename", "=", "filename", "\n", "\n", "# NOTE: the voxel_origin is actually the (bottom, left, down) corner, not the middle", "\n", "voxel_origin", "=", "[", "-", "volume_size", "/", "2.0", ",", "-", "volume_size", "/", "2.0", ",", "-", "volume_size", "/", "2.0", "]", "\n", "voxel_size", "=", "volume_size", "/", "(", "N", "-", "1", ")", "\n", "\n", "overall_index", "=", "torch", ".", "arange", "(", "0", ",", "N", "**", "3", ",", "1", ",", "out", "=", "torch", ".", "LongTensor", "(", ")", ")", "\n", "samples", "=", "torch", ".", "zeros", "(", "N", "**", "3", ",", "4", ")", "\n", "\n", "# transform first 3 columns", "\n", "# to be the x, y, z index", "\n", "samples", "[", ":", ",", "2", "]", "=", "overall_index", "%", "N", "\n", "samples", "[", ":", ",", "1", "]", "=", "(", "overall_index", ".", "long", "(", ")", "//", "N", ")", "%", "N", "\n", "samples", "[", ":", ",", "0", "]", "=", "(", "(", "overall_index", ".", "long", "(", ")", "//", "N", ")", "//", "N", ")", "%", "N", "\n", "\n", "# transform first 3 columns", "\n", "# to be the x, y, z coordinate", "\n", "samples", "[", ":", ",", "0", "]", "=", "(", "samples", "[", ":", ",", "0", "]", "*", "voxel_size", ")", "+", "voxel_origin", "[", "2", "]", "\n", "samples", "[", ":", ",", "1", "]", "=", "(", "samples", "[", ":", ",", "1", "]", "*", "voxel_size", ")", "+", "voxel_origin", "[", "1", "]", "\n", "samples", "[", ":", ",", "2", "]", "=", "(", "samples", "[", ":", ",", "2", "]", "*", "voxel_size", ")", "+", "voxel_origin", "[", "0", "]", "\n", "\n", "num_samples", "=", "N", "**", "3", "\n", "\n", "samples", ".", "requires_grad", "=", "False", "\n", "\n", "head", "=", "0", "\n", "\n", "while", "head", "<", "num_samples", ":", "\n", "        ", "sample_subset", "=", "samples", "[", "head", ":", "min", "(", "head", "+", "max_batch", ",", "num_samples", ")", ",", "0", ":", "3", "]", ".", "cuda", "(", ")", "\n", "\n", "samples", "[", "head", ":", "min", "(", "head", "+", "max_batch", ",", "num_samples", ")", ",", "3", "]", "=", "(", "\n", "deep_sdf", ".", "utils", ".", "decode_sdf", "(", "decoder", ",", "latent_vec", ",", "sample_subset", ")", "\n", ".", "squeeze", "(", "1", ")", "\n", ".", "detach", "(", ")", "\n", ".", "cpu", "(", ")", "\n", ")", "\n", "head", "+=", "max_batch", "\n", "\n", "", "sdf_values", "=", "samples", "[", ":", ",", "3", "]", "\n", "sdf_values", "=", "sdf_values", ".", "reshape", "(", "N", ",", "N", ",", "N", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "debug", "(", "\"sampling takes: %f\"", "%", "(", "end", "-", "start", ")", ")", "\n", "\n", "convert_sdf_samples_to_ply", "(", "\n", "sdf_values", ".", "data", ".", "cpu", "(", ")", ",", "\n", "voxel_origin", ",", "\n", "voxel_size", ",", "\n", "ply_filename", "+", "\".ply\"", ",", "\n", "offset", ",", "\n", "scale", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.mesh.create_mesh_octree": [[72, 177], ["time.time", "numpy.arange", "numpy.zeros", "samples.reshape.reshape", "numpy.zeros", "numpy.ones", "numpy.zeros_like", "time.time", "logging.debug", "mesh.convert_sdf_samples_to_ply", "numpy.logical_and", "torch.from_numpy().cuda", "print", "numpy.concatenate", "numpy.arange", "numpy.zeros", "numpy.asarray", "numpy.min", "numpy.max", "zip", "torch.arange().long().cuda", "deep_sdf.utils.decode_sdf().view().detach", "sdf_.append", "torch.from_numpy", "clamp_func", "clamp_func.cpu().numpy", "torch.arange().long", "deep_sdf.utils.decode_sdf().view", "clamp_func.cpu", "torch.arange", "deep_sdf.utils.decode_sdf", "min"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.mesh.convert_sdf_samples_to_ply", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.utils.decode_sdf"], ["", "def", "create_mesh_octree", "(", "\n", "decoder", ",", "latent_vec", ",", "filename", ",", "N", "=", "256", ",", "max_batch", "=", "32", "**", "3", ",", "offset", "=", "None", ",", "scale", "=", "None", ",", "clamp_func", "=", "None", ",", "\n", "volume_size", "=", "2.0", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "ply_filename", "=", "filename", "\n", "\n", "# NOTE: the voxel_origin is actually the (bottom, left, down) corner, not the middle", "\n", "voxel_origin", "=", "[", "-", "volume_size", "/", "2.0", ",", "-", "volume_size", "/", "2.0", ",", "-", "volume_size", "/", "2.0", "]", "\n", "voxel_size", "=", "volume_size", "/", "(", "N", "-", "1", ")", "\n", "\n", "overall_index", "=", "np", ".", "arange", "(", "0", ",", "N", "**", "3", ")", "\n", "samples", "=", "np", ".", "zeros", "(", "[", "N", "**", "3", ",", "4", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# transform first 3 columns", "\n", "# to be the x, y, z index", "\n", "samples", "[", ":", ",", "2", "]", "=", "overall_index", "%", "N", "\n", "samples", "[", ":", ",", "1", "]", "=", "(", "overall_index", "//", "N", ")", "%", "N", "\n", "samples", "[", ":", ",", "0", "]", "=", "(", "(", "overall_index", "//", "N", ")", "//", "N", ")", "%", "N", "\n", "\n", "# transform first 3 columns", "\n", "# to be the x, y, z coordinate", "\n", "samples", "[", ":", ",", "0", "]", "=", "(", "samples", "[", ":", ",", "0", "]", "*", "voxel_size", ")", "+", "voxel_origin", "[", "2", "]", "\n", "samples", "[", ":", ",", "1", "]", "=", "(", "samples", "[", ":", ",", "1", "]", "*", "voxel_size", ")", "+", "voxel_origin", "[", "1", "]", "\n", "samples", "[", ":", ",", "2", "]", "=", "(", "samples", "[", ":", ",", "2", "]", "*", "voxel_size", ")", "+", "voxel_origin", "[", "0", "]", "\n", "\n", "samples", "=", "samples", ".", "reshape", "(", "[", "N", ",", "N", ",", "N", ",", "4", "]", ")", "\n", "\n", "sdf_values", "=", "np", ".", "zeros", "(", "[", "N", ",", "N", ",", "N", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dirty", "=", "np", ".", "ones", "(", "[", "N", ",", "N", ",", "N", "]", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "grid_mask", "=", "np", ".", "zeros_like", "(", "dirty", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "\n", "init_res", "=", "64", "\n", "ignore_thres", "=", "volume_size", "/", "N", "/", "4", "\n", "reso", "=", "N", "//", "init_res", "\n", "while", "reso", ">", "0", ":", "\n", "        ", "grid_mask", "[", "0", ":", "N", ":", "reso", ",", "0", ":", "N", ":", "reso", ",", "0", ":", "N", ":", "reso", "]", "=", "True", "\n", "\n", "test_mask", "=", "np", ".", "logical_and", "(", "grid_mask", ",", "dirty", ")", "\n", "samples_", "=", "samples", "[", "test_mask", "]", "\n", "samples_", "=", "torch", ".", "from_numpy", "(", "samples_", ")", ".", "cuda", "(", ")", "\n", "sdf_", "=", "[", "]", "\n", "\n", "head", "=", "0", "\n", "print", "(", "samples_", ".", "shape", "[", "0", "]", ")", "\n", "while", "head", "<", "samples_", ".", "shape", "[", "0", "]", ":", "\n", "            ", "query_idx", "=", "torch", ".", "arange", "(", "head", ",", "min", "(", "head", "+", "max_batch", ",", "samples_", ".", "shape", "[", "0", "]", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "s", "=", "(", "deep_sdf", ".", "utils", ".", "decode_sdf", "(", "\n", "decoder", ",", "latent_vec", ",", "samples_", "[", "query_idx", ",", ":", "3", "]", ")", ".", "view", "(", "[", "-", "1", "]", ")", ".", "detach", "(", ")", "\n", ")", "\n", "if", "clamp_func", "is", "not", "None", ":", "\n", "                ", "s", "=", "clamp_func", "(", "s", ")", "\n", "\n", "", "sdf_", ".", "append", "(", "s", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "head", "+=", "max_batch", "\n", "\n", "", "sdf_values", "[", "test_mask", "]", "=", "np", ".", "concatenate", "(", "sdf_", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "reso", "<=", "1", ":", "\n", "            ", "break", "\n", "\n", "", "N_ds", "=", "N", "//", "reso", "-", "1", "\n", "overall_index_ds", "=", "np", ".", "arange", "(", "0", ",", "N_ds", "**", "3", ")", "\n", "samples_ds", "=", "np", ".", "zeros", "(", "[", "N_ds", "**", "3", ",", "4", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "# transform first 3 columns", "\n", "# to be the x, y, z index", "\n", "samples_ds", "[", ":", ",", "2", "]", "=", "overall_index_ds", "%", "N_ds", "\n", "samples_ds", "[", ":", ",", "1", "]", "=", "(", "overall_index_ds", "//", "N_ds", ")", "%", "N_ds", "\n", "samples_ds", "[", ":", ",", "0", "]", "=", "(", "(", "overall_index_ds", "//", "N_ds", ")", "//", "N_ds", ")", "%", "N_ds", "\n", "samples_ds", "*=", "reso", "\n", "\n", "dirty_ds", "=", "dirty", "[", "samples_ds", "[", ":", ",", "0", "]", "+", "reso", "//", "2", ",", "\n", "samples_ds", "[", ":", ",", "1", "]", "+", "reso", "//", "2", ",", "samples_ds", "[", ":", ",", "2", "]", "+", "reso", "//", "2", "]", "\n", "samples_ds", "=", "samples_ds", "[", "dirty_ds", "]", "\n", "v0", "=", "sdf_values", "[", "samples_ds", "[", ":", ",", "0", "]", ",", "samples_ds", "[", ":", ",", "1", "]", ",", "samples_ds", "[", ":", ",", "2", "]", "]", "\n", "v1", "=", "sdf_values", "[", "samples_ds", "[", ":", ",", "0", "]", ",", "samples_ds", "[", ":", ",", "1", "]", ",", "samples_ds", "[", ":", ",", "2", "]", "+", "reso", "]", "\n", "v2", "=", "sdf_values", "[", "samples_ds", "[", ":", ",", "0", "]", ",", "samples_ds", "[", ":", ",", "1", "]", "+", "reso", ",", "samples_ds", "[", ":", ",", "2", "]", "]", "\n", "v3", "=", "sdf_values", "[", "samples_ds", "[", ":", ",", "0", "]", ",", "samples_ds", "[", ":", ",", "1", "]", "+", "reso", ",", "samples_ds", "[", ":", ",", "2", "]", "+", "reso", "]", "\n", "v4", "=", "sdf_values", "[", "samples_ds", "[", ":", ",", "0", "]", "+", "reso", ",", "samples_ds", "[", ":", ",", "1", "]", ",", "samples_ds", "[", ":", ",", "2", "]", "]", "\n", "v5", "=", "sdf_values", "[", "samples_ds", "[", ":", ",", "0", "]", "+", "reso", ",", "samples_ds", "[", ":", ",", "1", "]", ",", "samples_ds", "[", ":", ",", "2", "]", "+", "reso", "]", "\n", "v6", "=", "sdf_values", "[", "samples_ds", "[", ":", ",", "0", "]", "+", "reso", ",", "samples_ds", "[", ":", ",", "1", "]", "+", "reso", ",", "samples_ds", "[", ":", ",", "2", "]", "]", "\n", "v7", "=", "sdf_values", "[", "samples_ds", "[", ":", ",", "0", "]", "+", "reso", ",", "samples_ds", "[", ":", ",", "1", "]", "+", "reso", ",", "samples_ds", "[", ":", ",", "2", "]", "+", "reso", "]", "\n", "\n", "vs", "=", "np", ".", "asarray", "(", "[", "v0", ",", "v1", ",", "v2", ",", "v3", ",", "v4", ",", "v5", ",", "v6", ",", "v7", "]", ")", "\n", "vmn", "=", "np", ".", "min", "(", "vs", ",", "axis", "=", "0", ")", "\n", "vmx", "=", "np", ".", "max", "(", "vs", ",", "axis", "=", "0", ")", "\n", "v_", "=", "0.5", "*", "(", "vmx", "+", "vmn", ")", "\n", "clean_flag", "=", "(", "vmx", "-", "vmn", ")", "<", "ignore_thres", "\n", "for", "sample", ",", "v", "in", "zip", "(", "samples_ds", "[", "clean_flag", "]", ",", "v_", "[", "clean_flag", "]", ")", ":", "\n", "            ", "x", ",", "y", ",", "z", "=", "sample", "[", "0", "]", ",", "sample", "[", "1", "]", ",", "sample", "[", "2", "]", "\n", "sdf_values", "[", "x", ":", "x", "+", "reso", ",", "y", ":", "y", "+", "reso", ",", "z", ":", "z", "+", "reso", "]", "=", "v", "\n", "dirty", "[", "x", ":", "x", "+", "reso", ",", "y", ":", "y", "+", "reso", ",", "z", ":", "z", "+", "reso", "]", "=", "False", "\n", "\n", "", "reso", "//=", "2", "\n", "\n", "", "end", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "debug", "(", "\"sampling takes: %f\"", "%", "(", "end", "-", "start", ")", ")", "\n", "\n", "convert_sdf_samples_to_ply", "(", "\n", "sdf_values", ",", "\n", "voxel_origin", ",", "\n", "voxel_size", ",", "\n", "ply_filename", "+", "\".ply\"", ",", "\n", "offset", ",", "\n", "scale", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.mesh.convert_sdf_samples_to_ply": [[180, 249], ["time.time", "isinstance", "skimage.measure.marching_cubes_lewiner", "numpy.zeros_like", "numpy.zeros", "range", "range", "numpy.array", "plyfile.PlyElement.describe", "plyfile.PlyElement.describe", "plyfile.PlyData", "logging.debug", "plyfile.PlyData.write", "logging.debug", "input_3d_sdf_array.numpy", "isinstance", "tuple", "faces_building.append", "faces[].tolist", "time.time"], "function", ["None"], ["", "def", "convert_sdf_samples_to_ply", "(", "\n", "input_3d_sdf_array", ",", "\n", "voxel_grid_origin", ",", "\n", "voxel_size", ",", "\n", "ply_filename_out", ",", "\n", "offset", "=", "None", ",", "\n", "scale", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Convert sdf samples to .ply\n\n    :param input_3d_sdf_array: a float array of shape (n,n,n)\n    :voxel_grid_origin: a list of three floats: the bottom, left, down origin of the voxel grid\n    :voxel_size: float, the size of the voxels\n    :ply_filename_out: string, path of the filename to save to\n\n    This function adapted from: https://github.com/RobotLocomotion/spartan\n    \"\"\"", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "isinstance", "(", "input_3d_sdf_array", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "numpy_3d_sdf_tensor", "=", "input_3d_sdf_array", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "input_3d_sdf_array", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "numpy_3d_sdf_tensor", "=", "input_3d_sdf_array", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "verts", ",", "faces", ",", "normals", ",", "values", "=", "skimage", ".", "measure", ".", "marching_cubes_lewiner", "(", "\n", "numpy_3d_sdf_tensor", ",", "level", "=", "0.0", ",", "spacing", "=", "[", "voxel_size", "]", "*", "3", "\n", ")", "\n", "\n", "# transform from voxel coordinates to camera coordinates", "\n", "# note x and y are flipped in the output of marching_cubes", "\n", "mesh_points", "=", "np", ".", "zeros_like", "(", "verts", ")", "\n", "mesh_points", "[", ":", ",", "0", "]", "=", "voxel_grid_origin", "[", "0", "]", "+", "verts", "[", ":", ",", "0", "]", "\n", "mesh_points", "[", ":", ",", "1", "]", "=", "voxel_grid_origin", "[", "1", "]", "+", "verts", "[", ":", ",", "1", "]", "\n", "mesh_points", "[", ":", ",", "2", "]", "=", "voxel_grid_origin", "[", "2", "]", "+", "verts", "[", ":", ",", "2", "]", "\n", "\n", "# apply additional offset and scale", "\n", "if", "scale", "is", "not", "None", ":", "\n", "        ", "mesh_points", "=", "mesh_points", "/", "scale", "\n", "", "if", "offset", "is", "not", "None", ":", "\n", "        ", "mesh_points", "=", "mesh_points", "-", "offset", "\n", "\n", "# try writing to the ply file", "\n", "\n", "", "num_verts", "=", "verts", ".", "shape", "[", "0", "]", "\n", "num_faces", "=", "faces", ".", "shape", "[", "0", "]", "\n", "\n", "verts_tuple", "=", "np", ".", "zeros", "(", "(", "num_verts", ",", ")", ",", "dtype", "=", "[", "(", "\"x\"", ",", "\"f4\"", ")", ",", "(", "\"y\"", ",", "\"f4\"", ")", ",", "(", "\"z\"", ",", "\"f4\"", ")", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "num_verts", ")", ":", "\n", "        ", "verts_tuple", "[", "i", "]", "=", "tuple", "(", "mesh_points", "[", "i", ",", ":", "]", ")", "\n", "\n", "", "faces_building", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "num_faces", ")", ":", "\n", "        ", "faces_building", ".", "append", "(", "(", "(", "faces", "[", "i", ",", ":", "]", ".", "tolist", "(", ")", ",", ")", ")", ")", "\n", "", "faces_tuple", "=", "np", ".", "array", "(", "faces_building", ",", "dtype", "=", "[", "(", "\"vertex_indices\"", ",", "\"i4\"", ",", "(", "3", ",", ")", ")", "]", ")", "\n", "\n", "el_verts", "=", "plyfile", ".", "PlyElement", ".", "describe", "(", "verts_tuple", ",", "\"vertex\"", ")", "\n", "el_faces", "=", "plyfile", ".", "PlyElement", ".", "describe", "(", "faces_tuple", ",", "\"face\"", ")", "\n", "\n", "ply_data", "=", "plyfile", ".", "PlyData", "(", "[", "el_verts", ",", "el_faces", "]", ")", "\n", "logging", ".", "debug", "(", "\"saving mesh to %s\"", "%", "(", "ply_filename_out", ")", ")", "\n", "ply_data", ".", "write", "(", "ply_filename_out", ")", "\n", "\n", "logging", ".", "debug", "(", "\n", "\"converting to ply format and writing to file took {} s\"", ".", "format", "(", "\n", "time", ".", "time", "(", ")", "-", "start_time", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.SDFSamples.__init__": [[126, 160], ["data.get_instance_filenames", "logging.debug", "tqdm.tqdm", "os.path.join", "numpy.load", "data.remove_nans", "data.remove_nans", "data.SDFSamples.loaded_data.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "str", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.get_instance_filenames", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.remove_nans", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.remove_nans"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "data_source", ",", "\n", "split", ",", "\n", "subsample", ",", "\n", "load_ram", "=", "False", ",", "\n", "print_filename", "=", "False", ",", "\n", "num_files", "=", "1000000", ",", "\n", ")", ":", "\n", "        ", "self", ".", "subsample", "=", "subsample", "\n", "\n", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "npyfiles", "=", "get_instance_filenames", "(", "data_source", ",", "split", ")", "\n", "\n", "logging", ".", "debug", "(", "\n", "\"using \"", "\n", "+", "str", "(", "len", "(", "self", ".", "npyfiles", ")", ")", "\n", "+", "\" shapes from data source \"", "\n", "+", "data_source", "\n", ")", "\n", "\n", "self", ".", "load_ram", "=", "load_ram", "\n", "\n", "if", "load_ram", ":", "\n", "            ", "self", ".", "loaded_data", "=", "[", "]", "\n", "for", "f", "in", "tqdm", ".", "tqdm", "(", "self", ".", "npyfiles", ",", "ascii", "=", "True", ")", ":", "\n", "                ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_source", ",", "ws", ".", "sdf_samples_subdir", ",", "f", ")", "\n", "npz", "=", "np", ".", "load", "(", "filename", ")", "\n", "pos_tensor", "=", "remove_nans", "(", "torch", ".", "from_numpy", "(", "npz", "[", "\"pos\"", "]", ")", ")", "\n", "neg_tensor", "=", "remove_nans", "(", "torch", ".", "from_numpy", "(", "npz", "[", "\"neg\"", "]", ")", ")", "\n", "self", ".", "loaded_data", ".", "append", "(", "\n", "[", "\n", "pos_tensor", "[", "torch", ".", "randperm", "(", "pos_tensor", ".", "shape", "[", "0", "]", ")", "]", ",", "\n", "neg_tensor", "[", "torch", ".", "randperm", "(", "neg_tensor", ".", "shape", "[", "0", "]", ")", "]", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.SDFSamples.__len__": [[163, 165], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "npyfiles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.SDFSamples.__getitem__": [[166, 177], ["os.path.join", "data.unpack_sdf_samples_from_ram", "data.unpack_sdf_samples"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.unpack_sdf_samples_from_ram", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.unpack_sdf_samples"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "data_source", ",", "ws", ".", "sdf_samples_subdir", ",", "self", ".", "npyfiles", "[", "idx", "]", "\n", ")", "\n", "if", "self", ".", "load_ram", ":", "\n", "            ", "return", "(", "\n", "unpack_sdf_samples_from_ram", "(", "self", ".", "loaded_data", "[", "idx", "]", ",", "self", ".", "subsample", ")", ",", "\n", "idx", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "unpack_sdf_samples", "(", "filename", ",", "self", ".", "subsample", ")", ",", "idx", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.get_instance_filenames": [[16, 35], ["os.path.join", "os.path.isfile", "logging.warning", "os.path.join"], "function", ["None"], ["def", "get_instance_filenames", "(", "data_source", ",", "split", ")", ":", "\n", "    ", "npzfiles", "=", "[", "]", "\n", "for", "dataset", "in", "split", ":", "\n", "        ", "for", "class_name", "in", "split", "[", "dataset", "]", ":", "\n", "            ", "for", "instance_name", "in", "split", "[", "dataset", "]", "[", "class_name", "]", ":", "\n", "                ", "instance_filename", "=", "os", ".", "path", ".", "join", "(", "\n", "dataset", ",", "class_name", ",", "instance_name", "+", "\".npz\"", "\n", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "\n", "os", ".", "path", ".", "join", "(", "data_source", ",", "ws", ".", "sdf_samples_subdir", ",", "instance_filename", ")", "\n", ")", ":", "\n", "# raise RuntimeError(", "\n", "#     'Requested non-existent file \"' + instance_filename + \"'\"", "\n", "# )", "\n", "                    ", "logging", ".", "warning", "(", "\n", "\"Requested non-existent file '{}'\"", ".", "format", "(", "instance_filename", ")", "\n", ")", "\n", "", "npzfiles", "+=", "[", "instance_filename", "]", "\n", "", "", "", "return", "npzfiles", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.find_mesh_in_directory": [[49, 58], ["list", "list", "len", "data.NoMeshFileError", "glob.iglob", "glob.iglob", "len", "data.MultipleMeshFileError"], "function", ["None"], ["", "def", "find_mesh_in_directory", "(", "shape_dir", ")", ":", "\n", "    ", "mesh_filenames", "=", "list", "(", "glob", ".", "iglob", "(", "shape_dir", "+", "\"/**/*.obj\"", ")", ")", "+", "list", "(", "\n", "glob", ".", "iglob", "(", "shape_dir", "+", "\"/*.obj\"", ")", "\n", ")", "\n", "if", "len", "(", "mesh_filenames", ")", "==", "0", ":", "\n", "        ", "raise", "NoMeshFileError", "(", ")", "\n", "", "elif", "len", "(", "mesh_filenames", ")", ">", "1", ":", "\n", "        ", "raise", "MultipleMeshFileError", "(", ")", "\n", "", "return", "mesh_filenames", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.remove_nans": [[60, 63], ["torch.isnan", "torch.isnan"], "function", ["None"], ["", "def", "remove_nans", "(", "tensor", ")", ":", "\n", "    ", "tensor_nan", "=", "torch", ".", "isnan", "(", "tensor", "[", ":", ",", "3", "]", ")", "\n", "return", "tensor", "[", "~", "tensor_nan", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.read_sdf_samples_into_ram": [[65, 71], ["numpy.load", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "read_sdf_samples_into_ram", "(", "filename", ")", ":", "\n", "    ", "npz", "=", "np", ".", "load", "(", "filename", ")", "\n", "pos_tensor", "=", "torch", ".", "from_numpy", "(", "npz", "[", "\"pos\"", "]", ")", "\n", "neg_tensor", "=", "torch", ".", "from_numpy", "(", "npz", "[", "\"neg\"", "]", ")", "\n", "\n", "return", "[", "pos_tensor", ",", "neg_tensor", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.unpack_sdf_samples": [[73, 94], ["numpy.load", "data.remove_nans", "data.remove_nans", "int", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.cat", "torch.cat", "torch.randperm", "torch.randperm", "torch.index_select", "torch.index_select", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "function", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.remove_nans", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.remove_nans"], ["", "def", "unpack_sdf_samples", "(", "filename", ",", "subsample", "=", "None", ")", ":", "\n", "    ", "npz", "=", "np", ".", "load", "(", "filename", ")", "\n", "if", "subsample", "is", "None", ":", "\n", "        ", "return", "npz", "\n", "", "pos_tensor", "=", "remove_nans", "(", "torch", ".", "from_numpy", "(", "npz", "[", "\"pos\"", "]", ")", ")", "\n", "neg_tensor", "=", "remove_nans", "(", "torch", ".", "from_numpy", "(", "npz", "[", "\"neg\"", "]", ")", ")", "\n", "\n", "# split the sample into half", "\n", "half", "=", "int", "(", "subsample", "/", "2", ")", "\n", "\n", "random_pos", "=", "(", "torch", ".", "rand", "(", "half", ")", "*", "pos_tensor", ".", "shape", "[", "0", "]", ")", ".", "long", "(", ")", "\n", "random_neg", "=", "(", "torch", ".", "rand", "(", "half", ")", "*", "neg_tensor", ".", "shape", "[", "0", "]", ")", ".", "long", "(", ")", "\n", "\n", "sample_pos", "=", "torch", ".", "index_select", "(", "pos_tensor", ",", "0", ",", "random_pos", ")", "\n", "sample_neg", "=", "torch", ".", "index_select", "(", "neg_tensor", ",", "0", ",", "random_neg", ")", "\n", "\n", "samples", "=", "torch", ".", "cat", "(", "[", "sample_pos", ",", "sample_neg", "]", ",", "0", ")", "\n", "randidx", "=", "torch", ".", "randperm", "(", "samples", ".", "shape", "[", "0", "]", ")", "\n", "samples", "=", "torch", ".", "index_select", "(", "samples", ",", "0", ",", "randidx", ")", "\n", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.data.unpack_sdf_samples_from_ram": [[96, 123], ["int", "random.randint", "torch.cat", "torch.cat", "torch.randperm", "torch.randperm", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "random.randint", "torch.rand", "torch.rand"], "function", ["None"], ["", "def", "unpack_sdf_samples_from_ram", "(", "data", ",", "subsample", "=", "None", ")", ":", "\n", "    ", "if", "subsample", "is", "None", ":", "\n", "        ", "return", "data", "\n", "", "pos_tensor", "=", "data", "[", "0", "]", "\n", "neg_tensor", "=", "data", "[", "1", "]", "\n", "\n", "# split the sample into half", "\n", "half", "=", "int", "(", "subsample", "/", "2", ")", "\n", "\n", "pos_size", "=", "pos_tensor", ".", "shape", "[", "0", "]", "\n", "neg_size", "=", "neg_tensor", ".", "shape", "[", "0", "]", "\n", "\n", "pos_start_ind", "=", "random", ".", "randint", "(", "0", ",", "pos_size", "-", "half", ")", "\n", "sample_pos", "=", "pos_tensor", "[", "pos_start_ind", ":", "(", "pos_start_ind", "+", "half", ")", "]", "\n", "\n", "if", "neg_size", "<=", "half", ":", "\n", "        ", "random_neg", "=", "(", "torch", ".", "rand", "(", "half", ")", "*", "neg_tensor", ".", "shape", "[", "0", "]", ")", ".", "long", "(", ")", "\n", "sample_neg", "=", "torch", ".", "index_select", "(", "neg_tensor", ",", "0", ",", "random_neg", ")", "\n", "", "else", ":", "\n", "        ", "neg_start_ind", "=", "random", ".", "randint", "(", "0", ",", "neg_size", "-", "half", ")", "\n", "sample_neg", "=", "neg_tensor", "[", "neg_start_ind", ":", "(", "neg_start_ind", "+", "half", ")", "]", "\n", "\n", "", "samples", "=", "torch", ".", "cat", "(", "[", "sample_pos", ",", "sample_neg", "]", ",", "0", ")", "\n", "randidx", "=", "torch", ".", "randperm", "(", "samples", ".", "shape", "[", "0", "]", ")", "\n", "samples", "=", "torch", ".", "index_select", "(", "samples", ",", "0", ",", "randidx", ")", "\n", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.loss.LipschitzLoss.__init__": [[12, 17], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "k", ",", "reduction", "=", "None", ")", ":", "\n", "        ", "super", "(", "LipschitzLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.loss.LipschitzLoss.forward": [[18, 25], ["loss.LipschitzLoss.relu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ")", ":", "\n", "        ", "l", "=", "self", ".", "relu", "(", "torch", ".", "norm", "(", "y1", "-", "y2", ",", "dim", "=", "-", "1", ")", "/", "(", "torch", ".", "norm", "(", "x1", "-", "x2", ",", "dim", "=", "-", "1", ")", "+", "1e-3", ")", "-", "self", ".", "k", ")", "\n", "# l = torch.clamp(l, 0.0, 5.0)    # avoid", "\n", "if", "self", ".", "reduction", "is", "None", "or", "self", ".", "reduction", "==", "\"mean\"", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "l", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.loss.HuberFunc.__init__": [[28, 31], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduction", "=", "None", ")", ":", "\n", "        ", "super", "(", "HuberFunc", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.loss.HuberFunc.forward": [[32, 40], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "delta", ")", ":", "\n", "        ", "n", "=", "torch", ".", "abs", "(", "x", ")", "\n", "cond", "=", "n", "<", "delta", "\n", "l", "=", "torch", ".", "where", "(", "cond", ",", "0.5", "*", "n", "**", "2", ",", "n", "*", "delta", "-", "0.5", "*", "delta", "**", "2", ")", "\n", "if", "self", ".", "reduction", "is", "None", "or", "self", ".", "reduction", "==", "\"mean\"", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "l", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.loss.SoftL1Loss.__init__": [[43, 46], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduction", "=", "None", ")", ":", "\n", "        ", "super", "(", "SoftL1Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.loss.SoftL1Loss.forward": [[47, 55], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "eps", "=", "0.0", ",", "lamb", "=", "0.0", ")", ":", "\n", "        ", "ret", "=", "torch", ".", "abs", "(", "input", "-", "target", ")", "-", "eps", "\n", "ret", "=", "torch", ".", "clamp", "(", "ret", ",", "min", "=", "0.0", ",", "max", "=", "100.0", ")", "\n", "ret", "=", "ret", "*", "(", "1", "+", "lamb", "*", "torch", ".", "sign", "(", "target", ")", "*", "torch", ".", "sign", "(", "target", "-", "input", ")", ")", "\n", "if", "self", ".", "reduction", "is", "None", "or", "self", ".", "reduction", "==", "\"mean\"", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "ret", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "sum", "(", "ret", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.lr_schedule.LearningRateSchedule.get_learning_rate": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "get_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.lr_schedule.ConstantLearningRateSchedule.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.lr_schedule.ConstantLearningRateSchedule.get_learning_rate": [[13, 15], ["None"], "methods", ["None"], ["", "def", "get_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "return", "self", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.lr_schedule.StepLearningRateSchedule.__init__": [[18, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "initial", ",", "interval", ",", "factor", ")", ":", "\n", "        ", "self", ".", "initial", "=", "initial", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "factor", "=", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.lr_schedule.StepLearningRateSchedule.get_learning_rate": [[23, 26], ["None"], "methods", ["None"], ["", "def", "get_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "\n", "        ", "return", "self", ".", "initial", "*", "(", "self", ".", "factor", "**", "(", "epoch", "//", "self", ".", "interval", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.lr_schedule.WarmupLearningRateSchedule.__init__": [[29, 33], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "initial", ",", "warmed_up", ",", "length", ")", ":", "\n", "        ", "self", ".", "initial", "=", "initial", "\n", "self", ".", "warmed_up", "=", "warmed_up", "\n", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.lr_schedule.WarmupLearningRateSchedule.get_learning_rate": [[34, 38], ["None"], "methods", ["None"], ["", "def", "get_learning_rate", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", ">", "self", ".", "length", ":", "\n", "            ", "return", "self", ".", "warmed_up", "\n", "", "return", "self", ".", "initial", "+", "(", "self", ".", "warmed_up", "-", "self", ".", "initial", ")", "*", "epoch", "/", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.lr_schedule.get_learning_rate_schedules": [[40, 75], ["schedules.append", "lr_schedule.StepLearningRateSchedule", "schedules.append", "lr_schedule.WarmupLearningRateSchedule", "schedules.append", "Exception", "lr_schedule.ConstantLearningRateSchedule"], "function", ["None"], ["", "", "def", "get_learning_rate_schedules", "(", "specs", ")", ":", "\n", "\n", "    ", "schedule_specs", "=", "specs", "[", "\"LearningRateSchedule\"", "]", "\n", "\n", "schedules", "=", "[", "]", "\n", "\n", "for", "schedule_specs", "in", "schedule_specs", ":", "\n", "\n", "        ", "if", "schedule_specs", "[", "\"Type\"", "]", "==", "\"Step\"", ":", "\n", "            ", "schedules", ".", "append", "(", "\n", "StepLearningRateSchedule", "(", "\n", "schedule_specs", "[", "\"Initial\"", "]", ",", "\n", "schedule_specs", "[", "\"Interval\"", "]", ",", "\n", "schedule_specs", "[", "\"Factor\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "elif", "schedule_specs", "[", "\"Type\"", "]", "==", "\"Warmup\"", ":", "\n", "            ", "schedules", ".", "append", "(", "\n", "WarmupLearningRateSchedule", "(", "\n", "schedule_specs", "[", "\"Initial\"", "]", ",", "\n", "schedule_specs", "[", "\"Final\"", "]", ",", "\n", "schedule_specs", "[", "\"Length\"", "]", ",", "\n", ")", "\n", ")", "\n", "", "elif", "schedule_specs", "[", "\"Type\"", "]", "==", "\"Constant\"", ":", "\n", "            ", "schedules", ".", "append", "(", "ConstantLearningRateSchedule", "(", "schedule_specs", "[", "\"Value\"", "]", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\n", "'no known learning rate schedule of type \"{}\"'", ".", "format", "(", "\n", "schedule_specs", "[", "\"Type\"", "]", "\n", ")", "\n", ")", "\n", "\n", "", "", "return", "schedules", "", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.utils.add_common_args": [[8, 29], ["arg_parser.add_argument", "arg_parser.add_argument", "arg_parser.add_argument"], "function", ["None"], ["def", "add_common_args", "(", "arg_parser", ")", ":", "\n", "    ", "arg_parser", ".", "add_argument", "(", "\n", "\"--debug\"", ",", "\n", "dest", "=", "\"debug\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"If set, debugging messages will be printed\"", ",", "\n", ")", "\n", "arg_parser", ".", "add_argument", "(", "\n", "\"--quiet\"", ",", "\n", "\"-q\"", ",", "\n", "dest", "=", "\"quiet\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"If set, only warnings will be printed\"", ",", "\n", ")", "\n", "arg_parser", ".", "add_argument", "(", "\n", "\"--log\"", ",", "\n", "dest", "=", "\"logfile\"", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"If set, the log will be saved using the specified filename.\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.utils.configure_logging": [[32, 49], ["logging.getLogger", "logging.StreamHandler", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "logging.getLogger.setLevel"], "function", ["None"], ["", "def", "configure_logging", "(", "args", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "if", "args", ".", "debug", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "", "elif", "args", ".", "quiet", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "WARNING", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "", "logger_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"DeepSdf - %(levelname)s - %(message)s\"", ")", "\n", "logger_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "logger_handler", ")", "\n", "\n", "if", "args", ".", "logfile", "is", "not", "None", ":", "\n", "        ", "file_logger_handler", "=", "logging", ".", "FileHandler", "(", "args", ".", "logfile", ")", "\n", "file_logger_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_logger_handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.utils.decode_sdf": [[51, 67], ["decoder", "latent_vector.expand", "torch.cat", "torch.no_grad", "RuntimeError", "decoder"], "function", ["None"], ["", "", "def", "decode_sdf", "(", "decoder", ",", "latent_vector", ",", "queries", ")", ":", "\n", "    ", "num_samples", "=", "queries", ".", "shape", "[", "0", "]", "\n", "\n", "if", "latent_vector", "is", "None", ":", "\n", "        ", "inputs", "=", "queries", "\n", "sdf", "=", "decoder", "(", "inputs", ")", "[", ":", ",", ":", "1", "]", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "latent_repeat", "=", "latent_vector", ".", "expand", "(", "num_samples", ",", "-", "1", ")", "\n", "inputs", "=", "torch", ".", "cat", "(", "[", "latent_repeat", ",", "queries", "]", ",", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "sdf", "=", "decoder", "(", "inputs", ")", "[", ":", ",", ":", "1", "]", "\n", "", "", "except", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Failed to decode SDF\"", ")", "\n", "\n", "", "", "return", "sdf", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.deep_sdf.utils.decode_warping": [[69, 82], ["latent_vector.expand", "torch.cat", "torch.no_grad", "decoder"], "function", ["None"], ["", "def", "decode_warping", "(", "decoder", ",", "latent_vector", ",", "queries", ")", ":", "\n", "    ", "num_samples", "=", "queries", ".", "shape", "[", "0", "]", "\n", "\n", "if", "latent_vector", "is", "None", ":", "\n", "        ", "inputs", "=", "queries", "\n", "", "else", ":", "\n", "        ", "latent_repeat", "=", "latent_vector", ".", "expand", "(", "num_samples", ",", "-", "1", ")", "\n", "inputs", "=", "torch", ".", "cat", "(", "[", "latent_repeat", ",", "queries", "]", ",", "1", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "warped", ",", "_", "=", "decoder", "(", "inputs", ",", "output_warped_points", "=", "True", ")", "\n", "\n", "", "return", "warped", "\n", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.metrics.emd.compute_trimesh_emd": [[12, 41], ["numpy.linalg.norm", "scipy.optimize.linear_sum_assignment", "trimesh.sample.sample_surface", "trimesh.sample.sample_surface", "numpy.random.permutation", "dist[].sum", "numpy.expand_dims", "numpy.expand_dims"], "function", ["None"], ["def", "compute_trimesh_emd", "(", "gt_points", ",", "gen_mesh", ",", "offset", ",", "scale", ",", "num_mesh_samples", "=", "500", ")", ":", "\n", "    ", "\"\"\"\n    This function computes a symmetric chamfer distance, i.e. the sum of both chamfers.\n\n    gt_points: trimesh.points.PointCloud of just poins, sampled from the surface (see\n               compute_metrics.ply for more documentation)\n\n    gen_mesh: trimesh.base.Trimesh of output mesh from whichever autoencoding reconstruction\n              method (see compute_metrics.py for more)\n\n    \"\"\"", "\n", "\n", "gen_points_sampled", "=", "trimesh", ".", "sample", ".", "sample_surface", "(", "gen_mesh", ",", "num_mesh_samples", ")", "[", "0", "]", "\n", "\n", "gen_points_sampled", "=", "gen_points_sampled", "/", "scale", "-", "offset", "\n", "\n", "# only need numpy array of points", "\n", "# gt_points_np = gt_points.vertices", "\n", "gt_points_np", "=", "gt_points", ".", "vertices", "\n", "gt_points_np", "=", "np", ".", "random", ".", "permutation", "(", "gt_points_np", ")", "[", ":", "num_mesh_samples", "]", "\n", "\n", "# hist0 = hist1 = np.ones([num_mesh_samples], dtype=np.float64) / num_mesh_samples", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "np", ".", "expand_dims", "(", "gt_points_np", ",", "axis", "=", "0", ")", "-", "np", ".", "expand_dims", "(", "gen_points_sampled", ",", "axis", "=", "1", ")", ",", "axis", "=", "-", "1", ")", "\n", "# dist = dist.astype(np.float64)", "\n", "# emd = pyemd.emd(hist0, hist1, dist)", "\n", "assignment", "=", "linear_sum_assignment", "(", "dist", ")", "\n", "emd", "=", "dist", "[", "assignment", "]", ".", "sum", "(", ")", "/", "num_mesh_samples", "\n", "\n", "return", "emd", "\n", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.metrics.chamfer.compute_trimesh_chamfer": [[9, 40], ["scipy.spatial.cKDTree", "scipy.spatial.cKDTree.query", "numpy.mean", "scipy.spatial.cKDTree", "scipy.spatial.cKDTree.query", "numpy.mean", "trimesh.sample.sample_surface", "numpy.square", "numpy.square"], "function", ["None"], ["def", "compute_trimesh_chamfer", "(", "gt_points", ",", "gen_mesh", ",", "offset", ",", "scale", ",", "num_mesh_samples", "=", "30000", ")", ":", "\n", "    ", "\"\"\"\n    This function computes a symmetric chamfer distance, i.e. the sum of both chamfers.\n\n    gt_points: trimesh.points.PointCloud of just poins, sampled from the surface (see\n               compute_metrics.ply for more documentation)\n\n    gen_mesh: trimesh.base.Trimesh of output mesh from whichever autoencoding reconstruction\n              method (see compute_metrics.py for more)\n\n    \"\"\"", "\n", "\n", "gen_points_sampled", "=", "trimesh", ".", "sample", ".", "sample_surface", "(", "gen_mesh", ",", "num_mesh_samples", ")", "[", "0", "]", "\n", "\n", "gen_points_sampled", "=", "gen_points_sampled", "/", "scale", "-", "offset", "\n", "\n", "# only need numpy array of points", "\n", "# gt_points_np = gt_points.vertices", "\n", "gt_points_np", "=", "gt_points", ".", "vertices", "\n", "\n", "# one direction", "\n", "gen_points_kd_tree", "=", "KDTree", "(", "gen_points_sampled", ")", "\n", "one_distances", ",", "one_vertex_ids", "=", "gen_points_kd_tree", ".", "query", "(", "gt_points_np", ")", "\n", "gt_to_gen_chamfer", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "one_distances", ")", ")", "\n", "\n", "# other direction", "\n", "gt_points_kd_tree", "=", "KDTree", "(", "gt_points_np", ")", "\n", "two_distances", ",", "two_vertex_ids", "=", "gt_points_kd_tree", ".", "query", "(", "gen_points_sampled", ")", "\n", "gen_to_gt_chamfer", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "two_distances", ")", ")", "\n", "\n", "return", "gt_to_gen_chamfer", "+", "gen_to_gt_chamfer", "\n", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.SdfDecoder.__init__": [[12, 60], ["torch.Module.__init__", "len", "range", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "setattr", "setattr", "setattr", "torch.utils.weight_norm", "torch.utils.weight_norm", "torch.utils.weight_norm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "str", "torch.Linear", "torch.Linear", "torch.Linear", "str", "str"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.Decoder.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "dims", ",", "\n", "dropout", "=", "None", ",", "\n", "dropout_prob", "=", "0.0", ",", "\n", "norm_layers", "=", "(", ")", ",", "\n", "xyz_in_all", "=", "None", ",", "\n", "use_tanh", "=", "False", ",", "\n", "weight_norm", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SdfDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "dims", "=", "[", "3", "]", "+", "dims", "+", "[", "1", "]", "\n", "\n", "self", ".", "num_layers", "=", "len", "(", "dims", ")", "\n", "self", ".", "norm_layers", "=", "norm_layers", "\n", "\n", "self", ".", "xyz_in_all", "=", "xyz_in_all", "\n", "self", ".", "weight_norm", "=", "weight_norm", "\n", "\n", "for", "layer", "in", "range", "(", "0", ",", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "out_dim", "=", "dims", "[", "layer", "+", "1", "]", "\n", "if", "self", ".", "xyz_in_all", "and", "layer", "!=", "self", ".", "num_layers", "-", "2", ":", "\n", "                ", "out_dim", "-=", "3", "\n", "\n", "", "if", "weight_norm", "and", "layer", "in", "self", ".", "norm_layers", ":", "\n", "                ", "setattr", "(", "\n", "self", ",", "\n", "\"lin\"", "+", "str", "(", "layer", ")", ",", "\n", "nn", ".", "utils", ".", "weight_norm", "(", "nn", ".", "Linear", "(", "dims", "[", "layer", "]", ",", "out_dim", ")", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "\"lin\"", "+", "str", "(", "layer", ")", ",", "nn", ".", "Linear", "(", "dims", "[", "layer", "]", ",", "out_dim", ")", ")", "\n", "\n", "", "if", "(", "\n", "(", "not", "weight_norm", ")", "\n", "and", "self", ".", "norm_layers", "is", "not", "None", "\n", "and", "layer", "in", "self", ".", "norm_layers", "\n", ")", ":", "\n", "                ", "setattr", "(", "self", ",", "\"bn\"", "+", "str", "(", "layer", ")", ",", "nn", ".", "LayerNorm", "(", "out_dim", ")", ")", "\n", "\n", "", "", "self", ".", "use_tanh", "=", "use_tanh", "\n", "if", "use_tanh", ":", "\n", "            ", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "dropout_prob", "=", "dropout_prob", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "th", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.SdfDecoder.forward": [[62, 90], ["range", "hasattr", "getattr", "getattr.", "deep_implicit_template_decoder.SdfDecoder.th", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "deep_implicit_template_decoder.SdfDecoder.tanh", "deep_implicit_template_decoder.SdfDecoder.relu", "str", "getattr", "getattr.", "torch.dropout", "torch.dropout", "torch.dropout", "str"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "xyz", "=", "input", "[", ":", ",", "-", "3", ":", "]", "\n", "x", "=", "input", "\n", "\n", "for", "layer", "in", "range", "(", "0", ",", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "            ", "lin", "=", "getattr", "(", "self", ",", "\"lin\"", "+", "str", "(", "layer", ")", ")", "\n", "if", "layer", "!=", "0", "and", "self", ".", "xyz_in_all", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "xyz", "]", ",", "1", ")", "\n", "", "x", "=", "lin", "(", "x", ")", "\n", "# last layer Tanh", "\n", "if", "layer", "==", "self", ".", "num_layers", "-", "2", "and", "self", ".", "use_tanh", ":", "\n", "                ", "x", "=", "self", ".", "tanh", "(", "x", ")", "\n", "", "if", "layer", "<", "self", ".", "num_layers", "-", "2", ":", "\n", "                ", "if", "(", "\n", "self", ".", "norm_layers", "is", "not", "None", "\n", "and", "layer", "in", "self", ".", "norm_layers", "\n", "and", "not", "self", ".", "weight_norm", "\n", ")", ":", "\n", "                    ", "bn", "=", "getattr", "(", "self", ",", "\"bn\"", "+", "str", "(", "layer", ")", ")", "\n", "x", "=", "bn", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "self", ".", "dropout", "is", "not", "None", "and", "layer", "in", "self", ".", "dropout", ":", "\n", "                    ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout_prob", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "", "", "if", "hasattr", "(", "self", ",", "\"th\"", ")", ":", "\n", "            ", "x", "=", "self", ".", "th", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.Warper.__init__": [[130, 147], ["torch.Module.__init__", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "deep_implicit_template_decoder.Warper.lstm.apply", "deep_implicit_template_decoder.lstm_forget_gate_init", "torch.Linear", "torch.Linear", "torch.Linear", "deep_implicit_template_decoder.Warper.out_layer_coord_affine.apply"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.Decoder.__init__", "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.lstm_forget_gate_init"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "latent_size", ",", "\n", "hidden_size", ",", "\n", "steps", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Warper", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_feature_channels", "=", "latent_size", "+", "3", "\n", "self", ".", "steps", "=", "steps", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTMCell", "(", "input_size", "=", "self", ".", "n_feature_channels", ",", "\n", "hidden_size", "=", "hidden_size", ")", "\n", "self", ".", "lstm", ".", "apply", "(", "init_recurrent_weights", ")", "\n", "lstm_forget_gate_init", "(", "self", ".", "lstm", ")", "\n", "\n", "self", ".", "out_layer_coord_affine", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "6", ")", "\n", "self", ".", "out_layer_coord_affine", ".", "apply", "(", "init_out_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.Warper.forward": [[148, 176], ["range", "input.clone().detach", "deep_implicit_template_decoder.Warper.lstm", "deep_implicit_template_decoder.Warper.out_layer_coord_affine", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "torch.addcmul", "warping_param.append", "states.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "state[].register_hook", "warped_xyzs.append", "input.clone", "x.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "step", "=", "1.0", ")", ":", "\n", "        ", "if", "step", "<", "1.0", ":", "\n", "            ", "input_bk", "=", "input", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "\n", "", "xyz", "=", "input", "[", ":", ",", "-", "3", ":", "]", "\n", "code", "=", "input", "[", ":", ",", ":", "-", "3", "]", "\n", "states", "=", "[", "None", "]", "\n", "warping_param", "=", "[", "]", "\n", "\n", "warped_xyzs", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "self", ".", "steps", ")", ":", "\n", "            ", "state", "=", "self", ".", "lstm", "(", "torch", ".", "cat", "(", "[", "code", ",", "xyz", "]", ",", "dim", "=", "1", ")", ",", "states", "[", "-", "1", "]", ")", "\n", "if", "state", "[", "0", "]", ".", "requires_grad", ":", "\n", "                ", "state", "[", "0", "]", ".", "register_hook", "(", "lambda", "x", ":", "x", ".", "clamp", "(", "min", "=", "-", "10", ",", "max", "=", "10", ")", ")", "\n", "", "a", "=", "self", ".", "out_layer_coord_affine", "(", "state", "[", "0", "]", ")", "\n", "tmp_xyz", "=", "torch", ".", "addcmul", "(", "a", "[", ":", ",", "3", ":", "]", ",", "(", "1", "+", "a", "[", ":", ",", ":", "3", "]", ")", ",", "xyz", ")", "\n", "\n", "warping_param", ".", "append", "(", "a", ")", "\n", "states", ".", "append", "(", "state", ")", "\n", "if", "(", "s", "+", "1", ")", "%", "(", "self", ".", "steps", "//", "4", ")", "==", "0", ":", "\n", "                ", "warped_xyzs", ".", "append", "(", "tmp_xyz", ")", "\n", "", "xyz", "=", "tmp_xyz", "\n", "\n", "", "if", "step", "<", "1.0", ":", "\n", "            ", "xyz_", "=", "input_bk", "[", ":", ",", "-", "3", ":", "]", "\n", "xyz", "=", "xyz", "*", "step", "+", "xyz_", "*", "(", "1", "-", "step", ")", "\n", "\n", "", "return", "xyz", ",", "warping_param", ",", "warped_xyzs", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.Decoder.__init__": [[179, 183], ["torch.Module.__init__", "deep_implicit_template_decoder.Warper", "deep_implicit_template_decoder.SdfDecoder"], "methods", ["home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.Decoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_size", ",", "warper_kargs", ",", "decoder_kargs", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "warper", "=", "Warper", "(", "latent_size", ",", "**", "warper_kargs", ")", "\n", "self", ".", "sdf_decoder", "=", "SdfDecoder", "(", "**", "decoder_kargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.Decoder.forward": [[184, 214], ["deep_implicit_template_decoder.Decoder.warper", "deep_implicit_template_decoder.Decoder.sdf_decoder", "xs.append", "deep_implicit_template_decoder.Decoder.sdf_decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "output_warped_points", "=", "False", ",", "output_warping_param", "=", "False", ",", "\n", "step", "=", "1.0", ")", ":", "\n", "        ", "p_final", ",", "warping_param", ",", "warped_xyzs", "=", "self", ".", "warper", "(", "input", ",", "step", "=", "step", ")", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "x", "=", "self", ".", "sdf_decoder", "(", "p_final", ")", "\n", "if", "output_warped_points", ":", "\n", "                ", "if", "output_warping_param", ":", "\n", "                    ", "return", "p_final", ",", "x", ",", "warping_param", "\n", "", "else", ":", "\n", "                    ", "return", "p_final", ",", "x", "\n", "", "", "else", ":", "\n", "                ", "if", "output_warping_param", ":", "\n", "                    ", "return", "x", ",", "warping_param", "\n", "", "else", ":", "\n", "                    ", "return", "x", "\n", "", "", "", "else", ":", "# training mode, output intermediate positions and their corresponding sdf prediction", "\n", "            ", "xs", "=", "[", "]", "\n", "for", "p", "in", "warped_xyzs", ":", "\n", "                ", "xs", ".", "append", "(", "self", ".", "sdf_decoder", "(", "p", ")", ")", "\n", "", "if", "output_warped_points", ":", "\n", "                ", "if", "output_warping_param", ":", "\n", "                    ", "return", "warped_xyzs", ",", "xs", ",", "warping_param", "\n", "", "else", ":", "\n", "                    ", "return", "warped_xyzs", ",", "xs", "\n", "", "", "else", ":", "\n", "                ", "if", "output_warping_param", ":", "\n", "                    ", "return", "xs", ",", "warping_param", "\n", "", "else", ":", "\n", "                    ", "return", "xs", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.Decoder.forward_template": [[215, 217], ["deep_implicit_template_decoder.Decoder.sdf_decoder"], "methods", ["None"], ["", "", "", "", "def", "forward_template", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "sdf_decoder", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.init_recurrent_weights": [[92, 102], ["deep_implicit_template_decoder..modules", "type", "m.named_parameters", "torch.init.kaiming_normal_", "torch.init.orthogonal_", "param.data.fill_"], "function", ["None"], ["", "", "def", "init_recurrent_weights", "(", "self", ")", ":", "\n", "    ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "if", "type", "(", "m", ")", "in", "[", "nn", ".", "GRU", ",", "nn", ".", "LSTM", ",", "nn", ".", "RNN", "]", ":", "\n", "            ", "for", "name", ",", "param", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "'weight_ih'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "kaiming_normal_", "(", "param", ".", "data", ")", "\n", "", "elif", "'weight_hh'", "in", "name", ":", "\n", "                    ", "nn", ".", "init", ".", "orthogonal_", "(", "param", ".", "data", ")", "\n", "", "elif", "'bias'", "in", "name", ":", "\n", "                    ", "param", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.lstm_forget_gate_init": [[104, 110], ["lstm_layer.named_parameters", "parameter.size", "parameter.data[].fill_"], "function", ["None"], ["", "", "", "", "", "def", "lstm_forget_gate_init", "(", "lstm_layer", ")", ":", "\n", "    ", "for", "name", ",", "parameter", "in", "lstm_layer", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "\"bias\"", "in", "name", ":", "continue", "\n", "n", "=", "parameter", ".", "size", "(", "0", ")", "\n", "start", ",", "end", "=", "n", "//", "4", ",", "n", "//", "2", "\n", "parameter", ".", "data", "[", "start", ":", "end", "]", ".", "fill_", "(", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.clip_grad_norm_hook": [[112, 118], ["x.norm"], "function", ["None"], ["", "", "def", "clip_grad_norm_hook", "(", "x", ",", "max_norm", "=", "10", ")", ":", "\n", "    ", "total_norm", "=", "x", ".", "norm", "(", ")", "\n", "total_norm", "=", "total_norm", "**", "(", "1", "/", "2.", ")", "\n", "clip_coef", "=", "max_norm", "/", "(", "total_norm", "+", "1e-6", ")", "\n", "if", "clip_coef", "<", "1", ":", "\n", "        ", "return", "x", "*", "clip_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhengZerong_DeepImplicitTemplates.networks.deep_implicit_template_decoder.init_out_weights": [[120, 127], ["deep_implicit_template_decoder..modules", "m.named_parameters", "torch.init.uniform_", "torch.init.constant_"], "function", ["None"], ["", "", "def", "init_out_weights", "(", "self", ")", ":", "\n", "    ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'weight'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "param", ".", "data", ",", "-", "1e-5", ",", "1e-5", ")", "\n", "", "elif", "'bias'", "in", "name", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "param", ".", "data", ",", "0", ")", "\n", "\n"]]}