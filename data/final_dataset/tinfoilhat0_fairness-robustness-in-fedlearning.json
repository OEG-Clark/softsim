{"home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.options.args_parser": [[4, 71], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.device", "torch.cuda.is_available"], "function", ["None"], ["def", "args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "'mnist'", ",", "\n", "help", "=", "\"dataset we want to train on\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_agents'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "\"number of agents:K\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--agent_frac'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "\"fraction of agents per round:C\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--aggr'", ",", "type", "=", "str", ",", "default", "=", "'avg'", ",", "\n", "help", "=", "\"aggregation type\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--rlr_threshold'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"break ties when votes sum to 0\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_corrupt'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"number of corrupt agents\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--rounds'", ",", "type", "=", "int", ",", "default", "=", "10", "**", "3", ",", "\n", "help", "=", "\"number of communication rounds:R\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--local_ep'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "\"number of local epochs:E\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--bs'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "\"local batch size: B\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--server_lr'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "\n", "help", "=", "'servers learning rate'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--class_per_agent'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'default set to IID. Set to 1 for (most-skewed) non-IID.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--attack'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"0: no attack, 1: sign-flip, 2: backdoor\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--base_class'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "\"base class for backdoor attack\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--target_class'", ",", "type", "=", "int", ",", "default", "=", "7", ",", "\n", "help", "=", "\"target class for backdoor attack\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--poison_frac'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "\n", "help", "=", "\"fraction of dataset to corrupt for backdoor attack\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--pattern_type'", ",", "type", "=", "str", ",", "default", "=", "'plus'", ",", "\n", "help", "=", "\"shape of bd pattern\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", ",", "\n", "help", "=", "\"To use cuda, set to a specific GPU ID.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "\"num of workers for multithreading\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--snap'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"do inference in every num of snap rounds\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--concent'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "\n", "help", "=", "\"concentration of dirichlet dist when doing niid sampling\"", ")", "\n", "\n", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "", "", ""]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.LeNet5.__init__": [[17, 27], ["super().__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.EarlyStopping.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Convolution (In LeNet-5, 32x32 images are given as input. Hence padding of 2 is done below)", "\n", "self", ".", "conv1", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "out_channels", "=", "6", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", "\n", "self", ".", "max_pool_1", "=", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "\n", "self", ".", "conv2", "=", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "6", ",", "out_channels", "=", "16", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "max_pool_2", "=", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "\n", "self", ".", "fc1", "=", "torch", ".", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "torch", ".", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "torch", ".", "nn", ".", "Linear", "(", "84", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.LeNet5.forward": [[28, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.LeNet5.max_pool_1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.LeNet5.max_pool_2", "models.LeNet5.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.LeNet5.fc3", "models.LeNet5.conv1", "models.LeNet5.conv2", "models.LeNet5.fc1", "models.LeNet5.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "max_pool_1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "max_pool_2", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "16", "*", "5", "*", "5", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.CNN_CIFAR.__init__": [[42, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.EarlyStopping.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CNN_CIFAR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "64", "*", "4", "*", "4", ",", "128", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "128", ",", "256", ")", "\n", "self", ".", "drop3", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.5", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "256", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.CNN_CIFAR.forward": [[55, 67], ["models.CNN_CIFAR.pool", "models.CNN_CIFAR.pool", "models.CNN_CIFAR.pool", "models.CNN_CIFAR.view", "models.CNN_CIFAR.drop1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.CNN_CIFAR.drop2", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.CNN_CIFAR.drop3", "models.CNN_CIFAR.fc3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "models.CNN_CIFAR.fc1", "models.CNN_CIFAR.fc2", "models.CNN_CIFAR.conv1", "models.CNN_CIFAR.conv2", "models.CNN_CIFAR.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "64", "*", "4", "*", "4", ")", "\n", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "drop3", "(", "x", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.FixupBasicBlock.__init__": [[82, 94], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "models.conv3x3", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "models.conv3x3", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.EarlyStopping.__init__", "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.conv3x3", "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "FixupBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "bias1a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bias1b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "bias2a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "bias2b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.FixupBasicBlock.forward": [[95, 112], ["models.FixupBasicBlock.conv1", "models.FixupBasicBlock.relu", "models.FixupBasicBlock.conv2", "models.FixupBasicBlock.relu", "models.FixupBasicBlock.downsample", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", "+", "self", ".", "bias1a", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", "+", "self", ".", "bias1b", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", "+", "self", ".", "bias2a", ")", "\n", "out", "=", "out", "*", "self", ".", "scale", "+", "self", ".", "bias2b", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", "+", "self", ".", "bias1a", ")", "\n", "identity", "=", "torch", ".", "cat", "(", "(", "identity", ",", "torch", ".", "zeros_like", "(", "identity", ")", ")", ",", "1", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.FixupResNet.__init__": [[116, 137], ["torch.Module.__init__", "sum", "models.conv3x3", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "models.FixupResNet._make_layer", "models.FixupResNet._make_layer", "models.FixupResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "models.FixupResNet.modules", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "numpy.sqrt", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.EarlyStopping.__init__", "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.conv3x3", "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.FixupResNet._make_layer", "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.FixupResNet._make_layer", "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.FixupResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "FixupResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "sum", "(", "layers", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "16", ")", "\n", "self", ".", "bias1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "bias2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "FixupBasicBlock", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "conv1", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2", "/", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "0", "]", "*", "np", ".", "prod", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "2", ":", "]", ")", ")", ")", "*", "self", ".", "num_layers", "**", "(", "-", "0.5", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv2", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.FixupResNet._make_layer": [[138, 150], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "block", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", ":", "\n", "            ", "downsample", "=", "nn", ".", "AvgPool2d", "(", "1", ",", "stride", "=", "stride", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "planes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.FixupResNet.forward": [[151, 163], ["models.FixupResNet.conv1", "models.FixupResNet.relu", "models.FixupResNet.layer1", "models.FixupResNet.layer2", "models.FixupResNet.layer3", "models.FixupResNet.avgpool", "models.FixupResNet.view", "models.FixupResNet.fc", "models.FixupResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", "+", "self", ".", "bias1", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", "+", "self", ".", "bias2", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.get_model": [[8, 14], ["models.LeNet5", "models.CNN_CIFAR"], "function", ["None"], ["def", "get_model", "(", "data", ")", ":", "\n", "    ", "if", "data", "==", "'mnist'", "or", "data", "==", "'fmnist'", ":", "\n", "        ", "return", "LeNet5", "(", ")", "\n", "\n", "", "elif", "data", "==", "'cifar10'", ":", "\n", "        ", "return", "CNN_CIFAR", "(", ")", "#fixup_resnet20()", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.conv3x3": [[73, 77], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.fixup_resnet20": [[165, 170], ["models.FixupResNet"], "function", ["None"], ["", "", "def", "fixup_resnet20", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-20 model.\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.fixup_resnet32": [[172, 177], ["models.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet32", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-32 model.\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.fixup_resnet44": [[179, 184], ["models.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet44", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-44 model.\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.fixup_resnet56": [[186, 191], ["models.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet56", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-56 model.\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.fixup_resnet110": [[193, 198], ["models.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet110", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-110 model.\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.fixup_resnet1202": [[200, 205], ["models.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet1202", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-1202 model.\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.agent.Agent.__init__": [[14, 32], ["utils.DatasetSplit", "len", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "models.get_model().to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "utils.poison_dataset", "agent.Agent.model.parameters", "models.get_model"], "methods", ["home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.poison_dataset", "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.models.get_model"], ["    ", "def", "__init__", "(", "self", ",", "id", ",", "args", ",", "train_dataset", ",", "data_idxs", ",", "criterion", ")", ":", "\n", "        ", "self", ".", "id", "=", "id", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "criterion", "=", "criterion", "\n", "\n", "\n", "self", ".", "train_dataset", "=", "utils", ".", "DatasetSplit", "(", "train_dataset", ",", "data_idxs", ")", "\n", "# for backdoor attack, agent poisons his local dataset", "\n", "self", ".", "n_data", "=", "len", "(", "self", ".", "train_dataset", ")", "\n", "if", "args", ".", "attack", "==", "2", "and", "self", ".", "id", ">=", "args", ".", "num_agents", "-", "self", ".", "args", ".", "num_corrupt", ":", "\n", "            ", "utils", ".", "poison_dataset", "(", "train_dataset", ",", "args", ",", "data_idxs", ")", "\n", "", "print", "(", "f'{self.id} -> Total_Data:{self.n_data}, Dist:{self.train_dataset.class_count}'", ")", "\n", "\n", "\n", "self", ".", "train_loader", "=", "DataLoader", "(", "self", ".", "train_dataset", ",", "batch_size", "=", "self", ".", "args", ".", "bs", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "self", ".", "model", "=", "models", ".", "get_model", "(", "args", ".", "data", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "self", ".", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.agent.Agent.local_train": [[34, 54], ["torch.nn.utils.vector_to_parameters", "torch.nn.utils.vector_to_parameters", "agent.Agent.model.train", "range", "copy.deepcopy", "agent.Agent.model.parameters", "enumerate", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "agent.Agent.model", "agent.Agent.criterion", "agent.Agent.opt.zero_grad", "agent.Agent.backward", "agent.Agent.opt.step", "torch.nn.utils.parameters_to_vector", "torch.nn.utils.parameters_to_vector", "inputs.to", "labels.to", "agent.Agent.model.parameters"], "methods", ["None"], ["", "def", "local_train", "(", "self", ",", "global_model_params", ")", ":", "\n", "        ", "\"\"\" Do a local training over the received global model, return the update \"\"\"", "\n", "vector_to_parameters", "(", "copy", ".", "deepcopy", "(", "global_model_params", ")", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "args", ".", "local_ep", ")", ":", "\n", "            ", "for", "_", ",", "(", "inputs", ",", "labels", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "                ", "inputs", ",", "labels", "=", "inputs", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ",", "non_blocking", "=", "True", ")", ",", "labels", ".", "to", "(", "device", "=", "self", ".", "args", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "outputs", "=", "self", ".", "model", "(", "inputs", ")", "\n", "minibatch_loss", "=", "self", ".", "criterion", "(", "outputs", ",", "labels", ")", "\n", "\n", "self", ".", "opt", ".", "zero_grad", "(", ")", "\n", "minibatch_loss", ".", "backward", "(", ")", "\n", "#nn.utils.clip_grad_norm_(self.model.parameters(), 10) # to prevent exploding gradients", "\n", "self", ".", "opt", ".", "step", "(", ")", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "parameters_to_vector", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "-", "global_model_params", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.aggregation.Aggregation.__init__": [[15, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "n_params", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "server_lr", "=", "args", ".", "server_lr", "\n", "self", ".", "n_params", "=", "n_params", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.aggregation.Aggregation.aggregate_updates": [[22, 36], ["torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "aggregation.Aggregation.compute_robustLR", "aggregation.Aggregation.agg_avg", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "aggregation.Aggregation.agg_comed"], "methods", ["home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.aggregation.Aggregation.compute_robustLR", "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.aggregation.Aggregation.agg_avg", "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.aggregation.Aggregation.agg_comed"], ["", "def", "aggregate_updates", "(", "self", ",", "global_model_params", ",", "agent_updates", ")", ":", "\n", "        ", "lr_vector", "=", "torch", ".", "Tensor", "(", "[", "self", ".", "server_lr", "]", "*", "self", ".", "n_params", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "if", "self", ".", "args", ".", "rlr_threshold", ">", "0", ":", "\n", "            ", "lr_vector", "=", "self", ".", "compute_robustLR", "(", "agent_updates", ")", "\n", "\n", "\n", "", "aggregated_updates", "=", "0", "\n", "if", "self", ".", "args", ".", "aggr", "==", "'avg'", ":", "\n", "            ", "aggregated_updates", "=", "self", ".", "agg_avg", "(", "agent_updates", ")", "\n", "", "elif", "self", ".", "args", ".", "aggr", "==", "'comed'", ":", "\n", "            ", "aggregated_updates", "=", "self", ".", "agg_comed", "(", "agent_updates", ")", "\n", "\n", "", "new_global_params", "=", "(", "global_model_params", "+", "lr_vector", "*", "aggregated_updates", ")", ".", "float", "(", ")", "\n", "return", "new_global_params", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.aggregation.Aggregation.agg_avg": [[39, 47], ["enumerate"], "methods", ["None"], ["", "def", "agg_avg", "(", "self", ",", "agent_updates", ")", ":", "\n", "        ", "\"\"\" classic fed avg \"\"\"", "\n", "sm_updates", ",", "total_data", "=", "0", ",", "0", "\n", "for", "_", ",", "(", "n_data", ",", "update", ")", "in", "enumerate", "(", "agent_updates", ")", ":", "\n", "\n", "            ", "sm_updates", "+=", "n_data", "*", "update", "\n", "total_data", "+=", "n_data", "\n", "", "return", "sm_updates", "/", "total_data", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.aggregation.Aggregation.agg_comed": [[49, 53], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "update.view", "torch.median", "torch.median", "torch.median", "torch.median"], "methods", ["None"], ["", "def", "agg_comed", "(", "self", ",", "agent_updates", ")", ":", "\n", "        ", "agent_updates_col_vector", "=", "[", "update", ".", "view", "(", "-", "1", ",", "1", ")", "for", "_", ",", "update", "in", "agent_updates", "]", "\n", "concat_col_vectors", "=", "torch", ".", "cat", "(", "agent_updates_col_vector", ",", "dim", "=", "1", ")", "\n", "return", "torch", ".", "median", "(", "concat_col_vectors", ",", "dim", "=", "1", ")", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.aggregation.Aggregation.compute_robustLR": [[55, 62], ["torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs.to", "torch.abs.to", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "sum"], "methods", ["None"], ["", "def", "compute_robustLR", "(", "self", ",", "agent_updates", ")", ":", "\n", "        ", "agent_updates_sign", "=", "[", "torch", ".", "sign", "(", "update", ")", "for", "_", ",", "update", "in", "agent_updates", "]", "\n", "sm_of_signs", "=", "torch", ".", "abs", "(", "sum", "(", "agent_updates_sign", ")", ")", "\n", "\n", "sm_of_signs", "[", "sm_of_signs", "<", "self", ".", "args", ".", "rlr_threshold", "]", "=", "-", "self", ".", "server_lr", "\n", "sm_of_signs", "[", "sm_of_signs", ">=", "self", ".", "args", ".", "rlr_threshold", "]", "=", "self", ".", "server_lr", "\n", "return", "sm_of_signs", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.DatasetSplit.__init__": [[16, 21], ["torch.Tensor", "utils.DatasetSplit.per_class_count"], "methods", ["home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.DatasetSplit.per_class_count"], ["def", "__init__", "(", "self", ",", "dataset", ",", "idxs", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "idxs", "=", "idxs", "\n", "self", ".", "targets", "=", "torch", ".", "Tensor", "(", "[", "self", ".", "dataset", ".", "targets", "[", "idx", "]", "for", "idx", "in", "idxs", "]", ")", "\n", "self", ".", "per_class_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.DatasetSplit.classes": [[22, 24], ["torch.unique"], "methods", ["None"], ["", "def", "classes", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "unique", "(", "self", ".", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.DatasetSplit.per_class_count": [[25, 31], ["range", "len"], "methods", ["None"], ["", "def", "per_class_count", "(", "self", ",", "n_class", "=", "10", ")", ":", "\n", "        ", "self", ".", "class_count", "=", "{", "}", "\n", "# assuming 10 classes in dataset", "\n", "for", "c", "in", "range", "(", "n_class", ")", ":", "\n", "            ", "c_count", "=", "len", "(", "self", ".", "targets", "[", "self", ".", "targets", "==", "c", "]", ")", "\n", "self", ".", "class_count", "[", "c", "]", "=", "c_count", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.DatasetSplit.__len__": [[32, 34], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.DatasetSplit.__getitem__": [[35, 38], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "inp", ",", "target", "=", "self", ".", "dataset", "[", "self", ".", "idxs", "[", "item", "]", "]", "\n", "return", "inp", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.EarlyStopping.__init__": [[258, 281], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "patience", "=", "7", ",", "verbose", "=", "False", ",", "delta", "=", "0", ",", "path", "=", "'checkpoint.pt'", ",", "trace_func", "=", "print", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            patience (int): How long to wait after last time validation loss improved.\n                            Default: 7\n            verbose (bool): If True, prints a message for each validation loss improvement. \n                            Default: False\n            delta (float): Minimum change in the monitored quantity to qualify as an improvement.\n                            Default: 0\n            path (str): Path for the checkpoint to be saved to.\n                            Default: 'checkpoint.pt'\n            trace_func (function): trace print function.\n                            Default: print            \n        \"\"\"", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_score", "=", "None", "\n", "self", ".", "early_stop", "=", "False", "\n", "self", ".", "val_loss_min", "=", "np", ".", "Inf", "\n", "self", ".", "delta", "=", "delta", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "trace_func", "=", "trace_func", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.EarlyStopping.__call__": [[282, 297], ["utils.EarlyStopping.save_checkpoint", "utils.EarlyStopping.trace_func", "utils.EarlyStopping.save_checkpoint"], "methods", ["home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.EarlyStopping.save_checkpoint", "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.EarlyStopping.save_checkpoint"], ["", "def", "__call__", "(", "self", ",", "val_loss", ",", "model", "=", "None", ")", ":", "\n", "        ", "score", "=", "-", "val_loss", "\n", "\n", "if", "self", ".", "best_score", "is", "None", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ")", "\n", "", "elif", "score", "<", "self", ".", "best_score", "+", "self", ".", "delta", ":", "\n", "            ", "self", ".", "counter", "+=", "1", "\n", "self", ".", "trace_func", "(", "f'EarlyStopping counter: {self.counter} out of {self.patience}'", ")", "\n", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "                ", "self", ".", "early_stop", "=", "True", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "best_score", "=", "score", "\n", "self", ".", "save_checkpoint", "(", "val_loss", ",", "model", ")", "\n", "self", ".", "counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.EarlyStopping.save_checkpoint": [[298, 304], ["utils.EarlyStopping.trace_func"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "val_loss", ",", "model", "=", "None", ")", ":", "\n", "        ", "'''Saves model when validation loss decrease.'''", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "self", ".", "trace_func", "(", "f'Validation loss decreased ({self.val_loss_min:.6f} --> {val_loss:.6f}).'", ")", "\n", "#torch.save(model.state_dict(), self.path)", "\n", "", "self", ".", "val_loss_min", "=", "val_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.distribute_data_dirichlet": [[41, 76], ["numpy.random.dirichlet", "dataset.targets.sort", "list", "collections.defaultdict", "collections.defaultdict", "range", "zip", "labels_dict[].append", "random.sample", "range", "len", "range", "dataset.targets.sort.values.tolist", "dataset.targets.sort.indices.tolist", "range", "int", "list", "int", "len", "len", "set", "set", "set"], "function", ["None"], ["", "", "def", "distribute_data_dirichlet", "(", "dataset", ",", "args", ",", "n_class", "=", "10", ")", ":", "\n", "    ", "num_clean_agents", "=", "args", ".", "num_agents", "-", "args", ".", "num_corrupt", "\n", "\n", "# partition[c][i] is the fraction of samples agent i gets from class i", "\n", "partition", "=", "np", ".", "random", ".", "dirichlet", "(", "[", "args", ".", "concent", "]", "*", "num_clean_agents", ",", "size", "=", "n_class", ")", "\n", "\n", "# sort labels", "\n", "labels_sorted", "=", "dataset", ".", "targets", ".", "sort", "(", ")", "\n", "# create a list of pairs (index, label), i.e., at index we have an instance of  label", "\n", "class_by_labels", "=", "list", "(", "zip", "(", "labels_sorted", ".", "values", ".", "tolist", "(", ")", ",", "labels_sorted", ".", "indices", ".", "tolist", "(", ")", ")", ")", "\n", "# convert list to a dictionary, e.g., at labels_dict[0], we have indexes for class 0", "\n", "labels_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "k", ",", "v", "in", "class_by_labels", ":", "\n", "        ", "labels_dict", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "dict_users", "=", "defaultdict", "(", "list", ")", "\n", "if", "args", ".", "num_corrupt", "==", "1", ":", "\n", "        ", "num_clean_agents", "=", "args", ".", "num_agents", "-", "1", "\n", "adv_idxs", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "dataset", ")", ")", ",", "int", "(", "len", "(", "dataset", ")", "*", "0.1", ")", ")", "\n", "dict_users", "[", "args", ".", "num_agents", "-", "1", "]", "=", "adv_idxs", "\n", "for", "c", "in", "range", "(", "10", ")", ":", "\n", "            ", "labels_dict", "[", "c", "]", "=", "list", "(", "set", "(", "labels_dict", "[", "c", "]", ")", "-", "(", "set", "(", "labels_dict", "[", "c", "]", ")", "&", "set", "(", "adv_idxs", ")", ")", ")", "\n", "\n", "", "", "for", "c", "in", "range", "(", "n_class", ")", ":", "\n", "# num of samples of class c in dataset", "\n", "        ", "n_classC_items", "=", "len", "(", "labels_dict", "[", "c", "]", ")", "\n", "for", "i", "in", "range", "(", "num_clean_agents", ")", ":", "\n", "# num. of samples agent i gets from class c", "\n", "            ", "n_agentI_items", "=", "int", "(", "partition", "[", "c", "]", "[", "i", "]", "*", "n_classC_items", ")", "\n", "dict_users", "[", "i", "]", "+=", "labels_dict", "[", "c", "]", "[", ":", "n_agentI_items", "]", "\n", "del", "labels_dict", "[", "c", "]", "[", ":", "n_agentI_items", "]", "\n", "# if any class c item remains due to flooring, give em to first agent", "\n", "", "dict_users", "[", "0", "]", "+=", "labels_dict", "[", "c", "]", "\n", "\n", "", "return", "dict_users", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.distribute_data": [[80, 119], ["dataset.targets.sort", "list", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict.items", "range", "zip", "labels_dict[].append", "random.sample", "range", "len", "utils.chunker_list", "range", "range", "dataset.targets.sort.values.tolist", "dataset.targets.sort.indices.tolist", "range", "int", "list", "len", "len", "len", "len", "set", "len", "set", "set"], "function", ["home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.chunker_list"], ["", "def", "distribute_data", "(", "dataset", ",", "args", ",", "n_classes", "=", "10", ")", ":", "\n", "    ", "if", "args", ".", "num_agents", "==", "1", ":", "\n", "        ", "return", "{", "0", ":", "range", "(", "len", "(", "dataset", ")", ")", "}", "\n", "\n", "# sort labels", "\n", "", "labels_sorted", "=", "dataset", ".", "targets", ".", "sort", "(", ")", "\n", "# create a list of pairs (index, label), i.e., at index we have an instance of  label", "\n", "class_by_labels", "=", "list", "(", "zip", "(", "labels_sorted", ".", "values", ".", "tolist", "(", ")", ",", "labels_sorted", ".", "indices", ".", "tolist", "(", ")", ")", ")", "\n", "# convert list to a dictionary, e.g., at labels_dict[0], we have indexes for class 0", "\n", "labels_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "k", ",", "v", "in", "class_by_labels", ":", "\n", "        ", "labels_dict", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "dict_users", "=", "defaultdict", "(", "list", ")", "\n", "if", "args", ".", "num_corrupt", "==", "1", ":", "\n", "        ", "num_clean_agents", "=", "args", ".", "num_agents", "-", "1", "\n", "adv_idxs", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "dataset", ")", ")", ",", "int", "(", "len", "(", "dataset", ")", "*", "0.1", ")", ")", "\n", "dict_users", "[", "args", ".", "num_agents", "-", "1", "]", "=", "adv_idxs", "\n", "for", "c", "in", "range", "(", "10", ")", ":", "\n", "            ", "labels_dict", "[", "c", "]", "=", "list", "(", "set", "(", "labels_dict", "[", "c", "]", ")", "-", "(", "set", "(", "labels_dict", "[", "c", "]", ")", "&", "set", "(", "adv_idxs", ")", ")", ")", "\n", "\n", "# split indexes to shards", "\n", "", "", "shard_size", "=", "len", "(", "dataset", ")", "//", "(", "num_clean_agents", "*", "args", ".", "class_per_agent", ")", "\n", "slice_size", "=", "(", "len", "(", "dataset", ")", "//", "n_classes", ")", "//", "shard_size", "\n", "for", "k", ",", "v", "in", "labels_dict", ".", "items", "(", ")", ":", "\n", "        ", "labels_dict", "[", "k", "]", "=", "chunker_list", "(", "v", ",", "slice_size", ")", "\n", "\n", "# distribute shards to users", "\n", "", "for", "user_idx", "in", "range", "(", "num_clean_agents", ")", ":", "\n", "        ", "class_ctr", "=", "0", "\n", "for", "j", "in", "range", "(", "0", ",", "n_classes", ")", ":", "\n", "            ", "if", "class_ctr", "==", "args", ".", "class_per_agent", ":", "\n", "                    ", "break", "\n", "", "elif", "len", "(", "labels_dict", "[", "j", "]", ")", ">", "0", ":", "\n", "                ", "dict_users", "[", "user_idx", "]", "+=", "labels_dict", "[", "j", "]", "[", "0", "]", "\n", "del", "labels_dict", "[", "j", "%", "n_classes", "]", "[", "0", "]", "\n", "class_ctr", "+=", "1", "\n", "\n", "", "", "", "return", "dict_users", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.get_datasets": [[122, 152], ["torchvision.transforms.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torchvision.transforms.Compose", "torchvision.datasets.FashionMNIST", "torchvision.datasets.FashionMNIST", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torch.LongTensor", "torch.LongTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "get_datasets", "(", "data", ",", "augment", "=", "True", ")", ":", "\n", "    ", "\"\"\" returns train and test datasets \"\"\"", "\n", "train_dataset", ",", "test_dataset", "=", "None", ",", "None", "\n", "data_dir", "=", "'../data'", "\n", "\n", "if", "data", "==", "'mnist'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.1307", ",", ")", ",", "std", "=", "(", "0.3081", ",", ")", ")", "]", ")", "\n", "train_dataset", "=", "datasets", ".", "MNIST", "(", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "test_dataset", "=", "datasets", ".", "MNIST", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "\n", "", "elif", "data", "==", "'fmnist'", ":", "\n", "        ", "transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.2860", "]", ",", "std", "=", "[", "0.3530", "]", ")", "]", ")", "\n", "train_dataset", "=", "datasets", ".", "FashionMNIST", "(", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "test_dataset", "=", "datasets", ".", "FashionMNIST", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "\n", "", "elif", "data", "==", "'cifar10'", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "# transforms.RandomCrop(32, padding=4),", "\n", "# transforms.RandomHorizontalFlip(),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "std", "=", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "std", "=", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "train_dataset", "=", "datasets", ".", "CIFAR10", "(", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "test_dataset", "=", "datasets", ".", "CIFAR10", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", "train_dataset", ".", "targets", ",", "test_dataset", ".", "targets", "=", "torch", ".", "LongTensor", "(", "train_dataset", ".", "targets", ")", ",", "torch", ".", "LongTensor", "(", "test_dataset", ".", "targets", ")", "\n", "", "return", "train_dataset", ",", "test_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.chunker_list": [[155, 157], ["range"], "function", ["None"], ["", "def", "chunker_list", "(", "seq", ",", "size", ")", ":", "\n", "    ", "return", "[", "seq", "[", "i", ":", ":", "size", "]", "for", "i", "in", "range", "(", "size", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.poison_dataset": [[160, 173], ["random.sample", "list", "math.floor", "utils.add_pattern_bd", "torch.tensor", "range", "set().intersection", "len", "len", "set"], "function", ["home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.add_pattern_bd"], ["", "def", "poison_dataset", "(", "dataset", ",", "args", ",", "data_idxs", "=", "None", ",", "poison_all", "=", "False", ")", ":", "\n", "    ", "all_idxs", "=", "[", "idx", "for", "idx", "in", "range", "(", "len", "(", "dataset", ")", ")", "]", "\n", "if", "data_idxs", "!=", "None", ":", "\n", "       ", "all_idxs", "=", "list", "(", "set", "(", "all_idxs", ")", ".", "intersection", "(", "data_idxs", ")", ")", "\n", "\n", "", "poison_frac", "=", "1", "if", "poison_all", "else", "args", ".", "poison_frac", "\n", "poison_idxs", "=", "random", ".", "sample", "(", "all_idxs", ",", "floor", "(", "poison_frac", "*", "len", "(", "all_idxs", ")", ")", ")", "\n", "for", "idx", "in", "poison_idxs", ":", "\n", "        ", "clean_img", "=", "dataset", ".", "data", "[", "idx", "]", "\n", "bd_img", "=", "add_pattern_bd", "(", "clean_img", ",", "args", ")", "\n", "dataset", ".", "data", "[", "idx", "]", "=", "torch", ".", "tensor", "(", "bd_img", ")", "\n", "dataset", ".", "targets", "[", "idx", "]", "=", "args", ".", "target_class", "\n", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.add_pattern_bd": [[176, 216], ["numpy.array", "range", "range", "cv2.addWeighted", "cv2.imread", "cv2.bitwise_not", "cv2.resize", "cv2.imread", "cv2.bitwise_not", "cv2.resize"], "function", ["None"], ["", "def", "add_pattern_bd", "(", "x", ",", "args", ",", "size", "=", "5", ",", "pixel_value", "=", "255", ")", ":", "\n", "    ", "\"\"\"\n    Augments a matrix by setting a checkboard-like pattern of values some `distance` away from the bottom-right\n    edge to 1. Works for single images or a batch of images.\n    :param x: N X W X H matrix or W X H matrix. will apply to last 2\n    :type x: `np.ndarray`\n    :param distance: distance from bottom-right walls. defaults to 2\n    :type distance: `int`\n    :param pixel_value: Value used to replace the entries of the image matrix\n    :type pixel_value: `int`\n    :return: augmented matrix\n    :rtype: np.ndarray\n    \"\"\"", "\n", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "\n", "if", "args", ".", "pattern_type", "==", "'plus'", ":", "\n", "        ", "start_idx", "=", "5", "\n", "# vertical line  ", "\n", "for", "i", "in", "range", "(", "start_idx", ",", "start_idx", "+", "size", ")", ":", "\n", "            ", "x", "[", "i", ",", "start_idx", "]", "=", "pixel_value", "\n", "\n", "# horizontal line", "\n", "", "for", "i", "in", "range", "(", "start_idx", "-", "size", "//", "2", ",", "start_idx", "+", "size", "//", "2", "+", "1", ")", ":", "\n", "            ", "x", "[", "start_idx", "+", "size", "//", "2", ",", "i", "]", "=", "pixel_value", "\n", "\n", "", "", "elif", "args", ".", "pattern_type", "==", "'apple'", ":", "\n", "        ", "trojan", "=", "None", "\n", "if", "args", ".", "data", "==", "'mnist'", ":", "\n", "            ", "trojan", "=", "cv2", ".", "imread", "(", "'../src/apple.png'", ",", "cv2", ".", "IMREAD_GRAYSCALE", ")", "\n", "trojan", "=", "cv2", ".", "bitwise_not", "(", "trojan", ")", "\n", "trojan", "=", "cv2", ".", "resize", "(", "trojan", ",", "dsize", "=", "(", "28", ",", "28", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "", "elif", "args", ".", "data", "==", "'cifar10'", ":", "\n", "            ", "trojan", "=", "cv2", ".", "imread", "(", "'../src/apple.png'", ")", "\n", "trojan", "=", "cv2", ".", "bitwise_not", "(", "trojan", ")", "\n", "trojan", "=", "cv2", ".", "resize", "(", "trojan", ",", "dsize", "=", "(", "32", ",", "32", ")", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "\n", "", "x", "=", "cv2", ".", "addWeighted", "(", "x", ",", "1", ",", "trojan", ",", "1", ",", "0", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.tinfoilhat0_fairness-robustness-in-fedlearning.src.utils.get_loss_n_accuracy": [[218, 252], ["model.eval", "torch.zeros", "enumerate", "model", "criterion", "torch.max", "pred_labels.view.view", "torch.sum().item", "zip", "len", "len", "torch.zeros.diag", "torch.zeros.sum", "inputs.to", "labels.to", "labels.fill_", "criterion.item", "labels.view", "pred_labels.view.view", "torch.sum", "torch.eq", "t.long", "p.long"], "function", ["None"], ["", "def", "get_loss_n_accuracy", "(", "model", ",", "criterion", ",", "data_loader", ",", "args", ",", "adv", "=", "True", ",", "num_classes", "=", "10", ")", ":", "\n", "    ", "\"\"\" Returns the loss and total accuracy, per class accuracy on the supplied data loader \"\"\"", "\n", "\n", "# disable BN stats during inference", "\n", "model", ".", "eval", "(", ")", "\n", "total_loss", ",", "correctly_labeled_samples", "=", "0", ",", "0", "\n", "confusion_matrix", "=", "torch", ".", "zeros", "(", "num_classes", ",", "num_classes", ")", "\n", "\n", "# forward-pass to get loss and predictions of the current batch", "\n", "for", "_", ",", "(", "inputs", ",", "labels", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "inputs", ",", "labels", "=", "inputs", ".", "to", "(", "device", "=", "args", ".", "device", ",", "non_blocking", "=", "True", ")", ",", "labels", ".", "to", "(", "device", "=", "args", ".", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "\n", "if", "not", "adv", ":", "\n", "            ", "labels", ".", "fill_", "(", "args", ".", "base_class", ")", "\n", "\n", "# compute the total loss over minibatch", "\n", "", "outputs", "=", "model", "(", "inputs", ")", "\n", "avg_minibatch_loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "total_loss", "+=", "avg_minibatch_loss", ".", "item", "(", ")", "*", "outputs", ".", "shape", "[", "0", "]", "\n", "\n", "# get num of correctly predicted inputs in the current batch", "\n", "_", ",", "pred_labels", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "pred_labels", "=", "pred_labels", ".", "view", "(", "-", "1", ")", "\n", "correctly_labeled_samples", "+=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "pred_labels", ",", "labels", ")", ")", ".", "item", "(", ")", "\n", "# fill confusion_matrix", "\n", "for", "t", ",", "p", "in", "zip", "(", "labels", ".", "view", "(", "-", "1", ")", ",", "pred_labels", ".", "view", "(", "-", "1", ")", ")", ":", "\n", "            ", "confusion_matrix", "[", "t", ".", "long", "(", ")", ",", "p", ".", "long", "(", ")", "]", "+=", "1", "\n", "\n", "", "", "avg_loss", "=", "total_loss", "/", "len", "(", "data_loader", ".", "dataset", ")", "\n", "accuracy", "=", "correctly_labeled_samples", "/", "len", "(", "data_loader", ".", "dataset", ")", "\n", "per_class_accuracy", "=", "confusion_matrix", ".", "diag", "(", ")", "/", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "return", "avg_loss", ",", "(", "accuracy", ",", "per_class_accuracy", ")", "\n", "\n"]]}