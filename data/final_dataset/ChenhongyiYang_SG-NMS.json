{"home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image._assert": [[41, 60], ["tf_image._is_tensor", "tensorflow.python.ops.control_flow_ops.Assert", "ex_type"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image._is_tensor"], ["def", "_assert", "(", "cond", ",", "ex_type", ",", "msg", ")", ":", "\n", "    ", "\"\"\"A polymorphic assert, works with tensors and boolean expressions.\n    If `cond` is not a tensor, behave like an ordinary assert statement, except\n    that a empty list is returned. If `cond` is a tensor, return a list\n    containing a single TensorFlow assert op.\n    Args:\n      cond: Something evaluates to a boolean value. May be a tensor.\n      ex_type: The exception class to use.\n      msg: The error message.\n    Returns:\n      A list, containing at most one assert op.\n    \"\"\"", "\n", "if", "_is_tensor", "(", "cond", ")", ":", "\n", "        ", "return", "[", "control_flow_ops", ".", "Assert", "(", "cond", ",", "[", "msg", "]", ")", "]", "\n", "", "else", ":", "\n", "        ", "if", "not", "cond", ":", "\n", "            ", "raise", "ex_type", "(", "msg", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image._is_tensor": [[62, 70], ["isinstance"], "function", ["None"], ["", "", "", "def", "_is_tensor", "(", "x", ")", ":", "\n", "    ", "\"\"\"Returns `True` if `x` is a symbolic tensor-like object.\n    Args:\n      x: A python object to check.\n    Returns:\n      `True` if `x` is a `tf.Tensor` or `tf.Variable`, otherwise `False`.\n    \"\"\"", "\n", "return", "isinstance", "(", "x", ",", "(", "ops", ".", "Tensor", ",", "variables", ".", "Variable", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image._ImageDimensions": [[72, 88], ["image.get_shape().is_fully_defined", "image.get_shape().as_list", "image.get_shape().with_rank().as_list", "tensorflow.python.ops.array_ops.unstack", "image.get_shape", "tensorflow.python.ops.array_ops.shape", "image.get_shape", "image.get_shape().with_rank", "zip", "image.get_shape"], "function", ["None"], ["", "def", "_ImageDimensions", "(", "image", ")", ":", "\n", "    ", "\"\"\"Returns the dimensions of an image tensor.\n    Args:\n      image: A 3-D Tensor of shape `[height, width, channels]`.\n    Returns:\n      A list of `[height, width, channels]` corresponding to the dimensions of the\n        input image.  Dimensions that are statically known are python integers,\n        otherwise they are integer scalar tensors.\n    \"\"\"", "\n", "if", "image", ".", "get_shape", "(", ")", ".", "is_fully_defined", "(", ")", ":", "\n", "        ", "return", "image", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "", "else", ":", "\n", "        ", "static_shape", "=", "image", ".", "get_shape", "(", ")", ".", "with_rank", "(", "3", ")", ".", "as_list", "(", ")", "\n", "dynamic_shape", "=", "array_ops", ".", "unstack", "(", "array_ops", ".", "shape", "(", "image", ")", ",", "3", ")", "\n", "return", "[", "s", "if", "s", "is", "not", "None", "else", "d", "\n", "for", "s", ",", "d", "in", "zip", "(", "static_shape", ",", "dynamic_shape", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image._Check3DImage": [[90, 117], ["any", "image.get_shape().with_rank", "ValueError", "ValueError", "image.get_shape().with_rank.is_fully_defined", "ValueError", "image.get_shape().with_rank.is_fully_defined", "tensorflow.python.ops.check_ops.assert_positive", "image.get_shape", "tensorflow.python.ops.array_ops.shape"], "function", ["None"], ["", "", "def", "_Check3DImage", "(", "image", ",", "require_static", "=", "True", ")", ":", "\n", "    ", "\"\"\"Assert that we are working with properly shaped image.\n    Args:\n      image: 3-D Tensor of shape [height, width, channels]\n        require_static: If `True`, requires that all dimensions of `image` are\n        known and non-zero.\n    Raises:\n      ValueError: if `image.shape` is not a 3-vector.\n    Returns:\n      An empty list, if `image` has fully defined dimensions. Otherwise, a list\n        containing an assert op is returned.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "image_shape", "=", "image", ".", "get_shape", "(", ")", ".", "with_rank", "(", "3", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "raise", "ValueError", "(", "\"'image' must be three-dimensional.\"", ")", "\n", "", "if", "require_static", "and", "not", "image_shape", ".", "is_fully_defined", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"'image' must be fully defined.\"", ")", "\n", "", "if", "any", "(", "x", "==", "0", "for", "x", "in", "image_shape", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"all dims of 'image.shape' must be > 0: %s\"", "%", "\n", "image_shape", ")", "\n", "", "if", "not", "image_shape", ".", "is_fully_defined", "(", ")", ":", "\n", "        ", "return", "[", "check_ops", ".", "assert_positive", "(", "array_ops", ".", "shape", "(", "image", ")", ",", "\n", "[", "\"all dims of 'image.shape' \"", "\n", "\"must be > 0.\"", "]", ")", "]", "\n", "", "else", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.fix_image_flip_shape": [[119, 133], ["image.get_shape", "tensorflow.python.framework.tensor_shape.unknown_shape", "result.set_shape", "result.set_shape"], "function", ["None"], ["", "", "def", "fix_image_flip_shape", "(", "image", ",", "result", ")", ":", "\n", "    ", "\"\"\"Set the shape to 3 dimensional if we don't know anything else.\n    Args:\n      image: original image size\n      result: flipped or transformed image\n    Returns:\n      An image whose shape is at least None,None,None.\n    \"\"\"", "\n", "image_shape", "=", "image", ".", "get_shape", "(", ")", "\n", "if", "image_shape", "==", "tensor_shape", ".", "unknown_shape", "(", ")", ":", "\n", "        ", "result", ".", "set_shape", "(", "[", "None", ",", "None", ",", "None", "]", ")", "\n", "", "else", ":", "\n", "        ", "result", ".", "set_shape", "(", "image_shape", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.bboxes_crop_or_pad": [[138, 164], ["tensorflow.name_scope", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack"], "function", ["None"], ["", "def", "bboxes_crop_or_pad", "(", "bboxes", ",", "\n", "height", ",", "width", ",", "\n", "offset_y", ",", "offset_x", ",", "\n", "target_height", ",", "target_width", ")", ":", "\n", "    ", "\"\"\"Adapt bounding boxes to crop or pad operations.\n    Coordinates are always supposed to be relative to the image.\n\n    Arguments:\n      bboxes: Tensor Nx4 with bboxes coordinates [y_min, x_min, y_max, x_max];\n      height, width: Original image dimension;\n      offset_y, offset_x: Offset to apply,\n        negative if cropping, positive if padding;\n      target_height, target_width: Target dimension after cropping / padding.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'bboxes_crop_or_pad'", ")", ":", "\n", "# Rescale bounding boxes in pixels.", "\n", "        ", "scale", "=", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "[", "height", ",", "width", ",", "height", ",", "width", "]", ")", ",", "bboxes", ".", "dtype", ")", "\n", "bboxes", "=", "bboxes", "*", "scale", "\n", "# Add offset.", "\n", "offset", "=", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "[", "offset_y", ",", "offset_x", ",", "offset_y", ",", "offset_x", "]", ")", ",", "bboxes", ".", "dtype", ")", "\n", "bboxes", "=", "bboxes", "+", "offset", "\n", "# Rescale to target dimension.", "\n", "scale", "=", "tf", ".", "cast", "(", "tf", ".", "stack", "(", "[", "target_height", ",", "target_width", ",", "\n", "target_height", ",", "target_width", "]", ")", ",", "bboxes", ".", "dtype", ")", "\n", "bboxes", "=", "bboxes", "/", "scale", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.resize_image_bboxes_with_crop_or_pad": [[166, 267], ["tensorflow.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tf_image._Check3DImage", "tf_image._assert", "tf_image._assert", "tensorflow.python.ops.control_flow_ops.with_dependencies", "tf_image._is_tensor", "tf_image._is_tensor", "tf_image._ImageDimensions", "tf_image.resize_image_bboxes_with_crop_or_pad.max_"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image._Check3DImage", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image._assert", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image._assert", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image._is_tensor", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image._is_tensor", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image._ImageDimensions"], ["", "", "def", "resize_image_bboxes_with_crop_or_pad", "(", "image", ",", "bboxes", ",", "\n", "target_height", ",", "target_width", ")", ":", "\n", "    ", "\"\"\"Crops and/or pads an image to a target width and height.\n    Resizes an image to a target width and height by either centrally\n    cropping the image or padding it evenly with zeros.\n\n    If `width` or `height` is greater than the specified `target_width` or\n    `target_height` respectively, this op centrally crops along that dimension.\n    If `width` or `height` is smaller than the specified `target_width` or\n    `target_height` respectively, this op centrally pads with 0 along that\n    dimension.\n    Args:\n      image: 3-D tensor of shape `[height, width, channels]`\n      target_height: Target height.\n      target_width: Target width.\n    Raises:\n      ValueError: if `target_height` or `target_width` are zero or negative.\n    Returns:\n      Cropped and/or padded image of shape\n        `[target_height, target_width, channels]`\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "'resize_with_crop_or_pad'", ")", ":", "\n", "        ", "image", "=", "ops", ".", "convert_to_tensor", "(", "image", ",", "name", "=", "'image'", ")", "\n", "\n", "assert_ops", "=", "[", "]", "\n", "assert_ops", "+=", "_Check3DImage", "(", "image", ",", "require_static", "=", "False", ")", "\n", "assert_ops", "+=", "_assert", "(", "target_width", ">", "0", ",", "ValueError", ",", "\n", "'target_width must be > 0.'", ")", "\n", "assert_ops", "+=", "_assert", "(", "target_height", ">", "0", ",", "ValueError", ",", "\n", "'target_height must be > 0.'", ")", "\n", "\n", "image", "=", "control_flow_ops", ".", "with_dependencies", "(", "assert_ops", ",", "image", ")", "\n", "# `crop_to_bounding_box` and `pad_to_bounding_box` have their own checks.", "\n", "# Make sure our checks come first, so that error messages are clearer.", "\n", "if", "_is_tensor", "(", "target_height", ")", ":", "\n", "            ", "target_height", "=", "control_flow_ops", ".", "with_dependencies", "(", "\n", "assert_ops", ",", "target_height", ")", "\n", "", "if", "_is_tensor", "(", "target_width", ")", ":", "\n", "            ", "target_width", "=", "control_flow_ops", ".", "with_dependencies", "(", "assert_ops", ",", "target_width", ")", "\n", "\n", "", "def", "max_", "(", "x", ",", "y", ")", ":", "\n", "            ", "if", "_is_tensor", "(", "x", ")", "or", "_is_tensor", "(", "y", ")", ":", "\n", "                ", "return", "math_ops", ".", "maximum", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                ", "return", "max", "(", "x", ",", "y", ")", "\n", "\n", "", "", "def", "min_", "(", "x", ",", "y", ")", ":", "\n", "            ", "if", "_is_tensor", "(", "x", ")", "or", "_is_tensor", "(", "y", ")", ":", "\n", "                ", "return", "math_ops", ".", "minimum", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                ", "return", "min", "(", "x", ",", "y", ")", "\n", "\n", "", "", "def", "equal_", "(", "x", ",", "y", ")", ":", "\n", "            ", "if", "_is_tensor", "(", "x", ")", "or", "_is_tensor", "(", "y", ")", ":", "\n", "                ", "return", "math_ops", ".", "equal", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                ", "return", "x", "==", "y", "\n", "\n", "", "", "height", ",", "width", ",", "_", "=", "_ImageDimensions", "(", "image", ")", "\n", "width_diff", "=", "target_width", "-", "width", "\n", "offset_crop_width", "=", "max_", "(", "-", "width_diff", "//", "2", ",", "0", ")", "\n", "offset_pad_width", "=", "max_", "(", "width_diff", "//", "2", ",", "0", ")", "\n", "\n", "height_diff", "=", "target_height", "-", "height", "\n", "offset_crop_height", "=", "max_", "(", "-", "height_diff", "//", "2", ",", "0", ")", "\n", "offset_pad_height", "=", "max_", "(", "height_diff", "//", "2", ",", "0", ")", "\n", "\n", "# Maybe crop if needed.", "\n", "height_crop", "=", "min_", "(", "target_height", ",", "height", ")", "\n", "width_crop", "=", "min_", "(", "target_width", ",", "width", ")", "\n", "cropped", "=", "tf", ".", "image", ".", "crop_to_bounding_box", "(", "image", ",", "offset_crop_height", ",", "offset_crop_width", ",", "\n", "height_crop", ",", "width_crop", ")", "\n", "\n", "if", "bboxes", "is", "not", "None", ":", "\n", "            ", "bboxes", "=", "bboxes_crop_or_pad", "(", "bboxes", ",", "\n", "height", ",", "width", ",", "\n", "-", "offset_crop_height", ",", "-", "offset_crop_width", ",", "\n", "height_crop", ",", "width_crop", ")", "\n", "# Maybe pad if needed.", "\n", "", "resized", "=", "tf", ".", "image", ".", "pad_to_bounding_box", "(", "cropped", ",", "offset_pad_height", ",", "offset_pad_width", ",", "\n", "target_height", ",", "target_width", ")", "\n", "if", "bboxes", "is", "not", "None", ":", "\n", "            ", "bboxes", "=", "bboxes_crop_or_pad", "(", "bboxes", ",", "\n", "height_crop", ",", "width_crop", ",", "\n", "offset_pad_height", ",", "offset_pad_width", ",", "\n", "target_height", ",", "target_width", ")", "\n", "\n", "# In theory all the checks below are redundant.", "\n", "", "if", "resized", ".", "get_shape", "(", ")", ".", "ndims", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'resized contains no shape.'", ")", "\n", "\n", "", "resized_height", ",", "resized_width", ",", "_", "=", "_ImageDimensions", "(", "resized", ")", "\n", "\n", "assert_ops", "=", "[", "]", "\n", "assert_ops", "+=", "_assert", "(", "equal_", "(", "resized_height", ",", "target_height", ")", ",", "ValueError", ",", "\n", "'resized height is not correct.'", ")", "\n", "assert_ops", "+=", "_assert", "(", "equal_", "(", "resized_width", ",", "target_width", ")", ",", "ValueError", ",", "\n", "'resized width is not correct.'", ")", "\n", "\n", "resized", "=", "control_flow_ops", ".", "with_dependencies", "(", "assert_ops", ",", "resized", ")", "\n", "return", "resized", ",", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.resize_image": [[269, 282], ["tensorflow.name_scope", "tf_image._ImageDimensions", "tensorflow.expand_dims", "tensorflow.image.resize_images", "tensorflow.reshape", "tensorflow.stack"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image._ImageDimensions"], ["", "", "def", "resize_image", "(", "image", ",", "size", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ",", "\n", "align_corners", "=", "False", ")", ":", "\n", "    ", "\"\"\"Resize an image and bounding boxes.\n    \"\"\"", "\n", "# Resize image.", "\n", "with", "tf", ".", "name_scope", "(", "'resize_image'", ")", ":", "\n", "        ", "height", ",", "width", ",", "channels", "=", "_ImageDimensions", "(", "image", ")", "\n", "image", "=", "tf", ".", "expand_dims", "(", "image", ",", "0", ")", "\n", "image", "=", "tf", ".", "image", ".", "resize_images", "(", "image", ",", "size", ",", "\n", "method", ",", "align_corners", ")", "\n", "image", "=", "tf", ".", "reshape", "(", "image", ",", "tf", ".", "stack", "(", "[", "size", "[", "0", "]", ",", "size", "[", "1", "]", ",", "channels", "]", ")", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.random_flip_left_right": [[284, 308], ["tensorflow.stack", "tensorflow.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tf_image._Check3DImage", "tensorflow.python.ops.random_ops.random_uniform", "tensorflow.python.ops.math_ops.less", "tensorflow.python.ops.control_flow_ops.cond", "tensorflow.python.ops.control_flow_ops.cond", "tf_image.fix_image_flip_shape", "tensorflow.python.ops.array_ops.reverse_v2", "tf_image.random_flip_left_right.flip_bboxes"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image._Check3DImage", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.fix_image_flip_shape"], ["", "", "def", "random_flip_left_right", "(", "image", ",", "bboxes", ",", "seed", "=", "None", ")", ":", "\n", "    ", "\"\"\"Random flip left-right of an image and its bounding boxes.\n    \"\"\"", "\n", "def", "flip_bboxes", "(", "bboxes", ")", ":", "\n", "        ", "\"\"\"Flip bounding boxes coordinates.\n        \"\"\"", "\n", "bboxes", "=", "tf", ".", "stack", "(", "[", "bboxes", "[", ":", ",", "0", "]", ",", "1", "-", "bboxes", "[", ":", ",", "3", "]", ",", "bboxes", "[", ":", ",", "2", "]", ",", "1", "-", "bboxes", "[", ":", ",", "1", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "bboxes", "\n", "\n", "# Random flip. Tensorflow implementation.", "\n", "", "with", "tf", ".", "name_scope", "(", "'random_flip_left_right'", ")", ":", "\n", "        ", "image", "=", "ops", ".", "convert_to_tensor", "(", "image", ",", "name", "=", "'image'", ")", "\n", "_Check3DImage", "(", "image", ",", "require_static", "=", "False", ")", "\n", "uniform_random", "=", "random_ops", ".", "random_uniform", "(", "[", "]", ",", "0", ",", "1.0", ",", "seed", "=", "seed", ")", "\n", "mirror_cond", "=", "math_ops", ".", "less", "(", "uniform_random", ",", ".5", ")", "\n", "# Flip image.", "\n", "result", "=", "control_flow_ops", ".", "cond", "(", "mirror_cond", ",", "\n", "lambda", ":", "array_ops", ".", "reverse_v2", "(", "image", ",", "[", "1", "]", ")", ",", "\n", "lambda", ":", "image", ")", "\n", "# Flip bboxes.", "\n", "bboxes", "=", "control_flow_ops", ".", "cond", "(", "mirror_cond", ",", "\n", "lambda", ":", "flip_bboxes", "(", "bboxes", ")", ",", "\n", "lambda", ":", "bboxes", ")", "\n", "return", "fix_image_flip_shape", "(", "image", ",", "result", ")", ",", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.tf_image_whitened": [[47, 62], ["tensorflow.constant", "ValueError", "image.get_shape().as_list", "len", "ValueError", "image.get_shape", "image.get_shape"], "function", ["None"], ["def", "tf_image_whitened", "(", "image", ",", "means", "=", "[", "_R_MEAN", ",", "_G_MEAN", ",", "_B_MEAN", "]", ")", ":", "\n", "    ", "\"\"\"Subtracts the given means from each image channel.\n\n    Returns:\n        the centered image.\n    \"\"\"", "\n", "if", "image", ".", "get_shape", "(", ")", ".", "ndims", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "'Input must be of size [height, width, C>0]'", ")", "\n", "", "num_channels", "=", "image", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "if", "len", "(", "means", ")", "!=", "num_channels", ":", "\n", "        ", "raise", "ValueError", "(", "'len(means) must match the number of channels'", ")", "\n", "\n", "", "mean", "=", "tf", ".", "constant", "(", "means", ",", "dtype", "=", "image", ".", "dtype", ")", "\n", "image", "=", "image", "-", "mean", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.tf_image_unwhitened": [[64, 76], ["tensorflow.constant", "tensorflow.cast"], "function", ["None"], ["", "def", "tf_image_unwhitened", "(", "image", ",", "means", "=", "[", "_R_MEAN", ",", "_G_MEAN", ",", "_B_MEAN", "]", ",", "to_int", "=", "True", ")", ":", "\n", "    ", "\"\"\"Re-convert to original image distribution, and convert to int if\n    necessary.\n\n    Returns:\n      Centered image.\n    \"\"\"", "\n", "mean", "=", "tf", ".", "constant", "(", "means", ",", "dtype", "=", "image", ".", "dtype", ")", "\n", "image", "=", "image", "+", "mean", "\n", "if", "to_int", ":", "\n", "        ", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "int32", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.np_image_unwhitened": [[78, 90], ["numpy.copy", "numpy.array", "img.astype.astype"], "function", ["None"], ["", "def", "np_image_unwhitened", "(", "image", ",", "means", "=", "[", "_R_MEAN", ",", "_G_MEAN", ",", "_B_MEAN", "]", ",", "to_int", "=", "True", ")", ":", "\n", "    ", "\"\"\"Re-convert to original image distribution, and convert to int if\n    necessary. Numpy version.\n\n    Returns:\n      Centered image.\n    \"\"\"", "\n", "img", "=", "np", ".", "copy", "(", "image", ")", "\n", "img", "+=", "np", ".", "array", "(", "means", ",", "dtype", "=", "img", ".", "dtype", ")", "\n", "if", "to_int", ":", "\n", "        ", "img", "=", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.tf_summary_image": [[92, 101], ["tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.image.draw_bounding_boxes", "tensorflow.summary.image", "preprocessing_rfcn.tf_image_unwhitened"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.tf_image_unwhitened"], ["", "def", "tf_summary_image", "(", "image", ",", "bboxes", ",", "name", "=", "'image'", ",", "unwhitened", "=", "False", ")", ":", "\n", "    ", "\"\"\"Add image with bounding boxes to summary.\n    \"\"\"", "\n", "if", "unwhitened", ":", "\n", "        ", "image", "=", "tf_image_unwhitened", "(", "image", ")", "\n", "", "image", "=", "tf", ".", "expand_dims", "(", "image", ",", "0", ")", "\n", "bboxes", "=", "tf", ".", "expand_dims", "(", "bboxes", ",", "0", ")", "\n", "image_with_box", "=", "tf", ".", "image", ".", "draw_bounding_boxes", "(", "image", ",", "bboxes", ")", "\n", "tf", ".", "summary", ".", "image", "(", "name", ",", "image_with_box", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.apply_with_random_selector": [[103, 120], ["tensorflow.random_uniform", "tensorflow.python.ops.control_flow_ops.merge", "func", "range", "tensorflow.python.ops.control_flow_ops.switch", "tensorflow.equal"], "function", ["None"], ["", "def", "apply_with_random_selector", "(", "x", ",", "func", ",", "num_cases", ")", ":", "\n", "    ", "\"\"\"Computes func(x, sel), with sel sampled from [0...num_cases-1].\n\n    Args:\n        x: input Tensor.\n        func: Python function to apply.\n        num_cases: Python int32, number of cases to sample sel from.\n\n    Returns:\n        The result of func(x, sel), where func receives the value of the\n        selector as a python integer, but sel is sampled dynamically.\n    \"\"\"", "\n", "sel", "=", "tf", ".", "random_uniform", "(", "[", "]", ",", "maxval", "=", "num_cases", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "# Pass the real x only to one of the func calls.", "\n", "return", "control_flow_ops", ".", "merge", "(", "[", "\n", "func", "(", "control_flow_ops", ".", "switch", "(", "x", ",", "tf", ".", "equal", "(", "sel", ",", "case", ")", ")", "[", "1", "]", ",", "case", ")", "\n", "for", "case", "in", "range", "(", "num_cases", ")", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.distort_color": [[122, 173], ["tensorflow.name_scope", "tensorflow.clip_by_value", "tensorflow.image.random_brightness", "tensorflow.image.random_saturation", "tensorflow.image.random_saturation", "tensorflow.image.random_brightness", "tensorflow.image.random_brightness", "tensorflow.image.random_saturation", "tensorflow.image.random_hue", "tensorflow.image.random_contrast", "tensorflow.image.random_saturation", "tensorflow.image.random_brightness", "tensorflow.image.random_contrast", "tensorflow.image.random_hue", "tensorflow.image.random_contrast", "tensorflow.image.random_hue", "tensorflow.image.random_brightness", "tensorflow.image.random_saturation", "tensorflow.image.random_hue", "tensorflow.image.random_saturation", "tensorflow.image.random_contrast", "tensorflow.image.random_brightness", "ValueError"], "function", ["None"], ["", "def", "distort_color", "(", "image", ",", "color_ordering", "=", "0", ",", "fast_mode", "=", "True", ",", "scope", "=", "None", ")", ":", "\n", "    ", "\"\"\"Distort the color of a Tensor image.\n\n    Each color distortion is non-commutative and thus ordering of the color ops\n    matters. Ideally we would randomly permute the ordering of the color ops.\n    Rather then adding that level of complication, we select a distinct ordering\n    of color ops for each preprocessing thread.\n\n    Args:\n        image: 3-D Tensor containing single image in [0, 1].\n        color_ordering: Python int, a type of distortion (valid values: 0-3).\n        fast_mode: Avoids slower ops (random_hue and random_contrast)\n        scope: Optional scope for name_scope.\n    Returns:\n        3-D Tensor color-distorted image on range [0, 1]\n    Raises:\n        ValueError: if color_ordering not in [0, 3]\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "scope", ",", "'distort_color'", ",", "[", "image", "]", ")", ":", "\n", "        ", "if", "fast_mode", ":", "\n", "            ", "if", "color_ordering", "==", "0", ":", "\n", "                ", "image", "=", "tf", ".", "image", ".", "random_brightness", "(", "image", ",", "max_delta", "=", "32.", "/", "255.", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_saturation", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "", "else", ":", "\n", "                ", "image", "=", "tf", ".", "image", ".", "random_saturation", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_brightness", "(", "image", ",", "max_delta", "=", "32.", "/", "255.", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "color_ordering", "==", "0", ":", "\n", "                ", "image", "=", "tf", ".", "image", ".", "random_brightness", "(", "image", ",", "max_delta", "=", "32.", "/", "255.", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_saturation", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_hue", "(", "image", ",", "max_delta", "=", "0.2", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_contrast", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "", "elif", "color_ordering", "==", "1", ":", "\n", "                ", "image", "=", "tf", ".", "image", ".", "random_saturation", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_brightness", "(", "image", ",", "max_delta", "=", "32.", "/", "255.", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_contrast", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_hue", "(", "image", ",", "max_delta", "=", "0.2", ")", "\n", "", "elif", "color_ordering", "==", "2", ":", "\n", "                ", "image", "=", "tf", ".", "image", ".", "random_contrast", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_hue", "(", "image", ",", "max_delta", "=", "0.2", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_brightness", "(", "image", ",", "max_delta", "=", "32.", "/", "255.", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_saturation", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "", "elif", "color_ordering", "==", "3", ":", "\n", "                ", "image", "=", "tf", ".", "image", ".", "random_hue", "(", "image", ",", "max_delta", "=", "0.2", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_saturation", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_contrast", "(", "image", ",", "lower", "=", "0.5", ",", "upper", "=", "1.5", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_brightness", "(", "image", ",", "max_delta", "=", "32.", "/", "255.", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'color_ordering must be in [0, 3]'", ")", "\n", "# The random_* ops do not necessarily clamp.", "\n", "", "", "return", "tf", ".", "clip_by_value", "(", "image", ",", "0.0", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.resnet_norm": [[174, 179], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.div", "tensorflow.constant", "tensorflow.constant"], "function", ["None"], ["", "", "def", "resnet_norm", "(", "img", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "    ", "mean_tensor", "=", "tf", ".", "reshape", "(", "tf", ".", "constant", "(", "mean", ",", "tf", ".", "float32", ")", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "std_tensor", "=", "tf", ".", "reshape", "(", "tf", ".", "constant", "(", "std", ",", "tf", ".", "float32", ")", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "ret_img", "=", "tf", ".", "div", "(", "img", "-", "mean_tensor", ",", "std_tensor", ")", "\n", "return", "ret_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.random_crop": [[181, 243], ["tensorflow.name_scope", "tensorflow.constant", "tensorflow.cast", "tensorflow.random.uniform", "tensorflow.maximum", "tensorflow.cast", "tensorflow.concat", "tensorflow.concat", "tensorflow.slice", "tensorflow.constant", "tensorflow.cast", "tensorflow.expand_dims", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.minimum", "tensorflow.minimum", "tensorflow.stack", "tensorflow.greater", "tensorflow.where", "tensorflow.gather", "tensorflow.gather", "tensorflow.div", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.constant", "numpy.array", "tensorflow.concat", "tensorflow.concat", "tensorflow.cast", "tensorflow.cast", "tensorflow.div", "tensorflow.shape", "tensorflow.cast", "tensorflow.random.uniform"], "function", ["None"], ["", "def", "random_crop", "(", "image", ",", "labels", ",", "bboxes", ",", "img_shape", ",", "crop_shape", ",", "keep_ratio", "=", "0.5", ",", "random_scale", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'random_crop'", ")", ":", "\n", "        ", "crop_shape_", "=", "tf", ".", "constant", "(", "crop_shape", ",", "tf", ".", "int32", ")", "\n", "if", "random_scale", "is", "not", "None", ":", "\n", "            ", "out_shape_", "=", "tf", ".", "cast", "(", "tf", ".", "cast", "(", "crop_shape_", ",", "tf", ".", "float32", ")", "*", "tf", ".", "random", ".", "uniform", "(", "[", "]", ",", "minval", "=", "random_scale", "[", "0", "]", ",", "maxval", "=", "random_scale", "[", "1", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "tf", ".", "int32", ")", "\n", "", "else", ":", "\n", "            ", "out_shape_", "=", "crop_shape_", "\n", "", "crop_range", "=", "tf", ".", "shape", "(", "image", ")", "[", ":", "2", "]", "-", "out_shape_", "\n", "crop_range", "=", "tf", ".", "cast", "(", "crop_range", ",", "tf", ".", "float32", ")", "\n", "\n", "rand", "=", "tf", ".", "random", ".", "uniform", "(", "[", "2", "]", ")", "\n", "\n", "begin", "=", "rand", "*", "crop_range", "-", "1.", "\n", "begin", "=", "tf", ".", "maximum", "(", "begin", ",", "tf", ".", "constant", "(", "[", "0.", ",", "0.", "]", ")", ")", "\n", "ibegin", "=", "tf", ".", "cast", "(", "begin", ",", "tf", ".", "int32", ")", "\n", "\n", "slice_begin", "=", "tf", ".", "concat", "(", "(", "ibegin", ",", "[", "0", "]", ")", ",", "axis", "=", "0", ")", "\n", "slice_size", "=", "tf", ".", "concat", "(", "(", "out_shape_", ",", "[", "3", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "croped_img", "=", "tf", ".", "slice", "(", "image", ",", "slice_begin", ",", "slice_size", ")", "\n", "\n", "img_shape_", "=", "tf", ".", "constant", "(", "np", ".", "array", "(", "[", "[", "img_shape", "[", "0", "]", ",", "img_shape", "[", "1", "]", ",", "img_shape", "[", "0", "]", ",", "img_shape", "[", "1", "]", "]", "]", ")", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "out_shape_float", "=", "tf", ".", "cast", "(", "tf", ".", "concat", "(", "(", "out_shape_", ",", "out_shape_", ")", ",", "axis", "=", "0", ")", ",", "tf", ".", "float32", ")", "\n", "begin_box", "=", "tf", ".", "expand_dims", "(", "tf", ".", "concat", "(", "(", "begin", ",", "begin", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "\n", "bboxes_", "=", "bboxes", "*", "img_shape_", "\n", "crop_bboxes", "=", "bboxes_", "-", "begin_box", "\n", "\n", "ymin", "=", "bboxes_", "[", ":", ",", "0", "]", "\n", "xmin", "=", "bboxes_", "[", ":", ",", "1", "]", "\n", "ymax", "=", "bboxes_", "[", ":", ",", "2", "]", "\n", "xmax", "=", "bboxes_", "[", ":", ",", "3", "]", "\n", "\n", "h", "=", "ymax", "-", "ymin", "\n", "w", "=", "xmax", "-", "xmin", "\n", "\n", "cymin", "=", "crop_bboxes", "[", ":", ",", "0", "]", "\n", "cxmin", "=", "crop_bboxes", "[", ":", ",", "1", "]", "\n", "cymax", "=", "crop_bboxes", "[", ":", ",", "2", "]", "\n", "cxmax", "=", "crop_bboxes", "[", ":", ",", "3", "]", "\n", "\n", "cymin", "=", "tf", ".", "maximum", "(", "cymin", ",", "0", ")", "\n", "cxmin", "=", "tf", ".", "maximum", "(", "cxmin", ",", "0", ")", "\n", "cymax", "=", "tf", ".", "minimum", "(", "cymax", ",", "tf", ".", "cast", "(", "out_shape_", "[", "0", "]", ",", "tf", ".", "float32", ")", ")", "\n", "cxmax", "=", "tf", ".", "minimum", "(", "cxmax", ",", "tf", ".", "cast", "(", "out_shape_", "[", "1", "]", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "ch", "=", "cymax", "-", "cymin", "\n", "cw", "=", "cxmax", "-", "cxmin", "\n", "\n", "crop_bboxes", "=", "tf", ".", "stack", "(", "(", "cymin", ",", "cxmin", ",", "cymax", ",", "cxmax", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "valid_mask", "=", "tf", ".", "greater", "(", "tf", ".", "div", "(", "ch", "*", "cw", ",", "h", "*", "w", ")", ",", "keep_ratio", ")", "\n", "inds", "=", "tf", ".", "where", "(", "valid_mask", ")", "\n", "\n", "gather_labels", "=", "tf", ".", "gather", "(", "labels", ",", "inds", ")", "\n", "gather_bboxes", "=", "tf", ".", "gather", "(", "crop_bboxes", ",", "inds", ")", "\n", "gather_bboxes", "=", "tf", ".", "div", "(", "gather_bboxes", ",", "out_shape_float", ")", "\n", "\n", "ret_labels", "=", "tf", ".", "reshape", "(", "gather_labels", ",", "[", "-", "1", "]", ")", "\n", "ret_bboxes", "=", "tf", ".", "reshape", "(", "gather_bboxes", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "\n", "return", "croped_img", ",", "ret_labels", ",", "ret_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.preprocess_for_train": [[248, 294], ["tensorflow.name_scope", "preprocessing_rfcn.random_crop", "tensorflow.image.resize", "preprocessing.tf_image.random_flip_left_right", "preprocessing_rfcn.apply_with_random_selector", "preprocessing_rfcn.resnet_norm", "ValueError", "tensorflow.image.convert_image_dtype", "tensorflow.transpose", "tf.image.convert_image_dtype.get_shape", "preprocessing_rfcn.distort_color"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.random_crop", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.random_flip_left_right", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.apply_with_random_selector", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_preprocess.resnet_norm", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.distort_color"], ["", "", "def", "preprocess_for_train", "(", "image", ",", "labels", ",", "bboxes", ",", "input_shape", ",", "crop_shape", ",", "\n", "out_shape", ",", "resize", "=", "'naive'", ",", "data_format", "=", "'NHWC'", ",", "\n", "scope", "=", "'rfcn_preprocessing_train'", ")", ":", "\n", "    ", "\"\"\"Preprocesses the given image for training.\n\n    Note that the actual resizing scale is sampled from\n        [`resize_size_min`, `resize_size_max`].\n\n    Args:\n        image: A `Tensor` representing an image of arbitrary size.\n        output_height: The height of the image after preprocessing.\n        output_width: The width of the image after preprocessing.\n        resize_side_min: The lower bound for the smallest side of the image for\n            aspect-preserving resizing.\n        resize_side_max: The upper bound for the smallest side of the image for\n            aspect-preserving resizing.\n\n    Returns:\n        A preprocessed image.\n    \"\"\"", "\n", "fast_mode", "=", "False", "\n", "with", "tf", ".", "name_scope", "(", "scope", ",", "'rfcn_preprocessing_train'", ",", "[", "image", ",", "labels", ",", "bboxes", "]", ")", ":", "\n", "        ", "if", "image", ".", "get_shape", "(", ")", ".", "ndims", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'Input must be of size [height, width, C>0]'", ")", "\n", "# Convert to float scaled [0, 1].", "\n", "", "if", "image", ".", "dtype", "!=", "tf", ".", "float32", ":", "\n", "            ", "image", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "image", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "dst_image", ",", "dst_labels", ",", "dst_bboxes", "=", "random_crop", "(", "image", ",", "labels", ",", "bboxes", ",", "img_shape", "=", "input_shape", ",", "crop_shape", "=", "crop_shape", ")", "\n", "\n", "#dst_image, dst_bboxes = tf_image.resize_image_bboxes_with_crop_or_pad(dst_image, dst_bboxes, out_shape[0], out_shape[1])", "\n", "\n", "dst_image", "=", "tf", ".", "image", ".", "resize", "(", "dst_image", ",", "out_shape", ")", "\n", "\n", "dst_image", ",", "dst_bboxes", "=", "tf_image", ".", "random_flip_left_right", "(", "dst_image", ",", "dst_bboxes", ")", "\n", "\n", "dst_image", "=", "apply_with_random_selector", "(", "\n", "dst_image", ",", "\n", "lambda", "x", ",", "ordering", ":", "distort_color", "(", "x", ",", "ordering", ",", "fast_mode", ")", ",", "\n", "num_cases", "=", "4", ")", "\n", "\n", "dst_image", "=", "resnet_norm", "(", "dst_image", ")", "\n", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "            ", "dst_image", "=", "tf", ".", "transpose", "(", "image", ",", "perm", "=", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "return", "dst_image", ",", "dst_labels", ",", "dst_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.preprocess_for_eval": [[296, 364], ["tensorflow.name_scope", "tensorflow.to_float", "preprocessing_rfcn.tf_image_whitened", "tensorflow.constant", "ValueError", "tensorflow.concat", "tensorflow.logical_not", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.transpose", "tf_image.resize_image.get_shape", "preprocessing.tf_image.resize_image_bboxes_with_crop_or_pad", "tensorflow.cast", "tensorflow.shape", "tensorflow.minimum", "tensorflow.cast", "preprocessing.tf_image.resize_image", "preprocessing.tf_image.resize_image_bboxes_with_crop_or_pad", "tensorflow.to_double", "tensorflow.minimum", "tensorflow.to_double", "tensorflow.floor", "preprocessing.tf_image.resize_image", "tensorflow.to_double", "tensorflow.to_double"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.tf_image_whitened", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.resize_image_bboxes_with_crop_or_pad", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.resize_image", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.resize_image_bboxes_with_crop_or_pad", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.resize_image"], ["", "", "def", "preprocess_for_eval", "(", "image", ",", "labels", ",", "bboxes", ",", "\n", "out_shape", "=", "EVAL_SIZE", ",", "data_format", "=", "'NHWC'", ",", "\n", "difficults", "=", "None", ",", "resize", "=", "Resize", ".", "WARP_RESIZE", ",", "\n", "scope", "=", "'rfcn_preprocessing_train'", ")", ":", "\n", "    ", "\"\"\"Preprocess an image for evaluation.\n\n    Args:\n        image: A `Tensor` representing an image of arbitrary size.\n        out_shape: Output shape after pre-processing (if resize != None)\n        resize: Resize strategy.\n\n    Returns:\n        A preprocessed image.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "scope", ")", ":", "\n", "        ", "if", "image", ".", "get_shape", "(", ")", ".", "ndims", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'Input must be of size [height, width, C>0]'", ")", "\n", "\n", "", "image", "=", "tf", ".", "to_float", "(", "image", ")", "\n", "image", "=", "tf_image_whitened", "(", "image", ",", "[", "_R_MEAN", ",", "_G_MEAN", ",", "_B_MEAN", "]", ")", "\n", "\n", "# Add image rectangle to bboxes.", "\n", "bbox_img", "=", "tf", ".", "constant", "(", "[", "[", "0.", ",", "0.", ",", "1.", ",", "1.", "]", "]", ")", "\n", "if", "bboxes", "is", "None", ":", "\n", "            ", "bboxes", "=", "bbox_img", "\n", "", "else", ":", "\n", "            ", "bboxes", "=", "tf", ".", "concat", "(", "[", "bbox_img", ",", "bboxes", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "resize", "==", "Resize", ".", "NONE", ":", "\n", "# No resizing...", "\n", "            ", "pass", "\n", "", "elif", "resize", "==", "Resize", ".", "CENTRAL_CROP", ":", "\n", "# Central cropping of the image.", "\n", "            ", "image", ",", "bboxes", "=", "tf_image", ".", "resize_image_bboxes_with_crop_or_pad", "(", "\n", "image", ",", "bboxes", ",", "out_shape", "[", "0", "]", ",", "out_shape", "[", "1", "]", ")", "\n", "", "elif", "resize", "==", "Resize", ".", "PAD_AND_RESIZE", ":", "\n", "# Resize image first: find the correct factor...", "\n", "            ", "shape", "=", "tf", ".", "shape", "(", "image", ")", "\n", "factor", "=", "tf", ".", "minimum", "(", "tf", ".", "to_double", "(", "1.0", ")", ",", "\n", "tf", ".", "minimum", "(", "tf", ".", "to_double", "(", "out_shape", "[", "0", "]", "/", "shape", "[", "0", "]", ")", ",", "\n", "tf", ".", "to_double", "(", "out_shape", "[", "1", "]", "/", "shape", "[", "1", "]", ")", ")", ")", "\n", "resize_shape", "=", "factor", "*", "tf", ".", "to_double", "(", "shape", "[", "0", ":", "2", "]", ")", "\n", "resize_shape", "=", "tf", ".", "cast", "(", "tf", ".", "floor", "(", "resize_shape", ")", ",", "tf", ".", "int32", ")", "\n", "\n", "image", "=", "tf_image", ".", "resize_image", "(", "image", ",", "resize_shape", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ",", "\n", "align_corners", "=", "False", ")", "\n", "# Pad to expected size.", "\n", "image", ",", "bboxes", "=", "tf_image", ".", "resize_image_bboxes_with_crop_or_pad", "(", "\n", "image", ",", "bboxes", ",", "out_shape", "[", "0", "]", ",", "out_shape", "[", "1", "]", ")", "\n", "", "elif", "resize", "==", "Resize", ".", "WARP_RESIZE", ":", "\n", "\n", "# Warp resize of the image.", "\n", "            ", "image", "=", "tf_image", ".", "resize_image", "(", "image", ",", "out_shape", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ",", "\n", "align_corners", "=", "False", ")", "\n", "# Split back bounding boxes.", "\n", "", "bbox_img", "=", "bboxes", "[", "0", "]", "\n", "bboxes", "=", "bboxes", "[", "1", ":", "]", "\n", "# Remove difficult boxes.", "\n", "if", "difficults", "is", "not", "None", ":", "\n", "            ", "mask", "=", "tf", ".", "logical_not", "(", "tf", ".", "cast", "(", "difficults", ",", "tf", ".", "bool", ")", ")", "\n", "labels", "=", "tf", ".", "boolean_mask", "(", "labels", ",", "mask", ")", "\n", "bboxes", "=", "tf", ".", "boolean_mask", "(", "bboxes", ",", "mask", ")", "\n", "# Image data format.", "\n", "", "if", "data_format", "==", "'NCHW'", ":", "\n", "            ", "image", "=", "tf", ".", "transpose", "(", "image", ",", "perm", "=", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "return", "image", ",", "labels", ",", "bboxes", ",", "bbox_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.preprocess_image": [[366, 401], ["preprocessing_rfcn.preprocess_for_train", "preprocessing_rfcn.preprocess_for_eval"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.preprocess_for_train", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_preprocess.preprocess_for_eval"], ["", "", "def", "preprocess_image", "(", "image", ",", "\n", "labels", ",", "\n", "bboxes", ",", "\n", "out_shape", ",", "\n", "data_format", ",", "\n", "is_training", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Pre-process an given image.\n\n    Args:\n      image: A `Tensor` representing an image of arbitrary size.\n      output_height: The height of the image after preprocessing.\n      output_width: The width of the image after preprocessing.\n      is_training: `True` if we're preprocessing the image for training and\n        `False` otherwise.\n      resize_side_min: The lower bound for the smallest side of the image for\n        aspect-preserving resizing. If `is_training` is `False`, then this value\n        is used for rescaling.\n      resize_side_max: The upper bound for the smallest side of the image for\n        aspect-preserving resizing. If `is_training` is `False`, this value is\n         ignored. Otherwise, the resize side is sampled from\n         [resize_size_min, resize_size_max].\n\n    Returns:\n      A preprocessed image.\n    \"\"\"", "\n", "if", "is_training", ":", "\n", "        ", "return", "preprocess_for_train", "(", "image", ",", "labels", ",", "bboxes", ",", "\n", "out_shape", "=", "out_shape", ",", "\n", "data_format", "=", "data_format", ")", "\n", "", "else", ":", "\n", "        ", "return", "preprocess_for_eval", "(", "image", ",", "labels", ",", "bboxes", ",", "\n", "out_shape", "=", "out_shape", ",", "\n", "data_format", "=", "data_format", ",", "\n", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.utils.np_methods.get_iou": [[3, 21], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["def", "get_iou", "(", "box1", ",", "box2", ")", ":", "\n", "    ", "ymin1", ",", "xmin1", ",", "ymax1", ",", "xmax1", "=", "box1", "\n", "ymin2", ",", "xmin2", ",", "ymax2", ",", "xmax2", "=", "box2", "\n", "\n", "iymin", "=", "np", ".", "maximum", "(", "ymin1", ",", "ymin2", ")", "\n", "ixmin", "=", "np", ".", "maximum", "(", "xmin1", ",", "xmin2", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "ymax1", ",", "ymax2", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "xmax1", ",", "xmax2", ")", "\n", "\n", "h", "=", "np", ".", "maximum", "(", "iymax", "-", "iymin", ",", "0.", ")", "\n", "w", "=", "np", ".", "maximum", "(", "ixmax", "-", "ixmin", ",", "0.", ")", "\n", "\n", "ivol", "=", "h", "*", "w", "\n", "vol1", "=", "(", "ymax1", "-", "ymin1", ")", "*", "(", "xmax1", "-", "xmin1", ")", "\n", "vol2", "=", "(", "ymax2", "-", "ymin2", ")", "*", "(", "xmax2", "-", "xmin2", ")", "\n", "\n", "iou", "=", "ivol", "/", "(", "vol1", "+", "vol2", "-", "ivol", ")", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_test.run": [[62, 76], ["inference.inference_nms.Tester", "inference_nms.Tester.run", "inference_nms.Tester.run", "kitti.kitti_eval.eval"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.eval"], ["def", "run", "(", ")", ":", "\n", "    ", "tester", "=", "inference_nms", ".", "Tester", "(", "\n", "kitti_nets_param", ",", "\n", "(", "k_height", ",", "k_width", ")", ",", "\n", "preprocess", ".", "preprocess_for_eval", ",", "\n", "model", ",", "\n", "out_txt_dir", "\n", ")", "\n", "\n", "if", "args", ".", "list", "==", "1", ":", "\n", "        ", "tester", ".", "run", "(", "eval_image_root", ",", "nms_param", "=", "param", ",", "is_list", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "tester", ".", "run", "(", "eval_image_root", ",", "nms_param", "=", "param", ",", "is_list", "=", "False", ")", "\n", "kitti_eval", ".", "eval", "(", "eval_label_root", ",", "out_txt_dir", ",", "'Car'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.score_norm.score_norm": [[10, 33], ["numpy.arange", "numpy.expand_dims", "numpy.expand_dims", "numpy.concatenate", "numpy.random.shuffle", "c_score[].astype", "numpy.argsort", "s_scores.copy", "numpy.zeros_like", "range", "range", "numpy.array", "float"], "function", ["None"], ["def", "score_norm", "(", "scores", ")", ":", "\n", "    ", "scores", "=", "np", ".", "array", "(", "scores", ")", "*", "100000.", "\n", "inds", "=", "np", ".", "arange", "(", "scores", ".", "shape", "[", "0", "]", ")", "\n", "\n", "e_scores", "=", "np", ".", "expand_dims", "(", "scores", ",", "axis", "=", "1", ")", "\n", "e_inds", "=", "np", ".", "expand_dims", "(", "inds", ",", "axis", "=", "1", ")", "\n", "\n", "c_score", "=", "np", ".", "concatenate", "(", "(", "e_scores", ",", "e_inds", ")", ",", "axis", "=", "1", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "c_score", ")", "\n", "\n", "s_scores", "=", "c_score", "[", ":", ",", "0", "]", "\n", "s_inds", "=", "c_score", "[", ":", ",", "1", "]", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "arg_sort_ind", "=", "np", ".", "argsort", "(", "s_scores", ")", "\n", "\n", "new_scores", "=", "s_scores", ".", "copy", "(", ")", "\n", "ret_scores", "=", "np", ".", "zeros_like", "(", "scores", ")", "\n", "\n", "for", "i", "in", "range", "(", "scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "new_scores", "[", "arg_sort_ind", "[", "i", "]", "]", "=", "float", "(", "i", ")", "\n", "", "for", "i", "in", "range", "(", "scores", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ret_scores", "[", "s_inds", "[", "i", "]", "]", "=", "new_scores", "[", "i", "]", "\n", "", "return", "ret_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.score_norm.run_score_norm": [[34, 44], ["score_norm.score_norm", "score_dict[].append"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.score_norm.score_norm"], ["", "def", "run_score_norm", "(", "ind_dict", ",", "scores", ")", ":", "\n", "    ", "normed_scores", "=", "score_norm", "(", "scores", ")", "\n", "\n", "score_dict", "=", "{", "}", "\n", "\n", "for", "file_name", "in", "ind_dict", ":", "\n", "        ", "score_dict", "[", "file_name", "]", "=", "[", "]", "\n", "for", "ind", "in", "ind_dict", "[", "file_name", "]", ":", "\n", "            ", "score_dict", "[", "file_name", "]", ".", "append", "(", "normed_scores", "[", "ind", "]", ")", "\n", "", "", "return", "score_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.score_norm.make_record": [[46, 62], ["open", "len", "range", "open.close", "os.path.join", "open.close", "open.write"], "function", ["None"], ["", "def", "make_record", "(", "pred_dict", ",", "output_dir", ")", ":", "\n", "    ", "for", "fpred", "in", "pred_dict", ":", "\n", "        ", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "fpred", ")", ",", "'w'", ")", "\n", "n", "=", "len", "(", "pred_dict", "[", "fpred", "]", ")", "\n", "if", "n", "==", "0", ":", "\n", "            ", "f", ".", "close", "(", ")", "\n", "continue", "\n", "", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "            ", "f", ".", "write", "(", "'%d %d %d %d %d %.2f\\n'", "%", "(", "\n", "1", ",", "\n", "pred_dict", "[", "fpred", "]", "[", "j", "]", "[", "'box'", "]", "[", "1", "]", ",", "\n", "pred_dict", "[", "fpred", "]", "[", "j", "]", "[", "'box'", "]", "[", "0", "]", ",", "\n", "pred_dict", "[", "fpred", "]", "[", "j", "]", "[", "'box'", "]", "[", "3", "]", ",", "\n", "pred_dict", "[", "fpred", "]", "[", "j", "]", "[", "'box'", "]", "[", "2", "]", ",", "\n", "pred_dict", "[", "fpred", "]", "[", "j", "]", "[", "'score'", "]", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.score_norm.run": [[64, 88], ["os.listdir", "print", "score_norm.run_score_norm", "print", "score_norm.make_record", "print", "kitti_eval_fuck.load_pred_raw", "range", "os.path.join", "scores.append", "ind_dict[].append", "len"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.score_norm.run_score_norm", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.score_norm.make_record", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.load_pred_raw"], ["", "", "def", "run", "(", "pred_dir", ",", "output_dir", ")", ":", "\n", "    ", "flist", "=", "os", ".", "listdir", "(", "pred_dir", ")", "\n", "ind_dict", "=", "{", "}", "\n", "pred_dict", "=", "{", "}", "\n", "scores", "=", "[", "]", "\n", "k", "=", "0", "\n", "for", "fpred", "in", "flist", ":", "\n", "        ", "ind_dict", "[", "fpred", "]", "=", "[", "]", "\n", "preds", "=", "kitti_eval_fuck", ".", "load_pred_raw", "(", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "fpred", ")", ")", "\n", "for", "pred", "in", "preds", ":", "\n", "            ", "scores", ".", "append", "(", "pred", "[", "'score'", "]", ")", "\n", "ind_dict", "[", "fpred", "]", ".", "append", "(", "k", ")", "\n", "k", "+=", "1", "\n", "", "pred_dict", "[", "fpred", "]", "=", "preds", "\n", "\n", "", "print", "(", "'Reading detections completed!'", ")", "\n", "\n", "new_score_dict", "=", "run_score_norm", "(", "ind_dict", ",", "scores", ")", "\n", "for", "fpred", "in", "flist", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "pred_dict", "[", "fpred", "]", ")", ")", ":", "\n", "            ", "pred_dict", "[", "fpred", "]", "[", "i", "]", "[", "'score'", "]", "=", "new_score_dict", "[", "fpred", "]", "[", "i", "]", "\n", "", "", "print", "(", "'Converting scores completed!'", ")", "\n", "make_record", "(", "pred_dict", ",", "output_dir", ")", "\n", "print", "(", "'Writing results completed!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_convert.Convertor.__init__": [[14, 19], ["os.path.isdir", "os.mkdir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "in_dir", ",", "out_dir", ")", ":", "\n", "        ", "self", ".", "in_dir", "=", "in_dir", "\n", "self", ".", "out_dir", "=", "out_dir", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "out_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_convert.Convertor.read_in": [[20, 41], ["open", "open.readlines", "open.close", "line.strip().split.strip().split.strip().split", "int", "line.strip().split.strip().split.strip", "len", "len", "float", "float", "float", "float", "float", "rois.append", "classes.append", "scores.append"], "methods", ["None"], ["", "", "def", "read_in", "(", "self", ",", "in_txt", ")", ":", "\n", "        ", "f", "=", "open", "(", "in_txt", ",", "'r'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "rois", "=", "[", "]", "\n", "classes", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "line", ")", "==", "6", "or", "len", "(", "line", ")", "==", "7", ":", "\n", "                ", "c", "=", "int", "(", "line", "[", "0", "]", ")", "\n", "if", "c", "==", "1", ":", "\n", "                    ", "ymin", "=", "float", "(", "line", "[", "1", "]", ")", "\n", "xmin", "=", "float", "(", "line", "[", "2", "]", ")", "\n", "ymax", "=", "float", "(", "line", "[", "3", "]", ")", "\n", "xmax", "=", "float", "(", "line", "[", "4", "]", ")", "\n", "score", "=", "float", "(", "line", "[", "5", "]", ")", "\n", "rois", ".", "append", "(", "[", "ymin", ",", "xmin", ",", "ymax", ",", "xmax", "]", ")", "\n", "classes", ".", "append", "(", "c", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "", "", "", "return", "rois", ",", "classes", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_convert.Convertor.write_out": [[43, 53], ["open", "range", "open.close", "len", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write"], "methods", ["None"], ["", "def", "write_out", "(", "self", ",", "out_txt", ",", "rois", ",", "classes", ",", "scores", ")", ":", "\n", "        ", "f", "=", "open", "(", "out_txt", ",", "'w'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", ":", "\n", "            ", "f", ".", "write", "(", "'%s '", "%", "KITTI_VEHICLES", "[", "classes", "[", "i", "]", "]", ")", "\n", "f", ".", "write", "(", "'-1 -1 -10 '", ")", "\n", "f", ".", "write", "(", "'%d %d %d %d '", "%", "(", "rois", "[", "i", "]", "[", "1", "]", ",", "rois", "[", "i", "]", "[", "0", "]", ",", "rois", "[", "i", "]", "[", "3", "]", ",", "rois", "[", "i", "]", "[", "2", "]", ")", ")", "\n", "f", ".", "write", "(", "'-1 -1 -1 -1000 -1000 -1000 -10 '", ")", "\n", "f", ".", "write", "(", "'%.5f'", "%", "scores", "[", "i", "]", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_convert.Convertor.run": [[56, 62], ["os.listdir", "kitti_convert.Convertor.read_in", "kitti_convert.Convertor.write_out", "in_txt.split", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_convert.Convertor.read_in", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_convert.Convertor.write_out"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "in_list", "=", "os", ".", "listdir", "(", "self", ".", "in_dir", ")", "\n", "for", "in_txt", "in", "in_list", ":", "\n", "            ", "if", "in_txt", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'txt'", ":", "\n", "                ", "rois", ",", "classes", ",", "scores", "=", "self", ".", "read_in", "(", "os", ".", "path", ".", "join", "(", "self", ".", "in_dir", ",", "in_txt", ")", ")", "\n", "self", ".", "write_out", "(", "os", ".", "path", ".", "join", "(", "self", ".", "out_dir", ",", "in_txt", ")", ",", "rois", ",", "classes", ",", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_train.train_kitti": [[73, 86], ["train.train.Trainer", "train.Trainer.train"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.train"], ["def", "train_kitti", "(", "continue_train", ",", "is_log", ")", ":", "\n", "    ", "trainer", "=", "train", ".", "Trainer", "(", "\n", "kitti_train_param", ",", "\n", "kitti_nets_param", ",", "\n", "preprocess", ".", "preproces_for_train", ",", "\n", "train_image_root", ",", "\n", "train_label_root", ",", "\n", "gpus", ",", "\n", "data", "=", "'kitti'", "\n", ")", "\n", "\n", "log_filename", "=", "'sg_nms_kitti'", "\n", "trainer", ".", "train", "(", "continue_train", ",", "log_filename", ",", "is_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.load_gt": [[25, 44], ["open", "open.readlines", "open.close", "kitti_eval.compute_intra_occ", "line.strip().split.strip().split", "float", "float", "record_list.append", "len", "float", "line.strip().split.strip"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.compute_intra_occ"], ["", "def", "load_gt", "(", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "record_list", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "line", "[", "0", "]", "not", "in", "VALID_CLASSES", ":", "\n", "            ", "continue", "\n", "", "record", "=", "{", "}", "\n", "record", "[", "'class'", "]", "=", "line", "[", "0", "]", "\n", "record", "[", "'trunc'", "]", "=", "float", "(", "line", "[", "1", "]", ")", "\n", "record", "[", "'occ'", "]", "=", "float", "(", "line", "[", "2", "]", ")", "\n", "record", "[", "'box'", "]", "=", "[", "float", "(", "c", ")", "for", "c", "in", "line", "[", "4", ":", "8", "]", "]", "\n", "record_list", ".", "append", "(", "record", ")", "\n", "", "compute_intra_occ", "(", "record_list", ")", "\n", "return", "record_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.compute_intra_occ": [[46, 59], ["range", "range", "len", "range", "max_ious.append", "len", "len", "kitti_eval.get_iou"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.get_iou"], ["", "def", "compute_intra_occ", "(", "gt_record_list", ")", ":", "\n", "    ", "max_ious", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_record_list", ")", ")", ":", "\n", "        ", "max_iou", "=", "0", "\n", "for", "j", "in", "range", "(", "len", "(", "gt_record_list", ")", ")", ":", "\n", "            ", "if", "i", "==", "j", ":", "\n", "                ", "continue", "\n", "", "iou", "=", "get_iou", "(", "gt_record_list", "[", "i", "]", ",", "gt_record_list", "[", "j", "]", ")", "\n", "if", "iou", ">", "max_iou", ":", "\n", "                ", "max_iou", "=", "iou", "\n", "", "", "max_ious", ".", "append", "(", "max_iou", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "gt_record_list", ")", ")", ":", "\n", "        ", "gt_record_list", "[", "i", "]", "[", "'intra_occ'", "]", "=", "max_ious", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.load_pred": [[61, 79], ["open", "open.readlines", "open.close", "line.strip().split.strip().split", "float", "record_list.append", "len", "float", "line.strip().split.strip"], "function", ["None"], ["", "", "def", "load_pred", "(", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "record_list", "=", "[", "]", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "line", "[", "0", "]", "not", "in", "VALID_CLASSES", ":", "\n", "            ", "continue", "\n", "", "record", "=", "{", "}", "\n", "record", "[", "'class'", "]", "=", "line", "[", "0", "]", "\n", "record", "[", "'box'", "]", "=", "[", "float", "(", "c", ")", "for", "c", "in", "line", "[", "4", ":", "8", "]", "]", "\n", "record", "[", "'score'", "]", "=", "float", "(", "line", "[", "-", "1", "]", ")", "\n", "record_list", ".", "append", "(", "record", ")", "\n", "", "return", "record_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.load_pred_raw": [[81, 97], ["open", "open.readlines", "open.close", "line.strip().split.strip().split", "float", "record_list.append", "len", "float", "float", "float", "float", "line.strip().split.strip"], "function", ["None"], ["", "def", "load_pred_raw", "(", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ",", "'r'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "record_list", "=", "[", "]", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "record", "=", "{", "}", "\n", "record", "[", "'class'", "]", "=", "'Car'", "\n", "record", "[", "'box'", "]", "=", "[", "float", "(", "line", "[", "2", "]", ")", ",", "float", "(", "line", "[", "1", "]", ")", ",", "float", "(", "line", "[", "4", "]", ")", ",", "float", "(", "line", "[", "3", "]", ")", "]", "\n", "record", "[", "'score'", "]", "=", "float", "(", "line", "[", "5", "]", ")", "\n", "record_list", ".", "append", "(", "record", ")", "\n", "", "return", "record_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.get_thresholds": [[99, 120], ["numpy.array", "numpy.argsort", "range", "t.append"], "function", ["None"], ["", "def", "get_thresholds", "(", "v", ",", "n_groundTruth", ")", ":", "\n", "    ", "v", "=", "np", ".", "array", "(", "v", ")", "\n", "sort_ind_desc", "=", "np", ".", "argsort", "(", "v", "*", "-", "1", ")", "\n", "vs", "=", "v", "[", "sort_ind_desc", "]", "\n", "\n", "t", "=", "[", "]", "\n", "current_recall", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "vs", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "l_recall", "=", "(", "i", "+", "1", ")", "/", "n_groundTruth", "\n", "\n", "if", "i", "<", "vs", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "            ", "r_recall", "=", "(", "i", "+", "2", ")", "/", "n_groundTruth", "\n", "", "else", ":", "\n", "            ", "r_recall", "=", "l_recall", "\n", "\n", "", "if", "(", "r_recall", "-", "current_recall", ")", "<", "(", "current_recall", "-", "l_recall", ")", "and", "i", "<", "(", "vs", ".", "shape", "[", "0", "]", "-", "1", ")", ":", "\n", "            ", "continue", "\n", "", "t", ".", "append", "(", "vs", "[", "i", "]", ")", "\n", "current_recall", "+=", "1.0", "/", "(", "N_SAMPLE_PTS", "-", "1.0", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.get_iou": [[122, 143], ["numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "get_iou", "(", "gt", ",", "pred", ",", "union", "=", "True", ")", ":", "\n", "    ", "gxmin", ",", "gymin", ",", "gxmax", ",", "gymax", "=", "gt", "[", "'box'", "]", "\n", "pxmin", ",", "pymin", ",", "pxmax", ",", "pymax", "=", "pred", "[", "'box'", "]", "\n", "\n", "ixmin", "=", "np", ".", "maximum", "(", "gxmin", ",", "pxmin", ")", "\n", "iymin", "=", "np", ".", "maximum", "(", "gymin", ",", "pymin", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "gxmax", ",", "pxmax", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "gymax", ",", "pymax", ")", "\n", "\n", "ih", "=", "np", ".", "maximum", "(", "0.", ",", "iymax", "-", "iymin", ")", "\n", "iw", "=", "np", ".", "maximum", "(", "0.", ",", "ixmax", "-", "ixmin", ")", "\n", "\n", "gvol", "=", "(", "gxmax", "-", "gxmin", ")", "*", "(", "gymax", "-", "gymin", ")", "\n", "pvol", "=", "(", "pxmax", "-", "pxmin", ")", "*", "(", "pymax", "-", "pymin", ")", "\n", "ivol", "=", "iw", "*", "ih", "\n", "\n", "if", "union", ":", "\n", "        ", "iou", "=", "ivol", "/", "(", "gvol", "+", "pvol", "-", "ivol", ")", "\n", "", "else", ":", "\n", "        ", "iou", "=", "ivol", "/", "pvol", "\n", "", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.clean_data": [[145, 212], ["ignore_gt.append", "dontcare.append", "dontcare.append", "ignore_pred.append", "ignore_gt.append", "ignore_gt.append", "ignore_pred.append", "ignore_pred.append"], "function", ["None"], ["", "def", "clean_data", "(", "gts", ",", "preds", ",", "cls", ",", "diff", ")", ":", "\n", "    ", "ignore_gt", "=", "[", "]", "\n", "ignore_pred", "=", "[", "]", "\n", "dontcare", "=", "[", "]", "\n", "\n", "n_gt", "=", "0", "\n", "\n", "# clean ground truth", "\n", "for", "gt", "in", "gts", ":", "\n", "# set ignore", "\n", "        ", "if", "cls", "==", "gt", "[", "'class'", "]", ":", "\n", "            ", "valid_class", "=", "1", "\n", "", "else", ":", "\n", "            ", "if", "gt", "[", "'class'", "]", "==", "'Van'", "and", "cls", "==", "'Car'", ":", "\n", "                ", "if", "MODE", "==", "0", ":", "\n", "                    ", "valid_class", "=", "0", "\n", "", "else", ":", "\n", "                    ", "valid_class", "=", "1", "\n", "", "", "elif", "gt", "[", "'class'", "]", "==", "'Person_sitting'", "and", "cls", "==", "'Pedestrian'", ":", "\n", "                ", "valid_class", "=", "0", "\n", "", "else", ":", "\n", "                ", "valid_class", "=", "-", "1", "\n", "\n", "", "", "height", "=", "gt", "[", "'box'", "]", "[", "3", "]", "-", "gt", "[", "'box'", "]", "[", "1", "]", "\n", "\n", "if", "MODE", "==", "0", ":", "\n", "            ", "logic", "=", "gt", "[", "'occ'", "]", ">", "MAX_OCCLUSION", "[", "diff", "]", "or", "gt", "[", "'trunc'", "]", ">", "MAX_TRUNCATION", "[", "diff", "]", "or", "height", "<", "MIN_HEIGHT", "[", "diff", "]", "\n", "", "elif", "MODE", "==", "1", "or", "MODE", "==", "3", "or", "MODE", "==", "4", ":", "\n", "            ", "logic", "=", "not", "(", "gt", "[", "'intra_occ'", "]", ">=", "MAX_INTRA_OCCLUSION", "[", "diff", "]", "[", "0", "]", "and", "gt", "[", "'intra_occ'", "]", "<", "MAX_INTRA_OCCLUSION", "[", "diff", "]", "[", "1", "]", ")", "or", "height", "<", "MIN_HEIGHT", "[", "diff", "]", "\n", "", "else", ":", "\n", "            ", "logic", "=", "not", "(", "gt", "[", "'intra_occ'", "]", ">=", "MAX_INTRA_OCCLUSION", "[", "diff", "]", "and", "gt", "[", "'intra_occ'", "]", "<", "MAX_INTRA_OCCLUSION", "[", "diff", "]", "+", "0.2", ")", "or", "height", "<", "MIN_HEIGHT", "[", "diff", "]", "\n", "\n", "", "if", "logic", ":", "\n", "            ", "ignore", "=", "True", "\n", "", "else", ":", "\n", "            ", "ignore", "=", "False", "\n", "\n", "", "if", "valid_class", "==", "1", "and", "not", "ignore", ":", "\n", "            ", "n_gt", "+=", "1", "\n", "ignore_gt", ".", "append", "(", "0", ")", "\n", "", "elif", "valid_class", "==", "0", "or", "(", "ignore", "and", "valid_class", "==", "1", ")", ":", "\n", "            ", "ignore_gt", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "ignore_gt", ".", "append", "(", "-", "1", ")", "\n", "\n", "# set Don't care", "\n", "", "if", "gt", "[", "'class'", "]", "==", "'DontCare'", ":", "\n", "            ", "dontcare", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "            ", "dontcare", ".", "append", "(", "False", ")", "\n", "\n", "# clean predictions", "\n", "", "", "for", "pred", "in", "preds", ":", "\n", "        ", "if", "pred", "[", "'class'", "]", "==", "cls", ":", "\n", "            ", "valid_class", "=", "1", "\n", "", "else", ":", "\n", "            ", "valid_class", "=", "0", "\n", "", "height", "=", "pred", "[", "'box'", "]", "[", "3", "]", "-", "pred", "[", "'box'", "]", "[", "1", "]", "\n", "\n", "if", "height", "<", "MIN_HEIGHT", "[", "diff", "]", ":", "\n", "            ", "ignore_pred", ".", "append", "(", "1", ")", "\n", "", "elif", "valid_class", "==", "1", ":", "\n", "            ", "ignore_pred", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "ignore_pred", ".", "append", "(", "-", "1", ")", "\n", "\n", "", "", "return", "ignore_gt", ",", "dontcare", ",", "ignore_pred", ",", "n_gt", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.compute_statistics": [[214, 298], ["len", "len", "range", "range", "range", "range", "range", "ignore_threshold.append", "kitti_eval.get_iou", "range", "ignore_threshold.append", "ignore_threshold.append", "kitti_eval.get_iou", "vs.append"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.get_iou", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.get_iou"], ["", "def", "compute_statistics", "(", "gts", ",", "preds", ",", "dontcare", ",", "ignore_gt", ",", "ignore_pred", ",", "compute_fp", ",", "threshold", ",", "cls", ")", ":", "\n", "    ", "n_gt", "=", "len", "(", "gts", ")", "\n", "n_pred", "=", "len", "(", "preds", ")", "\n", "\n", "assigned_detection", "=", "[", "False", "for", "_", "in", "range", "(", "n_pred", ")", "]", "\n", "TP", ",", "FP", ",", "FN", "=", "0", ",", "0", ",", "0", "\n", "vs", "=", "[", "]", "\n", "\n", "ignore_threshold", "=", "[", "]", "\n", "if", "compute_fp", ":", "\n", "        ", "for", "pred", "in", "preds", ":", "\n", "            ", "if", "pred", "[", "'score'", "]", "<", "threshold", ":", "\n", "                ", "ignore_threshold", ".", "append", "(", "True", ")", "\n", "", "else", ":", "\n", "                ", "ignore_threshold", ".", "append", "(", "False", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "pred", "in", "preds", ":", "\n", "            ", "ignore_threshold", ".", "append", "(", "False", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "n_gt", ")", ":", "\n", "        ", "if", "ignore_gt", "[", "i", "]", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "\n", "", "det_idx", "=", "-", "1", "\n", "valid_detection", "=", "-", "1", "\n", "max_iou", "=", "0.", "\n", "assigned_ignored_det", "=", "False", "\n", "\n", "for", "j", "in", "range", "(", "n_pred", ")", ":", "\n", "            ", "if", "ignore_pred", "[", "j", "]", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "if", "assigned_detection", "[", "j", "]", ":", "\n", "                ", "continue", "\n", "", "if", "ignore_threshold", "[", "j", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "iou", "=", "get_iou", "(", "gts", "[", "i", "]", ",", "preds", "[", "j", "]", ")", "\n", "\n", "if", "not", "compute_fp", "and", "iou", ">", "MIN_OVERLAP", "[", "cls", "]", "and", "preds", "[", "j", "]", "[", "'score'", "]", ">", "threshold", ":", "\n", "                ", "det_idx", "=", "j", "\n", "valid_detection", "=", "preds", "[", "j", "]", "[", "'score'", "]", "\n", "", "elif", "compute_fp", "and", "iou", ">", "MIN_OVERLAP", "[", "cls", "]", "and", "(", "iou", ">", "max_iou", "or", "assigned_ignored_det", ")", "and", "ignore_pred", "[", "\n", "j", "]", "==", "0", ":", "\n", "                ", "max_iou", "=", "iou", "\n", "det_idx", "=", "j", "\n", "valid_detection", "=", "1", "\n", "assigned_ignored_det", "=", "False", "\n", "", "elif", "compute_fp", "and", "iou", ">", "MIN_OVERLAP", "[", "cls", "]", "and", "valid_detection", "==", "-", "1.", "and", "ignore_pred", "[", "j", "]", "==", "1", ":", "\n", "                ", "det_idx", "=", "j", "\n", "valid_detection", "=", "1", "\n", "assigned_ignored_det", "=", "True", "\n", "\n", "", "", "if", "valid_detection", "==", "-", "1", "and", "ignore_gt", "[", "i", "]", "==", "0", ":", "\n", "            ", "FN", "+=", "1", "\n", "", "elif", "valid_detection", "!=", "-", "1", "and", "(", "ignore_gt", "[", "i", "]", "==", "1", "or", "ignore_pred", "[", "det_idx", "]", "==", "1", ")", ":", "\n", "            ", "assigned_detection", "[", "det_idx", "]", "=", "True", "\n", "", "elif", "valid_detection", "!=", "-", "1", ":", "\n", "            ", "TP", "+=", "1", "\n", "vs", ".", "append", "(", "preds", "[", "det_idx", "]", "[", "'score'", "]", ")", "\n", "assigned_detection", "[", "det_idx", "]", "=", "True", "\n", "\n", "", "", "if", "compute_fp", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_pred", ")", ":", "\n", "            ", "if", "not", "(", "assigned_detection", "[", "i", "]", "or", "ignore_pred", "[", "i", "]", "==", "-", "1", "or", "ignore_pred", "[", "i", "]", "==", "1", "or", "ignore_threshold", "[", "i", "]", ")", ":", "\n", "                ", "FP", "+=", "1", "\n", "\n", "", "", "n_stuff", "=", "0", "\n", "for", "i", "in", "range", "(", "n_gt", ")", ":", "\n", "            ", "if", "not", "dontcare", "[", "i", "]", ":", "\n", "                ", "continue", "\n", "", "for", "j", "in", "range", "(", "n_pred", ")", ":", "\n", "                ", "if", "assigned_detection", "[", "j", "]", ":", "\n", "                    ", "continue", "\n", "", "if", "ignore_pred", "[", "j", "]", "==", "-", "1", "or", "ignore_pred", "[", "j", "]", "==", "1", ":", "\n", "                    ", "continue", "\n", "", "if", "ignore_threshold", "[", "j", "]", ":", "\n", "                    ", "continue", "\n", "", "iou", "=", "get_iou", "(", "preds", "[", "j", "]", ",", "gts", "[", "i", "]", ",", "union", "=", "False", ")", "\n", "if", "iou", ">", "MIN_OVERLAP", "[", "cls", "]", ":", "\n", "                    ", "assigned_detection", "[", "j", "]", "=", "True", "\n", "n_stuff", "+=", "1", "\n", "\n", "", "", "", "FP", "-=", "n_stuff", "\n", "", "return", "TP", ",", "FP", ",", "FN", ",", "vs", ",", "assigned_detection", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.eval_class": [[300, 344], ["range", "kitti_eval.get_thresholds", "len", "range", "enumerate", "enumerate", "len", "kitti_eval.clean_data", "ignore_gt_list.append", "ignore_pred_list.append", "dontcare_list.append", "kitti_eval.compute_statistics", "len", "enumerate", "recalls.append", "numpy.max", "kitti_eval.compute_statistics"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.get_thresholds", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.clean_data", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.compute_statistics", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.compute_statistics"], ["", "def", "eval_class", "(", "gt_list", ",", "pred_list", ",", "cls", ",", "diff", ")", ":", "\n", "    ", "ignore_gt_list", "=", "[", "]", "\n", "ignore_pred_list", "=", "[", "]", "\n", "dontcare_list", "=", "[", "]", "\n", "total_gt_num", "=", "0", "\n", "\n", "# clean data", "\n", "vs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_list", ")", ")", ":", "\n", "        ", "ignore_gt", ",", "dontcare", ",", "ignore_pred", ",", "n_gt_", "=", "clean_data", "(", "gt_list", "[", "i", "]", ",", "pred_list", "[", "i", "]", ",", "cls", ",", "diff", ")", "\n", "ignore_gt_list", ".", "append", "(", "ignore_gt", ")", "\n", "ignore_pred_list", ".", "append", "(", "ignore_pred", ")", "\n", "dontcare_list", ".", "append", "(", "dontcare", ")", "\n", "total_gt_num", "+=", "n_gt_", "\n", "\n", "_", ",", "_", ",", "_", ",", "vs_", ",", "_", "=", "compute_statistics", "(", "gt_list", "[", "i", "]", ",", "pred_list", "[", "i", "]", ",", "dontcare", ",", "ignore_gt", ",", "ignore_pred", ",", "False", ",", "0", ",", "cls", ")", "\n", "vs", "=", "vs", "+", "vs_", "\n", "", "thresholds", "=", "get_thresholds", "(", "vs", ",", "total_gt_num", ")", "\n", "len_th", "=", "len", "(", "thresholds", ")", "\n", "TPs", "=", "[", "0.", "]", "*", "len_th", "\n", "FPs", "=", "[", "0.", "]", "*", "len_th", "\n", "FNs", "=", "[", "0.", "]", "*", "len_th", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "gt_list", ")", ")", ":", "\n", "        ", "for", "t", ",", "th", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "            ", "TP", ",", "FP", ",", "FN", ",", "_", ",", "_", "=", "compute_statistics", "(", "gt_list", "[", "i", "]", ",", "pred_list", "[", "i", "]", ",", "dontcare_list", "[", "i", "]", ",", "ignore_gt_list", "[", "i", "]", ",", "\n", "ignore_pred_list", "[", "i", "]", ",", "True", ",", "th", ",", "cls", ")", "\n", "TPs", "[", "t", "]", "+=", "TP", "\n", "FPs", "[", "t", "]", "+=", "FP", "\n", "FNs", "[", "t", "]", "+=", "FN", "\n", "\n", "#print(len_th, int(TPs[0]), int(FPs[0]), int(TPs[-1]), int(FPs[-1]))", "\n", "\n", "", "", "precisions", "=", "[", "0.", "]", "*", "N_SAMPLE_PTS", "\n", "recalls", "=", "[", "]", "\n", "\n", "for", "t", ",", "th", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "r", "=", "TPs", "[", "t", "]", "/", "(", "TPs", "[", "t", "]", "+", "FNs", "[", "t", "]", ")", "\n", "recalls", ".", "append", "(", "r", ")", "\n", "precisions", "[", "t", "]", "=", "TPs", "[", "t", "]", "/", "(", "TPs", "[", "t", "]", "+", "FPs", "[", "t", "]", ")", "\n", "\n", "", "for", "t", ",", "th", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "precisions", "[", "t", "]", "=", "np", ".", "max", "(", "precisions", "[", "t", ":", "]", ")", "\n", "", "return", "precisions", ",", "recalls", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.plot_and_compute": [[346, 360], ["range", "numpy.set_printoptions", "print", "aps.append", "range", "range"], "function", ["None"], ["", "def", "plot_and_compute", "(", "precisions", ",", "cls", ")", ":", "\n", "    ", "aps", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "DIFFS", ")", ":", "\n", "        ", "ap", "=", "0.", "\n", "if", "MODE", "==", "0", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "N_SAMPLE_PTS", ")", ":", "\n", "                ", "ap", "+=", "precisions", "[", "j", "]", "[", "i", "]", "/", "(", "N_SAMPLE_PTS", "-", "1.", ")", "*", "100.", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "N_SAMPLE_PTS", "-", "1", ")", ":", "\n", "                ", "ap", "+=", "(", "precisions", "[", "j", "]", "[", "i", "]", "+", "precisions", "[", "j", "]", "[", "i", "+", "1", "]", ")", "/", "2.", "/", "(", "N_SAMPLE_PTS", "-", "1.", ")", "*", "100.", "\n", "", "", "aps", ".", "append", "(", "ap", ")", "\n", "", "np", ".", "set_printoptions", "(", "suppress", "=", "True", ",", "precision", "=", "3", ")", "\n", "print", "(", "aps", ")", "\n", "return", "aps", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.eval": [[362, 382], ["os.listdir", "print", "range", "kitti_eval.plot_and_compute", "kitti_eval.load_pred_raw", "kitti_eval.load_gt", "pred_list.append", "gt_list.append", "kitti_eval.eval_class", "precision_all_diff.append", "recall_all_diff.append", "print", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.plot_and_compute", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.load_pred_raw", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.load_gt", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.eval_class"], ["", "def", "eval", "(", "gt_dir", ",", "pred_dir", ",", "cls", "=", "'Car'", ")", ":", "\n", "    ", "gt_list", "=", "[", "]", "\n", "pred_list", "=", "[", "]", "\n", "\n", "for", "f", "in", "os", ".", "listdir", "(", "pred_dir", ")", ":", "\n", "        ", "record_pred", "=", "load_pred_raw", "(", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "f", ")", ")", "\n", "record_gt", "=", "load_gt", "(", "os", ".", "path", ".", "join", "(", "gt_dir", ",", "f", ")", ")", "\n", "pred_list", ".", "append", "(", "record_pred", ")", "\n", "gt_list", ".", "append", "(", "record_gt", ")", "\n", "", "print", "(", "\"Loading Predictions Done!\"", ")", "\n", "\n", "recall_all_diff", "=", "[", "]", "\n", "precision_all_diff", "=", "[", "]", "\n", "for", "diff", "in", "range", "(", "DIFFS", ")", ":", "\n", "        ", "precisions", ",", "recalls", "=", "eval_class", "(", "gt_list", ",", "pred_list", ",", "cls", ",", "diff", ")", "\n", "precision_all_diff", ".", "append", "(", "precisions", ")", "\n", "recall_all_diff", ".", "append", "(", "recalls", ")", "\n", "print", "(", "\"Eval on diff %d done!\"", "%", "diff", ")", "\n", "\n", "", "plot_and_compute", "(", "precision_all_diff", ",", "cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.eval_recall": [[383, 398], ["os.listdir", "range", "print", "kitti_eval.load_pred_raw", "kitti_eval.load_gt", "pred_list.append", "gt_list.append", "kitti_eval.eval_class", "max_recalls.append", "os.path.join", "os.path.join", "max"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.load_pred_raw", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.load_gt", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_eval.eval_class"], ["", "def", "eval_recall", "(", "gt_dir", ",", "pred_dir", ",", "cls", "=", "'Car'", ")", ":", "\n", "    ", "gt_list", "=", "[", "]", "\n", "pred_list", "=", "[", "]", "\n", "\n", "for", "f", "in", "os", ".", "listdir", "(", "pred_dir", ")", ":", "\n", "        ", "record_pred", "=", "load_pred_raw", "(", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "f", ")", ")", "\n", "record_gt", "=", "load_gt", "(", "os", ".", "path", ".", "join", "(", "gt_dir", ",", "f", ")", ")", "\n", "pred_list", ".", "append", "(", "record_pred", ")", "\n", "gt_list", ".", "append", "(", "record_gt", ")", "\n", "\n", "", "max_recalls", "=", "[", "]", "\n", "for", "diff", "in", "range", "(", "DIFFS", ")", ":", "\n", "        ", "precisions", ",", "recalls", "=", "eval_class", "(", "gt_list", ",", "pred_list", ",", "cls", ",", "diff", ")", "\n", "max_recalls", ".", "append", "(", "max", "(", "recalls", ")", ")", "\n", "", "print", "(", "max_recalls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_dataset.class_encode": [[17, 24], ["None"], "function", ["None"], ["def", "class_encode", "(", "c", ")", ":", "\n", "    ", "if", "c", "==", "'Car'", "or", "c", "==", "'Van'", ":", "\n", "        ", "return", "1", "\n", "", "elif", "c", "==", "'Pedestrian'", ":", "\n", "        ", "return", "2", "\n", "", "elif", "c", "==", "'Cyclist'", ":", "\n", "        ", "return", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_dataset.class_encode_car": [[26, 31], ["None"], "function", ["None"], ["", "", "def", "class_encode_car", "(", "c", ")", ":", "\n", "    ", "if", "c", "in", "KITTI_CARS", ":", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_dataset.read_kitti_label": [[33, 61], ["open", "open.readlines", "open.close", "kitti_dataset.sort_by_z", "line.split.split", "bboxes.append", "zs.append", "len", "classes.append", "classes.append", "float", "kitti_dataset.class_encode_car", "kitti_dataset.class_encode_car", "float", "float", "float", "float", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_dataset.sort_by_z", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_dataset.class_encode_car", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_dataset.class_encode_car"], ["", "", "def", "read_kitti_label", "(", "label_file", ",", "encode", "=", "False", ",", "norm", "=", "False", ",", "only_car", "=", "True", ")", ":", "\n", "    ", "f", "=", "open", "(", "label_file", ",", "'r'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "classes", "=", "[", "]", "\n", "bboxes", "=", "[", "]", "\n", "zs", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "cclass", "=", "line", "[", "0", "]", "\n", "if", "cclass", "not", "in", "KITTI_VEHICLES2", ":", "\n", "            ", "continue", "\n", "", "if", "only_car", "and", "class_encode_car", "(", "cclass", ")", "!=", "1", ":", "\n", "            ", "continue", "\n", "", "if", "encode", ":", "\n", "            ", "classes", ".", "append", "(", "class_encode_car", "(", "cclass", ")", ")", "\n", "", "else", ":", "\n", "            ", "classes", ".", "append", "(", "cclass", ")", "\n", "", "if", "norm", ":", "\n", "            ", "bbox", "=", "[", "float", "(", "line", "[", "5", "]", ")", "/", "k_height", ",", "float", "(", "line", "[", "4", "]", ")", "/", "k_width", ",", "float", "(", "line", "[", "7", "]", ")", "/", "k_height", ",", "float", "(", "line", "[", "6", "]", ")", "/", "k_width", "]", "\n", "", "else", ":", "\n", "            ", "bbox", "=", "[", "float", "(", "line", "[", "5", "]", ")", ",", "float", "(", "line", "[", "4", "]", ")", ",", "float", "(", "line", "[", "7", "]", ")", ",", "float", "(", "line", "[", "6", "]", ")", "]", "\n", "", "bboxes", ".", "append", "(", "bbox", ")", "\n", "zs", ".", "append", "(", "float", "(", "line", "[", "13", "]", ")", ")", "\n", "", "classes", ",", "bboxes", ",", "zs", "=", "sort_by_z", "(", "zs", ",", "classes", ",", "bboxes", ")", "\n", "return", "classes", ",", "bboxes", ",", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_dataset.read_kitti_label_2": [[65, 90], ["open", "open.readlines", "open.close", "line.split.split", "bboxes.append", "len", "classes.append", "classes.append", "kitti_dataset.class_encode_car", "kitti_dataset.class_encode_car", "float", "float", "float", "float", "float", "float", "float", "float"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_dataset.class_encode_car", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_dataset.class_encode_car"], ["", "def", "read_kitti_label_2", "(", "label_file", ",", "h", ",", "w", ",", "encode", "=", "False", ",", "norm", "=", "False", ",", "only_car", "=", "True", ")", ":", "\n", "    ", "f", "=", "open", "(", "label_file", ",", "'r'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "classes", "=", "[", "]", "\n", "bboxes", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "line", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "cclass", "=", "line", "[", "0", "]", "\n", "if", "cclass", "not", "in", "KITTI_VEHICLES2", ":", "\n", "            ", "continue", "\n", "", "if", "only_car", "and", "class_encode_car", "(", "cclass", ")", "!=", "1", ":", "\n", "            ", "continue", "\n", "", "if", "encode", ":", "\n", "            ", "classes", ".", "append", "(", "class_encode_car", "(", "cclass", ")", ")", "\n", "", "else", ":", "\n", "            ", "classes", ".", "append", "(", "cclass", ")", "\n", "", "if", "norm", ":", "\n", "            ", "bbox", "=", "[", "float", "(", "line", "[", "5", "]", ")", "/", "h", ",", "float", "(", "line", "[", "4", "]", ")", "/", "w", ",", "float", "(", "line", "[", "7", "]", ")", "/", "h", ",", "float", "(", "line", "[", "6", "]", ")", "/", "w", "]", "\n", "", "else", ":", "\n", "            ", "bbox", "=", "[", "float", "(", "line", "[", "5", "]", ")", ",", "float", "(", "line", "[", "4", "]", ")", ",", "float", "(", "line", "[", "7", "]", ")", ",", "float", "(", "line", "[", "6", "]", ")", "]", "\n", "", "bboxes", ".", "append", "(", "bbox", ")", "\n", "", "return", "classes", ",", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_dataset.sort_by_z": [[91, 110], ["len", "list", "range", "range", "range", "range", "new_bboxes.append", "new_classes.append"], "function", ["None"], ["", "def", "sort_by_z", "(", "zs", ",", "classes", ",", "bboxes", ")", ":", "\n", "    ", "n", "=", "len", "(", "zs", ")", "\n", "inds", "=", "list", "(", "range", "(", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "n", "-", "1", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ")", ":", "\n", "            ", "if", "zs", "[", "j", "]", "<", "zs", "[", "j", "+", "1", "]", ":", "\n", "                ", "temp", "=", "zs", "[", "j", "]", "\n", "zs", "[", "j", "]", "=", "zs", "[", "j", "+", "1", "]", "\n", "zs", "[", "j", "+", "1", "]", "=", "temp", "\n", "\n", "temp", "=", "inds", "[", "j", "]", "\n", "inds", "[", "j", "]", "=", "inds", "[", "j", "+", "1", "]", "\n", "inds", "[", "j", "+", "1", "]", "=", "temp", "\n", "", "", "", "new_classes", "=", "[", "]", "\n", "new_bboxes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "new_bboxes", ".", "append", "(", "bboxes", "[", "inds", "[", "i", "]", "]", ")", "\n", "new_classes", ".", "append", "(", "classes", "[", "inds", "[", "i", "]", "]", ")", "\n", "", "return", "new_classes", ",", "new_bboxes", ",", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_dataset.dataset_gener_with_batch": [[112, 130], ["tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "data_img.map.map", "tensorflow.data.Dataset.zip().shuffle().repeat().batch", "tensorflow.read_file", "tensorflow.image.decode_png", "preprocessing.tf_image.resize_image", "tensorflow.cast", "tensorflow.div", "tensorflow.data.Dataset.zip().shuffle().repeat", "tensorflow.data.Dataset.zip().shuffle", "tensorflow.data.Dataset.zip"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.resize_image"], ["", "def", "dataset_gener_with_batch", "(", "image_list", ",", "bbox_list", ",", "label_list", ",", "batch_size", ")", ":", "\n", "    ", "def", "_parse_func", "(", "filename", ")", ":", "\n", "        ", "img_string", "=", "tf", ".", "read_file", "(", "filename", ")", "\n", "img", "=", "tf", ".", "image", ".", "decode_png", "(", "img_string", ")", "\n", "img", "=", "tf_image", ".", "resize_image", "(", "img", ",", "(", "k_height", ",", "k_width", ")", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ",", "\n", "align_corners", "=", "False", ")", "\n", "img", "=", "tf", ".", "cast", "(", "img", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "img", "=", "tf", ".", "div", "(", "img", ",", "255.", ")", "\n", "return", "img", "\n", "\n", "", "data_img", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "image_list", ")", "\n", "data_bbox", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "bbox_list", ")", "\n", "data_label", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "label_list", ")", "\n", "\n", "data_img", "=", "data_img", ".", "map", "(", "_parse_func", ")", "\n", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "zip", "(", "(", "data_img", ",", "data_label", ",", "data_bbox", ")", ")", ".", "shuffle", "(", "100", ")", ".", "repeat", "(", ")", ".", "batch", "(", "batch_size", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_dataset.create_dataset_with_batch": [[131, 167], ["os.listdir", "random.shuffle", "open", "open.readlines", "open.close", "kitti_dataset.dataset_gener_with_batch", "line.strip().split", "os.path.join", "kitti_dataset.read_kitti_label_2", "len", "bbox_list.append", "label_list.append", "os.path.join", "float", "float", "filename.replace", "range", "len", "line.strip", "bboxes.append", "filename.split"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_dataset.dataset_gener_with_batch", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.kitti_dataset.read_kitti_label_2"], ["", "def", "create_dataset_with_batch", "(", "image_dir", ",", "ann_dir", ",", "batch_size", ")", ":", "\n", "    ", "image_list", "=", "os", ".", "listdir", "(", "image_dir", ")", "\n", "shuffle", "(", "image_list", ")", "\n", "\n", "label_list", "=", "[", "]", "\n", "bbox_list", "=", "[", "]", "\n", "\n", "f", "=", "open", "(", "'/scratch/ChenhongyiYang/kitti_shape.txt'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "shape_dict", "=", "{", "}", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "info", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "fname", ",", "h", ",", "w", "=", "info", "[", "0", "]", ",", "float", "(", "info", "[", "1", "]", ")", ",", "float", "(", "info", "[", "2", "]", ")", "\n", "shape_dict", "[", "fname", "]", "=", "(", "h", ",", "w", ")", "\n", "\n", "\n", "", "for", "filename", "in", "image_list", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ann_dir", ",", "filename", ".", "replace", "(", "'png'", ",", "'txt'", ")", ")", "\n", "h", ",", "w", "=", "shape_dict", "[", "filename", ".", "split", "(", "'.'", ")", "[", "0", "]", "]", "\n", "classes", ",", "bboxes", "=", "read_kitti_label_2", "(", "file_path", ",", "h", ",", "w", ",", "True", ",", "True", ",", "True", ")", "\n", "\n", "length", "=", "len", "(", "bboxes", ")", "\n", "labels", "=", "classes", "\n", "\n", "if", "length", "<", "max_bbox_num", ":", "\n", "            ", "labels", "=", "labels", "+", "[", "999", "]", "*", "(", "max_bbox_num", "-", "length", ")", "\n", "for", "_", "in", "range", "(", "max_bbox_num", "-", "length", ")", ":", "\n", "                ", "bboxes", ".", "append", "(", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "", "", "bbox_list", ".", "append", "(", "bboxes", ")", "\n", "label_list", ".", "append", "(", "labels", ")", "\n", "\n", "", "image_list", "=", "[", "os", ".", "path", ".", "join", "(", "image_dir", ",", "name", ")", "for", "name", "in", "image_list", "]", "\n", "dataset", "=", "dataset_gener_with_batch", "(", "image_list", ",", "bbox_list", ",", "label_list", ",", "batch_size", ")", "\n", "return", "dataset", ",", "len", "(", "image_list", ")", "//", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.preprocess.preproces_for_train": [[5, 8], ["preprocess.preprocess_local"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.preprocess.preprocess_local"], ["def", "preproces_for_train", "(", "image", ",", "labels", ",", "bboxes", ",", "input_shape", ",", "crop_shape", ",", "out_shape", ")", ":", "\n", "    ", "image", ",", "labels", ",", "bboxes", "=", "preprocess_local", "(", "image", ",", "labels", ",", "bboxes", ",", "input_shape", ",", "crop_shape", ",", "out_shape", ")", "\n", "return", "image", ",", "labels", ",", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.preprocess.preprocess_for_eval": [[10, 17], ["tensorflow.image.convert_image_dtype", "preprocessing.tf_image.resize_image", "preprocess.resnet_norm"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.resize_image", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_preprocess.resnet_norm"], ["", "def", "preprocess_for_eval", "(", "image", ",", "out_shape", ")", ":", "\n", "    ", "img", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "image", ",", "tf", ".", "float32", ")", "\n", "img", "=", "tf_image", ".", "resize_image", "(", "img", ",", "out_shape", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ",", "\n", "align_corners", "=", "False", ")", "\n", "img", "=", "resnet_norm", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.preprocess.resnet_norm": [[19, 24], ["tensorflow.constant", "tensorflow.constant", "tensorflow.div"], "function", ["None"], ["", "def", "resnet_norm", "(", "img", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "    ", "mean_tensor", "=", "tf", ".", "constant", "(", "mean", ",", "tf", ".", "float32", ")", "\n", "std_tensor", "=", "tf", ".", "constant", "(", "std", ",", "tf", ".", "float32", ")", "\n", "ret_img", "=", "tf", ".", "div", "(", "img", "-", "mean_tensor", ",", "std_tensor", ")", "\n", "return", "ret_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.preprocess.resnet_denorm": [[26, 31], ["tensorflow.constant", "tensorflow.constant"], "function", ["None"], ["", "def", "resnet_denorm", "(", "img", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "    ", "mean_tensor", "=", "tf", ".", "constant", "(", "mean", ",", "tf", ".", "float32", ")", "\n", "std_tensor", "=", "tf", ".", "constant", "(", "std", ",", "tf", ".", "float32", ")", "\n", "ret_img", "=", "img", "*", "std_tensor", "+", "mean_tensor", "\n", "return", "ret_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.kitti.preprocess.preprocess_local": [[32, 58], ["tensorflow.name_scope", "preprocessing.preprocessing_rfcn.random_crop", "tensorflow.image.resize", "preprocessing.tf_image.random_flip_left_right", "preprocessing.preprocessing_rfcn.apply_with_random_selector", "preprocessing.preprocessing_rfcn.resnet_norm", "ValueError", "tensorflow.image.convert_image_dtype", "tensorflow.transpose", "tf.image.convert_image_dtype.get_shape", "preprocessing.preprocessing_rfcn.distort_color"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.random_crop", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.random_flip_left_right", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.apply_with_random_selector", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_preprocess.resnet_norm", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.distort_color"], ["", "def", "preprocess_local", "(", "image", ",", "labels", ",", "bboxes", ",", "input_shape", ",", "crop_shape", ",", "\n", "out_shape", ",", "data_format", "=", "'NHWC'", ",", "\n", "scope", "=", "'rfcn_preprocessing_train'", ")", ":", "\n", "    ", "fast_mode", "=", "False", "\n", "with", "tf", ".", "name_scope", "(", "scope", ",", "'rfcn_preprocessing_train'", ",", "[", "image", ",", "labels", ",", "bboxes", "]", ")", ":", "\n", "        ", "if", "image", ".", "get_shape", "(", ")", ".", "ndims", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'Input must be of size [height, width, C>0]'", ")", "\n", "# Convert to float scaled [0, 1].", "\n", "", "if", "image", ".", "dtype", "!=", "tf", ".", "float32", ":", "\n", "            ", "image", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "image", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "dst_image", ",", "dst_labels", ",", "dst_bboxes", "=", "pr", ".", "random_crop", "(", "image", ",", "labels", ",", "bboxes", ",", "img_shape", "=", "input_shape", ",", "crop_shape", "=", "crop_shape", ",", "keep_ratio", "=", "0.5", ",", "random_scale", "=", "None", ")", "\n", "\n", "dst_image", "=", "tf", ".", "image", ".", "resize", "(", "dst_image", ",", "out_shape", ")", "\n", "\n", "dst_image", ",", "dst_bboxes", "=", "tf_image", ".", "random_flip_left_right", "(", "dst_image", ",", "dst_bboxes", ")", "\n", "\n", "dst_image", "=", "pr", ".", "apply_with_random_selector", "(", "dst_image", ",", "\n", "lambda", "x", ",", "ordering", ":", "pr", ".", "distort_color", "(", "x", ",", "ordering", ",", "fast_mode", ")", ",", "\n", "num_cases", "=", "4", ")", "\n", "\n", "dst_image", "=", "pr", ".", "resnet_norm", "(", "dst_image", ")", "\n", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "            ", "dst_image", "=", "tf", ".", "transpose", "(", "image", ",", "perm", "=", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "return", "dst_image", ",", "dst_labels", ",", "dst_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_parse_result_txt.parse_txt": [[5, 20], ["open", "open.readlines", "open.close", "enumerate", "dirs.append", "mrs_all.append", "line.strip", "float", "line.strip().split", "line.strip"], "function", ["None"], ["def", "parse_txt", "(", "result_txt", ")", ":", "\n", "    ", "f", "=", "open", "(", "result_txt", ",", "'r'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "dirs", "=", "[", "]", "\n", "mrs_all", "=", "[", "]", "\n", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "if", "i", "%", "2", "==", "0", ":", "\n", "            ", "dirs", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "mrs", "=", "[", "float", "(", "c", ")", "for", "c", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "mrs_all", ".", "append", "(", "mrs", ")", "\n", "", "", "return", "dirs", ",", "mrs_all", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_parse_result_txt.show_top": [[23, 37], ["cp_parse_result_txt.parse_txt", "numpy.array", "len", "range", "print", "range", "print", "numpy.argsort", "print"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_parse_result_txt.parse_txt"], ["", "def", "show_top", "(", "result_txt", ",", "top", "=", "5", ")", ":", "\n", "    ", "names", "=", "[", "'Reasonable'", ",", "'Reasonable_small'", ",", "'Reasonable_occ=heavy'", ",", "'All'", ",", "'Reasonable'", ",", "'bare'", ",", "'partial'", ",", "'heavy'", "]", "\n", "dirs", ",", "mrs_all", "=", "parse_txt", "(", "result_txt", ")", "\n", "np_mrs_all", "=", "np", ".", "array", "(", "mrs_all", ")", "\n", "\n", "M", "=", "len", "(", "mrs_all", "[", "0", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "M", ")", ":", "\n", "        ", "print", "(", "names", "[", "i", "]", ")", "\n", "mrs_i", "=", "np_mrs_all", "[", ":", ",", "i", "]", "\n", "top_inds", "=", "np", ".", "argsort", "(", "mrs_i", ")", "[", ":", "top", "]", "\n", "for", "j", "in", "range", "(", "top", ")", ":", "\n", "            ", "print", "(", "dirs", "[", "top_inds", "[", "j", "]", "]", ",", "np_mrs_all", "[", "top_inds", "[", "j", "]", "]", ")", "\n", "", "print", "(", "'\\n\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_preprocess.preproces_for_train": [[7, 10], ["cp_preprocess.local_preprocess_for_train"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_preprocess.local_preprocess_for_train"], ["def", "preproces_for_train", "(", "image", ",", "labels", ",", "bboxes", ",", "input_shape", ",", "crop_shape", ",", "out_shape", ")", ":", "\n", "    ", "image", ",", "labels", ",", "bboxes", "=", "local_preprocess_for_train", "(", "image", ",", "labels", ",", "bboxes", ",", "input_shape", ",", "crop_shape", ",", "out_shape", ")", "\n", "return", "image", ",", "labels", ",", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_preprocess.preprocess_for_eval": [[11, 18], ["tensorflow.image.convert_image_dtype", "preprocessing.tf_image.resize_image", "cp_preprocess.resnet_norm"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.resize_image", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_preprocess.resnet_norm"], ["", "def", "preprocess_for_eval", "(", "image", ",", "out_shape", ")", ":", "\n", "    ", "img", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "image", ",", "tf", ".", "float32", ")", "\n", "img", "=", "tf_image", ".", "resize_image", "(", "img", ",", "out_shape", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ",", "\n", "align_corners", "=", "False", ")", "\n", "img", "=", "resnet_norm", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_preprocess.resnet_norm": [[19, 24], ["tensorflow.constant", "tensorflow.constant", "tensorflow.div"], "function", ["None"], ["", "def", "resnet_norm", "(", "img", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "    ", "mean_tensor", "=", "tf", ".", "constant", "(", "mean", ",", "tf", ".", "float32", ")", "\n", "std_tensor", "=", "tf", ".", "constant", "(", "std", ",", "tf", ".", "float32", ")", "\n", "ret_img", "=", "tf", ".", "div", "(", "img", "-", "mean_tensor", ",", "std_tensor", ")", "\n", "return", "ret_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_preprocess.resnet_denorm": [[25, 30], ["tensorflow.constant", "tensorflow.constant"], "function", ["None"], ["", "def", "resnet_denorm", "(", "img", ",", "mean", "=", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "std", "=", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ":", "\n", "    ", "mean_tensor", "=", "tf", ".", "constant", "(", "mean", ",", "tf", ".", "float32", ")", "\n", "std_tensor", "=", "tf", ".", "constant", "(", "std", ",", "tf", ".", "float32", ")", "\n", "ret_img", "=", "img", "*", "std_tensor", "+", "mean_tensor", "\n", "return", "ret_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_preprocess.vgg_norm": [[32, 42], ["tensorflow.split", "range", "tensorflow.concat"], "function", ["None"], ["", "def", "vgg_norm", "(", "img", ")", ":", "\n", "    ", "_R_MEAN", "=", "123.68", "\n", "_G_MEAN", "=", "116.78", "\n", "_B_MEAN", "=", "103.94", "\n", "_NUM_CHANNELS", "=", "3", "\n", "means", "=", "(", "_R_MEAN", ",", "_G_MEAN", ",", "_B_MEAN", ")", "\n", "channels", "=", "tf", ".", "split", "(", "axis", "=", "2", ",", "num_or_size_splits", "=", "_NUM_CHANNELS", ",", "value", "=", "img", ")", "\n", "for", "i", "in", "range", "(", "_NUM_CHANNELS", ")", ":", "\n", "        ", "channels", "[", "i", "]", "-=", "means", "[", "i", "]", "\n", "", "return", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_preprocess.local_preprocess_for_train": [[44, 69], ["tensorflow.name_scope", "preprocessing.preprocessing_rfcn.random_crop", "tensorflow.image.resize", "preprocessing.tf_image.random_flip_left_right", "preprocessing.preprocessing_rfcn.resnet_norm", "ValueError", "tensorflow.image.convert_image_dtype", "tensorflow.transpose", "tf.image.convert_image_dtype.get_shape"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.preprocessing_rfcn.random_crop", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.random_flip_left_right", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_preprocess.resnet_norm"], ["", "def", "local_preprocess_for_train", "(", "image", ",", "labels", ",", "bboxes", ",", "input_shape", ",", "crop_shape", ",", "\n", "out_shape", ",", "data_format", "=", "'NHWC'", ",", "\n", "scope", "=", "'rfcn_preprocessing_train'", ")", ":", "\n", "\n", "    ", "fast_mode", "=", "False", "\n", "with", "tf", ".", "name_scope", "(", "scope", ",", "'rfcn_preprocessing_train'", ",", "[", "image", ",", "labels", ",", "bboxes", "]", ")", ":", "\n", "        ", "if", "image", ".", "get_shape", "(", ")", ".", "ndims", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'Input must be of size [height, width, C>0]'", ")", "\n", "# Convert to float scaled [0, 1].", "\n", "", "if", "image", ".", "dtype", "!=", "tf", ".", "float32", ":", "\n", "            ", "image", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "image", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "\n", "", "dst_image", ",", "dst_labels", ",", "dst_bboxes", "=", "pr", ".", "random_crop", "(", "image", ",", "labels", ",", "bboxes", ",", "img_shape", "=", "input_shape", ",", "crop_shape", "=", "crop_shape", ",", "keep_ratio", "=", "0.7", ",", "random_scale", "=", "(", "0.7", ",", "1.3", ")", ")", "\n", "\n", "dst_image", "=", "tf", ".", "image", ".", "resize", "(", "dst_image", ",", "(", "out_shape", "[", "0", "]", ",", "out_shape", "[", "1", "]", ")", ")", "\n", "\n", "dst_image", ",", "dst_bboxes", "=", "tf_image", ".", "random_flip_left_right", "(", "dst_image", ",", "dst_bboxes", ")", "\n", "\n", "#dst_image = pr.apply_with_random_selector(dst_image,lambda x, ordering: pr.distort_color(x, ordering, fast_mode),num_cases=4)", "\n", "\n", "dst_image", "=", "pr", ".", "resnet_norm", "(", "dst_image", ")", "\n", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "            ", "dst_image", "=", "tf", ".", "transpose", "(", "image", ",", "perm", "=", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "return", "dst_image", ",", "dst_labels", ",", "dst_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_test.run": [[53, 62], ["inference.inference_nms.Tester", "inference_nms.Tester.run", "inference_nms.Tester.run", "citypersons.cp_eval.run_evaluate_when_testing"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_eval.run_evaluate_when_testing"], ["def", "run", "(", ")", ":", "\n", "\n", "    ", "tester", "=", "inference_nms", ".", "Tester", "(", "cp_nets_param", ",", "(", "cp_config", ".", "cp_height", ",", "cp_config", ".", "cp_width", ")", ",", "\n", "cp_preprocess", ".", "preprocess_for_eval", ",", "model", ",", "out_txt_dir", ")", "\n", "if", "args", ".", "list", "==", "1", ":", "\n", "        ", "tester", ".", "run", "(", "test_img_dir", ",", "nms_param", "=", "param", ",", "is_list", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "tester", ".", "run", "(", "test_img_dir", ",", "nms_param", "=", "param", ",", "is_list", "=", "False", ")", "\n", "cp_eval", ".", "run_evaluate_when_testing", "(", "out_txt_dir", ",", "'val_gt.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_train.train_cp": [[75, 81], ["train.train.Trainer", "time.strftime", "train.Trainer.train", "time.localtime"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.train"], ["def", "train_cp", "(", "continue_train", ",", "is_log", ")", ":", "\n", "    ", "trainer", "=", "train", ".", "Trainer", "(", "cp_train_param", ",", "cp_nets_param", ",", "cp_preprocess", ".", "preproces_for_train", ",", "image_all", ",", "annotation_json", ",", "gpus", ",", "data", "=", "'cityperson'", ")", "\n", "\n", "log_filename", "=", "time", ".", "strftime", "(", "'%m_%d_%H_%M'", ",", "time", ".", "localtime", "(", ")", ")", "\n", "\n", "trainer", ".", "train", "(", "continue_train", ",", "log_filename", ",", "is_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_dataset.read_label": [[17, 50], ["xml.parse", "ET.parse.getroot", "bboxes.append", "classes.append", "classes.append", "float", "float", "float", "float"], "function", ["None"], ["def", "read_label", "(", "label_file", ",", "norm", ")", ":", "\n", "    ", "tree", "=", "ET", ".", "parse", "(", "label_file", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "\n", "classes", "=", "[", "]", "\n", "bboxes", "=", "[", "]", "\n", "\n", "for", "child", "in", "root", ":", "\n", "        ", "if", "child", ".", "tag", "==", "'object'", ":", "\n", "            ", "for", "sub_child", "in", "child", ":", "\n", "                ", "if", "sub_child", ".", "tag", "==", "'name'", ":", "\n", "                    ", "if", "sub_child", ".", "text", "==", "'ped'", ":", "\n", "                        ", "classes", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                        ", "classes", ".", "append", "(", "-", "1", ")", "\n", "", "", "if", "sub_child", ".", "tag", "==", "'bndbox'", ":", "\n", "                    ", "xmin", ",", "ymin", ",", "xmax", ",", "ymax", "=", "0.", ",", "0.", ",", "0.", ",", "0.", "\n", "for", "sub_sub_child", "in", "sub_child", ":", "\n", "                        ", "if", "sub_sub_child", ".", "tag", "==", "'xmin'", ":", "\n", "                            ", "xmin", "=", "float", "(", "sub_sub_child", ".", "text", ")", "\n", "", "elif", "sub_sub_child", ".", "tag", "==", "'ymin'", ":", "\n", "                            ", "ymin", "=", "float", "(", "sub_sub_child", ".", "text", ")", "\n", "", "elif", "sub_sub_child", ".", "tag", "==", "'xmax'", ":", "\n", "                            ", "xmax", "=", "float", "(", "sub_sub_child", ".", "text", ")", "\n", "", "else", ":", "\n", "                            ", "ymax", "=", "float", "(", "sub_sub_child", ".", "text", ")", "\n", "", "", "if", "norm", ":", "\n", "                        ", "xmin", "=", "xmin", "/", "cp_width", "\n", "ymin", "=", "ymin", "/", "cp_height", "\n", "xmax", "=", "xmax", "/", "cp_width", "\n", "ymax", "=", "ymax", "/", "cp_height", "\n", "", "bboxes", ".", "append", "(", "[", "ymin", ",", "xmin", ",", "ymax", ",", "xmax", "]", ")", "\n", "", "", "", "", "return", "classes", ",", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_dataset.dataset_gener_with_batch": [[53, 71], ["tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "tensorflow.data.Dataset.from_tensor_slices", "data_img.map.map", "tensorflow.data.Dataset.zip().shuffle().repeat().batch", "tensorflow.read_file", "tensorflow.image.decode_png", "preprocessing.tf_image.resize_image", "tensorflow.cast", "tensorflow.div", "tensorflow.data.Dataset.zip().shuffle().repeat", "tensorflow.data.Dataset.zip().shuffle", "tensorflow.data.Dataset.zip"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.preprocessing.tf_image.resize_image"], ["", "def", "dataset_gener_with_batch", "(", "image_list", ",", "bbox_list", ",", "label_list", ",", "batch_size", ")", ":", "\n", "    ", "def", "_parse_func", "(", "filename", ")", ":", "\n", "        ", "img_string", "=", "tf", ".", "read_file", "(", "filename", ")", "\n", "img", "=", "tf", ".", "image", ".", "decode_png", "(", "img_string", ")", "\n", "img", "=", "tf_image", ".", "resize_image", "(", "img", ",", "(", "cp_height", ",", "cp_width", ")", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "BILINEAR", ",", "\n", "align_corners", "=", "False", ")", "\n", "img", "=", "tf", ".", "cast", "(", "img", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "img", "=", "tf", ".", "div", "(", "img", ",", "255.", ")", "\n", "return", "img", "\n", "\n", "", "data_img", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "image_list", ")", "\n", "data_bbox", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "bbox_list", ")", "\n", "data_label", "=", "tf", ".", "data", ".", "Dataset", ".", "from_tensor_slices", "(", "label_list", ")", "\n", "\n", "data_img", "=", "data_img", ".", "map", "(", "_parse_func", ")", "\n", "dataset", "=", "tf", ".", "data", ".", "Dataset", ".", "zip", "(", "(", "data_img", ",", "data_label", ",", "data_bbox", ")", ")", ".", "shuffle", "(", "100", ")", ".", "repeat", "(", ")", ".", "batch", "(", "batch_size", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_dataset.create_dataset_with_batch": [[73, 97], ["os.listdir", "cp_dataset.dataset_gener_with_batch", "os.path.join", "cp_dataset.read_label", "len", "bbox_list.append", "label_list.append", "os.path.join", "filename.replace", "range", "len", "bboxes.append"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_dataset.dataset_gener_with_batch", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_dataset.read_label"], ["", "def", "create_dataset_with_batch", "(", "image_dir", ",", "ann_dir", ",", "batch_size", ")", ":", "\n", "    ", "image_list", "=", "os", ".", "listdir", "(", "image_dir", ")", "\n", "\n", "label_list", "=", "[", "]", "\n", "bbox_list", "=", "[", "]", "\n", "\n", "for", "filename", "in", "image_list", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "ann_dir", ",", "filename", ".", "replace", "(", "'png'", ",", "'xml'", ")", ")", "\n", "classes", ",", "bboxes", "=", "read_label", "(", "file_path", ",", "norm", "=", "True", ")", "\n", "\n", "length", "=", "len", "(", "bboxes", ")", "\n", "labels", "=", "classes", "\n", "\n", "if", "length", "<", "max_bbox_num", ":", "\n", "            ", "labels", "=", "labels", "+", "[", "999", "]", "*", "(", "max_bbox_num", "-", "length", ")", "\n", "for", "_", "in", "range", "(", "max_bbox_num", "-", "length", ")", ":", "\n", "                ", "bboxes", ".", "append", "(", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "", "", "bbox_list", ".", "append", "(", "bboxes", ")", "\n", "label_list", ".", "append", "(", "labels", ")", "\n", "\n", "", "image_list", "=", "[", "os", ".", "path", ".", "join", "(", "image_dir", ",", "name", ")", "for", "name", "in", "image_list", "]", "\n", "dataset", "=", "dataset_gener_with_batch", "(", "image_list", ",", "bbox_list", ",", "label_list", ",", "batch_size", ")", "\n", "\n", "return", "dataset", ",", "len", "(", "image_list", ")", "//", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_dataset.create_dataset_with_batch_json": [[98, 128], ["os.listdir", "cp_dataset.dataset_gener_with_batch", "open", "json.load", "[].copy", "[].copy", "len", "bbox_list.append", "label_list.append", "os.path.join", "range", "len", "[].copy.append", "filename.split", "filename.split"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_dataset.dataset_gener_with_batch"], ["", "def", "create_dataset_with_batch_json", "(", "image_dir", ",", "ann_json", ",", "batch_size", ")", ":", "\n", "    ", "with", "open", "(", "ann_json", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "gt_data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "image_list", "=", "os", ".", "listdir", "(", "image_dir", ")", "\n", "label_list", "=", "[", "]", "\n", "bbox_list", "=", "[", "]", "\n", "for", "filename", "in", "image_list", ":", "\n", "        ", "classes", "=", "gt_data", "[", "filename", ".", "split", "(", "'.'", ")", "[", "0", "]", "]", "[", "'class'", "]", ".", "copy", "(", ")", "\n", "bboxes", "=", "gt_data", "[", "filename", ".", "split", "(", "'.'", ")", "[", "0", "]", "]", "[", "'box'", "]", ".", "copy", "(", ")", "\n", "for", "box", "in", "bboxes", ":", "\n", "            ", "box", "[", "0", "]", "=", "box", "[", "0", "]", "/", "cp_height", "\n", "box", "[", "1", "]", "=", "box", "[", "1", "]", "/", "cp_width", "\n", "box", "[", "2", "]", "=", "box", "[", "2", "]", "/", "cp_height", "\n", "box", "[", "3", "]", "=", "box", "[", "3", "]", "/", "cp_width", "\n", "\n", "", "length", "=", "len", "(", "bboxes", ")", "\n", "labels", "=", "classes", "\n", "\n", "if", "length", "<", "max_bbox_num", ":", "\n", "            ", "labels", "=", "labels", "+", "[", "999", "]", "*", "(", "max_bbox_num", "-", "length", ")", "\n", "for", "_", "in", "range", "(", "max_bbox_num", "-", "length", ")", ":", "\n", "                ", "bboxes", ".", "append", "(", "[", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ")", "\n", "", "", "bbox_list", ".", "append", "(", "bboxes", ")", "\n", "label_list", ".", "append", "(", "labels", ")", "\n", "\n", "\n", "", "image_list", "=", "[", "os", ".", "path", ".", "join", "(", "image_dir", ",", "name", ")", "for", "name", "in", "image_list", "]", "\n", "dataset", "=", "dataset_gener_with_batch", "(", "image_list", ",", "bbox_list", ",", "label_list", ",", "batch_size", ")", "\n", "return", "dataset", ",", "len", "(", "image_list", ")", "//", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_eval.evaluate_result": [[10, 35], ["sorted", "range", "open", "coco_gt.getImgIds", "citypersons.evalutation.eval_MR_multisetup.COCOeval", "citypersons.evalutation.eval_MR_multisetup.COCOeval.evaluate", "citypersons.evalutation.eval_MR_multisetup.COCOeval.accumulate", "citypersons.evalutation.eval_MR_multisetup.COCOeval.summarize", "mean_mrs.append", "open.close", "copy.deepcopy", "citypersons.evalutation.eval_MR_multisetup.COCOeval.plot"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.getImgIds", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.evaluate", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.accumulate", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.summarize", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.plot"], ["def", "evaluate_result", "(", "cocoDt", ",", "coco_gt", ",", "res_txt", ",", "plot", ",", "_print", "=", "True", ",", "ret", "=", "False", ")", ":", "\n", "    ", "annType", "=", "'bbox'", "\n", "if", "res_txt", "is", "not", "None", ":", "\n", "        ", "res_file", "=", "open", "(", "res_txt", ",", "\"w\"", ")", "\n", "", "else", ":", "\n", "        ", "res_file", "=", "None", "\n", "", "mrs", "=", "[", "]", "\n", "fppis", "=", "[", "]", "\n", "ms", "=", "[", "]", "\n", "mean_mrs", "=", "[", "]", "\n", "\n", "imgIds", "=", "sorted", "(", "coco_gt", ".", "getImgIds", "(", ")", ")", "\n", "for", "id_setup", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "        ", "cocoEval", "=", "COCOeval", "(", "copy", ".", "deepcopy", "(", "coco_gt", ")", ",", "cocoDt", ",", "annType", ",", "sub_type", "=", "0", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "cocoEval", ".", "evaluate", "(", "id_setup", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "mean_mr", "=", "cocoEval", ".", "summarize", "(", "id_setup", ",", "res_file", ",", "_print", ")", "\n", "mean_mrs", ".", "append", "(", "mean_mr", ")", "\n", "if", "plot", ":", "\n", "            ", "cocoEval", ".", "plot", "(", "id_setup", ",", "mrs", ",", "fppis", ",", "ms", ")", "\n", "", "", "if", "res_txt", "is", "not", "None", ":", "\n", "        ", "res_file", ".", "close", "(", ")", "\n", "", "if", "ret", ":", "\n", "        ", "return", "mean_mrs", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_eval.evaluate_two_subtype": [[36, 57], ["sorted", "range", "range", "coco_gt.getImgIds", "citypersons.evalutation.eval_MR_multisetup.COCOeval", "citypersons.evalutation.eval_MR_multisetup.COCOeval.evaluate", "citypersons.evalutation.eval_MR_multisetup.COCOeval.accumulate", "citypersons.evalutation.eval_MR_multisetup.COCOeval.summarize", "mean_mrs.append", "print", "citypersons.evalutation.eval_MR_multisetup.COCOeval", "citypersons.evalutation.eval_MR_multisetup.COCOeval.evaluate", "citypersons.evalutation.eval_MR_multisetup.COCOeval.accumulate", "citypersons.evalutation.eval_MR_multisetup.COCOeval.summarize", "mean_mrs.append", "copy.deepcopy", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.getImgIds", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.evaluate", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.accumulate", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.summarize", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.evaluate", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.accumulate", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.summarize"], ["", "", "def", "evaluate_two_subtype", "(", "cocoDt", ",", "coco_gt", ",", "_print", ")", ":", "\n", "    ", "annType", "=", "'bbox'", "\n", "mean_mrs", "=", "[", "]", "\n", "imgIds", "=", "sorted", "(", "coco_gt", ".", "getImgIds", "(", ")", ")", "\n", "for", "id_setup", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "        ", "cocoEval", "=", "COCOeval", "(", "copy", ".", "deepcopy", "(", "coco_gt", ")", ",", "cocoDt", ",", "annType", ",", "sub_type", "=", "0", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "cocoEval", ".", "evaluate", "(", "id_setup", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "mean_mr", "=", "cocoEval", ".", "summarize", "(", "id_setup", ",", "None", ",", "_print", ")", "\n", "mean_mrs", ".", "append", "(", "mean_mr", ")", "\n", "", "if", "_print", ":", "\n", "        ", "print", "(", "'\\n\\n'", ")", "\n", "", "for", "id_setup", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "        ", "cocoEval", "=", "COCOeval", "(", "copy", ".", "deepcopy", "(", "coco_gt", ")", ",", "cocoDt", ",", "annType", ",", "sub_type", "=", "1", ")", "\n", "cocoEval", ".", "params", ".", "imgIds", "=", "imgIds", "\n", "cocoEval", ".", "evaluate", "(", "id_setup", ")", "\n", "cocoEval", ".", "accumulate", "(", ")", "\n", "mean_mr", "=", "cocoEval", ".", "summarize", "(", "id_setup", ",", "None", ",", "_print", ")", "\n", "mean_mrs", ".", "append", "(", "mean_mr", ")", "\n", "", "return", "mean_mrs", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_eval.evaluate": [[59, 63], ["citypersons.evalutation.coco.COCO", "citypersons.evalutation.coco.COCO.loadRes", "cp_eval.evaluate_result"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadRes", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_eval.evaluate_result"], ["", "def", "evaluate", "(", "det_json", ",", "ann_json", ",", "res_txt", ",", "plot", ",", "_print", "=", "True", ",", "ret", "=", "False", ")", ":", "\n", "    ", "cocoGt", "=", "COCO", "(", "ann_json", ")", "\n", "cocoDt", "=", "cocoGt", ".", "loadRes", "(", "det_json", ")", "\n", "return", "evaluate_result", "(", "cocoDt", ",", "cocoGt", ",", "res_txt", ",", "plot", ",", "_print", ",", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_eval.run_evaluate": [[65, 69], ["citypersons.evalutation.convert_to_coco.convert_to_coco", "cp_eval.evaluate", "os.remove"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.convert_to_coco.convert_to_coco", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.evaluate"], ["", "def", "run_evaluate", "(", "txt_dir", ",", "ann_json", ",", "res_txt", ",", "temp_json", "=", "'temp.json'", ")", ":", "\n", "    ", "convert_to_coco", ".", "convert_to_coco", "(", "txt_dir", ",", "ann_json", ",", "temp_json", ")", "\n", "evaluate", "(", "temp_json", ",", "ann_json", ",", "res_txt", ",", "True", ")", "\n", "os", ".", "remove", "(", "temp_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_eval.run_evaluate_when_testing": [[70, 77], ["citypersons.evalutation.convert_to_coco.convert_to_coco", "citypersons.evalutation.coco.COCO", "citypersons.evalutation.coco.COCO.loadRes", "cp_eval.evaluate_two_subtype", "os.remove"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.convert_to_coco.convert_to_coco", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadRes", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_eval.evaluate_two_subtype"], ["", "def", "run_evaluate_when_testing", "(", "txt_dir", ",", "ann_json", ",", "temp_json", "=", "'temp.json'", ",", "_print", "=", "True", ")", ":", "\n", "    ", "convert_to_coco", ".", "convert_to_coco", "(", "txt_dir", ",", "ann_json", ",", "temp_json", ")", "\n", "cocoGt", "=", "COCO", "(", "ann_json", ")", "\n", "cocoDt", "=", "cocoGt", ".", "loadRes", "(", "temp_json", ")", "\n", "mean_mrs", "=", "evaluate_two_subtype", "(", "cocoDt", ",", "cocoGt", ",", "_print", ")", "\n", "os", ".", "remove", "(", "temp_json", ")", "\n", "return", "mean_mrs", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_eval.run_multiple_evaluate": [[79, 101], ["os.path.isdir", "os.mkdir", "print", "tqdm.tqdm", "citypersons.evalutation.coco.COCO", "print", "tqdm.tqdm", "shutil.rmtree", "shutil.rmtree", "range", "citypersons.evalutation.convert_to_coco.convert_to_coco", "temp_jsons.append", "range", "citypersons.evalutation.coco.COCO.loadRes", "cp_eval.evaluate_two_subtype", "mrs_all.append", "len", "os.path.join", "os.path.join", "len"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.convert_to_coco.convert_to_coco", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadRes", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_eval.evaluate_two_subtype"], ["", "def", "run_multiple_evaluate", "(", "pred_dirs", ",", "temp_json_dir", ",", "ann_json", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isdir", "(", "temp_json_dir", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "temp_json_dir", ")", "\n", "", "os", ".", "mkdir", "(", "temp_json_dir", ")", "\n", "\n", "print", "(", "'==> Converting detections:'", ")", "\n", "temp_jsons", "=", "[", "]", "\n", "for", "k", "in", "tqdm", "(", "range", "(", "len", "(", "pred_dirs", ")", ")", ")", ":", "\n", "        ", "pred_dir", "=", "pred_dirs", "[", "k", "]", "\n", "convert_to_coco", ".", "convert_to_coco", "(", "pred_dir", ",", "ann_json", ",", "os", ".", "path", ".", "join", "(", "temp_json_dir", ",", "'%d.json'", "%", "k", ")", ")", "\n", "temp_jsons", ".", "append", "(", "os", ".", "path", ".", "join", "(", "temp_json_dir", ",", "'%d.json'", "%", "k", ")", ")", "\n", "\n", "", "cocoGt", "=", "COCO", "(", "ann_json", ")", "\n", "mrs_all", "=", "[", "]", "\n", "print", "(", "'==> Evaluating detections:'", ")", "\n", "for", "k", "in", "tqdm", "(", "range", "(", "len", "(", "temp_jsons", ")", ")", ")", ":", "\n", "        ", "temp_json", "=", "temp_jsons", "[", "k", "]", "\n", "cocoDt", "=", "cocoGt", ".", "loadRes", "(", "temp_json", ")", "\n", "mean_mrs", "=", "evaluate_two_subtype", "(", "cocoDt", ",", "cocoGt", ",", "False", ")", "\n", "mrs_all", ".", "append", "(", "mean_mrs", ")", "\n", "", "shutil", ".", "rmtree", "(", "temp_json_dir", ")", "\n", "return", "mrs_all", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.get_iou": [[3, 22], ["numpy.reshape", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.logical_and().astype", "numpy.logical_and"], "function", ["None"], ["def", "get_iou", "(", "tbox", ",", "rest_box", ")", ":", "\n", "    ", "tbox", "=", "np", ".", "reshape", "(", "tbox", ",", "[", "1", ",", "5", "]", ")", "\n", "rvol", "=", "(", "rest_box", "[", ":", ",", "2", "]", "-", "rest_box", "[", ":", ",", "0", "]", ")", "*", "(", "rest_box", "[", ":", ",", "3", "]", "-", "rest_box", "[", ":", ",", "1", "]", ")", "\n", "tvol", "=", "(", "tbox", "[", ":", ",", "2", "]", "-", "tbox", "[", ":", ",", "0", "]", ")", "*", "(", "tbox", "[", ":", ",", "3", "]", "-", "tbox", "[", ":", ",", "1", "]", ")", "\n", "\n", "iymin", "=", "np", ".", "maximum", "(", "tbox", "[", ":", ",", "0", "]", ",", "rest_box", "[", ":", ",", "0", "]", ")", "\n", "ixmin", "=", "np", ".", "maximum", "(", "tbox", "[", ":", ",", "1", "]", ",", "rest_box", "[", ":", ",", "1", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "tbox", "[", ":", ",", "2", "]", ",", "rest_box", "[", ":", ",", "2", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "tbox", "[", ":", ",", "3", "]", ",", "rest_box", "[", ":", ",", "3", "]", ")", "\n", "\n", "ih", "=", "iymax", "-", "iymin", "\n", "iw", "=", "ixmax", "-", "ixmin", "\n", "ivol", "=", "ih", "*", "iw", "\n", "\n", "valid_iou", "=", "np", ".", "logical_and", "(", "ih", ">", "0", ",", "iw", ">", "0", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "iou", "=", "ivol", "/", "(", "rvol", "+", "tvol", "-", "ivol", ")", "\n", "iou", "=", "iou", "*", "valid_iou", "\n", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.nms_cpu": [[23, 99], ["numpy.copy", "numpy.copy", "numpy.copy", "numpy.arange().reshape", "numpy.concatenate", "_boxes[].reshape().astype", "_boxes[].copy", "numpy.reshape", "nms_ae.get_iou", "numpy.abs", "numpy.where", "numpy.arange", "numpy.argmax", "_boxes[].reshape", "numpy.less_equal().astype", "numpy.exp", "numpy.greater().astype", "numpy.less_equal().astype", "numpy.less_equal", "numpy.less_equal", "numpy.greater", "numpy.logical_or().astype", "numpy.greater", "numpy.less_equal", "numpy.less_equal", "numpy.greater", "numpy.logical_or().astype", "numpy.less_equal", "numpy.greater", "numpy.logical_or().astype", "numpy.logical_or", "numpy.logical_or", "numpy.logical_or"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.get_iou"], ["", "def", "nms_cpu", "(", "boxes", ",", "scores", ",", "ae", ",", "mode", ",", "Nt", ",", "threshold", ",", "sigma", ",", "ae_dis_th", ")", ":", "\n", "    ", "if", "scores", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "i", "=", "0", "\n", "\n", "_boxes", "=", "np", ".", "copy", "(", "boxes", ")", "\n", "_scores", "=", "np", ".", "copy", "(", "scores", ")", "\n", "\n", "# compute associate embedding", "\n", "_ae", "=", "np", ".", "copy", "(", "ae", ")", "\n", "\n", "box_ind", "=", "np", ".", "arange", "(", "_boxes", ".", "shape", "[", "0", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "_boxes", "=", "np", ".", "concatenate", "(", "(", "_boxes", ",", "box_ind", ")", ",", "axis", "=", "1", ")", "\n", "while", "i", "<", "_boxes", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "        ", "max_pos", "=", "np", ".", "argmax", "(", "_scores", "[", "i", ":", "]", ")", "+", "i", "\n", "\n", "tscore", "=", "_scores", "[", "max_pos", "]", "\n", "tbox", "=", "_boxes", "[", "max_pos", ",", ":", "]", ".", "copy", "(", ")", "\n", "tae", "=", "_ae", "[", "max_pos", "]", "\n", "\n", "_scores", "[", "max_pos", "]", "=", "_scores", "[", "i", "]", "\n", "_scores", "[", "i", "]", "=", "tscore", "\n", "\n", "_boxes", "[", "max_pos", ",", ":", "]", "=", "_boxes", "[", "i", ",", ":", "]", "\n", "_boxes", "[", "i", ",", ":", "]", "=", "tbox", "\n", "\n", "_ae", "[", "max_pos", "]", "=", "_ae", "[", "i", "]", "\n", "_ae", "[", "i", "]", "=", "tae", "\n", "\n", "rest_box", "=", "_boxes", "[", "i", "+", "1", ":", ",", ":", "]", "\n", "rest_ae", "=", "_ae", "[", "i", "+", "1", ":", "]", "\n", "\n", "tbox", "=", "np", ".", "reshape", "(", "tbox", ",", "[", "1", ",", "5", "]", ")", "\n", "\n", "iou", "=", "get_iou", "(", "tbox", ",", "rest_box", ")", "\n", "ae_dis", "=", "np", ".", "abs", "(", "tae", "-", "rest_ae", ")", "\n", "\n", "# Soft-NMS, linear", "\n", "if", "mode", "==", "0", ":", "\n", "            ", "w", "=", "(", "1.", "-", "iou", ")", "*", "(", "np", ".", "greater", "(", "iou", ",", "Nt", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "+", "(", "np", ".", "less_equal", "(", "iou", ",", "Nt", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Soft-NMS, gaussian", "\n", "", "elif", "mode", "==", "1", ":", "\n", "            ", "w", "=", "np", ".", "exp", "(", "-", "(", "iou", "*", "iou", ")", "/", "sigma", ")", "\n", "\n", "# Greedy-NMS", "\n", "", "elif", "mode", "==", "2", ":", "\n", "            ", "w", "=", "np", ".", "less_equal", "(", "iou", ",", "Nt", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# AE-NMS", "\n", "", "elif", "mode", "==", "3", ":", "\n", "            ", "l1", "=", "np", ".", "less_equal", "(", "iou", ",", "Nt", ")", "\n", "l2", "=", "np", ".", "greater", "(", "ae_dis", ",", "ae_dis_th", ")", "\n", "w", "=", "np", ".", "logical_or", "(", "l1", ",", "l2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "elif", "mode", "==", "4", ":", "\n", "            ", "l1", "=", "np", ".", "less_equal", "(", "iou", ",", "Nt", ")", "\n", "l2", "=", "np", ".", "greater", "(", "ae_dis", ",", "ae_dis_th", "*", "iou", ")", "\n", "w", "=", "np", ".", "logical_or", "(", "l1", ",", "l2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "else", ":", "\n", "            ", "l1", "=", "np", ".", "less_equal", "(", "iou", ",", "Nt", ")", "\n", "l2", "=", "np", ".", "greater", "(", "ae_dis", ",", "ae_dis_th", "*", "iou", "**", "2", ")", "\n", "w", "=", "np", ".", "logical_or", "(", "l1", ",", "l2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "_scores", "[", "i", "+", "1", ":", "]", "=", "_scores", "[", "i", "+", "1", ":", "]", "*", "w", "\n", "inds", "=", "np", ".", "where", "(", "_scores", ">", "threshold", ")", "\n", "_scores", "=", "_scores", "[", "inds", "]", "\n", "_boxes", "=", "_boxes", "[", "inds", "]", "\n", "_ae", "=", "_ae", "[", "inds", "]", "\n", "i", "+=", "1", "\n", "\n", "", "got_inds", "=", "_boxes", "[", ":", ",", "4", "]", ".", "reshape", "(", "[", "-", "1", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "ret_scores", "=", "scores", "[", "got_inds", "]", "\n", "ret_boxes", "=", "boxes", "[", "got_inds", "]", "\n", "return", "ret_boxes", ",", "ret_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.second_nms": [[100, 182], ["enumerate", "range", "numpy.concatenate", "numpy.concatenate", "numpy.copy", "numpy.copy", "numpy.arange().reshape", "numpy.concatenate", "_boxes[].reshape().astype", "len", "len", "use_boxes_list[].copy", "use_scores_list[].copy", "numpy.reshape", "numpy.concatenate", "np.concatenate.append", "np.concatenate.append", "_boxes[].copy", "numpy.reshape", "numpy.maximum", "numpy.maximum", "numpy.minimum", "numpy.minimum", "numpy.logical_and().astype", "numpy.less().astype", "numpy.equal", "numpy.logical_or().astype", "numpy.where", "use_boxes_list.append", "use_scores_list.append", "len", "numpy.arange", "numpy.argmax", "_boxes[].reshape", "numpy.ones_like", "numpy.logical_and", "numpy.less", "numpy.logical_or"], "function", ["None"], ["", "def", "second_nms", "(", "boxes_list", ",", "scores_list", ",", "Nt", ",", "threshold", ")", ":", "\n", "    ", "use_boxes_list", "=", "[", "]", "\n", "use_scores_list", "=", "[", "]", "\n", "\n", "for", "i", ",", "scores", "in", "enumerate", "(", "scores_list", ")", ":", "\n", "        ", "if", "scores", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "use_boxes_list", ".", "append", "(", "boxes_list", "[", "i", "]", ")", "\n", "use_scores_list", ".", "append", "(", "scores_list", "[", "i", "]", ")", "\n", "\n", "", "", "if", "len", "(", "use_boxes_list", ")", "==", "0", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "elif", "len", "(", "use_boxes_list", ")", "==", "1", ":", "\n", "\n", "        ", "return", "use_boxes_list", "[", "0", "]", ",", "use_scores_list", "[", "0", "]", "\n", "\n", "", "use_boxes", "=", "[", "]", "\n", "use_scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "use_boxes_list", ")", ")", ":", "\n", "        ", "use_boxes_i", "=", "use_boxes_list", "[", "i", "]", ".", "copy", "(", ")", "#[n, 4]", "\n", "use_scores_i", "=", "use_scores_list", "[", "i", "]", ".", "copy", "(", ")", "#[n]", "\n", "layer_ind", "=", "np", ".", "reshape", "(", "np", ".", "ones_like", "(", "use_scores_i", ")", "*", "i", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "use_boxes_i", "=", "np", ".", "concatenate", "(", "(", "use_boxes_i", ",", "layer_ind", ")", ",", "axis", "=", "1", ")", "#[n,5]", "\n", "use_boxes", ".", "append", "(", "use_boxes_i", ")", "\n", "use_scores", ".", "append", "(", "use_scores_i", ")", "\n", "\n", "", "use_boxes", "=", "np", ".", "concatenate", "(", "use_boxes", ",", "axis", "=", "0", ")", "\n", "use_scores", "=", "np", ".", "concatenate", "(", "use_scores", ",", "axis", "=", "0", ")", "\n", "\n", "_boxes", "=", "np", ".", "copy", "(", "use_boxes", ")", "\n", "_scores", "=", "np", ".", "copy", "(", "use_scores", ")", "\n", "\n", "box_ind", "=", "np", ".", "arange", "(", "_boxes", ".", "shape", "[", "0", "]", ")", ".", "reshape", "(", "[", "-", "1", ",", "1", "]", ")", "\n", "_boxes", "=", "np", ".", "concatenate", "(", "(", "_boxes", ",", "box_ind", ")", ",", "axis", "=", "1", ")", "\n", "\n", "i", "=", "0", "\n", "while", "i", "<", "_boxes", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "        ", "max_pos", "=", "np", ".", "argmax", "(", "_scores", "[", "i", ":", "]", ")", "+", "i", "\n", "\n", "tscore", "=", "_scores", "[", "max_pos", "]", "\n", "tbox", "=", "_boxes", "[", "max_pos", ",", ":", "]", ".", "copy", "(", ")", "\n", "\n", "_scores", "[", "max_pos", "]", "=", "_scores", "[", "i", "]", "\n", "_scores", "[", "i", "]", "=", "tscore", "\n", "\n", "_boxes", "[", "max_pos", ",", ":", "]", "=", "_boxes", "[", "i", ",", ":", "]", "\n", "_boxes", "[", "i", ",", ":", "]", "=", "tbox", "\n", "\n", "# IoU computing", "\n", "rest_box", "=", "_boxes", "[", "i", "+", "1", ":", ",", ":", "]", "\n", "rvol", "=", "(", "rest_box", "[", ":", ",", "2", "]", "-", "rest_box", "[", ":", ",", "0", "]", ")", "*", "(", "rest_box", "[", ":", ",", "3", "]", "-", "rest_box", "[", ":", ",", "1", "]", ")", "\n", "\n", "tbox", "=", "np", ".", "reshape", "(", "tbox", ",", "[", "1", ",", "6", "]", ")", "\n", "tvol", "=", "(", "tbox", "[", ":", ",", "2", "]", "-", "tbox", "[", ":", ",", "0", "]", ")", "*", "(", "tbox", "[", ":", ",", "3", "]", "-", "tbox", "[", ":", ",", "1", "]", ")", "\n", "\n", "iymin", "=", "np", ".", "maximum", "(", "tbox", "[", ":", ",", "0", "]", ",", "rest_box", "[", ":", ",", "0", "]", ")", "\n", "ixmin", "=", "np", ".", "maximum", "(", "tbox", "[", ":", ",", "1", "]", ",", "rest_box", "[", ":", ",", "1", "]", ")", "\n", "iymax", "=", "np", ".", "minimum", "(", "tbox", "[", ":", ",", "2", "]", ",", "rest_box", "[", ":", ",", "2", "]", ")", "\n", "ixmax", "=", "np", ".", "minimum", "(", "tbox", "[", ":", ",", "3", "]", ",", "rest_box", "[", ":", ",", "3", "]", ")", "\n", "\n", "ih", "=", "iymax", "-", "iymin", "\n", "iw", "=", "ixmax", "-", "ixmin", "\n", "ivol", "=", "ih", "*", "iw", "\n", "\n", "valid_iou", "=", "np", ".", "logical_and", "(", "ih", ">", "0", ",", "iw", ">", "0", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "iou", "=", "ivol", "/", "(", "rvol", "+", "tvol", "-", "ivol", ")", "\n", "iou", "=", "iou", "*", "valid_iou", "\n", "\n", "w1", "=", "np", ".", "less", "(", "iou", ",", "Nt", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "w2", "=", "np", ".", "equal", "(", "rest_box", "[", ":", ",", "4", "]", ",", "tbox", "[", "0", ",", "4", "]", ")", "\n", "w", "=", "np", ".", "logical_or", "(", "w1", ",", "w2", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "_scores", "[", "i", "+", "1", ":", "]", "=", "_scores", "[", "i", "+", "1", ":", "]", "*", "w", "\n", "inds", "=", "np", ".", "where", "(", "_scores", ">", "threshold", ")", "\n", "_scores", "=", "_scores", "[", "inds", "]", "\n", "_boxes", "=", "_boxes", "[", "inds", "]", "\n", "i", "+=", "1", "\n", "\n", "", "got_inds", "=", "_boxes", "[", ":", ",", "5", "]", ".", "reshape", "(", "[", "-", "1", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "ret_scores", "=", "use_scores", "[", "got_inds", "]", "\n", "ret_boxes", "=", "use_boxes", "[", ":", ",", ":", "4", "]", "[", "got_inds", "]", "\n", "return", "ret_boxes", ",", "ret_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.nms_all_class": [[183, 215], ["list", "list", "numpy.where", "nms_ae.nms_cpu", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "range", "range", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "numpy.ones_like"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.nms_cpu"], ["", "def", "nms_all_class", "(", "boxes", ",", "scores", ",", "classes", ",", "aes", ",", "class_num", ",", "mode", ",", "threshold", ",", "Nt", ",", "sigma", ",", "ae_dis", ",", "zero_is_back", "=", "True", ")", ":", "\n", "    ", "if", "zero_is_back", ":", "\n", "        ", "catagories", "=", "list", "(", "range", "(", "1", ",", "class_num", ")", ")", "\n", "", "else", ":", "\n", "        ", "catagories", "=", "list", "(", "range", "(", "class_num", ")", ")", "\n", "", "ret_scores", "=", "[", "]", "\n", "ret_classes", "=", "[", "]", "\n", "ret_boxes", "=", "[", "]", "\n", "for", "c", "in", "catagories", ":", "\n", "        ", "cinds", "=", "np", ".", "where", "(", "classes", "==", "c", ")", "\n", "c_boxes", "=", "boxes", "[", "cinds", "]", "\n", "c_scores", "=", "scores", "[", "cinds", "]", "\n", "c_ae", "=", "aes", "[", "cinds", "]", "\n", "\n", "nms_boxes", ",", "nms_scores", "=", "nms_cpu", "(", "c_boxes", ",", "c_scores", ",", "c_ae", ",", "mode", ",", "threshold", "=", "threshold", ",", "Nt", "=", "Nt", ",", "sigma", "=", "sigma", ",", "ae_dis_th", "=", "ae_dis", ")", "\n", "\n", "if", "nms_scores", "is", "not", "None", ":", "\n", "            ", "nms_classes", "=", "np", ".", "ones_like", "(", "nms_scores", ")", "*", "c", "\n", "ret_scores", ".", "append", "(", "nms_scores", ")", "\n", "ret_boxes", ".", "append", "(", "nms_boxes", ")", "\n", "ret_classes", ".", "append", "(", "nms_classes", ")", "\n", "\n", "", "", "if", "len", "(", "ret_scores", ")", ">", "0", ":", "\n", "        ", "ret_scores", "=", "np", ".", "concatenate", "(", "ret_scores", ",", "axis", "=", "0", ")", "\n", "ret_classes", "=", "np", ".", "concatenate", "(", "ret_classes", ",", "axis", "=", "0", ")", "\n", "ret_boxes", "=", "np", ".", "concatenate", "(", "ret_boxes", ",", "axis", "=", "0", ")", "\n", "\n", "ret_scores", "=", "[", "ret_scores", ".", "reshape", "(", "[", "-", "1", "]", ")", "]", "\n", "ret_classes", "=", "[", "ret_classes", ".", "reshape", "(", "[", "-", "1", "]", ")", "]", "\n", "ret_boxes", "=", "[", "ret_boxes", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "]", "\n", "\n", "", "return", "ret_boxes", ",", "ret_scores", ",", "ret_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.second_nms_all_class": [[216, 252], ["list", "list", "range", "nms_ae.second_nms", "len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "range", "range", "len", "numpy.where", "nms_box_list.append", "nms_scores_list.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.reshape", "np.concatenate.reshape", "np.concatenate.reshape", "numpy.ones_like"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.second_nms"], ["", "def", "second_nms_all_class", "(", "boxes", ",", "scores", ",", "classes", ",", "class_num", ",", "Nt", ",", "threshold", ",", "zero_is_back", "=", "True", ")", ":", "\n", "    ", "if", "zero_is_back", ":", "\n", "        ", "catagories", "=", "list", "(", "range", "(", "1", ",", "class_num", ")", ")", "\n", "", "else", ":", "\n", "        ", "catagories", "=", "list", "(", "range", "(", "class_num", ")", ")", "\n", "\n", "", "ret_scores", "=", "[", "]", "\n", "ret_boxes", "=", "[", "]", "\n", "ret_classes", "=", "[", "]", "\n", "\n", "for", "c", "in", "catagories", ":", "\n", "        ", "nms_box_list", "=", "[", "]", "\n", "nms_scores_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "            ", "cinds", "=", "np", ".", "where", "(", "classes", "[", "i", "]", "==", "c", ")", "\n", "c_boxes", "=", "boxes", "[", "i", "]", "[", "cinds", "]", "\n", "c_scores", "=", "scores", "[", "i", "]", "[", "cinds", "]", "\n", "nms_box_list", ".", "append", "(", "c_boxes", ")", "\n", "nms_scores_list", ".", "append", "(", "c_scores", ")", "\n", "\n", "", "nms_boxes", ",", "nms_scores", "=", "second_nms", "(", "nms_box_list", ",", "nms_scores_list", ",", "Nt", ",", "threshold", ")", "\n", "if", "nms_scores", "is", "not", "None", ":", "\n", "            ", "nms_classes", "=", "np", ".", "ones_like", "(", "nms_scores", ")", "*", "c", "\n", "ret_scores", ".", "append", "(", "nms_scores", ")", "\n", "ret_boxes", ".", "append", "(", "nms_boxes", ")", "\n", "ret_classes", ".", "append", "(", "nms_classes", ")", "\n", "\n", "", "", "if", "len", "(", "ret_scores", ")", ">", "0", ":", "\n", "        ", "ret_scores", "=", "np", ".", "concatenate", "(", "ret_scores", ",", "axis", "=", "0", ")", "\n", "ret_classes", "=", "np", ".", "concatenate", "(", "ret_classes", ",", "axis", "=", "0", ")", "\n", "ret_boxes", "=", "np", ".", "concatenate", "(", "ret_boxes", ",", "axis", "=", "0", ")", "\n", "\n", "ret_scores", "=", "[", "ret_scores", ".", "reshape", "(", "[", "-", "1", "]", ")", "]", "\n", "ret_classes", "=", "[", "ret_classes", ".", "reshape", "(", "[", "-", "1", "]", ")", "]", "\n", "ret_boxes", "=", "[", "ret_boxes", ".", "reshape", "(", "[", "-", "1", ",", "4", "]", ")", "]", "\n", "", "return", "ret_boxes", ",", "ret_scores", ",", "ret_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.moving_avg.__init__": [[12, 15], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "window_size", ")", ":", "\n", "        ", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "values", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.moving_avg.update": [[16, 22], ["len", "train.moving_avg.values.append", "train.moving_avg.values.pop", "train.moving_avg.values.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "var", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "values", ")", "<", "self", ".", "window_size", ":", "\n", "            ", "self", ".", "values", ".", "append", "(", "var", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "values", ".", "pop", "(", "0", ")", "\n", "self", ".", "values", ".", "append", "(", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.moving_avg.get_avg": [[23, 25], ["float", "numpy.mean", "numpy.array"], "methods", ["None"], ["", "", "def", "get_avg", "(", "self", ")", ":", "\n", "        ", "return", "float", "(", "np", ".", "mean", "(", "np", ".", "array", "(", "self", ".", "values", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.__init__": [[45, 72], ["nets.net_class.Nets", "len", "train.Trainer.set_dir", "kitti.kitti_dataset.create_dataset_with_batch", "citypersons.cp_dataset.create_dataset_with_batch_json", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.set_dir", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_dataset.create_dataset_with_batch", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.citypersons.cp_dataset.create_dataset_with_batch_json"], ["    ", "def", "__init__", "(", "self", ",", "train_param", ":", "train_params", ",", "net_param", ":", "net_class", ".", "nets_params", ",", "preprocess_fn", ",", "image_dir", ",", "annotation", ",", "gpus", ",", "data", ")", ":", "\n", "        ", "self", ".", "train_param", "=", "train_param", "\n", "self", ".", "net_param", "=", "net_param", "\n", "self", ".", "preprocess_fn", "=", "preprocess_fn", "\n", "self", ".", "nets", "=", "net_class", ".", "Nets", "(", "self", ".", "net_param", ")", "\n", "\n", "\n", "#create tensorflow datset", "\n", "if", "data", "==", "'kitti'", ":", "\n", "            ", "self", ".", "dataset", ",", "self", ".", "batch_step", "=", "kitti_dataset", ".", "create_dataset_with_batch", "(", "image_dir", ",", "annotation", ",", "self", ".", "train_param", ".", "batch_size", ")", "\n", "", "elif", "data", "==", "'cityperson'", ":", "\n", "            ", "self", ".", "dataset", ",", "self", ".", "batch_step", "=", "cp_dataset", ".", "create_dataset_with_batch_json", "(", "image_dir", ",", "annotation", ",", "self", ".", "train_param", ".", "batch_size", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'dataset error!'", ")", "\n", "", "self", ".", "gpu_num", "=", "len", "(", "gpus", ")", "\n", "self", ".", "set_dir", "(", ")", "\n", "\n", "if", "self", ".", "net_param", ".", "net", "==", "'resnet_50_v1'", ":", "\n", "            ", "self", ".", "back_net", "=", "'resnet_v1_50'", "\n", "", "elif", "self", ".", "net_param", ".", "net", "==", "'resnet_101_v1'", ":", "\n", "            ", "self", ".", "back_net", "=", "'resnet_v1_101'", "\n", "", "elif", "self", ".", "net_param", ".", "net", "==", "'resnet_50_v2'", ":", "\n", "            ", "self", ".", "back_net", "=", "'resnet_v2_50'", "\n", "", "elif", "self", ".", "net_param", ".", "net", "==", "'resnet_101_v2'", ":", "\n", "            ", "self", ".", "back_net", "=", "'resnet_v2_101'", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid backbone!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.set_dir": [[73, 81], ["os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir"], "methods", ["None"], ["", "", "def", "set_dir", "(", "self", ")", ":", "\n", "        ", "train_log_dir", "=", "self", ".", "train_param", ".", "train_log_dir", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "train_log_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "train_log_dir", ")", "\n", "\n", "", "train_model_dir", "=", "self", ".", "train_param", ".", "train_model_dir", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "train_model_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "train_model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.record": [[85, 103], ["print", "print", "print", "enumerate", "print", "open", "open.write", "open.write", "open.write", "enumerate", "open.write", "open.close", "print", "os.path.join", "open.write", "mavgs[].get_avg", "mavgs[].get_avg"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.moving_avg.get_avg", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.moving_avg.get_avg"], ["", "", "def", "record", "(", "self", ",", "log_file_name", ",", "during", ",", "epoch", ",", "global_step", ",", "print_names", ",", "mavgs", ",", "is_log", ")", ":", "\n", "        ", "if", "is_log", ":", "\n", "            ", "f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "train_param", ".", "train_log_dir", ",", "log_file_name", "+", "'.txt'", ")", ",", "'a'", ")", "\n", "f", ".", "write", "(", "'Time: %d\\n'", "%", "during", ")", "\n", "f", ".", "write", "(", "'Epoch num: %d\\n'", "%", "epoch", ")", "\n", "f", ".", "write", "(", "'Step num: %d\\n'", "%", "global_step", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "print_names", ")", ":", "\n", "                ", "f", ".", "write", "(", "'%s: %5f\\n'", "%", "(", "name", ",", "mavgs", "[", "i", "]", ".", "get_avg", "(", ")", ")", ")", "\n", "", "f", ".", "write", "(", "'\\n\\n'", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "# print", "\n", "", "print", "(", "'Time: %d'", "%", "during", ")", "\n", "print", "(", "'Epoch num: %d'", "%", "epoch", ")", "\n", "print", "(", "'Step num: %d'", "%", "global_step", ")", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "print_names", ")", ":", "\n", "            ", "print", "(", "'%s: %5f'", "%", "(", "name", ",", "mavgs", "[", "i", "]", ".", "get_avg", "(", ")", ")", ")", "\n", "", "print", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.average_gradients": [[104, 140], ["zip", "tensorflow.concat", "tensorflow.concat", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "average_grads.append", "tensorflow.expand_dims", "tensorflow.expand_dims", "grads.append"], "methods", ["None"], ["", "def", "average_gradients", "(", "self", ",", "tower_grads", ")", ":", "\n", "        ", "\"\"\"Calculate average gradient for each shared variable across all towers.\n        Note that this function provides a synchronization point across all towers.\n        Args:\n          tower_grads: List of lists of (gradient, variable) tuples. The outer list\n            is over individual gradients. The inner list is over the gradient\n            calculation for each tower.\n        Returns:\n           List of pairs of (gradient, variable) where the gradient has been\n           averaged across all towers.\n\n        reference: https://github.com/normanheckscher/mnist-multi-gpu\n        \"\"\"", "\n", "average_grads", "=", "[", "]", "\n", "for", "grad_and_vars", "in", "zip", "(", "*", "tower_grads", ")", ":", "\n", "# Note that each grad_and_vars looks like the following:", "\n", "#   ((grad0_gpu0, var0_gpu0), ... , (grad0_gpuN, var0_gpuN))", "\n", "            ", "grads", "=", "[", "]", "\n", "for", "g", ",", "_", "in", "grad_and_vars", ":", "\n", "# Add 0 dimension to the gradients to represent the tower.", "\n", "                ", "expanded_g", "=", "tf", ".", "expand_dims", "(", "g", ",", "0", ")", "\n", "\n", "# Append on a 'tower' dimension which we will average over below.", "\n", "grads", ".", "append", "(", "expanded_g", ")", "\n", "\n", "# Average over the 'tower' dimension.", "\n", "", "grad", "=", "tf", ".", "concat", "(", "grads", ",", "0", ")", "\n", "grad", "=", "tf", ".", "reduce_mean", "(", "grad", ",", "0", ")", "\n", "\n", "# Keep in mind that the Variables are redundant because they are shared", "\n", "# across towers. So .. we will just return the first tower's pointer to", "\n", "# the Variable.", "\n", "v", "=", "grad_and_vars", "[", "0", "]", "[", "1", "]", "\n", "grad_and_var", "=", "(", "grad", ",", "v", ")", "\n", "average_grads", ".", "append", "(", "grad_and_var", ")", "\n", "", "return", "average_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.train_multiple_gpu": [[141, 218], ["train.Trainer.dataset.make_initializable_iterator", "tensorflow.device", "tensorflow.device", "train.Trainer.get_next", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.split", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.train.exponential_decay", "tensorflow.train.exponential_decay", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "train.Trainer.average_gradients", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.variable_scope", "tensorflow.variable_scope", "range", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.control_dependencies", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.get_variables_to_restore", "tensorflow.get_variables_to_restore", "list", "tensorflow.get_variables_to_restore", "tensorflow.get_variables_to_restore", "list", "tensorflow.assign_from_checkpoint", "tensorflow.assign_from_checkpoint", "tensorflow.initializers.variables", "tensorflow.initializers.variables", "tensorflow.get_variables_to_restore", "tensorflow.get_variables_to_restore", "tensorflow.get_variables_to_restore", "tensorflow.get_variables_to_restore", "tensorflow.assign_from_checkpoint", "tensorflow.assign_from_checkpoint", "tensorflow.initializers.variables", "tensorflow.initializers.variables", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope", "tensorflow.concat", "tensorflow.concat", "var.op.name.replace", "tensorflow.get_variables_by_suffix", "tensorflow.get_variables_by_suffix", "tensorflow.get_variables_by_suffix", "tensorflow.get_variables_by_suffix", "train.Trainer.train_multiple_gpu.tensor_in_resnet"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.average_gradients"], ["", "def", "train_multiple_gpu", "(", "self", ",", "continue_train", ")", ":", "\n", "\n", "        ", "iterator", "=", "self", ".", "dataset", ".", "make_initializable_iterator", "(", ")", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "\n", "            ", "images", ",", "labels", ",", "bboxes", "=", "iterator", ".", "get_next", "(", ")", "\n", "images_sp", "=", "tf", ".", "split", "(", "images", ",", "self", ".", "gpu_num", ")", "\n", "labels_sp", "=", "tf", ".", "split", "(", "labels", ",", "self", ".", "gpu_num", ")", "\n", "bboxes_sp", "=", "tf", ".", "split", "(", "bboxes", ",", "self", ".", "gpu_num", ")", "\n", "\n", "\n", "tensor_mean_dict", "=", "{", "}", "\n", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "name", "=", "'global_step'", ")", "\n", "lr", "=", "tf", ".", "Variable", "(", "self", ".", "train_param", ".", "learning_rate", ",", "trainable", "=", "False", ",", "name", "=", "'learning_rate'", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "lr_decayed", "=", "tf", ".", "train", ".", "exponential_decay", "(", "lr", ",", "global_step", ",", "\n", "decay_steps", "=", "self", ".", "train_param", ".", "decay_epoch", "*", "self", ".", "batch_step", ",", "\n", "decay_rate", "=", "self", ".", "train_param", ".", "decay_rate", ",", "\n", "staircase", "=", "True", ")", "\n", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr_decayed", ",", "use_locking", "=", "True", ")", "# .minimize(total_loss, colocate_gradients_with_ops=True)", "\n", "#train_op = optimizer.minimize(total_loss, global_step, colocate_gradients_with_ops=True)", "\n", "\n", "tower_grads", "=", "[", "]", "\n", "with", "tf", ".", "variable_scope", "(", "tf", ".", "get_variable_scope", "(", ")", ")", ":", "\n", "                ", "for", "gpu_id", "in", "range", "(", "self", ".", "gpu_num", ")", ":", "\n", "                    ", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "gpu_id", ")", ":", "\n", "                        ", "with", "tf", ".", "name_scope", "(", "'Tower_%d'", "%", "gpu_id", ")", "as", "scope", ":", "\n", "                            ", "tensor_dict", ",", "print_names", "=", "self", ".", "nets", ".", "train_cascade", "(", "images_sp", "[", "gpu_id", "]", ",", "labels_sp", "[", "gpu_id", "]", ",", "bboxes_sp", "[", "gpu_id", "]", ",", "\n", "self", ".", "preprocess_fn", ",", "\n", "self", ".", "train_param", ".", "batch_size", "//", "self", ".", "gpu_num", ")", "\n", "_loss", "=", "tensor_dict", "[", "'Total loss'", "]", "\n", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "grads", "=", "opt", ".", "compute_gradients", "(", "_loss", ",", "gate_gradients", "=", "0", ")", "\n", "tower_grads", ".", "append", "(", "grads", ")", "\n", "\n", "for", "name", "in", "print_names", ":", "\n", "                                ", "if", "name", "not", "in", "tensor_mean_dict", ":", "\n", "                                    ", "tensor_mean_dict", "[", "name", "]", "=", "[", "]", "\n", "", "tensor_mean_dict", "[", "name", "]", ".", "append", "(", "tf", ".", "expand_dims", "(", "tensor_dict", "[", "name", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "", "", "", "", "for", "name", "in", "print_names", ":", "\n", "                ", "tensor_mean_dict", "[", "name", "]", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "concat", "(", "tensor_mean_dict", "[", "name", "]", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "grads", "=", "self", ".", "average_gradients", "(", "tower_grads", ")", "\n", "\n", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "tf", ".", "group", "(", "*", "update_ops", ")", "]", ")", ":", "\n", "                ", "train_op", "=", "opt", ".", "apply_gradients", "(", "grads", ",", "global_step", "=", "global_step", ")", "\n", "\n", "\n", "#all_tensor = [n.name for n in tf.get_default_graph().as_graph_def().node]", "\n", "#for tensor in all_tensor:", "\n", "#    print(tensor)", "\n", "\n", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "sharded", "=", "True", ")", "\n", "if", "not", "continue_train", ":", "\n", "                ", "def", "tensor_in_resnet", "(", "var", ",", "net", ")", ":", "\n", "                    ", "return", "var", ".", "op", ".", "name", ".", "replace", "(", "net", "+", "'/'", "+", "self", ".", "back_net", ",", "self", ".", "back_net", ")", "\n", "\n", "", "vars_adam", "=", "slim", ".", "get_variables_by_suffix", "(", "\"Adam\"", ")", "+", "slim", ".", "get_variables_by_suffix", "(", "\"Adam_1\"", ")", "\n", "vars_to_init1", "=", "slim", ".", "get_variables_to_restore", "(", "include", "=", "[", "self", ".", "train_param", ".", "net", "+", "'/'", "+", "self", ".", "back_net", "]", ")", "\n", "vars_to_init1", "=", "list", "(", "set", "(", "vars_to_init1", ")", "-", "set", "(", "vars_adam", ")", ")", "\n", "vars_to_init1", "=", "{", "tensor_in_resnet", "(", "var", ",", "self", ".", "train_param", ".", "net", ")", ":", "var", "for", "var", "in", "vars_to_init1", "}", "\n", "\n", "vars_to_init2", "=", "slim", ".", "get_variables_to_restore", "(", "exclude", "=", "[", "self", ".", "train_param", ".", "net", "+", "'/'", "+", "self", ".", "back_net", "]", ")", "\n", "vars_to_init2", "=", "list", "(", "set", "(", "vars_to_init2", ")", "|", "set", "(", "vars_adam", ")", ")", "\n", "init_op1", ",", "init_feed_dict1", "=", "slim", ".", "assign_from_checkpoint", "(", "self", ".", "train_param", ".", "backbone_model", ",", "vars_to_init1", ")", "\n", "init_op2", "=", "tf", ".", "initializers", ".", "variables", "(", "vars_to_init2", ")", "\n", "", "else", ":", "\n", "                ", "vars_to_init1", "=", "slim", ".", "get_variables_to_restore", "(", "exclude", "=", "[", "'learning_rate, global_step'", "]", ")", "\n", "vars_to_init2", "=", "slim", ".", "get_variables_to_restore", "(", "include", "=", "[", "'learning_rate, global_step'", "]", ")", "\n", "\n", "init_op1", ",", "init_feed_dict1", "=", "slim", ".", "assign_from_checkpoint", "(", "self", ".", "train_param", ".", "fine_tune_model", ",", "vars_to_init1", ")", "\n", "init_op2", "=", "tf", ".", "initializers", ".", "variables", "(", "vars_to_init2", ")", "\n", "", "return", "iterator", ",", "init_op1", ",", "init_feed_dict1", ",", "init_op2", ",", "saver", ",", "train_op", ",", "tensor_mean_dict", ",", "print_names", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.train_single_gpu": [[219, 256], ["train.Trainer.dataset.make_initializable_iterator", "train.Trainer.get_next", "tensorflow.placeholder", "tensorflow.placeholder", "train.Trainer.nets.get_train_ops", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.minimize", "tensorflow.train.Saver", "tensorflow.train.Saver", "tensorflow.get_variables_to_restore", "tensorflow.get_variables_to_restore", "list", "tensorflow.get_variables_to_restore", "tensorflow.get_variables_to_restore", "list", "tensorflow.assign_from_checkpoint", "tensorflow.assign_from_checkpoint", "tensorflow.initializers.variables", "tensorflow.initializers.variables", "tensorflow.get_variables_to_restore", "tensorflow.get_variables_to_restore", "tensorflow.get_variables_to_restore", "tensorflow.get_variables_to_restore", "tensorflow.assign_from_checkpoint", "tensorflow.assign_from_checkpoint", "tensorflow.initializers.variables", "tensorflow.initializers.variables", "var.op.name.replace", "tensorflow.get_variables_by_suffix", "tensorflow.get_variables_by_suffix", "tensorflow.get_variables_by_suffix", "tensorflow.get_variables_by_suffix", "train.Trainer.train_multiple_gpu.tensor_in_resnet"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.get_train_ops"], ["", "", "def", "train_single_gpu", "(", "self", ",", "continue_train", ")", ":", "\n", "        ", "iterator", "=", "self", ".", "dataset", ".", "make_initializable_iterator", "(", ")", "\n", "images", ",", "labels", ",", "bboxes", "=", "iterator", ".", "get_next", "(", ")", "\n", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "\n", "tensor_dict", ",", "print_names", "=", "self", ".", "nets", ".", "get_train_ops", "(", "images", ",", "labels", ",", "\n", "bboxes", ",", "\n", "self", ".", "preprocess_fn", ",", "\n", "self", ".", "train_param", ".", "batch_size", ")", "\n", "total_loss", "=", "tensor_dict", "[", "'Total loss'", "]", "\n", "\n", "\n", "opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "lr", ")", "\n", "train_op", "=", "opt", ".", "minimize", "(", "total_loss", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "if", "not", "continue_train", ":", "\n", "            ", "def", "tensor_in_resnet", "(", "var", ",", "net", ")", ":", "\n", "                ", "return", "var", ".", "op", ".", "name", ".", "replace", "(", "net", "+", "'/'", "+", "self", ".", "back_net", ",", "self", ".", "back_net", ")", "\n", "\n", "", "vars_adam", "=", "slim", ".", "get_variables_by_suffix", "(", "\"Adam\"", ")", "+", "slim", ".", "get_variables_by_suffix", "(", "\"Adam_1\"", ")", "\n", "#vars_adam = slim.get_variables_by_suffix(\"Momentum\") + slim.get_variables_by_suffix(\"Momentum_1\")", "\n", "vars_to_init1", "=", "slim", ".", "get_variables_to_restore", "(", "include", "=", "[", "self", ".", "train_param", ".", "net", "+", "'/'", "+", "self", ".", "back_net", "]", ")", "\n", "vars_to_init1", "=", "list", "(", "set", "(", "vars_to_init1", ")", "-", "set", "(", "vars_adam", ")", ")", "\n", "vars_to_init1", "=", "{", "tensor_in_resnet", "(", "var", ",", "self", ".", "train_param", ".", "net", ")", ":", "var", "for", "var", "in", "vars_to_init1", "}", "\n", "\n", "vars_to_init2", "=", "slim", ".", "get_variables_to_restore", "(", "exclude", "=", "[", "self", ".", "train_param", ".", "net", "+", "'/'", "+", "self", ".", "back_net", "]", ")", "\n", "vars_to_init2", "=", "list", "(", "set", "(", "vars_to_init2", ")", "|", "set", "(", "vars_adam", ")", ")", "\n", "init_op1", ",", "init_feed_dict1", "=", "slim", ".", "assign_from_checkpoint", "(", "self", ".", "train_param", ".", "backbone_model", ",", "vars_to_init1", ")", "\n", "init_op2", "=", "tf", ".", "initializers", ".", "variables", "(", "vars_to_init2", ")", "\n", "", "else", ":", "\n", "            ", "vars_to_init1", "=", "slim", ".", "get_variables_to_restore", "(", "exclude", "=", "[", "'learning_rate, global_step'", "]", ")", "\n", "vars_to_init2", "=", "slim", ".", "get_variables_to_restore", "(", "include", "=", "[", "'learning_rate, global_step'", "]", ")", "\n", "\n", "init_op1", ",", "init_feed_dict1", "=", "slim", ".", "assign_from_checkpoint", "(", "self", ".", "train_param", ".", "fine_tune_model", ",", "vars_to_init1", ")", "\n", "init_op2", "=", "tf", ".", "initializers", ".", "variables", "(", "vars_to_init2", ")", "\n", "", "return", "iterator", ",", "init_op1", ",", "init_feed_dict1", ",", "init_op2", ",", "saver", ",", "train_op", ",", "lr", ",", "tensor_dict", ",", "print_names", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.test": [[257, 259], ["train.Trainer.train_multiple_gpu"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.train_multiple_gpu"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_multiple_gpu", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.learning_rate_schedule": [[260, 280], ["enumerate"], "methods", ["None"], ["", "def", "learning_rate_schedule", "(", "self", ",", "step", ")", ":", "\n", "        ", "warm_up_window", "=", "10", "\n", "decay_window", "=", "10000", "\n", "\n", "if", "step", "<", "warm_up_window", ":", "\n", "            ", "r", "=", "(", "0.9", "/", "warm_up_window", ")", "*", "step", "+", "0.1", "\n", "", "else", ":", "\n", "            ", "for", "i", ",", "ds", "in", "enumerate", "(", "self", ".", "train_param", ".", "decay_steps", ")", ":", "\n", "                ", "if", "step", "<", "ds", ":", "\n", "                    ", "break", "\n", "", "", "if", "i", "==", "0", ":", "\n", "                ", "r", "=", "1.", "\n", "", "else", ":", "\n", "                ", "delta", "=", "step", "-", "self", ".", "train_param", ".", "decay_steps", "[", "i", "-", "1", "]", "\n", "if", "delta", "<", "decay_window", ":", "\n", "                    ", "_r", "=", "1", "-", "(", "(", "1", "-", "self", ".", "train_param", ".", "decay_rate", ")", "/", "decay_window", ")", "*", "delta", "\n", "r", "=", "self", ".", "train_param", ".", "decay_rate", "**", "(", "i", "-", "1.", ")", "*", "_r", "\n", "", "else", ":", "\n", "                    ", "r", "=", "self", ".", "train_param", ".", "decay_rate", "**", "i", "\n", "", "", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.train": [[282, 331], ["train.Trainer.train_single_gpu", "len", "time.time", "tensorflow.ConfigProto", "tensorflow.ConfigProto", "tensors_to_run.append", "train.moving_avg", "tensorflow.Session", "tensorflow.Session", "range", "range", "sess.run", "sess.run", "sess.run", "sess.run", "saver.restore", "range", "saver.save", "train.Trainer.learning_rate_schedule", "sess.run", "range", "open", "int", "open.close", "os.path.join", "len", "mavgs[].update", "train.Trainer.record", "saver.save", "print", "open.readline().strip", "os.path.join", "time.time", "open.readline", "log_file_name.split", "log_file_name.split", "log_file_name.split"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.train_single_gpu", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.Trainer.learning_rate_schedule", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.train.train.moving_avg.update", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.record"], ["", "def", "train", "(", "self", ",", "continue_train", ",", "log_file_name", ",", "is_log", ")", ":", "\n", "#iterator, init_op1, init_feed_dict1, init_op2, saver, train_op, tensor_mean_dict, print_names = self.train_multiple_gpu(continue_train)", "\n", "        ", "iterator", ",", "init_op1", ",", "init_feed_dict1", ",", "init_op2", ",", "saver", ",", "train_op", ",", "lr", ",", "tensor_mean_dict", ",", "print_names", "=", "self", ".", "train_single_gpu", "(", "continue_train", ")", "\n", "tensors_to_run", "=", "[", "train_op", "]", "\n", "for", "name", "in", "print_names", ":", "\n", "            ", "tensors_to_run", ".", "append", "(", "tensor_mean_dict", "[", "name", "]", ")", "\n", "\n", "", "window_size", "=", "self", ".", "train_param", ".", "log_step", "\n", "supervised_num", "=", "len", "(", "print_names", ")", "\n", "mavgs", "=", "[", "moving_avg", "(", "window_size", ")", "for", "_", "in", "range", "(", "supervised_num", ")", "]", "\n", "\n", "global_step", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config", ")", "as", "sess", ":", "\n", "            ", "if", "not", "continue_train", ":", "\n", "                ", "sess", ".", "run", "(", "init_op1", ",", "init_feed_dict1", ")", "\n", "sess", ".", "run", "(", "init_op2", ")", "\n", "sess", ".", "run", "(", "iterator", ".", "initializer", ")", "\n", "", "else", ":", "\n", "                ", "sess", ".", "run", "(", "iterator", ".", "initializer", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "self", ".", "train_param", ".", "fine_tune_model", ")", "\n", "\n", "", "global_step", "+=", "1", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "train_param", ".", "epoch_num", ")", ":", "\n", "                ", "for", "step", "in", "range", "(", "self", ".", "batch_step", ")", ":", "\n", "                    ", "r", "=", "self", ".", "learning_rate_schedule", "(", "global_step", ")", "\n", "global_step", "+=", "1", "\n", "results_list", "=", "sess", ".", "run", "(", "tensors_to_run", ",", "feed_dict", "=", "{", "lr", ":", "r", "*", "self", ".", "train_param", ".", "learning_rate", "}", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "results_list", ")", ")", ":", "\n", "                        ", "mavgs", "[", "i", "-", "1", "]", ".", "update", "(", "results_list", "[", "i", "]", ")", "\n", "\n", "", "if", "global_step", "%", "self", ".", "train_param", ".", "log_step", "==", "0", ":", "\n", "                        ", "self", ".", "record", "(", "log_file_name", ",", "time", ".", "time", "(", ")", "-", "start_time", ",", "epoch", ",", "global_step", ",", "print_names", ",", "mavgs", ",", "is_log", ")", "\n", "\n", "", "if", "global_step", "in", "self", ".", "train_param", ".", "save_steps", ":", "\n", "                        ", "saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "self", ".", "train_param", ".", "train_model_dir", ",", "'model_'", "+", "log_file_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.ckpt'", ")", ",", "global_step", "=", "global_step", ")", "\n", "print", "(", "'model_'", "+", "log_file_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.ckpt'", "+", "' is saved!!'", ")", "\n", "\n", "", "", "try", ":", "\n", "                    ", "ef", "=", "open", "(", "self", ".", "train_param", ".", "emergency_save_file", ",", "'r'", ")", "\n", "e_epoch", "=", "int", "(", "ef", ".", "readline", "(", ")", ".", "strip", "(", ")", ")", "\n", "ef", ".", "close", "(", ")", "\n", "", "except", ":", "\n", "                    ", "e_epoch", "=", "999", "\n", "\n", "", "saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "self", ".", "train_param", ".", "train_model_dir", ",", "'latestModel_'", "+", "log_file_name", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.ckpt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.__init__": [[17, 25], ["nets.net_class.Nets"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "net_param", ":", "net_class", ".", "nets_params", ",", "img_shape", ",", "process_fn", ",", "model", ",", "out_txt_dir", ")", ":", "\n", "        ", "self", ".", "process_fn", "=", "process_fn", "\n", "self", ".", "net_param", "=", "net_param", "\n", "self", ".", "nets", "=", "net_class", ".", "Nets", "(", "self", ".", "net_param", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "out_txt_dir", "=", "out_txt_dir", "\n", "self", ".", "img_shape", "=", "img_shape", "\n", "self", ".", "class_num", "=", "self", ".", "net_param", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.set_dir": [[26, 30], ["os.path.isdir", "os.mkdir", "shutil.rmtree"], "methods", ["None"], ["", "def", "set_dir", "(", "self", ",", "out_dir", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "out_dir", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "out_dir", ")", "\n", "", "os", ".", "mkdir", "(", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.read_img": [[31, 39], ["tensorflow.read_file", "tensorflow.image.decode_png", "tensorflow.cast", "tensorflow.div", "inference_nms.Tester.process_fn", "tensorflow.expand_dims"], "methods", ["None"], ["", "def", "read_img", "(", "self", ",", "img_place", ")", ":", "\n", "        ", "img_string", "=", "tf", ".", "read_file", "(", "img_place", ")", "\n", "img", "=", "tf", ".", "image", ".", "decode_png", "(", "img_string", ")", "\n", "img", "=", "tf", ".", "cast", "(", "img", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "img", "=", "tf", ".", "div", "(", "img", ",", "255.", ")", "\n", "_image", "=", "self", ".", "process_fn", "(", "img", ",", "self", ".", "net_param", ".", "net_shape", ")", "\n", "image_4d", "=", "tf", ".", "expand_dims", "(", "_image", ",", "axis", "=", "0", ")", "\n", "return", "image_4d", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.get_test_imgs": [[40, 45], ["os.listdir", "enumerate", "os.path.join"], "methods", ["None"], ["", "def", "get_test_imgs", "(", "self", ",", "dir", ")", ":", "\n", "        ", "file_list", "=", "os", ".", "listdir", "(", "dir", ")", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "file_list", ")", ":", "\n", "            ", "file_list", "[", "i", "]", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "f", ")", "\n", "", "return", "file_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.post_process": [[46, 109], ["len", "range", "nms.nms_ae.second_nms_all_class", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "nms.nms_ae.nms_all_class", "nms.nms_ae.nms_all_class", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "len", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.second_nms_all_class", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.nms_all_class", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nms.nms_ae.nms_all_class"], ["", "def", "post_process", "(", "self", ",", "roi_result_all_layer", ",", "\n", "class_result_all_layer", ",", "\n", "scores_result_all_layer", ",", "\n", "ae_result_all_layer", ",", "\n", "nms_mode", ",", "\n", "ths", ",", "Nts", ",", "\n", "second_nms", ",", "th2", ",", "Nt2", ",", "\n", "sigma", ",", "ae_dis", ")", ":", "\n", "\n", "        ", "if", "second_nms", ":", "\n", "            ", "nms_box_all_layer", "=", "[", "]", "\n", "nms_score_all_layer", "=", "[", "]", "\n", "nms_class_all_layer", "=", "[", "]", "\n", "\n", "layer_num", "=", "len", "(", "roi_result_all_layer", ")", "\n", "for", "l", "in", "range", "(", "layer_num", ")", ":", "\n", "                ", "nms_boxes", ",", "nms_scores", ",", "nms_classes", "=", "nms_ae", ".", "nms_all_class", "(", "np", ".", "array", "(", "roi_result_all_layer", "[", "l", "]", ")", ",", "\n", "np", ".", "array", "(", "scores_result_all_layer", "[", "l", "]", ")", ",", "\n", "np", ".", "array", "(", "class_result_all_layer", "[", "l", "]", ")", ",", "\n", "np", ".", "array", "(", "ae_result_all_layer", "[", "l", "]", ")", ",", "\n", "class_num", "=", "2", ",", "\n", "mode", "=", "nms_mode", ",", "\n", "threshold", "=", "ths", "[", "l", "]", ",", "Nt", "=", "Nts", "[", "l", "]", ",", "\n", "sigma", "=", "sigma", ",", "ae_dis", "=", "ae_dis", "[", "l", "]", ")", "\n", "nms_box_all_layer", "=", "nms_box_all_layer", "+", "nms_boxes", "\n", "nms_score_all_layer", "=", "nms_score_all_layer", "+", "nms_scores", "\n", "nms_class_all_layer", "=", "nms_class_all_layer", "+", "nms_classes", "\n", "\n", "", "if", "not", "len", "(", "nms_box_all_layer", ")", ">", "0", ":", "\n", "                ", "return", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", "\n", "", "nms_boxes_2", ",", "nms_scores_2", ",", "nms_classes_2", "=", "nms_ae", ".", "second_nms_all_class", "(", "nms_box_all_layer", ",", "\n", "nms_score_all_layer", ",", "\n", "nms_class_all_layer", ",", "\n", "class_num", "=", "2", ",", "\n", "Nt", "=", "Nt2", ",", "threshold", "=", "th2", ")", "\n", "if", "len", "(", "nms_boxes_2", ")", ">", "0", ":", "\n", "                ", "final_boxes", "=", "nms_boxes_2", "[", "0", "]", "\n", "final_scores", "=", "nms_scores_2", "[", "0", "]", "\n", "final_classes", "=", "nms_classes_2", "[", "0", "]", "\n", "return", "final_boxes", ",", "final_scores", ",", "final_classes", "\n", "", "else", ":", "\n", "                ", "return", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "box_flatten", "=", "np", ".", "concatenate", "(", "roi_result_all_layer", ",", "axis", "=", "0", ")", "\n", "score_flatten", "=", "np", ".", "concatenate", "(", "scores_result_all_layer", ",", "axis", "=", "0", ")", "\n", "class_flatten", "=", "np", ".", "concatenate", "(", "class_result_all_layer", ",", "axis", "=", "0", ")", "\n", "ae_flatten", "=", "np", ".", "concatenate", "(", "ae_result_all_layer", ",", "axis", "=", "0", ")", "\n", "nms_boxes", ",", "nms_scores", ",", "nms_classes", "=", "nms_ae", ".", "nms_all_class", "(", "np", ".", "array", "(", "box_flatten", ")", ",", "\n", "np", ".", "array", "(", "score_flatten", ")", ",", "\n", "np", ".", "array", "(", "class_flatten", ")", ",", "\n", "np", ".", "array", "(", "ae_flatten", ")", ",", "\n", "class_num", "=", "2", ",", "\n", "mode", "=", "nms_mode", ",", "\n", "threshold", "=", "ths", "[", "0", "]", ",", "Nt", "=", "Nts", "[", "0", "]", ",", "\n", "sigma", "=", "sigma", ",", "ae_dis", "=", "ae_dis", "[", "0", "]", ")", "\n", "\n", "if", "not", "len", "(", "nms_boxes", ")", ">", "0", ":", "\n", "                ", "return", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", ",", "np", ".", "array", "(", "[", "]", ")", "\n", "", "else", ":", "\n", "                ", "final_boxes", "=", "np", ".", "array", "(", "nms_boxes", "[", "0", "]", ")", "\n", "final_scores", "=", "np", ".", "array", "(", "nms_scores", "[", "0", "]", ")", "\n", "final_class", "=", "np", ".", "array", "(", "nms_classes", "[", "0", "]", ")", "\n", "return", "final_boxes", ",", "final_scores", ",", "final_class", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.record": [[113, 128], ["open", "numpy.round", "range", "open.close", "open.close", "numpy.array", "open.write"], "methods", ["None"], ["", "", "", "def", "record", "(", "self", ",", "out_name", ",", "boxes", ",", "scores", ",", "classes", ",", "ih", ",", "iw", ")", ":", "\n", "        ", "fw", "=", "open", "(", "out_name", ",", "'w'", ")", "\n", "n", "=", "boxes", ".", "shape", "[", "0", "]", "\n", "if", "n", "==", "0", ":", "\n", "            ", "fw", ".", "close", "(", ")", "\n", "return", "\n", "", "boxes", "=", "boxes", "*", "np", ".", "array", "(", "[", "[", "ih", ",", "iw", ",", "ih", ",", "iw", "]", "]", ")", "\n", "boxes", "=", "np", ".", "round", "(", "boxes", ")", "\n", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "            ", "fw", ".", "write", "(", "'%d %d %d %d %d %.5f\\n'", "%", "(", "\n", "classes", "[", "j", "]", ",", "\n", "boxes", "[", "j", ",", "0", "]", ",", "boxes", "[", "j", ",", "1", "]", ",", "boxes", "[", "j", ",", "2", "]", ",", "boxes", "[", "j", ",", "3", "]", ",", "\n", "scores", "[", "j", "]", ")", ")", "\n", "", "fw", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.record_list": [[129, 147], ["open", "len", "range", "open.close", "range", "numpy.array", "open.write"], "methods", ["None"], ["", "def", "record_list", "(", "self", ",", "out_name", ",", "box_list", ",", "class_list", ",", "score_list", ",", "ae_list", ",", "ih", ",", "iw", ")", ":", "\n", "        ", "fw", "=", "open", "(", "out_name", ",", "'w'", ")", "\n", "layer_num", "=", "len", "(", "box_list", ")", "\n", "\n", "for", "l", "in", "range", "(", "layer_num", ")", ":", "\n", "            ", "box_l", "=", "box_list", "[", "l", "]", "\n", "box_l", "=", "box_l", "*", "np", ".", "array", "(", "[", "[", "ih", ",", "iw", ",", "ih", ",", "iw", "]", "]", ")", "\n", "\n", "score_l", "=", "score_list", "[", "l", "]", "\n", "class_l", "=", "class_list", "[", "l", "]", "\n", "ae_l", "=", "ae_list", "[", "l", "]", "\n", "\n", "n", "=", "box_l", ".", "shape", "[", "0", "]", "\n", "for", "j", "in", "range", "(", "n", ")", ":", "\n", "                ", "line", "=", "'%d %d %d %d %d %.5f %d %.5f'", "%", "(", "\n", "class_l", "[", "j", "]", ",", "box_l", "[", "j", ",", "0", "]", ",", "box_l", "[", "j", ",", "1", "]", ",", "box_l", "[", "j", ",", "2", "]", ",", "box_l", "[", "j", ",", "3", "]", ",", "score_l", "[", "j", "]", ",", "l", ",", "ae_l", "[", "j", "]", ")", "\n", "fw", ".", "write", "(", "'%s\\n'", "%", "line", ")", "\n", "", "", "fw", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run": [[148, 196], ["inference_nms.Tester.get_test_imgs", "inference_nms.Tester.set_dir", "tensorflow.reset_default_graph", "tensorflow.placeholder", "inference_nms.Tester.read_img", "inference_nms.Tester.nets.get_test_ops", "len", "tensorflow.train.Saver", "time.time", "print", "len", "tensorflow.Session", "tensorflow.train.Saver.restore", "tqdm.tqdm.tqdm", "range", "cv2.imread", "sess.run", "list", "list", "list", "list", "inference_nms.Tester.post_process", "os.path.join", "[].replace", "inference_nms.Tester.record", "inference_nms.Tester.record_list", "time.time", "os.path.split"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.get_test_imgs", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.set_dir", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.read_img", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.get_test_ops", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.post_process", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.record", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.record_list"], ["", "def", "run", "(", "self", ",", "test_img_dir", ",", "nms_param", ",", "is_list", ",", "eval_num", "=", "0", ")", ":", "\n", "        ", "file_list", "=", "self", ".", "get_test_imgs", "(", "test_img_dir", ")", "\n", "if", "eval_num", "==", "0", ":", "\n", "            ", "test_num", "=", "len", "(", "file_list", ")", "\n", "", "else", ":", "\n", "            ", "test_num", "=", "eval_num", "\n", "\n", "", "self", ".", "set_dir", "(", "self", ".", "out_txt_dir", ")", "\n", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "img_place", "=", "tf", ".", "placeholder", "(", "tf", ".", "string", ")", "\n", "image_4d", "=", "self", ".", "read_img", "(", "img_place", ")", "\n", "rois_all_layer", ",", "class_all_layer", ",", "scores_all_layer", ",", "ae_all_layer", "=", "self", ".", "nets", ".", "get_test_ops", "(", "image_4d", ")", "\n", "\n", "layer_num", "=", "len", "(", "rois_all_layer", ")", "\n", "\n", "tensor_to_run", "=", "rois_all_layer", "+", "class_all_layer", "+", "scores_all_layer", "+", "ae_all_layer", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "            ", "saver", ".", "restore", "(", "sess", ",", "self", ".", "model", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "test_num", ")", ",", "desc", "=", "'Inference'", ")", ":", "\n", "                ", "img_name", "=", "file_list", "[", "i", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "img_name", ")", "\n", "ih", ",", "iw", "=", "img", ".", "shape", "[", "0", ":", "2", "]", "\n", "results", "=", "sess", ".", "run", "(", "tensor_to_run", ",", "feed_dict", "=", "{", "img_place", ":", "img_name", "}", ")", "\n", "roi_result_all_layer", "=", "list", "(", "results", "[", ":", "layer_num", "]", ")", "\n", "class_result_all_layer", "=", "list", "(", "results", "[", "layer_num", ":", "layer_num", "*", "2", "]", ")", "\n", "scores_result_all_layer", "=", "list", "(", "results", "[", "layer_num", "*", "2", ":", "layer_num", "*", "3", "]", ")", "\n", "ae_result_all_layer", "=", "list", "(", "results", "[", "layer_num", "*", "3", ":", "layer_num", "*", "4", "]", ")", "\n", "\n", "final_boxes", ",", "final_scores", ",", "final_classes", "=", "self", ".", "post_process", "(", "roi_result_all_layer", ",", "\n", "class_result_all_layer", ",", "\n", "scores_result_all_layer", ",", "\n", "ae_result_all_layer", ",", "\n", "nms_mode", "=", "nms_param", "[", "'mode'", "]", ",", "\n", "ths", "=", "nms_param", "[", "'ths'", "]", ",", "Nts", "=", "nms_param", "[", "'Nts'", "]", ",", "\n", "second_nms", "=", "nms_param", "[", "'second_nms'", "]", ",", "th2", "=", "nms_param", "[", "'th2'", "]", ",", "Nt2", "=", "nms_param", "[", "'Nt2'", "]", ",", "\n", "sigma", "=", "nms_param", "[", "'sigma'", "]", ",", "ae_dis", "=", "nms_param", "[", "'ae_dis'", "]", ")", "\n", "\n", "out_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "out_txt_dir", ",", "os", ".", "path", ".", "split", "(", "img_name", ")", "[", "-", "1", "]", ".", "replace", "(", "'png'", ",", "'txt'", ")", ")", "\n", "if", "not", "is_list", ":", "\n", "                    ", "self", ".", "record", "(", "out_name", ",", "final_boxes", ",", "final_scores", ",", "final_classes", ",", "ih", ",", "iw", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "record_list", "(", "out_name", ",", "roi_result_all_layer", ",", "class_result_all_layer", ",", "scores_result_all_layer", ",", "ae_result_all_layer", ",", "ih", ",", "iw", ")", "\n", "", "", "", "print", "(", "'Inference complete! FPS:%.2f'", "%", "(", "test_num", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.convert_to_coco.get_image_id": [[8, 14], ["json.load", "open", "item[].split"], "function", ["None"], ["def", "get_image_id", "(", "val_gt", ")", ":", "\n", "    ", "anns", "=", "json", ".", "load", "(", "open", "(", "val_gt", ")", ")", "\n", "id_dict", "=", "{", "}", "\n", "for", "item", "in", "anns", "[", "'images'", "]", ":", "\n", "        ", "id_dict", "[", "item", "[", "'im_name'", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "]", "=", "item", "[", "'id'", "]", "\n", "", "return", "id_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.convert_to_coco.get_image_name": [[15, 21], ["json.load", "open", "item[].split"], "function", ["None"], ["", "def", "get_image_name", "(", "val_gt", ")", ":", "\n", "    ", "anns", "=", "json", ".", "load", "(", "open", "(", "val_gt", ")", ")", "\n", "name_dict", "=", "{", "}", "\n", "for", "item", "in", "anns", "[", "'images'", "]", ":", "\n", "        ", "name_dict", "[", "item", "[", "'id'", "]", "]", "=", "item", "[", "'im_name'", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "", "return", "name_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.convert_to_coco.read_pfile": [[23, 33], ["open().readlines", "line.strip().split.strip().split", "scores.append", "rois.append", "open", "int", "float", "line.strip().split.strip"], "function", ["None"], ["", "def", "read_pfile", "(", "pfile", ")", ":", "\n", "    ", "lines", "=", "open", "(", "pfile", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "rois", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "ymin", ",", "xmin", ",", "ymax", ",", "xmax", "=", "[", "int", "(", "c", ")", "for", "c", "in", "line", "[", "1", ":", "5", "]", "]", "\n", "scores", ".", "append", "(", "float", "(", "line", "[", "5", "]", ")", ")", "\n", "rois", ".", "append", "(", "[", "xmin", ",", "ymin", ",", "xmax", "-", "xmin", ",", "ymax", "-", "ymin", "]", ")", "\n", "", "return", "rois", ",", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.convert_to_coco.write_gt_as_result": [[34, 46], ["json.load", "convert_to_coco.get_image_id", "open", "results.append", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.convert_to_coco.get_image_id"], ["", "def", "write_gt_as_result", "(", ")", ":", "\n", "    ", "anns", "=", "json", ".", "load", "(", "open", "(", "gt_json", ")", ")", "\n", "id_dict", "=", "get_image_id", "(", "gt_json", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "item", "in", "anns", "[", "'annotations'", "]", ":", "\n", "        ", "results", ".", "append", "(", "{", "'image_id'", ":", "item", "[", "'image_id'", "]", ",", "\n", "'category_id'", ":", "1", ",", "\n", "'bbox'", ":", "item", "[", "'bbox'", "]", ",", "\n", "'score'", ":", "1.", "}", ")", "\n", "", "with", "open", "(", "'/Users/yangchenhongyi/Documents/citypersons/shanshanzhang-citypersons-ae6814faa761/evaluation/val_gt_det.json'", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "results", ",", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.convert_to_coco.convert_to_coco": [[47, 63], ["os.listdir", "convert_to_coco.get_image_id", "txt.endswith", "open", "json.dump", "convert_to_coco.read_pfile", "range", "os.path.join", "len", "results.append", "txt.split"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.convert_to_coco.get_image_id", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.convert_to_coco.read_pfile"], ["", "", "def", "convert_to_coco", "(", "txt_dir", ",", "val_gt", ",", "out_json", ")", ":", "\n", "    ", "file_list", "=", "os", ".", "listdir", "(", "txt_dir", ")", "\n", "id_dict", "=", "get_image_id", "(", "val_gt", ")", "\n", "\n", "results", "=", "[", "]", "\n", "\n", "for", "txt", "in", "file_list", ":", "\n", "        ", "if", "txt", ".", "endswith", "(", "'txt'", ")", ":", "\n", "            ", "boxes", ",", "scores", "=", "read_pfile", "(", "os", ".", "path", ".", "join", "(", "txt_dir", ",", "txt", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "scores", ")", ")", ":", "\n", "                ", "results", ".", "append", "(", "{", "'image_id'", ":", "id_dict", "[", "txt", ".", "split", "(", "'.'", ")", "[", "0", "]", "]", ",", "\n", "'category_id'", ":", "1", ",", "\n", "'bbox'", ":", "boxes", "[", "i", "]", ",", "\n", "'score'", ":", "scores", "[", "i", "]", "}", ")", "\n", "", "", "", "with", "open", "(", "out_json", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "results", ",", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.convert_to_coco.convert_to_test_format": [[65, 82], ["os.listdir", "os.listdir.sort", "enumerate", "convert_to_coco.read_pfile", "range", "open", "json.dump", "txt.endswith", "os.path.join", "len", "results.append"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.convert_to_coco.read_pfile"], ["", "", "def", "convert_to_test_format", "(", "txt_dir", ",", "out_json", ")", ":", "\n", "    ", "file_list", "=", "os", ".", "listdir", "(", "txt_dir", ")", "\n", "file_list", ".", "sort", "(", ")", "\n", "\n", "results", "=", "[", "]", "\n", "\n", "for", "k", ",", "txt", "in", "enumerate", "(", "file_list", ")", ":", "\n", "        ", "if", "not", "txt", ".", "endswith", "(", "'txt'", ")", ":", "\n", "            ", "continue", "\n", "", "boxes", ",", "scores", "=", "read_pfile", "(", "os", ".", "path", ".", "join", "(", "txt_dir", ",", "txt", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "scores", ")", ")", ":", "\n", "            ", "results", ".", "append", "(", "{", "'image_id'", ":", "k", "+", "1", ",", "\n", "'category_id'", ":", "1", ",", "\n", "'bbox'", ":", "boxes", "[", "i", "]", ",", "\n", "'score'", ":", "scores", "[", "i", "]", "}", ")", "\n", "", "", "with", "open", "(", "out_json", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "json", ".", "dump", "(", "results", ",", "outfile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.__init__": [[66, 84], ["dict", "dict", "dict", "dict", "collections.defaultdict", "collections.defaultdict", "time.time", "json.load", "coco.COCO.createIndex", "open", "type", "type"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.createIndex"], ["    ", "def", "__init__", "(", "self", ",", "annotation_file", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Constructor of Microsoft COCO helper class for reading and visualizing annotations.\n        :param annotation_file (str): location of annotation file\n        :param image_folder (str): location to the folder that hosts images.\n        :return:\n        \"\"\"", "\n", "# load dataset", "\n", "self", ".", "dataset", ",", "self", ".", "anns", ",", "self", ".", "cats", ",", "self", ".", "imgs", "=", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", "\n", "self", ".", "imgToAnns", ",", "self", ".", "catToImgs", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "if", "not", "annotation_file", "==", "None", ":", "\n", "#print('loading annotations into memory...')", "\n", "            ", "tic", "=", "time", ".", "time", "(", ")", "\n", "dataset", "=", "json", ".", "load", "(", "open", "(", "annotation_file", ",", "'r'", ")", ")", "\n", "assert", "type", "(", "dataset", ")", "==", "dict", ",", "'annotation file format {} not supported'", ".", "format", "(", "type", "(", "dataset", ")", ")", "\n", "#print('Done (t={:0.2f}s)'.format(time.time()- tic))", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "createIndex", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.createIndex": [[85, 115], ["collections.defaultdict", "collections.defaultdict", "imgToAnns[].append", "catToImgs[].append"], "methods", ["None"], ["", "", "def", "createIndex", "(", "self", ")", ":", "\n", "# create index", "\n", "#print('creating index...')", "\n", "        ", "anns", ",", "cats", ",", "imgs", "=", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "imgToAnns", ",", "catToImgs", "=", "defaultdict", "(", "list", ")", ",", "defaultdict", "(", "list", ")", "\n", "if", "'annotations'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "                ", "imgToAnns", "[", "ann", "[", "'image_id'", "]", "]", ".", "append", "(", "ann", ")", "\n", "anns", "[", "ann", "[", "'id'", "]", "]", "=", "ann", "\n", "\n", "", "", "if", "'images'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", ":", "\n", "                ", "imgs", "[", "img", "[", "'id'", "]", "]", "=", "img", "\n", "\n", "", "", "if", "'categories'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "cat", "in", "self", ".", "dataset", "[", "'categories'", "]", ":", "\n", "                ", "cats", "[", "cat", "[", "'id'", "]", "]", "=", "cat", "\n", "\n", "", "", "if", "'annotations'", "in", "self", ".", "dataset", "and", "'categories'", "in", "self", ".", "dataset", ":", "\n", "            ", "for", "ann", "in", "self", ".", "dataset", "[", "'annotations'", "]", ":", "\n", "                ", "catToImgs", "[", "ann", "[", "'category_id'", "]", "]", ".", "append", "(", "ann", "[", "'image_id'", "]", ")", "\n", "\n", "#print('index created!')", "\n", "\n", "# create class members", "\n", "", "", "self", ".", "anns", "=", "anns", "\n", "self", ".", "imgToAnns", "=", "imgToAnns", "\n", "self", ".", "catToImgs", "=", "catToImgs", "\n", "self", ".", "imgs", "=", "imgs", "\n", "self", ".", "cats", "=", "cats", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.info": [[116, 123], ["coco.COCO.dataset[].items", "print"], "methods", ["None"], ["", "def", "info", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Print information about the annotation file.\n        :return:\n        \"\"\"", "\n", "for", "key", ",", "value", "in", "self", ".", "dataset", "[", "'info'", "]", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'{}: {}'", ".", "format", "(", "key", ",", "value", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.getAnnIds": [[124, 151], ["len", "len", "len", "type", "type", "list", "len", "itertools.chain.from_iterable", "len", "len"], "methods", ["None"], ["", "", "def", "getAnnIds", "(", "self", ",", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "]", ",", "areaRng", "=", "[", "]", ",", "iscrowd", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Get ann ids that satisfy given filter conditions. default skips that filter\n        :param imgIds  (int array)     : get anns for given imgs\n               catIds  (int array)     : get anns for given cats\n               areaRng (float array)   : get anns for given area range (e.g. [0 inf])\n               iscrowd (boolean)       : get anns for given crowd label (False or True)\n        :return: ids (int array)       : integer array of ann ids\n        \"\"\"", "\n", "imgIds", "=", "imgIds", "if", "type", "(", "imgIds", ")", "==", "list", "else", "[", "imgIds", "]", "\n", "catIds", "=", "catIds", "if", "type", "(", "catIds", ")", "==", "list", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "imgIds", ")", "==", "len", "(", "catIds", ")", "==", "len", "(", "areaRng", ")", "==", "0", ":", "\n", "            ", "anns", "=", "self", ".", "dataset", "[", "'annotations'", "]", "\n", "", "else", ":", "\n", "            ", "if", "not", "len", "(", "imgIds", ")", "==", "0", ":", "\n", "                ", "lists", "=", "[", "self", ".", "imgToAnns", "[", "imgId", "]", "for", "imgId", "in", "imgIds", "if", "imgId", "in", "self", ".", "imgToAnns", "]", "\n", "anns", "=", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "lists", ")", ")", "\n", "", "else", ":", "\n", "                ", "anns", "=", "self", ".", "dataset", "[", "'annotations'", "]", "\n", "", "anns", "=", "anns", "if", "len", "(", "catIds", ")", "==", "0", "else", "[", "ann", "for", "ann", "in", "anns", "if", "ann", "[", "'category_id'", "]", "in", "catIds", "]", "\n", "anns", "=", "anns", "if", "len", "(", "areaRng", ")", "==", "0", "else", "[", "ann", "for", "ann", "in", "anns", "if", "ann", "[", "'area'", "]", ">", "areaRng", "[", "0", "]", "and", "ann", "[", "'area'", "]", "<", "areaRng", "[", "1", "]", "]", "\n", "", "if", "not", "iscrowd", "==", "None", ":", "\n", "            ", "ids", "=", "[", "ann", "[", "'id'", "]", "for", "ann", "in", "anns", "if", "ann", "[", "'iscrowd'", "]", "==", "iscrowd", "]", "\n", "", "else", ":", "\n", "            ", "ids", "=", "[", "ann", "[", "'id'", "]", "for", "ann", "in", "anns", "]", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.getCatIds": [[152, 173], ["len", "len", "len", "type", "type", "type", "len", "len", "len"], "methods", ["None"], ["", "def", "getCatIds", "(", "self", ",", "catNms", "=", "[", "]", ",", "supNms", "=", "[", "]", ",", "catIds", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        filtering parameters. default skips that filter.\n        :param catNms (str array)  : get cats for given cat names\n        :param supNms (str array)  : get cats for given supercategory names\n        :param catIds (int array)  : get cats for given cat ids\n        :return: ids (int array)   : integer array of cat ids\n        \"\"\"", "\n", "catNms", "=", "catNms", "if", "type", "(", "catNms", ")", "==", "list", "else", "[", "catNms", "]", "\n", "supNms", "=", "supNms", "if", "type", "(", "supNms", ")", "==", "list", "else", "[", "supNms", "]", "\n", "catIds", "=", "catIds", "if", "type", "(", "catIds", ")", "==", "list", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "catNms", ")", "==", "len", "(", "supNms", ")", "==", "len", "(", "catIds", ")", "==", "0", ":", "\n", "            ", "cats", "=", "self", ".", "dataset", "[", "'categories'", "]", "\n", "", "else", ":", "\n", "            ", "cats", "=", "self", ".", "dataset", "[", "'categories'", "]", "\n", "cats", "=", "cats", "if", "len", "(", "catNms", ")", "==", "0", "else", "[", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'name'", "]", "in", "catNms", "]", "\n", "cats", "=", "cats", "if", "len", "(", "supNms", ")", "==", "0", "else", "[", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'supercategory'", "]", "in", "supNms", "]", "\n", "cats", "=", "cats", "if", "len", "(", "catIds", ")", "==", "0", "else", "[", "cat", "for", "cat", "in", "cats", "if", "cat", "[", "'id'", "]", "in", "catIds", "]", "\n", "", "ids", "=", "[", "cat", "[", "'id'", "]", "for", "cat", "in", "cats", "]", "\n", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.getImgIds": [[174, 194], ["list", "len", "len", "coco.COCO.imgs.keys", "set", "enumerate", "type", "type", "set", "set", "len"], "methods", ["None"], ["", "def", "getImgIds", "(", "self", ",", "imgIds", "=", "[", "]", ",", "catIds", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Get img ids that satisfy given filter conditions.\n        :param imgIds (int array) : get imgs for given ids\n        :param catIds (int array) : get imgs with all given cats\n        :return: ids (int array)  : integer array of img ids\n        '''", "\n", "imgIds", "=", "imgIds", "if", "type", "(", "imgIds", ")", "==", "list", "else", "[", "imgIds", "]", "\n", "catIds", "=", "catIds", "if", "type", "(", "catIds", ")", "==", "list", "else", "[", "catIds", "]", "\n", "\n", "if", "len", "(", "imgIds", ")", "==", "len", "(", "catIds", ")", "==", "0", ":", "\n", "            ", "ids", "=", "self", ".", "imgs", ".", "keys", "(", ")", "\n", "", "else", ":", "\n", "            ", "ids", "=", "set", "(", "imgIds", ")", "\n", "for", "i", ",", "catId", "in", "enumerate", "(", "catIds", ")", ":", "\n", "                ", "if", "i", "==", "0", "and", "len", "(", "ids", ")", "==", "0", ":", "\n", "                    ", "ids", "=", "set", "(", "self", ".", "catToImgs", "[", "catId", "]", ")", "\n", "", "else", ":", "\n", "                    ", "ids", "&=", "set", "(", "self", ".", "catToImgs", "[", "catId", "]", ")", "\n", "", "", "", "return", "list", "(", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadAnns": [[195, 205], ["type", "type"], "methods", ["None"], ["", "def", "loadAnns", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load anns with the specified ids.\n        :param ids (int array)       : integer ids specifying anns\n        :return: anns (object array) : loaded ann objects\n        \"\"\"", "\n", "if", "type", "(", "ids", ")", "==", "list", ":", "\n", "            ", "return", "[", "self", ".", "anns", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "anns", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadCats": [[206, 216], ["type", "type"], "methods", ["None"], ["", "", "def", "loadCats", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load cats with the specified ids.\n        :param ids (int array)       : integer ids specifying cats\n        :return: cats (object array) : loaded cat objects\n        \"\"\"", "\n", "if", "type", "(", "ids", ")", "==", "list", ":", "\n", "            ", "return", "[", "self", ".", "cats", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "cats", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadImgs": [[217, 227], ["type", "type"], "methods", ["None"], ["", "", "def", "loadImgs", "(", "self", ",", "ids", "=", "[", "]", ")", ":", "\n", "        ", "\"\"\"\n        Load anns with the specified ids.\n        :param ids (int array)       : integer ids specifying img\n        :return: imgs (object array) : loaded img objects\n        \"\"\"", "\n", "if", "type", "(", "ids", ")", "==", "list", ":", "\n", "            ", "return", "[", "self", ".", "imgs", "[", "id", "]", "for", "id", "in", "ids", "]", "\n", "", "elif", "type", "(", "ids", ")", "==", "int", ":", "\n", "            ", "return", "[", "self", ".", "imgs", "[", "ids", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.showAnns": [[228, 291], ["len", "matplotlib.gca", "matplotlib.gca.set_autoscale_on", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "matplotlib.collections.PatchCollection", "matplotlib.gca.add_collection", "Exception", "numpy.array", "matplotlib.plot", "matplotlib.plot", "print", "type", "maskUtils.decode", "numpy.ones", "range", "matplotlib.gca.imshow", "type", "numpy.array", "numpy.all", "numpy.array().reshape", "polygons.append", "color.append", "type", "maskUtils.frPyObjects", "numpy.dstack", "matplotlib.plot", "matplotlib.patches.Polygon", "numpy.array", "numpy.random.random().tolist", "numpy.random.random", "numpy.array", "int", "coco.COCO.loadCats", "numpy.random.random", "len"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.plot", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.plot", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.plot", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadCats"], ["", "", "def", "showAnns", "(", "self", ",", "anns", ")", ":", "\n", "        ", "\"\"\"\n        Display the specified annotations.\n        :param anns (array of object): annotations to display\n        :return: None\n        \"\"\"", "\n", "if", "len", "(", "anns", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "if", "'segmentation'", "in", "anns", "[", "0", "]", "or", "'keypoints'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "datasetType", "=", "'instances'", "\n", "", "elif", "'caption'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "datasetType", "=", "'captions'", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'datasetType not supported'", ")", "\n", "", "if", "datasetType", "==", "'instances'", ":", "\n", "            ", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "ax", ".", "set_autoscale_on", "(", "False", ")", "\n", "polygons", "=", "[", "]", "\n", "color", "=", "[", "]", "\n", "for", "ann", "in", "anns", ":", "\n", "                ", "c", "=", "(", "np", ".", "random", ".", "random", "(", "(", "1", ",", "3", ")", ")", "*", "0.6", "+", "0.4", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "if", "'segmentation'", "in", "ann", ":", "\n", "                    ", "if", "type", "(", "ann", "[", "'segmentation'", "]", ")", "==", "list", ":", "\n", "# polygon", "\n", "                        ", "for", "seg", "in", "ann", "[", "'segmentation'", "]", ":", "\n", "                            ", "poly", "=", "np", ".", "array", "(", "seg", ")", ".", "reshape", "(", "(", "int", "(", "len", "(", "seg", ")", "/", "2", ")", ",", "2", ")", ")", "\n", "polygons", ".", "append", "(", "Polygon", "(", "poly", ")", ")", "\n", "color", ".", "append", "(", "c", ")", "\n", "", "", "else", ":", "\n", "# mask", "\n", "                        ", "t", "=", "self", ".", "imgs", "[", "ann", "[", "'image_id'", "]", "]", "\n", "if", "type", "(", "ann", "[", "'segmentation'", "]", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "                            ", "rle", "=", "maskUtils", ".", "frPyObjects", "(", "[", "ann", "[", "'segmentation'", "]", "]", ",", "t", "[", "'height'", "]", ",", "t", "[", "'width'", "]", ")", "\n", "", "else", ":", "\n", "                            ", "rle", "=", "[", "ann", "[", "'segmentation'", "]", "]", "\n", "", "m", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "img", "=", "np", ".", "ones", "(", "(", "m", ".", "shape", "[", "0", "]", ",", "m", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "if", "ann", "[", "'iscrowd'", "]", "==", "1", ":", "\n", "                            ", "color_mask", "=", "np", ".", "array", "(", "[", "2.0", ",", "166.0", ",", "101.0", "]", ")", "/", "255", "\n", "", "if", "ann", "[", "'iscrowd'", "]", "==", "0", ":", "\n", "                            ", "color_mask", "=", "np", ".", "random", ".", "random", "(", "(", "1", ",", "3", ")", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                            ", "img", "[", ":", ",", ":", ",", "i", "]", "=", "color_mask", "[", "i", "]", "\n", "", "ax", ".", "imshow", "(", "np", ".", "dstack", "(", "(", "img", ",", "m", "*", "0.5", ")", ")", ")", "\n", "", "", "if", "'keypoints'", "in", "ann", "and", "type", "(", "ann", "[", "'keypoints'", "]", ")", "==", "list", ":", "\n", "# turn skeleton into zero-based index", "\n", "                    ", "sks", "=", "np", ".", "array", "(", "self", ".", "loadCats", "(", "ann", "[", "'category_id'", "]", ")", "[", "0", "]", "[", "'skeleton'", "]", ")", "-", "1", "\n", "kp", "=", "np", ".", "array", "(", "ann", "[", "'keypoints'", "]", ")", "\n", "x", "=", "kp", "[", "0", ":", ":", "3", "]", "\n", "y", "=", "kp", "[", "1", ":", ":", "3", "]", "\n", "v", "=", "kp", "[", "2", ":", ":", "3", "]", "\n", "for", "sk", "in", "sks", ":", "\n", "                        ", "if", "np", ".", "all", "(", "v", "[", "sk", "]", ">", "0", ")", ":", "\n", "                            ", "plt", ".", "plot", "(", "x", "[", "sk", "]", ",", "y", "[", "sk", "]", ",", "linewidth", "=", "3", ",", "color", "=", "c", ")", "\n", "", "", "plt", ".", "plot", "(", "x", "[", "v", ">", "0", "]", ",", "y", "[", "v", ">", "0", "]", ",", "'o'", ",", "markersize", "=", "8", ",", "markerfacecolor", "=", "c", ",", "markeredgecolor", "=", "'k'", ",", "markeredgewidth", "=", "2", ")", "\n", "plt", ".", "plot", "(", "x", "[", "v", ">", "1", "]", ",", "y", "[", "v", ">", "1", "]", ",", "'o'", ",", "markersize", "=", "8", ",", "markerfacecolor", "=", "c", ",", "markeredgecolor", "=", "c", ",", "markeredgewidth", "=", "2", ")", "\n", "", "", "p", "=", "PatchCollection", "(", "polygons", ",", "facecolor", "=", "color", ",", "linewidths", "=", "0", ",", "alpha", "=", "0.4", ")", "\n", "ax", ".", "add_collection", "(", "p", ")", "\n", "p", "=", "PatchCollection", "(", "polygons", ",", "facecolor", "=", "'none'", ",", "edgecolors", "=", "color", ",", "linewidths", "=", "2", ")", "\n", "ax", ".", "add_collection", "(", "p", ")", "\n", "", "elif", "datasetType", "==", "'captions'", ":", "\n", "            ", "for", "ann", "in", "anns", ":", "\n", "                ", "print", "(", "ann", "[", "'caption'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadRes": [[292, 355], ["coco.COCO", "time.time", "coco.COCO.createIndex", "type", "json.load", "type", "set", "enumerate", "open", "type", "coco.COCO.loadNumpyAnnotations", "set", "set", "set", "set", "copy.deepcopy", "enumerate", "type", "coco.COCO.getImgIds", "copy.deepcopy", "enumerate", "maskUtils.area", "copy.deepcopy", "enumerate", "maskUtils.toBbox", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.createIndex", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadNumpyAnnotations", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.getImgIds"], ["", "", "", "def", "loadRes", "(", "self", ",", "resFile", ")", ":", "\n", "        ", "\"\"\"\n        Load result file and return a result api object.\n        :param   resFile (str)     : file name of result file\n        :return: res (obj)         : result api object\n        \"\"\"", "\n", "res", "=", "COCO", "(", ")", "\n", "res", ".", "dataset", "[", "'images'", "]", "=", "[", "img", "for", "img", "in", "self", ".", "dataset", "[", "'images'", "]", "]", "\n", "\n", "#print('Loading and preparing results...')", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "type", "(", "resFile", ")", "==", "str", ":", "\n", "            ", "anns", "=", "json", ".", "load", "(", "open", "(", "resFile", ")", ")", "\n", "", "elif", "type", "(", "resFile", ")", "==", "np", ".", "ndarray", ":", "\n", "            ", "anns", "=", "self", ".", "loadNumpyAnnotations", "(", "resFile", ")", "\n", "", "elif", "type", "(", "resFile", ")", "==", "list", ":", "\n", "            ", "anns", "=", "resFile", "\n", "", "else", ":", "\n", "            ", "anns", "=", "resFile", "\n", "", "assert", "type", "(", "anns", ")", "==", "list", ",", "'results in not an array of objects'", "\n", "annsImgIds", "=", "[", "ann", "[", "'image_id'", "]", "for", "ann", "in", "anns", "]", "\n", "assert", "set", "(", "annsImgIds", ")", "==", "(", "set", "(", "annsImgIds", ")", "&", "set", "(", "self", ".", "getImgIds", "(", ")", ")", ")", ",", "'Results do not correspond to current coco set'", "\n", "if", "'caption'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "imgIds", "=", "set", "(", "[", "img", "[", "'id'", "]", "for", "img", "in", "res", ".", "dataset", "[", "'images'", "]", "]", ")", "&", "set", "(", "[", "ann", "[", "'image_id'", "]", "for", "ann", "in", "anns", "]", ")", "\n", "res", ".", "dataset", "[", "'images'", "]", "=", "[", "img", "for", "img", "in", "res", ".", "dataset", "[", "'images'", "]", "if", "img", "[", "'id'", "]", "in", "imgIds", "]", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "", "", "elif", "'bbox'", "in", "anns", "[", "0", "]", "and", "not", "anns", "[", "0", "]", "[", "'bbox'", "]", "==", "[", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "bb", "=", "ann", "[", "'bbox'", "]", "\n", "x1", ",", "x2", ",", "y1", ",", "y2", "=", "[", "bb", "[", "0", "]", ",", "bb", "[", "0", "]", "+", "bb", "[", "2", "]", ",", "bb", "[", "1", "]", ",", "bb", "[", "1", "]", "+", "bb", "[", "3", "]", "]", "\n", "if", "not", "'segmentation'", "in", "ann", ":", "\n", "                    ", "ann", "[", "'segmentation'", "]", "=", "[", "[", "x1", ",", "y1", ",", "x1", ",", "y2", ",", "x2", ",", "y2", ",", "x2", ",", "y1", "]", "]", "\n", "", "ann", "[", "'area'", "]", "=", "bb", "[", "2", "]", "*", "bb", "[", "3", "]", "\n", "ann", "[", "'height'", "]", "=", "bb", "[", "3", "]", "\n", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "", "", "elif", "'segmentation'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "# now only support compressed RLE format as segmentation results", "\n", "                ", "ann", "[", "'area'", "]", "=", "maskUtils", ".", "area", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "if", "not", "'bbox'", "in", "ann", ":", "\n", "                    ", "ann", "[", "'bbox'", "]", "=", "maskUtils", ".", "toBbox", "(", "ann", "[", "'segmentation'", "]", ")", "\n", "", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'iscrowd'", "]", "=", "0", "\n", "", "", "elif", "'keypoints'", "in", "anns", "[", "0", "]", ":", "\n", "            ", "res", ".", "dataset", "[", "'categories'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "dataset", "[", "'categories'", "]", ")", "\n", "for", "id", ",", "ann", "in", "enumerate", "(", "anns", ")", ":", "\n", "                ", "s", "=", "ann", "[", "'keypoints'", "]", "\n", "x", "=", "s", "[", "0", ":", ":", "3", "]", "\n", "y", "=", "s", "[", "1", ":", ":", "3", "]", "\n", "x0", ",", "x1", ",", "y0", ",", "y1", "=", "np", ".", "min", "(", "x", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "min", "(", "y", ")", ",", "np", ".", "max", "(", "y", ")", "\n", "ann", "[", "'area'", "]", "=", "(", "x1", "-", "x0", ")", "*", "(", "y1", "-", "y0", ")", "\n", "ann", "[", "'id'", "]", "=", "id", "+", "1", "\n", "ann", "[", "'bbox'", "]", "=", "[", "x0", ",", "y0", ",", "x1", "-", "x0", ",", "y1", "-", "y0", "]", "\n", "#print('DONE (t={:0.2f}s)'.format(time.time()- tic))", "\n", "\n", "", "", "res", ".", "dataset", "[", "'annotations'", "]", "=", "anns", "\n", "res", ".", "createIndex", "(", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.download": [[356, 379], ["len", "enumerate", "print", "len", "coco.COCO.imgs.values", "coco.COCO.loadImgs", "os.path.exists", "os.makedirs", "time.time", "os.path.join", "print", "os.path.exists", "urlretrieve", "time.time"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadImgs"], ["", "def", "download", "(", "self", ",", "tarDir", "=", "None", ",", "imgIds", "=", "[", "]", ")", ":", "\n", "        ", "'''\n        Download COCO images from mscoco.org server.\n        :param tarDir (str): COCO results directory name\n               imgIds (list): images to be downloaded\n        :return:\n        '''", "\n", "if", "tarDir", "is", "None", ":", "\n", "            ", "print", "(", "'Please specify target directory'", ")", "\n", "return", "-", "1", "\n", "", "if", "len", "(", "imgIds", ")", "==", "0", ":", "\n", "            ", "imgs", "=", "self", ".", "imgs", ".", "values", "(", ")", "\n", "", "else", ":", "\n", "            ", "imgs", "=", "self", ".", "loadImgs", "(", "imgIds", ")", "\n", "", "N", "=", "len", "(", "imgs", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "tarDir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "tarDir", ")", "\n", "", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "            ", "tic", "=", "time", ".", "time", "(", ")", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "tarDir", ",", "img", "[", "'file_name'", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "fname", ")", ":", "\n", "                ", "urlretrieve", "(", "img", "[", "'coco_url'", "]", ",", "fname", ")", "\n", "", "print", "(", "'downloaded {}/{} images (t={:0.1f}s)'", ".", "format", "(", "i", ",", "N", ",", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadNumpyAnnotations": [[380, 402], ["print", "print", "range", "type", "print", "int", "int"], "methods", ["None"], ["", "", "def", "loadNumpyAnnotations", "(", "self", ",", "data", ")", ":", "\n", "        ", "\"\"\"\n        Convert result data from a numpy array [Nx7] where each row contains {imageID,x1,y1,w,h,score,class}\n        :param  data (numpy.ndarray)\n        :return: annotations (python nested list)\n        \"\"\"", "\n", "print", "(", "'Converting ndarray to lists...'", ")", "\n", "assert", "(", "type", "(", "data", ")", "==", "np", ".", "ndarray", ")", "\n", "print", "(", "data", ".", "shape", ")", "\n", "assert", "(", "data", ".", "shape", "[", "1", "]", "==", "7", ")", "\n", "N", "=", "data", ".", "shape", "[", "0", "]", "\n", "ann", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "if", "i", "%", "1000000", "==", "0", ":", "\n", "                ", "print", "(", "'{}/{}'", ".", "format", "(", "i", ",", "N", ")", ")", "\n", "", "ann", "+=", "[", "{", "\n", "'image_id'", ":", "int", "(", "data", "[", "i", ",", "0", "]", ")", ",", "\n", "'bbox'", ":", "[", "data", "[", "i", ",", "1", "]", ",", "data", "[", "i", ",", "2", "]", ",", "data", "[", "i", ",", "3", "]", ",", "data", "[", "i", ",", "4", "]", "]", ",", "\n", "'score'", ":", "data", "[", "i", ",", "5", "]", ",", "\n", "'category_id'", ":", "int", "(", "data", "[", "i", ",", "6", "]", ")", ",", "\n", "}", "]", "\n", "", "return", "ann", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.annToRLE": [[403, 423], ["type", "maskUtils.frPyObjects", "maskUtils.merge", "type", "maskUtils.frPyObjects"], "methods", ["None"], ["", "def", "annToRLE", "(", "self", ",", "ann", ")", ":", "\n", "        ", "\"\"\"\n        Convert annotation which can be polygons, uncompressed RLE to RLE.\n        :return: binary mask (numpy 2D array)\n        \"\"\"", "\n", "t", "=", "self", ".", "imgs", "[", "ann", "[", "'image_id'", "]", "]", "\n", "h", ",", "w", "=", "t", "[", "'height'", "]", ",", "t", "[", "'width'", "]", "\n", "segm", "=", "ann", "[", "'segmentation'", "]", "\n", "if", "type", "(", "segm", ")", "==", "list", ":", "\n", "# polygon -- a single object might consist of multiple parts", "\n", "# we merge all parts into one mask rle code", "\n", "            ", "rles", "=", "maskUtils", ".", "frPyObjects", "(", "segm", ",", "h", ",", "w", ")", "\n", "rle", "=", "maskUtils", ".", "merge", "(", "rles", ")", "\n", "", "elif", "type", "(", "segm", "[", "'counts'", "]", ")", "==", "list", ":", "\n", "# uncompressed RLE", "\n", "            ", "rle", "=", "maskUtils", ".", "frPyObjects", "(", "segm", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "# rle", "\n", "            ", "rle", "=", "ann", "[", "'segmentation'", "]", "\n", "", "return", "rle", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.annToMask": [[424, 432], ["coco.COCO.annToRLE", "maskUtils.decode"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.annToRLE"], ["", "def", "annToMask", "(", "self", ",", "ann", ")", ":", "\n", "        ", "\"\"\"\n        Convert annotation which can be polygons, uncompressed RLE, or RLE to binary mask.\n        :return: binary mask (numpy 2D array)\n        \"\"\"", "\n", "rle", "=", "self", ".", "annToRLE", "(", "ann", ")", "\n", "m", "=", "maskUtils", ".", "decode", "(", "rle", ")", "\n", "return", "m", "", "", "", ""]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.__init__": [[61, 83], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "eval_MR_multisetup.Params", "print", "sorted", "sorted", "cocoGt.getImgIds", "cocoGt.getCatIds"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.getImgIds", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.getCatIds"], ["    ", "def", "__init__", "(", "self", ",", "cocoGt", "=", "None", ",", "cocoDt", "=", "None", ",", "iouType", "=", "'segm'", ",", "sub_type", "=", "0", ")", ":", "\n", "        ", "'''\n        Initialize CocoEval using coco APIs for gt and dt\n        :param cocoGt: coco object with ground truth annotations\n        :param cocoDt: coco object with detection results\n        :return: None\n        '''", "\n", "if", "not", "iouType", ":", "\n", "            ", "print", "(", "'iouType not specified. use default iouType segm'", ")", "\n", "", "self", ".", "cocoGt", "=", "cocoGt", "# ground truth COCO API", "\n", "self", ".", "cocoDt", "=", "cocoDt", "# detections COCO API", "\n", "self", ".", "params", "=", "{", "}", "# evaluation parameters", "\n", "self", ".", "evalImgs", "=", "defaultdict", "(", "list", ")", "# per-image per-category evaluation results [KxAxI] elements", "\n", "self", ".", "eval", "=", "{", "}", "# accumulated evaluation results", "\n", "self", ".", "_gts", "=", "defaultdict", "(", "list", ")", "# gt for evaluation", "\n", "self", ".", "_dts", "=", "defaultdict", "(", "list", ")", "# dt for evaluation", "\n", "self", ".", "params", "=", "Params", "(", "iouType", "=", "iouType", ",", "sub_type", "=", "sub_type", ")", "# parameters", "\n", "self", ".", "_paramsEval", "=", "{", "}", "# parameters for evaluation", "\n", "self", ".", "stats", "=", "[", "]", "# result summarization", "\n", "if", "not", "cocoGt", "is", "None", ":", "\n", "            ", "self", ".", "params", ".", "imgIds", "=", "sorted", "(", "cocoGt", ".", "getImgIds", "(", ")", ")", "\n", "self", ".", "params", ".", "catIds", "=", "sorted", "(", "cocoGt", ".", "getCatIds", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval._prepare": [[85, 113], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "eval_MR_multisetup.COCOeval.cocoGt.loadAnns", "eval_MR_multisetup.COCOeval.cocoDt.loadAnns", "eval_MR_multisetup.COCOeval.cocoGt.loadAnns", "eval_MR_multisetup.COCOeval.cocoDt.loadAnns", "eval_MR_multisetup.COCOeval._gts[].append", "eval_MR_multisetup.COCOeval._dts[].append", "eval_MR_multisetup.COCOeval.cocoGt.getAnnIds", "eval_MR_multisetup.COCOeval.cocoDt.getAnnIds", "eval_MR_multisetup.COCOeval.cocoGt.getAnnIds", "eval_MR_multisetup.COCOeval.cocoDt.getAnnIds"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.loadAnns", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.getAnnIds", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.coco.COCO.getAnnIds"], ["", "", "def", "_prepare", "(", "self", ",", "id_setup", ")", ":", "\n", "        ", "'''\n        Prepare ._gts and ._dts for evaluation based on params\n        :return: None\n        '''", "\n", "p", "=", "self", ".", "params", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gts", "=", "self", ".", "cocoGt", ".", "loadAnns", "(", "self", ".", "cocoGt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ",", "catIds", "=", "p", ".", "catIds", ")", ")", "\n", "dts", "=", "self", ".", "cocoDt", ".", "loadAnns", "(", "self", ".", "cocoDt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ",", "catIds", "=", "p", ".", "catIds", ")", ")", "\n", "", "else", ":", "\n", "            ", "gts", "=", "self", ".", "cocoGt", ".", "loadAnns", "(", "self", ".", "cocoGt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ")", ")", "\n", "dts", "=", "self", ".", "cocoDt", ".", "loadAnns", "(", "self", ".", "cocoDt", ".", "getAnnIds", "(", "imgIds", "=", "p", ".", "imgIds", ")", ")", "\n", "\n", "\n", "# set ignore flag", "\n", "", "for", "gt", "in", "gts", ":", "\n", "            ", "gt", "[", "'ignore'", "]", "=", "gt", "[", "'ignore'", "]", "if", "'ignore'", "in", "gt", "else", "0", "\n", "gt", "[", "'ignore'", "]", "=", "1", "if", "(", "gt", "[", "'height'", "]", "<", "self", ".", "params", ".", "HtRng", "[", "id_setup", "]", "[", "0", "]", "or", "gt", "[", "'height'", "]", ">", "self", ".", "params", ".", "HtRng", "[", "id_setup", "]", "[", "1", "]", ")", "or", "(", "gt", "[", "'vis_ratio'", "]", "<", "self", ".", "params", ".", "VisRng", "[", "id_setup", "]", "[", "0", "]", "or", "gt", "[", "'vis_ratio'", "]", ">", "self", ".", "params", ".", "VisRng", "[", "id_setup", "]", "[", "1", "]", ")", "else", "gt", "[", "'ignore'", "]", "\n", "\n", "", "self", ".", "_gts", "=", "defaultdict", "(", "list", ")", "# gt for evaluation", "\n", "self", ".", "_dts", "=", "defaultdict", "(", "list", ")", "# dt for evaluation", "\n", "for", "gt", "in", "gts", ":", "\n", "            ", "self", ".", "_gts", "[", "gt", "[", "'image_id'", "]", ",", "gt", "[", "'category_id'", "]", "]", ".", "append", "(", "gt", ")", "\n", "", "for", "dt", "in", "dts", ":", "\n", "            ", "self", ".", "_dts", "[", "dt", "[", "'image_id'", "]", ",", "dt", "[", "'category_id'", "]", "]", ".", "append", "(", "dt", ")", "\n", "", "self", ".", "evalImgs", "=", "defaultdict", "(", "list", ")", "# per-image per-category evaluation results", "\n", "self", ".", "eval", "=", "{", "}", "# accumulated evaluation results", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.evaluate": [[114, 147], ["time.time", "list", "sorted", "eval_MR_multisetup.COCOeval._prepare", "copy.deepcopy", "time.time", "print", "numpy.unique", "list", "eval_MR_multisetup.COCOeval.evaluateImg"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval._prepare", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.evaluateImg"], ["", "def", "evaluate", "(", "self", ",", "id_setup", ")", ":", "\n", "        ", "'''\n        Run per image evaluation on given images and store results (a list of dict) in self.evalImgs\n        :return: None\n        '''", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "#print('Running per image evaluation...')", "\n", "p", "=", "self", ".", "params", "\n", "# add backward compatibility if useSegm is specified in params", "\n", "if", "not", "p", ".", "useSegm", "is", "None", ":", "\n", "            ", "p", ".", "iouType", "=", "'segm'", "if", "p", ".", "useSegm", "==", "1", "else", "'bbox'", "\n", "print", "(", "'useSegm (deprecated) is not None. Running {} evaluation'", ".", "format", "(", "p", ".", "iouType", ")", ")", "\n", "#print('Evaluate annotation type *{}*'.format(p.iouType))", "\n", "", "p", ".", "imgIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "imgIds", ")", ")", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "p", ".", "catIds", "=", "list", "(", "np", ".", "unique", "(", "p", ".", "catIds", ")", ")", "\n", "", "p", ".", "maxDets", "=", "sorted", "(", "p", ".", "maxDets", ")", "\n", "self", ".", "params", "=", "p", "\n", "\n", "self", ".", "_prepare", "(", "id_setup", ")", "\n", "# loop through images, area range, max detection number", "\n", "catIds", "=", "p", ".", "catIds", "if", "p", ".", "useCats", "else", "[", "-", "1", "]", "\n", "\n", "evaluateImg", "=", "self", ".", "evaluateImg", "\n", "maxDet", "=", "p", ".", "maxDets", "[", "-", "1", "]", "\n", "HtRng", "=", "self", ".", "params", ".", "HtRng", "[", "id_setup", "]", "\n", "VisRng", "=", "self", ".", "params", ".", "VisRng", "[", "id_setup", "]", "\n", "self", ".", "evalImgs", "=", "[", "evaluateImg", "(", "imgId", ",", "catId", ",", "HtRng", ",", "VisRng", ",", "maxDet", ")", "\n", "for", "catId", "in", "catIds", "\n", "for", "imgId", "in", "p", ".", "imgIds", "\n", "]", "\n", "self", ".", "_paramsEval", "=", "copy", ".", "deepcopy", "(", "self", ".", "params", ")", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "#print('DONE (t={:0.2f}s).'.format(toc-tic))", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.computeIoU": [[150, 174], ["numpy.argsort", "eval_MR_multisetup.COCOeval.iou", "len", "int", "len", "len", "Exception"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.iou"], ["", "def", "computeIoU", "(", "self", ",", "gt", ",", "dt", ")", ":", "\n", "        ", "p", "=", "self", ".", "params", "\n", "if", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "return", "[", "]", "\n", "", "inds", "=", "np", ".", "argsort", "(", "[", "-", "d", "[", "'score'", "]", "for", "d", "in", "dt", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "dt", "=", "[", "dt", "[", "i", "]", "for", "i", "in", "inds", "]", "\n", "if", "len", "(", "dt", ")", ">", "p", ".", "maxDets", "[", "-", "1", "]", ":", "\n", "            ", "dt", "=", "dt", "[", "0", ":", "p", ".", "maxDets", "[", "-", "1", "]", "]", "\n", "\n", "\n", "", "if", "p", ".", "iouType", "==", "'segm'", ":", "\n", "            ", "g", "=", "[", "g", "[", "'segmentation'", "]", "for", "g", "in", "gt", "]", "\n", "d", "=", "[", "d", "[", "'segmentation'", "]", "for", "d", "in", "dt", "]", "\n", "", "elif", "p", ".", "iouType", "==", "'bbox'", ":", "\n", "            ", "g", "=", "[", "g", "[", "'bbox'", "]", "for", "g", "in", "gt", "]", "\n", "d", "=", "[", "d", "[", "'bbox'", "]", "for", "d", "in", "dt", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unknown iouType for iou computation'", ")", "\n", "\n", "\n", "# compute iou between each dt and gt region", "\n", "", "iscrowd", "=", "[", "int", "(", "o", "[", "'ignore'", "]", ")", "for", "o", "in", "gt", "]", "\n", "ious", "=", "self", ".", "iou", "(", "d", ",", "g", ",", "iscrowd", ")", "\n", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.iou": [[175, 207], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.zeros", "enumerate", "enumerate", "len", "len", "min", "max", "min", "max", "float"], "methods", ["None"], ["", "def", "iou", "(", "self", ",", "dts", ",", "gts", ",", "pyiscrowd", ")", ":", "\n", "        ", "dts", "=", "np", ".", "asarray", "(", "dts", ")", "\n", "gts", "=", "np", ".", "asarray", "(", "gts", ")", "\n", "pyiscrowd", "=", "np", ".", "asarray", "(", "pyiscrowd", ")", "\n", "ious", "=", "np", ".", "zeros", "(", "(", "len", "(", "dts", ")", ",", "len", "(", "gts", ")", ")", ")", "\n", "for", "j", ",", "gt", "in", "enumerate", "(", "gts", ")", ":", "\n", "            ", "gx1", "=", "gt", "[", "0", "]", "\n", "gy1", "=", "gt", "[", "1", "]", "\n", "gx2", "=", "gt", "[", "0", "]", "+", "gt", "[", "2", "]", "\n", "gy2", "=", "gt", "[", "1", "]", "+", "gt", "[", "3", "]", "\n", "garea", "=", "gt", "[", "2", "]", "*", "gt", "[", "3", "]", "\n", "for", "i", ",", "dt", "in", "enumerate", "(", "dts", ")", ":", "\n", "                ", "dx1", "=", "dt", "[", "0", "]", "\n", "dy1", "=", "dt", "[", "1", "]", "\n", "dx2", "=", "dt", "[", "0", "]", "+", "dt", "[", "2", "]", "\n", "dy2", "=", "dt", "[", "1", "]", "+", "dt", "[", "3", "]", "\n", "darea", "=", "dt", "[", "2", "]", "*", "dt", "[", "3", "]", "\n", "\n", "unionw", "=", "min", "(", "dx2", ",", "gx2", ")", "-", "max", "(", "dx1", ",", "gx1", ")", "\n", "if", "unionw", "<=", "0", ":", "\n", "                    ", "continue", "\n", "", "unionh", "=", "min", "(", "dy2", ",", "gy2", ")", "-", "max", "(", "dy1", ",", "gy1", ")", "\n", "if", "unionh", "<=", "0", ":", "\n", "                    ", "continue", "\n", "", "t", "=", "unionw", "*", "unionh", "\n", "if", "pyiscrowd", "[", "j", "]", ":", "\n", "                    ", "unionarea", "=", "darea", "\n", "", "else", ":", "\n", "                    ", "unionarea", "=", "darea", "+", "garea", "-", "t", "\n", "\n", "", "ious", "[", "i", ",", "j", "]", "=", "float", "(", "t", ")", "/", "unionarea", "\n", "", "", "return", "ious", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.evaluateImg": [[210, 305], ["numpy.argsort", "numpy.argsort", "numpy.array", "len", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.zeros", "len", "eval_MR_multisetup.COCOeval.computeIoU", "enumerate", "len", "len", "int", "len", "enumerate", "min", "enumerate"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.computeIoU"], ["", "def", "evaluateImg", "(", "self", ",", "imgId", ",", "catId", ",", "hRng", ",", "vRng", ",", "maxDet", ")", ":", "\n", "        ", "'''\n        perform evaluation for single category and image\n        :return: dict (single image results)\n        '''", "\n", "if", "imgId", "==", "2", ":", "\n", "            ", "a", "=", "1", "\n", "\n", "", "p", "=", "self", ".", "params", "\n", "\n", "if", "p", ".", "useCats", ":", "\n", "            ", "gt", "=", "self", ".", "_gts", "[", "imgId", ",", "catId", "]", "\n", "dt", "=", "self", ".", "_dts", "[", "imgId", ",", "catId", "]", "\n", "", "else", ":", "\n", "            ", "gt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_gts", "[", "imgId", ",", "cId", "]", "]", "\n", "dt", "=", "[", "_", "for", "cId", "in", "p", ".", "catIds", "for", "_", "in", "self", ".", "_dts", "[", "imgId", ",", "cId", "]", "]", "\n", "", "if", "len", "(", "gt", ")", "==", "0", "and", "len", "(", "dt", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "for", "g", "in", "gt", ":", "\n", "            ", "if", "g", "[", "'ignore'", "]", ":", "\n", "                ", "g", "[", "'_ignore'", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "g", "[", "'_ignore'", "]", "=", "0", "\n", "# sort dt highest score first, sort gt ignore last", "\n", "", "", "gtind", "=", "np", ".", "argsort", "(", "[", "g", "[", "'_ignore'", "]", "for", "g", "in", "gt", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "gt", "=", "[", "gt", "[", "i", "]", "for", "i", "in", "gtind", "]", "\n", "dtind", "=", "np", ".", "argsort", "(", "[", "-", "d", "[", "'score'", "]", "for", "d", "in", "dt", "]", ",", "kind", "=", "'mergesort'", ")", "\n", "dt", "=", "[", "dt", "[", "i", "]", "for", "i", "in", "dtind", "[", "0", ":", "maxDet", "]", "]", "\n", "# exclude dt out of height range", "\n", "dt", "=", "[", "d", "for", "d", "in", "dt", "if", "d", "[", "'height'", "]", ">=", "hRng", "[", "0", "]", "/", "self", ".", "params", ".", "expFilter", "and", "d", "[", "'height'", "]", "<", "hRng", "[", "1", "]", "*", "self", ".", "params", ".", "expFilter", "]", "\n", "dtind", "=", "np", ".", "array", "(", "[", "int", "(", "d", "[", "'id'", "]", "-", "dt", "[", "0", "]", "[", "'id'", "]", ")", "for", "d", "in", "dt", "]", ")", "\n", "\n", "# load computed ious", "\n", "if", "len", "(", "dtind", ")", ">", "0", ":", "\n", "            ", "ious", "=", "self", ".", "computeIoU", "(", "gt", ",", "dt", ")", "\n", "", "else", ":", "\n", "            ", "ious", "=", "[", "]", "\n", "\n", "", "T", "=", "len", "(", "p", ".", "iouThrs", ")", "\n", "G", "=", "len", "(", "gt", ")", "\n", "D", "=", "len", "(", "dt", ")", "\n", "gtm", "=", "np", ".", "zeros", "(", "(", "T", ",", "G", ")", ")", "\n", "dtm", "=", "np", ".", "zeros", "(", "(", "T", ",", "D", ")", ")", "\n", "gtIg", "=", "np", ".", "array", "(", "[", "g", "[", "'_ignore'", "]", "for", "g", "in", "gt", "]", ")", "\n", "dtIg", "=", "np", ".", "zeros", "(", "(", "T", ",", "D", ")", ")", "\n", "if", "not", "len", "(", "ious", ")", "==", "0", ":", "\n", "            ", "for", "tind", ",", "t", "in", "enumerate", "(", "p", ".", "iouThrs", ")", ":", "\n", "                ", "for", "dind", ",", "d", "in", "enumerate", "(", "dt", ")", ":", "\n", "# information about best match so far (m=-1 -> unmatched)", "\n", "                    ", "iou", "=", "min", "(", "[", "t", ",", "1", "-", "1e-10", "]", ")", "\n", "bstOa", "=", "iou", "\n", "bstg", "=", "-", "2", "\n", "bstm", "=", "-", "2", "\n", "for", "gind", ",", "g", "in", "enumerate", "(", "gt", ")", ":", "\n", "                        ", "m", "=", "gtm", "[", "tind", ",", "gind", "]", "\n", "# if this gt already matched, and not a crowd, continue", "\n", "if", "m", ">", "0", ":", "\n", "                            ", "continue", "\n", "# if dt matched to reg gt, and on ignore gt, stop", "\n", "", "if", "bstm", "!=", "-", "2", "and", "gtIg", "[", "gind", "]", "==", "1", ":", "\n", "                            ", "break", "\n", "# continue to next gt unless better match made", "\n", "", "if", "ious", "[", "dind", ",", "gind", "]", "<", "bstOa", ":", "\n", "                            ", "continue", "\n", "# if match successful and best so far, store appropriately", "\n", "", "bstOa", "=", "ious", "[", "dind", ",", "gind", "]", "\n", "bstg", "=", "gind", "\n", "if", "gtIg", "[", "gind", "]", "==", "0", ":", "\n", "                            ", "bstm", "=", "1", "\n", "", "else", ":", "\n", "                            ", "bstm", "=", "-", "1", "\n", "\n", "# if match made store id of match for both dt and gt", "\n", "", "", "if", "bstg", "==", "-", "2", ":", "\n", "                        ", "continue", "\n", "", "dtIg", "[", "tind", ",", "dind", "]", "=", "gtIg", "[", "bstg", "]", "\n", "dtm", "[", "tind", ",", "dind", "]", "=", "gt", "[", "bstg", "]", "[", "'id'", "]", "\n", "if", "bstm", "==", "1", ":", "\n", "                        ", "gtm", "[", "tind", ",", "bstg", "]", "=", "d", "[", "'id'", "]", "\n", "\n", "# store results for given image and category", "\n", "", "", "", "", "return", "{", "\n", "'image_id'", ":", "imgId", ",", "\n", "'category_id'", ":", "catId", ",", "\n", "'hRng'", ":", "hRng", ",", "\n", "'vRng'", ":", "vRng", ",", "\n", "'maxDet'", ":", "maxDet", ",", "\n", "'dtIds'", ":", "[", "d", "[", "'id'", "]", "for", "d", "in", "dt", "]", ",", "\n", "'gtIds'", ":", "[", "g", "[", "'id'", "]", "for", "g", "in", "gt", "]", ",", "\n", "'dtMatches'", ":", "dtm", ",", "\n", "'gtMatches'", ":", "gtm", ",", "\n", "'dtScores'", ":", "[", "d", "[", "'score'", "]", "for", "d", "in", "dt", "]", ",", "\n", "'gtIgnore'", ":", "gtIg", ",", "\n", "'dtIgnore'", ":", "dtIg", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.accumulate": [[307, 408], ["time.time", "len", "len", "len", "set", "set", "set", "len", "enumerate", "time.time", "print", "len", "numpy.ones", "numpy.ones", "enumerate", "datetime.datetime.now().strftime", "enumerate", "enumerate", "enumerate", "numpy.concatenate", "numpy.argsort", "numpy.sum", "numpy.concatenate", "numpy.count_nonzero", "numpy.logical_and", "numpy.logical_and", "numpy.cumsum().astype", "numpy.cumsum().astype", "enumerate", "len", "numpy.concatenate", "numpy.concatenate", "numpy.logical_not", "numpy.logical_not", "numpy.logical_not", "numpy.where", "zip", "numpy.array", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "recall.tolist.tolist.tolist", "q.tolist.tolist.tolist", "range", "numpy.array", "numpy.array", "numpy.array", "datetime.datetime.now", "numpy.cumsum", "numpy.cumsum", "numpy.array", "numpy.searchsorted", "enumerate", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "accumulate", "(", "self", ",", "p", "=", "None", ")", ":", "\n", "        ", "'''\n        Accumulate per image evaluation results and store the result in self.eval\n        :param p: input params for evaluation\n        :return: None\n        '''", "\n", "#print('Accumulating evaluation results...')", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "not", "self", ".", "evalImgs", ":", "\n", "            ", "print", "(", "'Please run evaluate() first'", ")", "\n", "# allows input customized parameters", "\n", "", "if", "p", "is", "None", ":", "\n", "            ", "p", "=", "self", ".", "params", "\n", "", "p", ".", "catIds", "=", "p", ".", "catIds", "if", "p", ".", "useCats", "==", "1", "else", "[", "-", "1", "]", "\n", "T", "=", "len", "(", "p", ".", "iouThrs", ")", "\n", "R", "=", "len", "(", "p", ".", "fppiThrs", ")", "\n", "K", "=", "len", "(", "p", ".", "catIds", ")", "if", "p", ".", "useCats", "else", "1", "\n", "M", "=", "len", "(", "p", ".", "maxDets", ")", "\n", "ys", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "R", ",", "K", ",", "M", ")", ")", "# -1 for the precision of absent categories", "\n", "_fppi", "=", "-", "np", ".", "ones", "(", "(", "T", ",", "R", ",", "K", ",", "M", ")", ")", "# -1 for the precision of absent categories", "\n", "\n", "\n", "# create dictionary for future indexing", "\n", "_pe", "=", "self", ".", "_paramsEval", "\n", "catIds", "=", "[", "1", "]", "#_pe.catIds if _pe.useCats else [-1]", "\n", "setK", "=", "set", "(", "catIds", ")", "\n", "setM", "=", "set", "(", "_pe", ".", "maxDets", ")", "\n", "setI", "=", "set", "(", "_pe", ".", "imgIds", ")", "\n", "# get inds to evaluate", "\n", "k_list", "=", "[", "n", "for", "n", ",", "k", "in", "enumerate", "(", "p", ".", "catIds", ")", "if", "k", "in", "setK", "]", "\n", "\n", "m_list", "=", "[", "m", "for", "n", ",", "m", "in", "enumerate", "(", "p", ".", "maxDets", ")", "if", "m", "in", "setM", "]", "\n", "i_list", "=", "[", "n", "for", "n", ",", "i", "in", "enumerate", "(", "p", ".", "imgIds", ")", "if", "i", "in", "setI", "]", "\n", "I0", "=", "len", "(", "_pe", ".", "imgIds", ")", "\n", "\n", "# retrieve E at each category, area range, and max number of detections", "\n", "for", "k", ",", "k0", "in", "enumerate", "(", "k_list", ")", ":", "\n", "            ", "Nk", "=", "k0", "*", "I0", "\n", "for", "m", ",", "maxDet", "in", "enumerate", "(", "m_list", ")", ":", "\n", "                ", "E", "=", "[", "self", ".", "evalImgs", "[", "Nk", "+", "i", "]", "for", "i", "in", "i_list", "]", "\n", "E", "=", "[", "e", "for", "e", "in", "E", "if", "not", "e", "is", "None", "]", "\n", "if", "len", "(", "E", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "dtScores", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtScores'", "]", "[", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ")", "\n", "\n", "# different sorting method generates slightly different results.", "\n", "# mergesort is used to be consistent as Matlab implementation.", "\n", "\n", "inds", "=", "np", ".", "argsort", "(", "-", "dtScores", ",", "kind", "=", "'mergesort'", ")", "\n", "\n", "dtm", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtMatches'", "]", "[", ":", ",", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "inds", "]", "\n", "temp", "=", "np", ".", "sum", "(", "[", "dtm", "==", "0.", "]", ")", "\n", "dtIg", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'dtIgnore'", "]", "[", ":", ",", "0", ":", "maxDet", "]", "for", "e", "in", "E", "]", ",", "axis", "=", "1", ")", "[", ":", ",", "inds", "]", "\n", "gtIg", "=", "np", ".", "concatenate", "(", "[", "e", "[", "'gtIgnore'", "]", "for", "e", "in", "E", "]", ")", "\n", "npig", "=", "np", ".", "count_nonzero", "(", "gtIg", "==", "0", ")", "\n", "if", "npig", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "tps", "=", "np", ".", "logical_and", "(", "dtm", ",", "np", ".", "logical_not", "(", "dtIg", ")", ")", "\n", "fps", "=", "np", ".", "logical_and", "(", "np", ".", "logical_not", "(", "dtm", ")", ",", "np", ".", "logical_not", "(", "dtIg", ")", ")", "\n", "inds", "=", "np", ".", "where", "(", "dtIg", "==", "0", ")", "[", "1", "]", "\n", "tps", "=", "tps", "[", ":", ",", "inds", "]", "\n", "fps", "=", "fps", "[", ":", ",", "inds", "]", "\n", "\n", "tp_sum", "=", "np", ".", "cumsum", "(", "tps", ",", "axis", "=", "1", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float", ")", "\n", "fp_sum", "=", "np", ".", "cumsum", "(", "fps", ",", "axis", "=", "1", ")", ".", "astype", "(", "dtype", "=", "np", ".", "float", ")", "\n", "for", "t", ",", "(", "tp", ",", "fp", ")", "in", "enumerate", "(", "zip", "(", "tp_sum", ",", "fp_sum", ")", ")", ":", "\n", "                    ", "tp", "=", "np", ".", "array", "(", "tp", ")", "\n", "fppi", "=", "np", ".", "array", "(", "fp", ")", "/", "I0", "\n", "nd", "=", "len", "(", "tp", ")", "\n", "recall", "=", "tp", "/", "npig", "\n", "q", "=", "np", ".", "zeros", "(", "(", "R", ",", ")", ")", "\n", "_fp", "=", "np", ".", "zeros", "(", "(", "np", ".", "sum", "(", "dtIg", "==", "0", ")", ",", ")", ")", "\n", "_rc", "=", "np", ".", "zeros", "(", "(", "np", ".", "sum", "(", "dtIg", "==", "0", ")", ",", ")", ")", "\n", "\n", "# numpy is slow without cython optimization for accessing elements", "\n", "# use python array gets significant speed improvement", "\n", "recall", "=", "recall", ".", "tolist", "(", ")", "\n", "q", "=", "q", ".", "tolist", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "nd", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "                        ", "if", "recall", "[", "i", "]", "<", "recall", "[", "i", "-", "1", "]", ":", "\n", "                            ", "recall", "[", "i", "-", "1", "]", "=", "recall", "[", "i", "]", "\n", "", "", "inds", "=", "np", ".", "searchsorted", "(", "fppi", ",", "p", ".", "fppiThrs", ",", "side", "=", "'right'", ")", "-", "1", "\n", "try", ":", "\n", "                        ", "for", "ri", ",", "pi", "in", "enumerate", "(", "inds", ")", ":", "\n", "                            ", "q", "[", "ri", "]", "=", "recall", "[", "pi", "]", "\n", "", "", "except", ":", "\n", "                        ", "pass", "\n", "", "ys", "[", "t", ",", ":", ",", "k", ",", "m", "]", "=", "np", ".", "array", "(", "q", ")", "\n", "_rc", "=", "np", ".", "array", "(", "recall", ")", "\n", "_fp", "=", "np", ".", "array", "(", "fppi", ")", "\n", "", "", "", "self", ".", "eval", "=", "{", "\n", "'params'", ":", "p", ",", "\n", "'counts'", ":", "[", "T", ",", "R", ",", "K", ",", "M", "]", ",", "\n", "'date'", ":", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "\n", "'TP'", ":", "ys", ",", "\n", "'FPPI'", ":", "_fp", ",", "\n", "'rc'", ":", "_rc", "\n", "}", "\n", "toc", "=", "time", ".", "time", "(", ")", "\n", "#print('DONE (t={:0.2f}s).'.format( toc-tic))", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.summarize": [[410, 452], ["eval_MR_multisetup.COCOeval.summarize._summarize"], "methods", ["None"], ["", "def", "summarize", "(", "self", ",", "id_setup", ",", "res_file", ",", "_print", ")", ":", "\n", "        ", "'''\n        Compute and display summary metrics for evaluation results.\n        Note this functin can *only* be applied on the default parameter setting\n        '''", "\n", "def", "_summarize", "(", "iouThr", "=", "None", ",", "maxDets", "=", "100", ")", ":", "\n", "            ", "p", "=", "self", ".", "params", "\n", "iStr", "=", "' {:<18} {} @ {:<18} [ IoU={:<9} | height={:>6s} | visibility={:>6s} ] = {:0.2f}%'", "\n", "titleStr", "=", "'Average Miss Rate'", "\n", "typeStr", "=", "'(MR)'", "\n", "setupStr", "=", "p", ".", "SetupLbl", "[", "id_setup", "]", "\n", "iouStr", "=", "'{:0.2f}:{:0.2f}'", ".", "format", "(", "p", ".", "iouThrs", "[", "0", "]", ",", "p", ".", "iouThrs", "[", "-", "1", "]", ")", "if", "iouThr", "is", "None", "else", "'{:0.2f}'", ".", "format", "(", "iouThr", ")", "\n", "heightStr", "=", "'[{:0.0f}:{:0.0f}]'", ".", "format", "(", "p", ".", "HtRng", "[", "id_setup", "]", "[", "0", "]", ",", "p", ".", "HtRng", "[", "id_setup", "]", "[", "1", "]", ")", "\n", "occlStr", "=", "'[{:0.2f}:{:0.2f}]'", ".", "format", "(", "p", ".", "VisRng", "[", "id_setup", "]", "[", "0", "]", ",", "p", ".", "VisRng", "[", "id_setup", "]", "[", "1", "]", ")", "\n", "\n", "mind", "=", "[", "i", "for", "i", ",", "mDet", "in", "enumerate", "(", "p", ".", "maxDets", ")", "if", "mDet", "==", "maxDets", "]", "\n", "\n", "# dimension of precision: [TxRxKxAxM]", "\n", "s", "=", "self", ".", "eval", "[", "'TP'", "]", "\n", "# IoU", "\n", "if", "iouThr", "is", "not", "None", ":", "\n", "                ", "t", "=", "np", ".", "where", "(", "iouThr", "==", "p", ".", "iouThrs", ")", "[", "0", "]", "\n", "s", "=", "s", "[", "t", "]", "\n", "", "mrs", "=", "1", "-", "s", "[", ":", ",", ":", ",", ":", ",", "mind", "]", "\n", "if", "len", "(", "mrs", "[", "mrs", "<", "2", "]", ")", "==", "0", ":", "\n", "                ", "mean_s", "=", "-", "1", "\n", "", "else", ":", "\n", "                ", "mean_s", "=", "np", ".", "log", "(", "mrs", "[", "mrs", "<", "2", "]", ")", "\n", "mean_s", "=", "np", ".", "mean", "(", "mean_s", ")", "\n", "mean_s", "=", "np", ".", "exp", "(", "mean_s", ")", "\n", "", "if", "_print", ":", "\n", "                ", "print", "(", "iStr", ".", "format", "(", "titleStr", ",", "typeStr", ",", "setupStr", ",", "iouStr", ",", "heightStr", ",", "occlStr", ",", "mean_s", "*", "100", ")", ")", "\n", "", "if", "res_file", "is", "not", "None", ":", "\n", "                ", "res_file", ".", "write", "(", "iStr", ".", "format", "(", "titleStr", ",", "typeStr", ",", "setupStr", ",", "iouStr", ",", "heightStr", ",", "occlStr", ",", "mean_s", "*", "100", ")", ")", "\n", "res_file", ".", "write", "(", "'\\n'", ")", "\n", "", "return", "mean_s", "*", "100.", "\n", "\n", "", "if", "not", "self", ".", "eval", ":", "\n", "            ", "raise", "Exception", "(", "'Please run accumulate() first'", ")", "\n", "", "mean_s", "=", "_summarize", "(", "iouThr", "=", ".5", ",", "maxDets", "=", "1000", ")", "\n", "return", "mean_s", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.__str__": [[454, 456], ["eval_MR_multisetup.COCOeval.summarize"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.summarize"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "self", ".", "summarize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.plot": [[457, 498], ["len", "numpy.log", "numpy.mean", "numpy.exp", "arr_fppi.append", "arr_mr.append", "arr_ms.append", "range", "matplotlib.legend", "matplotlib.xscale", "matplotlib.axis", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "enumerate", "numpy.where", "len", "matplotlib.plot", "str", "round", "[].split", "eval_MR_multisetup.COCOeval.params.SetupLbl[].split"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.COCOeval.plot"], ["", "def", "plot", "(", "self", ",", "step", ",", "arr_mr", ",", "arr_fppi", ",", "arr_ms", ",", "iouThr", "=", "0.5", ",", "maxDets", "=", "1000", ")", ":", "\n", "\n", "        ", "p", "=", "self", ".", "params", "\n", "\n", "mind", "=", "[", "i", "for", "i", ",", "mDet", "in", "enumerate", "(", "p", ".", "maxDets", ")", "if", "mDet", "==", "maxDets", "]", "\n", "\n", "# dimension of precision: [TxRxKxAxM]", "\n", "s", "=", "self", ".", "eval", "[", "'TP'", "]", "\n", "rc_plot", "=", "self", ".", "eval", "[", "'rc'", "]", "\n", "f", "=", "self", ".", "eval", "[", "'FPPI'", "]", "\n", "# IoU", "\n", "if", "iouThr", "is", "not", "None", ":", "\n", "            ", "t", "=", "np", ".", "where", "(", "iouThr", "==", "p", ".", "iouThrs", ")", "[", "0", "]", "\n", "s", "=", "s", "[", "t", "]", "\n", "", "mrs", "=", "1", "-", "s", "[", ":", ",", ":", ",", ":", ",", "mind", "]", "\n", "fppi", "=", "f", "\n", "rc_plot", "=", "1", "-", "rc_plot", "\n", "if", "len", "(", "mrs", "[", "mrs", "<", "2", "]", ")", "==", "0", ":", "\n", "            ", "mean_s", "=", "-", "1", "\n", "fppi", "=", "-", "1", "\n", "rc_plot", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "mean_s", "=", "np", ".", "log", "(", "mrs", "[", "mrs", "<", "2", "]", ")", "\n", "mean_s", "=", "np", ".", "mean", "(", "mean_s", ")", "\n", "mean_s", "=", "np", ".", "exp", "(", "mean_s", ")", "\n", "fppi", "=", "fppi", "[", "fppi", ">", "-", "1", "]", "\n", "arr_fppi", ".", "append", "(", "fppi", ")", "\n", "arr_mr", ".", "append", "(", "rc_plot", ")", "\n", "arr_ms", ".", "append", "(", "mean_s", ")", "\n", "\n", "", "if", "step", "==", "3", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "arr_fppi", ")", ")", ":", "\n", "                ", "plt", ".", "plot", "(", "arr_fppi", "[", "i", "]", ",", "arr_mr", "[", "i", "]", ",", "label", "=", "self", ".", "params", ".", "SetupLbl", "[", "i", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"=\"", ")", "[", "-", "1", "]", "+", "\" = \"", "+", "str", "(", "round", "(", "arr_ms", "[", "i", "]", "*", "100", ",", "2", ")", ")", "+", "\"%\"", ")", "\n", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "xscale", "(", "'log'", ",", "basex", "=", "10", ")", "\n", "\n", "plt", ".", "axis", "(", "[", "0.0001", ",", "20", ",", "0", ",", "1", "]", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "xlabel", "(", "'FPPI'", ")", "\n", "plt", ".", "ylabel", "(", "'Miss Rate'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "#plt.savefig(\"Miss_rate.png\")", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.Params.setDetParams": [[505, 526], ["numpy.linspace", "numpy.array", "numpy.array", "numpy.round"], "methods", ["None"], ["def", "setDetParams", "(", "self", ")", ":", "\n", "        ", "self", ".", "imgIds", "=", "[", "]", "\n", "self", ".", "catIds", "=", "[", "]", "\n", "# np.arange causes trouble.  the data point on arange is slightly larger than the true value", "\n", "\n", "self", ".", "recThrs", "=", "np", ".", "linspace", "(", ".0", ",", "1.00", ",", "np", ".", "round", "(", "(", "1.00", "-", ".0", ")", "/", ".01", ")", "+", "1", ",", "endpoint", "=", "True", ")", "\n", "self", ".", "fppiThrs", "=", "np", ".", "array", "(", "[", "0.0100", ",", "0.0178", ",", "0.0316", ",", "0.0562", ",", "0.1000", ",", "0.1778", ",", "0.3162", ",", "0.5623", ",", "1.0000", "]", ")", "\n", "self", ".", "maxDets", "=", "[", "1000", "]", "\n", "self", ".", "expFilter", "=", "1.25", "\n", "self", ".", "useCats", "=", "1", "\n", "\n", "self", ".", "iouThrs", "=", "np", ".", "array", "(", "[", "0.5", "]", ")", "# np.linspace(.5, 0.95, np.round((0.95 - .5) / .05) + 1, endpoint=True)", "\n", "\n", "if", "self", ".", "sub_type", "==", "0", ":", "\n", "            ", "self", ".", "HtRng", "=", "[", "[", "50", ",", "1e5", "**", "2", "]", ",", "[", "50", ",", "75", "]", ",", "[", "50", ",", "1e5", "**", "2", "]", ",", "[", "20", ",", "1e5", "**", "2", "]", "]", "\n", "self", ".", "VisRng", "=", "[", "[", "0.65", ",", "1e5", "**", "2", "]", ",", "[", "0.65", ",", "1e5", "**", "2", "]", ",", "[", "0.2", ",", "0.65", "]", ",", "[", "0.2", ",", "1e5", "**", "2", "]", "]", "\n", "self", ".", "SetupLbl", "=", "[", "'Reasonable'", ",", "'Reasonable_small'", ",", "'Reasonable_occ=heavy'", ",", "'All'", "]", "\n", "", "elif", "self", ".", "sub_type", "==", "1", ":", "\n", "            ", "self", ".", "HtRng", "=", "[", "[", "50", ",", "1e5", "**", "2", "]", ",", "[", "50", ",", "1e5", "**", "2", "]", ",", "[", "50", ",", "1e5", "**", "2", "]", ",", "[", "50", ",", "1e5", "**", "2", "]", "]", "\n", "self", ".", "VisRng", "=", "[", "[", "0.65", ",", "1e5", "**", "2", "]", ",", "[", "0.9", ",", "1e5", "**", "2", "]", ",", "[", "0.65", ",", "0.9", "]", ",", "[", "0", ",", "0.65", "]", "]", "\n", "self", ".", "SetupLbl", "=", "[", "'Reasonable'", ",", "'bare'", ",", "'partial'", ",", "'heavy'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.Params.__init__": [[527, 536], ["eval_MR_multisetup.Params.setDetParams", "Exception"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.evalutation.eval_MR_multisetup.Params.setDetParams"], ["", "", "def", "__init__", "(", "self", ",", "iouType", "=", "'segm'", ",", "sub_type", "=", "0", ")", ":", "\n", "        ", "self", ".", "sub_type", "=", "sub_type", "\n", "if", "iouType", "==", "'segm'", "or", "iouType", "==", "'bbox'", ":", "\n", "            ", "self", ".", "setDetParams", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'iouType not supported'", ")", "\n", "", "self", ".", "iouType", "=", "iouType", "\n", "# useSegm is deprecated", "\n", "self", ".", "useSegm", "=", "None", "", "", "", ""]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.vgg.vgg_arg_scope": [[43, 56], ["slim.arg_scope", "slim.arg_scope", "slim.l2_regularizer", "tensorflow.zeros_initializer"], "function", ["None"], ["def", "vgg_arg_scope", "(", "weight_decay", "=", "0.0005", ")", ":", "\n", "  ", "\"\"\"Defines the VGG arg scope.\n  Args:\n    weight_decay: The l2 regularization coefficient.\n  Returns:\n    An arg_scope.\n  \"\"\"", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", "]", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", ",", "\n", "biases_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", "]", ",", "padding", "=", "'SAME'", ")", "as", "arg_sc", ":", "\n", "      ", "return", "arg_sc", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.vgg.vgg_a": [[58, 130], ["tensorflow.variable_scope", "slim.arg_scope", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.conv2d", "slim.dropout", "slim.conv2d", "slim.utils.convert_collection_to_dict", "tensorflow.reduce_mean", "slim.dropout", "slim.conv2d", "tensorflow.squeeze"], "function", ["None"], ["", "", "", "def", "vgg_a", "(", "inputs", ",", "\n", "num_classes", "=", "1000", ",", "\n", "is_training", "=", "True", ",", "\n", "dropout_keep_prob", "=", "0.5", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "scope", "=", "'vgg_a'", ",", "\n", "fc_conv_padding", "=", "'VALID'", ",", "\n", "global_pool", "=", "False", ")", ":", "\n", "  ", "\"\"\"Oxford Net VGG 11-Layers version A Example.\n  Note: All the fully_connected layers have been transformed to conv2d layers.\n        To use in classification mode, resize input to 224x224.\n  Args:\n    inputs: a tensor of size [batch_size, height, width, channels].\n    num_classes: number of predicted classes. If 0 or None, the logits layer is\n      omitted and the input features to the logits layer are returned instead.\n    is_training: whether or not the model is being trained.\n    dropout_keep_prob: the probability that activations are kept in the dropout\n      layers during training.\n    spatial_squeeze: whether or not should squeeze the spatial dimensions of the\n      outputs. Useful to remove unnecessary dimensions for classification.\n    scope: Optional scope for the variables.\n    fc_conv_padding: the type of padding to use for the fully connected layer\n      that is implemented as a convolutional layer. Use 'SAME' padding if you\n      are applying the network in a fully convolutional manner and want to\n      get a prediction map downsampled by a factor of 32 as an output.\n      Otherwise, the output prediction map will be (input / 32) - 6 in case of\n      'VALID' padding.\n    global_pool: Optional boolean flag. If True, the input to the classification\n      layer is avgpooled to size 1x1, for any input size. (This is not part\n      of the original VGG architecture.)\n  Returns:\n    net: the output of the logits layer (if num_classes is a non-zero integer),\n      or the input to the logits layer (if num_classes is 0 or None).\n    end_points: a dict of tensors with intermediate activations.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'vgg_a'", ",", "[", "inputs", "]", ")", "as", "sc", ":", "\n", "    ", "end_points_collection", "=", "sc", ".", "original_name_scope", "+", "'_end_points'", "\n", "# Collect outputs for conv2d, fully_connected and max_pool2d.", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "max_pool2d", "]", ",", "\n", "outputs_collections", "=", "end_points_collection", ")", ":", "\n", "      ", "net", "=", "slim", ".", "repeat", "(", "inputs", ",", "1", ",", "slim", ".", "conv2d", ",", "64", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool1'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "1", ",", "slim", ".", "conv2d", ",", "128", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv2'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool2'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "2", ",", "slim", ".", "conv2d", ",", "256", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv3'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool3'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "2", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv4'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool4'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "2", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv5'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool5'", ")", "\n", "\n", "# Use conv2d instead of fully_connected layers.", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "7", ",", "7", "]", ",", "padding", "=", "fc_conv_padding", ",", "scope", "=", "'fc6'", ")", "\n", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout6'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'fc7'", ")", "\n", "# Convert end_points_collection into a end_point dict.", "\n", "end_points", "=", "slim", ".", "utils", ".", "convert_collection_to_dict", "(", "end_points_collection", ")", "\n", "if", "global_pool", ":", "\n", "        ", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ",", "name", "=", "'global_pool'", ")", "\n", "end_points", "[", "'global_pool'", "]", "=", "net", "\n", "", "if", "num_classes", ":", "\n", "        ", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout7'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_classes", ",", "[", "1", ",", "1", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "scope", "=", "'fc8'", ")", "\n", "if", "spatial_squeeze", ":", "\n", "          ", "net", "=", "tf", ".", "squeeze", "(", "net", ",", "[", "1", ",", "2", "]", ",", "name", "=", "'fc8/squeezed'", ")", "\n", "", "end_points", "[", "sc", ".", "name", "+", "'/fc8'", "]", "=", "net", "\n", "", "return", "net", ",", "end_points", "\n", "", "", "", "vgg_a", ".", "default_image_size", "=", "224", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.vgg.vgg_16": [[133, 205], ["tensorflow.variable_scope", "slim.arg_scope", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.conv2d", "slim.dropout", "slim.conv2d", "slim.utils.convert_collection_to_dict", "tensorflow.reduce_mean", "slim.dropout", "slim.conv2d", "tensorflow.squeeze"], "function", ["None"], ["def", "vgg_16", "(", "inputs", ",", "\n", "num_classes", "=", "1000", ",", "\n", "is_training", "=", "True", ",", "\n", "dropout_keep_prob", "=", "0.5", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "scope", "=", "'vgg_16'", ",", "\n", "fc_conv_padding", "=", "'VALID'", ",", "\n", "global_pool", "=", "False", ")", ":", "\n", "  ", "\"\"\"Oxford Net VGG 16-Layers version D Example.\n  Note: All the fully_connected layers have been transformed to conv2d layers.\n        To use in classification mode, resize input to 224x224.\n  Args:\n    inputs: a tensor of size [batch_size, height, width, channels].\n    num_classes: number of predicted classes. If 0 or None, the logits layer is\n      omitted and the input features to the logits layer are returned instead.\n    is_training: whether or not the model is being trained.\n    dropout_keep_prob: the probability that activations are kept in the dropout\n      layers during training.\n    spatial_squeeze: whether or not should squeeze the spatial dimensions of the\n      outputs. Useful to remove unnecessary dimensions for classification.\n    scope: Optional scope for the variables.\n    fc_conv_padding: the type of padding to use for the fully connected layer\n      that is implemented as a convolutional layer. Use 'SAME' padding if you\n      are applying the network in a fully convolutional manner and want to\n      get a prediction map downsampled by a factor of 32 as an output.\n      Otherwise, the output prediction map will be (input / 32) - 6 in case of\n      'VALID' padding.\n    global_pool: Optional boolean flag. If True, the input to the classification\n      layer is avgpooled to size 1x1, for any input size. (This is not part\n      of the original VGG architecture.)\n  Returns:\n    net: the output of the logits layer (if num_classes is a non-zero integer),\n      or the input to the logits layer (if num_classes is 0 or None).\n    end_points: a dict of tensors with intermediate activations.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'vgg_16'", ",", "[", "inputs", "]", ")", "as", "sc", ":", "\n", "    ", "end_points_collection", "=", "sc", ".", "original_name_scope", "+", "'_end_points'", "\n", "# Collect outputs for conv2d, fully_connected and max_pool2d.", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", ",", "slim", ".", "max_pool2d", "]", ",", "\n", "outputs_collections", "=", "end_points_collection", ")", ":", "\n", "      ", "net", "=", "slim", ".", "repeat", "(", "inputs", ",", "2", ",", "slim", ".", "conv2d", ",", "64", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool1'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "2", ",", "slim", ".", "conv2d", ",", "128", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv2'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool2'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "3", ",", "slim", ".", "conv2d", ",", "256", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv3'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool3'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "3", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv4'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool4'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "3", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv5'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool5'", ")", "\n", "\n", "# Use conv2d instead of fully_connected layers.", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "7", ",", "7", "]", ",", "padding", "=", "fc_conv_padding", ",", "scope", "=", "'fc6'", ")", "\n", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout6'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'fc7'", ")", "\n", "# Convert end_points_collection into a end_point dict.", "\n", "end_points", "=", "slim", ".", "utils", ".", "convert_collection_to_dict", "(", "end_points_collection", ")", "\n", "if", "global_pool", ":", "\n", "        ", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ",", "name", "=", "'global_pool'", ")", "\n", "end_points", "[", "'global_pool'", "]", "=", "net", "\n", "", "if", "num_classes", ":", "\n", "        ", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout7'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_classes", ",", "[", "1", ",", "1", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "scope", "=", "'fc8'", ")", "\n", "if", "spatial_squeeze", ":", "\n", "          ", "net", "=", "tf", ".", "squeeze", "(", "net", ",", "[", "1", ",", "2", "]", ",", "name", "=", "'fc8/squeezed'", ")", "\n", "", "end_points", "[", "sc", ".", "name", "+", "'/fc8'", "]", "=", "net", "\n", "", "return", "net", ",", "end_points", "\n", "", "", "", "vgg_16", ".", "default_image_size", "=", "224", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.vgg.vgg_19": [[208, 281], ["tensorflow.variable_scope", "slim.arg_scope", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.repeat", "slim.max_pool2d", "slim.conv2d", "slim.dropout", "slim.conv2d", "slim.utils.convert_collection_to_dict", "tensorflow.reduce_mean", "slim.dropout", "slim.conv2d", "tensorflow.squeeze"], "function", ["None"], ["def", "vgg_19", "(", "inputs", ",", "\n", "num_classes", "=", "1000", ",", "\n", "is_training", "=", "True", ",", "\n", "dropout_keep_prob", "=", "0.5", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "scope", "=", "'vgg_19'", ",", "\n", "fc_conv_padding", "=", "'VALID'", ",", "\n", "global_pool", "=", "False", ")", ":", "\n", "  ", "\"\"\"Oxford Net VGG 19-Layers version E Example.\n  Note: All the fully_connected layers have been transformed to conv2d layers.\n        To use in classification mode, resize input to 224x224.\n  Args:\n    inputs: a tensor of size [batch_size, height, width, channels].\n    num_classes: number of predicted classes. If 0 or None, the logits layer is\n      omitted and the input features to the logits layer are returned instead.\n    is_training: whether or not the model is being trained.\n    dropout_keep_prob: the probability that activations are kept in the dropout\n      layers during training.\n    spatial_squeeze: whether or not should squeeze the spatial dimensions of the\n      outputs. Useful to remove unnecessary dimensions for classification.\n    scope: Optional scope for the variables.\n    fc_conv_padding: the type of padding to use for the fully connected layer\n      that is implemented as a convolutional layer. Use 'SAME' padding if you\n      are applying the network in a fully convolutional manner and want to\n      get a prediction map downsampled by a factor of 32 as an output.\n      Otherwise, the output prediction map will be (input / 32) - 6 in case of\n      'VALID' padding.\n    global_pool: Optional boolean flag. If True, the input to the classification\n      layer is avgpooled to size 1x1, for any input size. (This is not part\n      of the original VGG architecture.)\n  Returns:\n    net: the output of the logits layer (if num_classes is a non-zero integer),\n      or the non-dropped-out input to the logits layer (if num_classes is 0 or\n      None).\n    end_points: a dict of tensors with intermediate activations.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'vgg_19'", ",", "[", "inputs", "]", ")", "as", "sc", ":", "\n", "    ", "end_points_collection", "=", "sc", ".", "original_name_scope", "+", "'_end_points'", "\n", "# Collect outputs for conv2d, fully_connected and max_pool2d.", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", ",", "slim", ".", "max_pool2d", "]", ",", "\n", "outputs_collections", "=", "end_points_collection", ")", ":", "\n", "      ", "net", "=", "slim", ".", "repeat", "(", "inputs", ",", "2", ",", "slim", ".", "conv2d", ",", "64", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool1'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "2", ",", "slim", ".", "conv2d", ",", "128", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv2'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool2'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "4", ",", "slim", ".", "conv2d", ",", "256", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv3'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool3'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "4", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv4'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool4'", ")", "\n", "net", "=", "slim", ".", "repeat", "(", "net", ",", "4", ",", "slim", ".", "conv2d", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv5'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "2", ",", "2", "]", ",", "scope", "=", "'pool5'", ")", "\n", "\n", "# Use conv2d instead of fully_connected layers.", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "7", ",", "7", "]", ",", "padding", "=", "fc_conv_padding", ",", "scope", "=", "'fc6'", ")", "\n", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout6'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "4096", ",", "[", "1", ",", "1", "]", ",", "scope", "=", "'fc7'", ")", "\n", "# Convert end_points_collection into a end_point dict.", "\n", "end_points", "=", "slim", ".", "utils", ".", "convert_collection_to_dict", "(", "end_points_collection", ")", "\n", "if", "global_pool", ":", "\n", "        ", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", "]", ",", "keep_dims", "=", "True", ",", "name", "=", "'global_pool'", ")", "\n", "end_points", "[", "'global_pool'", "]", "=", "net", "\n", "", "if", "num_classes", ":", "\n", "        ", "net", "=", "slim", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dropout7'", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_classes", ",", "[", "1", ",", "1", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "scope", "=", "'fc8'", ")", "\n", "if", "spatial_squeeze", ":", "\n", "          ", "net", "=", "tf", ".", "squeeze", "(", "net", ",", "[", "1", ",", "2", "]", ",", "name", "=", "'fc8/squeezed'", ")", "\n", "", "end_points", "[", "sc", ".", "name", "+", "'/fc8'", "]", "=", "net", "\n", "", "return", "net", ",", "end_points", "\n", "", "", "", "vgg_19", ".", "default_image_size", "=", "224", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.resnet_101_v1": [[9, 23], ["tensorflow.arg_scope", "tensorflow.contrib.slim.nets.resnet_v1.resnet_v1_101", "tensorflow.contrib.slim.nets.resnet_v1.resnet_arg_scope"], "function", ["None"], ["def", "resnet_101_v1", "(", "inputs", ",", "\n", "scope", "=", "'resnet_v1_101'", ",", "\n", "is_training", "=", "True", ",", "\n", "output_stride", "=", "32", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "resnet_v1", ".", "resnet_arg_scope", "(", ")", ")", ":", "\n", "        ", "net", "=", "resnet_v1", ".", "resnet_v1_101", "(", "inputs", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "is_training", ",", "\n", "global_pool", "=", "False", ",", "\n", "output_stride", "=", "output_stride", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "scope", "\n", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.resnet_50_v1": [[24, 38], ["tensorflow.arg_scope", "tensorflow.contrib.slim.nets.resnet_v1.resnet_v1_50", "tensorflow.contrib.slim.nets.resnet_v1.resnet_arg_scope"], "function", ["None"], ["", "def", "resnet_50_v1", "(", "inputs", ",", "\n", "scope", "=", "'resnet_v1_50'", ",", "\n", "is_training", "=", "True", ",", "\n", "output_stride", "=", "32", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "resnet_v1", ".", "resnet_arg_scope", "(", ")", ")", ":", "\n", "        ", "net", ",", "out_dict", "=", "resnet_v1", ".", "resnet_v1_50", "(", "inputs", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "is_training", ",", "\n", "global_pool", "=", "False", ",", "\n", "output_stride", "=", "output_stride", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "scope", "\n", ")", "\n", "return", "net", ",", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.vgg_16": [[40, 51], ["tensorflow.arg_scope", "nets.vgg.vgg_16", "nets.vgg.vgg_arg_scope"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.vgg_16", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.vgg.vgg_arg_scope"], ["", "", "def", "vgg_16", "(", "inputs", ",", "\n", "scope", "=", "'vgg_16'", ",", "\n", "is_training", "=", "True", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "vgg", ".", "vgg_arg_scope", "(", ")", ")", ":", "\n", "        ", "nets", ",", "out_dict", "=", "vgg", ".", "vgg_16", "(", "inputs", ",", "\n", "None", ",", "\n", "is_training", "=", "is_training", ",", "\n", "spatial_squeeze", "=", "False", ",", "\n", "scope", "=", "scope", ",", "\n", "fc_conv_padding", "=", "'SAME'", ")", "\n", "return", "nets", ",", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.resnet_101_v2": [[54, 68], ["tensorflow.arg_scope", "tensorflow.contrib.slim.nets.resnet_v2.resnet_v2_101", "tensorflow.contrib.slim.nets.resnet_v2.resnet_arg_scope"], "function", ["None"], ["", "", "def", "resnet_101_v2", "(", "inputs", ",", "\n", "scope", "=", "'resnet_v2_101'", ",", "\n", "is_training", "=", "True", ",", "\n", "output_stride", "=", "32", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "resnet_v2", ".", "resnet_arg_scope", "(", ")", ")", ":", "\n", "        ", "net", "=", "resnet_v2", ".", "resnet_v2_101", "(", "inputs", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "is_training", ",", "\n", "global_pool", "=", "False", ",", "\n", "output_stride", "=", "output_stride", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "scope", "\n", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.resnet_50_v2": [[69, 83], ["tensorflow.arg_scope", "tensorflow.contrib.slim.nets.resnet_v2.resnet_v2_50", "tensorflow.contrib.slim.nets.resnet_v2.resnet_arg_scope"], "function", ["None"], ["", "def", "resnet_50_v2", "(", "inputs", ",", "\n", "scope", "=", "'resnet_v2_50'", ",", "\n", "is_training", "=", "True", ",", "\n", "output_stride", "=", "32", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "resnet_v2", ".", "resnet_arg_scope", "(", ")", ")", ":", "\n", "        ", "net", ",", "out_dict", "=", "resnet_v2", ".", "resnet_v2_50", "(", "inputs", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "is_training", ",", "\n", "global_pool", "=", "False", ",", "\n", "output_stride", "=", "output_stride", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "scope", "\n", ")", "\n", "return", "net", ",", "out_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.FPN_resnet_50_v1": [[84, 104], ["resnet_v1.resnet_50_v1", "enumerate", "tensorflow.conv2d", "tensorflow.image.resize_bilinear", "tensorflow.conv2d", "nets_out.append", "nets_out.append", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.resnet_50_v1"], ["", "", "def", "FPN_resnet_50_v1", "(", "inputs", ",", "prefix", ",", "is_training", "=", "False", ")", ":", "\n", "    ", "_", ",", "net_dict", "=", "resnet_50_v1", "(", "inputs", ",", "is_training", "=", "is_training", ")", "\n", "head_names", "=", "[", "prefix", "+", "'resnet_v1_50/block4/unit_3/bottleneck_v1'", ",", "\n", "prefix", "+", "'resnet_v1_50/block3/unit_5/bottleneck_v1'", ",", "\n", "prefix", "+", "'resnet_v1_50/block2/unit_3/bottleneck_v1'", "]", "\n", "net_heads", "=", "[", "net_dict", "[", "name", "]", "for", "name", "in", "head_names", "]", "\n", "depths", "=", "[", "2048", ",", "1024", ",", "512", "]", "\n", "nets_out", "=", "[", "]", "\n", "for", "i", ",", "head", "in", "enumerate", "(", "net_heads", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "nets_out", ".", "append", "(", "head", ")", "\n", "continue", "\n", "\n", "", "last_out", "=", "nets_out", "[", "i", "-", "1", "]", "\n", "net", "=", "slim", ".", "conv2d", "(", "last_out", ",", "depths", "[", "i", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "net", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "net", ",", "tf", ".", "shape", "(", "head", ")", "[", "1", ":", "3", "]", ")", "\n", "net", "=", "net", "+", "head", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "depths", "[", "i", "]", ",", "[", "3", ",", "3", "]", ")", "\n", "nets_out", ".", "append", "(", "net", ")", "\n", "", "return", "nets_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.multi_resnet_50_v1": [[106, 113], ["resnet_v1.resnet_50_v1"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.resnet_50_v1"], ["", "def", "multi_resnet_50_v1", "(", "inputs", ",", "prefix", ",", "is_training", "=", "False", ")", ":", "\n", "    ", "_", ",", "net_dict", "=", "resnet_50_v1", "(", "inputs", ",", "is_training", "=", "is_training", ")", "\n", "head_names", "=", "[", "prefix", "+", "'resnet_v1_50/block4/unit_3/bottleneck_v1'", ",", "\n", "prefix", "+", "'resnet_v1_50/block3/unit_5/bottleneck_v1'", ",", "\n", "prefix", "+", "'resnet_v1_50/block2/unit_3/bottleneck_v1'", "]", "\n", "net_heads", "=", "[", "net_dict", "[", "name", "]", "for", "name", "in", "head_names", "]", "\n", "return", "net_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.FPN_resnet_101_v1": [[115, 135], ["resnet_v1.resnet_101_v1", "enumerate", "tensorflow.conv2d", "tensorflow.image.resize_bilinear", "tensorflow.conv2d", "nets_out.append", "nets_out.append", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.resnet_101_v1"], ["", "def", "FPN_resnet_101_v1", "(", "inputs", ",", "prefix", ",", "is_training", "=", "False", ")", ":", "\n", "    ", "_", ",", "net_dict", "=", "resnet_101_v1", "(", "inputs", ",", "is_training", "=", "is_training", ")", "\n", "head_names", "=", "[", "prefix", "+", "'resnet_v1_101/block4/unit_3/bottleneck_v1'", ",", "\n", "prefix", "+", "'resnet_v1_101/block3/unit_22/bottleneck_v1'", ",", "\n", "prefix", "+", "'resnet_v1_101/block2/unit_3/bottleneck_v1'", "]", "\n", "net_heads", "=", "[", "net_dict", "[", "name", "]", "for", "name", "in", "head_names", "]", "\n", "depths", "=", "[", "2048", ",", "1024", ",", "512", "]", "\n", "nets_out", "=", "[", "]", "\n", "for", "i", ",", "head", "in", "enumerate", "(", "net_heads", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "nets_out", ".", "append", "(", "head", ")", "\n", "continue", "\n", "\n", "", "last_out", "=", "nets_out", "[", "i", "-", "1", "]", "\n", "net", "=", "slim", ".", "conv2d", "(", "last_out", ",", "depths", "[", "i", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "net", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "net", ",", "tf", ".", "shape", "(", "head", ")", "[", "1", ":", "3", "]", ")", "\n", "net", "=", "net", "+", "head", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "depths", "[", "i", "]", ",", "[", "3", ",", "3", "]", ")", "\n", "nets_out", ".", "append", "(", "net", ")", "\n", "", "return", "nets_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.FPN_resnet_50_v2": [[136, 156], ["resnet_v1.resnet_50_v2", "enumerate", "tensorflow.conv2d", "tensorflow.image.resize_bilinear", "tensorflow.conv2d", "nets_out.append", "nets_out.append", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.resnet_50_v2"], ["", "def", "FPN_resnet_50_v2", "(", "inputs", ",", "prefix", ",", "is_training", "=", "False", ")", ":", "\n", "    ", "_", ",", "net_dict", "=", "resnet_50_v2", "(", "inputs", ",", "is_training", "=", "is_training", ")", "\n", "head_names", "=", "[", "prefix", "+", "'resnet_v2_50/block4/unit_3/bottleneck_v2'", ",", "\n", "prefix", "+", "'resnet_v2_50/block3/unit_5/bottleneck_v2'", ",", "\n", "prefix", "+", "'resnet_v2_50/block2/unit_3/bottleneck_v2'", "]", "\n", "net_heads", "=", "[", "net_dict", "[", "name", "]", "for", "name", "in", "head_names", "]", "\n", "depths", "=", "[", "2048", ",", "1024", ",", "512", "]", "\n", "nets_out", "=", "[", "]", "\n", "for", "i", ",", "head", "in", "enumerate", "(", "net_heads", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "nets_out", ".", "append", "(", "head", ")", "\n", "continue", "\n", "\n", "", "last_out", "=", "nets_out", "[", "i", "-", "1", "]", "\n", "net", "=", "slim", ".", "conv2d", "(", "last_out", ",", "depths", "[", "i", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "net", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "net", ",", "tf", ".", "shape", "(", "head", ")", "[", "1", ":", "3", "]", ")", "\n", "net", "=", "net", "+", "head", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "depths", "[", "i", "]", ",", "[", "3", ",", "3", "]", ")", "\n", "nets_out", ".", "append", "(", "net", ")", "\n", "", "return", "nets_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.FPN_resnet_101_v2": [[157, 177], ["resnet_v1.resnet_101_v2", "enumerate", "tensorflow.conv2d", "tensorflow.image.resize_bilinear", "tensorflow.conv2d", "nets_out.append", "nets_out.append", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.resnet_101_v2"], ["", "def", "FPN_resnet_101_v2", "(", "inputs", ",", "prefix", ",", "is_training", "=", "False", ")", ":", "\n", "    ", "_", ",", "net_dict", "=", "resnet_101_v2", "(", "inputs", ",", "is_training", "=", "is_training", ")", "\n", "head_names", "=", "[", "prefix", "+", "'resnet_v2_101/block4/unit_3/bottleneck_v2'", ",", "\n", "prefix", "+", "'resnet_v2_101/block3/unit_22/bottleneck_v2'", ",", "\n", "prefix", "+", "'resnet_v2_101/block2/unit_3/bottleneck_v2'", "]", "\n", "net_heads", "=", "[", "net_dict", "[", "name", "]", "for", "name", "in", "head_names", "]", "\n", "depths", "=", "[", "2048", ",", "1024", ",", "512", "]", "\n", "nets_out", "=", "[", "]", "\n", "for", "i", ",", "head", "in", "enumerate", "(", "net_heads", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "nets_out", ".", "append", "(", "head", ")", "\n", "continue", "\n", "\n", "", "last_out", "=", "nets_out", "[", "i", "-", "1", "]", "\n", "net", "=", "slim", ".", "conv2d", "(", "last_out", ",", "depths", "[", "i", "]", ",", "[", "1", ",", "1", "]", ")", "\n", "net", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "net", ",", "tf", ".", "shape", "(", "head", ")", "[", "1", ":", "3", "]", ")", "\n", "net", "=", "net", "+", "head", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "depths", "[", "i", "]", ",", "[", "3", ",", "3", "]", ")", "\n", "nets_out", ".", "append", "(", "net", ")", "\n", "", "return", "nets_out", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.rpn_loss": [[8, 95], ["tensorflow.name_scope", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.logical_and", "tensorflow.cast", "tensorflow.cast", "tensorflow.logical_and", "tensorflow.logical_and", "tensorflow.reduce_sum", "tensorflow.softmax", "loss_function.recall_precision_compute", "tensorflow.minimum", "loss_function.sample_cls_batch", "tensorflow.losses.add_loss", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.logical_or", "tensorflow.name_scope", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.name_scope", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.where", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cond", "tensorflow.gather", "tensorflow.gather", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.shape", "tensorflow.reduce_sum", "nets.custom_layers.abs_smooth"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.recall_precision_compute", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.sample_cls_batch", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.custom_layers.abs_smooth"], ["def", "rpn_loss", "(", "logits", ",", "locaizations", ",", "\n", "gclasses", ",", "glocs", ",", "gscores", ",", "\n", "batch_size", ",", "\n", "pos_threshold", ",", "\n", "neg_threshold", ",", "\n", "neg_threshold_low", ",", "\n", "mini_batch_size", ",", "\n", "neg_ratio", "=", "2.", ")", ":", "\n", "    ", "'''\n    :param logits: [batch_size, anchor_num, 2]\n    :param locaizations:  [batch_size, anchor_num, 4]\n    :param gclasses: [batch_size, feat_shape[0], feat_shape[1], anchor_num]\n    :param glocs: [batch_size, feat_shape[0], feat_shape[1], anchor_num, 4]\n    :param gscores: [batch_size, feat_shape[0], feat_shape[1], anchor_num]\n    :param batch_size: int\n    :param pos_threshold: float\n    :param neg_threshold: float\n    :param neg_threshold_low: float\n    :param mini_batch_size: int\n    :param neg_ratio: float\n    :return:\n    '''", "\n", "with", "tf", ".", "name_scope", "(", "'rpn_loss'", ")", ":", "\n", "\n", "        ", "logits", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "batch_size", ",", "-", "1", ",", "2", "]", ")", "\n", "locaizations", "=", "tf", ".", "reshape", "(", "locaizations", ",", "[", "batch_size", ",", "-", "1", ",", "4", "]", ")", "\n", "gclasses", "=", "tf", ".", "reshape", "(", "gclasses", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "glocs", "=", "tf", ".", "reshape", "(", "glocs", ",", "[", "batch_size", ",", "-", "1", ",", "4", "]", ")", "\n", "gscores", "=", "tf", ".", "reshape", "(", "gscores", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "\n", "# compute accraucy", "\n", "\n", "pmask", "=", "tf", ".", "logical_and", "(", "gscores", ">", "pos_threshold", ",", "tf", ".", "not_equal", "(", "gclasses", ",", "-", "1", ")", ")", "# [batch_size, N]", "\n", "fpmask", "=", "tf", ".", "cast", "(", "pmask", ",", "tf", ".", "float32", ")", "\n", "\n", "gclasses_", "=", "tf", ".", "cast", "(", "pmask", ",", "tf", ".", "int64", ")", "\n", "\n", "nmask", "=", "tf", ".", "logical_and", "(", "gscores", "<", "neg_threshold", ",", "tf", ".", "not_equal", "(", "gclasses", ",", "-", "1", ")", ")", "\n", "nmask", "=", "tf", ".", "logical_and", "(", "nmask", ",", "gscores", ">=", "neg_threshold_low", ")", "\n", "\n", "pos_num", "=", "tf", ".", "reduce_sum", "(", "fpmask", ",", "axis", "=", "1", ")", "# [batch_size]", "\n", "\n", "'''\n        #accuracy computing \n        prob = slim.softmax(logits)  # [batch_size, proposal_num, 2]\n        pre = tf.argmax(prob, axis=2)  # [batch_size, proposal_num]\n        acc_pos = accurate_compute(pre, gclasses_, pmask, batch_size)\n        acc_neg = accurate_compute(pre, gclasses_, nmask, batch_size)\n        '''", "\n", "\n", "#recall and precision computing", "\n", "prob", "=", "slim", ".", "softmax", "(", "logits", ")", "\n", "pscore", "=", "prob", "[", ":", ",", ":", ",", "1", "]", "\n", "recall", ",", "precision", "=", "recall_precision_compute", "(", "pscore", ",", "gclasses_", ",", "0.5", ",", "tf", ".", "logical_or", "(", "nmask", ",", "pmask", ")", ")", "\n", "\n", "pos_train_num", "=", "mini_batch_size", "//", "(", "neg_ratio", "+", "1.", ")", "# scalar", "\n", "pos_train_num", "=", "tf", ".", "minimum", "(", "pos_num", ",", "pos_train_num", ")", "# [batch_size]", "\n", "\n", "neg_train_num", "=", "mini_batch_size", "-", "pos_train_num", "# [batch_size]", "\n", "\n", "train_batch_logits", ",", "train_batch_label", "=", "sample_cls_batch", "(", "logits", ",", "gclasses_", ",", "pmask", ",", "nmask", ",", "pos_train_num", ",", "\n", "neg_train_num", ",", "batch_size", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'cls_loss'", ")", ":", "\n", "            ", "cls_loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "train_batch_logits", ",", "\n", "labels", "=", "train_batch_label", ")", "\n", "cls_loss_mean", "=", "tf", ".", "reduce_mean", "(", "cls_loss", ")", "\n", "\n", "# Add localization loss: smooth L1, L2, ...", "\n", "", "with", "tf", ".", "name_scope", "(", "'localization'", ")", ":", "\n", "# Weights Tensor: positive mask + random negative.", "\n", "            ", "localizations", "=", "tf", ".", "reshape", "(", "locaizations", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "glocs", "=", "tf", ".", "reshape", "(", "glocs", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "lmask", "=", "tf", ".", "reshape", "(", "pmask", ",", "[", "-", "1", "]", ")", "\n", "pinds", "=", "tf", ".", "where", "(", "lmask", ")", "\n", "pre_locs", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "localizations", ",", "pinds", ")", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "gt_locs", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "glocs", ",", "pinds", ")", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "loc_loss", "=", "tf", ".", "cond", "(", "tf", ".", "shape", "(", "gt_locs", ")", "[", "0", "]", ">", "0", ",", "\n", "lambda", ":", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "reduce_sum", "(", "custom_layers", ".", "abs_smooth", "(", "pre_locs", "-", "gt_locs", ")", ",", "axis", "=", "1", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "\n", "", "total_loss", "=", "cls_loss_mean", "+", "loc_loss", "\n", "slim", ".", "losses", ".", "add_loss", "(", "total_loss", ")", "\n", "\n", "#return total_loss, acc_pos, acc_neg, loc_loss", "\n", "return", "total_loss", ",", "recall", ",", "precision", ",", "loc_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.obj_detection_loss": [[97, 176], ["tensorflow.name_scope", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.logical_and", "tensorflow.cast", "tensorflow.cast", "tensorflow.logical_and", "tensorflow.logical_and", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.softmax", "tensorflow.argmax", "loss_function.accurate_compute", "loss_function.accurate_compute", "tensorflow.minimum", "loss_function.sample_cls_batch", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.name_scope", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.losses.add_loss", "tensorflow.name_scope", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.where", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cond", "tensorflow.losses.add_loss", "tensorflow.gather", "tensorflow.gather", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.shape", "tensorflow.reduce_sum", "nets.custom_layers.abs_smooth"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.accurate_compute", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.accurate_compute", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.sample_cls_batch", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.custom_layers.abs_smooth"], ["", "", "def", "obj_detection_loss", "(", "logits", ",", "localizations", ",", "\n", "gclasses", ",", "glocs", ",", "gscores", ",", "\n", "batch_size", ",", "\n", "class_num", ",", "\n", "pos_threshold", ",", "\n", "neg_threshold", ",", "\n", "neg_threshold_low", ",", "\n", "alpha", ",", "\n", "neg_ratio", "=", "3.", ",", "\n", "mini_batch_size", "=", "64", "\n", ")", ":", "\n", "    ", "'''\n    :param logits: [batch_size, N, num_classes]\n    :param localizations: [batch_size, N, 4]\n    :param gclasses: [batch_size, N]\n    :param glocs: [batch_size, N, 4]\n    :param gscores: [batch_size, N]\n    :param batch_size: int\n    :param class_num: int\n    :param pos_threshold: float\n    :param neg_threshold: flpat\n    :param neg_threshold_low: float\n    :param alpha: float\n    :param neg_ratio: float\n    :param mini_batch_size: int\n    :return:\n    '''", "\n", "with", "tf", ".", "name_scope", "(", "'obj_detection_loss'", ")", ":", "\n", "        ", "gclasses", "=", "tf", ".", "stop_gradient", "(", "gclasses", ")", "\n", "glocs", "=", "tf", ".", "stop_gradient", "(", "glocs", ")", "\n", "gscores", "=", "tf", ".", "stop_gradient", "(", "gscores", ")", "\n", "\n", "pmask", "=", "tf", ".", "logical_and", "(", "gscores", ">", "pos_threshold", ",", "tf", ".", "not_equal", "(", "gclasses", ",", "-", "1", ")", ")", "# [batch_size, proposal_num]", "\n", "\n", "fpmask", "=", "tf", ".", "cast", "(", "pmask", ",", "tf", ".", "float32", ")", "# [batch_size, proposal_num]", "\n", "ipmask", "=", "tf", ".", "cast", "(", "pmask", ",", "tf", ".", "int64", ")", "\n", "\n", "gclasses_", "=", "gclasses", "*", "ipmask", "\n", "\n", "nmask", "=", "tf", ".", "logical_and", "(", "gscores", "<", "neg_threshold", ",", "tf", ".", "not_equal", "(", "gclasses", ",", "-", "1", ")", ")", "\n", "nmask", "=", "tf", ".", "logical_and", "(", "nmask", ",", "gscores", ">", "neg_threshold_low", ")", "\n", "fnmask", "=", "tf", ".", "cast", "(", "nmask", ",", "tf", ".", "float32", ")", "# [batch_size, proposal_num]", "\n", "\n", "pos_num", "=", "tf", ".", "reduce_sum", "(", "fpmask", ",", "axis", "=", "1", ")", "# [batch_size]", "\n", "neg_num", "=", "tf", ".", "reduce_sum", "(", "fnmask", ",", "axis", "=", "1", ")", "# [batch_size]", "\n", "\n", "prob", "=", "slim", ".", "softmax", "(", "logits", ")", "# [batch_size, proposal_num, classes_num]", "\n", "pre", "=", "tf", ".", "argmax", "(", "prob", ",", "axis", "=", "2", ")", "# [batch_size, proposal_num]", "\n", "acc_pos", "=", "accurate_compute", "(", "pre", ",", "gclasses_", ",", "pmask", ",", "batch_size", ")", "\n", "acc_neg", "=", "accurate_compute", "(", "pre", ",", "gclasses_", ",", "nmask", ",", "batch_size", ")", "\n", "\n", "pos_train_num", "=", "mini_batch_size", "//", "(", "neg_ratio", "+", "1.", ")", "# scalar", "\n", "pos_train_num", "=", "tf", ".", "minimum", "(", "pos_num", ",", "pos_train_num", ")", "# [batch_size]", "\n", "\n", "neg_train_num", "=", "mini_batch_size", "-", "pos_train_num", "# [batch_size]", "\n", "\n", "train_batch_logits", ",", "train_batch_label", "=", "sample_cls_batch", "(", "logits", ",", "gclasses_", ",", "pmask", ",", "nmask", ",", "pos_train_num", ",", "\n", "neg_train_num", ",", "batch_size", ")", "\n", "with", "tf", ".", "name_scope", "(", "'cls_loss'", ")", ":", "\n", "            ", "cls_loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "train_batch_logits", ",", "\n", "labels", "=", "train_batch_label", ")", "\n", "cls_loss_mean", "=", "tf", ".", "reduce_mean", "(", "cls_loss", ")", "\n", "\n", "slim", ".", "losses", ".", "add_loss", "(", "cls_loss_mean", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'localization_loss'", ")", ":", "\n", "            ", "localizations", "=", "tf", ".", "reshape", "(", "localizations", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "glocs", "=", "tf", ".", "reshape", "(", "glocs", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "lmask", "=", "tf", ".", "reshape", "(", "pmask", ",", "[", "-", "1", "]", ")", "\n", "pinds", "=", "tf", ".", "where", "(", "lmask", ")", "\n", "pre_locs", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "localizations", ",", "pinds", ")", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "gt_locs", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "glocs", ",", "pinds", ")", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "loc_loss", "=", "tf", ".", "cond", "(", "tf", ".", "shape", "(", "gt_locs", ")", "[", "0", "]", ">", "0", ",", "\n", "lambda", ":", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "reduce_sum", "(", "custom_layers", ".", "abs_smooth", "(", "pre_locs", "-", "gt_locs", ")", ",", "axis", "=", "1", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "loc_loss_mean", "=", "loc_loss", "*", "alpha", "\n", "slim", ".", "losses", ".", "add_loss", "(", "loc_loss_mean", ")", "\n", "", "", "return", "cls_loss_mean", ",", "loc_loss", ",", "acc_pos", ",", "acc_neg", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.single_cls_loss": [[178, 294], ["tensorflow.name_scope", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.logical_and", "tensorflow.cast", "tensorflow.cast", "tensorflow.logical_and", "tensorflow.logical_and", "tensorflow.reduce_sum", "tensorflow.softmax", "loss_function.recall_precision_compute", "tensorflow.less", "tensorflow.cond", "tensorflow.losses.add_loss", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.logical_or", "loss_function.sample_instance", "tensorflow.greater", "loss_function.OHEM_select", "tensorflow.minimum", "loss_function.sample_cls_batch", "loss_function.OHEM_select", "tensorflow.constant", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.name_scope", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.losses.add_loss", "tensorflow.name_scope", "tensorflow.cond", "tensorflow.losses.add_loss", "tensorflow.shape", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.reshape", "tensorflow.shape", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.one_hot", "tensorflow.reshape", "tensorflow.one_hot"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.recall_precision_compute", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.sample_instance", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.OHEM_select", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.sample_cls_batch", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.OHEM_select"], ["", "def", "single_cls_loss", "(", "logits", ",", "\n", "gclasses", ",", "gscores", ",", "\n", "batch_size", ",", "class_num", ",", "\n", "pos_threshold", ",", "neg_threshold", ",", "neg_threshold_low", "=", "0.", ",", "\n", "neg_ratio", "=", "3.", ",", "mini_batch_size", "=", "64", ",", "\n", "OHEM", "=", "False", ",", "back_OHEM", "=", "False", "\n", ")", ":", "\n", "    ", "'''\n    :param logits: [batch_size, N, class_num]\n    :param gclasses: [batch_size, N]\n    :param gscores: [batch_size, N]\n    :param batch_size: int\n    :param class_num: int\n    :param pos_threshold: float\n    :param neg_threshold: float\n    :param neg_threshold_low: float\n    :param neg_ratio: float\n    :param mini_batch_size: int\n    :param OHEM: bool\n    :return:\n    '''", "\n", "with", "tf", ".", "name_scope", "(", "'cls_loss'", ")", ":", "\n", "\n", "\n", "        ", "gclasses", "=", "tf", ".", "stop_gradient", "(", "gclasses", ")", "\n", "gscores", "=", "tf", ".", "stop_gradient", "(", "gscores", ")", "\n", "\n", "on_value", "=", "0.999", "\n", "off_value", "=", "(", "1.", "-", "on_value", ")", "/", "(", "class_num", "-", "1", ")", "\n", "\n", "pmask", "=", "tf", ".", "logical_and", "(", "gscores", ">", "pos_threshold", ",", "tf", ".", "not_equal", "(", "gclasses", ",", "-", "1", ")", ")", "# [batch_size, proposal_num]", "\n", "\n", "fpmask", "=", "tf", ".", "cast", "(", "pmask", ",", "tf", ".", "float32", ")", "# [batch_size, proposal_num]", "\n", "ipmask", "=", "tf", ".", "cast", "(", "pmask", ",", "tf", ".", "int64", ")", "\n", "\n", "gclasses_", "=", "gclasses", "*", "ipmask", "\n", "\n", "nmask", "=", "tf", ".", "logical_and", "(", "gscores", "<", "neg_threshold", ",", "tf", ".", "not_equal", "(", "gclasses", ",", "-", "1", ")", ")", "\n", "nmask", "=", "tf", ".", "logical_and", "(", "nmask", ",", "gscores", ">=", "neg_threshold_low", ")", "\n", "\n", "pos_num", "=", "tf", ".", "reduce_sum", "(", "fpmask", ",", "axis", "=", "1", ")", "# [batch_size]", "\n", "\n", "##########################################################################################", "\n", "# compute recall and precision, only for binary class_num == 2 !!!!!!", "\n", "##########################################################################################", "\n", "prob", "=", "slim", ".", "softmax", "(", "logits", ")", "# [batch_size, proposal_num, classes_num]", "\n", "pscore", "=", "prob", "[", ":", ",", ":", ",", "1", "]", "# [batch_size, proposal_num]", "\n", "recall", ",", "precision", "=", "recall_precision_compute", "(", "pscore", ",", "gclasses_", ",", "0.5", ",", "tf", ".", "logical_or", "(", "nmask", ",", "pmask", ")", ")", "\n", "\n", "\n", "##########################################################################################", "\n", "# extra negative loss", "\n", "##########################################################################################", "\n", "bnum", "=", "128", "\n", "bmask", "=", "tf", ".", "less", "(", "gscores", ",", "0.1", ")", "\n", "#random sample", "\n", "if", "not", "back_OHEM", ":", "\n", "            ", "blogits", ",", "blabels", "=", "sample_instance", "(", "logits", ",", "gclasses_", ",", "bmask", ",", "tf", ".", "constant", "(", "[", "bnum", "]", "*", "batch_size", ",", "tf", ".", "int32", ")", ",", "batch_size", ",", "True", ")", "\n", "", "else", ":", "\n", "            ", "false_mask", "=", "tf", ".", "greater", "(", "gscores", ",", "999.", ")", "\n", "blogits", ",", "blabels", "=", "OHEM_select", "(", "logits", ",", "gclasses_", ",", "bmask", ",", "false_mask", ",", "batch_size", ",", "class_num", ",", "bnum", ")", "\n", "\n", "", "neg_loss_mean", "=", "tf", ".", "cond", "(", "tf", ".", "shape", "(", "blogits", ")", "[", "0", "]", ">", "0", ",", "\n", "lambda", ":", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "blogits", ",", "\n", "labels", "=", "tf", ".", "reshape", "(", "tf", ".", "one_hot", "(", "blabels", ",", "class_num", ",", "on_value", "=", "on_value", ",", "off_value", "=", "off_value", ")", ",", "[", "-", "1", ",", "class_num", "]", ")", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "slim", ".", "losses", ".", "add_loss", "(", "neg_loss_mean", ")", "\n", "\n", "##########################################################################################", "\n", "# hard neg loss", "\n", "##########################################################################################", "\n", "'''\n        K = 128\n        hard_neg_logits = hard_negative_select(gscores, logits, pos_threshold, class_num, batch_size, K)\n        hard_neg_loss_mean = tf.cond(tf.shape(hard_neg_logits)[0] > 0,\n                                lambda: tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(\n                                    logits=hard_neg_logits,\n                                    labels=tf.one_hot(tf.zeros(tf.shape(hard_neg_logits)[0], tf.int32), class_num, on_value=on_value, off_value=off_value))),\n                                lambda: tf.constant(0.0))\n        slim.losses.add_loss(hard_neg_loss_mean)\n        '''", "\n", "\n", "\n", "##########################################################################################", "\n", "# random sample", "\n", "##########################################################################################", "\n", "if", "not", "OHEM", ":", "\n", "            ", "pos_train_num", "=", "mini_batch_size", "//", "(", "neg_ratio", "+", "1.", ")", "# scalar", "\n", "pos_train_num", "=", "tf", ".", "minimum", "(", "pos_num", ",", "pos_train_num", ")", "# [batch_size]", "\n", "\n", "neg_train_num", "=", "mini_batch_size", "-", "pos_train_num", "# [batch_size]", "\n", "\n", "train_batch_logits", ",", "train_batch_label", "=", "sample_cls_batch", "(", "logits", ",", "gclasses_", ",", "pmask", ",", "nmask", ",", "pos_train_num", ",", "\n", "neg_train_num", ",", "batch_size", ")", "\n", "with", "tf", ".", "name_scope", "(", "'cls_loss'", ")", ":", "\n", "                ", "cls_loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "train_batch_logits", ",", "\n", "labels", "=", "train_batch_label", ")", "\n", "cls_loss_mean", "=", "tf", ".", "reduce_mean", "(", "cls_loss", ")", "\n", "\n", "slim", ".", "losses", ".", "add_loss", "(", "cls_loss_mean", ")", "\n", "\n", "##########################################################################################", "\n", "# OHEM", "\n", "##########################################################################################", "\n", "", "", "else", ":", "\n", "            ", "train_logits", ",", "train_label", "=", "OHEM_select", "(", "logits", ",", "gclasses_", ",", "pmask", ",", "nmask", ",", "batch_size", ",", "class_num", ",", "mini_batch_size", ")", "\n", "with", "tf", ".", "name_scope", "(", "'cls_loss'", ")", ":", "\n", "                ", "cls_loss_mean", "=", "tf", ".", "cond", "(", "tf", ".", "shape", "(", "train_logits", ")", "[", "0", "]", ">", "0", ",", "\n", "lambda", ":", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "\n", "logits", "=", "train_logits", ",", "\n", "labels", "=", "tf", ".", "reshape", "(", "tf", ".", "one_hot", "(", "train_label", ",", "class_num", ",", "on_value", "=", "on_value", ",", "off_value", "=", "off_value", ")", ",", "[", "-", "1", ",", "class_num", "]", ")", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "slim", ".", "losses", ".", "add_loss", "(", "cls_loss_mean", ")", "\n", "#return cls_loss_mean, acc_pos, acc_neg", "\n", "", "", "return", "cls_loss_mean", ",", "recall", ",", "precision", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.single_loc_loss": [[296, 330], ["tensorflow.name_scope", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "tensorflow.logical_and", "tensorflow.not_equal", "tensorflow.name_scope", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.where", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cond", "tensorflow.losses.add_loss", "tensorflow.gather", "tensorflow.gather", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.shape", "tensorflow.reduce_sum", "nets.custom_layers.abs_smooth"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.custom_layers.abs_smooth"], ["", "", "def", "single_loc_loss", "(", "delta", ",", "\n", "gclasses", ",", "gdelta", ",", "gscores", ",", "\n", "match_threshold", ")", ":", "\n", "    ", "'''\n    :param delta: [batch_size, N ,4]\n    :param gclasses: [batch_size, N]\n    :param gdelta: [batch_size, N, 4]\n    :param gscores: [batch_size, N]\n    :param match_threshold: float\n    :return:\n    '''", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'obj_detection_loss'", ")", ":", "\n", "        ", "gclasses", "=", "tf", ".", "stop_gradient", "(", "gclasses", ")", "\n", "glocs", "=", "tf", ".", "stop_gradient", "(", "gdelta", ")", "\n", "gscores", "=", "tf", ".", "stop_gradient", "(", "gscores", ")", "\n", "\n", "pmask", "=", "tf", ".", "logical_and", "(", "gscores", ">", "match_threshold", ",", "tf", ".", "not_equal", "(", "gclasses", ",", "-", "1", ")", ")", "# [batch_size, proposal_num]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'localization_loss'", ")", ":", "\n", "            ", "delta", "=", "tf", ".", "reshape", "(", "delta", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "glocs", "=", "tf", ".", "reshape", "(", "glocs", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "lmask", "=", "tf", ".", "reshape", "(", "pmask", ",", "[", "-", "1", "]", ")", "\n", "pinds", "=", "tf", ".", "where", "(", "lmask", ")", "\n", "pre_locs", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "delta", ",", "pinds", ")", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "gt_locs", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "glocs", ",", "pinds", ")", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "loc_loss_mean", "=", "tf", ".", "cond", "(", "tf", ".", "shape", "(", "gt_locs", ")", "[", "0", "]", ">", "0", ",", "\n", "lambda", ":", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "reduce_sum", "(", "custom_layers", ".", "abs_smooth", "(", "pre_locs", "-", "gt_locs", ")", ",", "axis", "=", "1", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "loc_loss_mean", "=", "loc_loss_mean", "*", "2.", "\n", "slim", ".", "losses", ".", "add_loss", "(", "loc_loss_mean", ")", "\n", "\n", "", "", "return", "loc_loss_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.single_nms_loss": [[332, 390], ["tensorflow.stack", "tensorflow.where", "tensorflow.stop_gradient", "tensorflow.reshape", "tensorflow.name_scope", "loss_function.single_nms_loss.get_ae_id"], "function", ["None"], ["", "def", "single_nms_loss", "(", "rois", ",", "\n", "gscores", ",", "glocation", ",", "\n", "gscores2", ",", "glocation2", ",", "\n", "trans_roi", ",", "trans_g1", ",", "trans_g2", ",", "\n", "th1", ",", "th2", ")", ":", "\n", "    ", "'''\n    :param rois: [batch_size, N, 4]\n    :param gscores: [batch_size, N]\n    :param glocation: [batch_size, N, 4]\n    :param gscores2: [batch_size, N]\n    :param glocation2: [batch_size, N, 4]\n    :param trans_roi: [batch_size, N, 4]\n    :param trans_g1: [batch_size, N, 4]\n    :param trans_g2: [batch_size, N, 4]\n    :param th1: float\n    :param th2: float\n    :return:\n    '''", "\n", "def", "get_ae_id", "(", "boxes", ",", "trans", ")", ":", "\n", "        ", "y", "=", "(", "boxes", "[", ":", ",", ":", ",", "0", "]", "+", "boxes", "[", ":", ",", ":", ",", "2", "]", ")", "/", "2.", "\n", "x", "=", "(", "boxes", "[", ":", ",", ":", ",", "1", "]", "+", "boxes", "[", ":", ",", ":", ",", "3", "]", ")", "/", "2.", "\n", "h", "=", "boxes", "[", ":", ",", ":", ",", "2", "]", "-", "boxes", "[", ":", ",", ":", ",", "0", "]", "\n", "w", "=", "boxes", "[", ":", ",", ":", ",", "3", "]", "-", "boxes", "[", ":", ",", ":", ",", "1", "]", "\n", "feat_geo", "=", "tf", ".", "stack", "(", "(", "y", ",", "x", ",", "h", ",", "w", ")", ",", "axis", "=", "-", "1", ")", "\n", "feat_geo", "=", "tf", ".", "where", "(", "tf", ".", "is_nan", "(", "feat_geo", ")", ",", "tf", ".", "zeros_like", "(", "feat_geo", ")", ",", "feat_geo", ")", "\n", "feat_geo", "=", "tf", ".", "stop_gradient", "(", "feat_geo", ")", "# [batch_size, N, 4]", "\n", "ae_id", "=", "tf", ".", "reshape", "(", "tf", ".", "reduce_sum", "(", "feat_geo", "*", "trans", ",", "axis", "=", "-", "1", ")", ",", "[", "-", "1", "]", ")", "\n", "return", "ae_id", "\n", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'nms_loss'", ")", ":", "\n", "        ", "new_feat_geo", "=", "get_ae_id", "(", "rois", ",", "trans_roi", ")", "\n", "new_g_geo", "=", "get_ae_id", "(", "glocation", ",", "trans_g1", ")", "\n", "new_g_geo2", "=", "get_ae_id", "(", "glocation2", ",", "trans_g2", ")", "\n", "\n", "pull_mask", "=", "tf", ".", "reshape", "(", "tf", ".", "greater", "(", "gscores", ",", "th1", ")", ",", "[", "-", "1", "]", ")", "\n", "push_mask", "=", "tf", ".", "reshape", "(", "tf", ".", "logical_and", "(", "tf", ".", "greater", "(", "gscores", ",", "th1", ")", ",", "tf", ".", "greater", "(", "gscores2", ",", "th2", ")", ")", ",", "[", "-", "1", "]", ")", "\n", "\n", "pull_ind", "=", "tf", ".", "where", "(", "pull_mask", ")", "\n", "push_ind", "=", "tf", ".", "where", "(", "push_mask", ")", "\n", "\n", "pull_feat", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "new_feat_geo", ",", "pull_ind", ")", ",", "[", "-", "1", "]", ")", "\n", "pull_gt", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "new_g_geo", ",", "pull_ind", ")", ",", "[", "-", "1", "]", ")", "\n", "\n", "push_feat", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "new_feat_geo", ",", "push_ind", ")", ",", "[", "-", "1", "]", ")", "\n", "push_gt", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "new_g_geo2", ",", "push_ind", ")", ",", "[", "-", "1", "]", ")", "\n", "\n", "pull_loss", "=", "tf", ".", "cond", "(", "tf", ".", "shape", "(", "pull_feat", ")", "[", "0", "]", ">", "0", ",", "\n", "lambda", ":", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "pull_feat", "-", "pull_gt", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "push_loss", "=", "tf", ".", "cond", "(", "tf", ".", "shape", "(", "push_feat", ")", "[", "0", "]", ">", "0", ",", "\n", "#lambda: tf.reduce_mean(tf.exp((-1. / 1) * tf.abs(push_feat - push_gt))),", "\n", "lambda", ":", "tf", ".", "reduce_mean", "(", "tf", ".", "maximum", "(", "1.", "-", "tf", ".", "abs", "(", "push_feat", "-", "push_gt", ")", ",", "0.", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "\n", "slim", ".", "losses", ".", "add_loss", "(", "pull_loss", ")", "\n", "slim", ".", "losses", ".", "add_loss", "(", "push_loss", ")", "\n", "return", "pull_loss", ",", "push_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.accurate_compute": [[392, 423], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.equal", "tensorflow.logical_and", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.div", "tensorflow.where", "tensorflow.reduce_sum", "tensorflow.where", "tensorflow.cast", "tensorflow.cast", "tensorflow.is_nan", "tensorflow.zeros_like", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.is_nan", "tensorflow.zeros_like", "tensorflow.not_equal"], "function", ["None"], ["", "", "def", "accurate_compute", "(", "pred", ",", "label", ",", "valid_mask", ",", "batch_size", ")", ":", "\n", "    ", "'''\n    :param pred: [batch_size, x, x, x ....]\n    :param label: [batch_size, x, x, x, ...] (must be equal to pred)\n    :param valid_mask: [batch_size, x, x, x, ...] (must be equal to pred)\n    :param batch_size: int\n    :return: accurate_mean: scalar\n    '''", "\n", "pred", "=", "tf", ".", "reshape", "(", "pred", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "label", "=", "tf", ".", "reshape", "(", "label", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "valid_mask", "=", "tf", ".", "reshape", "(", "valid_mask", ",", "[", "batch_size", ",", "-", "1", "]", ")", "\n", "\n", "valid_mask_int", "=", "tf", ".", "cast", "(", "valid_mask", ",", "tf", ".", "int32", ")", "\n", "valid_mask_float", "=", "tf", ".", "cast", "(", "valid_mask", ",", "tf", ".", "float32", ")", "\n", "\n", "valid_num", "=", "tf", ".", "reduce_sum", "(", "valid_mask_float", ",", "axis", "=", "1", ")", "\n", "\n", "equal_mask", "=", "tf", ".", "equal", "(", "tf", ".", "cast", "(", "pred", ",", "tf", ".", "int64", ")", ",", "tf", ".", "cast", "(", "label", ",", "tf", ".", "int64", ")", ")", "\n", "equal_mask_valid", "=", "tf", ".", "logical_and", "(", "equal_mask", ",", "valid_mask", ")", "\n", "equal_mask_valid_float", "=", "tf", ".", "cast", "(", "equal_mask_valid", ",", "tf", ".", "float32", ")", "\n", "\n", "accurate", "=", "tf", ".", "reduce_sum", "(", "equal_mask_valid_float", ",", "axis", "=", "1", ")", "\n", "accurate", "=", "tf", ".", "div", "(", "accurate", ",", "valid_num", ")", "\n", "accurate", "=", "tf", ".", "where", "(", "tf", ".", "is_nan", "(", "accurate", ")", ",", "tf", ".", "zeros_like", "(", "accurate", ")", ",", "accurate", ")", "\n", "\n", "batch_div", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "valid_num", ",", "0", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "accurate_mean", "=", "tf", ".", "reduce_sum", "(", "accurate", ")", "/", "batch_div", "\n", "accurate_mean", "=", "tf", ".", "where", "(", "tf", ".", "is_nan", "(", "accurate_mean", ")", ",", "tf", ".", "zeros_like", "(", "accurate_mean", ")", ",", "accurate_mean", ")", "\n", "\n", "return", "accurate_mean", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.recall_precision_compute": [[425, 448], ["tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reshape", "tensorflow.logical_and", "tensorflow.logical_and", "tensorflow.logical_and", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.cond", "tensorflow.cond", "tensorflow.greater_equal", "tensorflow.logical_and", "tensorflow.logical_and", "tensorflow.logical_and", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.equal", "tensorflow.div", "tensorflow.constant", "tensorflow.div", "tensorflow.constant"], "function", ["None"], ["", "def", "recall_precision_compute", "(", "score", ",", "label", ",", "match_th", ",", "valid_mask", ")", ":", "\n", "# compute recall and precision during training, only for binary classification cases", "\n", "    ", "score", "=", "tf", ".", "reshape", "(", "score", ",", "[", "-", "1", "]", ")", "\n", "label", "=", "tf", ".", "reshape", "(", "label", ",", "[", "-", "1", "]", ")", "\n", "pred", "=", "tf", ".", "cast", "(", "tf", ".", "greater_equal", "(", "score", ",", "match_th", ")", ",", "tf", ".", "int32", ")", "\n", "vmask", "=", "tf", ".", "reshape", "(", "valid_mask", ",", "[", "-", "1", "]", ")", "\n", "\n", "tp_logical", "=", "tf", ".", "logical_and", "(", "tf", ".", "logical_and", "(", "tf", ".", "equal", "(", "pred", ",", "1", ")", ",", "tf", ".", "equal", "(", "label", ",", "1", ")", ")", ",", "vmask", ")", "\n", "fp_logical", "=", "tf", ".", "logical_and", "(", "tf", ".", "logical_and", "(", "tf", ".", "equal", "(", "pred", ",", "1", ")", ",", "tf", ".", "equal", "(", "label", ",", "0", ")", ")", ",", "vmask", ")", "\n", "fn_logical", "=", "tf", ".", "logical_and", "(", "tf", ".", "logical_and", "(", "tf", ".", "equal", "(", "pred", ",", "0", ")", ",", "tf", ".", "equal", "(", "label", ",", "1", ")", ")", ",", "vmask", ")", "\n", "\n", "tp", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "tp_logical", ",", "tf", ".", "float32", ")", ")", "\n", "fp", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "fp_logical", ",", "tf", ".", "float32", ")", ")", "\n", "fn", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "fn_logical", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "recall", "=", "tf", ".", "cond", "(", "tf", ".", "not_equal", "(", "tp", "+", "fn", ",", "0", ")", ",", "\n", "lambda", ":", "tf", ".", "div", "(", "tp", ",", "tp", "+", "fn", ")", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "-", "1.0", ")", ")", "\n", "\n", "precision", "=", "tf", ".", "cond", "(", "tf", ".", "not_equal", "(", "tp", "+", "fp", ",", "0", ")", ",", "\n", "lambda", ":", "tf", ".", "div", "(", "tp", ",", "tp", "+", "fp", ")", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "-", "1.0", ")", ")", "\n", "return", "recall", ",", "precision", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.sample_instance": [[450, 488], ["range", "tensorflow.where", "tensorflow.random_shuffle", "tensorflow.minimum", "tensorflow.stack", "tensorflow.cast", "tensorflow.slice", "tensorflow.gather_nd", "tensorflow.gather_nd", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.pad", "tensorflow.pad", "ret_list_logits.append", "ret_list_labels.append", "tensorflow.cast", "tensorflow.cast", "tensorflow.stack", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.concat", "tensorflow.shape"], "function", ["None"], ["", "def", "sample_instance", "(", "logits", ",", "labels", ",", "valid_mask", ",", "sample_num", ",", "batch_size", ",", "redu", "=", "False", ")", ":", "\n", "    ", "ret_list_logits", "=", "[", "]", "\n", "ret_list_labels", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "logits_i", "=", "logits", "[", "i", ",", ":", ",", ":", "]", "\n", "labels_i", "=", "labels", "[", "i", ",", ":", "]", "\n", "mask_i", "=", "valid_mask", "[", "i", ",", ":", "]", "\n", "\n", "inds", "=", "tf", ".", "where", "(", "mask_i", ")", "\n", "inds_shuffle", "=", "tf", ".", "random_shuffle", "(", "inds", ")", "\n", "\n", "num_i", "=", "sample_num", "[", "i", "]", "\n", "num_i", "=", "tf", ".", "minimum", "(", "tf", ".", "cast", "(", "num_i", ",", "tf", ".", "int32", ")", ",", "tf", ".", "shape", "(", "inds_shuffle", ")", "[", "0", "]", ")", "\n", "size_i", "=", "tf", ".", "stack", "(", "(", "num_i", ",", "1", ")", ")", "\n", "size_i", "=", "tf", ".", "cast", "(", "size_i", ",", "tf", ".", "int32", ")", "\n", "\n", "inds_sample", "=", "tf", ".", "slice", "(", "inds_shuffle", ",", "[", "0", ",", "0", "]", ",", "size_i", ")", "\n", "\n", "logits_gather", "=", "tf", ".", "gather_nd", "(", "logits_i", ",", "inds_sample", ")", "\n", "labels_gather", "=", "tf", ".", "gather_nd", "(", "labels_i", ",", "inds_sample", ")", "\n", "\n", "pad_num", "=", "tf", ".", "cast", "(", "sample_num", "[", "i", "]", ",", "tf", ".", "int32", ")", "-", "num_i", "\n", "padding_b", "=", "tf", ".", "expand_dims", "(", "tf", ".", "stack", "(", "(", "0", ",", "pad_num", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "\n", "padding_a", "=", "tf", ".", "concat", "(", "(", "padding_b", ",", "[", "[", "0", ",", "0", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "logits_gather", "=", "tf", ".", "pad", "(", "logits_gather", ",", "padding_a", ")", "\n", "labels_gather", "=", "tf", ".", "pad", "(", "labels_gather", ",", "padding_b", ")", "\n", "\n", "if", "not", "redu", ":", "\n", "            ", "logits_gather", "=", "tf", ".", "expand_dims", "(", "logits_gather", ",", "axis", "=", "0", ")", "\n", "labels_gather", "=", "tf", ".", "expand_dims", "(", "labels_gather", ",", "axis", "=", "0", ")", "\n", "\n", "", "ret_list_logits", ".", "append", "(", "logits_gather", ")", "\n", "ret_list_labels", ".", "append", "(", "labels_gather", ")", "\n", "", "if", "not", "redu", ":", "\n", "        ", "return", "ret_list_logits", ",", "ret_list_labels", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "concat", "(", "ret_list_logits", ",", "axis", "=", "0", ")", ",", "tf", ".", "concat", "(", "ret_list_labels", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.sample_cls_batch": [[490, 516], ["loss_function.sample_instance", "loss_function.sample_instance", "range", "tensorflow.concat", "tensorflow.concat", "alist.append", "blist.append", "tensorflow.concat", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.sample_instance", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.sample_instance"], ["", "", "def", "sample_cls_batch", "(", "tensor_a", ",", "tensor_b", ",", "pmask", ",", "nmask", ",", "pos_num", ",", "neg_num", ",", "batch_size", ")", ":", "\n", "    ", "'''\n    :param tensor_a: [batch_size, proposal_num, 2]\n    :param tensor_b: [batch_size, proposal_num]\n    :param pmask: [batch_size, proposal_num]\n    :param nmask: [batch_size, proposal_num]\n    :param pos_num: [batch_size]\n    :param neg_num: [batch_size]\n    :param batch_size: int\n    :return: batch_a: [batch_size, mini_batch_size, 2]\n    :return: batch_b: [batch_size, mini_batch_size]\n    '''", "\n", "plist_a", ",", "plist_b", "=", "sample_instance", "(", "tensor_a", ",", "tensor_b", ",", "pmask", ",", "pos_num", ",", "batch_size", ")", "\n", "nlist_a", ",", "nlist_b", "=", "sample_instance", "(", "tensor_a", ",", "tensor_b", ",", "nmask", ",", "neg_num", ",", "batch_size", ")", "\n", "\n", "alist", "=", "[", "]", "\n", "blist", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "alist", ".", "append", "(", "tf", ".", "concat", "(", "(", "plist_a", "[", "i", "]", ",", "nlist_a", "[", "i", "]", ")", ",", "axis", "=", "1", ")", ")", "\n", "blist", ".", "append", "(", "tf", ".", "concat", "(", "(", "plist_b", "[", "i", "]", ",", "nlist_b", "[", "i", "]", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "batch_a", "=", "tf", ".", "concat", "(", "alist", ",", "axis", "=", "0", ")", "\n", "batch_b", "=", "tf", ".", "concat", "(", "blist", ",", "axis", "=", "0", ")", "\n", "\n", "return", "batch_a", ",", "batch_b", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.OHEM_select": [[518, 540], ["tensorflow.logical_or", "range", "tensorflow.where", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.minimum", "tensorflow.nn.top_k", "tensorflow.reshape", "tensorflow.reshape", "logits_list.append", "label_list.append", "tensorflow.concat", "tensorflow.concat", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.shape"], "function", ["None"], ["", "def", "OHEM_select", "(", "logits", ",", "label", ",", "pmask", ",", "nmask", ",", "batch_size", ",", "class_num", ",", "sample_size", ")", ":", "\n", "    ", "mask", "=", "tf", ".", "logical_or", "(", "pmask", ",", "nmask", ")", "\n", "logits_list", "=", "[", "]", "\n", "label_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "logits_i", "=", "logits", "[", "i", ",", ":", ",", ":", "]", "\n", "label_i", "=", "label", "[", "i", ",", ":", "]", "\n", "mask_i", "=", "mask", "[", "i", ",", ":", "]", "\n", "\n", "inds_i", "=", "tf", ".", "where", "(", "mask_i", ")", "\n", "v_logits_i", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "logits_i", ",", "inds_i", ")", ",", "[", "-", "1", ",", "class_num", "]", ")", "\n", "v_labels_i", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "label_i", ",", "inds_i", ")", ",", "[", "-", "1", "]", ")", "\n", "\n", "loss_i", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "v_logits_i", ",", "labels", "=", "v_labels_i", ")", "\n", "k", "=", "tf", ".", "minimum", "(", "tf", ".", "shape", "(", "v_logits_i", ")", "[", "0", "]", ",", "sample_size", ")", "\n", "_", ",", "top_k_inds", "=", "tf", ".", "nn", ".", "top_k", "(", "loss_i", ",", "k", "=", "k", ")", "\n", "\n", "top_k_logits", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "v_logits_i", ",", "top_k_inds", ")", ",", "[", "-", "1", ",", "class_num", "]", ")", "\n", "top_k_label", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "v_labels_i", ",", "top_k_inds", ")", ",", "[", "-", "1", "]", ")", "\n", "logits_list", ".", "append", "(", "top_k_logits", ")", "\n", "label_list", ".", "append", "(", "top_k_label", ")", "\n", "", "return", "tf", ".", "concat", "(", "logits_list", ",", "axis", "=", "0", ")", ",", "tf", ".", "concat", "(", "label_list", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.hard_negative_select": [[541, 552], ["range", "tensorflow.concat", "tensorflow.logical_and", "tensorflow.nn.top_k", "tensorflow.reshape", "hard_neg_logits.append", "tensorflow.less_equal", "tensorflow.greater_equal", "tensorflow.cast", "tensorflow.gather"], "function", ["None"], ["", "def", "hard_negative_select", "(", "gscores", ",", "logits", ",", "pos_threshold", ",", "class_num", ",", "batch_size", ",", "K", ")", ":", "\n", "\n", "    ", "hard_neg_logits", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "l", "=", "tf", ".", "logical_and", "(", "tf", ".", "less_equal", "(", "gscores", "[", "i", ",", ":", "]", ",", "pos_threshold", "-", "0.05", ")", ",", "tf", ".", "greater_equal", "(", "gscores", "[", "i", ",", ":", "]", ",", "0.1", ")", ")", "\n", "neg_scores", "=", "tf", ".", "cast", "(", "l", ",", "tf", ".", "float32", ")", "*", "gscores", "\n", "_", ",", "top_k_indices", "=", "tf", ".", "nn", ".", "top_k", "(", "neg_scores", ",", "k", "=", "K", ")", "\n", "hard_neg_logit_i", "=", "tf", ".", "reshape", "(", "tf", ".", "gather", "(", "logits", "[", "i", ",", ":", "]", ",", "top_k_indices", ")", ",", "[", "-", "1", ",", "class_num", "]", ")", "\n", "hard_neg_logits", ".", "append", "(", "hard_neg_logit_i", ")", "\n", "", "return", "tf", ".", "concat", "(", "hard_neg_logits", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.__init__": [[46, 48], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "params", ":", "nets_params", ")", ":", "\n", "        ", "self", ".", "params", "=", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.anchor_gener_auto": [[49, 59], ["range", "nets.tf_ops.anchor_gener", "anchors_list.append"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.anchor_gener"], ["", "def", "anchor_gener_auto", "(", "self", ")", ":", "\n", "        ", "anchors_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "params", ".", "layer_num", ")", ":", "\n", "            ", "anchors", "=", "tf_ops", ".", "anchor_gener", "(", "self", ".", "params", ".", "net_shape", ",", "\n", "self", ".", "params", ".", "feat_shape", "[", "i", "]", ",", "\n", "self", ".", "params", ".", "anchor_sizes", "[", "i", "]", ",", "\n", "self", ".", "params", ".", "anchor_ratios", "[", "i", "]", ",", "\n", "self", ".", "params", ".", "anchor_nums", "[", "i", "]", ")", "\n", "anchors_list", ".", "append", "(", "anchors", ")", "\n", "", "return", "anchors_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.anchor_tensor_gener": [[60, 66], ["range", "len", "nets.tf_ops.anchor_tensor_gener", "anchor_tensor_list.append"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.anchor_tensor_gener"], ["", "def", "anchor_tensor_gener", "(", "self", ",", "anchors_list", ")", ":", "\n", "        ", "anchor_tensor_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "params", ".", "feat_shape", ")", ")", ":", "\n", "            ", "anchor_tensor", "=", "tf_ops", ".", "anchor_tensor_gener", "(", "anchors_list", "[", "i", "]", ")", "\n", "anchor_tensor_list", ".", "append", "(", "anchor_tensor", ")", "\n", "", "return", "anchor_tensor_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.get_anchor": [[67, 71], ["net_class.Nets.anchor_gener_auto", "net_class.Nets.anchor_tensor_gener"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.anchor_gener_auto", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.anchor_tensor_gener"], ["", "def", "get_anchor", "(", "self", ")", ":", "\n", "        ", "anchors_list", "=", "self", ".", "anchor_gener_auto", "(", ")", "\n", "anchor_tensor_list", "=", "self", ".", "anchor_tensor_gener", "(", "anchors_list", ")", "\n", "return", "anchors_list", ",", "anchor_tensor_list", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.rfcn_occ_asynchronous": [[73, 85], ["net_class.Nets.rfcn_argscope", "tensorflow.arg_scope", "tensorflow.arg_scope", "nets.nets_fpn.rfcn_occ_asynchronous"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.rfcn_occ_asynchronous"], ["", "def", "rfcn_occ_asynchronous", "(", "self", ",", "inputs", ",", "anchor_tensor_list", ",", "batch_size", ",", "is_training", ",", "new", "=", "False", ")", ":", "\n", "        ", "arg_scope", "=", "self", ".", "rfcn_argscope", "(", "is_training", ")", "\n", "with", "slim", ".", "arg_scope", "(", "arg_scope", ")", ":", "\n", "            ", "return", "nets_fpn", ".", "rfcn_occ_asynchronous", "(", "inputs", ",", "\n", "anchor_tensor_list", ",", "\n", "self", ".", "params", ".", "anchor_nums", ",", "\n", "batch_size", ",", "\n", "self", ".", "params", ".", "num_classes", ",", "\n", "self", ".", "params", ".", "proposal_nums", ",", "\n", "self", ".", "params", ".", "Ks", ",", "\n", "self", ".", "params", ".", "select_nms_th", ",", "\n", "self", ".", "params", ".", "net", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.data_prepare": [[86, 144], ["range", "pre_fn", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.stack", "tensorflow.stack", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.stack", "tensorflow.stack", "tensorflow.pad", "tensorflow.pad", "tensorflow.pad", "tensorflow.pad", "tensorflow.concat.append", "tensorflow.concat.append", "tensorflow.concat.append", "range", "range", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "range", "range", "range", "range", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "nets.tf_ops.bboxes_encode", "glabels_rpn_4d_list[].append", "glocs_rpn_4d_list[].append", "gscores_rpn_4d_list[].append", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.shape", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.bboxes_encode"], ["", "", "def", "data_prepare", "(", "self", ",", "images", ",", "labels", ",", "bboxes", ",", "anchors_list", ",", "pre_fn", ",", "batch_size", ")", ":", "\n", "        ", "image_4d", "=", "[", "]", "\n", "\n", "labels_nets_4d", "=", "[", "]", "\n", "bboxes_nets_4d", "=", "[", "]", "\n", "\n", "glabels_rpn_4d_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "params", ".", "layer_num", ")", "]", "\n", "glocs_rpn_4d_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "params", ".", "layer_num", ")", "]", "\n", "gscores_rpn_4d_list", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "params", ".", "layer_num", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "image_", ",", "labels_", ",", "bboxes_", "=", "pre_fn", "(", "images", "[", "i", ",", ":", "]", ",", "labels", "[", "i", ",", ":", "]", ",", "bboxes", "[", "i", ",", ":", "]", ",", "self", ".", "params", ".", "img_shape", ",", "\n", "self", ".", "params", ".", "crop_shape", ",", "self", ".", "params", ".", "net_shape", ")", "\n", "pad_num", "=", "tf", ".", "subtract", "(", "self", ".", "params", ".", "max_bbox_num", ",", "tf", ".", "shape", "(", "labels_", ")", "[", "0", "]", ")", "\n", "padding", "=", "tf", ".", "stack", "(", "[", "0", ",", "pad_num", "]", ")", "\n", "padding_label", "=", "tf", ".", "reshape", "(", "padding", ",", "[", "1", ",", "2", "]", ")", "\n", "padding_boxes", "=", "tf", ".", "stack", "(", "[", "padding", ",", "[", "0", ",", "0", "]", "]", ",", "axis", "=", "0", ")", "\n", "labels_", "=", "tf", ".", "pad", "(", "labels_", ",", "padding_label", ",", "constant_values", "=", "999", ")", "\n", "bboxes_", "=", "tf", ".", "pad", "(", "bboxes_", ",", "padding_boxes", ")", "\n", "labels_nets_4d", ".", "append", "(", "tf", ".", "expand_dims", "(", "labels_", ",", "0", ")", ")", "\n", "bboxes_nets_4d", ".", "append", "(", "tf", ".", "expand_dims", "(", "bboxes_", ",", "0", ")", ")", "\n", "image_4d", ".", "append", "(", "tf", ".", "expand_dims", "(", "image_", ",", "axis", "=", "0", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "self", ".", "params", ".", "layer_num", ")", ":", "\n", "                ", "up_th", ",", "low_th", "=", "99999.", ",", "-", "1.", "\n", "glabels_", ",", "glocs_", ",", "gscores_", "=", "tf_ops", ".", "bboxes_encode", "(", "anchors_list", "[", "j", "]", ",", "\n", "bboxes_", ",", "\n", "labels_", ",", "\n", "up_th", ",", "\n", "low_th", ",", "\n", "self", ".", "params", ".", "net_shape", ",", "\n", "self", ".", "params", ".", "num_classes", ")", "\n", "\n", "glabels_rpn_4d_list", "[", "j", "]", ".", "append", "(", "tf", ".", "expand_dims", "(", "glabels_", ",", "axis", "=", "0", ")", ")", "\n", "glocs_rpn_4d_list", "[", "j", "]", ".", "append", "(", "tf", ".", "expand_dims", "(", "glocs_", ",", "axis", "=", "0", ")", ")", "\n", "gscores_rpn_4d_list", "[", "j", "]", ".", "append", "(", "tf", ".", "expand_dims", "(", "gscores_", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "", "if", "batch_size", ">", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "params", ".", "layer_num", ")", ":", "\n", "                ", "glabels_rpn_4d_list", "[", "i", "]", "=", "tf", ".", "concat", "(", "glabels_rpn_4d_list", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "glocs_rpn_4d_list", "[", "i", "]", "=", "tf", ".", "concat", "(", "glocs_rpn_4d_list", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "gscores_rpn_4d_list", "[", "i", "]", "=", "tf", ".", "concat", "(", "gscores_rpn_4d_list", "[", "i", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "image_4d", "=", "tf", ".", "concat", "(", "image_4d", ",", "axis", "=", "0", ")", "\n", "\n", "labels_nets_4d", "=", "tf", ".", "concat", "(", "labels_nets_4d", ",", "axis", "=", "0", ")", "\n", "bboxes_nets_4d", "=", "tf", ".", "concat", "(", "bboxes_nets_4d", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "params", ".", "layer_num", ")", ":", "\n", "                ", "glabels_rpn_4d_list", "[", "i", "]", "=", "glabels_rpn_4d_list", "[", "i", "]", "\n", "glocs_rpn_4d_list", "[", "i", "]", "=", "glocs_rpn_4d_list", "[", "i", "]", "\n", "gscores_rpn_4d_list", "[", "i", "]", "=", "gscores_rpn_4d_list", "[", "i", "]", "\n", "\n", "", "image_4d", "=", "image_4d", "[", "0", "]", "\n", "labels_nets_4d", "=", "labels_nets_4d", "[", "0", "]", "\n", "bboxes_nets_4d", "=", "bboxes_nets_4d", "[", "0", "]", "\n", "\n", "", "return", "[", "image_4d", ",", "glabels_rpn_4d_list", ",", "glocs_rpn_4d_list", ",", "gscores_rpn_4d_list", ",", "labels_nets_4d", ",", "bboxes_nets_4d", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.compute_output_with_att": [[145, 151], ["nets.nets_fpn.roi_align_score", "nets.nets_fpn.roi_align_score", "tensorflow.softmax", "tensorflow.softmax", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.roi_align_score", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.roi_align_score"], ["", "def", "compute_output_with_att", "(", "self", ",", "score_map", ",", "att_map", ",", "boxes", ",", "K", ",", "output_c", ",", "box_num", ",", "batch_size", ")", ":", "\n", "        ", "feature_crop", "=", "nets_fpn", ".", "roi_align_score", "(", "score_map", ",", "boxes", ",", "K", ",", "output_c", ",", "batch_size", ",", "box_num", ",", "redu", "=", "'none'", ")", "\n", "att_crop", "=", "nets_fpn", ".", "roi_align_score", "(", "att_map", ",", "boxes", ",", "K", ",", "1", ",", "batch_size", ",", "box_num", ",", "redu", "=", "'none'", ")", "\n", "spatial_att", "=", "slim", ".", "softmax", "(", "att_crop", ")", "\n", "output", "=", "tf", ".", "reduce_sum", "(", "spatial_att", "*", "feature_crop", ",", "axis", "=", "-", "1", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.get_train_ops": [[152, 362], ["tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "net_class.Nets.get_anchor", "net_class.Nets.data_prepare", "net_class.Nets.rfcn_occ_asynchronous", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "range", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.constant", "tensorflow.constant", "range", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "range", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.losses.get_total_loss", "tensorflow.losses.get_total_loss", "nets.loss_function.rpn_loss", "nets.tf_ops.roi_encode", "net_class.Nets.compute_output_with_att", "loc_pred_list.append", "nets.loss_function.single_loc_loss", "nets.tf_ops.bboxes_decode", "nets.tf_ops.apply_random_distortion", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "nets.tf_ops.roi_encode", "net_class.Nets.compute_output_with_att", "nets.loss_function.single_cls_loss", "tensorflow.greater_equal", "tensorflow.greater_equal", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "net_class.Nets.compute_output_with_att", "net_class.Nets.compute_output_with_att", "net_class.Nets.compute_output_with_att", "nets.loss_function.single_nms_loss", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.constant", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.not_equal", "tensorflow.cast", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.get_anchor", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.data_prepare", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.rfcn_occ_asynchronous", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.rpn_loss", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.roi_encode", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.compute_output_with_att", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.single_loc_loss", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.bboxes_decode", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.apply_random_distortion", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.roi_encode", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.compute_output_with_att", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.single_cls_loss", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.compute_output_with_att", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.compute_output_with_att", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.compute_output_with_att", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.loss_function.single_nms_loss"], ["", "def", "get_train_ops", "(", "self", ",", "images", ",", "labels", ",", "bboxes", ",", "pre_fn", ",", "batch_size", ")", ":", "\n", "############################################################################################################################################################################################", "\n", "# data prepare", "\n", "############################################################################################################################################################################################", "\n", "        ", "labels", "=", "tf", ".", "cast", "(", "labels", ",", "tf", ".", "int64", ")", "\n", "bboxes", "=", "tf", ".", "cast", "(", "bboxes", ",", "tf", ".", "float32", ")", "\n", "anchors_list", ",", "anchor_tensor_list", "=", "self", ".", "get_anchor", "(", ")", "\n", "prepare_outputs", "=", "self", ".", "data_prepare", "(", "images", ",", "labels", ",", "bboxes", ",", "anchors_list", ",", "pre_fn", ",", "batch_size", ")", "\n", "\n", "image_4d", "=", "prepare_outputs", "[", "0", "]", "\n", "glabels_rpn_4d_list", "=", "prepare_outputs", "[", "1", "]", "\n", "glocs_rpn_4d_list", "=", "prepare_outputs", "[", "2", "]", "\n", "gscores_rpn_4d_list", "=", "prepare_outputs", "[", "3", "]", "\n", "labels_net_4d", "=", "prepare_outputs", "[", "4", "]", "\n", "bboxes_net_4d", "=", "prepare_outputs", "[", "5", "]", "\n", "\n", "############################################################################################################################################################################################", "\n", "# build model", "\n", "############################################################################################################################################################################################", "\n", "model_outputs", "=", "self", ".", "rfcn_occ_asynchronous", "(", "image_4d", ",", "anchor_tensor_list", ",", "batch_size", ",", "is_training", "=", "True", ")", "\n", "\n", "rpn_logit_list", "=", "model_outputs", "[", "0", "]", "\n", "rpn_loc_list", "=", "model_outputs", "[", "1", "]", "\n", "rois_selected_list", "=", "model_outputs", "[", "2", "]", "\n", "score_map_list", "=", "model_outputs", "[", "3", "]", "\n", "loc_map_list", "=", "model_outputs", "[", "4", "]", "\n", "nms_map_list", "=", "model_outputs", "[", "5", "]", "\n", "attention_map_loc_list", "=", "model_outputs", "[", "6", "]", "\n", "attention_map_cls_list", "=", "model_outputs", "[", "7", "]", "\n", "attention_map_nms_list", "=", "model_outputs", "[", "8", "]", "\n", "\n", "############################################################################################################################################################################################", "\n", "# RPN loss", "\n", "############################################################################################################################################################################################", "\n", "rpn_loss", "=", "tf", ".", "constant", "(", "0.", ",", "tf", ".", "float32", ")", "\n", "recall_rpn", "=", "tf", ".", "constant", "(", "0.", ",", "tf", ".", "float32", ")", "\n", "precision_rpn", "=", "tf", ".", "constant", "(", "0.", ",", "tf", ".", "float32", ")", "\n", "recall_div_rpn", "=", "tf", ".", "constant", "(", "0.", ",", "tf", ".", "float32", ")", "\n", "precision_div_rpn", "=", "tf", ".", "constant", "(", "0.", ",", "tf", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "params", ".", "layer_num", ")", ":", "\n", "            ", "rpn_loss_i", ",", "recall_rpn_i", ",", "precision_rpn_i", ",", "rpn_loc_loss_i", "=", "loss_function", ".", "rpn_loss", "(", "rpn_logit_list", "[", "i", "]", ",", "\n", "rpn_loc_list", "[", "i", "]", ",", "\n", "glabels_rpn_4d_list", "[", "i", "]", ",", "\n", "glocs_rpn_4d_list", "[", "i", "]", ",", "\n", "gscores_rpn_4d_list", "[", "i", "]", ",", "\n", "batch_size", ",", "\n", "pos_threshold", "=", "self", ".", "params", ".", "net_pos_threshold", ",", "\n", "neg_threshold", "=", "self", ".", "params", ".", "net_neg_threshold", ",", "\n", "neg_threshold_low", "=", "self", ".", "params", ".", "net_neg_threshold_low", ",", "\n", "mini_batch_size", "=", "self", ".", "params", ".", "rpn_mini_batch", ")", "\n", "rpn_loss", "+=", "rpn_loss_i", "\n", "recall_rpn", "+=", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "recall_rpn_i", ",", "-", "1.", ")", ",", "tf", ".", "float32", ")", "*", "recall_rpn_i", "\n", "precision_rpn", "+=", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "precision_rpn_i", ",", "-", "1.", ")", ",", "tf", ".", "float32", ")", "*", "precision_rpn_i", "\n", "recall_div_rpn", "+=", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "recall_rpn_i", ",", "-", "1.", ")", ",", "tf", ".", "float32", ")", "*", "1.", "\n", "precision_div_rpn", "+=", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "precision_rpn_i", ",", "-", "1.", ")", ",", "tf", ".", "float32", ")", "*", "1.", "\n", "\n", "\n", "", "ret_recall_rpn", "=", "tf", ".", "cond", "(", "recall_div_rpn", ">", "0", ",", "\n", "lambda", ":", "recall_rpn", "/", "recall_div_rpn", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "ret_precision_rpn", "=", "tf", ".", "cond", "(", "precision_div_rpn", ">", "0", ",", "\n", "lambda", ":", "precision_rpn", "/", "precision_div_rpn", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "\n", "\n", "############################################################################################################################################################################################", "\n", "# localization loss", "\n", "############################################################################################################################################################################################", "\n", "\n", "loc_loss", "=", "tf", ".", "constant", "(", "0.", ",", "tf", ".", "float32", ")", "\n", "loc_pred_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "params", ".", "layer_num", ")", ":", "\n", "            ", "up_th", ",", "low_th", "=", "99999.", ",", "-", "1.", "\n", "gt_labels_loc", ",", "gt_delta_loc", ",", "gt_scores_loc", ",", "gt_location_loc", ",", "_", ",", "_", ",", "_", ",", "_", "=", "tf_ops", ".", "roi_encode", "(", "rois_selected_list", "[", "i", "]", ",", "\n", "bboxes_net_4d", ",", "\n", "labels_net_4d", ",", "\n", "up_th", ",", "\n", "low_th", ",", "\n", "self", ".", "params", ".", "net_shape", ",", "\n", "self", ".", "params", ".", "num_classes", ",", "\n", "self", ".", "params", ".", "max_bbox_num", ")", "\n", "\n", "loc_pred", "=", "self", ".", "compute_output_with_att", "(", "loc_map_list", "[", "i", "]", ",", "attention_map_loc_list", "[", "i", "]", ",", "rois_selected_list", "[", "i", "]", ",", "\n", "self", ".", "params", ".", "Ks", "[", "i", "]", ",", "4", ",", "self", ".", "params", ".", "proposal_nums", "[", "i", "]", ",", "batch_size", ")", "\n", "loc_pred_list", ".", "append", "(", "loc_pred", ")", "\n", "\n", "loc_loss_i", "=", "loss_function", ".", "single_loc_loss", "(", "loc_pred", ",", "\n", "gt_labels_loc", ",", "gt_delta_loc", ",", "gt_scores_loc", ",", "\n", "match_threshold", "=", "self", ".", "params", ".", "net_loc_threshold", ")", "\n", "loc_loss", "+=", "loc_loss_i", "\n", "\n", "############################################################################################################################################################################################", "\n", "# classification loss", "\n", "############################################################################################################################################################################################", "\n", "", "cls_loss", "=", "tf", ".", "constant", "(", "0.", ",", "tf", ".", "float32", ")", "\n", "recall", "=", "tf", ".", "constant", "(", "0.", ",", "tf", ".", "float32", ")", "\n", "precision", "=", "tf", ".", "constant", "(", "0.", ",", "tf", ".", "float32", ")", "\n", "recall_div", "=", "tf", ".", "constant", "(", "0.", ",", "tf", ".", "float32", ")", "\n", "precision_div", "=", "tf", ".", "constant", "(", "0.", ",", "tf", ".", "float32", ")", "\n", "good_num", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ")", "\n", "pull_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ")", "\n", "push_loss", "=", "tf", ".", "constant", "(", "0.0", ",", "tf", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "params", ".", "layer_num", ")", ":", "\n", "# ------------------------------------------", "\n", "#           bounding box decode", "\n", "# ------------------------------------------", "\n", "            ", "up_th", ",", "low_th", "=", "99999.", ",", "-", "1.", "\n", "bboxes_decoded", "=", "tf_ops", ".", "bboxes_decode", "(", "rois_selected_list", "[", "i", "]", ",", "loc_pred_list", "[", "i", "]", ")", "\n", "\n", "# apply random distortion", "\n", "bboxes_decoded", "=", "tf_ops", ".", "apply_random_distortion", "(", "bboxes_decoded", ",", "batch_size", ",", "self", ".", "params", ".", "proposal_nums", "[", "i", "]", ",", "r_xy", "=", "self", ".", "params", ".", "noise_xy", ",", "r_wh", "=", "self", ".", "params", ".", "noise_wh", ")", "\n", "\n", "bboxes_decoded", "=", "tf", ".", "stop_gradient", "(", "bboxes_decoded", ")", "\n", "\n", "# ------------------------------------------", "\n", "#           classification encode", "\n", "# ------------------------------------------", "\n", "gt_labels_cls", ",", "gt_delta_cls", ",", "gt_scores_cls", ",", "gt_location_cls", ",", "gt_labels_cls2", ",", "gt_delta_cls2", ",", "gt_scores_cls2", ",", "gt_location_cls2", "=", "tf_ops", ".", "roi_encode", "(", "bboxes_decoded", ",", "\n", "bboxes_net_4d", ",", "\n", "labels_net_4d", ",", "\n", "up_th", ",", "\n", "low_th", ",", "\n", "self", ".", "params", ".", "net_shape", ",", "\n", "self", ".", "params", ".", "num_classes", ",", "\n", "self", ".", "params", ".", "max_bbox_num", ")", "\n", "\n", "cls_logits", "=", "self", ".", "compute_output_with_att", "(", "score_map_list", "[", "i", "]", ",", "attention_map_cls_list", "[", "i", "]", ",", "bboxes_decoded", ",", "\n", "self", ".", "params", ".", "Ks", "[", "i", "]", ",", "self", ".", "params", ".", "num_classes", ",", "self", ".", "params", ".", "proposal_nums", "[", "i", "]", ",", "batch_size", ")", "\n", "\n", "# ---------------------------------------", "\n", "#          classification loss", "\n", "# ---------------------------------------", "\n", "\n", "cls_loss_i", ",", "recall_i", ",", "precision_i", "=", "loss_function", ".", "single_cls_loss", "(", "cls_logits", ",", "\n", "gt_labels_cls", ",", "gt_scores_cls", ",", "\n", "batch_size", ",", "\n", "class_num", "=", "self", ".", "params", ".", "num_classes", ",", "\n", "pos_threshold", "=", "self", ".", "params", ".", "net_pos_threshold", ",", "\n", "neg_threshold", "=", "self", ".", "params", ".", "net_neg_threshold", ",", "\n", "neg_threshold_low", "=", "self", ".", "params", ".", "net_neg_threshold_low", ",", "\n", "mini_batch_size", "=", "self", ".", "params", ".", "rfcn_mini_batch", ",", "\n", "OHEM", "=", "True", ",", "\n", "back_OHEM", "=", "nets_params", ".", "back_OHEM", "\n", ")", "\n", "cls_loss", "+=", "cls_loss_i", "\n", "recall", "+=", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "recall_i", ",", "-", "1.", ")", ",", "tf", ".", "float32", ")", "*", "recall_i", "\n", "precision", "+=", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "precision_i", ",", "-", "1.", ")", ",", "tf", ".", "float32", ")", "*", "precision_i", "\n", "recall_div", "+=", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "recall_i", ",", "-", "1.", ")", ",", "tf", ".", "float32", ")", "*", "1.", "\n", "precision_div", "+=", "tf", ".", "cast", "(", "tf", ".", "not_equal", "(", "precision_i", ",", "-", "1.", ")", ",", "tf", ".", "float32", ")", "*", "1.", "\n", "\n", "good_mask_i", "=", "tf", ".", "greater_equal", "(", "gt_scores_cls", ",", "self", ".", "params", ".", "net_pos_threshold", ")", "\n", "good_num_i", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "cast", "(", "good_mask_i", ",", "tf", ".", "float32", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "\n", "good_num", "=", "good_num", "+", "good_num_i", "\n", "\n", "# ---------------------------------------", "\n", "#               NMS Loss", "\n", "# ---------------------------------------", "\n", "nms_logits_feat", "=", "self", ".", "compute_output_with_att", "(", "nms_map_list", "[", "i", "]", ",", "attention_map_nms_list", "[", "i", "]", ",", "bboxes_decoded", ",", "\n", "self", ".", "params", ".", "Ks", "[", "i", "]", ",", "4", ",", "self", ".", "params", ".", "proposal_nums", "[", "i", "]", ",", "batch_size", ")", "\n", "\n", "nms_logits_gt", "=", "self", ".", "compute_output_with_att", "(", "nms_map_list", "[", "i", "]", ",", "attention_map_nms_list", "[", "i", "]", ",", "gt_location_cls", ",", "\n", "self", ".", "params", ".", "Ks", "[", "i", "]", ",", "4", ",", "self", ".", "params", ".", "proposal_nums", "[", "i", "]", ",", "batch_size", ")", "\n", "\n", "nms_logits_gt2", "=", "self", ".", "compute_output_with_att", "(", "nms_map_list", "[", "i", "]", ",", "attention_map_nms_list", "[", "i", "]", ",", "gt_location_cls2", ",", "\n", "self", ".", "params", ".", "Ks", "[", "i", "]", ",", "4", ",", "self", ".", "params", ".", "proposal_nums", "[", "i", "]", ",", "batch_size", ")", "\n", "\n", "pull_loss_i", ",", "push_loss_i", "=", "loss_function", ".", "single_nms_loss", "(", "bboxes_decoded", ",", "\n", "gt_scores_cls", ",", "gt_location_cls", ",", "\n", "gt_scores_cls2", ",", "gt_location_cls2", ",", "\n", "nms_logits_feat", ",", "nms_logits_gt", ",", "nms_logits_gt2", ",", "\n", "th1", "=", "self", ".", "params", ".", "ae_up_threshold", ",", "th2", "=", "self", ".", "params", ".", "ae_low_threshold", ")", "\n", "pull_loss", "+=", "pull_loss_i", "\n", "push_loss", "+=", "push_loss_i", "\n", "\n", "# -----------------------------------------------------------------", "\n", "#               post process for some supervision", "\n", "# -----------------------------------------------------------------", "\n", "", "ret_recall", "=", "tf", ".", "cond", "(", "recall_div", ">", "0", ",", "\n", "lambda", ":", "recall", "/", "recall_div", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "ret_precision", "=", "tf", ".", "cond", "(", "precision_div", ">", "0", ",", "\n", "lambda", ":", "precision", "/", "precision_div", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ")", ")", "\n", "good_num", "=", "good_num", "/", "self", ".", "params", ".", "layer_num", "\n", "\n", "############################################################################################################################################################################################", "\n", "# for train", "\n", "############################################################################################################################################################################################", "\n", "total_loss", "=", "tf", ".", "losses", ".", "get_total_loss", "(", "add_regularization_losses", "=", "True", ")", "\n", "ret_dict", "=", "{", "\n", "'Total loss'", ":", "total_loss", ",", "\n", "'RPN loss'", ":", "rpn_loss", ",", "\n", "'RPN Recall'", ":", "ret_recall_rpn", ",", "\n", "'RPN Precision'", ":", "ret_precision_rpn", ",", "\n", "'Positive RoIs'", ":", "good_num", ",", "\n", "'Classify loss'", ":", "cls_loss", ",", "\n", "'Localization loss'", ":", "loc_loss", ",", "\n", "'Recall'", ":", "ret_recall", ",", "\n", "'Precision'", ":", "ret_precision", ",", "\n", "'Pull loss'", ":", "pull_loss", ",", "\n", "'Push loss'", ":", "push_loss", "\n", "}", "\n", "\n", "log_item", "=", "[", "'Total loss'", ",", "'RPN loss'", ",", "'RPN Recall'", ",", "'RPN Precision'", ",", "\n", "'Positive RoIs'", ",", "'Classify loss'", ",", "'Localization loss'", ",", "\n", "'Recall'", ",", "'Precision'", ",", "'Pull loss'", ",", "'Push loss'", "]", "\n", "return", "ret_dict", ",", "log_item", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.rid_weird_roi": [[363, 386], ["len", "tensorflow.div", "tensorflow.div", "tensorflow.logical_and", "tensorflow.logical_and", "tensorflow.div", "tensorflow.div", "tensorflow.logical_and", "tensorflow.logical_and", "rois.get_shape", "tensorflow.greater", "tensorflow.greater", "tensorflow.less", "tensorflow.less", "tensorflow.greater", "tensorflow.greater", "tensorflow.less", "tensorflow.less"], "methods", ["None"], ["", "def", "rid_weird_roi", "(", "self", ",", "rois", ",", "low_th", ",", "up_th", ")", ":", "\n", "        ", "if", "len", "(", "rois", ".", "get_shape", "(", ")", ")", "==", "3", ":", "\n", "            ", "h", "=", "rois", "[", ":", ",", ":", ",", "2", "]", "-", "rois", "[", ":", ",", ":", ",", "0", "]", "\n", "w", "=", "rois", "[", ":", ",", ":", ",", "3", "]", "-", "rois", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "h", "=", "h", "*", "self", ".", "params", ".", "net_shape", "[", "0", "]", "\n", "w", "=", "w", "*", "self", ".", "params", ".", "net_shape", "[", "1", "]", "\n", "\n", "ratio", "=", "tf", ".", "div", "(", "h", ",", "w", ")", "\n", "\n", "valid_mask", "=", "tf", ".", "logical_and", "(", "tf", ".", "greater", "(", "ratio", ",", "low_th", ")", ",", "tf", ".", "less", "(", "ratio", ",", "up_th", ")", ")", "\n", "return", "valid_mask", "\n", "", "else", ":", "\n", "            ", "h", "=", "rois", "[", ":", ",", "2", "]", "-", "rois", "[", ":", ",", "0", "]", "\n", "w", "=", "rois", "[", ":", ",", "3", "]", "-", "rois", "[", ":", ",", "1", "]", "\n", "\n", "h", "=", "h", "*", "self", ".", "params", ".", "net_shape", "[", "0", "]", "\n", "w", "=", "w", "*", "self", ".", "params", ".", "net_shape", "[", "1", "]", "\n", "\n", "ratio", "=", "tf", ".", "div", "(", "h", ",", "w", ")", "\n", "\n", "valid_mask", "=", "tf", ".", "logical_and", "(", "tf", ".", "greater", "(", "ratio", ",", "low_th", ")", ",", "tf", ".", "less", "(", "ratio", ",", "up_th", ")", ")", "\n", "return", "valid_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.get_ae_id_inference": [[387, 402], ["tensorflow.stack", "tensorflow.stack", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["None"], ["", "", "def", "get_ae_id_inference", "(", "self", ",", "box", ",", "trans", ")", ":", "\n", "        ", "ymin", "=", "box", "[", ":", ",", "0", "]", "\n", "xmin", "=", "box", "[", ":", ",", "1", "]", "\n", "ymax", "=", "box", "[", ":", ",", "2", "]", "\n", "xmax", "=", "box", "[", ":", ",", "3", "]", "\n", "\n", "y", "=", "(", "ymin", "+", "ymax", ")", "/", "2.", "\n", "x", "=", "(", "xmin", "+", "xmax", ")", "/", "2.", "\n", "h", "=", "ymax", "-", "ymin", "\n", "w", "=", "xmax", "-", "xmin", "\n", "\n", "yxhw", "=", "tf", ".", "stack", "(", "(", "y", ",", "x", ",", "h", ",", "w", ")", ",", "axis", "=", "-", "1", ")", "\n", "# trans = tf.ones_like(yxhw)", "\n", "ae", "=", "tf", ".", "reduce_sum", "(", "trans", "*", "yxhw", ",", "axis", "=", "-", "1", ")", "\n", "return", "ae", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.get_test_ops": [[403, 494], ["net_class.Nets.get_anchor", "net_class.Nets.rfcn_occ_asynchronous", "range", "net_class.Nets.compute_output_with_att", "nets.tf_ops.bboxes_decode", "net_class.Nets.compute_output_with_att", "net_class.Nets.compute_output_with_att", "tensorflow.softmax", "tensorflow.softmax", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.ones_like", "tensorflow.ones_like", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "net_class.Nets.get_ae_id_inference", "net_class.Nets.rid_weird_roi", "tensorflow.nn.top_k", "tensorflow.nn.top_k", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.gather", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "rois_all_layer.append", "class_all_layer.append", "scores_all_layer.append", "ae_all_layer.append", "tensorflow.cast", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.get_anchor", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.rfcn_occ_asynchronous", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.compute_output_with_att", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.bboxes_decode", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.compute_output_with_att", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.compute_output_with_att", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.get_ae_id_inference", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.net_class.Nets.rid_weird_roi"], ["", "def", "get_test_ops", "(", "self", ",", "image_4d", ")", ":", "\n", "        ", "batch_size", "=", "1", "\n", "anchors_list", ",", "anchor_tensor_list", "=", "self", ".", "get_anchor", "(", ")", "\n", "############################################################################################################################################################################################", "\n", "# build model", "\n", "############################################################################################################################################################################################", "\n", "model_outputs", "=", "self", ".", "rfcn_occ_asynchronous", "(", "image_4d", ",", "anchor_tensor_list", ",", "batch_size", ",", "is_training", "=", "True", ")", "\n", "\n", "rpn_logit_list", "=", "model_outputs", "[", "0", "]", "\n", "rpn_loc_list", "=", "model_outputs", "[", "1", "]", "\n", "rois_selected_list", "=", "model_outputs", "[", "2", "]", "\n", "score_map_list", "=", "model_outputs", "[", "3", "]", "\n", "loc_map_list", "=", "model_outputs", "[", "4", "]", "\n", "nms_map_list", "=", "model_outputs", "[", "5", "]", "\n", "attention_map_loc_list", "=", "model_outputs", "[", "6", "]", "\n", "attention_map_cls_list", "=", "model_outputs", "[", "7", "]", "\n", "attention_map_nms_list", "=", "model_outputs", "[", "8", "]", "\n", "\n", "\n", "############################################################################################################################################################################################", "\n", "# post process", "\n", "############################################################################################################################################################################################", "\n", "\n", "rois_all_layer", "=", "[", "]", "\n", "class_all_layer", "=", "[", "]", "\n", "scores_all_layer", "=", "[", "]", "\n", "ae_all_layer", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "params", ".", "layer_num", ")", ":", "\n", "# -----------------------------------------------------------------", "\n", "#                       run localization", "\n", "# -----------------------------------------------------------------", "\n", "            ", "loc_pred", "=", "self", ".", "compute_output_with_att", "(", "loc_map_list", "[", "i", "]", ",", "attention_map_loc_list", "[", "i", "]", ",", "rois_selected_list", "[", "i", "]", ",", "\n", "self", ".", "params", ".", "Ks", "[", "i", "]", ",", "4", ",", "self", ".", "params", ".", "proposal_nums", "[", "i", "]", ",", "batch_size", ")", "\n", "\n", "# -----------------------------------------------------------------", "\n", "#                      bounding box decode", "\n", "# -----------------------------------------------------------------", "\n", "objs_i", "=", "tf_ops", ".", "bboxes_decode", "(", "rois_selected_list", "[", "i", "]", ",", "loc_pred", ")", "\n", "\n", "# -----------------------------------------------------------------", "\n", "#                     run classification", "\n", "# -----------------------------------------------------------------", "\n", "cls_logits", "=", "self", ".", "compute_output_with_att", "(", "score_map_list", "[", "i", "]", ",", "attention_map_cls_list", "[", "i", "]", ",", "objs_i", ",", "\n", "self", ".", "params", ".", "Ks", "[", "i", "]", ",", "self", ".", "params", ".", "num_classes", ",", "self", ".", "params", ".", "proposal_nums", "[", "i", "]", ",", "batch_size", ")", "\n", "\n", "# -----------------------------------------------------------------", "\n", "#                     run nms transformation", "\n", "# -----------------------------------------------------------------", "\n", "nms_trans", "=", "self", ".", "compute_output_with_att", "(", "nms_map_list", "[", "i", "]", ",", "attention_map_nms_list", "[", "i", "]", ",", "objs_i", ",", "\n", "self", ".", "params", ".", "Ks", "[", "i", "]", ",", "4", ",", "self", ".", "params", ".", "proposal_nums", "[", "i", "]", ",", "batch_size", ")", "\n", "\n", "# -----------------------------------------------------------------", "\n", "#              get confidence and remove odd boxes", "\n", "# -----------------------------------------------------------------", "\n", "cls_pred_i", "=", "slim", ".", "softmax", "(", "cls_logits", ")", "\n", "cls_scores_i", "=", "cls_pred_i", "[", ":", ",", ":", ",", "1", "]", "\n", "cls_scores_i", "=", "tf", ".", "reshape", "(", "cls_scores_i", ",", "[", "self", ".", "params", ".", "proposal_nums", "[", "i", "]", "]", ")", "\n", "\n", "cls_pred_i", "=", "tf", ".", "ones_like", "(", "cls_scores_i", ")", "\n", "\n", "objs_i", "=", "tf", ".", "reshape", "(", "objs_i", ",", "[", "self", ".", "params", ".", "proposal_nums", "[", "i", "]", ",", "4", "]", ")", "\n", "nms_trans_i", "=", "tf", ".", "reshape", "(", "nms_trans", ",", "[", "self", ".", "params", ".", "proposal_nums", "[", "i", "]", ",", "4", "]", ")", "\n", "ae_i", "=", "self", ".", "get_ae_id_inference", "(", "objs_i", ",", "nms_trans_i", ")", "\n", "valid_mask_i", "=", "self", ".", "rid_weird_roi", "(", "objs_i", ",", "low_th", "=", "self", ".", "params", ".", "output_box_ratio_low", ",", "up_th", "=", "self", ".", "params", ".", "output_box_ratio_high", ")", "\n", "\n", "cls_scores_i", "=", "cls_scores_i", "*", "tf", ".", "cast", "(", "valid_mask_i", ",", "tf", ".", "float32", ")", "\n", "\n", "# -----------------------------------------------------------------", "\n", "#                     get top k boxes", "\n", "# -----------------------------------------------------------------", "\n", "\n", "_", ",", "gather_inds", "=", "tf", ".", "nn", ".", "top_k", "(", "cls_scores_i", ",", "k", "=", "self", ".", "params", ".", "out_box_num", ")", "\n", "objs_i", "=", "tf", ".", "gather", "(", "objs_i", ",", "gather_inds", ")", "\n", "cls_pred_i", "=", "tf", ".", "gather", "(", "cls_pred_i", ",", "gather_inds", ")", "\n", "cls_scores_i", "=", "tf", ".", "gather", "(", "cls_scores_i", ",", "gather_inds", ")", "\n", "ae_i", "=", "tf", ".", "gather", "(", "ae_i", ",", "gather_inds", ")", "\n", "\n", "objs_i", "=", "tf", ".", "reshape", "(", "objs_i", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "cls_pred_i", "=", "tf", ".", "reshape", "(", "cls_pred_i", ",", "[", "-", "1", "]", ")", "\n", "cls_scores_i", "=", "tf", ".", "reshape", "(", "cls_scores_i", ",", "[", "-", "1", "]", ")", "\n", "#if i == 2:", "\n", "#    cls_scores_i = tf.minimum(cls_scores_i * 1.1, 1.0)", "\n", "ae_i", "=", "tf", ".", "reshape", "(", "ae_i", ",", "[", "-", "1", "]", ")", "\n", "\n", "rois_all_layer", ".", "append", "(", "objs_i", ")", "\n", "class_all_layer", ".", "append", "(", "cls_pred_i", ")", "\n", "scores_all_layer", ".", "append", "(", "cls_scores_i", ")", "\n", "ae_all_layer", ".", "append", "(", "ae_i", ")", "\n", "\n", "", "return", "rois_all_layer", ",", "class_all_layer", ",", "scores_all_layer", ",", "ae_all_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.custom_layers.abs_smooth": [[31, 44], ["tensorflow.abs", "tensorflow.minimum"], "function", ["None"], ["def", "abs_smooth", "(", "x", ")", ":", "\n", "    ", "\"\"\"Smoothed absolute function. Useful to compute an L1 smooth error.\n\n    Define as:\n        x^2 / 2         if abs(x) < 1\n        abs(x) - 0.5    if abs(x) > 1\n    We use here a differentiable definition using min(x) and abs(x). Clearly\n    not optimal, but good enough for our purpose!\n    \"\"\"", "\n", "absx", "=", "tf", ".", "abs", "(", "x", ")", "\n", "minx", "=", "tf", ".", "minimum", "(", "absx", ",", "1", ")", "\n", "r", "=", "0.5", "*", "(", "(", "absx", "-", "1", ")", "*", "minx", "+", "absx", ")", "\n", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.custom_layers.smooth_l1_loss": [[46, 59], ["tensorflow.abs", "tensorflow.stop_gradient", "tensorflow.to_float", "tensorflow.less", "tensorflow.pow"], "function", ["None"], ["", "def", "smooth_l1_loss", "(", "bbox_pred", ",", "bbox_targets", ",", "sigma", "=", "1.0", ")", ":", "\n", "    ", "'''\n    reference: https://github.com/endernewton/tf-faster-rcnn\n    '''", "\n", "sigma_2", "=", "sigma", "**", "2", "\n", "box_diff", "=", "bbox_pred", "-", "bbox_targets", "\n", "in_box_diff", "=", "box_diff", "\n", "abs_in_box_diff", "=", "tf", ".", "abs", "(", "in_box_diff", ")", "\n", "smoothL1_sign", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "to_float", "(", "tf", ".", "less", "(", "abs_in_box_diff", ",", "1.", "/", "sigma_2", ")", ")", ")", "\n", "in_loss_box", "=", "tf", ".", "pow", "(", "in_box_diff", ",", "2", ")", "*", "(", "sigma_2", "/", "2.", ")", "*", "smoothL1_sign", "+", "(", "abs_in_box_diff", "-", "(", "0.5", "/", "sigma_2", ")", ")", "*", "(", "1.", "-", "smoothL1_sign", ")", "\n", "out_loss_box", "=", "in_loss_box", "\n", "return", "out_loss_box", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.custom_layers.l2_normalization": [[61, 131], ["tensorflow.python.ops.init_ops.ones_initializer", "tensorflow.python.ops.variable_scope.variable_scope", "inputs.get_shape", "tensorflow.python.ops.nn.l2_normalize", "tensorflow.contrib.layers.python.layers.utils.collect_named_outputs", "tensorflow.range", "tensorflow.contrib.layers.python.layers.utils.get_variable_collections", "tensorflow.contrib.framework.python.ops.variables.model_variable", "tensorflow.range", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.multiply"], "function", ["None"], ["", "@", "add_arg_scope", "\n", "def", "l2_normalization", "(", "\n", "inputs", ",", "\n", "scaling", "=", "False", ",", "\n", "scale_initializer", "=", "init_ops", ".", "ones_initializer", "(", ")", ",", "\n", "reuse", "=", "None", ",", "\n", "variables_collections", "=", "None", ",", "\n", "outputs_collections", "=", "None", ",", "\n", "data_format", "=", "'NHWC'", ",", "\n", "trainable", "=", "True", ",", "\n", "scope", "=", "None", ")", ":", "\n", "    ", "\"\"\"Implement L2 normalization on every feature (i.e. spatial normalization).\n\n    Should be extended in some near future to other dimensions, providing a more\n    flexible normalization framework.\n\n    Args:\n      inputs: a 4-D tensor with dimensions [batch_size, height, width, channels].\n      scaling: whether or not to add a post scaling operation along the dimensions\n        which have been normalized.\n      scale_initializer: An initializer for the weights.\n      reuse: whether or not the layer and its variables should be reused. To be\n        able to reuse the layer scope must be given.\n      variables_collections: optional list of collections for all the variables or\n        a dictionary containing a different list of collection per variable.\n      outputs_collections: collection to add the outputs.\n      data_format:  NHWC or NCHW data format.\n      trainable: If `True` also add variables to the graph collection\n        `GraphKeys.TRAINABLE_VARIABLES` (see tf.Variable).\n      scope: Optional scope for `variable_scope`.\n    Returns:\n      A `Tensor` representing the output of the operation.\n    \"\"\"", "\n", "\n", "with", "variable_scope", ".", "variable_scope", "(", "\n", "scope", ",", "'L2Normalization'", ",", "[", "inputs", "]", ",", "reuse", "=", "reuse", ")", "as", "sc", ":", "\n", "        ", "inputs_shape", "=", "inputs", ".", "get_shape", "(", ")", "\n", "inputs_rank", "=", "inputs_shape", ".", "ndims", "\n", "dtype", "=", "inputs", ".", "dtype", ".", "base_dtype", "\n", "if", "data_format", "==", "'NHWC'", ":", "\n", "# norm_dim = tf.range(1, inputs_rank-1)", "\n", "            ", "norm_dim", "=", "tf", ".", "range", "(", "inputs_rank", "-", "1", ",", "inputs_rank", ")", "\n", "params_shape", "=", "inputs_shape", "[", "-", "1", ":", "]", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "# norm_dim = tf.range(2, inputs_rank)", "\n", "            ", "norm_dim", "=", "tf", ".", "range", "(", "1", ",", "2", ")", "\n", "params_shape", "=", "(", "inputs_shape", "[", "1", "]", ")", "\n", "\n", "# Normalize along spatial dimensions.", "\n", "", "outputs", "=", "nn", ".", "l2_normalize", "(", "inputs", ",", "norm_dim", ",", "epsilon", "=", "1e-12", ")", "\n", "# Additional scaling.", "\n", "if", "scaling", ":", "\n", "            ", "scale_collections", "=", "utils", ".", "get_variable_collections", "(", "\n", "variables_collections", ",", "'scale'", ")", "\n", "scale", "=", "variables", ".", "model_variable", "(", "'gamma'", ",", "\n", "shape", "=", "params_shape", ",", "\n", "dtype", "=", "dtype", ",", "\n", "initializer", "=", "scale_initializer", ",", "\n", "collections", "=", "scale_collections", ",", "\n", "trainable", "=", "trainable", ")", "\n", "if", "data_format", "==", "'NHWC'", ":", "\n", "                ", "outputs", "=", "tf", ".", "multiply", "(", "outputs", ",", "scale", ")", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "                ", "scale", "=", "tf", ".", "expand_dims", "(", "scale", ",", "axis", "=", "-", "1", ")", "\n", "scale", "=", "tf", ".", "expand_dims", "(", "scale", ",", "axis", "=", "-", "1", ")", "\n", "outputs", "=", "tf", ".", "multiply", "(", "outputs", ",", "scale", ")", "\n", "# outputs = tf.transpose(outputs, perm=(0, 2, 3, 1))", "\n", "\n", "", "", "return", "utils", ".", "collect_named_outputs", "(", "outputs_collections", ",", "\n", "sc", ".", "original_name_scope", ",", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.custom_layers.pad2d": [[133, 159], ["tensorflow.name_scope", "tensorflow.pad"], "function", ["None"], ["", "", "@", "add_arg_scope", "\n", "def", "pad2d", "(", "inputs", ",", "\n", "pad", "=", "(", "0", ",", "0", ")", ",", "\n", "mode", "=", "'CONSTANT'", ",", "\n", "data_format", "=", "'NHWC'", ",", "\n", "trainable", "=", "True", ",", "\n", "scope", "=", "None", ")", ":", "\n", "    ", "\"\"\"2D Padding layer, adding a symmetric padding to H and W dimensions.\n\n    Aims to mimic padding in Caffe and MXNet, helping the port of models to\n    TensorFlow. Tries to follow the naming convention of `tf.contrib.layers`.\n\n    Args:\n      inputs: 4D input Tensor;\n      pad: 2-Tuple with padding values for H and W dimensions;\n      mode: Padding mode. C.f. `tf.pad`\n      data_format:  NHWC or NCHW data format.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "scope", ",", "'pad2d'", ",", "[", "inputs", "]", ")", ":", "\n", "# Padding shape.", "\n", "        ", "if", "data_format", "==", "'NHWC'", ":", "\n", "            ", "paddings", "=", "[", "[", "0", ",", "0", "]", ",", "[", "pad", "[", "0", "]", ",", "pad", "[", "0", "]", "]", ",", "[", "pad", "[", "1", "]", ",", "pad", "[", "1", "]", "]", ",", "[", "0", ",", "0", "]", "]", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "            ", "paddings", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "pad", "[", "0", "]", ",", "pad", "[", "0", "]", "]", ",", "[", "pad", "[", "1", "]", ",", "pad", "[", "1", "]", "]", "]", "\n", "", "net", "=", "tf", ".", "pad", "(", "inputs", ",", "paddings", ",", "mode", "=", "mode", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.custom_layers.channel_to_last": [[161, 180], ["tensorflow.name_scope", "tensorflow.transpose"], "function", ["None"], ["", "", "@", "add_arg_scope", "\n", "def", "channel_to_last", "(", "inputs", ",", "\n", "data_format", "=", "'NHWC'", ",", "\n", "scope", "=", "None", ")", ":", "\n", "    ", "\"\"\"Move the channel axis to the last dimension. Allows to\n    provide a single output format whatever the input data format.\n\n    Args:\n      inputs: Input Tensor;\n      data_format: NHWC or NCHW.\n    Return:\n      Input in NHWC format.\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "scope", ",", "'channel_to_last'", ",", "[", "inputs", "]", ")", ":", "\n", "        ", "if", "data_format", "==", "'NHWC'", ":", "\n", "            ", "net", "=", "inputs", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "            ", "net", "=", "tf", ".", "transpose", "(", "inputs", ",", "perm", "=", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "", "return", "net", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.anchor_gener": [[7, 33], ["numpy.expand_dims", "numpy.expand_dims", "numpy.zeros", "numpy.zeros", "enumerate", "enumerate", "np.expand_dims.astype", "np.expand_dims.astype", "math.sqrt", "math.sqrt", "len", "len"], "function", ["None"], ["def", "anchor_gener", "(", "img_shape", ",", "feat_shape", ",", "sizes", ",", "ratios", ",", "num_anchors", ",", "offset", "=", "0.5", ")", ":", "\n", "    ", "'''\n    :param img_shape: tuple, (img_height, img_width)\n    :param feat_shape: tuple, (feat_height, feat_width)\n    :param sizes: list\n    :param ratios: list\n    :param num_anchors: int\n    :param offset: float\n    :return:\n    '''", "\n", "dtype", "=", "np", ".", "float32", "\n", "y", ",", "x", "=", "np", ".", "mgrid", "[", "0", ":", "feat_shape", "[", "0", "]", ",", "0", ":", "feat_shape", "[", "1", "]", "]", "\n", "y", "=", "(", "y", ".", "astype", "(", "dtype", ")", "+", "offset", ")", "/", "feat_shape", "[", "0", "]", "\n", "x", "=", "(", "x", ".", "astype", "(", "dtype", ")", "+", "offset", ")", "/", "feat_shape", "[", "1", "]", "\n", "\n", "y", "=", "np", ".", "expand_dims", "(", "y", ",", "axis", "=", "-", "1", ")", "\n", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", "\n", "h", "=", "np", ".", "zeros", "(", "(", "num_anchors", ",", ")", ",", "dtype", "=", "dtype", ")", "\n", "w", "=", "np", ".", "zeros", "(", "(", "num_anchors", ",", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "sizes", ")", ":", "\n", "        ", "for", "j", ",", "r", "in", "enumerate", "(", "ratios", ")", ":", "\n", "            ", "h", "[", "i", "*", "len", "(", "ratios", ")", "+", "j", "]", "=", "(", "s", "*", "math", ".", "sqrt", "(", "r", ")", ")", "/", "img_shape", "[", "0", "]", "\n", "w", "[", "i", "*", "len", "(", "ratios", ")", "+", "j", "]", "=", "(", "s", "/", "math", ".", "sqrt", "(", "r", ")", ")", "/", "img_shape", "[", "1", "]", "\n", "", "", "return", "(", "y", ",", "x", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.anchor_tensor_gener": [[34, 49], ["numpy.zeros", "range", "range", "range"], "function", ["None"], ["", "def", "anchor_tensor_gener", "(", "anchors", ")", ":", "\n", "    ", "'''\n    :param anchors: y, x: [feat_shape[0], feat_shape[1], h, w: [num_anchors]\n    :return: anchor_tensor: [feat_shape[0], feat_shape[1], num_anchors, 4], N = feat_shape[0] * feat_shape[1] * num_anchors\n    '''", "\n", "y", ",", "x", ",", "h", ",", "w", "=", "anchors", "\n", "anchor_tensor", "=", "np", ".", "zeros", "(", "[", "y", ".", "shape", "[", "0", "]", ",", "y", ".", "shape", "[", "1", "]", ",", "h", ".", "shape", "[", "0", "]", ",", "4", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "anchor_tensor", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "anchor_tensor", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "anchor_tensor", ".", "shape", "[", "2", "]", ")", ":", "\n", "                ", "anchor_tensor", "[", "i", ",", "j", ",", "k", ",", "0", "]", "=", "x", "[", "i", ",", "j", "]", "\n", "anchor_tensor", "[", "i", ",", "j", ",", "k", ",", "1", "]", "=", "y", "[", "i", ",", "j", "]", "\n", "anchor_tensor", "[", "i", ",", "j", ",", "k", ",", "2", "]", "=", "w", "[", "k", "]", "\n", "anchor_tensor", "[", "i", ",", "j", ",", "k", ",", "3", "]", "=", "h", "[", "k", "]", "\n", "", "", "", "return", "anchor_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.anchor_gener_by_size": [[50, 65], ["numpy.expand_dims", "numpy.expand_dims", "numpy.zeros", "numpy.zeros", "enumerate", "np.expand_dims.astype", "np.expand_dims.astype"], "function", ["None"], ["", "def", "anchor_gener_by_size", "(", "img_shape", ",", "feat_shape", ",", "sizes", ",", "num_anchors", ",", "offset", "=", "0.5", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "    ", "y", ",", "x", "=", "np", ".", "mgrid", "[", "0", ":", "feat_shape", "[", "0", "]", ",", "0", ":", "feat_shape", "[", "1", "]", "]", "\n", "y", "=", "(", "y", ".", "astype", "(", "dtype", ")", "+", "offset", ")", "/", "feat_shape", "[", "0", "]", "\n", "x", "=", "(", "x", ".", "astype", "(", "dtype", ")", "+", "offset", ")", "/", "feat_shape", "[", "1", "]", "\n", "\n", "y", "=", "np", ".", "expand_dims", "(", "y", ",", "axis", "=", "-", "1", ")", "\n", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "axis", "=", "-", "1", ")", "\n", "\n", "h", "=", "np", ".", "zeros", "(", "(", "num_anchors", ",", ")", ",", "dtype", "=", "dtype", ")", "\n", "w", "=", "np", ".", "zeros", "(", "(", "num_anchors", ",", ")", ",", "dtype", "=", "dtype", ")", "\n", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "sizes", ")", ":", "\n", "        ", "h", "[", "i", "]", "=", "s", "[", "0", "]", "/", "img_shape", "[", "0", "]", "\n", "w", "[", "i", "]", "=", "s", "[", "1", "]", "/", "img_shape", "[", "1", "]", "\n", "", "return", "(", "y", ",", "x", ",", "h", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.get_anchor_box": [[66, 89], ["tensorflow.reshape", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.minimum", "tensorflow.minimum", "tensorflow.stack", "tensorflow.reshape", "tensorflow.shape"], "function", ["None"], ["", "def", "get_anchor_box", "(", "anchor_tensor", ")", ":", "\n", "    ", "fanchor", "=", "tf", ".", "reshape", "(", "anchor_tensor", ",", "[", "-", "1", ",", "4", "]", ")", "# [N ,4]", "\n", "\n", "anchor_x", "=", "fanchor", "[", ":", ",", "0", "]", "\n", "anchor_y", "=", "fanchor", "[", ":", ",", "1", "]", "\n", "anchor_w", "=", "fanchor", "[", ":", ",", "2", "]", "\n", "anchor_h", "=", "fanchor", "[", ":", ",", "3", "]", "\n", "\n", "anchor_ymin", "=", "anchor_y", "-", "anchor_h", "*", "0.5", "\n", "anchor_xmin", "=", "anchor_x", "-", "anchor_w", "*", "0.5", "\n", "anchor_ymax", "=", "anchor_y", "+", "anchor_h", "*", "0.5", "\n", "anchor_xmax", "=", "anchor_x", "+", "anchor_w", "*", "0.5", "\n", "\n", "anchor_ymin", "=", "tf", ".", "maximum", "(", "anchor_ymin", ",", "0.", ")", "\n", "anchor_xmin", "=", "tf", ".", "maximum", "(", "anchor_xmin", ",", "0.", ")", "\n", "anchor_ymax", "=", "tf", ".", "minimum", "(", "anchor_ymax", ",", "1.", ")", "\n", "anchor_xmax", "=", "tf", ".", "minimum", "(", "anchor_xmax", ",", "1.", ")", "\n", "\n", "ret", "=", "tf", ".", "stack", "(", "(", "anchor_ymin", ",", "anchor_xmin", ",", "anchor_ymax", ",", "anchor_xmax", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "ret", "=", "tf", ".", "reshape", "(", "ret", ",", "tf", ".", "shape", "(", "anchor_tensor", ")", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.roi_decode": [[90, 143], ["tensorflow.reshape", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.minimum", "tensorflow.minimum", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.minimum", "tensorflow.minimum", "tensorflow.stack", "tensorflow.exp", "tensorflow.exp"], "function", ["None"], ["", "def", "roi_decode", "(", "roi_loc", ",", "anchor_tensor", ",", "decode", "=", "True", ")", ":", "\n", "    ", "'''\n    :param roi_loc: [batch_size, N, 4], N = feat_shape[0] * feat_shape[1] * anchor_num\n    :param anchor_tensor: [feat_shape[0], feat_shape[1], anchor_num, 4], (x,y,w,h)\n    :param decode: bool\n    :return: [batch_size, N, 4]\n    '''", "\n", "fanchor", "=", "tf", ".", "reshape", "(", "anchor_tensor", ",", "[", "1", ",", "-", "1", ",", "4", "]", ")", "#[1, N ,4]", "\n", "\n", "anchor_x", "=", "fanchor", "[", ":", ",", ":", ",", "0", "]", "\n", "anchor_y", "=", "fanchor", "[", ":", ",", ":", ",", "1", "]", "\n", "anchor_w", "=", "fanchor", "[", ":", ",", ":", ",", "2", "]", "\n", "anchor_h", "=", "fanchor", "[", ":", ",", ":", ",", "3", "]", "\n", "\n", "anchor_ymin", "=", "anchor_y", "-", "anchor_h", "*", "0.5", "\n", "anchor_xmin", "=", "anchor_x", "-", "anchor_w", "*", "0.5", "\n", "anchor_ymax", "=", "anchor_y", "+", "anchor_h", "*", "0.5", "\n", "anchor_xmax", "=", "anchor_x", "+", "anchor_w", "*", "0.5", "\n", "\n", "anchor_ymin", "=", "tf", ".", "maximum", "(", "anchor_ymin", ",", "0.", ")", "\n", "anchor_xmin", "=", "tf", ".", "maximum", "(", "anchor_xmin", ",", "0.", ")", "\n", "anchor_ymax", "=", "tf", ".", "minimum", "(", "anchor_ymax", ",", "1.", ")", "\n", "anchor_xmax", "=", "tf", ".", "minimum", "(", "anchor_xmax", ",", "1.", ")", "\n", "\n", "anchor_y", "=", "(", "anchor_ymax", "+", "anchor_ymin", ")", "*", "0.5", "\n", "anchor_x", "=", "(", "anchor_xmax", "+", "anchor_xmin", ")", "*", "0.5", "\n", "anchor_h", "=", "anchor_ymax", "-", "anchor_ymin", "\n", "anchor_w", "=", "anchor_xmax", "-", "anchor_xmin", "\n", "\n", "\n", "cx", "=", "roi_loc", "[", ":", ",", ":", ",", "0", "]", "*", "anchor_w", "+", "anchor_x", "# [batch_num, N]", "\n", "cy", "=", "roi_loc", "[", ":", ",", ":", ",", "1", "]", "*", "anchor_h", "+", "anchor_y", "# [batch_num, N]", "\n", "w", "=", "tf", ".", "exp", "(", "roi_loc", "[", ":", ",", ":", ",", "2", "]", ")", "*", "anchor_w", "# [batch_num, N]", "\n", "h", "=", "tf", ".", "exp", "(", "roi_loc", "[", ":", ",", ":", ",", "3", "]", ")", "*", "anchor_h", "# [batch_num, N]", "\n", "\n", "if", "decode", ":", "\n", "        ", "ymin", "=", "cy", "-", "0.5", "*", "h", "\n", "xmin", "=", "cx", "-", "0.5", "*", "w", "\n", "ymax", "=", "cy", "+", "0.5", "*", "h", "\n", "xmax", "=", "cx", "+", "0.5", "*", "w", "\n", "", "else", ":", "\n", "        ", "ymin", "=", "anchor_ymin", "\n", "xmin", "=", "anchor_xmin", "\n", "ymax", "=", "anchor_ymax", "\n", "xmax", "=", "anchor_xmax", "\n", "\n", "", "ymin", "=", "tf", ".", "maximum", "(", "ymin", ",", "0.", ")", "\n", "xmin", "=", "tf", ".", "maximum", "(", "xmin", ",", "0.", ")", "\n", "ymax", "=", "tf", ".", "minimum", "(", "ymax", ",", "1.", ")", "\n", "xmax", "=", "tf", ".", "minimum", "(", "xmax", ",", "1.", ")", "\n", "\n", "rois", "=", "tf", ".", "stack", "(", "[", "ymin", ",", "xmin", ",", "ymax", ",", "xmax", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "rois", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.bboxes_decode": [[144, 184], ["tensorflow.stack", "tensorflow.exp", "tensorflow.exp", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.minimum", "tensorflow.minimum"], "function", ["None"], ["", "def", "bboxes_decode", "(", "rois", ",", "rois_loc", ",", "clip", "=", "True", ")", ":", "\n", "    ", "'''\n    :param rois: [batch_size, num, 4]\n    :param rois_loc: [batch_size, num, 4]\n    :param clip: bool\n    :return: [batch_size, num, 4]\n    '''", "\n", "rois_ymin", "=", "rois", "[", ":", ",", ":", ",", "0", "]", "#[batch_size, num]", "\n", "rois_xmin", "=", "rois", "[", ":", ",", ":", ",", "1", "]", "#[batch_size, num]", "\n", "rois_ymax", "=", "rois", "[", ":", ",", ":", ",", "2", "]", "#[batch_size, num]", "\n", "rois_xmax", "=", "rois", "[", ":", ",", ":", ",", "3", "]", "#[batch_size, num]", "\n", "\n", "rois_x", "=", "(", "rois_xmin", "+", "rois_xmax", ")", "/", "2.", "#[batch_size, num]", "\n", "rois_y", "=", "(", "rois_ymin", "+", "rois_ymax", ")", "/", "2.", "#[batch_size, num]", "\n", "rois_w", "=", "rois_xmax", "-", "rois_xmin", "#[batch_size, num]", "\n", "rois_h", "=", "rois_ymax", "-", "rois_ymin", "#[batch_size, num]", "\n", "\n", "loc_x", "=", "rois_loc", "[", ":", ",", ":", ",", "0", "]", "#[batch_size, num]", "\n", "loc_y", "=", "rois_loc", "[", ":", ",", ":", ",", "1", "]", "#[batch_size, num]", "\n", "loc_w", "=", "rois_loc", "[", ":", ",", ":", ",", "2", "]", "#[batch_size, num]", "\n", "loc_h", "=", "rois_loc", "[", ":", ",", ":", ",", "3", "]", "#[batch_size, num]", "\n", "\n", "_x", "=", "loc_x", "*", "rois_w", "+", "rois_x", "#[batch_size, num]", "\n", "_y", "=", "loc_y", "*", "rois_h", "+", "rois_y", "#[batch_size, num]", "\n", "_w", "=", "tf", ".", "exp", "(", "loc_w", ")", "*", "rois_w", "#[batch_size, num]", "\n", "_h", "=", "tf", ".", "exp", "(", "loc_h", ")", "*", "rois_h", "#[batch_size, num]", "\n", "\n", "_ymin", "=", "_y", "-", "_h", "/", "2.", "#[batch_size, num]", "\n", "_xmin", "=", "_x", "-", "_w", "/", "2.", "#[batch_size, num]", "\n", "_ymax", "=", "_y", "+", "_h", "/", "2.", "#[batch_size, num]", "\n", "_xmax", "=", "_x", "+", "_w", "/", "2.", "#[batch_size, num]", "\n", "\n", "if", "clip", ":", "\n", "        ", "_ymin", "=", "tf", ".", "maximum", "(", "_ymin", ",", "0.", ")", "\n", "_xmin", "=", "tf", ".", "maximum", "(", "_xmin", ",", "0.", ")", "\n", "_ymax", "=", "tf", ".", "minimum", "(", "_ymax", ",", "1.", ")", "\n", "_xmax", "=", "tf", ".", "minimum", "(", "_xmax", ",", "1.", ")", "\n", "\n", "", "bboxes", "=", "tf", ".", "stack", "(", "[", "_ymin", ",", "_xmin", ",", "_ymax", ",", "_xmax", "]", ",", "axis", "=", "-", "1", ")", "#[batch_size, num, 4]", "\n", "return", "bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.roi_select": [[185, 230], ["tf_ops.roi_decode", "range", "tensorflow.concat", "tensorflow.concat", "tensorflow.nn.top_k", "tensorflow.constant", "tensorflow.stack", "tensorflow.reshape", "tensorflow.gather_nd", "tensorflow.reshape", "tensorflow.minimum", "tensorflow.image.non_max_suppression", "tensorflow.pad", "tensorflow.gather", "tensorflow.gather", "rois_list.append", "score_list.append", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.shape", "tensorflow.shape", "range"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.roi_decode"], ["", "def", "roi_select", "(", "roi_score", ",", "roi_loc", ",", "anchor_tensor", ",", "batch_size", ",", "proposal_num", ",", "select_nms_th", ",", "with_score", "=", "False", ")", ":", "\n", "    ", "'''\n    :param roi_score: [batch_size, N]\n    :param roi_loc: [batch_size, N, 4]\n    :param anchor_tensor: [batch_size, N, 4]\n    :param batch_size: int\n    :param proposal_num: int\n    :param select_nms_th: float\n    :param with_score: bool\n    :return:\n    '''", "\n", "rois", "=", "roi_decode", "(", "roi_loc", ",", "anchor_tensor", ",", "decode", "=", "True", ")", "# [batch_size, N, 4]", "\n", "_proposal_num", "=", "proposal_num", "\n", "rois_list", "=", "[", "]", "\n", "score_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "roi_score_i", "=", "roi_score", "[", "i", ",", ":", "]", "\n", "rois_i", "=", "rois", "[", "i", ",", ":", ",", ":", "]", "\n", "keep_num", "=", "tf", ".", "minimum", "(", "_proposal_num", ",", "tf", ".", "shape", "(", "roi_score_i", ")", "[", "0", "]", ")", "\n", "selected_indices", "=", "tf", ".", "image", ".", "non_max_suppression", "(", "rois_i", ",", "roi_score_i", ",", "keep_num", ",", "select_nms_th", ")", "\n", "pad_num", "=", "keep_num", "-", "tf", ".", "shape", "(", "selected_indices", ")", "[", "0", "]", "\n", "selected_indices", "=", "tf", ".", "pad", "(", "selected_indices", ",", "[", "[", "0", ",", "pad_num", "]", "]", ")", "\n", "selected_rois", "=", "tf", ".", "gather", "(", "rois_i", ",", "selected_indices", ")", "\n", "\n", "selected_score_i", "=", "tf", ".", "gather", "(", "roi_score_i", ",", "selected_indices", ")", "\n", "\n", "rois_list", ".", "append", "(", "tf", ".", "expand_dims", "(", "selected_rois", ",", "axis", "=", "0", ")", ")", "\n", "score_list", ".", "append", "(", "tf", ".", "expand_dims", "(", "selected_score_i", ",", "axis", "=", "0", ")", ")", "\n", "\n", "\n", "", "rois_selected", "=", "tf", ".", "concat", "(", "rois_list", ",", "axis", "=", "0", ")", "\n", "score_selected", "=", "tf", ".", "concat", "(", "score_list", ",", "axis", "=", "0", ")", "\n", "\n", "top_k_score", ",", "top_k_indices", "=", "tf", ".", "nn", ".", "top_k", "(", "score_selected", ",", "k", "=", "proposal_num", ")", "#[batch_size, proposal_num] for both", "\n", "batch_ind", "=", "tf", ".", "constant", "(", "[", "[", "i", "]", "*", "proposal_num", "for", "i", "in", "range", "(", "batch_size", ")", "]", ")", "\n", "gind", "=", "tf", ".", "stack", "(", "[", "batch_ind", ",", "top_k_indices", "]", ",", "axis", "=", "-", "1", ")", "\n", "gind", "=", "tf", ".", "reshape", "(", "gind", ",", "[", "-", "1", ",", "2", "]", ")", "\n", "rois_selected", "=", "tf", ".", "gather_nd", "(", "rois_selected", ",", "gind", ")", "\n", "\n", "rois_selected", "=", "tf", ".", "reshape", "(", "rois_selected", ",", "[", "batch_size", ",", "proposal_num", ",", "4", "]", ")", "\n", "\n", "if", "not", "with_score", ":", "\n", "        ", "return", "rois_selected", "#[batch_size, proposal_num, 4]", "\n", "", "else", ":", "\n", "        ", "return", "rois_selected", ",", "top_k_score", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.bboxes_encode": [[231, 353], ["tensorflow.maximum", "tensorflow.maximum", "tensorflow.minimum", "tensorflow.minimum", "tensorflow.stack", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.minimum", "tensorflow.minimum", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.ones", "tensorflow.ones", "tensorflow.while_loop", "tensorflow.log", "tensorflow.log", "tensorflow.stack", "tensorflow.where", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.minimum", "tensorflow.minimum", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.div", "tensorflow.sqrt", "tensorflow.logical_and", "tensorflow.reshape", "tensorflow.less", "tf_ops.bboxes_encode.jaccard_with_anchors"], "function", ["None"], ["", "", "def", "bboxes_encode", "(", "anchors", ",", "bboxes", ",", "labels", ",", "up_th", ",", "low_th", ",", "net_shape", ",", "num_classes", ")", ":", "\n", "    ", "dtype", "=", "tf", ".", "float32", "\n", "box_ymin", "=", "bboxes", "[", ":", ",", "0", "]", "\n", "box_xmin", "=", "bboxes", "[", ":", ",", "1", "]", "\n", "box_ymax", "=", "bboxes", "[", ":", ",", "2", "]", "\n", "box_xmax", "=", "bboxes", "[", ":", ",", "3", "]", "\n", "\n", "box_ymin", "=", "tf", ".", "maximum", "(", "box_ymin", ",", "0.", ")", "\n", "box_xmin", "=", "tf", ".", "maximum", "(", "box_xmin", ",", "0.", ")", "\n", "box_ymax", "=", "tf", ".", "minimum", "(", "box_ymax", ",", "1.", ")", "\n", "box_xmax", "=", "tf", ".", "minimum", "(", "box_xmax", ",", "1.", ")", "\n", "\n", "bboxes", "=", "tf", ".", "stack", "(", "(", "box_ymin", ",", "box_xmin", ",", "box_ymax", ",", "box_xmax", ")", ",", "axis", "=", "1", ")", "\n", "\n", "yref", ",", "xref", ",", "href", ",", "wref", "=", "anchors", "\n", "ymin", "=", "yref", "-", "href", "/", "2.", "\n", "xmin", "=", "xref", "-", "wref", "/", "2.", "\n", "ymax", "=", "yref", "+", "href", "/", "2.", "\n", "xmax", "=", "xref", "+", "wref", "/", "2.", "\n", "\n", "ymin", "=", "tf", ".", "maximum", "(", "ymin", ",", "0.", ")", "\n", "xmin", "=", "tf", ".", "maximum", "(", "xmin", ",", "0.", ")", "\n", "ymax", "=", "tf", ".", "minimum", "(", "ymax", ",", "1.", ")", "\n", "xmax", "=", "tf", ".", "minimum", "(", "xmax", ",", "1.", ")", "\n", "\n", "vol_anchors", "=", "(", "xmax", "-", "xmin", ")", "*", "(", "ymax", "-", "ymin", ")", "\n", "\n", "# Initialize tensors...", "\n", "shape", "=", "(", "yref", ".", "shape", "[", "0", "]", ",", "yref", ".", "shape", "[", "1", "]", ",", "href", ".", "size", ")", "\n", "feat_labels", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "feat_scores", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "dtype", ")", "\n", "\n", "feat_ymin", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "dtype", ")", "\n", "feat_xmin", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "dtype", ")", "\n", "feat_ymax", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "dtype", ")", "\n", "feat_xmax", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "dtype", ")", "\n", "\n", "def", "jaccard_with_anchors", "(", "bbox", ")", ":", "\n", "        ", "\"\"\"Compute jaccard score between a box and the anchors.\n        \"\"\"", "\n", "int_ymin", "=", "tf", ".", "maximum", "(", "ymin", ",", "bbox", "[", "0", "]", ")", "\n", "int_xmin", "=", "tf", ".", "maximum", "(", "xmin", ",", "bbox", "[", "1", "]", ")", "\n", "int_ymax", "=", "tf", ".", "minimum", "(", "ymax", ",", "bbox", "[", "2", "]", ")", "\n", "int_xmax", "=", "tf", ".", "minimum", "(", "xmax", ",", "bbox", "[", "3", "]", ")", "\n", "\n", "h", "=", "tf", ".", "maximum", "(", "int_ymax", "-", "int_ymin", ",", "0.", ")", "\n", "w", "=", "tf", ".", "maximum", "(", "int_xmax", "-", "int_xmin", ",", "0.", ")", "\n", "# Volumes.", "\n", "inter_vol", "=", "h", "*", "w", "\n", "union_vol", "=", "vol_anchors", "-", "inter_vol", "+", "(", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ")", "*", "(", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ")", "\n", "jaccard", "=", "tf", ".", "div", "(", "inter_vol", ",", "union_vol", ")", "\n", "return", "jaccard", "\n", "\n", "", "def", "scale_res", "(", "bbox", ")", ":", "\n", "        ", "h", "=", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", "\n", "w", "=", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", "\n", "h", "=", "h", "*", "net_shape", "[", "0", "]", "\n", "w", "=", "w", "*", "net_shape", "[", "1", "]", "\n", "scale", "=", "tf", ".", "sqrt", "(", "h", "*", "w", ")", "\n", "valid_mask", "=", "tf", ".", "logical_and", "(", "tf", ".", "greater", "(", "scale", ",", "low_th", ")", ",", "tf", ".", "less", "(", "scale", ",", "up_th", ")", ")", "\n", "valid_mask", "=", "tf", ".", "reshape", "(", "valid_mask", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "return", "valid_mask", "\n", "\n", "\n", "", "def", "condition", "(", "i", ",", "feat_labels", ",", "feat_scores", ",", "\n", "feat_ymin", ",", "feat_xmin", ",", "feat_ymax", ",", "feat_xmax", ")", ":", "\n", "        ", "\"\"\"Condition: check label index.\n        \"\"\"", "\n", "r", "=", "tf", ".", "less", "(", "i", ",", "tf", ".", "shape", "(", "labels", ")", ")", "\n", "return", "r", "[", "0", "]", "\n", "\n", "", "def", "body", "(", "i", ",", "feat_labels", ",", "feat_scores", ",", "\n", "feat_ymin", ",", "feat_xmin", ",", "feat_ymax", ",", "feat_xmax", ")", ":", "\n", "\n", "# Jaccard score.", "\n", "        ", "label", "=", "labels", "[", "i", "]", "\n", "bbox", "=", "bboxes", "[", "i", "]", "\n", "jaccard", "=", "jaccard_with_anchors", "(", "bbox", ")", "\n", "scale_valid", "=", "scale_res", "(", "bbox", ")", "\n", "# Mask: check threshold + scores + no annotations + num_classes.", "\n", "mask", "=", "tf", ".", "greater", "(", "jaccard", ",", "feat_scores", ")", "\n", "mask", "=", "tf", ".", "logical_and", "(", "scale_valid", ",", "mask", ")", "\n", "# mask = tf.logical_and(mask, tf.greater(jaccard, matching_threshold))", "\n", "mask", "=", "tf", ".", "logical_and", "(", "mask", ",", "label", "<", "num_classes", ")", "\n", "imask", "=", "tf", ".", "cast", "(", "mask", ",", "tf", ".", "int64", ")", "\n", "fmask", "=", "tf", ".", "cast", "(", "mask", ",", "dtype", ")", "\n", "# Update values using mask.", "\n", "feat_labels", "=", "imask", "*", "label", "+", "(", "1", "-", "imask", ")", "*", "feat_labels", "\n", "feat_scores", "=", "tf", ".", "where", "(", "mask", ",", "jaccard", ",", "feat_scores", ")", "\n", "\n", "feat_ymin", "=", "fmask", "*", "bbox", "[", "0", "]", "+", "(", "1", "-", "fmask", ")", "*", "feat_ymin", "\n", "feat_xmin", "=", "fmask", "*", "bbox", "[", "1", "]", "+", "(", "1", "-", "fmask", ")", "*", "feat_xmin", "\n", "feat_ymax", "=", "fmask", "*", "bbox", "[", "2", "]", "+", "(", "1", "-", "fmask", ")", "*", "feat_ymax", "\n", "feat_xmax", "=", "fmask", "*", "bbox", "[", "3", "]", "+", "(", "1", "-", "fmask", ")", "*", "feat_xmax", "\n", "\n", "\n", "return", "[", "i", "+", "1", ",", "feat_labels", ",", "feat_scores", ",", "\n", "feat_ymin", ",", "feat_xmin", ",", "feat_ymax", ",", "feat_xmax", "]", "\n", "\n", "# Main loop definition.", "\n", "", "i", "=", "0", "\n", "[", "i", ",", "feat_labels", ",", "feat_scores", ",", "\n", "feat_ymin", ",", "feat_xmin", ",", "\n", "feat_ymax", ",", "feat_xmax", "]", "=", "tf", ".", "while_loop", "(", "condition", ",", "body", ",", "\n", "[", "i", ",", "feat_labels", ",", "feat_scores", ",", "\n", "feat_ymin", ",", "feat_xmin", ",", "\n", "feat_ymax", ",", "feat_xmax", "]", ")", "\n", "# Transform to center / size.", "\n", "feat_cy", "=", "(", "feat_ymax", "+", "feat_ymin", ")", "/", "2.", "\n", "feat_cx", "=", "(", "feat_xmax", "+", "feat_xmin", ")", "/", "2.", "\n", "feat_h", "=", "feat_ymax", "-", "feat_ymin", "\n", "feat_w", "=", "feat_xmax", "-", "feat_xmin", "\n", "# Encode features.", "\n", "feat_cy", "=", "(", "feat_cy", "-", "yref", ")", "/", "href", "\n", "feat_cx", "=", "(", "feat_cx", "-", "xref", ")", "/", "wref", "\n", "feat_h", "=", "tf", ".", "log", "(", "feat_h", "/", "href", ")", "\n", "feat_w", "=", "tf", ".", "log", "(", "feat_w", "/", "wref", ")", "\n", "#  x / y / w / h", "\n", "feat_localizations", "=", "tf", ".", "stack", "(", "[", "feat_cx", ",", "feat_cy", ",", "feat_w", ",", "feat_h", "]", ",", "axis", "=", "-", "1", ")", "\n", "feat_localizations", "=", "tf", ".", "where", "(", "tf", ".", "is_nan", "(", "feat_localizations", ")", ",", "tf", ".", "zeros_like", "(", "feat_localizations", ")", ",", "feat_localizations", ")", "\n", "return", "feat_labels", ",", "feat_localizations", ",", "feat_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.roi_encode": [[354, 514], ["ymin.get_shape", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.ones", "tensorflow.ones", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.ones", "tensorflow.ones", "tensorflow.while_loop", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.log", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.where", "tensorflow.where", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.minimum", "tensorflow.minimum", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.div", "tensorflow.sqrt", "tensorflow.logical_and", "tensorflow.reshape", "tensorflow.less", "tensorflow.reshape", "tf_ops.bboxes_encode.jaccard_with_anchors"], "function", ["None"], ["", "def", "roi_encode", "(", "rois", ",", "bboxes", ",", "labels", ",", "up_th", ",", "low_th", ",", "net_shape", ",", "num_classes", ",", "max_bbox_num", ")", ":", "\n", "    ", "'''\n    :param rois: [batch_size, N, 4]\n    :param bboxes: [batch_size, max_bboxes_num, 4]\n    :param labels:  [batch_size, max_bboxes_num]\n    :param up_th: float\n    :param low_th: float\n    :param net_shape: tuple\n    :param num_classes: int\n    :param max_bbox_num: int\n    :return:\n    '''", "\n", "dtype", "=", "tf", ".", "float32", "\n", "ymin", "=", "rois", "[", ":", ",", ":", ",", "0", "]", "# [batch_size, N]", "\n", "xmin", "=", "rois", "[", ":", ",", ":", ",", "1", "]", "# [batch_size, N]", "\n", "ymax", "=", "rois", "[", ":", ",", ":", ",", "2", "]", "# [batch_size, N]", "\n", "xmax", "=", "rois", "[", ":", ",", ":", ",", "3", "]", "# [batch_size, N]", "\n", "vol_anchors", "=", "(", "xmax", "-", "xmin", ")", "*", "(", "ymax", "-", "ymin", ")", "# [batch_size, N]", "\n", "\n", "# Initialize tensors...", "\n", "shape", "=", "ymin", ".", "get_shape", "(", ")", "\n", "feat_scores", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "dtype", ")", "# [batch_size, N]", "\n", "feat_scores2", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "dtype", ")", "# [batch_size, N]", "\n", "\n", "feat_labels", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "feat_labels2", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "tf", ".", "int64", ")", "\n", "\n", "feat_ymin", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "dtype", ")", "# [batch_size, N]", "\n", "feat_xmin", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "dtype", ")", "# [batch_size, N]", "\n", "feat_ymax", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "dtype", ")", "# [batch_size, N]", "\n", "feat_xmax", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "dtype", ")", "# [batch_size, N]", "\n", "\n", "feat_ymin2", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "dtype", ")", "# [batch_size, N]", "\n", "feat_xmin2", "=", "tf", ".", "zeros", "(", "shape", ",", "dtype", "=", "dtype", ")", "# [batch_size, N]", "\n", "feat_ymax2", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "dtype", ")", "# [batch_size, N]", "\n", "feat_xmax2", "=", "tf", ".", "ones", "(", "shape", ",", "dtype", "=", "dtype", ")", "# [batch_size, N]", "\n", "\n", "\n", "def", "jaccard_with_anchors", "(", "bbox", ")", ":", "\n", "        ", "\"\"\"Compute jaccard score between a box and the anchors.\n        \"\"\"", "\n", "b_ymin", "=", "tf", ".", "reshape", "(", "bbox", "[", ":", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ")", "#[batch_size, 1]", "\n", "b_xmin", "=", "tf", ".", "reshape", "(", "bbox", "[", ":", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ")", "#[batch_size, 1]", "\n", "b_ymax", "=", "tf", ".", "reshape", "(", "bbox", "[", ":", ",", "2", "]", ",", "[", "-", "1", ",", "1", "]", ")", "#[batch_size, 1]", "\n", "b_xmax", "=", "tf", ".", "reshape", "(", "bbox", "[", ":", ",", "3", "]", ",", "[", "-", "1", ",", "1", "]", ")", "#[batch_size, 1]", "\n", "\n", "int_ymin", "=", "tf", ".", "maximum", "(", "ymin", ",", "b_ymin", ")", "#[batch_size, N]", "\n", "int_xmin", "=", "tf", ".", "maximum", "(", "xmin", ",", "b_xmin", ")", "#[batch_size, N]", "\n", "int_ymax", "=", "tf", ".", "minimum", "(", "ymax", ",", "b_ymax", ")", "#[batch_size, N]", "\n", "int_xmax", "=", "tf", ".", "minimum", "(", "xmax", ",", "b_xmax", ")", "#[batch_size, N]", "\n", "\n", "h", "=", "tf", ".", "maximum", "(", "int_ymax", "-", "int_ymin", ",", "0.", ")", "#[batch_size, N]", "\n", "w", "=", "tf", ".", "maximum", "(", "int_xmax", "-", "int_xmin", ",", "0.", ")", "#[batch_size, N]", "\n", "# Volumes.", "\n", "inter_vol", "=", "h", "*", "w", "#[batch_size, N]", "\n", "union_vol", "=", "vol_anchors", "-", "inter_vol", "+", "(", "b_ymax", "-", "b_ymin", ")", "*", "(", "b_xmax", "-", "b_xmin", ")", "#[batch_size, N]", "\n", "jaccard", "=", "tf", ".", "div", "(", "inter_vol", ",", "union_vol", ")", "#[batch_size, N]", "\n", "return", "jaccard", "#[batch_size, N]", "\n", "\n", "", "def", "scale_res", "(", "bbox", ")", ":", "\n", "        ", "h", "=", "bbox", "[", ":", ",", "2", "]", "-", "bbox", "[", ":", ",", "0", "]", "\n", "w", "=", "bbox", "[", ":", ",", "3", "]", "-", "bbox", "[", ":", ",", "1", "]", "\n", "h", "=", "h", "*", "net_shape", "[", "0", "]", "\n", "w", "=", "w", "*", "net_shape", "[", "1", "]", "\n", "scale", "=", "tf", ".", "sqrt", "(", "h", "*", "w", ")", "\n", "valid_mask", "=", "tf", ".", "logical_and", "(", "tf", ".", "greater", "(", "scale", ",", "low_th", ")", ",", "tf", ".", "less", "(", "scale", ",", "up_th", ")", ")", "\n", "valid_mask", "=", "tf", ".", "reshape", "(", "valid_mask", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "return", "valid_mask", "\n", "\n", "\n", "", "def", "condition", "(", "i", ",", "feat_scores", ",", "feat_2_scores", ",", "feat_labels", ",", "feat_labels2", ",", "feat_ymin2", ",", "feat_xmin2", ",", "feat_ymax2", ",", "feat_xmax2", ",", "feat_ymin", ",", "feat_xmin", ",", "feat_ymax", ",", "feat_xmax", ")", ":", "\n", "        ", "r", "=", "tf", ".", "less", "(", "i", ",", "max_bbox_num", ")", "\n", "return", "r", "\n", "\n", "\n", "", "def", "body", "(", "i", ",", "feat_scores", ",", "feat_2_scores", ",", "feat_labels", ",", "feat_labels2", ",", "feat_ymin2", ",", "feat_xmin2", ",", "feat_ymax2", ",", "feat_xmax2", ",", "feat_ymin", ",", "feat_xmin", ",", "feat_ymax", ",", "feat_xmax", ")", ":", "\n", "        ", "label", "=", "labels", "[", ":", ",", "i", "]", "# [batch_size]", "\n", "label", "=", "tf", ".", "reshape", "(", "label", ",", "[", "-", "1", ",", "1", "]", ")", "# [batch_size, 1]", "\n", "bbox", "=", "bboxes", "[", ":", ",", "i", ",", ":", "]", "# [batch_size, 4]", "\n", "jaccard", "=", "jaccard_with_anchors", "(", "bbox", ")", "# [batch_size, N]", "\n", "\n", "scale_valid", "=", "scale_res", "(", "bbox", ")", "\n", "\n", "mask1", "=", "tf", ".", "greater", "(", "jaccard", ",", "feat_scores", ")", "# [batch_size, N]", "\n", "mask1", "=", "tf", ".", "logical_and", "(", "scale_valid", ",", "mask1", ")", "\n", "mask1", "=", "tf", ".", "logical_and", "(", "mask1", ",", "label", "<", "num_classes", ")", "# [batch_size, N]", "\n", "\n", "mask2", "=", "tf", ".", "logical_and", "(", "tf", ".", "greater", "(", "jaccard", ",", "feat_2_scores", ")", ",", "tf", ".", "less", "(", "jaccard", ",", "feat_scores", ")", ")", "\n", "mask2", "=", "tf", ".", "logical_and", "(", "scale_valid", ",", "mask2", ")", "\n", "mask2", "=", "tf", ".", "logical_and", "(", "mask2", ",", "label", "<", "num_classes", ")", "\n", "\n", "imask1", "=", "tf", ".", "cast", "(", "mask1", ",", "tf", ".", "int64", ")", "# [batch_size, N]", "\n", "fmask1", "=", "tf", ".", "cast", "(", "mask1", ",", "dtype", ")", "# [batch_size, N]", "\n", "imask2", "=", "tf", ".", "cast", "(", "mask2", ",", "tf", ".", "int64", ")", "# [batch_size, N]", "\n", "fmask2", "=", "tf", ".", "cast", "(", "mask2", ",", "dtype", ")", "# [batch_size, N]", "\n", "\n", "# Update values using mask.", "\n", "feat_2_scores", "=", "fmask1", "*", "feat_scores", "+", "fmask2", "*", "jaccard", "+", "(", "1.", "-", "fmask1", ")", "*", "(", "1.", "-", "fmask2", ")", "*", "feat_2_scores", "\n", "feat_scores", "=", "tf", ".", "where", "(", "mask1", ",", "jaccard", ",", "feat_scores", ")", "# [batch_size, N]", "\n", "\n", "feat_labels2", "=", "imask1", "*", "feat_labels", "+", "imask2", "*", "label", "+", "(", "1", "-", "imask1", ")", "*", "(", "1", "-", "imask2", ")", "*", "feat_labels2", "\n", "feat_labels", "=", "imask1", "*", "label", "+", "(", "1", "-", "imask1", ")", "*", "feat_labels", "\n", "\n", "feat_ymin2", "=", "fmask1", "*", "feat_ymin", "+", "fmask2", "*", "tf", ".", "reshape", "(", "bbox", "[", ":", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ")", "+", "(", "1.", "-", "fmask1", ")", "*", "(", "1.", "-", "fmask2", ")", "*", "feat_ymin2", "# [batch_size, N]", "\n", "feat_xmin2", "=", "fmask1", "*", "feat_xmin", "+", "fmask2", "*", "tf", ".", "reshape", "(", "bbox", "[", ":", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ")", "+", "(", "1.", "-", "fmask1", ")", "*", "(", "1.", "-", "fmask2", ")", "*", "feat_xmin2", "# [batch_size, N]", "\n", "feat_ymax2", "=", "fmask1", "*", "feat_ymax", "+", "fmask2", "*", "tf", ".", "reshape", "(", "bbox", "[", ":", ",", "2", "]", ",", "[", "-", "1", ",", "1", "]", ")", "+", "(", "1.", "-", "fmask1", ")", "*", "(", "1.", "-", "fmask2", ")", "*", "feat_ymax2", "# [batch_size, N]", "\n", "feat_xmax2", "=", "fmask1", "*", "feat_xmax", "+", "fmask2", "*", "tf", ".", "reshape", "(", "bbox", "[", ":", ",", "3", "]", ",", "[", "-", "1", ",", "1", "]", ")", "+", "(", "1.", "-", "fmask1", ")", "*", "(", "1.", "-", "fmask2", ")", "*", "feat_xmax2", "# [batch_size, N]", "\n", "\n", "feat_ymin", "=", "fmask1", "*", "tf", ".", "reshape", "(", "bbox", "[", ":", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ")", "+", "(", "1", "-", "fmask1", ")", "*", "feat_ymin", "# [batch_size, N]", "\n", "feat_xmin", "=", "fmask1", "*", "tf", ".", "reshape", "(", "bbox", "[", ":", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ")", "+", "(", "1", "-", "fmask1", ")", "*", "feat_xmin", "# [batch_size, N]", "\n", "feat_ymax", "=", "fmask1", "*", "tf", ".", "reshape", "(", "bbox", "[", ":", ",", "2", "]", ",", "[", "-", "1", ",", "1", "]", ")", "+", "(", "1", "-", "fmask1", ")", "*", "feat_ymax", "# [batch_size, N]", "\n", "feat_xmax", "=", "fmask1", "*", "tf", ".", "reshape", "(", "bbox", "[", ":", ",", "3", "]", ",", "[", "-", "1", ",", "1", "]", ")", "+", "(", "1", "-", "fmask1", ")", "*", "feat_xmax", "# [batch_size, N]", "\n", "\n", "return", "[", "i", "+", "1", ",", "feat_scores", ",", "feat_2_scores", ",", "feat_labels", ",", "feat_labels2", ",", "feat_ymin2", ",", "feat_xmin2", ",", "feat_ymax2", ",", "feat_xmax2", ",", "feat_ymin", ",", "feat_xmin", ",", "feat_ymax", ",", "feat_xmax", "]", "\n", "\n", "", "i", "=", "0", "\n", "[", "i", ",", "feat_scores", ",", "feat_scores2", ",", "feat_labels", ",", "feat_labels2", ",", "\n", "feat_ymin2", ",", "feat_xmin2", ",", "feat_ymax2", ",", "feat_xmax2", ",", "\n", "feat_ymin", ",", "feat_xmin", ",", "feat_ymax", ",", "feat_xmax", "]", "=", "tf", ".", "while_loop", "(", "condition", ",", "body", ",", "\n", "[", "i", ",", "feat_scores", ",", "feat_scores2", ",", "feat_labels", ",", "feat_labels2", ",", "\n", "feat_ymin2", ",", "feat_xmin2", ",", "feat_ymax2", ",", "feat_xmax2", ",", "\n", "feat_ymin", ",", "feat_xmin", ",", "feat_ymax", ",", "feat_xmax", "]", ")", "\n", "\n", "feat_cy2", "=", "(", "feat_ymax2", "+", "feat_ymin2", ")", "/", "2.", "# [batch_size, N]", "\n", "feat_cx2", "=", "(", "feat_xmax2", "+", "feat_xmin2", ")", "/", "2.", "# [batch_size, N]", "\n", "feat_h2", "=", "feat_ymax2", "-", "feat_ymin2", "# [batch_size, N]", "\n", "feat_w2", "=", "feat_xmax2", "-", "feat_xmin2", "# [batch_size, N]", "\n", "\n", "feat_cy", "=", "(", "feat_ymax", "+", "feat_ymin", ")", "/", "2.", "# [batch_size, N]", "\n", "feat_cx", "=", "(", "feat_xmax", "+", "feat_xmin", ")", "/", "2.", "# [batch_size, N]", "\n", "feat_h", "=", "feat_ymax", "-", "feat_ymin", "# [batch_size, N]", "\n", "feat_w", "=", "feat_xmax", "-", "feat_xmin", "# [batch_size, N]", "\n", "\n", "# Encode features.", "\n", "yref", "=", "(", "ymin", "+", "ymax", ")", "/", "2.", "# [batch_size, N]", "\n", "xref", "=", "(", "xmin", "+", "xmax", ")", "/", "2.", "# [batch_size, N]", "\n", "href", "=", "ymax", "-", "ymin", "# [batch_size, N]", "\n", "wref", "=", "xmax", "-", "xmin", "# [batch_size, N]", "\n", "\n", "feat_cy", "=", "(", "feat_cy", "-", "yref", ")", "/", "href", "# [batch_size, N]", "\n", "feat_cx", "=", "(", "feat_cx", "-", "xref", ")", "/", "wref", "# [batch_size, N]", "\n", "feat_h", "=", "tf", ".", "log", "(", "feat_h", "/", "href", ")", "# [batch_size, N]", "\n", "feat_w", "=", "tf", ".", "log", "(", "feat_w", "/", "wref", ")", "# [batch_size, N]", "\n", "\n", "feat_cy2", "=", "(", "feat_cy2", "-", "yref", ")", "/", "href", "# [batch_size, N]", "\n", "feat_cx2", "=", "(", "feat_cx2", "-", "xref", ")", "/", "wref", "# [batch_size, N]", "\n", "feat_h2", "=", "tf", ".", "log", "(", "feat_h2", "/", "href", ")", "# [batch_size, N]", "\n", "feat_w2", "=", "tf", ".", "log", "(", "feat_w2", "/", "wref", ")", "# [batch_size, N]", "\n", "\n", "feat_location", "=", "tf", ".", "stack", "(", "[", "feat_ymin", ",", "feat_xmin", ",", "feat_ymax", ",", "feat_xmax", "]", ",", "axis", "=", "-", "1", ")", "\n", "feat_location2", "=", "tf", ".", "stack", "(", "[", "feat_ymin2", ",", "feat_xmin2", ",", "feat_ymax2", ",", "feat_xmax2", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "\n", "feat_delta", "=", "tf", ".", "stack", "(", "[", "feat_cx", ",", "feat_cy", ",", "feat_w", ",", "feat_h", "]", ",", "axis", "=", "-", "1", ")", "# [batch_size, N, 4]", "\n", "feat_delta2", "=", "tf", ".", "stack", "(", "[", "feat_cx2", ",", "feat_cy2", ",", "feat_w2", ",", "feat_h2", "]", ",", "axis", "=", "-", "1", ")", "# [batch_size, N, 4]", "\n", "\n", "feat_delta", "=", "tf", ".", "where", "(", "tf", ".", "is_nan", "(", "feat_delta", ")", ",", "tf", ".", "zeros_like", "(", "feat_delta", ")", ",", "feat_delta", ")", "\n", "feat_delta2", "=", "tf", ".", "where", "(", "tf", ".", "is_nan", "(", "feat_delta2", ")", ",", "tf", ".", "zeros_like", "(", "feat_delta2", ")", ",", "feat_delta2", ")", "\n", "\n", "return", "feat_labels", ",", "feat_delta", ",", "feat_scores", ",", "feat_location", ",", "feat_labels2", ",", "feat_delta2", ",", "feat_scores2", ",", "feat_location2", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.apply_random_distortion": [[515, 521], ["tensorflow.random_uniform", "tensorflow.random_uniform", "tensorflow.concat", "tf_ops.bboxes_decode"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.bboxes_decode"], ["", "def", "apply_random_distortion", "(", "boxes", ",", "batch_size", ",", "N", ",", "r_xy", ",", "r_wh", ")", ":", "\n", "    ", "rand_xy", "=", "tf", ".", "random_uniform", "(", "[", "batch_size", ",", "N", ",", "2", "]", ",", "minval", "=", "-", "1", "*", "r_xy", ",", "maxval", "=", "r_xy", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "rand_wh", "=", "tf", ".", "random_uniform", "(", "[", "batch_size", ",", "N", ",", "2", "]", ",", "minval", "=", "-", "1", "*", "r_wh", ",", "maxval", "=", "r_wh", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "rand_loc", "=", "tf", ".", "concat", "(", "(", "rand_xy", ",", "rand_wh", ")", ",", "axis", "=", "2", ")", "\n", "d_boxes", "=", "bboxes_decode", "(", "boxes", ",", "rand_loc", ")", "\n", "return", "d_boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.rpn_net": [[9, 32], ["tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.reshape", "tensorflow.reshape"], "function", ["None"], ["def", "rpn_net", "(", "inputs", ",", "anchor_num", ",", "batch_size", ",", "scope", "=", "'rpn'", ")", ":", "\n", "    ", "'''\n    :param inputs:\n    :param anchor_num:\n    :param batch_size:\n    :param scope:\n    :return: cls_pred: [batch_size, N, 2]\n    :return: cls_logits: [batch_size, N, 2]\n    :return: loc_pred: [batch_size, N, 4]\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "net", "=", "inputs", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "512", ",", "[", "3", ",", "3", "]", ",", "scope", "=", "'conv3x3'", ")", "\n", "\n", "num_cls_pre", "=", "anchor_num", "*", "2", "\n", "cls_pred", "=", "slim", ".", "conv2d", "(", "net", ",", "num_cls_pre", ",", "[", "1", ",", "1", "]", ",", "activation_fn", "=", "None", ",", "scope", "=", "'cls_pred'", ")", "\n", "\n", "num_loc_pre", "=", "anchor_num", "*", "4", "\n", "loc_pred", "=", "slim", ".", "conv2d", "(", "net", ",", "num_loc_pre", ",", "[", "1", ",", "1", "]", ",", "activation_fn", "=", "None", ",", "scope", "=", "'loc_pred'", ")", "\n", "\n", "cls_logits", "=", "tf", ".", "reshape", "(", "cls_pred", ",", "[", "batch_size", ",", "-", "1", ",", "2", "]", ")", "\n", "loc_pred", "=", "tf", ".", "reshape", "(", "loc_pred", ",", "[", "batch_size", ",", "-", "1", ",", "4", "]", ")", "\n", "return", "cls_logits", ",", "loc_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.rfcn_occ_asynchronous": [[34, 102], ["tensorflow.variable_scope", "enumerate", "nets.resnet_v1.FPN_resnet_50_v1", "nets_fpn.rpn_net", "tensorflow.stop_gradient", "tensorflow.stop_gradient", "nets.tf_ops.roi_select", "tensorflow.stop_gradient", "nets_fpn.score_net", "nets_fpn.score_net", "nets_fpn.score_net", "nets_fpn.score_net", "nets_fpn.score_net", "nets_fpn.score_net", "rpn_logit_list.append", "rpn_loc_list.append", "rois_selected_list.append", "score_map_list.append", "loc_map_list.append", "nms_map_list.append", "attention_map_loc_list.append", "attention_map_cls_list.append", "attention_map_nms_list.append", "nets.resnet_v1.FPN_resnet_101_v1", "tensorflow.nn.softmax", "nets.resnet_v1.FPN_resnet_50_v2", "nets.resnet_v1.FPN_resnet_101_v2", "ValueError"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.FPN_resnet_50_v1", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.rpn_net", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.tf_ops.roi_select", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.score_net", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.score_net", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.score_net", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.score_net", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.score_net", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.score_net", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.FPN_resnet_101_v1", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.FPN_resnet_50_v2", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.resnet_v1.FPN_resnet_101_v2"], ["", "", "def", "rfcn_occ_asynchronous", "(", "inputs", ",", "\n", "anchor_tensor", ":", "list", ",", "\n", "anchor_num", ":", "list", ",", "\n", "batch_size", ":", "int", ",", "\n", "num_classes", ":", "int", ",", "\n", "proposal_num", ":", "list", ",", "\n", "Ks", ":", "list", ",", "\n", "select_nms_th", ":", "float", ",", "\n", "net", ",", "\n", "scope", "=", "'rfcn_occ'", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'rfcn_occ'", ",", "[", "inputs", "]", ",", "reuse", "=", "None", ")", ":", "\n", "        ", "rpn_logit_list", "=", "[", "]", "\n", "rpn_loc_list", "=", "[", "]", "\n", "rois_selected_list", "=", "[", "]", "\n", "score_map_list", "=", "[", "]", "\n", "loc_map_list", "=", "[", "]", "\n", "nms_map_list", "=", "[", "]", "\n", "attention_map_loc_list", "=", "[", "]", "\n", "attention_map_cls_list", "=", "[", "]", "\n", "attention_map_nms_list", "=", "[", "]", "\n", "\n", "if", "net", "==", "'resnet_50_v1'", ":", "\n", "            ", "nets", "=", "resnet_v1", ".", "FPN_resnet_50_v1", "(", "inputs", ",", "prefix", "=", "scope", "+", "'/'", ",", "is_training", "=", "True", ")", "\n", "", "elif", "net", "==", "'resnet_101_v1'", ":", "\n", "            ", "nets", "=", "resnet_v1", ".", "FPN_resnet_101_v1", "(", "inputs", ",", "prefix", "=", "scope", "+", "'/'", ",", "is_training", "=", "True", ")", "\n", "", "elif", "net", "==", "'resnet_50_v2'", ":", "\n", "            ", "nets", "=", "resnet_v1", ".", "FPN_resnet_50_v2", "(", "inputs", ",", "prefix", "=", "scope", "+", "'/'", ",", "is_training", "=", "True", ")", "\n", "", "elif", "net", "==", "'resnet_101_v2'", ":", "\n", "            ", "nets", "=", "resnet_v1", ".", "FPN_resnet_101_v2", "(", "inputs", ",", "prefix", "=", "scope", "+", "'/'", ",", "is_training", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Invalid backbone!'", ")", "\n", "\n", "", "for", "i", ",", "net", "in", "enumerate", "(", "nets", ")", ":", "\n", "# rpn", "\n", "            ", "rpn_logits", ",", "rpn_loc", "=", "rpn_net", "(", "net", ",", "anchor_num", "[", "i", "]", ",", "batch_size", ",", "scope", "=", "'rpn_%d'", "%", "i", ")", "\n", "rpn_logits_stop", "=", "tf", ".", "stop_gradient", "(", "rpn_logits", ")", "\n", "rpn_loc_stop", "=", "tf", ".", "stop_gradient", "(", "rpn_loc", ")", "\n", "\n", "rpn_cls_score", "=", "tf", ".", "nn", ".", "softmax", "(", "rpn_logits_stop", ")", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "rois_selected", ",", "rois_score", "=", "tfo", ".", "roi_select", "(", "rpn_cls_score", ",", "rpn_loc_stop", ",", "anchor_tensor", "[", "i", "]", ",", "batch_size", ",", "\n", "proposal_num", "[", "i", "]", ",", "select_nms_th", ",", "with_score", "=", "True", ")", "\n", "rois_selected", "=", "tf", ".", "stop_gradient", "(", "rois_selected", ")", "\n", "\n", "# object detection", "\n", "score_map", "=", "score_net", "(", "net", ",", "num_classes", "*", "Ks", "[", "i", "]", "[", "0", "]", "*", "Ks", "[", "i", "]", "[", "1", "]", ",", "scope", "=", "'class_score_%d'", "%", "i", ")", "\n", "loc_map", "=", "score_net", "(", "net", ",", "4", "*", "Ks", "[", "i", "]", "[", "0", "]", "*", "Ks", "[", "i", "]", "[", "1", "]", ",", "scope", "=", "'loc_score_%d'", "%", "i", ")", "\n", "nms_map", "=", "score_net", "(", "net", ",", "4", "*", "Ks", "[", "i", "]", "[", "0", "]", "*", "Ks", "[", "i", "]", "[", "1", "]", ",", "scope", "=", "'nms_score_%d'", "%", "i", ")", "\n", "\n", "attention_map_loc", "=", "score_net", "(", "net", ",", "1", "*", "Ks", "[", "i", "]", "[", "0", "]", "*", "Ks", "[", "i", "]", "[", "1", "]", ",", "scope", "=", "'attention_map_loc_%d'", "%", "i", ")", "\n", "attention_map_cls", "=", "score_net", "(", "net", ",", "1", "*", "Ks", "[", "i", "]", "[", "0", "]", "*", "Ks", "[", "i", "]", "[", "1", "]", ",", "scope", "=", "'attention_map_cls_%d'", "%", "i", ")", "\n", "attention_map_nms", "=", "score_net", "(", "net", ",", "1", "*", "Ks", "[", "i", "]", "[", "0", "]", "*", "Ks", "[", "i", "]", "[", "1", "]", ",", "scope", "=", "'attention_map_nms_%d'", "%", "i", ")", "\n", "\n", "\n", "rpn_logit_list", ".", "append", "(", "rpn_logits", ")", "\n", "rpn_loc_list", ".", "append", "(", "rpn_loc", ")", "\n", "rois_selected_list", ".", "append", "(", "rois_selected", ")", "\n", "score_map_list", ".", "append", "(", "score_map", ")", "\n", "loc_map_list", ".", "append", "(", "loc_map", ")", "\n", "nms_map_list", ".", "append", "(", "nms_map", ")", "\n", "attention_map_loc_list", ".", "append", "(", "attention_map_loc", ")", "\n", "attention_map_cls_list", ".", "append", "(", "attention_map_cls", ")", "\n", "attention_map_nms_list", ".", "append", "(", "attention_map_nms", ")", "\n", "\n", "\n", "", "return", "[", "rpn_logit_list", ",", "rpn_loc_list", ",", "rois_selected_list", ",", "score_map_list", ",", "loc_map_list", ",", "nms_map_list", ",", "\n", "attention_map_loc_list", ",", "attention_map_cls_list", ",", "attention_map_nms_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.score_net": [[104, 112], ["tensorflow.variable_scope", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d", "tensorflow.conv2d"], "function", ["None"], ["", "", "def", "score_net", "(", "inputs", ",", "num_channels", ",", "scope", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "net", "=", "inputs", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "256", ",", "[", "3", ",", "3", "]", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "256", ",", "[", "3", ",", "3", "]", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "256", ",", "[", "3", ",", "3", "]", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_channels", ",", "[", "1", ",", "1", "]", ",", "activation_fn", "=", "None", ",", "scope", "=", "'score_pred'", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.nets.nets_fpn.roi_align_score": [[114, 160], ["tensorflow.name_scope", "tensorflow.stop_gradient", "range", "tensorflow.concat", "range", "tensorflow.reduce_mean", "tensorflow.stack", "range", "tensorflow.concat", "position_scores.append", "tensorflow.reduce_max", "tensorflow.expand_dims", "tensorflow.constant", "tensorflow.image.crop_and_resize", "tensorflow.reshape", "tensorflow.expand_dims", "batch_scores.append", "tensorflow.reduce_mean", "tensorflow.div", "tensorflow.div", "tensorflow.div", "tensorflow.div"], "function", ["None"], ["", "", "def", "roi_align_score", "(", "score_map", ",", "rois", ",", "K", ",", "num_class", ",", "batch_size", ",", "proposal_num", ",", "redu", "=", "'mean'", ",", "scope", "=", "'position_sensitive_roi_align'", ")", ":", "\n", "    ", "'''\n    :param score_map:  [batch_size, feat_shape[0], feat_shape[1], num_channels], num_channels = num_class * K^2\n    :param rois: [batch_size, proposal_num, 4]\n    :param K: K: (K0, K1)\n    :param num_class: int\n    :param batch_size: int\n    :param proposal_num: int\n    :param redu: string\n    :param scope: string\n    :return:\n    '''", "\n", "with", "tf", ".", "name_scope", "(", "scope", ")", ":", "\n", "        ", "rois", "=", "tf", ".", "stop_gradient", "(", "rois", ")", "\n", "k0", ",", "k1", "=", "K", "\n", "position_scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "k0", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "k1", ")", ":", "\n", "                ", "ymin", "=", "rois", "[", ":", ",", ":", ",", "0", "]", "+", "tf", ".", "div", "(", "(", "rois", "[", ":", ",", ":", ",", "2", "]", "-", "rois", "[", ":", ",", ":", ",", "0", "]", ")", ",", "k0", ")", "*", "i", "\n", "ymax", "=", "rois", "[", ":", ",", ":", ",", "0", "]", "+", "tf", ".", "div", "(", "(", "rois", "[", ":", ",", ":", ",", "2", "]", "-", "rois", "[", ":", ",", ":", ",", "0", "]", ")", ",", "k0", ")", "*", "(", "i", "+", "1.", ")", "\n", "xmin", "=", "rois", "[", ":", ",", ":", ",", "1", "]", "+", "tf", ".", "div", "(", "(", "rois", "[", ":", ",", ":", ",", "3", "]", "-", "rois", "[", ":", ",", ":", ",", "1", "]", ")", ",", "k1", ")", "*", "j", "\n", "xmax", "=", "rois", "[", ":", ",", ":", ",", "1", "]", "+", "tf", ".", "div", "(", "(", "rois", "[", ":", ",", ":", ",", "3", "]", "-", "rois", "[", ":", ",", ":", ",", "1", "]", ")", ",", "k1", ")", "*", "(", "j", "+", "1.", ")", "\n", "rois_k", "=", "tf", ".", "stack", "(", "[", "ymin", ",", "xmin", ",", "ymax", ",", "xmax", "]", ",", "axis", "=", "-", "1", ")", "#[batch_size, proposal_num, 4]", "\n", "map_k", "=", "score_map", "[", ":", ",", ":", ",", ":", ",", "(", "i", "*", "k1", "+", "j", ")", "*", "num_class", ":", "(", "i", "*", "k1", "+", "j", "+", "1", ")", "*", "num_class", "]", "#[batch_size, feat_shape[0], feat_shape[1], num_class]", "\n", "batch_scores", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "batch_rois", "=", "rois_k", "[", "b", ",", ":", ",", ":", "]", "#[proposal_num,4]", "\n", "batch_map", "=", "map_k", "[", "b", ",", ":", ",", ":", ",", ":", "]", "#[feat_shape[0], feat_shape[1], num_classes]", "\n", "batch_map", "=", "tf", ".", "expand_dims", "(", "batch_map", ",", "axis", "=", "0", ")", "#[1, feat_shape[0], feat_shape[1], num_classes]", "\n", "box_inds", "=", "tf", ".", "constant", "(", "[", "0", "]", "*", "proposal_num", ",", "dtype", "=", "tf", ".", "int32", ")", "#[proposal_num]", "\n", "roi_aligned", "=", "tf", ".", "image", ".", "crop_and_resize", "(", "batch_map", ",", "batch_rois", ",", "box_inds", ",", "(", "1", ",", "1", ")", ")", "#[proposal_num,1,1,num_classes]", "\n", "roi_aligned", "=", "tf", ".", "reshape", "(", "roi_aligned", ",", "[", "-", "1", ",", "num_class", ",", "1", "]", ")", "#[proposal_num, num_class, 1]", "\n", "roi_aligned", "=", "tf", ".", "expand_dims", "(", "roi_aligned", ",", "axis", "=", "0", ")", "#[1, proposal_num, num_class, 1]", "\n", "batch_scores", ".", "append", "(", "roi_aligned", ")", "\n", "", "position_score", "=", "tf", ".", "concat", "(", "batch_scores", ",", "axis", "=", "0", ")", "#[batch_size, proposal_num, num_class, 1]", "\n", "position_scores", ".", "append", "(", "position_score", ")", "\n", "", "", "logits", "=", "tf", ".", "concat", "(", "position_scores", ",", "axis", "=", "3", ")", "#[batch_size, proposal_num, num_class, 9]", "\n", "if", "redu", "==", "'mean'", ":", "\n", "            ", "logits", "=", "tf", ".", "reduce_mean", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "redu", "==", "'max'", ":", "\n", "            ", "logits", "=", "tf", ".", "reduce_max", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "", "elif", "redu", "==", "'none'", ":", "\n", "            ", "logits", "=", "logits", "\n", "", "else", ":", "\n", "            ", "logits", "=", "tf", ".", "reduce_mean", "(", "logits", ",", "axis", "=", "-", "1", ")", "\n", "", "return", "logits", "", "", "", ""]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.ROIPooling.test.test_his": [[21, 46], ["tensorflow.Session", "numpy.zeros", "tensorflow.constant", "print", "tensorflow.placeholder", "numpy.set_printoptions", "nets.ROIPooling.ROIPoolingWrapper.positionSensitiveRoiPooling_unnorm", "print", "tensorflow.reduce_sum", "tensorflow.gradients", "print", "print", "print", "tf.constant.get_shape().as_list", "sess.run", "sess.run", "tf.constant.get_shape", "sess.run"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.ROIPooling.ROIPoolingWrapper.positionSensitiveRoiPooling_unnorm", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run"], ["def", "test_his", "(", ")", ":", "\n", "\t", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "\t\t", "img", "=", "np", ".", "zeros", "(", "(", "1", ",", "8", ",", "8", ",", "9", ")", ",", "np", ".", "float32", ")", "\n", "boxes", "=", "tf", ".", "constant", "(", "[", "[", "0", ",", "0", ",", "2", "*", "16", ",", "5", "*", "16", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "print", "(", "boxes", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "yOffset", "=", "0", "\n", "xOffset", "=", "0", "\n", "chOffset", "=", "0", "\n", "img", "[", "0", ",", "yOffset", "+", "0", ":", "yOffset", "+", "1", ",", "xOffset", "+", "0", ":", "xOffset", "+", "1", ",", "chOffset", "+", "0", ":", "chOffset", "+", "1", "]", "=", "1", ";", "\n", "#img[:,:,:,:]=1", "\n", "p", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "img", ".", "shape", ")", "\n", "\n", "np", ".", "set_printoptions", "(", "threshold", "=", "5000", ",", "linewidth", "=", "150", ")", "\n", "\n", "pooled", "=", "positionSensitiveRoiPooling_unnorm", "(", "p", ",", "boxes", ")", "\n", "print", "(", "sess", ".", "run", "(", "pooled", ",", "feed_dict", "=", "{", "p", ":", "img", "}", ")", ")", "\n", "\n", "loss", "=", "tf", ".", "reduce_sum", "(", "pooled", ")", "\n", "\n", "g", "=", "tf", ".", "gradients", "(", "loss", ",", "p", ")", "\n", "\n", "print", "(", "img", ")", "\n", "print", "(", "sess", ".", "run", "(", "g", ",", "feed_dict", "=", "{", "p", ":", "img", "}", ")", "[", "0", "]", ")", "\n", "print", "(", "sess", ".", "run", "(", "g", ",", "feed_dict", "=", "{", "p", ":", "img", "}", ")", "[", "0", "]", "[", ":", ",", ":", ",", ":", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.ROIPooling.test.test_mine": [[49, 63], ["tensorflow.Session", "numpy.arange().reshape", "numpy.repeat", "tensorflow.constant", "tensorflow.constant", "tensorflow.placeholder", "nets.ROIPooling.ROIPoolingWrapper.positionSensitiveRoiPooling_norm", "print", "print", "sess.run", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.ROIPooling.ROIPoolingWrapper.positionSensitiveRoiPooling_norm", "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.inference.inference_nms.Tester.run"], ["", "", "def", "test_mine", "(", ")", ":", "\n", "\t", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "\t\t", "img", "=", "np", ".", "arange", "(", "81", ")", ".", "reshape", "(", "1", ",", "9", ",", "9", ",", "1", ")", "\n", "img", "=", "np", ".", "repeat", "(", "img", ",", "12", ",", "axis", "=", "3", ")", "\n", "\n", "#boxes = tf.constant([[2./9-0.001, 2./9-0.001, 7./9-0.001, 4./9-0.001],[3./9, 3./9, 6./9, 7./9]], dtype=tf.float32)", "\n", "#[x, y, x, y]", "\n", "boxes", "=", "tf", ".", "constant", "(", "[", "[", "2.", "/", "9", "-", "0.001", ",", "1.", "/", "9", "-", "0.001", ",", "4.", "/", "9", "-", "0.001", ",", "4.", "/", "9", "-", "0.001", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "boxes", "=", "tf", ".", "constant", "(", "[", "[", "2.", "/", "9", "-", "0.001", ",", "1.", "/", "9", "-", "0.001", ",", "2.", "/", "9", "-", "0.002", ",", "1.", "/", "9", "-", "0.002", "]", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "p", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "img", ".", "shape", ")", "\n", "pooled", "=", "positionSensitiveRoiPooling_norm", "(", "p", ",", "boxes", ",", "num_channel", "=", "1", ",", "feature_shape", "=", "(", "9", ",", "9", ")", ",", "K", "=", "(", "4", ",", "3", ")", ")", "\n", "_pooled", "=", "sess", ".", "run", "(", "[", "pooled", "]", ",", "feed_dict", "=", "{", "p", ":", "img", "}", ")", "[", "0", "]", "\n", "print", "(", "_pooled", ".", "shape", ")", "\n", "print", "(", "_pooled", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.ROIPooling.ROIPoolingWrapper.positionSensitiveRoiPooling_unnorm": [[25, 43], ["tensorflow.name_scope", "roiPoolingModule.pos_roi_pooling", "roiPoolingModule.pos_roi_pooling.set_shape", "tf.transpose.get_shape().as_list", "tensorflow.name_scope", "tensorflow.stop_gradient", "tensorflow.cast", "tensorflow.name_scope", "tensorflow.transpose", "tf.transpose.get_shape", "int"], "function", ["None"], ["", "def", "positionSensitiveRoiPooling_unnorm", "(", "features", ",", "boxes", ",", "offset", "=", "[", "0", ",", "0", "]", ",", "downsample", "=", "16", ",", "roiSize", "=", "3", ")", ":", "\n", "\t", "with", "tf", ".", "name_scope", "(", "\"positionSensitiveRoiPooling\"", ")", ":", "\n", "\t\t", "featureCount", "=", "features", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"imgCoordinatesToHeatmapCoordinates\"", ")", ":", "\n", "\t\t\t", "boxes", "=", "tf", ".", "stop_gradient", "(", "boxes", ")", "\n", "boxes", "=", "boxes", "-", "[", "offset", "[", "1", "]", ",", "offset", "[", "0", "]", ",", "offset", "[", "1", "]", "-", "downsample", "+", "0.1", ",", "offset", "[", "0", "]", "-", "downsample", "+", "0.1", "]", "\n", "boxes", "=", "boxes", "/", "downsample", "\n", "boxes", "=", "tf", ".", "cast", "(", "boxes", ",", "tf", ".", "int32", ")", "\n", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"NHWC2NCHW\"", ")", ":", "\n", "\t\t\t", "features", "=", "tf", ".", "transpose", "(", "features", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "", "res", "=", "roiPoolingModule", ".", "pos_roi_pooling", "(", "features", ",", "boxes", ",", "[", "roiSize", ",", "roiSize", "]", ")", "\n", "\n", "res", ".", "set_shape", "(", "[", "None", ",", "roiSize", ",", "roiSize", ",", "None", "if", "featureCount", "is", "None", "else", "int", "(", "featureCount", "/", "(", "roiSize", "*", "roiSize", ")", ")", "]", ")", "\n", "return", "res", ",", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.ROIPooling.ROIPoolingWrapper.positionSensitiveRoiPooling_norm": [[45, 67], ["tensorflow.name_scope", "roiPoolingModule.pos_roi_pooling", "tf.transpose.set_shape", "tensorflow.reshape", "tensorflow.transpose", "tf.transpose.get_shape().as_list", "tensorflow.name_scope", "tensorflow.stop_gradient", "tensorflow.cast", "tensorflow.name_scope", "tensorflow.transpose", "tf.transpose.get_shape", "int"], "function", ["None"], ["", "", "def", "positionSensitiveRoiPooling_norm", "(", "features", ",", "boxes", ",", "num_channel", ",", "feature_shape", ",", "K", "=", "(", "3", ",", "3", ")", ")", ":", "\n", "\t", "with", "tf", ".", "name_scope", "(", "\"positionSensitiveRoiPooling\"", ")", ":", "\n", "\t\t", "featureCount", "=", "features", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "h", ",", "w", "=", "feature_shape", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"imgCoordinatesToHeatmapCoordinates\"", ")", ":", "\n", "\t\t\t", "boxes", "=", "tf", ".", "stop_gradient", "(", "boxes", ")", "\n", "# first x, then y", "\n", "boxes_extend", "=", "boxes", "+", "[", "[", "-", "0.25", "/", "w", ",", "-", "0.25", "/", "h", ",", "0.25", "/", "w", ",", "0.25", "/", "h", "]", "]", "\n", "boxes_crop", "=", "boxes_extend", "*", "[", "[", "w", ",", "h", ",", "w", ",", "h", "]", "]", "\n", "boxes_crop", "=", "tf", ".", "cast", "(", "boxes_crop", ",", "tf", ".", "int32", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"NHWC2NCHW\"", ")", ":", "\n", "\t\t\t", "features", "=", "tf", ".", "transpose", "(", "features", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "", "res", "=", "roiPoolingModule", ".", "pos_roi_pooling", "(", "features", ",", "boxes_crop", ",", "[", "K", "[", "0", "]", ",", "K", "[", "1", "]", "]", ")", "\n", "\n", "res", ".", "set_shape", "(", "\n", "[", "None", ",", "K", "[", "0", "]", ",", "K", "[", "1", "]", ",", "None", "if", "featureCount", "is", "None", "else", "int", "(", "featureCount", "/", "(", "K", "[", "0", "]", "*", "K", "[", "1", "]", ")", ")", "]", ")", "\n", "res", "=", "tf", ".", "reshape", "(", "res", ",", "[", "-", "1", ",", "K", "[", "0", "]", "*", "K", "[", "1", "]", ",", "num_channel", "]", ")", "\n", "res", "=", "tf", ".", "transpose", "(", "res", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.ROIPooling.ROIPoolingWrapper._pos_roi_pooling_grad": [[69, 73], ["tensorflow.python.framework.ops.RegisterGradient", "roiPoolingModule.pos_roi_pooling_grad", "tensorflow.shape"], "function", ["None"], ["", "", "@", "ops", ".", "RegisterGradient", "(", "\"PosRoiPooling\"", ")", "\n", "def", "_pos_roi_pooling_grad", "(", "op", ",", "grad", ")", ":", "\n", "\t", "g_features", "=", "roiPoolingModule", ".", "pos_roi_pooling_grad", "(", "grad", ",", "tf", ".", "shape", "(", "op", ".", "inputs", "[", "0", "]", ")", ",", "op", ".", "inputs", "[", "1", "]", ",", "op", ".", "inputs", "[", "2", "]", ")", "\n", "return", "g_features", ",", "None", ",", "None", "\n", "", ""]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.visulization.vis_utils.rand_color": [[9, 11], ["random.randint", "random.randint", "random.randint"], "function", ["None"], ["def", "rand_color", "(", ")", ":", "\n", "    ", "return", "(", "random", ".", "randint", "(", "0", ",", "255", ")", ",", "random", ".", "randint", "(", "0", ",", "255", ")", ",", "random", ".", "randint", "(", "0", ",", "255", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.visulization.vis_utils.draw_bounding_box_on_image": [[13, 49], ["PIL.Draw", "PIL.truetype", "range", "len", "ImageDraw.Draw.line", "ImageFont.truetype.getsize", "numpy.ceil", "ImageDraw.Draw.rectangle", "ImageFont.truetype.getsize", "ImageDraw.Draw.text"], "function", ["None"], ["", "def", "draw_bounding_box_on_image", "(", "image", ",", "\n", "boxes", ",", "\n", "str_list", ",", "\n", "colors", "=", "None", ",", "\n", "thickness", "=", "2", ",", "\n", "font_file", "=", "'visulization/RobotoMono-MediumItalic.ttf'", ")", ":", "\n", "#default_color = (0, 250, 154)", "\n", "    ", "default_color", "=", "(", "255", ",", "165", ",", "0", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "image", ")", "\n", "font", "=", "ImageFont", ".", "truetype", "(", "font_file", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "boxes", ")", ")", ":", "\n", "        ", "if", "colors", "is", "not", "None", ":", "\n", "            ", "color", "=", "colors", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "color", "=", "default_color", "\n", "", "ymin", ",", "xmin", ",", "ymax", ",", "xmax", "=", "boxes", "[", "i", "]", "\n", "(", "left", ",", "right", ",", "top", ",", "bottom", ")", "=", "(", "xmin", ",", "xmax", ",", "ymin", ",", "ymax", ")", "\n", "draw", ".", "line", "(", "[", "(", "left", ",", "top", ")", ",", "(", "left", ",", "bottom", ")", ",", "(", "right", ",", "bottom", ")", ",", "\n", "(", "right", ",", "top", ")", ",", "(", "left", ",", "top", ")", "]", ",", "width", "=", "thickness", ",", "fill", "=", "color", ")", "\n", "\n", "dstr", "=", "str_list", "[", "i", "]", "\n", "\n", "display_str_heights", "=", "font", ".", "getsize", "(", "dstr", ")", "[", "1", "]", "\n", "total_display_str_height", "=", "(", "1", "+", "2", "*", "0.05", ")", "*", "display_str_heights", "\n", "\n", "if", "top", ">", "total_display_str_height", ":", "\n", "            ", "text_bottom", "=", "top", "\n", "", "else", ":", "\n", "            ", "text_bottom", "=", "bottom", "+", "total_display_str_height", "\n", "\n", "", "text_width", ",", "text_height", "=", "font", ".", "getsize", "(", "dstr", ")", "\n", "margin", "=", "np", ".", "ceil", "(", "0.1", "*", "text_height", ")", "\n", "draw", ".", "rectangle", "(", "[", "(", "left", ",", "text_bottom", "-", "text_height", "-", "2", "*", "margin", ")", ",", "(", "left", "+", "text_width", "+", "3", "*", "margin", ",", "text_bottom", ")", "]", ",", "fill", "=", "color", ")", "\n", "if", "not", "dstr", "==", "''", ":", "\n", "            ", "draw", ".", "text", "(", "(", "left", "+", "margin", ",", "text_bottom", "-", "text_height", "-", "margin", ")", ",", "dstr", ",", "fill", "=", "'black'", ",", "font", "=", "font", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.visulization.vis_utils.draw_label_on_image": [[51, 59], ["PIL.Draw", "PIL.truetype", "ImageFont.truetype.getsize", "numpy.ceil", "ImageDraw.Draw.rectangle", "ImageDraw.Draw.text"], "function", ["None"], ["", "", "", "def", "draw_label_on_image", "(", "image", ",", "label_str", ",", "pos", ",", "size", ",", "color", ",", "font_file", "=", "'visulization/RobotoMono-MediumItalic.ttf'", ")", ":", "\n", "    ", "draw", "=", "ImageDraw", ".", "Draw", "(", "image", ")", "\n", "font", "=", "ImageFont", ".", "truetype", "(", "font_file", ",", "size", "=", "size", ")", "\n", "left", ",", "bottom", "=", "pos", "\n", "text_width", ",", "text_height", "=", "font", ".", "getsize", "(", "label_str", ")", "\n", "margin", "=", "np", ".", "ceil", "(", "0.1", "*", "text_height", ")", "\n", "draw", ".", "rectangle", "(", "[", "(", "left", ",", "bottom", "-", "text_height", "-", "2", "*", "margin", ")", ",", "(", "left", "+", "text_width", "+", "3", "*", "margin", ",", "bottom", ")", "]", ",", "fill", "=", "color", ")", "\n", "draw", ".", "text", "(", "(", "left", "+", "margin", ",", "bottom", "-", "text_height", "-", "margin", ")", ",", "label_str", ",", "fill", "=", "'black'", ",", "font", "=", "font", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.visulization.vis_utils.draw_label_cv2": [[60, 71], ["cv2.cvtColor", "PIL.fromarray", "vis_utils.draw_label_on_image", "cv2.cvtColor", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.visulization.vis_utils.draw_label_on_image"], ["", "def", "draw_label_cv2", "(", "cv2_img", ",", "label", ",", "pos", ",", "size", ",", "color", "=", "None", ")", ":", "\n", "    ", "if", "color", "==", "None", ":", "\n", "        ", "_color", "=", "(", "255", ",", "165", ",", "0", ")", "\n", "", "else", ":", "\n", "        ", "_color", "=", "color", "\n", "\n", "", "cv2_rgb", "=", "cv2", ".", "cvtColor", "(", "cv2_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "cv2_rgb", ")", "\n", "draw_label_on_image", "(", "image", ",", "label", ",", "pos", ",", "size", ",", "_color", ")", "\n", "cv2_bgr", "=", "cv2", ".", "cvtColor", "(", "np", ".", "array", "(", "image", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "return", "cv2_bgr", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.visulization.vis_utils.draw_from_cv2": [[72, 78], ["cv2.cvtColor", "PIL.fromarray", "vis_utils.draw_bounding_box_on_image", "cv2.cvtColor", "numpy.array"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.visulization.vis_utils.draw_bounding_box_on_image"], ["", "def", "draw_from_cv2", "(", "cv2_img", ",", "boxes", ",", "strs", ",", "colors", "=", "None", ",", "thickness", "=", "2", ")", ":", "\n", "    ", "cv2_rgb", "=", "cv2", ".", "cvtColor", "(", "cv2_img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "cv2_rgb", ")", "\n", "draw_bounding_box_on_image", "(", "image", ",", "boxes", ",", "strs", ",", "colors", ",", "thickness", ")", "\n", "cv2_bgr", "=", "cv2", ".", "cvtColor", "(", "np", ".", "array", "(", "image", ")", ",", "cv2", ".", "COLOR_RGB2BGR", ")", "\n", "return", "cv2_bgr", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.visulization.vis_utils.draw_box_img": [[79, 92], ["PIL.open", "len", "range", "vis_utils.draw_bounding_box_on_image", "strs.append", "Image.open.show", "Image.open.save"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.visulization.vis_utils.draw_bounding_box_on_image"], ["", "def", "draw_box_img", "(", "img_path", ",", "boxes", ",", "scores", ",", "classes", ",", "colors", "=", "None", ",", "output_path", "=", "None", ",", "show", "=", "False", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "N", "=", "len", "(", "scores", ")", "\n", "strs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "c", "=", "classes", "[", "i", "]", "\n", "score", "=", "scores", "[", "i", "]", "\n", "strs", ".", "append", "(", "'%s'", "%", "(", "c", ")", ")", "\n", "", "draw_bounding_box_on_image", "(", "img", ",", "boxes", ",", "strs", ",", "colors", ")", "\n", "if", "show", ":", "\n", "        ", "img", ".", "show", "(", ")", "\n", "", "if", "output_path", "is", "not", "None", ":", "\n", "        ", "img", ".", "save", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.visulization.vis_utils.draw_without_str": [[96, 105], ["PIL.open", "len", "vis_utils.draw_bounding_box_on_image", "Image.open.show", "Image.open.save", "range"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.visulization.vis_utils.draw_bounding_box_on_image"], ["", "", "def", "draw_without_str", "(", "img_path", ",", "boxes", ",", "colors", "=", "None", ",", "output_path", "=", "None", ",", "show", "=", "False", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "img_path", ")", "\n", "N", "=", "len", "(", "boxes", ")", "\n", "strs", "=", "[", "''", "for", "_", "in", "range", "(", "N", ")", "]", "\n", "draw_bounding_box_on_image", "(", "img", ",", "boxes", ",", "strs", ",", "colors", ")", "\n", "if", "show", ":", "\n", "        ", "img", ".", "show", "(", ")", "\n", "", "if", "output_path", "is", "not", "None", ":", "\n", "        ", "img", ".", "save", "(", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.visulization.vis_utils.draw_test": [[109, 130], ["open", "open.readlines", "vis_utils.draw_box_img", "line.strip().split.strip().split", "int", "int", "int", "int", "float", "classes.append", "bboxes.append", "scores.append", "line.strip().split.strip", "len", "len"], "function", ["home.repos.pwc.inspect_result.ChenhongyiYang_SG-NMS.visulization.vis_utils.draw_box_img"], ["", "", "def", "draw_test", "(", ")", ":", "\n", "    ", "f", "=", "open", "(", "'/Users/yangchenhongyi/Documents/TEMP/temp_result/006379.txt'", ",", "'r'", ")", "\n", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "bboxes", "=", "[", "]", "\n", "classes", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "line", ")", "==", "6", "or", "len", "(", "line", ")", "==", "7", ":", "\n", "            ", "c", "=", "'Car'", "\n", "ymin", "=", "int", "(", "line", "[", "1", "]", ")", "\n", "xmin", "=", "int", "(", "line", "[", "2", "]", ")", "\n", "ymax", "=", "int", "(", "line", "[", "3", "]", ")", "\n", "xmax", "=", "int", "(", "line", "[", "4", "]", ")", "\n", "score", "=", "float", "(", "line", "[", "5", "]", ")", "\n", "\n", "classes", ".", "append", "(", "c", ")", "\n", "bboxes", ".", "append", "(", "[", "ymin", ",", "xmin", ",", "ymax", ",", "xmax", "]", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "", "", "img_path", "=", "'/Users/yangchenhongyi/Downloads/kitti_eval/eval_img/006379.png'", "\n", "draw_box_img", "(", "img_path", ",", "bboxes", ",", "scores", ",", "classes", ",", "show", "=", "True", ")", "\n", "\n"]]}