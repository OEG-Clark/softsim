{"home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.PreActBasicBlock.__init__": [[91, 101], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_cifar.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar.conv3x3"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.conv3x3", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "noise_coef", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreActBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "noise_coef", "=", "noise_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.PreActBasicBlock.forward": [[102, 122], ["EnResNet.PreActBasicBlock.bn1", "EnResNet.PreActBasicBlock.relu", "EnResNet.PreActBasicBlock.conv1", "EnResNet.PreActBasicBlock.bn2", "EnResNet.PreActBasicBlock.relu", "EnResNet.PreActBasicBlock.conv2", "EnResNet.PreActBasicBlock.downsample", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "\n", "if", "self", ".", "noise_coef", "is", "not", "None", ":", "# Test Variable and rand", "\n", "#return out + self.noise_coef * torch.std(out) + Variable(torch.randn(out.shape).cuda())", "\n", "            ", "return", "out", "+", "self", ".", "noise_coef", "*", "torch", ".", "std", "(", "out", ")", "*", "torch", ".", "randn_like", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.PreActBottleneck.__init__": [[127, 139], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "noise_coef", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "noise_coef", "=", "noise_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.PreActBottleneck.forward": [[140, 165], ["EnResNet.PreActBottleneck.bn1", "EnResNet.PreActBottleneck.relu", "EnResNet.PreActBottleneck.conv1", "EnResNet.PreActBottleneck.bn2", "EnResNet.PreActBottleneck.relu", "EnResNet.PreActBottleneck.conv2", "EnResNet.PreActBottleneck.bn3", "EnResNet.PreActBottleneck.relu", "EnResNet.PreActBottleneck.conv3", "EnResNet.PreActBottleneck.downsample", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "if", "self", ".", "noise_coef", "is", "not", "None", ":", "\n", "#return out + self.noise_coef * torch.std(out) * Variable(torch.randn(out.shape).cuda())", "\n", "            ", "return", "out", "+", "self", ".", "noise_coef", "*", "torch", ".", "std", "(", "out", ")", "*", "torch", ".", "randn_like", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.PreAct_ResNet_Cifar.__init__": [[168, 190], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "EnResNet.PreAct_ResNet_Cifar._make_layer", "EnResNet.PreAct_ResNet_Cifar._make_layer", "EnResNet.PreAct_ResNet_Cifar._make_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "EnResNet.PreAct_ResNet_Cifar.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "noise_coef", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreAct_ResNet_Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "#self.conv1 = nn.Conv2d(3, 16, kernel_size=3, stride=1, padding=1, bias=False)", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ",", "noise_coef", "=", "noise_coef", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "noise_coef", "=", "noise_coef", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "noise_coef", "=", "noise_coef", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "64", "*", "block", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "#self.loss = nn.CrossEntropyLoss()", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.PreAct_ResNet_Cifar._make_layer": [[191, 204], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "noise_coef", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "noise_coef", "=", "noise_coef", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "noise_coef", "=", "noise_coef", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.PreAct_ResNet_Cifar.forward": [[206, 223], ["EnResNet.PreAct_ResNet_Cifar.conv1", "EnResNet.PreAct_ResNet_Cifar.layer1", "EnResNet.PreAct_ResNet_Cifar.layer2", "EnResNet.PreAct_ResNet_Cifar.layer3", "EnResNet.PreAct_ResNet_Cifar.bn", "EnResNet.PreAct_ResNet_Cifar.relu", "EnResNet.PreAct_ResNet_Cifar.avgpool", "EnResNet.PreAct_ResNet_Cifar.view", "EnResNet.PreAct_ResNet_Cifar.fc", "EnResNet.PreAct_ResNet_Cifar.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "#loss = self.loss(x, target)", "\n", "\n", "#return x, loss", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__": [[226, 231], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "EnResNet.PreAct_ResNet_Cifar", "range"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "num_ensembles", "=", "3", ",", "noise_coef", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "Ensemble_PreAct_ResNet_Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_ensembles", "=", "num_ensembles", "\n", "# for emsemble resnet we should use Noisy Blocks.", "\n", "self", ".", "ensemble", "=", "nn", ".", "ModuleList", "(", "[", "PreAct_ResNet_Cifar", "(", "block", ",", "layers", ",", "num_classes", "=", "num_classes", ",", "noise_coef", "=", "noise_coef", ")", "for", "i", "in", "range", "(", "num_ensembles", ")", "]", ")", "\n", "# self.ensemble = nn.ModuleList([ResNet_Cifar(block, layers, num_classes=num_classes) for i in range(num_ensembles)])", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.Ensemble_PreAct_ResNet_Cifar.forward": [[233, 242], ["net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#def forward(self, x, target):", "\n", "        ", "ret", "=", "0.0", "\n", "for", "net", "in", "self", ".", "ensemble", ":", "\n", "            ", "ret", "+=", "net", "(", "x", ")", "\n", "#ret += net(x, target)", "\n", "", "ret", "/=", "self", ".", "num_ensembles", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.AttackPGD.__init__": [[254, 262], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__"], ["def", "__init__", "(", "self", ",", "basic_net", ",", "config", ")", ":", "\n", "        ", "super", "(", "AttackPGD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "basic_net", "=", "basic_net", "\n", "self", ".", "rand", "=", "config", "[", "'random_start'", "]", "\n", "self", ".", "step_size", "=", "config", "[", "'step_size'", "]", "\n", "self", ".", "epsilon", "=", "config", "[", "'epsilon'", "]", "\n", "self", ".", "num_steps", "=", "config", "[", "'num_steps'", "]", "\n", "assert", "config", "[", "'loss_func'", "]", "==", "'xent'", ",", "'Only xent supported for now.'", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.AttackPGD.forward": [[263, 278], ["range", "torch.clamp.requires_grad_", "torch.clamp.requires_grad_", "torch.clamp.requires_grad_", "torch.clamp.requires_grad_", "torch.clamp.requires_grad_", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "EnResNet.AttackPGD.basic_net", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.zeros_like().uniform_", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "EnResNet.AttackPGD.basic_net", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.clamp.detach", "torch.clamp.detach", "torch.clamp.detach", "torch.clamp.detach", "torch.clamp.detach", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.sign", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "grad.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ")", ":", "\n", "        ", "x", "=", "inputs", "\n", "if", "self", ".", "rand", ":", "\n", "            ", "x", "=", "x", "+", "torch", ".", "zeros_like", "(", "x", ")", ".", "uniform_", "(", "-", "self", ".", "epsilon", ",", "self", ".", "epsilon", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_steps", ")", ":", "# iFGSM attack", "\n", "            ", "x", ".", "requires_grad_", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "logits", "=", "self", ".", "basic_net", "(", "x", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ",", "size_average", "=", "False", ")", "\n", "", "grad", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "[", "x", "]", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "detach", "(", ")", "+", "self", ".", "step_size", "*", "torch", ".", "sign", "(", "grad", ".", "detach", "(", ")", ")", "\n", "x", "=", "torch", ".", "min", "(", "torch", ".", "max", "(", "x", ",", "inputs", "-", "self", ".", "epsilon", ")", ",", "inputs", "+", "self", ".", "epsilon", ")", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "0", ",", "1", ")", "\n", "\n", "", "return", "self", ".", "basic_net", "(", "x", ")", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.get_model2": [[46, 79], ["torch.SGD", "torch.CrossEntropyLoss().cuda", "model.cuda.cuda", "model.cuda.named_parameters", "model.cuda.named_parameters", "model.cuda.named_parameters", "torch.CrossEntropyLoss"], "function", ["None"], ["def", "get_model2", "(", "model", ",", "learning_rate", "=", "1e-3", ",", "weight_decay", "=", "1e-4", ")", ":", "\n", "\n", "# set the first layer not trainable", "\n", "# model.features.conv0.weight.requires_grad = False", "\n", "\n", "# all fc layers", "\n", "    ", "weights", "=", "[", "\n", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "'weight'", "in", "n", "and", "'conv'", "not", "in", "n", "\n", "]", "\n", "\n", "# all conv layers", "\n", "weights_to_be_quantized", "=", "[", "\n", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "\n", "# if 'conv' in n and 'conv0' not in n", "\n", "if", "'conv'", "in", "n", "and", "'weight'", "in", "n", "\n", "]", "\n", "\n", "biases", "=", "[", "\n", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "'bias'", "in", "n", "\n", "]", "\n", "\n", "params", "=", "[", "\n", "{", "'params'", ":", "weights", ",", "'weight_decay'", ":", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "weights_to_be_quantized", ",", "'weight_decay'", ":", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "biases", ",", "'weight_decay'", ":", "weight_decay", "}", "\n", "]", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "learning_rate", ",", "momentum", "=", "0.9", ")", "\n", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "# move the model to gpu", "\n", "return", "model", ",", "loss", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.conv3x3": [[81, 86], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    3x3 convolution with padding\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.en_preactresnet20_cifar": [[244, 248], ["EnResNet.Ensemble_PreAct_ResNet_Cifar"], "function", ["None"], ["", "", "def", "en_preactresnet20_cifar", "(", "**", "kwargs", ")", ":", "\n", "#model = Ensemble_PreAct_ResNet_Cifar(PreActBasicBlock, [3, 3, 3], **kwargs) # 20", "\n", "    ", "model", "=", "Ensemble_PreAct_ResNet_Cifar", "(", "PreActBasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ",", "**", "kwargs", ")", "# 110", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.quantize_bw": [[279, 295], ["kernel.abs().mean", "kernel.sign().float", "kernel.abs", "kernel.sign"], "function", ["None"], ["", "", "def", "quantize_bw", "(", "kernel", ")", ":", "\n", "    ", "\"\"\"\n    binary quantization\n    Return quantized weights of a layer.\n    \"\"\"", "\n", "delta", "=", "kernel", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "sign", "=", "kernel", ".", "sign", "(", ")", ".", "float", "(", ")", "\n", "\n", "#var=torch.std(kernel.abs())", "\n", "#delta=torch.clamp(kernel.abs(),0.,delta+var).mean()", "\n", "#mu=kernel.mean()", "\n", "#b=(kernel-mu.expand(kernel.size())).abs().mean()", "\n", "#delta=torch.clamp(kernel.abs(),0.,2.83*b.data).mean()", "\n", "\n", "\n", "return", "sign", "*", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.quantize_tnn": [[296, 304], ["kernel.abs", "min", "kernel.abs.ge().float", "kernel.sign().float", "kernel.abs.mean", "kernel.abs.ge", "kernel.sign"], "function", ["None"], ["", "def", "quantize_tnn", "(", "kernel", ")", ":", "\n", "    ", "data", "=", "kernel", ".", "abs", "(", ")", "\n", "delta", "=", "0.7", "*", "data", ".", "mean", "(", ")", "\n", "delta", "=", "min", "(", "delta", ",", "100", ")", "\n", "index", "=", "data", ".", "ge", "(", "delta", ")", ".", "float", "(", ")", "\n", "sign", "=", "kernel", ".", "sign", "(", ")", ".", "float", "(", ")", "\n", "scale", "=", "(", "data", "*", "index", ")", ".", "mean", "(", ")", "\n", "return", "scale", "*", "index", "*", "sign", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.EnResNet.quantize_fbit": [[306, 321], ["kernel.abs", "min", "kernel.sign().float", "range", "kernel.abs.max", "kernel.sign", "kernel.abs.gt().float", "kernel.abs.gt().float", "kernel.abs.le().float", "kernel.abs.gt", "kernel.abs.gt", "kernel.abs.le"], "function", ["None"], ["", "def", "quantize_fbit", "(", "kernel", ")", ":", "\n", "\n", "    ", "data", "=", "kernel", ".", "abs", "(", ")", "\n", "delta", "=", "data", ".", "max", "(", ")", "/", "15", "\n", "delta", "=", "min", "(", "delta", ",", "10.0", ")", "\n", "sign", "=", "kernel", ".", "sign", "(", ")", ".", "float", "(", ")", "\n", "q", "=", "0.0", "*", "data", "\n", "for", "i", "in", "range", "(", "3", ",", "17", ",", "2", ")", ":", "\n", "        ", "if", "i", "<", "15", ":", "\n", "            ", "index", "=", "data", ".", "gt", "(", "(", "i", "-", "2", ")", "*", "delta", ")", ".", "float", "(", ")", "*", "data", ".", "le", "(", "i", "*", "delta", ")", ".", "float", "(", ")", "\n", "", "else", ":", "\n", "            ", "index", "=", "data", ".", "gt", "(", "13", "*", "delta", ")", ".", "float", "(", ")", "\n", "", "q", "+=", "(", "i", "-", "1", ")", "/", "2", "*", "index", "\n", "", "scale", "=", "(", "data", "*", "q", ")", ".", "sum", "(", ")", "/", "(", "q", "*", "q", ")", ".", "sum", "(", ")", "\n", "return", "scale", "*", "q", "*", "sign", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.PreActBasicBlock.__init__": [[31, 41], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet_cifar.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar.conv3x3"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.conv3x3", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "noise_coef", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreActBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "noise_coef", "=", "noise_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.PreActBasicBlock.forward": [[42, 62], ["resnet_cifar.PreActBasicBlock.bn1", "resnet_cifar.PreActBasicBlock.relu", "resnet_cifar.PreActBasicBlock.conv1", "resnet_cifar.PreActBasicBlock.bn2", "resnet_cifar.PreActBasicBlock.relu", "resnet_cifar.PreActBasicBlock.conv2", "resnet_cifar.PreActBasicBlock.downsample", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.std", "torch.std", "torch.std", "torch.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "\n", "if", "self", ".", "noise_coef", "is", "not", "None", ":", "# Test Variable and rand", "\n", "#return out + self.noise_coef * torch.std(out) + Variable(torch.randn(out.shape).cuda())", "\n", "            ", "return", "out", "+", "self", ".", "noise_coef", "*", "torch", ".", "std", "(", "out", ")", "*", "torch", ".", "randn_like", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.PreActBottleneck.__init__": [[67, 79], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "noise_coef", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "noise_coef", "=", "noise_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.PreActBottleneck.forward": [[80, 105], ["resnet_cifar.PreActBottleneck.bn1", "resnet_cifar.PreActBottleneck.relu", "resnet_cifar.PreActBottleneck.conv1", "resnet_cifar.PreActBottleneck.bn2", "resnet_cifar.PreActBottleneck.relu", "resnet_cifar.PreActBottleneck.conv2", "resnet_cifar.PreActBottleneck.bn3", "resnet_cifar.PreActBottleneck.relu", "resnet_cifar.PreActBottleneck.conv3", "resnet_cifar.PreActBottleneck.downsample", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.std", "torch.std", "torch.std", "torch.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "if", "self", ".", "noise_coef", "is", "not", "None", ":", "\n", "#return out + self.noise_coef * torch.std(out) * Variable(torch.randn(out.shape).cuda())", "\n", "            ", "return", "out", "+", "self", ".", "noise_coef", "*", "torch", ".", "std", "(", "out", ")", "*", "torch", ".", "randn_like", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.PreAct_ResNet_Cifar.__init__": [[108, 129], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "resnet_cifar.PreAct_ResNet_Cifar._make_layer", "resnet_cifar.PreAct_ResNet_Cifar._make_layer", "resnet_cifar.PreAct_ResNet_Cifar._make_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet_cifar.PreAct_ResNet_Cifar.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "noise_coef", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreAct_ResNet_Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ",", "noise_coef", "=", "noise_coef", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "noise_coef", "=", "noise_coef", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "noise_coef", "=", "noise_coef", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "64", "*", "block", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "#self.loss = nn.CrossEntropyLoss()", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.PreAct_ResNet_Cifar._make_layer": [[130, 143], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "noise_coef", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "noise_coef", "=", "noise_coef", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "noise_coef", "=", "noise_coef", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.PreAct_ResNet_Cifar.forward": [[145, 162], ["resnet_cifar.PreAct_ResNet_Cifar.conv1", "resnet_cifar.PreAct_ResNet_Cifar.layer1", "resnet_cifar.PreAct_ResNet_Cifar.layer2", "resnet_cifar.PreAct_ResNet_Cifar.layer3", "resnet_cifar.PreAct_ResNet_Cifar.bn", "resnet_cifar.PreAct_ResNet_Cifar.relu", "resnet_cifar.PreAct_ResNet_Cifar.avgpool", "resnet_cifar.PreAct_ResNet_Cifar.view", "resnet_cifar.PreAct_ResNet_Cifar.fc", "resnet_cifar.PreAct_ResNet_Cifar.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "#loss = self.loss(x, target)", "\n", "\n", "#return x, loss", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.Ensemble_PreAct_ResNet_Cifar.__init__": [[165, 170], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "resnet_cifar.PreAct_ResNet_Cifar", "range"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "num_ensembles", "=", "3", ",", "noise_coef", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "Ensemble_PreAct_ResNet_Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_ensembles", "=", "num_ensembles", "\n", "# for emsemble resnet we should use Noisy Blocks.", "\n", "self", ".", "ensemble", "=", "nn", ".", "ModuleList", "(", "[", "PreAct_ResNet_Cifar", "(", "block", ",", "layers", ",", "num_classes", "=", "num_classes", ",", "noise_coef", "=", "noise_coef", ")", "for", "i", "in", "range", "(", "num_ensembles", ")", "]", ")", "\n", "# self.ensemble = nn.ModuleList([ResNet_Cifar(block, layers, num_classes=num_classes) for i in range(num_ensembles)])", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.Ensemble_PreAct_ResNet_Cifar.forward": [[172, 181], ["net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#def forward(self, x, target):", "\n", "        ", "ret", "=", "0.0", "\n", "for", "net", "in", "self", ".", "ensemble", ":", "\n", "            ", "ret", "+=", "net", "(", "x", ")", "\n", "#ret += net(x, target)", "\n", "", "ret", "/=", "self", ".", "num_ensembles", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.conv3x3": [[21, 26], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    3x3 convolution with padding\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.en_preactresnet20_cifar": [[183, 186], ["resnet_cifar.Ensemble_PreAct_ResNet_Cifar"], "function", ["None"], ["", "", "def", "en_preactresnet20_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "Ensemble_PreAct_ResNet_Cifar", "(", "PreActBasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.en_preactresnet44_cifar": [[187, 190], ["resnet_cifar.Ensemble_PreAct_ResNet_Cifar"], "function", ["None"], ["", "def", "en_preactresnet44_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "Ensemble_PreAct_ResNet_Cifar", "(", "PreActBasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.en_preactresnet32_cifar": [[191, 194], ["resnet_cifar.Ensemble_PreAct_ResNet_Cifar"], "function", ["None"], ["", "def", "en_preactresnet32_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "Ensemble_PreAct_ResNet_Cifar", "(", "PreActBasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.resnet_cifar.en_preactresnet110_cifar": [[195, 198], ["resnet_cifar.Ensemble_PreAct_ResNet_Cifar"], "function", ["None"], ["", "def", "en_preactresnet110_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "Ensemble_PreAct_ResNet_Cifar", "(", "PreActBasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.quantization.LambdaLayer.__init__": [[40, 43], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.quantization.LambdaLayer.forward": [[44, 46], ["quantization.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.quantization.BasicBlock.__init__": [[51, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "quantization.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "'A'", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "lambda", "x", ":", "\n", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.quantization.BasicBlock.forward": [[72, 78], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "quantization.BasicBlock.bn2", "quantization.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "quantization.BasicBlock.bn1", "quantization.BasicBlock.conv2", "quantization.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.quantization.ResNet.__init__": [[81, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "quantization.ResNet._make_layer", "quantization.ResNet._make_layer", "quantization.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "quantization.ResNet.apply"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "64", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.quantization.ResNet._make_layer": [[94, 102], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.quantization.ResNet.forward": [[103, 112], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "quantization.ResNet.layer1", "quantization.ResNet.layer2", "quantization.ResNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "quantization.ResNet.view", "quantization.ResNet.linear", "quantization.ResNet.bn1", "quantization.ResNet.size", "quantization.ResNet.conv1", "quantization.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.quantization._weights_init": [[33, 38], ["isinstance", "isinstance", "init.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "#print(classname)", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.quantization.resnet20": [[114, 116], ["quantization.ResNet"], "function", ["None"], ["", "", "def", "resnet20", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.quantization.get_model2": [[117, 150], ["torch.SGD", "torch.CrossEntropyLoss().cuda", "model.cuda.cuda", "model.cuda.named_parameters", "model.cuda.named_parameters", "model.cuda.named_parameters", "torch.CrossEntropyLoss"], "function", ["None"], ["", "def", "get_model2", "(", "model", ",", "learning_rate", "=", "1e-3", ",", "weight_decay", "=", "1e-4", ")", ":", "\n", "\n", "# set the first layer not trainable", "\n", "# model.features.conv0.weight.requires_grad = False", "\n", "\n", "# all fc layers", "\n", "    ", "weights", "=", "[", "\n", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "'weight'", "in", "n", "and", "'conv'", "not", "in", "n", "\n", "]", "\n", "\n", "# all conv layers", "\n", "weights_to_be_quantized", "=", "[", "\n", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "\n", "# if 'conv' in n and 'conv0' not in n", "\n", "if", "'conv'", "in", "n", "and", "'weight'", "in", "n", "\n", "]", "\n", "\n", "biases", "=", "[", "\n", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "\n", "if", "'bias'", "in", "n", "\n", "]", "\n", "\n", "params", "=", "[", "\n", "{", "'params'", ":", "weights", ",", "'weight_decay'", ":", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "weights_to_be_quantized", ",", "'weight_decay'", ":", "weight_decay", "}", ",", "\n", "{", "'params'", ":", "biases", ",", "'weight_decay'", ":", "weight_decay", "}", "\n", "]", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "params", ",", "lr", "=", "learning_rate", ",", "momentum", "=", "0.9", ")", "\n", "\n", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "# move the model to gpu", "\n", "return", "model", ",", "loss", ",", "optimizer", "\n", "", "def", "quantize_bw", "(", "kernel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.quantization.quantize_bw": [[150, 161], ["kernel.abs().mean", "kernel.sign().float", "kernel.abs", "kernel.sign"], "function", ["None"], ["", "def", "quantize_bw", "(", "kernel", ")", ":", "\n", "    ", "\"\"\"\n    binary quantization\n    Return quantized weights of a layer.\n    \"\"\"", "\n", "delta", "=", "kernel", ".", "abs", "(", ")", ".", "mean", "(", ")", "\n", "sign", "=", "kernel", ".", "sign", "(", ")", ".", "float", "(", ")", "\n", "\n", "\n", "\n", "return", "sign", "*", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.utils.init_params": [[17, 33], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["def", "init_params", "(", "net", ")", ":", "\n", "    ", "\"\"\"\n    Initial layer parameters.\n    \"\"\"", "\n", "for", "m", "in", "net", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "init", ".", "normal", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", ":", "\n", "                ", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.utils.progress_bar": [[41, 86], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "utils.format_time", "utils.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.utils.format_time", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.utils.format_time"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    The progress bar.\n    \"\"\"", "\n", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.utils.format_time": [[88, 119], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.utils.freeze_layer": [[121, 128], ["layer.parameters"], "function", ["None"], ["", "def", "freeze_layer", "(", "layer", ")", ":", "\n", "    ", "\"\"\"\n    Freeze a certain layer in the DNN.\n    #Argument: the name of a layer in the given DNN.\n    \"\"\"", "\n", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.utils.freeze_All": [[130, 137], ["model.parameters"], "function", ["None"], ["", "", "def", "freeze_All", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    Freeze all the trainable parameters in the DNN.\n    #Argument: the DNN model.\n    \"\"\"", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "# Parameter is a method of nn.Module", "\n", "        ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.utils.Unfreeze_layer": [[139, 146], ["layer.parameters"], "function", ["None"], ["", "", "def", "Unfreeze_layer", "(", "layer", ")", ":", "\n", "    ", "\"\"\"\n    Unfreeze a given layer in t he DNN.\n    #Argument: the name of a layer in the given DNN.\n    \"\"\"", "\n", "for", "param", "in", "layer", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.None.utils.Unfreeze_All": [[147, 154], ["model.parameters"], "function", ["None"], ["", "", "def", "Unfreeze_All", "(", "model", ")", ":", "\n", "    ", "\"\"\"\n    Unfreeze a given layer in t he DNN.\n    #Argument: DNN model.\n    \"\"\"", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "param", ".", "requires_grad", "=", "True", "", "", "", ""]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreActBasicBlock.__init__": [[58, 68], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "Attack_PGD_EnResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "Attack_PGD_EnResNet.conv3x3"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.conv3x3", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "noise_coef", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreActBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "noise_coef", "=", "noise_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreActBasicBlock.forward": [[69, 89], ["Attack_PGD_EnResNet.PreActBasicBlock.bn1", "Attack_PGD_EnResNet.PreActBasicBlock.relu", "Attack_PGD_EnResNet.PreActBasicBlock.conv1", "Attack_PGD_EnResNet.PreActBasicBlock.bn2", "Attack_PGD_EnResNet.PreActBasicBlock.relu", "Attack_PGD_EnResNet.PreActBasicBlock.conv2", "Attack_PGD_EnResNet.PreActBasicBlock.downsample", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "\n", "if", "self", ".", "noise_coef", "is", "not", "None", ":", "# Test Variable and rand", "\n", "#return out + self.noise_coef * torch.std(out) + Variable(torch.randn(out.shape).cuda())", "\n", "            ", "return", "out", "+", "self", ".", "noise_coef", "*", "torch", ".", "std", "(", "out", ")", "*", "torch", ".", "randn_like", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreActBottleneck.__init__": [[94, 106], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "noise_coef", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "noise_coef", "=", "noise_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreActBottleneck.forward": [[107, 132], ["Attack_PGD_EnResNet.PreActBottleneck.bn1", "Attack_PGD_EnResNet.PreActBottleneck.relu", "Attack_PGD_EnResNet.PreActBottleneck.conv1", "Attack_PGD_EnResNet.PreActBottleneck.bn2", "Attack_PGD_EnResNet.PreActBottleneck.relu", "Attack_PGD_EnResNet.PreActBottleneck.conv2", "Attack_PGD_EnResNet.PreActBottleneck.bn3", "Attack_PGD_EnResNet.PreActBottleneck.relu", "Attack_PGD_EnResNet.PreActBottleneck.conv3", "Attack_PGD_EnResNet.PreActBottleneck.downsample", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std", "torch.std"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "out", "+=", "residual", "\n", "if", "self", ".", "noise_coef", "is", "not", "None", ":", "\n", "#return out + self.noise_coef * torch.std(out) * Variable(torch.randn(out.shape).cuda())", "\n", "            ", "return", "out", "+", "self", ".", "noise_coef", "*", "torch", ".", "std", "(", "out", ")", "*", "torch", ".", "randn_like", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar.__init__": [[135, 156], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer", "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "noise_coef", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreAct_ResNet_Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "layers", "[", "0", "]", ",", "noise_coef", "=", "noise_coef", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "noise_coef", "=", "noise_coef", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "noise_coef", "=", "noise_coef", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "64", "*", "block", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "#self.loss = nn.CrossEntropyLoss()", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar._make_layer": [[157, 170], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "noise_coef", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "stride", ",", "downsample", "=", "downsample", ",", "noise_coef", "=", "noise_coef", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "noise_coef", "=", "noise_coef", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.PreAct_ResNet_Cifar.forward": [[172, 189], ["Attack_PGD_EnResNet.PreAct_ResNet_Cifar.conv1", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar.layer1", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar.layer2", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar.layer3", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar.bn", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar.relu", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar.avgpool", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar.view", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar.fc", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "#loss = self.loss(x, target)", "\n", "\n", "#return x, loss", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__": [[192, 197], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "Attack_PGD_EnResNet.PreAct_ResNet_Cifar", "range"], "methods", ["home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "num_ensembles", "=", "3", ",", "noise_coef", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "Ensemble_PreAct_ResNet_Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_ensembles", "=", "num_ensembles", "\n", "# for emsemble resnet we should use Noisy Blocks.", "\n", "self", ".", "ensemble", "=", "nn", ".", "ModuleList", "(", "[", "PreAct_ResNet_Cifar", "(", "block", ",", "layers", ",", "num_classes", "=", "num_classes", ",", "noise_coef", "=", "noise_coef", ")", "for", "i", "in", "range", "(", "num_ensembles", ")", "]", ")", "\n", "# self.ensemble = nn.ModuleList([ResNet_Cifar(block, layers, num_classes=num_classes) for i in range(num_ensembles)])", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar.forward": [[199, 208], ["net"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#def forward(self, x, target):", "\n", "        ", "ret", "=", "0.0", "\n", "for", "net", "in", "self", ".", "ensemble", ":", "\n", "            ", "ret", "+=", "net", "(", "x", ")", "\n", "#ret += net(x, target)", "\n", "", "ret", "/=", "self", ".", "num_ensembles", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.conv3x3": [[48, 53], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    3x3 convolution with padding\n    \"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.en_preactresnet20_cifar": [[210, 213], ["Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar"], "function", ["None"], ["", "", "def", "en_preactresnet20_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "Ensemble_PreAct_ResNet_Cifar", "(", "PreActBasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.lzj994_Binary-Quantization.Models.Attack_PGD_EnResNet.en_preactresnet110_cifar": [[214, 217], ["Attack_PGD_EnResNet.Ensemble_PreAct_ResNet_Cifar"], "function", ["None"], ["", "def", "en_preactresnet110_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "Ensemble_PreAct_ResNet_Cifar", "(", "PreActBasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]]}