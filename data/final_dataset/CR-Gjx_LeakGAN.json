{"home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.dataloader.Gen_Data_loader.__init__": [[6, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "length", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "token_stream", "=", "[", "]", "\n", "self", ".", "length", "=", "length", "\n", "", "def", "create_batches", "(", "self", ",", "data_file", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.dataloader.Gen_Data_loader.create_batches": [[10, 24], ["int", "numpy.split", "open", "numpy.array", "line.split.split.strip", "line.split.split.split", "len", "int", "len", "dataloader.Gen_Data_loader.token_stream.append"], "methods", ["None"], ["", "def", "create_batches", "(", "self", ",", "data_file", ")", ":", "\n", "        ", "self", ".", "token_stream", "=", "[", "]", "\n", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "line", "=", "line", ".", "split", "(", ")", "\n", "parse_line", "=", "[", "int", "(", "x", ")", "for", "x", "in", "line", "]", "\n", "if", "len", "(", "parse_line", ")", "==", "self", ".", "length", ":", "\n", "                    ", "self", ".", "token_stream", ".", "append", "(", "parse_line", ")", "\n", "\n", "", "", "", "self", ".", "num_batch", "=", "int", "(", "len", "(", "self", ".", "token_stream", ")", "/", "self", ".", "batch_size", ")", "\n", "self", ".", "token_stream", "=", "self", ".", "token_stream", "[", ":", "self", ".", "num_batch", "*", "self", ".", "batch_size", "]", "\n", "self", ".", "sequence_batch", "=", "np", ".", "split", "(", "np", ".", "array", "(", "self", ".", "token_stream", ")", ",", "self", ".", "num_batch", ",", "0", ")", "\n", "self", ".", "pointer", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.dataloader.Gen_Data_loader.next_batch": [[25, 29], ["None"], "methods", ["None"], ["", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "ret", "=", "self", ".", "sequence_batch", "[", "self", ".", "pointer", "]", "\n", "self", ".", "pointer", "=", "(", "self", ".", "pointer", "+", "1", ")", "%", "self", ".", "num_batch", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.dataloader.Gen_Data_loader.reset_pointer": [[30, 32], ["None"], "methods", ["None"], ["", "def", "reset_pointer", "(", "self", ")", ":", "\n", "        ", "self", ".", "pointer", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.dataloader.Dis_dataloader.__init__": [[35, 40], ["numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "length", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "sentences", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "self", ".", "labels", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "self", ".", "length", "=", "length", "\n", "", "def", "load_train_data", "(", "self", ",", "positive_file", ",", "negative_file", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.dataloader.Dis_dataloader.load_train_data": [[40, 78], ["random.sample", "numpy.array", "numpy.concatenate", "numpy.random.permutation", "int", "numpy.split", "numpy.split", "open", "open", "numpy.arange", "line.split.split.strip", "line.split.split.split", "random.sample.append", "line.split.split.strip", "line.split.split.split", "len", "len", "int", "int", "len", "negative_examples.append"], "methods", ["None"], ["", "def", "load_train_data", "(", "self", ",", "positive_file", ",", "negative_file", ")", ":", "\n", "# Load data", "\n", "        ", "positive_examples", "=", "[", "]", "\n", "negative_examples", "=", "[", "]", "\n", "with", "open", "(", "positive_file", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "line", "=", "line", ".", "split", "(", ")", "\n", "parse_line", "=", "[", "int", "(", "x", ")", "for", "x", "in", "line", "]", "\n", "positive_examples", ".", "append", "(", "parse_line", ")", "\n", "", "", "with", "open", "(", "negative_file", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "line", "=", "line", ".", "split", "(", ")", "\n", "parse_line", "=", "[", "int", "(", "x", ")", "for", "x", "in", "line", "]", "\n", "if", "len", "(", "parse_line", ")", "==", "self", ".", "length", ":", "\n", "                    ", "negative_examples", ".", "append", "(", "parse_line", ")", "\n", "", "", "", "positive_examples", "=", "random", ".", "sample", "(", "positive_examples", ",", "10000", ")", "\n", "self", ".", "sentences", "=", "np", ".", "array", "(", "positive_examples", "+", "negative_examples", ")", "\n", "\n", "# Generate labels", "\n", "positive_labels", "=", "[", "[", "0", ",", "1", "]", "for", "_", "in", "positive_examples", "]", "\n", "negative_labels", "=", "[", "[", "1", ",", "0", "]", "for", "_", "in", "negative_examples", "]", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "[", "positive_labels", ",", "negative_labels", "]", ",", "0", ")", "\n", "\n", "# Shuffle the data", "\n", "shuffle_indices", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "len", "(", "self", ".", "labels", ")", ")", ")", "\n", "self", ".", "sentences", "=", "self", ".", "sentences", "[", "shuffle_indices", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", "[", "shuffle_indices", "]", "\n", "\n", "# Split batches", "\n", "self", ".", "num_batch", "=", "int", "(", "len", "(", "self", ".", "labels", ")", "/", "self", ".", "batch_size", ")", "\n", "self", ".", "sentences", "=", "self", ".", "sentences", "[", ":", "self", ".", "num_batch", "*", "self", ".", "batch_size", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", "[", ":", "self", ".", "num_batch", "*", "self", ".", "batch_size", "]", "\n", "self", ".", "sentences_batches", "=", "np", ".", "split", "(", "self", ".", "sentences", ",", "self", ".", "num_batch", ",", "0", ")", "\n", "self", ".", "labels_batches", "=", "np", ".", "split", "(", "self", ".", "labels", ",", "self", ".", "num_batch", ",", "0", ")", "\n", "\n", "self", ".", "pointer", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.dataloader.Dis_dataloader.next_batch": [[80, 84], ["None"], "methods", ["None"], ["", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "ret", "=", "self", ".", "sentences_batches", "[", "self", ".", "pointer", "]", ",", "self", ".", "labels_batches", "[", "self", ".", "pointer", "]", "\n", "self", ".", "pointer", "=", "(", "self", ".", "pointer", "+", "1", ")", "%", "self", ".", "num_batch", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.dataloader.Dis_dataloader.reset_pointer": [[85, 87], ["None"], "methods", ["None"], ["", "def", "reset_pointer", "(", "self", ")", ":", "\n", "        ", "self", ".", "pointer", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.Discriminator.Discriminator.__init__": [[60, 100], ["tensorflow.constant", "sum", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.constant", "Discriminator.Discriminator.FeatureExtractor", "Discriminator.Discriminator.classification", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.compute_gradients", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.variable_scope", "Discriminator.Discriminator.FeatureExtractor_unit", "Discriminator.Discriminator.feature_scope.reuse_variables", "tensorflow.reduce_mean", "tensorflow.trainable_variables"], "methods", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.Discriminator.FeatureExtractor", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.Discriminator.classification"], ["    ", "def", "__init__", "(", "self", ",", "sequence_length", ",", "num_classes", ",", "vocab_size", ",", "dis_emb_dim", ",", "filter_sizes", ",", "num_filters", ",", "batch_size", ",", "hidden_dim", ",", "start_token", ",", "goal_out_size", ",", "step_size", ",", "l2_reg_lambda", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "sequence_length", "=", "sequence_length", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "dis_emb_dim", "=", "dis_emb_dim", "\n", "self", ".", "filter_sizes", "=", "filter_sizes", "\n", "self", ".", "num_filters", "=", "num_filters", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "start_token", "=", "tf", ".", "constant", "(", "[", "start_token", "]", "*", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "num_filters_total", "=", "sum", "(", "self", ".", "num_filters", ")", "\n", "self", ".", "temperature", "=", "1.0", "\n", "self", ".", "grad_clip", "=", "5.0", "\n", "self", ".", "goal_out_size", "=", "goal_out_size", "\n", "self", ".", "step_size", "=", "step_size", "\n", "\n", "self", ".", "D_input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "num_classes", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "self", ".", "D_input_x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "sequence_length", "]", ",", "name", "=", "\"input_x\"", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'D_update'", ")", ":", "\n", "            ", "self", ".", "D_l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "self", ".", "FeatureExtractor_unit", "=", "self", ".", "FeatureExtractor", "(", ")", "\n", "\n", "# Train for Discriminator", "\n", "with", "tf", ".", "variable_scope", "(", "\"feature\"", ")", "as", "self", ".", "feature_scope", ":", "\n", "                ", "D_feature", "=", "self", ".", "FeatureExtractor_unit", "(", "self", ".", "D_input_x", ",", "self", ".", "dropout_keep_prob", ")", "#,self.dropout_keep_prob)", "\n", "self", ".", "feature_scope", ".", "reuse_variables", "(", ")", "\n", "# tf.get_variable_scope().reuse_variables()", "\n", "\n", "", "D_scores", ",", "D_predictions", ",", "self", ".", "ypred_for_auc", "=", "self", ".", "classification", "(", "D_feature", ")", "\n", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "D_scores", ",", "labels", "=", "self", ".", "D_input_y", ")", "\n", "self", ".", "D_loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "self", ".", "D_l2_loss", "\n", "\n", "self", ".", "D_params", "=", "[", "param", "for", "param", "in", "tf", ".", "trainable_variables", "(", ")", "if", "\n", "'Discriminator'", "or", "'FeatureExtractor'", "in", "param", ".", "name", "]", "\n", "d_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "5e-5", ")", "\n", "D_grads_and_vars", "=", "d_optimizer", ".", "compute_gradients", "(", "self", ".", "D_loss", ",", "self", ".", "D_params", ",", "aggregation_method", "=", "2", ")", "\n", "self", ".", "D_train_op", "=", "d_optimizer", ".", "apply_gradients", "(", "D_grads_and_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.Discriminator.Discriminator.FeatureExtractor": [[103, 160], ["tensorflow.variable_scope", "zip", "tensorflow.concat", "tensorflow.reshape", "tensorflow.device", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.expand_dims", "tensorflow.name_scope", "Discriminator.highway", "tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "pooled_outputs.append", "tensorflow.random_uniform", "tensorflow.nn.bias_add", "tensorflow.reshape.get_shape", "tensorflow.truncated_normal", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.highway"], ["", "", "def", "FeatureExtractor", "(", "self", ")", ":", "\n", "# Embedding layer", "\n", "# scope.reuse_variables()", "\n", "        ", "def", "unit", "(", "Feature_input", ",", "dropout_keep_prob", ")", ":", "#,dropout_keep_prob):", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'FeatureExtractor'", ")", "as", "scope", ":", "\n", "                ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ",", "tf", ".", "name_scope", "(", "\"embedding\"", ")", "as", "scope", ":", "\n", "#", "\n", "                    ", "W_fe", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"W_fe\"", ",", "\n", "initializer", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", "+", "1", ",", "self", ".", "dis_emb_dim", "]", ",", "-", "1.0", ",", "1.0", ")", ")", "\n", "# scope.reuse_variables()", "\n", "embedded_chars", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "W_fe", ",", "Feature_input", "+", "1", ")", "\n", "embedded_chars_expanded", "=", "tf", ".", "expand_dims", "(", "embedded_chars", ",", "-", "1", ")", "\n", "\n", "# Create a convolution + maxpool layer for each filter size", "\n", "", "pooled_outputs", "=", "[", "]", "\n", "for", "filter_size", ",", "num_filter", "in", "zip", "(", "self", ".", "filter_sizes", ",", "self", ".", "num_filters", ")", ":", "\n", "                    ", "with", "tf", ".", "name_scope", "(", "\"conv-maxpool-%s\"", "%", "filter_size", ")", "as", "scope", ":", "\n", "# Convolution Layer", "\n", "                        ", "filter_shape", "=", "[", "filter_size", ",", "self", ".", "dis_emb_dim", ",", "1", ",", "num_filter", "]", "\n", "W", "=", "tf", ".", "get_variable", "(", "name", "=", "\"W-%s\"", "%", "filter_size", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal", "(", "filter_shape", ",", "stddev", "=", "0.1", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "\"b-%s\"", "%", "filter_size", ",", "\n", "initializer", "=", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "num_filter", "]", ")", ")", "\n", "# scope.reuse_variables()", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "embedded_chars_expanded", ",", "\n", "W", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"conv-%s\"", "%", "filter_size", ")", "\n", "# Apply nonlinearity", "\n", "h", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "b", ")", ",", "name", "=", "\"relu-%s\"", "%", "filter_size", ")", "\n", "# Maxpooling over the outputs", "\n", "pooled", "=", "tf", ".", "nn", ".", "max_pool", "(", "\n", "h", ",", "\n", "ksize", "=", "[", "1", ",", "self", ".", "sequence_length", "-", "filter_size", "+", "1", ",", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "name", "=", "\"pool-%s\"", "%", "filter_size", ")", "\n", "pooled_outputs", ".", "append", "(", "pooled", ")", "\n", "#", "\n", "# Combine all the pooled features", "\n", "", "", "h_pool", "=", "tf", ".", "concat", "(", "pooled_outputs", ",", "3", ")", "\n", "h_pool_flat", "=", "tf", ".", "reshape", "(", "h_pool", ",", "[", "-", "1", ",", "self", ".", "num_filters_total", "]", ")", "\n", "\n", "# Add highway", "\n", "with", "tf", ".", "name_scope", "(", "\"highway\"", ")", ":", "\n", "                    ", "h_highway", "=", "highway", "(", "h_pool_flat", ",", "h_pool_flat", ".", "get_shape", "(", ")", "[", "1", "]", ",", "1", ",", "0", ")", "\n", "\n", "# Add dropout", "\n", "", "with", "tf", ".", "name_scope", "(", "\"dropout\"", ")", ":", "\n", "                    ", "h_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "h_highway", ",", "dropout_keep_prob", ")", "\n", "\n", "", "", "return", "h_drop", "\n", "\n", "", "return", "unit", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.Discriminator.Discriminator.classification": [[161, 172], ["tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.truncated_normal", "tensorflow.constant"], "methods", ["None"], ["", "def", "classification", "(", "self", ",", "D_input", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Discriminator'", ")", ":", "\n", "            ", "W_d", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "self", ".", "num_filters_total", ",", "self", ".", "num_classes", "]", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"W\"", ")", "\n", "b_d", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "self", ".", "num_classes", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "self", ".", "D_l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W_d", ")", "\n", "self", ".", "D_l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b_d", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "D_input", ",", "W_d", ",", "b_d", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "ypred_for_auc", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "scores", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "return", "self", ".", "scores", ",", "self", ".", "predictions", ",", "self", ".", "ypred_for_auc", "", "", "", ""]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.Discriminator.cosine_similarity": [[5, 10], ["tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.multiply"], "function", ["None"], ["def", "cosine_similarity", "(", "a", ",", "b", ")", ":", "\n", "    ", "normalize_a", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "a", ",", "-", "1", ")", "\n", "normalize_b", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "b", ",", "-", "1", ")", "\n", "cos_similarity", "=", "(", "tf", ".", "multiply", "(", "normalize_a", ",", "normalize_b", ")", ")", "\n", "return", "cos_similarity", "\n", "# An alternative to tf.nn.rnn_cell._linear function, which has been removed in Tensorfow 1.0.1", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.Discriminator.linear": [[12, 39], ["input_.get_shape().as_list", "len", "ValueError", "ValueError", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "input_.get_shape", "tensorflow.transpose", "str", "str"], "function", ["None"], ["", "def", "linear", "(", "input_", ",", "output_size", ",", "scope", "=", "None", ")", ":", "\n", "    ", "'''\n    Linear map: output[k] = sum_i(Matrix[k, i] * input_[i] ) + Bias[k]\n    Args:\n    input_: a tensor or a list of 2D, batch x n, Tensors.\n    output_size: int, second dimension of W[i].\n    scope: VariableScope for the created subgraph; defaults to \"Linear\".\n  Returns:\n    A 2D Tensor with shape [batch x output_size] equal to\n    sum_i(input_[i] * W[i]), where W[i]s are newly created matrices.\n  Raises:\n    ValueError: if some of the arguments has unspecified or wrong shape.\n  '''", "\n", "\n", "shape", "=", "input_", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "len", "(", "shape", ")", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Linear is expecting 2D arguments: %s\"", "%", "str", "(", "shape", ")", ")", "\n", "", "if", "not", "shape", "[", "1", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"Linear expects shape[1] of arguments: %s\"", "%", "str", "(", "shape", ")", ")", "\n", "", "input_size", "=", "shape", "[", "1", "]", "\n", "\n", "# Now the computation.", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"SimpleLinear\"", ")", ":", "\n", "        ", "matrix", "=", "tf", ".", "get_variable", "(", "\"Matrix\"", ",", "[", "output_size", ",", "input_size", "]", ",", "dtype", "=", "input_", ".", "dtype", ")", "\n", "bias_term", "=", "tf", ".", "get_variable", "(", "\"Bias\"", ",", "[", "output_size", "]", ",", "dtype", "=", "input_", ".", "dtype", ")", "\n", "\n", "", "return", "tf", ".", "matmul", "(", "input_", ",", "tf", ".", "transpose", "(", "matrix", ")", ")", "+", "bias_term", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Image COCO.Discriminator.highway": [[41, 58], ["tensorflow.variable_scope", "range", "f", "tensorflow.sigmoid", "Discriminator.linear", "Discriminator.linear"], "function", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.linear", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.linear"], ["", "def", "highway", "(", "input_", ",", "size", ",", "num_layers", "=", "1", ",", "bias", "=", "-", "2.0", ",", "f", "=", "tf", ".", "nn", ".", "relu", ",", "scope", "=", "'Highway'", ")", ":", "\n", "    ", "\"\"\"Highway Network (cf. http://arxiv.org/abs/1505.00387).\n    t = sigmoid(Wy + b)\n    z = t * g(Wy + b) + (1 - t) * y\n    where g is nonlinearity, t is transform gate, and (1 - t) is carry gate.\n    \"\"\"", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "for", "idx", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "g", "=", "f", "(", "linear", "(", "input_", ",", "size", ",", "scope", "=", "'highway_lin_%d'", "%", "idx", ")", ")", "\n", "\n", "t", "=", "tf", ".", "sigmoid", "(", "linear", "(", "input_", ",", "size", ",", "scope", "=", "'highway_gate_%d'", "%", "idx", ")", "+", "bias", ")", "\n", "\n", "output", "=", "t", "*", "g", "+", "(", "1.", "-", "t", ")", "*", "input_", "\n", "input_", "=", "output", "\n", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm20.TARGET_LSTM20.__init__": [[6, 101], ["tensorflow.constant", "tensorflow.set_random_seed", "tensorflow.placeholder", "tensorflow.zeros", "tensorflow.stack", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.control_flow_ops.while_loop", "target_lstm20.TARGET_LSTM20.gen_x.stack", "tensorflow.transpose", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "ta_emb_x.unstack.unstack.unstack", "tensorflow.python.ops.control_flow_ops.while_loop", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.variable_scope", "tensorflow.Variable", "target_lstm20.TARGET_LSTM20.g_params.append", "target_lstm20.TARGET_LSTM20.create_recurrent_unit", "target_lstm20.TARGET_LSTM20.create_output_unit", "tensorflow.device", "tensorflow.transpose", "target_lstm20.TARGET_LSTM20.g_recurrent_unit", "target_lstm20.TARGET_LSTM20.g_output_unit", "tensorflow.log", "tensorflow.cast", "tensorflow.nn.embedding_lookup", "gen_o.write.write.write", "gen_x.write.write.write", "target_lstm20.TARGET_LSTM20.g_recurrent_unit", "target_lstm20.TARGET_LSTM20.g_output_unit", "g_predictions.write.write.write", "ta_emb_x.unstack.unstack.read", "target_lstm20.TARGET_LSTM20.g_predictions.stack", "tensorflow.reshape", "tensorflow.nn.embedding_lookup", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.multinomial", "tensorflow.multiply", "tensorflow.constant", "tensorflow.nn.embedding_lookup", "tensorflow.constant", "tensorflow.nn.embedding_lookup", "tensorflow.reduce_sum", "tensorflow.one_hot", "tensorflow.nn.softmax", "tensorflow.one_hot", "tensorflow.log", "tensorflow.to_int32", "tensorflow.reshape", "tensorflow.one_hot", "tensorflow.log", "tensorflow.reshape", "tensorflow.to_int32", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.create_recurrent_unit", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.create_output_unit"], ["    ", "def", "__init__", "(", "self", ",", "num_emb", ",", "batch_size", ",", "emb_dim", ",", "hidden_dim", ",", "sequence_length", ",", "start_token", ",", "params", ")", ":", "\n", "        ", "self", ".", "num_emb", "=", "num_emb", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "sequence_length", "=", "sequence_length", "\n", "self", ".", "start_token", "=", "tf", ".", "constant", "(", "[", "start_token", "]", "*", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "self", ".", "g_params", "=", "[", "]", "\n", "self", ".", "temperature", "=", "1.0", "\n", "self", ".", "params", "=", "params", "\n", "\n", "tf", ".", "set_random_seed", "(", "66", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'generator'", ")", ":", "\n", "            ", "self", ".", "g_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "0", "]", ")", "\n", "self", ".", "g_params", ".", "append", "(", "self", ".", "g_embeddings", ")", "\n", "self", ".", "g_recurrent_unit", "=", "self", ".", "create_recurrent_unit", "(", "self", ".", "g_params", ")", "# maps h_tm1 to h_t for generator", "\n", "self", ".", "g_output_unit", "=", "self", ".", "create_output_unit", "(", "self", ".", "g_params", ")", "# maps h_t to o_t (output token logits)", "\n", "\n", "# placeholder definition", "\n", "", "self", ".", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", "]", ")", "# sequence of tokens generated by generator", "\n", "\n", "# processed for batch", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "            ", "self", ".", "processed_x", "=", "tf", ".", "transpose", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "self", ".", "x", ")", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# seq_length x batch_size x emb_dim", "\n", "\n", "# initial states", "\n", "", "self", ".", "h0", "=", "tf", ".", "zeros", "(", "[", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", "]", ")", "\n", "self", ".", "h0", "=", "tf", ".", "stack", "(", "[", "self", ".", "h0", ",", "self", ".", "h0", "]", ")", "\n", "\n", "# generator on initial randomness", "\n", "gen_o", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "gen_x", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "int32", ",", "size", "=", "self", ".", "sequence_length", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "\n", "def", "_g_recurrence", "(", "i", ",", "x_t", ",", "h_tm1", ",", "gen_o", ",", "gen_x", ")", ":", "\n", "            ", "h_t", "=", "self", ".", "g_recurrent_unit", "(", "x_t", ",", "h_tm1", ")", "# hidden_memory_tuple", "\n", "o_t", "=", "self", ".", "g_output_unit", "(", "h_t", ")", "# batch x vocab , logits not prob", "\n", "log_prob", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "softmax", "(", "o_t", ")", ")", "\n", "next_token", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "tf", ".", "multinomial", "(", "log_prob", ",", "1", ")", ",", "[", "self", ".", "batch_size", "]", ")", ",", "tf", ".", "int32", ")", "\n", "x_tp1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "next_token", ")", "# batch x emb_dim", "\n", "gen_o", "=", "gen_o", ".", "write", "(", "i", ",", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "tf", ".", "one_hot", "(", "next_token", ",", "self", ".", "num_emb", ",", "1.0", ",", "0.0", ")", ",", "\n", "tf", ".", "nn", ".", "softmax", "(", "o_t", ")", ")", ",", "1", ")", ")", "# [batch_size] , prob", "\n", "gen_x", "=", "gen_x", ".", "write", "(", "i", ",", "next_token", ")", "# indices, batch_size", "\n", "return", "i", "+", "1", ",", "x_tp1", ",", "h_t", ",", "gen_o", ",", "gen_x", "\n", "\n", "", "_", ",", "_", ",", "_", ",", "self", ".", "gen_o", ",", "self", ".", "gen_x", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "i", ",", "_1", ",", "_2", ",", "_3", ",", "_4", ":", "i", "<", "self", ".", "sequence_length", ",", "\n", "body", "=", "_g_recurrence", ",", "\n", "loop_vars", "=", "(", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "self", ".", "start_token", ")", ",", "self", ".", "h0", ",", "gen_o", ",", "gen_x", ")", "\n", ")", "\n", "\n", "self", ".", "gen_x", "=", "self", ".", "gen_x", ".", "stack", "(", ")", "# seq_length x batch_size", "\n", "self", ".", "gen_x", "=", "tf", ".", "transpose", "(", "self", ".", "gen_x", ",", "perm", "=", "[", "1", ",", "0", "]", ")", "# batch_size x seq_length", "\n", "\n", "# supervised pretraining for generator", "\n", "g_predictions", "=", "tensor_array_ops", ".", "TensorArray", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "\n", "ta_emb_x", "=", "tensor_array_ops", ".", "TensorArray", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ")", "\n", "ta_emb_x", "=", "ta_emb_x", ".", "unstack", "(", "self", ".", "processed_x", ")", "\n", "\n", "def", "_pretrain_recurrence", "(", "i", ",", "x_t", ",", "h_tm1", ",", "g_predictions", ")", ":", "\n", "            ", "h_t", "=", "self", ".", "g_recurrent_unit", "(", "x_t", ",", "h_tm1", ")", "\n", "o_t", "=", "self", ".", "g_output_unit", "(", "h_t", ")", "\n", "g_predictions", "=", "g_predictions", ".", "write", "(", "i", ",", "tf", ".", "nn", ".", "softmax", "(", "o_t", ")", ")", "# batch x vocab_size", "\n", "x_tp1", "=", "ta_emb_x", ".", "read", "(", "i", ")", "\n", "return", "i", "+", "1", ",", "x_tp1", ",", "h_t", ",", "g_predictions", "\n", "\n", "", "_", ",", "_", ",", "_", ",", "self", ".", "g_predictions", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "i", ",", "_1", ",", "_2", ",", "_3", ":", "i", "<", "self", ".", "sequence_length", ",", "\n", "body", "=", "_pretrain_recurrence", ",", "\n", "loop_vars", "=", "(", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "self", ".", "start_token", ")", ",", "\n", "self", ".", "h0", ",", "g_predictions", ")", ")", "\n", "\n", "self", ".", "g_predictions", "=", "tf", ".", "transpose", "(", "\n", "self", ".", "g_predictions", ".", "stack", "(", ")", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# batch_size x seq_length x vocab_size", "\n", "\n", "# pretraining loss", "\n", "self", ".", "pretrain_loss", "=", "-", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "one_hot", "(", "tf", ".", "to_int32", "(", "tf", ".", "reshape", "(", "self", ".", "x", ",", "[", "-", "1", "]", ")", ")", ",", "self", ".", "num_emb", ",", "1.0", ",", "0.0", ")", "*", "tf", ".", "log", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "g_predictions", ",", "[", "-", "1", ",", "self", ".", "num_emb", "]", ")", ")", ")", "/", "(", "self", ".", "sequence_length", "*", "self", ".", "batch_size", ")", "\n", "\n", "self", ".", "out_loss", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "reshape", "(", "\n", "-", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "one_hot", "(", "tf", ".", "to_int32", "(", "tf", ".", "reshape", "(", "self", ".", "x", ",", "[", "-", "1", "]", ")", ")", ",", "self", ".", "num_emb", ",", "1.0", ",", "0.0", ")", "*", "tf", ".", "log", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "g_predictions", ",", "[", "-", "1", ",", "self", ".", "num_emb", "]", ")", ")", ",", "1", "\n", ")", ",", "[", "-", "1", ",", "self", ".", "sequence_length", "]", "\n", ")", ",", "1", "\n", ")", "# batch_size", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm20.TARGET_LSTM20.generate": [[103, 107], ["session.run"], "methods", ["None"], ["", "def", "generate", "(", "self", ",", "session", ",", "drop", ",", "train", ")", ":", "\n", "# h0 = np.random.normal(size=self.hidden_dim)", "\n", "        ", "outputs", "=", "session", ".", "run", "(", "self", ".", "gen_x", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm20.TARGET_LSTM20.init_matrix": [[108, 110], ["tensorflow.random_normal"], "methods", ["None"], ["", "def", "init_matrix", "(", "self", ",", "shape", ")", ":", "\n", "        ", "return", "tf", ".", "random_normal", "(", "shape", ",", "stddev", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm20.TARGET_LSTM20.create_recurrent_unit": [[111, 170], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "params.extend", "tensorflow.unstack", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.nn.tanh", "tensorflow.stack", "tensorflow.nn.tanh", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "create_recurrent_unit", "(", "self", ",", "params", ")", ":", "\n", "# Weights and Bias for input and hidden tensor", "\n", "        ", "self", ".", "Wi", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "1", "]", ")", "\n", "self", ".", "Ui", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "2", "]", ")", "\n", "self", ".", "bi", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "3", "]", ")", "\n", "\n", "self", ".", "Wf", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "4", "]", ")", "\n", "self", ".", "Uf", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "5", "]", ")", "\n", "self", ".", "bf", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "6", "]", ")", "\n", "\n", "self", ".", "Wog", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "7", "]", ")", "\n", "self", ".", "Uog", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "8", "]", ")", "\n", "self", ".", "bog", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "9", "]", ")", "\n", "\n", "self", ".", "Wc", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "10", "]", ")", "\n", "self", ".", "Uc", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "11", "]", ")", "\n", "self", ".", "bc", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "12", "]", ")", "\n", "params", ".", "extend", "(", "[", "\n", "self", ".", "Wi", ",", "self", ".", "Ui", ",", "self", ".", "bi", ",", "\n", "self", ".", "Wf", ",", "self", ".", "Uf", ",", "self", ".", "bf", ",", "\n", "self", ".", "Wog", ",", "self", ".", "Uog", ",", "self", ".", "bog", ",", "\n", "self", ".", "Wc", ",", "self", ".", "Uc", ",", "self", ".", "bc", "]", ")", "\n", "\n", "def", "unit", "(", "x", ",", "hidden_memory_tm1", ")", ":", "\n", "            ", "previous_hidden_state", ",", "c_prev", "=", "tf", ".", "unstack", "(", "hidden_memory_tm1", ")", "\n", "\n", "# Input Gate", "\n", "i", "=", "tf", ".", "sigmoid", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wi", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Ui", ")", "+", "self", ".", "bi", "\n", ")", "\n", "\n", "# Forget Gate", "\n", "f", "=", "tf", ".", "sigmoid", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wf", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Uf", ")", "+", "self", ".", "bf", "\n", ")", "\n", "\n", "# Output Gate", "\n", "o", "=", "tf", ".", "sigmoid", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wog", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Uog", ")", "+", "self", ".", "bog", "\n", ")", "\n", "\n", "# New Memory Cell", "\n", "c_", "=", "tf", ".", "nn", ".", "tanh", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wc", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Uc", ")", "+", "self", ".", "bc", "\n", ")", "\n", "\n", "# Final Memory cell", "\n", "c", "=", "f", "*", "c_prev", "+", "i", "*", "c_", "\n", "\n", "# Current Hidden state", "\n", "current_hidden_state", "=", "o", "*", "tf", ".", "nn", ".", "tanh", "(", "c", ")", "\n", "\n", "return", "tf", ".", "stack", "(", "[", "current_hidden_state", ",", "c", "]", ")", "\n", "\n", "", "return", "unit", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm20.TARGET_LSTM20.create_output_unit": [[171, 184], ["tensorflow.Variable", "tensorflow.Variable", "params.extend", "tensorflow.unstack", "tensorflow.matmul"], "methods", ["None"], ["", "def", "create_output_unit", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "Wo", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "13", "]", ")", "\n", "self", ".", "bo", "=", "tf", ".", "Variable", "(", "self", ".", "params", "[", "14", "]", ")", "\n", "params", ".", "extend", "(", "[", "self", ".", "Wo", ",", "self", ".", "bo", "]", ")", "\n", "\n", "def", "unit", "(", "hidden_memory_tuple", ")", ":", "\n", "            ", "hidden_state", ",", "c_prev", "=", "tf", ".", "unstack", "(", "hidden_memory_tuple", ")", "\n", "# hidden_state : batch x hidden_dim", "\n", "logits", "=", "tf", ".", "matmul", "(", "hidden_state", ",", "self", ".", "Wo", ")", "+", "self", ".", "bo", "\n", "# output = tf.nn.softmax(logits)", "\n", "return", "logits", "\n", "\n", "", "return", "unit", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.__init__": [[6, 302], ["tensorflow.constant", "sum", "tensorflow.Variable", "tensorflow.train.exponential_decay", "tensorflow.Variable", "tensorflow.train.exponential_decay", "tensorflow.constant", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.control_flow_ops.while_loop", "LeakGANModel.LeakGAN.gen_x.stack", "tensorflow.transpose", "LeakGANModel.LeakGAN.gen_real_goal_array.stack", "tensorflow.transpose", "LeakGANModel.LeakGAN.gen_o_worker_array.stack", "tensorflow.transpose", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "ta_emb_x.unstack.unstack.unstack", "tensorflow.python.ops.control_flow_ops.while_loop", "LeakGANModel.LeakGAN.sub_feature.stack", "tensorflow.transpose", "LeakGANModel.LeakGAN.real_goal_array.stack", "tensorflow.transpose", "print", "print", "tensorflow.transpose", "LeakGANModel.LeakGAN.all_sub_features.stack", "tensorflow.transpose", "LeakGANModel.LeakGAN.all_sub_goals.stack", "tensorflow.transpose", "tensorflow.variable_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.variable_scope", "tensorflow.Variable", "LeakGANModel.LeakGAN.worker_params.append", "LeakGANModel.LeakGAN.create_Worker_recurrent_unit", "LeakGANModel.LeakGAN.create_Worker_output_unit", "tensorflow.Variable", "tensorflow.Variable", "LeakGANModel.LeakGAN.worker_params.extend", "tensorflow.zeros", "tensorflow.stack", "tensorflow.variable_scope", "LeakGANModel.LeakGAN.create_Manager_recurrent_unit", "LeakGANModel.LeakGAN.create_Manager_output_unit", "tensorflow.zeros", "tensorflow.stack", "tensorflow.get_variable", "LeakGANModel.LeakGAN.manager_params.extend", "tensorflow.name_scope", "LeakGANModel.LeakGAN.rollout", "tensorflow.device", "tensorflow.transpose", "tensorflow.cond", "LeakGANModel.LeakGAN.g_worker_recurrent_unit", "LeakGANModel.LeakGAN.g_worker_output_unit", "tensorflow.reshape", "LeakGANModel.LeakGAN.g_manager_recurrent_unit", "LeakGANModel.LeakGAN.g_manager_output_unit", "tensorflow.nn.l2_normalize", "goal.write.write.write", "tensorflow.add", "tensorflow.matmul", "tensorflow.nn.l2_normalize", "gen_real_goal_array.write.write.write", "tensorflow.expand_dims", "gen_o_worker_array.write.write.write", "tensorflow.matmul", "tensorflow.squeeze", "tensorflow.log", "tensorflow.cast", "tensorflow.nn.embedding_lookup", "gen_o.write.write.write", "feature_array.write.write.write", "tensorflow.cond", "LeakGANModel.LeakGAN.g_manager_recurrent_unit", "LeakGANModel.LeakGAN.g_manager_output_unit", "tensorflow.nn.l2_normalize", "tensorflow.cond", "LeakGANModel.LeakGAN.g_worker_output_unit", "tensorflow.reshape", "tensorflow.cond", "tensorflow.cond", "tensorflow.matmul", "tensorflow.nn.l2_normalize", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.squeeze", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.name_scope", "tensorflow.train.AdamOptimizer", "tensorflow.clip_by_global_norm", "tensorflow.train.AdamOptimizer.apply_gradients", "LeakGANModel.LeakGAN.g_predictions.stack", "tensorflow.reduce_sum", "tensorflow.name_scope", "tensorflow.train.AdamOptimizer", "tensorflow.clip_by_global_norm", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.name_scope", "tensorflow.train.AdamOptimizer", "tensorflow.clip_by_global_norm", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.losses.cosine_distance", "tensorflow.name_scope", "tensorflow.train.AdamOptimizer", "tensorflow.clip_by_global_norm", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.nn.embedding_lookup", "tensorflow.variable_scope", "LeakGANModel.LeakGAN.FeatureExtractor_unit", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.control_dependencies", "gen_x.write.write.write", "tensorflow.reduce_sum", "tensorflow.cond", "tensorflow.cond", "tensorflow.split", "tensorflow.variable_scope", "LeakGANModel.LeakGAN.FeatureExtractor_unit", "tensorflow.cond", "tensorflow.cond", "tensorflow.reduce_sum", "tensorflow.gradients", "list", "tensorflow.reduce_sum", "tensorflow.gradients", "list", "tensorflow.reduce_sum", "tensorflow.gradients", "list", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.gradients", "list", "tensorflow.truncated_normal", "tensorflow.multinomial", "tensorflow.multiply", "tensorflow.constant", "tensorflow.nn.embedding_lookup", "tensorflow.zeros", "tensorflow.concat", "tensorflow.cond.write", "LeakGANModel.LeakGAN.g_worker_recurrent_unit", "tensorflow.add", "tensorflow.cond.write", "tensorflow.cond.write", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "ta_emb_x.unstack.unstack.read", "tensorflow.constant", "tensorflow.nn.embedding_lookup", "tensorflow.zeros", "zip", "tensorflow.log", "zip", "tensorflow.multiply", "zip", "tensorflow.multiply", "zip", "tensorflow.split", "tensorflow.cond", "tensorflow.one_hot", "tensorflow.nn.softmax", "tensorflow.constant", "tensorflow.nn.softmax", "tensorflow.constant", "tensorflow.losses.cosine_distance", "tensorflow.clip_by_value", "tensorflow.one_hot", "tensorflow.log", "tensorflow.concat", "tensorflow.cond.write", "tensorflow.cond.write", "tensorflow.cond.write", "tensorflow.cond", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.to_int32", "tensorflow.clip_by_value", "tensorflow.losses.cosine_distance", "tensorflow.one_hot", "tensorflow.log", "tensorflow.cond", "tensorflow.split", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.subtract", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.to_int32", "tensorflow.clip_by_value", "tensorflow.transpose", "feature_array.write.write.read", "feature_array.write.write.read", "feature_array.write.write.read", "tensorflow.cond.write", "tensorflow.reshape", "tensorflow.reshape", "gen_x.write.write.stack"], "methods", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.create_Worker_recurrent_unit", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.create_Worker_output_unit", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.create_Manager_recurrent_unit", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.create_Manager_output_unit", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.rollout"], ["    ", "def", "__init__", "(", "self", ",", "sequence_length", ",", "num_classes", ",", "vocab_size", ",", "\n", "emb_dim", ",", "dis_emb_dim", ",", "filter_sizes", ",", "num_filters", ",", "batch_size", ",", "hidden_dim", ",", "start_token", ",", "goal_out_size", ",", "\n", "goal_size", ",", "step_size", ",", "D_model", ",", "LSTMlayer_num", "=", "1", ",", "l2_reg_lambda", "=", "0.0", ",", "learning_rate", "=", "0.001", ")", ":", "\n", "        ", "self", ".", "sequence_length", "=", "sequence_length", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "dis_emb_dim", "=", "dis_emb_dim", "\n", "self", ".", "filter_sizes", "=", "filter_sizes", "\n", "self", ".", "num_filters", "=", "num_filters", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "start_token", "=", "tf", ".", "constant", "(", "[", "start_token", "]", "*", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "self", ".", "LSTMlayer_num", "=", "LSTMlayer_num", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "num_filters_total", "=", "sum", "(", "self", ".", "num_filters", ")", "\n", "self", ".", "grad_clip", "=", "5.0", "\n", "self", ".", "goal_out_size", "=", "goal_out_size", "\n", "self", ".", "goal_size", "=", "goal_size", "\n", "self", ".", "step_size", "=", "step_size", "\n", "self", ".", "D_model", "=", "D_model", "\n", "self", ".", "FeatureExtractor_unit", "=", "self", ".", "D_model", ".", "FeatureExtractor_unit", "\n", "\n", "self", ".", "scope", "=", "self", ".", "D_model", ".", "feature_scope", "\n", "self", ".", "worker_params", "=", "[", "]", "\n", "self", ".", "manager_params", "=", "[", "]", "\n", "\n", "self", ".", "epis", "=", "0.65", "\n", "self", ".", "tem", "=", "0.8", "\n", "with", "tf", ".", "variable_scope", "(", "'place_holder'", ")", ":", "\n", "            ", "self", ".", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", "]", ")", "# sequence of tokens generated by generator", "\n", "self", ".", "reward", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", "/", "self", ".", "step_size", "]", ")", "# sequence of tokens generated by generator", "\n", "self", ".", "given_num", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ")", "\n", "self", ".", "drop_out", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "self", ".", "train", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "None", ",", "name", "=", "\"train\"", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Worker'", ")", ":", "\n", "            ", "self", ".", "g_embeddings", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "emb_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "worker_params", ".", "append", "(", "self", ".", "g_embeddings", ")", "\n", "self", ".", "g_worker_recurrent_unit", "=", "self", ".", "create_Worker_recurrent_unit", "(", "self", ".", "worker_params", ")", "# maps h_tm1 to h_t for generator", "\n", "self", ".", "g_worker_output_unit", "=", "self", ".", "create_Worker_output_unit", "(", "self", ".", "worker_params", ")", "# maps h_t to o_t (output token logits)", "\n", "self", ".", "W_workerOut_change", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "vocab_size", ",", "self", ".", "goal_size", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "\n", "self", ".", "g_change", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "goal_out_size", ",", "self", ".", "goal_size", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "worker_params", ".", "extend", "(", "[", "self", ".", "W_workerOut_change", ",", "self", ".", "g_change", "]", ")", "\n", "\n", "self", ".", "h0_worker", "=", "tf", ".", "zeros", "(", "[", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", "]", ")", "\n", "self", ".", "h0_worker", "=", "tf", ".", "stack", "(", "[", "self", ".", "h0_worker", ",", "self", ".", "h0_worker", "]", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Manager'", ")", ":", "\n", "            ", "self", ".", "g_manager_recurrent_unit", "=", "self", ".", "create_Manager_recurrent_unit", "(", "self", ".", "manager_params", ")", "# maps h_tm1 to h_t for generator", "\n", "self", ".", "g_manager_output_unit", "=", "self", ".", "create_Manager_output_unit", "(", "self", ".", "manager_params", ")", "# maps h_t to o_t (output token logits)", "\n", "self", ".", "h0_manager", "=", "tf", ".", "zeros", "(", "[", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", "]", ")", "\n", "self", ".", "h0_manager", "=", "tf", ".", "stack", "(", "[", "self", ".", "h0_manager", ",", "self", ".", "h0_manager", "]", ")", "\n", "\n", "self", ".", "goal_init", "=", "tf", ".", "get_variable", "(", "\"goal_init\"", ",", "initializer", "=", "tf", ".", "truncated_normal", "(", "[", "self", ".", "batch_size", ",", "self", ".", "goal_out_size", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "manager_params", ".", "extend", "(", "[", "self", ".", "goal_init", "]", ")", "\n", "\n", "", "self", ".", "padding_array", "=", "tf", ".", "constant", "(", "-", "1", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", "]", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"roll_out\"", ")", ":", "\n", "            ", "self", ".", "gen_for_reward", "=", "self", ".", "rollout", "(", "self", ".", "x", ",", "self", ".", "given_num", ")", "\n", "\n", "# processed for batch", "\n", "", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "            ", "self", ".", "processed_x", "=", "tf", ".", "transpose", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "self", ".", "x", ")", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# seq_length x batch_size x emb_dim", "\n", "\n", "", "gen_o", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "gen_x", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "int32", ",", "size", "=", "1", ",", "dynamic_size", "=", "True", ",", "infer_shape", "=", "True", ",", "clear_after_read", "=", "False", ")", "\n", "\n", "goal", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ",", "clear_after_read", "=", "False", ")", "\n", "\n", "feature_array", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", "+", "1", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ",", "clear_after_read", "=", "False", ")", "\n", "real_goal_array", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", "/", "self", ".", "step_size", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ",", "clear_after_read", "=", "False", ")", "\n", "\n", "gen_real_goal_array", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ",", "clear_after_read", "=", "False", ")", "\n", "\n", "gen_o_worker_array", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", "/", "self", ".", "step_size", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ",", "clear_after_read", "=", "False", ")", "\n", "\n", "def", "_g_recurrence", "(", "i", ",", "x_t", ",", "h_tm1", ",", "h_tm1_manager", ",", "gen_o", ",", "gen_x", ",", "goal", ",", "last_goal", ",", "real_goal", ",", "step_size", ",", "gen_real_goal_array", ",", "gen_o_worker_array", ")", ":", "\n", "## padding sentence by -1", "\n", "            ", "cur_sen", "=", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "tf", ".", "split", "(", "tf", ".", "concat", "(", "[", "tf", ".", "transpose", "(", "gen_x", ".", "stack", "(", ")", ",", "perm", "=", "[", "1", ",", "0", "]", ")", ",", "self", ".", "padding_array", "]", ",", "1", ")", ",", "[", "self", ".", "sequence_length", ",", "i", "]", ",", "1", ")", "[", "0", "]", ",", "lambda", ":", "self", ".", "padding_array", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ")", ":", "\n", "                ", "feature", "=", "self", ".", "FeatureExtractor_unit", "(", "cur_sen", ",", "self", ".", "drop_out", ")", "\n", "", "h_t_Worker", "=", "self", ".", "g_worker_recurrent_unit", "(", "x_t", ",", "h_tm1", ")", "# hidden_memory_tuple", "\n", "o_t_Worker", "=", "self", ".", "g_worker_output_unit", "(", "h_t_Worker", ")", "# batch x vocab , logits not prob", "\n", "o_t_Worker", "=", "tf", ".", "reshape", "(", "o_t_Worker", ",", "[", "self", ".", "batch_size", ",", "self", ".", "vocab_size", ",", "self", ".", "goal_size", "]", ")", "\n", "\n", "h_t_manager", "=", "self", ".", "g_manager_recurrent_unit", "(", "feature", ",", "h_tm1_manager", ")", "\n", "sub_goal", "=", "self", ".", "g_manager_output_unit", "(", "h_t_manager", ")", "\n", "sub_goal", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "sub_goal", ",", "1", ")", "\n", "goal", "=", "goal", ".", "write", "(", "i", ",", "sub_goal", ")", "\n", "\n", "real_sub_goal", "=", "tf", ".", "add", "(", "last_goal", ",", "sub_goal", ")", "\n", "\n", "w_g", "=", "tf", ".", "matmul", "(", "real_goal", ",", "self", ".", "g_change", ")", "#batch x goal_size", "\n", "w_g", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "w_g", ",", "1", ")", "\n", "gen_real_goal_array", "=", "gen_real_goal_array", ".", "write", "(", "i", ",", "real_goal", ")", "\n", "\n", "w_g", "=", "tf", ".", "expand_dims", "(", "w_g", ",", "2", ")", "#batch x goal_size x 1", "\n", "\n", "gen_o_worker_array", "=", "gen_o_worker_array", ".", "write", "(", "i", ",", "o_t_Worker", ")", "\n", "\n", "x_logits", "=", "tf", ".", "matmul", "(", "o_t_Worker", ",", "w_g", ")", "\n", "x_logits", "=", "tf", ".", "squeeze", "(", "x_logits", ")", "\n", "\n", "log_prob", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "softmax", "(", "\n", "tf", ".", "cond", "(", "i", ">", "1", ",", "lambda", ":", "tf", ".", "cond", "(", "self", ".", "train", ">", "0", ",", "lambda", ":", "self", ".", "tem", ",", "lambda", ":", "1.5", ")", ",", "lambda", ":", "1.5", ")", "*", "x_logits", ")", ")", "\n", "next_token", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "tf", ".", "multinomial", "(", "log_prob", ",", "1", ")", ",", "[", "self", ".", "batch_size", "]", ")", ",", "tf", ".", "int32", ")", "\n", "x_tp1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "next_token", ")", "# batch x emb_dim", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "cur_sen", "]", ")", ":", "\n", "                ", "gen_x", "=", "gen_x", ".", "write", "(", "i", ",", "next_token", ")", "# indices, batch_size", "\n", "", "gen_o", "=", "gen_o", ".", "write", "(", "i", ",", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "tf", ".", "one_hot", "(", "next_token", ",", "self", ".", "vocab_size", ",", "1.0", ",", "0.0", ")", ",", "\n", "tf", ".", "nn", ".", "softmax", "(", "x_logits", ")", ")", ",", "1", ")", ")", "# [batch_size] , prob", "\n", "return", "i", "+", "1", ",", "x_tp1", ",", "h_t_Worker", ",", "h_t_manager", ",", "gen_o", ",", "gen_x", ",", "goal", ",", "tf", ".", "cond", "(", "(", "(", "i", "+", "1", ")", "%", "step_size", ")", ">", "0", ",", "lambda", ":", "real_sub_goal", ",", "lambda", ":", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "goal_out_size", "]", ")", ")", ",", "tf", ".", "cond", "(", "(", "(", "i", "+", "1", ")", "%", "step_size", ")", ">", "0", ",", "lambda", ":", "real_goal", ",", "lambda", ":", "real_sub_goal", ")", ",", "step_size", ",", "gen_real_goal_array", ",", "gen_o_worker_array", "\n", "\n", "", "_", ",", "_", ",", "_", ",", "_", ",", "self", ".", "gen_o", ",", "self", ".", "gen_x", ",", "_", ",", "_", ",", "_", ",", "_", ",", "self", ".", "gen_real_goal_array", ",", "self", ".", "gen_o_worker_array", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "i", ",", "_1", ",", "_2", ",", "_3", ",", "_4", ",", "_5", ",", "_6", ",", "_7", ",", "_8", ",", "_9", ",", "_10", ",", "_11", ":", "i", "<", "self", ".", "sequence_length", ",", "\n", "body", "=", "_g_recurrence", ",", "\n", "loop_vars", "=", "(", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "self", ".", "start_token", ")", ",", "self", ".", "h0_worker", ",", "self", ".", "h0_manager", ",", "\n", "gen_o", ",", "gen_x", ",", "goal", ",", "tf", ".", "zeros", "(", "[", "self", ".", "batch_size", ",", "self", ".", "goal_out_size", "]", ")", ",", "self", ".", "goal_init", ",", "step_size", ",", "gen_real_goal_array", ",", "gen_o_worker_array", ")", ",", "parallel_iterations", "=", "1", ")", "\n", "\n", "self", ".", "gen_x", "=", "self", ".", "gen_x", ".", "stack", "(", ")", "# seq_length x batch_size", "\n", "\n", "self", ".", "gen_x", "=", "tf", ".", "transpose", "(", "self", ".", "gen_x", ",", "perm", "=", "[", "1", ",", "0", "]", ")", "# batch_size x seq_length", "\n", "\n", "self", ".", "gen_real_goal_array", "=", "self", ".", "gen_real_goal_array", ".", "stack", "(", ")", "# seq_length x batch_size x goal", "\n", "\n", "self", ".", "gen_real_goal_array", "=", "tf", ".", "transpose", "(", "self", ".", "gen_real_goal_array", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# batch_size x seq_length x goal", "\n", "\n", "self", ".", "gen_o_worker_array", "=", "self", ".", "gen_o_worker_array", ".", "stack", "(", ")", "# seq_length x batch_size* vocab*goal", "\n", "\n", "self", ".", "gen_o_worker_array", "=", "tf", ".", "transpose", "(", "self", ".", "gen_o_worker_array", ",", "perm", "=", "[", "1", ",", "0", ",", "2", ",", "3", "]", ")", "# batch_size x seq_length * vocab*goal", "\n", "\n", "sub_feature", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", "/", "self", ".", "step_size", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ",", "clear_after_read", "=", "False", ")", "\n", "\n", "all_sub_features", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ",", "clear_after_read", "=", "False", ")", "\n", "all_sub_goals", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ",", "clear_after_read", "=", "False", ")", "\n", "\n", "# supervised pretraining for generator", "\n", "g_predictions", "=", "tensor_array_ops", ".", "TensorArray", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "ta_emb_x", "=", "tensor_array_ops", ".", "TensorArray", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ")", "\n", "ta_emb_x", "=", "ta_emb_x", ".", "unstack", "(", "self", ".", "processed_x", ")", "\n", "\n", "\n", "def", "preTrain", "(", "i", ",", "x_t", ",", "g_predictions", ",", "h_tm1", ",", "input_x", ",", "h_tm1_manager", ",", "last_goal", ",", "real_goal", ",", "feature_array", ",", "real_goal_array", ",", "sub_feature", ",", "all_sub_features", ",", "all_sub_goals", ")", ":", "\n", "## padding sentence by -1", "\n", "            ", "cur_sen", "=", "tf", ".", "split", "(", "tf", ".", "concat", "(", "[", "tf", ".", "split", "(", "input_x", ",", "[", "i", ",", "self", ".", "sequence_length", "-", "i", "]", ",", "1", ")", "[", "0", "]", ",", "self", ".", "padding_array", "]", ",", "1", ")", ",", "[", "self", ".", "sequence_length", ",", "i", "]", ",", "1", ")", "[", "0", "]", "#padding sentence", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ")", ":", "\n", "                ", "feature", "=", "self", ".", "FeatureExtractor_unit", "(", "cur_sen", ",", "self", ".", "drop_out", ")", "\n", "", "feature_array", "=", "feature_array", ".", "write", "(", "i", ",", "feature", ")", "\n", "\n", "real_goal_array", "=", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "real_goal_array", ",", "\n", "lambda", ":", "real_goal_array", ".", "write", "(", "0", ",", "self", ".", "goal_init", ")", ")", "\n", "h_t_manager", "=", "self", ".", "g_manager_recurrent_unit", "(", "feature", ",", "h_tm1_manager", ")", "\n", "sub_goal", "=", "self", ".", "g_manager_output_unit", "(", "h_t_manager", ")", "\n", "sub_goal", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "sub_goal", ",", "1", ")", "\n", "\n", "h_t_Worker", "=", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "self", ".", "g_worker_recurrent_unit", "(", "x_t", ",", "h_tm1", ")", ",", "\n", "lambda", ":", "h_tm1", ")", "# hidden_memory_tuple", "\n", "o_t_Worker", "=", "self", ".", "g_worker_output_unit", "(", "h_t_Worker", ")", "# batch x vocab , logits not prob", "\n", "o_t_Worker", "=", "tf", ".", "reshape", "(", "o_t_Worker", ",", "[", "self", ".", "batch_size", ",", "self", ".", "vocab_size", ",", "self", ".", "goal_size", "]", ")", "\n", "\n", "real_sub_goal", "=", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "tf", ".", "add", "(", "last_goal", ",", "sub_goal", ")", ",", "\n", "lambda", ":", "real_goal", ")", "\n", "all_sub_goals", "=", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "all_sub_goals", ".", "write", "(", "i", "-", "1", ",", "real_goal", ")", ",", "\n", "lambda", ":", "all_sub_goals", ")", "\n", "\n", "w_g", "=", "tf", ".", "matmul", "(", "real_goal", ",", "self", ".", "g_change", ")", "# batch x goal_size", "\n", "w_g", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "w_g", ",", "1", ")", "\n", "w_g", "=", "tf", ".", "expand_dims", "(", "w_g", ",", "2", ")", "# batch x goal_size x 1", "\n", "\n", "x_logits", "=", "tf", ".", "matmul", "(", "o_t_Worker", ",", "w_g", ")", "\n", "x_logits", "=", "tf", ".", "squeeze", "(", "x_logits", ")", "\n", "\n", "g_predictions", "=", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "g_predictions", ".", "write", "(", "i", "-", "1", ",", "tf", ".", "nn", ".", "softmax", "(", "x_logits", ")", ")", ",", "lambda", ":", "g_predictions", ")", "\n", "\n", "sub_feature", "=", "tf", ".", "cond", "(", "(", "(", "(", "(", "i", ")", "%", "step_size", ")", ">", "0", ")", ")", ",", "\n", "lambda", ":", "sub_feature", ",", "\n", "lambda", ":", "(", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "sub_feature", ".", "write", "(", "i", "/", "step_size", "-", "1", ",", "tf", ".", "subtract", "(", "feature", ",", "feature_array", ".", "read", "(", "i", "-", "step_size", ")", ")", ")", ",", "\n", "lambda", ":", "sub_feature", ")", ")", ")", "\n", "\n", "all_sub_features", "=", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "tf", ".", "cond", "(", "(", "i", "%", "step_size", ")", ">", "0", ",", "lambda", ":", "all_sub_features", ".", "write", "(", "i", "-", "1", ",", "tf", ".", "subtract", "(", "feature", ",", "feature_array", ".", "read", "(", "i", "-", "i", "%", "step_size", ")", ")", ")", ",", "lambda", ":", "all_sub_features", ".", "write", "(", "i", "-", "1", ",", "tf", ".", "subtract", "(", "feature", ",", "feature_array", ".", "read", "(", "i", "-", "step_size", ")", ")", ")", ")", ",", "\n", "lambda", ":", "all_sub_features", ")", "\n", "\n", "real_goal_array", "=", "tf", ".", "cond", "(", "(", "(", "i", ")", "%", "step_size", ")", ">", "0", ",", "lambda", ":", "real_goal_array", ",", "\n", "lambda", ":", "tf", ".", "cond", "(", "(", "i", ")", "/", "step_size", "<", "self", ".", "sequence_length", "/", "step_size", ",", "\n", "lambda", ":", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "real_goal_array", ".", "write", "(", "(", "i", ")", "/", "step_size", ",", "real_sub_goal", ")", ",", "\n", "lambda", ":", "real_goal_array", ")", ",", "\n", "lambda", ":", "real_goal_array", ")", ")", "\n", "x_tp1", "=", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "ta_emb_x", ".", "read", "(", "i", "-", "1", ")", ",", "\n", "lambda", ":", "x_t", ")", "\n", "\n", "return", "i", "+", "1", ",", "x_tp1", ",", "g_predictions", ",", "h_t_Worker", ",", "input_x", ",", "h_t_manager", ",", "tf", ".", "cond", "(", "(", "(", "i", ")", "%", "step_size", ")", ">", "0", ",", "lambda", ":", "real_sub_goal", ",", "lambda", ":", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "goal_out_size", "]", ")", ")", ",", "tf", ".", "cond", "(", "(", "(", "i", ")", "%", "step_size", ")", ">", "0", ",", "lambda", ":", "real_goal", ",", "lambda", ":", "real_sub_goal", ")", ",", "feature_array", ",", "real_goal_array", ",", "sub_feature", ",", "all_sub_features", ",", "all_sub_goals", "\n", "\n", "", "_", ",", "_", ",", "self", ".", "g_predictions", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "self", ".", "feature_array", ",", "self", ".", "real_goal_array", ",", "self", ".", "sub_feature", ",", "self", ".", "all_sub_features", ",", "self", ".", "all_sub_goals", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "i", ",", "_1", ",", "_2", ",", "_3", ",", "_4", ",", "_5", ",", "_6", ",", "_7", ",", "_8", ",", "_9", ",", "_10", ",", "_11", ",", "_12", ":", "i", "<", "self", ".", "sequence_length", "+", "1", ",", "\n", "body", "=", "preTrain", ",", "\n", "loop_vars", "=", "(", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "self", ".", "start_token", ")", ",", "g_predictions", ",", "self", ".", "h0_worker", ",", "\n", "self", ".", "x", ",", "self", ".", "h0_manager", ",", "tf", ".", "zeros", "(", "[", "self", ".", "batch_size", ",", "self", ".", "goal_out_size", "]", ")", ",", "self", ".", "goal_init", ",", "feature_array", ",", "real_goal_array", ",", "sub_feature", ",", "all_sub_features", ",", "all_sub_goals", ")", ",", "\n", "parallel_iterations", "=", "1", ")", "\n", "\n", "self", ".", "sub_feature", "=", "self", ".", "sub_feature", ".", "stack", "(", ")", "# seq_length x batch_size x num_filter", "\n", "self", ".", "sub_feature", "=", "tf", ".", "transpose", "(", "self", ".", "sub_feature", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "self", ".", "real_goal_array", "=", "self", ".", "real_goal_array", ".", "stack", "(", ")", "\n", "self", ".", "real_goal_array", "=", "tf", ".", "transpose", "(", "self", ".", "real_goal_array", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "print", "self", ".", "real_goal_array", ".", "shape", "\n", "print", "self", ".", "sub_feature", ".", "shape", "\n", "self", ".", "pretrain_goal_loss", "=", "-", "tf", ".", "reduce_sum", "(", "1", "-", "tf", ".", "losses", ".", "cosine_distance", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "sub_feature", ",", "2", ")", ",", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "real_goal_array", ",", "2", ")", ",", "2", ")", "\n", ")", "/", "(", "self", ".", "sequence_length", "*", "self", ".", "batch_size", "/", "self", ".", "step_size", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"Manager_PreTrain_update\"", ")", ":", "\n", "            ", "pretrain_manager_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "learning_rate", ")", "\n", "\n", "self", ".", "pretrain_manager_grad", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "tf", ".", "gradients", "(", "self", ".", "pretrain_goal_loss", ",", "self", ".", "manager_params", ")", ",", "self", ".", "grad_clip", ")", "\n", "self", ".", "pretrain_manager_updates", "=", "pretrain_manager_opt", ".", "apply_gradients", "(", "zip", "(", "self", ".", "pretrain_manager_grad", ",", "self", ".", "manager_params", ")", ")", "\n", "# self.real_goal_array = self.real_goal_array.stack()", "\n", "\n", "", "self", ".", "g_predictions", "=", "tf", ".", "transpose", "(", "self", ".", "g_predictions", ".", "stack", "(", ")", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# batch_size x seq_length x vocab_size", "\n", "self", ".", "cross_entropy", "=", "tf", ".", "reduce_sum", "(", "self", ".", "g_predictions", "*", "tf", ".", "log", "(", "tf", ".", "clip_by_value", "(", "self", ".", "g_predictions", ",", "1e-20", ",", "1.0", ")", ")", ")", "/", "(", "\n", "self", ".", "batch_size", "*", "self", ".", "sequence_length", "*", "self", ".", "vocab_size", ")", "\n", "\n", "self", ".", "pretrain_worker_loss", "=", "-", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "one_hot", "(", "tf", ".", "to_int32", "(", "tf", ".", "reshape", "(", "self", ".", "x", ",", "[", "-", "1", "]", ")", ")", ",", "self", ".", "vocab_size", ",", "1.0", ",", "0.0", ")", "*", "tf", ".", "log", "(", "\n", "tf", ".", "clip_by_value", "(", "tf", ".", "reshape", "(", "self", ".", "g_predictions", ",", "[", "-", "1", ",", "self", ".", "vocab_size", "]", ")", ",", "1e-20", ",", "1.0", ")", "\n", ")", "\n", ")", "/", "(", "self", ".", "sequence_length", "*", "self", ".", "batch_size", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"Worker_PreTrain_update\"", ")", ":", "\n", "# training updates", "\n", "            ", "pretrain_worker_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "learning_rate", ")", "\n", "\n", "self", ".", "pretrain_worker_grad", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "tf", ".", "gradients", "(", "self", ".", "pretrain_worker_loss", ",", "self", ".", "worker_params", ")", ",", "self", ".", "grad_clip", ")", "\n", "self", ".", "pretrain_worker_updates", "=", "pretrain_worker_opt", ".", "apply_gradients", "(", "zip", "(", "self", ".", "pretrain_worker_grad", ",", "self", ".", "worker_params", ")", ")", "\n", "\n", "", "self", ".", "goal_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "self", ".", "reward", ",", "1", "-", "tf", ".", "losses", ".", "cosine_distance", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "sub_feature", ",", "2", ")", ",", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "real_goal_array", ",", "2", ")", ",", "2", ")", "\n", ")", ")", "/", "(", "self", ".", "sequence_length", "*", "self", ".", "batch_size", "/", "self", ".", "step_size", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"Manager_update\"", ")", ":", "\n", "            ", "manager_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "learning_rate", ")", "\n", "\n", "self", ".", "manager_grad", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "\n", "tf", ".", "gradients", "(", "self", ".", "goal_loss", ",", "self", ".", "manager_params", ")", ",", "self", ".", "grad_clip", ")", "\n", "self", ".", "manager_updates", "=", "manager_opt", ".", "apply_gradients", "(", "\n", "zip", "(", "self", ".", "manager_grad", ",", "self", ".", "manager_params", ")", ")", "\n", "\n", "\n", "", "self", ".", "all_sub_features", "=", "self", ".", "all_sub_features", ".", "stack", "(", ")", "\n", "self", ".", "all_sub_features", "=", "tf", ".", "transpose", "(", "self", ".", "all_sub_features", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "self", ".", "all_sub_goals", "=", "self", ".", "all_sub_goals", ".", "stack", "(", ")", "\n", "self", ".", "all_sub_goals", "=", "tf", ".", "transpose", "(", "self", ".", "all_sub_goals", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "# self.all_sub_features = tf.nn.l2_normalize(self.all_sub_features, 2)", "\n", "self", ".", "Worker_Reward", "=", "1", "-", "tf", ".", "losses", ".", "cosine_distance", "(", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "all_sub_features", ",", "2", ")", ",", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "all_sub_goals", ",", "2", ")", ",", "2", ")", "\n", "# print self.Worker_Reward.shape", "\n", "self", ".", "worker_loss", "=", "-", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "multiply", "(", "self", ".", "Worker_Reward", ",", "tf", ".", "one_hot", "(", "tf", ".", "to_int32", "(", "tf", ".", "reshape", "(", "self", ".", "x", ",", "[", "-", "1", "]", ")", ")", ",", "self", ".", "vocab_size", ",", "1.0", ",", "0.0", ")", "*", "tf", ".", "log", "(", "\n", "tf", ".", "clip_by_value", "(", "tf", ".", "reshape", "(", "self", ".", "g_predictions", ",", "[", "-", "1", ",", "self", ".", "vocab_size", "]", ")", ",", "1e-20", ",", "1.0", ")", ")", "\n", ")", "\n", ")", "/", "(", "self", ".", "sequence_length", "*", "self", ".", "batch_size", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"Worker_update\"", ")", ":", "\n", "# training updates", "\n", "            ", "worker_opt", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "learning_rate", ")", "\n", "self", ".", "worker_grad", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "\n", "tf", ".", "gradients", "(", "self", ".", "worker_loss", ",", "self", ".", "worker_params", ")", ",", "self", ".", "grad_clip", ")", "\n", "self", ".", "worker_updates", "=", "worker_opt", ".", "apply_gradients", "(", "\n", "zip", "(", "self", ".", "worker_grad", ",", "self", ".", "worker_params", ")", ")", "\n", "\n", "", "", "def", "rollout", "(", "self", ",", "input_x", ",", "given_num", ")", ":", "\n", "        ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "            ", "processed_x", "=", "tf", ".", "transpose", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "input_x", ")", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# seq_length x batch_size x emb_dim", "\n", "", "ta_emb_x", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ")", "\n", "ta_emb_x", "=", "ta_emb_x", ".", "unstack", "(", "processed_x", ")", "\n", "\n", "#Next is rollout", "\n", "gen_for_reward", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "int32", ",", "size", "=", "1", ",", "dynamic_size", "=", "True", ",", "infer_shape", "=", "True", ",", "clear_after_read", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.rollout": [[303, 393], ["tensorflow.python.ops.tensor_array_ops.TensorArray", "ta_emb_x.unstack.unstack.unstack", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "ta_x.unstack.unstack.unstack", "tensorflow.python.ops.control_flow_ops.while_loop", "tensorflow.python.ops.control_flow_ops.while_loop", "tensorflow.transpose.stack", "tensorflow.transpose", "tensorflow.device", "tensorflow.transpose", "tensorflow.transpose", "LeakGANModel.LeakGAN.g_manager_recurrent_unit", "LeakGANModel.LeakGAN.g_manager_output_unit", "tensorflow.nn.l2_normalize", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "LeakGANModel.LeakGAN.g_worker_recurrent_unit", "LeakGANModel.LeakGAN.g_worker_output_unit", "tensorflow.reshape", "LeakGANModel.LeakGAN.g_manager_recurrent_unit", "LeakGANModel.LeakGAN.g_manager_output_unit", "tensorflow.nn.l2_normalize", "tensorflow.add", "tensorflow.matmul", "tensorflow.nn.l2_normalize", "tensorflow.expand_dims", "tensorflow.matmul", "tensorflow.squeeze", "tensorflow.log", "tensorflow.cast", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.split", "tensorflow.variable_scope", "LeakGANModel.LeakGAN.FeatureExtractor_unit", "tensorflow.control_dependencies", "tensorflow.cond", "tensorflow.cond", "tensorflow.cond", "tensorflow.variable_scope", "LeakGANModel.LeakGAN.FeatureExtractor_unit", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.control_dependencies", "gen_x.write.write.write", "tensorflow.cond", "tensorflow.cond", "tensorflow.concat", "LeakGANModel.LeakGAN.g_worker_recurrent_unit", "tensorflow.add", "ta_emb_x.unstack.unstack.read", "tensorflow.multinomial", "tensorflow.constant", "tensorflow.nn.embedding_lookup", "tensorflow.zeros", "gen_x.write.write.write", "tensorflow.constant", "tensorflow.split", "tensorflow.constant", "ta_x.unstack.unstack.read", "tensorflow.concat", "tensorflow.split", "tensorflow.transpose", "gen_x.write.write.stack"], "methods", ["None"], ["ta_x", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "int32", ",", "size", "=", "self", ".", "sequence_length", ")", "\n", "ta_x", "=", "ta_x", ".", "unstack", "(", "tf", ".", "transpose", "(", "input_x", ",", "perm", "=", "[", "1", ",", "0", "]", ")", ")", "\n", "\n", "# When current index i < given_num, use the provided tokens as the input at each time step", "\n", "def", "_g_recurrence_1", "(", "i", ",", "x_t", ",", "input_x", ",", "gen_x", ",", "h_tm1", ",", "h_tm1_manager", ",", "last_goal", ",", "real_goal", ",", "give_num", ")", ":", "\n", "\n", "            ", "cur_sen", "=", "tf", ".", "split", "(", "tf", ".", "concat", "(", "[", "tf", ".", "split", "(", "input_x", ",", "[", "i", ",", "self", ".", "sequence_length", "-", "i", "]", ",", "1", ")", "[", "0", "]", ",", "self", ".", "padding_array", "]", ",", "1", ")", ",", "[", "self", ".", "sequence_length", ",", "i", "]", ",", "1", ")", "[", "0", "]", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ")", ":", "\n", "                ", "feature", "=", "self", ".", "FeatureExtractor_unit", "(", "cur_sen", ",", "self", ".", "drop_out", ")", "\n", "\n", "", "h_t_manager", "=", "self", ".", "g_manager_recurrent_unit", "(", "feature", ",", "h_tm1_manager", ")", "\n", "sub_goal", "=", "self", ".", "g_manager_output_unit", "(", "h_t_manager", ")", "\n", "sub_goal", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "sub_goal", ",", "1", ")", "\n", "\n", "h_t_Worker", "=", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "self", ".", "g_worker_recurrent_unit", "(", "x_t", ",", "h_tm1", ")", ",", "\n", "lambda", ":", "h_tm1", ")", "# hidden_memory_tuple", "\n", "\n", "real_sub_goal", "=", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "tf", ".", "add", "(", "last_goal", ",", "sub_goal", ")", ",", "lambda", ":", "real_goal", ")", "\n", "# real_goal_array = real_goal_array.write(i, real_sub_goal)", "\n", "\n", "x_tp1", "=", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "ta_emb_x", ".", "read", "(", "i", "-", "1", ")", ",", "lambda", ":", "x_t", ")", "\n", "\n", "# hidden_memory_tuple", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "cur_sen", "]", ")", ":", "\n", "                ", "gen_x", "=", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "gen_x", ".", "write", "(", "i", "-", "1", ",", "ta_x", ".", "read", "(", "i", "-", "1", ")", ")", ",", "lambda", ":", "gen_x", ")", "\n", "", "return", "i", "+", "1", ",", "x_tp1", ",", "input_x", ",", "gen_x", ",", "h_t_Worker", ",", "h_t_manager", ",", "tf", ".", "cond", "(", "(", "(", "i", ")", "%", "self", ".", "step_size", ")", ">", "0", ",", "lambda", ":", "real_sub_goal", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "goal_out_size", "]", ")", ")", ",", "tf", ".", "cond", "(", "(", "(", "i", ")", "%", "self", ".", "step_size", ")", ">", "0", ",", "lambda", ":", "real_goal", ",", "lambda", ":", "real_sub_goal", ")", ",", "give_num", "\n", "\n", "# When current index i >= given_num, start roll-out, use the output as time step t as the input at time step t+1", "\n", "", "def", "_g_recurrence_2", "(", "i", ",", "x_t", ",", "gen_x", ",", "h_tm1", ",", "h_tm1_manager", ",", "last_goal", ",", "real_goal", ")", ":", "\n", "# with tf.device('/cpu:0'):", "\n", "            ", "cur_sen", "=", "tf", ".", "cond", "(", "i", ">", "0", ",", "lambda", ":", "tf", ".", "split", "(", "tf", ".", "concat", "(", "[", "tf", ".", "transpose", "(", "gen_x", ".", "stack", "(", ")", ",", "perm", "=", "[", "1", ",", "0", "]", ")", ",", "self", ".", "padding_array", "]", ",", "1", ")", ",", "[", "self", ".", "sequence_length", ",", "i", "-", "1", "]", ",", "1", ")", "[", "0", "]", ",", "lambda", ":", "self", ".", "padding_array", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ")", ":", "\n", "                ", "feature", "=", "self", ".", "FeatureExtractor_unit", "(", "cur_sen", ",", "self", ".", "drop_out", ")", "\n", "", "h_t_Worker", "=", "self", ".", "g_worker_recurrent_unit", "(", "x_t", ",", "h_tm1", ")", "# hidden_memory_tuple", "\n", "o_t_Worker", "=", "self", ".", "g_worker_output_unit", "(", "h_t_Worker", ")", "# batch x vocab , logits not prob", "\n", "\n", "o_t_Worker", "=", "tf", ".", "reshape", "(", "o_t_Worker", ",", "[", "self", ".", "batch_size", ",", "self", ".", "vocab_size", ",", "self", ".", "goal_size", "]", ")", "\n", "\n", "h_t_manager", "=", "self", ".", "g_manager_recurrent_unit", "(", "feature", ",", "h_tm1_manager", ")", "\n", "sub_goal", "=", "self", ".", "g_manager_output_unit", "(", "h_t_manager", ")", "\n", "sub_goal", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "sub_goal", ",", "1", ")", "\n", "\n", "real_sub_goal", "=", "tf", ".", "add", "(", "last_goal", ",", "sub_goal", ")", "\n", "w_g", "=", "tf", ".", "matmul", "(", "real_goal", ",", "self", ".", "g_change", ")", "#batch x goal_size", "\n", "w_g", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "w_g", ",", "1", ")", "\n", "w_g", "=", "tf", ".", "expand_dims", "(", "w_g", ",", "2", ")", "#batch x goal_size x 1", "\n", "\n", "x_logits", "=", "tf", ".", "matmul", "(", "o_t_Worker", ",", "w_g", ")", "\n", "x_logits", "=", "tf", ".", "squeeze", "(", "x_logits", ")", "\n", "\n", "log_prob", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "softmax", "(", "x_logits", ")", ")", "\n", "next_token", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "tf", ".", "multinomial", "(", "log_prob", ",", "1", ")", ",", "[", "self", ".", "batch_size", "]", ")", ",", "tf", ".", "int32", ")", "\n", "x_tp1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "next_token", ")", "# batch x emb_dim", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "cur_sen", "]", ")", ":", "\n", "                ", "gen_x", "=", "gen_x", ".", "write", "(", "i", "-", "1", ",", "next_token", ")", "# indices, batch_size", "\n", "", "return", "i", "+", "1", ",", "x_tp1", ",", "gen_x", ",", "h_t_Worker", ",", "h_t_manager", ",", "tf", ".", "cond", "(", "(", "(", "i", ")", "%", "self", ".", "step_size", ")", ">", "0", ",", "lambda", ":", "real_sub_goal", ",", "\n", "lambda", ":", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "goal_out_size", "]", ")", ")", ",", "tf", ".", "cond", "(", "(", "(", "i", ")", "%", "self", ".", "step_size", ")", ">", "0", ",", "lambda", ":", "real_goal", ",", "lambda", ":", "real_sub_goal", ")", "\n", "\n", "", "i", ",", "x_t", ",", "_", ",", "gen_for_reward", ",", "h_worker", ",", "h_manager", ",", "self", ".", "last_goal_for_reward", ",", "self", ".", "real_goal_for_reward", ",", "given_num", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "i", ",", "_1", ",", "_2", ",", "_3", ",", "_4", ",", "_5", ",", "_6", ",", "_7", ",", "given_num", ":", "i", "<", "given_num", "+", "1", ",", "\n", "body", "=", "_g_recurrence_1", ",", "\n", "loop_vars", "=", "(", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "self", ".", "start_token", ")", ",", "self", ".", "x", ",", "gen_for_reward", ",", "\n", "self", ".", "h0_worker", ",", "self", ".", "h0_manager", ",", "tf", ".", "zeros", "(", "[", "self", ".", "batch_size", ",", "self", ".", "goal_out_size", "]", ")", ",", "self", ".", "goal_init", ",", "given_num", ")", ",", "parallel_iterations", "=", "1", ")", "##input groud-truth", "\n", "\n", "_", ",", "_", ",", "gen_for_reward", ",", "_", ",", "_", ",", "_", ",", "_", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "i", ",", "_1", ",", "_2", ",", "_3", ",", "_4", ",", "_5", ",", "_6", ":", "i", "<", "self", ".", "sequence_length", "+", "1", ",", "\n", "body", "=", "_g_recurrence_2", ",", "\n", "loop_vars", "=", "(", "i", ",", "x_t", ",", "gen_for_reward", ",", "h_worker", ",", "h_manager", ",", "self", ".", "last_goal_for_reward", ",", "self", ".", "real_goal_for_reward", ")", ",", "parallel_iterations", "=", "1", ")", "## rollout by original policy", "\n", "\n", "gen_for_reward", "=", "gen_for_reward", ".", "stack", "(", ")", "# seq_length x batch_size", "\n", "\n", "gen_for_reward", "=", "tf", ".", "transpose", "(", "gen_for_reward", ",", "perm", "=", "[", "1", ",", "0", "]", ")", "# batch_size x seq_length", "\n", "\n", "return", "gen_for_reward", "\n", "\n", "\n", "", "def", "update_feature_function", "(", "self", ",", "D_model", ")", ":", "\n", "        ", "self", ".", "FeatureExtractor_unit", "=", "D_model", ".", "FeatureExtractor_unit", "\n", "\n", "", "def", "pretrain_step", "(", "self", ",", "sess", ",", "x", ",", "dropout_keep_prob", ")", ":", "\n", "        ", "outputs", "=", "sess", ".", "run", "(", "[", "self", ".", "pretrain_worker_updates", ",", "self", ".", "pretrain_worker_loss", ",", "self", ".", "pretrain_manager_updates", ",", "self", ".", "pretrain_goal_loss", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "x", ":", "x", ",", "self", ".", "drop_out", ":", "dropout_keep_prob", "}", ")", "\n", "return", "outputs", "\n", "\n", "", "def", "generate", "(", "self", ",", "sess", ",", "dropout_keep_prob", ",", "train", "=", "1", ")", ":", "\n", "        ", "outputs", "=", "sess", ".", "run", "(", "self", ".", "gen_x", ",", "feed_dict", "=", "{", "self", ".", "drop_out", ":", "dropout_keep_prob", ",", "self", ".", "train", ":", "train", "}", ")", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.update_feature_function": [[395, 397], ["None"], "methods", ["None"], ["\n", "", "def", "create_Worker_recurrent_unit", "(", "self", ",", "params", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Worker'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.pretrain_step": [[398, 402], ["sess.run"], "methods", ["None"], ["# Weights and Bias for input and hidden tensor", "\n", "            ", "self", ".", "Wi_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "emb_dim", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "Ui_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "bi_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.generate": [[403, 406], ["sess.run"], "methods", ["None"], ["self", ".", "Wf_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "emb_dim", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "Uf_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "bf_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.create_Worker_recurrent_unit": [[407, 467], ["tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "params.extend", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.unstack", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.nn.tanh", "tensorflow.stack", "tensorflow.nn.tanh", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["self", ".", "Wog_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "emb_dim", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "Uog_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "bog_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "\n", "self", ".", "Wc_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "emb_dim", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "Uc_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "bc_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "params", ".", "extend", "(", "[", "\n", "self", ".", "Wi_worker", ",", "self", ".", "Ui_worker", ",", "self", ".", "bi_worker", ",", "\n", "self", ".", "Wf_worker", ",", "self", ".", "Uf_worker", ",", "self", ".", "bf_worker", ",", "\n", "self", ".", "Wog_worker", ",", "self", ".", "Uog_worker", ",", "self", ".", "bog_worker", ",", "\n", "self", ".", "Wc_worker", ",", "self", ".", "Uc_worker", ",", "self", ".", "bc_worker", "]", ")", "\n", "\n", "def", "unit", "(", "x", ",", "hidden_memory_tm1", ")", ":", "\n", "                ", "previous_hidden_state", ",", "c_prev", "=", "tf", ".", "unstack", "(", "hidden_memory_tm1", ")", "\n", "\n", "# Input Gate", "\n", "i", "=", "tf", ".", "sigmoid", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wi_worker", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Ui_worker", ")", "+", "self", ".", "bi_worker", "\n", ")", "\n", "\n", "# Forget Gate", "\n", "f", "=", "tf", ".", "sigmoid", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wf_worker", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Uf_worker", ")", "+", "self", ".", "bf_worker", "\n", ")", "\n", "\n", "# Output Gate", "\n", "o", "=", "tf", ".", "sigmoid", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wog_worker", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Uog_worker", ")", "+", "self", ".", "bog_worker", "\n", ")", "\n", "\n", "# New Memory Cell", "\n", "c_", "=", "tf", ".", "nn", ".", "tanh", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wc_worker", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Uc_worker", ")", "+", "self", ".", "bc_worker", "\n", ")", "\n", "\n", "# Final Memory cell", "\n", "c", "=", "f", "*", "c_prev", "+", "i", "*", "c_", "\n", "\n", "# Current Hidden state", "\n", "current_hidden_state", "=", "o", "*", "tf", ".", "nn", ".", "tanh", "(", "c", ")", "\n", "\n", "return", "tf", ".", "stack", "(", "[", "current_hidden_state", ",", "c", "]", ")", "\n", "\n", "", "return", "unit", "\n", "\n", "", "", "def", "create_Worker_output_unit", "(", "self", ",", "params", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Worker'", ")", ":", "\n", "            ", "self", ".", "W_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "vocab_size", "*", "self", ".", "goal_size", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "b_worker", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "vocab_size", "*", "self", ".", "goal_size", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "params", ".", "extend", "(", "[", "self", ".", "W_worker", ",", "self", ".", "b_worker", "]", ")", "\n", "\n", "def", "unit", "(", "hidden_memory_tuple", ")", ":", "\n", "                ", "hidden_state", ",", "c_prev", "=", "tf", ".", "unstack", "(", "hidden_memory_tuple", ")", "\n", "# hidden_state : batch x hidden_dim", "\n", "logits", "=", "tf", ".", "matmul", "(", "hidden_state", ",", "self", ".", "W_worker", ")", "+", "self", ".", "b_worker", "\n", "# output = tf.nn.softmax(logits)", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.create_Worker_output_unit": [[468, 482], ["tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "params.extend", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.unstack", "tensorflow.matmul"], "methods", ["None"], ["return", "logits", "\n", "\n", "", "return", "unit", "\n", "\n", "", "", "def", "create_Manager_recurrent_unit", "(", "self", ",", "params", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Manager'", ")", ":", "\n", "# Weights and Bias for input and hidden tensor", "\n", "            ", "self", ".", "Wi", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "num_filters_total", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "Ui", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "bi", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "\n", "self", ".", "Wf", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "num_filters_total", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "Uf", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "bf", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.create_Manager_recurrent_unit": [[483, 543], ["tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "params.extend", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.unstack", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.nn.tanh", "tensorflow.stack", "tensorflow.nn.tanh", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["self", ".", "Wog", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "num_filters_total", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "Uog", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "bog", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "\n", "self", ".", "Wc", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "num_filters_total", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "Uc", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "bc", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "params", ".", "extend", "(", "[", "\n", "self", ".", "Wi", ",", "self", ".", "Ui", ",", "self", ".", "bi", ",", "\n", "self", ".", "Wf", ",", "self", ".", "Uf", ",", "self", ".", "bf", ",", "\n", "self", ".", "Wog", ",", "self", ".", "Uog", ",", "self", ".", "bog", ",", "\n", "self", ".", "Wc", ",", "self", ".", "Uc", ",", "self", ".", "bc", "]", ")", "\n", "\n", "def", "unit", "(", "x", ",", "hidden_memory_tm1", ")", ":", "\n", "                ", "previous_hidden_state", ",", "c_prev", "=", "tf", ".", "unstack", "(", "hidden_memory_tm1", ")", "\n", "\n", "# Input Gate", "\n", "i", "=", "tf", ".", "sigmoid", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wi", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Ui", ")", "+", "self", ".", "bi", "\n", ")", "\n", "\n", "# Forget Gate", "\n", "f", "=", "tf", ".", "sigmoid", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wf", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Uf", ")", "+", "self", ".", "bf", "\n", ")", "\n", "\n", "# Output Gate", "\n", "o", "=", "tf", ".", "sigmoid", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wog", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Uog", ")", "+", "self", ".", "bog", "\n", ")", "\n", "\n", "# New Memory Cell", "\n", "c_", "=", "tf", ".", "nn", ".", "tanh", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wc", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Uc", ")", "+", "self", ".", "bc", "\n", ")", "\n", "\n", "# Final Memory cell", "\n", "c", "=", "f", "*", "c_prev", "+", "i", "*", "c_", "\n", "\n", "# Current Hidden state", "\n", "current_hidden_state", "=", "o", "*", "tf", ".", "nn", ".", "tanh", "(", "c", ")", "\n", "\n", "return", "tf", ".", "stack", "(", "[", "current_hidden_state", ",", "c", "]", ")", "\n", "\n", "", "return", "unit", "\n", "\n", "", "", "def", "create_Manager_output_unit", "(", "self", ",", "params", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Manager'", ")", ":", "\n", "            ", "self", ".", "Wo", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "goal_out_size", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "self", ".", "bo", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "[", "self", ".", "goal_out_size", "]", ",", "stddev", "=", "0.1", ")", ")", "\n", "params", ".", "extend", "(", "[", "self", ".", "Wo", ",", "self", ".", "bo", "]", ")", "\n", "\n", "def", "unit", "(", "hidden_memory_tuple", ")", ":", "\n", "                ", "hidden_state", ",", "c_prev", "=", "tf", ".", "unstack", "(", "hidden_memory_tuple", ")", "\n", "# hidden_state : batch x hidden_dim", "\n", "logits", "=", "tf", ".", "matmul", "(", "hidden_state", ",", "self", ".", "Wo", ")", "+", "self", ".", "bo", "\n", "# output = tf.nn.softmax(logits)", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.create_Manager_output_unit": [[544, 558], ["tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "params.extend", "tensorflow.random_normal", "tensorflow.random_normal", "tensorflow.unstack", "tensorflow.matmul"], "methods", ["None"], ["return", "logits", "\n", "\n", "", "return", "unit", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.__init__": [[6, 102], ["tensorflow.constant", "tensorflow.set_random_seed", "tensorflow.placeholder", "tensorflow.zeros", "tensorflow.stack", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.control_flow_ops.while_loop", "target_lstm.TARGET_LSTM.gen_x.stack", "tensorflow.transpose", "tensorflow.python.ops.tensor_array_ops.TensorArray", "tensorflow.python.ops.tensor_array_ops.TensorArray", "ta_emb_x.unstack.unstack.unstack", "tensorflow.python.ops.control_flow_ops.while_loop", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.variable_scope", "tensorflow.Variable", "target_lstm.TARGET_LSTM.g_params.append", "target_lstm.TARGET_LSTM.create_recurrent_unit", "target_lstm.TARGET_LSTM.create_output_unit", "tensorflow.device", "tensorflow.transpose", "target_lstm.TARGET_LSTM.g_recurrent_unit", "target_lstm.TARGET_LSTM.g_output_unit", "tensorflow.log", "tensorflow.cast", "tensorflow.nn.embedding_lookup", "gen_o.write.write.write", "gen_x.write.write.write", "target_lstm.TARGET_LSTM.g_recurrent_unit", "target_lstm.TARGET_LSTM.g_output_unit", "g_predictions.write.write.write", "ta_emb_x.unstack.unstack.read", "target_lstm.TARGET_LSTM.g_predictions.stack", "tensorflow.reduce_sum", "tensorflow.reshape", "target_lstm.TARGET_LSTM.init_matrix", "tensorflow.nn.embedding_lookup", "tensorflow.nn.softmax", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.nn.softmax", "tensorflow.reduce_sum", "tensorflow.multinomial", "tensorflow.multiply", "tensorflow.constant", "tensorflow.nn.embedding_lookup", "tensorflow.constant", "tensorflow.nn.embedding_lookup", "tensorflow.log", "tensorflow.reduce_sum", "tensorflow.one_hot", "tensorflow.nn.softmax", "tensorflow.clip_by_value", "tensorflow.one_hot", "tensorflow.log", "tensorflow.to_int32", "tensorflow.reshape", "tensorflow.one_hot", "tensorflow.log", "tensorflow.reshape", "tensorflow.to_int32", "tensorflow.reshape", "tensorflow.reshape"], "methods", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.create_recurrent_unit", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.create_output_unit", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix"], ["    ", "def", "__init__", "(", "self", ",", "num_emb", ",", "batch_size", ",", "emb_dim", ",", "hidden_dim", ",", "sequence_length", ",", "start_token", ")", ":", "\n", "        ", "self", ".", "num_emb", "=", "num_emb", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "sequence_length", "=", "sequence_length", "\n", "self", ".", "start_token", "=", "tf", ".", "constant", "(", "[", "start_token", "]", "*", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "self", ".", "g_params", "=", "[", "]", "\n", "self", ".", "temperature", "=", "1.0", "\n", "\n", "tf", ".", "set_random_seed", "(", "233", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'generator'", ")", ":", "\n", "            ", "self", ".", "g_embeddings", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "num_emb", ",", "self", ".", "emb_dim", "]", ")", ")", "\n", "self", ".", "g_params", ".", "append", "(", "self", ".", "g_embeddings", ")", "\n", "self", ".", "g_recurrent_unit", "=", "self", ".", "create_recurrent_unit", "(", "self", ".", "g_params", ")", "# maps h_tm1 to h_t for generator", "\n", "self", ".", "g_output_unit", "=", "self", ".", "create_output_unit", "(", "self", ".", "g_params", ")", "# maps h_t to o_t (output token logits)", "\n", "\n", "# placeholder definition", "\n", "", "self", ".", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "sequence_length", "]", ")", "# sequence of tokens generated by generator", "\n", "\n", "# processed for batch", "\n", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "            ", "self", ".", "processed_x", "=", "tf", ".", "transpose", "(", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "self", ".", "x", ")", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# seq_length x batch_size x emb_dim", "\n", "\n", "# initial states", "\n", "", "self", ".", "h0", "=", "tf", ".", "zeros", "(", "[", "self", ".", "batch_size", ",", "self", ".", "hidden_dim", "]", ")", "\n", "self", ".", "h0", "=", "tf", ".", "stack", "(", "[", "self", ".", "h0", ",", "self", ".", "h0", "]", ")", "\n", "\n", "# generator on initial randomness", "\n", "gen_o", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "gen_x", "=", "tensor_array_ops", ".", "TensorArray", "(", "dtype", "=", "tf", ".", "int32", ",", "size", "=", "self", ".", "sequence_length", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "\n", "def", "_g_recurrence", "(", "i", ",", "x_t", ",", "h_tm1", ",", "gen_o", ",", "gen_x", ")", ":", "\n", "            ", "h_t", "=", "self", ".", "g_recurrent_unit", "(", "x_t", ",", "h_tm1", ")", "# hidden_memory_tuple", "\n", "o_t", "=", "self", ".", "g_output_unit", "(", "h_t", ")", "# batch x vocab , logits not prob", "\n", "log_prob", "=", "tf", ".", "log", "(", "tf", ".", "nn", ".", "softmax", "(", "o_t", ")", ")", "\n", "next_token", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "tf", ".", "multinomial", "(", "log_prob", ",", "1", ")", ",", "[", "self", ".", "batch_size", "]", ")", ",", "tf", ".", "int32", ")", "\n", "x_tp1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "next_token", ")", "# batch x emb_dim", "\n", "gen_o", "=", "gen_o", ".", "write", "(", "i", ",", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "tf", ".", "one_hot", "(", "next_token", ",", "self", ".", "num_emb", ",", "1.0", ",", "0.0", ")", ",", "\n", "tf", ".", "nn", ".", "softmax", "(", "o_t", ")", ")", ",", "1", ")", ")", "# [batch_size] , prob", "\n", "gen_x", "=", "gen_x", ".", "write", "(", "i", ",", "next_token", ")", "# indices, batch_size", "\n", "return", "i", "+", "1", ",", "x_tp1", ",", "h_t", ",", "gen_o", ",", "gen_x", "\n", "\n", "", "_", ",", "_", ",", "_", ",", "self", ".", "gen_o", ",", "self", ".", "gen_x", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "i", ",", "_1", ",", "_2", ",", "_3", ",", "_4", ":", "i", "<", "self", ".", "sequence_length", ",", "\n", "body", "=", "_g_recurrence", ",", "\n", "loop_vars", "=", "(", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "self", ".", "start_token", ")", ",", "self", ".", "h0", ",", "gen_o", ",", "gen_x", ")", "\n", ")", "\n", "\n", "self", ".", "gen_x", "=", "self", ".", "gen_x", ".", "stack", "(", ")", "# seq_length x batch_size", "\n", "self", ".", "gen_x", "=", "tf", ".", "transpose", "(", "self", ".", "gen_x", ",", "perm", "=", "[", "1", ",", "0", "]", ")", "# batch_size x seq_length", "\n", "\n", "# supervised pretraining for generator", "\n", "g_predictions", "=", "tensor_array_ops", ".", "TensorArray", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "\n", "ta_emb_x", "=", "tensor_array_ops", ".", "TensorArray", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "self", ".", "sequence_length", ")", "\n", "ta_emb_x", "=", "ta_emb_x", ".", "unstack", "(", "self", ".", "processed_x", ")", "\n", "\n", "def", "_pretrain_recurrence", "(", "i", ",", "x_t", ",", "h_tm1", ",", "g_predictions", ")", ":", "\n", "            ", "h_t", "=", "self", ".", "g_recurrent_unit", "(", "x_t", ",", "h_tm1", ")", "\n", "o_t", "=", "self", ".", "g_output_unit", "(", "h_t", ")", "\n", "g_predictions", "=", "g_predictions", ".", "write", "(", "i", ",", "tf", ".", "nn", ".", "softmax", "(", "o_t", ")", ")", "# batch x vocab_size", "\n", "x_tp1", "=", "ta_emb_x", ".", "read", "(", "i", ")", "\n", "return", "i", "+", "1", ",", "x_tp1", ",", "h_t", ",", "g_predictions", "\n", "\n", "", "_", ",", "_", ",", "_", ",", "self", ".", "g_predictions", "=", "control_flow_ops", ".", "while_loop", "(", "\n", "cond", "=", "lambda", "i", ",", "_1", ",", "_2", ",", "_3", ":", "i", "<", "self", ".", "sequence_length", ",", "\n", "body", "=", "_pretrain_recurrence", ",", "\n", "loop_vars", "=", "(", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "g_embeddings", ",", "self", ".", "start_token", ")", ",", "\n", "self", ".", "h0", ",", "g_predictions", ")", ")", "\n", "\n", "self", ".", "g_predictions", "=", "tf", ".", "transpose", "(", "\n", "self", ".", "g_predictions", ".", "stack", "(", ")", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "# batch_size x seq_length x vocab_size", "\n", "self", ".", "cross_entropy", "=", "tf", ".", "reduce_sum", "(", "\n", "self", ".", "g_predictions", "*", "tf", ".", "log", "(", "tf", ".", "clip_by_value", "(", "self", ".", "g_predictions", ",", "1e-20", ",", "1.0", ")", ")", ")", "/", "(", "\n", "self", ".", "batch_size", "*", "self", ".", "sequence_length", "*", "5000", ")", "\n", "# pretraining loss", "\n", "self", ".", "pretrain_loss", "=", "-", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "one_hot", "(", "tf", ".", "to_int32", "(", "tf", ".", "reshape", "(", "self", ".", "x", ",", "[", "-", "1", "]", ")", ")", ",", "self", ".", "num_emb", ",", "1.0", ",", "0.0", ")", "*", "tf", ".", "log", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "g_predictions", ",", "[", "-", "1", ",", "self", ".", "num_emb", "]", ")", ")", ")", "/", "(", "self", ".", "sequence_length", "*", "self", ".", "batch_size", ")", "\n", "\n", "self", ".", "out_loss", "=", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "reshape", "(", "\n", "-", "tf", ".", "reduce_sum", "(", "\n", "tf", ".", "one_hot", "(", "tf", ".", "to_int32", "(", "tf", ".", "reshape", "(", "self", ".", "x", ",", "[", "-", "1", "]", ")", ")", ",", "self", ".", "num_emb", ",", "1.0", ",", "0.0", ")", "*", "tf", ".", "log", "(", "\n", "tf", ".", "reshape", "(", "self", ".", "g_predictions", ",", "[", "-", "1", ",", "self", ".", "num_emb", "]", ")", ")", ",", "1", "\n", ")", ",", "[", "-", "1", ",", "self", ".", "sequence_length", "]", "\n", ")", ",", "1", "\n", ")", "# batch_size", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.generate": [[104, 108], ["session.run"], "methods", ["None"], ["", "def", "generate", "(", "self", ",", "session", ",", "a", ",", "b", ")", ":", "\n", "# h0 = np.random.normal(size=self.hidden_dim)", "\n", "        ", "outputs", "=", "session", ".", "run", "(", "self", ".", "gen_x", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix": [[109, 111], ["tensorflow.random_normal"], "methods", ["None"], ["", "def", "init_matrix", "(", "self", ",", "shape", ")", ":", "\n", "        ", "return", "tf", ".", "random_normal", "(", "shape", ",", "stddev", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.create_recurrent_unit": [[112, 171], ["tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "params.extend", "target_lstm.TARGET_LSTM.init_matrix", "target_lstm.TARGET_LSTM.init_matrix", "target_lstm.TARGET_LSTM.init_matrix", "target_lstm.TARGET_LSTM.init_matrix", "target_lstm.TARGET_LSTM.init_matrix", "target_lstm.TARGET_LSTM.init_matrix", "target_lstm.TARGET_LSTM.init_matrix", "target_lstm.TARGET_LSTM.init_matrix", "target_lstm.TARGET_LSTM.init_matrix", "target_lstm.TARGET_LSTM.init_matrix", "target_lstm.TARGET_LSTM.init_matrix", "target_lstm.TARGET_LSTM.init_matrix", "tensorflow.unstack", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.sigmoid", "tensorflow.nn.tanh", "tensorflow.stack", "tensorflow.nn.tanh", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix"], ["", "def", "create_recurrent_unit", "(", "self", ",", "params", ")", ":", "\n", "# Weights and Bias for input and hidden tensor", "\n", "        ", "self", ".", "Wi", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "emb_dim", ",", "self", ".", "hidden_dim", "]", ")", ")", "\n", "self", ".", "Ui", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", "]", ")", ")", "\n", "self", ".", "bi", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "hidden_dim", "]", ")", ")", "\n", "\n", "self", ".", "Wf", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "emb_dim", ",", "self", ".", "hidden_dim", "]", ")", ")", "\n", "self", ".", "Uf", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", "]", ")", ")", "\n", "self", ".", "bf", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "hidden_dim", "]", ")", ")", "\n", "\n", "self", ".", "Wog", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "emb_dim", ",", "self", ".", "hidden_dim", "]", ")", ")", "\n", "self", ".", "Uog", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", "]", ")", ")", "\n", "self", ".", "bog", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "hidden_dim", "]", ")", ")", "\n", "\n", "self", ".", "Wc", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "emb_dim", ",", "self", ".", "hidden_dim", "]", ")", ")", "\n", "self", ".", "Uc", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", "]", ")", ")", "\n", "self", ".", "bc", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "hidden_dim", "]", ")", ")", "\n", "params", ".", "extend", "(", "[", "\n", "self", ".", "Wi", ",", "self", ".", "Ui", ",", "self", ".", "bi", ",", "\n", "self", ".", "Wf", ",", "self", ".", "Uf", ",", "self", ".", "bf", ",", "\n", "self", ".", "Wog", ",", "self", ".", "Uog", ",", "self", ".", "bog", ",", "\n", "self", ".", "Wc", ",", "self", ".", "Uc", ",", "self", ".", "bc", "]", ")", "\n", "\n", "def", "unit", "(", "x", ",", "hidden_memory_tm1", ")", ":", "\n", "            ", "previous_hidden_state", ",", "c_prev", "=", "tf", ".", "unstack", "(", "hidden_memory_tm1", ")", "\n", "\n", "# Input Gate", "\n", "i", "=", "tf", ".", "sigmoid", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wi", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Ui", ")", "+", "self", ".", "bi", "\n", ")", "\n", "\n", "# Forget Gate", "\n", "f", "=", "tf", ".", "sigmoid", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wf", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Uf", ")", "+", "self", ".", "bf", "\n", ")", "\n", "\n", "# Output Gate", "\n", "o", "=", "tf", ".", "sigmoid", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wog", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Uog", ")", "+", "self", ".", "bog", "\n", ")", "\n", "\n", "# New Memory Cell", "\n", "c_", "=", "tf", ".", "nn", ".", "tanh", "(", "\n", "tf", ".", "matmul", "(", "x", ",", "self", ".", "Wc", ")", "+", "\n", "tf", ".", "matmul", "(", "previous_hidden_state", ",", "self", ".", "Uc", ")", "+", "self", ".", "bc", "\n", ")", "\n", "\n", "# Final Memory cell", "\n", "c", "=", "f", "*", "c_prev", "+", "i", "*", "c_", "\n", "\n", "# Current Hidden state", "\n", "current_hidden_state", "=", "o", "*", "tf", ".", "nn", ".", "tanh", "(", "c", ")", "\n", "\n", "return", "tf", ".", "stack", "(", "[", "current_hidden_state", ",", "c", "]", ")", "\n", "\n", "", "return", "unit", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.create_output_unit": [[172, 185], ["tensorflow.Variable", "tensorflow.Variable", "params.extend", "target_lstm.TARGET_LSTM.init_matrix", "target_lstm.TARGET_LSTM.init_matrix", "tensorflow.unstack", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.init_matrix"], ["", "def", "create_output_unit", "(", "self", ",", "params", ")", ":", "\n", "        ", "self", ".", "Wo", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "hidden_dim", ",", "self", ".", "num_emb", "]", ")", ")", "\n", "self", ".", "bo", "=", "tf", ".", "Variable", "(", "self", ".", "init_matrix", "(", "[", "self", ".", "num_emb", "]", ")", ")", "\n", "params", ".", "extend", "(", "[", "self", ".", "Wo", ",", "self", ".", "bo", "]", ")", "\n", "\n", "def", "unit", "(", "hidden_memory_tuple", ")", ":", "\n", "            ", "hidden_state", ",", "c_prev", "=", "tf", ".", "unstack", "(", "hidden_memory_tuple", ")", "\n", "# hidden_state : batch x hidden_dim", "\n", "logits", "=", "tf", ".", "matmul", "(", "hidden_state", ",", "self", ".", "Wo", ")", "+", "self", ".", "bo", "\n", "# output = tf.nn.softmax(logits)", "\n", "return", "logits", "\n", "\n", "", "return", "unit", "", "", "", ""]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.generate_samples": [[75, 85], ["range", "int", "generated_samples.extend", "open", "trainable_model.generate", "fout.write", "str"], "function", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.generate"], ["", "return", "np", ".", "mean", "(", "nll", ")", ",", "np", ".", "mean", "(", "entro", ")", "\n", "\n", "", "def", "pre_train_epoch", "(", "sess", ",", "trainable_model", ",", "data_loader", ")", ":", "\n", "# Pre-train the generator using MLE for one epoch", "\n", "    ", "supervised_g_losses", "=", "[", "]", "\n", "data_loader", ".", "reset_pointer", "(", ")", "\n", "\n", "for", "it", "in", "xrange", "(", "data_loader", ".", "num_batch", "/", "20", ")", ":", "\n", "        ", "batch", "=", "data_loader", ".", "next_batch", "(", ")", "\n", "_", ",", "g_loss", ",", "_", ",", "_", "=", "trainable_model", ".", "pretrain_step", "(", "sess", ",", "batch", ",", "1.0", ")", "\n", "supervised_g_losses", ".", "append", "(", "g_loss", ")", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.target_loss": [[86, 97], ["data_loader.reset_pointer", "range", "numpy.mean", "data_loader.next_batch", "sess.run", "nll.append"], "function", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.reset_pointer", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.next_batch"], ["\n", "", "return", "np", ".", "mean", "(", "supervised_g_losses", ")", "\n", "\n", "", "def", "redistribution", "(", "idx", ",", "total", ",", "min_v", ")", ":", "\n", "    ", "idx", "=", "(", "idx", "+", "0.0", ")", "/", "(", "total", "+", "0.0", ")", "*", "16.0", "\n", "return", "(", "np", ".", "exp", "(", "idx", "-", "8.0", ")", "/", "(", "1.0", "+", "np", ".", "exp", "(", "idx", "-", "8.0", ")", ")", ")", "\n", "\n", "", "def", "rescale", "(", "reward", ",", "rollout_num", "=", "1.0", ")", ":", "\n", "    ", "reward", "=", "np", ".", "array", "(", "reward", ")", "\n", "x", ",", "y", "=", "reward", ".", "shape", "\n", "ret", "=", "np", ".", "zeros", "(", "(", "x", ",", "y", ")", ")", "\n", "for", "i", "in", "range", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.pre_train_epoch": [[98, 109], ["data_loader.reset_pointer", "range", "numpy.mean", "data_loader.next_batch", "trainable_model.pretrain_step", "supervised_g_losses.append"], "function", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.reset_pointer", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.next_batch", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.pretrain_step"], ["        ", "l", "=", "reward", "[", "i", "]", "\n", "rescalar", "=", "{", "}", "\n", "for", "s", "in", "l", ":", "\n", "            ", "rescalar", "[", "s", "]", "=", "s", "\n", "", "idxx", "=", "1", "\n", "min_s", "=", "1.0", "\n", "max_s", "=", "0.0", "\n", "for", "s", "in", "rescalar", ":", "\n", "            ", "rescalar", "[", "s", "]", "=", "redistribution", "(", "idxx", ",", "len", "(", "l", ")", ",", "min_s", ")", "\n", "idxx", "+=", "1", "\n", "", "for", "j", "in", "range", "(", "y", ")", ":", "\n", "            ", "ret", "[", "i", ",", "j", "]", "=", "rescalar", "[", "reward", "[", "i", ",", "j", "]", "]", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.redistribution": [[110, 113], ["numpy.exp", "numpy.exp"], "function", ["None"], ["", "", "return", "ret", "\n", "\n", "", "def", "get_reward", "(", "model", ",", "dis", ",", "sess", ",", "input_x", ",", "rollout_num", ",", "dis_dropout_keep_prob", ",", "total_epoch", ",", "data_loader", ")", ":", "\n", "    ", "rewards", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.rescale": [[114, 132], ["numpy.array", "numpy.zeros", "range", "range", "Main.redistribution", "len"], "function", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.redistribution"], ["\n", "pos_num", "=", "(", "total_epoch", "/", "20.0", ")", "*", "10", "\n", "# pos_num = 64", "\n", "pos_num", "=", "int", "(", "pos_num", ")", "\n", "\n", "pos_num", "=", "min", "(", "BATCH_SIZE", ",", "pos_num", ")", "# add posnum", "\n", "for", "i", "in", "range", "(", "rollout_num", ")", ":", "\n", "        ", "batch", "=", "data_loader", ".", "next_batch", "(", ")", "\n", "for", "given_num", "in", "range", "(", "1", ",", "model", ".", "sequence_length", "/", "model", ".", "step_size", ")", ":", "\n", "            ", "real_given_num", "=", "given_num", "*", "model", ".", "step_size", "\n", "feed", "=", "{", "model", ".", "x", ":", "input_x", ",", "model", ".", "given_num", ":", "real_given_num", ",", "model", ".", "drop_out", ":", "1.0", "}", "\n", "samples", "=", "sess", ".", "run", "(", "model", ".", "gen_for_reward", ",", "feed", ")", "\n", "\n", "samples", "=", "np", ".", "concatenate", "(", "(", "samples", ",", "batch", "[", "0", ":", "pos_num", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "# print samples.shape", "\n", "feed", "=", "{", "dis", ".", "D_input_x", ":", "samples", ",", "dis", ".", "dropout_keep_prob", ":", "dis_dropout_keep_prob", "}", "\n", "ypred_for_auc", "=", "sess", ".", "run", "(", "dis", ".", "ypred_for_auc", ",", "feed", ")", "\n", "ypred", "=", "np", ".", "array", "(", "[", "item", "[", "1", "]", "for", "item", "in", "ypred_for_auc", "]", ")", "\n", "if", "i", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.get_reward": [[133, 160], ["range", "Main.rescale", "range", "sess.run", "numpy.array", "numpy.array", "numpy.transpose", "sess.run", "sess.run", "numpy.array", "rescale.append", "numpy.array", "rescale.append"], "function", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.rescale"], ["                ", "rewards", ".", "append", "(", "ypred", ")", "\n", "", "else", ":", "\n", "                ", "rewards", "[", "given_num", "-", "1", "]", "+=", "ypred", "\n", "\n", "# the last token reward", "\n", "", "", "samples", "=", "np", ".", "concatenate", "(", "(", "input_x", ",", "batch", "[", "0", ":", "pos_num", ",", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "feed", "=", "{", "dis", ".", "D_input_x", ":", "samples", ",", "dis", ".", "dropout_keep_prob", ":", "1.0", "}", "\n", "ypred_for_auc", "=", "sess", ".", "run", "(", "dis", ".", "ypred_for_auc", ",", "feed", ")", "\n", "ypred", "=", "np", ".", "array", "(", "[", "item", "[", "1", "]", "for", "item", "in", "ypred_for_auc", "]", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "rewards", ".", "append", "(", "ypred", ")", "\n", "", "else", ":", "\n", "            ", "rewards", "[", "model", ".", "sequence_length", "/", "model", ".", "step_size", "-", "1", "]", "+=", "ypred", "\n", "", "", "rewards", "=", "rescale", "(", "np", ".", "array", "(", "rewards", ")", ",", "rollout_num", ")", "\n", "rewards", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "rewards", ")", ")", "/", "(", "1.0", "*", "rollout_num", ")", "# batch_size x seq_length", "\n", "rewards", "=", "rewards", "[", "0", ":", "BATCH_SIZE", ",", ":", "]", "\n", "return", "rewards", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "random", ".", "seed", "(", "SEED", ")", "\n", "np", ".", "random", ".", "seed", "(", "SEED", ")", "\n", "assert", "START_TOKEN", "==", "0", "\n", "\n", "gen_data_loader", "=", "Gen_Data_loader", "(", "BATCH_SIZE", ",", "SEQ_LENGTH", ")", "\n", "vocab_size", "=", "4839", "\n", "dis_data_loader", "=", "Dis_dataloader", "(", "BATCH_SIZE", ",", "SEQ_LENGTH", ")", "\n", "discriminator", "=", "Discriminator", "(", "SEQ_LENGTH", ",", "num_classes", "=", "2", ",", "vocab_size", "=", "vocab_size", ",", "dis_emb_dim", "=", "dis_embedding_dim", ",", "filter_sizes", "=", "dis_filter_sizes", ",", "num_filters", "=", "dis_num_filters", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "hidden_dim", "=", "HIDDEN_DIM", ",", "start_token", "=", "START_TOKEN", ",", "goal_out_size", "=", "GOAL_OUT_SIZE", ",", "step_size", "=", "4", ")", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.main": [[161, 321], ["random.seed", "numpy.random.seed", "dataloader.Gen_Data_loader", "dataloader.Gen_Data_loader", "open", "cPickle.load", "dataloader.Dis_dataloader", "Discriminator.Discriminator", "LeakGANModel.LeakGAN", "tensorflow.ConfigProto", "tensorflow.Session", "tf.Session.run", "Main.generate_samples", "range", "open", "dataloader.Gen_Data_loader.create_batches", "tensorflow.global_variables", "tensorflow.train.Saver", "tensorflow.train.latest_checkpoint", "print", "print", "print", "open.write", "range", "open.close", "target_lstm.TARGET_LSTM", "target_lstm20.TARGET_LSTM20", "tensorflow.global_variables_initializer", "tf.Session.run", "print", "print", "range", "range", "print", "tf.train.Saver.restore", "tf.train.Saver.restore", "print", "tf.train.Saver.restore", "print", "open.write", "range", "tf.train.Saver.save", "print", "range", "tf.train.Saver.save", "range", "Main.generate_samples", "dataloader.Gen_Data_loader.create_batches", "Main.target_loss", "print", "open.write", "Main.generate_samples", "dataloader.Gen_Data_loader.create_batches", "Main.target_loss", "print", "Main.generate_samples", "Main.generate_samples", "dataloader.Dis_dataloader.load_train_data", "range", "LeakGANModel.LeakGAN.update_feature_function", "Main.pre_train_epoch", "range", "tf.train.Saver.save", "print", "open.write", "range", "LeakGANModel.LeakGAN.generate", "Main.get_reward", "tf.Session.run", "print", "dataloader.Dis_dataloader.reset_pointer", "range", "Main.generate_samples", "dataloader.Gen_Data_loader.create_batches", "Main.target_loss", "print", "open.write", "Main.generate_samples", "dataloader.Gen_Data_loader.create_batches", "Main.target_loss", "print", "Main.generate_samples", "Main.generate_samples", "dataloader.Dis_dataloader.load_train_data", "range", "LeakGANModel.LeakGAN.update_feature_function", "Main.pre_train_epoch", "str", "dataloader.Dis_dataloader.next_batch", "tf.Session.run", "dataloader.Dis_dataloader.reset_pointer", "range", "Main.generate_samples", "dataloader.Gen_Data_loader.create_batches", "Main.target_loss", "print", "open.write", "Main.generate_samples", "dataloader.Gen_Data_loader.create_batches", "Main.target_loss", "print", "str", "dataloader.Dis_dataloader.next_batch", "tf.Session.run", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.generate_samples", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Gen_Data_loader.create_batches", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.generate_samples", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Gen_Data_loader.create_batches", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.target_loss", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.generate_samples", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Gen_Data_loader.create_batches", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.target_loss", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.generate_samples", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.generate_samples", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.load_train_data", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.update_feature_function", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.pre_train_epoch", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.target_lstm.TARGET_LSTM.generate", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.get_reward", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.reset_pointer", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.generate_samples", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Gen_Data_loader.create_batches", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.target_loss", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.generate_samples", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Gen_Data_loader.create_batches", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.target_loss", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.generate_samples", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.generate_samples", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.load_train_data", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.LeakGANModel.LeakGAN.update_feature_function", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.pre_train_epoch", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.next_batch", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.reset_pointer", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.generate_samples", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Gen_Data_loader.create_batches", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.target_loss", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.generate_samples", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Gen_Data_loader.create_batches", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Main.target_loss", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.next_batch"], ["leakgan", "=", "LeakGAN", "(", "SEQ_LENGTH", ",", "num_classes", "=", "2", ",", "vocab_size", "=", "vocab_size", ",", "emb_dim", "=", "EMB_DIM", ",", "dis_emb_dim", "=", "dis_embedding_dim", ",", "filter_sizes", "=", "dis_filter_sizes", ",", "num_filters", "=", "dis_num_filters", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "hidden_dim", "=", "HIDDEN_DIM", ",", "start_token", "=", "START_TOKEN", ",", "goal_out_size", "=", "GOAL_OUT_SIZE", ",", "goal_size", "=", "GOAL_SIZE", ",", "step_size", "=", "4", ",", "D_model", "=", "discriminator", ")", "\n", "\n", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "config", ".", "gpu_options", ".", "per_process_gpu_memory_fraction", "=", "0.5", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "for", "a", "in", "range", "(", "1", ")", ":", "\n", "        ", "g", "=", "sess", ".", "run", "(", "leakgan", ".", "gen_x", ",", "feed_dict", "=", "{", "leakgan", ".", "drop_out", ":", "0.8", ",", "leakgan", ".", "train", ":", "1", "}", ")", "\n", "print", "g", "\n", "\n", "print", "\"epoch:\"", ",", "a", ",", "\"  \"", "\n", "\n", "", "log", "=", "open", "(", "'save/experiment-log.txt'", ",", "'w'", ")", "\n", "generate_samples", "(", "sess", ",", "leakgan", ",", "BATCH_SIZE", ",", "generated_num", ",", "negative_file", ",", "0", ")", "\n", "gen_data_loader", ".", "create_batches", "(", "positive_file", ")", "\n", "saver_variables", "=", "tf", ".", "global_variables", "(", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "saver_variables", ")", "\n", "model", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "model_path", ")", "\n", "print", "model", "\n", "if", "FLAGS", ".", "restore", "and", "model", ":", "\n", "# model = tf.train.latest_checkpoint(model_path)", "\n", "# if model and FLAGS.restore:", "\n", "        ", "if", "model_path", "+", "'/'", "+", "FLAGS", ".", "model", ":", "\n", "            ", "print", "model_path", "+", "'/'", "+", "FLAGS", ".", "model", "\n", "saver", ".", "restore", "(", "sess", ",", "model_path", "+", "'/'", "+", "FLAGS", ".", "model", ")", "\n", "", "else", ":", "\n", "            ", "saver", ".", "restore", "(", "sess", ",", "model", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "FLAGS", ".", "resD", "and", "model_path", "+", "'/'", "+", "FLAGS", ".", "model", ":", "\n", "                ", "print", "model_path", "+", "'/'", "+", "FLAGS", ".", "model", "\n", "saver", ".", "restore", "(", "sess", ",", "model_path", "+", "'/'", "+", "FLAGS", ".", "model", ")", "\n", "\n", "print", "'Start pre-training...'", "\n", "log", ".", "write", "(", "'pre-training...\\n'", ")", "\n", "for", "epoch", "in", "xrange", "(", "PRE_EPOCH_NUM", ")", ":", "\n", "                    ", "loss", "=", "pre_train_epoch", "(", "sess", ",", "leakgan", ",", "gen_data_loader", ")", "\n", "if", "epoch", "%", "5", "==", "0", ":", "\n", "                        ", "generate_samples", "(", "sess", ",", "leakgan", ",", "BATCH_SIZE", ",", "generated_num", ",", "negative_file", ")", "\n", "", "buffer", "=", "'epoch:\\t'", "+", "str", "(", "epoch", ")", "+", "'\\tnll:\\t'", "+", "str", "(", "loss", ")", "+", "'\\n'", "\n", "log", ".", "write", "(", "buffer", ")", "\n", "", "saver", ".", "save", "(", "sess", ",", "model_path", "+", "'/leakgan_pre'", ")", "\n", "", "else", ":", "\n", "                ", "print", "'Start pre-training discriminator...'", "\n", "# Train 3 epoch on the generated data and do this for 50 times", "\n", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "                    ", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "                        ", "generate_samples", "(", "sess", ",", "leakgan", ",", "BATCH_SIZE", ",", "generated_num", ",", "negative_file", ",", "0", ")", "\n", "# gen_data_loader.create_batches(positive_file)", "\n", "dis_data_loader", ".", "load_train_data", "(", "positive_file", ",", "negative_file", ")", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "                            ", "dis_data_loader", ".", "reset_pointer", "(", ")", "\n", "for", "it", "in", "xrange", "(", "dis_data_loader", ".", "num_batch", ")", ":", "\n", "                                ", "x_batch", ",", "y_batch", "=", "dis_data_loader", ".", "next_batch", "(", ")", "\n", "feed", "=", "{", "\n", "discriminator", ".", "D_input_x", ":", "x_batch", ",", "\n", "discriminator", ".", "D_input_y", ":", "y_batch", ",", "\n", "discriminator", ".", "dropout_keep_prob", ":", "dis_dropout_keep_prob", "\n", "}", "\n", "D_loss", ",", "_", "=", "sess", ".", "run", "(", "[", "discriminator", ".", "D_loss", ",", "discriminator", ".", "D_train_op", "]", ",", "feed", ")", "\n", "# print 'D_loss ', D_loss", "\n", "buffer", "=", "str", "(", "D_loss", ")", "+", "'\\n'", "\n", "log", ".", "write", "(", "buffer", ")", "\n", "", "", "leakgan", ".", "update_feature_function", "(", "discriminator", ")", "\n", "", "saver", ".", "save", "(", "sess", ",", "model_path", "+", "'/leakgan_preD'", ")", "\n", "\n", "# saver.save(sess, model_path + '/leakgan')", "\n", "#  pre-train generator", "\n", "print", "'Start pre-training...'", "\n", "log", ".", "write", "(", "'pre-training...\\n'", ")", "\n", "for", "epoch", "in", "xrange", "(", "PRE_EPOCH_NUM", "/", "16", ")", ":", "\n", "                        ", "loss", "=", "pre_train_epoch", "(", "sess", ",", "leakgan", ",", "gen_data_loader", ")", "\n", "if", "epoch", "%", "5", "==", "0", ":", "\n", "                            ", "generate_samples", "(", "sess", ",", "leakgan", ",", "BATCH_SIZE", ",", "generated_num", ",", "negative_file", ",", "0", ")", "\n", "", "print", "'pre-train epoch '", ",", "epoch", ",", "'test_loss '", ",", "loss", "\n", "buffer", "=", "'epoch:\\t'", "+", "str", "(", "epoch", ")", "+", "'\\tnll:\\t'", "+", "str", "(", "loss", ")", "+", "'\\n'", "\n", "log", ".", "write", "(", "buffer", ")", "\n", "", "", "saver", ".", "save", "(", "sess", ",", "model_path", "+", "'/leakgan_pre'", ")", "\n", "\n", "", "", "gencircle", "=", "1", "\n", "#", "\n", "print", "'#########################################################################'", "\n", "print", "'Start Adversarial Training...'", "\n", "log", ".", "write", "(", "'adversarial training...\\n'", ")", "\n", "for", "total_batch", "in", "range", "(", "TOTAL_BATCH", ")", ":", "\n", "# Train the generator for one step", "\n", "        ", "for", "it", "in", "range", "(", "1", ")", ":", "\n", "\n", "            ", "for", "gi", "in", "range", "(", "gencircle", ")", ":", "\n", "                ", "samples", "=", "leakgan", ".", "generate", "(", "sess", ",", "1.0", ",", "1", ")", "\n", "rewards", "=", "get_reward", "(", "leakgan", ",", "discriminator", ",", "sess", ",", "samples", ",", "4", ",", "dis_dropout_keep_prob", ",", "total_batch", ",", "gen_data_loader", ")", "\n", "feed", "=", "{", "leakgan", ".", "x", ":", "samples", ",", "leakgan", ".", "reward", ":", "rewards", ",", "leakgan", ".", "drop_out", ":", "1.0", "}", "\n", "_", ",", "_", ",", "g_loss", ",", "w_loss", "=", "sess", ".", "run", "(", "[", "leakgan", ".", "manager_updates", ",", "leakgan", ".", "worker_updates", ",", "leakgan", ".", "goal_loss", ",", "leakgan", ".", "worker_loss", "]", ",", "feed_dict", "=", "feed", ")", "\n", "print", "'total_batch: '", ",", "total_batch", ",", "\"  \"", ",", "g_loss", ",", "\"  \"", ",", "w_loss", "\n", "\n", "# Test", "\n", "", "", "if", "total_batch", "%", "10", "==", "1", "or", "total_batch", "==", "TOTAL_BATCH", "-", "1", ":", "\n", "            ", "generate_samples", "(", "sess", ",", "leakgan", ",", "BATCH_SIZE", ",", "generated_num", ",", "\"./save/coco_\"", "+", "str", "(", "total_batch", ")", "+", "\".txt\"", ",", "0", ")", "\n", "saver", ".", "save", "(", "sess", ",", "model_path", "+", "'/leakgan'", ",", "global_step", "=", "total_batch", ")", "\n", "", "if", "total_batch", "%", "15", "==", "0", ":", "\n", "             ", "for", "epoch", "in", "xrange", "(", "1", ")", ":", "\n", "                 ", "loss", "=", "pre_train_epoch", "(", "sess", ",", "leakgan", ",", "gen_data_loader", ")", "\n", "# Train the discriminator", "\n", "", "", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "            ", "generate_samples", "(", "sess", ",", "leakgan", ",", "BATCH_SIZE", ",", "generated_num", ",", "negative_file", ",", "0", ")", "\n", "dis_data_loader", ".", "load_train_data", "(", "positive_file", ",", "negative_file", ")", "\n", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "                ", "dis_data_loader", ".", "reset_pointer", "(", ")", "\n", "for", "it", "in", "xrange", "(", "dis_data_loader", ".", "num_batch", ")", ":", "\n", "                    ", "x_batch", ",", "y_batch", "=", "dis_data_loader", ".", "next_batch", "(", ")", "\n", "feed", "=", "{", "\n", "discriminator", ".", "D_input_x", ":", "x_batch", ",", "\n", "discriminator", ".", "D_input_y", ":", "y_batch", ",", "\n", "discriminator", ".", "dropout_keep_prob", ":", "dis_dropout_keep_prob", "\n", "}", "\n", "D_loss", ",", "_", "=", "sess", ".", "run", "(", "[", "discriminator", ".", "D_loss", ",", "discriminator", ".", "D_train_op", "]", ",", "feed", ")", "\n", "# print 'D_loss ', D_loss", "\n", "", "", "leakgan", ".", "update_feature_function", "(", "discriminator", ")", "\n", "", "", "log", ".", "close", "(", ")", "\n", "\n", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n", "    ", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Gen_Data_loader.__init__": [[5, 9], ["None"], "methods", ["None"], ["class", "Gen_Data_loader", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "length", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "token_stream", "=", "[", "]", "\n", "self", ".", "length", "=", "length", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Gen_Data_loader.create_batches": [[9, 23], ["int", "numpy.split", "open", "numpy.array", "line.split.split.strip", "line.split.split.split", "len", "int", "len", "dataloader.Gen_Data_loader.token_stream.append"], "methods", ["None"], ["self", ".", "length", "=", "length", "\n", "", "def", "create_batches", "(", "self", ",", "data_file", ")", ":", "\n", "        ", "self", ".", "token_stream", "=", "[", "]", "\n", "with", "open", "(", "data_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "line", "=", "line", ".", "split", "(", ")", "\n", "parse_line", "=", "[", "int", "(", "x", ")", "for", "x", "in", "line", "]", "\n", "if", "len", "(", "parse_line", ")", "==", "self", ".", "length", ":", "\n", "                    ", "self", ".", "token_stream", ".", "append", "(", "parse_line", ")", "\n", "\n", "", "", "", "self", ".", "num_batch", "=", "int", "(", "len", "(", "self", ".", "token_stream", ")", "/", "self", ".", "batch_size", ")", "\n", "self", ".", "token_stream", "=", "self", ".", "token_stream", "[", ":", "self", ".", "num_batch", "*", "self", ".", "batch_size", "]", "\n", "self", ".", "sequence_batch", "=", "np", ".", "split", "(", "np", ".", "array", "(", "self", ".", "token_stream", ")", ",", "self", ".", "num_batch", ",", "0", ")", "\n", "self", ".", "pointer", "=", "0", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Gen_Data_loader.next_batch": [[24, 28], ["None"], "methods", ["None"], ["\n", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "ret", "=", "self", ".", "sequence_batch", "[", "self", ".", "pointer", "]", "\n", "self", ".", "pointer", "=", "(", "self", ".", "pointer", "+", "1", ")", "%", "self", ".", "num_batch", "\n", "return", "ret", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Gen_Data_loader.reset_pointer": [[29, 31], ["None"], "methods", ["None"], ["\n", "", "def", "reset_pointer", "(", "self", ")", ":", "\n", "        ", "self", ".", "pointer", "=", "0", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.__init__": [[34, 39], ["numpy.array", "numpy.array"], "methods", ["None"], ["", "", "class", "Dis_dataloader", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "length", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "sentences", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "self", ".", "labels", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "self", ".", "length", "=", "length", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.load_train_data": [[39, 76], ["numpy.array", "numpy.concatenate", "numpy.random.permutation", "int", "numpy.split", "numpy.split", "open", "open", "numpy.arange", "line.split.split.strip", "line.split.split.split", "positive_examples.append", "line.split.split.strip", "line.split.split.split", "len", "len", "int", "int", "len", "negative_examples.append"], "methods", ["None"], ["self", ".", "length", "=", "length", "\n", "", "def", "load_train_data", "(", "self", ",", "positive_file", ",", "negative_file", ")", ":", "\n", "# Load data", "\n", "        ", "positive_examples", "=", "[", "]", "\n", "negative_examples", "=", "[", "]", "\n", "with", "open", "(", "positive_file", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "line", "=", "line", ".", "split", "(", ")", "\n", "parse_line", "=", "[", "int", "(", "x", ")", "for", "x", "in", "line", "]", "\n", "positive_examples", ".", "append", "(", "parse_line", ")", "\n", "", "", "with", "open", "(", "negative_file", ")", "as", "fin", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "line", "=", "line", ".", "split", "(", ")", "\n", "parse_line", "=", "[", "int", "(", "x", ")", "for", "x", "in", "line", "]", "\n", "if", "len", "(", "parse_line", ")", "==", "self", ".", "length", ":", "\n", "                    ", "negative_examples", ".", "append", "(", "parse_line", ")", "\n", "", "", "", "positive_examples", "=", "random", ".", "sample", "(", "positive_examples", ",", "10000", ")", "\n", "self", ".", "sentences", "=", "np", ".", "array", "(", "positive_examples", "+", "negative_examples", ")", "\n", "\n", "# Generate labels", "\n", "positive_labels", "=", "[", "[", "0", ",", "1", "]", "for", "_", "in", "positive_examples", "]", "\n", "negative_labels", "=", "[", "[", "1", ",", "0", "]", "for", "_", "in", "negative_examples", "]", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "[", "positive_labels", ",", "negative_labels", "]", ",", "0", ")", "\n", "\n", "# Shuffle the data", "\n", "shuffle_indices", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "len", "(", "self", ".", "labels", ")", ")", ")", "\n", "self", ".", "sentences", "=", "self", ".", "sentences", "[", "shuffle_indices", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", "[", "shuffle_indices", "]", "\n", "\n", "# Split batches", "\n", "self", ".", "num_batch", "=", "int", "(", "len", "(", "self", ".", "labels", ")", "/", "self", ".", "batch_size", ")", "\n", "self", ".", "sentences", "=", "self", ".", "sentences", "[", ":", "self", ".", "num_batch", "*", "self", ".", "batch_size", "]", "\n", "self", ".", "labels", "=", "self", ".", "labels", "[", ":", "self", ".", "num_batch", "*", "self", ".", "batch_size", "]", "\n", "self", ".", "sentences_batches", "=", "np", ".", "split", "(", "self", ".", "sentences", ",", "self", ".", "num_batch", ",", "0", ")", "\n", "self", ".", "labels_batches", "=", "np", ".", "split", "(", "self", ".", "labels", ",", "self", ".", "num_batch", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.next_batch": [[78, 82], ["None"], "methods", ["None"], ["\n", "\n", "", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "ret", "=", "self", ".", "sentences_batches", "[", "self", ".", "pointer", "]", ",", "self", ".", "labels_batches", "[", "self", ".", "pointer", "]", "\n", "self", ".", "pointer", "=", "(", "self", ".", "pointer", "+", "1", ")", "%", "self", ".", "num_batch", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.dataloader.Dis_dataloader.reset_pointer": [[83, 85], ["None"], "methods", ["None"], ["return", "ret", "\n", "\n", "", "def", "reset_pointer", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.Discriminator.__init__": [[60, 100], ["tensorflow.constant", "sum", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "tensorflow.constant", "Discriminator.Discriminator.FeatureExtractor", "Discriminator.Discriminator.classification", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.compute_gradients", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.variable_scope", "Discriminator.Discriminator.FeatureExtractor_unit", "Discriminator.Discriminator.feature_scope.reuse_variables", "tensorflow.reduce_mean", "tensorflow.trainable_variables"], "methods", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.Discriminator.FeatureExtractor", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.Discriminator.classification"], ["    ", "def", "__init__", "(", "self", ",", "sequence_length", ",", "num_classes", ",", "vocab_size", ",", "dis_emb_dim", ",", "filter_sizes", ",", "num_filters", ",", "batch_size", ",", "hidden_dim", ",", "start_token", ",", "goal_out_size", ",", "step_size", ",", "l2_reg_lambda", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "sequence_length", "=", "sequence_length", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "dis_emb_dim", "=", "dis_emb_dim", "\n", "self", ".", "filter_sizes", "=", "filter_sizes", "\n", "self", ".", "num_filters", "=", "num_filters", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "start_token", "=", "tf", ".", "constant", "(", "[", "start_token", "]", "*", "self", ".", "batch_size", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "self", ".", "l2_reg_lambda", "=", "l2_reg_lambda", "\n", "self", ".", "num_filters_total", "=", "sum", "(", "self", ".", "num_filters", ")", "\n", "self", ".", "temperature", "=", "1.0", "\n", "self", ".", "grad_clip", "=", "5.0", "\n", "self", ".", "goal_out_size", "=", "goal_out_size", "\n", "self", ".", "step_size", "=", "step_size", "\n", "\n", "self", ".", "D_input_y", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "num_classes", "]", ",", "name", "=", "\"input_y\"", ")", "\n", "self", ".", "D_input_x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "sequence_length", "]", ",", "name", "=", "\"input_x\"", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'D_update'", ")", ":", "\n", "            ", "self", ".", "D_l2_loss", "=", "tf", ".", "constant", "(", "0.0", ")", "\n", "self", ".", "FeatureExtractor_unit", "=", "self", ".", "FeatureExtractor", "(", ")", "\n", "\n", "# Train for Discriminator", "\n", "with", "tf", ".", "variable_scope", "(", "\"feature\"", ")", "as", "self", ".", "feature_scope", ":", "\n", "                ", "D_feature", "=", "self", ".", "FeatureExtractor_unit", "(", "self", ".", "D_input_x", ",", "self", ".", "dropout_keep_prob", ")", "#,self.dropout_keep_prob)", "\n", "self", ".", "feature_scope", ".", "reuse_variables", "(", ")", "\n", "# tf.get_variable_scope().reuse_variables()", "\n", "\n", "", "D_scores", ",", "D_predictions", ",", "self", ".", "ypred_for_auc", "=", "self", ".", "classification", "(", "D_feature", ")", "\n", "losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "logits", "=", "D_scores", ",", "labels", "=", "self", ".", "D_input_y", ")", "\n", "self", ".", "D_loss", "=", "tf", ".", "reduce_mean", "(", "losses", ")", "+", "self", ".", "l2_reg_lambda", "*", "self", ".", "D_l2_loss", "\n", "\n", "self", ".", "D_params", "=", "[", "param", "for", "param", "in", "tf", ".", "trainable_variables", "(", ")", "if", "\n", "'Discriminator'", "or", "'FeatureExtractor'", "in", "param", ".", "name", "]", "\n", "d_optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "5e-5", ")", "\n", "D_grads_and_vars", "=", "d_optimizer", ".", "compute_gradients", "(", "self", ".", "D_loss", ",", "self", ".", "D_params", ",", "aggregation_method", "=", "2", ")", "\n", "self", ".", "D_train_op", "=", "d_optimizer", ".", "apply_gradients", "(", "D_grads_and_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.Discriminator.FeatureExtractor": [[103, 160], ["tensorflow.variable_scope", "zip", "tensorflow.concat", "tensorflow.reshape", "tensorflow.device", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.nn.embedding_lookup", "tensorflow.expand_dims", "tensorflow.name_scope", "Discriminator.highway", "tensorflow.name_scope", "tensorflow.nn.dropout", "tensorflow.name_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.nn.relu", "tensorflow.nn.max_pool", "pooled_outputs.append", "tensorflow.random_uniform", "tensorflow.nn.bias_add", "tensorflow.reshape.get_shape", "tensorflow.truncated_normal", "tensorflow.constant"], "methods", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.highway"], ["", "", "def", "FeatureExtractor", "(", "self", ")", ":", "\n", "# Embedding layer", "\n", "# scope.reuse_variables()", "\n", "        ", "def", "unit", "(", "Feature_input", ",", "dropout_keep_prob", ")", ":", "#,dropout_keep_prob):", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'FeatureExtractor'", ")", "as", "scope", ":", "\n", "                ", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ",", "tf", ".", "name_scope", "(", "\"embedding\"", ")", "as", "scope", ":", "\n", "#", "\n", "                    ", "W_fe", "=", "tf", ".", "get_variable", "(", "\n", "name", "=", "\"W_fe\"", ",", "\n", "initializer", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "vocab_size", "+", "1", ",", "self", ".", "dis_emb_dim", "]", ",", "-", "1.0", ",", "1.0", ")", ")", "\n", "# scope.reuse_variables()", "\n", "embedded_chars", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "W_fe", ",", "Feature_input", "+", "1", ")", "\n", "embedded_chars_expanded", "=", "tf", ".", "expand_dims", "(", "embedded_chars", ",", "-", "1", ")", "\n", "\n", "# Create a convolution + maxpool layer for each filter size", "\n", "", "pooled_outputs", "=", "[", "]", "\n", "for", "filter_size", ",", "num_filter", "in", "zip", "(", "self", ".", "filter_sizes", ",", "self", ".", "num_filters", ")", ":", "\n", "                    ", "with", "tf", ".", "name_scope", "(", "\"conv-maxpool-%s\"", "%", "filter_size", ")", "as", "scope", ":", "\n", "# Convolution Layer", "\n", "                        ", "filter_shape", "=", "[", "filter_size", ",", "self", ".", "dis_emb_dim", ",", "1", ",", "num_filter", "]", "\n", "W", "=", "tf", ".", "get_variable", "(", "name", "=", "\"W-%s\"", "%", "filter_size", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal", "(", "filter_shape", ",", "stddev", "=", "0.1", ")", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "name", "=", "\"b-%s\"", "%", "filter_size", ",", "\n", "initializer", "=", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "num_filter", "]", ")", ")", "\n", "# scope.reuse_variables()", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "embedded_chars_expanded", ",", "\n", "W", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "\"VALID\"", ",", "\n", "name", "=", "\"conv-%s\"", "%", "filter_size", ")", "\n", "# Apply nonlinearity", "\n", "h", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "b", ")", ",", "name", "=", "\"relu-%s\"", "%", "filter_size", ")", "\n", "# Maxpooling over the outputs", "\n", "pooled", "=", "tf", ".", "nn", ".", "max_pool", "(", "\n", "h", ",", "\n", "ksize", "=", "[", "1", ",", "self", ".", "sequence_length", "-", "filter_size", "+", "1", ",", "1", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "\n", "name", "=", "\"pool-%s\"", "%", "filter_size", ")", "\n", "pooled_outputs", ".", "append", "(", "pooled", ")", "\n", "#", "\n", "# Combine all the pooled features", "\n", "", "", "h_pool", "=", "tf", ".", "concat", "(", "pooled_outputs", ",", "3", ")", "\n", "h_pool_flat", "=", "tf", ".", "reshape", "(", "h_pool", ",", "[", "-", "1", ",", "self", ".", "num_filters_total", "]", ")", "\n", "\n", "# Add highway", "\n", "with", "tf", ".", "name_scope", "(", "\"highway\"", ")", ":", "\n", "                    ", "h_highway", "=", "highway", "(", "h_pool_flat", ",", "h_pool_flat", ".", "get_shape", "(", ")", "[", "1", "]", ",", "1", ",", "0", ")", "\n", "\n", "# Add dropout", "\n", "", "with", "tf", ".", "name_scope", "(", "\"dropout\"", ")", ":", "\n", "                    ", "h_drop", "=", "tf", ".", "nn", ".", "dropout", "(", "h_highway", ",", "dropout_keep_prob", ")", "\n", "\n", "", "", "return", "h_drop", "\n", "\n", "", "return", "unit", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.Discriminator.classification": [[161, 172], ["tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.truncated_normal", "tensorflow.constant"], "methods", ["None"], ["", "def", "classification", "(", "self", ",", "D_input", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Discriminator'", ")", ":", "\n", "            ", "W_d", "=", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "self", ".", "num_filters_total", ",", "self", ".", "num_classes", "]", ",", "stddev", "=", "0.1", ")", ",", "name", "=", "\"W\"", ")", "\n", "b_d", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "self", ".", "num_classes", "]", ")", ",", "name", "=", "\"b\"", ")", "\n", "self", ".", "D_l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "W_d", ")", "\n", "self", ".", "D_l2_loss", "+=", "tf", ".", "nn", ".", "l2_loss", "(", "b_d", ")", "\n", "self", ".", "scores", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "D_input", ",", "W_d", ",", "b_d", ",", "name", "=", "\"scores\"", ")", "\n", "self", ".", "ypred_for_auc", "=", "tf", ".", "nn", ".", "softmax", "(", "self", ".", "scores", ")", "\n", "self", ".", "predictions", "=", "tf", ".", "argmax", "(", "self", ".", "scores", ",", "1", ",", "name", "=", "\"predictions\"", ")", "\n", "\n", "", "return", "self", ".", "scores", ",", "self", ".", "predictions", ",", "self", ".", "ypred_for_auc", "", "", "", ""]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.cosine_similarity": [[5, 10], ["tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.multiply"], "function", ["None"], ["def", "cosine_similarity", "(", "a", ",", "b", ")", ":", "\n", "    ", "normalize_a", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "a", ",", "-", "1", ")", "\n", "normalize_b", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "b", ",", "-", "1", ")", "\n", "cos_similarity", "=", "(", "tf", ".", "multiply", "(", "normalize_a", ",", "normalize_b", ")", ")", "\n", "return", "cos_similarity", "\n", "# An alternative to tf.nn.rnn_cell._linear function, which has been removed in Tensorfow 1.0.1", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.linear": [[12, 39], ["input_.get_shape().as_list", "len", "ValueError", "ValueError", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "input_.get_shape", "tensorflow.transpose", "str", "str"], "function", ["None"], ["", "def", "linear", "(", "input_", ",", "output_size", ",", "scope", "=", "None", ")", ":", "\n", "    ", "'''\n    Linear map: output[k] = sum_i(Matrix[k, i] * input_[i] ) + Bias[k]\n    Args:\n    input_: a tensor or a list of 2D, batch x n, Tensors.\n    output_size: int, second dimension of W[i].\n    scope: VariableScope for the created subgraph; defaults to \"Linear\".\n  Returns:\n    A 2D Tensor with shape [batch x output_size] equal to\n    sum_i(input_[i] * W[i]), where W[i]s are newly created matrices.\n  Raises:\n    ValueError: if some of the arguments has unspecified or wrong shape.\n  '''", "\n", "\n", "shape", "=", "input_", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "len", "(", "shape", ")", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Linear is expecting 2D arguments: %s\"", "%", "str", "(", "shape", ")", ")", "\n", "", "if", "not", "shape", "[", "1", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"Linear expects shape[1] of arguments: %s\"", "%", "str", "(", "shape", ")", ")", "\n", "", "input_size", "=", "shape", "[", "1", "]", "\n", "\n", "# Now the computation.", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"SimpleLinear\"", ")", ":", "\n", "        ", "matrix", "=", "tf", ".", "get_variable", "(", "\"Matrix\"", ",", "[", "output_size", ",", "input_size", "]", ",", "dtype", "=", "input_", ".", "dtype", ")", "\n", "bias_term", "=", "tf", ".", "get_variable", "(", "\"Bias\"", ",", "[", "output_size", "]", ",", "dtype", "=", "input_", ".", "dtype", ")", "\n", "\n", "", "return", "tf", ".", "matmul", "(", "input_", ",", "tf", ".", "transpose", "(", "matrix", ")", ")", "+", "bias_term", "\n", "\n"]], "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.highway": [[41, 58], ["tensorflow.variable_scope", "range", "f", "tensorflow.sigmoid", "Discriminator.linear", "Discriminator.linear"], "function", ["home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.linear", "home.repos.pwc.inspect_result.CR-Gjx_LeakGAN.Synthetic Data.Discriminator.linear"], ["", "def", "highway", "(", "input_", ",", "size", ",", "num_layers", "=", "1", ",", "bias", "=", "-", "2.0", ",", "f", "=", "tf", ".", "nn", ".", "relu", ",", "scope", "=", "'Highway'", ")", ":", "\n", "    ", "\"\"\"Highway Network (cf. http://arxiv.org/abs/1505.00387).\n    t = sigmoid(Wy + b)\n    z = t * g(Wy + b) + (1 - t) * y\n    where g is nonlinearity, t is transform gate, and (1 - t) is carry gate.\n    \"\"\"", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "for", "idx", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "g", "=", "f", "(", "linear", "(", "input_", ",", "size", ",", "scope", "=", "'highway_lin_%d'", "%", "idx", ")", ")", "\n", "\n", "t", "=", "tf", ".", "sigmoid", "(", "linear", "(", "input_", ",", "size", ",", "scope", "=", "'highway_gate_%d'", "%", "idx", ")", "+", "bias", ")", "\n", "\n", "output", "=", "t", "*", "g", "+", "(", "1.", "-", "t", ")", "*", "input_", "\n", "input_", "=", "output", "\n", "\n", "", "", "return", "output", "\n", "\n"]]}