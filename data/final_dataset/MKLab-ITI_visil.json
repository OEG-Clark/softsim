{"home.repos.pwc.inspect_result.MKLab-ITI_visil.None.evaluation.query_vs_database": [[9, 51], ["tensorflow.keras.utils.OrderedEnqueuer", "tf.keras.utils.OrderedEnqueuer.start", "tqdm.tqdm", "tf.keras.utils.OrderedEnqueuer.stop", "model.set_queries", "tensorflow.keras.utils.OrderedEnqueuer", "tf.keras.utils.OrderedEnqueuer.start", "tf.keras.utils.OrderedEnqueuer.get", "dict", "tqdm.tqdm", "tf.keras.utils.OrderedEnqueuer.stop", "dataset.evaluate", "datasets.DatasetGenerator", "set", "range", "next", "datasets.DatasetGenerator", "range", "next", "dataset.get_queries", "len", "tf.keras.utils.OrderedEnqueuer.get", "queries.append", "queries_ids.append", "all_db.add", "tqdm.tqdm.set_postfix", "dataset.get_database", "dict", "len", "model.extract_features", "model.calculate_similarities_to_queries", "all_db.add", "enumerate", "tqdm.tqdm.set_postfix", "model.extract_features", "float"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.set_queries", "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.ActivityNet.evaluate", "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.ActivityNet.get_queries", "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.ActivityNet.get_database", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.extract_features", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.calculate_similarities_to_queries", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.extract_features"], ["def", "query_vs_database", "(", "model", ",", "dataset", ",", "args", ")", ":", "\n", "# Create a video generator for the queries", "\n", "    ", "enqueuer", "=", "tf", ".", "keras", ".", "utils", ".", "OrderedEnqueuer", "(", "\n", "DatasetGenerator", "(", "args", ".", "video_dir", ",", "dataset", ".", "get_queries", "(", ")", ",", "args", ".", "pattern", ",", "all_frames", "=", "'i3d'", "in", "args", ".", "network", ")", ",", "\n", "use_multiprocessing", "=", "True", ",", "shuffle", "=", "False", ")", "\n", "enqueuer", ".", "start", "(", "workers", "=", "args", ".", "threads", ",", "max_queue_size", "=", "args", ".", "threads", "*", "2", ")", "\n", "\n", "# Extract features of the queries", "\n", "all_db", ",", "queries", ",", "queries_ids", "=", "set", "(", ")", ",", "[", "]", ",", "[", "]", "\n", "pbar", "=", "tqdm", "(", "range", "(", "len", "(", "enqueuer", ".", "sequence", ")", ")", ")", "\n", "for", "_", "in", "pbar", ":", "\n", "        ", "frames", ",", "query_id", "=", "next", "(", "enqueuer", ".", "get", "(", ")", ")", "\n", "if", "frames", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "queries", ".", "append", "(", "model", ".", "extract_features", "(", "frames", ",", "batch_sz", "=", "25", "if", "'i3d'", "in", "args", ".", "network", "else", "args", ".", "batch_sz", ")", ")", "\n", "queries_ids", ".", "append", "(", "query_id", ")", "\n", "all_db", ".", "add", "(", "query_id", ")", "\n", "pbar", ".", "set_postfix", "(", "query_id", "=", "query_id", ")", "\n", "", "", "enqueuer", ".", "stop", "(", ")", "\n", "model", ".", "set_queries", "(", "queries", ")", "\n", "\n", "# Create a video generator for the database video", "\n", "enqueuer", "=", "tf", ".", "keras", ".", "utils", ".", "OrderedEnqueuer", "(", "\n", "DatasetGenerator", "(", "args", ".", "video_dir", ",", "dataset", ".", "get_database", "(", ")", ",", "args", ".", "pattern", ",", "all_frames", "=", "'i3d'", "in", "args", ".", "network", ")", ",", "\n", "use_multiprocessing", "=", "True", ",", "shuffle", "=", "False", ")", "\n", "enqueuer", ".", "start", "(", "workers", "=", "args", ".", "threads", ",", "max_queue_size", "=", "args", ".", "threads", "*", "2", ")", "\n", "generator", "=", "enqueuer", ".", "get", "(", ")", "\n", "\n", "# Calculate similarities between the queries and the database videos", "\n", "similarities", "=", "dict", "(", "{", "query", ":", "dict", "(", ")", "for", "query", "in", "queries_ids", "}", ")", "\n", "pbar", "=", "tqdm", "(", "range", "(", "len", "(", "enqueuer", ".", "sequence", ")", ")", ")", "\n", "for", "_", "in", "pbar", ":", "\n", "        ", "frames", ",", "video_id", "=", "next", "(", "generator", ")", "\n", "if", "frames", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "            ", "features", "=", "model", ".", "extract_features", "(", "frames", ",", "batch_sz", "=", "25", "if", "'i3d'", "in", "args", ".", "network", "else", "args", ".", "batch_sz", ")", "\n", "sims", "=", "model", ".", "calculate_similarities_to_queries", "(", "features", ")", "\n", "all_db", ".", "add", "(", "video_id", ")", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "sims", ")", ":", "\n", "                ", "similarities", "[", "queries_ids", "[", "i", "]", "]", "[", "video_id", "]", "=", "float", "(", "s", ")", "\n", "", "pbar", ".", "set_postfix", "(", "video_id", "=", "video_id", ")", "\n", "", "", "enqueuer", ".", "stop", "(", ")", "\n", "\n", "dataset", ".", "evaluate", "(", "similarities", ",", "all_db", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.None.evaluation.all_vs_all": [[53, 80], ["tensorflow.keras.utils.OrderedEnqueuer", "tf.keras.utils.OrderedEnqueuer.start", "tqdm.tqdm", "tf.keras.utils.OrderedEnqueuer.stop", "dataset.evaluate", "datasets.DatasetGenerator", "set", "dict", "dict", "range", "next", "dataset.get_queries", "len", "tf.keras.utils.OrderedEnqueuer.get", "all_db.add", "dict", "model.extract_features", "features.items", "tqdm.tqdm.set_postfix", "model.calculate_video_similarity", "model.calculate_video_similarity", "model.calculate_video_similarity"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.ActivityNet.evaluate", "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.ActivityNet.get_queries", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.extract_features", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.calculate_video_similarity", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.calculate_video_similarity", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.calculate_video_similarity"], ["", "def", "all_vs_all", "(", "model", ",", "dataset", ",", "args", ")", ":", "\n", "# Create a video generator for the dataset video", "\n", "    ", "enqueuer", "=", "tf", ".", "keras", ".", "utils", ".", "OrderedEnqueuer", "(", "\n", "DatasetGenerator", "(", "args", ".", "video_dir", ",", "dataset", ".", "get_queries", "(", ")", ",", "args", ".", "pattern", ",", "all_frames", "=", "'i3d'", "in", "args", ".", "network", ")", ",", "\n", "use_multiprocessing", "=", "True", ",", "shuffle", "=", "False", ")", "\n", "enqueuer", ".", "start", "(", "workers", "=", "args", ".", "threads", ",", "max_queue_size", "=", "args", ".", "threads", "*", "2", ")", "\n", "\n", "# Calculate similarities between all videos in the dataset", "\n", "all_db", ",", "similarities", ",", "features", "=", "set", "(", ")", ",", "dict", "(", ")", ",", "dict", "(", ")", "\n", "pbar", "=", "tqdm", "(", "range", "(", "len", "(", "enqueuer", ".", "sequence", ")", ")", ")", "\n", "for", "_", "in", "pbar", ":", "\n", "        ", "frames", ",", "q", "=", "next", "(", "enqueuer", ".", "get", "(", ")", ")", "\n", "if", "frames", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "all_db", ".", "add", "(", "q", ")", "\n", "similarities", "[", "q", "]", "=", "dict", "(", ")", "\n", "feat", "=", "model", ".", "extract_features", "(", "frames", ",", "batch_sz", "=", "25", "if", "'i3d'", "in", "args", ".", "network", "else", "args", ".", "batch_sz", ")", "\n", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", ":", "\n", "                ", "if", "'symmetric'", "in", "args", ".", "similarity_function", ":", "\n", "                    ", "similarities", "[", "q", "]", "[", "k", "]", "=", "similarities", "[", "k", "]", "[", "q", "]", "=", "model", ".", "calculate_video_similarity", "(", "v", ",", "feat", ")", "\n", "", "else", ":", "\n", "                    ", "similarities", "[", "k", "]", "[", "q", "]", "=", "model", ".", "calculate_video_similarity", "(", "v", ",", "feat", ")", "\n", "similarities", "[", "q", "]", "[", "k", "]", "=", "model", ".", "calculate_video_similarity", "(", "feat", ",", "v", ")", "\n", "", "", "features", "[", "q", "]", "=", "feat", "\n", "pbar", ".", "set_postfix", "(", "video_id", "=", "q", ",", "frames", "=", "frames", ".", "shape", ",", "features", "=", "feat", ".", "shape", ")", "\n", "", "", "enqueuer", ".", "stop", "(", ")", "\n", "\n", "dataset", ".", "evaluate", "(", "similarities", ",", "all_db", "=", "all_db", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.VideoGenerator.__init__": [[46, 51], ["super().__init__", "numpy.loadtxt", "numpy.expand_dims"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.i3d.InceptionI3d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "video_file", ",", "all_frames", "=", "False", ")", ":", "\n", "        ", "super", "(", "VideoGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "videos", "=", "np", ".", "loadtxt", "(", "video_file", ",", "dtype", "=", "str", ")", "\n", "self", ".", "videos", "=", "np", ".", "expand_dims", "(", "self", ".", "videos", ",", "axis", "=", "0", ")", "if", "self", ".", "videos", ".", "ndim", "==", "1", "else", "self", ".", "videos", "\n", "self", ".", "all_frames", "=", "all_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.VideoGenerator.__len__": [[52, 54], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "videos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.VideoGenerator.__getitem__": [[55, 57], ["__init__.load_video"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.load_video"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "load_video", "(", "self", ".", "videos", "[", "index", "]", "[", "1", "]", ",", "all_frames", "=", "self", ".", "all_frames", ")", ",", "self", ".", "videos", "[", "index", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.DatasetGenerator.__init__": [[60, 66], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.i3d.InceptionI3d.__init__"], ["    ", "def", "__init__", "(", "self", ",", "rootDir", ",", "videos", ",", "pattern", ",", "all_frames", "=", "False", ")", ":", "\n", "        ", "super", "(", "DatasetGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rootDir", "=", "rootDir", "\n", "self", ".", "videos", "=", "videos", "\n", "self", ".", "pattern", "=", "pattern", "\n", "self", ".", "all_frames", "=", "all_frames", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.DatasetGenerator.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "videos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.DatasetGenerator.__getitem__": [[70, 77], ["glob.glob", "os.path.join", "len", "print", "__init__.DatasetGenerator.pattern.replace", "numpy.array", "__init__.load_video"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.load_video"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "video", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "rootDir", ",", "self", ".", "pattern", ".", "replace", "(", "'{id}'", ",", "self", ".", "videos", "[", "index", "]", ")", ")", ")", "\n", "if", "not", "len", "(", "video", ")", ":", "\n", "            ", "print", "(", "'[WARNING] Video not found: '", ",", "self", ".", "videos", "[", "index", "]", ")", "\n", "return", "np", ".", "array", "(", "[", "]", ")", ",", "None", "\n", "", "else", ":", "\n", "            ", "return", "load_video", "(", "video", "[", "0", "]", ",", "all_frames", "=", "self", ".", "all_frames", ")", ",", "self", ".", "videos", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.CC_WEB_VIDEO.__init__": [[81, 88], ["open", "pickle.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "'datasets/cc_web_video.pickle'", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "dataset", "=", "pk", ".", "load", "(", "f", ")", "\n", "", "self", ".", "database", "=", "dataset", "[", "'index'", "]", "\n", "self", ".", "queries", "=", "dataset", "[", "'queries'", "]", "\n", "self", ".", "ground_truth", "=", "dataset", "[", "'ground_truth'", "]", "\n", "self", ".", "excluded", "=", "dataset", "[", "'excluded'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.CC_WEB_VIDEO.get_queries": [[89, 91], ["None"], "methods", ["None"], ["", "def", "get_queries", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "queries", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.CC_WEB_VIDEO.get_database": [[92, 94], ["list", "map", "__init__.CC_WEB_VIDEO.database.keys"], "methods", ["None"], ["", "def", "get_database", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "str", ",", "self", ".", "database", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.CC_WEB_VIDEO.calculate_mAP": [[95, 113], ["enumerate", "len", "sorted", "numpy.sum", "set().intersection", "res.keys", "similarities.keys", "set", "labels.items"], "methods", ["None"], ["", "def", "calculate_mAP", "(", "self", ",", "similarities", ",", "all_videos", "=", "False", ",", "clean", "=", "False", ",", "positive_labels", "=", "'ESLMV'", ")", ":", "\n", "        ", "mAP", "=", "0.0", "\n", "for", "query_set", ",", "labels", "in", "enumerate", "(", "self", ".", "ground_truth", ")", ":", "\n", "            ", "query_id", "=", "self", ".", "queries", "[", "query_set", "]", "\n", "i", ",", "ri", ",", "s", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "if", "query_id", "in", "similarities", ":", "\n", "                ", "res", "=", "similarities", "[", "query_id", "]", "\n", "for", "video_id", "in", "sorted", "(", "res", ".", "keys", "(", ")", ",", "key", "=", "lambda", "x", ":", "res", "[", "x", "]", ",", "reverse", "=", "True", ")", ":", "\n", "                    ", "video", "=", "self", ".", "database", "[", "video_id", "]", "\n", "if", "(", "all_videos", "or", "video", "in", "labels", ")", "and", "(", "not", "clean", "or", "video", "not", "in", "self", ".", "excluded", "[", "query_set", "]", ")", ":", "\n", "                        ", "ri", "+=", "1", "\n", "if", "video", "in", "labels", "and", "labels", "[", "video", "]", "in", "positive_labels", ":", "\n", "                            ", "i", "+=", "1.0", "\n", "s", "+=", "i", "/", "ri", "\n", "", "", "", "positives", "=", "np", ".", "sum", "(", "[", "1.0", "for", "k", ",", "v", "in", "labels", ".", "items", "(", ")", "if", "\n", "v", "in", "positive_labels", "and", "(", "not", "clean", "or", "k", "not", "in", "self", ".", "excluded", "[", "query_set", "]", ")", "]", ")", "\n", "mAP", "+=", "s", "/", "positives", "\n", "", "", "return", "mAP", "/", "len", "(", "set", "(", "self", ".", "queries", ")", ".", "intersection", "(", "similarities", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.CC_WEB_VIDEO.evaluate": [[114, 135], ["print", "len", "print", "print", "print", "print", "print", "print", "print", "print", "set", "similarities.keys", "len", "len", "__init__.CC_WEB_VIDEO.calculate_mAP", "__init__.CC_WEB_VIDEO.calculate_mAP", "__init__.CC_WEB_VIDEO.calculate_mAP", "__init__.CC_WEB_VIDEO.calculate_mAP"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.FIVR.calculate_mAP", "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.FIVR.calculate_mAP", "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.FIVR.calculate_mAP", "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.FIVR.calculate_mAP"], ["", "def", "evaluate", "(", "self", ",", "similarities", ",", "all_db", "=", "None", ")", ":", "\n", "        ", "if", "all_db", "is", "None", ":", "\n", "            ", "all_db", "=", "self", ".", "database", "\n", "\n", "", "print", "(", "'='", "*", "5", ",", "'CC_WEB_VIDEO Dataset'", ",", "'='", "*", "5", ")", "\n", "not_found", "=", "len", "(", "set", "(", "self", ".", "queries", ")", "-", "similarities", ".", "keys", "(", ")", ")", "\n", "if", "not_found", ">", "0", ":", "\n", "            ", "print", "(", "'[WARNING] {} queries are missing from the results and will be ignored'", ".", "format", "(", "not_found", ")", ")", "\n", "", "print", "(", "'Queries: {} videos'", ".", "format", "(", "len", "(", "similarities", ")", ")", ")", "\n", "print", "(", "'Database: {} videos'", ".", "format", "(", "len", "(", "all_db", ")", ")", ")", "\n", "\n", "print", "(", "'-'", "*", "25", ")", "\n", "print", "(", "'All dataset'", ")", "\n", "print", "(", "'CC_WEB mAP: {:.4f}\\nCC_WEB* mAP: {:.4f}\\n'", ".", "format", "(", "\n", "self", ".", "calculate_mAP", "(", "similarities", ",", "all_videos", "=", "False", ",", "clean", "=", "False", ")", ",", "\n", "self", ".", "calculate_mAP", "(", "similarities", ",", "all_videos", "=", "True", ",", "clean", "=", "False", ")", ")", ")", "\n", "\n", "print", "(", "'Clean dataset'", ")", "\n", "print", "(", "'CC_WEB mAP: {:.4f}\\nCC_WEB* mAP: {:.4f}'", ".", "format", "(", "\n", "self", ".", "calculate_mAP", "(", "similarities", ",", "all_videos", "=", "False", ",", "clean", "=", "True", ")", ",", "\n", "self", ".", "calculate_mAP", "(", "similarities", ",", "all_videos", "=", "True", ",", "clean", "=", "True", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.FIVR.__init__": [[139, 146], ["open", "pickle.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "version", "=", "'200k'", ")", ":", "\n", "        ", "self", ".", "version", "=", "version", "\n", "with", "open", "(", "'datasets/fivr.pickle'", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "dataset", "=", "pk", ".", "load", "(", "f", ")", "\n", "", "self", ".", "annotation", "=", "dataset", "[", "'annotation'", "]", "\n", "self", ".", "queries", "=", "dataset", "[", "self", ".", "version", "]", "[", "'queries'", "]", "\n", "self", ".", "database", "=", "dataset", "[", "self", ".", "version", "]", "[", "'database'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.FIVR.get_queries": [[147, 149], ["None"], "methods", ["None"], ["", "def", "get_queries", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "queries", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.FIVR.get_database": [[150, 152], ["list"], "methods", ["None"], ["", "def", "get_database", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "database", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.FIVR.calculate_mAP": [[153, 166], ["set", "query_gt.intersection.intersection.intersection", "sorted", "sum", "res.keys", "len"], "methods", ["None"], ["", "def", "calculate_mAP", "(", "self", ",", "query", ",", "res", ",", "all_db", ",", "relevant_labels", ")", ":", "\n", "        ", "gt_sets", "=", "self", ".", "annotation", "[", "query", "]", "\n", "query_gt", "=", "set", "(", "sum", "(", "[", "gt_sets", "[", "label", "]", "for", "label", "in", "relevant_labels", "if", "label", "in", "gt_sets", "]", ",", "[", "]", ")", ")", "\n", "query_gt", "=", "query_gt", ".", "intersection", "(", "all_db", ")", "\n", "\n", "i", ",", "ri", ",", "s", "=", "0.0", ",", "0", ",", "0.0", "\n", "for", "video", "in", "sorted", "(", "res", ".", "keys", "(", ")", ",", "key", "=", "lambda", "x", ":", "res", "[", "x", "]", ",", "reverse", "=", "True", ")", ":", "\n", "            ", "if", "video", "!=", "query", "and", "video", "in", "all_db", ":", "\n", "                    ", "ri", "+=", "1", "\n", "if", "video", "in", "query_gt", ":", "\n", "                        ", "i", "+=", "1.0", "\n", "s", "+=", "i", "/", "ri", "\n", "", "", "", "return", "s", "/", "len", "(", "query_gt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.FIVR.evaluate": [[167, 190], ["similarities.items", "print", "len", "print", "print", "print", "print", "print", "print", "print", "DSVR.append", "CSVR.append", "ISVR.append", "__init__.FIVR.version.upper", "set", "similarities.keys", "len", "len", "numpy.mean", "numpy.mean", "numpy.mean", "__init__.FIVR.calculate_mAP", "__init__.FIVR.calculate_mAP", "__init__.FIVR.calculate_mAP"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.FIVR.calculate_mAP", "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.FIVR.calculate_mAP", "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.FIVR.calculate_mAP"], ["", "def", "evaluate", "(", "self", ",", "similarities", ",", "all_db", "=", "None", ")", ":", "\n", "        ", "if", "all_db", "is", "None", ":", "\n", "            ", "all_db", "=", "self", ".", "database", "\n", "\n", "", "DSVR", ",", "CSVR", ",", "ISVR", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "query", ",", "res", "in", "similarities", ".", "items", "(", ")", ":", "\n", "            ", "if", "query", "in", "self", ".", "queries", ":", "\n", "                ", "DSVR", ".", "append", "(", "self", ".", "calculate_mAP", "(", "query", ",", "res", ",", "all_db", ",", "relevant_labels", "=", "[", "'ND'", ",", "'DS'", "]", ")", ")", "\n", "CSVR", ".", "append", "(", "self", ".", "calculate_mAP", "(", "query", ",", "res", ",", "all_db", ",", "relevant_labels", "=", "[", "'ND'", ",", "'DS'", ",", "'CS'", "]", ")", ")", "\n", "ISVR", ".", "append", "(", "self", ".", "calculate_mAP", "(", "query", ",", "res", ",", "all_db", ",", "relevant_labels", "=", "[", "'ND'", ",", "'DS'", ",", "'CS'", ",", "'IS'", "]", ")", ")", "\n", "\n", "", "", "print", "(", "'='", "*", "5", ",", "'FIVR-{} Dataset'", ".", "format", "(", "self", ".", "version", ".", "upper", "(", ")", ")", ",", "'='", "*", "5", ")", "\n", "not_found", "=", "len", "(", "set", "(", "self", ".", "queries", ")", "-", "similarities", ".", "keys", "(", ")", ")", "\n", "if", "not_found", ">", "0", ":", "\n", "            ", "print", "(", "'[WARNING] {} queries are missing from the results and will be ignored'", ".", "format", "(", "not_found", ")", ")", "\n", "\n", "", "print", "(", "'Queries: {} videos'", ".", "format", "(", "len", "(", "similarities", ")", ")", ")", "\n", "print", "(", "'Database: {} videos'", ".", "format", "(", "len", "(", "all_db", ")", ")", ")", "\n", "\n", "print", "(", "'-'", "*", "16", ")", "\n", "print", "(", "'DSVR mAP: {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "DSVR", ")", ")", ")", "\n", "print", "(", "'CSVR mAP: {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "CSVR", ")", ")", ")", "\n", "print", "(", "'ISVR mAP: {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "ISVR", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.EVVE.__init__": [[194, 203], ["open", "pickle.load", "__init__.EVVE.events.items"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "'datasets/evve.pickle'", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "dataset", "=", "pk", ".", "load", "(", "f", ")", "\n", "", "self", ".", "events", "=", "dataset", "[", "'annotation'", "]", "\n", "self", ".", "queries", "=", "dataset", "[", "'queries'", "]", "\n", "self", ".", "database", "=", "dataset", "[", "'database'", "]", "\n", "self", ".", "query_to_event", "=", "{", "qname", ":", "evname", "\n", "for", "evname", ",", "(", "queries", ",", "_", ",", "_", ")", "in", "self", ".", "events", ".", "items", "(", ")", "\n", "for", "qname", "in", "queries", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.EVVE.get_queries": [[204, 206], ["list"], "methods", ["None"], ["", "def", "get_queries", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "queries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.EVVE.get_database": [[207, 209], ["list"], "methods", ["None"], ["", "def", "get_database", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "database", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.EVVE.score_ap_from_ranks_1": [[210, 236], ["enumerate", "float", "float"], "methods", ["None"], ["", "def", "score_ap_from_ranks_1", "(", "self", ",", "ranks", ",", "nres", ")", ":", "\n", "        ", "\"\"\" Compute the average precision of one search.\n        ranks = ordered list of ranks of true positives (best rank = 0)\n        nres  = total number of positives in dataset\n        \"\"\"", "\n", "if", "nres", "==", "0", "or", "ranks", "==", "[", "]", ":", "\n", "            ", "return", "0.0", "\n", "\n", "", "ap", "=", "0.0", "\n", "\n", "# accumulate trapezoids in PR-plot. All have an x-size of:", "\n", "recall_step", "=", "1.0", "/", "nres", "\n", "\n", "for", "ntp", ",", "rank", "in", "enumerate", "(", "ranks", ")", ":", "\n", "# ntp = nb of true positives so far", "\n", "# rank = nb of retrieved items so far", "\n", "\n", "# y-size on left side of trapezoid:", "\n", "            ", "if", "rank", "==", "0", ":", "\n", "                ", "precision_0", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "precision_0", "=", "ntp", "/", "float", "(", "rank", ")", "\n", "# y-size on right side of trapezoid:", "\n", "", "precision_1", "=", "(", "ntp", "+", "1", ")", "/", "float", "(", "rank", "+", "1", ")", "\n", "ap", "+=", "(", "precision_1", "+", "precision_0", ")", "*", "recall_step", "/", "2.0", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.EVVE.evaluate": [[237, 280], ["print", "print", "print", "print", "sorted", "print", "print", "set().union", "print", "len", "__init__.EVVE.extend", "print", "set", "enumerate", "__init__.EVVE.score_ap_from_ranks_1", "results[].append", "len", "len", "queries.intersection", "numpy.mean", "set", "pos.intersection.intersection.intersection", "sorted", "len", "res.keys", "pos_ranks.append", "set", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.EVVE.score_ap_from_ranks_1"], ["", "def", "evaluate", "(", "self", ",", "similarities", ",", "all_db", "=", "None", ")", ":", "\n", "        ", "results", "=", "{", "e", ":", "[", "]", "for", "e", "in", "self", ".", "events", "}", "\n", "if", "all_db", "is", "None", ":", "\n", "            ", "all_db", "=", "set", "(", "self", ".", "database", ")", ".", "union", "(", "set", "(", "self", ".", "queries", ")", ")", "\n", "\n", "", "not_found", "=", "0", "\n", "for", "query", "in", "self", ".", "queries", ":", "\n", "            ", "if", "query", "not", "in", "similarities", ":", "\n", "                ", "not_found", "+=", "1", "\n", "", "else", ":", "\n", "                ", "res", "=", "similarities", "[", "query", "]", "\n", "evname", "=", "self", ".", "query_to_event", "[", "query", "]", "\n", "_", ",", "pos", ",", "null", "=", "self", ".", "events", "[", "evname", "]", "\n", "if", "all_db", ":", "\n", "                    ", "pos", "=", "pos", ".", "intersection", "(", "all_db", ")", "\n", "", "pos_ranks", "=", "[", "]", "\n", "\n", "ri", ",", "n_ext", "=", "0.0", ",", "0.0", "\n", "for", "ri", ",", "dbname", "in", "enumerate", "(", "sorted", "(", "res", ".", "keys", "(", ")", ",", "key", "=", "lambda", "x", ":", "res", "[", "x", "]", ",", "reverse", "=", "True", ")", ")", ":", "\n", "                    ", "if", "dbname", "in", "pos", ":", "\n", "                        ", "pos_ranks", ".", "append", "(", "ri", "-", "n_ext", ")", "\n", "", "if", "dbname", "not", "in", "all_db", ":", "\n", "                        ", "n_ext", "+=", "1", "\n", "\n", "", "", "ap", "=", "self", ".", "score_ap_from_ranks_1", "(", "pos_ranks", ",", "len", "(", "pos", ")", ")", "\n", "results", "[", "evname", "]", ".", "append", "(", "ap", ")", "\n", "\n", "", "", "print", "(", "'='", "*", "18", ",", "'EVVE Dataset'", ",", "'='", "*", "18", ")", "\n", "\n", "if", "not_found", ">", "0", ":", "\n", "            ", "print", "(", "'[WARNING] {} queries are missing from the results and will be ignored'", ".", "format", "(", "not_found", ")", ")", "\n", "", "print", "(", "'Queries: {} videos'", ".", "format", "(", "len", "(", "similarities", ")", ")", ")", "\n", "print", "(", "'Database: {} videos\\n'", ".", "format", "(", "len", "(", "all_db", "-", "set", "(", "self", ".", "queries", ")", ")", ")", ")", "\n", "print", "(", "'-'", "*", "50", ")", "\n", "ap", "=", "[", "]", "\n", "for", "evname", "in", "sorted", "(", "self", ".", "events", ")", ":", "\n", "            ", "queries", ",", "_", ",", "_", "=", "self", ".", "events", "[", "evname", "]", "\n", "nq", "=", "len", "(", "queries", ".", "intersection", "(", "all_db", ")", ")", "\n", "ap", ".", "extend", "(", "results", "[", "evname", "]", ")", "\n", "print", "(", "'{0: <36} '", ".", "format", "(", "evname", ")", ",", "'mAP = {:.4f}'", ".", "format", "(", "np", ".", "sum", "(", "results", "[", "evname", "]", ")", "/", "nq", ")", ")", "\n", "\n", "", "print", "(", "'='", "*", "50", ")", "\n", "print", "(", "'overall mAP = {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "ap", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.ActivityNet.__init__": [[284, 287], ["open", "pickle.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "'datasets/activity_net.pickle'", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "dataset", "=", "pk", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.ActivityNet.get_queries": [[288, 290], ["list", "map", "__init__.ActivityNet.dataset.keys"], "methods", ["None"], ["", "", "def", "get_queries", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "str", ",", "self", ".", "dataset", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.ActivityNet.get_database": [[291, 293], ["list", "map", "__init__.ActivityNet.dataset.keys"], "methods", ["None"], ["", "def", "get_database", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "str", ",", "self", ".", "dataset", ".", "keys", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.ActivityNet.calculate_AP": [[294, 301], ["enumerate", "sorted", "len", "res.keys"], "methods", ["None"], ["", "def", "calculate_AP", "(", "self", ",", "res", ",", "pos", ")", ":", "\n", "        ", "i", ",", "ri", ",", "s", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "for", "ri", ",", "video", "in", "enumerate", "(", "sorted", "(", "res", ".", "keys", "(", ")", ",", "key", "=", "lambda", "x", ":", "res", "[", "x", "]", ",", "reverse", "=", "True", ")", ")", ":", "\n", "            ", "if", "video", "in", "pos", ":", "\n", "                ", "i", "+=", "1.0", "\n", "s", "+=", "i", "/", "(", "ri", "+", "1.", ")", "\n", "", "", "return", "s", "/", "len", "(", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.ActivityNet.evaluate": [[302, 321], ["__init__.ActivityNet.dataset.keys", "print", "print", "print", "print", "set", "print", "__init__.ActivityNet.get_database", "__init__.ActivityNet.dataset[].intersection", "len", "numpy.mean", "__init__.ActivityNet.calculate_AP"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.ActivityNet.get_database", "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.ActivityNet.calculate_AP"], ["", "def", "evaluate", "(", "self", ",", "similarities", ",", "all_db", "=", "None", ")", ":", "\n", "        ", "mAP", ",", "not_found", "=", "[", "]", ",", "0", "\n", "if", "all_db", "is", "None", ":", "\n", "            ", "all_db", "=", "set", "(", "self", ".", "get_database", "(", ")", ")", "\n", "\n", "", "for", "query", "in", "self", ".", "dataset", ".", "keys", "(", ")", ":", "\n", "            ", "if", "query", "not", "in", "similarities", ":", "\n", "                ", "not_found", "+=", "1", "\n", "", "else", ":", "\n", "                ", "pos", "=", "self", ".", "dataset", "[", "query", "]", ".", "intersection", "(", "all_db", ")", "\n", "mAP", "+=", "[", "self", ".", "calculate_AP", "(", "similarities", "[", "query", "]", ",", "pos", ")", "]", "\n", "\n", "", "", "print", "(", "'='", "*", "5", ",", "'ActivityNet Dataset'", ",", "'='", "*", "5", ")", "\n", "if", "not_found", ">", "0", ":", "\n", "            ", "print", "(", "'[WARNING] {} queries are missing from the results and will be ignored'", ".", "format", "(", "not_found", ")", ")", "\n", "", "print", "(", "'Database: {} videos'", ".", "format", "(", "len", "(", "all_db", ")", ")", ")", "\n", "\n", "print", "(", "'-'", "*", "16", ")", "\n", "print", "(", "'mAP: {:.4f}'", ".", "format", "(", "np", ".", "mean", "(", "mAP", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.resize_frame": [[9, 14], ["numpy.min", "cv2.resize"], "function", ["None"], ["def", "resize_frame", "(", "frame", ",", "desired_size", ")", ":", "\n", "    ", "min_size", "=", "np", ".", "min", "(", "frame", ".", "shape", "[", ":", "2", "]", ")", "\n", "ratio", "=", "desired_size", "/", "min_size", "\n", "frame", "=", "cv2", ".", "resize", "(", "frame", ",", "dsize", "=", "(", "0", ",", "0", ")", ",", "fx", "=", "ratio", ",", "fy", "=", "ratio", ",", "interpolation", "=", "cv2", ".", "INTER_CUBIC", ")", "\n", "return", "frame", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.center_crop": [[16, 21], ["int", "int", "numpy.maximum", "numpy.maximum"], "function", ["None"], ["", "def", "center_crop", "(", "frame", ",", "desired_size", ")", ":", "\n", "    ", "old_size", "=", "frame", ".", "shape", "[", ":", "2", "]", "\n", "top", "=", "int", "(", "np", ".", "maximum", "(", "0", ",", "(", "old_size", "[", "0", "]", "-", "desired_size", ")", "/", "2", ")", ")", "\n", "left", "=", "int", "(", "np", ".", "maximum", "(", "0", ",", "(", "old_size", "[", "1", "]", "-", "desired_size", ")", "/", "2", ")", ")", "\n", "return", "frame", "[", "top", ":", "top", "+", "desired_size", ",", "left", ":", "left", "+", "desired_size", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.load_video": [[23, 43], ["cv2.setNumThreads", "cv2.VideoCapture", "cv2.VideoCapture.get", "cv2.VideoCapture.isOpened", "cv2.VideoCapture.release", "numpy.array", "cv2.VideoCapture.grab", "cv2.VideoCapture.retrieve", "isinstance", "int", "cv2.cvtColor", "frames.append", "__init__.center_crop", "round", "__init__.resize_frame"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.center_crop", "home.repos.pwc.inspect_result.MKLab-ITI_visil.datasets.__init__.resize_frame"], ["", "def", "load_video", "(", "video", ",", "all_frames", "=", "False", ")", ":", "\n", "    ", "cv2", ".", "setNumThreads", "(", "3", ")", "\n", "cap", "=", "cv2", ".", "VideoCapture", "(", "video", ")", "\n", "fps", "=", "cap", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "if", "fps", ">", "144", "or", "fps", "is", "None", ":", "\n", "        ", "fps", "=", "25", "\n", "", "frames", "=", "[", "]", "\n", "count", "=", "0", "\n", "while", "cap", ".", "isOpened", "(", ")", ":", "\n", "        ", "ret", "=", "cap", ".", "grab", "(", ")", "\n", "if", "int", "(", "count", "%", "round", "(", "fps", ")", ")", "==", "0", "or", "all_frames", ":", "\n", "            ", "ret", ",", "frame", "=", "cap", ".", "retrieve", "(", ")", "\n", "if", "isinstance", "(", "frame", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "frame", "=", "cv2", ".", "cvtColor", "(", "frame", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "frames", ".", "append", "(", "center_crop", "(", "resize_frame", "(", "frame", ",", "256", ")", ",", "256", ")", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "count", "+=", "1", "\n", "", "cap", ".", "release", "(", ")", "\n", "return", "np", ".", "array", "(", "frames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.similarity.chamfer_similarity": [[4, 8], ["tensorflow.reduce_max", "tensorflow.reduce_mean", "tensorflow.squeeze"], "function", ["None"], ["def", "chamfer_similarity", "(", "sim", ",", "max_axis", "=", "1", ",", "mean_axis", "=", "0", ")", ":", "\n", "    ", "sim", "=", "tf", ".", "reduce_max", "(", "sim", ",", "axis", "=", "max_axis", ",", "keepdims", "=", "True", ")", "\n", "sim", "=", "tf", ".", "reduce_mean", "(", "sim", ",", "axis", "=", "mean_axis", ",", "keepdims", "=", "True", ")", "\n", "return", "tf", ".", "squeeze", "(", "sim", ",", "[", "max_axis", ",", "mean_axis", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.similarity.symmetric_chamfer_similarity": [[10, 13], ["similarity.chamfer_similarity", "similarity.chamfer_similarity"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.model.similarity.chamfer_similarity", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.similarity.chamfer_similarity"], ["", "def", "symmetric_chamfer_similarity", "(", "sim", ",", "axes", "=", "[", "0", ",", "1", "]", ")", ":", "\n", "    ", "return", "(", "chamfer_similarity", "(", "sim", ",", "axes", "[", "0", "]", ",", "axes", "[", "1", "]", ")", "+", "\n", "chamfer_similarity", "(", "sim", ",", "axes", "[", "1", "]", ",", "axes", "[", "0", "]", ")", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.similarity.triplet_loss": [[15, 18], ["tensorflow.variable_scope", "tensorflow.maximum"], "function", ["None"], ["", "def", "triplet_loss", "(", "sim_pos", ",", "sim_neg", ",", "gamma", "=", "0.5", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'triplet_loss'", ")", ":", "\n", "        ", "return", "tf", ".", "maximum", "(", "0.", ",", "sim_neg", "-", "sim_pos", "+", "gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.similarity.similarity_regularization_loss": [[20, 24], ["tensorflow.variable_scope", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.abs", "tensorflow.abs", "tensorflow.minimum", "tensorflow.maximum"], "function", ["None"], ["", "", "def", "similarity_regularization_loss", "(", "sim", ",", "lower_limit", "=", "-", "1.", ",", "upper_limit", "=", "1.", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'similarity_regularization_loss'", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "tf", ".", "minimum", "(", ".0", ",", "sim", "-", "lower_limit", ")", ")", ")", "+", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "tf", ".", "maximum", "(", ".0", ",", "sim", "-", "upper_limit", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.__init__": [[10, 78], ["tensorflow.placeholder", "visil.ViSiL.load_model", "tensorflow.ConfigProto", "tensorflow.Session", "visil.ViSiL.sess.run", "Exception", "layers.PCA_layer", "tensorflow.device", "tensorflow.device", "visil.ViSiL.extract_region_vectors", "layers.Attention_layer", "print", "layers.Video_Comparator", "print", "visil.ViSiL.chamfer_similarity", "visil.ViSiL.chamfer_similarity", "Exception", "visil.ViSiL.preprocess_resnet", "print", "tensorflow.placeholder", "print", "tensorflow.placeholder", "tensorflow.placeholder", "visil.ViSiL.frame_to_frame_similarity", "visil.ViSiL.video_to_video_similarity", "visil.ViSiL.symmetric_chamfer_similarity", "visil.ViSiL.symmetric_chamfer_similarity", "visil.ViSiL.preprocess_i3d", "tensorflow.Variable", "visil.ViSiL.frame_to_frame_similarity", "visil.ViSiL.video_to_video_similarity", "visil.ViSiL.similarities.append", "numpy.zeros", "range"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.load_model", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.extract_region_vectors", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.similarity.chamfer_similarity", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.similarity.chamfer_similarity", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.preprocess_resnet", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.frame_to_frame_similarity", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.video_to_video_similarity", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.similarity.symmetric_chamfer_similarity", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.similarity.symmetric_chamfer_similarity", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.preprocess_i3d", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.frame_to_frame_similarity", "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.video_to_video_similarity"], ["    ", "def", "__init__", "(", "self", ",", "model_dir", ",", "net", "=", "'resnet'", ",", "load_queries", "=", "False", ",", "\n", "dims", "=", "None", ",", "whitening", "=", "True", ",", "attention", "=", "True", ",", "video_comparator", "=", "True", ",", "\n", "queries_number", "=", "None", ",", "gpu_id", "=", "0", ",", "similarity_function", "=", "'chamfer'", ")", ":", "\n", "\n", "        ", "self", ".", "net", "=", "net", "\n", "if", "self", ".", "net", "not", "in", "[", "'resnet'", ",", "'i3d'", "]", ":", "\n", "            ", "raise", "Exception", "(", "'[ERROR] Not supported backbone network: {}. '", "\n", "'Supported options: resnet or i3d'", ".", "format", "(", "self", ".", "net", ")", ")", "\n", "\n", "", "self", ".", "load_queries", "=", "load_queries", "\n", "if", "whitening", "or", "dims", "is", "not", "None", ":", "\n", "            ", "self", ".", "PCA", "=", "PCA_layer", "(", "dims", "=", "dims", ",", "whitening", "=", "whitening", ",", "net", "=", "self", ".", "net", ")", "\n", "", "if", "attention", ":", "\n", "            ", "if", "whitening", "and", "dims", "is", "None", ":", "\n", "                ", "self", ".", "att", "=", "Attention_layer", "(", "shape", "=", "400", "if", "self", ".", "net", "==", "'i3d'", "else", "3840", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'[WARNING] Attention layer has been deactivated. '", "\n", "'It works only with Whitening layer of {} dimensions. '", ".", "\n", "format", "(", "400", "if", "self", ".", "net", "==", "'i3d'", "else", "3840", ")", ")", "\n", "", "", "if", "video_comparator", ":", "\n", "            ", "if", "whitening", "and", "attention", "and", "dims", "is", "None", ":", "\n", "                ", "self", ".", "vid_comp", "=", "Video_Comparator", "(", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'[WARNING] Video comparator has been deactivated. '", "\n", "'It works only with Whitening layer of {} dimensions '", "\n", "'and Attention layer. '", ".", "format", "(", "400", "if", "self", ".", "net", "==", "'i3d'", "else", "3840", ")", ")", "\n", "\n", "", "", "if", "similarity_function", "==", "'chamfer'", ":", "\n", "            ", "self", ".", "f2f_sim", "=", "lambda", "x", ":", "chamfer_similarity", "(", "x", ",", "max_axis", "=", "2", ",", "mean_axis", "=", "1", ")", "\n", "self", ".", "v2v_sim", "=", "lambda", "x", ":", "chamfer_similarity", "(", "x", ",", "max_axis", "=", "1", ",", "mean_axis", "=", "0", ")", "\n", "", "elif", "similarity_function", "==", "'symmetric_chamfer'", ":", "\n", "            ", "self", ".", "f2f_sim", "=", "lambda", "x", ":", "symmetric_chamfer_similarity", "(", "x", ",", "axes", "=", "[", "1", ",", "2", "]", ")", "\n", "self", ".", "v2v_sim", "=", "lambda", "x", ":", "symmetric_chamfer_similarity", "(", "x", ",", "axes", "=", "[", "0", ",", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'[ERROR] Not implemented similarity function: {}. '", "\n", "'Supported options: chamfer or symmetric_chamfer'", ".", "format", "(", "similarity_function", ")", ")", "\n", "\n", "", "self", ".", "frames", "=", "tf", ".", "placeholder", "(", "tf", ".", "uint8", ",", "shape", "=", "(", "None", ",", "None", ",", "None", ",", "3", ")", ",", "name", "=", "'input'", ")", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "if", "self", ".", "net", "==", "'resnet'", ":", "\n", "                ", "processed_frames", "=", "self", ".", "preprocess_resnet", "(", "self", ".", "frames", ")", "\n", "", "elif", "self", ".", "net", "==", "'i3d'", ":", "\n", "                ", "processed_frames", "=", "self", ".", "preprocess_i3d", "(", "self", ".", "frames", ")", "\n", "\n", "", "", "with", "tf", ".", "device", "(", "'/gpu:%i'", "%", "gpu_id", ")", ":", "\n", "            ", "self", ".", "region_vectors", "=", "self", ".", "extract_region_vectors", "(", "processed_frames", ")", "\n", "if", "self", ".", "load_queries", ":", "\n", "                ", "print", "(", "'[INFO] Queries will be loaded to the gpu'", ")", "\n", "self", ".", "queries", "=", "[", "tf", ".", "Variable", "(", "np", ".", "zeros", "(", "(", "1", ",", "9", ",", "3840", ")", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "\n", "validate_shape", "=", "False", ")", "for", "_", "in", "range", "(", "queries_number", ")", "]", "\n", "self", ".", "target", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", ",", "None", "]", ",", "name", "=", "'target'", ")", "\n", "self", ".", "similarities", "=", "[", "]", "\n", "for", "q", "in", "self", ".", "queries", ":", "\n", "                    ", "sim_matrix", "=", "self", ".", "frame_to_frame_similarity", "(", "q", ",", "self", ".", "target", ")", "\n", "similarity", "=", "self", ".", "video_to_video_similarity", "(", "sim_matrix", ")", "\n", "self", ".", "similarities", ".", "append", "(", "similarity", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "'[INFO] Queries will NOT be loaded to the gpu'", ")", "\n", "self", ".", "query", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", ",", "None", "]", ",", "name", "=", "'query'", ")", "\n", "self", ".", "target", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "None", ",", "None", "]", ",", "name", "=", "'target'", ")", "\n", "self", ".", "sim_matrix", "=", "self", ".", "frame_to_frame_similarity", "(", "self", ".", "query", ",", "self", ".", "target", ")", "\n", "self", ".", "similarity", "=", "self", ".", "video_to_video_similarity", "(", "self", ".", "sim_matrix", ")", "\n", "\n", "", "", "init", "=", "self", ".", "load_model", "(", "model_dir", ")", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "self", ".", "sess", ".", "run", "(", "init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.preprocess_resnet": [[79, 84], ["tensorflow.map_fn", "vgg_preprocessing.preprocess_for_eval"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing.preprocess_for_eval"], ["", "def", "preprocess_resnet", "(", "self", ",", "video", ")", ":", "\n", "        ", "from", ".", "nets", "import", "vgg_preprocessing", "\n", "video", "=", "tf", ".", "map_fn", "(", "lambda", "x", ":", "vgg_preprocessing", ".", "preprocess_for_eval", "(", "x", ",", "224", ",", "224", ",", "256", ")", ",", "video", ",", "\n", "parallel_iterations", "=", "100", ",", "dtype", "=", "tf", ".", "float32", ",", "swap_memory", "=", "True", ")", "\n", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.preprocess_i3d": [[85, 91], ["tensorflow.image.resize_with_crop_or_pad", "tensorflow.image.convert_image_dtype", "tensorflow.multiply", "tensorflow.expand_dims", "tensorflow.subtract"], "methods", ["None"], ["", "def", "preprocess_i3d", "(", "self", ",", "video", ")", ":", "\n", "        ", "video", "=", "tf", ".", "image", ".", "resize_with_crop_or_pad", "(", "video", ",", "224", ",", "224", ")", "\n", "video", "=", "tf", ".", "image", ".", "convert_image_dtype", "(", "video", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "video", "=", "tf", ".", "multiply", "(", "tf", ".", "subtract", "(", "video", ",", "0.5", ")", ",", "2.0", ")", "\n", "video", "=", "tf", ".", "expand_dims", "(", "video", ",", "0", ")", "\n", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.region_pooling": [[92, 121], ["tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.contrib.slim.arg_scope", "resnet_v1.resnet_v1_50", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.nn.l2_normalize", "len", "resnet_v1.resnet_arg_scope", "tensorflow.nn.relu", "tensorflow.layers.max_pooling2d", "tensorflow.nn.l2_normalize", "features.append", "tensorflow.variable_scope", "i3d.InceptionI3d", "i3d.InceptionI3d.", "tensorflow.variable_scope", "tensorflow.nn.l2_normalize", "tensorflow.shape", "tensorflow.shape", "tensorflow.nn.relu", "numpy.floor", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_50", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_utils.resnet_arg_scope"], ["", "def", "region_pooling", "(", "self", ",", "video", ")", ":", "\n", "        ", "if", "self", ".", "net", "==", "'resnet'", ":", "\n", "            ", "from", ".", "nets", "import", "resnet_v1", "\n", "with", "tf", ".", "contrib", ".", "slim", ".", "arg_scope", "(", "resnet_v1", ".", "resnet_arg_scope", "(", ")", ")", ":", "\n", "                ", "_", ",", "network", "=", "resnet_v1", ".", "resnet_v1_50", "(", "video", ",", "num_classes", "=", "None", ",", "is_training", "=", "False", ")", "\n", "\n", "", "layers", "=", "[", "[", "'resnet_v1_50/block1'", ",", "8", "]", ",", "[", "'resnet_v1_50/block2'", ",", "4", "]", ",", "\n", "[", "'resnet_v1_50/block3'", ",", "2", "]", ",", "[", "'resnet_v1_50/block4'", ",", "2", "]", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'region_vectors'", ")", ":", "\n", "                ", "features", "=", "[", "]", "\n", "for", "l", ",", "p", "in", "layers", ":", "\n", "                    ", "logits", "=", "tf", ".", "nn", ".", "relu", "(", "network", "[", "l", "]", ")", "\n", "logits", "=", "tf", ".", "layers", ".", "max_pooling2d", "(", "logits", ",", "[", "np", ".", "floor", "(", "p", "+", "p", "/", "2", ")", ",", "np", ".", "floor", "(", "p", "+", "p", "/", "2", ")", "]", ",", "p", ",", "padding", "=", "'VALID'", ")", "\n", "logits", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "logits", ",", "-", "1", ",", "epsilon", "=", "1e-15", ")", "\n", "features", ".", "append", "(", "logits", ")", "\n", "", "logits", "=", "tf", ".", "concat", "(", "features", ",", "axis", "=", "-", "1", ")", "\n", "logits", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "logits", ",", "-", "1", ",", "epsilon", "=", "1e-15", ")", "\n", "", "logits", "=", "tf", ".", "reshape", "(", "logits", ",", "[", "tf", ".", "shape", "(", "logits", ")", "[", "0", "]", ",", "-", "1", ",", "tf", ".", "shape", "(", "logits", ")", "[", "-", "1", "]", "]", ")", "\n", "", "elif", "self", ".", "net", "==", "'i3d'", ":", "\n", "            ", "from", ".", "nets", "import", "i3d", "\n", "with", "tf", ".", "variable_scope", "(", "'RGB'", ")", ":", "\n", "                ", "model", "=", "i3d", ".", "InceptionI3d", "(", "400", ",", "spatial_squeeze", "=", "True", ",", "final_endpoint", "=", "'Logits'", ")", "\n", "logits", ",", "_", "=", "model", "(", "video", ",", "is_training", "=", "False", ",", "dropout_keep_prob", "=", "1.0", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'region_vectors'", ")", ":", "\n", "                ", "logits", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "tf", ".", "nn", ".", "relu", "(", "logits", ")", ",", "-", "1", ",", "epsilon", "=", "1e-15", ")", "\n", "\n", "", "", "return", "tf", ".", "expand_dims", "(", "logits", ",", "axis", "=", "1", ")", "if", "len", "(", "logits", ".", "shape", ")", "<", "3", "else", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.extract_region_vectors": [[122, 129], ["visil.ViSiL.region_pooling", "hasattr", "hasattr", "tensorflow.nn.l2_normalize", "visil.ViSiL.att", "visil.ViSiL.PCA"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.region_pooling"], ["", "def", "extract_region_vectors", "(", "self", ",", "video", ")", ":", "\n", "        ", "logits", "=", "self", ".", "region_pooling", "(", "video", ")", "\n", "if", "hasattr", "(", "self", ",", "'PCA'", ")", ":", "\n", "            ", "logits", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "PCA", "(", "logits", ")", ",", "-", "1", ",", "epsilon", "=", "1e-15", ")", "\n", "", "if", "hasattr", "(", "self", ",", "'att'", ")", ":", "\n", "            ", "logits", ",", "weights", "=", "self", ".", "att", "(", "logits", ")", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.frame_to_frame_similarity": [[130, 134], ["tensorflow.tensordot", "visil.ViSiL.f2f_sim", "tensorflow.transpose"], "methods", ["None"], ["", "def", "frame_to_frame_similarity", "(", "self", ",", "query", ",", "target", ")", ":", "\n", "        ", "tensor_dot", "=", "tf", ".", "tensordot", "(", "query", ",", "tf", ".", "transpose", "(", "target", ")", ",", "axes", "=", "1", ")", "\n", "sim_matrix", "=", "self", ".", "f2f_sim", "(", "tensor_dot", ")", "\n", "return", "sim_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.video_to_video_similarity": [[135, 141], ["hasattr", "visil.ViSiL.v2v_sim", "visil.ViSiL.vid_comp"], "methods", ["None"], ["", "def", "video_to_video_similarity", "(", "self", ",", "sim", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'vid_comp'", ")", ":", "\n", "            ", "sim", "=", "self", ".", "vid_comp", "(", "sim", ")", "\n", "self", ".", "visil_output", "=", "sim", "\n", "", "sim", "=", "self", ".", "v2v_sim", "(", "sim", ")", "\n", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.load_model": [[142, 150], ["print", "tensorflow.contrib.framework.init_from_checkpoint", "tensorflow.global_variables_initializer", "tensorflow.contrib.framework.list_variables", "tensorflow.global_variables", "len"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "model_path", ")", ":", "\n", "        ", "previous_variables", "=", "[", "var_name", "for", "var_name", ",", "_", "in", "tf", ".", "contrib", ".", "framework", ".", "list_variables", "(", "model_path", ")", "]", "\n", "restore_map", "=", "{", "variable", ".", "op", ".", "name", ":", "variable", "for", "variable", "in", "tf", ".", "global_variables", "(", ")", "\n", "if", "variable", ".", "op", ".", "name", "in", "previous_variables", "and", "'PCA'", "not", "in", "variable", ".", "op", ".", "name", "}", "#", "\n", "print", "(", "'[INFO] {} layers loaded'", ".", "format", "(", "len", "(", "restore_map", ")", ")", ")", "\n", "tf", ".", "contrib", ".", "framework", ".", "init_from_checkpoint", "(", "model_path", ",", "restore_map", ")", "\n", "tf_init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "return", "tf_init", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.extract_features": [[151, 162], ["range", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate.append", "visil.ViSiL.sess.run"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ",", "frames", ",", "batch_sz", ")", ":", "\n", "        ", "features", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "frames", ".", "shape", "[", "0", "]", "//", "batch_sz", "+", "1", ")", ":", "\n", "            ", "batch", "=", "frames", "[", "b", "*", "batch_sz", ":", "(", "b", "+", "1", ")", "*", "batch_sz", "]", "\n", "if", "batch", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "if", "batch", ".", "shape", "[", "0", "]", ">=", "batch_sz", "or", "self", ".", "net", "==", "'resnet'", ":", "\n", "                    ", "features", ".", "append", "(", "self", ".", "sess", ".", "run", "(", "self", ".", "region_vectors", ",", "feed_dict", "=", "{", "self", ".", "frames", ":", "batch", "}", ")", ")", "\n", "", "", "", "features", "=", "np", ".", "concatenate", "(", "features", ",", "axis", "=", "0", ")", "\n", "while", "features", ".", "shape", "[", "0", "]", "<", "4", ":", "\n", "            ", "features", "=", "np", ".", "concatenate", "(", "[", "features", ",", "features", "]", ",", "axis", "=", "0", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.set_queries": [[163, 168], ["visil.ViSiL.sess.run", "tensorflow.assign", "range", "len"], "methods", ["None"], ["", "def", "set_queries", "(", "self", ",", "queries", ")", ":", "\n", "        ", "if", "self", ".", "load_queries", ":", "\n", "            ", "self", ".", "sess", ".", "run", "(", "[", "tf", ".", "assign", "(", "self", ".", "queries", "[", "i", "]", ",", "queries", "[", "i", "]", ",", "validate_shape", "=", "False", ")", "for", "i", "in", "range", "(", "len", "(", "queries", ")", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "queries", "=", "queries", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.add_query": [[169, 174], ["Exception", "visil.ViSiL.queries.append"], "methods", ["None"], ["", "", "def", "add_query", "(", "self", ",", "query", ")", ":", "\n", "        ", "if", "self", ".", "load_queries", ":", "\n", "            ", "raise", "Exception", "(", "'[ERROR] Operation not permitted when queries are loaded to GPU.'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "queries", ".", "append", "(", "query", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.calculate_similarities_to_queries": [[175, 180], ["visil.ViSiL.sess.run", "visil.ViSiL.calculate_video_similarity"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.calculate_video_similarity"], ["", "", "def", "calculate_similarities_to_queries", "(", "self", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "load_queries", ":", "\n", "            ", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "similarities", ",", "feed_dict", "=", "{", "self", ".", "target", ":", "target", "}", ")", "\n", "", "else", ":", "\n", "            ", "return", "[", "self", ".", "calculate_video_similarity", "(", "q", ",", "target", ")", "for", "q", "in", "self", ".", "queries", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.calculate_video_similarity": [[181, 183], ["visil.ViSiL.sess.run"], "methods", ["None"], ["", "", "def", "calculate_video_similarity", "(", "self", ",", "query", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "similarity", ",", "feed_dict", "=", "{", "self", ".", "query", ":", "query", ",", "self", ".", "target", ":", "target", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.calculate_f2f_matrix": [[184, 186], ["visil.ViSiL.sess.run"], "methods", ["None"], ["", "def", "calculate_f2f_matrix", "(", "self", ",", "query", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "sim_matrix", ",", "feed_dict", "=", "{", "self", ".", "query", ":", "query", ",", "self", ".", "target", ":", "target", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.visil.ViSiL.calculate_visil_output": [[187, 189], ["visil.ViSiL.sess.run"], "methods", ["None"], ["", "def", "calculate_visil_output", "(", "self", ",", "query", ",", "target", ")", ":", "\n", "        ", "return", "self", ".", "sess", ".", "run", "(", "self", ".", "visil_output", ",", "feed_dict", "=", "{", "self", ".", "query", ":", "query", ",", "self", ".", "target", ":", "target", "}", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.layers.PCA_layer.__init__": [[7, 25], ["numpy.load", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "numpy.diag", "numpy.dot", "numpy.sqrt"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "whitening", "=", "True", ",", "dims", "=", "None", ",", "net", "=", "'resnet'", ")", ":", "\n", "        ", "pca", "=", "np", ".", "load", "(", "'ckpt/{}/pca.npz'", ".", "format", "(", "net", ")", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'PCA'", ")", ":", "\n", "            ", "self", ".", "mean", "=", "tf", ".", "get_variable", "(", "'mean_sift'", ",", "\n", "initializer", "=", "pca", "[", "'mean'", "]", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "trainable", "=", "False", ")", "\n", "\n", "weights", "=", "pca", "[", "'V'", "]", "[", ":", ",", ":", "dims", "]", "\n", "if", "whitening", ":", "\n", "                ", "d", "=", "pca", "[", "'d'", "]", "[", ":", "dims", "]", "\n", "D", "=", "np", ".", "diag", "(", "1.", "/", "np", ".", "sqrt", "(", "d", ")", ")", "\n", "weights", "=", "np", ".", "dot", "(", "D", ",", "weights", ".", "T", ")", ".", "T", "\n", "\n", "", "self", ".", "weights", "=", "tf", ".", "get_variable", "(", "'weights'", ",", "\n", "initializer", "=", "weights", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "trainable", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.layers.PCA_layer.__call__": [[26, 30], ["tensorflow.tensordot"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "logits", ")", ":", "\n", "        ", "logits", "=", "logits", "-", "self", ".", "mean", "\n", "logits", "=", "tf", ".", "tensordot", "(", "logits", ",", "self", ".", "weights", ",", "axes", "=", "1", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.layers.Attention_layer.__init__": [[34, 38], ["tensorflow.variable_scope", "tensorflow.get_variable"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "shape", "=", "3840", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'attention_layer'", ")", ":", "\n", "            ", "self", ".", "context_vector", "=", "tf", ".", "get_variable", "(", "'context_vector'", ",", "shape", "=", "(", "shape", ",", "1", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "trainable", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.layers.Attention_layer.__call__": [[39, 42], ["tensorflow.multiply", "tensorflow.tensordot"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "logits", ")", ":", "\n", "        ", "weights", "=", "tf", ".", "tensordot", "(", "logits", ",", "self", ".", "context_vector", ",", "axes", "=", "1", ")", "/", "2.0", "+", "0.5", "\n", "return", "tf", ".", "multiply", "(", "logits", ",", "weights", ")", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.layers.Video_Comparator.__init__": [[46, 53], ["tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPool2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.MaxPool2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv1", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "32", ",", "[", "3", ",", "3", "]", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "mpool1", "=", "tf", ".", "keras", ".", "layers", ".", "MaxPool2D", "(", "[", "2", ",", "2", "]", ",", "2", ")", "\n", "self", ".", "conv2", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "64", ",", "[", "3", ",", "3", "]", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "mpool2", "=", "tf", ".", "keras", ".", "layers", ".", "MaxPool2D", "(", "[", "2", ",", "2", "]", ",", "2", ")", "\n", "self", ".", "conv3", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "128", ",", "[", "3", ",", "3", "]", ",", "activation", "=", "'relu'", ")", "\n", "self", ".", "fconv", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "1", ",", "[", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.model.layers.Video_Comparator.__call__": [[54, 69], ["tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.pad", "layers.Video_Comparator.conv1", "layers.Video_Comparator.mpool1", "tensorflow.pad", "layers.Video_Comparator.conv2", "layers.Video_Comparator.mpool2", "tensorflow.pad", "layers.Video_Comparator.conv3", "layers.Video_Comparator.fconv", "tensorflow.clip_by_value", "tensorflow.squeeze", "tensorflow.shape", "tensorflow.shape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sim_matrix", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'video_comparator'", ")", ":", "\n", "            ", "sim", "=", "tf", ".", "reshape", "(", "sim_matrix", ",", "(", "1", ",", "tf", ".", "shape", "(", "sim_matrix", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "sim_matrix", ")", "[", "1", "]", ",", "1", ")", ")", "\n", "sim", "=", "tf", ".", "pad", "(", "sim", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ",", "'SYMMETRIC'", ")", "\n", "sim", "=", "self", ".", "conv1", "(", "sim", ")", "\n", "sim", "=", "self", ".", "mpool1", "(", "sim", ")", "\n", "sim", "=", "tf", ".", "pad", "(", "sim", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ",", "'SYMMETRIC'", ")", "\n", "sim", "=", "self", ".", "conv2", "(", "sim", ")", "\n", "sim", "=", "self", ".", "mpool2", "(", "sim", ")", "\n", "sim", "=", "tf", ".", "pad", "(", "sim", ",", "[", "[", "0", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", "]", ",", "'SYMMETRIC'", ")", "\n", "sim", "=", "self", ".", "conv3", "(", "sim", ")", "\n", "sim", "=", "self", ".", "fconv", "(", "sim", ")", "\n", "sim", "=", "tf", ".", "clip_by_value", "(", "sim", ",", "-", "1.0", ",", "1.0", ")", "\n", "sim", "=", "tf", ".", "squeeze", "(", "sim", ",", "[", "0", ",", "3", "]", ")", "\n", "", "return", "sim", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._crop": [[47, 88], ["tensorflow.shape", "tensorflow.Assert", "tensorflow.Assert", "tensorflow.to_int32", "tensorflow.reshape", "tensorflow.equal", "tensorflow.control_dependencies", "tensorflow.stack", "tensorflow.logical_and", "tensorflow.stack", "tensorflow.control_dependencies", "tensorflow.slice", "tensorflow.rank", "tensorflow.greater_equal", "tensorflow.greater_equal"], "function", ["None"], ["def", "_crop", "(", "image", ",", "offset_height", ",", "offset_width", ",", "crop_height", ",", "crop_width", ")", ":", "\n", "  ", "\"\"\"Crops the given image using the provided offsets and sizes.\n\n  Note that the method doesn't assume we know the input image size but it does\n  assume we know the input image rank.\n\n  Args:\n    image: an image of shape [height, width, channels].\n    offset_height: a scalar tensor indicating the height offset.\n    offset_width: a scalar tensor indicating the width offset.\n    crop_height: the height of the cropped image.\n    crop_width: the width of the cropped image.\n\n  Returns:\n    the cropped (and resized) image.\n\n  Raises:\n    InvalidArgumentError: if the rank is not 3 or if the image dimensions are\n      less than the crop size.\n  \"\"\"", "\n", "original_shape", "=", "tf", ".", "shape", "(", "image", ")", "\n", "\n", "rank_assertion", "=", "tf", ".", "Assert", "(", "\n", "tf", ".", "equal", "(", "tf", ".", "rank", "(", "image", ")", ",", "3", ")", ",", "\n", "[", "'Rank of image must be equal to 3.'", "]", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "rank_assertion", "]", ")", ":", "\n", "    ", "cropped_shape", "=", "tf", ".", "stack", "(", "[", "crop_height", ",", "crop_width", ",", "original_shape", "[", "2", "]", "]", ")", "\n", "\n", "", "size_assertion", "=", "tf", ".", "Assert", "(", "\n", "tf", ".", "logical_and", "(", "\n", "tf", ".", "greater_equal", "(", "original_shape", "[", "0", "]", ",", "crop_height", ")", ",", "\n", "tf", ".", "greater_equal", "(", "original_shape", "[", "1", "]", ",", "crop_width", ")", ")", ",", "\n", "[", "'Crop size greater than the image size.'", "]", ")", "\n", "\n", "offsets", "=", "tf", ".", "to_int32", "(", "tf", ".", "stack", "(", "[", "offset_height", ",", "offset_width", ",", "0", "]", ")", ")", "\n", "\n", "# Use tf.slice instead of crop_to_bounding box as it accepts tensors to", "\n", "# define the crop size.", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "size_assertion", "]", ")", ":", "\n", "    ", "image", "=", "tf", ".", "slice", "(", "image", ",", "offsets", ",", "cropped_shape", ")", "\n", "", "return", "tf", ".", "reshape", "(", "image", ",", "cropped_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._random_crop": [[90, 171], ["range", "tensorflow.Assert", "range", "tensorflow.random_uniform", "tensorflow.random_uniform", "ValueError", "len", "tensorflow.rank", "tensorflow.Assert", "rank_assertions.append", "tensorflow.control_dependencies", "tensorflow.shape", "tensorflow.logical_and", "len", "asserts.append", "tensorflow.Assert", "tensorflow.Assert", "asserts.extend", "tensorflow.control_dependencies", "tensorflow.reshape", "tensorflow.control_dependencies", "tensorflow.reshape", "vgg_preprocessing._crop", "tensorflow.equal", "tensorflow.greater_equal", "tensorflow.greater_equal", "tensorflow.control_dependencies", "tensorflow.shape", "tensorflow.equal", "tensorflow.equal"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._crop"], ["", "def", "_random_crop", "(", "image_list", ",", "crop_height", ",", "crop_width", ")", ":", "\n", "  ", "\"\"\"Crops the given list of images.\n\n  The function applies the same crop to each image in the list. This can be\n  effectively applied when there are multiple image inputs of the same\n  dimension such as:\n\n    image, depths, normals = _random_crop([image, depths, normals], 120, 150)\n\n  Args:\n    image_list: a list of image tensors of the same dimension but possibly\n      varying channel.\n    crop_height: the new height.\n    crop_width: the new width.\n\n  Returns:\n    the image_list with cropped images.\n\n  Raises:\n    ValueError: if there are multiple image inputs provided with different size\n      or the images are smaller than the crop dimensions.\n  \"\"\"", "\n", "if", "not", "image_list", ":", "\n", "    ", "raise", "ValueError", "(", "'Empty image_list.'", ")", "\n", "\n", "# Compute the rank assertions.", "\n", "", "rank_assertions", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "image_list", ")", ")", ":", "\n", "    ", "image_rank", "=", "tf", ".", "rank", "(", "image_list", "[", "i", "]", ")", "\n", "rank_assert", "=", "tf", ".", "Assert", "(", "\n", "tf", ".", "equal", "(", "image_rank", ",", "3", ")", ",", "\n", "[", "'Wrong rank for tensor  %s [expected] [actual]'", ",", "\n", "image_list", "[", "i", "]", ".", "name", ",", "3", ",", "image_rank", "]", ")", "\n", "rank_assertions", ".", "append", "(", "rank_assert", ")", "\n", "\n", "", "with", "tf", ".", "control_dependencies", "(", "[", "rank_assertions", "[", "0", "]", "]", ")", ":", "\n", "    ", "image_shape", "=", "tf", ".", "shape", "(", "image_list", "[", "0", "]", ")", "\n", "", "image_height", "=", "image_shape", "[", "0", "]", "\n", "image_width", "=", "image_shape", "[", "1", "]", "\n", "crop_size_assert", "=", "tf", ".", "Assert", "(", "\n", "tf", ".", "logical_and", "(", "\n", "tf", ".", "greater_equal", "(", "image_height", ",", "crop_height", ")", ",", "\n", "tf", ".", "greater_equal", "(", "image_width", ",", "crop_width", ")", ")", ",", "\n", "[", "'Crop size greater than the image size.'", "]", ")", "\n", "\n", "asserts", "=", "[", "rank_assertions", "[", "0", "]", ",", "crop_size_assert", "]", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "image_list", ")", ")", ":", "\n", "    ", "image", "=", "image_list", "[", "i", "]", "\n", "asserts", ".", "append", "(", "rank_assertions", "[", "i", "]", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "rank_assertions", "[", "i", "]", "]", ")", ":", "\n", "      ", "shape", "=", "tf", ".", "shape", "(", "image", ")", "\n", "", "height", "=", "shape", "[", "0", "]", "\n", "width", "=", "shape", "[", "1", "]", "\n", "\n", "height_assert", "=", "tf", ".", "Assert", "(", "\n", "tf", ".", "equal", "(", "height", ",", "image_height", ")", ",", "\n", "[", "'Wrong height for tensor %s [expected][actual]'", ",", "\n", "image", ".", "name", ",", "height", ",", "image_height", "]", ")", "\n", "width_assert", "=", "tf", ".", "Assert", "(", "\n", "tf", ".", "equal", "(", "width", ",", "image_width", ")", ",", "\n", "[", "'Wrong width for tensor %s [expected][actual]'", ",", "\n", "image", ".", "name", ",", "width", ",", "image_width", "]", ")", "\n", "asserts", ".", "extend", "(", "[", "height_assert", ",", "width_assert", "]", ")", "\n", "\n", "# Create a random bounding box.", "\n", "#", "\n", "# Use tf.random_uniform and not numpy.random.rand as doing the former would", "\n", "# generate random numbers at graph eval time, unlike the latter which", "\n", "# generates random numbers at graph definition time.", "\n", "", "with", "tf", ".", "control_dependencies", "(", "asserts", ")", ":", "\n", "    ", "max_offset_height", "=", "tf", ".", "reshape", "(", "image_height", "-", "crop_height", "+", "1", ",", "[", "]", ")", "\n", "", "with", "tf", ".", "control_dependencies", "(", "asserts", ")", ":", "\n", "    ", "max_offset_width", "=", "tf", ".", "reshape", "(", "image_width", "-", "crop_width", "+", "1", ",", "[", "]", ")", "\n", "", "offset_height", "=", "tf", ".", "random_uniform", "(", "\n", "[", "]", ",", "maxval", "=", "max_offset_height", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "offset_width", "=", "tf", ".", "random_uniform", "(", "\n", "[", "]", ",", "maxval", "=", "max_offset_width", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "return", "[", "_crop", "(", "image", ",", "offset_height", ",", "offset_width", ",", "\n", "crop_height", ",", "crop_width", ")", "for", "image", "in", "image_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._central_crop": [[173, 196], ["outputs.append", "tensorflow.shape", "tensorflow.shape", "vgg_preprocessing._crop"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._crop"], ["", "def", "_central_crop", "(", "image_list", ",", "crop_height", ",", "crop_width", ")", ":", "\n", "  ", "\"\"\"Performs central crops of the given image list.\n\n  Args:\n    image_list: a list of image tensors of the same dimension but possibly\n      varying channel.\n    crop_height: the height of the image following the crop.\n    crop_width: the width of the image following the crop.\n\n  Returns:\n    the list of cropped images.\n  \"\"\"", "\n", "outputs", "=", "[", "]", "\n", "for", "image", "in", "image_list", ":", "\n", "    ", "image_height", "=", "tf", ".", "shape", "(", "image", ")", "[", "0", "]", "\n", "image_width", "=", "tf", ".", "shape", "(", "image", ")", "[", "1", "]", "\n", "\n", "offset_height", "=", "(", "image_height", "-", "crop_height", ")", "/", "2", "\n", "offset_width", "=", "(", "image_width", "-", "crop_width", ")", "/", "2", "\n", "\n", "outputs", ".", "append", "(", "_crop", "(", "image", ",", "offset_height", ",", "offset_width", ",", "\n", "crop_height", ",", "crop_width", ")", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._mean_image_subtraction": [[198, 229], ["tensorflow.split", "range", "tensorflow.concat", "ValueError", "image.get_shape().as_list", "len", "ValueError", "image.get_shape", "image.get_shape"], "function", ["None"], ["", "def", "_mean_image_subtraction", "(", "image", ",", "means", ")", ":", "\n", "  ", "\"\"\"Subtracts the given means from each image channel.\n\n  For example:\n    means = [123.68, 116.779, 103.939]\n    image = _mean_image_subtraction(image, means)\n\n  Note that the rank of `image` must be known.\n\n  Args:\n    image: a tensor of size [height, width, C].\n    means: a C-vector of values to subtract from each channel.\n\n  Returns:\n    the centered image.\n\n  Raises:\n    ValueError: If the rank of `image` is unknown, if `image` has a rank other\n      than three or if the number of channels in `image` doesn't match the\n      number of values in `means`.\n  \"\"\"", "\n", "if", "image", ".", "get_shape", "(", ")", ".", "ndims", "!=", "3", ":", "\n", "    ", "raise", "ValueError", "(", "'Input must be of size [height, width, C>0]'", ")", "\n", "", "num_channels", "=", "image", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "if", "len", "(", "means", ")", "!=", "num_channels", ":", "\n", "    ", "raise", "ValueError", "(", "'len(means) must match the number of channels'", ")", "\n", "\n", "", "channels", "=", "tf", ".", "split", "(", "axis", "=", "2", ",", "num_or_size_splits", "=", "num_channels", ",", "value", "=", "image", ")", "\n", "for", "i", "in", "range", "(", "num_channels", ")", ":", "\n", "    ", "channels", "[", "i", "]", "-=", "means", "[", "i", "]", "\n", "", "return", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._smallest_size_at_least": [[231, 259], ["tensorflow.convert_to_tensor", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.cond", "tensorflow.to_int32", "tensorflow.to_int32", "tensorflow.greater", "tensorflow.rint", "tensorflow.rint"], "function", ["None"], ["", "def", "_smallest_size_at_least", "(", "height", ",", "width", ",", "smallest_side", ")", ":", "\n", "  ", "\"\"\"Computes new shape with the smallest side equal to `smallest_side`.\n\n  Computes new shape with the smallest side equal to `smallest_side` while\n  preserving the original aspect ratio.\n\n  Args:\n    height: an int32 scalar tensor indicating the current height.\n    width: an int32 scalar tensor indicating the current width.\n    smallest_side: A python integer or scalar `Tensor` indicating the size of\n      the smallest side after resize.\n\n  Returns:\n    new_height: an int32 scalar tensor indicating the new height.\n    new_width: and int32 scalar tensor indicating the new width.\n  \"\"\"", "\n", "smallest_side", "=", "tf", ".", "convert_to_tensor", "(", "smallest_side", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "height", "=", "tf", ".", "to_float", "(", "height", ")", "\n", "width", "=", "tf", ".", "to_float", "(", "width", ")", "\n", "smallest_side", "=", "tf", ".", "to_float", "(", "smallest_side", ")", "\n", "\n", "scale", "=", "tf", ".", "cond", "(", "tf", ".", "greater", "(", "height", ",", "width", ")", ",", "\n", "lambda", ":", "smallest_side", "/", "width", ",", "\n", "lambda", ":", "smallest_side", "/", "height", ")", "\n", "new_height", "=", "tf", ".", "to_int32", "(", "tf", ".", "rint", "(", "height", "*", "scale", ")", ")", "\n", "new_width", "=", "tf", ".", "to_int32", "(", "tf", ".", "rint", "(", "width", "*", "scale", ")", ")", "\n", "return", "new_height", ",", "new_width", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._aspect_preserving_resize": [[261, 284], ["tensorflow.convert_to_tensor", "tensorflow.shape", "vgg_preprocessing._smallest_size_at_least", "tensorflow.expand_dims", "tensorflow.image.resize_bilinear", "tensorflow.squeeze", "tf.squeeze.set_shape"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._smallest_size_at_least"], ["", "def", "_aspect_preserving_resize", "(", "image", ",", "smallest_side", ")", ":", "\n", "  ", "\"\"\"Resize images preserving the original aspect ratio.\n\n  Args:\n    image: A 3-D image `Tensor`.\n    smallest_side: A python integer or scalar `Tensor` indicating the size of\n      the smallest side after resize.\n\n  Returns:\n    resized_image: A 3-D tensor containing the resized image.\n  \"\"\"", "\n", "smallest_side", "=", "tf", ".", "convert_to_tensor", "(", "smallest_side", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "shape", "=", "tf", ".", "shape", "(", "image", ")", "\n", "height", "=", "shape", "[", "0", "]", "\n", "width", "=", "shape", "[", "1", "]", "\n", "new_height", ",", "new_width", "=", "_smallest_size_at_least", "(", "height", ",", "width", ",", "smallest_side", ")", "\n", "image", "=", "tf", ".", "expand_dims", "(", "image", ",", "0", ")", "\n", "resized_image", "=", "tf", ".", "image", ".", "resize_bilinear", "(", "image", ",", "[", "new_height", ",", "new_width", "]", ",", "\n", "align_corners", "=", "False", ")", "\n", "resized_image", "=", "tf", ".", "squeeze", "(", "resized_image", ")", "\n", "resized_image", ".", "set_shape", "(", "[", "None", ",", "None", ",", "3", "]", ")", "\n", "return", "resized_image", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing.preprocess_for_train": [[286, 317], ["tensorflow.random_uniform", "vgg_preprocessing._aspect_preserving_resize", "tf.image.random_flip_left_right.set_shape", "tensorflow.to_float", "tensorflow.image.random_flip_left_right", "vgg_preprocessing._mean_image_subtraction", "vgg_preprocessing._random_crop"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._aspect_preserving_resize", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._mean_image_subtraction", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._random_crop"], ["", "def", "preprocess_for_train", "(", "image", ",", "\n", "output_height", ",", "\n", "output_width", ",", "\n", "resize_side_min", "=", "_RESIZE_SIDE_MIN", ",", "\n", "resize_side_max", "=", "_RESIZE_SIDE_MAX", ")", ":", "\n", "  ", "\"\"\"Preprocesses the given image for training.\n\n  Note that the actual resizing scale is sampled from\n    [`resize_size_min`, `resize_size_max`].\n\n  Args:\n    image: A `Tensor` representing an image of arbitrary size.\n    output_height: The height of the image after preprocessing.\n    output_width: The width of the image after preprocessing.\n    resize_side_min: The lower bound for the smallest side of the image for\n      aspect-preserving resizing.\n    resize_side_max: The upper bound for the smallest side of the image for\n      aspect-preserving resizing.\n\n  Returns:\n    A preprocessed image.\n  \"\"\"", "\n", "resize_side", "=", "tf", ".", "random_uniform", "(", "\n", "[", "]", ",", "minval", "=", "resize_side_min", ",", "maxval", "=", "resize_side_max", "+", "1", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "\n", "image", "=", "_aspect_preserving_resize", "(", "image", ",", "resize_side", ")", "\n", "image", "=", "_random_crop", "(", "[", "image", "]", ",", "output_height", ",", "output_width", ")", "[", "0", "]", "\n", "image", ".", "set_shape", "(", "[", "output_height", ",", "output_width", ",", "3", "]", ")", "\n", "image", "=", "tf", ".", "to_float", "(", "image", ")", "\n", "image", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "image", ")", "\n", "return", "_mean_image_subtraction", "(", "image", ",", "[", "_R_MEAN", ",", "_G_MEAN", ",", "_B_MEAN", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing.preprocess_for_eval": [[319, 336], ["vgg_preprocessing._aspect_preserving_resize", "tf.to_float.set_shape", "tensorflow.to_float", "vgg_preprocessing._mean_image_subtraction", "vgg_preprocessing._central_crop"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._aspect_preserving_resize", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._mean_image_subtraction", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing._central_crop"], ["", "def", "preprocess_for_eval", "(", "image", ",", "output_height", ",", "output_width", ",", "resize_side", ")", ":", "\n", "  ", "\"\"\"Preprocesses the given image for evaluation.\n\n  Args:\n    image: A `Tensor` representing an image of arbitrary size.\n    output_height: The height of the image after preprocessing.\n    output_width: The width of the image after preprocessing.\n    resize_side: The smallest side of the image for aspect-preserving resizing.\n\n  Returns:\n    A preprocessed image.\n  \"\"\"", "\n", "image", "=", "_aspect_preserving_resize", "(", "image", ",", "resize_side", ")", "\n", "image", "=", "_central_crop", "(", "[", "image", "]", ",", "output_height", ",", "output_width", ")", "[", "0", "]", "\n", "image", ".", "set_shape", "(", "[", "output_height", ",", "output_width", ",", "3", "]", ")", "\n", "image", "=", "tf", ".", "to_float", "(", "image", ")", "\n", "return", "_mean_image_subtraction", "(", "image", ",", "[", "_R_MEAN", ",", "_G_MEAN", ",", "_B_MEAN", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing.preprocess_image": [[338, 366], ["vgg_preprocessing.preprocess_for_train", "vgg_preprocessing.preprocess_for_eval"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing.preprocess_for_train", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.vgg_preprocessing.preprocess_for_eval"], ["", "def", "preprocess_image", "(", "image", ",", "output_height", ",", "output_width", ",", "is_training", "=", "False", ",", "\n", "resize_side_min", "=", "_RESIZE_SIDE_MIN", ",", "\n", "resize_side_max", "=", "_RESIZE_SIDE_MAX", ")", ":", "\n", "  ", "\"\"\"Preprocesses the given image.\n\n  Args:\n    image: A `Tensor` representing an image of arbitrary size.\n    output_height: The height of the image after preprocessing.\n    output_width: The width of the image after preprocessing.\n    is_training: `True` if we're preprocessing the image for training and\n      `False` otherwise.\n    resize_side_min: The lower bound for the smallest side of the image for\n      aspect-preserving resizing. If `is_training` is `False`, then this value\n      is used for rescaling.\n    resize_side_max: The upper bound for the smallest side of the image for\n      aspect-preserving resizing. If `is_training` is `False`, this value is\n      ignored. Otherwise, the resize side is sampled from\n        [resize_size_min, resize_size_max].\n\n  Returns:\n    A preprocessed image.\n  \"\"\"", "\n", "if", "is_training", ":", "\n", "    ", "return", "preprocess_for_train", "(", "image", ",", "output_height", ",", "output_width", ",", "\n", "resize_side_min", ",", "resize_side_max", ")", "\n", "", "else", ":", "\n", "    ", "return", "preprocess_for_eval", "(", "image", ",", "output_height", ",", "output_width", ",", "\n", "resize_side_min", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.bottleneck": [[68, 130], ["tensorflow.variable_scope", "slim.utils.last_dimension", "slim.conv2d", "resnet_utils.conv2d_same", "slim.conv2d", "slim.utils.collect_named_outputs", "inputs.get_shape", "resnet_utils.subsample", "slim.conv2d", "tensorflow.clip_by_value", "tensorflow.nn.relu6", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_utils.conv2d_same", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_utils.subsample"], ["@", "slim", ".", "add_arg_scope", "\n", "def", "bottleneck", "(", "inputs", ",", "\n", "depth", ",", "\n", "depth_bottleneck", ",", "\n", "stride", ",", "\n", "rate", "=", "1", ",", "\n", "outputs_collections", "=", "None", ",", "\n", "scope", "=", "None", ",", "\n", "use_bounded_activations", "=", "False", ")", ":", "\n", "  ", "\"\"\"Bottleneck residual unit variant with BN after convolutions.\n\n  This is the original residual unit proposed in [1]. See Fig. 1(a) of [2] for\n  its definition. Note that we use here the bottleneck variant which has an\n  extra bottleneck layer.\n\n  When putting together two consecutive ResNet blocks that use this unit, one\n  should use stride = 2 in the last unit of the first block.\n\n  Args:\n    inputs: A tensor of size [batch, height, width, channels].\n    depth: The depth of the ResNet unit output.\n    depth_bottleneck: The depth of the bottleneck layers.\n    stride: The ResNet unit's stride. Determines the amount of downsampling of\n      the units output compared to its input.\n    rate: An integer, rate for atrous convolution.\n    outputs_collections: Collection to add the ResNet unit output.\n    scope: Optional variable_scope.\n    use_bounded_activations: Whether or not to use bounded activations. Bounded\n      activations better lend themselves to quantized inference.\n\n  Returns:\n    The ResNet unit's output.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'bottleneck_v1'", ",", "[", "inputs", "]", ")", "as", "sc", ":", "\n", "    ", "depth_in", "=", "slim", ".", "utils", ".", "last_dimension", "(", "inputs", ".", "get_shape", "(", ")", ",", "min_rank", "=", "4", ")", "\n", "if", "depth", "==", "depth_in", ":", "\n", "      ", "shortcut", "=", "resnet_utils", ".", "subsample", "(", "inputs", ",", "stride", ",", "'shortcut'", ")", "\n", "", "else", ":", "\n", "      ", "shortcut", "=", "slim", ".", "conv2d", "(", "\n", "inputs", ",", "\n", "depth", ",", "[", "1", ",", "1", "]", ",", "\n", "stride", "=", "stride", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu6", "if", "use_bounded_activations", "else", "None", ",", "\n", "scope", "=", "'shortcut'", ")", "\n", "\n", "", "residual", "=", "slim", ".", "conv2d", "(", "inputs", ",", "depth_bottleneck", ",", "[", "1", ",", "1", "]", ",", "stride", "=", "1", ",", "\n", "scope", "=", "'conv1'", ")", "\n", "residual", "=", "resnet_utils", ".", "conv2d_same", "(", "residual", ",", "depth_bottleneck", ",", "3", ",", "stride", ",", "\n", "rate", "=", "rate", ",", "scope", "=", "'conv2'", ")", "\n", "residual", "=", "slim", ".", "conv2d", "(", "residual", ",", "depth", ",", "[", "1", ",", "1", "]", ",", "stride", "=", "1", ",", "\n", "activation_fn", "=", "None", ",", "scope", "=", "'conv3'", ")", "\n", "\n", "if", "use_bounded_activations", ":", "\n", "# Use clip_by_value to simulate bandpass activation.", "\n", "      ", "residual", "=", "tf", ".", "clip_by_value", "(", "residual", ",", "-", "6.0", ",", "6.0", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu6", "(", "shortcut", "+", "residual", ")", "\n", "", "else", ":", "\n", "      ", "output", "=", "tf", ".", "nn", ".", "relu", "(", "shortcut", "+", "residual", ")", "\n", "\n", "", "return", "slim", ".", "utils", ".", "collect_named_outputs", "(", "outputs_collections", ",", "\n", "sc", ".", "name", ",", "\n", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1": [[132, 234], ["tensorflow.variable_scope", "slim.arg_scope", "slim.arg_scope", "resnet_utils.stack_blocks_dense", "slim.utils.convert_collection_to_dict", "resnet_utils.conv2d_same", "slim.max_pool2d", "tensorflow.reduce_mean", "slim.conv2d", "slim.softmax", "tensorflow.squeeze", "ValueError"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_utils.stack_blocks_dense", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_utils.conv2d_same"], ["", "", "def", "resnet_v1", "(", "inputs", ",", "\n", "blocks", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "global_pool", "=", "True", ",", "\n", "output_stride", "=", "None", ",", "\n", "include_root_block", "=", "True", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Generator for v1 ResNet models.\n\n  This function generates a family of ResNet v1 models. See the resnet_v1_*()\n  methods for specific model instantiations, obtained by selecting different\n  block instantiations that produce ResNets of various depths.\n\n  Training for image classification on Imagenet is usually done with [224, 224]\n  inputs, resulting in [7, 7] feature maps at the output of the last ResNet\n  block for the ResNets defined in [1] that have nominal stride equal to 32.\n  However, for dense prediction tasks we advise that one uses inputs with\n  spatial dimensions that are multiples of 32 plus 1, e.g., [321, 321]. In\n  this case the feature maps at the ResNet output will have spatial shape\n  [(height - 1) / output_stride + 1, (width - 1) / output_stride + 1]\n  and corners exactly aligned with the input image corners, which greatly\n  facilitates alignment of the features to the image. Using as input [225, 225]\n  images results in [8, 8] feature maps at the output of the last ResNet block.\n\n  For dense prediction tasks, the ResNet needs to run in fully-convolutional\n  (FCN) mode and global_pool needs to be set to False. The ResNets in [1, 2] all\n  have nominal stride equal to 32 and a good choice in FCN mode is to use\n  output_stride=16 in order to increase the density of the computed features at\n  small computational and memory overhead, cf. http://arxiv.org/abs/1606.00915.\n\n  Args:\n    inputs: A tensor of size [batch, height_in, width_in, channels].\n    blocks: A list of length equal to the number of ResNet blocks. Each element\n      is a resnet_utils.Block object describing the units in the block.\n    num_classes: Number of predicted classes for classification tasks.\n      If 0 or None, we return the features before the logit layer.\n    is_training: whether batch_norm layers are in training mode.\n    global_pool: If True, we perform global average pooling before computing the\n      logits. Set to True for image classification, False for dense prediction.\n    output_stride: If None, then the output will be computed at the nominal\n      network stride. If output_stride is not None, it specifies the requested\n      ratio of input to output spatial resolution.\n    include_root_block: If True, include the initial convolution followed by\n      max-pooling, if False excludes it.\n    spatial_squeeze: if True, logits is of shape [B, C], if false logits is\n        of shape [B, 1, 1, C], where B is batch_size and C is number of classes.\n        To use this parameter, the input images must be smaller than 300x300\n        pixels, in which case the output logit layer does not contain spatial\n        information and can be removed.\n    reuse: whether or not the network and its variables should be reused. To be\n      able to reuse 'scope' must be given.\n    scope: Optional variable_scope.\n\n  Returns:\n    net: A rank-4 tensor of size [batch, height_out, width_out, channels_out].\n      If global_pool is False, then height_out and width_out are reduced by a\n      factor of output_stride compared to the respective height_in and width_in,\n      else both height_out and width_out equal one. If num_classes is 0 or None,\n      then net is the output of the last ResNet block, potentially after global\n      average pooling. If num_classes a non-zero integer, net contains the\n      pre-softmax activations.\n    end_points: A dictionary from components of the network to the corresponding\n      activation.\n\n  Raises:\n    ValueError: If the target output_stride is not valid.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'resnet_v1'", ",", "[", "inputs", "]", ",", "reuse", "=", "reuse", ")", "as", "sc", ":", "\n", "    ", "end_points_collection", "=", "sc", ".", "original_name_scope", "+", "'_end_points'", "\n", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "bottleneck", ",", "\n", "resnet_utils", ".", "stack_blocks_dense", "]", ",", "\n", "outputs_collections", "=", "end_points_collection", ")", ":", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "is_training", "=", "is_training", ")", ":", "\n", "        ", "net", "=", "inputs", "\n", "if", "include_root_block", ":", "\n", "          ", "if", "output_stride", "is", "not", "None", ":", "\n", "            ", "if", "output_stride", "%", "4", "!=", "0", ":", "\n", "              ", "raise", "ValueError", "(", "'The output_stride needs to be a multiple of 4.'", ")", "\n", "", "output_stride", "/=", "4", "\n", "", "net", "=", "resnet_utils", ".", "conv2d_same", "(", "net", ",", "64", ",", "7", ",", "stride", "=", "2", ",", "scope", "=", "'conv1'", ")", "\n", "net", "=", "slim", ".", "max_pool2d", "(", "net", ",", "[", "3", ",", "3", "]", ",", "stride", "=", "2", ",", "scope", "=", "'pool1'", ")", "\n", "", "net", "=", "resnet_utils", ".", "stack_blocks_dense", "(", "net", ",", "blocks", ",", "output_stride", ")", "\n", "# Convert end_points_collection into a dictionary of end_points.", "\n", "end_points", "=", "slim", ".", "utils", ".", "convert_collection_to_dict", "(", "\n", "end_points_collection", ")", "\n", "\n", "if", "global_pool", ":", "\n", "# Global average pooling.", "\n", "          ", "net", "=", "tf", ".", "reduce_mean", "(", "net", ",", "[", "1", ",", "2", "]", ",", "name", "=", "'pool5'", ",", "keep_dims", "=", "True", ")", "\n", "end_points", "[", "'global_pool'", "]", "=", "net", "\n", "", "if", "num_classes", ":", "\n", "          ", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_classes", ",", "[", "1", ",", "1", "]", ",", "activation_fn", "=", "None", ",", "\n", "normalizer_fn", "=", "None", ",", "scope", "=", "'logits'", ")", "\n", "end_points", "[", "sc", ".", "name", "+", "'/logits'", "]", "=", "net", "\n", "if", "spatial_squeeze", ":", "\n", "            ", "net", "=", "tf", ".", "squeeze", "(", "net", ",", "[", "1", ",", "2", "]", ",", "name", "=", "'SpatialSqueeze'", ")", "\n", "end_points", "[", "sc", ".", "name", "+", "'/spatial_squeeze'", "]", "=", "net", "\n", "", "end_points", "[", "'predictions'", "]", "=", "slim", ".", "softmax", "(", "net", ",", "scope", "=", "'predictions'", ")", "\n", "", "return", "net", ",", "end_points", "\n", "", "", "", "", "resnet_v1", ".", "default_image_size", "=", "224", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block": [[237, 258], ["resnet_utils.Block"], "function", ["None"], ["def", "resnet_v1_block", "(", "scope", ",", "base_depth", ",", "num_units", ",", "stride", ")", ":", "\n", "  ", "\"\"\"Helper function for creating a resnet_v1 bottleneck block.\n\n  Args:\n    scope: The scope of the block.\n    base_depth: The depth of the bottleneck layer for each unit.\n    num_units: The number of units in the block.\n    stride: The stride of the block, implemented as a stride in the last unit.\n      All other units have stride=1.\n\n  Returns:\n    A resnet_v1 bottleneck block.\n  \"\"\"", "\n", "return", "resnet_utils", ".", "Block", "(", "scope", ",", "bottleneck", ",", "[", "{", "\n", "'depth'", ":", "base_depth", "*", "4", ",", "\n", "'depth_bottleneck'", ":", "base_depth", ",", "\n", "'stride'", ":", "1", "\n", "}", "]", "*", "(", "num_units", "-", "1", ")", "+", "[", "{", "\n", "'depth'", ":", "base_depth", "*", "4", ",", "\n", "'depth_bottleneck'", ":", "base_depth", ",", "\n", "'stride'", ":", "stride", "\n", "}", "]", ")", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_50": [[261, 280], ["resnet_v1.resnet_v1", "resnet_v1.resnet_v1_block", "resnet_v1.resnet_v1_block", "resnet_v1.resnet_v1_block", "resnet_v1.resnet_v1_block"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block"], ["", "def", "resnet_v1_50", "(", "inputs", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "global_pool", "=", "True", ",", "\n", "output_stride", "=", "None", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "'resnet_v1_50'", ")", ":", "\n", "  ", "\"\"\"ResNet-50 model of [1]. See resnet_v1() for arg and return description.\"\"\"", "\n", "blocks", "=", "[", "\n", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "4", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "6", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "]", "\n", "return", "resnet_v1", "(", "inputs", ",", "blocks", ",", "num_classes", ",", "is_training", ",", "\n", "global_pool", "=", "global_pool", ",", "output_stride", "=", "output_stride", ",", "\n", "include_root_block", "=", "True", ",", "spatial_squeeze", "=", "spatial_squeeze", ",", "\n", "reuse", "=", "reuse", ",", "scope", "=", "scope", ")", "\n", "", "resnet_v1_50", ".", "default_image_size", "=", "resnet_v1", ".", "default_image_size", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_101": [[283, 302], ["resnet_v1.resnet_v1", "resnet_v1.resnet_v1_block", "resnet_v1.resnet_v1_block", "resnet_v1.resnet_v1_block", "resnet_v1.resnet_v1_block"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block"], ["def", "resnet_v1_101", "(", "inputs", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "global_pool", "=", "True", ",", "\n", "output_stride", "=", "None", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "'resnet_v1_101'", ")", ":", "\n", "  ", "\"\"\"ResNet-101 model of [1]. See resnet_v1() for arg and return description.\"\"\"", "\n", "blocks", "=", "[", "\n", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "4", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "23", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "]", "\n", "return", "resnet_v1", "(", "inputs", ",", "blocks", ",", "num_classes", ",", "is_training", ",", "\n", "global_pool", "=", "global_pool", ",", "output_stride", "=", "output_stride", ",", "\n", "include_root_block", "=", "True", ",", "spatial_squeeze", "=", "spatial_squeeze", ",", "\n", "reuse", "=", "reuse", ",", "scope", "=", "scope", ")", "\n", "", "resnet_v1_101", ".", "default_image_size", "=", "resnet_v1", ".", "default_image_size", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_152": [[305, 324], ["resnet_v1.resnet_v1", "resnet_v1.resnet_v1_block", "resnet_v1.resnet_v1_block", "resnet_v1.resnet_v1_block", "resnet_v1.resnet_v1_block"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block"], ["def", "resnet_v1_152", "(", "inputs", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "global_pool", "=", "True", ",", "\n", "output_stride", "=", "None", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "'resnet_v1_152'", ")", ":", "\n", "  ", "\"\"\"ResNet-152 model of [1]. See resnet_v1() for arg and return description.\"\"\"", "\n", "blocks", "=", "[", "\n", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "8", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "36", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "]", "\n", "return", "resnet_v1", "(", "inputs", ",", "blocks", ",", "num_classes", ",", "is_training", ",", "\n", "global_pool", "=", "global_pool", ",", "output_stride", "=", "output_stride", ",", "\n", "include_root_block", "=", "True", ",", "spatial_squeeze", "=", "spatial_squeeze", ",", "\n", "reuse", "=", "reuse", ",", "scope", "=", "scope", ")", "\n", "", "resnet_v1_152", ".", "default_image_size", "=", "resnet_v1", ".", "default_image_size", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_200": [[327, 346], ["resnet_v1.resnet_v1", "resnet_v1.resnet_v1_block", "resnet_v1.resnet_v1_block", "resnet_v1.resnet_v1_block", "resnet_v1.resnet_v1_block"], "function", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block", "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_v1.resnet_v1_block"], ["def", "resnet_v1_200", "(", "inputs", ",", "\n", "num_classes", "=", "None", ",", "\n", "is_training", "=", "True", ",", "\n", "global_pool", "=", "True", ",", "\n", "output_stride", "=", "None", ",", "\n", "spatial_squeeze", "=", "True", ",", "\n", "reuse", "=", "None", ",", "\n", "scope", "=", "'resnet_v1_200'", ")", ":", "\n", "  ", "\"\"\"ResNet-200 model of [2]. See resnet_v1() for arg and return description.\"\"\"", "\n", "blocks", "=", "[", "\n", "resnet_v1_block", "(", "'block1'", ",", "base_depth", "=", "64", ",", "num_units", "=", "3", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block2'", ",", "base_depth", "=", "128", ",", "num_units", "=", "24", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block3'", ",", "base_depth", "=", "256", ",", "num_units", "=", "36", ",", "stride", "=", "2", ")", ",", "\n", "resnet_v1_block", "(", "'block4'", ",", "base_depth", "=", "512", ",", "num_units", "=", "3", ",", "stride", "=", "1", ")", ",", "\n", "]", "\n", "return", "resnet_v1", "(", "inputs", ",", "blocks", ",", "num_classes", ",", "is_training", ",", "\n", "global_pool", "=", "global_pool", ",", "output_stride", "=", "output_stride", ",", "\n", "include_root_block", "=", "True", ",", "spatial_squeeze", "=", "spatial_squeeze", ",", "\n", "reuse", "=", "reuse", ",", "scope", "=", "scope", ")", "\n", "", "resnet_v1_200", ".", "default_image_size", "=", "resnet_v1", ".", "default_image_size", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.i3d.Unit3D.__init__": [[35, 50], ["sonnet.AbstractModule.__init__"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.i3d.InceptionI3d.__init__"], ["def", "__init__", "(", "self", ",", "output_channels", ",", "\n", "kernel_shape", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "use_batch_norm", "=", "True", ",", "\n", "use_bias", "=", "False", ",", "\n", "name", "=", "'unit_3d'", ")", ":", "\n", "    ", "\"\"\"Initializes Unit3D module.\"\"\"", "\n", "super", "(", "Unit3D", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "_output_channels", "=", "output_channels", "\n", "self", ".", "_kernel_shape", "=", "kernel_shape", "\n", "self", ".", "_stride", "=", "stride", "\n", "self", ".", "_use_batch_norm", "=", "use_batch_norm", "\n", "self", ".", "_activation_fn", "=", "activation_fn", "\n", "self", ".", "_use_bias", "=", "use_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.i3d.Unit3D._build": [[51, 72], ["sonnet.Conv3D", "sonnet.BatchNorm", "sonnet.BatchNorm.", "i3d.Unit3D._activation_fn"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "inputs", ",", "is_training", ")", ":", "\n", "    ", "\"\"\"Connects the module to inputs.\n\n    Args:\n      inputs: Inputs to the Unit3D component.\n      is_training: whether to use training mode for snt.BatchNorm (boolean).\n\n    Returns:\n      Outputs from the module.\n    \"\"\"", "\n", "net", "=", "snt", ".", "Conv3D", "(", "output_channels", "=", "self", ".", "_output_channels", ",", "\n", "kernel_shape", "=", "self", ".", "_kernel_shape", ",", "\n", "stride", "=", "self", ".", "_stride", ",", "\n", "padding", "=", "snt", ".", "SAME", ",", "\n", "use_bias", "=", "self", ".", "_use_bias", ")", "(", "inputs", ")", "\n", "if", "self", ".", "_use_batch_norm", ":", "\n", "      ", "bn", "=", "snt", ".", "BatchNorm", "(", ")", "\n", "net", "=", "bn", "(", "net", ",", "is_training", "=", "is_training", ",", "test_local_stats", "=", "False", ")", "\n", "", "if", "self", ".", "_activation_fn", "is", "not", "None", ":", "\n", "      ", "net", "=", "self", ".", "_activation_fn", "(", "net", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.i3d.InceptionI3d.__init__": [[115, 143], ["sonnet.AbstractModule.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.i3d.InceptionI3d.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "400", ",", "spatial_squeeze", "=", "True", ",", "\n", "final_endpoint", "=", "'Logits'", ",", "name", "=", "'inception_i3d'", ")", ":", "\n", "    ", "\"\"\"Initializes I3D model instance.\n\n    Args:\n      num_classes: The number of outputs in the logit layer (default 400, which\n          matches the Kinetics dataset).\n      spatial_squeeze: Whether to squeeze the spatial dimensions for the logits\n          before returning (default True).\n      final_endpoint: The model contains many possible endpoints.\n          `final_endpoint` specifies the last endpoint for the model to be built\n          up to. In addition to the output at `final_endpoint`, all the outputs\n          at endpoints up to `final_endpoint` will also be returned, in a\n          dictionary. `final_endpoint` must be one of\n          InceptionI3d.VALID_ENDPOINTS (default 'Logits').\n      name: A string (optional). The name of this module.\n\n    Raises:\n      ValueError: if `final_endpoint` is not recognized.\n    \"\"\"", "\n", "\n", "if", "final_endpoint", "not", "in", "self", ".", "VALID_ENDPOINTS", ":", "\n", "      ", "raise", "ValueError", "(", "'Unknown final endpoint %s'", "%", "final_endpoint", ")", "\n", "\n", "", "super", "(", "InceptionI3d", ",", "self", ")", ".", "__init__", "(", "name", "=", "name", ")", "\n", "self", ".", "_num_classes", "=", "num_classes", "\n", "self", ".", "_spatial_squeeze", "=", "spatial_squeeze", "\n", "self", ".", "_final_endpoint", "=", "final_endpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.i3d.InceptionI3d._build": [[144, 481], ["tensorflow.nn.max_pool3d", "tensorflow.nn.max_pool3d", "tensorflow.nn.max_pool3d", "tensorflow.nn.max_pool3d", "tensorflow.reduce_mean", "tensorflow.nn.softmax", "ValueError", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.nn.avg_pool3d", "tensorflow.nn.dropout", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.nn.max_pool3d", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.nn.max_pool3d", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.nn.max_pool3d", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.nn.max_pool3d", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.nn.max_pool3d", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.nn.max_pool3d", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.nn.max_pool3d", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.nn.max_pool3d", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.nn.max_pool3d", "i3d.Unit3D", "tensorflow.squeeze", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D", "i3d.Unit3D"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "inputs", ",", "is_training", ",", "dropout_keep_prob", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Connects the model to inputs.\n\n    Args:\n      inputs: Inputs to the model, which should have dimensions\n          `batch_size` x `num_frames` x 224 x 224 x `num_channels`.\n      is_training: whether to use training mode for snt.BatchNorm (boolean).\n      dropout_keep_prob: Probability for the tf.nn.dropout layer (float in\n          [0, 1)).\n\n    Returns:\n      A tuple consisting of:\n        1. Network output at location `self._final_endpoint`.\n        2. Dictionary containing all endpoints up to `self._final_endpoint`,\n           indexed by endpoint name.\n\n    Raises:\n      ValueError: if `self._final_endpoint` is not recognized.\n    \"\"\"", "\n", "if", "self", ".", "_final_endpoint", "not", "in", "self", ".", "VALID_ENDPOINTS", ":", "\n", "      ", "raise", "ValueError", "(", "'Unknown final endpoint %s'", "%", "self", ".", "_final_endpoint", ")", "\n", "\n", "", "net", "=", "inputs", "\n", "end_points", "=", "{", "}", "\n", "end_point", "=", "'Conv3d_1a_7x7'", "\n", "net", "=", "Unit3D", "(", "output_channels", "=", "64", ",", "kernel_shape", "=", "[", "7", ",", "7", ",", "7", "]", ",", "\n", "stride", "=", "[", "2", ",", "2", ",", "2", "]", ",", "name", "=", "end_point", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "end_point", "=", "'MaxPool3d_2a_3x3'", "\n", "net", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "1", ",", "3", ",", "3", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "padding", "=", "snt", ".", "SAME", ",", "name", "=", "end_point", ")", "\n", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "end_point", "=", "'Conv3d_2b_1x1'", "\n", "net", "=", "Unit3D", "(", "output_channels", "=", "64", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "end_point", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "end_point", "=", "'Conv3d_2c_3x3'", "\n", "net", "=", "Unit3D", "(", "output_channels", "=", "192", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "end_point", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "end_point", "=", "'MaxPool3d_3a_3x3'", "\n", "net", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "1", ",", "3", ",", "3", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "padding", "=", "snt", ".", "SAME", ",", "name", "=", "end_point", ")", "\n", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "\n", "end_point", "=", "'Mixed_3b'", "\n", "with", "tf", ".", "variable_scope", "(", "end_point", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "        ", "branch_0", "=", "Unit3D", "(", "output_channels", "=", "64", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "        ", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "96", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "128", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_1", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_2'", ")", ":", "\n", "        ", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "16", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "32", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_2", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_3'", ")", ":", "\n", "        ", "branch_3", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "3", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "snt", ".", "SAME", ",", "\n", "name", "=", "'MaxPool3d_0a_3x3'", ")", "\n", "branch_3", "=", "Unit3D", "(", "output_channels", "=", "32", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0b_1x1'", ")", "(", "branch_3", ",", "\n", "is_training", "=", "is_training", ")", "\n", "\n", "", "net", "=", "tf", ".", "concat", "(", "[", "branch_0", ",", "branch_1", ",", "branch_2", ",", "branch_3", "]", ",", "4", ")", "\n", "", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "\n", "end_point", "=", "'Mixed_3c'", "\n", "with", "tf", ".", "variable_scope", "(", "end_point", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "        ", "branch_0", "=", "Unit3D", "(", "output_channels", "=", "128", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "        ", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "128", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "192", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_1", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_2'", ")", ":", "\n", "        ", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "32", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "96", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_2", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_3'", ")", ":", "\n", "        ", "branch_3", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "3", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "snt", ".", "SAME", ",", "\n", "name", "=", "'MaxPool3d_0a_3x3'", ")", "\n", "branch_3", "=", "Unit3D", "(", "output_channels", "=", "64", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0b_1x1'", ")", "(", "branch_3", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "net", "=", "tf", ".", "concat", "(", "[", "branch_0", ",", "branch_1", ",", "branch_2", ",", "branch_3", "]", ",", "4", ")", "\n", "", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "\n", "end_point", "=", "'MaxPool3d_4a_3x3'", "\n", "net", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "3", ",", "3", ",", "3", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "padding", "=", "snt", ".", "SAME", ",", "name", "=", "end_point", ")", "\n", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "\n", "end_point", "=", "'Mixed_4b'", "\n", "with", "tf", ".", "variable_scope", "(", "end_point", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "        ", "branch_0", "=", "Unit3D", "(", "output_channels", "=", "192", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "        ", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "96", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "208", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_1", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_2'", ")", ":", "\n", "        ", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "16", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "48", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_2", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_3'", ")", ":", "\n", "        ", "branch_3", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "3", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "snt", ".", "SAME", ",", "\n", "name", "=", "'MaxPool3d_0a_3x3'", ")", "\n", "branch_3", "=", "Unit3D", "(", "output_channels", "=", "64", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0b_1x1'", ")", "(", "branch_3", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "net", "=", "tf", ".", "concat", "(", "[", "branch_0", ",", "branch_1", ",", "branch_2", ",", "branch_3", "]", ",", "4", ")", "\n", "", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "\n", "end_point", "=", "'Mixed_4c'", "\n", "with", "tf", ".", "variable_scope", "(", "end_point", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "        ", "branch_0", "=", "Unit3D", "(", "output_channels", "=", "160", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "        ", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "112", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "224", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_1", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_2'", ")", ":", "\n", "        ", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "24", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "64", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_2", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_3'", ")", ":", "\n", "        ", "branch_3", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "3", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "snt", ".", "SAME", ",", "\n", "name", "=", "'MaxPool3d_0a_3x3'", ")", "\n", "branch_3", "=", "Unit3D", "(", "output_channels", "=", "64", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0b_1x1'", ")", "(", "branch_3", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "net", "=", "tf", ".", "concat", "(", "[", "branch_0", ",", "branch_1", ",", "branch_2", ",", "branch_3", "]", ",", "4", ")", "\n", "", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "\n", "end_point", "=", "'Mixed_4d'", "\n", "with", "tf", ".", "variable_scope", "(", "end_point", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "        ", "branch_0", "=", "Unit3D", "(", "output_channels", "=", "128", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "        ", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "128", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "256", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_1", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_2'", ")", ":", "\n", "        ", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "24", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "64", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_2", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_3'", ")", ":", "\n", "        ", "branch_3", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "3", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "snt", ".", "SAME", ",", "\n", "name", "=", "'MaxPool3d_0a_3x3'", ")", "\n", "branch_3", "=", "Unit3D", "(", "output_channels", "=", "64", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0b_1x1'", ")", "(", "branch_3", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "net", "=", "tf", ".", "concat", "(", "[", "branch_0", ",", "branch_1", ",", "branch_2", ",", "branch_3", "]", ",", "4", ")", "\n", "", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "\n", "end_point", "=", "'Mixed_4e'", "\n", "with", "tf", ".", "variable_scope", "(", "end_point", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "        ", "branch_0", "=", "Unit3D", "(", "output_channels", "=", "112", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "        ", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "144", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "288", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_1", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_2'", ")", ":", "\n", "        ", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "32", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "64", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_2", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_3'", ")", ":", "\n", "        ", "branch_3", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "3", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "snt", ".", "SAME", ",", "\n", "name", "=", "'MaxPool3d_0a_3x3'", ")", "\n", "branch_3", "=", "Unit3D", "(", "output_channels", "=", "64", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0b_1x1'", ")", "(", "branch_3", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "net", "=", "tf", ".", "concat", "(", "[", "branch_0", ",", "branch_1", ",", "branch_2", ",", "branch_3", "]", ",", "4", ")", "\n", "", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "\n", "end_point", "=", "'Mixed_4f'", "\n", "with", "tf", ".", "variable_scope", "(", "end_point", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "        ", "branch_0", "=", "Unit3D", "(", "output_channels", "=", "256", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "        ", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "160", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "320", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_1", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_2'", ")", ":", "\n", "        ", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "32", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "128", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_2", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_3'", ")", ":", "\n", "        ", "branch_3", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "3", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "snt", ".", "SAME", ",", "\n", "name", "=", "'MaxPool3d_0a_3x3'", ")", "\n", "branch_3", "=", "Unit3D", "(", "output_channels", "=", "128", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0b_1x1'", ")", "(", "branch_3", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "net", "=", "tf", ".", "concat", "(", "[", "branch_0", ",", "branch_1", ",", "branch_2", ",", "branch_3", "]", ",", "4", ")", "\n", "", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "\n", "end_point", "=", "'MaxPool3d_5a_2x2'", "\n", "net", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "2", ",", "2", ",", "2", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "padding", "=", "snt", ".", "SAME", ",", "name", "=", "end_point", ")", "\n", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "\n", "end_point", "=", "'Mixed_5b'", "\n", "with", "tf", ".", "variable_scope", "(", "end_point", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "        ", "branch_0", "=", "Unit3D", "(", "output_channels", "=", "256", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "        ", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "160", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "320", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_1", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_2'", ")", ":", "\n", "        ", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "32", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "128", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0a_3x3'", ")", "(", "branch_2", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_3'", ")", ":", "\n", "        ", "branch_3", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "3", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "snt", ".", "SAME", ",", "\n", "name", "=", "'MaxPool3d_0a_3x3'", ")", "\n", "branch_3", "=", "Unit3D", "(", "output_channels", "=", "128", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0b_1x1'", ")", "(", "branch_3", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "net", "=", "tf", ".", "concat", "(", "[", "branch_0", ",", "branch_1", ",", "branch_2", ",", "branch_3", "]", ",", "4", ")", "\n", "", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "\n", "end_point", "=", "'Mixed_5c'", "\n", "with", "tf", ".", "variable_scope", "(", "end_point", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "'Branch_0'", ")", ":", "\n", "        ", "branch_0", "=", "Unit3D", "(", "output_channels", "=", "384", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_1'", ")", ":", "\n", "        ", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "192", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_1", "=", "Unit3D", "(", "output_channels", "=", "384", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_1", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_2'", ")", ":", "\n", "        ", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "48", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0a_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "branch_2", "=", "Unit3D", "(", "output_channels", "=", "128", ",", "kernel_shape", "=", "[", "3", ",", "3", ",", "3", "]", ",", "\n", "name", "=", "'Conv3d_0b_3x3'", ")", "(", "branch_2", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Branch_3'", ")", ":", "\n", "        ", "branch_3", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "3", ",", "3", ",", "3", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "snt", ".", "SAME", ",", "\n", "name", "=", "'MaxPool3d_0a_3x3'", ")", "\n", "branch_3", "=", "Unit3D", "(", "output_channels", "=", "128", ",", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "name", "=", "'Conv3d_0b_1x1'", ")", "(", "branch_3", ",", "\n", "is_training", "=", "is_training", ")", "\n", "", "net", "=", "tf", ".", "concat", "(", "[", "branch_0", ",", "branch_1", ",", "branch_2", ",", "branch_3", "]", ",", "4", ")", "\n", "", "end_points", "[", "end_point", "]", "=", "net", "\n", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "net", ",", "end_points", "\n", "\n", "end_point", "=", "'Logits'", "\n", "with", "tf", ".", "variable_scope", "(", "end_point", ")", ":", "\n", "      ", "net", "=", "tf", ".", "nn", ".", "avg_pool3d", "(", "net", ",", "ksize", "=", "[", "1", ",", "2", ",", "7", ",", "7", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "snt", ".", "VALID", ")", "\n", "net", "=", "tf", ".", "nn", ".", "dropout", "(", "net", ",", "dropout_keep_prob", ")", "\n", "logits", "=", "Unit3D", "(", "output_channels", "=", "self", ".", "_num_classes", ",", "\n", "kernel_shape", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "activation_fn", "=", "None", ",", "\n", "use_batch_norm", "=", "False", ",", "\n", "use_bias", "=", "True", ",", "\n", "name", "=", "'Conv3d_0c_1x1'", ")", "(", "net", ",", "is_training", "=", "is_training", ")", "\n", "if", "self", ".", "_spatial_squeeze", ":", "\n", "        ", "logits", "=", "tf", ".", "squeeze", "(", "logits", ",", "[", "2", ",", "3", "]", ",", "name", "=", "'SpatialSqueeze'", ")", "\n", "\n", "", "", "if", "self", ".", "_final_endpoint", "==", "end_point", ":", "return", "logits", ",", "end_points", "\n", "averaged_logits", "=", "tf", ".", "reduce_mean", "(", "logits", ",", "axis", "=", "1", ")", "\n", "end_points", "[", "end_point", "]", "=", "averaged_logits", "\n", "\n", "end_point", "=", "'Predictions'", "\n", "predictions", "=", "tf", ".", "nn", ".", "softmax", "(", "averaged_logits", ")", "\n", "end_points", "[", "end_point", "]", "=", "predictions", "\n", "return", "predictions", ",", "end_points", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_utils.subsample": [[59, 75], ["slim.max_pool2d"], "function", ["None"], ["", "def", "subsample", "(", "inputs", ",", "factor", ",", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Subsamples the input along the spatial dimensions.\n\n  Args:\n    inputs: A `Tensor` of size [batch, height_in, width_in, channels].\n    factor: The subsampling factor.\n    scope: Optional variable_scope.\n\n  Returns:\n    output: A `Tensor` of size [batch, height_out, width_out, channels] with the\n      input, either intact (if factor == 1) or subsampled (if factor > 1).\n  \"\"\"", "\n", "if", "factor", "==", "1", ":", "\n", "    ", "return", "inputs", "\n", "", "else", ":", "\n", "    ", "return", "slim", ".", "max_pool2d", "(", "inputs", ",", "[", "1", ",", "1", "]", ",", "stride", "=", "factor", ",", "scope", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_utils.conv2d_same": [[77, 123], ["slim.conv2d", "tensorflow.pad", "slim.conv2d"], "function", ["None"], ["", "", "def", "conv2d_same", "(", "inputs", ",", "num_outputs", ",", "kernel_size", ",", "stride", ",", "rate", "=", "1", ",", "scope", "=", "None", ")", ":", "\n", "  ", "\"\"\"Strided 2-D convolution with 'SAME' padding.\n\n  When stride > 1, then we do explicit zero-padding, followed by conv2d with\n  'VALID' padding.\n\n  Note that\n\n     net = conv2d_same(inputs, num_outputs, 3, stride=stride)\n\n  is equivalent to\n\n     net = slim.conv2d(inputs, num_outputs, 3, stride=1, padding='SAME')\n     net = subsample(net, factor=stride)\n\n  whereas\n\n     net = slim.conv2d(inputs, num_outputs, 3, stride=stride, padding='SAME')\n\n  is different when the input's height or width is even, which is why we add the\n  current function. For more details, see ResnetUtilsTest.testConv2DSameEven().\n\n  Args:\n    inputs: A 4-D tensor of size [batch, height_in, width_in, channels].\n    num_outputs: An integer, the number of output filters.\n    kernel_size: An int with the kernel_size of the filters.\n    stride: An integer, the output stride.\n    rate: An integer, rate for atrous convolution.\n    scope: Scope.\n\n  Returns:\n    output: A 4-D tensor of size [batch, height_out, width_out, channels] with\n      the convolution output.\n  \"\"\"", "\n", "if", "stride", "==", "1", ":", "\n", "    ", "return", "slim", ".", "conv2d", "(", "inputs", ",", "num_outputs", ",", "kernel_size", ",", "stride", "=", "1", ",", "rate", "=", "rate", ",", "\n", "padding", "=", "'SAME'", ",", "scope", "=", "scope", ")", "\n", "", "else", ":", "\n", "    ", "kernel_size_effective", "=", "kernel_size", "+", "(", "kernel_size", "-", "1", ")", "*", "(", "rate", "-", "1", ")", "\n", "pad_total", "=", "kernel_size_effective", "-", "1", "\n", "pad_beg", "=", "pad_total", "//", "2", "\n", "pad_end", "=", "pad_total", "-", "pad_beg", "\n", "inputs", "=", "tf", ".", "pad", "(", "inputs", ",", "\n", "[", "[", "0", ",", "0", "]", ",", "[", "pad_beg", ",", "pad_end", "]", ",", "[", "pad_beg", ",", "pad_end", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "return", "slim", ".", "conv2d", "(", "inputs", ",", "num_outputs", ",", "kernel_size", ",", "stride", "=", "stride", ",", "\n", "rate", "=", "rate", ",", "padding", "=", "'VALID'", ",", "scope", "=", "scope", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_utils.stack_blocks_dense": [[125, 197], ["ValueError", "tensorflow.variable_scope", "enumerate", "slim.utils.collect_named_outputs", "ValueError", "tensorflow.variable_scope", "block.unit_fn", "unit.get", "block.unit_fn", "unit.get", "dict"], "function", ["None"], ["", "", "@", "slim", ".", "add_arg_scope", "\n", "def", "stack_blocks_dense", "(", "net", ",", "blocks", ",", "output_stride", "=", "None", ",", "\n", "outputs_collections", "=", "None", ")", ":", "\n", "  ", "\"\"\"Stacks ResNet `Blocks` and controls output feature density.\n\n  First, this function creates scopes for the ResNet in the form of\n  'block_name/unit_1', 'block_name/unit_2', etc.\n\n  Second, this function allows the user to explicitly control the ResNet\n  output_stride, which is the ratio of the input to output spatial resolution.\n  This is useful for dense prediction tasks such as semantic segmentation or\n  object detection.\n\n  Most ResNets consist of 4 ResNet blocks and subsample the activations by a\n  factor of 2 when transitioning between consecutive ResNet blocks. This results\n  to a nominal ResNet output_stride equal to 8. If we set the output_stride to\n  half the nominal network stride (e.g., output_stride=4), then we compute\n  responses twice.\n\n  Control of the output feature density is implemented by atrous convolution.\n\n  Args:\n    net: A `Tensor` of size [batch, height, width, channels].\n    blocks: A list of length equal to the number of ResNet `Blocks`. Each\n      element is a ResNet `Block` object describing the units in the `Block`.\n    output_stride: If `None`, then the output will be computed at the nominal\n      network stride. If output_stride is not `None`, it specifies the requested\n      ratio of input to output spatial resolution, which needs to be equal to\n      the product of unit strides from the start up to some level of the ResNet.\n      For example, if the ResNet employs units with strides 1, 2, 1, 3, 4, 1,\n      then valid values for the output_stride are 1, 2, 6, 24 or None (which\n      is equivalent to output_stride=24).\n    outputs_collections: Collection to add the ResNet block outputs.\n\n  Returns:\n    net: Output tensor with stride equal to the specified output_stride.\n\n  Raises:\n    ValueError: If the target output_stride is not valid.\n  \"\"\"", "\n", "# The current_stride variable keeps track of the effective stride of the", "\n", "# activations. This allows us to invoke atrous convolution whenever applying", "\n", "# the next residual unit would result in the activations having stride larger", "\n", "# than the target output_stride.", "\n", "current_stride", "=", "1", "\n", "\n", "# The atrous convolution rate parameter.", "\n", "rate", "=", "1", "\n", "\n", "for", "block", "in", "blocks", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "block", ".", "scope", ",", "'block'", ",", "[", "net", "]", ")", "as", "sc", ":", "\n", "      ", "for", "i", ",", "unit", "in", "enumerate", "(", "block", ".", "args", ")", ":", "\n", "        ", "if", "output_stride", "is", "not", "None", "and", "current_stride", ">", "output_stride", ":", "\n", "          ", "raise", "ValueError", "(", "'The target output_stride cannot be reached.'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'unit_%d'", "%", "(", "i", "+", "1", ")", ",", "values", "=", "[", "net", "]", ")", ":", "\n", "# If we have reached the target output_stride, then we need to employ", "\n", "# atrous convolution with stride=1 and multiply the atrous rate by the", "\n", "# current unit's stride for use in subsequent layers.", "\n", "          ", "if", "output_stride", "is", "not", "None", "and", "current_stride", "==", "output_stride", ":", "\n", "            ", "net", "=", "block", ".", "unit_fn", "(", "net", ",", "rate", "=", "rate", ",", "**", "dict", "(", "unit", ",", "stride", "=", "1", ")", ")", "\n", "rate", "*=", "unit", ".", "get", "(", "'stride'", ",", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "net", "=", "block", ".", "unit_fn", "(", "net", ",", "rate", "=", "1", ",", "**", "unit", ")", "\n", "current_stride", "*=", "unit", ".", "get", "(", "'stride'", ",", "1", ")", "\n", "", "", "", "net", "=", "slim", ".", "utils", ".", "collect_named_outputs", "(", "outputs_collections", ",", "sc", ".", "name", ",", "net", ")", "\n", "\n", "", "", "if", "output_stride", "is", "not", "None", "and", "current_stride", "!=", "output_stride", ":", "\n", "    ", "raise", "ValueError", "(", "'The target output_stride cannot be reached.'", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.MKLab-ITI_visil.nets.resnet_utils.resnet_arg_scope": [[199, 250], ["slim.arg_scope", "slim.arg_scope", "slim.l2_regularizer", "slim.variance_scaling_initializer", "slim.arg_scope"], "function", ["None"], ["", "def", "resnet_arg_scope", "(", "weight_decay", "=", "0.0001", ",", "\n", "batch_norm_decay", "=", "0.997", ",", "\n", "batch_norm_epsilon", "=", "1e-5", ",", "\n", "batch_norm_scale", "=", "True", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "use_batch_norm", "=", "True", ")", ":", "\n", "  ", "\"\"\"Defines the default ResNet arg scope.\n\n  TODO(gpapan): The batch-normalization related default values above are\n    appropriate for use in conjunction with the reference ResNet models\n    released at https://github.com/KaimingHe/deep-residual-networks. When\n    training ResNets from scratch, they might need to be tuned.\n\n  Args:\n    weight_decay: The weight decay to use for regularizing the model.\n    batch_norm_decay: The moving average decay when estimating layer activation\n      statistics in batch normalization.\n    batch_norm_epsilon: Small constant to prevent division by zero when\n      normalizing activations by their variance in batch normalization.\n    batch_norm_scale: If True, uses an explicit `gamma` multiplier to scale the\n      activations in the batch normalization layer.\n    activation_fn: The activation function which is used in ResNet.\n    use_batch_norm: Whether or not to use batch normalization.\n\n  Returns:\n    An `arg_scope` to use for the resnet models.\n  \"\"\"", "\n", "batch_norm_params", "=", "{", "\n", "'decay'", ":", "batch_norm_decay", ",", "\n", "'epsilon'", ":", "batch_norm_epsilon", ",", "\n", "'scale'", ":", "batch_norm_scale", ",", "\n", "'updates_collections'", ":", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "\n", "'fused'", ":", "None", ",", "# Use fused batch norm if possible.", "\n", "}", "\n", "\n", "with", "slim", ".", "arg_scope", "(", "\n", "[", "slim", ".", "conv2d", "]", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", ",", "\n", "weights_initializer", "=", "slim", ".", "variance_scaling_initializer", "(", ")", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", "if", "use_batch_norm", "else", "None", ",", "\n", "normalizer_params", "=", "batch_norm_params", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", "]", ",", "**", "batch_norm_params", ")", ":", "\n", "# The following implies padding='SAME' for pool1, which makes feature", "\n", "# alignment easier for dense prediction tasks. This is also used in", "\n", "# https://github.com/facebook/fb.resnet.torch. However the accompanying", "\n", "# code of 'Deep Residual Learning for Image Recognition' uses", "\n", "# padding='VALID' for pool1. You can switch to that choice by setting", "\n", "# slim.arg_scope([slim.max_pool2d], padding='VALID').", "\n", "      ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "max_pool2d", "]", ",", "padding", "=", "'SAME'", ")", "as", "arg_sc", ":", "\n", "        ", "return", "arg_sc", "\n", "", "", "", "", ""]]}