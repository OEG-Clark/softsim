{"home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.__init__": [[16, 48], ["model_rdosr.Network.build_graph", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.truncated_normal", "tensorflow.truncated_normal", "tensorflow.truncated_normal", "tensorflow.truncated_normal"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.build_graph"], ["    ", "def", "__init__", "(", "self", ",", "tf_x", ",", "tf_y", ",", "num_categories", ",", "lr", "=", "0.001", ",", "hidden_layers", "=", "None", ",", "num", "=", "10", ",", "is_adam", "=", "True", ",", "lambda_r", "=", "0.5", ",", "lambda_s", "=", "0.001", ",", "lambda_c", "=", "0.5", ",", "dim", "=", "1", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        build the RDOSR network\n        :param tf_x: tf.placeholder with shape (batch_size, height, 1, 1), input data\n        :param tf_y: tf.placeholder with shape (batch_size, num_categories), one-hot label\n        :param num_categories: int, number of categories\n        :param lr: float, learning rate\n        :param hidden_layers: a list or tuple of int, the channel number of each hidden layer,\n        :param reuse: bool, whether reuse the graph\n        :param is_train: bool, whether in training mode or testing mode\n        \"\"\"", "\n", "# initialize the input and weights matrices", "\n", "self", ".", "tf_x", ",", "self", ".", "tf_y", "=", "tf_x", ",", "tf_y", "\n", "self", ".", "num_categories", "=", "num_categories", "\n", "self", ".", "initlr_F", "=", "lr", "\n", "self", ".", "initlr_EDC", "=", "lr", "\n", "self", ".", "hidden_layers", "=", "hidden_layers", "\n", "self", ".", "num", "=", "num", "\n", "self", ".", "is_adam", "=", "is_adam", "\n", "self", ".", "lambda_r", "=", "lambda_r", "\n", "self", ".", "lambda_s", "=", "lambda_s", "\n", "self", ".", "lambda_c", "=", "lambda_c", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'var_decoder'", ")", "as", "scope", ":", "\n", "            ", "self", ".", "wdecoder", "=", "{", "\n", "'lr_decoder_w1'", ":", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "self", ".", "num", ",", "self", ".", "num", "]", ",", "stddev", "=", "0.1", ")", ")", ",", "\n", "'lr_decoder_w2'", ":", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "self", ".", "num", ",", "self", ".", "num_categories", "]", ",", "stddev", "=", "0.1", ")", ")", ",", "\n", "}", "\n", "\n", "# build the network\t", "\n", "", "self", ".", "opt_F", ",", "self", ".", "loss_F", ",", "self", ".", "opt_EDC", ",", "self", ".", "loss_EDC", ",", "self", ".", "loss_euc", ",", "self", ".", "loss_sparse", ",", "self", ".", "accuracy_F", "=", "self", ".", "build_graph", "(", "reuse", "=", "reuse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.compute_latent_vars_break": [[49, 54], ["None"], "methods", ["None"], ["", "def", "compute_latent_vars_break", "(", "self", ",", "i", ",", "remaining_stick", ",", "v_samples", ")", ":", "\n", "# compute stick segment", "\n", "        ", "stick_segment", "=", "v_samples", "[", ":", ",", "i", "]", "*", "remaining_stick", "\n", "remaining_stick", "*=", "(", "1", "-", "v_samples", "[", ":", ",", "i", "]", ")", "\n", "return", "(", "stick_segment", ",", "remaining_stick", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.construct_vsamples": [[55, 61], ["range", "tensorflow.concat", "tensorflow.concat"], "methods", ["None"], ["", "def", "construct_vsamples", "(", "self", ",", "uniform", ",", "wb", ",", "hsize", ")", ":", "\n", "        ", "concat_wb", "=", "wb", "\n", "for", "iter", "in", "range", "(", "hsize", "-", "1", ")", ":", "\n", "            ", "concat_wb", "=", "tf", ".", "concat", "(", "[", "concat_wb", ",", "wb", "]", ",", "1", ")", "\n", "", "v_samples", "=", "uniform", "**", "(", "1.0", "/", "concat_wb", ")", "\n", "return", "v_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.encoder_uniform": [[62, 78], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "methods", ["None"], ["", "def", "encoder_uniform", "(", "self", ",", "x", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "layer_1", "=", "x", "#shape: [N,L], L is the number of bands", "\n", "with", "tf", ".", "variable_scope", "(", "'var_uniform'", ")", "as", "scope", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "layer_11", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "layer_1", ",", "self", ".", "hidden_layers", "[", "0", "]", ",", "activation_fn", "=", "None", ")", "\n", "stack_layer_11", "=", "tf", ".", "concat", "(", "[", "x", ",", "layer_11", "]", ",", "1", ")", "\n", "layer_12", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "stack_layer_11", ",", "self", ".", "hidden_layers", "[", "1", "]", ",", "activation_fn", "=", "None", ")", "\n", "stack_layer_12", "=", "tf", ".", "concat", "(", "[", "stack_layer_11", ",", "layer_12", "]", ",", "1", ")", "\n", "layer_13", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "stack_layer_12", ",", "self", ".", "hidden_layers", "[", "2", "]", ",", "activation_fn", "=", "None", ")", "\n", "stack_layer_13", "=", "tf", ".", "concat", "(", "[", "stack_layer_12", ",", "layer_13", "]", ",", "1", ")", "\n", "layer_14", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "stack_layer_13", ",", "self", ".", "hidden_layers", "[", "3", "]", ",", "activation_fn", "=", "None", ")", "\n", "stack_layer_14", "=", "tf", ".", "concat", "(", "[", "stack_layer_13", ",", "layer_14", "]", ",", "1", ")", "\n", "\n", "uniform", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "stack_layer_14", ",", "self", ".", "num", ",", "activation_fn", "=", "None", ")", "\n", "", "return", "layer_1", ",", "uniform", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.encoder_beta": [[79, 89], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "methods", ["None"], ["", "def", "encoder_beta", "(", "self", ",", "x", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'var_beta'", ")", "as", "scope", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "layer_21", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "x", ",", "self", ".", "hidden_layers", "[", "0", "]", ",", "activation_fn", "=", "None", ")", "\n", "stack_layer_21", "=", "tf", ".", "concat", "(", "[", "x", ",", "layer_21", "]", ",", "1", ")", "\n", "layer_22", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "stack_layer_21", ",", "self", ".", "hidden_layers", "[", "1", "]", ",", "activation_fn", "=", "None", ")", "\n", "stack_layer_22", "=", "tf", ".", "concat", "(", "[", "layer_22", ",", "stack_layer_21", "]", ",", "1", ")", "\n", "layer_32", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "stack_layer_22", ",", "1", ",", "activation_fn", "=", "None", ")", "\n", "", "return", "layer_32", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.encoder_vsamples": [[90, 97], ["model_rdosr.Network.encoder_uniform", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "model_rdosr.Network.encoder_beta", "tensorflow.nn.softplus", "tensorflow.nn.softplus", "model_rdosr.Network.construct_vsamples"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder_uniform", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder_beta", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.construct_vsamples"], ["", "def", "encoder_vsamples", "(", "self", ",", "x", ",", "hsize", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "layer1", ",", "uniform", "=", "self", ".", "encoder_uniform", "(", "x", ",", "reuse", ")", "\n", "uniform", "=", "tf", ".", "nn", ".", "sigmoid", "(", "uniform", ")", "\n", "wb", "=", "self", ".", "encoder_beta", "(", "layer1", ",", "reuse", ")", "\n", "wb", "=", "tf", ".", "nn", ".", "softplus", "(", "wb", ")", "\n", "v_samples", "=", "self", ".", "construct_vsamples", "(", "uniform", ",", "wb", ",", "hsize", ")", "\n", "return", "v_samples", ",", "uniform", ",", "wb", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.construct_stick_break": [[98, 109], ["int", "tensorflow.ones", "tensorflow.ones", "range", "model_rdosr.Network.compute_latent_vars_break", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.compute_latent_vars_break"], ["", "def", "construct_stick_break", "(", "self", ",", "vsample", ",", "dim", ",", "stick_size", ")", ":", "\n", "        ", "size", "=", "dim", "\n", "size", "=", "int", "(", "size", ")", "\n", "remaining_stick", "=", "tf", ".", "ones", "(", "size", ",", ")", "\n", "for", "i", "in", "range", "(", "stick_size", ")", ":", "\n", "            ", "[", "stick_segment", ",", "remaining_stick", "]", "=", "self", ".", "compute_latent_vars_break", "(", "i", ",", "remaining_stick", ",", "vsample", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "stick_segment_sum_lr", "=", "tf", ".", "expand_dims", "(", "stick_segment", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "stick_segment_sum_lr", "=", "tf", ".", "concat", "(", "[", "stick_segment_sum_lr", ",", "tf", ".", "expand_dims", "(", "stick_segment", ",", "1", ")", "]", ",", "1", ")", "\n", "", "", "return", "stick_segment_sum_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.encoder": [[110, 114], ["model_rdosr.Network.encoder_vsamples", "model_rdosr.Network.construct_stick_break"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder_vsamples", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.construct_stick_break"], ["", "def", "encoder", "(", "self", ",", "x", ",", "dim", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "v_samples", ",", "uniform", ",", "wb", "=", "self", ".", "encoder_vsamples", "(", "x", ",", "self", ".", "num", ",", "reuse", ")", "\n", "stick_segment_sum_lr", "=", "self", ".", "construct_stick_break", "(", "v_samples", ",", "dim", ",", "self", ".", "num", ")", "\n", "return", "stick_segment_sum_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.decoder": [[115, 119], ["tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["", "def", "decoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "layer_1", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "wdecoder", "[", "'lr_decoder_w1'", "]", ")", "\n", "layer_2", "=", "tf", ".", "matmul", "(", "layer_1", ",", "self", ".", "wdecoder", "[", "'lr_decoder_w2'", "]", ")", "\n", "return", "layer_2", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.generator": [[120, 124], ["model_rdosr.Network.encoder", "model_rdosr.Network.decoder"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.decoder"], ["", "def", "generator", "(", "self", ",", "x", ",", "dim", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "encoder_op", "=", "self", ".", "encoder", "(", "x", ",", "dim", ",", "reuse", ")", "\n", "decoder_op", "=", "self", ".", "decoder", "(", "encoder_op", ")", "\n", "return", "decoder_op", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.classifier_C": [[125, 132], ["model_rdosr.Network.encoder", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder"], ["", "def", "classifier_C", "(", "self", ",", "x", ",", "dim", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "encoder_x", "=", "self", ".", "encoder", "(", "x", ",", "dim", ",", "reuse", "=", "True", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'var_cls_c'", ")", "as", "scope", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "layer_cls", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "encoder_x", ",", "self", ".", "num_categories", ",", "activation_fn", "=", "None", ")", "\n", "", "return", "layer_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.classifier_F": [[133, 144], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "methods", ["None"], ["", "def", "classifier_F", "(", "self", ",", "x", ",", "dim", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "layer_1", "=", "x", "#shape: [N,103], 103 is number of bands", "\n", "with", "tf", ".", "variable_scope", "(", "'var_cls_f'", ")", "as", "scope", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "layer_11", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "layer_1", ",", "512", ")", "\n", "layer_12", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "layer_11", ",", "1024", ")", "\n", "layer_13", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "layer_12", ",", "512", ")", "\n", "layer_14", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "layer_13", ",", "32", ")", "\n", "layer_5", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "layer_14", ",", "self", ".", "num_categories", ",", "activation_fn", "=", "None", ")", "\n", "", "return", "layer_5", ",", "layer_14", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.build_graph": [[145, 203], ["model_rdosr.Network.classifier_F", "tensorflow.abs", "tensorflow.abs", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.optimize_loss", "tensorflow.optimize_loss", "tensorflow.equal", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "model_rdosr.Network.classifier_F", "model_rdosr.Network.generator", "model_rdosr.Network.encoder", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.div", "tensorflow.div", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "model_rdosr.Network.classifier_C", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.optimize_loss", "tensorflow.optimize_loss", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.pow", "tensorflow.pow", "tensorflow.log", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.classifier_F", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.model_rdosr.Network.classifier_F", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.generator", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.classifier_C"], ["", "def", "build_graph", "(", "self", ",", "reuse", "=", "False", ")", ":", "\n", "\n", "#--- Classifier F", "\n", "# classification loss", "\n", "        ", "output_F", ",", "input_feature", "=", "self", ".", "classifier_F", "(", "self", ".", "tf_x", ",", "self", ".", "dim", ",", "reuse", "=", "reuse", ")", "\n", "sparsity", "=", "tf", ".", "abs", "(", "output_F", ")", "\n", "sparse_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "sparsity", ",", "-", "1", ")", ")", "\n", "\n", "loss_F", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "self", ".", "tf_y", ",", "logits", "=", "output_F", ")", ")", "+", "0.1", "*", "sparse_loss", "\n", "\n", "# optimizaer", "\n", "theta_F", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'var_cls_f'", ")", "\n", "counter_F", "=", "tf", ".", "Variable", "(", "trainable", "=", "False", ",", "initial_value", "=", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "opt_F", "=", "ly", ".", "optimize_loss", "(", "loss", "=", "loss_F", ",", "learning_rate", "=", "self", ".", "initlr_F", ",", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "if", "self", ".", "is_adam", "is", "True", "else", "tf", ".", "train", ".", "RMSPropOptimizer", ",", "\n", "variables", "=", "theta_F", ",", "global_step", "=", "counter_F", ")", "\n", "\n", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "output_F", ",", "axis", "=", "1", ")", ",", "tf", ".", "argmax", "(", "self", ".", "tf_y", ",", "axis", "=", "1", ")", ")", "\n", "accuracy_F", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_prediction", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "\n", "#--- Autoencoder + Dirichlet + Classifier C", "\n", "# reconstruction", "\n", "input_ae_", ",", "input_feature", "=", "self", ".", "classifier_F", "(", "self", ".", "tf_x", ",", "self", ".", "dim", ",", "reuse", "=", "True", ")", "\n", "input_ae", "=", "input_ae_", "/", "10", "\n", "output_ae", "=", "self", ".", "generator", "(", "input_ae", ",", "self", ".", "dim", ",", "reuse", "=", "reuse", ")", "\n", "reconstruction_error", "=", "output_ae", "-", "input_ae", "\n", "loss_euc", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "reconstruction_error", ",", "2", ")", ",", "0", ")", ")", "/", "100", "\n", "\n", "# spatial sparse", "\n", "eps", "=", "0.00000001", "\n", "s_j", "=", "self", ".", "encoder", "(", "input_ae", ",", "self", ".", "dim", ",", "reuse", "=", "True", ")", "\n", "s_base", "=", "tf", ".", "reduce_sum", "(", "s_j", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "sparse", "=", "tf", ".", "div", "(", "s_j", ",", "(", "s_base", "+", "eps", ")", ")", "\n", "loss_sparse", "=", "tf", ".", "reduce_mean", "(", "-", "tf", ".", "multiply", "(", "sparse", ",", "tf", ".", "log", "(", "sparse", "+", "eps", ")", ")", ")", "\n", "\n", "# classification loss", "\n", "output_C", "=", "self", ".", "classifier_C", "(", "input_ae", ",", "self", ".", "dim", ",", "reuse", "=", "reuse", ")", "\n", "loss_C", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "self", ".", "tf_y", ",", "logits", "=", "output_C", ")", ")", "\n", "\n", "# total loss", "\n", "loss_EDC", "=", "self", ".", "lambda_r", "*", "loss_euc", "+", "self", ".", "lambda_s", "*", "loss_sparse", "+", "self", ".", "lambda_c", "*", "loss_C", "\n", "\n", "# optimizer", "\n", "theta_basic_decoder", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'var_decoder'", ")", "\n", "theta_uniform", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'var_uniform'", ")", "\n", "theta_beta", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'var_beta'", ")", "\n", "theta_cls_c", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'var_cls_c'", ")", "\n", "counter_EDC", "=", "tf", ".", "Variable", "(", "trainable", "=", "False", ",", "initial_value", "=", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "opt_EDC", "=", "ly", ".", "optimize_loss", "(", "loss", "=", "loss_EDC", ",", "learning_rate", "=", "self", ".", "initlr_EDC", ",", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "if", "self", ".", "is_adam", "is", "True", "else", "tf", ".", "train", ".", "RMSPropOptimizer", ",", "\n", "variables", "=", "theta_basic_decoder", "+", "theta_uniform", "+", "theta_beta", "+", "theta_cls_c", ",", "global_step", "=", "counter_EDC", ")", "\n", "\n", "return", "opt_F", ",", "loss_F", ",", "opt_EDC", ",", "loss_EDC", ",", "loss_euc", ",", "loss_sparse", ",", "accuracy_F", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.data.load_data": [[5, 24], ["scipy.io.loadmat", "scipy.io.loadmat.copy", "isinstance"], "function", ["None"], ["def", "load_data", "(", "data_dir", ")", ":", "\n", "    ", "\"\"\"\n    load known/unknown data\n    param data_dir: file dir\n    :return: dict, {str: array} --> {variable_name: data}, useful data\n    \"\"\"", "\n", "mat_data", "=", "loadmat", "(", "data_dir", ")", "\n", "if", "mat_data", ":", "\n", "        ", "buildin_keys", "=", "[", "'__version__'", ",", "'__header__'", ",", "'__globals__'", "]", "\n", "buildin_data", "=", "{", "}", "\n", "for", "key", "in", "mat_data", ".", "copy", "(", ")", ":", "\n", "            ", "if", "key", "in", "buildin_keys", ":", "\n", "                ", "buildin_data", "[", "key", "]", "=", "mat_data", "[", "key", "]", "\n", "del", "mat_data", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "assert", "isinstance", "(", "mat_data", "[", "key", "]", ",", "np", ".", "ndarray", ")", "\n", "", "", "return", "mat_data", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.data.format_data": [[26, 56], ["isinstance", "enumerate", "x.astype.astype", "numpy.squeeze", "numpy.zeros", "len", "exit", "numpy.arange", "len"], "function", ["None"], ["", "def", "format_data", "(", "data_dict", ",", "key_x", ",", "key_y", ",", "num_labels", "=", "9", ")", ":", "\n", "    ", "\"\"\"\n    format the data into data and label\n    :param data_dict: dict, the data arrays\n    :param key_x: str, name of data variable\n    :param key_y: str, name of label variable\n    :param num_labels: int, the number of labels/categories\n    :return: two arrays, assume the axis 0 is the number of samples\n    \"\"\"", "\n", "assert", "isinstance", "(", "data_dict", ",", "dict", ")", "\n", "data_tmp", "=", "[", "None", ",", "None", "]", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "[", "key_x", ",", "key_y", "]", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "data_tmp", "[", "i", "]", "=", "data_dict", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "exit", "(", "\"Error: The variable '%s' does not exist\"", "%", "key", ")", "\n", "\n", "", "", "x", ",", "y", "=", "data_tmp", "\n", "x_shape", ",", "y_shape", "=", "x", ".", "shape", ",", "y", ".", "shape", "\n", "assert", "x_shape", "[", "0", "]", "==", "y_shape", "[", "0", "]", "\n", "\n", "# make x float32", "\n", "x", "=", "x", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# make y to be one-hot labels", "\n", "y", "=", "np", ".", "squeeze", "(", "y", ")", "\n", "y_one_hot", "=", "np", ".", "zeros", "(", "(", "len", "(", "y", ")", ",", "num_labels", ")", ")", "\n", "y_one_hot", "[", "np", ".", "arange", "(", "len", "(", "y", ")", ")", ",", "y", "-", "1", "]", "=", "1", "\n", "\n", "return", "x", ",", "y_one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.None.data.seed_train_test": [[58, 73], ["numpy.arange", "numpy.random.shuffle", "int", "numpy.random.seed", "numpy.round", "int"], "function", ["None"], ["", "def", "seed_train_test", "(", "x", ",", "y", ",", "percentage", "=", ".3", ",", "random_seed", "=", "2020", ")", ":", "\n", "    ", "if", "random_seed", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "int", "(", "random_seed", ")", ")", "\n", "", "num_samples", "=", "x", ".", "shape", "[", "0", "]", "\n", "assert", "num_samples", "==", "y", ".", "shape", "[", "0", "]", "\n", "\n", "# randomly sample testing data", "\n", "indices", "=", "np", ".", "arange", "(", "num_samples", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "idx_split", "=", "int", "(", "np", ".", "round", "(", "num_samples", "*", "percentage", ")", ")", "\n", "indices_te", "=", "indices", "[", ":", "idx_split", "]", "\n", "indices_tr", "=", "indices", "[", "idx_split", ":", "]", "\n", "x_te", ",", "y_te", "=", "x", "[", "indices_te", ",", "...", "]", ",", "y", "[", "indices_te", ",", "...", "]", "\n", "x_tr", ",", "y_tr", "=", "x", "[", "indices_tr", ",", "...", "]", ",", "y", "[", "indices_tr", ",", "...", "]", "\n", "return", "x_tr", ",", "y_tr", ",", "x_te", ",", "y_te", "\n", "", ""]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.__init__": [[18, 50], ["model_rdosr.Network.build_graph", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.truncated_normal", "tensorflow.truncated_normal", "tensorflow.truncated_normal", "tensorflow.truncated_normal"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.build_graph"], ["\n", "# initialize the input and weights matrices", "\n", "self", ".", "tf_x", ",", "self", ".", "tf_y", "=", "tf_x", ",", "tf_y", "\n", "self", ".", "num_categories", "=", "num_categories", "\n", "self", ".", "initlr_F", "=", "lr", "\n", "self", ".", "initlr_EDC", "=", "lr", "\n", "self", ".", "hidden_layers", "=", "hidden_layers", "\n", "self", ".", "num", "=", "num", "\n", "self", ".", "is_adam", "=", "is_adam", "\n", "self", ".", "lambda_r", "=", "lambda_r", "\n", "self", ".", "lambda_s", "=", "lambda_s", "\n", "self", ".", "lambda_c", "=", "lambda_c", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'var_decoder'", ")", "as", "scope", ":", "\n", "            ", "self", ".", "wdecoder", "=", "{", "\n", "'lr_decoder_w1'", ":", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "self", ".", "num", ",", "self", ".", "num", "]", ",", "stddev", "=", "0.1", ")", ")", ",", "\n", "'lr_decoder_w2'", ":", "tf", ".", "Variable", "(", "tf", ".", "truncated_normal", "(", "[", "self", ".", "num", ",", "self", ".", "num_categories", "]", ",", "stddev", "=", "0.1", ")", ")", ",", "\n", "}", "\n", "\n", "# build the network\t", "\n", "", "self", ".", "opt_F", ",", "self", ".", "loss_F", ",", "self", ".", "opt_EDC", ",", "self", ".", "loss_EDC", ",", "self", ".", "loss_euc", ",", "self", ".", "loss_sparse", ",", "self", ".", "accuracy_F", "=", "self", ".", "build_graph", "(", "reuse", "=", "reuse", ")", "\n", "\n", "", "def", "compute_latent_vars_break", "(", "self", ",", "i", ",", "remaining_stick", ",", "v_samples", ")", ":", "\n", "# compute stick segment", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.compute_latent_vars_break": [[51, 56], ["None"], "methods", ["None"], ["        ", "stick_segment", "=", "v_samples", "[", ":", ",", "i", "]", "*", "remaining_stick", "\n", "remaining_stick", "*=", "(", "1", "-", "v_samples", "[", ":", ",", "i", "]", ")", "\n", "return", "(", "stick_segment", ",", "remaining_stick", ")", "\n", "\n", "", "def", "construct_vsamples", "(", "self", ",", "uniform", ",", "wb", ",", "hsize", ")", ":", "\n", "        ", "concat_wb", "=", "wb", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.construct_vsamples": [[57, 63], ["range", "tensorflow.concat", "tensorflow.concat"], "methods", ["None"], ["for", "iter", "in", "range", "(", "hsize", "-", "1", ")", ":", "\n", "            ", "concat_wb", "=", "tf", ".", "concat", "(", "[", "concat_wb", ",", "wb", "]", ",", "1", ")", "\n", "", "v_samples", "=", "uniform", "**", "(", "1.0", "/", "concat_wb", ")", "\n", "return", "v_samples", "\n", "\n", "", "def", "encoder_uniform", "(", "self", ",", "x", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "layer_1", "=", "x", "#shape: [N,L], L is the number of bands", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder_uniform": [[64, 80], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "methods", ["None"], ["with", "tf", ".", "variable_scope", "(", "'var_uniform'", ")", "as", "scope", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "layer_11", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "layer_1", ",", "self", ".", "hidden_layers", "[", "0", "]", ",", "activation_fn", "=", "None", ")", "\n", "stack_layer_11", "=", "tf", ".", "concat", "(", "[", "x", ",", "layer_11", "]", ",", "1", ")", "\n", "layer_12", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "stack_layer_11", ",", "self", ".", "hidden_layers", "[", "1", "]", ",", "activation_fn", "=", "None", ")", "\n", "stack_layer_12", "=", "tf", ".", "concat", "(", "[", "stack_layer_11", ",", "layer_12", "]", ",", "1", ")", "\n", "layer_13", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "stack_layer_12", ",", "self", ".", "hidden_layers", "[", "2", "]", ",", "activation_fn", "=", "None", ")", "\n", "stack_layer_13", "=", "tf", ".", "concat", "(", "[", "stack_layer_12", ",", "layer_13", "]", ",", "1", ")", "\n", "layer_14", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "stack_layer_13", ",", "self", ".", "hidden_layers", "[", "3", "]", ",", "activation_fn", "=", "None", ")", "\n", "stack_layer_14", "=", "tf", ".", "concat", "(", "[", "stack_layer_13", ",", "layer_14", "]", ",", "1", ")", "\n", "\n", "uniform", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "stack_layer_14", ",", "self", ".", "num", ",", "activation_fn", "=", "None", ")", "\n", "", "return", "layer_1", ",", "uniform", "\n", "\n", "", "def", "encoder_beta", "(", "self", ",", "x", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'var_beta'", ")", "as", "scope", ":", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder_beta": [[81, 91], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.concat", "tensorflow.concat", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "methods", ["None"], ["            ", "if", "reuse", ":", "\n", "                ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "layer_21", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "x", ",", "self", ".", "hidden_layers", "[", "0", "]", ",", "activation_fn", "=", "None", ")", "\n", "stack_layer_21", "=", "tf", ".", "concat", "(", "[", "x", ",", "layer_21", "]", ",", "1", ")", "\n", "layer_22", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "stack_layer_21", ",", "self", ".", "hidden_layers", "[", "1", "]", ",", "activation_fn", "=", "None", ")", "\n", "stack_layer_22", "=", "tf", ".", "concat", "(", "[", "layer_22", ",", "stack_layer_21", "]", ",", "1", ")", "\n", "layer_32", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "stack_layer_22", ",", "1", ",", "activation_fn", "=", "None", ")", "\n", "", "return", "layer_32", "\n", "\n", "", "def", "encoder_vsamples", "(", "self", ",", "x", ",", "hsize", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "layer1", ",", "uniform", "=", "self", ".", "encoder_uniform", "(", "x", ",", "reuse", ")", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder_vsamples": [[92, 99], ["model_rdosr.Network.encoder_uniform", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "model_rdosr.Network.encoder_beta", "tensorflow.nn.softplus", "tensorflow.nn.softplus", "model_rdosr.Network.construct_vsamples"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder_uniform", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder_beta", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.construct_vsamples"], ["uniform", "=", "tf", ".", "nn", ".", "sigmoid", "(", "uniform", ")", "\n", "wb", "=", "self", ".", "encoder_beta", "(", "layer1", ",", "reuse", ")", "\n", "wb", "=", "tf", ".", "nn", ".", "softplus", "(", "wb", ")", "\n", "v_samples", "=", "self", ".", "construct_vsamples", "(", "uniform", ",", "wb", ",", "hsize", ")", "\n", "return", "v_samples", ",", "uniform", ",", "wb", "\n", "\n", "", "def", "construct_stick_break", "(", "self", ",", "vsample", ",", "dim", ",", "stick_size", ")", ":", "\n", "        ", "size", "=", "dim", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.construct_stick_break": [[100, 111], ["int", "tensorflow.ones", "tensorflow.ones", "range", "model_rdosr.Network.compute_latent_vars_break", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.concat", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.expand_dims"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.compute_latent_vars_break"], ["size", "=", "int", "(", "size", ")", "\n", "remaining_stick", "=", "tf", ".", "ones", "(", "size", ",", ")", "\n", "for", "i", "in", "range", "(", "stick_size", ")", ":", "\n", "            ", "[", "stick_segment", ",", "remaining_stick", "]", "=", "self", ".", "compute_latent_vars_break", "(", "i", ",", "remaining_stick", ",", "vsample", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "stick_segment_sum_lr", "=", "tf", ".", "expand_dims", "(", "stick_segment", ",", "1", ")", "\n", "", "else", ":", "\n", "                ", "stick_segment_sum_lr", "=", "tf", ".", "concat", "(", "[", "stick_segment_sum_lr", ",", "tf", ".", "expand_dims", "(", "stick_segment", ",", "1", ")", "]", ",", "1", ")", "\n", "", "", "return", "stick_segment_sum_lr", "\n", "\n", "", "def", "encoder", "(", "self", ",", "x", ",", "dim", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "v_samples", ",", "uniform", ",", "wb", "=", "self", ".", "encoder_vsamples", "(", "x", ",", "self", ".", "num", ",", "reuse", ")", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder": [[112, 116], ["model_rdosr.Network.encoder_vsamples", "model_rdosr.Network.construct_stick_break"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder_vsamples", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.construct_stick_break"], ["stick_segment_sum_lr", "=", "self", ".", "construct_stick_break", "(", "v_samples", ",", "dim", ",", "self", ".", "num", ")", "\n", "return", "stick_segment_sum_lr", "\n", "\n", "", "def", "decoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "layer_1", "=", "tf", ".", "matmul", "(", "x", ",", "self", ".", "wdecoder", "[", "'lr_decoder_w1'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.decoder": [[117, 121], ["tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul"], "methods", ["None"], ["layer_2", "=", "tf", ".", "matmul", "(", "layer_1", ",", "self", ".", "wdecoder", "[", "'lr_decoder_w2'", "]", ")", "\n", "return", "layer_2", "\n", "\n", "", "def", "generator", "(", "self", ",", "x", ",", "dim", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "encoder_op", "=", "self", ".", "encoder", "(", "x", ",", "dim", ",", "reuse", ")", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.generator": [[122, 126], ["model_rdosr.Network.encoder", "model_rdosr.Network.decoder"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.decoder"], ["decoder_op", "=", "self", ".", "decoder", "(", "encoder_op", ")", "\n", "return", "decoder_op", "\n", "\n", "", "def", "classifier_C", "(", "self", ",", "x", ",", "dim", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "encoder_x", "=", "self", ".", "encoder", "(", "x", ",", "dim", ",", "reuse", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.classifier_C": [[127, 134], ["model_rdosr.Network.encoder", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.contrib.layers.fully_connected", "tensorflow.contrib.layers.fully_connected", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.get_variable_scope", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder"], ["with", "tf", ".", "variable_scope", "(", "'var_cls_c'", ")", "as", "scope", ":", "\n", "            ", "if", "reuse", ":", "\n", "                ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "layer_cls", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "encoder_x", ",", "self", ".", "num_categories", ",", "activation_fn", "=", "None", ")", "\n", "", "return", "layer_cls", "\n", "\n", "", "def", "classifier_F", "(", "self", ",", "x", ",", "dim", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "layer_1", "=", "x", "#shape: [N,103], 103 is number of bands", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.build_graph": [[136, 197], ["model_rdosr.Network.generator", "model_rdosr.Network.encoder", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.div", "tensorflow.div", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "model_rdosr.Network.classifier_C", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.optimize_loss", "tensorflow.optimize_loss", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.pow", "tensorflow.pow", "tensorflow.log", "tensorflow.log"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.generator", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.encoder", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.model_rdosr.Network.classifier_C"], ["            ", "if", "reuse", ":", "\n", "                ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "layer_11", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "layer_1", ",", "512", ")", "\n", "layer_12", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "layer_11", ",", "1024", ")", "\n", "layer_13", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "layer_12", ",", "512", ")", "\n", "layer_14", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "layer_13", ",", "32", ")", "\n", "layer_5", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "layer_14", ",", "self", ".", "num_categories", ",", "activation_fn", "=", "None", ")", "\n", "", "return", "layer_5", ",", "layer_14", "\n", "\n", "", "def", "build_graph", "(", "self", ",", "reuse", "=", "False", ")", ":", "\n", "\n", "#--- Classifier F", "\n", "# classification loss", "\n", "        ", "output_F", ",", "input_feature", "=", "self", ".", "classifier_F", "(", "self", ".", "tf_x", ",", "self", ".", "dim", ",", "reuse", "=", "reuse", ")", "\n", "sparsity", "=", "tf", ".", "abs", "(", "output_F", ")", "\n", "sparse_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "sparsity", ",", "-", "1", ")", ")", "\n", "\n", "loss_F", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "self", ".", "tf_y", ",", "logits", "=", "output_F", ")", ")", "+", "0.1", "*", "sparse_loss", "\n", "\n", "# optimizaer", "\n", "theta_F", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'var_cls_f'", ")", "\n", "counter_F", "=", "tf", ".", "Variable", "(", "trainable", "=", "False", ",", "initial_value", "=", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n", "opt_F", "=", "ly", ".", "optimize_loss", "(", "loss", "=", "loss_F", ",", "learning_rate", "=", "self", ".", "initlr_F", ",", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "if", "self", ".", "is_adam", "is", "True", "else", "tf", ".", "train", ".", "RMSPropOptimizer", ",", "\n", "variables", "=", "theta_F", ",", "global_step", "=", "counter_F", ")", "\n", "\n", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "output_F", ",", "axis", "=", "1", ")", ",", "tf", ".", "argmax", "(", "self", ".", "tf_y", ",", "axis", "=", "1", ")", ")", "\n", "accuracy_F", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_prediction", ",", "dtype", "=", "tf", ".", "float32", ")", ")", "\n", "\n", "#--- Autoencoder + Dirichlet + Classifier C", "\n", "# reconstruction", "\n", "input_ae_", ",", "input_feature", "=", "self", ".", "classifier_F", "(", "self", ".", "tf_x", ",", "self", ".", "dim", ",", "reuse", "=", "True", ")", "\n", "input_ae", "=", "input_ae_", "/", "10", "\n", "output_ae", "=", "self", ".", "generator", "(", "input_ae", ",", "self", ".", "dim", ",", "reuse", "=", "reuse", ")", "\n", "reconstruction_error", "=", "output_ae", "-", "input_ae", "\n", "loss_euc", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "reconstruction_error", ",", "2", ")", ",", "0", ")", ")", "/", "100", "\n", "\n", "# spatial sparse", "\n", "eps", "=", "0.00000001", "\n", "s_j", "=", "self", ".", "encoder", "(", "input_ae", ",", "self", ".", "dim", ",", "reuse", "=", "True", ")", "\n", "s_base", "=", "tf", ".", "reduce_sum", "(", "s_j", ",", "1", ",", "keepdims", "=", "True", ")", "\n", "sparse", "=", "tf", ".", "div", "(", "s_j", ",", "(", "s_base", "+", "eps", ")", ")", "\n", "loss_sparse", "=", "tf", ".", "reduce_mean", "(", "-", "tf", ".", "multiply", "(", "sparse", ",", "tf", ".", "log", "(", "sparse", "+", "eps", ")", ")", ")", "\n", "\n", "# classification loss", "\n", "output_C", "=", "self", ".", "classifier_C", "(", "input_ae", ",", "self", ".", "dim", ",", "reuse", "=", "reuse", ")", "\n", "loss_C", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "self", ".", "tf_y", ",", "logits", "=", "output_C", ")", ")", "\n", "\n", "# total loss", "\n", "loss_EDC", "=", "self", ".", "lambda_r", "*", "loss_euc", "+", "self", ".", "lambda_s", "*", "loss_sparse", "+", "self", ".", "lambda_c", "*", "loss_C", "\n", "\n", "# optimizer", "\n", "theta_basic_decoder", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'var_decoder'", ")", "\n", "theta_uniform", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'var_uniform'", ")", "\n", "theta_beta", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'var_beta'", ")", "\n", "theta_cls_c", "=", "tf", ".", "get_collection", "(", "\n", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'var_cls_c'", ")", "\n", "counter_EDC", "=", "tf", ".", "Variable", "(", "trainable", "=", "False", ",", "initial_value", "=", "0", ",", "dtype", "=", "tf", ".", "int32", ")", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.data.load_data": [[5, 24], ["scipy.io.loadmat", "scipy.io.loadmat.copy", "isinstance"], "function", ["None"], ["def", "load_data", "(", "data_dir", ")", ":", "\n", "    ", "\"\"\"\n    load known/unknown data\n    param data_dir: file dir\n    :return: dict, {str: array} --> {variable_name: data}, useful data\n    \"\"\"", "\n", "mat_data", "=", "loadmat", "(", "data_dir", ")", "\n", "if", "mat_data", ":", "\n", "        ", "buildin_keys", "=", "[", "'__version__'", ",", "'__header__'", ",", "'__globals__'", "]", "\n", "buildin_data", "=", "{", "}", "\n", "for", "key", "in", "mat_data", ".", "copy", "(", ")", ":", "\n", "            ", "if", "key", "in", "buildin_keys", ":", "\n", "                ", "buildin_data", "[", "key", "]", "=", "mat_data", "[", "key", "]", "\n", "del", "mat_data", "[", "key", "]", "\n", "", "else", ":", "\n", "                ", "assert", "isinstance", "(", "mat_data", "[", "key", "]", ",", "np", ".", "ndarray", ")", "\n", "", "", "return", "mat_data", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.data.format_data": [[26, 56], ["isinstance", "enumerate", "x.astype.astype", "numpy.squeeze", "numpy.zeros", "len", "exit", "numpy.arange", "len"], "function", ["None"], ["", "def", "format_data", "(", "data_dict", ",", "key_x", ",", "key_y", ",", "num_labels", "=", "9", ")", ":", "\n", "    ", "\"\"\"\n    format the data into data and label\n    :param data_dict: dict, the data arrays\n    :param key_x: str, name of data variable\n    :param key_y: str, name of label variable\n    :param num_labels: int, the number of labels/categories\n    :return: two arrays, assume the axis 0 is the number of samples\n    \"\"\"", "\n", "assert", "isinstance", "(", "data_dict", ",", "dict", ")", "\n", "data_tmp", "=", "[", "None", ",", "None", "]", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "[", "key_x", ",", "key_y", "]", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "data_tmp", "[", "i", "]", "=", "data_dict", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "exit", "(", "\"Error: The variable '%s' does not exist\"", "%", "key", ")", "\n", "\n", "", "", "x", ",", "y", "=", "data_tmp", "\n", "x_shape", ",", "y_shape", "=", "x", ".", "shape", ",", "y", ".", "shape", "\n", "assert", "x_shape", "[", "0", "]", "==", "y_shape", "[", "0", "]", "\n", "\n", "# make x float32", "\n", "x", "=", "x", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# make y to be one-hot labels", "\n", "y", "=", "np", ".", "squeeze", "(", "y", ")", "\n", "y_one_hot", "=", "np", ".", "zeros", "(", "(", "len", "(", "y", ")", ",", "num_labels", ")", ")", "\n", "y_one_hot", "[", "np", ".", "arange", "(", "len", "(", "y", ")", ")", ",", "y", "-", "1", "]", "=", "1", "\n", "\n", "return", "x", ",", "y_one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.data.seed_train_test": [[58, 73], ["numpy.arange", "numpy.random.shuffle", "int", "numpy.random.seed", "numpy.round", "int"], "function", ["None"], ["", "def", "seed_train_test", "(", "x", ",", "y", ",", "percentage", "=", ".3", ",", "random_seed", "=", "2020", ")", ":", "\n", "    ", "if", "random_seed", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "int", "(", "random_seed", ")", ")", "\n", "", "num_samples", "=", "x", ".", "shape", "[", "0", "]", "\n", "assert", "num_samples", "==", "y", ".", "shape", "[", "0", "]", "\n", "\n", "# randomly sample testing data", "\n", "indices", "=", "np", ".", "arange", "(", "num_samples", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "idx_split", "=", "int", "(", "np", ".", "round", "(", "num_samples", "*", "percentage", ")", ")", "\n", "indices_te", "=", "indices", "[", ":", "idx_split", "]", "\n", "indices_tr", "=", "indices", "[", "idx_split", ":", "]", "\n", "x_te", ",", "y_te", "=", "x", "[", "indices_te", ",", "...", "]", ",", "y", "[", "indices_te", ",", "...", "]", "\n", "x_tr", ",", "y_tr", "=", "x", "[", "indices_tr", ",", "...", "]", ",", "y", "[", "indices_tr", ",", "...", "]", "\n", "return", "x_tr", ",", "y_tr", ",", "x_te", ",", "y_te", "\n", "", ""]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.Bottleneck.__init__": [[10, 16], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "4", "*", "growth_rate", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "growth_rate", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "4", "*", "growth_rate", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.Bottleneck.forward": [[17, 22], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.Transition.__init__": [[25, 29], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.Transition.forward": [[30, 34], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet.__init__": [[37, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet.__init__", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet._make_dense_layers": [[68, 74], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet.forward": [[75, 85], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet121": [[86, 88], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet169": [[89, 91], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet201": [[92, 94], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.DenseNet161": [[95, 97], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.densenet_cifar": [[98, 100], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.test": [[101, 106], ["densenet.densenet_cifar", "torch.randn", "torch.randn", "torch.randn", "densenet_cifar.", "print"], "function", ["home.repos.pwc.inspect_result.raziehkaviani_rdosr.OSR for RGB data.densenet.densenet_cifar"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]]}