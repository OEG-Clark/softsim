{"home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Template.parse": [[272, 287], ["WikiExtractor.Template", "WikiExtractor.findMatchingBraces", "Template.append", "Template.append", "Template.append", "WikiExtractor.TemplateText", "WikiExtractor.TemplateText", "WikiExtractor.TemplateArg"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.findMatchingBraces"], ["@", "classmethod", "\n", "def", "parse", "(", "cls", ",", "body", ")", ":", "\n", "        ", "tpl", "=", "Template", "(", ")", "\n", "# we must handle nesting, s.a.", "\n", "# {{{1|{{PAGENAME}}}", "\n", "# {{{italics|{{{italic|}}}", "\n", "# {{#if:{{{{{#if:{{{nominee|}}}|nominee|candidate}}|}}}|", "\n", "#", "\n", "start", "=", "0", "\n", "for", "s", ",", "e", "in", "findMatchingBraces", "(", "body", ",", "3", ")", ":", "\n", "            ", "tpl", ".", "append", "(", "TemplateText", "(", "body", "[", "start", ":", "s", "]", ")", ")", "\n", "tpl", ".", "append", "(", "TemplateArg", "(", "body", "[", "s", "+", "3", ":", "e", "-", "3", "]", ")", ")", "\n", "start", "=", "e", "\n", "", "tpl", ".", "append", "(", "TemplateText", "(", "body", "[", "start", ":", "]", ")", ")", "# leftover", "\n", "return", "tpl", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Template.subst": [[288, 310], ["tpl.subst"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.TemplateArg.subst"], ["", "def", "subst", "(", "self", ",", "params", ",", "extractor", ",", "depth", "=", "0", ")", ":", "\n", "# We perform parameter substitutions recursively.", "\n", "# We also limit the maximum number of iterations to avoid too long or", "\n", "# even endless loops (in case of malformed input).", "\n", "\n", "# :see: http://meta.wikimedia.org/wiki/Help:Expansion#Distinction_between_variables.2C_parser_functions.2C_and_templates", "\n", "#", "\n", "# Parameter values are assigned to parameters in two (?) passes.", "\n", "# Therefore a parameter name in a template can depend on the value of", "\n", "# another parameter of the same template, regardless of the order in", "\n", "# which they are specified in the template call, for example, using", "\n", "# Template:ppp containing \"{{{{{{p}}}}}}\", {{ppp|p=q|q=r}} and even", "\n", "# {{ppp|q=r|p=q}} gives r, but using Template:tvvv containing", "\n", "# \"{{{{{{{{{p}}}}}}}}}\", {{tvvv|p=q|q=r|r=s}} gives s.", "\n", "\n", "#logging.debug('subst tpl (%d, %d) %s', len(extractor.frame), depth, self)", "\n", "\n", "        ", "if", "depth", ">", "extractor", ".", "maxParameterRecursionLevels", ":", "\n", "            ", "extractor", ".", "recursion_exceeded_3_errs", "+=", "1", "\n", "return", "''", "\n", "\n", "", "return", "''", ".", "join", "(", "[", "tpl", ".", "subst", "(", "params", ",", "extractor", ",", "depth", ")", "for", "tpl", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Template.__str__": [[311, 313], ["unicode"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "''", ".", "join", "(", "[", "unicode", "(", "x", ")", "for", "x", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.TemplateText.subst": [[317, 319], ["None"], "methods", ["None"], ["def", "subst", "(", "self", ",", "params", ",", "extractor", ",", "depth", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.TemplateArg.__init__": [[325, 344], ["WikiExtractor.splitParts", "WikiExtractor.Template.parse", "len", "WikiExtractor.Template.parse"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.splitParts", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Template.parse", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Template.parse"], ["def", "__init__", "(", "self", ",", "parameter", ")", ":", "\n", "        ", "\"\"\"\n        :param parameter: the parts of a tplarg.\n        \"\"\"", "\n", "# the parameter name itself might contain templates, e.g.:", "\n", "#   appointe{{#if:{{{appointer14|}}}|r|d}}14|", "\n", "#   4|{{{{{subst|}}}CURRENTYEAR}}", "\n", "\n", "# any parts in a tplarg after the first (the parameter default) are", "\n", "# ignored, and an equals sign in the first part is treated as plain text.", "\n", "#logging.debug('TemplateArg %s', parameter)", "\n", "\n", "parts", "=", "splitParts", "(", "parameter", ")", "\n", "self", ".", "name", "=", "Template", ".", "parse", "(", "parts", "[", "0", "]", ")", "\n", "if", "len", "(", "parts", ")", ">", "1", ":", "\n", "# This parameter has a default value", "\n", "            ", "self", ".", "default", "=", "Template", ".", "parse", "(", "parts", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "default", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.TemplateArg.__str__": [[345, 350], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "default", ":", "\n", "            ", "return", "'{{{%s|%s}}}'", "%", "(", "self", ".", "name", ",", "self", ".", "default", ")", "\n", "", "else", ":", "\n", "            ", "return", "'{{{%s}}}'", "%", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.TemplateArg.subst": [[351, 369], ["WikiExtractor.TemplateArg.name.subst", "extractor.expandTemplates", "WikiExtractor.TemplateArg.default.subst", "extractor.expandTemplates"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.TemplateArg.subst", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.expandTemplates", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.TemplateArg.subst", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.expandTemplates"], ["", "", "def", "subst", "(", "self", ",", "params", ",", "extractor", ",", "depth", ")", ":", "\n", "        ", "\"\"\"\n        Substitute value for this argument from dict :param params:\n        Use :param extractor: to evaluate expressions for name and default.\n        Limit substitution to the maximun :param depth:.\n        \"\"\"", "\n", "# the parameter name itself might contain templates, e.g.:", "\n", "# appointe{{#if:{{{appointer14|}}}|r|d}}14|", "\n", "paramName", "=", "self", ".", "name", ".", "subst", "(", "params", ",", "extractor", ",", "depth", "+", "1", ")", "\n", "paramName", "=", "extractor", ".", "expandTemplates", "(", "paramName", ")", "\n", "res", "=", "''", "\n", "if", "paramName", "in", "params", ":", "\n", "            ", "res", "=", "params", "[", "paramName", "]", "# use parameter value specified in template invocation", "\n", "", "elif", "self", ".", "default", ":", "# use the default value", "\n", "            ", "defaultValue", "=", "self", ".", "default", ".", "subst", "(", "params", ",", "extractor", ",", "depth", "+", "1", ")", "\n", "res", "=", "extractor", ".", "expandTemplates", "(", "defaultValue", ")", "\n", "#logging.debug('subst arg %d %s -> %s' % (depth, paramName, res))", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.__init__": [[390, 403], ["WikiExtractor.MagicWords"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "id", ",", "title", ",", "page", ")", ":", "\n", "        ", "\"\"\"\n        :param page: a list of lines.\n        \"\"\"", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "title", "=", "title", "\n", "self", ".", "page", "=", "page", "\n", "self", ".", "magicWords", "=", "MagicWords", "(", ")", "\n", "self", ".", "frame", "=", "[", "]", "\n", "self", ".", "recursion_exceeded_1_errs", "=", "0", "# template recursion within expandTemplates()", "\n", "self", ".", "recursion_exceeded_2_errs", "=", "0", "# template recursion within expandTemplate()", "\n", "self", ".", "recursion_exceeded_3_errs", "=", "0", "# parameter recursion", "\n", "self", ".", "template_title_errs", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.extract": [[405, 437], ["logging.debug", "WikiExtractor.get_url", "header.encode.encode.encode", "time.strftime", "time.strftime", "time.strftime", "time.strftime", "time.strftime", "WikiExtractor.clean", "out.write", "WikiExtractor.compact", "out.write", "any", "out.write", "out.write", "logging.warn", "line.encode"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.get_url", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.clean", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.compact", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write"], ["", "def", "extract", "(", "self", ",", "out", ")", ":", "\n", "        ", "\"\"\"\n        :param out: a memory file.\n        \"\"\"", "\n", "logging", ".", "debug", "(", "\"%s\\t%s\"", ",", "self", ".", "id", ",", "self", ".", "title", ")", "\n", "text", "=", "''", ".", "join", "(", "self", ".", "page", ")", "\n", "url", "=", "get_url", "(", "self", ".", "id", ")", "\n", "header", "=", "'<doc id=\"%s\" url=\"%s\" title=\"%s\">\\n'", "%", "(", "self", ".", "id", ",", "url", ",", "self", ".", "title", ")", "\n", "# Separate header from text with a newline.", "\n", "header", "+=", "self", ".", "title", "+", "'\\n\\n'", "\n", "header", "=", "header", ".", "encode", "(", "'utf-8'", ")", "\n", "self", ".", "magicWords", "[", "'pagename'", "]", "=", "self", ".", "title", "\n", "self", ".", "magicWords", "[", "'fullpagename'", "]", "=", "self", ".", "title", "\n", "self", ".", "magicWords", "[", "'currentyear'", "]", "=", "time", ".", "strftime", "(", "'%Y'", ")", "\n", "self", ".", "magicWords", "[", "'currentmonth'", "]", "=", "time", ".", "strftime", "(", "'%m'", ")", "\n", "self", ".", "magicWords", "[", "'currentday'", "]", "=", "time", ".", "strftime", "(", "'%d'", ")", "\n", "self", ".", "magicWords", "[", "'currenthour'", "]", "=", "time", ".", "strftime", "(", "'%H'", ")", "\n", "self", ".", "magicWords", "[", "'currenttime'", "]", "=", "time", ".", "strftime", "(", "'%H:%M:%S'", ")", "\n", "text", "=", "clean", "(", "self", ",", "text", ")", "\n", "footer", "=", "\"\\n</doc>\\n\"", "\n", "out", ".", "write", "(", "header", ")", "\n", "for", "line", "in", "compact", "(", "text", ")", ":", "\n", "            ", "out", ".", "write", "(", "line", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "out", ".", "write", "(", "'\\n'", ")", "\n", "", "out", ".", "write", "(", "footer", ")", "\n", "errs", "=", "(", "self", ".", "template_title_errs", ",", "\n", "self", ".", "recursion_exceeded_1_errs", ",", "\n", "self", ".", "recursion_exceeded_2_errs", ",", "\n", "self", ".", "recursion_exceeded_3_errs", ")", "\n", "if", "any", "(", "errs", ")", ":", "\n", "            ", "logging", ".", "warn", "(", "\"Template errors in article '%s' (%s): title(%d) recursion(%d, %d, %d)\"", ",", "\n", "self", ".", "title", ",", "self", ".", "id", ",", "*", "errs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.expandTemplates": [[447, 485], ["WikiExtractor.findMatchingBraces", "len", "WikiExtractor.Extractor.expandTemplate"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.findMatchingBraces", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.expandTemplate"], ["def", "expandTemplates", "(", "self", ",", "wikitext", ")", ":", "\n", "        ", "\"\"\"\n        :param wikitext: the text to be expanded.\n\n        Templates are frequently nested. Occasionally, parsing mistakes may\n        cause template insertion to enter an infinite loop, for instance when\n        trying to instantiate Template:Country\n\n        {{country_{{{1}}}|{{{2}}}|{{{2}}}|size={{{size|}}}|name={{{name|}}}}}\n\n        which is repeatedly trying to insert template 'country_', which is\n        again resolved to Template:Country. The straightforward solution of\n        keeping track of templates that were already inserted for the current\n        article would not work, because the same template may legally be used\n        more than once, with different parameters in different parts of the\n        article.  Therefore, we limit the number of iterations of nested\n        template inclusion.\n\n        \"\"\"", "\n", "# Test template expansion at:", "\n", "# https://en.wikipedia.org/wiki/Special:ExpandTemplates", "\n", "\n", "res", "=", "''", "\n", "if", "len", "(", "self", ".", "frame", ")", ">=", "self", ".", "maxTemplateRecursionLevels", ":", "\n", "            ", "self", ".", "recursion_exceeded_1_errs", "+=", "1", "\n", "return", "res", "\n", "\n", "#logging.debug('<expandTemplates ' + str(len(self.frame)))", "\n", "\n", "", "cur", "=", "0", "\n", "# look for matching {{...}}", "\n", "for", "s", ",", "e", "in", "findMatchingBraces", "(", "wikitext", ",", "2", ")", ":", "\n", "            ", "res", "+=", "wikitext", "[", "cur", ":", "s", "]", "+", "self", ".", "expandTemplate", "(", "wikitext", "[", "s", "+", "2", ":", "e", "-", "2", "]", ")", "\n", "cur", "=", "e", "\n", "# leftover", "\n", "", "res", "+=", "wikitext", "[", "cur", ":", "]", "\n", "#logging.debug('   expandTemplates> %d %s', len(self.frame), res)", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.templateParams": [[486, 554], ["logging.debug", "logging.debug", "re.match", "re.match.group().strip", "re.match.group", "templateParams.values", "parameterValue.strip.strip.strip", "param.strip.strip.strip", "re.match.group", "str"], "methods", ["None"], ["", "def", "templateParams", "(", "self", ",", "parameters", ")", ":", "\n", "        ", "\"\"\"\n        Build a dictionary with positional or name key to expanded parameters.\n        :param parameters: the parts[1:] of a template, i.e. all except the title.\n        :param depth: recusion depth.\n        \"\"\"", "\n", "templateParams", "=", "{", "}", "\n", "\n", "if", "not", "parameters", ":", "\n", "            ", "return", "templateParams", "\n", "", "logging", ".", "debug", "(", "'<templateParams: %s'", ",", "'|'", ".", "join", "(", "parameters", ")", ")", "\n", "\n", "# Parameters can be either named or unnamed. In the latter case, their", "\n", "# name is defined by their ordinal position (1, 2, 3, ...).", "\n", "\n", "unnamedParameterCounter", "=", "0", "\n", "\n", "# It's legal for unnamed parameters to be skipped, in which case they", "\n", "# will get default values (if available) during actual instantiation.", "\n", "# That is {{template_name|a||c}} means parameter 1 gets", "\n", "# the value 'a', parameter 2 value is not defined, and parameter 3 gets", "\n", "# the value 'c'.  This case is correctly handled by function 'split',", "\n", "# and does not require any special handling.", "\n", "for", "param", "in", "parameters", ":", "\n", "# Spaces before or after a parameter value are normally ignored,", "\n", "# UNLESS the parameter contains a link (to prevent possible gluing", "\n", "# the link to the following text after template substitution)", "\n", "\n", "# Parameter values may contain \"=\" symbols, hence the parameter", "\n", "# name extends up to the first such symbol.", "\n", "\n", "# It is legal for a parameter to be specified several times, in", "\n", "# which case the last assignment takes precedence. Example:", "\n", "# \"{{t|a|b|c|2=B}}\" is equivalent to \"{{t|a|B|c}}\".", "\n", "# Therefore, we don't check if the parameter has been assigned a", "\n", "# value before, because anyway the last assignment should override", "\n", "# any previous ones.", "\n", "# FIXME: Don't use DOTALL here since parameters may be tags with", "\n", "# attributes, e.g. <div class=\"templatequotecite\">", "\n", "# Parameters may span several lines, like:", "\n", "# {{Reflist|colwidth=30em|refs=", "\n", "# &lt;ref name=&quot;Goode&quot;&gt;Title&lt;/ref&gt;", "\n", "\n", "# The '=' might occurr within an HTML attribute:", "\n", "#   \"&lt;ref name=value\"", "\n", "# but we stop at first.", "\n", "            ", "m", "=", "re", ".", "match", "(", "' *([^=]*?) *=(.*)'", ",", "param", ",", "re", ".", "DOTALL", ")", "\n", "if", "m", ":", "\n", "# This is a named parameter.  This case also handles parameter", "\n", "# assignments like \"2=xxx\", where the number of an unnamed", "\n", "# parameter (\"2\") is specified explicitly - this is handled", "\n", "# transparently.", "\n", "\n", "                ", "parameterName", "=", "m", ".", "group", "(", "1", ")", ".", "strip", "(", ")", "\n", "parameterValue", "=", "m", ".", "group", "(", "2", ")", "\n", "\n", "if", "']]'", "not", "in", "parameterValue", ":", "# if the value does not contain a link, trim whitespace", "\n", "                    ", "parameterValue", "=", "parameterValue", ".", "strip", "(", ")", "\n", "", "templateParams", "[", "parameterName", "]", "=", "parameterValue", "\n", "", "else", ":", "\n", "# this is an unnamed parameter", "\n", "                ", "unnamedParameterCounter", "+=", "1", "\n", "\n", "if", "']]'", "not", "in", "param", ":", "# if the value does not contain a link, trim whitespace", "\n", "                    ", "param", "=", "param", ".", "strip", "(", ")", "\n", "", "templateParams", "[", "str", "(", "unnamedParameterCounter", ")", "]", "=", "param", "\n", "", "", "logging", ".", "debug", "(", "'   templateParams> %s'", ",", "'|'", ".", "join", "(", "templateParams", ".", "values", "(", ")", ")", ")", "\n", "return", "templateParams", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.expandTemplate": [[555, 709], ["logging.debug", "WikiExtractor.splitParts", "logging.debug", "WikiExtractor.Extractor.expandTemplates", "re.match", "re.sub.find", "WikiExtractor.fullyQualifiedTemplateTitle", "redirects.get", "WikiExtractor.Extractor.templateParams", "WikiExtractor.Extractor.frame.append", "WikiExtractor.Template.parse", "WikiExtractor.Extractor.expandTemplates", "WikiExtractor.Extractor.frame.pop", "len", "len", "parts[].strip", "parts[].strip", "re.sub", "re.sub.lower", "title[].strip", "WikiExtractor.callParserFunction", "WikiExtractor.Extractor.expandTemplates", "WikiExtractor.Template.parse", "WikiExtractor.Extractor.expandTemplates", "re.sub.lower"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.splitParts", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.expandTemplates", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.fullyQualifiedTemplateTitle", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.templateParams", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Template.parse", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.expandTemplates", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.callParserFunction", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.expandTemplates", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Template.parse", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.expandTemplates"], ["", "def", "expandTemplate", "(", "self", ",", "body", ")", ":", "\n", "        ", "\"\"\"Expands template invocation.\n        :param body: the parts of a template.\n\n        :see http://meta.wikimedia.org/wiki/Help:Expansion for an explanation\n        of the process.\n\n        See in particular: Expansion of names and values\n        http://meta.wikimedia.org/wiki/Help:Expansion#Expansion_of_names_and_values\n\n        For most parser functions all names and values are expanded,\n        regardless of what is relevant for the result. The branching functions\n        (#if, #ifeq, #iferror, #ifexist, #ifexpr, #switch) are exceptions.\n\n        All names in a template call are expanded, and the titles of the\n        tplargs in the template body, after which it is determined which\n        values must be expanded, and for which tplargs in the template body\n        the first part (default).\n\n        In the case of a tplarg, any parts beyond the first are never\n        expanded.  The possible name and the value of the first part is\n        expanded if the title does not match a name in the template call.\n\n        :see code for braceSubstitution at\n        https://doc.wikimedia.org/mediawiki-core/master/php/html/Parser_8php_source.html#3397:\n\n        \"\"\"", "\n", "\n", "# template        = \"{{\" parts \"}}\"", "\n", "\n", "# Templates and tplargs are decomposed in the same way, with pipes as", "\n", "# separator, even though eventually any parts in a tplarg after the first", "\n", "# (the parameter default) are ignored, and an equals sign in the first", "\n", "# part is treated as plain text.", "\n", "# Pipes inside inner templates and tplargs, or inside double rectangular", "\n", "# brackets within the template or tplargs are not taken into account in", "\n", "# this decomposition.", "\n", "# The first part is called title, the other parts are simply called parts.", "\n", "\n", "# If a part has one or more equals signs in it, the first equals sign", "\n", "# determines the division into name = value. Equals signs inside inner", "\n", "# templates and tplargs, or inside double rectangular brackets within the", "\n", "# part are not taken into account in this decomposition. Parts without", "\n", "# equals sign are indexed 1, 2, .., given as attribute in the <name> tag.", "\n", "\n", "if", "len", "(", "self", ".", "frame", ")", ">=", "self", ".", "maxTemplateRecursionLevels", ":", "\n", "            ", "self", ".", "recursion_exceeded_2_errs", "+=", "1", "\n", "#logging.debug('   INVOCATION> %d %s', len(self.frame), body)", "\n", "return", "''", "\n", "\n", "", "logging", ".", "debug", "(", "'INVOCATION %d %s'", ",", "len", "(", "self", ".", "frame", ")", ",", "body", ")", "\n", "\n", "parts", "=", "splitParts", "(", "body", ")", "\n", "# title is the portion before the first |", "\n", "logging", ".", "debug", "(", "'TITLE %s'", ",", "parts", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "title", "=", "self", ".", "expandTemplates", "(", "parts", "[", "0", "]", ".", "strip", "(", ")", ")", "\n", "\n", "# SUBST", "\n", "# Apply the template tag to parameters without", "\n", "# substituting into them, e.g.", "\n", "# {{subst:t|a{{{p|q}}}b}} gives the wikitext start-a{{{p|q}}}b-end", "\n", "# @see https://www.mediawiki.org/wiki/Manual:Substitution#Partial_substitution", "\n", "subst", "=", "False", "\n", "if", "re", ".", "match", "(", "substWords", ",", "title", ",", "re", ".", "IGNORECASE", ")", ":", "\n", "            ", "title", "=", "re", ".", "sub", "(", "substWords", ",", "''", ",", "title", ",", "1", ",", "re", ".", "IGNORECASE", ")", "\n", "subst", "=", "True", "\n", "\n", "", "if", "title", ".", "lower", "(", ")", "in", "self", ".", "magicWords", ".", "values", ":", "\n", "            ", "return", "self", ".", "magicWords", "[", "title", ".", "lower", "(", ")", "]", "\n", "\n", "# Parser functions", "\n", "# The first argument is everything after the first colon.", "\n", "# It has been evaluated above.", "\n", "", "colon", "=", "title", ".", "find", "(", "':'", ")", "\n", "if", "colon", ">", "1", ":", "\n", "            ", "funct", "=", "title", "[", ":", "colon", "]", "\n", "parts", "[", "0", "]", "=", "title", "[", "colon", "+", "1", ":", "]", ".", "strip", "(", ")", "# side-effect (parts[0] not used later)", "\n", "# arguments after first are not evaluated", "\n", "ret", "=", "callParserFunction", "(", "funct", ",", "parts", ",", "self", ".", "frame", ")", "\n", "return", "self", ".", "expandTemplates", "(", "ret", ")", "\n", "\n", "", "title", "=", "fullyQualifiedTemplateTitle", "(", "title", ")", "\n", "if", "not", "title", ":", "\n", "            ", "self", ".", "template_title_errs", "+=", "1", "\n", "return", "''", "\n", "\n", "", "redirected", "=", "redirects", ".", "get", "(", "title", ")", "\n", "if", "redirected", ":", "\n", "            ", "title", "=", "redirected", "\n", "\n", "# get the template", "\n", "", "if", "title", "in", "templateCache", ":", "\n", "            ", "template", "=", "templateCache", "[", "title", "]", "\n", "", "elif", "title", "in", "templates", ":", "\n", "            ", "template", "=", "Template", ".", "parse", "(", "templates", "[", "title", "]", ")", "\n", "# add it to cache", "\n", "templateCache", "[", "title", "]", "=", "template", "\n", "del", "templates", "[", "title", "]", "\n", "", "else", ":", "\n", "# The page being included could not be identified", "\n", "            ", "return", "''", "\n", "\n", "#logging.debug('TEMPLATE %s: %s', title, template)", "\n", "\n", "# tplarg          = \"{{{\" parts \"}}}\"", "\n", "# parts           = [ title *( \"|\" part ) ]", "\n", "# part            = ( part-name \"=\" part-value ) / ( part-value )", "\n", "# part-name       = wikitext-L3", "\n", "# part-value      = wikitext-L3", "\n", "# wikitext-L3     = literal / template / tplarg / link / comment /", "\n", "#                   line-eating-comment / unclosed-comment /", "\n", "#\t\t    xmlish-element / *wikitext-L3", "\n", "\n", "# A tplarg may contain other parameters as well as templates, e.g.:", "\n", "#   {{{text|{{{quote|{{{1|{{error|Error: No text given}}}}}}}}}}}", "\n", "# hence no simple RE like this would work:", "\n", "#   '{{{((?:(?!{{{).)*?)}}}'", "\n", "# We must use full CF parsing.", "\n", "\n", "# the parameter name itself might be computed, e.g.:", "\n", "#   {{{appointe{{#if:{{{appointer14|}}}|r|d}}14|}}}", "\n", "\n", "# Because of the multiple uses of double-brace and triple-brace", "\n", "# syntax, expressions can sometimes be ambiguous.", "\n", "# Precedence rules specifed here:", "\n", "# http://www.mediawiki.org/wiki/Preprocessor_ABNF#Ideal_precedence", "\n", "# resolve ambiguities like this:", "\n", "#   {{{{ }}}} -> { {{{ }}} }", "\n", "#   {{{{{ }}}}} -> {{ {{{ }}} }}", "\n", "#", "\n", "# :see: https://en.wikipedia.org/wiki/Help:Template#Handling_parameters", "\n", "\n", "", "params", "=", "parts", "[", "1", ":", "]", "\n", "\n", "if", "not", "subst", ":", "\n", "# Evaluate parameters, since they may contain templates, including", "\n", "# the symbol \"=\".", "\n", "# {{#ifexpr: {{{1}}} = 1 }}", "\n", "            ", "params", "=", "[", "self", ".", "expandTemplates", "(", "p", ")", "for", "p", "in", "params", "]", "\n", "\n", "# build a dict of name-values for the parameter values", "\n", "", "params", "=", "self", ".", "templateParams", "(", "params", ")", "\n", "\n", "# Perform parameter substitution", "\n", "# extend frame before subst, since there may be recursion in default", "\n", "# parameter value, e.g. {{OTRS|celebrative|date=April 2015}} in article", "\n", "# 21637542 in enwiki.", "\n", "self", ".", "frame", ".", "append", "(", "(", "title", ",", "params", ")", ")", "\n", "instantiated", "=", "template", ".", "subst", "(", "params", ",", "self", ")", "\n", "#logging.debug('instantiated %d %s', len(self.frame), instantiated)", "\n", "value", "=", "self", ".", "expandTemplates", "(", "instantiated", ")", "\n", "self", ".", "frame", ".", "pop", "(", ")", "\n", "#logging.debug('   INVOCATION> %s %d %s', title, len(self.frame), value)", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.MagicWords.__init__": [[1034, 1037], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "values", "=", "{", "}", "\n", "self", ".", "values", "[", "'!'", "]", "=", "'|'", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.MagicWords.__getitem__": [[1038, 1040], ["WikiExtractor.MagicWords.values.get"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "values", ".", "get", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.MagicWords.__setitem__": [[1041, 1043], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "self", ".", "values", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Infix.__init__": [[1138, 1140], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "function", ")", ":", "\n", "        ", "self", ".", "function", "=", "function", "\n", "", "def", "__ror__", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Infix.__ror__": [[1140, 1142], ["WikiExtractor.Infix", "WikiExtractor.Infix.function"], "methods", ["None"], ["", "def", "__ror__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "Infix", "(", "lambda", "x", ",", "self", "=", "self", ",", "other", "=", "other", ":", "self", ".", "function", "(", "other", ",", "x", ")", ")", "\n", "", "def", "__or__", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Infix.__or__": [[1142, 1144], ["WikiExtractor.Infix.function"], "methods", ["None"], ["", "def", "__or__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "function", "(", "other", ")", "\n", "", "def", "__rlshift__", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Infix.__rlshift__": [[1144, 1146], ["WikiExtractor.Infix", "WikiExtractor.Infix.function"], "methods", ["None"], ["", "def", "__rlshift__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "Infix", "(", "lambda", "x", ",", "self", "=", "self", ",", "other", "=", "other", ":", "self", ".", "function", "(", "other", ",", "x", ")", ")", "\n", "", "def", "__rshift__", "(", "self", ",", "other", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Infix.__rshift__": [[1146, 1148], ["WikiExtractor.Infix.function"], "methods", ["None"], ["", "def", "__rshift__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "function", "(", "other", ")", "\n", "", "def", "__call__", "(", "self", ",", "value1", ",", "value2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Infix.__call__": [[1148, 1150], ["WikiExtractor.Infix.function"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "value1", ",", "value2", ")", ":", "\n", "        ", "return", "self", ".", "function", "(", "value1", ",", "value2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile.__init__": [[2110, 2114], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "path_name", ")", ":", "\n", "        ", "self", ".", "path_name", "=", "path_name", "\n", "self", ".", "dir_index", "=", "-", "1", "\n", "self", ".", "file_index", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile.next": [[2115, 2123], ["WikiExtractor.NextFile._dirname", "WikiExtractor.NextFile._filepath", "os.path.isdir", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile._dirname", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile._filepath"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "self", ".", "file_index", "=", "(", "self", ".", "file_index", "+", "1", ")", "%", "NextFile", ".", "filesPerDir", "\n", "if", "self", ".", "file_index", "==", "0", ":", "\n", "            ", "self", ".", "dir_index", "+=", "1", "\n", "", "dirname", "=", "self", ".", "_dirname", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dirname", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "return", "self", ".", "_filepath", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile._dirname": [[2124, 2128], ["os.path.join", "ord", "ord"], "methods", ["None"], ["", "def", "_dirname", "(", "self", ")", ":", "\n", "        ", "char1", "=", "self", ".", "dir_index", "%", "26", "\n", "char2", "=", "self", ".", "dir_index", "/", "26", "%", "26", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "path_name", ",", "'%c%c'", "%", "(", "ord", "(", "'A'", ")", "+", "char2", ",", "ord", "(", "'A'", ")", "+", "char1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile._filepath": [[2129, 2131], ["WikiExtractor.NextFile._dirname"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile._dirname"], ["", "def", "_filepath", "(", "self", ")", ":", "\n", "        ", "return", "'%s/wiki_%02d'", "%", "(", "self", ".", "_dirname", "(", ")", ",", "self", ".", "file_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.__init__": [[2137, 2148], ["WikiExtractor.OutputSplitter.open", "WikiExtractor.OutputSplitter.nextFile.next"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile.next"], ["def", "__init__", "(", "self", ",", "nextFile", ",", "max_file_size", "=", "0", ",", "compress", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        :param nextfile: a NextFile object from which to obtain filenames\n            to use.\n        :param max_file_size: the maximum size of each file.\n        :para compress: whether to write data with bzip compression.\n        \"\"\"", "\n", "self", ".", "nextFile", "=", "nextFile", "\n", "self", ".", "compress", "=", "compress", "\n", "self", ".", "max_file_size", "=", "max_file_size", "\n", "self", ".", "file", "=", "self", ".", "open", "(", "self", ".", "nextFile", ".", "next", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.reserve": [[2149, 2153], ["WikiExtractor.OutputSplitter.close", "WikiExtractor.OutputSplitter.open", "WikiExtractor.OutputSplitter.file.tell", "WikiExtractor.OutputSplitter.nextFile.next"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile.next"], ["", "def", "reserve", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "self", ".", "file", ".", "tell", "(", ")", "+", "size", ">", "self", ".", "max_file_size", ":", "\n", "            ", "self", ".", "close", "(", ")", "\n", "self", ".", "file", "=", "self", ".", "open", "(", "self", ".", "nextFile", ".", "next", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write": [[2154, 2157], ["WikiExtractor.OutputSplitter.reserve", "WikiExtractor.OutputSplitter.file.write", "len"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.reserve", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write"], ["", "", "def", "write", "(", "self", ",", "data", ")", ":", "\n", "        ", "self", ".", "reserve", "(", "len", "(", "data", ")", ")", "\n", "self", ".", "file", ".", "write", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.close": [[2158, 2160], ["WikiExtractor.OutputSplitter.file.close"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "self", ".", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open": [[2161, 2166], ["bz2.BZ2File", "WikiExtractor.OutputSplitter.open"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open"], ["", "def", "open", "(", "self", ",", "filename", ")", ":", "\n", "        ", "if", "self", ".", "compress", ":", "\n", "            ", "return", "bz2", ".", "BZ2File", "(", "filename", "+", "'.bz2'", ",", "'w'", ")", "\n", "", "else", ":", "\n", "            ", "return", "open", "(", "filename", ",", "'w'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.get_url": [[107, 110], ["None"], "function", ["None"], ["def", "get_url", "(", "id", ")", ":", "\n", "    ", "global", "urlbase", "\n", "return", "\"%s?curid=%s\"", "%", "(", "urlbase", ",", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.normalizeTitle": [[160, 196], ["ucfirst.strip", "re.sub", "re.match", "re.match.group", "re.match.group", "re.match.group", "WikiExtractor.normalizeNamespace", "WikiExtractor.ucfirst", "WikiExtractor.ucfirst", "WikiExtractor.ucfirst", "WikiExtractor.ucfirst"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.normalizeNamespace", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.ucfirst", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.ucfirst", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.ucfirst", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.ucfirst"], ["def", "normalizeTitle", "(", "title", ")", ":", "\n", "    ", "\"\"\"Normalize title\"\"\"", "\n", "# remove leading/trailing whitespace and underscores", "\n", "title", "=", "title", ".", "strip", "(", "' _'", ")", "\n", "# replace sequences of whitespace and underscore chars with a single space", "\n", "title", "=", "re", ".", "sub", "(", "r'[\\s_]+'", ",", "' '", ",", "title", ")", "\n", "\n", "m", "=", "re", ".", "match", "(", "r'([^:]*):(\\s*)(\\S(?:.*))'", ",", "title", ")", "\n", "if", "m", ":", "\n", "        ", "prefix", "=", "m", ".", "group", "(", "1", ")", "\n", "if", "m", ".", "group", "(", "2", ")", ":", "\n", "            ", "optionalWhitespace", "=", "' '", "\n", "", "else", ":", "\n", "            ", "optionalWhitespace", "=", "''", "\n", "", "rest", "=", "m", ".", "group", "(", "3", ")", "\n", "\n", "ns", "=", "normalizeNamespace", "(", "prefix", ")", "\n", "if", "ns", "in", "knownNamespaces", ":", "\n", "# If the prefix designates a known namespace, then it might be", "\n", "# followed by optional whitespace that should be removed to get", "\n", "# the canonical page name", "\n", "# (e.g., \"Category:  Births\" should become \"Category:Births\").", "\n", "            ", "title", "=", "ns", "+", "\":\"", "+", "ucfirst", "(", "rest", ")", "\n", "", "else", ":", "\n", "# No namespace, just capitalize first letter.", "\n", "# If the part before the colon is not a known namespace, then we", "\n", "# must not remove the space after the colon (if any), e.g.,", "\n", "# \"3001: The_Final_Odyssey\" != \"3001:The_Final_Odyssey\".", "\n", "# However, to get the canonical page name we must contract multiple", "\n", "# spaces into one, because", "\n", "# \"3001:   The_Final_Odyssey\" != \"3001: The_Final_Odyssey\".", "\n", "            ", "title", "=", "ucfirst", "(", "prefix", ")", "+", "\":\"", "+", "optionalWhitespace", "+", "ucfirst", "(", "rest", ")", "\n", "", "", "else", ":", "\n", "# no namespace, just capitalize first letter", "\n", "        ", "title", "=", "ucfirst", "(", "title", ")", "\n", "", "return", "title", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.unescape": [[203, 219], ["re.sub", "m.group", "m.group", "unichr", "unichr", "unichr", "int", "int"], "function", ["None"], ["", "def", "unescape", "(", "text", ")", ":", "\n", "    ", "def", "fixup", "(", "m", ")", ":", "\n", "        ", "text", "=", "m", ".", "group", "(", "0", ")", "\n", "code", "=", "m", ".", "group", "(", "1", ")", "\n", "try", ":", "\n", "            ", "if", "text", "[", "1", "]", "==", "\"#\"", ":", "# character reference", "\n", "                ", "if", "text", "[", "2", "]", "==", "\"x\"", ":", "\n", "                    ", "return", "unichr", "(", "int", "(", "code", "[", "1", ":", "]", ",", "16", ")", ")", "\n", "", "else", ":", "\n", "                    ", "return", "unichr", "(", "int", "(", "code", ")", ")", "\n", "", "", "else", ":", "# named entity", "\n", "                ", "return", "unichr", "(", "name2codepoint", "[", "code", "]", ")", "\n", "", "", "except", ":", "\n", "            ", "return", "text", "# leave as is", "\n", "\n", "", "", "return", "re", ".", "sub", "(", "\"&#?(\\w+);\"", ",", "fixup", ",", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.ignoreTag": [[226, 230], ["re.compile", "re.compile", "ignored_tag_patterns.append"], "function", ["None"], ["def", "ignoreTag", "(", "tag", ")", ":", "\n", "    ", "left", "=", "re", ".", "compile", "(", "r'<%s\\b.*?>'", "%", "tag", ",", "re", ".", "IGNORECASE", "|", "re", ".", "DOTALL", ")", "# both <ref> and <reference>", "\n", "right", "=", "re", ".", "compile", "(", "r'</\\s*%s>'", "%", "tag", ",", "re", ".", "IGNORECASE", ")", "\n", "ignored_tag_patterns", ".", "append", "(", "(", "left", ",", "right", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.splitParts": [[713, 783], ["WikiExtractor.findMatchingBraces", "paramsList[].split", "paramsList[].split", "len", "parameters.extend", "len", "parameters.extend"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.findMatchingBraces"], ["", "", "def", "splitParts", "(", "paramsList", ")", ":", "\n", "    ", "\"\"\"\n    :param paramList: the parts of a template or tplarg.\n\n    Split template parameters at the separator \"|\".\n    separator \"=\".\n\n    Template parameters often contain URLs, internal links, text or even\n    template expressions, since we evaluate templates outside in.\n    This is required for cases like:\n      {{#if: {{{1}}} | {{lc:{{{1}}} | \"parameter missing\"}}\n    Parameters are separated by \"|\" symbols. However, we\n    cannot simply split the string on \"|\" symbols, since these\n    also appear inside templates and internal links, e.g.\n\n     {{if:|\n      |{{#if:the president|\n           |{{#if:|\n               [[Category:Hatnote templates|A{{PAGENAME}}]]\n            }}\n       }}\n     }}\n\n    We split parts at the \"|\" symbols that are not inside any pair\n    {{{...}}}, {{...}}, [[...]], {|...|}.\n    \"\"\"", "\n", "\n", "# Must consider '[' as normal in expansion of Template:EMedicine2:", "\n", "# #ifeq: ped|article|[http://emedicine.medscape.com/article/180-overview|[http://www.emedicine.com/ped/topic180.htm#{{#if: |section~}}", "\n", "# as part of:", "\n", "# {{#ifeq: ped|article|[http://emedicine.medscape.com/article/180-overview|[http://www.emedicine.com/ped/topic180.htm#{{#if: |section~}}}} ped/180{{#if: |~}}]", "\n", "\n", "# should handle both tpl arg like:", "\n", "#    4|{{{{{subst|}}}CURRENTYEAR}}", "\n", "# and tpl parameters like:", "\n", "#    ||[[Category:People|{{#if:A|A|{{PAGENAME}}}}]]", "\n", "\n", "sep", "=", "'|'", "\n", "parameters", "=", "[", "]", "\n", "cur", "=", "0", "\n", "for", "s", ",", "e", "in", "findMatchingBraces", "(", "paramsList", ")", ":", "\n", "        ", "par", "=", "paramsList", "[", "cur", ":", "s", "]", ".", "split", "(", "sep", ")", "\n", "if", "par", ":", "\n", "            ", "if", "parameters", ":", "\n", "# portion before | belongs to previous parameter", "\n", "                ", "parameters", "[", "-", "1", "]", "+=", "par", "[", "0", "]", "\n", "if", "len", "(", "par", ")", ">", "1", ":", "\n", "# rest are new parameters", "\n", "                    ", "parameters", ".", "extend", "(", "par", "[", "1", ":", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "parameters", "=", "par", "\n", "", "", "elif", "not", "parameters", ":", "\n", "            ", "parameters", "=", "[", "''", "]", "# create first param", "\n", "# add span to last previous parameter", "\n", "", "parameters", "[", "-", "1", "]", "+=", "paramsList", "[", "s", ":", "e", "]", "\n", "cur", "=", "e", "\n", "# leftover", "\n", "", "par", "=", "paramsList", "[", "cur", ":", "]", ".", "split", "(", "sep", ")", "\n", "if", "par", ":", "\n", "        ", "if", "parameters", ":", "\n", "# portion before | belongs to previous parameter", "\n", "            ", "parameters", "[", "-", "1", "]", "+=", "par", "[", "0", "]", "\n", "if", "len", "(", "par", ")", ">", "1", ":", "\n", "# rest are new parameters", "\n", "                ", "parameters", ".", "extend", "(", "par", "[", "1", ":", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "parameters", "=", "par", "\n", "\n", "#logging.debug('splitParts %s %s\\nparams: %s', sep, paramsList, str(parameters))", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.findMatchingBraces": [[784, 891], ["re.compile", "re.compile", "re.compile", "re.compile", "re.compile.search", "reOpen.search.end", "reOpen.search.end", "reOpen.search.start", "re.compile.search", "reNext.search.end", "reOpen.search.group", "reNext.search.group", "reNext.search.end", "reNext.search.start", "stack.append", "stack.pop", "stack.append", "stack.append", "reOpen.search.start", "len", "stack.pop", "stack.append", "reOpen.search.start", "reOpen.search.start"], "function", ["None"], ["", "def", "findMatchingBraces", "(", "text", ",", "ldelim", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    :param ldelim: number of braces to match. 0 means match [[]], {{}} and {{{}}}.\n    \"\"\"", "\n", "# Parsing is done with respect to pairs of double braces {{..}} delimiting", "\n", "# a template, and pairs of triple braces {{{..}}} delimiting a tplarg.", "\n", "# If double opening braces are followed by triple closing braces or", "\n", "# conversely, this is taken as delimiting a template, with one left-over", "\n", "# brace outside it, taken as plain text. For any pattern of braces this", "\n", "# defines a set of templates and tplargs such that any two are either", "\n", "# separate or nested (not overlapping).", "\n", "\n", "# Unmatched double rectangular closing brackets can be in a template or", "\n", "# tplarg, but unmatched double rectangular opening brackets cannot.", "\n", "# Unmatched double or triple closing braces inside a pair of", "\n", "# double rectangular brackets are treated as plain text.", "\n", "# Other formulation: in ambiguity between template or tplarg on one hand,", "\n", "# and a link on the other hand, the structure with the rightmost opening", "\n", "# takes precedence, even if this is the opening of a link without any", "\n", "# closing, so not producing an actual link.", "\n", "\n", "# In the case of more than three opening braces the last three are assumed", "\n", "# to belong to a tplarg, unless there is no matching triple of closing", "\n", "# braces, in which case the last two opening braces are are assumed to", "\n", "# belong to a template.", "\n", "\n", "# We must skip individual { like in:", "\n", "#   {{#ifeq: {{padleft:|1|}} | { | | &nbsp;}}", "\n", "# We must resolve ambiguities like this:", "\n", "#   {{{{ }}}} -> { {{{ }}} }", "\n", "#   {{{{{ }}}}} -> {{ {{{ }}} }}", "\n", "#   {{#if:{{{{{#if:{{{nominee|}}}|nominee|candidate}}|}}}|...}}", "\n", "\n", "# Handle:", "\n", "#   {{{{{|safesubst:}}}#Invoke:String|replace|{{{1|{{{{{|safesubst:}}}PAGENAME}}}}}|%s+%([^%(]-%)$||plain=false}}", "\n", "# as well as expressions with stray }:", "\n", "#   {{{link|{{ucfirst:{{{1}}}}}} interchange}}}", "\n", "\n", "if", "ldelim", ":", "# 2-3", "\n", "        ", "reOpen", "=", "re", ".", "compile", "(", "'[{]{%d,}'", "%", "ldelim", ")", "# at least ldelim", "\n", "reNext", "=", "re", ".", "compile", "(", "'[{]{2,}|}{2,}'", ")", "# at least 2", "\n", "", "else", ":", "\n", "        ", "reOpen", "=", "re", ".", "compile", "(", "'{{2,}|\\[{2,}'", ")", "\n", "reNext", "=", "re", ".", "compile", "(", "'{{2,}|}{2,}|\\[{2,}|]{2,}'", ")", "# at least 2", "\n", "\n", "", "cur", "=", "0", "\n", "while", "True", ":", "\n", "        ", "m1", "=", "reOpen", ".", "search", "(", "text", ",", "cur", ")", "\n", "if", "not", "m1", ":", "\n", "            ", "return", "\n", "", "lmatch", "=", "m1", ".", "end", "(", ")", "-", "m1", ".", "start", "(", ")", "\n", "if", "m1", ".", "group", "(", ")", "[", "0", "]", "==", "'{'", ":", "\n", "            ", "stack", "=", "[", "lmatch", "]", "# stack of opening braces lengths", "\n", "", "else", ":", "\n", "            ", "stack", "=", "[", "-", "lmatch", "]", "# negative means [", "\n", "", "end", "=", "m1", ".", "end", "(", ")", "\n", "while", "True", ":", "\n", "            ", "m2", "=", "reNext", ".", "search", "(", "text", ",", "end", ")", "\n", "if", "not", "m2", ":", "\n", "                ", "return", "# unbalanced", "\n", "", "end", "=", "m2", ".", "end", "(", ")", "\n", "brac", "=", "m2", ".", "group", "(", ")", "[", "0", "]", "\n", "lmatch", "=", "m2", ".", "end", "(", ")", "-", "m2", ".", "start", "(", ")", "\n", "\n", "if", "brac", "==", "'{'", ":", "\n", "                ", "stack", ".", "append", "(", "lmatch", ")", "\n", "", "elif", "brac", "==", "'}'", ":", "\n", "                ", "while", "stack", ":", "\n", "                    ", "openCount", "=", "stack", ".", "pop", "(", ")", "# opening span", "\n", "if", "openCount", "==", "0", ":", "# illegal unmatched [[", "\n", "                        ", "continue", "\n", "", "if", "lmatch", ">=", "openCount", ":", "\n", "                        ", "lmatch", "-=", "openCount", "\n", "if", "lmatch", "<=", "1", ":", "# either close or stray }", "\n", "                            ", "break", "\n", "", "", "else", ":", "\n", "# put back unmatched", "\n", "                        ", "stack", ".", "append", "(", "openCount", "-", "lmatch", ")", "\n", "break", "\n", "", "", "if", "not", "stack", ":", "\n", "                    ", "yield", "m1", ".", "start", "(", ")", ",", "end", "-", "lmatch", "\n", "cur", "=", "end", "\n", "break", "\n", "", "elif", "len", "(", "stack", ")", "==", "1", "and", "0", "<", "stack", "[", "0", "]", "<", "ldelim", ":", "\n", "# ambiguous {{{{{ }}} }}", "\n", "                    ", "yield", "m1", ".", "start", "(", ")", "+", "stack", "[", "0", "]", ",", "end", "\n", "cur", "=", "end", "\n", "break", "\n", "", "", "elif", "brac", "==", "'['", ":", "# [[", "\n", "                ", "stack", ".", "append", "(", "-", "lmatch", ")", "\n", "", "else", ":", "# ]]", "\n", "                ", "while", "stack", "and", "stack", "[", "-", "1", "]", "<", "0", ":", "# matching [[", "\n", "                    ", "openCount", "=", "-", "stack", ".", "pop", "(", ")", "\n", "if", "lmatch", ">=", "openCount", ":", "\n", "                        ", "lmatch", "-=", "openCount", "\n", "if", "lmatch", "<=", "1", ":", "# either close or stray ]", "\n", "                            ", "break", "\n", "", "", "else", ":", "\n", "# put back unmatched (negative)", "\n", "                        ", "stack", ".", "append", "(", "lmatch", "-", "openCount", ")", "\n", "break", "\n", "", "", "if", "not", "stack", ":", "\n", "                    ", "yield", "m1", ".", "start", "(", ")", ",", "end", "-", "lmatch", "\n", "cur", "=", "end", "\n", "break", "\n", "# unmatched ]] are discarded", "\n", "", "cur", "=", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.findBalanced": [[892, 932], ["len", "re.compile", "re.compile", "nextPat.search", "nextPat.search.group", "nextPat.search.end", "re.escape", "itertools.izip", "nextPat.search.start", "stack.append", "stack.pop", "nextPat.search.end", "nextPat.search.end"], "function", ["None"], ["", "", "", "", "def", "findBalanced", "(", "text", ",", "openDelim", ",", "closeDelim", ")", ":", "\n", "    ", "\"\"\"\n    Assuming that text contains a properly balanced expression using\n    :param openDelim: as opening delimiters and\n    :param closeDelim: as closing delimiters.\n    :return: an iterator producing pairs (start, end) of start and end\n    positions in text containing a balanced expression.\n    \"\"\"", "\n", "openPat", "=", "'|'", ".", "join", "(", "[", "re", ".", "escape", "(", "x", ")", "for", "x", "in", "openDelim", "]", ")", "\n", "# patter for delimiters expected after each opening delimiter", "\n", "afterPat", "=", "{", "o", ":", "re", ".", "compile", "(", "openPat", "+", "'|'", "+", "c", ",", "re", ".", "DOTALL", ")", "for", "o", ",", "c", "in", "izip", "(", "openDelim", ",", "closeDelim", ")", "}", "\n", "stack", "=", "[", "]", "\n", "start", "=", "0", "\n", "cur", "=", "0", "\n", "end", "=", "len", "(", "text", ")", "\n", "startSet", "=", "False", "\n", "startPat", "=", "re", ".", "compile", "(", "openPat", ")", "\n", "nextPat", "=", "startPat", "\n", "while", "True", ":", "\n", "        ", "next", "=", "nextPat", ".", "search", "(", "text", ",", "cur", ")", "\n", "if", "not", "next", ":", "\n", "            ", "return", "\n", "", "if", "not", "startSet", ":", "\n", "            ", "start", "=", "next", ".", "start", "(", ")", "\n", "startSet", "=", "True", "\n", "", "delim", "=", "next", ".", "group", "(", "0", ")", "\n", "if", "delim", "in", "openDelim", ":", "\n", "            ", "stack", ".", "append", "(", "delim", ")", "\n", "nextPat", "=", "afterPat", "[", "delim", "]", "\n", "", "else", ":", "\n", "            ", "opening", "=", "stack", ".", "pop", "(", ")", "\n", "# assert opening == openDelim[closeDelim.index(next.group(0))]", "\n", "if", "stack", ":", "\n", "                ", "nextPat", "=", "afterPat", "[", "stack", "[", "-", "1", "]", "]", "\n", "", "else", ":", "\n", "                ", "yield", "start", ",", "next", ".", "end", "(", ")", "\n", "nextPat", "=", "startPat", "\n", "start", "=", "next", ".", "end", "(", ")", "\n", "startSet", "=", "False", "\n", "", "", "cur", "=", "next", ".", "end", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.ucfirst": [[1070, 1081], ["len", "string.upper", "string[].upper"], "function", ["None"], ["def", "ucfirst", "(", "string", ")", ":", "\n", "    ", "\"\"\":return: a string with just its first character uppercase\n    We can't use title() since it coverts all words.\n    \"\"\"", "\n", "if", "string", ":", "\n", "        ", "if", "len", "(", "string", ")", ">", "1", ":", "\n", "            ", "return", "string", "[", "0", "]", ".", "upper", "(", ")", "+", "string", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "string", ".", "upper", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.lcfirst": [[1082, 1091], ["len", "string.lower", "string[].lower"], "function", ["None"], ["", "", "def", "lcfirst", "(", "string", ")", ":", "\n", "    ", "\"\"\":return: a string with its first character lowercase\"\"\"", "\n", "if", "string", ":", "\n", "        ", "if", "len", "(", "string", ")", ">", "1", ":", "\n", "            ", "return", "string", "[", "0", "]", ".", "lower", "(", ")", "+", "string", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "string", ".", "lower", "(", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.fullyQualifiedTemplateTitle": [[1092, 1124], ["templateTitle.startswith", "WikiExtractor.ucfirst", "re.match", "WikiExtractor.normalizeNamespace", "WikiExtractor.ucfirst", "re.match.group", "WikiExtractor.ucfirst", "re.match.group"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.ucfirst", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.normalizeNamespace", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.ucfirst", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.ucfirst"], ["", "", "def", "fullyQualifiedTemplateTitle", "(", "templateTitle", ")", ":", "\n", "    ", "\"\"\"\n    Determine the namespace of the page being included through the template\n    mechanism\n    \"\"\"", "\n", "global", "templatePrefix", "\n", "if", "templateTitle", ".", "startswith", "(", "':'", ")", ":", "\n", "# Leading colon by itself implies main namespace, so strip this colon", "\n", "        ", "return", "ucfirst", "(", "templateTitle", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "m", "=", "re", ".", "match", "(", "'([^:]*)(:.*)'", ",", "templateTitle", ")", "\n", "if", "m", ":", "\n", "# colon found but not in the first position - check if it", "\n", "# designates a known namespace", "\n", "            ", "prefix", "=", "normalizeNamespace", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "if", "prefix", "in", "knownNamespaces", ":", "\n", "                ", "return", "prefix", "+", "ucfirst", "(", "m", ".", "group", "(", "2", ")", ")", "\n", "# The title of the page being included is NOT in the main namespace and", "\n", "# lacks any other explicit designation of the namespace - therefore, it", "\n", "# is resolved to the Template namespace (that's the default for the", "\n", "# template inclusion mechanism).", "\n", "\n", "# This is a defense against pages whose title only contains UTF-8 chars", "\n", "# that are reduced to an empty string. Right now I can think of one such", "\n", "# case - <C2><A0> which represents the non-breaking space.", "\n", "# In this particular case, this page is a redirect to [[Non-nreaking", "\n", "# space]], but having in the system a redirect page with an empty title", "\n", "# causes numerous problems, so we'll live happier without it.", "\n", "", "", "", "if", "templateTitle", ":", "\n", "        ", "return", "templatePrefix", "+", "ucfirst", "(", "templateTitle", ")", "\n", "", "else", ":", "\n", "        ", "return", "''", "# caller may log as error", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.normalizeNamespace": [[1125, 1127], ["WikiExtractor.ucfirst"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.ucfirst"], ["", "", "def", "normalizeNamespace", "(", "ns", ")", ":", "\n", "    ", "return", "ucfirst", "(", "ns", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.sharp_expr": [[1153, 1162], ["re.sub", "re.sub", "re.sub", "re.sub", "unicode", "eval"], "function", ["None"], ["def", "sharp_expr", "(", "expr", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "expr", "=", "re", ".", "sub", "(", "'='", ",", "'=='", ",", "expr", ")", "\n", "expr", "=", "re", ".", "sub", "(", "'mod'", ",", "'%'", ",", "expr", ")", "\n", "expr", "=", "re", ".", "sub", "(", "'\\bdiv\\b'", ",", "'/'", ",", "expr", ")", "\n", "expr", "=", "re", ".", "sub", "(", "'\\bround\\b'", ",", "'|ROUND|'", ",", "expr", ")", "\n", "return", "unicode", "(", "eval", "(", "expr", ")", ")", "\n", "", "except", ":", "\n", "        ", "return", "'<span class=\"error\"></span>'", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.sharp_if": [[1164, 1176], ["testValue.strip", "valueIfTrue.strip.strip", "valueIfFalse.strip"], "function", ["None"], ["", "", "def", "sharp_if", "(", "testValue", ",", "valueIfTrue", ",", "valueIfFalse", "=", "None", ",", "*", "args", ")", ":", "\n", "# In theory, we should evaluate the first argument here,", "\n", "# but it was evaluated while evaluating part[0] in expandTemplate().", "\n", "    ", "if", "testValue", ".", "strip", "(", ")", ":", "\n", "# The {{#if:}} function is an if-then-else construct.", "\n", "# The applied condition is: \"The condition string is non-empty\".", "\n", "        ", "valueIfTrue", "=", "valueIfTrue", ".", "strip", "(", ")", "\n", "if", "valueIfTrue", ":", "\n", "            ", "return", "valueIfTrue", "\n", "", "", "elif", "valueIfFalse", ":", "\n", "        ", "return", "valueIfFalse", ".", "strip", "(", ")", "\n", "", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.sharp_ifeq": [[1177, 1193], ["rvalue.strip.strip", "lvalue.strip", "valueIfTrue.strip", "valueIfFalse.strip"], "function", ["None"], ["", "def", "sharp_ifeq", "(", "lvalue", ",", "rvalue", ",", "valueIfTrue", ",", "valueIfFalse", "=", "None", ",", "*", "args", ")", ":", "\n", "    ", "rvalue", "=", "rvalue", ".", "strip", "(", ")", "\n", "if", "rvalue", ":", "\n", "# lvalue is always defined", "\n", "        ", "if", "lvalue", ".", "strip", "(", ")", "==", "rvalue", ":", "\n", "# The {{#ifeq:}} function is an if-then-else construct. The", "\n", "# applied condition is \"is rvalue equal to lvalue\". Note that this", "\n", "# does only string comparison while MediaWiki implementation also", "\n", "# supports numerical comparissons.", "\n", "\n", "            ", "if", "valueIfTrue", ":", "\n", "                ", "return", "valueIfTrue", ".", "strip", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "valueIfFalse", ":", "\n", "                ", "return", "valueIfFalse", ".", "strip", "(", ")", "\n", "", "", "", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.sharp_iferror": [[1194, 1201], ["re.match", "test.strip", "Else.strip"], "function", ["None"], ["", "def", "sharp_iferror", "(", "test", ",", "then", "=", "''", ",", "Else", "=", "None", ",", "*", "args", ")", ":", "\n", "    ", "if", "re", ".", "match", "(", "'<(?:strong|span|p|div)\\s(?:[^\\s>]*\\s+)*?class=\"(?:[^\"\\s>]*\\s+)*?error(?:\\s[^\">]*)?\"'", ",", "test", ")", ":", "\n", "        ", "return", "then", "\n", "", "elif", "Else", "is", "None", ":", "\n", "        ", "return", "test", ".", "strip", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "Else", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.sharp_switch": [[1202, 1244], ["primary.strip.strip", "param.split", "pair[].strip", "len", "pair[].strip", "v.strip", "pair[].strip.split"], "function", ["None"], ["", "", "def", "sharp_switch", "(", "primary", ",", "*", "params", ")", ":", "\n", "# FIXME: we don't support numeric expressions in primary", "\n", "\n", "# {{#switch: comparison string", "\n", "#  | case1 = result1", "\n", "#  | case2", "\n", "#  | case4 = result2", "\n", "#  | 1 | case5 = result3", "\n", "#  | #default = result4", "\n", "# }}", "\n", "\n", "    ", "primary", "=", "primary", ".", "strip", "(", ")", "\n", "found", "=", "False", "# for fall through cases", "\n", "default", "=", "None", "\n", "rvalue", "=", "None", "\n", "lvalue", "=", "''", "\n", "for", "param", "in", "params", ":", "\n", "# handle cases like:", "\n", "#  #default = [http://www.perseus.tufts.edu/hopper/text?doc=Perseus...]", "\n", "        ", "pair", "=", "param", ".", "split", "(", "'='", ",", "1", ")", "\n", "lvalue", "=", "pair", "[", "0", "]", ".", "strip", "(", ")", "\n", "rvalue", "=", "None", "\n", "if", "len", "(", "pair", ")", ">", "1", ":", "\n", "# got \"=\"", "\n", "            ", "rvalue", "=", "pair", "[", "1", "]", ".", "strip", "(", ")", "\n", "# check for any of multiple values pipe separated", "\n", "if", "found", "or", "primary", "in", "[", "v", ".", "strip", "(", ")", "for", "v", "in", "lvalue", ".", "split", "(", "'|'", ")", "]", ":", "\n", "# Found a match, return now", "\n", "                ", "return", "rvalue", "\n", "", "elif", "lvalue", "==", "'#default'", ":", "\n", "                ", "default", "=", "rvalue", "\n", "", "rvalue", "=", "None", "# avoid defaulting to last case", "\n", "", "elif", "lvalue", "==", "primary", ":", "\n", "# If the value matches, set a flag and continue", "\n", "            ", "found", "=", "True", "\n", "# Default case", "\n", "# Check if the last item had no = sign, thus specifying the default case", "\n", "", "", "if", "rvalue", "is", "not", "None", ":", "\n", "        ", "return", "lvalue", "\n", "", "elif", "default", "is", "not", "None", ":", "\n", "        ", "return", "default", "\n", "", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.sharp_invoke": [[1246, 1265], ["modules.get", "modules.get.get", "WikiExtractor.fullyQualifiedTemplateTitle", "next", "logging.warn", "functions.get.", "functions.get.", "params.get", "str", "range", "len"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.fullyQualifiedTemplateTitle", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile.next"], ["", "def", "sharp_invoke", "(", "module", ",", "function", ",", "frame", ")", ":", "\n", "    ", "functions", "=", "modules", ".", "get", "(", "module", ")", "\n", "if", "functions", ":", "\n", "        ", "funct", "=", "functions", ".", "get", "(", "function", ")", "\n", "if", "funct", ":", "\n", "# find parameters in frame whose title is the one of the original", "\n", "# template invocation", "\n", "            ", "templateTitle", "=", "fullyQualifiedTemplateTitle", "(", "function", ")", "\n", "if", "not", "templateTitle", ":", "\n", "                ", "logging", ".", "warn", "(", "\"Template with empty title\"", ")", "\n", "", "pair", "=", "next", "(", "(", "x", "for", "x", "in", "frame", "if", "x", "[", "0", "]", "==", "templateTitle", ")", ",", "None", ")", "\n", "if", "pair", ":", "\n", "                ", "params", "=", "pair", "[", "1", "]", "\n", "# extract positional args", "\n", "params", "=", "[", "params", ".", "get", "(", "str", "(", "i", "+", "1", ")", ")", "for", "i", "in", "range", "(", "len", "(", "params", ")", ")", "]", "\n", "return", "funct", "(", "*", "params", ")", "\n", "", "else", ":", "\n", "                ", "return", "funct", "(", ")", "\n", "", "", "", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.callParserFunction": [[1308, 1331], ["WikiExtractor.sharp_invoke", "args[].strip", "args[].strip"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.sharp_invoke"], ["def", "callParserFunction", "(", "functionName", ",", "args", ",", "frame", ")", ":", "\n", "    ", "\"\"\"\n    Parser functions have similar syntax as templates, except that\n    the first argument is everything after the first colon.\n    :return: the result of the invocation, None in case of failure.\n\n    http://meta.wikimedia.org/wiki/Help:ParserFunctions\n    \"\"\"", "\n", "\n", "try", ":", "\n", "       ", "if", "functionName", "==", "'#invoke'", ":", "\n", "# special handling of frame", "\n", "           ", "ret", "=", "sharp_invoke", "(", "args", "[", "0", "]", ".", "strip", "(", ")", ",", "args", "[", "1", "]", ".", "strip", "(", ")", ",", "frame", ")", "\n", "#logging.debug('parserFunction> %s %s', functionName, ret)", "\n", "return", "ret", "\n", "", "if", "functionName", "in", "parserFunctions", ":", "\n", "           ", "ret", "=", "parserFunctions", "[", "functionName", "]", "(", "*", "args", ")", "\n", "#logging.debug('parserFunction> %s %s', functionName, ret)", "\n", "return", "ret", "\n", "", "", "except", ":", "\n", "        ", "return", "\"\"", "# FIXME: fix errors", "\n", "\n", "", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.define_template": [[1357, 1405], ["re.match", "WikiExtractor.unescape", "comment.sub", "reNoinclude.sub", "re.sub", "re.sub", "re.finditer", "re.match.group", "re.match.group", "reIncludeonly.sub", "logging.warn"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.unescape"], ["def", "define_template", "(", "title", ",", "page", ")", ":", "\n", "    ", "\"\"\"\n    Adds a template defined in the :param page:.\n    @see https://en.wikipedia.org/wiki/Help:Template#Noinclude.2C_includeonly.2C_and_onlyinclude\n    \"\"\"", "\n", "global", "templates", "\n", "global", "redirects", "\n", "\n", "#title = normalizeTitle(title)", "\n", "\n", "# check for redirects", "\n", "m", "=", "re", ".", "match", "(", "'#REDIRECT.*?\\[\\[([^\\]]*)]]'", ",", "page", "[", "0", "]", ",", "re", ".", "IGNORECASE", ")", "\n", "if", "m", ":", "\n", "        ", "redirects", "[", "title", "]", "=", "m", ".", "group", "(", "1", ")", "#normalizeTitle(m.group(1))", "\n", "return", "\n", "\n", "", "text", "=", "unescape", "(", "''", ".", "join", "(", "page", ")", ")", "\n", "\n", "# We're storing template text for future inclusion, therefore,", "\n", "# remove all <noinclude> text and keep all <includeonly> text", "\n", "# (but eliminate <includeonly> tags per se).", "\n", "# However, if <onlyinclude> ... </onlyinclude> parts are present,", "\n", "# then only keep them and discard the rest of the template body.", "\n", "# This is because using <onlyinclude> on a text fragment is", "\n", "# equivalent to enclosing it in <includeonly> tags **AND**", "\n", "# enclosing all the rest of the template body in <noinclude> tags.", "\n", "\n", "# remove comments", "\n", "text", "=", "comment", ".", "sub", "(", "''", ",", "text", ")", "\n", "\n", "# eliminate <noinclude> fragments", "\n", "text", "=", "reNoinclude", ".", "sub", "(", "''", ",", "text", ")", "\n", "# eliminate unterminated <noinclude> elements", "\n", "text", "=", "re", ".", "sub", "(", "r'<noinclude\\s*>.*$'", ",", "''", ",", "text", ",", "flags", "=", "re", ".", "DOTALL", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'<noinclude/>'", ",", "''", ",", "text", ")", "\n", "\n", "onlyincludeAccumulator", "=", "''", "\n", "for", "m", "in", "re", ".", "finditer", "(", "'<onlyinclude>(.*?)</onlyinclude>'", ",", "text", ",", "re", ".", "DOTALL", ")", ":", "\n", "        ", "onlyincludeAccumulator", "+=", "m", ".", "group", "(", "1", ")", "\n", "", "if", "onlyincludeAccumulator", ":", "\n", "        ", "text", "=", "onlyincludeAccumulator", "\n", "", "else", ":", "\n", "        ", "text", "=", "reIncludeonly", ".", "sub", "(", "''", ",", "text", ")", "\n", "\n", "", "if", "text", ":", "\n", "        ", "if", "title", "in", "templates", ":", "\n", "            ", "logging", ".", "warn", "(", "'Redefining: %s'", ",", "title", ")", "\n", "", "templates", "[", "title", "]", "=", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.dropNested": [[1408, 1459], ["re.compile", "re.compile", "re.compile.search", "re.compile.search", "WikiExtractor.dropSpans", "openRE.search.end", "re.compile.search", "openRE.search.end", "spans.append", "closeRE.search.end", "openRE.search.start", "re.compile.search", "closeRE.search.end", "re.compile.search", "spans.append", "re.compile.search", "closeRE.search.end", "openRE.search.start", "closeRE.search.end", "closeRE.search.end", "openRE.search.end", "openRE.search.start", "closeRE.search.end", "openRE.search.start"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.dropSpans"], ["", "", "def", "dropNested", "(", "text", ",", "openDelim", ",", "closeDelim", ")", ":", "\n", "    ", "\"\"\"\n    A matching function for nested expressions, e.g. namespaces and tables.\n    \"\"\"", "\n", "openRE", "=", "re", ".", "compile", "(", "openDelim", ",", "re", ".", "IGNORECASE", ")", "\n", "closeRE", "=", "re", ".", "compile", "(", "closeDelim", ",", "re", ".", "IGNORECASE", ")", "\n", "# partition text in separate blocks { } { }", "\n", "spans", "=", "[", "]", "# pairs (s, e) for each partition", "\n", "nest", "=", "0", "# nesting level", "\n", "start", "=", "openRE", ".", "search", "(", "text", ",", "0", ")", "\n", "if", "not", "start", ":", "\n", "        ", "return", "text", "\n", "", "end", "=", "closeRE", ".", "search", "(", "text", ",", "start", ".", "end", "(", ")", ")", "\n", "next", "=", "start", "\n", "while", "end", ":", "\n", "        ", "next", "=", "openRE", ".", "search", "(", "text", ",", "next", ".", "end", "(", ")", ")", "\n", "if", "not", "next", ":", "# termination", "\n", "            ", "while", "nest", ":", "# close all pending", "\n", "                ", "nest", "-=", "1", "\n", "end0", "=", "closeRE", ".", "search", "(", "text", ",", "end", ".", "end", "(", ")", ")", "\n", "if", "end0", ":", "\n", "                    ", "end", "=", "end0", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "", "", "spans", ".", "append", "(", "(", "start", ".", "start", "(", ")", ",", "end", ".", "end", "(", ")", ")", ")", "\n", "break", "\n", "", "while", "end", ".", "end", "(", ")", "<", "next", ".", "start", "(", ")", ":", "\n", "# { } {", "\n", "            ", "if", "nest", ":", "\n", "                ", "nest", "-=", "1", "\n", "# try closing more", "\n", "last", "=", "end", ".", "end", "(", ")", "\n", "end", "=", "closeRE", ".", "search", "(", "text", ",", "end", ".", "end", "(", ")", ")", "\n", "if", "not", "end", ":", "# unbalanced", "\n", "                    ", "if", "spans", ":", "\n", "                        ", "span", "=", "(", "spans", "[", "0", "]", "[", "0", "]", ",", "last", ")", "\n", "", "else", ":", "\n", "                        ", "span", "=", "(", "start", ".", "start", "(", ")", ",", "last", ")", "\n", "", "spans", "=", "[", "span", "]", "\n", "break", "\n", "", "", "else", ":", "\n", "                ", "spans", ".", "append", "(", "(", "start", ".", "start", "(", ")", ",", "end", ".", "end", "(", ")", ")", ")", "\n", "# advance start, find next close", "\n", "start", "=", "next", "\n", "end", "=", "closeRE", ".", "search", "(", "text", ",", "next", ".", "end", "(", ")", ")", "\n", "break", "# { }", "\n", "", "", "if", "next", "!=", "start", ":", "\n", "# { { }", "\n", "            ", "nest", "+=", "1", "\n", "# collect text outside partitions", "\n", "", "", "return", "dropSpans", "(", "spans", ",", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.dropSpans": [[1460, 1474], ["spans.sort"], "function", ["None"], ["", "def", "dropSpans", "(", "spans", ",", "text", ")", ":", "\n", "    ", "\"\"\"\n    Drop from text the blocks identified in :param spans:, possibly nested.\n    \"\"\"", "\n", "spans", ".", "sort", "(", ")", "\n", "res", "=", "''", "\n", "offset", "=", "0", "\n", "for", "s", ",", "e", "in", "spans", ":", "\n", "        ", "if", "offset", "<=", "s", ":", "# handle nesting", "\n", "            ", "if", "offset", "<", "s", ":", "\n", "                ", "res", "+=", "text", "[", "offset", ":", "s", "]", "\n", "", "offset", "=", "e", "\n", "", "", "res", "+=", "text", "[", "offset", ":", "]", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.replaceInternalLinks": [[1482, 1520], ["WikiExtractor.findBalanced", "tailRE.match", "inner.find", "tailRE.match.group", "tailRE.match.end", "inner[].rstrip", "WikiExtractor.findBalanced", "inner[].strip", "inner.rfind", "WikiExtractor.makeInternalLink"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.findBalanced", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.findBalanced", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.makeInternalLink"], ["", "def", "replaceInternalLinks", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    Replaces external links of the form:\n    [[title |...|label]]trail\n\n    with title concatenated with trail, when present, e.g. 's' for plural.\n    \"\"\"", "\n", "# call this after removal of external links, so we need not worry about", "\n", "# triple closing ]]].", "\n", "cur", "=", "0", "\n", "res", "=", "''", "\n", "for", "s", ",", "e", "in", "findBalanced", "(", "text", ",", "[", "'[['", "]", ",", "[", "']]'", "]", ")", ":", "\n", "        ", "m", "=", "tailRE", ".", "match", "(", "text", ",", "e", ")", "\n", "if", "m", ":", "\n", "            ", "trail", "=", "m", ".", "group", "(", "0", ")", "\n", "end", "=", "m", ".", "end", "(", ")", "\n", "", "else", ":", "\n", "            ", "trail", "=", "''", "\n", "end", "=", "e", "\n", "", "inner", "=", "text", "[", "s", "+", "2", ":", "e", "-", "2", "]", "\n", "# find first |", "\n", "pipe", "=", "inner", ".", "find", "(", "'|'", ")", "\n", "if", "pipe", "<", "0", ":", "\n", "            ", "title", "=", "inner", "\n", "label", "=", "title", "\n", "", "else", ":", "\n", "            ", "title", "=", "inner", "[", ":", "pipe", "]", ".", "rstrip", "(", ")", "\n", "# find last |", "\n", "curp", "=", "pipe", "+", "1", "\n", "for", "s1", ",", "e1", "in", "findBalanced", "(", "inner", ",", "[", "'[['", "]", ",", "[", "']]'", "]", ")", ":", "\n", "                ", "last", "=", "inner", ".", "rfind", "(", "'|'", ",", "curp", ",", "s1", ")", "\n", "if", "last", ">=", "0", ":", "\n", "                    ", "pipe", "=", "last", "# advance", "\n", "", "curp", "=", "e1", "\n", "", "label", "=", "inner", "[", "pipe", "+", "1", ":", "]", ".", "strip", "(", ")", "\n", "", "res", "+=", "text", "[", "cur", ":", "s", "]", "+", "makeInternalLink", "(", "title", ",", "label", ")", "+", "trail", "\n", "cur", "=", "end", "\n", "", "return", "res", "+", "text", "[", "cur", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.makeInternalLink": [[1785, 1798], ["title.find", "title.find", "urllib.quote", "title.encode"], "function", ["None"], ["", "def", "makeInternalLink", "(", "title", ",", "label", ")", ":", "\n", "    ", "colon", "=", "title", ".", "find", "(", "':'", ")", "\n", "if", "colon", ">", "0", "and", "title", "[", ":", "colon", "]", "not", "in", "acceptedNamespaces", ":", "\n", "        ", "return", "''", "\n", "", "if", "colon", "==", "0", ":", "\n", "# drop also :File:", "\n", "        ", "colon2", "=", "title", ".", "find", "(", "':'", ",", "colon", "+", "1", ")", "\n", "if", "colon2", ">", "1", "and", "title", "[", "colon", "+", "1", ":", "colon2", "]", "not", "in", "acceptedNamespaces", ":", "\n", "            ", "return", "''", "\n", "", "", "if", "Extractor", ".", "keepLinks", ":", "\n", "        ", "return", "'<a href=\"%s\">%s</a>'", "%", "(", "urllib", ".", "quote", "(", "title", ".", "encode", "(", "'utf-8'", ")", ")", ",", "label", ")", "\n", "", "else", ":", "\n", "        ", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.replaceExternalLinks": [[1824, 1855], ["ExtLinkBracketedRegex.finditer", "EXT_IMAGE_REGEX.match.end", "EXT_IMAGE_REGEX.match.group", "EXT_IMAGE_REGEX.match.group", "EXT_IMAGE_REGEX.match", "WikiExtractor.makeExternalLink", "WikiExtractor.makeExternalImage", "EXT_IMAGE_REGEX.match.start"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.makeExternalLink", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.makeExternalImage"], ["def", "replaceExternalLinks", "(", "text", ")", ":", "\n", "    ", "s", "=", "''", "\n", "cur", "=", "0", "\n", "for", "m", "in", "ExtLinkBracketedRegex", ".", "finditer", "(", "text", ")", ":", "\n", "        ", "s", "+=", "text", "[", "cur", ":", "m", ".", "start", "(", ")", "]", "\n", "cur", "=", "m", ".", "end", "(", ")", "\n", "\n", "url", "=", "m", ".", "group", "(", "1", ")", "\n", "label", "=", "m", ".", "group", "(", "3", ")", "\n", "\n", "# # The characters '<' and '>' (which were escaped by", "\n", "# # removeHTMLtags()) should not be included in", "\n", "# # URLs, per RFC 2396.", "\n", "# m2 = re.search('&(lt|gt);', url)", "\n", "# if m2:", "\n", "#     link = url[m2.end():] + ' ' + link", "\n", "#     url = url[0:m2.end()]", "\n", "\n", "# If the link text is an image URL, replace it with an <img> tag", "\n", "# This happened by accident in the original parser, but some people used it extensively", "\n", "m", "=", "EXT_IMAGE_REGEX", ".", "match", "(", "label", ")", "\n", "if", "m", ":", "\n", "            ", "label", "=", "makeExternalImage", "(", "label", ")", "\n", "\n", "# Use the encoded URL", "\n", "# This means that users can paste URLs directly into the text", "\n", "# Funny characters like \u00f6 aren't valid in URLs anyway", "\n", "# This was changed in August 2004", "\n", "", "s", "+=", "makeExternalLink", "(", "url", ",", "label", ")", "#+ trail", "\n", "\n", "", "return", "s", "+", "text", "[", "cur", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.makeExternalLink": [[1857, 1870], ["title.find", "title.find", "urllib.quote", "title.encode"], "function", ["None"], ["", "def", "makeExternalLink", "(", "title", ",", "anchor", ")", ":", "\n", "    ", "colon", "=", "title", ".", "find", "(", "':'", ")", "\n", "if", "colon", ">", "0", "and", "title", "[", ":", "colon", "]", "not", "in", "acceptedNamespaces", ":", "\n", "        ", "return", "''", "\n", "", "if", "colon", "==", "0", ":", "\n", "# drop also :File:", "\n", "        ", "colon2", "=", "title", ".", "find", "(", "':'", ",", "colon", "+", "1", ")", "\n", "if", "colon2", ">", "1", "and", "title", "[", "colon", "+", "1", ":", "colon2", "]", "not", "in", "acceptedNamespaces", ":", "\n", "            ", "return", "''", "\n", "", "", "if", "Extractor", ".", "keepLinks", ":", "\n", "        ", "return", "'<a href=\"%s\">%s</a>'", "%", "(", "urllib", ".", "quote", "(", "title", ".", "encode", "(", "'utf-8'", ")", ")", ",", "anchor", ")", "\n", "", "else", ":", "\n", "        ", "return", "anchor", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.makeExternalImage": [[1871, 1876], ["None"], "function", ["None"], ["", "", "def", "makeExternalImage", "(", "url", ",", "alt", "=", "''", ")", ":", "\n", "    ", "if", "Extractor", ".", "keepLinks", ":", "\n", "        ", "return", "'<img src=\"%s\" alt=\"%s\">'", "%", "(", "url", ",", "alt", ")", "\n", "", "else", ":", "\n", "        ", "return", "alt", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.clean": [[1887, 1989], ["WikiExtractor.dropNested", "WikiExtractor.replaceExternalLinks", "WikiExtractor.replaceInternalLinks", "magicWordsRE.sub", "syntaxhighlight.finditer", "text.replace.replace().replace", "comment.finditer", "WikiExtractor.dropSpans", "text.replace.replace().replace", "text.replace.replace", "spaces.sub", "dots.sub", "re.sub", "re.sub", "re.sub", "text.replace.replace().replace", "extractor.expandTemplates", "WikiExtractor.dropNested", "m.end", "WikiExtractor.unescape", "bold_italic.sub", "bold.sub", "italic.sub", "bold_italic.sub", "bold.sub", "italic_quote.sub", "italic.sub", "quote_quote.sub", "spans.append", "pattern.finditer", "left.finditer", "right.finditer", "WikiExtractor.dropNested", "WikiExtractor.unescape", "pattern.finditer", "WikiExtractor.unescape", "m.group", "text.replace.replace", "spans.append", "spans.append", "spans.append", "text.replace.replace", "text.replace.replace", "text.replace.replace", "m.start", "m.end", "match.group", "m.start", "m.end", "m.start", "m.end", "m.start", "m.end", "m.start"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.dropNested", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.replaceExternalLinks", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.replaceInternalLinks", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.dropSpans", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.expandTemplates", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.dropNested", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.unescape", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.dropNested", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.unescape", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.unescape"], ["def", "clean", "(", "extractor", ",", "text", ")", ":", "\n", "    ", "\"\"\"\n    Transforms wiki markup.\n    @see https://www.mediawiki.org/wiki/Help:Formatting\n    \"\"\"", "\n", "\n", "if", "(", "expand_templates", ")", ":", "\n", "# expand templates", "\n", "# See: http://www.mediawiki.org/wiki/Help:Templates", "\n", "        ", "text", "=", "extractor", ".", "expandTemplates", "(", "text", ")", "\n", "", "else", ":", "\n", "# Drop transclusions (template, parser functions)", "\n", "        ", "text", "=", "dropNested", "(", "text", ",", "r'{{'", ",", "r'}}'", ")", "\n", "\n", "# Drop tables", "\n", "", "text", "=", "dropNested", "(", "text", ",", "r'{\\|'", ",", "r'\\|}'", ")", "\n", "\n", "# replace external links", "\n", "text", "=", "replaceExternalLinks", "(", "text", ")", "\n", "\n", "# replace internal links", "\n", "text", "=", "replaceInternalLinks", "(", "text", ")", "\n", "\n", "# drop MagicWords behavioral switches", "\n", "text", "=", "magicWordsRE", ".", "sub", "(", "''", ",", "text", ")", "\n", "\n", "################ Process HTML ###############", "\n", "\n", "# turn into HTML, except for the content of <syntaxhighlight>", "\n", "res", "=", "''", "\n", "cur", "=", "0", "\n", "for", "m", "in", "syntaxhighlight", ".", "finditer", "(", "text", ")", ":", "\n", "        ", "end", "=", "m", ".", "end", "(", ")", "\n", "res", "+=", "unescape", "(", "text", "[", "cur", ":", "m", ".", "start", "(", ")", "]", ")", "+", "m", ".", "group", "(", "1", ")", "\n", "cur", "=", "end", "\n", "", "text", "=", "res", "+", "unescape", "(", "text", "[", "cur", ":", "]", ")", "\n", "\n", "# Handle bold/italic/quote", "\n", "if", "extractor", ".", "toHTML", ":", "\n", "        ", "text", "=", "bold_italic", ".", "sub", "(", "r'<b>\\1</b>'", ",", "text", ")", "\n", "text", "=", "bold", ".", "sub", "(", "r'<b>\\1</b>'", ",", "text", ")", "\n", "text", "=", "italic", ".", "sub", "(", "r'<i>\\1</i>'", ",", "text", ")", "\n", "", "else", ":", "\n", "        ", "text", "=", "bold_italic", ".", "sub", "(", "r'\\1'", ",", "text", ")", "\n", "text", "=", "bold", ".", "sub", "(", "r'\\1'", ",", "text", ")", "\n", "text", "=", "italic_quote", ".", "sub", "(", "r'\"\\1\"'", ",", "text", ")", "\n", "text", "=", "italic", ".", "sub", "(", "r'\"\\1\"'", ",", "text", ")", "\n", "text", "=", "quote_quote", ".", "sub", "(", "r'\"\\1\"'", ",", "text", ")", "\n", "# residuals of unbalanced quotes", "\n", "", "text", "=", "text", ".", "replace", "(", "\"'''\"", ",", "''", ")", ".", "replace", "(", "\"''\"", ",", "'\"'", ")", "\n", "\n", "# Collect spans", "\n", "\n", "spans", "=", "[", "]", "\n", "# Drop HTML comments", "\n", "for", "m", "in", "comment", ".", "finditer", "(", "text", ")", ":", "\n", "            ", "spans", ".", "append", "(", "(", "m", ".", "start", "(", ")", ",", "m", ".", "end", "(", ")", ")", ")", "\n", "\n", "# Drop self-closing tags", "\n", "", "for", "pattern", "in", "selfClosing_tag_patterns", ":", "\n", "        ", "for", "m", "in", "pattern", ".", "finditer", "(", "text", ")", ":", "\n", "            ", "spans", ".", "append", "(", "(", "m", ".", "start", "(", ")", ",", "m", ".", "end", "(", ")", ")", ")", "\n", "\n", "# Drop ignored tags", "\n", "", "", "for", "left", ",", "right", "in", "ignored_tag_patterns", ":", "\n", "        ", "for", "m", "in", "left", ".", "finditer", "(", "text", ")", ":", "\n", "            ", "spans", ".", "append", "(", "(", "m", ".", "start", "(", ")", ",", "m", ".", "end", "(", ")", ")", ")", "\n", "", "for", "m", "in", "right", ".", "finditer", "(", "text", ")", ":", "\n", "            ", "spans", ".", "append", "(", "(", "m", ".", "start", "(", ")", ",", "m", ".", "end", "(", ")", ")", ")", "\n", "\n", "# Bulk remove all spans", "\n", "", "", "text", "=", "dropSpans", "(", "spans", ",", "text", ")", "\n", "\n", "# Drop discarded elements", "\n", "for", "tag", "in", "discardElements", ":", "\n", "        ", "text", "=", "dropNested", "(", "text", ",", "r'<\\s*%s\\b[^>/]*>'", "%", "tag", ",", "r'<\\s*/\\s*%s>'", "%", "tag", ")", "\n", "\n", "", "if", "not", "extractor", ".", "toHTML", ":", "\n", "# Turn into text what is left (&amp;nbsp;) and <syntaxhighlight>", "\n", "        ", "text", "=", "unescape", "(", "text", ")", "\n", "\n", "# Expand placeholders", "\n", "", "for", "pattern", ",", "placeholder", "in", "placeholder_tag_patterns", ":", "\n", "        ", "index", "=", "1", "\n", "for", "match", "in", "pattern", ".", "finditer", "(", "text", ")", ":", "\n", "            ", "text", "=", "text", ".", "replace", "(", "match", ".", "group", "(", ")", ",", "'%s_%d'", "%", "(", "placeholder", ",", "index", ")", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "text", "=", "text", ".", "replace", "(", "'<<'", ",", "u'\u00ab'", ")", ".", "replace", "(", "'>>'", ",", "u'\u00bb'", ")", "\n", "\n", "#############################################", "\n", "\n", "# Cleanup text", "\n", "text", "=", "text", ".", "replace", "(", "'\\t'", ",", "' '", ")", "\n", "text", "=", "spaces", ".", "sub", "(", "' '", ",", "text", ")", "\n", "text", "=", "dots", ".", "sub", "(", "'...'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u' (,:\\.\\)\\]\u00bb)'", ",", "r'\\1'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "u'(\\[\\(\u00ab) '", ",", "r'\\1'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\n\\W+?\\n'", ",", "'\\n'", ",", "text", ",", "flags", "=", "re", ".", "U", ")", "# lines with only punctuations", "\n", "text", "=", "text", ".", "replace", "(", "',,'", ",", "','", ")", ".", "replace", "(", "',.'", ",", "'.'", ")", "\n", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.compact": [[1998, 2094], ["text.split", "section.match", "line[].strip.startswith", "section.match.group", "len", "headers.keys", "section.match.group", "page.append", "page.append", "len", "itertools.izip_longest", "line[].strip", "reversed", "page.append", "page.append", "page.append", "len", "page.append", "page.append", "line[].strip.strip", "headers.clear", "page.append", "headers.items", "headers.items.sort", "page.append", "page.append"], "function", ["None"], ["def", "compact", "(", "text", ")", ":", "\n", "    ", "\"\"\"Deal with headers, lists, empty sections, residuals of tables.\n    :param toHTML: convert to HTML\n    \"\"\"", "\n", "\n", "page", "=", "[", "]", "# list of paragraph", "\n", "headers", "=", "{", "}", "# Headers for unfilled sections", "\n", "emptySection", "=", "False", "# empty sections are discarded", "\n", "listLevel", "=", "''", "# nesting of lists", "\n", "\n", "for", "line", "in", "text", ".", "split", "(", "'\\n'", ")", ":", "\n", "\n", "        ", "if", "not", "line", ":", "\n", "            ", "continue", "\n", "# Handle section titles", "\n", "", "m", "=", "section", ".", "match", "(", "line", ")", "\n", "if", "m", ":", "\n", "            ", "title", "=", "m", ".", "group", "(", "2", ")", "\n", "lev", "=", "len", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "if", "Extractor", ".", "toHTML", ":", "\n", "                ", "page", ".", "append", "(", "\"<h%d>%s</h%d>\"", "%", "(", "lev", ",", "title", ",", "lev", ")", ")", "\n", "", "if", "title", "and", "title", "[", "-", "1", "]", "not", "in", "'!?'", ":", "\n", "                ", "title", "+=", "'.'", "\n", "", "headers", "[", "lev", "]", "=", "title", "\n", "# drop previous headers", "\n", "for", "i", "in", "headers", ".", "keys", "(", ")", ":", "\n", "                ", "if", "i", ">", "lev", ":", "\n", "                    ", "del", "headers", "[", "i", "]", "\n", "", "", "emptySection", "=", "True", "\n", "continue", "\n", "# Handle page title", "\n", "", "if", "line", ".", "startswith", "(", "'++'", ")", ":", "\n", "            ", "title", "=", "line", "[", "2", ":", "-", "2", "]", "\n", "if", "title", ":", "\n", "                ", "if", "title", "[", "-", "1", "]", "not", "in", "'!?'", ":", "\n", "                    ", "title", "+=", "'.'", "\n", "", "page", ".", "append", "(", "title", ")", "\n", "# handle indents", "\n", "", "", "elif", "line", "[", "0", "]", "==", "':'", ":", "\n", "#page.append(line.lstrip(':*#;'))", "\n", "            ", "continue", "\n", "# handle lists", "\n", "", "elif", "line", "[", "0", "]", "in", "'*#;:'", ":", "\n", "            ", "if", "Extractor", ".", "toHTML", ":", "\n", "                ", "i", "=", "0", "\n", "for", "c", ",", "n", "in", "izip_longest", "(", "listLevel", ",", "line", ",", "fillvalue", "=", "''", ")", ":", "\n", "                    ", "if", "not", "n", "or", "n", "not", "in", "'*#;:'", ":", "\n", "                        ", "if", "c", ":", "\n", "                            ", "page", ".", "append", "(", "listClose", "[", "c", "]", ")", "\n", "listLevel", "=", "listLevel", "[", ":", "-", "1", "]", "\n", "continue", "\n", "", "else", ":", "\n", "                            ", "break", "\n", "# n != ''", "\n", "", "", "if", "c", "!=", "n", "and", "(", "not", "c", "or", "(", "c", "not", "in", "';:'", "and", "n", "not", "in", "';:'", ")", ")", ":", "\n", "                        ", "if", "c", ":", "\n", "# close level", "\n", "                            ", "page", ".", "append", "(", "listClose", "[", "c", "]", ")", "\n", "listLevel", "=", "listLevel", "[", ":", "-", "1", "]", "\n", "", "listLevel", "+=", "n", "\n", "page", ".", "append", "(", "listOpen", "[", "n", "]", ")", "\n", "", "i", "+=", "1", "\n", "", "n", "=", "line", "[", "i", "-", "1", "]", "# last list char", "\n", "line", "=", "line", "[", "i", ":", "]", ".", "strip", "(", ")", "\n", "if", "line", ":", "# FIXME: n is '\"'", "\n", "                    ", "page", ".", "append", "(", "listItem", "[", "n", "]", "%", "line", ")", "\n", "", "", "else", ":", "\n", "                ", "continue", "\n", "", "", "elif", "len", "(", "listLevel", ")", ":", "\n", "            ", "for", "c", "in", "reversed", "(", "listLevel", ")", ":", "\n", "                ", "page", ".", "append", "(", "listClose", "[", "c", "]", ")", "\n", "", "listLevel", "=", "[", "]", "\n", "\n", "# Drop residuals of lists", "\n", "", "elif", "line", "[", "0", "]", "in", "'{|'", "or", "line", "[", "-", "1", "]", "==", "'}'", ":", "\n", "            ", "continue", "\n", "# Drop irrelevant lines", "\n", "", "elif", "(", "line", "[", "0", "]", "==", "'('", "and", "line", "[", "-", "1", "]", "==", "')'", ")", "or", "line", ".", "strip", "(", "'.-'", ")", "==", "''", ":", "\n", "            ", "continue", "\n", "", "elif", "len", "(", "headers", ")", ":", "\n", "            ", "if", "not", "Extractor", ".", "keepSections", ":", "\n", "                ", "items", "=", "headers", ".", "items", "(", ")", "\n", "items", ".", "sort", "(", ")", "\n", "for", "(", "i", ",", "v", ")", "in", "items", ":", "\n", "                    ", "page", ".", "append", "(", "v", ")", "\n", "", "", "headers", ".", "clear", "(", ")", "\n", "page", ".", "append", "(", "line", ")", "# first line", "\n", "emptySection", "=", "False", "\n", "", "elif", "not", "emptySection", ":", "\n", "            ", "page", ".", "append", "(", "line", ")", "\n", "# dangerous", "\n", "# # Drop preformatted", "\n", "# elif line[0] == ' ':", "\n", "#     continue", "\n", "\n", "", "", "return", "page", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.handle_unicode": [[2095, 2099], ["int", "unichr"], "function", ["None"], ["", "def", "handle_unicode", "(", "entity", ")", ":", "\n", "    ", "numeric_code", "=", "int", "(", "entity", "[", "2", ":", "-", "1", "]", ")", "\n", "if", "numeric_code", ">=", "0x10000", ":", "return", "''", "\n", "return", "unichr", "(", "numeric_code", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.load_templates": [[2173, 2241], ["codecs.open", "line.decode.decode", "tagRE.search", "tagRE.search.group", "codecs.open.close", "logging.info", "len", "page.append", "tagRE.search.group", "page.append", "tagRE.search.group", "tagRE.search.start", "tagRE.search.end", "page.append", "page.append", "tagRE.search.group", "m.group.startswith", "m.group.find", "WikiExtractor.define_template", "codecs.open.write", "codecs.open.write", "codecs.open.write", "codecs.open.write", "codecs.open.write", "codecs.open.write", "logging.info", "m.group.startswith", "m.group.startswith", "codecs.open.write"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.define_template", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write"], ["def", "load_templates", "(", "file", ",", "output_file", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Load templates from :param file:.\n    :param output_file: file where to save templates and modules.\n    \"\"\"", "\n", "global", "templateNamespace", ",", "templatePrefix", "\n", "templatePrefix", "=", "templateNamespace", "+", "':'", "\n", "global", "moduleNamespace", ",", "modulePrefix", "\n", "modulePrefix", "=", "moduleNamespace", "+", "':'", "\n", "articles", "=", "0", "\n", "page", "=", "[", "]", "\n", "inText", "=", "False", "\n", "if", "output_file", ":", "\n", "        ", "output", "=", "codecs", ".", "open", "(", "output_file", ",", "'wb'", ",", "'utf-8'", ")", "\n", "", "for", "line", "in", "file", ":", "\n", "        ", "line", "=", "line", ".", "decode", "(", "'utf-8'", ")", "\n", "if", "'<'", "not", "in", "line", ":", "# faster than doing re.search()", "\n", "            ", "if", "inText", ":", "\n", "                ", "page", ".", "append", "(", "line", ")", "\n", "", "continue", "\n", "", "m", "=", "tagRE", ".", "search", "(", "line", ")", "\n", "if", "not", "m", ":", "\n", "            ", "continue", "\n", "", "tag", "=", "m", ".", "group", "(", "2", ")", "\n", "if", "tag", "==", "'page'", ":", "\n", "            ", "page", "=", "[", "]", "\n", "", "elif", "tag", "==", "'title'", ":", "\n", "            ", "title", "=", "m", ".", "group", "(", "3", ")", "\n", "", "elif", "tag", "==", "'text'", ":", "\n", "            ", "inText", "=", "True", "\n", "line", "=", "line", "[", "m", ".", "start", "(", "3", ")", ":", "m", ".", "end", "(", "3", ")", "]", "\n", "page", ".", "append", "(", "line", ")", "\n", "if", "m", ".", "lastindex", "==", "4", ":", "# open-close", "\n", "                ", "inText", "=", "False", "\n", "", "", "elif", "tag", "==", "'/text'", ":", "\n", "            ", "if", "m", ".", "group", "(", "1", ")", ":", "\n", "                ", "page", ".", "append", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "", "inText", "=", "False", "\n", "", "elif", "inText", ":", "\n", "            ", "page", ".", "append", "(", "line", ")", "\n", "", "elif", "tag", "==", "'/page'", ":", "\n", "            ", "if", "not", "output_file", "and", "not", "templateNamespace", ":", "# do not know it yet", "\n", "# we reconstruct it from the first title", "\n", "                ", "colon", "=", "title", ".", "find", "(", "':'", ")", "\n", "if", "colon", ">", "1", ":", "\n", "                    ", "templateNamespace", "=", "title", "[", ":", "colon", "]", "\n", "templatePrefix", "=", "title", "[", ":", "colon", "+", "1", "]", "\n", "# FIXME: should reconstruct also moduleNamespace", "\n", "", "", "if", "title", ".", "startswith", "(", "templatePrefix", ")", ":", "\n", "                ", "define_template", "(", "title", ",", "page", ")", "\n", "# save templates and modules to file", "\n", "", "if", "output_file", "and", "(", "title", ".", "startswith", "(", "templatePrefix", ")", "or", "\n", "title", ".", "startswith", "(", "modulePrefix", ")", ")", ":", "\n", "                ", "output", ".", "write", "(", "'<page>\\n'", ")", "\n", "output", ".", "write", "(", "'   <title>%s</title>\\n'", "%", "title", ")", "\n", "output", ".", "write", "(", "'   <ns>10</ns>\\n'", ")", "\n", "output", ".", "write", "(", "'   <text>'", ")", "\n", "for", "line", "in", "page", ":", "\n", "                    ", "output", ".", "write", "(", "line", ")", "\n", "", "output", ".", "write", "(", "'   </text>\\n'", ")", "\n", "output", ".", "write", "(", "'</page>\\n'", ")", "\n", "", "page", "=", "[", "]", "\n", "articles", "+=", "1", "\n", "if", "articles", "%", "100000", "==", "0", ":", "\n", "                ", "logging", ".", "info", "(", "\"Preprocessed %d pages\"", ",", "articles", ")", "\n", "", "", "", "if", "output_file", ":", "\n", "        ", "output", ".", "close", "(", ")", "\n", "logging", ".", "info", "(", "\"Saved %d templates to '%s'\"", ",", "len", "(", "templates", ")", ",", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.process_dump": [[2242, 2414], ["logging.info", "timeit.default_timer", "multiprocessing.Queue", "multiprocessing.Process", "multiprocessing.Process.start", "multiprocessing.Queue", "logging.info", "xrange", "fileinput.FileInput.close", "multiprocessing.Queue.put", "multiprocessing.Process.join", "logging.info", "fileinput.FileInput", "line.decode.decode", "tagRE.search", "tagRE.search.group", "timeit.default_timer", "logging.info", "WikiExtractor.NextFile", "WikiExtractor.OutputSplitter", "max", "multiprocessing.Process", "multiprocessing.Process.start", "workers.append", "line.decode.decode", "tagRE.search", "tagRE.search.group", "multiprocessing.Queue.put", "w.join", "WikiExtractor.OutputSplitter.close", "timeit.default_timer", "tagRE.search.group", "os.path.exists", "logging.info", "fileinput.FileInput", "WikiExtractor.load_templates", "fileinput.FileInput.close", "logging.info", "WikiExtractor.load_templates", "fileinput.FileInput.close", "fileinput.FileInput", "timeit.default_timer", "len", "logging.warn", "knownNamespaces.add", "re.search", "ValueError", "page.append", "tagRE.search.group", "m.group.rfind", "tagRE.search.group", "tagRE.search.group", "re.search", "tagRE.search.group", "tagRE.search.group", "page.append", "tagRE.search.group", "tagRE.search.start", "tagRE.search.end", "page.append", "page.append", "tagRE.search.group", "m.group.find", "multiprocessing.Queue.put", "m.group.startswith"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.load_templates", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.load_templates", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.close"], ["", "", "def", "process_dump", "(", "input_file", ",", "template_file", ",", "out_file", ",", "file_size", ",", "file_compress", ",", "\n", "process_count", ")", ":", "\n", "    ", "\"\"\"\n    :param input_file: name of the wikipedia dump file; '-' to read from stdin\n    :param template_file: optional file with template definitions.\n    :param out_file: directory where to store extracted data, or '-' for stdout\n    :param file_size: max size of each extracted file, or None for no max (one file)\n    :param file_compress: whether to compress files with bzip.\n    :param process_count: number of extraction processes to spawn.\n    \"\"\"", "\n", "global", "urlbase", "\n", "global", "knownNamespaces", "\n", "global", "templateNamespace", ",", "templatePrefix", "\n", "global", "moduleNamespace", ",", "modulePrefix", "\n", "global", "expand_templates", "\n", "\n", "if", "input_file", "==", "'-'", ":", "\n", "        ", "input", "=", "sys", ".", "stdin", "\n", "", "else", ":", "\n", "        ", "input", "=", "fileinput", ".", "FileInput", "(", "input_file", ",", "openhook", "=", "fileinput", ".", "hook_compressed", ")", "\n", "\n", "# collect siteinfo", "\n", "", "for", "line", "in", "input", ":", "\n", "        ", "line", "=", "line", ".", "decode", "(", "'utf-8'", ")", "\n", "m", "=", "tagRE", ".", "search", "(", "line", ")", "\n", "if", "not", "m", ":", "\n", "            ", "continue", "\n", "", "tag", "=", "m", ".", "group", "(", "2", ")", "\n", "if", "tag", "==", "'base'", ":", "\n", "# discover urlbase from the xml dump file", "\n", "# /mediawiki/siteinfo/base", "\n", "            ", "base", "=", "m", ".", "group", "(", "3", ")", "\n", "urlbase", "=", "base", "[", ":", "base", ".", "rfind", "(", "\"/\"", ")", "]", "\n", "", "elif", "tag", "==", "'namespace'", ":", "\n", "            ", "knownNamespaces", ".", "add", "(", "m", ".", "group", "(", "3", ")", ")", "\n", "if", "re", ".", "search", "(", "'key=\"10\"'", ",", "line", ")", ":", "\n", "                ", "templateNamespace", "=", "m", ".", "group", "(", "3", ")", "\n", "templatePrefix", "=", "templateNamespace", "+", "':'", "\n", "", "elif", "re", ".", "search", "(", "'key=\"828\"'", ",", "line", ")", ":", "\n", "                ", "moduleNamespace", "=", "m", ".", "group", "(", "3", ")", "\n", "modulePrefix", "=", "moduleNamespace", "+", "':'", "\n", "", "", "elif", "tag", "==", "'/siteinfo'", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "expand_templates", ":", "\n", "# preprocess", "\n", "        ", "template_load_start", "=", "default_timer", "(", ")", "\n", "if", "template_file", "and", "os", ".", "path", ".", "exists", "(", "template_file", ")", ":", "\n", "            ", "logging", ".", "info", "(", "\"Preprocessing '%s' to collect template definitions: this may take some time.\"", ",", "template_file", ")", "\n", "file", "=", "fileinput", ".", "FileInput", "(", "template_file", ",", "openhook", "=", "fileinput", ".", "hook_compressed", ")", "\n", "load_templates", "(", "file", ")", "\n", "file", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "input_file", "==", "'-'", ":", "\n", "# can't scan then reset stdin; must error w/ suggestion to specify template_file", "\n", "                ", "raise", "ValueError", "(", "\"to use templates with stdin dump, must supply explicit template-file\"", ")", "\n", "", "logging", ".", "info", "(", "\"Preprocessing '%s' to collect template definitions: this may take some time.\"", ",", "input_file", ")", "\n", "load_templates", "(", "input", ",", "template_file", ")", "\n", "input", ".", "close", "(", ")", "\n", "input", "=", "fileinput", ".", "FileInput", "(", "input_file", ",", "openhook", "=", "fileinput", ".", "hook_compressed", ")", "\n", "", "template_load_elapsed", "=", "default_timer", "(", ")", "-", "template_load_start", "\n", "logging", ".", "info", "(", "\"Loaded %d templates in %.1fs\"", ",", "len", "(", "templates", ")", ",", "template_load_elapsed", ")", "\n", "\n", "", "if", "out_file", "==", "'-'", ":", "\n", "        ", "output", "=", "sys", ".", "stdout", "\n", "if", "file_compress", ":", "\n", "            ", "logging", ".", "warn", "(", "\"writing to stdout, so no output compression (use external tool)\"", ")", "\n", "", "", "else", ":", "\n", "        ", "nextFile", "=", "NextFile", "(", "out_file", ")", "\n", "output", "=", "OutputSplitter", "(", "nextFile", ",", "file_size", ",", "file_compress", ")", "\n", "\n", "# process pages", "\n", "", "logging", ".", "info", "(", "\"Starting page extraction from %s.\"", ",", "input_file", ")", "\n", "extract_start", "=", "default_timer", "(", ")", "\n", "\n", "# Parallel Map/Reduce:", "\n", "# - pages to be processed are dispatched to workers", "\n", "# - a reduce process collects the results, sort them and print them.", "\n", "\n", "maxsize", "=", "10", "*", "process_count", "\n", "# output queue", "\n", "output_queue", "=", "Queue", "(", "maxsize", "=", "maxsize", ")", "\n", "\n", "# Reduce job that sorts and prints output", "\n", "reduce", "=", "Process", "(", "target", "=", "reduce_process", ",", "args", "=", "(", "output_queue", ",", "output", ")", ")", "\n", "reduce", ".", "start", "(", ")", "\n", "\n", "# initialize jobs queue", "\n", "jobs_queue", "=", "Queue", "(", "maxsize", "=", "maxsize", ")", "\n", "\n", "# start worker processes", "\n", "logging", ".", "info", "(", "\"Using %d extract processes.\"", ",", "process_count", ")", "\n", "workers", "=", "[", "]", "\n", "for", "_", "in", "xrange", "(", "max", "(", "1", ",", "process_count", ")", ")", ":", "\n", "        ", "extractor", "=", "Process", "(", "target", "=", "extract_process", ",", "\n", "args", "=", "(", "jobs_queue", ",", "output_queue", ")", ")", "\n", "extractor", ".", "daemon", "=", "True", "# only live while parent process lives", "\n", "extractor", ".", "start", "(", ")", "\n", "workers", ".", "append", "(", "extractor", ")", "\n", "\n", "# Mapper process", "\n", "\n", "# we collect individual lines, since str.join() is significantly faster", "\n", "# than concatenation", "\n", "", "page", "=", "[", "]", "\n", "id", "=", "None", "\n", "last_id", "=", "None", "\n", "ordinal", "=", "0", "# page count", "\n", "inText", "=", "False", "\n", "redirect", "=", "False", "\n", "for", "line", "in", "input", ":", "\n", "        ", "line", "=", "line", ".", "decode", "(", "'utf-8'", ")", "\n", "if", "'<'", "not", "in", "line", ":", "# faster than doing re.search()", "\n", "            ", "if", "inText", ":", "\n", "                ", "page", ".", "append", "(", "line", ")", "\n", "", "continue", "\n", "", "m", "=", "tagRE", ".", "search", "(", "line", ")", "\n", "if", "not", "m", ":", "\n", "            ", "continue", "\n", "", "tag", "=", "m", ".", "group", "(", "2", ")", "\n", "if", "tag", "==", "'page'", ":", "\n", "            ", "page", "=", "[", "]", "\n", "redirect", "=", "False", "\n", "", "elif", "tag", "==", "'id'", "and", "not", "id", ":", "\n", "            ", "id", "=", "m", ".", "group", "(", "3", ")", "\n", "", "elif", "tag", "==", "'title'", ":", "\n", "            ", "title", "=", "m", ".", "group", "(", "3", ")", "\n", "", "elif", "tag", "==", "'redirect'", ":", "\n", "            ", "redirect", "=", "True", "\n", "", "elif", "tag", "==", "'text'", ":", "\n", "            ", "inText", "=", "True", "\n", "line", "=", "line", "[", "m", ".", "start", "(", "3", ")", ":", "m", ".", "end", "(", "3", ")", "]", "\n", "page", ".", "append", "(", "line", ")", "\n", "if", "m", ".", "lastindex", "==", "4", ":", "# open-close", "\n", "                ", "inText", "=", "False", "\n", "", "", "elif", "tag", "==", "'/text'", ":", "\n", "            ", "if", "m", ".", "group", "(", "1", ")", ":", "\n", "                ", "page", ".", "append", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "", "inText", "=", "False", "\n", "", "elif", "inText", ":", "\n", "            ", "page", ".", "append", "(", "line", ")", "\n", "", "elif", "tag", "==", "'/page'", ":", "\n", "            ", "colon", "=", "title", ".", "find", "(", "':'", ")", "\n", "if", "(", "colon", "<", "0", "or", "title", "[", ":", "colon", "]", "in", "acceptedNamespaces", ")", "and", "id", "!=", "last_id", "and", "not", "redirect", "and", "not", "title", ".", "startswith", "(", "templateNamespace", ")", ":", "\n", "                ", "job", "=", "(", "id", ",", "title", ",", "page", ",", "ordinal", ")", "\n", "jobs_queue", ".", "put", "(", "job", ")", "# goes to any available extract_process", "\n", "last_id", "=", "id", "\n", "ordinal", "+=", "1", "\n", "", "id", "=", "None", "\n", "page", "=", "[", "]", "\n", "\n", "", "", "input", ".", "close", "(", ")", "\n", "\n", "# signal termination", "\n", "for", "w", "in", "workers", ":", "\n", "        ", "jobs_queue", ".", "put", "(", "None", ")", "\n", "# wait for workers to terminate", "\n", "", "for", "w", "in", "workers", ":", "\n", "        ", "w", ".", "join", "(", ")", "\n", "\n", "# signal end of work to reduce process", "\n", "", "output_queue", ".", "put", "(", "None", ")", "\n", "# wait for it to finish", "\n", "reduce", ".", "join", "(", ")", "\n", "\n", "if", "output", "!=", "sys", ".", "stdout", ":", "\n", "        ", "output", ".", "close", "(", ")", "\n", "", "extract_duration", "=", "default_timer", "(", ")", "-", "extract_start", "\n", "extract_rate", "=", "ordinal", "/", "extract_duration", "\n", "logging", ".", "info", "(", "\"Finished %d-process extraction of %d articles in %.1fs (%.1f art/s)\"", ",", "\n", "process_count", ",", "ordinal", ",", "extract_duration", ",", "extract_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.extract_process": [[2418, 2433], ["jobs_queue.get", "cStringIO.StringIO", "WikiExtractor.Extractor.extract", "cStringIO.StringIO.getvalue", "output_queue.put", "cStringIO.StringIO.close", "WikiExtractor.Extractor"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.extract", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.close"], ["", "def", "extract_process", "(", "jobs_queue", ",", "output_queue", ")", ":", "\n", "    ", "\"\"\"Pull tuples of raw page content, do CPU/regex-heavy fixup, push finished text\n    :param job_queue: where to get jobs.\n    :param output_queue: where to queue extracted text for output.\n    \"\"\"", "\n", "while", "True", ":", "\n", "        ", "job", "=", "jobs_queue", ".", "get", "(", ")", "# job is (id, title, page, ordinal)", "\n", "if", "job", ":", "\n", "            ", "out", "=", "StringIO", "(", ")", "# memory buffer", "\n", "Extractor", "(", "*", "job", "[", ":", "3", "]", ")", ".", "extract", "(", "out", ")", "# (id, title, page)", "\n", "text", "=", "out", ".", "getvalue", "(", ")", "\n", "output_queue", ".", "put", "(", "(", "job", "[", "3", "]", ",", "text", ")", ")", "# (ordinal, extracted_text)", "\n", "out", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.reduce_process": [[2434, 2462], ["timeit.default_timer", "output.write", "output_queue.get", "ordering_buffer.pop", "logging.info", "timeit.default_timer", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write"], ["", "", "", "def", "reduce_process", "(", "output_queue", ",", "output", ")", ":", "\n", "    ", "\"\"\"Pull finished article text, write series of files (or stdout)\n    :param output_queue: text to be output.\n    :param output: file object where to print.\n    \"\"\"", "\n", "\n", "interval_start", "=", "default_timer", "(", ")", "\n", "period", "=", "100000", "\n", "# FIXME: use a heap", "\n", "ordering_buffer", "=", "{", "}", "# collected pages", "\n", "next_ordinal", "=", "0", "# sequence number of pages", "\n", "while", "True", ":", "\n", "        ", "if", "next_ordinal", "in", "ordering_buffer", ":", "\n", "            ", "output", ".", "write", "(", "ordering_buffer", ".", "pop", "(", "next_ordinal", ")", ")", "\n", "next_ordinal", "+=", "1", "\n", "# progress report", "\n", "if", "next_ordinal", "%", "period", "==", "0", ":", "\n", "                ", "interval_rate", "=", "period", "/", "(", "default_timer", "(", ")", "-", "interval_start", ")", "\n", "logging", ".", "info", "(", "\"Extracted %d articles (%.1f art/s)\"", ",", "\n", "next_ordinal", ",", "interval_rate", ")", "\n", "interval_start", "=", "default_timer", "(", ")", "\n", "", "", "else", ":", "\n", "# mapper puts None to signal finish", "\n", "            ", "pair", "=", "output_queue", ".", "get", "(", ")", "\n", "if", "not", "pair", ":", "\n", "                ", "break", "\n", "", "ordinal", ",", "text", "=", "pair", "\n", "ordering_buffer", "[", "ordinal", "]", "=", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.main": [[2468, 2584], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "logging.getLogger", "WikiExtractor.process_dump", "multiprocessing.cpu_count", "set", "logging.getLogger.setLevel", "logging.getLogger.setLevel", "WikiExtractor.ignoreTag", "os.path.basename", "int", "ValueError", "logging.error", "parser.parse_args.namespaces.split", "os.path.exists", "open", "file.read().decode", "re.search", "re.search", "WikiExtractor.Extractor.extract", "os.path.isdir", "os.makedirs", "parser.parse_args.bytes[].lower", "re.search.group", "re.search.group", "logging.error", "logging.error", "open", "WikiExtractor.load_templates", "file.read", "WikiExtractor.Extractor"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.process_dump", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.ignoreTag", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Extractor.extract", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.load_templates"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "urlbase", ",", "acceptedNamespaces", "\n", "global", "expand_templates", ",", "templateCache", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "prog", "=", "os", ".", "path", ".", "basename", "(", "sys", ".", "argv", "[", "0", "]", ")", ",", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", ",", "\n", "description", "=", "__doc__", ")", "\n", "parser", ".", "add_argument", "(", "\"input\"", ",", "\n", "help", "=", "\"XML wiki dump file\"", ")", "\n", "groupO", "=", "parser", ".", "add_argument_group", "(", "'Output'", ")", "\n", "groupO", ".", "add_argument", "(", "\"-o\"", ",", "\"--output\"", ",", "default", "=", "\"text\"", ",", "\n", "help", "=", "\"directory for extracted files (or '-' for dumping to stdin)\"", ")", "\n", "groupO", ".", "add_argument", "(", "\"-b\"", ",", "\"--bytes\"", ",", "default", "=", "\"1M\"", ",", "\n", "help", "=", "\"maximum bytes per output file (default %(default)s)\"", ",", "\n", "metavar", "=", "\"n[KMG]\"", ")", "\n", "groupO", ".", "add_argument", "(", "\"-c\"", ",", "\"--compress\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"compress output files using bzip\"", ")", "\n", "\n", "groupP", "=", "parser", ".", "add_argument_group", "(", "'Processing'", ")", "\n", "groupP", ".", "add_argument", "(", "\"--html\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"produce HTML output, subsumes --links and --sections\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"-l\"", ",", "\"--links\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"preserve links\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"-ns\"", ",", "\"--namespaces\"", ",", "default", "=", "\"\"", ",", "metavar", "=", "\"ns1,ns2\"", ",", "\n", "help", "=", "\"accepted namespaces\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"-s\"", ",", "\"--sections\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"preserve sections\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"--templates\"", ",", "\n", "help", "=", "\"use or create file containing templates\"", ")", "\n", "groupP", ".", "add_argument", "(", "\"--no-templates\"", ",", "action", "=", "\"store_false\"", ",", "\n", "help", "=", "\"Do not expand templates\"", ")", "\n", "default_process_count", "=", "cpu_count", "(", ")", "-", "1", "\n", "parser", ".", "add_argument", "(", "\"--processes\"", ",", "type", "=", "int", ",", "default", "=", "default_process_count", ",", "\n", "help", "=", "\"Number of extract processes (default %(default)s)\"", ")", "\n", "\n", "groupS", "=", "parser", ".", "add_argument_group", "(", "'Special'", ")", "\n", "groupS", ".", "add_argument", "(", "\"-q\"", ",", "\"--quiet\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"suppress reporting progress info\"", ")", "\n", "groupS", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"print debug info\"", ")", "\n", "groupS", ".", "add_argument", "(", "\"-a\"", ",", "\"--article\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"analyze a file containing a single article (debug option)\"", ")", "\n", "groupS", ".", "add_argument", "(", "\"-v\"", ",", "\"--version\"", ",", "action", "=", "\"version\"", ",", "\n", "version", "=", "'%(prog)s '", "+", "version", ",", "\n", "help", "=", "\"print program version\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "Extractor", ".", "keepLinks", "=", "args", ".", "links", "\n", "Extractor", ".", "keepSections", "=", "args", ".", "sections", "\n", "Extractor", ".", "toHTML", "=", "args", ".", "html", "\n", "if", "args", ".", "html", ":", "\n", "        ", "Extractor", ".", "keepLinks", "=", "True", "\n", "Extractor", ".", "keepSections", "=", "True", "\n", "\n", "", "expand_templates", "=", "args", ".", "no_templates", "\n", "\n", "try", ":", "\n", "        ", "power", "=", "'kmg'", ".", "find", "(", "args", ".", "bytes", "[", "-", "1", "]", ".", "lower", "(", ")", ")", "+", "1", "\n", "file_size", "=", "int", "(", "args", ".", "bytes", "[", ":", "-", "1", "]", ")", "*", "1024", "**", "power", "\n", "if", "file_size", "<", "minFileSize", ":", "\n", "            ", "raise", "ValueError", "(", ")", "\n", "", "", "except", "ValueError", ":", "\n", "        ", "logging", ".", "error", "(", "'Insufficient or invalid size: %s'", ",", "args", ".", "bytes", ")", "\n", "return", "\n", "\n", "", "if", "args", ".", "namespaces", ":", "\n", "        ", "acceptedNamespaces", "=", "set", "(", "args", ".", "namespaces", ".", "split", "(", "','", ")", ")", "\n", "\n", "", "FORMAT", "=", "'%(levelname)s: %(message)s'", "\n", "logging", ".", "basicConfig", "(", "format", "=", "FORMAT", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "if", "not", "args", ".", "quiet", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "", "if", "args", ".", "debug", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "", "input_file", "=", "args", ".", "input", "\n", "\n", "if", "not", "Extractor", ".", "keepLinks", ":", "\n", "        ", "ignoreTag", "(", "'a'", ")", "\n", "\n", "# sharing cache of parser templates is too slow:", "\n", "#manager = Manager()", "\n", "#templateCache = manager.dict()", "\n", "\n", "", "if", "args", ".", "article", ":", "\n", "        ", "if", "args", ".", "templates", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "templates", ")", ":", "\n", "                ", "with", "open", "(", "args", ".", "templates", ")", "as", "file", ":", "\n", "                    ", "load_templates", "(", "file", ")", "\n", "\n", "", "", "", "with", "open", "(", "input_file", ")", "as", "file", ":", "\n", "            ", "page", "=", "file", ".", "read", "(", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "m", "=", "re", ".", "search", "(", "r'<id>(.*)</id>'", ",", "page", ")", "\n", "id", "=", "m", ".", "group", "(", "1", ")", "if", "m", "else", "0", "\n", "m", "=", "re", ".", "search", "(", "r'<title>(.*)</title>'", ",", "page", ")", "\n", "if", "m", ":", "\n", "                ", "title", "=", "m", ".", "group", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "error", "(", "'Missing title element'", ")", "\n", "return", "\n", "", "Extractor", "(", "id", ",", "title", ",", "[", "page", "]", ")", ".", "extract", "(", "sys", ".", "stdout", ")", "\n", "", "return", "\n", "\n", "", "output_path", "=", "args", ".", "output", "\n", "if", "output_path", "!=", "'-'", "and", "not", "os", ".", "path", ".", "isdir", "(", "output_path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "output_path", ")", "\n", "", "except", ":", "\n", "            ", "logging", ".", "error", "(", "'Could not create: %s'", ",", "output_path", ")", "\n", "return", "\n", "\n", "", "", "process_dump", "(", "input_file", ",", "args", ".", "templates", ",", "output_path", ",", "file_size", ",", "\n", "args", ".", "compress", ",", "args", ".", "processes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.Wiki2Plain.__init__": [[28, 36], ["wiki2plain.Wiki2Plain.unhtml", "wiki2plain.Wiki2Plain.unwiki", "wiki2plain.Wiki2Plain.punctuate", "wiki2plain.Wiki2Plain.remove_infobox"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.Wiki2Plain.unhtml", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.Wiki2Plain.unwiki", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.Wiki2Plain.punctuate", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.Wiki2Plain.remove_infobox"], ["    ", "def", "__init__", "(", "self", ",", "wiki", ")", ":", "\n", "        ", "self", ".", "wiki", "=", "wiki", "\n", "\n", "self", ".", "text", "=", "wiki", "\n", "self", ".", "text", "=", "self", ".", "unhtml", "(", "self", ".", "text", ")", "\n", "self", ".", "text", "=", "self", ".", "unwiki", "(", "self", ".", "text", ")", "\n", "self", ".", "text", "=", "self", ".", "punctuate", "(", "self", ".", "text", ")", "\n", "self", ".", "text", "=", "self", ".", "remove_infobox", "(", "self", ".", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.Wiki2Plain.__str__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.Wiki2Plain.unwiki": [[40, 62], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "m.group", "m.group", "m.group", "m.group"], "methods", ["None"], ["", "def", "unwiki", "(", "self", ",", "wiki", ")", ":", "\n", "        ", "\"\"\"\n        Remove wiki markup from the text.\n        \"\"\"", "\n", "wiki", "=", "re", ".", "sub", "(", "r'(?i)\\{\\{IPA(\\-[^\\|\\{\\}]+)*?\\|([^\\|\\{\\}]+)(\\|[^\\{\\}]+)*?\\}\\}'", ",", "lambda", "m", ":", "m", ".", "group", "(", "2", ")", ",", "wiki", ")", "\n", "# wiki = re.sub(r'(?i)\\{\\{Lang(\\-[^\\|\\{\\}]+)*?\\|([^\\|\\{\\}]+)(\\|[^\\{\\}]+)*?\\}\\}', lambda m: m.group(2), wiki)", "\n", "wiki", "=", "re", ".", "sub", "(", "r'(?i)\\{\\{Lang.*?\\}\\}'", ",", "''", ",", "wiki", ")", "\n", "wiki", "=", "re", ".", "sub", "(", "r'\\{\\{[^\\{\\}]+\\}\\}'", ",", "''", ",", "wiki", ")", "\n", "wiki", "=", "re", ".", "sub", "(", "r'(?m)\\{\\{[^\\{\\}]+\\}\\}'", ",", "''", ",", "wiki", ")", "\n", "wiki", "=", "re", ".", "sub", "(", "r'(?m)\\{\\|[^\\{\\}]*?\\|\\}'", ",", "''", ",", "wiki", ")", "\n", "wiki", "=", "re", ".", "sub", "(", "r'(?i)\\[\\[Category:[^\\[\\]]*?\\]\\]'", ",", "''", ",", "wiki", ")", "\n", "wiki", "=", "re", ".", "sub", "(", "r'(?i)\\[\\[Image:[^\\[\\]]*?\\]\\]'", ",", "''", ",", "wiki", ")", "\n", "wiki", "=", "re", ".", "sub", "(", "r'(?i)\\[\\[File:[^\\[\\]]*?\\]\\]'", ",", "''", ",", "wiki", ")", "\n", "wiki", "=", "re", ".", "sub", "(", "r'\\[\\[[^\\[\\]]*?\\|([^\\[\\]]*?)\\]\\]'", ",", "lambda", "m", ":", "m", ".", "group", "(", "1", ")", ",", "wiki", ")", "\n", "wiki", "=", "re", ".", "sub", "(", "r'\\[\\[([^\\[\\]]+?)\\]\\]'", ",", "lambda", "m", ":", "m", ".", "group", "(", "1", ")", ",", "wiki", ")", "\n", "wiki", "=", "re", ".", "sub", "(", "r'\\[\\[([^\\[\\]]+?)\\]\\]'", ",", "''", ",", "wiki", ")", "\n", "wiki", "=", "re", ".", "sub", "(", "r'(?i)File:[^\\[\\]]*?'", ",", "''", ",", "wiki", ")", "\n", "wiki", "=", "re", ".", "sub", "(", "r'\\[[^\\[\\]]*? ([^\\[\\]]*?)\\]'", ",", "lambda", "m", ":", "m", ".", "group", "(", "1", ")", ",", "wiki", ")", "\n", "wiki", "=", "re", ".", "sub", "(", "r\"''+\"", ",", "''", ",", "wiki", ")", "\n", "wiki", "=", "re", ".", "sub", "(", "r'(?m)^\\*$'", ",", "''", ",", "wiki", ")", "\n", "\n", "return", "wiki", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.Wiki2Plain.unhtml": [[63, 75], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub"], "methods", ["None"], ["", "def", "unhtml", "(", "self", ",", "html", ")", ":", "\n", "        ", "\"\"\"\n        Remove HTML from the text.\n        \"\"\"", "\n", "html", "=", "re", ".", "sub", "(", "r'(?i)&nbsp;'", ",", "' '", ",", "html", ")", "\n", "html", "=", "re", ".", "sub", "(", "r'(?i)<br[ \\\\]*?>'", ",", "'\\n'", ",", "html", ")", "\n", "html", "=", "re", ".", "sub", "(", "r'(?m)<!--.*?--\\s*>'", ",", "''", ",", "html", ")", "\n", "html", "=", "re", ".", "sub", "(", "r'(?i)<ref[^>]*>[^>]*<\\/ ?ref>'", ",", "''", ",", "html", ")", "\n", "html", "=", "re", ".", "sub", "(", "r'(?m)<.*?>'", ",", "''", ",", "html", ")", "\n", "html", "=", "re", ".", "sub", "(", "r'(?i)&amp;'", ",", "'&'", ",", "html", ")", "\n", "\n", "return", "html", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.Wiki2Plain.punctuate": [[76, 96], ["re.sub", "re.sub", "re.sub.split", "part.strip.strip.strip", "partsParsed.append", "len"], "methods", ["None"], ["", "def", "punctuate", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"\n        Convert every text part into well-formed one-space\n        separate paragraph.\n        \"\"\"", "\n", "text", "=", "re", ".", "sub", "(", "r'\\r\\n|\\n|\\r'", ",", "'\\n'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\n\\n+'", ",", "'\\n\\n'", ",", "text", ")", "\n", "\n", "parts", "=", "text", ".", "split", "(", "'\\n\\n'", ")", "\n", "partsParsed", "=", "[", "]", "\n", "\n", "for", "part", "in", "parts", ":", "\n", "            ", "part", "=", "part", ".", "strip", "(", ")", "\n", "\n", "if", "len", "(", "part", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "partsParsed", ".", "append", "(", "part", ")", "\n", "\n", "", "return", "'\\n\\n'", ".", "join", "(", "partsParsed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.Wiki2Plain.remove_infobox": [[97, 99], ["re.sub"], "methods", ["None"], ["", "def", "remove_infobox", "(", "self", ",", "text", ")", ":", "\n", "        ", "return", "re", ".", "sub", "(", "infobox_pattern", ",", "''", ",", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.Wiki2Plain.image": [[100, 111], ["re.search", "re.search.groups"], "methods", ["None"], ["", "def", "image", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Retrieve the first image in the document.\n        \"\"\"", "\n", "# match = re.search(r'(?i)\\|?\\s*(image|img|image_flag)\\s*=\\s*(<!--.*-->)?\\s*([^\\\\/:*?<>\"|%]+\\.[^\\\\/:*?<>\"|%]{3,4})', self.wiki)", "\n", "match", "=", "re", ".", "search", "(", "r'(?i)([^\\\\/:*?<>\"|% =]+)\\.(gif|jpg|jpeg|png|bmp)'", ",", "self", ".", "wiki", ")", "\n", "\n", "if", "match", ":", "\n", "            ", "return", "'%s.%s'", "%", "match", ".", "groups", "(", ")", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.get_main_section": [[112, 118], ["text.find"], "function", ["None"], ["", "", "def", "get_main_section", "(", "text", ")", ":", "\n", "    ", "detail_start_pos", "=", "text", ".", "find", "(", "'=='", ")", "\n", "if", "detail_start_pos", ">=", "0", ":", "\n", "        ", "return", "text", "[", ":", "detail_start_pos", "]", "\n", "", "else", ":", "\n", "        ", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.do_test": [[119, 123], ["codecs.open", "codecs.open", "writer.write", "wiki2plain.Wiki2Plain", "reader.read"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write"], ["", "", "def", "do_test", "(", "in_path", ",", "out_path", ")", ":", "\n", "    ", "with", "codecs", ".", "open", "(", "in_path", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "        ", "with", "codecs", ".", "open", "(", "out_path", ",", "encoding", "=", "'utf-8'", ",", "mode", "=", "'w'", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "Wiki2Plain", "(", "reader", ".", "read", "(", ")", ")", ".", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.do_batch": [[124, 153], ["Corpus.TRECReader", "Corpus.TRECReader.open", "Corpus.TRECReader.next", "time.time", "Corpus.TRECReader.close", "wiki2plain.Wiki2Plain", "text.find", "Corpus.TRECReader.next", "wiki2plain.get_main_section", "json_list.append", "title.count", "re.match", "os.path.join", "print", "print", "str", "title.strip", "body.strip", "codecs.open", "json.dump", "title.split", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile.next", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile.next", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.get_main_section", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open"], ["", "", "", "def", "do_batch", "(", "in_trec", ",", "out_dir", ")", ":", "\n", "    ", "import", "Corpus", "\n", "reader", "=", "Corpus", ".", "TRECReader", "(", ")", "\n", "reader", ".", "open", "(", "in_trec", ")", "\n", "doc", "=", "reader", ".", "next", "(", ")", "\n", "count", "=", "1", ";", "\n", "entry_per_file", "=", "10000", "\n", "json_list", "=", "[", "]", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "while", "doc", ":", "\n", "        ", "plain", "=", "Wiki2Plain", "(", "get_main_section", "(", "doc", ".", "text", ")", ")", "\n", "text", "=", "plain", ".", "text", "\n", "\n", "body_start_pos", "=", "text", ".", "find", "(", "'\\n'", ")", "\n", "if", "body_start_pos", ">", "0", ":", "\n", "            ", "title", "=", "text", "[", ":", "body_start_pos", "]", "\n", "body", "=", "text", "[", "body_start_pos", ":", "]", "\n", "if", "not", "title", ".", "count", "(", "':'", ")", "or", "not", "re", ".", "match", "(", "invalid_title_pattern", ",", "title", ".", "split", "(", "':'", ")", "[", "0", "]", ")", ":", "\n", "                ", "json_list", ".", "append", "(", "{", "'id'", ":", "str", "(", "count", ")", ",", "'title'", ":", "title", ".", "strip", "(", ")", ",", "'body'", ":", "body", ".", "strip", "(", ")", "}", ")", "\n", "if", "count", "%", "entry_per_file", "==", "0", ":", "\n", "                    ", "out_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "str", "(", "count", "/", "entry_per_file", ")", "+", "'.json'", ")", "\n", "print", "(", "'writing'", ",", "out_path", ")", "\n", "with", "codecs", ".", "open", "(", "out_path", ",", "encoding", "=", "'utf-8'", ",", "mode", "=", "'w'", ")", "as", "writer", ":", "\n", "                       ", "json", ".", "dump", "(", "json_list", ",", "writer", ",", "indent", "=", "2", ",", "ensure_ascii", "=", "False", ")", "\n", "json_list", "=", "[", "]", "\n", "", "print", "(", "count", ",", "title", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "", "count", "+=", "1", "\n", "", "", "doc", "=", "reader", ".", "next", "(", ")", "\n", "", "reader", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.do_count_length": [[154, 180], ["Corpus.TRECReader", "Corpus.TRECReader.open", "Corpus.TRECReader.next", "time.time", "Corpus.TRECReader.close", "codecs.open", "len", "wiki2plain.Wiki2Plain", "text.find", "Corpus.TRECReader.next", "reader.next.text.lower", "Corpus.TRECReader.next", "wiki2plain.get_main_section", "writer.write", "writer.flush"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile.next", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.close", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile.next", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.NextFile.next", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.get_main_section", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write"], ["", "def", "do_count_length", "(", "in_trec", ",", "out_path", ")", ":", "\n", "    ", "import", "Corpus", "\n", "reader", "=", "Corpus", ".", "TRECReader", "(", ")", "\n", "reader", ".", "open", "(", "in_trec", ")", "\n", "doc", "=", "reader", ".", "next", "(", ")", "\n", "count", "=", "1", ";", "\n", "entry_per_file", "=", "10000", "\n", "json_list", "=", "[", "]", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "with", "codecs", ".", "open", "(", "out_path", ",", "encoding", "=", "'utf8'", ",", "mode", "=", "'w'", ")", "as", "writer", ":", "\n", "        ", "while", "doc", ":", "\n", "            ", "length", "=", "len", "(", "doc", ".", "text", ")", "\n", "if", "'#redirect'", "in", "doc", ".", "text", ".", "lower", "(", ")", ":", "\n", "                ", "doc", "=", "reader", ".", "next", "(", ")", "\n", "continue", "\n", "", "plain", "=", "Wiki2Plain", "(", "get_main_section", "(", "doc", ".", "text", ")", ")", "\n", "text", "=", "plain", ".", "text", "\n", "\n", "body_start_pos", "=", "text", ".", "find", "(", "'\\n'", ")", "\n", "if", "body_start_pos", ">", "0", ":", "\n", "                ", "title", "=", "text", "[", ":", "body_start_pos", "]", "\n", "writer", ".", "write", "(", "u'%s\\t%d\\n'", "%", "(", "title", ",", "length", ")", ")", "\n", "writer", ".", "flush", "(", ")", "\n", "\n", "", "doc", "=", "reader", ".", "next", "(", ")", "\n", "", "", "reader", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiPageHandler.__init__": [[38, 47], ["time.time"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "make_handler", "=", "None", ")", ":", "\n", "        ", "self", ".", "make_handler", "=", "make_handler", "\n", "self", ".", "stack", "=", "[", "]", "\n", "self", ".", "text", "=", "None", "\n", "self", ".", "title", "=", "None", "\n", "self", ".", "revisions", "=", "[", "]", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "docs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiPageHandler.startElement": [[48, 67], ["wikidump.WikiPageHandler.stack.append"], "methods", ["None"], ["", "def", "startElement", "(", "self", ",", "name", ",", "attributes", ")", ":", "\n", "        ", "if", "name", "==", "u\"page\"", ":", "\n", "            ", "assert", "self", ".", "stack", "==", "[", "]", "\n", "self", ".", "text", "=", "None", "\n", "self", ".", "title", "=", "None", "\n", "self", ".", "revisions", "=", "[", "]", "\n", "", "elif", "name", "==", "u\"title\"", ":", "\n", "            ", "assert", "self", ".", "stack", "==", "[", "u\"page\"", "]", "\n", "assert", "self", ".", "title", "is", "None", "\n", "self", ".", "title", "=", "u\"\"", "\n", "", "elif", "name", "==", "u\"text\"", ":", "\n", "            ", "if", "self", ".", "stack", "[", "-", "1", "]", "==", "u\"page\"", "or", "self", ".", "stack", "[", "-", "1", "]", "==", "u'revision'", ":", "\n", "                ", "self", ".", "text", "=", "u\"\"", "\n", "", "", "elif", "name", "==", "u'revision'", "or", "name", "==", "u'timestamp'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "stack", ".", "append", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiPageHandler.endElement": [[68, 97], ["wikidump.WikiPageHandler.docs.append", "len", "os.path.exists", "print", "sys.stdout.flush", "wikidump.process_to_json", "bz2.BZ2File", "f_out.write", "time.time", "print", "wikidump.grouper", "itertools.chain", "json.dumps().encode", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.process_to_json", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.util.grouper"], ["", "def", "endElement", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "stack", ")", ">", "0", "and", "name", "==", "self", ".", "stack", "[", "-", "1", "]", ":", "\n", "            ", "del", "self", ".", "stack", "[", "-", "1", "]", "\n", "", "if", "name", "==", "u\"text\"", "and", "self", ".", "stack", "==", "[", "u'page'", "]", ":", "\n", "# We have the complete article, wait for closing page tag to write it", "\n", "            ", "pass", "\n", "", "if", "name", "==", "u'page'", ":", "\n", "            ", "if", "\"#REDIRECT\"", "in", "self", ".", "text", ":", "\n", "                ", "return", "\n", "", "self", ".", "count", "+=", "1", "\n", "self", ".", "docs", ".", "append", "(", "(", "self", ".", "title", ",", "self", ".", "text", ",", "self", ".", "revisions", ")", ")", "\n", "n_jobs", "=", "16", "\n", "chunk_size", "=", "200", "\n", "if", "self", ".", "count", "%", "(", "chunk_size", "*", "n_jobs", ")", "==", "0", ":", "\n", "                ", "if", "False", "and", "os", ".", "path", ".", "exists", "(", "\"enwiki3/pages%07d.json\"", "%", "self", ".", "count", ")", ":", "\n", "                    ", "print", "(", "\"Skipping %07d\"", "%", "self", ".", "count", ")", "\n", "self", ".", "docs", "=", "[", "]", "\n", "", "else", ":", "\n", "# results = Parallel(n_jobs=1)(delayed(process_to_json)(chunk) for chunk in grouper(self.docs, chunk_size))", "\n", "                    ", "results", "=", "[", "process_to_json", "(", "chunk", ")", "for", "chunk", "in", "grouper", "(", "self", ".", "docs", ",", "chunk_size", ")", "]", "\n", "results", "=", "[", "r", ".", "json_file_docs", "for", "r", "in", "results", "]", "\n", "results", "=", "[", "l", "for", "l", "in", "chain", "(", "*", "results", ")", "]", "\n", "self", ".", "docs", "=", "[", "]", "\n", "with", "bz2", ".", "BZ2File", "(", "\"enwiki3/pages%07d.json.bz2\"", "%", "self", ".", "count", ",", "'w'", ")", "as", "f_out", ":", "\n", "                        ", "f_out", ".", "write", "(", "json", ".", "dumps", "(", "results", ",", "indent", "=", "2", ",", "ensure_ascii", "=", "False", ")", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "\n", "", "time_diff", "=", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "print", "(", "self", ".", "count", ",", "time_diff", ",", "self", ".", "count", "/", "(", "time_diff", ")", ")", ",", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiPageHandler.characters": [[99, 110], ["len", "len", "wikidump.WikiPageHandler.revisions.append"], "methods", ["None"], ["", "", "", "", "def", "characters", "(", "self", ",", "content", ")", ":", "\n", "        ", "assert", "content", "is", "not", "None", "and", "len", "(", "content", ")", ">", "0", "\n", "if", "len", "(", "self", ".", "stack", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "stack", "[", "-", "1", "]", "==", "u\"title\"", ":", "\n", "            ", "self", ".", "title", "+=", "content", "\n", "", "elif", "self", ".", "stack", "[", "-", "1", "]", "==", "u\"text\"", ":", "\n", "            ", "assert", "self", ".", "title", "is", "not", "None", "\n", "self", ".", "text", "+=", "content", "\n", "", "elif", "self", ".", "stack", "[", "-", "1", "]", "==", "u'timestamp'", "and", "self", ".", "stack", "[", "-", "2", "]", "==", "u'revision'", ":", "\n", "            ", "self", ".", "revisions", ".", "append", "(", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiFilter.is_wiki_service_page": [[113, 119], ["title.replace", "re.match"], "methods", ["None"], ["    ", "def", "is_wiki_service_page", "(", "self", ",", "title", ")", ":", "\n", "        ", "title_underscore", "=", "title", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "wikipedia_ignore_page_match", "=", "re", ".", "match", "(", "ignore_wikipedia_service_pages", ",", "title_underscore", ")", "\n", "if", "wikipedia_ignore_page_match", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiJsonFilter.__init__": [[122, 132], ["set"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "names", ",", "json_out", "=", "None", ",", "is_filter", "=", "True", ")", ":", "\n", "        ", "self", ".", "MAX_DOCS_PER_FILE", "=", "10000", "\n", "\n", "self", ".", "name_set", "=", "set", "(", "names", ")", "\n", "self", ".", "out", "=", "json_out", "\n", "self", ".", "global_doc_id", "=", "0", "\n", "self", ".", "json_file_docs", "=", "[", "]", "\n", "self", ".", "json_file_docs_count", "=", "0", "\n", "self", ".", "json_file_id", "=", "0", "\n", "self", ".", "is_filter", "=", "is_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiJsonFilter.write_to_fd": [[133, 140], ["len", "len", "json.dump", "json.dump"], "methods", ["None"], ["", "def", "write_to_fd", "(", "self", ",", "out_fd", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "json_file_docs", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "if", "len", "(", "self", ".", "json_file_docs", ")", "==", "1", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "json_file_docs", "[", "0", "]", ",", "out_fd", ",", "indent", "=", "2", ",", "ensure_ascii", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "json_file_docs", ",", "out_fd", ",", "indent", "=", "2", ",", "ensure_ascii", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiJsonFilter.flush_file_contents": [[141, 151], ["os.path.join", "codecs.open", "json.dump"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open"], ["", "", "def", "flush_file_contents", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "out", "is", "None", ":", "\n", "            ", "return", "\n", "", "out_current_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "out", ",", "'%04d.json'", "%", "self", ".", "json_file_id", ")", "\n", "with", "codecs", ".", "open", "(", "out_current_file_path", ",", "'w'", ",", "'utf-8'", ")", "as", "f_out", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "json_file_docs", ",", "f_out", ",", "indent", "=", "2", ",", "ensure_ascii", "=", "False", ")", "\n", "", "self", ".", "json_file_id", "+=", "1", "\n", "# reset file-related counters", "\n", "self", ".", "json_file_docs", "=", "[", "]", "\n", "self", ".", "json_file_docs_count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiJsonFilter.process": [[153, 179], ["title.replace", "wikidump.WikiJsonFilter.name_set.__contains__", "wikidump.WikiJsonFilter.is_wiki_service_page", "wikidump.WikiJsonFilter.json_file_docs.append", "wiki2plain.Wiki2Plain", "wiki2plain.Wiki2Plain", "wiki2plain.Wiki2Plain", "str", "title.strip", "body.strip", "fullbody.strip", "wikidump.WikiJsonFilter.flush_file_contents", "wiki2plain.get_main_section"], "methods", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiFilter.is_wiki_service_page", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiJsonFilter.flush_file_contents", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wiki2plain.get_main_section"], ["", "def", "process", "(", "self", ",", "title", ",", "text", ",", "revisions", "=", "[", "]", ")", ":", "\n", "#from IPython.core.debugger import Tracer; Tracer()()", "\n", "        ", "global_doc_id", "=", "self", ".", "global_doc_id", "+", "1", "\n", "title_underscore", "=", "title", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "\n", "if", "not", "self", ".", "is_filter", "or", "self", ".", "name_set", ".", "__contains__", "(", "title_underscore", ")", ":", "\n", "            ", "title", "=", "Wiki2Plain", "(", "title_underscore", ")", ".", "text", "\n", "fullbody", "=", "Wiki2Plain", "(", "text", ")", ".", "text", "\n", "body", "=", "Wiki2Plain", "(", "get_main_section", "(", "text", ")", ")", ".", "text", "\n", "has_colon_in_title", "=", "':'", "in", "title", "\n", "\n", "# skip current page if it's a wikipedia service page", "\n", "if", "self", ".", "is_wiki_service_page", "(", "title", ")", ":", "\n", "                ", "return", "\n", "\n", "# Now we have a legitimate document", "\n", "#if has_colon_in_title:", "\n", "#print(u'WARNING: collecting possibly undesired document having title: %s' % title)", "\n", "\n", "", "current_json_doc", "=", "{", "'id'", ":", "str", "(", "global_doc_id", ")", ",", "'title'", ":", "title", ".", "strip", "(", ")", ",", "'body'", ":", "body", ".", "strip", "(", ")", ",", "'fullbody'", ":", "fullbody", ".", "strip", "(", ")", "}", "\n", "self", ".", "global_doc_id", "+=", "1", "\n", "self", ".", "json_file_docs", ".", "append", "(", "current_json_doc", ")", "\n", "self", ".", "json_file_docs_count", "+=", "1", "\n", "if", "self", ".", "json_file_docs_count", "==", "self", ".", "MAX_DOCS_PER_FILE", ":", "\n", "# flush file contents", "\n", "                ", "self", ".", "flush_file_contents", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.grouper": [[20, 23], ["itertools.izip_longest", "iter"], "function", ["None"], ["def", "grouper", "(", "iterable", ",", "n", ",", "fillvalue", "=", "None", ")", ":", "\n", "    ", "args", "=", "[", "iter", "(", "iterable", ")", "]", "*", "n", "\n", "return", "izip_longest", "(", "*", "args", ",", "fillvalue", "=", "fillvalue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.process_to_json": [[27, 36], ["wikidump.WikiJsonFilter", "wikidump.WikiJsonFilter.process", "pdb.set_trace"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiJsonFilter.process"], ["def", "process_to_json", "(", "chunk", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "wjf", "=", "WikiJsonFilter", "(", "[", "]", ",", "None", ",", "False", ")", "\n", "chunk", "=", "[", "c", "for", "c", "in", "chunk", "if", "c", "is", "not", "None", "]", "\n", "for", "title", ",", "text", ",", "revision", "in", "chunk", ":", "\n", "            ", "wjf", ".", "process", "(", "title", ",", "text", ",", "revision", ")", "\n", "", "", "except", ":", "\n", "        ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "return", "wjf", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.write_revision": [[181, 187], ["wiki_filter.is_wiki_service_page", "f_out.write", "f_out.write", "f_out.write"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiFilter.is_wiki_service_page", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write"], ["", "", "", "", "def", "write_revision", "(", "wiki_filter", ",", "f_out", ",", "title", ",", "text", ",", "revisions", ")", ":", "\n", "    ", "if", "not", "wiki_filter", ".", "is_wiki_service_page", "(", "title", ")", ":", "\n", "        ", "f_out", ".", "write", "(", "title", "+", "'\\n'", ")", "\n", "for", "revision", "in", "revisions", ":", "\n", "            ", "f_out", ".", "write", "(", "revision", "+", "'\\n'", ")", "\n", "", "f_out", ".", "write", "(", "'-'", "*", "20", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.dump_json": [[189, 194], ["xml.sax.parse", "wikidump.WikiPageHandler", "len", "json_filter.flush_file_contents"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Template.parse", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.WikiJsonFilter.flush_file_contents"], ["", "", "def", "dump_json", "(", "f_in", ",", "out_dir", ")", ":", "\n", "    ", "xml", ".", "sax", ".", "parse", "(", "f_in", ",", "WikiPageHandler", "(", ")", ")", "\n", "# flush remaining documents in json_filter internal cache", "\n", "if", "len", "(", "json_filter", ".", "json_file_docs", ")", ">", "0", ":", "\n", "        ", "json_filter", ".", "flush_file_contents", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.match_infobox": [[197, 219], ["text.find", "range", "len", "text.find", "re.match"], "function", ["None"], ["", "", "def", "match_infobox", "(", "text", ")", ":", "\n", "    ", "end_position", "=", "0", "\n", "matched_text", "=", "''", "\n", "start_position", "=", "text", ".", "find", "(", "'{{'", ",", "end_position", ")", "\n", "while", "start_position", ">=", "0", ":", "\n", "        ", "bracket_count", "=", "0", "\n", "for", "i", "in", "range", "(", "start_position", ",", "len", "(", "text", ")", ")", ":", "\n", "            ", "if", "text", "[", "i", "]", "==", "'{'", ":", "\n", "                ", "bracket_count", "+=", "1", "\n", "", "elif", "text", "[", "i", "]", "==", "'}'", ":", "\n", "                ", "bracket_count", "-=", "1", "\n", "", "if", "not", "bracket_count", ":", "\n", "                ", "end_position", "=", "i", "+", "1", "\n", "break", "\n", "", "", "if", "end_position", ">", "start_position", ":", "\n", "            ", "matched_section", "=", "text", "[", "start_position", ":", "end_position", "]", "\n", "if", "'\\n'", "in", "matched_section", "and", "not", "re", ".", "match", "(", "NON_INFOBOX_REGEX", ",", "matched_section", ")", ":", "\n", "                ", "matched_text", "+=", "matched_section", "+", "'\\n'", "\n", "", "start_position", "=", "text", ".", "find", "(", "'{{'", ",", "end_position", ")", "\n", "", "else", ":", "\n", "            ", "break", "\n", "", "", "return", "matched_text", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.dump_infobox": [[221, 229], ["text.lower.lower", "match_infobox().strip", "text.lower.find", "wikidump.normalize_title", "wikidump.match_infobox", "f_out.write"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.normalize_title", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.match_infobox", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.write"], ["", "def", "dump_infobox", "(", "f_out", ",", "title", ",", "text", ",", "reversions", "=", "[", "]", ")", ":", "\n", "    ", "text", "=", "text", ".", "lower", "(", ")", "\n", "infobox_text", "=", "match_infobox", "(", "text", ")", ".", "strip", "(", ")", "\n", "body_start_pos", "=", "text", ".", "find", "(", "'\\n'", ")", "\n", "if", "body_start_pos", ">", "0", ":", "\n", "        ", "title", "=", "normalize_title", "(", "title", ")", "\n", "if", "title", "and", "infobox_text", ":", "\n", "            ", "f_out", ".", "write", "(", "u'%s\\n%s\\n%s\\n'", "%", "(", "title", ",", "infobox_text", ",", "'-'", "*", "50", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.normalize_title": [[231, 237], ["re.search", "re.sub", "re.sub.lower", "re.search.start", "re.search.end"], "function", ["None"], ["", "", "", "def", "normalize_title", "(", "title", ")", ":", "\n", "    ", "result", "=", "re", ".", "search", "(", "'( )+\\(.+\\)$'", ",", "title", ")", "\n", "if", "result", ":", "\n", "        ", "title", "=", "'%s_%s'", "%", "(", "title", "[", ":", "result", ".", "start", "(", "1", ")", "]", ",", "title", "[", "result", ".", "end", "(", "1", ")", ":", "]", ")", "\n", "", "title", "=", "re", ".", "sub", "(", "'[ ]+'", ",", "'_'", ",", "title", ")", "\n", "return", "title", ".", "lower", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.do_general_dump": [[239, 241], ["xml.sax.parse", "wikidump.WikiPageHandler"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.Template.parse"], ["", "def", "do_general_dump", "(", "in_path", ",", "dump_func", ")", ":", "\n", "    ", "xml", ".", "sax", ".", "parse", "(", "in_path", ",", "WikiPageHandler", "(", "dump_func", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.main": [[243, 255], ["wikidump.dump_json", "os.path.isdir", "ValueError", "codecs.open", "wikidump.WikiFilter", "wikidump.do_general_dump", "functools.partial", "wikidump.do_general_dump", "functools.partial"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.dump_json", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.WikiExtractor.OutputSplitter.open", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.do_general_dump", "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.wikidump.do_general_dump"], ["", "def", "main", "(", "args", ",", "f_in", ",", "out_path", ")", ":", "\n", "    ", "if", "args", ".", "dump_json", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "out_path", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"With the selected options, the out path must be a directory.\"", ")", "\n", "", "dump_json", "(", "f_in", ",", "out_path", ")", "\n", "", "else", ":", "\n", "        ", "with", "codecs", ".", "open", "(", "out_path", ",", "'w'", ",", "'utf-8'", ")", "as", "f_out", ":", "\n", "            ", "wiki_filter", "=", "WikiFilter", "(", ")", "\n", "if", "args", ".", "dump_revision", ":", "\n", "                ", "do_general_dump", "(", "f_in", ",", "functools", ".", "partial", "(", "write_revision", ",", "wiki_filter", ",", "f_out", ")", ")", "\n", "", "elif", "args", ".", "dump_infobox", ":", "\n", "                ", "do_general_dump", "(", "f_in", ",", "functools", ".", "partial", "(", "dump_infobox", ",", "f_out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.util.make_excl": [[13, 20], ["set", "tb.tagged_words", "set.add"], "function", ["None"], ["def", "make_excl", "(", ")", ":", "\n", "    ", "excl_words", "=", "set", "(", ")", "\n", "tb", "=", "nltk", ".", "corpus", ".", "treebank", "\n", "for", "word", ",", "tag", "in", "tb", ".", "tagged_words", "(", ")", ":", "\n", "        ", "if", "tag", "[", "0", "]", "!=", "'N'", ":", "\n", "            ", "excl_words", ".", "add", "(", "word", ")", "\n", "", "", "return", "excl_words", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.util.grouper": [[21, 24], ["itertools.izip_longest", "iter"], "function", ["None"], ["", "def", "grouper", "(", "iterable", ",", "n", ",", "fillvalue", "=", "None", ")", ":", "\n", "    ", "args", "=", "[", "iter", "(", "iterable", ")", "]", "*", "n", "\n", "return", "izip_longest", "(", "*", "args", ",", "fillvalue", "=", "fillvalue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.util.sexp2nx": [[26, 28], ["util.sexp2nx_"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.util.sexp2nx_"], ["", "def", "sexp2nx", "(", "parsetree", ")", ":", "\n", "    ", "return", "sexp2nx_", "(", "parsetree", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.util.sexp2nx_": [[29, 61], ["isinstance", "networkx.DiGraph", "isinstance", "nx.DiGraph.add_node", "enumerate", "isinstance", "nx.DiGraph.add_node", "nx.DiGraph.add_edge", "parsetree[].value", "nx.DiGraph.add_edge", "util.sexp2nx_", "parsetree.value"], "function", ["home.repos.pwc.inspect_result.aemami1_KnowRef.sources.util.sexp2nx_"], ["", "def", "sexp2nx_", "(", "parsetree", ",", "g", "=", "None", ",", "parent", "=", "None", ",", "leaf_idx", "=", "0", ",", "node_idx", "=", "0", ")", ":", "\n", "# convert a s-expression to a NetworkX graph", "\n", "    ", "if", "g", "is", "None", ":", "\n", "        ", "g", "=", "nx", ".", "DiGraph", "(", ")", "\n", "\n", "", "if", "isinstance", "(", "parsetree", ",", "list", ")", ":", "\n", "        ", "label", "=", "parsetree", "[", "0", "]", "\n", "if", "isinstance", "(", "parsetree", "[", "0", "]", ",", "sexpdata", ".", "Symbol", ")", ":", "\n", "            ", "label", "=", "parsetree", "[", "0", "]", ".", "value", "(", ")", "\n", "", "g", ".", "add_node", "(", "node_idx", ",", "label", "=", "label", ",", "is_leaf", "=", "False", ",", "left_leaf_idx", "=", "leaf_idx", ",", "right_leaf_idx", "=", "leaf_idx", "+", "1", ")", "\n", "if", "parent", "is", "not", "None", ":", "\n", "            ", "g", ".", "add_edge", "(", "parent", ",", "node_idx", ")", "\n", "\n", "", "head_node", "=", "node_idx", "\n", "node_idx", "+=", "1", "\n", "\n", "for", "idx", ",", "node", "in", "enumerate", "(", "parsetree", "[", "1", ":", "]", ")", ":", "\n", "            ", "_", ",", "leaf_idx", ",", "node_idx", "=", "sexp2nx_", "(", "node", ",", "g", ",", "head_node", ",", "leaf_idx", ",", "node_idx", ")", "\n", "", "g", ".", "node", "[", "head_node", "]", "[", "'right_leaf_idx'", "]", "=", "leaf_idx", "# last index is this minus one!", "\n", "", "else", ":", "\n", "# we're given an instance of 'Symbol'", "\n", "        ", "label", "=", "parsetree", "\n", "if", "isinstance", "(", "parsetree", ",", "sexpdata", ".", "Symbol", ")", ":", "\n", "            ", "label", "=", "parsetree", ".", "value", "(", ")", "\n", "", "g", ".", "add_node", "(", "node_idx", ",", "label", "=", "label", ",", "is_leaf", "=", "True", ",", "leaf_idx", "=", "leaf_idx", ",", "\n", "left_leaf_idx", "=", "leaf_idx", ",", "right_leaf_idx", "=", "leaf_idx", "+", "1", ")", "\n", "g", ".", "add_edge", "(", "parent", ",", "node_idx", ")", "\n", "\n", "node_idx", "+=", "1", "\n", "leaf_idx", "+=", "1", "\n", "\n", "", "return", "g", ",", "leaf_idx", ",", "node_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.aemami1_KnowRef.sources.util.gender_features": [[65, 67], ["None"], "function", ["None"], ["def", "gender_features", "(", "word", ")", ":", "\n", "    ", "return", "{", "'last_letter'", ":", "word", "[", "-", "1", "]", "}", "\n", "\n"]]}