{"home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.word_embed.get_vocab": [[10, 27], ["set", "set", "open", "ujson.load", "set.update", "line.get", "set.update", "list", "list", "set.update", "set.update"], "function", ["None"], ["def", "get_vocab", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "df", "=", "ujson", ".", "load", "(", "f", ")", "\n", "", "vocab_set", "=", "set", "(", ")", "\n", "pos_set", "=", "set", "(", ")", "\n", "for", "line", "in", "df", ":", "\n", "        ", "tokens", "=", "line", "[", "'tokens'", "]", "\n", "vocab_set", ".", "update", "(", "tokens", ")", "\n", "if", "'ltokens'", "in", "line", ":", "\n", "            ", "ltokens", "=", "line", "[", "'ltokens'", "]", "\n", "vocab_set", ".", "update", "(", "ltokens", ")", "\n", "", "if", "'rtokens'", "in", "line", ":", "\n", "            ", "rtokens", "=", "line", "[", "'rtokens'", "]", "\n", "vocab_set", ".", "update", "(", "rtokens", ")", "\n", "", "pos", "=", "line", ".", "get", "(", "'pos'", ",", "[", "]", ")", "\n", "pos_set", ".", "update", "(", "pos", ")", "\n", "", "return", "list", "(", "vocab_set", ")", ",", "list", "(", "pos_set", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.word_embed.generate_vocab_embed": [[28, 97], ["set", "set", "set", "print", "print", "print", "sorted", "sorted.extend", "sorted", "sorted.extend", "sorted", "sorted.extend", "word_embed.get_vocab", "sorted.update", "sorted.update", "sorted.update", "list", "list", "list", "open", "ujson.dump", "open", "ujson.dump", "open", "ujson.dump", "fasttext.load_model", "word_embed.load_txt_embed", "word_embed.append", "word_embed.append", "len", "word_embed.append", "word_embed.append", "[].split", "open", "numpy.save", "load_txt_embed.get_word_vector", "numpy.random.randn", "numpy.zeros_like", "load_txt_embed.get", "numpy.random.randn", "numpy.zeros_like", "numpy.array", "len", "len", "len", "tqdm.tqdm", "len", "load_txt_embed.get", "tqdm.tqdm", "len", "enumerate", "enumerate", "enumerate", "word.lower", "numpy.random.randn", "embedding.split"], "function", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.word_embed.get_vocab", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.word_embed.load_txt_embed"], ["", "def", "generate_vocab_embed", "(", "dataset", ",", "embedding", "=", "None", ",", "embedding_type", "=", "\"fasttext\"", ")", ":", "\n", "    ", "if", "dataset", "==", "\"ace05\"", ":", "\n", "        ", "file_list", "=", "[", "\"./data/ace05/ace05_train_context.json\"", ",", "\n", "\"./data/ace05/ace05_dev_context.json\"", ",", "\n", "\"./data/ace05/ace05_test_context.json\"", "]", "\n", "", "if", "dataset", "==", "\"ace04\"", ":", "\n", "        ", "file_list", "=", "[", "\"./data/ace04/ace04_train_context.json\"", ",", "\n", "\"./data/ace04/ace04_dev_context.json\"", ",", "\n", "\"./data/ace04/ace04_test_context.json\"", "]", "\n", "", "if", "dataset", "==", "\"genia91\"", ":", "\n", "        ", "file_list", "=", "[", "\"./data/genia91/genia_train_dev_context.json\"", ",", "\n", "\"./data/genia91/genia_test_context.json\"", "]", "\n", "", "if", "dataset", "==", "\"kbp\"", ":", "\n", "        ", "file_list", "=", "[", "\"./data/kbp/train_context.json\"", ",", "\n", "\"./data/kbp/dev_context.json\"", ",", "\n", "\"./data/kbp/test_context.json\"", "]", "\n", "# file_list = [f\"data/{dataset}/{mode}_sample.json\" for mode in [\"train\", \"dev\", \"test\"]]", "\n", "\n", "", "vocab", "=", "set", "(", ")", "\n", "char_vocab", "=", "set", "(", ")", "\n", "pos_vocab", "=", "set", "(", ")", "\n", "for", "file", "in", "file_list", ":", "\n", "        ", "words", ",", "poss", "=", "get_vocab", "(", "file", ")", "\n", "vocab", ".", "update", "(", "words", ")", "\n", "pos_vocab", ".", "update", "(", "poss", ")", "\n", "\n", "", "for", "word", "in", "vocab", ":", "\n", "        ", "char_vocab", ".", "update", "(", "word", ")", "\n", "\n", "", "print", "(", "f'Vocab count: {len(vocab)}'", ")", "\n", "print", "(", "f'Char vocab count: {len(char_vocab)}'", ")", "\n", "print", "(", "f'POS vocab count: {len(pos_vocab)}'", ")", "\n", "\n", "vocab", "=", "sorted", "(", "list", "(", "vocab", ")", ")", "\n", "vocab", ".", "extend", "(", "[", "'[UNK]'", ",", "'[PAD]'", "]", ")", "\n", "char_vocab", "=", "sorted", "(", "list", "(", "char_vocab", ")", ")", "\n", "char_vocab", ".", "extend", "(", "[", "'[UNK]'", ",", "'[PAD]'", "]", ")", "\n", "pos_vocab", "=", "sorted", "(", "list", "(", "pos_vocab", ")", ")", "\n", "pos_vocab", ".", "extend", "(", "[", "'[UNK]'", ",", "'[PAD]'", "]", ")", "\n", "\n", "with", "open", "(", "f\"./data/{dataset}/word2id.json\"", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "ujson", ".", "dump", "(", "{", "word", ":", "idx", "for", "idx", ",", "word", "in", "enumerate", "(", "vocab", ")", "}", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "with", "open", "(", "f\"./data/{dataset}/char2id.json\"", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "ujson", ".", "dump", "(", "{", "char", ":", "idx", "for", "idx", ",", "char", "in", "enumerate", "(", "char_vocab", ")", "}", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "with", "open", "(", "f\"./data/{dataset}/pos2id.json\"", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "ujson", ".", "dump", "(", "{", "pos", ":", "idx", "for", "idx", ",", "pos", "in", "enumerate", "(", "pos_vocab", ")", "}", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n", "", "if", "embedding_type", "==", "\"fasttext\"", ":", "\n", "        ", "model", "=", "fasttext", ".", "load_model", "(", "embedding", ")", "\n", "", "if", "embedding_type", "==", "\"txt\"", ":", "\n", "        ", "model", "=", "load_txt_embed", "(", "embedding", ")", "\n", "# if embedding_type == \"model\":", "\n", "#     model = gensim.models.Word2Vec.load(embedding)", "\n", "# if embedding_type == \"bin\":", "\n", "#     model = gensim.models.KeyedVectors.load_word2vec_format(embedding, binary=True)", "\n", "\n", "", "if", "embedding_type", "==", "\"fasttext\"", ":", "\n", "        ", "word_embed", "=", "[", "model", ".", "get_word_vector", "(", "word", ")", "for", "word", "in", "tqdm", "(", "vocab", "[", "0", ":", "-", "2", "]", ")", "]", "\n", "word_embed", ".", "append", "(", "np", ".", "random", ".", "randn", "(", "len", "(", "word_embed", "[", "0", "]", ")", ")", ")", "\n", "word_embed", ".", "append", "(", "np", ".", "zeros_like", "(", "word_embed", "[", "0", "]", ")", ")", "\n", "", "if", "embedding_type", "==", "\"txt\"", ":", "\n", "        ", "dim", "=", "len", "(", "model", "[", "'the'", "]", ")", "\n", "word_embed", "=", "[", "model", ".", "get", "(", "word", ",", "model", ".", "get", "(", "word", ".", "lower", "(", ")", ",", "np", ".", "random", ".", "randn", "(", "dim", ")", ")", ")", "for", "word", "in", "tqdm", "(", "vocab", "[", "0", ":", "-", "2", "]", ")", "]", "\n", "word_embed", ".", "append", "(", "np", ".", "random", ".", "randn", "(", "len", "(", "word_embed", "[", "0", "]", ")", ")", ")", "\n", "word_embed", ".", "append", "(", "np", ".", "zeros_like", "(", "word_embed", "[", "0", "]", ")", ")", "\n", "\n", "", "embedding_name", "=", "embedding", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "with", "open", "(", "f\"./data/{dataset}/{embedding_name}.npy\"", ",", "\"wb\"", ")", "as", "ff", ":", "\n", "        ", "np", ".", "save", "(", "ff", ",", "np", ".", "array", "(", "word_embed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.word_embed.load_txt_embed": [[98, 110], ["open", "f.readlines", "line.split", "numpy.array", "len", "float"], "function", ["None"], ["", "", "def", "load_txt_embed", "(", "embedding_path", ")", ":", "\n", "    ", "model", "=", "{", "}", "\n", "with", "open", "(", "embedding_path", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "for", "line", "in", "lines", ":", "\n", "        ", "sp_line", "=", "line", ".", "split", "(", ")", "\n", "if", "len", "(", "sp_line", ")", "==", "2", ":", "\n", "            ", "continue", "\n", "", "name", "=", "sp_line", "[", "0", "]", "\n", "emb", "=", "[", "float", "(", "x", ")", "for", "x", "in", "sp_line", "[", "1", ":", "]", "]", "\n", "model", "[", "name", "]", "=", "np", ".", "array", "(", "emb", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.main.seed_worker": [[26, 30], ["numpy.random.seed", "random.seed", "torch.initial_seed"], "function", ["None"], ["def", "seed_worker", "(", "worker_id", ")", ":", "\n", "    ", "worker_seed", "=", "torch", ".", "initial_seed", "(", ")", "%", "2", "**", "32", "\n", "numpy", ".", "random", ".", "seed", "(", "worker_seed", ")", "\n", "random", ".", "seed", "(", "worker_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.main.run": [[32, 193], ["train_utils.generate_output_folder_name", "print", "tensorboardX.SummaryWriter", "os.path.join", "os.path.exists", "data_util.NestedNERDataset", "data_util.NestedNERDataset", "data_util.NestedNERDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "train_parser.generate_config", "train_parser.generate_loss_config", "train_utils.generate_optimizer_scheduler", "range", "print", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.system", "print", "torch.load().to", "evaluation.decode", "evaluation.decode", "evaluation.write_predict", "evaluation.write_predict", "torch.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed", "print", "sys.exit", "os.system", "os.system", "model.span.SpanModel().to", "model.span_att_v2.SpanAttModelV3().to", "len", "torch_ema.ExponentialMovingAverage", "main.train_one_epoch", "print", "print", "open", "f.write", "f.write", "f.write", "os.system", "torch.load().to", "os.path.join", "os.path.join", "SpanAttModelV3().to.parameters", "open", "f.write", "f.write", "f.write", "torch.save", "print", "str", "str", "os.path.join", "torch.load", "train_utils.main_name", "train_utils.main_name", "train_utils.main_name", "model.span.SpanModel", "model.span_att_v2.SpanAttModelV3", "str", "str", "os.path.join", "os.path.join", "torch.save", "torch.save", "torch.load", "len", "len", "os.path.join", "os.path.join", "torch.save", "torch.save", "str", "str", "str", "str", "os.path.join", "os.path.join", "torch.save", "os.path.join", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.generate_output_folder_name", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_parser.generate_config", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_parser.generate_loss_config", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.generate_optimizer_scheduler", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.decode", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.decode", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.write_predict", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.write_predict", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.main.train_one_epoch", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.main_name", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.main_name", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.main_name"], ["", "def", "run", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "seed", "!=", "-", "1", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "output_basename", "=", "generate_output_folder_name", "(", "args", ")", "\n", "print", "(", "output_basename", ")", "\n", "writer", "=", "SummaryWriter", "(", "comment", "=", "output_basename", "[", "0", ":", "200", "]", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_base_dir", ",", "output_basename", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "f'{output_path}/metric_log'", ")", ":", "\n", "        ", "print", "(", "'Metric Log exists.'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "try", ":", "\n", "        ", "os", ".", "system", "(", "f\"mkdir -p {output_path}\"", ")", "\n", "", "except", "BaseException", ":", "\n", "        ", "pass", "\n", "\n", "", "try", ":", "\n", "        ", "os", ".", "system", "(", "f\"rm -rf {output_path}/metric_log\"", ")", "\n", "", "except", "BaseException", ":", "\n", "        ", "pass", "\n", "\n", "", "if", "args", ".", "model", "in", "[", "\"SpanModel\"", "]", ":", "\n", "        ", "args", ".", "schema", "=", "\"span\"", "\n", "", "if", "args", ".", "model", "in", "[", "\"DETR\"", "]", ":", "\n", "        ", "args", ".", "schema", "=", "\"DETR\"", "\n", "", "if", "args", ".", "model", "in", "[", "\"DETRSeq\"", "]", ":", "\n", "        ", "args", ".", "schema", "=", "\"DETRSeq\"", "\n", "", "if", "args", ".", "model", "in", "[", "\"OneStageSpan\"", ",", "\"TwoStageSpan\"", "]", ":", "\n", "        ", "args", ".", "schema", "=", "\"softspan\"", "\n", "\n", "", "if", "args", ".", "freeze_bert", ":", "\n", "        ", "if", "args", ".", "use_context", ":", "\n", "            ", "con", "=", "\"_context\"", "\n", "", "else", ":", "\n", "            ", "con", "=", "\"\"", "\n", "", "train_bert_embed", "=", "f'./data/{args.version}/{main_name(args.bert_name_or_path)}_train_{args.truncate_length}{con}.hdf5'", "\n", "dev_bert_embed", "=", "f'./data/{args.version}/{main_name(args.bert_name_or_path)}_dev_{args.truncate_length}{con}.hdf5'", "\n", "test_bert_embed", "=", "f'./data/{args.version}/{main_name(args.bert_name_or_path)}_test_{args.truncate_length}{con}.hdf5'", "\n", "", "else", ":", "\n", "        ", "train_bert_embed", "=", "None", "\n", "dev_bert_embed", "=", "None", "\n", "test_bert_embed", "=", "None", "\n", "\n", "", "train_dataset", "=", "NestedNERDataset", "(", "args", ".", "version", ",", "'train'", ",", "args", ".", "bert_name_or_path", ",", "args", ".", "truncate_length", ",", "args", ".", "schema", ",", "args", ".", "use_context", ",", "args", ".", "token_schema", ",", "args", ".", "soft_iou", ",", "bert_embed", "=", "train_bert_embed", ")", "\n", "dev_dataset", "=", "NestedNERDataset", "(", "args", ".", "version", ",", "'dev'", ",", "args", ".", "bert_name_or_path", ",", "args", ".", "truncate_length", ",", "args", ".", "schema", ",", "args", ".", "use_context", ",", "args", ".", "token_schema", ",", "args", ".", "soft_iou", ",", "bert_embed", "=", "dev_bert_embed", ")", "\n", "test_dataset", "=", "NestedNERDataset", "(", "args", ".", "version", ",", "'test'", ",", "args", ".", "bert_name_or_path", ",", "args", ".", "truncate_length", ",", "args", ".", "schema", ",", "args", ".", "use_context", ",", "args", ".", "token_schema", ",", "args", ".", "soft_iou", ",", "bert_embed", "=", "test_bert_embed", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "collate_fn", "=", "my_collate_fn", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ")", "\n", "dev_dataloader", "=", "DataLoader", "(", "dev_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "collate_fn", "=", "my_collate_fn", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "collate_fn", "=", "my_collate_fn", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "encoder_config_dict", "=", "generate_config", "(", "args", ")", "\n", "loss_config_dict", "=", "generate_loss_config", "(", "args", ")", "\n", "\n", "score_setting", "=", "{", "args", ".", "score", ":", "True", "}", "\n", "if", "args", ".", "no_linear_class", ":", "\n", "        ", "score_setting", "[", "'no_linear_class'", "]", "=", "True", "\n", "", "if", "args", ".", "type_attention", ":", "\n", "        ", "score_setting", "[", "'type_attention'", "]", "=", "True", "\n", "", "score_setting", "[", "'dp'", "]", "=", "args", ".", "dp", "\n", "score_setting", "[", "'att_dim'", "]", "=", "args", ".", "att_dim", "\n", "score_setting", "[", "'no_tri_mask'", "]", "=", "args", ".", "no_tri_mask", "\n", "score_setting", "[", "'reduce_last'", "]", "=", "args", ".", "reduce_last", "\n", "score_setting", "[", "'scale'", "]", "=", "args", ".", "scale", "\n", "score_setting", "[", "'init_std'", "]", "=", "args", ".", "init_std", "\n", "score_setting", "[", "'layer_norm'", "]", "=", "args", ".", "layer_norm", "\n", "score_setting", "[", "'rel_pos_attn'", "]", "=", "args", ".", "rel_pos_attn", "\n", "score_setting", "[", "'rel_pos'", "]", "=", "args", ".", "rel_pos", "\n", "score_setting", "[", "'rel_k'", "]", "=", "args", ".", "rel_k", "\n", "\n", "\n", "if", "args", ".", "model", "==", "\"SpanModel\"", ":", "\n", "        ", "model", "=", "SpanModel", "(", "args", ".", "bert_name_or_path", ",", "encoder_config_dict", ",", "\n", "len", "(", "train_dataset", ".", "type2id", ")", ",", "score_setting", ",", "\n", "loss_config", "=", "loss_config_dict", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "", "if", "args", ".", "model", "==", "\"SpanAttModelV3\"", ":", "\n", "        ", "model", "=", "SpanAttModelV3", "(", "args", ".", "bert_name_or_path", ",", "encoder_config_dict", ",", "\n", "len", "(", "train_dataset", ".", "type2id", ")", ",", "score_setting", ",", "\n", "loss_config", "=", "loss_config_dict", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "", "optimizer", ",", "scheduler", "=", "generate_optimizer_scheduler", "(", "args", ",", "model", ",", "len", "(", "train_dataloader", ")", ")", "\n", "\n", "if", "args", ".", "ema", ">", "0.", ":", "\n", "        ", "ema", "=", "ExponentialMovingAverage", "(", "model", ".", "parameters", "(", ")", ",", "decay", "=", "args", ".", "ema", ")", "\n", "", "else", ":", "\n", "        ", "ema", "=", "None", "\n", "\n", "", "steps", "=", "0", "\n", "best_dev_metric", "=", "None", "\n", "best_test_metric", "=", "None", "\n", "early_stop_count", "=", "0", "\n", "best_epoch_idx", "=", "0", "\n", "\n", "for", "epoch_idx", "in", "range", "(", "1", ",", "args", ".", "train_epoch", "+", "1", ")", ":", "\n", "        ", "epoch_dev_metric", ",", "epoch_test_metric", ",", "steps", "=", "train_one_epoch", "(", "model", ",", "steps", ",", "train_dataloader", ",", "dev_dataloader", ",", "test_dataloader", ",", "optimizer", ",", "scheduler", ",", "writer", ",", "args", ",", "epoch_idx", ",", "ema", ")", "\n", "\n", "print", "(", "'Dev_Epoch'", "+", "str", "(", "epoch_idx", ")", ",", "epoch_dev_metric", ")", "\n", "print", "(", "'Test_Epoch'", "+", "str", "(", "epoch_idx", ")", ",", "epoch_test_metric", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "'metric_log'", ")", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "'---\\n'", ")", "\n", "f", ".", "write", "(", "'Dev_Epoch'", "+", "str", "(", "epoch_idx", ")", "+", "' '", "+", "str", "(", "epoch_dev_metric", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "'Test_Epoch'", "+", "str", "(", "epoch_idx", ")", "+", "' '", "+", "str", "(", "epoch_test_metric", ")", "+", "\"\\n\"", ")", "\n", "\n", "# Early Stop", "\n", "", "if", "best_dev_metric", "is", "None", ":", "\n", "            ", "best_dev_metric", "=", "epoch_dev_metric", "\n", "best_test_metric", "=", "epoch_test_metric", "\n", "best_epoch_idx", "=", "epoch_idx", "\n", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "f\"epoch{epoch_idx}.pth\"", ")", ")", "\n", "if", "ema", "is", "not", "None", ":", "\n", "                ", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "f\"ema{epoch_idx}.pth\"", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "epoch_dev_metric", "[", "'f1'", "]", ">=", "best_dev_metric", "[", "'f1'", "]", ":", "\n", "                ", "best_dev_metric", "=", "epoch_dev_metric", "\n", "best_test_metric", "=", "epoch_test_metric", "\n", "best_epoch_idx", "=", "epoch_idx", "\n", "early_stop_count", "=", "0", "\n", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "f\"epoch{epoch_idx}.pth\"", ")", ")", "\n", "if", "ema", "is", "not", "None", ":", "\n", "                    ", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "f\"ema{epoch_idx}.pth\"", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "args", ".", "save_every_epoch", ":", "\n", "                    ", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "f\"epoch{epoch_idx}.pth\"", ")", ")", "\n", "if", "ema", "is", "not", "None", ":", "\n", "                        ", "torch", ".", "save", "(", "model", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "f\"ema{epoch_idx}.pth\"", ")", ")", "\n", "", "", "early_stop_count", "+=", "1", "\n", "\n", "", "", "if", "args", ".", "early_stop_epoch", ">", "0", "and", "early_stop_count", ">=", "args", ".", "early_stop_epoch", ":", "\n", "            ", "print", "(", "f\"Early Stop at Epoch {epoch_idx}, \\\n                    F1 does not improve on dev set for {early_stop_count} epoch.\"", ")", "\n", "break", "\n", "\n", "", "", "print", "(", "'Best_Dev_Epoch'", "+", "str", "(", "best_epoch_idx", ")", ",", "best_dev_metric", ")", "\n", "print", "(", "'Best_Test_Epoch'", "+", "str", "(", "best_epoch_idx", ")", ",", "best_test_metric", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output_path", ",", "'metric_log'", ")", ",", "'a+'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "'---\\n'", ")", "\n", "f", ".", "write", "(", "'Best_Dev_Epoch'", "+", "str", "(", "best_epoch_idx", ")", "+", "' '", "+", "str", "(", "best_dev_metric", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "'Best_Test_Epoch'", "+", "str", "(", "best_epoch_idx", ")", "+", "' '", "+", "str", "(", "best_test_metric", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "best_path", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "f\"epoch{best_epoch_idx}.pth\"", ")", "\n", "best_ema", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "f\"ema{best_epoch_idx}.pth\"", ")", "\n", "new_path", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "\"best_epoch.pth\"", ")", "\n", "new_ema_path", "=", "os", ".", "path", ".", "join", "(", "output_path", ",", "\"best_ema.pth\"", ")", "\n", "os", ".", "system", "(", "f'cp {best_path} {new_path}'", ")", "\n", "if", "ema", "is", "not", "None", ":", "\n", "        ", "os", ".", "system", "(", "f'cp {best_ema} {new_ema_path}'", ")", "\n", "\n", "# predict using best epoch", "\n", "", "print", "(", "'Predict dev and test dataset using best checkpoint'", ")", "\n", "model", "=", "torch", ".", "load", "(", "best_path", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "ema", "is", "not", "None", ":", "\n", "        ", "ema", "=", "torch", ".", "load", "(", "best_ema", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "", "dev_strict", ",", "dev_relax", "=", "decode", "(", "dev_dataloader", ",", "model", ",", "args", ",", "ema", ")", "\n", "test_strict", ",", "test_relax", "=", "decode", "(", "test_dataloader", ",", "model", ",", "args", ",", "ema", ")", "\n", "\n", "write_predict", "(", "dev_strict", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "'dev_predict.txt'", ")", ")", "\n", "write_predict", "(", "test_strict", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "'test_predict.txt'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.main.train_one_epoch": [[195, 254], ["train_utils.generate_output_folder_name", "os.path.join", "model.train", "tqdm.tqdm", "enumerate", "evaluation.decode", "evaluation.write_predict", "evaluation.decode", "evaluation.write_predict", "evaluation.metric", "evaluation.metric", "hasattr", "input_util.prepare_input", "model", "float", "writer.add_scalar", "model.backward", "tqdm.tqdm.set_description", "os.path.join", "os.path.join", "evaluation.write_predict", "evaluation.write_predict", "writer.add_scalar", "writer.add_scalar", "train_utils.weight_scheduler", "print", "model.item", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "model.zero_grad", "evaluation.metric", "os.path.join", "evaluation.metric", "os.path.join", "model.parameters", "scheduler.step", "ema.update"], "function", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.generate_output_folder_name", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.decode", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.write_predict", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.decode", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.write_predict", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.metric", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.metric", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.input_util.prepare_input", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.write_predict", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.write_predict", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.weight_scheduler", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.metric", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.metric"], ["", "def", "train_one_epoch", "(", "model", ",", "steps", ",", "train_dataloader", ",", "dev_dataloader", ",", "test_dataloader", ",", "optimizer", ",", "scheduler", ",", "writer", ",", "args", ",", "epoch_idx", ",", "ema", ")", ":", "\n", "    ", "output_basename", "=", "generate_output_folder_name", "(", "args", ")", "\n", "output_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_base_dir", ",", "output_basename", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "epoch_loss", "=", "0.", "\n", "\n", "if", "args", ".", "weight_scheduler", "!=", "\"none\"", ":", "\n", "        ", "if", "hasattr", "(", "model", ",", "'class_loss_weight'", ")", ":", "\n", "            ", "w", "=", "weight_scheduler", "(", "epoch_idx", ",", "args", "=", "args", ",", "method", "=", "args", ".", "weight_scheduler", ")", "\n", "print", "(", "f'Set class loss weight {epoch_idx}/{args.train_epoch}:{w}'", ")", "\n", "model", ".", "class_loss_weight", "=", "w", "\n", "\n", "", "", "epoch_iterator", "=", "tqdm", "(", "train_dataloader", ",", "desc", "=", "\"Iteration\"", ",", "ascii", "=", "True", ")", "\n", "for", "batch_idx", ",", "batch", "in", "enumerate", "(", "epoch_iterator", ")", ":", "\n", "        ", "inputs", "=", "prepare_input", "(", "batch", ",", "args", ")", "\n", "loss", "=", "model", "(", "**", "inputs", ")", "\n", "\n", "batch_loss", "=", "float", "(", "loss", ".", "item", "(", ")", ")", "\n", "epoch_loss", "+=", "batch_loss", "\n", "\n", "writer", ".", "add_scalar", "(", "'batch_loss'", ",", "batch_loss", ")", "\n", "\n", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "            ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "epoch_iterator", ".", "set_description", "(", "\"Epoch_loss: %0.4f, Batch_loss: %0.4f\"", "%", "(", "epoch_loss", "/", "(", "batch_idx", "+", "1", ")", ",", "batch_loss", ")", ")", "\n", "\n", "if", "(", "steps", "+", "1", ")", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "            ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "model", ".", "parameters", "(", ")", ",", "args", ".", "max_grad_norm", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "scheduler", "is", "not", "None", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "", "if", "ema", "is", "not", "None", ":", "\n", "                ", "ema", ".", "update", "(", ")", "\n", "", "model", ".", "zero_grad", "(", ")", "\n", "", "steps", "+=", "1", "\n", "\n", "", "dev_strict", ",", "dev_relax", "=", "decode", "(", "dev_dataloader", ",", "model", ",", "args", ",", "ema", ")", "\n", "write_predict", "(", "dev_strict", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "f'dev_{epoch_idx}_predict.txt'", ")", ")", "\n", "test_strict", ",", "test_relax", "=", "decode", "(", "test_dataloader", ",", "model", ",", "args", ",", "ema", ")", "\n", "write_predict", "(", "test_strict", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "f'test_{epoch_idx}_predict.txt'", ")", ")", "\n", "dev_metric", "=", "metric", "(", "dev_dataloader", ".", "dataset", ",", "dev_strict", ")", "\n", "if", "dev_relax", ":", "\n", "        ", "dev_metric", "=", "{", "**", "dev_metric", ",", "**", "metric", "(", "dev_dataloader", ".", "dataset", ",", "dev_relax", ",", "\"relax\"", ")", "}", "\n", "write_predict", "(", "dev_relax", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "f'dev_{epoch_idx}_relax_predict.txt'", ")", ")", "\n", "", "test_metric", "=", "metric", "(", "test_dataloader", ".", "dataset", ",", "test_strict", ")", "\n", "if", "test_relax", ":", "\n", "        ", "test_metric", "=", "{", "**", "test_metric", ",", "**", "metric", "(", "test_dataloader", ".", "dataset", ",", "test_relax", ",", "\"relax\"", ")", "}", "\n", "write_predict", "(", "test_relax", ",", "os", ".", "path", ".", "join", "(", "output_path", ",", "f'test_{epoch_idx}_relax_predict.txt'", ")", ")", "\n", "\n", "", "for", "key", "in", "dev_metric", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'dev_'", "+", "key", ",", "dev_metric", "[", "key", "]", ")", "\n", "", "for", "key", "in", "test_metric", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "'test_'", "+", "key", ",", "test_metric", "[", "key", "]", ")", "\n", "\n", "", "return", "dev_metric", ",", "test_metric", ",", "steps", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.main.main": [[256, 260], ["train_parser.generate_parser", "train_parser.generate_parser.parse_args", "main.run"], "function", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_parser.generate_parser", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.main.run"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "generate_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "run", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.span_utils.neg_step": [[4, 13], ["label.size", "torch.tril().bool", "torch.bitwise_and().float", "torch.tril", "torch.bitwise_and", "torch.matmul", "torch.matmul", "torch.ones().to", "torch.bitwise_and().float.t", "torch.bitwise_and().float.unsqueeze", "label.float", "label.float", "torch.bitwise_and().float.unsqueeze", "torch.ones"], "function", ["None"], ["def", "neg_step", "(", "label", ",", "w", "=", "None", ")", ":", "\n", "    ", "if", "w", "is", "None", ":", "\n", "        ", "seq", "=", "label", ".", "size", "(", "1", ")", "\n", "w", "=", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "seq", ",", "seq", ")", ".", "to", "(", "\n", "label", ".", "device", ")", ",", "diagonal", "=", "1", ")", ".", "bool", "(", ")", "\n", "w", "=", "torch", ".", "bitwise_and", "(", "w", ",", "w", ".", "t", "(", ")", ")", ".", "float", "(", ")", "\n", "", "hard_negative", "=", "(", "torch", ".", "matmul", "(", "w", ".", "unsqueeze", "(", "0", ")", ",", "label", ".", "float", "(", ")", ")", "+", "\n", "torch", ".", "matmul", "(", "label", ".", "float", "(", ")", ",", "w", ".", "unsqueeze", "(", "0", ")", ")", ")", ".", "bool", "(", ")", "\n", "return", "hard_negative", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.span_utils.negative_sampling": [[15, 41], ["label.clone", "torch.max", "torch.bitwise_and", "torch.bitwise_and.sum().sum", "range", "torch.bitwise_and", "torch.rand().to", "torch.bitwise_and", "label.reshape", "label.size", "torch.tril().bool", "torch.bitwise_and().float", "span_utils.neg_step", "torch.bitwise_and.sum", "torch.rand", "torch.tril", "torch.bitwise_and", "torch.bitwise_and.size", "torch.ones().to", "torch.bitwise_and().float.t", "torch.ones", "torch.bitwise_and.sum().sum", "torch.bitwise_and.sum"], "function", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.span_utils.neg_step"], ["", "def", "negative_sampling", "(", "label", ",", "hard_neg_dist", "=", "2", ")", ":", "\n", "# label: Batch * max_word * max_word", "\n", "    ", "sampling_label", "=", "label", ".", "clone", "(", ")", "\n", "\n", "na_label", "=", "torch", ".", "max", "(", "label", ".", "reshape", "(", "-", "1", ")", ")", "\n", "positive_label", "=", "torch", ".", "bitwise_and", "(", "label", "!=", "na_label", ",", "label", ">=", "0", ")", "\n", "positive_count", "=", "positive_label", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "negative_label", "=", "label", "==", "na_label", "\n", "\n", "if", "hard_neg_dist", ">", "0", ":", "\n", "        ", "seq", "=", "label", ".", "size", "(", "1", ")", "\n", "w", "=", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "seq", ",", "seq", ")", ".", "to", "(", "\n", "label", ".", "device", ")", ",", "diagonal", "=", "1", ")", ".", "bool", "(", ")", "\n", "w", "=", "torch", ".", "bitwise_and", "(", "w", ",", "w", ".", "t", "(", ")", ")", ".", "float", "(", ")", "\n", "\n", "", "hard_negative", "=", "positive_label", "\n", "for", "_", "in", "range", "(", "hard_neg_dist", ")", ":", "\n", "        ", "hard_negative", "=", "neg_step", "(", "hard_negative", ",", "w", ")", "\n", "\n", "", "easy_negative", "=", "torch", ".", "bitwise_and", "(", "negative_label", ",", "~", "hard_negative", ")", "\n", "random_num", "=", "torch", ".", "rand", "(", "easy_negative", ".", "size", "(", ")", ")", ".", "to", "(", "label", ".", "device", ")", "\n", "sample_res", "=", "random_num", ">", "(", "\n", "positive_count", "/", "(", "1e-6", "+", "easy_negative", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "sample_easy_negative", "=", "torch", ".", "bitwise_and", "(", "easy_negative", ",", "sample_res", ")", "\n", "sampling_label", "[", "sample_easy_negative", "]", "=", "-", "100", "\n", "return", "sampling_label", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.span_utils.iou": [[43, 49], ["max", "min", "max", "min", "min", "max"], "function", ["None"], ["", "def", "iou", "(", "a", ",", "b", ")", ":", "\n", "    ", "iou", "=", "0", "\n", "if", "max", "(", "a", "[", "0", "]", ",", "b", "[", "0", "]", ")", "<", "1", "+", "min", "(", "a", "[", "1", "]", ",", "b", "[", "1", "]", ")", ":", "\n", "        ", "iou", "=", "(", "1", "+", "min", "(", "a", "[", "1", "]", ",", "b", "[", "1", "]", ")", "-", "max", "(", "a", "[", "0", "]", ",", "b", "[", "0", "]", ")", ")", "/", "(", "1", "+", "max", "(", "a", "[", "1", "]", ",", "b", "[", "1", "]", ")", "-", "min", "(", "a", "[", "0", "]", ",", "b", "[", "0", "]", ")", ")", "\n", "", "return", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.span_utils.tensor_idx_add": [[50, 65], ["src.size", "src.reshape", "src.reshape", "torch.LongTensor().to().unsqueeze", "torch.LongTensor().to().unsqueeze.append", "torch.LongTensor().to", "torch.LongTensor"], "function", ["None"], ["", "def", "tensor_idx_add", "(", "src", ",", "idx", ",", "value", "=", "1", ",", "coef", "=", "None", ")", ":", "\n", "    ", "'''\n    src: any shape\n    idx: n * len(src.size())\n    '''", "\n", "sz", "=", "src", ".", "size", "(", ")", "\n", "if", "coef", "is", "None", ":", "\n", "        ", "coef", "=", "[", "1", "]", "\n", "for", "s", "in", "sz", "[", ":", ":", "-", "1", "]", ":", "\n", "            ", "coef", ".", "append", "(", "s", "*", "coef", "[", "-", "1", "]", ")", "\n", "", "coef", "=", "torch", ".", "LongTensor", "(", "coef", "[", "0", ":", "-", "1", "]", "[", ":", ":", "-", "1", "]", ")", ".", "to", "(", "src", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "# src.size() # .repeat(idx.size(0),1)", "\n", "", "new_src", "=", "(", "idx", "*", "coef", ")", ".", "sum", "(", "-", "1", ")", "\n", "select_src", "=", "src", ".", "reshape", "(", "-", "1", ")", "\n", "select_src", "[", "new_src", "]", "+=", "value", "\n", "return", "src", ".", "reshape", "(", "sz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_parser.generate_parser": [[4, 149], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "generate_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--version\"", ",", "type", "=", "str", ",", "default", "=", "\"genia\"", ",", "\n", "choices", "=", "[", "\"ace05\"", ",", "\"ace04\"", ",", "\"genia91\"", ",", "\"kbp\"", "]", ",", "\n", "help", "=", "\"Dataset version.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "\"SpanModel\"", ",", "\n", "choices", "=", "[", "\"SpanModel\"", ",", "\"SpanAttModelV3\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--schema\"", ",", "type", "=", "str", ",", "default", "=", "\"span\"", ",", "\n", "choices", "=", "[", "\"span\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--soft_iou\"", ",", "type", "=", "float", ",", "default", "=", "0.7", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--token_schema\"", ",", "type", "=", "str", ",", "default", "=", "\"BE\"", ",", "\n", "choices", "=", "[", "'BE'", ",", "'BIE'", ",", "'BIES'", ",", "'BE-type'", ",", "'BIE-type'", ",", "'BIES-type'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--token_aux\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--token_aux_weight\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--trans_aux\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--trans_aux_weight\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--score\"", ",", "type", "=", "str", ",", "default", "=", "\"biaffine\"", ",", "\n", "choices", "=", "[", "'biaffine'", ",", "'tri_attention'", ",", "'tri_affine'", ",", "\n", "'tri_affine_wo_label'", ",", "'tri_affine_wo_boundary'", ",", "\n", "'tri_affine_wo_scorer'", ",", "'tri_affine_wo_scorer_w_boundary'", ",", "\n", "'lineartri'", ",", "'linattntri'", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--rel_pos_attn\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--rel_pos\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--rel_k\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--att_dim\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_tri_mask\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--reduce_last\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--type_attention\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--aux_loss\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--bert_name_or_path\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--device\"", ",", "type", "=", "str", ",", "default", "=", "\"cuda:0\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--freeze_bert\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_lr_decay\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "# Train setting", "\n", "parser", ".", "add_argument", "(", "\"--save_every_epoch\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "type", "=", "float", ",", "default", "=", "3e-5", ")", "\n", "parser", ".", "add_argument", "(", "\"--encoder_learning_rate\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--decoder_learning_rate\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--task_learning_rate\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--not_correct_bias\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "type", "=", "float", ",", "default", "=", "1e-2", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_epoch\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--early_stop_epoch\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--truncate_length\"", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "48", ")", "\n", "parser", ".", "add_argument", "(", "\"--gradient_accumulation_steps\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_grad_norm\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_base_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./output/\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_ratio\"", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "\"--ema\"", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "\n", "# DETR", "\n", "parser", ".", "add_argument", "(", "\"--query_head_count\"", ",", "type", "=", "int", ",", "default", "=", "30", ")", "\n", "parser", ".", "add_argument", "(", "\"--decoder_layer_count\"", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "\"--class_loss_weight\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--filter_loss_weight\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_scheduler\"", ",", "type", "=", "str", ",", "default", "=", "\"none\"", ",", "\n", "choices", "=", "[", "'none'", ",", "'square'", "]", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--na_weight\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--pointer\"", ",", "type", "=", "str", ",", "default", "=", "'pointer'", ",", "\n", "choices", "=", "[", "'aligner'", ",", "'pointer'", ",", "'biaffine'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--query\"", ",", "type", "=", "str", ",", "default", "=", "'input'", ",", "\n", "choices", "=", "[", "'input'", ",", "'attention'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--pre_norm\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_linear_class\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "# v2 only", "\n", "parser", ".", "add_argument", "(", "\"--loss\"", ",", "type", "=", "str", ",", "default", "=", "\"ce\"", ",", "\n", "choices", "=", "[", "\"ce\"", ",", "\"focal\"", ",", "\"ldam\"", ",", "\"dice\"", ",", "\"two\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--kl\"", ",", "type", "=", "str", ",", "default", "=", "\"none\"", ",", "\n", "choices", "=", "[", "'none'", ",", "'pq'", ",", "'qp'", ",", "'both'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--kl_alpha\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--focal_gamma\"", ",", "type", "=", "float", ",", "default", "=", "2.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--focal_alpha\"", ",", "type", "=", "float", ",", "default", "=", "0.25", ")", "\n", "parser", ".", "add_argument", "(", "\"--ldam_max_m\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "\"--ldam_s\"", ",", "type", "=", "float", ",", "default", "=", "30", ")", "\n", "parser", ".", "add_argument", "(", "\"--dice_alpha\"", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "\"--dice_gamma\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--use_context\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--context_lstm\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--negative_sampling\"", ",", "action", "=", "\"store_true\"", ")", "# used for span base", "\n", "parser", ".", "add_argument", "(", "\"--hard_neg_dist\"", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "\"--label_smoothing\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--dp\"", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "parser", ".", "add_argument", "(", "\"--act\"", ",", "type", "=", "str", ",", "default", "=", "\"relu\"", ",", "\n", "choices", "=", "[", "\"relu\"", ",", "\"gelu\"", "]", ")", "\n", "\n", "# span_att", "\n", "parser", ".", "add_argument", "(", "\"--span_layer_count\"", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_span_count\"", ",", "type", "=", "int", ",", "default", "=", "30", ")", "\n", "parser", ".", "add_argument", "(", "\"--share_parser\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--unscale\"", ",", "action", "=", "\"store_true\"", ")", "# for transformer not tri-affine attention", "\n", "parser", ".", "add_argument", "(", "\"--scale\"", ",", "type", "=", "str", ",", "default", "=", "\"none\"", ",", "\n", "choices", "=", "[", "\"none\"", ",", "\"sqrt\"", ",", "\"triv1\"", ",", "\"triv2\"", "]", ")", "# for tri-affine attention", "\n", "parser", ".", "add_argument", "(", "\"--init_std\"", ",", "type", "=", "float", ",", "default", "=", "2e-4", ")", "\n", "parser", ".", "add_argument", "(", "\"--layer_norm\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "# embedding enhancing", "\n", "parser", ".", "add_argument", "(", "\"--bert_before_lstm\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--subword_aggr\"", ",", "type", "=", "str", ",", "default", "=", "\"first\"", ",", "\n", "choices", "=", "[", "'first'", ",", "'mean'", ",", "'max'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--bert_output\"", ",", "type", "=", "str", ",", "default", "=", "\"last\"", ",", "\n", "choices", "=", "[", "'last'", ",", "'concat-last-4'", ",", "'mean-last-4'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--reinit\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--word\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--word_embed\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--word_dp\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "\"--word_freeze\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--char\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--char_layer\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--char_dim\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--char_dp\"", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--pos\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pos_dim\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--pos_dp\"", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--agg_layer\"", ",", "type", "=", "str", ",", "default", "=", "\"lstm\"", ",", "\n", "choices", "=", "[", "\"lstm\"", ",", "\"transformer\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--lstm_dim\"", ",", "type", "=", "int", ",", "default", "=", "1024", ")", "\n", "parser", ".", "add_argument", "(", "\"--lstm_layer\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--lstm_dp\"", ",", "type", "=", "float", ",", "default", "=", "0.2", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--tag\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_parser.generate_loss_config": [[150, 189], ["get_cls_num_list"], "function", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.get_cls_num_list"], ["", "def", "generate_loss_config", "(", "args", ")", ":", "\n", "    ", "loss_dict", "=", "{", "'name'", ":", "args", ".", "loss", "}", "\n", "if", "args", ".", "loss", "==", "\"ce\"", ":", "\n", "        ", "loss_dict", "[", "'na_weight'", "]", "=", "args", ".", "na_weight", "\n", "", "if", "args", ".", "loss", "==", "\"focal\"", ":", "\n", "        ", "loss_dict", "[", "'gamma'", "]", "=", "args", ".", "focal_gamma", "\n", "loss_dict", "[", "'alpha'", "]", "=", "args", ".", "focal_alpha", "\n", "", "if", "args", ".", "loss", "==", "\"ldam\"", ":", "\n", "        ", "from", "data_util", "import", "get_cls_num_list", "\n", "loss_dict", "[", "'cls_num_list'", "]", "=", "get_cls_num_list", "(", "args", ".", "version", ")", "\n", "loss_dict", "[", "'max_m'", "]", "=", "args", ".", "ldam_max_m", "\n", "loss_dict", "[", "'s'", "]", "=", "args", ".", "ldam_s", "\n", "", "if", "args", ".", "loss", "==", "\"dice\"", ":", "\n", "        ", "loss_dict", "[", "'alpha'", "]", "=", "args", ".", "dice_alpha", "\n", "loss_dict", "[", "'gamma'", "]", "=", "args", ".", "dice_gamma", "\n", "", "if", "args", ".", "loss", "==", "\"two\"", ":", "\n", "        ", "loss_dict", "[", "'na_weight'", "]", "=", "args", ".", "na_weight", "\n", "", "loss_dict", "[", "'label_smoothing'", "]", "=", "args", ".", "label_smoothing", "\n", "\n", "if", "args", ".", "token_aux", "or", "args", ".", "model", "==", "\"TokenModel\"", ":", "\n", "        ", "loss_dict", "[", "'token_schema'", "]", "=", "args", ".", "token_schema", "\n", "if", "args", ".", "token_aux", ":", "\n", "            ", "loss_dict", "[", "'token_aux_weight'", "]", "=", "args", ".", "token_aux_weight", "\n", "", "", "if", "args", ".", "negative_sampling", ":", "\n", "        ", "loss_dict", "[", "'negative_sampling'", "]", "=", "True", "\n", "loss_dict", "[", "'hard_neg_dist'", "]", "=", "args", ".", "hard_neg_dist", "\n", "", "loss_dict", "[", "'class_loss_weight'", "]", "=", "args", ".", "class_loss_weight", "\n", "loss_dict", "[", "'filter_loss_weight'", "]", "=", "args", ".", "filter_loss_weight", "\n", "loss_dict", "[", "'dp'", "]", "=", "args", ".", "dp", "\n", "loss_dict", "[", "'trans_aux'", "]", "=", "args", ".", "trans_aux", "\n", "if", "args", ".", "trans_aux", ":", "\n", "        ", "loss_dict", "[", "'trans_aux_weight'", "]", "=", "args", ".", "trans_aux_weight", "\n", "", "else", ":", "\n", "        ", "loss_dict", "[", "'trans_aux_weight'", "]", "=", "0", "\n", "\n", "", "if", "args", ".", "kl", "!=", "\"none\"", ":", "\n", "        ", "loss_dict", "[", "'kl'", "]", "=", "args", ".", "kl", "\n", "loss_dict", "[", "'kl_alpha'", "]", "=", "args", ".", "kl_alpha", "\n", "", "return", "loss_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_parser.generate_config": [[190, 290], ["args.version.find", "args.version.find", "args.version.find", "args.version.find", "args.version.find", "args.version.find", "args.version.find", "args.version.find", "args.version.find", "args.version.find", "args.version.find", "args.version.find"], "function", ["None"], ["", "def", "generate_config", "(", "args", ")", ":", "\n", "    ", "bert_config", "=", "{", "'bert_before_lstm'", ":", "True", "if", "args", ".", "bert_before_lstm", "else", "False", ",", "\n", "'subword_aggr'", ":", "args", ".", "subword_aggr", ",", "\n", "'bert_output'", ":", "args", ".", "bert_output", ",", "\n", "'reinit'", ":", "args", ".", "reinit", "}", "\n", "if", "args", ".", "word", ":", "\n", "        ", "word_embedding_config", "=", "{", "'path'", ":", "''", ",", "\n", "'dropout'", ":", "args", ".", "word_dp", ",", "\n", "'dim'", ":", "0", ",", "\n", "'padding_idx'", ":", "0", ",", "\n", "'freeze'", ":", "args", ".", "word_freeze", "}", "\n", "if", "args", ".", "version", ".", "find", "(", "\"ace04\"", ")", ">=", "0", ":", "\n", "            ", "if", "not", "args", ".", "word_embed", ":", "\n", "                ", "word_embedding_config", "[", "'path'", "]", "=", "'data/ace04/wiki.npy'", "\n", "word_embedding_config", "[", "'dim'", "]", "=", "300", "\n", "", "elif", "args", ".", "word_embed", "==", "\"glove\"", ":", "\n", "                ", "word_embedding_config", "[", "'path'", "]", "=", "'data/ace04/glove.npy'", "\n", "word_embedding_config", "[", "'dim'", "]", "=", "100", "\n", "", "elif", "args", ".", "word_embed", "==", "\"cc\"", ":", "\n", "                ", "word_embedding_config", "[", "'path'", "]", "=", "'data/ace04/cc.npy'", "\n", "word_embedding_config", "[", "'dim'", "]", "=", "300", "\n", "", "word_embedding_config", "[", "'padding_idx'", "]", "=", "15792", "\n", "", "if", "args", ".", "version", ".", "find", "(", "\"ace05\"", ")", ">=", "0", ":", "\n", "            ", "if", "not", "args", ".", "word_embed", ":", "\n", "                ", "word_embedding_config", "[", "'path'", "]", "=", "'data/ace05/wiki.npy'", "\n", "word_embedding_config", "[", "'dim'", "]", "=", "300", "\n", "", "elif", "args", ".", "word_embed", "==", "\"glove\"", ":", "\n", "                ", "word_embedding_config", "[", "'path'", "]", "=", "'data/ace05/glove.npy'", "\n", "word_embedding_config", "[", "'dim'", "]", "=", "100", "\n", "", "elif", "args", ".", "word_embed", "==", "\"cc\"", ":", "\n", "                ", "word_embedding_config", "[", "'path'", "]", "=", "'data/ace05/cc.npy'", "\n", "word_embedding_config", "[", "'dim'", "]", "=", "300", "\n", "", "word_embedding_config", "[", "'padding_idx'", "]", "=", "16061", "\n", "", "if", "args", ".", "version", ".", "find", "(", "\"genia91\"", ")", ">=", "0", ":", "\n", "            ", "word_embedding_config", "[", "'path'", "]", "=", "'data/genia91/BioWordVec_PubMed_MIMICIII_d200.npy'", "\n", "word_embedding_config", "[", "'dim'", "]", "=", "200", "\n", "word_embedding_config", "[", "'padding_idx'", "]", "=", "25833", "\n", "", "if", "args", ".", "version", ".", "find", "(", "\"kbp\"", ")", ">=", "0", ":", "\n", "            ", "if", "not", "args", ".", "word_embed", "or", "args", ".", "word_embed", "==", "\"cc\"", ":", "\n", "                ", "word_embedding_config", "[", "'path'", "]", "=", "'data/kbp/cc.npy'", "\n", "word_embedding_config", "[", "'dim'", "]", "=", "300", "\n", "", "word_embedding_config", "[", "'padding_idx'", "]", "=", "23228", "\n", "\n", "", "", "else", ":", "\n", "        ", "word_embedding_config", "=", "{", "}", "\n", "\n", "", "if", "args", ".", "char", ":", "\n", "        ", "char_embedding_config", "=", "{", "'layer'", ":", "args", ".", "char_layer", ",", "\n", "'dropout'", ":", "args", ".", "char_dp", ",", "\n", "'dim'", ":", "args", ".", "char_dim", ",", "\n", "'padding_idx'", ":", "0", "}", "\n", "if", "args", ".", "version", ".", "find", "(", "\"ace05\"", ")", ">=", "0", ":", "\n", "            ", "char_embedding_config", "[", "'padding_idx'", "]", "=", "86", "\n", "", "if", "args", ".", "version", ".", "find", "(", "\"genia91\"", ")", ">=", "0", ":", "\n", "            ", "char_embedding_config", "[", "'padding_idx'", "]", "=", "84", "\n", "", "if", "args", ".", "version", ".", "find", "(", "\"ace04\"", ")", ">=", "0", ":", "\n", "            ", "char_embedding_config", "[", "'padding_idx'", "]", "=", "84", "\n", "", "if", "args", ".", "version", ".", "find", "(", "\"kbp\"", ")", ">=", "0", ":", "\n", "            ", "char_embedding_config", "[", "'padding_idx'", "]", "=", "168", "\n", "", "", "else", ":", "\n", "        ", "char_embedding_config", "=", "{", "}", "\n", "\n", "", "if", "args", ".", "pos", ":", "\n", "        ", "pos_embedding_config", "=", "{", "'dropout'", ":", "args", ".", "pos_dp", ",", "\n", "'dim'", ":", "args", ".", "pos_dim", ",", "\n", "'padding_idx'", ":", "0", "}", "\n", "if", "args", ".", "version", ".", "find", "(", "\"ace05\"", ")", ">=", "0", ":", "\n", "            ", "pos_embedding_config", "[", "'padding_idx'", "]", "=", "45", "\n", "", "if", "args", ".", "version", ".", "find", "(", "\"ace04\"", ")", ">=", "0", ":", "\n", "            ", "pos_embedding_config", "[", "'padding_idx'", "]", "=", "46", "\n", "", "if", "args", ".", "version", ".", "find", "(", "\"genia91\"", ")", ">=", "0", ":", "\n", "            ", "pos_embedding_config", "[", "'padding_idx'", "]", "=", "1084", "\n", "", "if", "args", ".", "version", ".", "find", "(", "\"kbp\"", ")", ">=", "0", ":", "\n", "            ", "pos_embedding_config", "[", "'padding_idx'", "]", "=", "46", "\n", "", "", "else", ":", "\n", "        ", "pos_embedding_config", "=", "{", "}", "\n", "\n", "", "lstm_config", "=", "{", "'name'", ":", "args", ".", "agg_layer", ",", "\n", "'dim'", ":", "args", ".", "lstm_dim", ",", "\n", "'layer'", ":", "args", ".", "lstm_layer", ",", "\n", "'dropout'", ":", "args", ".", "lstm_dp", ",", "\n", "'context_lstm'", ":", "args", ".", "context_lstm", "}", "\n", "if", "args", ".", "lstm_layer", "==", "1", "and", "args", ".", "agg_layer", "==", "\"lstm\"", ":", "\n", "        ", "lstm_config", "[", "'dropout'", "]", "=", "0.0", "\n", "", "if", "args", ".", "agg_layer", "==", "\"transformer\"", ":", "\n", "        ", "lstm_config", "[", "'dropout'", "]", "=", "0.1", "# use transformer default", "\n", "\n", "", "other_config", "=", "{", "'prenorm'", ":", "args", ".", "pre_norm", ",", "\n", "'span_layer_count'", ":", "args", ".", "span_layer_count", ",", "\n", "'max_span_count'", ":", "args", ".", "max_span_count", ",", "\n", "'share_parser'", ":", "args", ".", "share_parser", ",", "\n", "'unscale'", ":", "args", ".", "unscale", ",", "\n", "'act'", ":", "args", ".", "act", "}", "\n", "\n", "return", "bert_config", ",", "word_embedding_config", ",", "char_embedding_config", ",", "pos_embedding_config", ",", "lstm_config", ",", "other_config", "\n", "", ""]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.__init__": [[14, 67], ["tokenizer.split", "data_util.NestedNERDataset._get_file_path", "data_util.NestedNERDataset._load_file", "data_util.NestedNERDataset._get_type", "data_util.NestedNERDataset._load_vocab", "data_util.NestedNERDataset._load_pos", "data_util.NestedNERDataset._load_char", "data_util.NestedNERDataset.tokenizer_list.append", "print", "transformers.AutoTokenizer.from_pretrained", "data_util.NestedNERDataset.type2id.items", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset._get_file_path", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset._load_file", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset._get_type", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset._load_vocab", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset._load_pos", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset._load_char"], ["    ", "def", "__init__", "(", "self", ",", "version", ",", "mode", ",", "tokenizer", ",", "truncate_length", "=", "128", ",", "schema", "=", "\"span\"", ",", "use_context", "=", "True", ",", "\n", "token_schema", "=", "\"BIES\"", ",", "soft_iou", "=", "0.7", ",", "bert_embed", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "version", "=", "version", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "schema", "=", "schema", "\n", "# if isinstance(tokenizer, str):", "\n", "#     self.tokenizer = AutoTokenizer.from_pretrained(tokenizer)", "\n", "# else:", "\n", "#     self.tokenizer = tokenizer", "\n", "\n", "self", ".", "tokenizer_list", "=", "[", "]", "\n", "for", "t", "in", "tokenizer", ".", "split", "(", "','", ")", ":", "\n", "            ", "self", ".", "tokenizer_list", ".", "append", "(", "AutoTokenizer", ".", "from_pretrained", "(", "t", ")", ")", "\n", "\n", "", "self", ".", "file_path", "=", "self", ".", "_get_file_path", "(", "self", ".", "version", ",", "self", ".", "mode", ")", "\n", "self", ".", "df", "=", "self", ".", "_load_file", "(", "self", ".", "file_path", ")", "\n", "self", ".", "type2id", "=", "self", ".", "_get_type", "(", "self", ".", "version", ")", "\n", "self", ".", "id2type", "=", "{", "idx", ":", "tp", "for", "tp", ",", "idx", "in", "self", ".", "type2id", ".", "items", "(", ")", "}", "\n", "\n", "self", ".", "truncate_length", "=", "truncate_length", "\n", "self", ".", "use_context", "=", "use_context", "\n", "\n", "self", ".", "word2id", ",", "self", ".", "id2word", "=", "self", ".", "_load_vocab", "(", "self", ".", "version", ")", "\n", "self", ".", "pos2id", "=", "self", ".", "_load_pos", "(", "self", ".", "version", ")", "\n", "self", ".", "char2id", "=", "self", ".", "_load_char", "(", "self", ".", "version", ")", "\n", "\n", "# hard code", "\n", "# self.max_word_count = max(160, self.truncate_length)", "\n", "self", ".", "max_word_count", "=", "200", "\n", "self", ".", "max_char_count", "=", "70", "\n", "self", ".", "max_entity_count", "=", "30", "\n", "\n", "self", ".", "token_schema", "=", "token_schema", "\n", "assert", "token_schema", "in", "[", "'BE'", ",", "'BIE'", ",", "'BIES'", ",", "\n", "'BE-type'", ",", "'BIE-type'", ",", "'BIES-type'", "]", "\n", "if", "self", ".", "token_schema", "==", "\"BE\"", ":", "\n", "            ", "self", ".", "token_label_count", "=", "2", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIE\"", ":", "\n", "            ", "self", ".", "token_label_count", "=", "3", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIES\"", ":", "\n", "            ", "self", ".", "token_label_count", "=", "4", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BE-type\"", ":", "\n", "            ", "self", ".", "token_label_count", "=", "2", "*", "len", "(", "self", ".", "type2id", ")", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIE-type\"", ":", "\n", "            ", "self", ".", "token_label_count", "=", "3", "*", "len", "(", "self", ".", "type2id", ")", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIES-type\"", ":", "\n", "            ", "self", ".", "token_label_count", "=", "4", "*", "len", "(", "self", ".", "type2id", ")", "\n", "\n", "", "self", ".", "soft_iou", "=", "soft_iou", "\n", "\n", "self", ".", "bert_embed_path", "=", "bert_embed", "\n", "if", "self", ".", "bert_embed_path", ":", "\n", "            ", "print", "(", "self", ".", "bert_embed_path", ")", "\n", "#    self.examples = h5py.File(self.bert_embed_path, 'r', libver='latest')", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.open_hdf5": [[69, 71], ["h5py.File"], "methods", ["None"], ["", "", "def", "open_hdf5", "(", "self", ")", ":", "\n", "        ", "self", ".", "examples", "=", "h5py", ".", "File", "(", "self", ".", "bert_embed_path", ",", "'r'", ",", "libver", "=", "'latest'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset._get_file_path": [[72, 83], ["version.startswith"], "methods", ["None"], ["", "def", "_get_file_path", "(", "self", ",", "version", ",", "mode", ")", ":", "\n", "#return f\"data/{version}/{mode}_sample.json\"", "\n", "        ", "if", "version", ".", "startswith", "(", "\"ace\"", ")", ":", "\n", "            ", "return", "f\"data/{version}/{version}_{mode}_context.json\"", "\n", "", "elif", "version", "==", "\"genia91\"", ":", "\n", "            ", "if", "mode", "==", "\"test\"", ":", "\n", "                ", "return", "f\"data/{version}/genia_test_context.json\"", "\n", "", "else", ":", "\n", "                ", "return", "f\"data/{version}/genia_train_dev_context.json\"", "\n", "", "", "elif", "version", "==", "\"kbp\"", ":", "\n", "            ", "return", "f\"data/{version}/{mode}_context.json\"", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset._load_file": [[84, 89], ["len", "open", "ujson.load"], "methods", ["None"], ["", "", "def", "_load_file", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "df", "=", "ujson", ".", "load", "(", "f", ")", "\n", "", "self", ".", "len", "=", "len", "(", "df", ")", "\n", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.__len__": [[90, 92], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset._get_type": [[93, 101], ["version.find", "version.find", "version.find", "enumerate"], "methods", ["None"], ["", "def", "_get_type", "(", "self", ",", "version", ")", ":", "\n", "        ", "if", "version", ".", "find", "(", "\"genia\"", ")", ">=", "0", ":", "\n", "            ", "type_list", "=", "[", "\"protein\"", ",", "\"cell_type\"", ",", "\"cell_line\"", ",", "\"DNA\"", ",", "\"RNA\"", "]", "\n", "", "if", "version", ".", "find", "(", "'ace'", ")", ">=", "0", ":", "\n", "            ", "type_list", "=", "[", "'PER'", ",", "'LOC'", ",", "'ORG'", ",", "'GPE'", ",", "'FAC'", ",", "'VEH'", ",", "'WEA'", "]", "\n", "", "if", "version", ".", "find", "(", "'kbp'", ")", ">=", "0", ":", "\n", "            ", "type_list", "=", "[", "'GPE'", ",", "'FAC'", ",", "'ORG'", ",", "'PER'", ",", "'LOC'", "]", "\n", "", "return", "{", "tp", ":", "idx", "for", "idx", ",", "tp", "in", "enumerate", "(", "type_list", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset._load_vocab": [[102, 110], ["open", "ujson.load", "version.find", "version.find", "version.find", "ujson.load.items"], "methods", ["None"], ["", "def", "_load_vocab", "(", "self", ",", "version", ")", ":", "\n", "        ", "if", "version", ".", "find", "(", "'v2'", ")", ">=", "0", "or", "version", ".", "find", "(", "'v3'", ")", ">=", "0", "or", "version", ".", "find", "(", "'v4'", ")", ">=", "0", ":", "\n", "            ", "version", "=", "version", "[", ":", "-", "3", "]", "\n", "", "vocab_path", "=", "f'data/{version}/word2id.json'", "\n", "with", "open", "(", "vocab_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "word2id", "=", "ujson", ".", "load", "(", "f", ")", "\n", "", "id2word", "=", "{", "id", ":", "word", "for", "word", ",", "id", "in", "word2id", ".", "items", "(", ")", "}", "\n", "return", "word2id", ",", "id2word", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset._load_pos": [[111, 118], ["open", "ujson.load", "version.find", "version.find", "version.find"], "methods", ["None"], ["", "def", "_load_pos", "(", "self", ",", "version", ")", ":", "\n", "        ", "if", "version", ".", "find", "(", "'v2'", ")", ">=", "0", "or", "version", ".", "find", "(", "'v3'", ")", ">=", "0", "or", "version", ".", "find", "(", "'v4'", ")", ">=", "0", ":", "\n", "            ", "version", "=", "version", "[", ":", "-", "3", "]", "\n", "", "pos_path", "=", "f'data/{version}/pos2id.json'", "\n", "with", "open", "(", "pos_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "pos2id", "=", "ujson", ".", "load", "(", "f", ")", "\n", "", "return", "pos2id", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset._load_char": [[119, 126], ["open", "ujson.load", "version.find", "version.find", "version.find"], "methods", ["None"], ["", "def", "_load_char", "(", "self", ",", "version", ")", ":", "\n", "        ", "if", "version", ".", "find", "(", "'v2'", ")", ">=", "0", "or", "version", ".", "find", "(", "'v3'", ")", ">=", "0", "or", "version", ".", "find", "(", "'v4'", ")", ">=", "0", ":", "\n", "            ", "version", "=", "version", "[", ":", "-", "3", "]", "\n", "", "char_path", "=", "f'data/{version}/char2id.json'", "\n", "with", "open", "(", "char_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "char2id", "=", "ujson", ".", "load", "(", "f", ")", "\n", "", "return", "char2id", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad": [[127, 135], ["len", "len", "len"], "methods", ["None"], ["", "def", "pad", "(", "self", ",", "l", ",", "pad_token_length", ",", "pad_token_id", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "len", "(", "l", ")", ">", "pad_token_length", ":", "\n", "            ", "if", "not", "reverse", ":", "\n", "                ", "return", "l", "[", "0", ":", "pad_token_length", "]", "\n", "", "return", "l", "[", "-", "pad_token_length", ":", "]", "\n", "", "if", "not", "reverse", ":", "\n", "            ", "return", "l", "+", "[", "pad_token_id", "]", "*", "(", "pad_token_length", "-", "len", "(", "l", ")", ")", "\n", "", "return", "[", "pad_token_id", "]", "*", "(", "pad_token_length", "-", "len", "(", "l", ")", ")", "+", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.shift": [[136, 138], ["None"], "methods", ["None"], ["", "def", "shift", "(", "self", ",", "l", ",", "shift_idx", ")", ":", "\n", "        ", "return", "[", "x", "+", "shift_idx", "for", "x", "in", "l", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.bert_tokenize": [[139, 297], ["enumerate", "tokenizer.convert_tokens_to_ids", "tokenizer.convert_tokens_to_ids", "min", "enumerate", "len", "enumerate", "len", "tokenizer.tokenize", "tokenized.extend", "len", "len", "len", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad", "tokenizer.tokenize", "l_tokenized.extend", "tokenizer.tokenize", "r_tokenized.extend", "len", "ce_mask.append", "ce_mask.extend", "subword_group.extend", "tokenized.extend", "ce_mask.append", "subword_group.extend", "len", "len", "l_context_ce_mask.append", "l_context_ce_mask.extend", "l_context_subword_group.extend", "len", "r_context_ce_mask.append", "r_context_ce_mask.extend", "r_context_subword_group.extend", "data_util.NestedNERDataset.shift", "data_util.NestedNERDataset.shift", "data_util.NestedNERDataset.shift", "len", "len", "len", "len", "len", "len", "len", "all_tokens.index", "max", "len", "len", "len", "max", "max", "data_util.NestedNERDataset.shift", "len", "len", "len", "len", "len", "len", "len", "len", "max", "max", "max", "len"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.shift", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.shift", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.shift", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.shift"], ["", "def", "bert_tokenize", "(", "self", ",", "tokenizer", ",", "tokens", ",", "ltokens", "=", "None", ",", "rtokens", "=", "None", ")", ":", "\n", "        ", "l_tokenized", "=", "[", "]", "\n", "l_length", "=", "0", "\n", "l_context_ce_mask", "=", "[", "]", "\n", "l_context_subword_group", "=", "[", "]", "\n", "if", "ltokens", "is", "not", "None", ":", "\n", "            ", "for", "idx", ",", "word", "in", "enumerate", "(", "ltokens", ")", ":", "\n", "                ", "subword", "=", "tokenizer", ".", "tokenize", "(", "word", ")", "\n", "l_tokenized", ".", "extend", "(", "subword", ")", "\n", "if", "len", "(", "subword", ")", ">=", "1", ":", "\n", "                    ", "l_context_ce_mask", ".", "append", "(", "1", ")", "\n", "l_context_ce_mask", ".", "extend", "(", "[", "0", "]", "*", "(", "len", "(", "subword", ")", "-", "1", ")", ")", "\n", "l_context_subword_group", ".", "extend", "(", "[", "idx", "]", "*", "len", "(", "subword", ")", ")", "\n", "", "", "l_length", "=", "len", "(", "l_tokenized", ")", "\n", "", "l_ce_mask", "=", "[", "0", "]", "*", "l_length", "\n", "l_subword_group", "=", "[", "-", "1", "]", "*", "l_length", "\n", "\n", "r_tokenized", "=", "[", "]", "\n", "r_length", "=", "0", "\n", "r_context_ce_mask", "=", "[", "]", "\n", "r_context_subword_group", "=", "[", "]", "\n", "if", "rtokens", "is", "not", "None", ":", "\n", "            ", "for", "idx", ",", "word", "in", "enumerate", "(", "rtokens", ")", ":", "\n", "                ", "subword", "=", "tokenizer", ".", "tokenize", "(", "word", ")", "\n", "r_tokenized", ".", "extend", "(", "subword", ")", "\n", "if", "len", "(", "subword", ")", ">=", "1", ":", "\n", "                    ", "r_context_ce_mask", ".", "append", "(", "1", ")", "\n", "r_context_ce_mask", ".", "extend", "(", "[", "0", "]", "*", "(", "len", "(", "subword", ")", "-", "1", ")", ")", "\n", "r_context_subword_group", ".", "extend", "(", "[", "idx", "]", "*", "len", "(", "subword", ")", ")", "\n", "", "", "r_length", "=", "len", "(", "r_tokenized", ")", "\n", "", "r_ce_mask", "=", "[", "0", "]", "*", "r_length", "\n", "r_subword_group", "=", "[", "-", "1", "]", "*", "r_length", "\n", "\n", "tokenized", "=", "[", "]", "\n", "ce_mask", "=", "[", "]", "\n", "subword_group", "=", "[", "]", "\n", "for", "idx", ",", "word", "in", "enumerate", "(", "tokens", ")", ":", "\n", "            ", "subword", "=", "tokenizer", ".", "tokenize", "(", "word", ")", "\n", "tokenized", ".", "extend", "(", "subword", ")", "\n", "#assert len(subword) >= 1", "\n", "if", "len", "(", "subword", ")", ">=", "1", ":", "\n", "                ", "ce_mask", ".", "append", "(", "1", ")", "\n", "ce_mask", ".", "extend", "(", "[", "0", "]", "*", "(", "len", "(", "subword", ")", "-", "1", ")", ")", "\n", "subword_group", ".", "extend", "(", "[", "idx", "]", "*", "len", "(", "subword", ")", ")", "\n", "", "else", ":", "\n", "                ", "tokenized", ".", "extend", "(", "[", "'[UNK]'", "]", ")", "\n", "ce_mask", ".", "append", "(", "1", ")", "\n", "subword_group", ".", "extend", "(", "[", "idx", "]", ")", "\n", "\n", "", "", "if", "ltokens", "is", "None", "and", "rtokens", "is", "None", ":", "\n", "            ", "all_tokens", "=", "[", "'[CLS]'", "]", "+", "tokenized", "+", "[", "'[SEP]'", "]", "\n", "all_ce_mask", "=", "[", "0", "]", "+", "ce_mask", "+", "[", "0", "]", "\n", "all_subword_group", "=", "[", "-", "1", "]", "+", "subword_group", "+", "[", "-", "1", "]", "\n", "token_type_ids", "=", "[", "0", "]", "+", "[", "0", "]", "*", "len", "(", "tokenized", ")", "+", "[", "0", "]", "\n", "context_ce_mask", "=", "[", "0", "]", "+", "ce_mask", "+", "[", "0", "]", "\n", "context_subword_group", "=", "[", "-", "1", "]", "+", "subword_group", "+", "[", "-", "1", "]", "\n", "", "if", "ltokens", "is", "None", "and", "rtokens", "is", "not", "None", ":", "\n", "            ", "all_tokens", "=", "[", "'[CLS]'", "]", "+", "tokenized", "+", "[", "'[SEP]'", "]", "+", "r_tokenized", "+", "[", "'[SEP]'", "]", "\n", "all_ce_mask", "=", "[", "0", "]", "+", "ce_mask", "+", "[", "0", "]", "+", "r_ce_mask", "+", "[", "0", "]", "\n", "all_subword_group", "=", "[", "-", "1", "]", "+", "subword_group", "+", "[", "-", "1", "]", "+", "r_subword_group", "+", "[", "-", "1", "]", "\n", "token_type_ids", "=", "[", "0", "]", "+", "[", "0", "]", "*", "len", "(", "tokenized", ")", "+", "[", "0", "]", "+", "[", "1", "]", "*", "len", "(", "r_tokenized", ")", "+", "[", "1", "]", "\n", "context_ce_mask", "=", "[", "0", "]", "+", "ce_mask", "+", "[", "0", "]", "+", "r_context_ce_mask", "+", "[", "0", "]", "\n", "context_subword_group", "=", "[", "-", "1", "]", "+", "subword_group", "+", "[", "-", "1", "]", "+", "self", ".", "shift", "(", "r_context_subword_group", ",", "max", "(", "subword_group", ")", "+", "1", ")", "+", "[", "-", "1", "]", "\n", "", "if", "ltokens", "is", "not", "None", "and", "rtokens", "is", "None", ":", "\n", "            ", "all_tokens", "=", "[", "'[CLS]'", "]", "+", "l_tokenized", "+", "[", "'[SEP]'", "]", "+", "tokenized", "+", "[", "'[SEP]'", "]", "\n", "all_ce_mask", "=", "[", "0", "]", "+", "l_ce_mask", "+", "[", "0", "]", "+", "ce_mask", "+", "[", "0", "]", "\n", "all_subword_group", "=", "[", "-", "1", "]", "+", "l_subword_group", "+", "[", "-", "1", "]", "+", "subword_group", "+", "[", "-", "1", "]", "\n", "token_type_ids", "=", "[", "1", "]", "+", "[", "1", "]", "*", "len", "(", "l_tokenized", ")", "+", "[", "0", "]", "+", "[", "0", "]", "*", "len", "(", "tokenized", ")", "+", "[", "0", "]", "\n", "context_ce_mask", "=", "[", "0", "]", "+", "l_context_ce_mask", "+", "[", "0", "]", "+", "ce_mask", "+", "[", "0", "]", "\n", "context_subword_group", "=", "[", "-", "1", "]", "+", "l_context_subword_group", "+", "[", "-", "1", "]", "+", "self", ".", "shift", "(", "subword_group", ",", "max", "(", "l_context_subword_group", ")", "+", "1", ")", "+", "[", "-", "1", "]", "\n", "", "if", "ltokens", "is", "not", "None", "and", "rtokens", "is", "not", "None", ":", "\n", "            ", "all_tokens", "=", "[", "'[CLS]'", "]", "+", "l_tokenized", "+", "[", "'[SEP]'", "]", "+", "tokenized", "+", "[", "'[SEP]'", "]", "+", "r_tokenized", "+", "[", "'[SEP]'", "]", "\n", "all_ce_mask", "=", "[", "0", "]", "+", "l_ce_mask", "+", "[", "0", "]", "+", "ce_mask", "+", "[", "0", "]", "+", "r_ce_mask", "+", "[", "0", "]", "\n", "all_subword_group", "=", "[", "-", "1", "]", "+", "l_subword_group", "+", "[", "-", "1", "]", "+", "subword_group", "+", "[", "-", "1", "]", "+", "r_subword_group", "+", "[", "-", "1", "]", "\n", "token_type_ids", "=", "[", "1", "]", "+", "[", "1", "]", "*", "len", "(", "l_tokenized", ")", "+", "[", "0", "]", "+", "[", "0", "]", "*", "len", "(", "tokenized", ")", "+", "[", "0", "]", "+", "[", "1", "]", "*", "len", "(", "r_tokenized", ")", "+", "[", "1", "]", "\n", "context_ce_mask", "=", "[", "0", "]", "+", "l_context_ce_mask", "+", "[", "0", "]", "+", "ce_mask", "+", "[", "0", "]", "+", "r_context_ce_mask", "+", "[", "0", "]", "\n", "context_subword_group", "=", "[", "-", "1", "]", "+", "l_context_subword_group", "+", "[", "-", "1", "]", "+", "self", ".", "shift", "(", "subword_group", ",", "max", "(", "l_context_subword_group", ")", "+", "1", ")", "+", "[", "-", "1", "]", "+", "self", ".", "shift", "(", "r_context_subword_group", ",", "max", "(", "l_context_subword_group", ")", "+", "max", "(", "subword_group", ")", "+", "2", ")", "+", "[", "-", "1", "]", "\n", "\n", "", "no_context_tokens", "=", "[", "'[CLS]'", "]", "+", "tokenized", "+", "[", "'[SEP]'", "]", "\n", "no_context_ce_mask", "=", "[", "0", "]", "+", "ce_mask", "+", "[", "0", "]", "\n", "no_context_subword_group", "=", "[", "-", "1", "]", "+", "subword_group", "+", "[", "-", "1", "]", "\n", "no_context_token_type_ids", "=", "[", "0", "]", "+", "[", "0", "]", "*", "len", "(", "tokenized", ")", "+", "[", "0", "]", "\n", "\n", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "all_tokens", ")", "\n", "attention_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "no_context_input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "\n", "no_context_tokens", ")", "\n", "no_context_attention_mask", "=", "[", "1", "]", "*", "len", "(", "no_context_input_ids", ")", "\n", "\n", "# truncation", "\n", "if", "len", "(", "input_ids", ")", "<=", "self", ".", "truncate_length", ":", "\n", "            ", "input_ids", "=", "self", ".", "pad", "(", "\n", "input_ids", ",", "self", ".", "truncate_length", ",", "tokenizer", ".", "pad_token_id", ")", "\n", "attention_mask", "=", "self", ".", "pad", "(", "attention_mask", ",", "self", ".", "truncate_length", ",", "0", ")", "\n", "all_ce_mask", "=", "self", ".", "pad", "(", "all_ce_mask", ",", "self", ".", "truncate_length", ",", "0", ")", "\n", "all_subword_group", "=", "self", ".", "pad", "(", "all_subword_group", ",", "self", ".", "truncate_length", ",", "-", "1", ")", "\n", "token_type_ids", "=", "self", ".", "pad", "(", "token_type_ids", ",", "self", ".", "truncate_length", ",", "0", ")", "\n", "context_ce_mask", "=", "self", ".", "pad", "(", "context_ce_mask", ",", "self", ".", "truncate_length", ",", "0", ")", "\n", "context_subword_group", "=", "self", ".", "pad", "(", "context_subword_group", ",", "self", ".", "truncate_length", ",", "-", "1", ")", "\n", "# print(all_tokens)", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "no_context_input_ids", ")", ">", "self", ".", "truncate_length", ":", "\n", "                ", "input_ids", "=", "no_context_input_ids", "[", "0", ":", "self", ".", "truncate_length", "]", "\n", "attention_mask", "=", "no_context_attention_mask", "[", "0", ":", "self", ".", "truncate_length", "]", "\n", "all_ce_mask", "=", "no_context_ce_mask", "[", "0", ":", "self", ".", "truncate_length", "]", "\n", "all_subword_group", "=", "no_context_subword_group", "[", "0", ":", "self", ".", "truncate_length", "]", "\n", "token_type_ids", "=", "no_context_token_type_ids", "[", "0", ":", "self", ".", "truncate_length", "]", "\n", "context_ce_mask", "=", "all_ce_mask", "\n", "context_subword_group", "=", "all_subword_group", "\n", "", "else", ":", "\n", "                ", "if", "ltokens", "is", "None", ":", "\n", "# tokens + part_rtokens", "\n", "                    ", "start_idx", "=", "0", "\n", "end_idx", "=", "self", ".", "truncate_length", "\n", "", "elif", "rtokens", "is", "None", ":", "\n", "# part_ltokens + tokens", "\n", "                    ", "end_idx", "=", "len", "(", "input_ids", ")", "\n", "start_idx", "=", "end_idx", "-", "self", ".", "truncate_length", "\n", "", "else", ":", "\n", "# part_ltokens + tokens + part_rtokens", "\n", "# first [sep] indicates tokens start idx", "\n", "                    ", "tokens_start_idx", "=", "all_tokens", ".", "index", "(", "'[SEP]'", ")", "\n", "tokens_end_idx", "=", "tokens_start_idx", "+", "len", "(", "no_context_input_ids", ")", "\n", "context_len", "=", "(", "self", ".", "truncate_length", "-", "\n", "(", "tokens_end_idx", "-", "tokens_start_idx", ")", ")", "//", "2", "\n", "start_idx", "=", "max", "(", "0", ",", "tokens_start_idx", "-", "context_len", ")", "\n", "end_idx", "=", "start_idx", "+", "self", ".", "truncate_length", "\n", "if", "end_idx", ">=", "len", "(", "input_ids", ")", ":", "\n", "                        ", "end_idx", "=", "len", "(", "input_ids", ")", "\n", "start_idx", "=", "end_idx", "-", "self", ".", "truncate_length", "\n", "", "", "input_ids", "=", "input_ids", "[", "start_idx", ":", "end_idx", "]", "\n", "attention_mask", "=", "attention_mask", "[", "start_idx", ":", "end_idx", "]", "\n", "all_ce_mask", "=", "all_ce_mask", "[", "start_idx", ":", "end_idx", "]", "\n", "all_subword_group", "=", "all_subword_group", "[", "start_idx", ":", "end_idx", "]", "\n", "token_type_ids", "=", "token_type_ids", "[", "start_idx", ":", "end_idx", "]", "\n", "context_ce_mask", "=", "context_ce_mask", "[", "start_idx", ":", "end_idx", "]", "\n", "context_subword_group", "=", "context_subword_group", "[", "start_idx", ":", "end_idx", "]", "\n", "\n", "", "", "min_context_subword_group", "=", "min", "(", "[", "num", "for", "num", "in", "context_subword_group", "if", "num", ">=", "0", "]", ")", "\n", "context_subword_group", "=", "[", "num", "-", "min_context_subword_group", "if", "num", ">=", "0", "else", "num", "for", "num", "in", "context_subword_group", "]", "\n", "#print(context_subword_group)", "\n", "\n", "return", "input_ids", ",", "attention_mask", ",", "all_ce_mask", ",", "token_type_ids", ",", "all_subword_group", ",", "context_ce_mask", ",", "context_subword_group", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.word_tokenize": [[298, 305], ["min", "data_util.NestedNERDataset.word2id.get", "len", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad"], ["", "def", "word_tokenize", "(", "self", ",", "tokens", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "tokens", "is", "None", ":", "\n", "            ", "return", "self", ".", "pad", "(", "[", "]", ",", "self", ".", "max_word_count", ",", "self", ".", "word2id", "[", "'[PAD]'", "]", ")", ",", "0", "\n", "", "input_word", "=", "[", "self", ".", "word2id", ".", "get", "(", "\n", "token", ",", "self", ".", "word2id", "[", "'[UNK]'", "]", ")", "for", "token", "in", "tokens", "]", "\n", "word_count", "=", "min", "(", "len", "(", "input_word", ")", ",", "self", ".", "max_word_count", ")", "\n", "return", "self", ".", "pad", "(", "input_word", ",", "self", ".", "max_word_count", ",", "self", ".", "word2id", "[", "'[PAD]'", "]", ",", "reverse", ")", ",", "word_count", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.char_tokenize": [[306, 315], ["data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.char2id.get"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad"], ["", "def", "char_tokenize", "(", "self", ",", "tokens", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "tokens", "is", "None", ":", "\n", "            ", "input_char", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "input_char", "=", "[", "self", ".", "pad", "(", "[", "self", ".", "char2id", ".", "get", "(", "char", ",", "self", ".", "char2id", "[", "'[UNK]'", "]", ")", "for", "char", "in", "token", "]", ",", "self", ".", "max_char_count", ",", "self", ".", "char2id", "[", "'[PAD]'", "]", ")", "for", "token", "in", "tokens", "]", "\n", "", "return", "self", ".", "pad", "(", "input_char", ",", "\n", "self", ".", "max_word_count", ",", "\n", "[", "self", ".", "char2id", "[", "'[PAD]'", "]", "]", "*", "self", ".", "max_char_count", ",", "\n", "reverse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pos_tokenize": [[316, 322], ["data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pos2id.get"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad"], ["", "def", "pos_tokenize", "(", "self", ",", "pos", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "if", "pos", "is", "None", ":", "\n", "            ", "input_pos", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "input_pos", "=", "[", "self", ".", "pos2id", ".", "get", "(", "p", ",", "self", ".", "pos2id", "[", "'[UNK]'", "]", ")", "for", "p", "in", "pos", "]", "\n", "", "return", "self", ".", "pad", "(", "input_pos", ",", "self", ".", "max_word_count", ",", "self", ".", "pos2id", "[", "'[PAD]'", "]", ",", "reverse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.convert": [[323, 390], ["numpy.full", "numpy.triu", "sorted", "numpy.full", "numpy.full", "numpy.full", "numpy.full", "numpy.triu", "numpy.triu", "numpy.arange().reshape().repeat", "tail_label[].transpose", "numpy.zeros", "numpy.full.tolist", "sorted.append", "range", "numpy.full.tolist", "numpy.full.tolist", "numpy.full.tolist", "numpy.full.tolist", "numpy.ones", "numpy.ones", "numpy.ones", "numpy.arange().reshape", "range", "len", "len", "len", "span_utils.iou", "len", "len", "len", "len", "numpy.arange", "max", "len"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.span_utils.iou"], ["", "def", "convert", "(", "self", ",", "word_count", ",", "entities", ")", ":", "\n", "# span", "\n", "        ", "if", "self", ".", "schema", "in", "[", "'span'", "]", ":", "\n", "            ", "new_label", "=", "np", ".", "full", "(", "\n", "(", "self", ".", "max_word_count", ",", "self", ".", "max_word_count", ")", ",", "-", "100", ",", "dtype", "=", "'int64'", ")", "\n", "new_label", "[", "0", ":", "word_count", ",", "0", ":", "word_count", "]", "+=", "np", ".", "triu", "(", "(", "100", "+", "len", "(", "self", ".", "type2id", ")", ")", "*", "np", ".", "ones", "(", "(", "word_count", ",", "word_count", ")", ",", "dtype", "=", "'int64'", ")", ")", "\n", "for", "ent", "in", "entities", ":", "\n", "                ", "if", "ent", "[", "'end'", "]", "-", "1", "<", "self", ".", "max_word_count", ":", "\n", "                    ", "new_label", "[", "ent", "[", "'start'", "]", ",", "ent", "[", "'end'", "]", "-", "1", "]", "=", "self", ".", "type2id", "[", "ent", "[", "'type'", "]", "]", "\n", "", "", "return", "new_label", ".", "tolist", "(", ")", ",", "None", ",", "None", ",", "None", "\n", "\n", "# seq2seq", "\n", "", "if", "self", ".", "schema", "in", "[", "'DETRSeq'", ",", "'DETR'", "]", ":", "\n", "            ", "label", "=", "[", "]", "\n", "for", "ent", "in", "entities", ":", "\n", "                ", "label", ".", "append", "(", "[", "ent", "[", "'start'", "]", ",", "ent", "[", "'end'", "]", "-", "1", ",", "self", ".", "type2id", "[", "ent", "[", "'type'", "]", "]", "]", ")", "\n", "", "label", "=", "sorted", "(", "label", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "x", "[", "2", "]", ")", ")", "\n", "if", "self", ".", "schema", "==", "'DETRSeq'", ":", "\n", "                ", "label", "=", "label", "+", "[", "[", "-", "100", ",", "-", "100", ",", "len", "(", "self", ".", "type2id", ")", "]", "]", "+", "[", "[", "-", "100", ",", "-", "100", ",", "-", "100", "]", "]", "*", "(", "self", ".", "max_entity_count", "-", "1", "-", "len", "(", "label", ")", ")", "\n", "", "if", "self", ".", "schema", "==", "\"DETR\"", ":", "\n", "                ", "label", "=", "label", "+", "[", "[", "-", "100", ",", "-", "100", ",", "-", "100", "]", "]", "*", "(", "self", ".", "max_entity_count", "-", "len", "(", "label", ")", ")", "\n", "", "return", "label", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "if", "self", ".", "schema", "==", "\"softspan\"", ":", "\n", "            ", "new_label", "=", "np", ".", "full", "(", "\n", "(", "self", ".", "max_word_count", ",", "self", ".", "max_word_count", ")", ",", "-", "100", ",", "dtype", "=", "'int64'", ")", "\n", "ori_label", "=", "np", ".", "full", "(", "\n", "(", "self", ".", "max_word_count", ",", "self", ".", "max_word_count", ")", ",", "-", "100", ",", "dtype", "=", "'int64'", ")", "\n", "head_label", "=", "np", ".", "full", "(", "\n", "(", "self", ".", "max_word_count", ",", "self", ".", "max_word_count", ")", ",", "-", "100", ",", "dtype", "=", "'int64'", ")", "\n", "tail_label", "=", "np", ".", "full", "(", "\n", "(", "self", ".", "max_word_count", ",", "self", ".", "max_word_count", ")", ",", "-", "100", ",", "dtype", "=", "'int64'", ")", "\n", "\n", "new_label", "[", "0", ":", "word_count", ",", "0", ":", "word_count", "]", "+=", "np", ".", "triu", "(", "(", "100", "+", "len", "(", "self", ".", "type2id", ")", ")", "*", "np", ".", "ones", "(", "(", "word_count", ",", "word_count", ")", ",", "dtype", "=", "'int64'", ")", ")", "\n", "ori_label", "[", "0", ":", "word_count", ",", "0", ":", "word_count", "]", "+=", "np", ".", "triu", "(", "(", "100", "+", "len", "(", "self", ".", "type2id", ")", ")", "*", "np", ".", "ones", "(", "(", "word_count", ",", "word_count", ")", ",", "dtype", "=", "'int64'", ")", ")", "\n", "tail_label", "[", "0", ":", "word_count", ",", "0", ":", "word_count", "]", "=", "np", ".", "arange", "(", "word_count", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "word_count", ",", "0", ")", "\n", "head_label", "[", "0", ":", "word_count", ",", "0", ":", "word_count", "]", "=", "tail_label", "[", "0", ":", "word_count", ",", "0", ":", "word_count", "]", ".", "transpose", "(", ")", "\n", "iou_score", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_word_count", ",", "self", ".", "max_word_count", ")", ")", "# record max iou score between this span with any entity", "\n", "\n", "for", "ent", "in", "entities", ":", "\n", "                ", "st", "=", "ent", "[", "'start'", "]", "\n", "ed", "=", "ent", "[", "'end'", "]", "-", "1", "\n", "tp", "=", "self", ".", "type2id", "[", "ent", "[", "'type'", "]", "]", "\n", "new_label", "[", "st", ",", "ed", "]", "=", "tp", "\n", "ori_label", "[", "st", ",", "ed", "]", "=", "tp", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "ed", "+", "1", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "i", ",", "word_count", ")", ":", "\n", "                        ", "iou_now", "=", "iou", "(", "(", "i", ",", "j", ")", ",", "(", "st", ",", "ed", ")", ")", "\n", "if", "iou_now", ">", "max", "(", "self", ".", "soft_iou", ",", "iou_score", "[", "i", ",", "j", "]", ")", ":", "\n", "                            ", "iou_score", "[", "i", ",", "j", "]", "=", "iou_now", "\n", "new_label", "[", "i", ",", "j", "]", "=", "tp", "\n", "head_label", "[", "i", ",", "j", "]", "=", "st", "\n", "tail_label", "[", "i", ",", "j", "]", "=", "ed", "\n", "\n", "", "", "", "", "head_label", "[", "new_label", "==", "len", "(", "self", ".", "type2id", ")", "]", "=", "-", "100", "\n", "head_label", "[", "new_label", "==", "-", "100", "]", "=", "-", "100", "\n", "tail_label", "[", "new_label", "==", "len", "(", "self", ".", "type2id", ")", "]", "=", "-", "100", "\n", "tail_label", "[", "new_label", "==", "-", "100", "]", "=", "-", "100", "\n", "\n", "return", "new_label", ".", "tolist", "(", ")", ",", "head_label", ".", "tolist", "(", ")", ",", "tail_label", ".", "tolist", "(", ")", ",", "ori_label", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.convert_token": [[391, 436], ["numpy.full", "label[].tolist", "range", "range", "range", "range"], "methods", ["None"], ["", "", "def", "convert_token", "(", "self", ",", "word_count", ",", "entities", ")", ":", "\n", "#label = np.full((self.max_word_count, self.token_label_count), -100, dtype='int64')", "\n", "        ", "label", "=", "np", ".", "full", "(", "(", "1000", ",", "self", ".", "token_label_count", ")", ",", "-", "100", ",", "dtype", "=", "'int64'", ")", "\n", "\n", "label", "[", "0", ":", "word_count", "]", "=", "0", "\n", "for", "ent", "in", "entities", ":", "\n", "            ", "st", "=", "ent", "[", "'start'", "]", "\n", "ed", "=", "ent", "[", "'end'", "]", "-", "1", "\n", "tp", "=", "self", ".", "type2id", "[", "ent", "[", "'type'", "]", "]", "\n", "if", "self", ".", "token_schema", "==", "\"BE\"", ":", "\n", "                ", "label", "[", "st", "]", "[", "0", "]", "=", "1", "\n", "label", "[", "ed", "]", "[", "1", "]", "=", "1", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIE\"", ":", "\n", "# BEI exactly", "\n", "                ", "label", "[", "st", "]", "[", "0", "]", "=", "1", "\n", "label", "[", "ed", "]", "[", "1", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "st", "+", "1", ",", "ed", ")", ":", "\n", "                    ", "label", "[", "i", "]", "[", "2", "]", "=", "1", "\n", "", "", "elif", "self", ".", "token_schema", "==", "\"BIES\"", ":", "\n", "                ", "if", "st", "==", "ed", ":", "\n", "                    ", "label", "[", "st", "]", "[", "3", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "label", "[", "st", "]", "[", "0", "]", "=", "1", "\n", "label", "[", "ed", "]", "[", "1", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "st", "+", "1", ",", "ed", ")", ":", "\n", "                        ", "label", "[", "i", "]", "[", "2", "]", "=", "1", "\n", "", "", "", "elif", "self", ".", "token_schema", "==", "\"BE-type\"", ":", "\n", "                ", "label", "[", "st", "]", "[", "2", "*", "tp", "]", "=", "1", "\n", "label", "[", "ed", "]", "[", "2", "*", "tp", "+", "1", "]", "=", "1", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIE-type\"", ":", "\n", "# BEI exactly", "\n", "                ", "label", "[", "st", "]", "[", "3", "*", "tp", "]", "=", "1", "\n", "label", "[", "ed", "]", "[", "3", "*", "tp", "+", "1", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "st", "+", "1", ",", "ed", ")", ":", "\n", "                    ", "label", "[", "i", "]", "[", "3", "*", "tp", "+", "2", "]", "=", "1", "\n", "", "", "elif", "self", ".", "token_schema", "==", "\"BIES-type\"", ":", "\n", "                ", "if", "st", "==", "ed", ":", "\n", "                    ", "label", "[", "st", "]", "[", "4", "*", "tp", "+", "3", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "label", "[", "st", "]", "[", "4", "*", "tp", "]", "=", "1", "\n", "label", "[", "ed", "]", "[", "4", "*", "tp", "+", "1", "]", "=", "1", "\n", "for", "i", "in", "range", "(", "st", "+", "1", ",", "ed", ")", ":", "\n", "                        ", "label", "[", "i", "]", "[", "4", "*", "tp", "+", "2", "]", "=", "1", "\n", "\n", "", "", "", "", "return", "label", "[", "0", ":", "self", ".", "max_word_count", "]", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.convert_trans": [[437, 467], ["numpy.full", "numpy.full", "range", "start_list.append", "end_list.append", "len", "range", "numpy.full.tolist", "numpy.full.tolist", "len"], "methods", ["None"], ["", "def", "convert_trans", "(", "self", ",", "word_count", ",", "entities", ")", ":", "\n", "        ", "head_trans_label", "=", "np", ".", "full", "(", "\n", "(", "self", ".", "max_word_count", ",", "self", ".", "max_word_count", ")", ",", "-", "100", ",", "dtype", "=", "'int64'", ")", "\n", "head_trans_label", "[", "0", ":", "word_count", ",", "0", ":", "word_count", "]", "=", "0", "\n", "tail_trans_label", "=", "np", ".", "full", "(", "\n", "(", "self", ".", "max_word_count", ",", "self", ".", "max_word_count", ")", ",", "-", "100", ",", "dtype", "=", "'int64'", ")", "\n", "tail_trans_label", "[", "0", ":", "word_count", ",", "0", ":", "word_count", "]", "=", "0", "\n", "\n", "start_list", "=", "[", "]", "\n", "end_list", "=", "[", "]", "\n", "for", "ent", "in", "entities", ":", "\n", "            ", "start_list", ".", "append", "(", "ent", "[", "'start'", "]", ")", "\n", "end_list", ".", "append", "(", "ent", "[", "'end'", "]", "-", "1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "start_list", ")", ")", ":", "\n", "            ", "smallest_start", "=", "-", "1", "\n", "smallest_end", "=", "200", "\n", "for", "j", "in", "range", "(", "len", "(", "start_list", ")", ")", ":", "\n", "                ", "if", "i", "==", "j", ":", "\n", "                    ", "continue", "\n", "", "if", "start_list", "[", "j", "]", "<=", "start_list", "[", "i", "]", "and", "end_list", "[", "i", "]", "<=", "end_list", "[", "j", "]", "and", "end_list", "[", "j", "]", "-", "start_list", "[", "j", "]", "<", "smallest_end", "-", "smallest_start", ":", "\n", "                    ", "smallest_start", "=", "start_list", "[", "j", "]", "\n", "smallest_end", "=", "end_list", "[", "j", "]", "\n", "", "", "if", "smallest_start", ">=", "0", ":", "\n", "                ", "if", "0", "<=", "start_list", "[", "i", "]", "<", "self", ".", "max_word_count", "and", "0", "<=", "smallest_start", "<", "self", ".", "max_word_count", ":", "\n", "                    ", "head_trans_label", "[", "start_list", "[", "i", "]", ",", "smallest_start", "]", "=", "1", "\n", "", "if", "0", "<=", "end_list", "[", "i", "]", "<", "self", ".", "max_word_count", "and", "0", "<=", "smallest_end", "<", "self", ".", "max_word_count", ":", "\n", "                    ", "tail_trans_label", "[", "end_list", "[", "i", "]", ",", "smallest_end", "]", "=", "1", "\n", "\n", "", "", "", "return", "head_trans_label", ".", "tolist", "(", ")", ",", "tail_trans_label", ".", "tolist", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.group_unsqueeze": [[468, 480], ["numpy.array", "max", "range", "data_util.NestedNERDataset.pad", "res.append", "data_util.NestedNERDataset.append", "numpy.array().tolist", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad"], ["", "def", "group_unsqueeze", "(", "self", ",", "subword_group", ")", ":", "\n", "# list of list", "\n", "        ", "res", "=", "[", "]", "\n", "for", "grp", "in", "subword_group", ":", "\n", "            ", "tmp", "=", "[", "]", "\n", "grp", "=", "np", ".", "array", "(", "grp", ")", "\n", "max_idx", "=", "max", "(", "grp", ")", "\n", "for", "i", "in", "range", "(", "max_idx", "+", "1", ")", ":", "\n", "                ", "tmp", ".", "append", "(", "(", "grp", "==", "i", ")", ".", "tolist", "(", ")", ")", "\n", "", "tmp", "=", "self", ".", "pad", "(", "tmp", ",", "self", ".", "max_word_count", ",", "(", "np", ".", "array", "(", "[", "False", "]", "*", "self", ".", "truncate_length", ")", ".", "tolist", "(", ")", ")", ")", "\n", "res", ".", "append", "(", "tmp", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.__getitem__": [[481, 584], ["line.get", "max", "data_util.NestedNERDataset.group_unsqueeze", "data_util.NestedNERDataset.group_unsqueeze", "enumerate", "data_util.NestedNERDataset.word_tokenize", "data_util.NestedNERDataset.char_tokenize", "data_util.NestedNERDataset.word_tokenize", "data_util.NestedNERDataset.word_tokenize", "data_util.NestedNERDataset.char_tokenize", "data_util.NestedNERDataset.char_tokenize", "data_util.NestedNERDataset.pos_tokenize", "data_util.NestedNERDataset.pos_tokenize", "data_util.NestedNERDataset.pos_tokenize", "data_util.NestedNERDataset.convert", "data_util.NestedNERDataset.convert_token", "data_util.NestedNERDataset.convert_trans", "data_util.NestedNERDataset.bert_tokenize", "input_ids.append", "attention_mask.append", "ce_mask.append", "token_type_ids.append", "data_util.NestedNERDataset.append", "context_ce_mask.append", "data_util.NestedNERDataset.append", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad", "data_util.NestedNERDataset.pad", "enumerate", "context_map.append", "data_util.NestedNERDataset.pad", "line.get", "line.get", "h5py.__version__.startswith", "len", "enumerate", "hasattr", "data_util.NestedNERDataset.open_hdf5", "h5py.__version__.startswith", "tmp.append", "str", "str"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.group_unsqueeze", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.group_unsqueeze", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.word_tokenize", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.char_tokenize", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.word_tokenize", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.word_tokenize", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.char_tokenize", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.char_tokenize", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pos_tokenize", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pos_tokenize", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pos_tokenize", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.convert", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.convert_token", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.convert_trans", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.bert_tokenize", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.open_hdf5"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "line", "=", "self", ".", "df", "[", "index", "]", "\n", "tokens", "=", "line", "[", "'tokens'", "]", "\n", "if", "self", ".", "use_context", ":", "\n", "            ", "ltokens", "=", "line", "[", "'ltokens'", "]", "\n", "if", "not", "ltokens", ":", "\n", "                ", "ltokens", "=", "None", "\n", "", "rtokens", "=", "line", "[", "'rtokens'", "]", "\n", "if", "not", "rtokens", ":", "\n", "                ", "rtokens", "=", "None", "\n", "", "", "else", ":", "\n", "            ", "ltokens", "=", "None", "\n", "rtokens", "=", "None", "\n", "", "pos", "=", "line", ".", "get", "(", "'pos'", ",", "None", ")", "\n", "\n", "input_ids", "=", "[", "]", "\n", "attention_mask", "=", "[", "]", "\n", "ce_mask", "=", "[", "]", "\n", "token_type_ids", "=", "[", "]", "\n", "subword_group", "=", "[", "]", "\n", "context_ce_mask", "=", "[", "]", "\n", "context_subword_group", "=", "[", "]", "\n", "\n", "for", "t", "in", "self", ".", "tokenizer_list", ":", "\n", "            ", "input_ids_0", ",", "attention_mask_0", ",", "ce_mask_0", ",", "token_type_ids_0", ",", "subword_group_0", ",", "context_ce_mask_0", ",", "context_subword_group_0", "=", "self", ".", "bert_tokenize", "(", "t", ",", "tokens", ",", "ltokens", ",", "rtokens", ")", "\n", "input_ids", ".", "append", "(", "input_ids_0", ")", "\n", "attention_mask", ".", "append", "(", "attention_mask_0", ")", "\n", "ce_mask", ".", "append", "(", "ce_mask_0", ")", "\n", "token_type_ids", ".", "append", "(", "token_type_ids_0", ")", "\n", "subword_group", ".", "append", "(", "subword_group_0", ")", "\n", "context_ce_mask", ".", "append", "(", "context_ce_mask_0", ")", "\n", "context_subword_group", ".", "append", "(", "context_subword_group_0", ")", "\n", "\n", "", "max_tok_len", "=", "max", "(", "[", "len", "(", "input_ids_0", ")", "for", "input_ids_0", "in", "input_ids", "]", ")", "\n", "input_ids", "=", "[", "self", ".", "pad", "(", "input_ids_0", ",", "max_tok_len", ",", "self", ".", "tokenizer_list", "[", "idx", "]", ".", "pad_token_id", ")", "for", "idx", ",", "input_ids_0", "in", "enumerate", "(", "input_ids", ")", "]", "\n", "attention_mask", "=", "[", "self", ".", "pad", "(", "att", ",", "max_tok_len", ",", "0", ")", "for", "att", "in", "attention_mask", "]", "\n", "ce_mask", "=", "[", "self", ".", "pad", "(", "att", ",", "max_tok_len", ",", "0", ")", "for", "att", "in", "ce_mask", "]", "\n", "token_type_ids", "=", "[", "self", ".", "pad", "(", "att", ",", "max_tok_len", ",", "0", ")", "for", "att", "in", "token_type_ids", "]", "\n", "subword_group", "=", "[", "self", ".", "pad", "(", "grp", ",", "max_tok_len", ",", "-", "1", ")", "for", "grp", "in", "subword_group", "]", "\n", "context_ce_mask", "=", "[", "self", ".", "pad", "(", "att", ",", "max_tok_len", ",", "0", ")", "for", "att", "in", "context_ce_mask", "]", "\n", "context_subword_group", "=", "[", "self", ".", "pad", "(", "grp", ",", "max_tok_len", ",", "-", "1", ")", "for", "grp", "in", "context_subword_group", "]", "\n", "\n", "# import ipdb; ipdb.set_trace()", "\n", "\n", "subword_group", "=", "self", ".", "group_unsqueeze", "(", "subword_group", ")", "\n", "context_subword_group", "=", "self", ".", "group_unsqueeze", "(", "context_subword_group", ")", "\n", "\n", "context_map", "=", "[", "]", "\n", "for", "idx", ",", "_", "in", "enumerate", "(", "self", ".", "tokenizer_list", ")", ":", "\n", "            ", "tmp", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "i", ",", "m", "in", "enumerate", "(", "context_ce_mask", "[", "idx", "]", ")", ":", "\n", "                ", "if", "m", "==", "1", ":", "\n", "                    ", "if", "ce_mask", "[", "idx", "]", "[", "i", "]", "==", "1", ":", "\n", "                        ", "tmp", ".", "append", "(", "count", ")", "\n", "", "count", "+=", "1", "\n", "", "", "context_map", ".", "append", "(", "tmp", ")", "\n", "", "context_map", "=", "[", "self", ".", "pad", "(", "att", ",", "max_tok_len", ",", "0", ")", "for", "att", "in", "context_map", "]", "\n", "\n", "input_word", ",", "word_count", "=", "self", ".", "word_tokenize", "(", "tokens", ")", "\n", "input_char", "=", "self", ".", "char_tokenize", "(", "tokens", ")", "\n", "\n", "l_input_word", ",", "_", "=", "self", ".", "word_tokenize", "(", "ltokens", ",", "True", ")", "\n", "r_input_word", ",", "_", "=", "self", ".", "word_tokenize", "(", "rtokens", ")", "\n", "l_input_char", "=", "self", ".", "char_tokenize", "(", "ltokens", ",", "True", ")", "\n", "r_input_char", "=", "self", ".", "char_tokenize", "(", "rtokens", ")", "\n", "\n", "input_pos", "=", "self", ".", "pos_tokenize", "(", "pos", ")", "\n", "l_input_pos", "=", "self", ".", "pos_tokenize", "(", "line", ".", "get", "(", "'lpos'", ",", "[", "]", ")", ",", "True", ")", "\n", "r_input_pos", "=", "self", ".", "pos_tokenize", "(", "line", ".", "get", "(", "'rpos'", ",", "[", "]", ")", ")", "\n", "\n", "# deal with label", "\n", "entities", "=", "line", "[", "'entities'", "]", "\n", "span_label", ",", "head_label", ",", "tail_label", ",", "ori_label", "=", "self", ".", "convert", "(", "word_count", ",", "entities", ")", "\n", "token_label", "=", "self", ".", "convert_token", "(", "word_count", ",", "entities", ")", "\n", "head_trans_label", ",", "tail_trans_label", "=", "self", ".", "convert_trans", "(", "word_count", ",", "entities", ")", "\n", "\n", "# hard code", "\n", "if", "self", ".", "bert_embed_path", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ",", "'examples'", ")", ":", "\n", "                ", "self", ".", "open_hdf5", "(", ")", "\n", "", "if", "h5py", ".", "__version__", ".", "startswith", "(", "'2'", ")", ":", "\n", "                ", "bert_embed", "=", "self", ".", "examples", "[", "str", "(", "index", ")", "]", ".", "value", "\n", "", "elif", "h5py", ".", "__version__", ".", "startswith", "(", "'3'", ")", ":", "\n", "                ", "bert_embed", "=", "self", ".", "examples", "[", "str", "(", "index", ")", "]", "[", "(", ")", "]", "\n", "", "", "else", ":", "\n", "# hard code", "\n", "            ", "bert_embed", "=", "input_ids", "\n", "\n", "", "if", "head_label", "is", "None", ":", "\n", "            ", "head_label", "=", "input_ids", "\n", "tail_label", "=", "input_ids", "# just padding", "\n", "ori_label", "=", "input_ids", "\n", "\n", "", "return", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "input_word", ",", "input_char", ",", "input_pos", ",", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "span_label", ",", "token_label", ",", "head_label", ",", "tail_label", ",", "ori_label", ",", "head_trans_label", ",", "tail_trans_label", ",", "bert_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.my_collate_fn": [[586, 614], ["len", "len", "range", "tmp.extend", "len", "isinstance", "torch.LongTensor", "isinstance", "torch.LongTensor().reshape", "len", "isinstance", "isinstance", "isinstance", "torch.LongTensor", "torch.LongTensor().reshape", "isinstance", "torch.FloatTensor().reshape", "torch.FloatTensor().reshape", "len", "isinstance", "torch.LongTensor", "torch.FloatTensor().reshape", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor().reshape", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["", "", "def", "my_collate_fn", "(", "batch", ")", ":", "\n", "    ", "type_count", "=", "len", "(", "batch", "[", "0", "]", ")", "\n", "batch_size", "=", "len", "(", "batch", ")", "\n", "output", "=", "(", ")", "\n", "for", "i", "in", "range", "(", "type_count", ")", ":", "\n", "        ", "tmp", "=", "[", "]", "\n", "for", "item", "in", "batch", ":", "\n", "            ", "tmp", ".", "extend", "(", "item", "[", "i", "]", ")", "\n", "", "if", "len", "(", "tmp", ")", "<=", "batch_size", ":", "\n", "            ", "output", "+=", "(", "torch", ".", "LongTensor", "(", "tmp", ")", ",", ")", "\n", "", "elif", "isinstance", "(", "tmp", "[", "0", "]", ",", "int", ")", ":", "\n", "            ", "output", "+=", "(", "torch", ".", "LongTensor", "(", "tmp", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", ",", ")", "\n", "", "elif", "isinstance", "(", "tmp", "[", "0", "]", ",", "list", ")", ":", "\n", "            ", "dim_y", "=", "len", "(", "tmp", "[", "0", "]", ")", "\n", "if", "isinstance", "(", "tmp", "[", "0", "]", "[", "0", "]", ",", "int", ")", ":", "\n", "                ", "output", "+=", "(", "torch", ".", "LongTensor", "(", "tmp", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "dim_y", ")", ",", ")", "\n", "", "elif", "isinstance", "(", "tmp", "[", "0", "]", "[", "0", "]", ",", "float", ")", ":", "\n", "                ", "output", "+=", "(", "torch", ".", "FloatTensor", "(", "tmp", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "dim_y", ")", ",", ")", "\n", "", "elif", "isinstance", "(", "tmp", "[", "0", "]", "[", "0", "]", ",", "list", ")", ":", "\n", "                ", "dim_z", "=", "len", "(", "tmp", "[", "0", "]", "[", "0", "]", ")", "\n", "output", "+=", "(", "torch", ".", "FloatTensor", "(", "tmp", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "dim_y", ",", "dim_z", ")", ",", ")", "\n", "", "elif", "isinstance", "(", "tmp", "[", "0", "]", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "dim_z", "=", "tmp", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "-", "1", "]", "\n", "output", "+=", "(", "torch", ".", "FloatTensor", "(", "tmp", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "dim_y", ",", "dim_z", ")", ",", ")", "\n", "", "", "elif", "isinstance", "(", "tmp", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "dim_y", "=", "tmp", "[", "0", "]", ".", "shape", "[", "-", "1", "]", "\n", "output", "+=", "(", "torch", ".", "FloatTensor", "(", "tmp", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "dim_y", ")", ",", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.get_cls_num_list": [[616, 647], ["open", "ujson.load", "version.find", "version.find", "version.find", "len", "len", "len", "type_list.index"], "function", ["None"], ["", "def", "get_cls_num_list", "(", "version", ")", ":", "\n", "    ", "mode", "=", "'train'", "\n", "if", "version", "==", "\"ace04\"", ":", "\n", "        ", "file_path", "=", "f\"data/ace04/ace04_{mode}_context.json\"", "\n", "", "if", "version", "==", "\"ace05\"", ":", "\n", "        ", "file_path", "=", "f\"data/ace05/ace05_{mode}_context.json\"", "\n", "", "if", "version", "==", "\"genia91\"", ":", "\n", "        ", "if", "mode", "==", "\"train\"", ":", "\n", "            ", "file_path", "=", "\"data/genia91/genia_train_dev_context.json\"", "\n", "", "else", ":", "\n", "            ", "file_path", "=", "\"data/genia91/genia_test_context.json\"", "\n", "", "", "if", "version", "==", "\"kbp\"", ":", "\n", "        ", "file_path", "=", "f\"data/kbp/{mode}_context.json\"", "\n", "\n", "", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "df", "=", "ujson", ".", "load", "(", "f", ")", "\n", "\n", "", "if", "version", ".", "find", "(", "\"genia\"", ")", ">=", "0", ":", "\n", "        ", "type_list", "=", "[", "\"protein\"", ",", "\"cell_type\"", ",", "\"cell_line\"", ",", "\"DNA\"", ",", "\"RNA\"", "]", "\n", "", "if", "version", ".", "find", "(", "'ace'", ")", ">=", "0", ":", "\n", "        ", "type_list", "=", "[", "'PER'", ",", "'LOC'", ",", "'ORG'", ",", "'GPE'", ",", "'FAC'", ",", "'VEH'", ",", "'WEA'", "]", "\n", "", "if", "version", ".", "find", "(", "'kbp'", ")", ">=", "0", ":", "\n", "        ", "type_list", "=", "[", "'GPE'", ",", "'FAC'", ",", "'ORG'", ",", "'PER'", ",", "'LOC'", "]", "\n", "\n", "", "count_list", "=", "[", "0", "]", "*", "(", "len", "(", "type_list", ")", "+", "1", ")", "\n", "for", "now_df", "in", "df", ":", "\n", "        ", "n", "=", "len", "(", "now_df", "[", "'tokens'", "]", ")", "\n", "count_list", "[", "-", "1", "]", "+=", "n", "*", "(", "n", "+", "1", ")", "//", "2", "-", "len", "(", "now_df", "[", "'entities'", "]", ")", "\n", "for", "ent", "in", "now_df", "[", "'entities'", "]", ":", "\n", "            ", "count_list", "[", "type_list", ".", "index", "(", "ent", "[", "'type'", "]", ")", "]", "+=", "1", "\n", "", "", "return", "count_list", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.input_util.prepare_input": [[4, 41], ["range", "len", "batch_lst.append", "batch[].to"], "function", ["None"], ["def", "prepare_input", "(", "batch", ",", "args", "=", "None", ",", "train", "=", "True", ",", "accelerator", "=", "False", ",", "device", "=", "None", ")", ":", "\n", "    ", "if", "args", "is", "not", "None", ":", "\n", "        ", "device", "=", "args", ".", "device", "\n", "", "batch_lst", "=", "[", "]", "\n", "if", "not", "accelerator", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "batch", ")", ")", ":", "\n", "            ", "batch_lst", ".", "append", "(", "batch", "[", "i", "]", ".", "to", "(", "device", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "batch_lst", "=", "batch", "\n", "\n", "", "inputs", "=", "{", "'input_ids'", ":", "batch_lst", "[", "0", "]", ",", "\n", "'attention_mask'", ":", "batch_lst", "[", "1", "]", ",", "\n", "'ce_mask'", ":", "batch_lst", "[", "2", "]", ",", "\n", "'token_type_ids'", ":", "batch_lst", "[", "3", "]", ",", "\n", "'subword_group'", ":", "batch_lst", "[", "4", "]", ",", "\n", "'context_ce_mask'", ":", "batch_lst", "[", "5", "]", ",", "\n", "'context_subword_group'", ":", "batch_lst", "[", "6", "]", ",", "\n", "'context_map'", ":", "batch_lst", "[", "7", "]", ",", "\n", "'input_word'", ":", "batch_lst", "[", "8", "]", ",", "\n", "'input_char'", ":", "batch_lst", "[", "9", "]", ",", "\n", "'input_pos'", ":", "batch_lst", "[", "10", "]", ",", "\n", "'l_input_word'", ":", "batch_lst", "[", "11", "]", ",", "\n", "'l_input_char'", ":", "batch_lst", "[", "12", "]", ",", "\n", "'l_input_pos'", ":", "batch_lst", "[", "13", "]", ",", "\n", "'r_input_word'", ":", "batch_lst", "[", "14", "]", ",", "\n", "'r_input_char'", ":", "batch_lst", "[", "15", "]", ",", "\n", "'r_input_pos'", ":", "batch_lst", "[", "16", "]", "}", "\n", "if", "train", ":", "\n", "        ", "inputs", "[", "'label'", "]", "=", "batch_lst", "[", "17", "]", "\n", "if", "args", ".", "model", "==", "\"TokenModel\"", "or", "args", ".", "token_aux", ":", "\n", "            ", "inputs", "[", "'token_label'", "]", "=", "batch_lst", "[", "18", "]", "\n", "", "if", "args", ".", "trans_aux", ":", "\n", "            ", "inputs", "[", "'head_trans'", "]", "=", "batch_lst", "[", "22", "]", "\n", "inputs", "[", "'tail_trans'", "]", "=", "batch_lst", "[", "23", "]", "\n", "", "", "if", "args", ".", "freeze_bert", ":", "\n", "        ", "inputs", "[", "'bert_embed'", "]", "=", "batch_lst", "[", "-", "1", "]", "\n", "", "return", "inputs", "\n", "", ""]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.main_name": [[19, 32], ["bert_name_or_path.lower().find", "bert_name_or_path.find", "bert_name_or_path.split", "bert_name_or_path.lower"], "function", ["None"], ["def", "main_name", "(", "bert_name_or_path", ")", ":", "\n", "    ", "if", "bert_name_or_path", ".", "lower", "(", ")", ".", "find", "(", "'kebio'", ")", ">=", "0", ":", "\n", "        ", "return", "'kebio'", "\n", "", "if", "bert_name_or_path", ".", "find", "(", "'/'", ")", "==", "-", "1", ":", "\n", "        ", "if", "bert_name_or_path", "in", "BERT_ABBV", ":", "\n", "            ", "return", "BERT_ABBV", "[", "bert_name_or_path", "]", "\n", "", "return", "bert_name_or_path", "\n", "", "if", "bert_name_or_path", "[", "-", "1", "]", "==", "\"/\"", ":", "\n", "        ", "bert_name_or_path", "=", "bert_name_or_path", "[", ":", "-", "1", "]", "\n", "", "name", "=", "bert_name_or_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "name", "in", "BERT_ABBV", ":", "\n", "        ", "return", "BERT_ABBV", "[", "name", "]", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.main_name_list": [[33, 35], ["train_utils.main_name", "bert_name_or_path_list.split"], "function", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.main_name"], ["", "def", "main_name_list", "(", "bert_name_or_path_list", ")", ":", "\n", "    ", "return", "\",\"", ".", "join", "(", "[", "main_name", "(", "bert_name_or_path", ")", "for", "bert_name_or_path", "in", "bert_name_or_path_list", ".", "split", "(", "','", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.generate_output_folder_name": [[36, 150], ["float", "train_utils.main_name_list", "train_utils.main_name_list", "args.model.find", "float", "str", "str", "args.bert_output.split", "int", "int"], "function", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.main_name_list", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.main_name_list"], ["", "def", "generate_output_folder_name", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "model", "in", "[", "\"SpanModel\"", "]", ":", "\n", "        ", "args_list", "=", "[", "args", ".", "version", ",", "\n", "args", ".", "model", ",", "\n", "main_name_list", "(", "args", ".", "bert_name_or_path", ")", ",", "\n", "args", ".", "score", "]", "\n", "if", "args", ".", "negative_sampling", ":", "\n", "            ", "args_list", "+=", "[", "f\"negd_{args.hard_neg_dist}\"", "]", "\n", "", "", "if", "args", ".", "model", "in", "[", "\"SpanAttModel\"", ",", "\"SpanAttModelV2\"", ",", "\"SpanAttModelV3\"", "]", ":", "\n", "        ", "args_list", "=", "[", "args", ".", "version", ",", "\n", "args", ".", "model", ",", "\n", "main_name_list", "(", "args", ".", "bert_name_or_path", ")", ",", "\n", "args", ".", "class_loss_weight", ",", "\n", "args", ".", "filter_loss_weight", ",", "\n", "args", ".", "span_layer_count", ",", "\n", "args", ".", "max_span_count", "]", "\n", "if", "args", ".", "unscale", ":", "\n", "            ", "args_list", "+=", "[", "'uns'", "]", "\n", "", "", "if", "args", ".", "not_correct_bias", ":", "\n", "        ", "args_list", "+=", "[", "'ncb'", "]", "\n", "", "if", "args", ".", "max_grad_norm", "!=", "0.1", ":", "\n", "        ", "args_list", "+=", "[", "f'norm_{args.max_grad_norm}'", "]", "\n", "", "if", "args", ".", "score", "in", "[", "\"tri_attention\"", ",", "\"tri_affine\"", "]", ":", "\n", "        ", "args_list", "+=", "[", "args", ".", "att_dim", ",", "args", ".", "init_std", "]", "\n", "if", "args", ".", "layer_norm", ":", "\n", "            ", "args_list", "+=", "[", "'ln'", "]", "\n", "", "if", "args", ".", "no_tri_mask", ":", "\n", "            ", "args_list", "+=", "[", "'ntm'", "]", "\n", "# encoder related", "\n", "", "", "args_list", "+=", "[", "args", ".", "subword_aggr", "]", "\n", "if", "args", ".", "use_context", ":", "\n", "        ", "args_list", "+=", "[", "'context'", "]", "\n", "if", "args", ".", "context_lstm", ":", "\n", "            ", "args_list", "+=", "[", "'lstm'", "]", "\n", "", "", "if", "args", ".", "bert_before_lstm", ":", "\n", "        ", "args_list", "+=", "[", "'bbl'", "]", "\n", "", "if", "args", ".", "reinit", ">", "0", ":", "\n", "        ", "args_list", "+=", "[", "f'reinit_{args.reinit}'", "]", "\n", "", "if", "args", ".", "freeze_bert", ":", "\n", "        ", "args_list", "+=", "[", "'frz'", "]", "\n", "", "if", "args", ".", "rel_pos_attn", "or", "args", ".", "rel_pos", ":", "\n", "        ", "if", "args", ".", "rel_pos_attn", ":", "\n", "            ", "args_list", "+=", "[", "'relatt'", "]", "\n", "", "if", "args", ".", "rel_pos", ":", "\n", "            ", "args_list", "+=", "[", "'rel'", "]", "\n", "", "args_list", "+=", "[", "args", ".", "rel_k", "]", "\n", "", "if", "args", ".", "word", ":", "\n", "        ", "args_list", "+=", "[", "f'word_{args.word_dp}'", "]", "\n", "if", "args", ".", "word_embed", ":", "\n", "            ", "args_list", "+=", "[", "f'{args.word_embed}'", "]", "\n", "", "if", "args", ".", "word_freeze", ":", "\n", "            ", "args_list", "+=", "[", "\"wfz\"", "]", "\n", "", "", "if", "args", ".", "char", ":", "\n", "        ", "args_list", "+=", "[", "f'char_{args.char_dim}_{args.char_dp}'", "]", "\n", "", "if", "args", ".", "pos", ":", "\n", "        ", "args_list", "+=", "[", "f'pos_{args.pos_dim}_{args.pos_dp}'", "]", "\n", "", "args_list", "+=", "[", "f'{args.agg_layer}_{args.lstm_dim}_{args.lstm_dp}_{args.lstm_layer}'", "]", "\n", "if", "args", ".", "bert_output", "!=", "'last'", ":", "\n", "        ", "args_list", "+=", "[", "args", ".", "bert_output", ".", "split", "(", "'-'", ")", "[", "0", "]", "]", "\n", "", "if", "args", ".", "act", "!=", "\"relu\"", ":", "\n", "        ", "args_list", "+=", "[", "args", ".", "act", "]", "\n", "", "if", "args", ".", "ema", ">", "0.", ":", "\n", "        ", "args_list", "+=", "[", "f'ema_{args.ema}'", "]", "\n", "", "if", "args", ".", "share_parser", ":", "\n", "         ", "args_list", "+=", "[", "'sps'", "]", "\n", "", "if", "args", ".", "type_attention", ":", "\n", "        ", "args_list", "+=", "[", "'type_att'", "]", "\n", "", "if", "args", ".", "token_aux", ":", "\n", "        ", "args_list", "+=", "[", "f'taux_{args.token_schema}_{args.token_aux_weight}'", "]", "\n", "", "if", "args", ".", "trans_aux", ":", "\n", "        ", "args_list", "+=", "[", "f'traux_{args.trans_aux_weight}'", "]", "\n", "", "if", "args", ".", "warmup_ratio", "!=", "0.1", ":", "\n", "        ", "args_list", "+=", "[", "f'warm{args.warmup_ratio}'", "]", "\n", "", "if", "args", ".", "aux_loss", "and", "args", ".", "model", ".", "find", "(", "\"DETR\"", ")", ">=", "0", ":", "\n", "        ", "args_list", "+=", "[", "'aux'", "]", "\n", "", "if", "args", ".", "pre_norm", ":", "\n", "        ", "args_list", "+=", "[", "'prenorm'", "]", "\n", "", "if", "args", ".", "scale", "!=", "\"none\"", ":", "\n", "        ", "args_list", "+=", "[", "args", ".", "scale", "]", "\n", "", "if", "args", ".", "weight_scheduler", "!=", "\"none\"", ":", "\n", "        ", "args_list", "+=", "[", "args", ".", "weight_scheduler", "]", "\n", "", "if", "args", ".", "loss", "==", "\"ce\"", ":", "\n", "        ", "if", "args", ".", "na_weight", "!=", "1.0", ":", "\n", "            ", "args_list", "+=", "[", "f\"ce_{args.na_weight}\"", "]", "\n", "", "", "if", "args", ".", "loss", "!=", "\"ce\"", ":", "\n", "        ", "if", "args", ".", "loss", "==", "\"focal\"", ":", "\n", "            ", "args_list", "+=", "[", "f\"focal_{args.focal_gamma}_{args.focal_alpha}\"", "]", "\n", "", "elif", "args", ".", "loss", "==", "\"ldam\"", ":", "\n", "            ", "args_list", "+=", "[", "f\"ldam_{args.ldam_max_m}_{args.ldam_s}\"", "]", "\n", "", "elif", "args", ".", "loss", "==", "\"dice\"", ":", "\n", "            ", "args_list", "+=", "[", "f\"dice_{args.dice_alpha}_{args.dice_gamma}\"", "]", "\n", "", "elif", "args", ".", "loss", "==", "\"two\"", ":", "\n", "            ", "args_list", "+=", "[", "f\"two_{args.na_weight}\"", "]", "\n", "", "", "if", "float", "(", "args", ".", "kl_alpha", ")", ">", "0.0", "and", "args", ".", "kl", "!=", "\"none\"", ":", "\n", "        ", "args_list", "+=", "[", "f\"kl_{args.kl}_{args.kl_alpha}\"", "]", "\n", "", "if", "float", "(", "args", ".", "label_smoothing", ")", ">=", "0.0", ":", "\n", "        ", "args_list", "+=", "[", "str", "(", "args", ".", "label_smoothing", ")", "]", "\n", "", "args_list", "+=", "[", "f'len_{args.truncate_length}'", ",", "\n", "f'epoch_{args.train_epoch}'", ",", "\n", "f'lr_{args.learning_rate}_{args.encoder_learning_rate}_{args.task_learning_rate}'", ",", "\n", "f'bsz_{int(args.batch_size) * int(args.gradient_accumulation_steps)}'", "]", "\n", "if", "args", ".", "no_lr_decay", ":", "\n", "        ", "args_list", "+=", "[", "'nld'", "]", "\n", "", "if", "args", ".", "reduce_last", ":", "\n", "        ", "args_list", "+=", "[", "'rdl'", "]", "\n", "", "if", "args", ".", "seed", "!=", "-", "1", ":", "\n", "        ", "args_list", "+=", "[", "f's{args.seed}'", "]", "\n", "", "if", "args", ".", "no_linear_class", ":", "\n", "        ", "args_list", "+=", "[", "'nolin'", "]", "\n", "", "args_list", "+=", "[", "'tti'", "]", "# token_type_ids", "\n", "args_list", "+=", "[", "f'mlpdp_{args.dp}'", "]", "\n", "args_list", "+=", "[", "args", ".", "tag", "]", "\n", "output_basename", "=", "\"-\"", ".", "join", "(", "[", "str", "(", "arg", ")", "for", "arg", "in", "args_list", "]", ")", "\n", "return", "output_basename", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.generate_optimizer_scheduler": [[152, 227], ["transformers.AdamW", "optimizer_grouped_parameters.extend", "optimizer_grouped_parameters.extend", "optimizer_grouped_parameters.extend", "optimizer_grouped_parameters.extend", "transformers.get_linear_schedule_with_warmup", "int", "model.named_parameters", "model.named_parameters", "model.named_parameters", "model.named_parameters", "model.named_parameters", "model.named_parameters", "model.named_parameters", "model.named_parameters", "any", "any", "any", "any", "float", "any", "n.find", "n.find", "any", "n.find", "n.find", "n.find", "n.find", "any", "n.find", "n.find", "any", "n.find", "n.find", "n.find", "n.find"], "function", ["None"], ["", "def", "generate_optimizer_scheduler", "(", "args", ",", "model", ",", "len_train_dataloader", ")", ":", "\n", "    ", "no_decay", "=", "[", "\"bias\"", ",", "\"LayerNorm.weight\"", "]", "\n", "optimizer_grouped_parameters", "=", "[", "]", "\n", "learning_rate", "=", "args", ".", "learning_rate", "\n", "encoder_learning_rate", "=", "args", ".", "encoder_learning_rate", "if", "args", ".", "encoder_learning_rate", ">", "0", "else", "learning_rate", "\n", "decoder_learning_rate", "=", "args", ".", "decoder_learning_rate", "if", "args", ".", "decoder_learning_rate", ">", "0", "else", "learning_rate", "\n", "task_learning_rate", "=", "args", ".", "task_learning_rate", "if", "args", ".", "task_learning_rate", ">", "0", "else", "learning_rate", "\n", "\n", "bert_params", "=", "[", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "and", "n", ".", "find", "(", "'bert'", ")", ">=", "0", "]", ",", "\n", "\"weight_decay\"", ":", "args", ".", "weight_decay", ",", "\n", "\"lr\"", ":", "learning_rate", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "and", "n", ".", "find", "(", "'bert'", ")", ">=", "0", "]", ",", "\n", "\"weight_decay\"", ":", "0.0", ",", "\n", "\"lr\"", ":", "learning_rate", "\n", "}", ",", "\n", "]", "\n", "encoder_params", "=", "[", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "and", "n", ".", "find", "(", "'encoder'", ")", ">=", "0", "and", "n", ".", "find", "(", "'bert'", ")", "==", "-", "1", "]", ",", "\n", "\"weight_decay\"", ":", "args", ".", "weight_decay", ",", "\n", "\"lr\"", ":", "encoder_learning_rate", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "and", "n", ".", "find", "(", "'encoder'", ")", ">=", "0", "and", "n", ".", "find", "(", "'bert'", ")", "==", "-", "1", "]", ",", "\n", "\"weight_decay\"", ":", "0.0", ",", "\n", "\"lr\"", ":", "encoder_learning_rate", "\n", "}", ",", "\n", "]", "\n", "decoder_params", "=", "[", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "and", "n", ".", "find", "(", "'decoder'", ")", ">=", "0", "]", ",", "\n", "\"weight_decay\"", ":", "args", ".", "weight_decay", ",", "\n", "\"lr\"", ":", "decoder_learning_rate", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "and", "n", ".", "find", "(", "'decoder'", ")", ">=", "0", "]", ",", "\n", "\"weight_decay\"", ":", "0.0", ",", "\n", "\"lr\"", ":", "decoder_learning_rate", "\n", "}", ",", "\n", "]", "\n", "task_params", "=", "[", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "and", "n", ".", "find", "(", "'encoder'", ")", "==", "-", "1", "and", "n", ".", "find", "(", "'decoder'", ")", "==", "-", "1", "]", ",", "\n", "\"weight_decay\"", ":", "args", ".", "weight_decay", ",", "\n", "\"lr\"", ":", "task_learning_rate", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "and", "n", ".", "find", "(", "'encoder'", ")", "==", "-", "1", "and", "n", ".", "find", "(", "'decoder'", ")", "==", "-", "1", "]", ",", "\n", "\"weight_decay\"", ":", "0.0", ",", "\n", "\"lr\"", ":", "task_learning_rate", "\n", "}", ",", "\n", "]", "\n", "\n", "if", "bert_params", "[", "0", "]", "[", "'params'", "]", "or", "bert_params", "[", "1", "]", "[", "'params'", "]", ":", "\n", "        ", "optimizer_grouped_parameters", ".", "extend", "(", "bert_params", ")", "\n", "", "if", "encoder_params", "[", "0", "]", "[", "'params'", "]", "or", "encoder_params", "[", "1", "]", "[", "'params'", "]", ":", "\n", "        ", "optimizer_grouped_parameters", ".", "extend", "(", "encoder_params", ")", "\n", "", "if", "decoder_params", "[", "0", "]", "[", "'params'", "]", "or", "decoder_params", "[", "1", "]", "[", "'params'", "]", ":", "\n", "        ", "optimizer_grouped_parameters", ".", "extend", "(", "decoder_params", ")", "\n", "", "if", "task_params", "[", "0", "]", "[", "'params'", "]", "or", "task_params", "[", "1", "]", "[", "'params'", "]", ":", "\n", "        ", "optimizer_grouped_parameters", ".", "extend", "(", "task_params", ")", "\n", "\n", "", "optimizer", "=", "AdamW", "(", "optimizer_grouped_parameters", ",", "eps", "=", "1e-8", ",", "correct_bias", "=", "not", "args", ".", "not_correct_bias", ")", "\n", "\n", "if", "not", "args", ".", "no_lr_decay", ":", "\n", "        ", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "\n", "num_warmup_steps", "=", "int", "(", "args", ".", "train_epoch", "*", "len_train_dataloader", "*", "float", "(", "args", ".", "warmup_ratio", ")", ")", ",", "\n", "num_training_steps", "=", "args", ".", "train_epoch", "*", "len_train_dataloader", ")", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "None", "\n", "", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.train_utils.weight_scheduler": [[228, 235], ["None"], "function", ["None"], ["", "def", "weight_scheduler", "(", "epoch_idx", ",", "total_epoch", "=", "None", ",", "args", "=", "None", ",", "method", "=", "\"square\"", ")", ":", "\n", "    ", "if", "method", "==", "\"square\"", ":", "\n", "        ", "if", "args", "is", "not", "None", ":", "\n", "            ", "total_epoch", "=", "args", ".", "train_epoch", "\n", "", "return", "1", "-", "(", "epoch_idx", "/", "total_epoch", ")", "**", "2", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.tint": [[7, 11], ["isinstance", "t.item"], "function", ["None"], ["def", "tint", "(", "t", ")", ":", "\n", "    ", "if", "isinstance", "(", "t", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "t", ".", "item", "(", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.decode": [[12, 40], ["model.eval", "torch.no_grad", "torch.no_grad", "input_util.prepare_input", "model.predict", "range", "ema.average_parameters", "batch[].size", "list", "predict_labels.append", "input_util.prepare_input", "model.predict", "range", "set", "batch[].size", "list", "predict_labels.append", "set", "evaluation.tint", "evaluation.tint", "evaluation.tint", "evaluation.tint", "evaluation.tint", "evaluation.tint"], "function", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.input_util.prepare_input", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span.SpanModel.predict", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.input_util.prepare_input", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span.SpanModel.predict", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.tint", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.tint", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.tint", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.tint", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.tint", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.tint"], ["", "def", "decode", "(", "dataloader", ",", "model", ",", "args", ",", "ema", "=", "None", ")", ":", "\n", "# if accelerator is not None:", "\n", "#     return decode_accl(dataloader, model, args, accelerator)", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "predict_labels", "=", "[", "]", "\n", "\n", "if", "ema", "is", "None", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch", "in", "dataloader", ":", "\n", "                ", "inputs", "=", "prepare_input", "(", "batch", ",", "args", ",", "train", "=", "False", ")", "\n", "result", "=", "model", ".", "predict", "(", "**", "inputs", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch", "[", "0", "]", ".", "size", "(", "0", ")", ")", ":", "\n", "                    ", "predict_label", "=", "list", "(", "set", "(", "[", "f'{tint(l[0])},{tint(l[1]) + 1} {dataloader.dataset.id2type[tint(l[2])]}'", "for", "l", "in", "result", "[", "i", "]", "]", ")", ")", "\n", "predict_labels", ".", "append", "(", "predict_label", ")", "\n", "", "", "", "", "else", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "with", "ema", ".", "average_parameters", "(", ")", ":", "\n", "                ", "for", "batch", "in", "dataloader", ":", "\n", "                    ", "inputs", "=", "prepare_input", "(", "batch", ",", "args", ",", "train", "=", "False", ")", "\n", "result", "=", "model", ".", "predict", "(", "**", "inputs", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch", "[", "0", "]", ".", "size", "(", "0", ")", ")", ":", "\n", "                        ", "predict_label", "=", "list", "(", "set", "(", "[", "f'{tint(l[0])},{tint(l[1]) + 1} {dataloader.dataset.id2type[tint(l[2])]}'", "for", "l", "in", "result", "[", "i", "]", "]", ")", ")", "\n", "predict_labels", ".", "append", "(", "predict_label", ")", "\n", "\n", "", "", "", "", "", "return", "predict_labels", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.decode_threshold": [[41, 62], ["isinstance", "model.eval", "torch.no_grad", "tqdm.tqdm", "input_util.prepare_input", "model.predict", "range", "batch[].size", "enumerate", "list", "predict_labels[].append", "set", "evaluation.tint", "evaluation.tint", "evaluation.tint"], "function", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.input_util.prepare_input", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span.SpanModel.predict", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.tint", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.tint", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.tint"], ["", "def", "decode_threshold", "(", "dataloader", ",", "model", ",", "args", "=", "None", ",", "accelerator", "=", "None", ",", "threshold_list", "=", "[", "0.5", "]", ",", "device", "=", "None", ")", ":", "\n", "    ", "if", "accelerator", "is", "not", "None", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "isinstance", "(", "threshold_list", ",", "float", ")", ":", "\n", "        ", "threshold_list", "=", "[", "threshold_list", "]", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "predict_labels", "=", "[", "[", "]", "for", "_", "in", "threshold_list", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "            ", "inputs", "=", "prepare_input", "(", "batch", ",", "args", ",", "train", "=", "False", ",", "device", "=", "device", ")", "\n", "result", "=", "model", ".", "predict", "(", "**", "inputs", ")", "\n", "\n", "for", "i", "in", "range", "(", "batch", "[", "0", "]", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "for", "idx", ",", "threshold", "in", "enumerate", "(", "threshold_list", ")", ":", "\n", "                    ", "predict_label", "=", "list", "(", "set", "(", "[", "f'{tint(l[0])},{tint(l[1]) + 1} {dataloader.dataset.id2type[tint(l[2])]}'", "for", "l", "in", "result", "[", "i", "]", "if", "l", "[", "3", "]", ">=", "threshold", "]", ")", ")", "\n", "predict_labels", "[", "idx", "]", ".", "append", "(", "predict_label", ")", "\n", "\n", "", "", "", "", "return", "predict_labels", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.write_predict": [[63, 67], ["open", "f.write"], "function", ["None"], ["", "def", "write_predict", "(", "predict_labels", ",", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "        ", "for", "predcit_label", "in", "predict_labels", ":", "\n", "            ", "f", ".", "write", "(", "'|'", ".", "join", "(", "predcit_label", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.evaluation.metric": [[69, 104], ["range", "len", "true_labels.extend", "len", "len", "true_label.append"], "function", ["None"], ["", "", "", "def", "metric", "(", "dataset", ",", "predict_labels_0", ",", "suffix", "=", "None", ")", ":", "\n", "    ", "correct", "=", "0", "\n", "predict_count", "=", "0", "\n", "label_count", "=", "0", "\n", "\n", "true_labels", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "true_label", "=", "[", "]", "\n", "for", "ent", "in", "dataset", ".", "df", "[", "i", "]", "[", "'entities'", "]", ":", "\n", "            ", "st", "=", "ent", "[", "'start'", "]", "\n", "ed", "=", "ent", "[", "'end'", "]", "\n", "tp", "=", "ent", "[", "'type'", "]", "\n", "true_label", ".", "append", "(", "f'{st},{ed} {tp}'", ")", "\n", "", "true_labels", ".", "extend", "(", "true_label", ")", "\n", "predict_label", "=", "predict_labels_0", "[", "i", "]", "\n", "\n", "for", "l", "in", "predict_label", ":", "\n", "            ", "if", "l", "in", "true_label", ":", "\n", "                ", "correct", "+=", "1", "\n", "", "", "predict_count", "+=", "len", "(", "predict_label", ")", "\n", "label_count", "+=", "len", "(", "true_label", ")", "\n", "", "if", "correct", "==", "0", ":", "\n", "        ", "p", "=", "0", "\n", "r", "=", "0", "\n", "", "else", ":", "\n", "        ", "p", "=", "correct", "/", "predict_count", "\n", "r", "=", "correct", "/", "label_count", "\n", "", "if", "p", "==", "0", "or", "r", "==", "0", ":", "\n", "        ", "f1", "=", "0", "\n", "", "else", ":", "\n", "        ", "f1", "=", "2", "*", "p", "*", "r", "/", "(", "p", "+", "r", ")", "\n", "\n", "", "if", "suffix", "is", "None", ":", "\n", "        ", "return", "{", "'p'", ":", "p", ",", "'r'", ":", "r", ",", "'f1'", ":", "f1", "}", "\n", "", "return", "{", "f'{suffix}_p'", ":", "p", ",", "f'{suffix}_r'", ":", "r", ",", "f'{suffix}_f1'", ":", "f1", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.__init__": [[15, 115], ["torch.nn.Module.__init__", "model.text_encoder.TextEncoder", "torch.nn.ModuleList", "torch.nn.ModuleList", "span_att_v2.SpanAttModelV2.score_setting.get", "span_att_v2.SpanAttModelV2.score_setting.get", "span_att_v2.SpanAttModelV2.parser_list.append", "model.losses.create_loss_function", "span_att_v2.SpanAttModelV2.encoder_config_dict[].get", "span_att_v2.SpanAttModelV2.encoder_config_dict[].get", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "span_att_v2.SpanAttModelV2.loss_config.get", "span_att_v2.SpanAttModelV2.loss_config.get", "span_att_v2.SpanAttModelV2.loss_config.get", "span_att_v2.SpanAttModelV2.encoder_config_dict[].get", "span_att_v2.SpanAttModelV2.score_setting.get", "model.parser.TriAffineParser", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "model.parser.Biaffine", "torch.nn.Dropout", "torch.nn.Dropout", "model.parser.TriAffine", "model.parser.TriAffine", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "span_att_v2.SpanAttModelV2.loss_config.get", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "torch.nn.KLDivLoss", "span_att_v2.SpanAttModelV2.score_setting.get", "span_att_v2.SpanAttModelV2.score_setting.get", "span_att_v2.SpanAttModelV2.score_setting.get", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.losses.create_loss_function"], ["    ", "def", "__init__", "(", "self", ",", "bert_model_path", ",", "encoder_config_dict", ",", "\n", "num_class", ",", "score_setting", ",", "loss_config", ")", ":", "\n", "        ", "super", "(", "SpanAttModelV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "TextEncoder", "(", "bert_model_path", ",", "encoder_config_dict", "[", "0", "]", ",", "encoder_config_dict", "[", "1", "]", ",", "encoder_config_dict", "[", "2", "]", ",", "encoder_config_dict", "[", "3", "]", ",", "encoder_config_dict", "[", "4", "]", ")", "\n", "self", ".", "encoder_config_dict", "=", "encoder_config_dict", "\n", "self", ".", "hidden_dim", "=", "self", ".", "encoder", ".", "bert_hidden_dim", "\n", "\n", "self", ".", "true_class", "=", "num_class", "\n", "self", ".", "num_class", "=", "self", ".", "true_class", "+", "1", "\n", "\n", "self", ".", "score_setting", "=", "score_setting", "\n", "self", ".", "parser_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "dropout", "=", "self", ".", "score_setting", ".", "get", "(", "'dp'", ",", "0.2", ")", "\n", "assert", "self", ".", "score_setting", ".", "get", "(", "'tri_affine'", ",", "False", ")", "\n", "self", ".", "parser_list", ".", "append", "(", "TriAffineParser", "(", "self", ".", "hidden_dim", ",", "\n", "self", ".", "num_class", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'att_dim'", ",", "None", ")", ",", "\n", "not", "self", ".", "score_setting", "[", "'no_tri_mask'", "]", ",", "\n", "self", ".", "score_setting", "[", "'reduce_last'", "]", ",", "\n", "True", ",", "\n", "self", ".", "dropout", ",", "\n", "self", ".", "score_setting", "[", "'scale'", "]", ",", "\n", "self", ".", "score_setting", "[", "'init_std'", "]", ",", "\n", "self", ".", "score_setting", "[", "'layer_norm'", "]", ")", ")", "\n", "# self.dropout_list.append(nn.Dropout(self.score_setting.get('dp', 0.2)))", "\n", "\n", "# self.class_loss_fn = nn.CrossEntropyLoss()", "\n", "self", ".", "loss_config", "=", "loss_config", "\n", "self", ".", "loss_config", "[", "'true_class'", "]", "=", "self", ".", "true_class", "\n", "self", ".", "class_loss_fn", "=", "create_loss_function", "(", "self", ".", "loss_config", ")", "\n", "\n", "self", ".", "_hidden_dim", "=", "self", ".", "score_setting", "[", "'att_dim'", "]", "\n", "\n", "self", ".", "max_span_count", "=", "self", ".", "encoder_config_dict", "[", "5", "]", ".", "get", "(", "'max_span_count'", ",", "30", ")", "\n", "\n", "self", ".", "act", "=", "self", ".", "encoder_config_dict", "[", "5", "]", ".", "get", "(", "'act'", ",", "'relu'", ")", "\n", "\n", "self", ".", "linear_h2", "=", "MLP", "(", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ",", "self", ".", "act", ")", "\n", "self", ".", "linear_t2", "=", "MLP", "(", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ",", "self", ".", "act", ")", "\n", "self", ".", "linear_s2", "=", "MLP", "(", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ",", "self", ".", "act", ")", "\n", "self", ".", "linear_h3", "=", "MLP", "(", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ",", "self", ".", "act", ")", "\n", "self", ".", "linear_t3", "=", "MLP", "(", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ",", "self", ".", "act", ")", "\n", "self", ".", "linear_s3", "=", "MLP", "(", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ",", "self", ".", "act", ")", "\n", "\n", "self", ".", "token_aux_loss", "=", "False", "\n", "if", "'token_schema'", "in", "self", ".", "loss_config", ":", "\n", "            ", "self", ".", "token_aux_loss", "=", "True", "\n", "self", ".", "token_schema", "=", "loss_config", "[", "'token_schema'", "]", "\n", "if", "self", ".", "token_schema", "==", "\"BE\"", ":", "\n", "                ", "self", ".", "token_label_count", "=", "2", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIE\"", ":", "\n", "                ", "self", ".", "token_label_count", "=", "3", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIES\"", ":", "\n", "                ", "self", ".", "token_label_count", "=", "4", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BE-type\"", ":", "\n", "                ", "self", ".", "token_label_count", "=", "2", "*", "self", ".", "true_class", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIE-type\"", ":", "\n", "                ", "self", ".", "token_label_count", "=", "3", "*", "self", ".", "true_class", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIES-type\"", ":", "\n", "                ", "self", ".", "token_label_count", "=", "4", "*", "self", ".", "true_class", "\n", "", "self", ".", "linear_token", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "token_label_count", ")", "\n", "self", ".", "token_aux_weight", "=", "loss_config", "[", "'token_aux_weight'", "]", "\n", "self", ".", "token_dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "score_setting", ".", "get", "(", "'dp'", ",", "0.2", ")", ")", "\n", "\n", "", "self", ".", "negative_sampling", "=", "False", "\n", "if", "self", ".", "loss_config", ".", "get", "(", "'negative_sampling'", ",", "False", ")", ":", "\n", "            ", "self", ".", "negative_sampling", "=", "True", "\n", "self", ".", "hard_neg_dist", "=", "self", ".", "loss_config", "[", "'hard_neg_dist'", "]", "\n", "\n", "", "self", ".", "trans_aux_loss", "=", "False", "\n", "if", "self", ".", "loss_config", ".", "get", "(", "'trans_aux'", ",", "False", ")", ":", "\n", "            ", "self", ".", "trans_aux_loss", "=", "True", "\n", "self", ".", "trans_bi", "=", "Biaffine", "(", "self", ".", "hidden_dim", ",", "2", ")", "\n", "self", ".", "trans_dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "score_setting", ".", "get", "(", "'dp'", ",", "0.2", ")", ")", "\n", "self", ".", "trans_aux_weight", "=", "loss_config", "[", "'trans_aux_weight'", "]", "\n", "\n", "", "self", ".", "filter_loss_weight", "=", "self", ".", "loss_config", ".", "get", "(", "'filter_loss_weight'", ",", "1.0", ")", "\n", "\n", "self", ".", "share_parser", "=", "self", ".", "encoder_config_dict", "[", "5", "]", ".", "get", "(", "'share_parser'", ",", "False", ")", "\n", "if", "not", "self", ".", "share_parser", ":", "\n", "            ", "self", ".", "span_triaffine", "=", "TriAffine", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ",", "init_std", "=", "self", ".", "score_setting", "[", "'init_std'", "]", ")", "\n", "self", ".", "final_parser", "=", "TriAffine", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ",", "init_std", "=", "self", ".", "score_setting", "[", "'init_std'", "]", ")", "\n", "self", ".", "final_uni", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_class", ")", ")", "\n", "\n", "", "self", ".", "class_loss_weight", "=", "None", "\n", "\n", "if", "self", ".", "score_setting", ".", "get", "(", "'layer_norm'", ",", "False", ")", ":", "\n", "            ", "self", ".", "norm_h2", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_t2", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_s2", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_h3", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_t3", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_s3", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "\n", "", "if", "self", ".", "loss_config", ".", "get", "(", "'kl'", ",", "'none'", ")", "!=", "'none'", ":", "\n", "            ", "self", ".", "kl", "=", "self", ".", "loss_config", "[", "'kl'", "]", "\n", "self", ".", "kl_alpha", "=", "self", ".", "loss_config", "[", "'kl_alpha'", "]", "\n", "self", ".", "kl_loss_fn", "=", "torch", ".", "nn", ".", "KLDivLoss", "(", "reduction", "=", "\"batchmean\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.predict": [[116, 162], ["span_att_v2.SpanAttModelV2.get_class_position", "input_ids.size", "flat_idx.reshape.reshape.reshape", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "range", "flat_idx.reshape.reshape.size", "sort_num.sort", "new_span_score.argmax", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "new_span_score[].argmax", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "result.append", "max", "embeds_length.unsqueeze", "embeds_length.unsqueeze", "input_word.view", "range", "x.size"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span.SpanModel.get_class_position"], ["", "", "def", "predict", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", "=", "None", ")", ":", "\n", "        ", "class_tuple", "=", "self", ".", "get_class_position", "(", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", ")", "\n", "\n", "new_span_score", ",", "filtered", ",", "flat_idx", "=", "class_tuple", "[", "3", "]", ",", "class_tuple", "[", "4", "]", ",", "class_tuple", "[", "5", "]", "\n", "\n", "bsz", "=", "input_ids", ".", "size", "(", "0", ")", "\n", "max_span_count", "=", "flat_idx", ".", "size", "(", "0", ")", "//", "bsz", "\n", "flat_idx", "=", "flat_idx", ".", "reshape", "(", "bsz", ",", "max_span_count", ",", "3", ")", "\n", "\n", "# sort flat idx", "\n", "sort_num", "=", "flat_idx", "[", ":", ",", ":", ",", "1", "]", "*", "200", "+", "flat_idx", "[", ":", ",", ":", ",", "2", "]", "*", "1", "\n", "od", "=", "sort_num", ".", "sort", "(", ")", "[", "1", "]", "\n", "new_flat_idx", "=", "torch", ".", "zeros_like", "(", "flat_idx", ")", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "            ", "new_flat_idx", "[", "i", "]", "=", "flat_idx", "[", "i", "]", "[", "od", "[", "i", "]", "]", "\n", "\n", "", "embeds_length", "=", "(", "input_word", "!=", "max", "(", "input_word", ".", "view", "(", "-", "1", ")", ")", ")", ".", "sum", "(", "1", ")", "\n", "\n", "if", "self", ".", "loss_config", "[", "'name'", "]", "!=", "\"two\"", ":", "\n", "            ", "new_span_class_idx", "=", "new_span_score", ".", "argmax", "(", "-", "1", ")", "\n", "use_idx", "=", "torch", ".", "bitwise_and", "(", "new_span_class_idx", "<", "self", ".", "true_class", ",", "\n", "new_flat_idx", "[", ":", ",", ":", ",", "-", "1", "]", "<", "embeds_length", ".", "unsqueeze", "(", "1", ")", ")", "# b * max_span", "\n", "", "else", ":", "\n", "            ", "new_span_class_idx", "=", "new_span_score", "[", ":", ",", ":", ",", "0", ":", "-", "1", "]", ".", "argmax", "(", "-", "1", ")", "\n", "# we can modify this threshold 0 on dev set for higher f1 score", "\n", "use_idx", "=", "torch", ".", "bitwise_and", "(", "new_span_score", "[", ":", ",", ":", ",", "-", "1", "]", "<", "0", ",", "\n", "new_flat_idx", "[", ":", ",", ":", ",", "-", "1", "]", "<", "embeds_length", ".", "unsqueeze", "(", "1", ")", ")", "# b * max_span", "\n", "\n", "", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "            ", "x", "=", "new_flat_idx", "[", "i", ",", "use_idx", "[", "i", "]", ",", "1", "]", "\n", "y", "=", "new_flat_idx", "[", "i", ",", "use_idx", "[", "i", "]", ",", "2", "]", "\n", "cl", "=", "new_span_class_idx", "[", "i", "]", "[", "use_idx", "[", "i", "]", "]", "\n", "result", ".", "append", "(", "[", "[", "x", "[", "j", "]", ",", "y", "[", "j", "]", ",", "cl", "[", "j", "]", "]", "for", "j", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", "]", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.get_class_position": [[163, 246], ["span_att_v2.SpanAttModelV2.encoder", "span_att_v2.SpanAttModelV2.topk", "alpha[].reshape", "opt_einsum.contract", "span_att_v2.SpanAttModelV2.linear_h2", "span_att_v2.SpanAttModelV2.linear_t2", "span_att_v2.SpanAttModelV2.linear_s2", "span_att_v2.SpanAttModelV2.linear_h3", "span_att_v2.SpanAttModelV2.linear_t3", "span_att_v2.SpanAttModelV2.linear_s3", "span_att_v2.SpanAttModelV2.score_setting.get", "[].reshape", "[].reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].reshape", "[].reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hs_class.size", "hs_class.size", "flat_idx.size", "opt_einsum.contract.size", "opt_einsum.contract.size", "span_att_v2.SpanAttModelV2.norm_h2", "span_att_v2.SpanAttModelV2.norm_t2", "span_att_v2.SpanAttModelV2.norm_s2", "span_att_v2.SpanAttModelV2.norm_h3", "span_att_v2.SpanAttModelV2.norm_t3", "span_att_v2.SpanAttModelV2.norm_s3", "opt_einsum.contract", "torch.softmax", "torch.softmax", "opt_einsum.contract", "opt_einsum.contract", "opt_einsum.contract", "torch.softmax", "torch.softmax", "opt_einsum.contract", "opt_einsum.contract", "span_att_v2.SpanAttModelV2.linear_token", "span_att_v2.SpanAttModelV2.trans_bi", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "span_att_v2.SpanAttModelV2.final_uni.unsqueeze().unsqueeze", "span_att_v2.SpanAttModelV2.parser_list[].uni.unsqueeze().unsqueeze", "span_att_v2.SpanAttModelV2.token_dropout", "span_att_v2.SpanAttModelV2.trans_dropout", "max", "span_att_v2.SpanAttModelV2.unsqueeze().repeat", "span_att_v2.SpanAttModelV2.unsqueeze().repeat", "span_att_v2.SpanAttModelV2.unsqueeze().repeat", "span_att_v2.SpanAttModelV2.unsqueeze().repeat", "input_word.view", "span_att_v2.SpanAttModelV2.final_uni.unsqueeze", "span_att_v2.SpanAttModelV2.parser_list[].uni.unsqueeze", "span_att_v2.SpanAttModelV2.unsqueeze", "span_att_v2.SpanAttModelV2.unsqueeze", "span_att_v2.SpanAttModelV2.unsqueeze", "span_att_v2.SpanAttModelV2.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.topk"], ["", "def", "get_class_position", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", "=", "None", ")", ":", "\n", "        ", "memory", "=", "self", ".", "encoder", "(", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", ")", "\n", "\n", "# hs_class, alpha, head1, tail1, mid1 = self.parser_list[0](self.dropout_list[0](memory))", "\n", "hs_class", ",", "alpha", ",", "head1", ",", "tail1", ",", "mid1", "=", "self", ".", "parser_list", "[", "0", "]", "(", "memory", ")", "\n", "# alpha: b * seq * seq * seq * type", "\n", "# mid1: batch * seq * _hidden_dim", "\n", "# topk_idx b * seq_x, b * seq_y", "\n", "# h_span: b * max_span_count * type * _hidden_dim", "\n", "\n", "bsz", ",", "seq", "=", "hs_class", ".", "size", "(", "0", ")", ",", "hs_class", ".", "size", "(", "1", ")", "\n", "embeds_length", "=", "(", "input_word", "!=", "max", "(", "input_word", ".", "view", "(", "-", "1", ")", ")", ")", ".", "sum", "(", "1", ")", "\n", "\n", "filtered", ",", "flat_idx", "=", "self", ".", "topk", "(", "hs_class", ",", "self", ".", "max_span_count", ",", "embeds_length", ",", "self", ".", "loss_config", "[", "'name'", "]", ")", "\n", "\n", "max_span_count", "=", "flat_idx", ".", "size", "(", "0", ")", "//", "bsz", "\n", "topk_alpha", "=", "alpha", "[", "filtered", "]", ".", "reshape", "(", "bsz", ",", "max_span_count", ",", "-", "1", ",", "self", ".", "num_class", ")", "\n", "h_span", "=", "contract", "(", "'bmst,bsh->bmth'", ",", "topk_alpha", ",", "mid1", ")", "# b * max_span_count * type * _hidden_dim", "\n", "bsz", ",", "_hidden_dim", "=", "h_span", ".", "size", "(", "0", ")", ",", "h_span", ".", "size", "(", "-", "1", ")", "\n", "\n", "head2", "=", "self", ".", "linear_h2", "(", "head1", ")", "\n", "tail2", "=", "self", ".", "linear_t2", "(", "tail1", ")", "\n", "h_span2", "=", "self", ".", "linear_s2", "(", "h_span", ")", "\n", "\n", "head3", "=", "self", ".", "linear_h3", "(", "head1", ")", "\n", "tail3", "=", "self", ".", "linear_t3", "(", "tail1", ")", "\n", "h_span3", "=", "self", ".", "linear_s3", "(", "h_span", ")", "\n", "\n", "if", "self", ".", "score_setting", ".", "get", "(", "'layer_norm'", ",", "False", ")", ":", "\n", "            ", "head2", "=", "self", ".", "norm_h2", "(", "head2", ")", "\n", "tail2", "=", "self", ".", "norm_t2", "(", "tail2", ")", "\n", "h_span2", "=", "self", ".", "norm_s2", "(", "h_span2", ")", "\n", "head3", "=", "self", ".", "norm_h3", "(", "head3", ")", "\n", "tail3", "=", "self", ".", "norm_t3", "(", "tail3", ")", "\n", "h_span3", "=", "self", ".", "norm_s3", "(", "h_span3", ")", "\n", "\n", "", "x2", "=", "head2", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "seq", ",", "1", ")", "[", "filtered", "]", ".", "reshape", "(", "bsz", ",", "max_span_count", ",", "-", "1", ")", "# bsz * max_span_count * _hidden", "\n", "y2", "=", "tail2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "seq", ",", "1", ",", "1", ")", "[", "filtered", "]", ".", "reshape", "(", "bsz", ",", "max_span_count", ",", "-", "1", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "(", "x2", ",", "torch", ".", "ones_like", "(", "x2", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "y2", "=", "torch", ".", "cat", "(", "(", "y2", ",", "torch", ".", "ones_like", "(", "y2", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "x3", "=", "head3", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "seq", ",", "1", ")", "[", "filtered", "]", ".", "reshape", "(", "bsz", ",", "max_span_count", ",", "-", "1", ")", "# bsz * max_span_count * _hidden", "\n", "y3", "=", "tail3", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "seq", ",", "1", ",", "1", ")", "[", "filtered", "]", ".", "reshape", "(", "bsz", ",", "max_span_count", ",", "-", "1", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "(", "x3", ",", "torch", ".", "ones_like", "(", "x3", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "y3", "=", "torch", ".", "cat", "(", "(", "y3", ",", "torch", ".", "ones_like", "(", "y3", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "\n", "if", "not", "self", ".", "share_parser", ":", "\n", "            ", "span_score", "=", "contract", "(", "'bxi,bzrk,ikjr,bxj->bzxr'", ",", "x2", ",", "h_span2", ",", "self", ".", "span_triaffine", ".", "weight", ",", "y2", ")", "\n", "if", "self", ".", "score_setting", "[", "'scale'", "]", "==", "\"triv2\"", ":", "\n", "                ", "span_score", "*=", "self", ".", "parser_list", "[", "0", "]", ".", "parser0", ".", "scale_factor", "\n", "", "span_alpha", "=", "F", ".", "softmax", "(", "span_score", ",", "dim", "=", "-", "2", ")", "\n", "score", "=", "contract", "(", "'bxi,bzrk,ikjr,bxj->bzxr'", ",", "x3", ",", "h_span3", ",", "self", ".", "final_parser", ".", "weight", ",", "y3", ")", "\n", "s", "=", "contract", "(", "'bzxr,bzxr->bzr'", ",", "score", ",", "span_alpha", ")", "\n", "new_span_score", "=", "self", ".", "final_uni", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "+", "s", "\n", "", "else", ":", "\n", "            ", "span_score", "=", "contract", "(", "'bxi,bzrk,ikjr,bxj->bzxr'", ",", "x2", ",", "h_span2", ",", "self", ".", "parser_list", "[", "0", "]", ".", "parser0", ".", "weight", ",", "y2", ")", "\n", "if", "self", ".", "score_setting", "[", "'scale'", "]", "==", "\"triv2\"", ":", "\n", "                ", "span_score", "*=", "self", ".", "parser_list", "[", "0", "]", ".", "parser0", ".", "scale_factor", "\n", "", "span_alpha", "=", "F", ".", "softmax", "(", "span_score", ",", "dim", "=", "-", "2", ")", "\n", "score", "=", "contract", "(", "'bxi,bzrk,ikjr,bxj->bzxr'", ",", "x3", ",", "h_span3", ",", "self", ".", "parser_list", "[", "0", "]", ".", "parser1", ".", "weight", ",", "y3", ")", "\n", "s", "=", "contract", "(", "'bzxr,bzxr->bzr'", ",", "score", ",", "span_alpha", ")", "\n", "new_span_score", "=", "self", ".", "parser_list", "[", "0", "]", ".", "uni", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "+", "s", "\n", "\n", "", "if", "self", ".", "token_aux_loss", ":", "\n", "            ", "token_class", "=", "self", ".", "linear_token", "(", "self", ".", "token_dropout", "(", "memory", ")", ")", "\n", "", "else", ":", "\n", "            ", "token_class", "=", "None", "\n", "\n", "", "if", "self", ".", "trans_aux_loss", ":", "\n", "            ", "trans_class", "=", "self", ".", "trans_bi", "(", "self", ".", "trans_dropout", "(", "memory", ")", ")", "\n", "", "else", ":", "\n", "            ", "trans_class", "=", "None", "\n", "\n", "", "return", "(", "hs_class", ",", "token_class", ",", "trans_class", ",", "new_span_score", ",", "filtered", ",", "flat_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.topk": [[247, 275], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "min", "torch.arange().repeat_interleave().to", "torch.arange().repeat_interleave().to", "torch.arange().repeat_interleave().to", "torch.arange().repeat_interleave().to", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "span_utils.tensor_idx_add().bool", "hs_class.size", "hs_class.size", "hs_class.softmax", "hs_class_sft.masked_fill.masked_fill.masked_fill", "hs_class_sft[].max", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "class_logit.masked_fill.masked_fill.masked_fill", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.bitwise_or.unsqueeze", "torch.bitwise_or.unsqueeze", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.arange().repeat_interleave", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "span_utils.tensor_idx_add", "hs_class_prob.reshape", "class_logit.masked_fill.masked_fill.reshape", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "embeds_length.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.topk", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.topk", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.topk", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.topk", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.topk", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.topk", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.topk", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.topk", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.span_utils.tensor_idx_add"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "topk", "(", "self", ",", "hs_class", ",", "count", ",", "embeds_length", ",", "loss_type", "=", "'ce'", ")", ":", "\n", "        ", "\"\"\"\n        hs_class: Batch * word * word * class\n        \"\"\"", "\n", "bsz", ",", "word_cnt", "=", "hs_class", ".", "size", "(", "0", ")", ",", "hs_class", ".", "size", "(", "1", ")", "\n", "seq", "=", "torch", ".", "arange", "(", "word_cnt", ")", ".", "to", "(", "hs_class", ".", "device", ")", "\n", "mask_place", "=", "torch", ".", "bitwise_or", "(", "(", "seq", ".", "unsqueeze", "(", "1", ")", ">", "seq", ".", "unsqueeze", "(", "0", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "(", "seq", ".", "unsqueeze", "(", "0", ")", ">=", "embeds_length", ".", "unsqueeze", "(", "1", ")", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "count", "=", "min", "(", "count", ",", "word_cnt", "*", "word_cnt", ")", "\n", "if", "loss_type", "!=", "\"two\"", ":", "\n", "            ", "hs_class_sft", "=", "hs_class", ".", "softmax", "(", "-", "1", ")", "# Batch * word * word * class", "\n", "hs_class_sft", "=", "hs_class_sft", ".", "masked_fill", "(", "mask_place", ".", "unsqueeze", "(", "-", "1", ")", ",", "value", "=", "-", "1", ")", "\n", "hs_class_prob", ",", "_", "=", "hs_class_sft", "[", ":", ",", ":", ",", ":", ",", "0", ":", "-", "1", "]", ".", "max", "(", "dim", "=", "-", "1", ")", "# Batch * word * word", "\n", "topk_flat_idx", "=", "torch", ".", "topk", "(", "hs_class_prob", ".", "reshape", "(", "bsz", ",", "-", "1", ")", ",", "k", "=", "count", ")", "[", "1", "]", "\n", "filtered", "=", "torch", ".", "zeros_like", "(", "hs_class_prob", ")", "\n", "", "else", ":", "\n", "            ", "class_logit", "=", "-", "hs_class", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", "\n", "class_logit", "=", "class_logit", ".", "masked_fill", "(", "mask_place", ",", "value", "=", "-", "1e6", ")", "# Batch * word * word", "\n", "topk_flat_idx", "=", "torch", ".", "topk", "(", "class_logit", ".", "reshape", "(", "bsz", ",", "-", "1", ")", ",", "k", "=", "count", ")", "[", "1", "]", "\n", "filtered", "=", "torch", ".", "zeros_like", "(", "class_logit", ")", "\n", "\n", "", "topk_b_idx", "=", "torch", ".", "arange", "(", "bsz", ")", ".", "repeat_interleave", "(", "count", ")", ".", "to", "(", "hs_class", ".", "device", ")", "\n", "topk_x_idx", "=", "(", "topk_flat_idx", "//", "word_cnt", ")", ".", "reshape", "(", "-", "1", ")", "\n", "topk_y_idx", "=", "(", "topk_flat_idx", "%", "word_cnt", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "flat_idx", "=", "torch", ".", "stack", "(", "[", "topk_b_idx", ",", "topk_x_idx", ",", "topk_y_idx", "]", ")", ".", "t", "(", ")", "\n", "filtered", "=", "tensor_idx_add", "(", "filtered", ",", "flat_idx", ")", ".", "bool", "(", ")", "\n", "return", "filtered", ",", "flat_idx", "# Batch * count, Batch * count", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.forward": [[277, 334], ["span_att_v2.SpanAttModelV2.get_class_position", "hs_class.size", "span_att_v2.SpanAttModelV2.class_loss_fn", "span_att_v2.SpanAttModelV2.class_loss_fn", "span_utils.negative_sampling", "hs_class.reshape", "span_utils.negative_sampling.reshape", "token_class.reshape.reshape.reshape", "token_label[].reshape", "head_trans[].float", "tail_trans[].float", "new_span_score.reshape", "label[].reshape", "span_att_v2.SpanAttModelV2.loss_config.get", "new_span_score.reshape", "hs_class[].reshape", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "token_label[].float", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "span_att_v2.SpanAttModelV2.kl_loss_fn", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "span_att_v2.SpanAttModelV2.kl_loss_fn", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "span_att_v2.SpanAttModelV2.kl_loss_fn", "span_att_v2.SpanAttModelV2.kl_loss_fn", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span.SpanModel.get_class_position", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.span_utils.negative_sampling"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "label", ",", "context_ce_mask", "=", "None", ",", "context_subword_group", "=", "None", ",", "context_map", "=", "None", ",", "\n", "l_input_word", "=", "None", ",", "l_input_char", "=", "None", ",", "l_input_pos", "=", "None", ",", "\n", "r_input_word", "=", "None", ",", "r_input_char", "=", "None", ",", "r_input_pos", "=", "None", ",", "\n", "token_label", "=", "None", ",", "bert_embed", "=", "None", ",", "head_trans", "=", "None", ",", "tail_trans", "=", "None", ")", ":", "\n", "        ", "class_tuple", "=", "self", ".", "get_class_position", "(", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", ")", "\n", "\n", "# deal with mask", "\n", "# hs_class: Batch * word * word * class", "\n", "# label: Batch * max_word * max_word", "\n", "hs_class", "=", "class_tuple", "[", "0", "]", "\n", "word_cnt", "=", "hs_class", ".", "size", "(", "1", ")", "\n", "label", "=", "label", "[", ":", ",", "0", ":", "word_cnt", ",", "0", ":", "word_cnt", "]", "\n", "if", "self", ".", "negative_sampling", ":", "\n", "            ", "label", "=", "negative_sampling", "(", "label", ",", "self", ".", "hard_neg_dist", ")", "\n", "\n", "", "class_loss", "=", "self", ".", "class_loss_fn", "(", "hs_class", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_class", ")", ",", "label", ".", "reshape", "(", "-", "1", ")", ")", "\n", "if", "self", ".", "class_loss_weight", "is", "not", "None", ":", "\n", "            ", "class_loss", "*=", "self", ".", "class_loss_weight", "\n", "", "if", "self", ".", "token_aux_loss", ":", "\n", "            ", "token_class", "=", "class_tuple", "[", "1", "]", "\n", "token_class", "=", "token_class", ".", "reshape", "(", "-", "1", ",", "self", ".", "token_label_count", ")", "\n", "token_label", "=", "token_label", "[", ":", ",", "0", ":", "word_cnt", "]", ".", "reshape", "(", "-", "1", ",", "self", ".", "token_label_count", ")", "\n", "token_mask", "=", "token_label", "[", ":", ",", "0", "]", ">=", "0", "\n", "token_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "token_class", "[", "token_mask", "]", ",", "token_label", "[", "token_mask", "]", ".", "float", "(", ")", ")", "\n", "class_loss", "+=", "self", ".", "token_aux_weight", "*", "token_loss", "\n", "\n", "", "if", "self", ".", "trans_aux_loss", ":", "\n", "            ", "trans_class", "=", "class_tuple", "[", "2", "]", "[", ":", ",", "0", ":", "word_cnt", ",", "0", ":", "word_cnt", "]", "# b * s * s * 2", "\n", "head_trans", "=", "head_trans", "[", ":", ",", "0", ":", "word_cnt", ",", "0", ":", "word_cnt", "]", ".", "float", "(", ")", "\n", "tail_trans", "=", "tail_trans", "[", ":", ",", "0", ":", "word_cnt", ",", "0", ":", "word_cnt", "]", ".", "float", "(", ")", "\n", "trans_mask", "=", "head_trans", ">=", "0", "# b * s * s", "\n", "head_trans_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "trans_class", "[", "trans_mask", "]", "[", ":", ",", "0", "]", ",", "head_trans", "[", "trans_mask", "]", ")", "\n", "tail_trans_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "trans_class", "[", "trans_mask", "]", "[", ":", ",", "1", "]", ",", "tail_trans", "[", "trans_mask", "]", ")", "\n", "class_loss", "+=", "self", ".", "trans_aux_weight", "*", "(", "head_trans_loss", "+", "tail_trans_loss", ")", "\n", "\n", "", "new_span_score", ",", "filtered", "=", "class_tuple", "[", "3", "]", ",", "class_tuple", "[", "4", "]", "\n", "filtered_loss", "=", "self", ".", "class_loss_fn", "(", "new_span_score", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_class", ")", ",", "label", "[", "filtered", "]", ".", "reshape", "(", "-", "1", ")", ")", "\n", "class_loss", "+=", "self", ".", "filter_loss_weight", "*", "filtered_loss", "\n", "\n", "if", "self", ".", "loss_config", ".", "get", "(", "'kl'", ",", "'none'", ")", "!=", "'none'", ":", "\n", "            ", "p", "=", "new_span_score", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_class", ")", "\n", "q", "=", "hs_class", "[", "filtered", "]", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_class", ")", "\n", "if", "self", ".", "loss_config", "[", "'kl'", "]", "==", "'pq'", ":", "\n", "                ", "kl_loss", "=", "self", ".", "kl_loss_fn", "(", "F", ".", "log_softmax", "(", "p", ",", "dim", "=", "-", "1", ")", ",", "F", ".", "softmax", "(", "q", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "elif", "self", ".", "loss_config", "[", "'kl'", "]", "==", "'qp'", ":", "\n", "                ", "kl_loss", "=", "self", ".", "kl_loss_fn", "(", "F", ".", "log_softmax", "(", "q", ",", "dim", "=", "-", "1", ")", ",", "F", ".", "softmax", "(", "p", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "elif", "self", ".", "loss_config", "[", "'kl'", "]", "==", "'both'", ":", "\n", "                ", "kl_loss", "=", "(", "self", ".", "kl_loss_fn", "(", "F", ".", "log_softmax", "(", "p", ",", "dim", "=", "-", "1", ")", ",", "F", ".", "softmax", "(", "q", ",", "dim", "=", "-", "1", ")", ")", "+", "self", ".", "kl_loss_fn", "(", "F", ".", "log_softmax", "(", "q", ",", "dim", "=", "-", "1", ")", ",", "F", ".", "softmax", "(", "p", ",", "dim", "=", "-", "1", ")", ")", ")", "/", "2", "\n", "", "class_loss", "+=", "self", ".", "kl_alpha", "*", "kl_loss", "\n", "\n", "", "return", "class_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV3.__init__": [[336, 349], ["span_att_v2.SpanAttModelV2.__init__", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "bert_model_path", ",", "encoder_config_dict", ",", "\n", "num_class", ",", "score_setting", ",", "loss_config", ")", ":", "\n", "        ", "super", "(", "SpanAttModelV3", ",", "self", ")", ".", "__init__", "(", "bert_model_path", ",", "\n", "encoder_config_dict", ",", "\n", "num_class", ",", "\n", "score_setting", ",", "\n", "loss_config", ")", "\n", "self", ".", "linear_h2", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ",", "self", ".", "act", ")", "\n", "self", ".", "linear_t2", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ",", "self", ".", "act", ")", "\n", "self", ".", "linear_s2", "=", "MLP", "(", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "1", ",", "self", ".", "dropout", ",", "self", ".", "act", ")", "\n", "self", ".", "linear_h3", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ",", "self", ".", "act", ")", "\n", "self", ".", "linear_t3", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ",", "self", ".", "act", ")", "\n", "self", ".", "linear_s3", "=", "MLP", "(", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "1", ",", "self", ".", "dropout", ",", "self", ".", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV3.get_class_position": [[350, 420], ["span_att_v2.SpanAttModelV3.encoder", "span_att_v2.SpanAttModelV3.topk", "alpha[].reshape", "opt_einsum.contract", "span_att_v2.SpanAttModelV3.linear_h2", "span_att_v2.SpanAttModelV3.linear_t2", "span_att_v2.SpanAttModelV3.linear_s2", "span_att_v2.SpanAttModelV3.linear_h3", "span_att_v2.SpanAttModelV3.linear_t3", "span_att_v2.SpanAttModelV3.linear_s3", "[].reshape", "[].reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].reshape", "[].reshape", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "hs_class.size", "hs_class.size", "flat_idx.size", "opt_einsum.contract.size", "opt_einsum.contract.size", "opt_einsum.contract", "torch.softmax", "torch.softmax", "opt_einsum.contract", "opt_einsum.contract", "opt_einsum.contract", "torch.softmax", "torch.softmax", "opt_einsum.contract", "opt_einsum.contract", "span_att_v2.SpanAttModelV3.linear_token", "span_att_v2.SpanAttModelV3.trans_bi", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "span_att_v2.SpanAttModelV3.final_uni.unsqueeze().unsqueeze", "span_att_v2.SpanAttModelV3.parser_list[].uni.unsqueeze().unsqueeze", "span_att_v2.SpanAttModelV3.token_dropout", "span_att_v2.SpanAttModelV3.trans_dropout", "max", "span_att_v2.SpanAttModelV3.unsqueeze().repeat", "span_att_v2.SpanAttModelV3.unsqueeze().repeat", "span_att_v2.SpanAttModelV3.unsqueeze().repeat", "span_att_v2.SpanAttModelV3.unsqueeze().repeat", "input_word.view", "span_att_v2.SpanAttModelV3.final_uni.unsqueeze", "span_att_v2.SpanAttModelV3.parser_list[].uni.unsqueeze", "span_att_v2.SpanAttModelV3.unsqueeze", "span_att_v2.SpanAttModelV3.unsqueeze", "span_att_v2.SpanAttModelV3.unsqueeze", "span_att_v2.SpanAttModelV3.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span_att_v2.SpanAttModelV2.topk"], ["", "def", "get_class_position", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", "=", "None", ")", ":", "\n", "        ", "memory", "=", "self", ".", "encoder", "(", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", ")", "\n", "\n", "hs_class", ",", "alpha", ",", "head1", ",", "tail1", ",", "mid1", "=", "self", ".", "parser_list", "[", "0", "]", "(", "memory", ")", "\n", "\n", "bsz", ",", "seq", "=", "hs_class", ".", "size", "(", "0", ")", ",", "hs_class", ".", "size", "(", "1", ")", "\n", "embeds_length", "=", "(", "input_word", "!=", "max", "(", "input_word", ".", "view", "(", "-", "1", ")", ")", ")", ".", "sum", "(", "1", ")", "\n", "\n", "filtered", ",", "flat_idx", "=", "self", ".", "topk", "(", "hs_class", ",", "self", ".", "max_span_count", ",", "embeds_length", ",", "self", ".", "loss_config", "[", "'name'", "]", ")", "\n", "\n", "max_span_count", "=", "flat_idx", ".", "size", "(", "0", ")", "//", "bsz", "\n", "topk_alpha", "=", "alpha", "[", "filtered", "]", ".", "reshape", "(", "bsz", ",", "max_span_count", ",", "-", "1", ",", "self", ".", "num_class", ")", "\n", "h_span", "=", "contract", "(", "'bmst,bsh->bmth'", ",", "topk_alpha", ",", "mid1", ")", "# b * max_span_count * type * _hidden_dim", "\n", "bsz", ",", "_hidden_dim", "=", "h_span", ".", "size", "(", "0", ")", ",", "h_span", ".", "size", "(", "-", "1", ")", "\n", "\n", "head2", "=", "self", ".", "linear_h2", "(", "memory", ")", "\n", "tail2", "=", "self", ".", "linear_t2", "(", "memory", ")", "\n", "h_span2", "=", "self", ".", "linear_s2", "(", "h_span", ")", "\n", "\n", "head3", "=", "self", ".", "linear_h3", "(", "memory", ")", "\n", "tail3", "=", "self", ".", "linear_t3", "(", "memory", ")", "\n", "h_span3", "=", "self", ".", "linear_s3", "(", "h_span", ")", "\n", "\n", "x2", "=", "head2", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "seq", ",", "1", ")", "[", "filtered", "]", ".", "reshape", "(", "bsz", ",", "max_span_count", ",", "-", "1", ")", "# bsz * max_span_count * _hidden", "\n", "y2", "=", "tail2", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "seq", ",", "1", ",", "1", ")", "[", "filtered", "]", ".", "reshape", "(", "bsz", ",", "max_span_count", ",", "-", "1", ")", "\n", "x2", "=", "torch", ".", "cat", "(", "(", "x2", ",", "torch", ".", "ones_like", "(", "x2", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "y2", "=", "torch", ".", "cat", "(", "(", "y2", ",", "torch", ".", "ones_like", "(", "y2", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "x3", "=", "head3", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "1", ",", "seq", ",", "1", ")", "[", "filtered", "]", ".", "reshape", "(", "bsz", ",", "max_span_count", ",", "-", "1", ")", "# bsz * max_span_count * _hidden", "\n", "y3", "=", "tail3", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "seq", ",", "1", ",", "1", ")", "[", "filtered", "]", ".", "reshape", "(", "bsz", ",", "max_span_count", ",", "-", "1", ")", "\n", "x3", "=", "torch", ".", "cat", "(", "(", "x3", ",", "torch", ".", "ones_like", "(", "x3", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "y3", "=", "torch", ".", "cat", "(", "(", "y3", ",", "torch", ".", "ones_like", "(", "y3", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "\n", "if", "not", "self", ".", "share_parser", ":", "\n", "            ", "span_score", "=", "contract", "(", "'bxi,bzrk,ikjr,bxj->bzxr'", ",", "x2", ",", "h_span2", ",", "self", ".", "span_triaffine", ".", "weight", ",", "y2", ")", "\n", "if", "self", ".", "score_setting", "[", "'scale'", "]", "==", "\"triv2\"", ":", "\n", "                ", "span_score", "*=", "self", ".", "parser_list", "[", "0", "]", ".", "parser0", ".", "scale_factor", "\n", "", "span_alpha", "=", "F", ".", "softmax", "(", "span_score", ",", "dim", "=", "-", "2", ")", "\n", "score", "=", "contract", "(", "'bxi,bzrk,ikjr,bxj->bzxr'", ",", "x3", ",", "h_span3", ",", "self", ".", "final_parser", ".", "weight", ",", "y3", ")", "\n", "s", "=", "contract", "(", "'bzxr,bzxr->bzr'", ",", "score", ",", "span_alpha", ")", "\n", "new_span_score", "=", "self", ".", "final_uni", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "+", "s", "\n", "", "else", ":", "\n", "            ", "span_score", "=", "contract", "(", "'bxi,bzrk,ikjr,bxj->bzxr'", ",", "x2", ",", "h_span2", ",", "self", ".", "parser_list", "[", "0", "]", ".", "parser0", ".", "weight", ",", "y2", ")", "\n", "if", "self", ".", "score_setting", "[", "'scale'", "]", "==", "\"triv2\"", ":", "\n", "                ", "span_score", "*=", "self", ".", "parser_list", "[", "0", "]", ".", "parser0", ".", "scale_factor", "\n", "", "span_alpha", "=", "F", ".", "softmax", "(", "span_score", ",", "dim", "=", "-", "2", ")", "\n", "score", "=", "contract", "(", "'bxi,bzrk,ikjr,bxj->bzxr'", ",", "x3", ",", "h_span3", ",", "self", ".", "parser_list", "[", "0", "]", ".", "parser1", ".", "weight", ",", "y3", ")", "\n", "s", "=", "contract", "(", "'bzxr,bzxr->bzr'", ",", "score", ",", "span_alpha", ")", "\n", "new_span_score", "=", "self", ".", "parser_list", "[", "0", "]", ".", "uni", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "+", "s", "\n", "\n", "", "if", "self", ".", "token_aux_loss", ":", "\n", "            ", "token_class", "=", "self", ".", "linear_token", "(", "self", ".", "token_dropout", "(", "memory", ")", ")", "\n", "", "else", ":", "\n", "            ", "token_class", "=", "None", "\n", "\n", "", "if", "self", ".", "trans_aux_loss", ":", "\n", "            ", "trans_class", "=", "self", ".", "trans_bi", "(", "self", ".", "trans_dropout", "(", "memory", ")", ")", "\n", "", "else", ":", "\n", "            ", "trans_class", "=", "None", "\n", "\n", "", "return", "(", "hs_class", ",", "token_class", ",", "trans_class", ",", "new_span_score", ",", "filtered", ",", "flat_idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.aligner.Aligner.__init__": [[8, 11], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "Aligner", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.aligner.Aligner.forward": [[12, 25], ["torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.nn.ReLU", "torch.nn.ReLU", "aligner.Aligner.linear", "memory.permute().squeeze", "ce_mask.bool.bool.bool", "sim.masked_fill.masked_fill.masked_fill", "memory.permute", "ce_mask.bool.bool.unsqueeze().unsqueeze().expand_as", "ce_mask.bool.bool.unsqueeze().unsqueeze", "ce_mask.bool.bool.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hs", ",", "memory", ",", "ce_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        hs: bsz * (L) * query * hidden\n        memroy: bsz * seq * hidden\n        ce_mask: bsz * seq\n        output: bsz * (L) * query * seq\n        \"\"\"", "\n", "h", "=", "nn", ".", "ReLU", "(", ")", "(", "self", ".", "linear", "(", "hs", ")", ")", "\n", "sim", "=", "torch", ".", "bmm", "(", "h", ",", "memory", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "squeeze", "(", "1", ")", ")", "# b * (L) * q * s", "\n", "if", "ce_mask", "is", "not", "None", ":", "\n", "            ", "ce_mask", "=", "ce_mask", ".", "bool", "(", ")", "\n", "sim", "=", "sim", ".", "masked_fill", "(", "~", "ce_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "sim", ")", ",", "value", "=", "-", "1e6", ")", "\n", "", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.aligner.Pointer.__init__": [[27, 32], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "Pointer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "W_h", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "W_m", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.aligner.Pointer.forward": [[33, 43], ["aligner.Pointer.v().squeeze", "ce_mask.bool.bool.bool", "sim.masked_fill.masked_fill.masked_fill", "aligner.Pointer.v", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "ce_mask.bool.bool.unsqueeze().unsqueeze().expand_as", "aligner.Pointer.W_h().unsqueeze", "aligner.Pointer.W_m().unsqueeze().unsqueeze", "ce_mask.bool.bool.unsqueeze().unsqueeze", "aligner.Pointer.W_h", "aligner.Pointer.W_m().unsqueeze", "ce_mask.bool.bool.unsqueeze", "aligner.Pointer.W_m"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hs", ",", "memory", ",", "ce_mask", "=", "None", ")", ":", "\n", "# hs : b * (L) * q * h", "\n", "# memory: b * s * h", "\n", "# output: b * (L) * q * s", "\n", "        ", "sim", "=", "self", ".", "v", "(", "torch", ".", "tanh", "(", "self", ".", "W_h", "(", "hs", ")", ".", "unsqueeze", "(", "-", "2", ")", "+", "self", ".", "W_m", "(", "memory", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "if", "ce_mask", "is", "not", "None", ":", "\n", "            ", "ce_mask", "=", "ce_mask", ".", "bool", "(", ")", "\n", "sim", "=", "sim", ".", "masked_fill", "(", "~", "ce_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "sim", ")", ",", "value", "=", "-", "1e6", ")", "\n", "", "return", "sim", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.aligner.PBiaffine.__init__": [[45, 54], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "PBiaffine", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_class", "=", "1", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "tri", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_class", ",", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "bi0", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_class", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "bi1", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_class", ",", "self", ".", "hidden_dim", ")", ")", "\n", "self", ".", "uni", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_class", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.aligner.PBiaffine.forward": [[55, 77], ["memory.size", "hs.reshape.reshape.size", "hs.reshape.reshape.reshape", "opt_einsum.contract", "aligner.PBiaffine.uni.unsqueeze().unsqueeze", "opt_einsum.contract().unsqueeze", "opt_einsum.contract().unsqueeze", "ce_mask.bool.bool.bool", "sim.masked_fill.masked_fill.masked_fill", "aligner.PBiaffine.uni.unsqueeze", "opt_einsum.contract", "opt_einsum.contract", "ce_mask.bool.bool.unsqueeze().unsqueeze().expand_as", "ce_mask.bool.bool.unsqueeze().unsqueeze", "ce_mask.bool.bool.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hs", ",", "memory", ",", "ce_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        hs: bsz * (L) * query * hidden\n        memroy: bsz * seq * hidden\n        ce_mask: bsz * seq\n        output: bsz * (L) * query * seq\n        \"\"\"", "\n", "bsz", ",", "seq", ",", "hidden", "=", "memory", ".", "size", "(", ")", "\n", "query", "=", "hs", ".", "size", "(", "-", "2", ")", "\n", "\n", "hs", "=", "hs", ".", "reshape", "(", "bsz", ",", "-", "1", ",", "hidden", ")", "\n", "\n", "tri_score", "=", "contract", "(", "'bso,bqp,cop->bsqc'", ",", "memory", ",", "hs", ",", "self", ".", "tri", ")", "\n", "bi_score", "=", "contract", "(", "'bso,co->bsc'", ",", "memory", ",", "self", ".", "bi0", ")", ".", "unsqueeze", "(", "2", ")", "+", "contract", "(", "'bqp,cp->bqc'", ",", "hs", ",", "self", ".", "bi1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "uni_score", "=", "self", ".", "uni", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "sim", "=", "(", "tri_score", "+", "bi_score", "+", "uni_score", ")", ".", "squeeze", "(", "0", ")", ".", "reshape", "(", "bsz", ",", "seq", ",", "-", "1", ",", "query", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n", "if", "ce_mask", "is", "not", "None", ":", "\n", "            ", "ce_mask", "=", "ce_mask", ".", "bool", "(", ")", "\n", "sim", "=", "sim", ".", "masked_fill", "(", "~", "ce_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand_as", "(", "sim", ")", ",", "value", "=", "-", "1e6", ")", "\n", "", "return", "sim", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.__init__": [[33, 135], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "bert_model_path_list.split", "max", "sum", "print", "text_encoder.TextEncoder.bert_additional_config.get", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "numpy.load", "torch.nn.Embedding", "torch.nn.Embedding", "text_encoder.TextEncoder.word_embedding.weight.data.copy_", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.LSTM", "torch.nn.LSTM", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Dropout", "torch.nn.Dropout", "bert_model_path.lower().find", "text_encoder.TextEncoder.bert_list.append", "text_encoder.TextEncoder.bert_config_list.append", "KebioConfig.from_pretrained", "KebioModel.from_pretrained", "text_encoder.TextEncoder.bert_list.append", "text_encoder.TextEncoder.bert_config_list.append", "text_encoder.reinit", "torch.from_numpy", "torch.from_numpy", "torch.nn.LSTM", "torch.nn.LSTM", "transformers.AutoModel.from_pretrained", "transformers.AutoConfig.from_pretrained", "text_encoder.TextEncoder.bert_additional_config.get", "KebioModel.from_pretrained.position_embed.SinusoidalPositionalEmbedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoderLayer", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.TransformerEncoder", "torch.nn.TransformerEncoder", "bert_model_path.lower"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.reinit"], ["    ", "def", "__init__", "(", "self", ",", "bert_model_path_list", ",", "\n", "bert_config", "=", "{", "'bert_before_lstm'", ":", "False", ",", "\n", "'subword_aggr'", ":", "'first'", "}", ",", "\n", "word_embedding_config", "=", "{", "}", ",", "\n", "char_embedding_config", "=", "{", "}", ",", "\n", "pos_embedding_config", "=", "{", "}", ",", "\n", "lstm_config", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "TextEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lstm_input_size", "=", "0", "\n", "\n", "self", ".", "bert_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bert_config_list", "=", "[", "]", "\n", "self", ".", "bert_model_path_list", "=", "bert_model_path_list", ".", "split", "(", "','", ")", "\n", "for", "bert_model_path", "in", "self", ".", "bert_model_path_list", ":", "\n", "            ", "print", "(", "bert_model_path", ")", "\n", "if", "bert_model_path", ".", "lower", "(", ")", ".", "find", "(", "'kebio'", ")", "==", "-", "1", ":", "\n", "                ", "self", ".", "bert_list", ".", "append", "(", "AutoModel", ".", "from_pretrained", "(", "bert_model_path", ")", ")", "\n", "self", ".", "bert_config_list", ".", "append", "(", "AutoConfig", ".", "from_pretrained", "(", "bert_model_path", ")", ")", "\n", "", "else", ":", "\n", "                ", "assert", "load_kebiolm", "\n", "config", "=", "KebioConfig", ".", "from_pretrained", "(", "bert_model_path", ")", "\n", "model", "=", "KebioModel", ".", "from_pretrained", "(", "bert_model_path", ",", "config", "=", "config", ")", "\n", "self", ".", "bert_list", ".", "append", "(", "model", ")", "\n", "self", ".", "bert_config_list", ".", "append", "(", "config", ")", "\n", "", "", "self", ".", "bert_additional_config", "=", "bert_config", "\n", "if", "self", ".", "bert_additional_config", ".", "get", "(", "'reinit'", ",", "0", ")", ">", "0", ":", "\n", "            ", "for", "model", "in", "self", ".", "bert_list", ":", "\n", "                ", "reinit", "(", "model", ",", "self", ".", "bert_additional_config", ".", "get", "(", "'reinit'", ",", "0", ")", ")", "\n", "\n", "", "", "self", ".", "bert_hidden_dim", "=", "max", "(", "[", "config", ".", "hidden_size", "for", "config", "in", "self", ".", "bert_config_list", "]", ")", "\n", "self", ".", "all_bert_hidden_dim", "=", "sum", "(", "[", "config", ".", "hidden_size", "for", "config", "in", "self", ".", "bert_config_list", "]", ")", "\n", "\n", "if", "self", ".", "bert_additional_config", "[", "'bert_output'", "]", "==", "'concat-last-4'", ":", "\n", "            ", "self", ".", "bert_hidden_dim", "*=", "4", "\n", "self", ".", "all_bert_hidden_dim", "*=", "4", "\n", "\n", "", "if", "self", ".", "bert_additional_config", "[", "'bert_before_lstm'", "]", ":", "\n", "            ", "self", ".", "lstm_input_size", "+=", "self", ".", "all_bert_hidden_dim", "\n", "self", ".", "reduce_dim", "=", "nn", ".", "Linear", "(", "lstm_config", "[", "'dim'", "]", ",", "self", ".", "bert_hidden_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "reduce_dim", "=", "nn", ".", "Linear", "(", "lstm_config", "[", "'dim'", "]", "+", "self", ".", "all_bert_hidden_dim", ",", "self", ".", "bert_hidden_dim", ")", "\n", "\n", "", "self", ".", "word_embedding_config", "=", "word_embedding_config", "\n", "if", "self", ".", "word_embedding_config", ":", "\n", "            ", "embedding_weight", "=", "np", ".", "load", "(", "word_embedding_config", "[", "'path'", "]", ")", "\n", "padding_idx", "=", "word_embedding_config", "[", "'padding_idx'", "]", "if", "word_embedding_config", "[", "'padding_idx'", "]", "<", "embedding_weight", ".", "shape", "[", "0", "]", "else", "None", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "embedding_weight", ".", "shape", "[", "0", "]", ",", "\n", "embedding_weight", ".", "shape", "[", "1", "]", ",", "\n", "padding_idx", "=", "padding_idx", ")", "\n", "self", ".", "word_embedding", ".", "weight", ".", "data", ".", "copy_", "(", "from_numpy", "(", "embedding_weight", ")", ")", "\n", "self", ".", "word_dropout", "=", "nn", ".", "Dropout", "(", "word_embedding_config", "[", "'dropout'", "]", ")", "\n", "self", ".", "lstm_input_size", "+=", "word_embedding_config", "[", "'dim'", "]", "\n", "if", "word_embedding_config", "[", "'freeze'", "]", ":", "\n", "                ", "self", ".", "word_embedding", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "self", ".", "char_embedding_config", "=", "char_embedding_config", "\n", "if", "self", ".", "char_embedding_config", ":", "\n", "            ", "self", ".", "char_embedding", "=", "nn", ".", "Embedding", "(", "200", ",", "\n", "char_embedding_config", "[", "'dim'", "]", ",", "\n", "padding_idx", "=", "char_embedding_config", "[", "'padding_idx'", "]", ")", "\n", "self", ".", "char_dropout", "=", "nn", ".", "Dropout", "(", "char_embedding_config", "[", "'dropout'", "]", ")", "\n", "if", "char_embedding_config", "[", "'layer'", "]", "==", "1", ":", "\n", "                ", "char_embedding_config", "[", "'dropout'", "]", "=", "0.0", "\n", "", "self", ".", "char_lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "char_embedding_config", "[", "'dim'", "]", ",", "\n", "hidden_size", "=", "char_embedding_config", "[", "'dim'", "]", "//", "2", ",", "\n", "num_layers", "=", "char_embedding_config", "[", "'layer'", "]", ",", "\n", "bidirectional", "=", "True", ",", "\n", "dropout", "=", "char_embedding_config", "[", "'dropout'", "]", ",", "\n", "batch_first", "=", "True", ")", "\n", "self", ".", "lstm_input_size", "+=", "char_embedding_config", "[", "'dim'", "]", "\n", "\n", "", "self", ".", "pos_embedding_config", "=", "pos_embedding_config", "\n", "if", "self", ".", "pos_embedding_config", ":", "\n", "            ", "self", ".", "pos_embedding", "=", "nn", ".", "Embedding", "(", "1100", ",", "\n", "pos_embedding_config", "[", "'dim'", "]", ",", "\n", "padding_idx", "=", "pos_embedding_config", "[", "'padding_idx'", "]", ")", "\n", "self", ".", "pos_dropout", "=", "nn", ".", "Dropout", "(", "pos_embedding_config", "[", "'dropout'", "]", ")", "\n", "self", ".", "lstm_input_size", "+=", "pos_embedding_config", "[", "'dim'", "]", "\n", "\n", "", "self", ".", "lstm_config", "=", "lstm_config", "\n", "if", "self", ".", "lstm_config", ":", "\n", "            ", "if", "self", ".", "lstm_config", "[", "'name'", "]", "==", "\"lstm\"", ":", "\n", "                ", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "self", ".", "lstm_input_size", ",", "\n", "hidden_size", "=", "lstm_config", "[", "'dim'", "]", "//", "2", ",", "\n", "num_layers", "=", "lstm_config", "[", "'layer'", "]", ",", "\n", "bidirectional", "=", "True", ",", "\n", "dropout", "=", "lstm_config", "[", "'dropout'", "]", ",", "\n", "batch_first", "=", "True", ")", "\n", "", "elif", "self", ".", "lstm_config", "[", "'name'", "]", "==", "\"transformer\"", ":", "\n", "                ", "self", ".", "position_embedding", "=", "SinusoidalPositionalEmbedding", "(", "200", ",", "self", ".", "lstm_input_size", ")", "\n", "if", "lstm_config", "[", "'dim'", "]", "==", "512", ":", "\n", "                    ", "nhead", "=", "8", "\n", "", "if", "lstm_config", "[", "'dim'", "]", "==", "768", ":", "\n", "                    ", "nhead", "=", "12", "\n", "", "if", "lstm_config", "[", "'dim'", "]", "==", "1024", ":", "\n", "                    ", "nhead", "=", "16", "\n", "", "self", ".", "input_reduce", "=", "nn", ".", "Linear", "(", "self", ".", "lstm_input_size", ",", "lstm_config", "[", "'dim'", "]", ")", "\n", "encoder_layer", "=", "nn", ".", "TransformerEncoderLayer", "(", "d_model", "=", "lstm_config", "[", "'dim'", "]", ",", "\n", "nhead", "=", "nhead", ")", "# pytorch 1.7.0 do not support batch_first", "\n", "layernorm", "=", "nn", ".", "LayerNorm", "(", "lstm_config", "[", "'dim'", "]", ")", "\n", "self", ".", "trans", "=", "nn", ".", "TransformerEncoder", "(", "encoder_layer", ",", "num_layers", "=", "lstm_config", "[", "'layer'", "]", ",", "norm", "=", "layernorm", ")", "\n", "", "self", ".", "context_lstm", "=", "self", ".", "lstm_config", "[", "'context_lstm'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.lstm_forward": [[137, 144], ["lengths.cpu().numpy", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "lstm", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "lengths.cpu"], "methods", ["None"], ["", "", "def", "lstm_forward", "(", "self", ",", "x", ",", "lengths", ",", "lstm", ")", ":", "\n", "        ", "np_lengths", "=", "lengths", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np_lengths", "[", "np_lengths", "==", "0", "]", "=", "1", "\n", "x_pack", "=", "pack_padded_sequence", "(", "x", ",", "np_lengths", ",", "batch_first", "=", "True", ",", "enforce_sorted", "=", "False", ")", "\n", "h_pack", ",", "_", "=", "lstm", "(", "x_pack", ")", "\n", "h", ",", "_", "=", "pad_packed_sequence", "(", "h_pack", ",", "batch_first", "=", "True", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.combine": [[146, 164], ["subword_group.sum().unsqueeze", "subword_group.unsqueeze", "hidden.unsqueeze", "sup.sum", "hidden.unsqueeze", "sup.max", "subword_group.sum", "subword_group.float"], "methods", ["None"], ["", "def", "combine", "(", "self", ",", "hidden", ",", "subword_group", ",", "agg", ")", ":", "\n", "        ", "'''\n        hidden: bsz * seq * hidden\n        subword_group: bsz * seq1 * seq\n        '''", "\n", "assert", "agg", "in", "[", "'max'", ",", "'mean'", "]", "\n", "\n", "if", "agg", "==", "\"mean\"", ":", "\n", "            ", "size", "=", "subword_group", ".", "sum", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "+", "1e-20", "# bsz * seq1 * 1", "\n", "sup", "=", "subword_group", ".", "unsqueeze", "(", "-", "1", ")", "*", "hidden", ".", "unsqueeze", "(", "1", ")", "# bsz * seq1 * seq * hidden", "\n", "sup", "=", "sup", ".", "sum", "(", "dim", "=", "2", ")", "/", "size", "# bsz * seq1 * hidden", "\n", "", "elif", "agg", "==", "\"max\"", ":", "\n", "            ", "m", "=", "(", "(", "1", "-", "subword_group", ".", "float", "(", ")", ")", "*", "(", "-", "1e20", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", "# bsz * seq1 * seq * 1", "\n", "sup", "=", "m", "+", "hidden", ".", "unsqueeze", "(", "1", ")", "# bsz * seq1 * seq * hidden", "\n", "sup", "=", "sup", ".", "max", "(", "dim", "=", "2", ")", "[", "0", "]", "\n", "sup", "[", "sup", "==", "-", "1e20", "]", "=", "0", "\n", "\n", "", "return", "sup", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.get_bert_hidden": [[165, 247], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "input_ids.unsqueeze.unsqueeze.unsqueeze", "attention_mask.unsqueeze.unsqueeze.unsqueeze", "token_type_ids.unsqueeze.unsqueeze.unsqueeze", "ce_mask.unsqueeze.unsqueeze.unsqueeze", "context_ce_mask.unsqueeze.unsqueeze.unsqueeze", "hasattr", "torch.nn.ModuleList", "torch.nn.ModuleList", "text_encoder.TextEncoder.bert_list.append", "all_bert_hidden.append", "input_ids.unsqueeze.unsqueeze.size", "isinstance", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "index.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "index.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "bert", "bert", "bert", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "input_ids.unsqueeze.unsqueeze.size", "input_ids.unsqueeze.unsqueeze.size", "text_encoder.TextEncoder.combine", "input_ids.unsqueeze.unsqueeze.size", "input_ids.unsqueeze.unsqueeze.size", "text_encoder.TextEncoder.combine", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "index.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "len", "text_encoder.TextEncoder.combine", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "index.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "len", "text_encoder.TextEncoder.combine", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "subword_group.size", "len", "subword_group.size", "len", "input_ids.unsqueeze.unsqueeze.size", "subword_group.size", "input_ids.unsqueeze.unsqueeze.size", "subword_group.size"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.combine", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.combine", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.combine", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.combine"], ["", "def", "get_bert_hidden", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "ce_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "subword_group", "=", "None", ",", "\n", "context_ce_mask", "=", "None", ",", "context_subword_group", "=", "None", ",", "bert_embed", "=", "None", ")", ":", "\n", "        ", "if", "bert_embed", "is", "not", "None", ":", "\n", "            ", "return", "bert_embed", "\n", "\n", "", "all_bert_hidden", "=", "[", "]", "\n", "if", "len", "(", "input_ids", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "            ", "input_ids", "=", "input_ids", ".", "unsqueeze", "(", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", "\n", "token_type_ids", "=", "token_type_ids", ".", "unsqueeze", "(", "1", ")", "\n", "ce_mask", "=", "ce_mask", ".", "unsqueeze", "(", "1", ")", "\n", "context_ce_mask", "=", "context_ce_mask", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# for old version code", "\n", "", "if", "not", "hasattr", "(", "self", ",", "'bert_list'", ")", ":", "\n", "            ", "self", ".", "bert_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "bert_list", ".", "append", "(", "self", ".", "bert", ")", "\n", "self", ".", "bert_config_list", "=", "[", "self", ".", "bert_config", "]", "\n", "\n", "", "for", "idx", ",", "bert", "in", "enumerate", "(", "self", ".", "bert_list", ")", ":", "\n", "            ", "if", "load_kebiolm", "and", "isinstance", "(", "bert", ",", "KebioModel", ")", ":", "\n", "                ", "if", "self", ".", "bert_additional_config", "[", "'bert_output'", "]", "==", "'last'", ":", "\n", "                    ", "memory", "=", "bert", "(", "input_ids", "[", ":", ",", "idx", "]", ",", "attention_mask", "[", ":", ",", "idx", "]", ",", "token_type_ids", "=", "token_type_ids", "[", ":", ",", "idx", "]", ")", "[", "2", "]", "# Batch * Length * Hidden", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "bert_additional_config", "[", "'bert_output'", "]", "==", "'last'", ":", "\n", "                    ", "memory", "=", "bert", "(", "input_ids", "[", ":", ",", "idx", "]", ",", "attention_mask", "[", ":", ",", "idx", "]", ",", "token_type_ids", "=", "token_type_ids", "[", ":", ",", "idx", "]", ")", "[", "0", "]", "# Batch * Length * Hidden", "\n", "", "else", ":", "\n", "                    ", "opt", "=", "bert", "(", "input_ids", "[", ":", ",", "idx", "]", ",", "attention_mask", "[", ":", ",", "idx", "]", ",", "token_type_ids", "=", "token_type_ids", "[", ":", ",", "idx", "]", ",", "return_dict", "=", "True", ",", "output_hidden_states", "=", "True", ")", "[", "'hidden_states'", "]", "\n", "if", "self", ".", "bert_additional_config", "[", "'bert_output'", "]", "==", "'mean-last-4'", ":", "\n", "                        ", "memory", "=", "torch", ".", "stack", "(", "opt", "[", "-", "4", ":", "]", ",", "dim", "=", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "", "elif", "self", ".", "bert_additional_config", "[", "'bert_output'", "]", "==", "'concat-last-4'", ":", "\n", "                        ", "memory", "=", "torch", ".", "cat", "(", "opt", "[", "-", "4", ":", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "", "if", "not", "self", ".", "context_lstm", ":", "\n", "                ", "if", "self", ".", "bert_additional_config", "[", "'subword_aggr'", "]", "==", "'first'", ":", "\n", "# index.shape = Batch * 160 * Hidden", "\n", "                    ", "ce_length", "=", "(", "ce_mask", "[", ":", ",", "idx", "]", "==", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "arange", "=", "torch", ".", "arange", "(", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "index", "=", "torch", ".", "zeros", "(", "(", "input_ids", ".", "size", "(", "0", ")", ",", "200", ")", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "to", "(", "input_ids", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "input_ids", ".", "size", "(", "0", ")", ")", ":", "\n", "                        ", "index", "[", "i", "]", "[", "0", ":", "ce_length", "[", "i", "]", "]", "=", "arange", "[", "ce_mask", "[", ":", ",", "idx", "]", "[", "i", "]", "==", "1", "]", "\n", "", "index", "=", "index", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "bert_config_list", "[", "idx", "]", ".", "hidden_size", ")", "\n", "bert_hidden", "=", "torch", ".", "gather", "(", "memory", ",", "dim", "=", "1", ",", "index", "=", "index", ")", "\n", "", "elif", "self", ".", "bert_additional_config", "[", "'subword_aggr'", "]", "==", "'max'", ":", "\n", "                    ", "if", "len", "(", "subword_group", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "                        ", "sbg", "=", "subword_group", "\n", "", "else", ":", "\n", "                        ", "sbg", "=", "subword_group", "[", ":", ",", "idx", "]", "\n", "", "bert_hidden", "=", "self", ".", "combine", "(", "memory", ",", "sbg", ",", "'max'", ")", "\n", "", "elif", "self", ".", "bert_additional_config", "[", "'subword_aggr'", "]", "==", "'mean'", ":", "\n", "                    ", "if", "len", "(", "subword_group", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "                        ", "sbg", "=", "subword_group", "\n", "", "else", ":", "\n", "                        ", "sbg", "=", "subword_group", "[", ":", ",", "idx", "]", "\n", "", "bert_hidden", "=", "self", ".", "combine", "(", "memory", ",", "sbg", ",", "'mean'", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "bert_additional_config", "[", "'subword_aggr'", "]", "==", "'first'", ":", "\n", "                    ", "ce_length", "=", "(", "context_ce_mask", "[", ":", ",", "idx", "]", "==", "1", ")", ".", "sum", "(", "-", "1", ")", "\n", "arange", "=", "torch", ".", "arange", "(", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "index", "=", "torch", ".", "zeros", "(", "(", "input_ids", ".", "size", "(", "0", ")", ",", "200", "*", "3", ")", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "to", "(", "input_ids", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "input_ids", ".", "size", "(", "0", ")", ")", ":", "\n", "                        ", "index", "[", "i", "]", "[", "0", ":", "ce_length", "[", "i", "]", "]", "=", "arange", "[", "context_ce_mask", "[", ":", ",", "idx", "]", "[", "i", "]", "==", "1", "]", "\n", "", "index", "=", "index", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "bert_config_list", "[", "idx", "]", ".", "hidden_size", ")", "\n", "bert_hidden", "=", "torch", ".", "gather", "(", "memory", ",", "dim", "=", "1", ",", "index", "=", "index", ")", "\n", "", "elif", "self", ".", "bert_additional_config", "[", "'subword_aggr'", "]", "==", "'max'", ":", "\n", "                    ", "if", "len", "(", "subword_group", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "                        ", "sbg", "=", "context_subword_group", "\n", "", "else", ":", "\n", "                        ", "sbg", "=", "context_subword_group", "[", ":", ",", "idx", "]", "\n", "", "bert_hidden", "=", "self", ".", "combine", "(", "memory", ",", "sbg", ",", "'max'", ")", "\n", "", "elif", "self", ".", "bert_additional_config", "[", "'subword_aggr'", "]", "==", "'mean'", ":", "\n", "                    ", "if", "len", "(", "subword_group", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "                        ", "sbg", "=", "context_subword_group", "\n", "", "else", ":", "\n", "                        ", "sbg", "=", "context_subword_group", "[", ":", ",", "idx", "]", "\n", "", "bert_hidden", "=", "self", ".", "combine", "(", "memory", ",", "sbg", ",", "'mean'", ")", "\n", "\n", "", "", "all_bert_hidden", ".", "append", "(", "bert_hidden", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "all_bert_hidden", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.get_pos_word_char": [[248, 273], ["text_encoder.TextEncoder.pos_embedding", "text_encoder.TextEncoder.pos_dropout", "embeds.append", "text_encoder.TextEncoder.word_embedding", "text_encoder.TextEncoder.word_dropout", "embeds.append", "char.size", "char.view", "text_encoder.TextEncoder.char_embedding", "text_encoder.TextEncoder.char_dropout", "input_char_mask.sum", "text_encoder.TextEncoder.lstm_forward", "torch.gather().squeeze().reshape", "torch.gather().squeeze().reshape", "torch.gather().squeeze().reshape", "torch.gather().squeeze().reshape", "embeds.append", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather().squeeze", "torch.gather", "torch.gather", "torch.gather", "torch.gather"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.lstm_forward"], ["", "def", "get_pos_word_char", "(", "self", ",", "pos", ",", "word", ",", "char", ")", ":", "\n", "        ", "embeds", "=", "[", "]", "\n", "if", "self", ".", "pos_embedding_config", ":", "\n", "            ", "pos_embed", "=", "self", ".", "pos_embedding", "(", "pos", ")", "\n", "pos_embed", "=", "self", ".", "pos_dropout", "(", "pos_embed", ")", "\n", "embeds", ".", "append", "(", "pos_embed", ")", "\n", "", "if", "self", ".", "word_embedding_config", ":", "\n", "            ", "word_embed", "=", "self", ".", "word_embedding", "(", "word", ")", "\n", "word_embed", "=", "self", ".", "word_dropout", "(", "word_embed", ")", "\n", "embeds", ".", "append", "(", "word_embed", ")", "\n", "", "if", "self", ".", "char_embedding_config", ":", "\n", "# input_char: Batch * max_word_count * max_char_count", "\n", "            ", "bsz", ",", "word_cnt", ",", "ch_cnt", "=", "char", ".", "size", "(", ")", "\n", "input_char", "=", "char", ".", "view", "(", "-", "1", ",", "ch_cnt", ")", "\n", "input_char_embed", "=", "self", ".", "char_embedding", "(", "input_char", ")", "\n", "input_char_embed", "=", "self", ".", "char_dropout", "(", "input_char_embed", ")", "\n", "input_char_mask", "=", "input_char", "!=", "self", ".", "char_embedding_config", "[", "'padding_idx'", "]", "\n", "char_length", "=", "input_char_mask", ".", "sum", "(", "-", "1", ")", "\n", "char_length", "[", "char_length", "==", "0", "]", "=", "1", "\n", "# (Batch * max_word_count, max_char_count, char_dim)", "\n", "char_embed", "=", "self", ".", "lstm_forward", "(", "input_char_embed", ",", "char_length", ",", "self", ".", "char_lstm", ")", "\n", "char_idx", "=", "(", "char_length", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "char_embedding_config", "[", "'dim'", "]", ")", "\n", "last_char_embed", "=", "torch", ".", "gather", "(", "char_embed", ",", "1", ",", "char_idx", ")", ".", "squeeze", "(", "1", ")", ".", "reshape", "(", "bsz", ",", "word_cnt", ",", "-", "1", ")", "\n", "embeds", ".", "append", "(", "last_char_embed", ")", "\n", "", "return", "embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.get_embedding": [[274, 296], ["text_encoder.TextEncoder.get_bert_hidden", "embeds.extend", "text_encoder.TextEncoder.get_pos_word_char", "text_encoder.TextEncoder.get_pos_word_char", "text_encoder.TextEncoder.get_pos_word_char"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.get_bert_hidden", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.get_pos_word_char", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.get_pos_word_char", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.get_pos_word_char"], ["", "def", "get_embedding", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", ")", ":", "\n", "        ", "bert_hidden", "=", "self", ".", "get_bert_hidden", "(", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "bert_embed", ")", "\n", "\n", "embeds", "=", "[", "]", "\n", "if", "self", ".", "bert_additional_config", "[", "'bert_before_lstm'", "]", ":", "\n", "            ", "embeds", "=", "[", "bert_hidden", "]", "\n", "\n", "", "embeds", ".", "extend", "(", "self", ".", "get_pos_word_char", "(", "input_pos", ",", "input_word", ",", "input_char", ")", ")", "\n", "\n", "if", "not", "self", ".", "context_lstm", ":", "\n", "            ", "return", "bert_hidden", ",", "embeds", "\n", "\n", "", "l_embeds", "=", "self", ".", "get_pos_word_char", "(", "l_input_pos", ",", "l_input_word", ",", "l_input_char", ")", "\n", "r_embeds", "=", "self", ".", "get_pos_word_char", "(", "r_input_pos", ",", "r_input_word", ",", "r_input_char", ")", "\n", "\n", "return", "bert_hidden", ",", "(", "embeds", ",", "l_embeds", ",", "r_embeds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.lstm_encode": [[297, 315], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "text_encoder.TextEncoder.reduce_dim", "text_encoder.TextEncoder.lstm_config.get", "text_encoder.TextEncoder.lstm_forward", "text_encoder.TextEncoder.reduce_dim", "text_encoder.TextEncoder.input_reduce", "text_encoder.TextEncoder.trans().permute", "max", "text_encoder.TextEncoder.position_embedding", "max", "text_encoder.TextEncoder.trans", "max", "text_encoder.TextEncoder.size", "input_word.view", "max", "text_encoder.TextEncoder.permute", "text_encoder.TextEncoder.size"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.lstm_forward"], ["", "def", "lstm_encode", "(", "self", ",", "bert_hidden", ",", "embeds", ",", "embeds_length", ",", "input_word", ")", ":", "\n", "        ", "if", "not", "embeds", ":", "\n", "            ", "return", "bert_hidden", "[", ":", ",", "0", ":", "max", "(", "embeds_length", ")", ",", ":", "]", "\n", "", "concat_embeds", "=", "torch", ".", "cat", "(", "embeds", ",", "dim", "=", "-", "1", ")", "\n", "if", "self", ".", "lstm_config", ".", "get", "(", "'name'", ",", "'lstm'", ")", "==", "'lstm'", ":", "\n", "            ", "lstm_embeds", "=", "self", ".", "lstm_forward", "(", "concat_embeds", ",", "embeds_length", ",", "self", ".", "lstm", ")", "\n", "", "elif", "self", ".", "lstm_config", "[", "'name'", "]", "==", "\"transformer\"", ":", "\n", "            ", "concat_embeds", "=", "concat_embeds", "[", ":", ",", "0", ":", "max", "(", "embeds_length", ")", "]", "\n", "concat_embeds", "=", "self", ".", "input_reduce", "(", "concat_embeds", "+", "self", ".", "position_embedding", "(", "concat_embeds", ".", "size", "(", ")", ")", ")", "\n", "src_mask", "=", "(", "input_word", "==", "max", "(", "input_word", ".", "view", "(", "-", "1", ")", ")", ")", "[", ":", ",", "0", ":", "max", "(", "embeds_length", ")", "]", "# True is masked", "\n", "lstm_embeds", "=", "self", ".", "trans", "(", "concat_embeds", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ",", "src_key_padding_mask", "=", "src_mask", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "", "if", "self", ".", "bert_additional_config", "[", "'bert_before_lstm'", "]", ":", "\n", "            ", "lstm_embeds", "=", "self", ".", "reduce_dim", "(", "lstm_embeds", ")", "# Batch * max_word_count * hidden", "\n", "return", "lstm_embeds", "\n", "", "lstm_embeds", "=", "torch", ".", "cat", "(", "[", "bert_hidden", "[", ":", ",", "0", ":", "lstm_embeds", ".", "size", "(", "1", ")", "]", ",", "lstm_embeds", "]", ",", "dim", "=", "-", "1", ")", "\n", "lstm_embeds", "=", "self", ".", "reduce_dim", "(", "lstm_embeds", ")", "# Batch * max_word_count * hidden", "\n", "return", "lstm_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.context_lstm_encode": [[316, 391], ["context_map.unsqueeze().repeat", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "bert_hidden.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "context_map.unsqueeze().repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "text_encoder.TextEncoder.reduce_dim", "min", "min", "min", "text_encoder.TextEncoder.reduce_dim", "text_encoder.TextEncoder.size", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "context_map.unsqueeze", "torch.cat.size", "torch.cat.size", "min", "torch.cat.size", "torch.cat.size", "max", "torch.cat.size", "torch.cat.size", "max", "print", "ipdb.set_trace", "all_concat_list.append", "all_concat_list.append", "text_encoder.TextEncoder.lstm_config.get", "text_encoder.TextEncoder.lstm_forward", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "context_map.unsqueeze", "torch.nonzero", "torch.nonzero", "torch.nonzero", "torch.nonzero", "[].sum", "torch.gather.size", "torch.gather.size", "min", "min", "ce_mask[].sum", "ce_mask[].sum", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "max", "ce_mask[].sum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "max", "torch.gather.size", "torch.gather.size", "sen_lstm_embeds.size", "context_ce_mask[].sum", "torch.gather.size", "torch.gather.size", "torch.gather.size", "torch.gather.size", "torch.gather.size", "torch.gather.size"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.lstm_forward", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad"], ["", "def", "context_lstm_encode", "(", "self", ",", "bert_hidden", ",", "embeds", ",", "embeds_length", ",", "input_word", ",", "\n", "l_input_word", ",", "r_input_word", ",", "\n", "ce_mask", ",", "context_ce_mask", ",", "context_map", ")", ":", "\n", "        ", "embeds", ",", "l_embeds", ",", "r_embeds", "=", "embeds", "\n", "index", "=", "context_map", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "self", ".", "all_bert_hidden_dim", ")", "\n", "#import ipdb; ipdb.set_trace()", "\n", "\n", "#problem here", "\n", "sen_bert_hidden", "=", "torch", ".", "gather", "(", "bert_hidden", ",", "dim", "=", "1", ",", "index", "=", "index", ")", "\n", "bsz", "=", "bert_hidden", ".", "size", "(", "0", ")", "\n", "if", "not", "embeds", ":", "\n", "            ", "return", "sen_bert_hidden", "\n", "\n", "# concat embeds l_embeds r_embeds to all_concat_embeds, all_embeds_length", "\n", "#print(l_input_word.shape, r_input_word.shape, max(input_word.view(-1)))", "\n", "\n", "#import ipdb; ipdb.set_trace()", "\n", "#l_embeds_length = (l_input_word != max(input_word.view(-1))).sum(1)", "\n", "#r_embeds_length = (r_input_word != max(input_word.view(-1))).sum(1)", "\n", "\n", "", "if", "self", ".", "bert_additional_config", "[", "'bert_before_lstm'", "]", ":", "\n", "            ", "embeds", "=", "embeds", "[", "1", ":", "]", "\n", "", "embeds", "=", "torch", ".", "cat", "(", "embeds", ",", "dim", "=", "-", "1", ")", "\n", "l_embeds", "=", "torch", ".", "cat", "(", "l_embeds", ",", "dim", "=", "-", "1", ")", "\n", "r_embeds", "=", "torch", ".", "cat", "(", "r_embeds", ",", "dim", "=", "-", "1", ")", "\n", "\n", "word_dim", "=", "self", ".", "lstm_input_size", "-", "self", ".", "bert_hidden_dim", "\n", "# all_concat_embeds = torch.zeros((bsz, sen_bert_hidden.size(1), word_dim)).to(bert_hidden.device)", "\n", "all_embeds_length", "=", "torch", ".", "zeros_like", "(", "embeds_length", ")", "\n", "all_concat_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "            ", "ce_start_idx", "=", "torch", ".", "nonzero", "(", "ce_mask", "[", "i", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "l", "=", "min", "(", "l_embeds", ".", "size", "(", "1", ")", ",", "min", "(", "context_ce_mask", "[", "i", "]", "[", "0", ":", "ce_start_idx", "]", ".", "sum", "(", ")", ",", "sen_bert_hidden", ".", "size", "(", "1", ")", ")", ")", "\n", "m", "=", "min", "(", "embeds", ".", "size", "(", "1", ")", ",", "max", "(", "0", ",", "min", "(", "ce_mask", "[", "i", "]", ".", "sum", "(", ")", ",", "sen_bert_hidden", ".", "size", "(", "1", ")", "-", "l", ")", ")", ")", "\n", "r", "=", "min", "(", "r_embeds", ".", "size", "(", "1", ")", ",", "max", "(", "0", ",", "min", "(", "context_ce_mask", "[", "i", "]", ".", "sum", "(", ")", "-", "l", "-", "m", ",", "sen_bert_hidden", ".", "size", "(", "1", ")", "-", "l", "-", "m", ")", ")", ")", "\n", "\n", "if", "m", "!=", "ce_mask", "[", "i", "]", ".", "sum", "(", ")", "or", "m", "!=", "embeds_length", "[", "i", "]", ":", "\n", "                ", "print", "(", "m", ",", "ce_mask", "[", "i", "]", ".", "sum", "(", ")", ",", "embeds_length", "[", "i", "]", ")", "\n", "import", "ipdb", ";", "ipdb", ".", "set_trace", "(", ")", "\n", "\n", "#print(l,m,r,l+m+r,i,word_dim,embeds_length) ", "\n", "", "all_embeds_length", "[", "i", "]", "=", "l", "+", "m", "+", "r", "\n", "\n", "# if l:", "\n", "#     all_concat_embeds[i,0:l] = l_embeds[i,-l:]", "\n", "# all_concat_embeds[i,l:l+m] = embeds[i,0:m]", "\n", "# all_concat_embeds[i,l+m:l+m+r] = r_embeds[i,0:r]", "\n", "if", "l", ":", "\n", "                ", "all_concat_list", ".", "append", "(", "F", ".", "pad", "(", "torch", ".", "cat", "(", "[", "l_embeds", "[", "i", ",", "-", "l", ":", "]", ",", "embeds", "[", "i", ",", "0", ":", "m", "]", ",", "r_embeds", "[", "i", ",", "0", ":", "r", "]", "]", ",", "dim", "=", "0", ")", ",", "(", "0", ",", "0", ",", "0", ",", "sen_bert_hidden", ".", "size", "(", "1", ")", "-", "all_embeds_length", "[", "i", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "all_concat_list", ".", "append", "(", "F", ".", "pad", "(", "torch", ".", "cat", "(", "[", "embeds", "[", "i", ",", "0", ":", "m", "]", ",", "r_embeds", "[", "i", ",", "0", ":", "r", "]", "]", ",", "dim", "=", "0", ")", ",", "(", "0", ",", "0", ",", "0", ",", "sen_bert_hidden", ".", "size", "(", "1", ")", "-", "all_embeds_length", "[", "i", "]", ")", ")", ")", "\n", "\n", "#import ipdb; ipdb.set_trace()", "\n", "\n", "", "", "all_concat_embeds", "=", "torch", ".", "stack", "(", "all_concat_list", ",", "dim", "=", "0", ")", "\n", "all_concat_embeds", "=", "torch", ".", "cat", "(", "[", "all_concat_embeds", ",", "sen_bert_hidden", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "lstm_config", "[", "'name'", "]", "==", "\"transformer\"", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "elif", "self", ".", "lstm_config", ".", "get", "(", "'name'", ",", "'lstm'", ")", "==", "'lstm'", ":", "\n", "            ", "lstm_embeds", "=", "self", ".", "lstm_forward", "(", "all_concat_embeds", ",", "all_embeds_length", ",", "self", ".", "lstm", ")", "\n", "\n", "#import ipdb; ipdb.set_trace()", "\n", "\n", "", "if", "self", ".", "bert_additional_config", "[", "'bert_before_lstm'", "]", ":", "\n", "            ", "lstm_embeds", "=", "self", ".", "reduce_dim", "(", "lstm_embeds", ")", "# Batch * max_word_count * hidden", "\n", "#import ipdb; ipdb.set_trace()", "\n", "return", "torch", ".", "gather", "(", "lstm_embeds", ",", "dim", "=", "1", ",", "index", "=", "index", ")", "[", ":", ",", "0", ":", "max", "(", "embeds_length", ")", "]", "\n", "\n", "", "lstm_index", "=", "context_map", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "lstm_embeds", ".", "size", "(", "-", "1", ")", ")", "\n", "sen_lstm_embeds", "=", "torch", ".", "gather", "(", "lstm_embeds", ",", "dim", "=", "1", ",", "index", "=", "lstm_index", ")", "[", ":", ",", "0", ":", "max", "(", "embeds_length", ")", "]", "\n", "\n", "lstm_embeds", "=", "torch", ".", "cat", "(", "[", "sen_bert_hidden", "[", ":", ",", "0", ":", "sen_lstm_embeds", ".", "size", "(", "1", ")", "]", ",", "sen_lstm_embeds", "]", ",", "dim", "=", "-", "1", ")", "\n", "lstm_embeds", "=", "self", ".", "reduce_dim", "(", "lstm_embeds", ")", "# Batch * max_word_count * hidden", "\n", "return", "lstm_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.forward": [[392, 414], ["text_encoder.TextEncoder.get_embedding", "text_encoder.TextEncoder.lstm_encode", "text_encoder.TextEncoder.context_lstm_encode", "max", "input_word.view"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.get_embedding", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.lstm_encode", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.TextEncoder.context_lstm_encode"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "ce_mask", "=", "None", ",", "token_type_ids", "=", "None", ",", "subword_group", "=", "None", ",", "\n", "context_ce_mask", "=", "None", ",", "context_subword_group", "=", "None", ",", "context_map", "=", "None", ",", "\n", "input_word", "=", "None", ",", "input_char", "=", "None", ",", "input_pos", "=", "None", ",", "\n", "l_input_word", "=", "None", ",", "l_input_char", "=", "None", ",", "l_input_pos", "=", "None", ",", "\n", "r_input_word", "=", "None", ",", "r_input_char", "=", "None", ",", "r_input_pos", "=", "None", ",", "\n", "bert_embed", "=", "None", ")", ":", "\n", "#embeds_length = (input_word != self.word_embedding_config['padding_idx']).sum(1)", "\n", "        ", "embeds_length", "=", "(", "input_word", "!=", "max", "(", "input_word", ".", "view", "(", "-", "1", ")", ")", ")", ".", "sum", "(", "1", ")", "\n", "bert_hidden", ",", "embeds", "=", "self", ".", "get_embedding", "(", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", ")", "\n", "if", "not", "self", ".", "context_lstm", ":", "\n", "            ", "hidden", "=", "self", ".", "lstm_encode", "(", "bert_hidden", ",", "embeds", ",", "embeds_length", ",", "input_word", ")", "\n", "", "else", ":", "\n", "            ", "hidden", "=", "self", ".", "context_lstm_encode", "(", "bert_hidden", ",", "embeds", ",", "embeds_length", ",", "input_word", ",", "\n", "l_input_word", ",", "r_input_word", ",", "\n", "ce_mask", ",", "context_ce_mask", ",", "context_map", ")", "\n", "#import ipdb; ipdb.set_trace()", "\n", "", "return", "hidden", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.text_encoder.reinit": [[18, 30], ["layer.modules", "isinstance", "print", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "print", "module.bias.data.zero_", "module.weight.data.fill_"], "function", ["None"], ["", "def", "reinit", "(", "model", ",", "layer_count", ")", ":", "\n", "    ", "for", "layer", "in", "model", ".", "encoder", ".", "layer", "[", "-", "layer_count", ":", "]", ":", "\n", "        ", "for", "module", "in", "layer", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "                ", "print", "(", "f'Re init {module}'", ")", "\n", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "model", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "print", "(", "f'Re init {module}'", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span.SpanModel.__init__": [[13, 147], ["torch.nn.Module.__init__", "model.text_encoder.TextEncoder", "torch.nn.ModuleList", "torch.nn.ModuleList", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "model.losses.create_loss_function", "span.SpanModel.loss_config.get", "span.SpanModel.loss_config.get", "span.SpanModel.parser_list.append", "span.SpanModel.parser_list.append", "span.SpanModel.parser_list.append", "span.SpanModel.parser_list.append", "span.SpanModel.parser_list.append", "span.SpanModel.parser_list.append", "span.SpanModel.parser_list.append", "span.SpanModel.parser_list.append", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "model.parser.Biaffine", "torch.nn.Dropout", "torch.nn.Dropout", "model.parser.Biaffine", "model.parser.TriAffineParser", "model.parser.TriAffineParserWithoutLable", "model.parser.TriAffineParserWithoutBoundary", "model.parser.TriAffineParserWithoutScorer", "model.parser.TriAffineParserWithoutScorerPlusBoundary", "model.parser.LinearTriParser", "model.parser.TriAffineParserLinAttn", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get", "span.SpanModel.score_setting.get"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.losses.create_loss_function"], ["    ", "def", "__init__", "(", "self", ",", "bert_model_path", ",", "encoder_config_dict", ",", "\n", "num_class", ",", "score_setting", ",", "loss_config", ")", ":", "\n", "        ", "super", "(", "SpanModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "TextEncoder", "(", "bert_model_path", ",", "encoder_config_dict", "[", "0", "]", ",", "encoder_config_dict", "[", "1", "]", ",", "encoder_config_dict", "[", "2", "]", ",", "encoder_config_dict", "[", "3", "]", ",", "encoder_config_dict", "[", "4", "]", ")", "\n", "self", ".", "hidden_dim", "=", "self", ".", "encoder", ".", "bert_hidden_dim", "\n", "\n", "self", ".", "true_class", "=", "num_class", "\n", "self", ".", "num_class", "=", "self", ".", "true_class", "+", "1", "\n", "\n", "self", ".", "score_setting", "=", "score_setting", "\n", "self", ".", "parser_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "self", ".", "score_setting", ".", "get", "(", "'biaffine'", ",", "False", ")", ":", "\n", "            ", "self", ".", "parser_list", ".", "append", "(", "Biaffine", "(", "self", ".", "hidden_dim", ",", "self", ".", "num_class", ",", "self", ".", "score_setting", ".", "get", "(", "'dp'", ",", "0.2", ")", ")", ")", "\n", "# if self.score_setting.get('type_attention', False):", "\n", "#     self.parser_list.append(TypeAttention(self.hidden_dim, self.num_class))", "\n", "# if self.score_setting.get('tri_attention', False):", "\n", "#     self.parser_list.append(TriAttention(self.hidden_dim,", "\n", "#                                          self.num_class,", "\n", "#                                          self.score_setting.get('att_dim', None),", "\n", "#                                          not self.score_setting['no_tri_mask'],", "\n", "#                                          self.score_setting['reduce_last'],", "\n", "#                                          self.score_setting.get('dp', 0.2)))", "\n", "", "if", "self", ".", "score_setting", ".", "get", "(", "'tri_affine'", ",", "False", ")", ":", "\n", "# if not self.score_setting.get('pos_tri', False):", "\n", "#     self.parser_list.append(TriAffineParser(self.hidden_dim,", "\n", "#                                         self.num_class,", "\n", "#                                         self.score_setting.get('att_dim', None),", "\n", "#                                         not self.score_setting['no_tri_mask'],", "\n", "#                                         self.score_setting['reduce_last'],", "\n", "#                                         False,", "\n", "#                                         self.score_setting.get('dp', 0.2),", "\n", "#                                         self.score_setting['scale'],", "\n", "#                                         self.score_setting['rel_pos_attn'],", "\n", "#                                         self.score_setting['rel_pos'],", "\n", "#                                         self.score_setting['rel_k']))", "\n", "            ", "self", ".", "parser_list", ".", "append", "(", "TriAffineParser", "(", "self", ".", "hidden_dim", ",", "\n", "self", ".", "num_class", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'att_dim'", ",", "None", ")", ",", "\n", "not", "self", ".", "score_setting", "[", "'no_tri_mask'", "]", ",", "\n", "self", ".", "score_setting", "[", "'reduce_last'", "]", ",", "\n", "False", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'dp'", ",", "0.2", ")", ",", "\n", "self", ".", "score_setting", "[", "'scale'", "]", ",", "\n", "self", ".", "score_setting", "[", "'init_std'", "]", ",", "\n", "self", ".", "score_setting", "[", "'layer_norm'", "]", ")", ")", "\n", "", "if", "self", ".", "score_setting", ".", "get", "(", "'tri_affine_wo_label'", ",", "False", ")", ":", "\n", "            ", "self", ".", "parser_list", ".", "append", "(", "TriAffineParserWithoutLable", "(", "self", ".", "hidden_dim", ",", "\n", "self", ".", "num_class", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'att_dim'", ",", "None", ")", ",", "\n", "not", "self", ".", "score_setting", "[", "'no_tri_mask'", "]", ",", "\n", "self", ".", "score_setting", "[", "'reduce_last'", "]", ",", "\n", "False", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'dp'", ",", "0.2", ")", ",", "\n", "self", ".", "score_setting", "[", "'scale'", "]", ")", ")", "\n", "", "if", "self", ".", "score_setting", ".", "get", "(", "'tri_affine_wo_boundary'", ",", "False", ")", ":", "\n", "            ", "self", ".", "parser_list", ".", "append", "(", "TriAffineParserWithoutBoundary", "(", "self", ".", "hidden_dim", ",", "\n", "self", ".", "num_class", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'att_dim'", ",", "None", ")", ",", "\n", "not", "self", ".", "score_setting", "[", "'no_tri_mask'", "]", ",", "\n", "self", ".", "score_setting", "[", "'reduce_last'", "]", ",", "\n", "False", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'dp'", ",", "0.2", ")", ",", "\n", "self", ".", "score_setting", "[", "'scale'", "]", ")", ")", "\n", "", "if", "self", ".", "score_setting", ".", "get", "(", "'tri_affine_wo_scorer'", ",", "False", ")", ":", "\n", "            ", "self", ".", "parser_list", ".", "append", "(", "TriAffineParserWithoutScorer", "(", "self", ".", "hidden_dim", ",", "\n", "self", ".", "num_class", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'att_dim'", ",", "None", ")", ",", "\n", "not", "self", ".", "score_setting", "[", "'no_tri_mask'", "]", ",", "\n", "self", ".", "score_setting", "[", "'reduce_last'", "]", ",", "\n", "False", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'dp'", ",", "0.2", ")", ",", "\n", "self", ".", "score_setting", "[", "'scale'", "]", ")", ")", "\n", "", "if", "self", ".", "score_setting", ".", "get", "(", "'tri_affine_wo_scorer_w_boundary'", ",", "False", ")", ":", "\n", "            ", "self", ".", "parser_list", ".", "append", "(", "TriAffineParserWithoutScorerPlusBoundary", "(", "self", ".", "hidden_dim", ",", "\n", "self", ".", "num_class", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'att_dim'", ",", "None", ")", ",", "\n", "not", "self", ".", "score_setting", "[", "'no_tri_mask'", "]", ",", "\n", "self", ".", "score_setting", "[", "'reduce_last'", "]", ",", "\n", "False", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'dp'", ",", "0.2", ")", ",", "\n", "self", ".", "score_setting", "[", "'scale'", "]", ")", ")", "\n", "", "if", "self", ".", "score_setting", ".", "get", "(", "'lineartri'", ",", "False", ")", ":", "\n", "            ", "self", ".", "parser_list", ".", "append", "(", "LinearTriParser", "(", "self", ".", "hidden_dim", ",", "\n", "self", ".", "num_class", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'att_dim'", ",", "None", ")", ",", "\n", "not", "self", ".", "score_setting", "[", "'no_tri_mask'", "]", ",", "\n", "self", ".", "score_setting", "[", "'reduce_last'", "]", ",", "\n", "False", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'dp'", ",", "0.2", ")", ")", ")", "\n", "", "if", "self", ".", "score_setting", ".", "get", "(", "'linattntri'", ",", "False", ")", ":", "\n", "            ", "self", ".", "parser_list", ".", "append", "(", "TriAffineParserLinAttn", "(", "self", ".", "hidden_dim", ",", "\n", "self", ".", "num_class", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'att_dim'", ",", "None", ")", ",", "\n", "not", "self", ".", "score_setting", "[", "'no_tri_mask'", "]", ",", "\n", "self", ".", "score_setting", "[", "'reduce_last'", "]", ",", "\n", "False", ",", "\n", "self", ".", "score_setting", ".", "get", "(", "'dp'", ",", "0.2", ")", ")", ")", "\n", "\n", "", "self", ".", "loss_config", "=", "loss_config", "\n", "self", ".", "loss_config", "[", "'true_class'", "]", "=", "self", ".", "true_class", "\n", "self", ".", "class_loss_fn", "=", "create_loss_function", "(", "self", ".", "loss_config", ")", "\n", "\n", "self", ".", "token_aux_loss", "=", "False", "\n", "if", "'token_schema'", "in", "self", ".", "loss_config", ":", "\n", "            ", "self", ".", "token_aux_loss", "=", "True", "\n", "self", ".", "token_schema", "=", "loss_config", "[", "'token_schema'", "]", "\n", "if", "self", ".", "token_schema", "==", "\"BE\"", ":", "\n", "                ", "self", ".", "token_label_count", "=", "2", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIE\"", ":", "\n", "                ", "self", ".", "token_label_count", "=", "3", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIES\"", ":", "\n", "                ", "self", ".", "token_label_count", "=", "4", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BE-type\"", ":", "\n", "                ", "self", ".", "token_label_count", "=", "2", "*", "self", ".", "true_class", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIE-type\"", ":", "\n", "                ", "self", ".", "token_label_count", "=", "3", "*", "self", ".", "true_class", "\n", "", "elif", "self", ".", "token_schema", "==", "\"BIES-type\"", ":", "\n", "                ", "self", ".", "token_label_count", "=", "4", "*", "self", ".", "true_class", "\n", "", "self", ".", "linear_token", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "token_label_count", ")", "\n", "self", ".", "token_aux_weight", "=", "loss_config", "[", "'token_aux_weight'", "]", "\n", "self", ".", "token_dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "score_setting", ".", "get", "(", "'dp'", ",", "0.2", ")", ")", "\n", "\n", "", "self", ".", "negative_sampling", "=", "False", "\n", "if", "self", ".", "loss_config", ".", "get", "(", "'negative_sampling'", ",", "False", ")", ":", "\n", "            ", "self", ".", "negative_sampling", "=", "True", "\n", "self", ".", "hard_neg_dist", "=", "self", ".", "loss_config", "[", "'hard_neg_dist'", "]", "\n", "\n", "", "self", ".", "trans_aux_loss", "=", "False", "\n", "if", "self", ".", "loss_config", ".", "get", "(", "'trans_aux'", ",", "False", ")", ":", "\n", "            ", "self", ".", "trans_aux_loss", "=", "True", "\n", "self", ".", "trans_bi", "=", "Biaffine", "(", "self", ".", "hidden_dim", ",", "2", ")", "\n", "self", ".", "trans_dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "score_setting", ".", "get", "(", "'dp'", ",", "0.2", ")", ")", "\n", "self", ".", "trans_aux_weight", "=", "loss_config", "[", "'trans_aux_weight'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span.SpanModel.predict": [[148, 186], ["span.SpanModel.get_class_position", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to.unsqueeze().repeat", "torch.arange().to.unsqueeze().repeat", "torch.arange().to.unsqueeze().repeat", "torch.arange().to.unsqueeze().repeat", "range", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "hs_class_idx.size", "hs_class_idx.size", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "torch.bitwise_and", "result.append", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "range", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "x.size"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span.SpanModel.get_class_position"], ["", "", "def", "predict", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", "=", "None", ")", ":", "\n", "        ", "class_tuple", "=", "self", ".", "get_class_position", "(", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", ")", "\n", "\n", "hs_class", "=", "class_tuple", "[", "0", "]", "\n", "if", "self", ".", "loss_config", "[", "'name'", "]", "!=", "\"two\"", ":", "\n", "            ", "hs_class_prob", ",", "hs_class_idx", "=", "torch", ".", "max", "(", "hs_class", ",", "dim", "=", "-", "1", ")", "# B * S * Q", "\n", "", "else", ":", "\n", "            ", "hs_class_prob", ",", "hs_class_idx", "=", "torch", ".", "max", "(", "hs_class", "[", ":", ",", ":", ",", ":", ",", ":", "-", "1", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "result", "=", "[", "]", "\n", "bsz", ",", "seq_length", "=", "hs_class_idx", ".", "size", "(", "0", ")", ",", "hs_class_idx", ".", "size", "(", "1", ")", "\n", "seq", "=", "torch", ".", "arange", "(", "seq_length", ")", ".", "to", "(", "input_ids", ".", "device", ")", "\n", "\n", "if", "self", ".", "loss_config", "[", "'name'", "]", "!=", "\"two\"", ":", "\n", "            ", "use_idx", "=", "torch", ".", "bitwise_and", "(", "(", "seq", ".", "unsqueeze", "(", "0", ")", ">=", "seq", ".", "unsqueeze", "(", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "hs_class_idx", "<", "self", ".", "true_class", ")", "\n", "", "else", ":", "\n", "            ", "use_idx", "=", "torch", ".", "bitwise_and", "(", "(", "seq", ".", "unsqueeze", "(", "0", ")", ">=", "seq", ".", "unsqueeze", "(", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", ",", "hs_class", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", "<", "0", ")", "\n", "", "seq_x", "=", "seq", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "seq_length", ")", "\n", "seq_y", "=", "seq", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "seq_length", ",", "1", ")", "\n", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "            ", "x", "=", "seq_x", "[", "use_idx", "[", "i", "]", "]", "\n", "y", "=", "seq_y", "[", "use_idx", "[", "i", "]", "]", "\n", "cl", "=", "hs_class_idx", "[", "i", "]", "[", "use_idx", "[", "i", "]", "]", "\n", "prob", "=", "hs_class_prob", "[", "i", "]", "[", "use_idx", "[", "i", "]", "]", "\n", "result", ".", "append", "(", "[", "[", "x", "[", "j", "]", ",", "y", "[", "j", "]", ",", "cl", "[", "j", "]", ",", "prob", "[", "j", "]", "]", "for", "j", "in", "range", "(", "x", ".", "size", "(", "0", ")", ")", "]", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span.SpanModel.get_class_position": [[187, 216], ["span.SpanModel.encoder", "enumerate", "span.SpanModel.linear_token", "span.SpanModel.trans_bi", "parser", "parser", "span.SpanModel.token_dropout", "span.SpanModel.trans_dropout"], "methods", ["None"], ["", "def", "get_class_position", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", "=", "None", ")", ":", "\n", "        ", "memory", "=", "self", ".", "encoder", "(", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", ")", "\n", "for", "idx", ",", "parser", "in", "enumerate", "(", "self", ".", "parser_list", ")", ":", "\n", "            ", "if", "idx", "==", "0", ":", "\n", "                ", "hs_class", "=", "parser", "(", "memory", ")", "\n", "", "else", ":", "\n", "                ", "hs_class", "+=", "parser", "(", "memory", ")", "\n", "\n", "", "", "if", "self", ".", "token_aux_loss", ":", "\n", "            ", "token_class", "=", "self", ".", "linear_token", "(", "self", ".", "token_dropout", "(", "memory", ")", ")", "\n", "", "else", ":", "\n", "            ", "token_class", "=", "None", "\n", "\n", "", "if", "self", ".", "trans_aux_loss", ":", "\n", "            ", "trans_class", "=", "self", ".", "trans_bi", "(", "self", ".", "trans_dropout", "(", "memory", ")", ")", "\n", "", "else", ":", "\n", "            ", "trans_class", "=", "None", "\n", "\n", "", "return", "(", "hs_class", ",", "token_class", ",", "trans_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span.SpanModel.forward": [[217, 256], ["span.SpanModel.get_class_position", "hs_class.size", "span.SpanModel.class_loss_fn", "span_utils.negative_sampling", "hs_class.reshape", "span_utils.negative_sampling.reshape", "token_class.reshape.reshape.reshape", "token_label[].reshape", "head_trans[].float", "tail_trans[].float", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "token_label[].float", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.span.SpanModel.get_class_position", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.span_utils.negative_sampling"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "label", ",", "context_ce_mask", "=", "None", ",", "context_subword_group", "=", "None", ",", "context_map", "=", "None", ",", "\n", "l_input_word", "=", "None", ",", "l_input_char", "=", "None", ",", "l_input_pos", "=", "None", ",", "\n", "r_input_word", "=", "None", ",", "r_input_char", "=", "None", ",", "r_input_pos", "=", "None", ",", "\n", "token_label", "=", "None", ",", "bert_embed", "=", "None", ",", "head_trans", "=", "None", ",", "tail_trans", "=", "None", ")", ":", "\n", "        ", "class_tuple", "=", "self", ".", "get_class_position", "(", "input_ids", ",", "attention_mask", ",", "ce_mask", ",", "token_type_ids", ",", "subword_group", ",", "\n", "context_ce_mask", ",", "context_subword_group", ",", "context_map", ",", "\n", "input_word", ",", "input_char", ",", "input_pos", ",", "\n", "l_input_word", ",", "l_input_char", ",", "l_input_pos", ",", "\n", "r_input_word", ",", "r_input_char", ",", "r_input_pos", ",", "\n", "bert_embed", ")", "\n", "\n", "# deal with mask", "\n", "# hs_class: Batch * word * word * class", "\n", "# label: Batch * max_word * max_word", "\n", "hs_class", "=", "class_tuple", "[", "0", "]", "\n", "word_cnt", "=", "hs_class", ".", "size", "(", "1", ")", "\n", "label", "=", "label", "[", ":", ",", "0", ":", "word_cnt", ",", "0", ":", "word_cnt", "]", "\n", "if", "self", ".", "negative_sampling", ":", "\n", "            ", "label", "=", "negative_sampling", "(", "label", ",", "self", ".", "hard_neg_dist", ")", "\n", "\n", "", "class_loss", "=", "self", ".", "class_loss_fn", "(", "hs_class", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_class", ")", ",", "label", ".", "reshape", "(", "-", "1", ")", ")", "\n", "if", "self", ".", "token_aux_loss", ":", "\n", "            ", "token_class", "=", "class_tuple", "[", "1", "]", "\n", "token_class", "=", "token_class", ".", "reshape", "(", "-", "1", ",", "self", ".", "token_label_count", ")", "\n", "token_label", "=", "token_label", "[", ":", ",", "0", ":", "word_cnt", "]", ".", "reshape", "(", "-", "1", ",", "self", ".", "token_label_count", ")", "\n", "token_mask", "=", "token_label", "[", ":", ",", "0", "]", ">=", "0", "\n", "token_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "token_class", "[", "token_mask", "]", ",", "token_label", "[", "token_mask", "]", ".", "float", "(", ")", ")", "\n", "class_loss", "+=", "self", ".", "token_aux_weight", "*", "token_loss", "\n", "\n", "", "if", "self", ".", "trans_aux_loss", ":", "\n", "            ", "trans_class", "=", "class_tuple", "[", "2", "]", "[", ":", ",", "0", ":", "word_cnt", ",", "0", ":", "word_cnt", "]", "# b * s * s * 2", "\n", "head_trans", "=", "head_trans", "[", ":", ",", "0", ":", "word_cnt", ",", "0", ":", "word_cnt", "]", ".", "float", "(", ")", "\n", "tail_trans", "=", "tail_trans", "[", ":", ",", "0", ":", "word_cnt", ",", "0", ":", "word_cnt", "]", ".", "float", "(", ")", "\n", "trans_mask", "=", "head_trans", ">=", "0", "# b * s * s", "\n", "head_trans_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "trans_class", "[", "trans_mask", "]", "[", ":", ",", "0", "]", ",", "head_trans", "[", "trans_mask", "]", ")", "\n", "tail_trans_loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "(", "trans_class", "[", "trans_mask", "]", "[", ":", ",", "1", "]", ",", "tail_trans", "[", "trans_mask", "]", ")", "\n", "class_loss", "+=", "self", ".", "trans_aux_weight", "*", "(", "head_trans_loss", "+", "tail_trans_loss", ")", "\n", "", "return", "class_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.BiAffineBase.__init__": [[85, 94], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_class", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "parse_proj", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "num_class", ",", "hidden_dim", ",", "hidden_dim", ")", ")", "\n", "self", ".", "offset_proj", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "hidden_dim", ",", "num_class", ")", ")", "\n", "self", ".", "offset", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_class", ")", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.BiAffineBase.forward": [[95, 129], ["parser.BiAffineBase.parse_proj.size", "sent_states.view.view.size", "sent_states.view.view.size", "sent_states.view.view.size", "sent_states.view.view.view", "sent_states.view.view.transpose", "parser.BiAffineBase.parse_proj.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "log_potentials.view().transpose.view().transpose.view().transpose", "log_potentials.view().transpose.view().transpose.view", "sent_states.view.view.view", "sent_states.view.view.view", "parser.BiAffineBase.offset_proj.view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "log_potentials_1.view.view.view", "parser.BiAffineBase.offset.view", "log_potentials.view().transpose.view().transpose.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sent_states", ")", ":", "\n", "        ", "label_size", "=", "self", ".", "parse_proj", ".", "size", "(", "0", ")", "\n", "batch_size", "=", "sent_states", ".", "size", "(", "0", ")", "\n", "max_len", "=", "sent_states", ".", "size", "(", "1", ")", "\n", "hidden_size", "=", "sent_states", ".", "size", "(", "2", ")", "\n", "sent_states", "=", "sent_states", ".", "view", "(", "batch_size", ",", "1", ",", "max_len", ",", "hidden_size", ")", "\n", "sent_states_", "=", "sent_states", ".", "transpose", "(", "2", ",", "3", ")", "# [batch, 1, hidden_size, max_len]", "\n", "parse_proj", "=", "self", ".", "parse_proj", ".", "view", "(", "1", ",", "label_size", ",", "hidden_size", ",", "hidden_size", ")", "\n", "\n", "# project to CRF potentials", "\n", "\n", "# binear part", "\n", "# [batch, 1, len, hidden] * [1, label, hidden, hidden] -> [batch, label, len, hidden]", "\n", "proj", "=", "torch", ".", "matmul", "(", "sent_states", ",", "parse_proj", ")", "\n", "# [batch, label, len, hidden] * [batch, 1, hidden, len] -> [batch, label, len, len]", "\n", "log_potentials", "=", "torch", ".", "matmul", "(", "proj", ",", "sent_states_", ")", "\n", "# [batch, label, len, len] -> [batch, label, len * len] -> [[batch, len * len, label]", "\n", "log_potentials", "=", "log_potentials", ".", "view", "(", "batch_size", ",", "label_size", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# [[batch, len * len, label] -> [[batch, len, len, label]", "\n", "log_potentials_0", "=", "log_potentials", ".", "view", "(", "batch_size", ",", "max_len", ",", "max_len", ",", "label_size", ")", "\n", "\n", "# local offset", "\n", "sent_states_sum_0", "=", "sent_states", ".", "view", "(", "batch_size", ",", "max_len", ",", "1", ",", "hidden_size", ")", "\n", "sent_states_sum_1", "=", "sent_states", ".", "view", "(", "batch_size", ",", "1", ",", "max_len", ",", "hidden_size", ")", "\n", "# [batch, len, 1, hidden] + [batch, 1, len, hidden] -> [batch, len, len, hidden]", "\n", "sent_states_sum", "=", "(", "sent_states_sum_0", "+", "sent_states_sum_1", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "hidden_size", ")", "\n", "offset_proj", "=", "self", ".", "offset_proj", ".", "view", "(", "[", "1", ",", "hidden_size", ",", "-", "1", "]", ")", "\n", "# [batch, len * len, hidden] * [1, hidden, label] -> [batch, len * len, label]", "\n", "log_potentials_1", "=", "torch", ".", "matmul", "(", "sent_states_sum", ",", "offset_proj", ")", "\n", "log_potentials_1", "=", "log_potentials_1", ".", "view", "(", "batch_size", ",", "max_len", ",", "max_len", ",", "label_size", ")", "\n", "\n", "offset", "=", "self", ".", "offset", ".", "view", "(", "1", ",", "1", ",", "1", ",", "label_size", ")", "\n", "log_potentials", "=", "log_potentials_0", "+", "log_potentials_1", "+", "offset", "\n", "return", "log_potentials", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.Biaffine.__init__": [[132, 144], ["torch.nn.Module.__init__", "parser.BiAffineBase", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_class", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "_hidden_dim", "=", "hidden_dim", "//", "2", "\n", "self", ".", "biaffine", "=", "BiAffineBase", "(", "_hidden_dim", ",", "num_class", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "_hidden_dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "_hidden_dim", ",", "_hidden_dim", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", "\n", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.Biaffine.forward": [[145, 149], ["parser.Biaffine.linear", "parser.Biaffine.biaffine"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sent_states", ")", ":", "\n", "        ", "sent_states", "=", "self", ".", "linear", "(", "sent_states", ")", "\n", "log_potentials", "=", "self", ".", "biaffine", "(", "sent_states", ")", "\n", "return", "log_potentials", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TypeAttention.__init__": [[152, 160], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_class", ")", ":", "\n", "        ", "super", "(", "TypeAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_class", "=", "num_class", "\n", "\n", "self", ".", "W", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "U", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "V", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TypeAttention.forward_query": [[161, 181], ["head.reshape.reshape.size", "head.reshape.reshape.reshape", "tail.reshape.reshape.reshape", "parser.TypeAttention.U().unsqueeze().repeat", "torch.arange().unsqueeze().unsqueeze().to", "torch.arange().unsqueeze().unsqueeze().to", "torch.arange().unsqueeze().unsqueeze().to", "torch.arange().unsqueeze().unsqueeze().to", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "score.masked_fill.masked_fill.masked_fill", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "score.masked_fill.masked_fill.reshape", "memory.size", "memory.size", "torch.nn.ReLU", "torch.nn.ReLU", "parser.TypeAttention.W", "head.reshape.reshape.size", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.bitwise_or.unsqueeze().expand_as", "torch.bitwise_or.unsqueeze().expand_as", "torch.nn.Softmax", "torch.nn.Softmax", "z.unsqueeze().permute", "opt_einsum.contract", "parser.TypeAttention.U().unsqueeze", "torch.arange().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze", "torch.arange().unsqueeze().unsqueeze", "tail.reshape.reshape.masked_fill", "head_idx.unsqueeze", "tail_idx.unsqueeze", "torch.bitwise_or.unsqueeze", "torch.bitwise_or.unsqueeze", "z.unsqueeze", "parser.TypeAttention.U", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "head_idx.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "memory.size"], "methods", ["None"], ["", "def", "forward_query", "(", "self", ",", "memory", ",", "head", ",", "tail", ")", ":", "\n", "        ", "bsz", ",", "seq", "=", "memory", ".", "size", "(", "0", ")", ",", "memory", ".", "size", "(", "1", ")", "\n", "query", "=", "head", ".", "size", "(", "-", "2", ")", "\n", "\n", "head", "=", "head", ".", "reshape", "(", "bsz", ",", "-", "1", ",", "seq", ")", "\n", "tail", "=", "tail", ".", "reshape", "(", "bsz", ",", "-", "1", ",", "seq", ")", "\n", "\n", "z", "=", "nn", ".", "ReLU", "(", ")", "(", "self", ".", "W", "(", "memory", ")", ")", "# B * S * H", "\n", "score", "=", "self", ".", "U", "(", "z", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "head", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "# B * Q * S * C", "\n", "\n", "idx", "=", "torch", ".", "arange", "(", "memory", ".", "size", "(", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "memory", ".", "device", ")", "# B * Q * S", "\n", "head_idx", "=", "torch", ".", "max", "(", "head", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "# B * Q", "\n", "tail_idx", "=", "torch", ".", "max", "(", "tail", ".", "masked_fill", "(", "idx", "<", "head_idx", ".", "unsqueeze", "(", "-", "1", ")", ",", "value", "=", "-", "1e6", ")", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "mask_idx", "=", "torch", ".", "bitwise_or", "(", "idx", "<", "head_idx", ".", "unsqueeze", "(", "-", "1", ")", ",", "idx", ">", "tail_idx", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "score", "=", "score", ".", "masked_fill", "(", "mask_idx", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "score", ")", ",", "value", "=", "-", "1e6", ")", "\n", "alpha", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "2", ")", "(", "score", ")", "# B * Q * S * C", "\n", "type_span_h", "=", "torch", ".", "matmul", "(", "z", ".", "unsqueeze", "(", "1", ")", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", ",", "alpha", ")", "# B * Q * H * C", "\n", "score", "=", "contract", "(", "'bqhc,ch->bqc'", ",", "type_span_h", ",", "self", ".", "V", ".", "weight", ")", "+", "self", ".", "V", ".", "bias", "\n", "return", "score", ".", "reshape", "(", "bsz", ",", "-", "1", ",", "query", ",", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TypeAttention.forward_self": [[182, 205], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "parser.TypeAttention.U.weight.matmul", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cumsum().permute", "torch.cumsum().permute", "torch.cumsum().permute", "torch.cumsum().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.masked_fill_", "torch.cat.masked_fill_", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "parser.TypeAttention.W", "torch.relu.transpose", "torch.relu.transpose", "torch.max", "torch.max", "torch.max", "torch.max", "memory.unsqueeze", "torch.exp.permute().unsqueeze", "torch.exp.permute().unsqueeze", "opt_einsum.contract", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum().permute.unsqueeze", "torch.cumsum().permute.unsqueeze", "torch.cumsum.unsqueeze", "torch.cumsum.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.exp.permute", "torch.exp.permute", "torch.cumsum().permute.unsqueeze", "torch.cumsum().permute.unsqueeze", "torch.cumsum().permute.unsqueeze", "torch.cumsum().permute.unsqueeze", "torch.cumsum.unsqueeze", "torch.cumsum.unsqueeze", "torch.cumsum.unsqueeze", "torch.cumsum.unsqueeze"], "methods", ["None"], ["", "def", "forward_self", "(", "self", ",", "memory", ")", ":", "\n", "        ", "'''\n        memory: B * S * H\n        hs: B * (1) * Q(S) * H\n        output: B * Q(S) * S * C\n        '''", "\n", "z", "=", "torch", ".", "relu", "(", "self", ".", "W", "(", "memory", ")", ")", "# B * L * H", "\n", "score", "=", "self", ".", "U", ".", "weight", ".", "matmul", "(", "z", ".", "transpose", "(", "1", ",", "2", ")", ")", "# B * R * L", "\n", "max_score", "=", "torch", ".", "max", "(", "score", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ".", "values", "# B * R * L", "\n", "exp_score", "=", "torch", ".", "exp", "(", "score", "-", "max_score", ")", "# B * R * L", "\n", "cum_exp_score", "=", "torch", ".", "cumsum", "(", "exp_score", ",", "dim", "=", "2", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# B * L * R", "\n", "cum_cum_exp_score", "=", "torch", ".", "cat", "(", "(", "cum_exp_score", ".", "unsqueeze", "(", "1", ")", ",", "(", "cum_exp_score", ".", "unsqueeze", "(", "1", ")", "-", "cum_exp_score", ".", "unsqueeze", "(", "2", ")", ")", "[", ":", ",", ":", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "cum_cum_exp_score", ".", "masked_fill_", "(", "cum_cum_exp_score", "<=", "1e-6", ",", "100.", ")", "\n", "# B L L R", "\n", "\n", "m", "=", "memory", ".", "unsqueeze", "(", "2", ")", "*", "exp_score", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# B * L * R * H", "\n", "cum_m", "=", "torch", ".", "cumsum", "(", "m", ",", "dim", "=", "1", ")", "\n", "cum_cum_m", "=", "torch", ".", "cat", "(", "(", "cum_m", ".", "unsqueeze", "(", "1", ")", ",", "(", "cum_m", ".", "unsqueeze", "(", "1", ")", "-", "cum_m", ".", "unsqueeze", "(", "2", ")", ")", "[", ":", ",", ":", "-", "1", "]", ")", ",", "dim", "=", "1", ")", "\n", "# B L L R H", "\n", "\n", "type_span_h", "=", "torch", ".", "relu", "(", "cum_cum_m", "/", "cum_cum_exp_score", ".", "unsqueeze", "(", "-", "1", ")", ")", "# B L L R H", "\n", "score", "=", "contract", "(", "'bijrh,rh->bijr'", ",", "type_span_h", ",", "self", ".", "V", ".", "weight", ")", "+", "self", ".", "V", ".", "bias", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TypeAttention.forward": [[206, 210], ["parser.TypeAttention.forward_query", "parser.TypeAttention.forward_self"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParser.forward_query", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParserLinAttn.forward_self"], ["", "def", "forward", "(", "self", ",", "memory", ",", "head", "=", "None", ",", "tail", "=", "None", ")", ":", "\n", "        ", "if", "head", "is", "None", "and", "tail", "is", "None", ":", "\n", "            ", "return", "self", ".", "forward_self", "(", "memory", ")", "\n", "", "return", "self", ".", "forward_query", "(", "memory", ",", "head", ",", "tail", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffine.__init__": [[213, 228], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "parser.TriAffine.calculate_scale_factor", "parser.TriAffine.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffine.calculate_scale_factor", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffine.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "num_class", ",", "bias_x", "=", "True", ",", "bias_y", "=", "True", ",", "scale", "=", "\"none\"", ",", "init_std", "=", "0.01", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_in", "=", "n_in", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "bias_x", "=", "bias_x", "\n", "self", ".", "bias_y", "=", "bias_y", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "n_in", "+", "bias_x", ",", "\n", "n_in", ",", "\n", "n_in", "+", "bias_y", ",", "\n", "num_class", ")", ")", "\n", "self", ".", "init_std", "=", "init_std", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "calculate_scale_factor", "(", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffine.calculate_scale_factor": [[229, 236], ["parser.TriAffine.scale.find"], "methods", ["None"], ["", "def", "calculate_scale_factor", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "scale", "==", "\"none\"", ":", "\n", "            ", "self", ".", "scale_factor", "=", "1", "\n", "", "elif", "self", ".", "scale", "==", "\"sqrt\"", ":", "\n", "            ", "self", ".", "scale_factor", "=", "self", ".", "n_in", "**", "(", "-", "0.5", ")", "\n", "", "elif", "self", ".", "scale", ".", "find", "(", "\"tri\"", ")", ">=", "0", ":", "\n", "            ", "self", ".", "scale_factor", "=", "self", ".", "n_in", "**", "(", "-", "1.5", ")", "*", "self", ".", "init_std", "**", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffine.extra_repr": [[237, 245], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "f\"n_in={self.n_in}\"", "\n", "if", "self", ".", "bias_x", ":", "\n", "            ", "s", "+=", "f\", bias_x={self.bias_x}\"", "\n", "", "if", "self", ".", "bias_y", ":", "\n", "            ", "s", "+=", "f\", bias_y={self.bias_y}\"", "\n", "", "s", "+=", "f\", num_class={self.num_class}\"", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffine.reset_parameters": [[246, 249], ["torch.nn.init.normal_", "torch.nn.init.normal_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "#nn.init.zeros_(self.weight)", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "weight", ",", "std", "=", "self", ".", "init_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffine.forward": [[250, 276], ["opt_einsum.contract", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "opt_einsum.contract.squeeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "z", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x (torch.Tensor): [batch_size, seq_len, n_in]\n            y (torch.Tensor): [batch_size, seq_len, n_in]\n            z (torch.Tensor): [batch_size, seq_len, n_in]\n        Returns:\n            s (torch.Tensor): [batch_size, seq_len, seq_len, seq_len]\n        \"\"\"", "\n", "\n", "if", "self", ".", "bias_x", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "torch", ".", "ones_like", "(", "x", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "", "if", "self", ".", "bias_y", ":", "\n", "            ", "y", "=", "torch", ".", "cat", "(", "(", "y", ",", "torch", ".", "ones_like", "(", "y", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "#w = contract('bzk,ikjr->bzijr', z, self.weight) # bsz * seq * h * h * class", "\n", "#s = contract('bxi,bzijr,byj->bzxyr', x, w, y) # bsz * seq * seq * seq * class", "\n", "#s = contract('bxi,bzk,ikjr,byj->bzxyr', x, z, self.weight, y)", "\n", "#s = contract('bxi,bzk,ikjr,byj->bxzyr', x, z, self.weight, y)", "\n", "", "s", "=", "contract", "(", "'bxi,bzk,ikjr,byj->bxyzr'", ",", "x", ",", "z", ",", "self", ".", "weight", ",", "y", ")", "\n", "\n", "if", "self", ".", "num_class", "==", "1", ":", "\n", "            ", "return", "s", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "'scale_factor'", ")", ":", "\n", "            ", "s", "=", "s", "*", "self", ".", "scale_factor", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffine.forward_query": [[277, 291], ["opt_einsum.contract", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "opt_einsum.contract.squeeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "forward_query", "(", "self", ",", "x", ",", "y", ",", "z", ")", ":", "\n", "        ", "if", "self", ".", "bias_x", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "torch", ".", "ones_like", "(", "x", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "", "if", "self", ".", "bias_y", ":", "\n", "            ", "y", "=", "torch", ".", "cat", "(", "(", "y", ",", "torch", ".", "ones_like", "(", "y", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "\n", "", "s", "=", "contract", "(", "'bxi,bzk,ikjr,bxj->bzxr'", ",", "x", ",", "z", ",", "self", ".", "weight", ",", "y", ")", "\n", "\n", "if", "self", ".", "num_class", "==", "1", ":", "\n", "            ", "return", "s", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "'scale_factor'", ")", ":", "\n", "            ", "s", "=", "s", "*", "self", ".", "scale_factor", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffinePos.__init__": [[293, 307], ["parser.TriAffine.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "num_class", ",", "bias_x", "=", "True", ",", "bias_y", "=", "True", ",", "scale", "=", "\"none\"", ",", "\n", "init_std", "=", "0.01", ",", "k", "=", "64", ")", ":", "\n", "        ", "super", "(", "TriAffinePos", ",", "self", ")", ".", "__init__", "(", "n_in", ",", "num_class", ",", "bias_x", ",", "bias_y", ",", "scale", ",", "init_std", ")", "\n", "\n", "# self.init_bi_std = init_bi_std", "\n", "# self.weight_xz = nn.Parameter(torch.Tensor(n_in + bias_x, n_in, num_class))", "\n", "# self.weight_yz = nn.Parameter(torch.Tensor(n_in + bias_y, n_in, num_class))", "\n", "# self.weight_xy = nn.Parameter(torch.Tensor(n_in, n_in, num_class))", "\n", "# self.reset_bi_parameters()", "\n", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "pos_xz", "=", "nn", ".", "Embedding", "(", "2", "*", "k", "+", "1", ",", "n_in", "+", "bias_y", ")", "\n", "self", ".", "pos_yz", "=", "nn", ".", "Embedding", "(", "2", "*", "k", "+", "1", ",", "n_in", "+", "bias_x", ")", "\n", "self", ".", "pos_xy", "=", "nn", ".", "Embedding", "(", "2", "*", "k", "+", "1", ",", "n_in", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffinePos.move": [[313, 315], ["torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp().long", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "move", "(", "self", ",", "dis", ")", ":", "\n", "        ", "return", "torch", ".", "clamp", "(", "dis", "+", "self", ".", "k", ",", "0", ",", "2", "*", "self", ".", "k", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffinePos.forward": [[316, 353], ["opt_einsum.contract", "parser.TriAffinePos.pos_xz", "opt_einsum.contract", "parser.TriAffinePos.pos_xy", "opt_einsum.contract", "parser.TriAffinePos.pos_yz", "opt_einsum.contract", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "idx_z0.unsqueeze", "idx_x.unsqueeze", "parser.TriAffinePos.move", "idx_y.unsqueeze", "idx_x.unsqueeze", "parser.TriAffinePos.move", "parser.TriAffinePos.move", "opt_einsum.contract.unsqueeze", "opt_einsum.contract.squeeze", "idx_y.unsqueeze", "idx_z1.unsqueeze", "idx_y.unsqueeze", "idx_z0.unsqueeze", "opt_einsum.contract.unsqueeze", "opt_einsum.contract.unsqueeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffinePos.move", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffinePos.move", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffinePos.move"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ",", "z", ",", "idx_x", ",", "idx_y", ",", "idx_z0", ",", "idx_z1", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        x: B * seq * n_in\n        y: B * seq * n_in\n        z: B * seq * n_in\n        idx_x, idx_y, idx_z0, idx_z1: B * seq\n        \"\"\"", "\n", "if", "self", ".", "bias_x", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "torch", ".", "ones_like", "(", "x", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "", "if", "self", ".", "bias_y", ":", "\n", "            ", "y", "=", "torch", ".", "cat", "(", "(", "y", ",", "torch", ".", "ones_like", "(", "y", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "\n", "", "s", "=", "contract", "(", "'bxi,bzk,ikjr,byj->bxyzr'", ",", "x", ",", "z", ",", "self", ".", "weight", ",", "y", ")", "\n", "\n", "dis_xz", "=", "idx_z0", ".", "unsqueeze", "(", "1", ")", "-", "idx_x", ".", "unsqueeze", "(", "2", ")", "\n", "emb_xz", "=", "self", ".", "pos_xz", "(", "self", ".", "move", "(", "dis_xz", ")", ")", "# b * seq_x * seq_z * n_in", "\n", "s_xz", "=", "contract", "(", "'bxi,bzk,ikjr,bxzj->bxzr'", ",", "x", ",", "z", ",", "self", ".", "weight", ",", "emb_xz", ")", "\n", "\n", "dis_xy", "=", "idx_y", ".", "unsqueeze", "(", "1", ")", "-", "idx_x", ".", "unsqueeze", "(", "2", ")", "\n", "emb_xy", "=", "self", ".", "pos_xy", "(", "self", ".", "move", "(", "dis_xy", ")", ")", "\n", "s_xy", "=", "contract", "(", "'bxi,byj,ikjr,bxyk->bxyr'", ",", "x", ",", "y", ",", "self", ".", "weight", ",", "emb_xy", ")", "\n", "\n", "if", "idx_z1", "is", "not", "None", ":", "\n", "            ", "dis_yz", "=", "idx_y", ".", "unsqueeze", "(", "2", ")", "-", "idx_z1", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "dis_yz", "=", "idx_y", ".", "unsqueeze", "(", "2", ")", "-", "idx_z0", ".", "unsqueeze", "(", "1", ")", "\n", "", "emb_yz", "=", "self", ".", "pos_yz", "(", "self", ".", "move", "(", "dis_yz", ")", ")", "\n", "s_yz", "=", "contract", "(", "'byj,bzk,ikjr,byzi->byzr'", ",", "y", ",", "z", ",", "self", ".", "weight", ",", "emb_yz", ")", "\n", "\n", "s", "+=", "s_xz", ".", "unsqueeze", "(", "2", ")", "+", "s_xy", ".", "unsqueeze", "(", "3", ")", "+", "s_yz", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "self", ".", "num_class", "==", "1", ":", "\n", "            ", "return", "s", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "'scale_factor'", ")", ":", "\n", "            ", "s", "=", "s", "*", "self", ".", "scale_factor", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAttention.__init__": [[356, 381], ["torch.nn.Module.__init__", "parser.TriAffine", "torch.nn.Linear", "torch.nn.Linear", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_class", ",", "attention_dim", "=", "None", ",", "mask", "=", "True", ",", "\n", "reduce_last", "=", "False", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "TriAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_class", "=", "num_class", "\n", "if", "attention_dim", "is", "None", "or", "attention_dim", "==", "0", ":", "\n", "            ", "if", "self", ".", "hidden_dim", "==", "768", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "384", "\n", "", "else", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "150", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_hidden_dim", "=", "attention_dim", "\n", "", "self", ".", "parser", "=", "TriAffine", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "mask", "=", "mask", "\n", "self", ".", "reduce_last", "=", "reduce_last", "\n", "self", ".", "dropout", "=", "dropout", "\n", "if", "not", "self", ".", "reduce_last", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "self", ".", "V", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_dim", ",", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAttention.forward_self": [[382, 400], ["memory.size", "parser.TriAttention.linear_h", "parser.TriAttention.linear_t", "parser.TriAttention.linear_m", "parser.TriAttention.parser", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.softmax", "torch.softmax", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "parser.TriAttention.masked_fill_", "opt_einsum.contract", "opt_einsum.contract", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or"], "methods", ["None"], ["", "def", "forward_self", "(", "self", ",", "memory", ")", ":", "\n", "        ", "_", ",", "seq", ",", "_", "=", "memory", ".", "size", "(", ")", "\n", "head", "=", "self", ".", "linear_h", "(", "memory", ")", "\n", "tail", "=", "self", ".", "linear_t", "(", "memory", ")", "\n", "mid", "=", "self", ".", "linear_m", "(", "memory", ")", "\n", "\n", "score", "=", "self", ".", "parser", "(", "head", ",", "tail", ",", "mid", ")", "# b * seq * seq * seq * type", "\n", "seq_t", "=", "torch", ".", "arange", "(", "seq", ")", ".", "to", "(", "memory", ".", "device", ")", "\n", "if", "self", ".", "mask", ":", "\n", "            ", "seq_x", "=", "seq_t", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "seq", ",", "seq", ")", "\n", "seq_y", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "seq", ",", "1", ",", "seq", ")", "\n", "seq_z", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "seq", ",", "seq", ",", "1", ")", "\n", "score", ".", "masked_fill_", "(", "torch", ".", "bitwise_or", "(", "seq_z", ">", "seq_y", ",", "seq_z", "<", "seq_x", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "-", "1e6", ")", "\n", "", "alpha", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "-", "2", ")", "\n", "\n", "type_span_h", "=", "torch", ".", "relu", "(", "contract", "(", "'bkh,bijkr->bijrh'", ",", "memory", ",", "alpha", ")", ")", "\n", "score", "=", "contract", "(", "'bijrh,rh->bijr'", ",", "type_span_h", ",", "self", ".", "V", ".", "weight", ")", "+", "self", ".", "V", ".", "bias", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAttention.forward_query": [[401, 433], ["head.reshape.reshape.size", "head.reshape.reshape.reshape", "tail.reshape.reshape.reshape", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "parser.TriAttention.linear_m", "parser.TriAttention.parser.forward_query().permute", "torch.arange().to().unsqueeze().unsqueeze", "torch.arange().to().unsqueeze().unsqueeze", "torch.arange().to().unsqueeze().unsqueeze", "torch.arange().to().unsqueeze().unsqueeze", "torch.softmax", "torch.softmax", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "final_score.reshape", "memory.size", "memory.size", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax", "parser.TriAttention.linear_h", "parser.TriAttention.linear_t", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "parser.TriAttention.masked_fill_", "opt_einsum.contract", "opt_einsum.contract", "parser.TriAttention.parser.forward_query", "torch.arange().to().unsqueeze", "torch.arange().to().unsqueeze", "torch.arange().to().unsqueeze", "torch.arange().to().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "head_idx.unsqueeze", "tail_idx.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParser.forward_query"], ["", "def", "forward_query", "(", "self", ",", "memory", ",", "head", ",", "tail", ")", ":", "\n", "        ", "'''\n        memory: B * S * H\n        head: B * (L) * Q * S\n        tail: B * (L) * Q * S\n        output: B * (L) * Q * C\n        '''", "\n", "bsz", ",", "seq", "=", "memory", ".", "size", "(", "0", ")", ",", "memory", ".", "size", "(", "1", ")", "\n", "query", "=", "head", ".", "size", "(", "-", "2", ")", "\n", "\n", "head", "=", "head", ".", "reshape", "(", "bsz", ",", "-", "1", ",", "seq", ")", "\n", "tail", "=", "tail", ".", "reshape", "(", "bsz", ",", "-", "1", ",", "seq", ")", "\n", "head_prob", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "head", ")", "\n", "tail_prob", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "tail", ")", "\n", "\n", "head_rep", "=", "torch", ".", "bmm", "(", "head_prob", ",", "self", ".", "linear_h", "(", "memory", ")", ")", "# B * Q * H1", "\n", "tail_rep", "=", "torch", ".", "bmm", "(", "tail_prob", ",", "self", ".", "linear_t", "(", "memory", ")", ")", "\n", "mid_rep", "=", "self", ".", "linear_m", "(", "memory", ")", "\n", "\n", "score", "=", "self", ".", "parser", ".", "forward_query", "(", "head_rep", ",", "tail_rep", ",", "mid_rep", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# B * query * seq * type", "\n", "seq_t", "=", "torch", ".", "arange", "(", "seq", ")", ".", "to", "(", "memory", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "# B * query * seq", "\n", "\n", "head_idx", "=", "torch", ".", "max", "(", "head_prob", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "# B * query", "\n", "tail_idx", "=", "torch", ".", "max", "(", "tail_prob", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "\n", "if", "self", ".", "mask", ":", "\n", "            ", "score", ".", "masked_fill_", "(", "torch", ".", "bitwise_or", "(", "seq_t", "<", "head_idx", ".", "unsqueeze", "(", "-", "1", ")", ",", "seq_t", ">", "tail_idx", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "-", "1e6", ")", "\n", "", "alpha", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "-", "2", ")", "\n", "\n", "type_span_h", "=", "torch", ".", "relu", "(", "contract", "(", "'bsh,bqsr->bqrh'", ",", "memory", ",", "alpha", ")", ")", "\n", "final_score", "=", "contract", "(", "'bqrh,rh->bqr'", ",", "type_span_h", ",", "self", ".", "V", ".", "weight", ")", "+", "self", ".", "V", ".", "bias", "\n", "return", "final_score", ".", "reshape", "(", "bsz", ",", "-", "1", ",", "query", ",", "self", ".", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAttention.forward": [[434, 438], ["parser.TriAttention.forward_query", "parser.TriAttention.forward_self"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParser.forward_query", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParserLinAttn.forward_self"], ["", "def", "forward", "(", "self", ",", "memory", ",", "head", "=", "None", ",", "tail", "=", "None", ")", ":", "\n", "        ", "if", "head", "is", "None", "and", "tail", "is", "None", ":", "\n", "            ", "return", "self", ".", "forward_self", "(", "memory", ")", "\n", "", "return", "self", ".", "forward_query", "(", "memory", ",", "head", ",", "tail", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParser.__init__": [[440, 493], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "parser.TriAffinePos", "parser.TriAffine", "parser.TriAffinePos", "parser.TriAffine", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_class", ",", "attention_dim", "=", "None", ",", "mask", "=", "True", ",", "reduce_last", "=", "False", ",", "\n", "return_attention", "=", "False", ",", "dropout", "=", "0.0", ",", "scale", "=", "\"none\"", ",", "init_std", "=", "0.01", ",", "layer_norm", "=", "False", ",", "\n", "rel_pos_attn", "=", "False", ",", "rel_pos", "=", "False", ",", "k", "=", "64", ")", ":", "\n", "        ", "super", "(", "TriAffineParser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_class", "=", "num_class", "\n", "if", "attention_dim", "is", "None", "or", "attention_dim", "==", "0", ":", "\n", "            ", "if", "self", ".", "hidden_dim", "==", "768", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "384", "\n", "", "else", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "150", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_hidden_dim", "=", "attention_dim", "\n", "", "self", ".", "mask", "=", "mask", "\n", "\n", "self", ".", "rel_pos_attn", "=", "rel_pos_attn", "\n", "self", ".", "rel_pos", "=", "rel_pos", "\n", "if", "self", ".", "rel_pos_attn", ":", "\n", "            ", "self", ".", "parser0", "=", "TriAffinePos", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ",", "scale", "=", "scale", ",", "init_std", "=", "init_std", ",", "k", "=", "k", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "parser0", "=", "TriAffine", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ",", "scale", "=", "scale", ",", "init_std", "=", "init_std", ")", "\n", "", "if", "self", ".", "rel_pos", ":", "\n", "            ", "self", ".", "parser1", "=", "TriAffinePos", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ",", "scale", "=", "\"none\"", ",", "init_std", "=", "init_std", ",", "k", "=", "k", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "parser1", "=", "TriAffine", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ",", "scale", "=", "\"none\"", ",", "init_std", "=", "init_std", ")", "\n", "\n", "", "self", ".", "reduce_last", "=", "reduce_last", "\n", "self", ".", "dropout", "=", "dropout", "\n", "if", "not", "self", ".", "reduce_last", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_h1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_h1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "self", ".", "uni", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_class", ")", ")", "\n", "self", ".", "return_attention", "=", "return_attention", "\n", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "if", "self", ".", "layer_norm", ":", "\n", "            ", "self", ".", "norm_h", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_t", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_m", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_h1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_t1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_m1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParser.forward_self": [[494, 546], ["memory.size", "parser.TriAffineParser.linear_h", "parser.TriAffineParser.linear_t", "parser.TriAffineParser.linear_m", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.softmax", "torch.softmax", "parser.TriAffineParser.linear_h1", "parser.TriAffineParser.linear_t1", "parser.TriAffineParser.linear_m1", "parser.TriAffineParser.uni.unsqueeze().unsqueeze().unsqueeze", "hasattr", "parser.TriAffineParser.norm_h", "parser.TriAffineParser.norm_t", "parser.TriAffineParser.norm_m", "hasattr", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "parser.TriAffineParser.parser0", "parser.TriAffineParser.parser0", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "parser.TriAffineParser.masked_fill_", "hasattr", "parser.TriAffineParser.norm_h1", "parser.TriAffineParser.norm_t1", "parser.TriAffineParser.norm_m1", "hasattr", "parser.TriAffineParser.parser1", "parser.TriAffineParser.parser1", "opt_einsum.contract", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "parser.TriAffineParser.uni.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "parser.TriAffineParser.uni.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or"], "methods", ["None"], ["", "", "def", "forward_self", "(", "self", ",", "memory", ")", ":", "\n", "        ", "_", ",", "seq", ",", "_", "=", "memory", ".", "size", "(", ")", "\n", "head", "=", "self", ".", "linear_h", "(", "memory", ")", "\n", "tail", "=", "self", ".", "linear_t", "(", "memory", ")", "\n", "mid", "=", "self", ".", "linear_m", "(", "memory", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'layer_norm'", ")", "and", "self", ".", "layer_norm", ":", "\n", "            ", "head", "=", "self", ".", "norm_h", "(", "head", ")", "\n", "tail", "=", "self", ".", "norm_t", "(", "tail", ")", "\n", "mid", "=", "self", ".", "norm_m", "(", "mid", ")", "\n", "\n", "", "seq_t", "=", "torch", ".", "arange", "(", "seq", ")", ".", "to", "(", "memory", ".", "device", ")", "\n", "\"\"\"\n        if not self.rel_pos_attn:\n            score = self.parser0(head, tail, mid) # b * seq * seq * seq * type\n        else:\n            seq_tb = seq_t.unsqueeze(0)\n            score = self.parser0(head, tail, mid, seq_tb, seq_tb, seq_tb)\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "'rel_pos_attn'", ")", "and", "self", ".", "rel_pos_attn", ":", "\n", "            ", "seq_tb", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", "\n", "score", "=", "self", ".", "parser0", "(", "head", ",", "tail", ",", "mid", ",", "seq_tb", ",", "seq_tb", ",", "seq_tb", ")", "\n", "", "else", ":", "\n", "            ", "score", "=", "self", ".", "parser0", "(", "head", ",", "tail", ",", "mid", ")", "# b * seq * seq * seq * type", "\n", "\n", "\n", "", "if", "self", ".", "mask", ":", "\n", "            ", "seq_x", "=", "seq_t", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "seq", ",", "seq", ")", "\n", "seq_y", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "seq", ",", "1", ",", "seq", ")", "\n", "seq_z", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "seq", ",", "seq", ",", "1", ")", "\n", "score", ".", "masked_fill_", "(", "torch", ".", "bitwise_or", "(", "seq_z", ">", "seq_y", ",", "seq_z", "<", "seq_x", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "-", "1e6", ")", "\n", "", "alpha", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "-", "2", ")", "\n", "\n", "head1", "=", "self", ".", "linear_h1", "(", "memory", ")", "\n", "tail1", "=", "self", ".", "linear_t1", "(", "memory", ")", "\n", "mid1", "=", "self", ".", "linear_m1", "(", "memory", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'layer_norm'", ")", "and", "self", ".", "layer_norm", ":", "\n", "            ", "head1", "=", "self", ".", "norm_h1", "(", "head1", ")", "\n", "tail1", "=", "self", ".", "norm_t1", "(", "tail1", ")", "\n", "mid1", "=", "self", ".", "norm_m1", "(", "mid1", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "'rel_pos'", ")", "and", "self", ".", "rel_pos", ":", "\n", "            ", "score1", "=", "self", ".", "parser1", "(", "head1", ",", "tail1", ",", "mid1", ",", "seq_tb", ",", "seq_tb", ",", "seq_tb", ")", "\n", "", "else", ":", "\n", "            ", "score1", "=", "self", ".", "parser1", "(", "head1", ",", "tail1", ",", "mid1", ")", "\n", "", "uni_score", "=", "self", ".", "uni", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "final_score", "=", "contract", "(", "'bijkr,bijkr->bijr'", ",", "alpha", ",", "score1", ")", "+", "uni_score", "\n", "\n", "if", "not", "self", ".", "return_attention", ":", "\n", "            ", "return", "final_score", "\n", "", "return", "final_score", ",", "alpha", ",", "head1", ",", "tail1", ",", "mid1", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParser.forward_query": [[547, 549], ["None"], "methods", ["None"], ["", "def", "forward_query", "(", "self", ",", "memory", ",", "head", ",", "tail", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "# bsz, seq = memory.size(0), memory.size(1)", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParser.forward": [[582, 586], ["parser.TriAffineParser.forward_query", "parser.TriAffineParser.forward_self"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParser.forward_query", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParserLinAttn.forward_self"], ["", "def", "forward", "(", "self", ",", "memory", ",", "head", "=", "None", ",", "tail", "=", "None", ")", ":", "\n", "        ", "if", "head", "is", "None", "and", "tail", "is", "None", ":", "\n", "            ", "return", "self", ".", "forward_self", "(", "memory", ")", "\n", "", "return", "self", ".", "forward_query", "(", "memory", ",", "head", ",", "tail", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParserWithoutLable.__init__": [[589, 633], ["parser.TriAffineParser.__init__", "parser.TriAffine", "parser.TriAffine", "torch.nn.Parameter", "torch.nn.Parameter", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_class", ",", "attention_dim", "=", "None", ",", "mask", "=", "True", ",", "reduce_last", "=", "False", ",", "\n", "return_attention", "=", "False", ",", "dropout", "=", "0.0", ",", "scale", "=", "\"none\"", ",", "init_std", "=", "0.01", ",", "layer_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "TriAffineParser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_class", "=", "num_class", "\n", "if", "attention_dim", "is", "None", "or", "attention_dim", "==", "0", ":", "\n", "            ", "if", "self", ".", "hidden_dim", "==", "768", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "384", "\n", "", "else", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "150", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_hidden_dim", "=", "attention_dim", "\n", "", "self", ".", "mask", "=", "mask", "\n", "\n", "self", ".", "parser0", "=", "TriAffine", "(", "self", ".", "_hidden_dim", ",", "1", ",", "scale", "=", "scale", ",", "init_std", "=", "init_std", ")", "\n", "self", ".", "parser1", "=", "TriAffine", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ",", "scale", "=", "\"none\"", ",", "init_std", "=", "init_std", ")", "\n", "\n", "self", ".", "reduce_last", "=", "reduce_last", "\n", "self", ".", "dropout", "=", "dropout", "\n", "if", "not", "self", ".", "reduce_last", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_h1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_h1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "self", ".", "uni", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_class", ")", ")", "\n", "self", ".", "return_attention", "=", "return_attention", "\n", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "if", "self", ".", "layer_norm", ":", "\n", "            ", "self", ".", "norm_h", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_t", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_m", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_h1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_t1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_m1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParserWithoutLable.forward_self": [[634, 670], ["memory.size", "parser.TriAffineParserWithoutLable.linear_h", "parser.TriAffineParserWithoutLable.linear_t", "parser.TriAffineParserWithoutLable.linear_m", "parser.TriAffineParserWithoutLable.parser0().unsqueeze", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.softmax", "torch.softmax", "parser.TriAffineParserWithoutLable.linear_h1", "parser.TriAffineParserWithoutLable.linear_t1", "parser.TriAffineParserWithoutLable.linear_m1", "parser.TriAffineParserWithoutLable.parser1", "parser.TriAffineParserWithoutLable.uni.unsqueeze().unsqueeze().unsqueeze", "hasattr", "parser.TriAffineParserWithoutLable.norm_h", "parser.TriAffineParserWithoutLable.norm_t", "parser.TriAffineParserWithoutLable.norm_m", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "parser.TriAffineParserWithoutLable.masked_fill_", "hasattr", "parser.TriAffineParserWithoutLable.norm_h1", "parser.TriAffineParserWithoutLable.norm_t1", "parser.TriAffineParserWithoutLable.norm_m1", "opt_einsum.contract", "parser.TriAffineParserWithoutLable.parser0", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "parser.TriAffineParserWithoutLable.uni.unsqueeze().unsqueeze", "torch.softmax.repeat", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "parser.TriAffineParserWithoutLable.uni.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or"], "methods", ["None"], ["", "", "def", "forward_self", "(", "self", ",", "memory", ")", ":", "\n", "        ", "_", ",", "seq", ",", "_", "=", "memory", ".", "size", "(", ")", "\n", "head", "=", "self", ".", "linear_h", "(", "memory", ")", "\n", "tail", "=", "self", ".", "linear_t", "(", "memory", ")", "\n", "mid", "=", "self", ".", "linear_m", "(", "memory", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'layer_norm'", ")", "and", "self", ".", "layer_norm", ":", "\n", "            ", "head", "=", "self", ".", "norm_h", "(", "head", ")", "\n", "tail", "=", "self", ".", "norm_t", "(", "tail", ")", "\n", "mid", "=", "self", ".", "norm_m", "(", "mid", ")", "\n", "\n", "", "score", "=", "self", ".", "parser0", "(", "head", ",", "tail", ",", "mid", ")", ".", "unsqueeze", "(", "-", "1", ")", "# b * seq * seq * seq * type", "\n", "seq_t", "=", "torch", ".", "arange", "(", "seq", ")", ".", "to", "(", "memory", ".", "device", ")", "\n", "if", "self", ".", "mask", ":", "\n", "            ", "seq_x", "=", "seq_t", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "seq", ",", "seq", ")", "\n", "seq_y", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "seq", ",", "1", ",", "seq", ")", "\n", "seq_z", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "seq", ",", "seq", ",", "1", ")", "\n", "score", ".", "masked_fill_", "(", "torch", ".", "bitwise_or", "(", "seq_z", ">", "seq_y", ",", "seq_z", "<", "seq_x", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "-", "1e6", ")", "\n", "", "alpha", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "-", "2", ")", "\n", "\n", "head1", "=", "self", ".", "linear_h1", "(", "memory", ")", "\n", "tail1", "=", "self", ".", "linear_t1", "(", "memory", ")", "\n", "mid1", "=", "self", ".", "linear_m1", "(", "memory", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'layer_norm'", ")", "and", "self", ".", "layer_norm", ":", "\n", "            ", "head1", "=", "self", ".", "norm_h1", "(", "head1", ")", "\n", "tail1", "=", "self", ".", "norm_t1", "(", "tail1", ")", "\n", "mid1", "=", "self", ".", "norm_m1", "(", "mid1", ")", "\n", "\n", "", "score1", "=", "self", ".", "parser1", "(", "head1", ",", "tail1", ",", "mid1", ")", "\n", "uni_score", "=", "self", ".", "uni", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "final_score", "=", "contract", "(", "'bijkr,bijkr->bijr'", ",", "alpha", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "1", ",", "self", ".", "num_class", ")", ",", "score1", ")", "+", "uni_score", "\n", "\n", "if", "not", "self", ".", "return_attention", ":", "\n", "            ", "return", "final_score", "\n", "", "return", "final_score", ",", "alpha", ",", "head1", ",", "tail1", ",", "mid1", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParserWithoutBoundary.__init__": [[672, 717], ["parser.TriAffineParser.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "parser.TriAffine", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_class", ",", "attention_dim", "=", "None", ",", "mask", "=", "True", ",", "reduce_last", "=", "False", ",", "\n", "return_attention", "=", "False", ",", "dropout", "=", "0.0", ",", "scale", "=", "\"none\"", ",", "init_std", "=", "0.01", ",", "layer_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "TriAffineParser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_class", "=", "num_class", "\n", "if", "attention_dim", "is", "None", "or", "attention_dim", "==", "0", ":", "\n", "            ", "if", "self", ".", "hidden_dim", "==", "768", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "384", "\n", "", "else", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "150", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_hidden_dim", "=", "attention_dim", "\n", "", "self", ".", "mask", "=", "mask", "\n", "\n", "# self.parser0 = TriAffine(self._hidden_dim, 1, scale=scale, init_std=init_std)", "\n", "self", ".", "query0", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_class", ",", "self", ".", "_hidden_dim", ")", ")", "\n", "self", ".", "parser1", "=", "TriAffine", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ",", "scale", "=", "\"none\"", ",", "init_std", "=", "init_std", ")", "\n", "\n", "self", ".", "reduce_last", "=", "reduce_last", "\n", "self", ".", "dropout", "=", "dropout", "\n", "if", "not", "self", ".", "reduce_last", ":", "\n", "# self.linear_h = MLP(self.hidden_dim, self._hidden_dim, self._hidden_dim, 2, self.dropout)", "\n", "# self.linear_t = MLP(self.hidden_dim, self._hidden_dim, self._hidden_dim, 2, self.dropout)", "\n", "            ", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_h1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "else", ":", "\n", "# self.linear_h = MLP(self.hidden_dim, self.hidden_dim, self._hidden_dim, 2, self.dropout)", "\n", "# self.linear_t = MLP(self.hidden_dim, self.hidden_dim, self._hidden_dim, 2, self.dropout)", "\n", "            ", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_h1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "self", ".", "uni", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_class", ")", ")", "\n", "self", ".", "return_attention", "=", "return_attention", "\n", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "if", "self", ".", "layer_norm", ":", "\n", "# self.norm_h = nn.LayerNorm(self._hidden_dim)", "\n", "# self.norm_t = nn.LayerNorm(self._hidden_dim)", "\n", "            ", "self", ".", "norm_m", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_h1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_t1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_m1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParserWithoutBoundary.forward_self": [[718, 755], ["memory.size", "parser.TriAffineParserWithoutBoundary.linear_m", "opt_einsum.contract().unsqueeze().unsqueeze().repeat", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.softmax", "torch.softmax", "parser.TriAffineParserWithoutBoundary.linear_h1", "parser.TriAffineParserWithoutBoundary.linear_t1", "parser.TriAffineParserWithoutBoundary.linear_m1", "parser.TriAffineParserWithoutBoundary.parser1", "parser.TriAffineParserWithoutBoundary.uni.unsqueeze().unsqueeze().unsqueeze", "hasattr", "parser.TriAffineParserWithoutBoundary.norm_m", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "opt_einsum.contract().unsqueeze().unsqueeze().repeat.masked_fill_", "hasattr", "parser.TriAffineParserWithoutBoundary.norm_h1", "parser.TriAffineParserWithoutBoundary.norm_t1", "parser.TriAffineParserWithoutBoundary.norm_m1", "opt_einsum.contract", "opt_einsum.contract().unsqueeze().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "parser.TriAffineParserWithoutBoundary.uni.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "opt_einsum.contract().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "parser.TriAffineParserWithoutBoundary.uni.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "opt_einsum.contract", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or"], "methods", ["None"], ["", "", "def", "forward_self", "(", "self", ",", "memory", ")", ":", "\n", "        ", "_", ",", "seq", ",", "_", "=", "memory", ".", "size", "(", ")", "\n", "# head = self.linear_h(memory)", "\n", "# tail = self.linear_t(memory)", "\n", "mid", "=", "self", ".", "linear_m", "(", "memory", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'layer_norm'", ")", "and", "self", ".", "layer_norm", ":", "\n", "# head = self.norm_h(head)", "\n", "# tail = self.norm_t(tail)", "\n", "            ", "mid", "=", "self", ".", "norm_m", "(", "mid", ")", "\n", "\n", "# score = self.parser0(head, tail, mid).unsqueeze(1) # b * seq * seq * seq * type", "\n", "", "score", "=", "contract", "(", "'bsh,rh->bsr'", ",", "mid", ",", "self", ".", "query0", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "seq", ",", "seq", ",", "1", ",", "1", ")", "\n", "seq_t", "=", "torch", ".", "arange", "(", "seq", ")", ".", "to", "(", "memory", ".", "device", ")", "\n", "if", "self", ".", "mask", ":", "\n", "            ", "seq_x", "=", "seq_t", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "seq", ",", "seq", ")", "\n", "seq_y", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "seq", ",", "1", ",", "seq", ")", "\n", "seq_z", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "seq", ",", "seq", ",", "1", ")", "\n", "score", ".", "masked_fill_", "(", "torch", ".", "bitwise_or", "(", "seq_z", ">", "seq_y", ",", "seq_z", "<", "seq_x", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "-", "1e6", ")", "\n", "", "alpha", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "-", "2", ")", "\n", "\n", "head1", "=", "self", ".", "linear_h1", "(", "memory", ")", "\n", "tail1", "=", "self", ".", "linear_t1", "(", "memory", ")", "\n", "mid1", "=", "self", ".", "linear_m1", "(", "memory", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'layer_norm'", ")", "and", "self", ".", "layer_norm", ":", "\n", "            ", "head1", "=", "self", ".", "norm_h1", "(", "head1", ")", "\n", "tail1", "=", "self", ".", "norm_t1", "(", "tail1", ")", "\n", "mid1", "=", "self", ".", "norm_m1", "(", "mid1", ")", "\n", "\n", "", "score1", "=", "self", ".", "parser1", "(", "head1", ",", "tail1", ",", "mid1", ")", "\n", "uni_score", "=", "self", ".", "uni", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "final_score", "=", "contract", "(", "'bijkr,bijkr->bijr'", ",", "alpha", ",", "score1", ")", "+", "uni_score", "\n", "\n", "if", "not", "self", ".", "return_attention", ":", "\n", "            ", "return", "final_score", "\n", "", "return", "final_score", ",", "alpha", ",", "head1", ",", "tail1", ",", "mid1", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParserWithoutScorer.__init__": [[757, 802], ["parser.TriAffineParser.__init__", "parser.TriAffine", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_class", ",", "attention_dim", "=", "None", ",", "mask", "=", "True", ",", "reduce_last", "=", "False", ",", "\n", "return_attention", "=", "False", ",", "dropout", "=", "0.0", ",", "scale", "=", "\"none\"", ",", "init_std", "=", "0.01", ",", "layer_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "TriAffineParser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_class", "=", "num_class", "\n", "if", "attention_dim", "is", "None", "or", "attention_dim", "==", "0", ":", "\n", "            ", "if", "self", ".", "hidden_dim", "==", "768", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "384", "\n", "", "else", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "150", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_hidden_dim", "=", "attention_dim", "\n", "", "self", ".", "mask", "=", "mask", "\n", "\n", "self", ".", "parser0", "=", "TriAffine", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ",", "scale", "=", "scale", ",", "init_std", "=", "init_std", ")", "\n", "self", ".", "scorer1", "=", "nn", ".", "Linear", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ")", "\n", "# self.parser1 = TriAffine(self._hidden_dim, self.num_class, scale=\"none\", init_std=init_std)", "\n", "\n", "self", ".", "reduce_last", "=", "reduce_last", "\n", "self", ".", "dropout", "=", "dropout", "\n", "if", "not", "self", ".", "reduce_last", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "# self.linear_h1 = MLP(self.hidden_dim, self._hidden_dim, self._hidden_dim, 2, self.dropout)", "\n", "# self.linear_t1 = MLP(self.hidden_dim, self._hidden_dim, self._hidden_dim, 2, self.dropout)", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "# self.linear_h1 = MLP(self.hidden_dim, self.hidden_dim, self._hidden_dim, 2, self.dropout)", "\n", "# self.linear_t1 = MLP(self.hidden_dim, self.hidden_dim, self._hidden_dim, 2, self.dropout)", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "self", ".", "uni", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_class", ")", ")", "\n", "self", ".", "return_attention", "=", "return_attention", "\n", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "if", "self", ".", "layer_norm", ":", "\n", "            ", "self", ".", "norm_h", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_t", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_m", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "# self.norm_h1 = nn.LayerNorm(self._hidden_dim)", "\n", "# self.norm_t1 = nn.LayerNorm(self._hidden_dim)", "\n", "self", ".", "norm_m1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParserWithoutScorer.forward_self": [[803, 840], ["memory.size", "parser.TriAffineParserWithoutScorer.linear_h", "parser.TriAffineParserWithoutScorer.linear_t", "parser.TriAffineParserWithoutScorer.linear_m", "parser.TriAffineParserWithoutScorer.parser0", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.softmax", "torch.softmax", "parser.TriAffineParserWithoutScorer.linear_m1", "parser.TriAffineParserWithoutScorer.scorer1().unsqueeze().unsqueeze", "parser.TriAffineParserWithoutScorer.uni.unsqueeze().unsqueeze().unsqueeze", "hasattr", "parser.TriAffineParserWithoutScorer.norm_h", "parser.TriAffineParserWithoutScorer.norm_t", "parser.TriAffineParserWithoutScorer.norm_m", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "parser.TriAffineParserWithoutScorer.masked_fill_", "hasattr", "parser.TriAffineParserWithoutScorer.norm_m1", "opt_einsum.contract", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "parser.TriAffineParserWithoutScorer.scorer1().unsqueeze", "parser.TriAffineParserWithoutScorer.uni.unsqueeze().unsqueeze", "parser.TriAffineParserWithoutScorer.repeat", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "parser.TriAffineParserWithoutScorer.scorer1", "parser.TriAffineParserWithoutScorer.uni.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or"], "methods", ["None"], ["", "", "def", "forward_self", "(", "self", ",", "memory", ")", ":", "\n", "        ", "_", ",", "seq", ",", "_", "=", "memory", ".", "size", "(", ")", "\n", "head", "=", "self", ".", "linear_h", "(", "memory", ")", "\n", "tail", "=", "self", ".", "linear_t", "(", "memory", ")", "\n", "mid", "=", "self", ".", "linear_m", "(", "memory", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'layer_norm'", ")", "and", "self", ".", "layer_norm", ":", "\n", "            ", "head", "=", "self", ".", "norm_h", "(", "head", ")", "\n", "tail", "=", "self", ".", "norm_t", "(", "tail", ")", "\n", "mid", "=", "self", ".", "norm_m", "(", "mid", ")", "\n", "\n", "", "score", "=", "self", ".", "parser0", "(", "head", ",", "tail", ",", "mid", ")", "# b * seq * seq * seq * type", "\n", "seq_t", "=", "torch", ".", "arange", "(", "seq", ")", ".", "to", "(", "memory", ".", "device", ")", "\n", "if", "self", ".", "mask", ":", "\n", "            ", "seq_x", "=", "seq_t", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "seq", ",", "seq", ")", "\n", "seq_y", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "seq", ",", "1", ",", "seq", ")", "\n", "seq_z", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "seq", ",", "seq", ",", "1", ")", "\n", "score", ".", "masked_fill_", "(", "torch", ".", "bitwise_or", "(", "seq_z", ">", "seq_y", ",", "seq_z", "<", "seq_x", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "-", "1e6", ")", "\n", "", "alpha", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "-", "2", ")", "\n", "\n", "# head1 = self.linear_h1(memory)", "\n", "# tail1 = self.linear_t1(memory)", "\n", "mid1", "=", "self", ".", "linear_m1", "(", "memory", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'layer_norm'", ")", "and", "self", ".", "layer_norm", ":", "\n", "# head1 = self.norm_h1(head1)", "\n", "# tail1 = self.norm_t1(tail1)", "\n", "            ", "mid1", "=", "self", ".", "norm_m1", "(", "mid1", ")", "\n", "\n", "", "score1", "=", "self", ".", "scorer1", "(", "mid1", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# score1 = self.parser1(head1, tail1, mid1)", "\n", "uni_score", "=", "self", ".", "uni", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "final_score", "=", "contract", "(", "'bijkr,bijkr->bijr'", ",", "alpha", ",", "score1", ".", "repeat", "(", "1", ",", "seq", ",", "seq", ",", "1", ",", "1", ")", ")", "+", "uni_score", "\n", "\n", "if", "not", "self", ".", "return_attention", ":", "\n", "            ", "return", "final_score", "\n", "", "return", "final_score", ",", "alpha", ",", "head1", ",", "tail1", ",", "mid1", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParserWithoutScorerPlusBoundary.__init__": [[842, 889], ["parser.TriAffineParser.__init__", "parser.TriAffine", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_class", ",", "attention_dim", "=", "None", ",", "mask", "=", "True", ",", "reduce_last", "=", "False", ",", "\n", "return_attention", "=", "False", ",", "dropout", "=", "0.0", ",", "scale", "=", "\"none\"", ",", "init_std", "=", "0.01", ",", "layer_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "TriAffineParser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_class", "=", "num_class", "\n", "if", "attention_dim", "is", "None", "or", "attention_dim", "==", "0", ":", "\n", "            ", "if", "self", ".", "hidden_dim", "==", "768", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "384", "\n", "", "else", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "150", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_hidden_dim", "=", "attention_dim", "\n", "", "self", ".", "mask", "=", "mask", "\n", "\n", "self", ".", "parser0", "=", "TriAffine", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ",", "scale", "=", "scale", ",", "init_std", "=", "init_std", ")", "\n", "self", ".", "scorer1", "=", "nn", ".", "Linear", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "scorer_h", "=", "nn", ".", "Linear", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "scorer_t", "=", "nn", ".", "Linear", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ")", "\n", "# self.parser1 = TriAffine(self._hidden_dim, self.num_class, scale=\"none\", init_std=init_std)", "\n", "\n", "self", ".", "reduce_last", "=", "reduce_last", "\n", "self", ".", "dropout", "=", "dropout", "\n", "if", "not", "self", ".", "reduce_last", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "# self.linear_h1 = MLP(self.hidden_dim, self._hidden_dim, self._hidden_dim, 2, self.dropout)", "\n", "# self.linear_t1 = MLP(self.hidden_dim, self._hidden_dim, self._hidden_dim, 2, self.dropout)", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "# self.linear_h1 = MLP(self.hidden_dim, self.hidden_dim, self._hidden_dim, 2, self.dropout)", "\n", "# self.linear_t1 = MLP(self.hidden_dim, self.hidden_dim, self._hidden_dim, 2, self.dropout)", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "self", ".", "uni", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_class", ")", ")", "\n", "self", ".", "return_attention", "=", "return_attention", "\n", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "if", "self", ".", "layer_norm", ":", "\n", "            ", "self", ".", "norm_h", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_t", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_m", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "# self.norm_h1 = nn.LayerNorm(self._hidden_dim)", "\n", "# self.norm_t1 = nn.LayerNorm(self._hidden_dim)", "\n", "self", ".", "norm_m1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParserWithoutScorerPlusBoundary.forward_self": [[890, 928], ["memory.size", "parser.TriAffineParserWithoutScorerPlusBoundary.linear_h", "parser.TriAffineParserWithoutScorerPlusBoundary.linear_t", "parser.TriAffineParserWithoutScorerPlusBoundary.linear_m", "parser.TriAffineParserWithoutScorerPlusBoundary.parser0", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.softmax", "torch.softmax", "parser.TriAffineParserWithoutScorerPlusBoundary.linear_m1", "parser.TriAffineParserWithoutScorerPlusBoundary.scorer1().unsqueeze().unsqueeze", "parser.TriAffineParserWithoutScorerPlusBoundary.uni.unsqueeze().unsqueeze().unsqueeze", "hasattr", "parser.TriAffineParserWithoutScorerPlusBoundary.norm_h", "parser.TriAffineParserWithoutScorerPlusBoundary.norm_t", "parser.TriAffineParserWithoutScorerPlusBoundary.norm_m", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "parser.TriAffineParserWithoutScorerPlusBoundary.masked_fill_", "hasattr", "parser.TriAffineParserWithoutScorerPlusBoundary.norm_m1", "opt_einsum.contract", "parser.TriAffineParserWithoutScorerPlusBoundary.scorer_t().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "parser.TriAffineParserWithoutScorerPlusBoundary.scorer1().unsqueeze", "parser.TriAffineParserWithoutScorerPlusBoundary.uni.unsqueeze().unsqueeze", "parser.TriAffineParserWithoutScorerPlusBoundary.repeat", "parser.TriAffineParserWithoutScorerPlusBoundary.scorer_h().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "parser.TriAffineParserWithoutScorerPlusBoundary.scorer_t", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "parser.TriAffineParserWithoutScorerPlusBoundary.scorer1", "parser.TriAffineParserWithoutScorerPlusBoundary.uni.unsqueeze", "parser.TriAffineParserWithoutScorerPlusBoundary.scorer_h", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or"], "methods", ["None"], ["", "", "def", "forward_self", "(", "self", ",", "memory", ")", ":", "\n", "        ", "_", ",", "seq", ",", "_", "=", "memory", ".", "size", "(", ")", "\n", "head", "=", "self", ".", "linear_h", "(", "memory", ")", "\n", "tail", "=", "self", ".", "linear_t", "(", "memory", ")", "\n", "mid", "=", "self", ".", "linear_m", "(", "memory", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'layer_norm'", ")", "and", "self", ".", "layer_norm", ":", "\n", "            ", "head", "=", "self", ".", "norm_h", "(", "head", ")", "\n", "tail", "=", "self", ".", "norm_t", "(", "tail", ")", "\n", "mid", "=", "self", ".", "norm_m", "(", "mid", ")", "\n", "\n", "", "score", "=", "self", ".", "parser0", "(", "head", ",", "tail", ",", "mid", ")", "# b * seq * seq * seq * type", "\n", "seq_t", "=", "torch", ".", "arange", "(", "seq", ")", ".", "to", "(", "memory", ".", "device", ")", "\n", "if", "self", ".", "mask", ":", "\n", "            ", "seq_x", "=", "seq_t", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "seq", ",", "seq", ")", "\n", "seq_y", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "seq", ",", "1", ",", "seq", ")", "\n", "seq_z", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "seq", ",", "seq", ",", "1", ")", "\n", "score", ".", "masked_fill_", "(", "torch", ".", "bitwise_or", "(", "seq_z", ">", "seq_y", ",", "seq_z", "<", "seq_x", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "-", "1e6", ")", "\n", "", "alpha", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "-", "2", ")", "\n", "\n", "# head1 = self.linear_h1(memory)", "\n", "# tail1 = self.linear_t1(memory)", "\n", "mid1", "=", "self", ".", "linear_m1", "(", "memory", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'layer_norm'", ")", "and", "self", ".", "layer_norm", ":", "\n", "# head1 = self.norm_h1(head1)", "\n", "# tail1 = self.norm_t1(tail1)", "\n", "            ", "mid1", "=", "self", ".", "norm_m1", "(", "mid1", ")", "\n", "\n", "", "score1", "=", "self", ".", "scorer1", "(", "mid1", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# score1 = self.parser1(head1, tail1, mid1)", "\n", "uni_score", "=", "self", ".", "uni", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "final_score", "=", "contract", "(", "'bijkr,bijkr->bijr'", ",", "alpha", ",", "score1", ".", "repeat", "(", "1", ",", "seq", ",", "seq", ",", "1", ",", "1", ")", ")", "+", "uni_score", "\n", "final_score", "=", "final_score", "+", "self", ".", "scorer_h", "(", "head", ")", ".", "unsqueeze", "(", "2", ")", "+", "self", ".", "scorer_t", "(", "tail", ")", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "if", "not", "self", ".", "return_attention", ":", "\n", "            ", "return", "final_score", "\n", "", "return", "final_score", ",", "alpha", ",", "head1", ",", "tail1", ",", "mid1", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.LinearTriParser.__init__": [[930, 967], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_class", ",", "attention_dim", "=", "None", ",", "mask", "=", "True", ",", "reduce_last", "=", "False", ",", "\n", "return_attention", "=", "False", ",", "dropout", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "LinearTriParser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_class", "=", "num_class", "\n", "if", "attention_dim", "is", "None", "or", "attention_dim", "==", "0", ":", "\n", "            ", "self", ".", "attention_dim", "=", "self", ".", "hidden_dim", "\n", "", "else", ":", "\n", "            ", "self", ".", "attention_dim", "=", "attention_dim", "\n", "", "self", ".", "_hidden_dim", "=", "self", ".", "attention_dim", "\n", "self", ".", "mask", "=", "mask", "\n", "\n", "self", ".", "score0_h", "=", "nn", ".", "Linear", "(", "self", ".", "attention_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "score0_t", "=", "nn", ".", "Linear", "(", "self", ".", "attention_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "score0_m", "=", "nn", ".", "Linear", "(", "self", ".", "attention_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "score1_h", "=", "nn", ".", "Linear", "(", "self", ".", "attention_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "score1_t", "=", "nn", ".", "Linear", "(", "self", ".", "attention_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "score1_m", "=", "nn", ".", "Linear", "(", "self", ".", "attention_dim", ",", "self", ".", "num_class", ")", "\n", "\n", "self", ".", "reduce_last", "=", "reduce_last", "\n", "self", ".", "dropout", "=", "dropout", "\n", "if", "not", "self", ".", "reduce_last", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_h1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_h1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "self", ".", "uni", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_class", ")", ")", "\n", "self", ".", "return_attention", "=", "return_attention", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.LinearTriParser.forward": [[968, 994], ["memory.size", "parser.LinearTriParser.linear_h", "parser.LinearTriParser.linear_t", "parser.LinearTriParser.linear_m", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.softmax", "torch.softmax", "parser.LinearTriParser.linear_h1", "parser.LinearTriParser.linear_t1", "parser.LinearTriParser.linear_m1", "parser.LinearTriParser.uni.unsqueeze().unsqueeze().unsqueeze", "parser.LinearTriParser.score0_m().unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "score.masked_fill_", "parser.LinearTriParser.score1_m().unsqueeze().unsqueeze", "opt_einsum.contract", "parser.LinearTriParser.score0_h().unsqueeze().unsqueeze", "parser.LinearTriParser.score0_t().unsqueeze().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "parser.LinearTriParser.score1_h().unsqueeze().unsqueeze", "parser.LinearTriParser.score1_t().unsqueeze().unsqueeze", "parser.LinearTriParser.uni.unsqueeze().unsqueeze", "parser.LinearTriParser.score0_m().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "parser.LinearTriParser.score1_m().unsqueeze", "parser.LinearTriParser.score0_h().unsqueeze", "parser.LinearTriParser.score0_t().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "parser.LinearTriParser.score1_h().unsqueeze", "parser.LinearTriParser.score1_t().unsqueeze", "parser.LinearTriParser.uni.unsqueeze", "parser.LinearTriParser.score0_m", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "parser.LinearTriParser.score1_m", "parser.LinearTriParser.score0_h", "parser.LinearTriParser.score0_t", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "parser.LinearTriParser.score1_h", "parser.LinearTriParser.score1_t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "memory", ")", ":", "\n", "        ", "_", ",", "seq", ",", "_", "=", "memory", ".", "size", "(", ")", "\n", "head", "=", "self", ".", "linear_h", "(", "memory", ")", "\n", "tail", "=", "self", ".", "linear_t", "(", "memory", ")", "\n", "mid", "=", "self", ".", "linear_m", "(", "memory", ")", "\n", "\n", "score", "=", "self", ".", "score0_h", "(", "head", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "+", "self", ".", "score0_t", "(", "tail", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "3", ")", "+", "self", ".", "score0_m", "(", "mid", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "seq_t", "=", "torch", ".", "arange", "(", "seq", ")", ".", "to", "(", "memory", ".", "device", ")", "\n", "if", "self", ".", "mask", ":", "\n", "            ", "seq_x", "=", "seq_t", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "seq", ",", "seq", ")", "\n", "seq_y", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "seq", ",", "1", ",", "seq", ")", "\n", "seq_z", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "seq", ",", "seq", ",", "1", ")", "\n", "score", ".", "masked_fill_", "(", "torch", ".", "bitwise_or", "(", "seq_z", ">", "seq_y", ",", "seq_z", "<", "seq_x", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "-", "1e6", ")", "\n", "", "alpha", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "-", "2", ")", "\n", "\n", "head1", "=", "self", ".", "linear_h1", "(", "memory", ")", "\n", "tail1", "=", "self", ".", "linear_t1", "(", "memory", ")", "\n", "mid1", "=", "self", ".", "linear_m1", "(", "memory", ")", "\n", "\n", "score1", "=", "self", ".", "score1_h", "(", "head", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "+", "self", ".", "score1_t", "(", "tail", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "3", ")", "+", "self", ".", "score1_m", "(", "mid", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "uni_score", "=", "self", ".", "uni", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "final_score", "=", "contract", "(", "'bijkr,bijkr->bijr'", ",", "alpha", ",", "score1", ")", "+", "uni_score", "\n", "\n", "if", "not", "self", ".", "return_attention", ":", "\n", "            ", "return", "final_score", "\n", "", "return", "final_score", ",", "alpha", ",", "head1", ",", "tail1", ",", "mid1", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParserLinAttn.__init__": [[996, 1043], ["parser.TriAffineParser.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "parser.TriAffine", "torch.nn.Parameter", "torch.nn.Parameter", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "model.mlp.MLP", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "num_class", ",", "attention_dim", "=", "None", ",", "mask", "=", "True", ",", "reduce_last", "=", "False", ",", "\n", "return_attention", "=", "False", ",", "dropout", "=", "0.0", ",", "scale", "=", "\"none\"", ",", "init_std", "=", "0.01", ",", "layer_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "TriAffineParser", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_class", "=", "num_class", "\n", "if", "attention_dim", "is", "None", "or", "attention_dim", "==", "0", ":", "\n", "            ", "if", "self", ".", "hidden_dim", "==", "768", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "384", "\n", "", "else", ":", "\n", "                ", "self", ".", "_hidden_dim", "=", "150", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_hidden_dim", "=", "attention_dim", "\n", "", "self", ".", "mask", "=", "mask", "\n", "\n", "self", ".", "score0_h", "=", "nn", ".", "Linear", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "score0_t", "=", "nn", ".", "Linear", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ")", "\n", "self", ".", "score0_m", "=", "nn", ".", "Linear", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ")", "\n", "\n", "self", ".", "parser1", "=", "TriAffine", "(", "self", ".", "_hidden_dim", ",", "self", ".", "num_class", ",", "scale", "=", "\"none\"", ",", "init_std", "=", "init_std", ")", "\n", "\n", "self", ".", "reduce_last", "=", "reduce_last", "\n", "self", ".", "dropout", "=", "dropout", "\n", "if", "not", "self", ".", "reduce_last", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_h1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear_h", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_h1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_t1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "self", ".", "linear_m1", "=", "MLP", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "_hidden_dim", ",", "2", ",", "self", ".", "dropout", ")", "\n", "", "self", ".", "uni", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_class", ")", ")", "\n", "self", ".", "return_attention", "=", "return_attention", "\n", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "if", "self", ".", "layer_norm", ":", "\n", "            ", "self", ".", "norm_h", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_t", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_m", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_h1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_t1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "self", ".", "norm_m1", "=", "nn", ".", "LayerNorm", "(", "self", ".", "_hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.parser.TriAffineParserLinAttn.forward_self": [[1044, 1081], ["memory.size", "parser.TriAffineParserLinAttn.linear_h", "parser.TriAffineParserLinAttn.linear_t", "parser.TriAffineParserLinAttn.linear_m", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.softmax", "torch.softmax", "parser.TriAffineParserLinAttn.linear_h1", "parser.TriAffineParserLinAttn.linear_t1", "parser.TriAffineParserLinAttn.linear_m1", "parser.TriAffineParserLinAttn.parser1", "parser.TriAffineParserLinAttn.uni.unsqueeze().unsqueeze().unsqueeze", "hasattr", "parser.TriAffineParserLinAttn.norm_h", "parser.TriAffineParserLinAttn.norm_t", "parser.TriAffineParserLinAttn.norm_m", "parser.TriAffineParserLinAttn.score0_m().unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "torch.arange().to.unsqueeze().unsqueeze().repeat", "score.masked_fill_", "hasattr", "parser.TriAffineParserLinAttn.norm_h1", "parser.TriAffineParserLinAttn.norm_t1", "parser.TriAffineParserLinAttn.norm_m1", "opt_einsum.contract", "parser.TriAffineParserLinAttn.score0_h().unsqueeze().unsqueeze", "parser.TriAffineParserLinAttn.score0_t().unsqueeze().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "torch.bitwise_or().unsqueeze().unsqueeze", "parser.TriAffineParserLinAttn.uni.unsqueeze().unsqueeze", "parser.TriAffineParserLinAttn.score0_m().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "torch.arange().to.unsqueeze().unsqueeze", "parser.TriAffineParserLinAttn.score0_h().unsqueeze", "parser.TriAffineParserLinAttn.score0_t().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "torch.bitwise_or().unsqueeze", "parser.TriAffineParserLinAttn.uni.unsqueeze", "parser.TriAffineParserLinAttn.score0_m", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "torch.arange().to.unsqueeze", "parser.TriAffineParserLinAttn.score0_h", "parser.TriAffineParserLinAttn.score0_t", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or", "torch.bitwise_or"], "methods", ["None"], ["", "", "def", "forward_self", "(", "self", ",", "memory", ")", ":", "\n", "        ", "_", ",", "seq", ",", "_", "=", "memory", ".", "size", "(", ")", "\n", "head", "=", "self", ".", "linear_h", "(", "memory", ")", "\n", "tail", "=", "self", ".", "linear_t", "(", "memory", ")", "\n", "mid", "=", "self", ".", "linear_m", "(", "memory", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'layer_norm'", ")", "and", "self", ".", "layer_norm", ":", "\n", "            ", "head", "=", "self", ".", "norm_h", "(", "head", ")", "\n", "tail", "=", "self", ".", "norm_t", "(", "tail", ")", "\n", "mid", "=", "self", ".", "norm_m", "(", "mid", ")", "\n", "\n", "", "score", "=", "self", ".", "score0_h", "(", "head", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "+", "self", ".", "score0_t", "(", "tail", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "3", ")", "+", "self", ".", "score0_m", "(", "mid", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "seq_t", "=", "torch", ".", "arange", "(", "seq", ")", ".", "to", "(", "memory", ".", "device", ")", "\n", "if", "self", ".", "mask", ":", "\n", "            ", "seq_x", "=", "seq_t", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "seq", ",", "seq", ")", "\n", "seq_y", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "seq", ",", "1", ",", "seq", ")", "\n", "seq_z", "=", "seq_t", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "seq", ",", "seq", ",", "1", ")", "\n", "score", ".", "masked_fill_", "(", "torch", ".", "bitwise_or", "(", "seq_z", ">", "seq_y", ",", "seq_z", "<", "seq_x", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "-", "1e6", ")", "\n", "", "alpha", "=", "F", ".", "softmax", "(", "score", ",", "dim", "=", "-", "2", ")", "\n", "\n", "head1", "=", "self", ".", "linear_h1", "(", "memory", ")", "\n", "tail1", "=", "self", ".", "linear_t1", "(", "memory", ")", "\n", "mid1", "=", "self", ".", "linear_m1", "(", "memory", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'layer_norm'", ")", "and", "self", ".", "layer_norm", ":", "\n", "            ", "head1", "=", "self", ".", "norm_h1", "(", "head1", ")", "\n", "tail1", "=", "self", ".", "norm_t1", "(", "tail1", ")", "\n", "mid1", "=", "self", ".", "norm_m1", "(", "mid1", ")", "\n", "\n", "# score1 = self.scorer1(mid1).unsqueeze(1).unsqueeze(1)", "\n", "", "score1", "=", "self", ".", "parser1", "(", "head1", ",", "tail1", ",", "mid1", ")", "\n", "uni_score", "=", "self", ".", "uni", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "final_score", "=", "contract", "(", "'bijkr,bijkr->bijr'", ",", "alpha", ",", "score1", ")", "+", "uni_score", "\n", "\n", "if", "not", "self", ".", "return_attention", ":", "\n", "            ", "return", "final_score", "\n", "", "return", "final_score", ",", "alpha", ",", "head1", ",", "tail1", ",", "mid1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.mlp.MLP.__init__": [[8, 19], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.Linear", "torch.nn.Dropout", "zip", "range"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dim", ",", "output_dim", ",", "num_layers", ",", "dropout", "=", "0.0", ",", "act", "=", "\"relu\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "h", "=", "[", "hidden_dim", "]", "*", "(", "num_layers", "-", "1", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "nn", ".", "Linear", "(", "n", ",", "k", ")", "for", "n", ",", "k", "in", "zip", "(", "[", "input_dim", "]", "+", "h", ",", "h", "+", "[", "output_dim", "]", ")", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropouts", "=", "nn", ".", "ModuleList", "(", "nn", ".", "Dropout", "(", "dropout", ")", "for", "_", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ")", "\n", "if", "act", "==", "\"relu\"", ":", "\n", "            ", "self", ".", "act_fn", "=", "F", ".", "relu", "\n", "", "elif", "act", "==", "\"gelu\"", ":", "\n", "            ", "self", ".", "act_fn", "=", "F", ".", "gelu", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.mlp.MLP.forward": [[20, 28], ["enumerate", "hasattr", "mlp.MLP.act_fn", "layer", "hasattr", "layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "'act_fn'", ")", ":", "\n", "            ", "self", ".", "act_fn", "=", "F", ".", "relu", "\n", "", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "self", ".", "act_fn", "(", "layer", "(", "x", ")", ")", "if", "i", "<", "self", ".", "num_layers", "-", "1", "else", "layer", "(", "x", ")", "\n", "if", "hasattr", "(", "self", ",", "'dropouts'", ")", "and", "i", "<", "self", ".", "num_layers", "-", "1", ":", "\n", "                ", "x", "=", "self", ".", "dropouts", "[", "i", "]", "(", "x", ")", "\n", "", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.UnscaleMultiHeadAttention.forward": [[252, 274], ["transformer.unscale_multi_head_attention_forward", "transformer.unscale_multi_head_attention_forward"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.unscale_multi_head_attention_forward", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.unscale_multi_head_attention_forward"], ["    ", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "key_padding_mask", "=", "None", ",", "\n", "need_weights", "=", "True", ",", "attn_mask", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "_qkv_same_embed_dim", ":", "\n", "            ", "return", "unscale_multi_head_attention_forward", "(", "\n", "query", ",", "key", ",", "value", ",", "self", ".", "embed_dim", ",", "self", ".", "num_heads", ",", "\n", "self", ".", "in_proj_weight", ",", "self", ".", "in_proj_bias", ",", "\n", "self", ".", "bias_k", ",", "self", ".", "bias_v", ",", "self", ".", "add_zero_attn", ",", "\n", "self", ".", "dropout", ",", "self", ".", "out_proj", ".", "weight", ",", "self", ".", "out_proj", ".", "bias", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "need_weights", "=", "need_weights", ",", "\n", "attn_mask", "=", "attn_mask", ",", "use_separate_proj_weight", "=", "True", ",", "\n", "q_proj_weight", "=", "self", ".", "q_proj_weight", ",", "k_proj_weight", "=", "self", ".", "k_proj_weight", ",", "\n", "v_proj_weight", "=", "self", ".", "v_proj_weight", ")", "\n", "", "else", ":", "\n", "            ", "return", "unscale_multi_head_attention_forward", "(", "\n", "query", ",", "key", ",", "value", ",", "self", ".", "embed_dim", ",", "self", ".", "num_heads", ",", "\n", "self", ".", "in_proj_weight", ",", "self", ".", "in_proj_bias", ",", "\n", "self", ".", "bias_k", ",", "self", ".", "bias_v", ",", "self", ".", "add_zero_attn", ",", "\n", "self", ".", "dropout", ",", "self", ".", "out_proj", ".", "weight", ",", "self", ".", "out_proj", ".", "bias", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "need_weights", "=", "need_weights", ",", "\n", "attn_mask", "=", "attn_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerEncoderLayer_Pos.__init__": [[278, 283], ["torch.nn.TransformerEncoderLayer.__init__", "transformer.UnscaleMultiHeadAttention"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ",", "\n", "unscale", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "d_model", ",", "nhead", ",", "dim_feedforward", ",", "dropout", ",", "activation", ")", "\n", "if", "unscale", ":", "\n", "            ", "self", ".", "self_attn", "=", "UnscaleMultiHeadAttention", "(", "d_model", ",", "nhead", ",", "dropout", "=", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerEncoderLayer_Pos.with_pos_embed": [[284, 286], ["None"], "methods", ["None"], ["", "", "def", "with_pos_embed", "(", "self", ",", "tensor", ",", "pos", ":", "Optional", "[", "Tensor", "]", ")", ":", "\n", "        ", "return", "tensor", "if", "pos", "is", "None", "else", "tensor", "+", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerEncoderLayer_Pos.forward": [[287, 302], ["transformer.TransformerEncoderLayer_Pos.with_pos_embed", "transformer.TransformerEncoderLayer_Pos.norm1", "transformer.TransformerEncoderLayer_Pos.linear2", "transformer.TransformerEncoderLayer_Pos.norm2", "transformer.TransformerEncoderLayer_Pos.self_attn", "transformer.TransformerEncoderLayer_Pos.dropout1", "transformer.TransformerEncoderLayer_Pos.dropout", "transformer.TransformerEncoderLayer_Pos.dropout2", "transformer.TransformerEncoderLayer_Pos.activation", "transformer.TransformerEncoderLayer_Pos.linear1"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoderLayer_Pos.with_pos_embed"], ["", "def", "forward", "(", "self", ",", "\n", "src", ",", "\n", "src_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "\n", "        ", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "src", ",", "pos", ")", "\n", "src2", "=", "self", ".", "self_attn", "(", "q", ",", "k", ",", "value", "=", "src", ",", "attn_mask", "=", "src_mask", ",", "\n", "key_padding_mask", "=", "src_key_padding_mask", ")", "[", "0", "]", "\n", "src", "=", "src", "+", "self", ".", "dropout1", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm1", "(", "src", ")", "\n", "src2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "src", ")", ")", ")", ")", "\n", "src", "=", "src", "+", "self", ".", "dropout2", "(", "src2", ")", "\n", "src", "=", "self", ".", "norm2", "(", "src", ")", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerEncoderLayer_Pos.forward_pre": [[303, 318], ["transformer.TransformerEncoderLayer_Pos.norm1", "transformer.TransformerEncoderLayer_Pos.with_pos_embed", "transformer.TransformerEncoderLayer_Pos.norm2", "transformer.TransformerEncoderLayer_Pos.linear2", "transformer.TransformerEncoderLayer_Pos.self_attn", "transformer.TransformerEncoderLayer_Pos.dropout1", "transformer.TransformerEncoderLayer_Pos.dropout", "transformer.TransformerEncoderLayer_Pos.dropout2", "transformer.TransformerEncoderLayer_Pos.activation", "transformer.TransformerEncoderLayer_Pos.linear1"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoderLayer_Pos.with_pos_embed"], ["", "def", "forward_pre", "(", "self", ",", "\n", "src", ",", "\n", "src_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "\n", "        ", "src2", "=", "self", ".", "norm1", "(", "src", ")", "\n", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "src2", ",", "pos", ")", "\n", "src2", "=", "self", ".", "self_attn", "(", "q", ",", "k", ",", "value", "=", "src2", ",", "attn_mask", "=", "src_mask", ",", "\n", "key_padding_mask", "=", "src_key_padding_mask", ")", "[", "0", "]", "\n", "src", "=", "src", "+", "self", ".", "dropout1", "(", "src2", ")", "\n", "src2", "=", "self", ".", "norm2", "(", "src", ")", "\n", "src2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "src2", ")", ")", ")", ")", "\n", "src", "=", "src", "+", "self", ".", "dropout2", "(", "src2", ")", "\n", "return", "src", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerEncoder_Pos.__init__": [[321, 324], ["torch.nn.TransformerEncoder.__init__"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder_layer", ",", "num_layers", ",", "norm", "=", "None", ",", "prenorm", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder_layer", ",", "num_layers", ",", "norm", ")", "\n", "self", ".", "prenorm", "=", "prenorm", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerEncoder_Pos.forward": [[325, 345], ["transformer.TransformerEncoder_Pos.norm", "layer", "layer.forward_pre"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoderLayer_Pos.forward_pre"], ["", "def", "forward", "(", "self", ",", "\n", "src", ",", "\n", "mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "src_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "\n", "        ", "output", "=", "src", "\n", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "not", "self", ".", "prenorm", ":", "\n", "                ", "output", "=", "layer", "(", "output", ",", "src_mask", "=", "mask", ",", "\n", "src_key_padding_mask", "=", "src_key_padding_mask", ",", "pos", "=", "pos", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "layer", ".", "forward_pre", "(", "output", ",", "src_mask", "=", "mask", ",", "\n", "src_key_padding_mask", "=", "src_key_padding_mask", ",", "pos", "=", "pos", ")", "\n", "\n", "", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoderLayer_Pos.with_pos_embed": [[390, 392], ["None"], "methods", ["None"], ["    ", "def", "with_pos_embed", "(", "self", ",", "tensor", ",", "pos", ":", "Optional", "[", "Tensor", "]", ")", ":", "\n", "        ", "return", "tensor", "if", "pos", "is", "None", "else", "tensor", "+", "pos", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoderLayer_Pos.forward": [[393, 410], ["transformer.TransformerDecoderLayer_Pos.with_pos_embed", "transformer.TransformerDecoderLayer_Pos.norm1", "transformer.TransformerDecoderLayer_Pos.norm2", "transformer.TransformerDecoderLayer_Pos.linear2", "transformer.TransformerDecoderLayer_Pos.norm3", "transformer.TransformerDecoderLayer_Pos.self_attn", "transformer.TransformerDecoderLayer_Pos.dropout1", "transformer.TransformerDecoderLayer_Pos.multihead_attn", "transformer.TransformerDecoderLayer_Pos.dropout2", "transformer.TransformerDecoderLayer_Pos.dropout", "transformer.TransformerDecoderLayer_Pos.dropout3", "transformer.TransformerDecoderLayer_Pos.with_pos_embed", "transformer.TransformerDecoderLayer_Pos.with_pos_embed", "transformer.TransformerDecoderLayer_Pos.activation", "transformer.TransformerDecoderLayer_Pos.linear1"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoderLayer_Pos.with_pos_embed", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoderLayer_Pos.with_pos_embed", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoderLayer_Pos.with_pos_embed"], ["", "def", "forward", "(", "self", ",", "tgt", ":", "Tensor", ",", "memory", ":", "Tensor", ",", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "query_pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", "\n", "tgt2", "=", "self", ".", "self_attn", "(", "q", ",", "k", ",", "tgt", ",", "attn_mask", "=", "tgt_mask", ",", "\n", "key_padding_mask", "=", "tgt_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "multihead_attn", "(", "self", ".", "with_pos_embed", "(", "tgt", ",", "query_pos", ")", ",", "\n", "self", ".", "with_pos_embed", "(", "memory", ",", "pos", ")", ",", "memory", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout3", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoderLayer_Pos.forward_pre": [[411, 429], ["transformer.TransformerDecoderLayer_Pos.norm1", "transformer.TransformerDecoderLayer_Pos.with_pos_embed", "transformer.TransformerDecoderLayer_Pos.norm2", "transformer.TransformerDecoderLayer_Pos.norm3", "transformer.TransformerDecoderLayer_Pos.linear2", "transformer.TransformerDecoderLayer_Pos.self_attn", "transformer.TransformerDecoderLayer_Pos.dropout1", "transformer.TransformerDecoderLayer_Pos.multihead_attn", "transformer.TransformerDecoderLayer_Pos.dropout2", "transformer.TransformerDecoderLayer_Pos.dropout", "transformer.TransformerDecoderLayer_Pos.dropout3", "transformer.TransformerDecoderLayer_Pos.activation", "transformer.TransformerDecoderLayer_Pos.with_pos_embed", "transformer.TransformerDecoderLayer_Pos.with_pos_embed", "transformer.TransformerDecoderLayer_Pos.linear1"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoderLayer_Pos.with_pos_embed", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoderLayer_Pos.with_pos_embed", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoderLayer_Pos.with_pos_embed"], ["", "def", "forward_pre", "(", "self", ",", "tgt", ":", "Tensor", ",", "memory", ":", "Tensor", ",", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "query_pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "tgt2", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "q", "=", "k", "=", "self", ".", "with_pos_embed", "(", "tgt2", ",", "query_pos", ")", "\n", "tgt2", "=", "self", ".", "self_attn", "(", "q", ",", "k", ",", "value", "=", "tgt2", ",", "attn_mask", "=", "tgt_mask", ",", "\n", "key_padding_mask", "=", "tgt_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt2", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "multihead_attn", "(", "query", "=", "self", ".", "with_pos_embed", "(", "tgt2", ",", "query_pos", ")", ",", "\n", "key", "=", "self", ".", "with_pos_embed", "(", "memory", ",", "pos", ")", ",", "\n", "value", "=", "memory", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt2", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt2", ")", ")", ")", ")", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout3", "(", "tgt2", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoder_Pos.__init__": [[432, 437], ["torch.nn.TransformerDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "decoder_layer", ",", "num_layers", ",", "norm", "=", "None", ",", "\n", "return_intermediate", "=", "False", ",", "prenorm", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "decoder_layer", ",", "num_layers", ",", "norm", ")", "\n", "self", ".", "return_intermediate", "=", "return_intermediate", "\n", "self", ".", "prenorm", "=", "prenorm", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoder_Pos.forward": [[438, 472], ["mod.forward_pre.unsqueeze", "transformer.TransformerDecoder_Pos.norm", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "mod", "mod.forward_pre", "intermediate.append", "intermediate.pop", "intermediate.append", "transformer.TransformerDecoder_Pos.norm"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.TransformerDecoderLayer_Pos.forward_pre"], ["", "def", "forward", "(", "self", ",", "tgt", ":", "Tensor", ",", "memory", ":", "Tensor", ",", "tgt_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "tgt_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "memory_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "query_pos", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "output", "=", "tgt", "\n", "\n", "intermediate", "=", "[", "]", "\n", "\n", "for", "mod", "in", "self", ".", "layers", ":", "\n", "            ", "if", "not", "self", ".", "prenorm", ":", "\n", "                ", "output", "=", "mod", "(", "output", ",", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "\n", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ",", "\n", "pos", "=", "pos", ",", "query_pos", "=", "query_pos", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "mod", ".", "forward_pre", "(", "output", ",", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "\n", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ",", "\n", "pos", "=", "pos", ",", "query_pos", "=", "query_pos", ")", "\n", "", "if", "self", ".", "return_intermediate", ":", "\n", "                ", "intermediate", ".", "append", "(", "self", ".", "norm", "(", "output", ")", ")", "\n", "\n", "", "", "if", "self", ".", "norm", "is", "not", "None", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "if", "self", ".", "return_intermediate", ":", "\n", "                ", "intermediate", ".", "pop", "(", ")", "\n", "intermediate", ".", "append", "(", "output", ")", "\n", "\n", "", "", "if", "self", ".", "return_intermediate", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "intermediate", ")", "\n", "\n", "", "return", "output", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer._get_activation_fn": [[9, 16], ["RuntimeError"], "function", ["None"], ["def", "_get_activation_fn", "(", "activation", ")", ":", "\n", "    ", "if", "activation", "==", "\"relu\"", ":", "\n", "        ", "return", "F", ".", "relu", "\n", "", "elif", "activation", "==", "\"gelu\"", ":", "\n", "        ", "return", "F", ".", "gelu", "\n", "\n", "", "raise", "RuntimeError", "(", "\"activation should be relu/gelu, not {}\"", ".", "format", "(", "activation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.transformer.unscale_multi_head_attention_forward": [[18, 248], ["query.size", "F.linear.contiguous().view().transpose", "F.linear.size", "torch.bmm", "torch.bmm", "torch.softmax", "torch.dropout", "torch.bmm", "torch.bmm", "F.linear.transpose().contiguous().view", "torch.linear", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional.size", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional.size", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional", "torch.jit._unwrap_optional.size", "warnings.warn", "pad.to", "F.linear.contiguous().view().transpose", "F.linear.contiguous().view().transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "F.linear.transpose", "list", "attn_output_weights.view.view", "attn_output_weights.view.masked_fill", "attn_output_weights.view.view", "list", "attn_output_weights.view.view", "key.size", "value.size", "key.size", "value.size", "torch.equal", "torch.equal", "torch.equal", "torch.equal", "torch.linear().chunk", "torch.equal", "torch.equal", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "warnings.warn", "pad.to", "pad.dim", "pad.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "F.linear.contiguous().view", "static_k.size", "static_k.size", "static_v.size", "static_v.size", "pad.size", "pad.size", "pad", "pad", "attn_output_weights.view.size", "attn_output_weights.view.masked_fill_", "pad.unsqueeze().unsqueeze", "float", "F.linear.size", "F.linear.transpose().contiguous", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "query.size", "key.size", "value.size", "list", "RuntimeError", "pad.dim", "RuntimeError", "pad", "pad", "F.linear.contiguous().view", "F.linear.contiguous().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "float", "attn_output_weights.view.sum", "torch.linear", "torch.linear().chunk", "pad.size", "query.size", "key.size", "list", "RuntimeError", "bias_k.repeat", "bias_v.repeat", "F.linear.contiguous", "pad.unsqueeze", "F.linear.transpose", "pad.size", "query.size", "key.size", "pad.dim", "F.linear.contiguous", "F.linear.contiguous", "torch.linear", "F.linear.size", "F.linear.size", "F.linear.size", "F.linear.size"], "function", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.None.data_util.NestedNERDataset.pad"], ["", "def", "unscale_multi_head_attention_forward", "(", "query", ":", "Tensor", ",", "\n", "key", ":", "Tensor", ",", "\n", "value", ":", "Tensor", ",", "\n", "embed_dim_to_check", ":", "int", ",", "\n", "num_heads", ":", "int", ",", "\n", "in_proj_weight", ":", "Tensor", ",", "\n", "in_proj_bias", ":", "Tensor", ",", "\n", "bias_k", ":", "Optional", "[", "Tensor", "]", ",", "\n", "bias_v", ":", "Optional", "[", "Tensor", "]", ",", "\n", "add_zero_attn", ":", "bool", ",", "\n", "dropout_p", ":", "float", ",", "\n", "out_proj_weight", ":", "Tensor", ",", "\n", "out_proj_bias", ":", "Tensor", ",", "\n", "training", ":", "bool", "=", "True", ",", "\n", "key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "need_weights", ":", "bool", "=", "True", ",", "\n", "attn_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "use_separate_proj_weight", ":", "bool", "=", "False", ",", "\n", "q_proj_weight", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "k_proj_weight", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "v_proj_weight", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "static_k", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "static_v", ":", "Optional", "[", "Tensor", "]", "=", "None", "\n", ")", ":", "\n", "#    if not torch.jit.is_scripting():", "\n", "#         tens_ops = (query, key, value, in_proj_weight, in_proj_bias, bias_k, bias_v,", "\n", "#                     out_proj_weight, out_proj_bias)", "\n", "#         if any([type(t) is not Tensor for t in tens_ops]) and has_torch_function(tens_ops):", "\n", "#             return handle_torch_function(", "\n", "#                 multi_head_attention_forward, tens_ops, query, key, value,", "\n", "#                 embed_dim_to_check, num_heads, in_proj_weight, in_proj_bias,", "\n", "#                 bias_k, bias_v, add_zero_attn, dropout_p, out_proj_weight,", "\n", "#                 out_proj_bias, training=training, key_padding_mask=key_padding_mask,", "\n", "#                 need_weights=need_weights, attn_mask=attn_mask,", "\n", "#                 use_separate_proj_weight=use_separate_proj_weight,", "\n", "#                 q_proj_weight=q_proj_weight, k_proj_weight=k_proj_weight,", "\n", "#                 v_proj_weight=v_proj_weight, static_k=static_k, static_v=static_v)", "\n", "    ", "tgt_len", ",", "bsz", ",", "embed_dim", "=", "query", ".", "size", "(", ")", "\n", "assert", "embed_dim", "==", "embed_dim_to_check", "\n", "# allow MHA to have different sizes for the feature dimension", "\n", "assert", "key", ".", "size", "(", "0", ")", "==", "value", ".", "size", "(", "0", ")", "and", "key", ".", "size", "(", "1", ")", "==", "value", ".", "size", "(", "1", ")", "\n", "\n", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "assert", "head_dim", "*", "num_heads", "==", "embed_dim", ",", "\"embed_dim must be divisible by num_heads\"", "\n", "# scaling = float(head_dim) ** -0.5", "\n", "\n", "if", "not", "use_separate_proj_weight", ":", "\n", "        ", "if", "torch", ".", "equal", "(", "query", ",", "key", ")", "and", "torch", ".", "equal", "(", "key", ",", "value", ")", ":", "\n", "# self-attention", "\n", "            ", "q", ",", "k", ",", "v", "=", "F", ".", "linear", "(", "query", ",", "in_proj_weight", ",", "in_proj_bias", ")", ".", "chunk", "(", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "elif", "torch", ".", "equal", "(", "key", ",", "value", ")", ":", "\n", "# encoder-decoder attention", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "            ", "_b", "=", "in_proj_bias", "\n", "_start", "=", "0", "\n", "_end", "=", "embed_dim", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "q", "=", "F", ".", "linear", "(", "query", ",", "_w", ",", "_b", ")", "\n", "\n", "if", "key", "is", "None", ":", "\n", "                ", "assert", "value", "is", "None", "\n", "k", "=", "None", "\n", "v", "=", "None", "\n", "", "else", ":", "\n", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "                ", "_b", "=", "in_proj_bias", "\n", "_start", "=", "embed_dim", "\n", "_end", "=", "None", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                    ", "_b", "=", "_b", "[", "_start", ":", "]", "\n", "", "k", ",", "v", "=", "F", ".", "linear", "(", "key", ",", "_w", ",", "_b", ")", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "", "else", ":", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "            ", "_b", "=", "in_proj_bias", "\n", "_start", "=", "0", "\n", "_end", "=", "embed_dim", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "q", "=", "F", ".", "linear", "(", "query", ",", "_w", ",", "_b", ")", "\n", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "_b", "=", "in_proj_bias", "\n", "_start", "=", "embed_dim", "\n", "_end", "=", "embed_dim", "*", "2", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", "_end", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "_end", "]", "\n", "", "k", "=", "F", ".", "linear", "(", "key", ",", "_w", ",", "_b", ")", "\n", "\n", "# This is inline in_proj function with in_proj_weight and in_proj_bias", "\n", "_b", "=", "in_proj_bias", "\n", "_start", "=", "embed_dim", "*", "2", "\n", "_end", "=", "None", "\n", "_w", "=", "in_proj_weight", "[", "_start", ":", ",", ":", "]", "\n", "if", "_b", "is", "not", "None", ":", "\n", "                ", "_b", "=", "_b", "[", "_start", ":", "]", "\n", "", "v", "=", "F", ".", "linear", "(", "value", ",", "_w", ",", "_b", ")", "\n", "", "", "else", ":", "\n", "        ", "q_proj_weight_non_opt", "=", "torch", ".", "jit", ".", "_unwrap_optional", "(", "q_proj_weight", ")", "\n", "len1", ",", "len2", "=", "q_proj_weight_non_opt", ".", "size", "(", ")", "\n", "assert", "len1", "==", "embed_dim", "and", "len2", "==", "query", ".", "size", "(", "-", "1", ")", "\n", "\n", "k_proj_weight_non_opt", "=", "torch", ".", "jit", ".", "_unwrap_optional", "(", "k_proj_weight", ")", "\n", "len1", ",", "len2", "=", "k_proj_weight_non_opt", ".", "size", "(", ")", "\n", "assert", "len1", "==", "embed_dim", "and", "len2", "==", "key", ".", "size", "(", "-", "1", ")", "\n", "\n", "v_proj_weight_non_opt", "=", "torch", ".", "jit", ".", "_unwrap_optional", "(", "v_proj_weight", ")", "\n", "len1", ",", "len2", "=", "v_proj_weight_non_opt", ".", "size", "(", ")", "\n", "assert", "len1", "==", "embed_dim", "and", "len2", "==", "value", ".", "size", "(", "-", "1", ")", "\n", "\n", "if", "in_proj_bias", "is", "not", "None", ":", "\n", "            ", "q", "=", "F", ".", "linear", "(", "query", ",", "q_proj_weight_non_opt", ",", "in_proj_bias", "[", "0", ":", "embed_dim", "]", ")", "\n", "k", "=", "F", ".", "linear", "(", "key", ",", "k_proj_weight_non_opt", ",", "in_proj_bias", "[", "embed_dim", ":", "(", "embed_dim", "*", "2", ")", "]", ")", "\n", "v", "=", "F", ".", "linear", "(", "value", ",", "v_proj_weight_non_opt", ",", "in_proj_bias", "[", "(", "embed_dim", "*", "2", ")", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "q", "=", "F", ".", "linear", "(", "query", ",", "q_proj_weight_non_opt", ",", "in_proj_bias", ")", "\n", "k", "=", "F", ".", "linear", "(", "key", ",", "k_proj_weight_non_opt", ",", "in_proj_bias", ")", "\n", "v", "=", "F", ".", "linear", "(", "value", ",", "v_proj_weight_non_opt", ",", "in_proj_bias", ")", "\n", "# q = q * scaling", "\n", "\n", "", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "        ", "assert", "attn_mask", ".", "dtype", "==", "torch", ".", "float32", "or", "attn_mask", ".", "dtype", "==", "torch", ".", "float64", "or", "attn_mask", ".", "dtype", "==", "torch", ".", "float16", "or", "attn_mask", ".", "dtype", "==", "torch", ".", "uint8", "or", "attn_mask", ".", "dtype", "==", "torch", ".", "bool", ",", "'Only float, byte, and bool types are supported for attn_mask, not {}'", ".", "format", "(", "attn_mask", ".", "dtype", ")", "\n", "if", "attn_mask", ".", "dtype", "==", "torch", ".", "uint8", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"Byte tensor for attn_mask in nn.MultiheadAttention is deprecated. Use bool tensor instead.\"", ")", "\n", "attn_mask", "=", "attn_mask", ".", "to", "(", "torch", ".", "bool", ")", "\n", "\n", "", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "0", ")", "\n", "if", "list", "(", "attn_mask", ".", "size", "(", ")", ")", "!=", "[", "1", ",", "query", ".", "size", "(", "0", ")", ",", "key", ".", "size", "(", "0", ")", "]", ":", "\n", "                ", "raise", "RuntimeError", "(", "'The size of the 2D attn_mask is not correct.'", ")", "\n", "", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "if", "list", "(", "attn_mask", ".", "size", "(", ")", ")", "!=", "[", "bsz", "*", "num_heads", ",", "query", ".", "size", "(", "0", ")", ",", "key", ".", "size", "(", "0", ")", "]", ":", "\n", "                ", "raise", "RuntimeError", "(", "'The size of the 3D attn_mask is not correct.'", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"attn_mask's dimension {} is not supported\"", ".", "format", "(", "attn_mask", ".", "dim", "(", ")", ")", ")", "\n", "# attn_mask's dim is 3 now.", "\n", "\n", "# convert ByteTensor key_padding_mask to bool", "\n", "", "", "if", "key_padding_mask", "is", "not", "None", "and", "key_padding_mask", ".", "dtype", "==", "torch", ".", "uint8", ":", "\n", "        ", "warnings", ".", "warn", "(", "\"Byte tensor for key_padding_mask in nn.MultiheadAttention is deprecated. Use bool tensor instead.\"", ")", "\n", "key_padding_mask", "=", "key_padding_mask", ".", "to", "(", "torch", ".", "bool", ")", "\n", "\n", "", "if", "bias_k", "is", "not", "None", "and", "bias_v", "is", "not", "None", ":", "\n", "        ", "if", "static_k", "is", "None", "and", "static_v", "is", "None", ":", "\n", "            ", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "bias_k", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "bias_v", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "pad", "(", "attn_mask", ",", "(", "0", ",", "1", ")", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                ", "key_padding_mask", "=", "pad", "(", "key_padding_mask", ",", "(", "0", ",", "1", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "static_k", "is", "None", ",", "\"bias cannot be added to static key.\"", "\n", "assert", "static_v", "is", "None", ",", "\"bias cannot be added to static value.\"", "\n", "", "", "else", ":", "\n", "        ", "assert", "bias_k", "is", "None", "\n", "assert", "bias_v", "is", "None", "\n", "\n", "", "q", "=", "q", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "k", "is", "not", "None", ":", "\n", "        ", "k", "=", "k", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "if", "v", "is", "not", "None", ":", "\n", "        ", "v", "=", "v", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "bsz", "*", "num_heads", ",", "head_dim", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "if", "static_k", "is", "not", "None", ":", "\n", "        ", "assert", "static_k", ".", "size", "(", "0", ")", "==", "bsz", "*", "num_heads", "\n", "assert", "static_k", ".", "size", "(", "2", ")", "==", "head_dim", "\n", "k", "=", "static_k", "\n", "\n", "", "if", "static_v", "is", "not", "None", ":", "\n", "        ", "assert", "static_v", ".", "size", "(", "0", ")", "==", "bsz", "*", "num_heads", "\n", "assert", "static_v", ".", "size", "(", "2", ")", "==", "head_dim", "\n", "v", "=", "static_v", "\n", "\n", "", "src_len", "=", "k", ".", "size", "(", "1", ")", "\n", "\n", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "        ", "assert", "key_padding_mask", ".", "size", "(", "0", ")", "==", "bsz", "\n", "assert", "key_padding_mask", ".", "size", "(", "1", ")", "==", "src_len", "\n", "\n", "", "if", "add_zero_attn", ":", "\n", "        ", "src_len", "+=", "1", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "torch", ".", "zeros", "(", "(", "k", ".", "size", "(", "0", ")", ",", "1", ")", "+", "k", ".", "size", "(", ")", "[", "2", ":", "]", ",", "dtype", "=", "k", ".", "dtype", ",", "device", "=", "k", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "torch", ".", "zeros", "(", "(", "v", ".", "size", "(", "0", ")", ",", "1", ")", "+", "v", ".", "size", "(", ")", "[", "2", ":", "]", ",", "dtype", "=", "v", ".", "dtype", ",", "device", "=", "v", ".", "device", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "pad", "(", "attn_mask", ",", "(", "0", ",", "1", ")", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "key_padding_mask", "=", "pad", "(", "key_padding_mask", ",", "(", "0", ",", "1", ")", ")", "\n", "\n", "", "", "attn_output_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "assert", "list", "(", "attn_output_weights", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "num_heads", ",", "tgt_len", ",", "src_len", "]", "\n", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "        ", "if", "attn_mask", ".", "dtype", "==", "torch", ".", "bool", ":", "\n", "            ", "attn_output_weights", ".", "masked_fill_", "(", "attn_mask", ",", "float", "(", "'-inf'", ")", ")", "\n", "", "else", ":", "\n", "            ", "attn_output_weights", "+=", "attn_mask", "\n", "\n", "\n", "", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "        ", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "bsz", ",", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "attn_output_weights", "=", "attn_output_weights", ".", "masked_fill", "(", "\n", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ",", "\n", "float", "(", "'-inf'", ")", ",", "\n", ")", "\n", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "bsz", "*", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "\n", "", "attn_output_weights", "=", "F", ".", "softmax", "(", "\n", "attn_output_weights", ",", "dim", "=", "-", "1", ")", "\n", "attn_output_weights", "=", "F", ".", "dropout", "(", "attn_output_weights", ",", "p", "=", "dropout_p", ",", "training", "=", "training", ")", "\n", "\n", "attn_output", "=", "torch", ".", "bmm", "(", "attn_output_weights", ",", "v", ")", "\n", "assert", "list", "(", "attn_output", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "num_heads", ",", "tgt_len", ",", "head_dim", "]", "\n", "attn_output", "=", "attn_output", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "embed_dim", ")", "\n", "attn_output", "=", "F", ".", "linear", "(", "attn_output", ",", "out_proj_weight", ",", "out_proj_bias", ")", "\n", "\n", "if", "need_weights", ":", "\n", "# average attention weights over heads", "\n", "        ", "attn_output_weights", "=", "attn_output_weights", ".", "view", "(", "bsz", ",", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "return", "attn_output", ",", "attn_output_weights", ".", "sum", "(", "dim", "=", "1", ")", "/", "num_heads", "\n", "", "else", ":", "\n", "        ", "return", "attn_output", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.losses.TwoLoss.__init__": [[40, 43], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "binary_weight", "=", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "binary_weight", "=", "binary_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.losses.TwoLoss.forward": [[44, 65], ["torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "logits[].log_softmax", "logits.size", "na_label_mask.sum", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ":", "torch", ".", "Tensor", ",", "targets", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "non_mask", "=", "targets", "!=", "-", "100", "\n", "logits", "=", "logits", "[", "non_mask", "]", "\n", "targets", "=", "targets", "[", "non_mask", "]", "\n", "\n", "na_idx", "=", "logits", ".", "size", "(", "1", ")", "-", "1", "\n", "\n", "na_logits", "=", "logits", "[", ":", ",", "-", "1", "]", "\n", "na_label", "=", "(", "targets", "==", "na_idx", ")", ".", "float", "(", ")", "\n", "na_loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "na_logits", ",", "na_label", ",", "reduction", "=", "\"mean\"", ")", "\n", "\n", "label_logits", "=", "logits", "[", ":", ",", ":", "-", "1", "]", ".", "log_softmax", "(", "1", ")", "\n", "na_label_mask", "=", "na_label", "==", "0.0", "\n", "label_logits", "=", "label_logits", "[", "na_label_mask", "]", "\n", "label_targets", "=", "targets", "[", "na_label_mask", "]", "\n", "if", "na_label_mask", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "label_loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"mean\"", ")", "(", "label_logits", ",", "label_targets", ")", "\n", "", "else", ":", "\n", "            ", "label_loss", "=", "0.0", "\n", "", "loss", "=", "na_loss", "*", "self", ".", "binary_weight", "+", "label_loss", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.losses.LabelSmoothCrossEntropyLoss.__init__": [[68, 80], ["torch.nn.Module.__init__", "isinstance", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "sum", "weight.sum"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "alpha", "=", "0.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "alpha", "\n", "self", ".", "alpha", "=", "alpha", "\n", "if", "weight", "is", "not", "None", ":", "\n", "            ", "if", "isinstance", "(", "weight", ",", "list", ")", ":", "\n", "                ", "weight", "=", "weight", "/", "sum", "(", "weight", ")", "\n", "self", ".", "weight", "=", "torch", ".", "FloatTensor", "(", "weight", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "weight", "=", "weight", "/", "weight", ".", "sum", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.losses.LabelSmoothCrossEntropyLoss.forward": [[81, 94], ["logits.log_softmax.log_softmax.log_softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.fill_", "torch.zeros_like.fill_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "targets.data.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "losses.LabelSmoothCrossEntropyLoss.weight.to().unsqueeze", "logits.log_softmax.log_softmax.size", "losses.LabelSmoothCrossEntropyLoss.weight.to"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "logits", ":", "torch", ".", "Tensor", ",", "targets", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "non_mask", "=", "targets", "!=", "-", "100", "\n", "logits", "=", "logits", "[", "non_mask", "]", "\n", "targets", "=", "targets", "[", "non_mask", "]", "\n", "logits", "=", "logits", ".", "log_softmax", "(", "dim", "=", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "true_dist", "=", "torch", ".", "zeros_like", "(", "logits", ")", "\n", "true_dist", ".", "fill_", "(", "self", ".", "alpha", "/", "(", "logits", ".", "size", "(", "1", ")", "-", "1", ")", ")", "\n", "true_dist", ".", "scatter_", "(", "1", ",", "targets", ".", "data", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "confidence", ")", "\n", "\n", "", "if", "self", ".", "weight", "is", "None", ":", "\n", "            ", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "true_dist", "*", "logits", ",", "dim", "=", "1", ")", ")", "\n", "", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "true_dist", "*", "logits", "*", "self", ".", "weight", ".", "to", "(", "logits", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", ",", "dim", "=", "1", ")", ")", "# batch * class", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.losses.LDAMLoss.__init__": [[98, 108], ["torch.nn.Module.__init__", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "numpy.sqrt", "numpy.sqrt", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cls_num_list", ",", "max_m", "=", "0.5", ",", "weight", "=", "None", ",", "s", "=", "30", ")", ":", "\n", "        ", "super", "(", "LDAMLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# max_m should be tuning maybe 0.3~0.5", "\n", "m_list", "=", "1.0", "/", "np", ".", "sqrt", "(", "np", ".", "sqrt", "(", "cls_num_list", ")", ")", "\n", "m_list", "=", "m_list", "*", "(", "max_m", "/", "np", ".", "max", "(", "m_list", ")", ")", "\n", "m_list", "=", "torch", ".", "FloatTensor", "(", "m_list", ")", "\n", "self", ".", "m_list", "=", "m_list", "\n", "assert", "s", ">", "0", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.losses.LDAMLoss.forward": [[109, 122], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.float", "torch.zeros_like.float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "batch_m.view.view.view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.cross_entropy", "torch.cross_entropy", "target.data.view", "losses.LDAMLoss.m_list[].to", "torch.zeros_like.float.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "non_mask", "=", "target", "!=", "-", "100", "\n", "x", "=", "x", "[", "non_mask", "]", "\n", "target", "=", "target", "[", "non_mask", "]", "\n", "index", "=", "torch", ".", "zeros_like", "(", "x", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "index", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "index_float", "=", "index", ".", "float", "(", ")", "\n", "batch_m", "=", "torch", ".", "matmul", "(", "self", ".", "m_list", "[", "None", ",", ":", "]", ".", "to", "(", "x", ".", "device", ")", ",", "index_float", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "batch_m", "=", "batch_m", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "x_m", "=", "x", "-", "batch_m", "\n", "\n", "output", "=", "torch", ".", "where", "(", "index", ",", "x_m", ",", "x", ")", "\n", "return", "F", ".", "cross_entropy", "(", "self", ".", "s", "*", "output", ",", "target", ",", "weight", "=", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.losses.FocalLoss.__init__": [[125, 132], ["torch.nn.Module.__init__", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "2", ",", "alpha", "=", "None", ",", "reduction", "=", "\"mean\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "if", "alpha", "is", "not", "None", ":", "\n", "            ", "self", ".", "alpha", "=", "torch", ".", "FloatTensor", "(", "alpha", ")", "\n", "", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.losses.FocalLoss.forward": [[133, 157], ["predicts.transpose().reshape().permute.transpose().reshape().permute.size", "labels.reshape().unsqueeze.reshape().unsqueeze.reshape().unsqueeze", "predicts.transpose().reshape().permute.transpose().reshape().permute.transpose().reshape().permute", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "pt.gather().squeeze.gather().squeeze.gather().squeeze", "logpt.gather().squeeze.gather().squeeze.gather().squeeze", "loss.sum", "losses.FocalLoss.alpha.to().gather", "loss.mean", "labels.reshape().unsqueeze.reshape().unsqueeze.reshape", "predicts.transpose().reshape().permute.transpose().reshape().permute.transpose().reshape", "pt.gather().squeeze.gather().squeeze.gather", "logpt.gather().squeeze.gather().squeeze.gather", "labels.reshape().unsqueeze.reshape().unsqueeze.squeeze", "losses.FocalLoss.alpha.to", "predicts.transpose().reshape().permute.transpose().reshape().permute.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predicts", ",", "labels", ")", ":", "\n", "        ", "class_size", "=", "predicts", ".", "size", "(", "1", ")", "\n", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "predicts", "=", "predicts", ".", "transpose", "(", "1", ",", "0", ")", ".", "reshape", "(", "class_size", ",", "-", "1", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "non_mask", "=", "labels", "[", ":", ",", "0", "]", "!=", "-", "100", "\n", "predicts", "=", "predicts", "[", "non_mask", "]", "\n", "labels", "=", "labels", "[", "non_mask", "]", "\n", "\n", "pt", "=", "F", ".", "softmax", "(", "predicts", ",", "dim", "=", "-", "1", ")", "\n", "logpt", "=", "F", ".", "log_softmax", "(", "predicts", ",", "dim", "=", "-", "1", ")", "\n", "pt", "=", "pt", ".", "gather", "(", "1", ",", "labels", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "logpt", "=", "logpt", ".", "gather", "(", "1", ",", "labels", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "self", ".", "alpha", "is", "not", "None", ":", "\n", "            ", "at", "=", "self", ".", "alpha", ".", "to", "(", "predicts", ".", "device", ")", ".", "gather", "(", "0", ",", "labels", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "logpt", "=", "logpt", "*", "at", "\n", "\n", "", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "\n", "if", "self", ".", "reduction", "==", "\"none\"", ":", "\n", "            ", "return", "loss", "\n", "", "if", "self", ".", "reduction", "==", "\"mean\"", ":", "\n", "            ", "return", "loss", ".", "mean", "(", ")", "\n", "", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.losses.create_loss_function": [[8, 38], ["torch.nn.CrossEntropyLoss", "losses.FocalLoss", "losses.LDAMLoss", "DiceLoss", "losses.TwoLoss", "losses.LabelSmoothCrossEntropyLoss", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["None"], ["def", "create_loss_function", "(", "loss_config", ")", ":", "\n", "    ", "if", "loss_config", "[", "'label_smoothing'", "]", "==", "0.0", ":", "\n", "        ", "if", "loss_config", "[", "'name'", "]", "==", "'ce'", ":", "\n", "            ", "return", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "1.0", "]", "*", "loss_config", "[", "'true_class'", "]", "+", "[", "loss_config", "[", "'na_weight'", "]", "]", ")", ")", "\n", "", "if", "loss_config", "[", "'name'", "]", "==", "'focal'", ":", "\n", "            ", "return", "FocalLoss", "(", "gamma", "=", "loss_config", "[", "'gamma'", "]", ",", "\n", "alpha", "=", "[", "loss_config", "[", "'alpha'", "]", "]", "*", "loss_config", "[", "'true_class'", "]", "+", "[", "1", "-", "loss_config", "[", "'alpha'", "]", "]", ")", "\n", "", "if", "loss_config", "[", "'name'", "]", "==", "'ldam'", ":", "\n", "            ", "return", "LDAMLoss", "(", "cls_num_list", "=", "loss_config", "[", "'cls_num_list'", "]", ",", "\n", "max_m", "=", "loss_config", "[", "'max_m'", "]", ",", "\n", "s", "=", "loss_config", "[", "'s'", "]", ")", "\n", "", "if", "loss_config", "[", "'name'", "]", "==", "'dice'", ":", "\n", "            ", "return", "DiceLoss", "(", "\n", "alpha", "=", "loss_config", "[", "'alpha'", "]", ",", "\n", "gamma", "=", "loss_config", "[", "'gamma'", "]", "\n", ")", "\n", "", "if", "loss_config", "[", "'name'", "]", "==", "'two'", ":", "\n", "            ", "return", "TwoLoss", "(", "binary_weight", "=", "loss_config", "[", "'na_weight'", "]", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "loss_config", "[", "'name'", "]", "==", "'ce'", ":", "\n", "            ", "return", "LabelSmoothCrossEntropyLoss", "(", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "1.0", "]", "*", "loss_config", "[", "'true_class'", "]", "+", "[", "loss_config", "[", "'na_weight'", "]", "]", ")", ",", "\n", "alpha", "=", "loss_config", "[", "'label_smoothing'", "]", ")", "\n", "", "elif", "loss_config", "[", "'name'", "]", "==", "'focal'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "elif", "loss_config", "[", "'name'", "]", "==", "'ldam'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "elif", "loss_config", "[", "'name'", "]", "==", "'dice'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "elif", "loss_config", "[", "'name'", "]", "==", "'two'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__": [[10, 15], ["torch.nn.Embedding.__init__", "position_embed.SinusoidalPositionalEmbedding._init_weight"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.__init__", "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding._init_weight"], ["def", "__init__", "(", "\n", "self", ",", "num_positions", ":", "int", ",", "embedding_dim", ":", "int", ",", "padding_idx", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_positions", ",", "embedding_dim", ")", "\n", "self", ".", "weight", "=", "self", ".", "_init_weight", "(", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding._init_weight": [[16, 35], ["numpy.array", "torch.FloatTensor", "torch.FloatTensor", "out.detach_", "numpy.sin", "numpy.cos", "range", "numpy.power", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_init_weight", "(", "out", ":", "nn", ".", "Parameter", ")", ":", "\n", "        ", "\"\"\"\n        Identical to the XLM create_sinusoidal_embeddings except features are not interleaved. The cos features are in\n        the 2nd half of the vector. [dim // 2:]\n        \"\"\"", "\n", "n_pos", ",", "dim", "=", "out", ".", "shape", "\n", "position_enc", "=", "np", ".", "array", "(", "\n", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "j", "//", "2", ")", "/", "dim", ")", "for", "j", "in", "range", "(", "dim", ")", "]", "\n", "for", "pos", "in", "range", "(", "n_pos", ")", "\n", "]", "\n", ")", "\n", "out", ".", "requires_grad", "=", "False", "# set early to avoid an error in pytorch-1.8+", "\n", "sentinel", "=", "dim", "//", "2", "if", "dim", "%", "2", "==", "0", "else", "(", "dim", "//", "2", ")", "+", "1", "\n", "out", "[", ":", ",", "0", ":", "sentinel", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", ")", "\n", "out", "[", ":", ",", "sentinel", ":", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", ")", "\n", "out", ".", "detach_", "(", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.forward": [[36, 47], ["torch.no_grad", "torch.arange", "super().forward"], "methods", ["home.repos.pwc.inspect_result.GanjinZero_Triaffine-nested-ner.model.position_embed.SinusoidalPositionalEmbedding.forward"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward", "(", "self", ",", "input_ids_shape", ":", "torch", ".", "Size", ",", "past_key_values_length", ":", "int", "=", "0", ")", ":", "\n", "        ", "\"\"\"`input_ids_shape` is expected to be [bsz x seqlen].\"\"\"", "\n", "bsz", ",", "seq_len", "=", "input_ids_shape", "[", ":", "2", "]", "\n", "positions", "=", "torch", ".", "arange", "(", "\n", "past_key_values_length", ",", "\n", "past_key_values_length", "+", "seq_len", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "\n", "device", "=", "self", ".", "weight", ".", "device", ",", "\n", ")", "\n", "return", "super", "(", ")", ".", "forward", "(", "positions", ")", "\n", "", "", ""]]}