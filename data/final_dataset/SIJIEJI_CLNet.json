{"home.repos.pwc.inspect_result.SIJIEJI_CLNet.None.main.main": [[10, 84], ["utils.logger.info", "utils.init_device", "utils.init_model", "utils.init_model.to", "torch.MSELoss().to", "torch.optim.Adam", "torch.optim.Adam", "utils.Trainer", "utils.Trainer.loop", "print", "dataset.Cost2100DataLoader", "utils.init_model.parameters", "utils.FakeLR", "utils.WarmUpCosineAnnealingLR", "utils.Tester", "print", "torch.MSELoss", "utils.Tester", "torch.save", "torch.save", "torch.save", "torch.save", "str", "torch.save", "torch.save", "torch.save", "torch.save", "len", "len", "str", "utils.init_model.encoder.state_dict", "utils.init_model.decoder.state_dict", "utils.init_model.module.encoder.state_dict", "utils.init_model.module.decoder.state_dict"], "function", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.init.init_device", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.init.init_model", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer.loop"], ["def", "main", "(", ")", ":", "\n", "    ", "logger", ".", "info", "(", "'=> PyTorch Version: {}'", ".", "format", "(", "torch", ".", "__version__", ")", ")", "\n", "\n", "# Environment initialization", "\n", "device", ",", "pin_memory", "=", "init_device", "(", "args", ".", "seed", ",", "args", ".", "cpu", ",", "args", ".", "gpu", ",", "args", ".", "cpu_affinity", ")", "\n", "\n", "# Create the data loader", "\n", "train_loader", ",", "val_loader", ",", "test_loader", "=", "Cost2100DataLoader", "(", "\n", "root", "=", "args", ".", "data_dir", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "\n", "scenario", "=", "args", ".", "scenario", ")", "(", ")", "\n", "\n", "# Define model", "\n", "model", "=", "init_model", "(", "args", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "# Define loss function", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Inference mode", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "Tester", "(", "model", ",", "device", ",", "criterion", ")", "(", "test_loader", ")", "\n", "return", "\n", "\n", "# Define optimizer and scheduler", "\n", "", "lr_init", "=", "1e-3", "if", "args", ".", "scheduler", "==", "'const'", "else", "2e-3", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr_init", ")", "\n", "if", "args", ".", "scheduler", "==", "'const'", ":", "\n", "        ", "scheduler", "=", "FakeLR", "(", "optimizer", "=", "optimizer", ")", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "WarmUpCosineAnnealingLR", "(", "optimizer", "=", "optimizer", ",", "\n", "T_max", "=", "args", ".", "epochs", "*", "len", "(", "train_loader", ")", ",", "\n", "T_warmup", "=", "30", "*", "len", "(", "train_loader", ")", ",", "\n", "eta_min", "=", "5e-5", ")", "\n", "\n", "# Define the training pipeline", "\n", "", "trainer", "=", "Trainer", "(", "model", "=", "model", ",", "\n", "device", "=", "device", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "criterion", "=", "criterion", ",", "\n", "scheduler", "=", "scheduler", ",", "\n", "resume", "=", "args", ".", "resume", ",", "\n", "chk_name", "=", "str", "(", "args", ".", "scenario", ")", "+", "'_'", "+", "str", "(", "args", ".", "cr", ")", ")", "\n", "\n", "# Start training", "\n", "trainer", ".", "loop", "(", "args", ".", "epochs", ",", "train_loader", ",", "val_loader", ",", "test_loader", ")", "\n", "\n", "best", "=", "0", "\n", "\n", "# Final testing", "\n", "loss", ",", "rho", ",", "nmse", "=", "Tester", "(", "model", ",", "device", ",", "criterion", ")", "(", "test_loader", ")", "\n", "print", "(", "f\"\\n=! Final test loss: {loss:.3e}\"", "\n", "f\"\\n         test rho: {rho:.3e}\"", "\n", "f\"\\n         test NMSE: {nmse:.3e}\\n\"", ")", "\n", "\n", "\n", "if", "nmse", "<", "best", ":", "\n", "# model save", "\n", "# save encoder", "\n", "            ", "modelSave1", "=", "'./Modelsave/32encoder.pth.tar'", "\n", "try", ":", "\n", "                ", "torch", ".", "save", "(", "{", "'state_dict'", ":", "model", ".", "encoder", ".", "state_dict", "(", ")", ",", "}", ",", "modelSave1", ")", "\n", "", "except", ":", "\n", "                ", "torch", ".", "save", "(", "{", "'state_dict'", ":", "model", ".", "module", ".", "encoder", ".", "state_dict", "(", ")", ",", "}", ",", "modelSave1", ")", "\n", "# save decoder", "\n", "", "modelSave2", "=", "'./Modelsave/32decoder.pth.tar'", "\n", "try", ":", "\n", "                ", "torch", ".", "save", "(", "{", "'state_dict'", ":", "model", ".", "decoder", ".", "state_dict", "(", ")", ",", "}", ",", "modelSave2", ")", "\n", "", "except", ":", "\n", "                ", "torch", ".", "save", "(", "{", "'state_dict'", ":", "model", ".", "module", ".", "decoder", ".", "state_dict", "(", ")", ",", "}", ",", "modelSave2", ")", "\n", "", "print", "(", "'Model saved!'", ")", "\n", "best", "=", "nmse", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.init.init_device": [[12, 41], ["os.system", "random.seed", "torch.manual_seed", "str", "torch.cuda.is_available", "torch.device", "utils.logger.info", "torch.device", "utils.logger.info", "torch.cuda.manual_seed", "os.getpid"], "function", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info"], ["def", "init_device", "(", "seed", "=", "None", ",", "cpu", "=", "None", ",", "gpu", "=", "None", ",", "affinity", "=", "None", ")", ":", "\n", "# set the CPU affinity", "\n", "    ", "if", "affinity", "is", "not", "None", ":", "\n", "        ", "os", ".", "system", "(", "f'taskset -p {affinity} {os.getpid()}'", ")", "\n", "\n", "# Set the random seed", "\n", "", "if", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "# Set the GPU id you choose", "\n", "", "if", "gpu", "is", "not", "None", ":", "\n", "        ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "str", "(", "gpu", ")", "\n", "\n", "# Env setup", "\n", "", "if", "not", "cpu", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "if", "seed", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "", "pin_memory", "=", "True", "\n", "logger", ".", "info", "(", "\"Running on GPU%d\"", "%", "(", "gpu", "if", "gpu", "else", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "pin_memory", "=", "False", "\n", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "logger", ".", "info", "(", "\"Running on CPU\"", ")", "\n", "\n", "", "return", "device", ",", "pin_memory", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.init.init_model": [[43, 68], ["models.clnet", "torch.randn", "thop.profile", "thop.clever_format", "utils.logger.info", "utils.logger.info", "utils.logger.info", "utils.logger.info", "utils.logger.info", "os.path.isfile", "models.clnet.load_state_dict", "utils.logger.info", "torch.load", "torch.device"], "function", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.clnet", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info"], ["", "def", "init_model", "(", "args", ")", ":", "\n", "# Model loading", "\n", "    ", "model", "=", "clnet", "(", "reduction", "=", "args", ".", "cr", ")", "\n", "\n", "if", "args", ".", "pretrained", "is", "not", "None", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "args", ".", "pretrained", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "pretrained", ",", "\n", "map_location", "=", "torch", ".", "device", "(", "'cpu'", ")", ")", "[", "'state_dict'", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "#model.load_state_dict(state_dict,strict=False) if errors, try this", "\n", "logger", ".", "info", "(", "\"pretrained model loaded from {}\"", ".", "format", "(", "args", ".", "pretrained", ")", ")", "\n", "\n", "# Model flops and params counting", "\n", "", "image", "=", "torch", ".", "randn", "(", "[", "1", ",", "2", ",", "32", ",", "32", "]", ")", "\n", "flops", ",", "params", "=", "thop", ".", "profile", "(", "model", ",", "inputs", "=", "(", "image", ",", ")", ",", "verbose", "=", "False", ")", "\n", "flops", ",", "params", "=", "thop", ".", "clever_format", "(", "[", "flops", ",", "params", "]", ",", "\"%.3f\"", ")", "\n", "\n", "# Model info logging", "\n", "logger", ".", "info", "(", "f'=> Model Name: CLNet [pretrained: {args.pretrained}]'", ")", "\n", "logger", ".", "info", "(", "f'=> Model Config: compression ratio=1/{args.cr}'", ")", "\n", "logger", ".", "info", "(", "f'=> Model Flops: {flops}'", ")", "\n", "logger", ".", "info", "(", "f'=> Model Params Num: {params}\\n'", ")", "\n", "logger", ".", "info", "(", "f'{line_seg}\\n{model}\\n{line_seg}\\n'", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer.__init__": [[20, 50], ["Result", "Result", "solver.Tester"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "device", ",", "optimizer", ",", "criterion", ",", "scheduler", ",", "chk_name", ",", "resume", "=", "None", ",", "\n", "save_path", "=", "'./Experiments/chk'", ",", "print_freq", "=", "20", ",", "val_freq", "=", "10", ",", "test_freq", "=", "10", ")", ":", "\n", "\n", "# Basic arguments", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "device", "=", "device", "\n", "\n", "# Verbose arguments", "\n", "self", ".", "resume_file", "=", "resume", "\n", "self", ".", "save_path", "=", "save_path", "\n", "self", ".", "print_freq", "=", "print_freq", "\n", "self", ".", "val_freq", "=", "val_freq", "\n", "self", ".", "test_freq", "=", "test_freq", "\n", "\n", "# Pipeline arguments", "\n", "self", ".", "cur_epoch", "=", "1", "\n", "self", ".", "all_epoch", "=", "None", "\n", "self", ".", "train_loss", "=", "None", "\n", "self", ".", "val_loss", "=", "None", "\n", "self", ".", "test_loss", "=", "None", "\n", "self", ".", "best_rho", "=", "Result", "(", ")", "\n", "self", ".", "best_nmse", "=", "Result", "(", ")", "\n", "\n", "self", ".", "tester", "=", "Tester", "(", "model", ",", "device", ",", "criterion", ",", "print_freq", ")", "\n", "self", ".", "test_loader", "=", "None", "\n", "\n", "self", ".", "chk_name", "=", "chk_name", "\n", "", "def", "loop", "(", "self", ",", "epochs", ",", "train_loader", ",", "val_loader", ",", "test_loader", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer.loop": [[50, 78], ["solver.Trainer._resume", "range", "solver.Trainer.train", "solver.Trainer._loop_postprocessing", "solver.Trainer.val", "solver.Trainer.test"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer._resume", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer.train", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer._loop_postprocessing", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer.val", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer.test"], ["", "def", "loop", "(", "self", ",", "epochs", ",", "train_loader", ",", "val_loader", ",", "test_loader", ")", ":", "\n", "        ", "r\"\"\" The main loop function which runs training and validation iteratively.\n\n        Args:\n            epochs (int): The total epoch for training\n            train_loader (DataLoader): Data loader for training data.\n            val_loader (DataLoader): Data loader for validation data.\n            test_loader (DataLoader): Data loader for test data.\n        \"\"\"", "\n", "\n", "self", ".", "all_epoch", "=", "epochs", "\n", "self", ".", "_resume", "(", ")", "\n", "\n", "for", "ep", "in", "range", "(", "self", ".", "cur_epoch", ",", "epochs", "+", "1", ")", ":", "\n", "            ", "self", ".", "cur_epoch", "=", "ep", "\n", "\n", "# conduct training, validation and test", "\n", "self", ".", "train_loss", "=", "self", ".", "train", "(", "train_loader", ")", "\n", "if", "ep", "%", "self", ".", "val_freq", "==", "0", ":", "\n", "                ", "self", ".", "val_loss", "=", "self", ".", "val", "(", "val_loader", ")", "\n", "\n", "", "if", "ep", "%", "self", ".", "test_freq", "==", "0", ":", "\n", "                ", "self", ".", "test_loss", ",", "rho", ",", "nmse", "=", "self", ".", "test", "(", "test_loader", ")", "\n", "", "else", ":", "\n", "                ", "rho", ",", "nmse", "=", "None", ",", "None", "\n", "\n", "# conduct saving, visualization and log printing", "\n", "", "self", ".", "_loop_postprocessing", "(", "rho", ",", "nmse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer.train": [[79, 89], ["solver.Trainer.model.train", "torch.enable_grad", "solver.Trainer._iteration"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer.train", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Tester._iteration"], ["", "", "def", "train", "(", "self", ",", "train_loader", ")", ":", "\n", "        ", "r\"\"\" train the model on the given data loader for one epoch.\n\n        Args:\n            train_loader (DataLoader): the training data loader\n        \"\"\"", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "_iteration", "(", "train_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer.val": [[90, 100], ["solver.Trainer.model.eval", "torch.no_grad", "solver.Trainer._iteration"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Tester._iteration"], ["", "", "def", "val", "(", "self", ",", "val_loader", ")", ":", "\n", "        ", "r\"\"\" exam the model with validation set.\n\n        Args:\n            val_loader: (DataLoader): the validation data loader\n        \"\"\"", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "_iteration", "(", "val_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer.test": [[101, 111], ["solver.Trainer.model.eval", "torch.no_grad", "solver.Trainer.tester"], "methods", ["None"], ["", "", "def", "test", "(", "self", ",", "test_loader", ")", ":", "\n", "        ", "r\"\"\" Truly test the model on the test dataset for one epoch.\n\n        Args:\n            test_loader (DataLoader): the test data loader\n        \"\"\"", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "self", ".", "tester", "(", "test_loader", ",", "verbose", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer._iteration": [[112, 146], ["utils.statics.AverageMeter", "utils.statics.AverageMeter", "time.time", "enumerate", "utils.logger.info", "sparse_gt.to.to.to", "solver.Trainer.model", "solver.Trainer.criterion", "utils.statics.AverageMeter.update", "utils.statics.AverageMeter.update", "time.time", "solver.Trainer.optimizer.zero_grad", "solver.Trainer.backward", "solver.Trainer.optimizer.step", "solver.Trainer.scheduler.step", "utils.logger.info", "time.time", "len", "solver.Trainer.scheduler.get_lr"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.statics.AverageMeter.update", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.statics.AverageMeter.update", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.scheduler.FakeLR.get_lr"], ["", "", "def", "_iteration", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "iter_loss", "=", "AverageMeter", "(", "'Iter loss'", ")", "\n", "iter_time", "=", "AverageMeter", "(", "'Iter time'", ")", "\n", "time_tmp", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "sparse_gt", ",", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "sparse_gt", "=", "sparse_gt", ".", "to", "(", "self", ".", "device", ")", "\n", "sparse_pred", "=", "self", ".", "model", "(", "sparse_gt", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "sparse_pred", ",", "sparse_gt", ")", "\n", "\n", "# Scheduler update, backward pass and optimization", "\n", "if", "self", ".", "model", ".", "training", ":", "\n", "                ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "# Log and visdom update", "\n", "", "iter_loss", ".", "update", "(", "loss", ")", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "time_tmp", ")", "\n", "time_tmp", "=", "time", ".", "time", "(", ")", "\n", "\n", "# plot progress", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "self", ".", "print_freq", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "f'Epoch: [{self.cur_epoch}/{self.all_epoch}]'", "\n", "f'[{batch_idx + 1}/{len(data_loader)}] '", "\n", "f'lr: {self.scheduler.get_lr()[0]:.2e} | '", "\n", "f'MSE loss: {iter_loss.avg:.3e} | '", "\n", "f'time: {iter_time.avg:.3f}'", ")", "\n", "\n", "", "", "mode", "=", "'Train'", "if", "self", ".", "model", ".", "training", "else", "'Val'", "\n", "logger", ".", "info", "(", "f'=> {mode}  Loss: {iter_loss.avg:.3e}\\n'", ")", "\n", "\n", "return", "iter_loss", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer._save": [[147, 154], ["os.makedirs", "torch.save", "utils.logger.warning", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.warning"], ["", "def", "_save", "(", "self", ",", "state", ",", "name", ")", ":", "\n", "        ", "if", "self", ".", "save_path", "is", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "'No path to save checkpoints.'", ")", "\n", "return", "\n", "\n", "", "os", ".", "makedirs", "(", "self", ".", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer._resume": [[155, 173], ["os.path.isfile", "utils.logger.info", "torch.load", "solver.Trainer.model.load_state_dict", "solver.Trainer.optimizer.load_state_dict", "solver.Trainer.scheduler.load_state_dict", "utils.logger.info"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info"], ["", "def", "_resume", "(", "self", ")", ":", "\n", "        ", "r\"\"\" protected function which resume from checkpoint at the beginning of training.\n        \"\"\"", "\n", "\n", "if", "self", ".", "resume_file", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "assert", "os", ".", "path", ".", "isfile", "(", "self", ".", "resume_file", ")", "\n", "logger", ".", "info", "(", "f'=> loading checkpoint {self.resume_file}'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "resume_file", ")", "\n", "self", ".", "cur_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler'", "]", ")", "\n", "self", ".", "best_rho", "=", "checkpoint", "[", "'best_rho'", "]", "\n", "self", ".", "best_nmse", "=", "checkpoint", "[", "'best_nmse'", "]", "\n", "self", ".", "cur_epoch", "+=", "1", "# start from the next epoch", "\n", "\n", "logger", ".", "info", "(", "f'=> successfully loaded checkpoint {self.resume_file} '", "\n", "f'from epoch {checkpoint[\"epoch\"]}.\\n'", ")", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer._loop_postprocessing": [[175, 205], ["solver.Trainer._save", "solver.Trainer.model.state_dict", "solver.Trainer.optimizer.state_dict", "solver.Trainer.scheduler.state_dict", "print", "Result", "solver.Trainer._save", "Result", "solver.Trainer._save"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer._save", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer._save", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Trainer._save"], ["", "def", "_loop_postprocessing", "(", "self", ",", "rho", ",", "nmse", ")", ":", "\n", "        ", "r\"\"\" private function which makes loop() function neater.\n        \"\"\"", "\n", "\n", "# save state generate", "\n", "state", "=", "{", "\n", "'epoch'", ":", "self", ".", "cur_epoch", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'best_rho'", ":", "self", ".", "best_rho", ",", "\n", "'best_nmse'", ":", "self", ".", "best_nmse", "\n", "}", "\n", "\n", "# save model with best rho and nmse", "\n", "if", "rho", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "best_rho", ".", "rho", "is", "None", "or", "self", ".", "best_rho", ".", "rho", "<", "rho", ":", "\n", "                ", "self", ".", "best_rho", "=", "Result", "(", "rho", "=", "rho", ",", "nmse", "=", "nmse", ",", "epoch", "=", "self", ".", "cur_epoch", ")", "\n", "state", "[", "'best_rho'", "]", "=", "self", ".", "best_rho", "\n", "self", ".", "_save", "(", "state", ",", "name", "=", "f\"best_rho_{self.chk_name}.pth\"", ")", "\n", "", "if", "self", ".", "best_nmse", ".", "nmse", "is", "None", "or", "self", ".", "best_nmse", ".", "nmse", ">", "nmse", ":", "\n", "                ", "self", ".", "best_nmse", "=", "Result", "(", "rho", "=", "rho", ",", "nmse", "=", "nmse", ",", "epoch", "=", "self", ".", "cur_epoch", ")", "\n", "state", "[", "'best_nmse'", "]", "=", "self", ".", "best_nmse", "\n", "self", ".", "_save", "(", "state", ",", "name", "=", "f\"best_nmse_{self.chk_name}.pth\"", ")", "\n", "\n", "", "", "self", ".", "_save", "(", "state", ",", "name", "=", "f'last_{self.chk_name}.pth'", ")", "\n", "\n", "# print current best results", "\n", "if", "self", ".", "best_rho", ".", "rho", "is", "not", "None", ":", "\n", "            ", "print", "(", "f'\\n=! Best rho: {self.best_rho.rho:.3e} ('", "\n", "f'Corresponding nmse={self.best_rho.nmse:.3e}; '", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Tester.__init__": [[216, 221], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "device", ",", "criterion", ",", "print_freq", "=", "20", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "print_freq", "=", "print_freq", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Tester.__call__": [[222, 236], ["solver.Tester.model.eval", "torch.no_grad", "solver.Tester._iteration", "print"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Tester._iteration"], ["", "def", "__call__", "(", "self", ",", "test_data", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "r\"\"\" Runs the testing procedure.\n\n        Args:\n            test_data (DataLoader): Data loader for validation data.\n        \"\"\"", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "loss", ",", "rho", ",", "nmse", "=", "self", ".", "_iteration", "(", "test_data", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "f'\\n=> Test result: \\nloss: {loss:.3e}'", "\n", "f'    rho: {rho:.3e}    NMSE: {nmse:.3e}\\n'", ")", "\n", "", "return", "loss", ",", "rho", ",", "nmse", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.solver.Tester._iteration": [[237, 269], ["utils.statics.AverageMeter", "utils.statics.AverageMeter", "utils.statics.AverageMeter", "utils.statics.AverageMeter", "time.time", "enumerate", "utils.logger.info", "sparse_gt.to.to.to", "solver.Tester.model", "solver.Tester.criterion", "utils.statics.evaluator", "utils.statics.AverageMeter.update", "utils.statics.AverageMeter.update", "utils.statics.AverageMeter.update", "utils.statics.AverageMeter.update", "time.time", "utils.logger.info", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.statics.evaluator", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.statics.AverageMeter.update", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.statics.AverageMeter.update", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.statics.AverageMeter.update", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.statics.AverageMeter.update", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info"], ["", "def", "_iteration", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "r\"\"\" protected function which test the model on given data loader for one epoch.\n        \"\"\"", "\n", "\n", "iter_rho", "=", "AverageMeter", "(", "'Iter rho'", ")", "\n", "iter_nmse", "=", "AverageMeter", "(", "'Iter nmse'", ")", "\n", "iter_loss", "=", "AverageMeter", "(", "'Iter loss'", ")", "\n", "iter_time", "=", "AverageMeter", "(", "'Iter time'", ")", "\n", "time_tmp", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "sparse_gt", ",", "raw_gt", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "            ", "sparse_gt", "=", "sparse_gt", ".", "to", "(", "self", ".", "device", ")", "\n", "sparse_pred", "=", "self", ".", "model", "(", "sparse_gt", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "sparse_pred", ",", "sparse_gt", ")", "\n", "rho", ",", "nmse", "=", "evaluator", "(", "sparse_pred", ",", "sparse_gt", ",", "raw_gt", ")", "\n", "\n", "# Log and visdom update", "\n", "iter_loss", ".", "update", "(", "loss", ")", "\n", "iter_rho", ".", "update", "(", "rho", ")", "\n", "iter_nmse", ".", "update", "(", "nmse", ")", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "time_tmp", ")", "\n", "time_tmp", "=", "time", ".", "time", "(", ")", "\n", "\n", "# plot progress", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "self", ".", "print_freq", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "f'[{batch_idx + 1}/{len(data_loader)}] '", "\n", "f'loss: {iter_loss.avg:.3e} | rho: {iter_rho.avg:.3e} | '", "\n", "f'NMSE: {iter_nmse.avg:.3e} | time: {iter_time.avg:.3f}'", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "f'=> Test rho:{iter_rho.avg:.3e}  NMSE: {iter_nmse.avg:.3e}\\n'", ")", "\n", "\n", "return", "iter_loss", ".", "avg", ",", "iter_rho", ".", "avg", ",", "iter_nmse", ".", "avg", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger._format": [[20, 27], ["datetime.datetime.strftime", "datetime.datetime.now", "traceback.extract_stack", "map", "str().ljust", "father[].split", "str"], "function", ["None"], ["", "def", "_format", "(", "level", ",", "messages", ")", ":", "\n", "    ", "timestr", "=", "datetime", ".", "strftime", "(", "datetime", ".", "now", "(", ")", ",", "'%m.%d/%H:%M'", ")", "\n", "father", "=", "traceback", ".", "extract_stack", "(", ")", "[", "-", "4", "]", "\n", "func_info", "=", "f'{father[0].split(\"/\")[-1]}:{str(father[1]).ljust(4, \" \")}'", "\n", "m", "=", "' '", ".", "join", "(", "map", "(", "str", ",", "messages", ")", ")", "\n", "msg", "=", "f'{level} {timestr} {func_info}] {m}'", "\n", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.set_file": [[39, 50], ["open", "len", "logger.warning", "open.close", "open.flush", "open.write"], "function", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.warning"], ["def", "set_file", "(", "fname", ")", ":", "\n", "    ", "global", "_log_file", "\n", "global", "_log_buffer", "\n", "if", "_log_file", "is", "not", "None", ":", "\n", "        ", "warning", "(", "\"Change log file to %s\"", "%", "fname", ")", "\n", "_log_file", ".", "close", "(", ")", "\n", "", "_log_file", "=", "open", "(", "fname", ",", "'w'", ")", "\n", "if", "len", "(", "_log_buffer", ")", ":", "\n", "        ", "for", "s", "in", "_log_buffer", ":", "\n", "            ", "_log_file", ".", "write", "(", "s", ")", "\n", "", "_log_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.debug": [[52, 63], ["logger._format", "sys.stdout.write", "sys.stdout.flush", "open", "print"], "function", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger._format"], ["", "", "def", "debug", "(", "*", "messages", ",", "file", "=", "None", ")", ":", "\n", "    ", "if", "log_level", ">", "DEBUG", ":", "\n", "        ", "return", "\n", "", "msg", "=", "_format", "(", "'D'", ",", "messages", ")", "\n", "\n", "if", "file", "is", "None", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "_YELLOW", "+", "msg", "+", "_NC", "+", "'\\n'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "file", ",", "'a+'", ")", "as", "f", ":", "\n", "            ", "print", "(", "msg", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info": [[65, 75], ["logger._format", "sys.stdout.write", "sys.stdout.flush", "open", "print"], "function", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger._format"], ["", "", "", "def", "info", "(", "*", "messages", ",", "file", "=", "None", ")", ":", "\n", "    ", "if", "log_level", ">", "INFO", ":", "\n", "        ", "return", "\n", "", "msg", "=", "_format", "(", "'I'", ",", "messages", ")", "\n", "if", "file", "is", "None", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "msg", "+", "'\\n'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "file", ",", "'a+'", ")", "as", "f", ":", "\n", "            ", "print", "(", "msg", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.emph": [[77, 87], ["logger._format", "sys.stdout.write", "sys.stdout.flush", "open", "print"], "function", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger._format"], ["", "", "", "def", "emph", "(", "*", "messages", ",", "file", "=", "None", ")", ":", "\n", "    ", "if", "log_level", ">", "EMPH", ":", "\n", "        ", "return", "\n", "", "msg", "=", "_format", "(", "'EM'", ",", "messages", ")", "\n", "if", "file", "is", "None", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "_GREEN", "+", "msg", "+", "_NC", "+", "'\\n'", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "file", ",", "'a+'", ")", "as", "f", ":", "\n", "            ", "print", "(", "msg", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.warning": [[89, 99], ["logger._format", "sys.stderr.write", "sys.stderr.flush", "open", "print"], "function", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger._format"], ["", "", "", "def", "warning", "(", "*", "messages", ",", "file", "=", "None", ")", ":", "\n", "    ", "if", "log_level", ">", "WARNING", ":", "\n", "        ", "return", "\n", "", "msg", "=", "_format", "(", "'W'", ",", "messages", ")", "\n", "if", "file", "is", "None", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "_ORANGE", "+", "msg", "+", "_NC", "+", "'\\n'", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "file", ",", "'a+'", ")", "as", "f", ":", "\n", "            ", "print", "(", "msg", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.error": [[101, 111], ["logger._format", "sys.stderr.write", "sys.stderr.flush", "open", "print"], "function", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger._format"], ["", "", "", "def", "error", "(", "*", "messages", ",", "file", "=", "None", ")", ":", "\n", "    ", "if", "log_level", ">", "ERROR", ":", "\n", "        ", "return", "\n", "", "msg", "=", "_format", "(", "'E'", ",", "messages", ")", "\n", "if", "file", "is", "None", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "_RED", "+", "msg", "+", "_NC", "+", "'\\n'", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "file", ",", "'a+'", ")", "as", "f", ":", "\n", "            ", "print", "(", "msg", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.fatal": [[113, 125], ["logger._format", "logger.LoggerFatalError", "sys.stderr.write", "sys.stderr.flush", "open", "print"], "function", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger._format"], ["", "", "", "def", "fatal", "(", "*", "messages", ",", "file", "=", "None", ")", ":", "\n", "    ", "if", "log_level", ">", "FATAL", ":", "\n", "        ", "return", "\n", "", "msg", "=", "_format", "(", "'F'", ",", "messages", ")", "\n", "if", "file", "is", "None", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "_LIGHT_RED", "+", "msg", "+", "_NC", "+", "'\\n'", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "file", ",", "'a+'", ")", "as", "f", ":", "\n", "            ", "print", "(", "msg", ",", "file", "=", "f", ")", "\n", "\n", "", "", "raise", "LoggerFatalError", "(", "-", "1", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.scheduler.WarmUpCosineAnnealingLR.__init__": [[8, 13], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CLNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "T_max", ",", "T_warmup", ",", "eta_min", "=", "0", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "T_max", "=", "T_max", "\n", "self", ".", "T_warmup", "=", "T_warmup", "\n", "self", ".", "eta_min", "=", "eta_min", "\n", "super", "(", "WarmUpCosineAnnealingLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.scheduler.WarmUpCosineAnnealingLR.get_lr": [[14, 20], ["math.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", "<", "self", ".", "T_warmup", ":", "\n", "            ", "return", "[", "base_lr", "*", "self", ".", "last_epoch", "/", "self", ".", "T_warmup", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "k", "=", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "self", ".", "last_epoch", "-", "self", ".", "T_warmup", ")", "/", "(", "self", ".", "T_max", "-", "self", ".", "T_warmup", ")", ")", "\n", "return", "[", "self", ".", "eta_min", "+", "(", "base_lr", "-", "self", ".", "eta_min", ")", "*", "k", "/", "2", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.scheduler.FakeLR.__init__": [[23, 25], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CLNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", "FakeLR", ",", "self", ")", ".", "__init__", "(", "optimizer", "=", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.scheduler.FakeLR.get_lr": [[26, 28], ["None"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "base_lrs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.statics.AverageMeter.__init__": [[10, 17], ["statics.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.statics.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.statics.AverageMeter.reset": [[18, 23], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.statics.AverageMeter.update": [[24, 29], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.statics.AverageMeter.__repr__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "f\"==> For {self.name}: sum={self.sum}; avg={self.avg}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.statics.evaluator": [[34, 82], ["torch.no_grad", "torch.cat.size", "torch.cat.permute", "torch.cat.new_zeros", "torch.sqrt", "torch.sqrt", "real_cross.sum.sum", "imag_cross.sum.sum", "torch.sqrt", "torch.log10", "packaging.version.parse", "packaging.version.parse", "torch.view_as_complex", "torch.cat", "torch.sqrt.sum", "torch.sqrt.sum", "torch.cat", "torch.view_as_real", "torch.fft", "torch.fft.fft", "mse.sum", "power_gt.sum"], "function", ["None"], ["", "", "def", "evaluator", "(", "sparse_pred", ",", "sparse_gt", ",", "raw_gt", ")", ":", "\n", "    ", "r\"\"\" Evaluation of decoding implemented in PyTorch Tensor\n         Computes normalized mean square error (NMSE) and rho.\n    \"\"\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Basic params", "\n", "        ", "nt", "=", "32", "\n", "nc", "=", "32", "\n", "nc_expand", "=", "257", "\n", "\n", "# De-centralize", "\n", "sparse_gt", "=", "sparse_gt", "-", "0.5", "\n", "sparse_pred", "=", "sparse_pred", "-", "0.5", "\n", "\n", "# Calculate the NMSE", "\n", "power_gt", "=", "sparse_gt", "[", ":", ",", "0", ",", ":", ",", ":", "]", "**", "2", "+", "sparse_gt", "[", ":", ",", "1", ",", ":", ",", ":", "]", "**", "2", "\n", "difference", "=", "sparse_gt", "-", "sparse_pred", "\n", "mse", "=", "difference", "[", ":", ",", "0", ",", ":", ",", ":", "]", "**", "2", "+", "difference", "[", ":", ",", "1", ",", ":", ",", ":", "]", "**", "2", "\n", "nmse", "=", "10", "*", "torch", ".", "log10", "(", "(", "mse", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", "/", "power_gt", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", "]", ")", ")", ".", "mean", "(", ")", ")", "\n", "\n", "# Calculate the Rho", "\n", "n", "=", "sparse_pred", ".", "size", "(", "0", ")", "\n", "sparse_pred", "=", "sparse_pred", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# Move the real/imaginary dim to the last", "\n", "zeros", "=", "sparse_pred", ".", "new_zeros", "(", "(", "n", ",", "nt", ",", "nc_expand", "-", "nc", ",", "2", ")", ")", "\n", "# When pytorch version is above 1.7.0, complex number representation is changed from [a, b] to [a, b.j]", "\n", "if", "version", ".", "parse", "(", "torch", ".", "__version__", ")", ">", "version", ".", "parse", "(", "\"1.7.0\"", ")", ":", "\n", "            ", "sparse_pred", "=", "torch", ".", "view_as_complex", "(", "torch", ".", "cat", "(", "(", "sparse_pred", ",", "zeros", ")", ",", "dim", "=", "2", ")", ")", "\n", "raw_pred", "=", "torch", ".", "view_as_real", "(", "torch", ".", "fft", ".", "fft", "(", "sparse_pred", ")", ")", "[", ":", ",", ":", ",", ":", "125", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "sparse_pred", "=", "torch", ".", "cat", "(", "(", "sparse_pred", ",", "zeros", ")", ",", "dim", "=", "2", ")", "\n", "raw_pred", "=", "torch", ".", "fft", "(", "sparse_pred", ",", "signal_ndim", "=", "1", ")", "[", ":", ",", ":", ",", ":", "125", ",", ":", "]", "\n", "\n", "", "norm_pred", "=", "raw_pred", "[", "...", ",", "0", "]", "**", "2", "+", "raw_pred", "[", "...", ",", "1", "]", "**", "2", "\n", "norm_pred", "=", "torch", ".", "sqrt", "(", "norm_pred", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "\n", "norm_gt", "=", "raw_gt", "[", "...", ",", "0", "]", "**", "2", "+", "raw_gt", "[", "...", ",", "1", "]", "**", "2", "\n", "norm_gt", "=", "torch", ".", "sqrt", "(", "norm_gt", ".", "sum", "(", "dim", "=", "1", ")", ")", "\n", "\n", "real_cross", "=", "raw_pred", "[", "...", ",", "0", "]", "*", "raw_gt", "[", "...", ",", "0", "]", "+", "raw_pred", "[", "...", ",", "1", "]", "*", "raw_gt", "[", "...", ",", "1", "]", "\n", "real_cross", "=", "real_cross", ".", "sum", "(", "dim", "=", "1", ")", "\n", "imag_cross", "=", "raw_pred", "[", "...", ",", "0", "]", "*", "raw_gt", "[", "...", ",", "1", "]", "-", "raw_pred", "[", "...", ",", "1", "]", "*", "raw_gt", "[", "...", ",", "0", "]", "\n", "imag_cross", "=", "imag_cross", ".", "sum", "(", "dim", "=", "1", ")", "\n", "norm_cross", "=", "torch", ".", "sqrt", "(", "real_cross", "**", "2", "+", "imag_cross", "**", "2", ")", "\n", "\n", "rho", "=", "(", "norm_cross", "/", "(", "norm_pred", "*", "norm_gt", ")", ")", ".", "mean", "(", ")", "\n", "\n", "return", "rho", ",", "nmse", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.dataset.cost2100.PreFetcher.__init__": [[15, 20], ["len", "torch.cuda.Stream"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "ori_loader", "=", "loader", "\n", "self", ".", "len", "=", "len", "(", "loader", ")", "\n", "self", ".", "stream", "=", "torch", ".", "cuda", ".", "Stream", "(", ")", "\n", "self", ".", "next_input", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.dataset.cost2100.PreFetcher.preload": [[21, 31], ["next", "torch.cuda.stream", "enumerate", "tensor.cuda"], "methods", ["None"], ["", "def", "preload", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "next_input", "=", "next", "(", "self", ".", "loader", ")", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "next_input", "=", "None", "\n", "return", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "stream", "(", "self", ".", "stream", ")", ":", "\n", "            ", "for", "idx", ",", "tensor", "in", "enumerate", "(", "self", ".", "next_input", ")", ":", "\n", "                ", "self", ".", "next_input", "[", "idx", "]", "=", "tensor", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.dataset.cost2100.PreFetcher.__len__": [[32, 34], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.dataset.cost2100.PreFetcher.__iter__": [[35, 39], ["iter", "cost2100.PreFetcher.preload"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.dataset.cost2100.PreFetcher.preload"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "loader", "=", "iter", "(", "self", ".", "ori_loader", ")", "\n", "self", ".", "preload", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.dataset.cost2100.PreFetcher.__next__": [[40, 49], ["torch.cuda.current_stream().wait_stream", "cost2100.PreFetcher.preload", "tensor.record_stream", "torch.cuda.current_stream", "torch.cuda.current_stream"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.dataset.cost2100.PreFetcher.preload"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "wait_stream", "(", "self", ".", "stream", ")", "\n", "input", "=", "self", ".", "next_input", "\n", "if", "input", "is", "None", ":", "\n", "            ", "raise", "StopIteration", "\n", "", "for", "tensor", "in", "input", ":", "\n", "            ", "tensor", ".", "record_stream", "(", "torch", ".", "cuda", ".", "current_stream", "(", ")", ")", "\n", "", "self", ".", "preload", "(", ")", "\n", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.dataset.cost2100.Cost2100DataLoader.__init__": [[55, 91], ["os.path.isdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.tensor().view", "torch.utils.data.TensorDataset", "torch.tensor().view", "torch.utils.data.TensorDataset", "torch.tensor().view", "torch.tensor", "torch.tensor", "torch.cat", "torch.utils.data.TensorDataset", "scipy.loadmat", "scipy.loadmat", "scipy.loadmat", "scipy.loadmat", "numpy.real", "numpy.imag", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.view", "torch.tensor.view"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root", ",", "batch_size", ",", "num_workers", ",", "pin_memory", ",", "scenario", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isdir", "(", "root", ")", "\n", "assert", "scenario", "in", "{", "\"in\"", ",", "\"out\"", "}", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "pin_memory", "=", "pin_memory", "\n", "\n", "dir_train", "=", "os", ".", "path", ".", "join", "(", "root", ",", "f\"DATA_Htrain{scenario}.mat\"", ")", "\n", "dir_val", "=", "os", ".", "path", ".", "join", "(", "root", ",", "f\"DATA_Hval{scenario}.mat\"", ")", "\n", "dir_test", "=", "os", ".", "path", ".", "join", "(", "root", ",", "f\"DATA_Htest{scenario}.mat\"", ")", "\n", "dir_raw", "=", "os", ".", "path", ".", "join", "(", "root", ",", "f\"DATA_HtestF{scenario}_all.mat\"", ")", "\n", "channel", ",", "nt", ",", "nc", ",", "nc_expand", "=", "2", ",", "32", ",", "32", ",", "125", "\n", "\n", "# Training data loading", "\n", "data_train", "=", "sio", ".", "loadmat", "(", "dir_train", ")", "[", "'HT'", "]", "\n", "data_train", "=", "torch", ".", "tensor", "(", "data_train", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "\n", "data_train", ".", "shape", "[", "0", "]", ",", "channel", ",", "nt", ",", "nc", ")", "\n", "self", ".", "train_dataset", "=", "TensorDataset", "(", "data_train", ")", "\n", "\n", "# Validation data loading", "\n", "data_val", "=", "sio", ".", "loadmat", "(", "dir_val", ")", "[", "'HT'", "]", "\n", "data_val", "=", "torch", ".", "tensor", "(", "data_val", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "\n", "data_val", ".", "shape", "[", "0", "]", ",", "channel", ",", "nt", ",", "nc", ")", "\n", "self", ".", "val_dataset", "=", "TensorDataset", "(", "data_val", ")", "\n", "\n", "# Test data loading, including the sparse data and the raw data", "\n", "data_test", "=", "sio", ".", "loadmat", "(", "dir_test", ")", "[", "'HT'", "]", "\n", "data_test", "=", "torch", ".", "tensor", "(", "data_test", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "view", "(", "\n", "data_test", ".", "shape", "[", "0", "]", ",", "channel", ",", "nt", ",", "nc", ")", "\n", "\n", "raw_test", "=", "sio", ".", "loadmat", "(", "dir_raw", ")", "[", "'HF_all'", "]", "\n", "real", "=", "torch", ".", "tensor", "(", "np", ".", "real", "(", "raw_test", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "imag", "=", "torch", ".", "tensor", "(", "np", ".", "imag", "(", "raw_test", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "raw_test", "=", "torch", ".", "cat", "(", "(", "real", ".", "view", "(", "raw_test", ".", "shape", "[", "0", "]", ",", "nt", ",", "nc_expand", ",", "1", ")", ",", "\n", "imag", ".", "view", "(", "raw_test", ".", "shape", "[", "0", "]", ",", "nt", ",", "nc_expand", ",", "1", ")", ")", ",", "dim", "=", "3", ")", "\n", "self", ".", "test_dataset", "=", "TensorDataset", "(", "data_test", ",", "raw_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.dataset.cost2100.Cost2100DataLoader.__call__": [[92, 116], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "cost2100.PreFetcher", "cost2100.PreFetcher", "cost2100.PreFetcher"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "train_loader", "=", "DataLoader", "(", "self", ".", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "self", ".", "pin_memory", ",", "\n", "shuffle", "=", "True", ")", "\n", "val_loader", "=", "DataLoader", "(", "self", ".", "val_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "self", ".", "pin_memory", ",", "\n", "shuffle", "=", "False", ")", "\n", "test_loader", "=", "DataLoader", "(", "self", ".", "test_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "self", ".", "pin_memory", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "# Accelerate CUDA data loading with pre-fetcher if GPU is used.", "\n", "if", "self", ".", "pin_memory", "is", "True", ":", "\n", "            ", "train_loader", "=", "PreFetcher", "(", "train_loader", ")", "\n", "val_loader", "=", "PreFetcher", "(", "val_loader", ")", "\n", "test_loader", "=", "PreFetcher", "(", "test_loader", ")", "\n", "\n", "", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.ConvBN.__init__": [[15, 24], ["torch.Sequential.__init__", "isinstance", "collections.OrderedDict", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CLNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "kernel_size", ",", "int", ")", ":", "\n", "            ", "padding", "=", "[", "(", "i", "-", "1", ")", "//", "2", "for", "i", "in", "kernel_size", "]", "\n", "", "else", ":", "\n", "            ", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "", "super", "(", "ConvBN", ",", "self", ")", ".", "__init__", "(", "OrderedDict", "(", "[", "\n", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "padding", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "'bn'", ",", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CRBlock.__init__": [[28, 45], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "clnet.ConvBN", "torch.Identity", "torch.Identity", "torch.Identity", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "collections.OrderedDict", "collections.OrderedDict", "clnet.ConvBN", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "clnet.ConvBN", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "clnet.ConvBN", "clnet.ConvBN", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "clnet.ConvBN"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CLNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CRBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "path1", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv3x3'", ",", "ConvBN", "(", "2", ",", "7", ",", "3", ")", ")", ",", "\n", "(", "'relu1'", ",", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.3", ",", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'conv1x9'", ",", "ConvBN", "(", "7", ",", "7", ",", "[", "1", ",", "9", "]", ")", ")", ",", "\n", "(", "'relu2'", ",", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.3", ",", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'conv9x1'", ",", "ConvBN", "(", "7", ",", "7", ",", "[", "9", ",", "1", "]", ")", ")", ",", "\n", "]", ")", ")", "\n", "self", ".", "path2", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv1x5'", ",", "ConvBN", "(", "2", ",", "7", ",", "[", "1", ",", "5", "]", ")", ")", ",", "\n", "(", "'relu'", ",", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.3", ",", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'conv5x1'", ",", "ConvBN", "(", "7", ",", "7", ",", "[", "5", ",", "1", "]", ")", ")", ",", "\n", "]", ")", ")", "\n", "self", ".", "conv1x1", "=", "ConvBN", "(", "7", "*", "2", ",", "2", ",", "1", ")", "\n", "self", ".", "identity", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.3", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CRBlock.forward": [[46, 57], ["clnet.CRBlock.identity", "clnet.CRBlock.path1", "clnet.CRBlock.path2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "clnet.CRBlock.relu", "clnet.CRBlock.conv1x1", "clnet.CRBlock.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "self", ".", "identity", "(", "x", ")", "\n", "\n", "out1", "=", "self", ".", "path1", "(", "x", ")", "\n", "out2", "=", "self", ".", "path2", "(", "x", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "dim", "=", "1", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1x1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "relu", "(", "out", "+", "identity", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.hsigmoid.forward": [[60, 63], ["torch.relu6", "torch.relu6", "torch.relu6"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu6", "(", "x", "+", "3", ",", "inplace", "=", "True", ")", "/", "6", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.BasicConv.__init__": [[65, 71], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CLNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "relu", "=", "True", ",", "bn", "=", "True", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_planes", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.01", ",", "affine", "=", "True", ")", "if", "bn", "else", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "if", "relu", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.BasicConv.forward": [[72, 79], ["clnet.BasicConv.conv", "clnet.BasicConv.bn", "clnet.BasicConv.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.ChannelPool.forward": [[81, 83], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "torch", ".", "max", "(", "x", ",", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ",", "torch", ".", "mean", "(", "x", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.SpatialGate.__init__": [[85, 90], ["torch.Module.__init__", "clnet.ChannelPool", "clnet.BasicConv"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CLNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SpatialGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "3", "\n", "self", ".", "compress", "=", "ChannelPool", "(", ")", "\n", "self", ".", "spatial", "=", "BasicConv", "(", "2", ",", "1", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "relu", "=", "False", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.SpatialGate.forward": [[90, 95], ["clnet.SpatialGate.compress", "clnet.SpatialGate.spatial", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_compress", "=", "self", ".", "compress", "(", "x", ")", "\n", "x_out", "=", "self", ".", "spatial", "(", "x_compress", ")", "\n", "scale", "=", "torch", ".", "sigmoid", "(", "x_out", ")", "# broadcasting", "\n", "return", "x", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.SELayer.__init__": [[97, 105], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CLNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel", ",", "reduction", "=", "16", ")", ":", "\n", "        ", "super", "(", "SELayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "channel", ",", "channel", "//", "reduction", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "channel", "//", "reduction", ",", "channel", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.SELayer.forward": [[107, 112], ["x.size", "clnet.SELayer.avg_pool().view", "clnet.SELayer.fc().view", "clnet.SELayer.expand_as", "clnet.SELayer.avg_pool", "clnet.SELayer.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "b", ",", "c", ",", "_", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "y", "=", "self", ".", "avg_pool", "(", "x", ")", ".", "view", "(", "b", ",", "c", ")", "\n", "y", "=", "self", ".", "fc", "(", "y", ")", ".", "view", "(", "b", ",", "c", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "y", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.Encoder.__init__": [[115, 137], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "clnet.ConvBN", "torch.Sequential", "torch.Sequential", "torch.Sequential", "clnet.ConvBN", "clnet.SpatialGate", "clnet.SELayer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "collections.OrderedDict", "collections.OrderedDict", "clnet.ConvBN", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "clnet.ConvBN", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "clnet.ConvBN", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "clnet.ConvBN", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CLNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduction", "=", "4", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "total_size", ",", "in_channel", ",", "w", ",", "h", "=", "2048", ",", "2", ",", "32", ",", "32", "\n", "self", ".", "encoder1", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"conv3x3_bn\"", ",", "ConvBN", "(", "in_channel", ",", "2", ",", "3", ")", ")", ",", "\n", "(", "\"relu1\"", ",", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.3", ",", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\"conv1x9_bn\"", ",", "ConvBN", "(", "2", ",", "2", ",", "[", "1", ",", "9", "]", ")", ")", ",", "\n", "(", "\"relu2\"", ",", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.3", ",", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\"conv9x1_bn\"", ",", "ConvBN", "(", "2", ",", "2", ",", "[", "9", ",", "1", "]", ")", ")", ",", "\n", "]", ")", ")", "\n", "self", ".", "encoder2", "=", "ConvBN", "(", "in_channel", ",", "16", ",", "1", ")", "\n", "self", ".", "encoder_conv", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"relu1\"", ",", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.3", ",", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\"conv1x1_bn\"", ",", "ConvBN", "(", "34", ",", "2", ",", "1", ")", ")", ",", "\n", "(", "\"relu2\"", ",", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.3", ",", "inplace", "=", "True", ")", ")", ",", "\n", "]", ")", ")", "\n", "self", ".", "conv3", "=", "ConvBN", "(", "16", ",", "2", ",", "3", ")", "\n", "self", ".", "sa", "=", "SpatialGate", "(", ")", "\n", "self", ".", "se", "=", "SELayer", "(", "32", ")", "\n", "self", ".", "encoder_fc", "=", "nn", ".", "Linear", "(", "total_size", ",", "total_size", "//", "reduction", ")", "\n", "\n", "self", ".", "replace_efc", "=", "nn", ".", "Conv1d", "(", "total_size", ",", "total_size", "//", "reduction", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.Encoder.forward": [[138, 157], ["x.detach().size", "clnet.Encoder.encoder2", "clnet.Encoder.sa", "clnet.Encoder.conv3", "clnet.Encoder.view", "clnet.Encoder.encoder_fc", "x.detach"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "x", ".", "detach", "(", ")", ".", "size", "(", ")", "\n", "#encode1 = self.encoder1(x)", "\n", "#encode1 = self.sa(encode1)", "\n", "encode2", "=", "self", ".", "encoder2", "(", "x", ")", "\n", "#import pdb;pdb.set_trace()", "\n", "encode2", "=", "self", ".", "sa", "(", "encode2", ")", "\n", "#out = torch.cat((encode1, encode2), dim=1)", "\n", "#out = self.encoder_conv(out)", "\n", "out", "=", "encode2", "\n", "out", "=", "self", ".", "conv3", "(", "encode2", ")", "\n", "\n", "#", "\n", "out", "=", "out", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "#out = out.unsqueeze(2) #[1,2048,1]", "\n", "out", "=", "self", ".", "encoder_fc", "(", "out", ")", "# [1,2048/cr,1]", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.Decoder.__init__": [[160, 181], ["torch.Module.__init__", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "torch.ConvTranspose1d", "collections.OrderedDict", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "clnet.hsigmoid", "torch.Linear", "torch.Linear", "torch.Linear", "clnet.Decoder.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "clnet.ConvBN", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "clnet.CRBlock", "clnet.CRBlock", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CLNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduction", "=", "4", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "total_size", ",", "in_channel", ",", "w", ",", "h", "=", "2048", ",", "2", ",", "32", ",", "32", "\n", "self", ".", "replace_dfc", "=", "nn", ".", "ConvTranspose1d", "(", "total_size", "//", "reduction", ",", "total_size", ",", "1", ")", "\n", "decoder", "=", "OrderedDict", "(", "[", "\n", "(", "\"conv5x5_bn\"", ",", "ConvBN", "(", "2", ",", "2", ",", "5", ")", ")", ",", "\n", "(", "\"relu\"", ",", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.3", ",", "inplace", "=", "True", ")", ")", ",", "\n", "(", "\"CRBlock1\"", ",", "CRBlock", "(", ")", ")", ",", "\n", "(", "\"CRBlock2\"", ",", "CRBlock", "(", ")", ")", "\n", "]", ")", "\n", "self", ".", "decoder_feature", "=", "nn", ".", "Sequential", "(", "decoder", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "hsig", "=", "hsigmoid", "(", ")", "\n", "self", ".", "decoder_fc", "=", "nn", ".", "Linear", "(", "total_size", "//", "reduction", ",", "total_size", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.Decoder.forward": [[182, 192], ["clnet.Decoder.decoder_fc", "clnet.Decoder.view", "clnet.Decoder.decoder_feature", "clnet.Decoder.hsig"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c", ",", "h", ",", "w", "=", "2", ",", "32", ",", "32", "\n", "out", "=", "self", ".", "decoder_fc", "(", "x", ")", "\n", "#out = self.replace_dfc(x) # [1,2048,1]", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "c", ",", "h", ",", "w", ")", "#", "\n", "\n", "out", "=", "self", ".", "decoder_feature", "(", "out", ")", "\n", "out", "=", "self", ".", "hsig", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CLNet.__init__": [[194, 206], ["torch.Module.__init__", "utils.logger.info", "clnet.Encoder", "clnet.Decoder", "clnet.CLNet.modules", "isinstance", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CLNet.__init__", "home.repos.pwc.inspect_result.SIJIEJI_CLNet.utils.logger.info"], ["    ", "def", "__init__", "(", "self", ",", "reduction", "=", "4", ")", ":", "\n", "        ", "super", "(", "CLNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "total_size", ",", "in_channel", ",", "w", ",", "h", "=", "2048", ",", "2", ",", "32", ",", "32", "\n", "logger", ".", "info", "(", "f'reduction={reduction}'", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "reduction", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", "reduction", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.CLNet.forward": [[207, 211], ["clnet.CLNet.encoder", "clnet.CLNet.decoder"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "feature", "=", "self", ".", "encoder", "(", "x", ")", "\n", "out", "=", "self", ".", "decoder", "(", "feature", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SIJIEJI_CLNet.models.clnet.clnet": [[213, 222], ["clnet.CLNet"], "function", ["None"], ["", "", "def", "clnet", "(", "reduction", "=", "4", ")", ":", "\n", "    ", "r\"\"\" Create a proposed CLNet.\n\n    :param reduction: the reciprocal of compression ratio\n    :return: an instance of CLNet\n    \"\"\"", "\n", "\n", "model", "=", "CLNet", "(", "reduction", "=", "reduction", ")", "\n", "return", "model", "\n", "", ""]]}