{"home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim.get_arguments": [[75, 161], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"available options : DeepLab\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target\"", ",", "type", "=", "str", ",", "default", "=", "TARGET", ",", "\n", "help", "=", "\"available options : cityscapes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "BATCH_SIZE", ",", "\n", "help", "=", "\"Number of images sent to the network in one step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--iter-size\"", ",", "type", "=", "int", ",", "default", "=", "ITER_SIZE", ",", "\n", "help", "=", "\"Accumulate gradients for ITER_SIZE iterations.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "type", "=", "int", ",", "default", "=", "NUM_WORKERS", ",", "\n", "help", "=", "\"number of workers for multithread dataloading.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of source images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY_TARGET", ",", "\n", "help", "=", "\"Path to the directory containing the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH_TARGET", ",", "\n", "help", "=", "\"Path to the file listing the images in the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list-target-test\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH_TARGET_TEST", ",", "\n", "help", "=", "\"Path to the file listing the images in the target val dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size-target\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE_TARGET", ",", "\n", "help", "=", "\"Comma-separated string with height and width of target images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--is-training\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to updates the running means and variances during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE", ",", "\n", "help", "=", "\"Base learning rate for training with polynomial decay.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate-D\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE_D", ",", "\n", "help", "=", "\"Base learning rate for discriminator.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-adv-target\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_ADV_TARGET", ",", "\n", "help", "=", "\"lambda_adv for adversarial training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-adv-cls\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_ADV_CLS", ",", "\n", "help", "=", "\"lambda_cls for adversarial training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-adv-ins\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_ADV_INS", ",", "\n", "help", "=", "\"lambda_ins for adversarial training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "MOMENTUM", ",", "\n", "help", "=", "\"Momentum component of the optimiser.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--not-restore-last\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to not restore last (FC) layers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS", ",", "\n", "help", "=", "\"Number of training steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps-stop\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS_STOP", ",", "\n", "help", "=", "\"Number of training steps for early stopping.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-prototype\"", ",", "type", "=", "int", ",", "default", "=", "NUM_PROTOTYPE", ",", "\n", "help", "=", "\"Number of prototypes.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--power\"", ",", "type", "=", "float", ",", "default", "=", "POWER", ",", "\n", "help", "=", "\"Decay parameter to compute the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-mirror\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly mirror the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-scale\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly scale the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-seed\"", ",", "type", "=", "int", ",", "default", "=", "RANDOM_SEED", ",", "\n", "help", "=", "\"Random seed to have reproducible results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-num-images\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_NUM_IMAGES", ",", "\n", "help", "=", "\"How many images to save.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-pred-every\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_PRED_EVERY", ",", "\n", "help", "=", "\"Save summaries and checkpoint every often.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--snapshot-dir\"", ",", "type", "=", "str", ",", "default", "=", "SNAPSHOT_DIR", ",", "\n", "help", "=", "\"Where to save snapshots of the model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight-decay\"", ",", "type", "=", "float", ",", "default", "=", "WEIGHT_DECAY", ",", "\n", "help", "=", "\"Regularisation parameter for L2-loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cpu\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"choose to use cpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tensorboard\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"choose whether to use tensorboard.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--log-dir\"", ",", "type", "=", "str", ",", "default", "=", "LOG_DIR", ",", "\n", "help", "=", "\"Path to the directory of log.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose adaptation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--continue-train\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"continue training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "type", "=", "str", ",", "default", "=", "SAVE_PATH", ",", "\n", "help", "=", "\"Path to save result.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim.lr_poly": [[166, 168], ["float"], "function", ["None"], ["def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim.adjust_learning_rate": [[170, 175], ["train_sim.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim.adjust_learning_rate_D": [[177, 182], ["train_sim.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.lr_poly"], ["", "", "def", "adjust_learning_rate_D", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate_D", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim.amp_backward": [[184, 190], ["loss.backward", "amp.scale_loss", "scaled_loss.backward"], "function", ["None"], ["", "", "def", "amp_backward", "(", "loss", ",", "optimizer", ",", "retain_graph", "=", "False", ")", ":", "\n", "    ", "if", "APEX_AVAILABLE", ":", "\n", "        ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", "retain_graph", "=", "retain_graph", ")", "\n", "", "", "else", ":", "\n", "        ", "loss", ".", "backward", "(", "retain_graph", "=", "retain_graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim.seg_label": [[191, 206], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.cpu().numpy().astype", "skimage.measure.label", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "numpy.zeros", "range", "segs.append", "segs.append", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "mask.cpu().numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "mask.long", "numpy.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.cpu"], "function", ["None"], ["", "", "def", "seg_label", "(", "label", ")", ":", "\n", "    ", "segs", "=", "[", "]", "\n", "for", "fg", "in", "FG_LABEL", ":", "\n", "        ", "mask", "=", "label", "==", "fg", "\n", "if", "torch", ".", "sum", "(", "mask", ")", ">", "0", ":", "\n", "            ", "masknp", "=", "mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "seg", ",", "forenum", "=", "sklabel", "(", "masknp", ",", "background", "=", "0", ",", "return_num", "=", "True", ",", "connectivity", "=", "2", ")", "\n", "seg", "=", "torch", ".", "LongTensor", "(", "seg", ")", ".", "cuda", "(", ")", "\n", "pixelnum", "=", "np", ".", "zeros", "(", "forenum", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "range", "(", "forenum", ")", ":", "\n", "                ", "pixelnum", "[", "i", "]", "=", "torch", ".", "sum", "(", "seg", "==", "(", "i", "+", "1", ")", ")", ".", "item", "(", ")", "\n", "", "segs", ".", "append", "(", "[", "seg", ",", "pixelnum", "]", ")", "\n", "", "else", ":", "\n", "            ", "segs", ".", "append", "(", "[", "mask", ".", "long", "(", ")", ",", "np", ".", "zeros", "(", "0", ")", "]", ")", "\n", "", "", "return", "segs", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim.main": [[209, 541], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "map", "map", "model.discriminator.FCDiscriminator().to", "model.deeplab_multi.DeeplabMultiFeature.train", "model.deeplab_multi.DeeplabMultiFeature.to", "FCDiscriminator().to.train", "FCDiscriminator().to.to", "torch.utils.data.DataLoader", "enumerate", "torch.utils.data.DataLoader", "enumerate", "torch.SGD", "optim.SGD.zero_grad", "torch.Adam", "optim.Adam.zero_grad", "amp.initialize", "amp.initialize", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "numpy.zeros", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "numpy.zeros", "range", "args.input_size.split", "args.input_size_target.split", "model.deeplab_multi.DeeplabMultiFeature", "model_weights_path.split", "FCDiscriminator().to.load_state_dict", "model_weights_path.split", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "dataset.gta5_dataset.GTA5DataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "model.deeplab_multi.DeeplabMultiFeature.optim_parameters", "FCDiscriminator().to.parameters", "len", "len", "tensorboardX.SummaryWriter", "optim.SGD.zero_grad", "train_sim.adjust_learning_rate", "optim.Adam.zero_grad", "train_sim.adjust_learning_rate_D", "range", "optim.SGD.step", "optim.Adam.step", "print", "print", "tensorboardX.SummaryWriter.close", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.deeplab_multi.DeeplabMultiFeature.load_state_dict", "model.deeplab_multi.DeeplabMultiFeature.state_dict().copy", "model.deeplab_multi.DeeplabMultiFeature.load_state_dict", "model.discriminator.FCDiscriminator", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "int", "args.data_dir.split", "dataset.synthia_dataset.synthiaDataSet", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "FCDiscriminator().to.parameters", "enumerate.__next__", "images.to.to", "labels.long().to.long().to", "model.deeplab_multi.DeeplabMultiFeature.", "torch.softmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.interpolate().squeeze().long", "range", "train_sim.seg_label", "range", "nn.Upsample.", "torch.nn.CrossEntropyLoss.", "train_sim.amp_backward", "enumerate.__next__", "images.to.to", "model.deeplab_multi.DeeplabMultiFeature.", "torch.softmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "nn.Upsample.", "FCDiscriminator().to.", "torch.nn.BCEWithLogitsLoss.", "train_sim.amp_backward", "FCDiscriminator().to.parameters", "pred.detach.detach", "FCDiscriminator().to.", "torch.nn.BCEWithLogitsLoss.", "train_sim.amp_backward", "bce_loss.item", "pred_target.detach.detach", "FCDiscriminator().to.", "torch.nn.BCEWithLogitsLoss.", "train_sim.amp_backward", "bce_loss.item", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.utils.data.DataLoader", "model.deeplab_multi.DeeplabMultiFeature.eval", "enumerate", "compute_iou.compute_mIoU", "round", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.deeplab_multi.DeeplabMultiFeature.train", "torch.load.keys", "i.split", "args.data_dir.split", "len", "utils.functions.global_avg_pool", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "F.interpolate().squeeze().long.squeeze", "len", "range", "seg_loss.item", "range", "train_sim.seg_label", "range", "torch.softmax", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "bce_loss.item", "torch.softmax", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.softmax", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "scalar_info.items", "torch.zeros().to.item", "torch.zeros().to.item", "model.deeplab_multi.DeeplabMultiFeature.state_dict", "os.join", "FCDiscriminator().to.state_dict", "os.join", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "dataset.cityscapes_dataset.cityscapesDataSet", "nn.Upsample.cpu().data[].numpy", "Image.fromarray.transpose", "numpy.asarray", "PIL.fromarray", "Image.fromarray.save", "os.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.deeplab_multi.DeeplabMultiFeature.state_dict", "os.join", "FCDiscriminator().to.state_dict", "os.join", "[].split", "torch.load.pop", "model.deeplab_multi.DeeplabMultiFeature.state_dict", "model_weights_path.split.split", "len", "len", "labels.long().to.long", "torch.interpolate().squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.float", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "len", "numpy.argsort", "min", "utils.functions.global_avg_pool", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "utils.functions.global_avg_pool", "feature.squeeze().expand.squeeze().expand", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.argmax.squeeze", "len", "range", "tensorboardX.SummaryWriter.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.deeplab_multi.DeeplabMultiFeature.", "numpy.argmax", "name[].split", "numpy.nanmean", "model.deeplab_multi.DeeplabMultiFeature.state_dict", "os.join", "FCDiscriminator().to.state_dict", "os.join", "torch.squeeze().clone", "torch.squeeze().clone", "torch.squeeze().clone", "torch.squeeze().clone", "torch.squeeze().clone", "len", "mask.float", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "mask.float", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "len", "numpy.argsort", "min", "utils.functions.global_avg_pool", "feature.squeeze().expand.squeeze().expand", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.autograd.Variable().to", "torch.interpolate", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "int", "torch.squeeze().clone", "torch.squeeze().clone", "torch.squeeze().clone", "torch.squeeze().clone", "torch.squeeze().clone", "feature.squeeze().expand.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "mask.float", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "min", "str", "str", "str", "str", "list", "labels.long().to.unsqueeze().float", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "int", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.nn.L1Loss.", "feature.squeeze().expand.squeeze", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.autograd.Variable", "nn.Upsample.cpu", "torch.load.keys", "key.split", "torch.argmax.size", "torch.argmax.size", "model.deeplab_multi.DeeplabMultiFeature.layer6().float", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model_D.data.size", "model_D.data.size", "model_D.data.size", "labels.long().to.unsqueeze", "model.deeplab_multi.DeeplabMultiFeature.layer6().float", "model.deeplab_multi.DeeplabMultiFeature.layer6().float", "torch.nn.L1Loss.", "nn.Upsample.", "model.deeplab_multi.DeeplabMultiFeature.layer6", "feature.squeeze().expand.half", "model.deeplab_multi.DeeplabMultiFeature.layer6", "model.deeplab_multi.DeeplabMultiFeature.layer6", "feature.squeeze().expand.half", "feature.squeeze().expand.half"], "function", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.DeeplabMultiFeature", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_vgg.DeeplabVGG.optim_parameters", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.adjust_learning_rate", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.adjust_learning_rate_D", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.seg_label", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.amp_backward", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.amp_backward", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.amp_backward", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.amp_backward", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.compute_iou.compute_mIoU", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.utils.functions.global_avg_pool", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.seg_label", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.utils.functions.global_avg_pool", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.utils.functions.global_avg_pool", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.utils.functions.global_avg_pool"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the training.\"\"\"", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "not", "args", ".", "cpu", "else", "\"cpu\"", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "input_size", "=", "(", "w", ",", "h", ")", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size_target", ".", "split", "(", "','", ")", ")", "\n", "input_size_target", "=", "(", "w", ",", "h", ")", "\n", "\n", "Iter", "=", "0", "\n", "bestIoU", "=", "0", "\n", "\n", "# Create network", "\n", "# init G", "\n", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "        ", "model", "=", "DeeplabMultiFeature", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "            ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "            ", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "", "if", "args", ".", "continue_train", ":", "\n", "            ", "if", "list", "(", "saved_state_dict", ".", "keys", "(", ")", ")", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "==", "'module'", ":", "\n", "                ", "for", "key", "in", "saved_state_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "saved_state_dict", "[", "'.'", ".", "join", "(", "key", ".", "split", "(", "'.'", ")", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", ".", "pop", "(", "key", ")", "\n", "", "", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "", "else", ":", "\n", "            ", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "                ", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "if", "not", "args", ".", "num_classes", "==", "19", "or", "not", "i_parts", "[", "1", "]", "==", "'layer5'", ":", "\n", "                    ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "\n", "# init D", "\n", "", "", "model_D", "=", "FCDiscriminator", "(", "num_classes", "=", "args", ".", "num_classes", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "continue_train", ":", "\n", "        ", "model_weights_path", "=", "args", ".", "restore_from", "\n", "temp", "=", "model_weights_path", ".", "split", "(", "'.'", ")", "\n", "temp", "[", "-", "2", "]", "=", "temp", "[", "-", "2", "]", "+", "'_D'", "\n", "model_D_weights_path", "=", "'.'", ".", "join", "(", "temp", ")", "\n", "model_D", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_D_weights_path", ")", ")", "\n", "temp", "=", "model_weights_path", ".", "split", "(", "'.'", ")", "\n", "temp", "=", "temp", "[", "-", "2", "]", "[", "-", "9", ":", "]", "\n", "Iter", "=", "int", "(", "temp", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "+", "1", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "model_D", ".", "train", "(", ")", "\n", "model_D", ".", "to", "(", "device", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "snapshot_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "snapshot_dir", ")", "\n", "\n", "# init data loader", "\n", "", "if", "args", ".", "data_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "==", "'gta5_deeplab'", ":", "\n", "        ", "trainset", "=", "GTA5DataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "crop_size", "=", "input_size", ",", "\n", "scale", "=", "args", ".", "random_scale", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ")", "\n", "", "elif", "args", ".", "data_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "==", "'syn_deeplab'", ":", "\n", "        ", "trainset", "=", "synthiaDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "crop_size", "=", "input_size", ",", "\n", "scale", "=", "args", ".", "random_scale", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ")", "\n", "\n", "", "trainloader", "=", "data", ".", "DataLoader", "(", "trainset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "\n", "targetloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir_target", ",", "args", ".", "data_list_target", ",", "\n", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "crop_size", "=", "input_size_target", ",", "\n", "scale", "=", "False", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ",", "\n", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "\n", "# init optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "args", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "optimizer_D", "=", "optim", ".", "Adam", "(", "model_D", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_D", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "\n", "model", ",", "optimizer", ",", "opt_level", "=", "\"O2\"", ",", "\n", "keep_batchnorm_fp32", "=", "True", ",", "loss_scale", "=", "\"dynamic\"", "\n", ")", "\n", "\n", "model_D", ",", "optimizer_D", "=", "amp", ".", "initialize", "(", "\n", "model_D", ",", "optimizer_D", ",", "opt_level", "=", "\"O2\"", ",", "\n", "keep_batchnorm_fp32", "=", "True", ",", "loss_scale", "=", "\"dynamic\"", "\n", ")", "\n", "\n", "# init loss", "\n", "bce_loss", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "seg_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ")", "\n", "L1_loss", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size", "[", "1", "]", ",", "input_size", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "test_interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "# labels for adversarial training", "\n", "source_label", "=", "0", "\n", "target_label", "=", "1", "\n", "\n", "# init prototype", "\n", "num_prototype", "=", "args", ".", "num_prototype", "\n", "num_ins", "=", "args", ".", "num_prototype", "*", "10", "\n", "src_cls_features", "=", "torch", ".", "zeros", "(", "[", "len", "(", "BG_LABEL", ")", ",", "num_prototype", ",", "2048", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "src_cls_ptr", "=", "np", ".", "zeros", "(", "len", "(", "BG_LABEL", ")", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "src_ins_features", "=", "torch", ".", "zeros", "(", "[", "len", "(", "FG_LABEL", ")", ",", "num_ins", ",", "2048", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "src_ins_ptr", "=", "np", ".", "zeros", "(", "len", "(", "FG_LABEL", ")", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "\n", "\n", "# set up tensor board", "\n", "if", "args", ".", "tensorboard", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "log_dir", ")", "\n", "", "writer", "=", "SummaryWriter", "(", "args", ".", "log_dir", ")", "\n", "\n", "# start training", "\n", "", "for", "i_iter", "in", "range", "(", "Iter", ",", "args", ".", "num_steps", ")", ":", "\n", "\n", "        ", "loss_seg_value", "=", "0", "\n", "loss_adv_target_value", "=", "0", "\n", "loss_D_value", "=", "0", "\n", "loss_cls_value", "=", "0", "\n", "loss_ins_value", "=", "0", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", "\n", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate_D", "(", "optimizer_D", ",", "i_iter", ")", "\n", "\n", "for", "sub_i", "in", "range", "(", "args", ".", "iter_size", ")", ":", "\n", "\n", "# train G", "\n", "\n", "# don't accumulate grads in D", "\n", "\n", "            ", "for", "param", "in", "model_D", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "# train with source", "\n", "\n", "", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "\n", "images", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "src_feature", ",", "pred", "=", "model", "(", "images", ")", "\n", "pred_softmax", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "pred_idx", "=", "torch", ".", "argmax", "(", "pred_softmax", ",", "dim", "=", "1", ")", "\n", "\n", "right_label", "=", "F", ".", "interpolate", "(", "labels", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "(", "pred_idx", ".", "size", "(", "1", ")", ",", "pred_idx", ".", "size", "(", "2", ")", ")", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "0", ")", ".", "long", "(", ")", "\n", "right_label", "[", "right_label", "!=", "pred_idx", "]", "=", "255", "\n", "\n", "for", "ii", "in", "range", "(", "len", "(", "BG_LABEL", ")", ")", ":", "\n", "                ", "cls_idx", "=", "BG_LABEL", "[", "ii", "]", "\n", "mask", "=", "right_label", "==", "cls_idx", "\n", "if", "torch", ".", "sum", "(", "mask", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "feature", "=", "global_avg_pool", "(", "src_feature", ",", "mask", ".", "float", "(", ")", ")", "\n", "if", "cls_idx", "!=", "torch", ".", "argmax", "(", "torch", ".", "squeeze", "(", "model", ".", "layer6", "(", "feature", ".", "half", "(", ")", ")", ".", "float", "(", ")", ")", ")", ".", "item", "(", ")", ":", "\n", "                    ", "continue", "\n", "", "src_cls_features", "[", "ii", ",", "int", "(", "src_cls_ptr", "[", "ii", "]", "%", "num_prototype", ")", ",", ":", "]", "=", "torch", ".", "squeeze", "(", "feature", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "src_cls_ptr", "[", "ii", "]", "+=", "1", "\n", "\n", "", "seg_ins", "=", "seg_label", "(", "right_label", ".", "squeeze", "(", ")", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "FG_LABEL", ")", ")", ":", "\n", "                ", "cls_idx", "=", "FG_LABEL", "[", "ii", "]", "\n", "segmask", ",", "pixelnum", "=", "seg_ins", "[", "ii", "]", "\n", "if", "len", "(", "pixelnum", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "sortmax", "=", "np", ".", "argsort", "(", "pixelnum", ")", "[", ":", ":", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "min", "(", "10", ",", "len", "(", "sortmax", ")", ")", ")", ":", "\n", "                    ", "mask", "=", "segmask", "==", "(", "sortmax", "[", "i", "]", "+", "1", ")", "\n", "feature", "=", "global_avg_pool", "(", "src_feature", ",", "mask", ".", "float", "(", ")", ")", "\n", "if", "cls_idx", "!=", "torch", ".", "argmax", "(", "torch", ".", "squeeze", "(", "model", ".", "layer6", "(", "feature", ".", "half", "(", ")", ")", ".", "float", "(", ")", ")", ")", ".", "item", "(", ")", ":", "\n", "                        ", "continue", "\n", "", "src_ins_features", "[", "ii", ",", "int", "(", "src_ins_ptr", "[", "ii", "]", "%", "num_ins", ")", ",", ":", "]", "=", "torch", ".", "squeeze", "(", "feature", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "src_ins_ptr", "[", "ii", "]", "+=", "1", "\n", "\n", "", "", "pred", "=", "interp", "(", "pred", ")", "\n", "loss_seg", "=", "seg_loss", "(", "pred", ",", "labels", ")", "\n", "loss", "=", "loss_seg", "\n", "\n", "# proper normalization", "\n", "loss", "=", "loss", "/", "args", ".", "iter_size", "\n", "amp_backward", "(", "loss", ",", "optimizer", ")", "\n", "loss_seg_value", "+=", "loss_seg", ".", "item", "(", ")", "/", "args", ".", "iter_size", "\n", "\n", "# train with target", "\n", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "images", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "\n", "trg_feature", ",", "pred_target", "=", "model", "(", "images", ")", "\n", "\n", "pred_target_softmax", "=", "F", ".", "softmax", "(", "pred_target", ",", "dim", "=", "1", ")", "\n", "pred_target_idx", "=", "torch", ".", "argmax", "(", "pred_target_softmax", ",", "dim", "=", "1", ")", "\n", "\n", "loss_cls", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "loss_ins", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "if", "i_iter", ">", "0", ":", "\n", "                ", "for", "ii", "in", "range", "(", "len", "(", "BG_LABEL", ")", ")", ":", "\n", "                    ", "cls_idx", "=", "BG_LABEL", "[", "ii", "]", "\n", "if", "src_cls_ptr", "[", "ii", "]", "/", "num_prototype", "<=", "1", ":", "\n", "                        ", "continue", "\n", "", "mask", "=", "pred_target_idx", "==", "cls_idx", "\n", "feature", "=", "global_avg_pool", "(", "trg_feature", ",", "mask", ".", "float", "(", ")", ")", "\n", "if", "cls_idx", "!=", "torch", ".", "argmax", "(", "torch", ".", "squeeze", "(", "model", ".", "layer6", "(", "feature", ".", "half", "(", ")", ")", ".", "float", "(", ")", ")", ")", ".", "item", "(", ")", ":", "\n", "                        ", "continue", "\n", "", "ext_feature", "=", "feature", ".", "squeeze", "(", ")", ".", "expand", "(", "num_prototype", ",", "2048", ")", "\n", "loss_cls", "+=", "torch", ".", "min", "(", "torch", ".", "sum", "(", "L1_loss", "(", "ext_feature", ",", "src_cls_features", "[", "ii", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "/", "2048.", ")", "\n", "\n", "", "seg_ins", "=", "seg_label", "(", "pred_target_idx", ".", "squeeze", "(", ")", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "FG_LABEL", ")", ")", ":", "\n", "                    ", "cls_idx", "=", "FG_LABEL", "[", "ii", "]", "\n", "if", "src_ins_ptr", "[", "ii", "]", "/", "num_ins", "<=", "1", ":", "\n", "                        ", "continue", "\n", "", "segmask", ",", "pixelnum", "=", "seg_ins", "[", "ii", "]", "\n", "if", "len", "(", "pixelnum", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "sortmax", "=", "np", ".", "argsort", "(", "pixelnum", ")", "[", ":", ":", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "min", "(", "10", ",", "len", "(", "sortmax", ")", ")", ")", ":", "\n", "                        ", "mask", "=", "segmask", "==", "(", "sortmax", "[", "i", "]", "+", "1", ")", "\n", "feature", "=", "global_avg_pool", "(", "trg_feature", ",", "mask", ".", "float", "(", ")", ")", "\n", "feature", "=", "feature", ".", "squeeze", "(", ")", ".", "expand", "(", "num_ins", ",", "2048", ")", "\n", "loss_ins", "+=", "torch", ".", "min", "(", "torch", ".", "sum", "(", "L1_loss", "(", "feature", ",", "src_ins_features", "[", "ii", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "/", "2048.", ")", "/", "min", "(", "10", ",", "len", "(", "sortmax", ")", ")", "\n", "\n", "", "", "", "pred_target", "=", "interp_target", "(", "pred_target", ")", "\n", "\n", "D_out", "=", "model_D", "(", "F", ".", "softmax", "(", "pred_target", ",", "dim", "=", "1", ")", ")", "\n", "loss_adv_target", "=", "bce_loss", "(", "D_out", ",", "torch", ".", "FloatTensor", "(", "D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "loss", "=", "args", ".", "lambda_adv_target", "*", "loss_adv_target", "+", "args", ".", "lambda_adv_cls", "*", "loss_cls", "+", "args", ".", "lambda_adv_ins", "*", "loss_ins", "\n", "loss", "=", "loss", "/", "args", ".", "iter_size", "\n", "amp_backward", "(", "loss", ",", "optimizer", ")", "\n", "loss_adv_target_value", "+=", "loss_adv_target", ".", "item", "(", ")", "/", "args", ".", "iter_size", "\n", "\n", "# train D", "\n", "\n", "# bring back requires_grad", "\n", "\n", "for", "param", "in", "model_D", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "# train with source", "\n", "", "pred", "=", "pred", ".", "detach", "(", ")", "\n", "D_out", "=", "model_D", "(", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", ")", "\n", "\n", "loss_D", "=", "bce_loss", "(", "D_out", ",", "torch", ".", "FloatTensor", "(", "D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", ".", "to", "(", "device", ")", ")", "\n", "loss_D", "=", "loss_D", "/", "args", ".", "iter_size", "/", "2", "\n", "amp_backward", "(", "loss_D", ",", "optimizer_D", ")", "\n", "loss_D_value", "+=", "loss_D", ".", "item", "(", ")", "\n", "\n", "# train with target", "\n", "pred_target", "=", "pred_target", ".", "detach", "(", ")", "\n", "D_out", "=", "model_D", "(", "F", ".", "softmax", "(", "pred_target", ",", "dim", "=", "1", ")", ")", "\n", "\n", "loss_D", "=", "bce_loss", "(", "D_out", ",", "torch", ".", "FloatTensor", "(", "D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "target_label", ")", ".", "to", "(", "device", ")", ")", "\n", "loss_D", "=", "loss_D", "/", "args", ".", "iter_size", "/", "2", "\n", "amp_backward", "(", "loss_D", ",", "optimizer_D", ")", "\n", "loss_D_value", "+=", "loss_D", ".", "item", "(", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "if", "args", ".", "tensorboard", ":", "\n", "            ", "scalar_info", "=", "{", "\n", "'loss_seg'", ":", "loss_seg_value", ",", "\n", "'loss_adv_target'", ":", "loss_adv_target_value", ",", "\n", "'loss_D'", ":", "loss_D_value", ",", "\n", "}", "\n", "\n", "if", "i_iter", "%", "10", "==", "0", ":", "\n", "                ", "for", "key", ",", "val", "in", "scalar_info", ".", "items", "(", ")", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "key", ",", "val", ",", "i_iter", ")", "\n", "\n", "", "", "", "print", "(", "'exp = {}'", ".", "format", "(", "args", ".", "snapshot_dir", ")", ")", "\n", "print", "(", "\n", "'iter = {0:8d}/{1:8d}, loss_seg = {2:.3f}, loss_adv = {3:.3f} loss_D = {4:.3f} loss_cls = {5:.3f} loss_ins = {6:.3f}'", ".", "format", "(", "\n", "i_iter", ",", "args", ".", "num_steps", ",", "loss_seg_value", ",", "loss_adv_target_value", ",", "loss_D_value", ",", "loss_cls", ".", "item", "(", ")", ",", "loss_ins", ".", "item", "(", ")", ")", ")", "\n", "\n", "if", "i_iter", ">=", "args", ".", "num_steps_stop", "-", "1", ":", "\n", "            ", "print", "(", "'save model ...'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps_stop", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "model_D", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps_stop", ")", "+", "'_D.pth'", ")", ")", "\n", "break", "\n", "\n", "", "if", "i_iter", "%", "args", ".", "save_pred_every", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "args", ".", "save", ")", "\n", "", "testloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir_target", ",", "args", ".", "data_list_target_test", ",", "\n", "crop_size", "=", "(", "1024", ",", "512", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "'val'", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "index", ",", "batch", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                ", "image", ",", "_", ",", "name", "=", "batch", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output1", ",", "output2", "=", "model", "(", "Variable", "(", "image", ")", ".", "to", "(", "device", ")", ")", "\n", "", "output", "=", "test_interp", "(", "output2", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "output", "=", "Image", ".", "fromarray", "(", "output", ")", "\n", "name", "=", "name", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "output", ".", "save", "(", "'%s/%s'", "%", "(", "args", ".", "save", ",", "name", ")", ")", "\n", "", "mIoUs", "=", "compute_mIoU", "(", "osp", ".", "join", "(", "args", ".", "data_dir_target", ",", "'gtFine/val'", ")", ",", "args", ".", "save", ",", "'dataset/cityscapes_list'", ")", "\n", "mIoU", "=", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", "\n", "if", "mIoU", ">", "bestIoU", ":", "\n", "                ", "bestIoU", "=", "mIoU", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'BestGTA5.pth'", ")", ")", "\n", "torch", ".", "save", "(", "model_D", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'BestGTA5_D.pth'", ")", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "model_D", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'_D.pth'", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "", "", "if", "args", ".", "tensorboard", ":", "\n", "        ", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.SSL.colorize_mask": [[42, 48], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.SSL.get_arguments": [[49, 74], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"Model Choice Deeplab.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the Cityscapes dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose evaluation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "type", "=", "str", ",", "default", "=", "SAVE_PATH", ",", "\n", "help", "=", "\"Path to save result.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cpu\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"choose to use cpu device.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.SSL.main": [[76, 144], ["SSL.get_arguments", "model.deeplab_multi.DeeplabMultiFeature", "torch.load", "torch.load", "torch.load", "model.to.load_state_dict", "torch.device", "torch.device", "torch.device", "model.to.to", "model.to.eval", "dataset.cityscapes_dataset.cityscapesDataSet", "torch.utils.data.DataLoader", "torch.Upsample", "numpy.zeros", "numpy.zeros", "enumerate", "range", "print", "numpy.array", "print", "range", "os.path.exists", "os.makedirs", "torch.load.keys", "image.to.to", "torch.softmax", "nn.Upsample.cpu().data[].numpy", "Image.fromarray.transpose", "label.copy", "prob.copy", "image_name.append", "numpy.sort", "np.array.append", "len", "range", "numpy.asarray", "PIL.Image.fromarray", "Image.fromarray.save", "[].split", "torch.load.pop", "len", "len", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.to.", "numpy.argmax", "numpy.max", "len", "np.array.append", "name.split", "numpy.int", "list", "nn.Upsample.cpu", "numpy.round", "torch.load.keys", "key.split", "nn.Upsample.", "len"], "function", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.evaluate_cityscapes.get_arguments", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.DeeplabMultiFeature"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "\n", "args", "=", "get_arguments", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save", ")", "\n", "\n", "", "model", "=", "DeeplabMultiFeature", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "if", "list", "(", "saved_state_dict", ".", "keys", "(", ")", ")", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "==", "'module'", ":", "\n", "        ", "for", "key", "in", "saved_state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "saved_state_dict", "[", "'.'", ".", "join", "(", "key", ".", "split", "(", "'.'", ")", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", ".", "pop", "(", "key", ")", "\n", "", "", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "not", "args", ".", "cpu", "else", "\"cpu\"", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "trainset", "=", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "\n", "crop_size", "=", "(", "1024", ",", "512", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", "\n", "trainloader", "=", "data", ".", "DataLoader", "(", "trainset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "512", ",", "1024", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "predicted_label", "=", "np", ".", "zeros", "(", "(", "len", "(", "trainset", ")", ",", "512", ",", "1024", ")", ")", "\n", "predicted_prob", "=", "np", ".", "zeros", "(", "(", "len", "(", "trainset", ")", ",", "512", ",", "1024", ")", ")", "\n", "image_name", "=", "[", "]", "\n", "\n", "for", "index", ",", "batch", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "        ", "if", "index", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'%d processd'", "%", "index", ")", "\n", "\n", "", "image", ",", "_", ",", "name", "=", "batch", "\n", "image", "=", "image", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "_", ",", "output", "=", "model", "(", "image", ")", "\n", "", "output", "=", "F", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "output", "=", "interp", "(", "output", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "label", ",", "prob", "=", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "np", ".", "max", "(", "output", ",", "axis", "=", "2", ")", "\n", "predicted_label", "[", "index", "]", "=", "label", ".", "copy", "(", ")", "\n", "predicted_prob", "[", "index", "]", "=", "prob", ".", "copy", "(", ")", "\n", "image_name", ".", "append", "(", "name", "[", "0", "]", ")", "\n", "\n", "", "thres", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "19", ")", ":", "\n", "        ", "x", "=", "predicted_prob", "[", "predicted_label", "==", "i", "]", "\n", "if", "len", "(", "x", ")", "==", "0", ":", "\n", "            ", "thres", ".", "append", "(", "0", ")", "\n", "continue", "\n", "", "x", "=", "np", ".", "sort", "(", "x", ")", "\n", "thres", ".", "append", "(", "x", "[", "np", ".", "int", "(", "np", ".", "round", "(", "len", "(", "x", ")", "*", "0.5", ")", ")", "]", ")", "\n", "", "print", "(", "thres", ")", "\n", "thres", "=", "np", ".", "array", "(", "thres", ")", "\n", "thres", "[", "thres", ">", "0.9", "]", "=", "0.9", "\n", "print", "(", "thres", ")", "\n", "for", "index", "in", "range", "(", "len", "(", "trainset", ")", ")", ":", "\n", "        ", "name", "=", "image_name", "[", "index", "]", "\n", "label", "=", "predicted_label", "[", "index", "]", "\n", "prob", "=", "predicted_prob", "[", "index", "]", "\n", "for", "i", "in", "range", "(", "19", ")", ":", "\n", "            ", "label", "[", "(", "prob", "<", "thres", "[", "i", "]", ")", "*", "(", "label", "==", "i", ")", "]", "=", "255", "\n", "", "output", "=", "np", ".", "asarray", "(", "label", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "output", "=", "Image", ".", "fromarray", "(", "output", ")", "\n", "name", "=", "name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "output", ".", "save", "(", "'%s/%s'", "%", "(", "args", ".", "save", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.compute_iou.fast_hist": [[8, 11], ["numpy.bincount().reshape", "numpy.bincount", "a[].astype"], "function", ["None"], ["def", "fast_hist", "(", "a", ",", "b", ",", "n", ")", ":", "\n", "    ", "k", "=", "(", "a", ">=", "0", ")", "&", "(", "a", "<", "n", ")", "\n", "return", "np", ".", "bincount", "(", "n", "*", "a", "[", "k", "]", ".", "astype", "(", "int", ")", "+", "b", "[", "k", "]", ",", "minlength", "=", "n", "**", "2", ")", ".", "reshape", "(", "n", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.compute_iou.per_class_iu": [[13, 15], ["numpy.diag", "numpy.diag", "hist.sum", "hist.sum"], "function", ["None"], ["", "def", "per_class_iu", "(", "hist", ")", ":", "\n", "    ", "return", "np", ".", "diag", "(", "hist", ")", "/", "(", "hist", ".", "sum", "(", "1", ")", "+", "hist", ".", "sum", "(", "0", ")", "-", "np", ".", "diag", "(", "hist", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.compute_iou.label_mapping": [[17, 22], ["numpy.copy", "range", "numpy.array", "len"], "function", ["None"], ["", "def", "label_mapping", "(", "input", ",", "mapping", ")", ":", "\n", "    ", "output", "=", "np", ".", "copy", "(", "input", ")", "\n", "for", "ind", "in", "range", "(", "len", "(", "mapping", ")", ")", ":", "\n", "        ", "output", "[", "input", "==", "mapping", "[", "ind", "]", "[", "0", "]", "]", "=", "mapping", "[", "ind", "]", "[", "1", "]", "\n", "", "return", "np", ".", "array", "(", "output", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.compute_iou.compute_mIoU": [[24, 60], ["numpy.int", "print", "numpy.array", "numpy.array", "numpy.zeros", "os.path.join", "os.path.join", "open().read().splitlines", "open().read().splitlines", "range", "compute_iou.per_class_iu", "open", "json.load", "os.path.join", "os.path.join", "len", "numpy.array", "numpy.array", "compute_iou.label_mapping", "compute_iou.fast_hist", "range", "print", "os.path.join", "open().read", "open().read", "PIL.Image.open", "PIL.Image.open", "len", "len", "print", "label_mapping.flatten", "np.array.flatten", "print", "print", "x.split", "label_mapping.flatten", "np.array.flatten", "str", "open", "open", "len", "len", "len", "str", "round", "label_mapping.flatten", "np.array.flatten", "numpy.mean", "round", "compute_iou.per_class_iu", "numpy.nanmean"], "function", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.compute_iou.per_class_iu", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.compute_iou.label_mapping", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.compute_iou.fast_hist", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.compute_iou.per_class_iu"], ["", "def", "compute_mIoU", "(", "gt_dir", ",", "pred_dir", ",", "devkit_dir", "=", "''", ",", "silence", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Compute IoU given the predicted colorized images and \n    \"\"\"", "\n", "with", "open", "(", "join", "(", "devkit_dir", ",", "'info.json'", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "      ", "info", "=", "json", ".", "load", "(", "fp", ")", "\n", "", "num_classes", "=", "np", ".", "int", "(", "info", "[", "'classes'", "]", ")", "\n", "print", "(", "'Num classes'", ",", "num_classes", ")", "\n", "name_classes", "=", "np", ".", "array", "(", "info", "[", "'label'", "]", ",", "dtype", "=", "np", ".", "str", ")", "\n", "mapping", "=", "np", ".", "array", "(", "info", "[", "'label2train'", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "hist", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_classes", ")", ")", "\n", "\n", "image_path_list", "=", "join", "(", "devkit_dir", ",", "'val.txt'", ")", "\n", "label_path_list", "=", "join", "(", "devkit_dir", ",", "'label.txt'", ")", "\n", "gt_imgs", "=", "open", "(", "label_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "gt_imgs", "=", "[", "join", "(", "gt_dir", ",", "x", ")", "for", "x", "in", "gt_imgs", "]", "\n", "pred_imgs", "=", "open", "(", "image_path_list", ",", "'r'", ")", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "pred_imgs", "=", "[", "join", "(", "pred_dir", ",", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "for", "x", "in", "pred_imgs", "]", "\n", "\n", "for", "ind", "in", "range", "(", "len", "(", "gt_imgs", ")", ")", ":", "\n", "        ", "pred", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "gt_imgs", "[", "ind", "]", ")", ")", "\n", "label", "=", "label_mapping", "(", "label", ",", "mapping", ")", "\n", "if", "len", "(", "label", ".", "flatten", "(", ")", ")", "!=", "len", "(", "pred", ".", "flatten", "(", ")", ")", ":", "\n", "            ", "print", "(", "'Skipping: len(gt) = {:d}, len(pred) = {:d}, {:s}, {:s}'", ".", "format", "(", "len", "(", "label", ".", "flatten", "(", ")", ")", ",", "len", "(", "pred", ".", "flatten", "(", ")", ")", ",", "gt_imgs", "[", "ind", "]", ",", "pred_imgs", "[", "ind", "]", ")", ")", "\n", "continue", "\n", "", "hist", "+=", "fast_hist", "(", "label", ".", "flatten", "(", ")", ",", "pred", ".", "flatten", "(", ")", ",", "num_classes", ")", "\n", "if", "ind", ">", "0", "and", "ind", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'{:d} / {:d}: {:0.2f}'", ".", "format", "(", "ind", ",", "len", "(", "gt_imgs", ")", ",", "100", "*", "np", ".", "mean", "(", "per_class_iu", "(", "hist", ")", ")", ")", ")", "\n", "\n", "", "", "mIoUs", "=", "per_class_iu", "(", "hist", ")", "\n", "if", "not", "silence", ":", "\n", "        ", "for", "ind_class", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "print", "(", "'===>'", "+", "name_classes", "[", "ind_class", "]", "+", "':\\t'", "+", "str", "(", "round", "(", "mIoUs", "[", "ind_class", "]", "*", "100", ",", "2", ")", ")", ")", "\n", "", "print", "(", "'===> mIoU: '", "+", "str", "(", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", ")", ")", "\n", "", "return", "mIoUs", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.compute_iou.main": [[62, 64], ["compute_iou.compute_mIoU"], "function", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.compute_iou.compute_mIoU"], ["", "def", "main", "(", "args", ")", ":", "\n", "   ", "compute_mIoU", "(", "args", ".", "gt_dir", ",", "args", ".", "pred_dir", ",", "args", ".", "devkit_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.get_arguments": [[76, 164], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"available options : DeepLab\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--target\"", ",", "type", "=", "str", ",", "default", "=", "TARGET", ",", "\n", "help", "=", "\"available options : cityscapes\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "BATCH_SIZE", ",", "\n", "help", "=", "\"Number of images sent to the network in one step.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--iter-size\"", ",", "type", "=", "int", ",", "default", "=", "ITER_SIZE", ",", "\n", "help", "=", "\"Accumulate gradients for ITER_SIZE iterations.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-workers\"", ",", "type", "=", "int", ",", "default", "=", "NUM_WORKERS", ",", "\n", "help", "=", "\"number of workers for multithread dataloading.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the source dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE", ",", "\n", "help", "=", "\"Comma-separated string with height and width of source images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY_TARGET", ",", "\n", "help", "=", "\"Path to the directory containing the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list-target\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH_TARGET", ",", "\n", "help", "=", "\"Path to the file listing the images in the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ssl-target-dir\"", ",", "type", "=", "str", ",", "default", "=", "SSL_TARGET_DIR", ",", "\n", "help", "=", "\"Path to folder storing the ground truth of the target dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list-target-test\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH_TARGET_TEST", ",", "\n", "help", "=", "\"Path to the file listing the images in the target val dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input-size-target\"", ",", "type", "=", "str", ",", "default", "=", "INPUT_SIZE_TARGET", ",", "\n", "help", "=", "\"Comma-separated string with height and width of target images.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--is-training\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to updates the running means and variances during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE", ",", "\n", "help", "=", "\"Base learning rate for training with polynomial decay.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--learning-rate-D\"", ",", "type", "=", "float", ",", "default", "=", "LEARNING_RATE_D", ",", "\n", "help", "=", "\"Base learning rate for discriminator.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-adv-target\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_ADV_TARGET", ",", "\n", "help", "=", "\"lambda_adv for adversarial training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-adv-cls\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_ADV_CLS", ",", "\n", "help", "=", "\"lambda_cls for adversarial training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lambda-adv-ins\"", ",", "type", "=", "float", ",", "default", "=", "LAMBDA_ADV_INS", ",", "\n", "help", "=", "\"lambda_ins for adversarial training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--momentum\"", ",", "type", "=", "float", ",", "default", "=", "MOMENTUM", ",", "\n", "help", "=", "\"Momentum component of the optimiser.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--not-restore-last\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to not restore last (FC) layers.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS", ",", "\n", "help", "=", "\"Number of training steps.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-steps-stop\"", ",", "type", "=", "int", ",", "default", "=", "NUM_STEPS_STOP", ",", "\n", "help", "=", "\"Number of training steps for early stopping.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-prototype\"", ",", "type", "=", "int", ",", "default", "=", "NUM_PROTOTYPE", ",", "\n", "help", "=", "\"Number of prototypes.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--power\"", ",", "type", "=", "float", ",", "default", "=", "POWER", ",", "\n", "help", "=", "\"Decay parameter to compute the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-mirror\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly mirror the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-scale\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Whether to randomly scale the inputs during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random-seed\"", ",", "type", "=", "int", ",", "default", "=", "RANDOM_SEED", ",", "\n", "help", "=", "\"Random seed to have reproducible results.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-num-images\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_NUM_IMAGES", ",", "\n", "help", "=", "\"How many images to save.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save-pred-every\"", ",", "type", "=", "int", ",", "default", "=", "SAVE_PRED_EVERY", ",", "\n", "help", "=", "\"Save summaries and checkpoint every often.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--snapshot-dir\"", ",", "type", "=", "str", ",", "default", "=", "SNAPSHOT_DIR", ",", "\n", "help", "=", "\"Where to save snapshots of the model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight-decay\"", ",", "type", "=", "float", ",", "default", "=", "WEIGHT_DECAY", ",", "\n", "help", "=", "\"Regularisation parameter for L2-loss.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cpu\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"choose to use cpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tensorboard\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"choose whether to use tensorboard.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--log-dir\"", ",", "type", "=", "str", ",", "default", "=", "LOG_DIR", ",", "\n", "help", "=", "\"Path to the directory of log.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose adaptation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--continue-train\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"continue training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "type", "=", "str", ",", "default", "=", "SAVE_PATH", ",", "\n", "help", "=", "\"Path to save result.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.lr_poly": [[169, 171], ["float"], "function", ["None"], ["def", "lr_poly", "(", "base_lr", ",", "iter", ",", "max_iter", ",", "power", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "(", "1", "-", "float", "(", "iter", ")", "/", "max_iter", ")", "**", "(", "power", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.adjust_learning_rate": [[173, 178], ["train_sim_ssl.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.lr_poly"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.adjust_learning_rate_D": [[180, 185], ["train_sim_ssl.lr_poly", "len"], "function", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.lr_poly"], ["", "", "def", "adjust_learning_rate_D", "(", "optimizer", ",", "i_iter", ")", ":", "\n", "    ", "lr", "=", "lr_poly", "(", "args", ".", "learning_rate_D", ",", "i_iter", ",", "args", ".", "num_steps", ",", "args", ".", "power", ")", "\n", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "lr", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "lr", "*", "10", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.amp_backward": [[187, 193], ["loss.backward", "amp.scale_loss", "scaled_loss.backward"], "function", ["None"], ["", "", "def", "amp_backward", "(", "loss", ",", "optimizer", ",", "retain_graph", "=", "False", ")", ":", "\n", "    ", "if", "APEX_AVAILABLE", ":", "\n", "        ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "            ", "scaled_loss", ".", "backward", "(", "retain_graph", "=", "retain_graph", ")", "\n", "", "", "else", ":", "\n", "        ", "loss", ".", "backward", "(", "retain_graph", "=", "retain_graph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.seg_label": [[194, 209], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.cpu().numpy().astype", "skimage.measure.label", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "numpy.zeros", "range", "segs.append", "segs.append", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "mask.cpu().numpy", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "mask.long", "numpy.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.cpu"], "function", ["None"], ["", "", "def", "seg_label", "(", "label", ")", ":", "\n", "    ", "segs", "=", "[", "]", "\n", "for", "fg", "in", "FG_LABEL", ":", "\n", "        ", "mask", "=", "label", "==", "fg", "\n", "if", "torch", ".", "sum", "(", "mask", ")", ">", "0", ":", "\n", "            ", "masknp", "=", "mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "seg", ",", "forenum", "=", "sklabel", "(", "masknp", ",", "background", "=", "0", ",", "return_num", "=", "True", ",", "connectivity", "=", "2", ")", "\n", "seg", "=", "torch", ".", "LongTensor", "(", "seg", ")", ".", "cuda", "(", ")", "\n", "pixelnum", "=", "np", ".", "zeros", "(", "forenum", ",", "dtype", "=", "int", ")", "\n", "for", "i", "in", "range", "(", "forenum", ")", ":", "\n", "                ", "pixelnum", "[", "i", "]", "=", "torch", ".", "sum", "(", "seg", "==", "(", "i", "+", "1", ")", ")", ".", "item", "(", ")", "\n", "", "segs", ".", "append", "(", "[", "seg", ",", "pixelnum", "]", ")", "\n", "", "else", ":", "\n", "            ", "segs", ".", "append", "(", "[", "mask", ".", "long", "(", ")", ",", "np", ".", "zeros", "(", "0", ")", "]", ")", "\n", "", "", "return", "segs", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.main": [[212, 548], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "map", "map", "model.discriminator.FCDiscriminator().to", "model.deeplab_multi.DeeplabMultiFeature.train", "model.deeplab_multi.DeeplabMultiFeature.to", "FCDiscriminator().to.train", "FCDiscriminator().to.to", "torch.utils.data.DataLoader", "enumerate", "torch.utils.data.DataLoader", "enumerate", "torch.SGD", "optim.SGD.zero_grad", "torch.Adam", "optim.Adam.zero_grad", "amp.initialize", "amp.initialize", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.Upsample", "torch.Upsample", "torch.Upsample", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "numpy.zeros", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "numpy.zeros", "range", "args.input_size.split", "args.input_size_target.split", "model.deeplab_multi.DeeplabMultiFeature", "model_weights_path.split", "FCDiscriminator().to.load_state_dict", "model_weights_path.split", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "dataset.gta5_dataset.GTA5DataSet", "dataset.cityscapes_dataset.cityscapesDataSet", "model.deeplab_multi.DeeplabMultiFeature.optim_parameters", "FCDiscriminator().to.parameters", "len", "len", "tensorboardX.SummaryWriter", "optim.SGD.zero_grad", "train_sim_ssl.adjust_learning_rate", "optim.Adam.zero_grad", "train_sim_ssl.adjust_learning_rate_D", "range", "optim.SGD.step", "optim.Adam.step", "print", "print", "tensorboardX.SummaryWriter.close", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.deeplab_multi.DeeplabMultiFeature.load_state_dict", "model.deeplab_multi.DeeplabMultiFeature.state_dict().copy", "model.deeplab_multi.DeeplabMultiFeature.load_state_dict", "model.discriminator.FCDiscriminator", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "int", "args.data_dir.split", "dataset.synthia_dataset.synthiaDataSet", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "FCDiscriminator().to.parameters", "enumerate.__next__", "images.to.to", "labels.long().to.long().to", "model.deeplab_multi.DeeplabMultiFeature.", "torch.softmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.interpolate().squeeze().long", "range", "train_sim_ssl.seg_label", "range", "nn.Upsample.", "torch.nn.CrossEntropyLoss.", "train_sim_ssl.amp_backward", "enumerate.__next__", "images.to.to", "trg_labels.long().to.long().to", "model.deeplab_multi.DeeplabMultiFeature.", "torch.softmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "nn.Upsample.", "FCDiscriminator().to.", "torch.nn.BCEWithLogitsLoss.", "nn.Upsample.", "torch.nn.CrossEntropyLoss.", "train_sim_ssl.amp_backward", "FCDiscriminator().to.parameters", "pred.detach.detach", "FCDiscriminator().to.", "torch.nn.BCEWithLogitsLoss.", "train_sim_ssl.amp_backward", "bce_loss.item", "pred_target.detach.detach", "FCDiscriminator().to.", "torch.nn.BCEWithLogitsLoss.", "train_sim_ssl.amp_backward", "bce_loss.item", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.utils.data.DataLoader", "model.deeplab_multi.DeeplabMultiFeature.eval", "enumerate", "compute_iou.compute_mIoU", "round", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.deeplab_multi.DeeplabMultiFeature.train", "torch.load.keys", "i.split", "args.data_dir.split", "len", "utils.functions.global_avg_pool", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "F.interpolate().squeeze().long.squeeze", "len", "range", "seg_loss.item", "range", "train_sim_ssl.seg_label", "range", "torch.softmax", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "bce_loss.item", "torch.softmax", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.softmax", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "torch.FloatTensor().fill_().to", "scalar_info.items", "seg_loss.item", "torch.zeros().to.item", "torch.zeros().to.item", "model.deeplab_multi.DeeplabMultiFeature.state_dict", "os.join", "FCDiscriminator().to.state_dict", "os.join", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "dataset.cityscapes_dataset.cityscapesDataSet", "nn.Upsample.cpu().data[].numpy", "Image.fromarray.transpose", "numpy.asarray", "PIL.fromarray", "Image.fromarray.save", "os.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.deeplab_multi.DeeplabMultiFeature.state_dict", "os.join", "FCDiscriminator().to.state_dict", "os.join", "[].split", "torch.load.pop", "model.deeplab_multi.DeeplabMultiFeature.state_dict", "model_weights_path.split.split", "len", "len", "labels.long().to.long", "torch.interpolate().squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.float", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "len", "numpy.argsort", "min", "utils.functions.global_avg_pool", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "torch.squeeze().clone().detach", "trg_labels.long().to.long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "utils.functions.global_avg_pool", "feature.squeeze().expand.squeeze().expand", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.argmax.squeeze", "len", "range", "tensorboardX.SummaryWriter.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.deeplab_multi.DeeplabMultiFeature.", "numpy.argmax", "name[].split", "numpy.nanmean", "model.deeplab_multi.DeeplabMultiFeature.state_dict", "os.join", "FCDiscriminator().to.state_dict", "os.join", "torch.squeeze().clone", "torch.squeeze().clone", "torch.squeeze().clone", "torch.squeeze().clone", "torch.squeeze().clone", "len", "mask.float", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "mask.float", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "torch.argmax().item", "len", "numpy.argsort", "min", "utils.functions.global_avg_pool", "feature.squeeze().expand.squeeze().expand", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.FloatTensor().fill_", "torch.autograd.Variable().to", "torch.interpolate", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "int", "torch.squeeze().clone", "torch.squeeze().clone", "torch.squeeze().clone", "torch.squeeze().clone", "torch.squeeze().clone", "feature.squeeze().expand.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "len", "mask.float", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "min", "str", "str", "str", "str", "list", "labels.long().to.unsqueeze().float", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "int", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.nn.L1Loss.", "feature.squeeze().expand.squeeze", "len", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.autograd.Variable", "nn.Upsample.cpu", "torch.load.keys", "key.split", "torch.argmax.size", "torch.argmax.size", "model.deeplab_multi.DeeplabMultiFeature.layer6().float", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model_D.data.size", "model_D.data.size", "model_D.data.size", "labels.long().to.unsqueeze", "model.deeplab_multi.DeeplabMultiFeature.layer6().float", "model.deeplab_multi.DeeplabMultiFeature.layer6().float", "torch.nn.L1Loss.", "nn.Upsample.", "model.deeplab_multi.DeeplabMultiFeature.layer6", "feature.squeeze().expand.half", "model.deeplab_multi.DeeplabMultiFeature.layer6", "model.deeplab_multi.DeeplabMultiFeature.layer6", "feature.squeeze().expand.half", "feature.squeeze().expand.half"], "function", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.DeeplabMultiFeature", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_vgg.DeeplabVGG.optim_parameters", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.adjust_learning_rate", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.adjust_learning_rate_D", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.seg_label", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.amp_backward", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.amp_backward", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.amp_backward", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.amp_backward", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.compute_iou.compute_mIoU", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.utils.functions.global_avg_pool", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.train_sim_ssl.seg_label", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.utils.functions.global_avg_pool", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.utils.functions.global_avg_pool", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.utils.functions.global_avg_pool"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the training.\"\"\"", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "not", "args", ".", "cpu", "else", "\"cpu\"", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "cudnn", ".", "enabled", "=", "True", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size", ".", "split", "(", "','", ")", ")", "\n", "input_size", "=", "(", "w", ",", "h", ")", "\n", "\n", "w", ",", "h", "=", "map", "(", "int", ",", "args", ".", "input_size_target", ".", "split", "(", "','", ")", ")", "\n", "input_size_target", "=", "(", "w", ",", "h", ")", "\n", "\n", "Iter", "=", "0", "\n", "bestIoU", "=", "0", "\n", "\n", "# Create network", "\n", "# init G", "\n", "if", "args", ".", "model", "==", "'DeepLab'", ":", "\n", "        ", "model", "=", "DeeplabMultiFeature", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "            ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "            ", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "", "if", "args", ".", "continue_train", ":", "\n", "            ", "if", "list", "(", "saved_state_dict", ".", "keys", "(", ")", ")", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "==", "'module'", ":", "\n", "                ", "for", "key", "in", "saved_state_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "saved_state_dict", "[", "'.'", ".", "join", "(", "key", ".", "split", "(", "'.'", ")", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", ".", "pop", "(", "key", ")", "\n", "", "", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "", "else", ":", "\n", "            ", "new_params", "=", "model", ".", "state_dict", "(", ")", ".", "copy", "(", ")", "\n", "for", "i", "in", "saved_state_dict", ":", "\n", "                ", "i_parts", "=", "i", ".", "split", "(", "'.'", ")", "\n", "if", "not", "args", ".", "num_classes", "==", "19", "or", "not", "i_parts", "[", "1", "]", "==", "'layer5'", ":", "\n", "                    ", "new_params", "[", "'.'", ".", "join", "(", "i_parts", "[", "1", ":", "]", ")", "]", "=", "saved_state_dict", "[", "i", "]", "\n", "", "", "model", ".", "load_state_dict", "(", "new_params", ")", "\n", "\n", "# init D", "\n", "", "", "model_D", "=", "FCDiscriminator", "(", "num_classes", "=", "args", ".", "num_classes", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "continue_train", ":", "\n", "        ", "model_weights_path", "=", "args", ".", "restore_from", "\n", "temp", "=", "model_weights_path", ".", "split", "(", "'.'", ")", "\n", "temp", "[", "-", "2", "]", "=", "temp", "[", "-", "2", "]", "+", "'_D'", "\n", "model_D_weights_path", "=", "'.'", ".", "join", "(", "temp", ")", "\n", "model_D", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_D_weights_path", ")", ")", "\n", "temp", "=", "model_weights_path", ".", "split", "(", "'.'", ")", "\n", "temp", "=", "temp", "[", "-", "2", "]", "[", "-", "9", ":", "]", "\n", "Iter", "=", "int", "(", "temp", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "+", "1", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "model_D", ".", "train", "(", ")", "\n", "model_D", ".", "to", "(", "device", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "snapshot_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "snapshot_dir", ")", "\n", "\n", "# init data loader", "\n", "", "if", "args", ".", "data_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "==", "'gta5_deeplab'", ":", "\n", "        ", "trainset", "=", "GTA5DataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "crop_size", "=", "input_size", ",", "\n", "scale", "=", "args", ".", "random_scale", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ")", "\n", "", "elif", "args", ".", "data_dir", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "==", "'syn_deeplab'", ":", "\n", "        ", "trainset", "=", "synthiaDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "crop_size", "=", "input_size", ",", "\n", "scale", "=", "args", ".", "random_scale", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ")", "\n", "\n", "", "trainloader", "=", "data", ".", "DataLoader", "(", "trainset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ")", "\n", "trainloader_iter", "=", "enumerate", "(", "trainloader", ")", "\n", "\n", "targetloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir_target", ",", "args", ".", "data_list_target", ",", "\n", "max_iters", "=", "args", ".", "num_steps", "*", "args", ".", "iter_size", "*", "args", ".", "batch_size", ",", "\n", "crop_size", "=", "input_size_target", ",", "\n", "scale", "=", "False", ",", "mirror", "=", "args", ".", "random_mirror", ",", "mean", "=", "IMG_MEAN", ",", "\n", "set", "=", "args", ".", "set", ",", "ssl_dir", "=", "args", ".", "ssl_target_dir", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "True", ")", "\n", "targetloader_iter", "=", "enumerate", "(", "targetloader", ")", "\n", "\n", "# init optimizer", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "optim_parameters", "(", "args", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "optimizer_D", "=", "optim", ".", "Adam", "(", "model_D", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate_D", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ")", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "\n", "model", ",", "optimizer", ",", "opt_level", "=", "\"O2\"", ",", "\n", "keep_batchnorm_fp32", "=", "True", ",", "loss_scale", "=", "\"dynamic\"", "\n", ")", "\n", "\n", "model_D", ",", "optimizer_D", "=", "amp", ".", "initialize", "(", "\n", "model_D", ",", "optimizer_D", ",", "opt_level", "=", "\"O2\"", ",", "\n", "keep_batchnorm_fp32", "=", "True", ",", "loss_scale", "=", "\"dynamic\"", "\n", ")", "\n", "\n", "# init loss", "\n", "bce_loss", "=", "torch", ".", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "seg_loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "255", ")", "\n", "L1_loss", "=", "torch", ".", "nn", ".", "L1Loss", "(", "reduction", "=", "'none'", ")", "\n", "\n", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size", "[", "1", "]", ",", "input_size", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "interp_target", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "input_size_target", "[", "1", "]", ",", "input_size_target", "[", "0", "]", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "test_interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "# labels for adversarial training", "\n", "source_label", "=", "0", "\n", "target_label", "=", "1", "\n", "\n", "# init prototype", "\n", "num_prototype", "=", "args", ".", "num_prototype", "\n", "num_ins", "=", "args", ".", "num_prototype", "*", "10", "\n", "src_cls_features", "=", "torch", ".", "zeros", "(", "[", "len", "(", "BG_LABEL", ")", ",", "num_prototype", ",", "2048", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "src_cls_ptr", "=", "np", ".", "zeros", "(", "len", "(", "BG_LABEL", ")", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "src_ins_features", "=", "torch", ".", "zeros", "(", "[", "len", "(", "FG_LABEL", ")", ",", "num_ins", ",", "2048", "]", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "src_ins_ptr", "=", "np", ".", "zeros", "(", "len", "(", "FG_LABEL", ")", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "\n", "\n", "# set up tensor board", "\n", "if", "args", ".", "tensorboard", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "log_dir", ")", "\n", "", "writer", "=", "SummaryWriter", "(", "args", ".", "log_dir", ")", "\n", "\n", "# start training", "\n", "", "for", "i_iter", "in", "range", "(", "Iter", ",", "args", ".", "num_steps", ")", ":", "\n", "\n", "        ", "loss_seg_value", "=", "0", "\n", "loss_adv_target_value", "=", "0", "\n", "loss_D_value", "=", "0", "\n", "loss_cls_value", "=", "0", "\n", "loss_ins_value", "=", "0", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate", "(", "optimizer", ",", "i_iter", ")", "\n", "\n", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "adjust_learning_rate_D", "(", "optimizer_D", ",", "i_iter", ")", "\n", "\n", "for", "sub_i", "in", "range", "(", "args", ".", "iter_size", ")", ":", "\n", "\n", "# train G", "\n", "\n", "# don't accumulate grads in D", "\n", "\n", "            ", "for", "param", "in", "model_D", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "# train with source", "\n", "\n", "", "_", ",", "batch", "=", "trainloader_iter", ".", "__next__", "(", ")", "\n", "\n", "images", ",", "labels", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "src_feature", ",", "pred", "=", "model", "(", "images", ")", "\n", "pred_softmax", "=", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", "\n", "pred_idx", "=", "torch", ".", "argmax", "(", "pred_softmax", ",", "dim", "=", "1", ")", "\n", "\n", "right_label", "=", "F", ".", "interpolate", "(", "labels", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "(", "pred_idx", ".", "size", "(", "1", ")", ",", "pred_idx", ".", "size", "(", "2", ")", ")", ",", "mode", "=", "'nearest'", ")", ".", "squeeze", "(", "0", ")", ".", "long", "(", ")", "\n", "right_label", "[", "right_label", "!=", "pred_idx", "]", "=", "255", "\n", "\n", "for", "ii", "in", "range", "(", "len", "(", "BG_LABEL", ")", ")", ":", "\n", "                ", "cls_idx", "=", "BG_LABEL", "[", "ii", "]", "\n", "mask", "=", "right_label", "==", "cls_idx", "\n", "if", "torch", ".", "sum", "(", "mask", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "feature", "=", "global_avg_pool", "(", "src_feature", ",", "mask", ".", "float", "(", ")", ")", "\n", "if", "cls_idx", "!=", "torch", ".", "argmax", "(", "torch", ".", "squeeze", "(", "model", ".", "layer6", "(", "feature", ".", "half", "(", ")", ")", ".", "float", "(", ")", ")", ")", ".", "item", "(", ")", ":", "\n", "                    ", "continue", "\n", "", "src_cls_features", "[", "ii", ",", "int", "(", "src_cls_ptr", "[", "ii", "]", "%", "num_prototype", ")", ",", ":", "]", "=", "torch", ".", "squeeze", "(", "feature", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "src_cls_ptr", "[", "ii", "]", "+=", "1", "\n", "\n", "", "seg_ins", "=", "seg_label", "(", "right_label", ".", "squeeze", "(", ")", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "FG_LABEL", ")", ")", ":", "\n", "                ", "cls_idx", "=", "FG_LABEL", "[", "ii", "]", "\n", "segmask", ",", "pixelnum", "=", "seg_ins", "[", "ii", "]", "\n", "if", "len", "(", "pixelnum", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "sortmax", "=", "np", ".", "argsort", "(", "pixelnum", ")", "[", ":", ":", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "min", "(", "10", ",", "len", "(", "sortmax", ")", ")", ")", ":", "\n", "                    ", "mask", "=", "segmask", "==", "(", "sortmax", "[", "i", "]", "+", "1", ")", "\n", "feature", "=", "global_avg_pool", "(", "src_feature", ",", "mask", ".", "float", "(", ")", ")", "\n", "if", "cls_idx", "!=", "torch", ".", "argmax", "(", "torch", ".", "squeeze", "(", "model", ".", "layer6", "(", "feature", ".", "half", "(", ")", ")", ".", "float", "(", ")", ")", ")", ".", "item", "(", ")", ":", "\n", "                        ", "continue", "\n", "", "src_ins_features", "[", "ii", ",", "int", "(", "src_ins_ptr", "[", "ii", "]", "%", "num_ins", ")", ",", ":", "]", "=", "torch", ".", "squeeze", "(", "feature", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "src_ins_ptr", "[", "ii", "]", "+=", "1", "\n", "\n", "", "", "pred", "=", "interp", "(", "pred", ")", "\n", "loss_seg", "=", "seg_loss", "(", "pred", ",", "labels", ")", "\n", "loss", "=", "loss_seg", "\n", "\n", "# proper normalization", "\n", "loss", "=", "loss", "/", "args", ".", "iter_size", "\n", "amp_backward", "(", "loss", ",", "optimizer", ")", "\n", "loss_seg_value", "+=", "loss_seg", ".", "item", "(", ")", "/", "args", ".", "iter_size", "\n", "\n", "# train with target", "\n", "\n", "_", ",", "batch", "=", "targetloader_iter", ".", "__next__", "(", ")", "\n", "images", ",", "trg_labels", ",", "_", ",", "_", "=", "batch", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "trg_labels", "=", "trg_labels", ".", "long", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "trg_feature", ",", "pred_target", "=", "model", "(", "images", ")", "\n", "\n", "pred_target_softmax", "=", "F", ".", "softmax", "(", "pred_target", ",", "dim", "=", "1", ")", "\n", "pred_target_idx", "=", "torch", ".", "argmax", "(", "pred_target_softmax", ",", "dim", "=", "1", ")", "\n", "\n", "loss_cls", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "loss_ins", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "device", ")", "\n", "if", "i_iter", ">", "0", ":", "\n", "                ", "for", "ii", "in", "range", "(", "len", "(", "BG_LABEL", ")", ")", ":", "\n", "                    ", "cls_idx", "=", "BG_LABEL", "[", "ii", "]", "\n", "if", "src_cls_ptr", "[", "ii", "]", "/", "num_prototype", "<=", "1", ":", "\n", "                        ", "continue", "\n", "", "mask", "=", "pred_target_idx", "==", "cls_idx", "\n", "feature", "=", "global_avg_pool", "(", "trg_feature", ",", "mask", ".", "float", "(", ")", ")", "\n", "if", "cls_idx", "!=", "torch", ".", "argmax", "(", "torch", ".", "squeeze", "(", "model", ".", "layer6", "(", "feature", ".", "half", "(", ")", ")", ".", "float", "(", ")", ")", ")", ".", "item", "(", ")", ":", "\n", "                        ", "continue", "\n", "", "ext_feature", "=", "feature", ".", "squeeze", "(", ")", ".", "expand", "(", "num_prototype", ",", "2048", ")", "\n", "loss_cls", "+=", "torch", ".", "min", "(", "torch", ".", "sum", "(", "L1_loss", "(", "ext_feature", ",", "src_cls_features", "[", "ii", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "/", "2048.", ")", "\n", "\n", "", "seg_ins", "=", "seg_label", "(", "pred_target_idx", ".", "squeeze", "(", ")", ")", "\n", "for", "ii", "in", "range", "(", "len", "(", "FG_LABEL", ")", ")", ":", "\n", "                    ", "cls_idx", "=", "FG_LABEL", "[", "ii", "]", "\n", "if", "src_ins_ptr", "[", "ii", "]", "/", "num_ins", "<=", "1", ":", "\n", "                        ", "continue", "\n", "", "segmask", ",", "pixelnum", "=", "seg_ins", "[", "ii", "]", "\n", "if", "len", "(", "pixelnum", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "sortmax", "=", "np", ".", "argsort", "(", "pixelnum", ")", "[", ":", ":", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "min", "(", "10", ",", "len", "(", "sortmax", ")", ")", ")", ":", "\n", "                        ", "mask", "=", "segmask", "==", "(", "sortmax", "[", "i", "]", "+", "1", ")", "\n", "feature", "=", "global_avg_pool", "(", "trg_feature", ",", "mask", ".", "float", "(", ")", ")", "\n", "feature", "=", "feature", ".", "squeeze", "(", ")", ".", "expand", "(", "num_ins", ",", "2048", ")", "\n", "loss_ins", "+=", "torch", ".", "min", "(", "torch", ".", "sum", "(", "L1_loss", "(", "feature", ",", "src_ins_features", "[", "ii", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", "/", "2048.", ")", "/", "min", "(", "10", ",", "len", "(", "sortmax", ")", ")", "\n", "\n", "", "", "", "pred_target", "=", "interp_target", "(", "pred_target", ")", "\n", "\n", "D_out", "=", "model_D", "(", "F", ".", "softmax", "(", "pred_target", ",", "dim", "=", "1", ")", ")", "\n", "loss_adv_target", "=", "bce_loss", "(", "D_out", ",", "torch", ".", "FloatTensor", "(", "D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", ".", "to", "(", "device", ")", ")", "\n", "\n", "pred_target", "=", "interp_target", "(", "pred_target", ")", "\n", "loss_seg_trg", "=", "seg_loss", "(", "pred_target", ",", "trg_labels", ")", "\n", "\n", "loss", "=", "loss_seg_trg", "+", "args", ".", "lambda_adv_target", "*", "loss_adv_target", "+", "args", ".", "lambda_adv_cls", "*", "loss_cls", "+", "args", ".", "lambda_adv_ins", "*", "loss_ins", "\n", "loss", "=", "loss", "/", "args", ".", "iter_size", "\n", "amp_backward", "(", "loss", ",", "optimizer", ")", "\n", "loss_adv_target_value", "+=", "loss_adv_target", ".", "item", "(", ")", "/", "args", ".", "iter_size", "\n", "\n", "# train D", "\n", "\n", "# bring back requires_grad", "\n", "\n", "for", "param", "in", "model_D", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "True", "\n", "\n", "# train with source", "\n", "", "pred", "=", "pred", ".", "detach", "(", ")", "\n", "D_out", "=", "model_D", "(", "F", ".", "softmax", "(", "pred", ",", "dim", "=", "1", ")", ")", "\n", "\n", "loss_D", "=", "bce_loss", "(", "D_out", ",", "torch", ".", "FloatTensor", "(", "D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "source_label", ")", ".", "to", "(", "device", ")", ")", "\n", "loss_D", "=", "loss_D", "/", "args", ".", "iter_size", "/", "2", "\n", "amp_backward", "(", "loss_D", ",", "optimizer_D", ")", "\n", "loss_D_value", "+=", "loss_D", ".", "item", "(", ")", "\n", "\n", "# train with target", "\n", "pred_target", "=", "pred_target", ".", "detach", "(", ")", "\n", "D_out", "=", "model_D", "(", "F", ".", "softmax", "(", "pred_target", ",", "dim", "=", "1", ")", ")", "\n", "\n", "loss_D", "=", "bce_loss", "(", "D_out", ",", "torch", ".", "FloatTensor", "(", "D_out", ".", "data", ".", "size", "(", ")", ")", ".", "fill_", "(", "target_label", ")", ".", "to", "(", "device", ")", ")", "\n", "loss_D", "=", "loss_D", "/", "args", ".", "iter_size", "/", "2", "\n", "amp_backward", "(", "loss_D", ",", "optimizer_D", ")", "\n", "loss_D_value", "+=", "loss_D", ".", "item", "(", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer_D", ".", "step", "(", ")", "\n", "\n", "if", "args", ".", "tensorboard", ":", "\n", "            ", "scalar_info", "=", "{", "\n", "'loss_seg'", ":", "loss_seg_value", ",", "\n", "'loss_adv_target'", ":", "loss_adv_target_value", ",", "\n", "'loss_D'", ":", "loss_D_value", ",", "\n", "}", "\n", "\n", "if", "i_iter", "%", "10", "==", "0", ":", "\n", "                ", "for", "key", ",", "val", "in", "scalar_info", ".", "items", "(", ")", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "key", ",", "val", ",", "i_iter", ")", "\n", "\n", "", "", "", "print", "(", "'exp = {}'", ".", "format", "(", "args", ".", "snapshot_dir", ")", ")", "\n", "print", "(", "\n", "'iter = {0:8d}/{1:8d}, loss_seg = {2:.3f}, loss_seg_trg = {3:.3f}, loss_adv = {4:.3f} loss_D = {5:.3f} loss_cls = {6:.3f} loss_ins = {7:.3f}'", ".", "format", "(", "\n", "i_iter", ",", "args", ".", "num_steps", ",", "loss_seg_value", ",", "loss_seg_trg", ".", "item", "(", ")", ",", "loss_adv_target_value", ",", "loss_D_value", ",", "loss_cls", ".", "item", "(", ")", ",", "loss_ins", ".", "item", "(", ")", ")", ")", "\n", "\n", "if", "i_iter", ">=", "args", ".", "num_steps_stop", "-", "1", ":", "\n", "            ", "print", "(", "'save model ...'", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps_stop", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "model_D", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "args", ".", "num_steps_stop", ")", "+", "'_D.pth'", ")", ")", "\n", "break", "\n", "\n", "", "if", "i_iter", "%", "args", ".", "save_pred_every", "==", "0", "and", "i_iter", "!=", "0", ":", "\n", "            ", "print", "(", "'taking snapshot ...'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "args", ".", "save", ")", "\n", "", "testloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir_target", ",", "args", ".", "data_list_target_test", ",", "\n", "crop_size", "=", "(", "1024", ",", "512", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "'val'", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "for", "index", ",", "batch", "in", "enumerate", "(", "testloader", ")", ":", "\n", "                ", "image", ",", "_", ",", "name", "=", "batch", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "output1", ",", "output2", "=", "model", "(", "Variable", "(", "image", ")", ".", "to", "(", "device", ")", ")", "\n", "", "output", "=", "test_interp", "(", "output2", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "output", "=", "Image", ".", "fromarray", "(", "output", ")", "\n", "name", "=", "name", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "output", ".", "save", "(", "'%s/%s'", "%", "(", "args", ".", "save", ",", "name", ")", ")", "\n", "", "mIoUs", "=", "compute_mIoU", "(", "osp", ".", "join", "(", "args", ".", "data_dir_target", ",", "'gtFine/val'", ")", ",", "args", ".", "save", ",", "'dataset/cityscapes_list'", ")", "\n", "mIoU", "=", "round", "(", "np", ".", "nanmean", "(", "mIoUs", ")", "*", "100", ",", "2", ")", "\n", "if", "mIoU", ">", "bestIoU", ":", "\n", "                ", "bestIoU", "=", "mIoU", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'BestGTA5.pth'", ")", ")", "\n", "torch", ".", "save", "(", "model_D", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'BestGTA5_D.pth'", ")", ")", "\n", "", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'.pth'", ")", ")", "\n", "torch", ".", "save", "(", "model_D", ".", "state_dict", "(", ")", ",", "osp", ".", "join", "(", "args", ".", "snapshot_dir", ",", "'GTA5_'", "+", "str", "(", "i_iter", ")", "+", "'_D.pth'", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "", "", "if", "args", ".", "tensorboard", ":", "\n", "        ", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.evaluate_cityscapes.colorize_mask": [[47, 53], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.evaluate_cityscapes.get_arguments": [[54, 80], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "\"\"\"Parse all the arguments provided from the CLI.\n\n    Returns:\n      A list of parsed arguments.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeepLab-ResNet Network\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "MODEL", ",", "\n", "help", "=", "\"Model Choice (DeeplabMulti/DeeplabVGG/Oracle).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-dir\"", ",", "type", "=", "str", ",", "default", "=", "DATA_DIRECTORY", ",", "\n", "help", "=", "\"Path to the directory containing the Cityscapes dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data-list\"", ",", "type", "=", "str", ",", "default", "=", "DATA_LIST_PATH", ",", "\n", "help", "=", "\"Path to the file listing the images in the dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore-label\"", ",", "type", "=", "int", ",", "default", "=", "IGNORE_LABEL", ",", "\n", "help", "=", "\"The index of the label to ignore during the training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "NUM_CLASSES", ",", "\n", "help", "=", "\"Number of classes to predict (including background).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--restore-from\"", ",", "type", "=", "str", ",", "default", "=", "RESTORE_FROM", ",", "\n", "help", "=", "\"Where restore model parameters from.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"choose gpu device.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--set\"", ",", "type", "=", "str", ",", "default", "=", "SET", ",", "\n", "help", "=", "\"choose evaluation set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "type", "=", "str", ",", "default", "=", "SAVE_PATH", ",", "\n", "help", "=", "\"Path to save result.\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.evaluate_cityscapes.main": [[82, 142], ["evaluate_cityscapes.get_arguments", "model.deeplab_vgg.DeeplabVGG.load_state_dict", "model.deeplab_vgg.DeeplabVGG.eval", "model.deeplab_vgg.DeeplabVGG.cuda", "torch.utils.data.DataLoader", "enumerate", "os.path.exists", "os.makedirs", "model.deeplab_multi.DeeplabMulti", "torch.utils.model_zoo.load_url", "torch.load", "torch.load", "torch.load", "dataset.cityscapes_dataset.cityscapesDataSet", "packaging.version.parse", "packaging.version.parse", "torch.Upsample", "torch.Upsample", "interp().cpu().data[].numpy.transpose", "numpy.asarray", "evaluate_cityscapes.colorize_mask", "PIL.Image.fromarray", "interp().cpu().data[].numpy.save", "colorize_mask.save", "model.deeplab.Res_Deeplab", "print", "nn.Upsample.cpu().data[].numpy", "numpy.argmax", "name[].split", "model.deeplab_vgg.DeeplabVGG", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.deeplab_vgg.DeeplabVGG.", "model.deeplab_vgg.DeeplabVGG.", "nn.Upsample.cpu().data[].numpy", "torch.autograd.Variable().cuda", "torch.autograd.Variable().cuda", "name.split", "torch.autograd.Variable", "nn.Upsample.cpu", "torch.autograd.Variable", "nn.Upsample.cpu", "nn.Upsample.", "nn.Upsample."], "function", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.None.evaluate_cityscapes.get_arguments", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.DeeplabMulti", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.anchor_label.colorize_mask", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.Res_Deeplab"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"Create the model and start the evaluation process.\"\"\"", "\n", "\n", "args", "=", "get_arguments", "(", ")", "\n", "\n", "gpu0", "=", "args", ".", "gpu", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save", ")", "\n", "\n", "", "if", "args", ".", "model", "==", "'DeeplabMulti'", ":", "\n", "        ", "model", "=", "DeeplabMulti", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "", "elif", "args", ".", "model", "==", "'Oracle'", ":", "\n", "        ", "model", "=", "Res_Deeplab", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "==", "RESTORE_FROM", ":", "\n", "            ", "args", ".", "restore_from", "=", "RESTORE_FROM_ORC", "\n", "", "", "elif", "args", ".", "model", "==", "'DeeplabVGG'", ":", "\n", "        ", "model", "=", "DeeplabVGG", "(", "num_classes", "=", "args", ".", "num_classes", ")", "\n", "if", "args", ".", "restore_from", "==", "RESTORE_FROM", ":", "\n", "            ", "args", ".", "restore_from", "=", "RESTORE_FROM_VGG", "\n", "\n", "", "", "if", "args", ".", "restore_from", "[", ":", "4", "]", "==", "'http'", ":", "\n", "        ", "saved_state_dict", "=", "model_zoo", ".", "load_url", "(", "args", ".", "restore_from", ")", "\n", "", "else", ":", "\n", "        ", "saved_state_dict", "=", "torch", ".", "load", "(", "args", ".", "restore_from", ")", "\n", "", "model", ".", "load_state_dict", "(", "saved_state_dict", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "cuda", "(", "gpu0", ")", "\n", "\n", "testloader", "=", "data", ".", "DataLoader", "(", "cityscapesDataSet", "(", "args", ".", "data_dir", ",", "args", ".", "data_list", ",", "crop_size", "=", "(", "1024", ",", "512", ")", ",", "mean", "=", "IMG_MEAN", ",", "scale", "=", "False", ",", "mirror", "=", "False", ",", "set", "=", "args", ".", "set", ")", ",", "\n", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "\n", "\n", "if", "version", ".", "parse", "(", "torch", ".", "__version__", ")", ">=", "version", ".", "parse", "(", "'0.4.0'", ")", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "interp", "=", "nn", ".", "Upsample", "(", "size", "=", "(", "1024", ",", "2048", ")", ",", "mode", "=", "'bilinear'", ")", "\n", "\n", "", "for", "index", ",", "batch", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "if", "index", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'%d processd'", "%", "index", ")", "\n", "", "image", ",", "_", ",", "name", "=", "batch", "\n", "if", "args", ".", "model", "==", "'DeeplabMulti'", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output1", ",", "output2", "=", "model", "(", "Variable", "(", "image", ")", ".", "cuda", "(", "gpu0", ")", ")", "\n", "", "output", "=", "interp", "(", "output2", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "", "elif", "args", ".", "model", "==", "'DeeplabVGG'", "or", "args", ".", "model", "==", "'Oracle'", ":", "\n", "            ", "output", "=", "model", "(", "Variable", "(", "image", ",", "volatile", "=", "True", ")", ".", "cuda", "(", "gpu0", ")", ")", "\n", "output", "=", "interp", "(", "output", ")", ".", "cpu", "(", ")", ".", "data", "[", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "", "output", "=", "output", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "output", "=", "np", ".", "asarray", "(", "np", ".", "argmax", "(", "output", ",", "axis", "=", "2", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "output_col", "=", "colorize_mask", "(", "output", ")", "\n", "output", "=", "Image", ".", "fromarray", "(", "output", ")", "\n", "\n", "name", "=", "name", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "output", ".", "save", "(", "'%s/%s'", "%", "(", "args", ".", "save", ",", "name", ")", ")", "\n", "output_col", ".", "save", "(", "'%s/%s_color.png'", "%", "(", "args", ".", "save", ",", "name", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.utils.loss.CrossEntropy2d.__init__": [[9, 13], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_average", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "super", "(", "CrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.utils.loss.CrossEntropy2d.forward": [[14, 37], ["predict[].view.size", "predict[].view.transpose().transpose().contiguous", "predict[].view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "predict[].view.dim", "target.dim", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "target.data.dim", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predict[].view.transpose().transpose", "predict[].view.transpose", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                predict:(n, c, h, w)\n                target:(n, h, w)\n                weight (Tensor, optional): a manual rescaling weight given to each class.\n                                           If given, has to be a Tensor of size \"nclasses\"\n        \"\"\"", "\n", "assert", "not", "target", ".", "requires_grad", "\n", "assert", "predict", ".", "dim", "(", ")", "==", "4", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "\n", "assert", "predict", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "assert", "predict", ".", "size", "(", "2", ")", "==", "target", ".", "size", "(", "1", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "2", ")", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "assert", "predict", ".", "size", "(", "3", ")", "==", "target", ".", "size", "(", "2", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "3", ")", ",", "target", ".", "size", "(", "3", ")", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "size", "(", ")", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "if", "not", "target", ".", "data", ".", "dim", "(", ")", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "predict", "=", "predict", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "predict", "=", "predict", "[", "target_mask", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "weight", "=", "weight", ",", "size_average", "=", "self", ".", "size_average", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.utils.functions.global_avg_pool": [[7, 15], ["weight.detach().clone", "torch.sum", "torch.sum", "torch.sum", "weight_new.expand.view", "weight_new.expand.expand", "max", "torch.sum", "torch.sum", "torch.sum", "weight.detach"], "function", ["None"], ["def", "global_avg_pool", "(", "inputs", ",", "weight", ")", ":", "\n", "    ", "b", ",", "c", ",", "h", ",", "w", "=", "inputs", ".", "shape", "[", "-", "4", "]", ",", "inputs", ".", "shape", "[", "-", "3", "]", ",", "inputs", ".", "shape", "[", "-", "2", "]", ",", "inputs", ".", "shape", "[", "-", "1", "]", "\n", "weight_new", "=", "weight", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "weight_sum", "=", "torch", ".", "sum", "(", "weight_new", ")", "\n", "weight_new", "=", "weight_new", ".", "view", "(", "h", ",", "w", ")", "\n", "weight_new", "=", "weight_new", ".", "expand", "(", "b", ",", "c", ",", "h", ",", "w", ")", "\n", "weight_sum", "=", "max", "(", "weight_sum", ",", "1e-12", ")", "\n", "return", "torch", ".", "sum", "(", "inputs", "*", "weight_new", ",", "dim", "=", "(", "-", "1", ",", "-", "2", ")", ",", "keepdim", "=", "True", ")", "/", "weight_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.dataset.synthia_dataset.synthiaDataSet.__init__": [[18, 44], ["i_id.strip", "os.join", "os.join", "os.join", "os.join", "synthia_dataset.synthiaDataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "\t        ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "\n", "self", ".", "id_to_trainid", "=", "{", "3", ":", "0", ",", "4", ":", "1", ",", "2", ":", "2", ",", "21", ":", "3", ",", "5", ":", "4", ",", "7", ":", "5", ",", "\n", "15", ":", "6", ",", "9", ":", "7", ",", "6", ":", "8", ",", "16", ":", "9", ",", "1", ":", "10", ",", "10", ":", "11", ",", "17", ":", "12", ",", "\n", "8", ":", "13", ",", "18", ":", "14", ",", "19", ":", "15", ",", "20", ":", "16", ",", "12", ":", "17", ",", "11", ":", "18", "}", "\n", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"RGB/%s\"", "%", "name", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"synthia_mapped_to_cityscapes/%s\"", "%", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.dataset.synthia_dataset.synthiaDataSet.__len__": [[46, 48], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.dataset.synthia_dataset.synthiaDataSet.__getitem__": [[50, 82], ["PIL.Image.open().convert", "PIL.Image.open", "image.transpose.transpose.resize", "numpy.asarray.resize", "numpy.asarray", "numpy.asarray", "synthia_dataset.synthiaDataSet.id_to_trainid.items", "image.transpose.transpose.transpose", "numpy.ones", "image.transpose.transpose.copy", "label_copy.copy", "numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "Image", ".", "open", "(", "datafiles", "[", "\"label\"", "]", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "float32", ")", "\n", "#labelcv = cv2.imread(datafiles[\"label\"], cv2.IMREAD_UNCHANGED)[:,:,2].astype(np.float32)", "\n", "#print(label.shape, labelcv.shape)", "\n", "#assert label == labelcv", "\n", "#pdb.set_trace()", "\n", "#label = imresize(label[:,:,2], self.crop_size, interp='nearest').astype(np.float32)", "\n", "#for i in range(23):", "\n", "#    print(np.sum(label==i))", "\n", "#pdb.set_trace()", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.dataset.gta5_dataset.GTA5DataSet.__init__": [[14, 40], ["i_id.strip", "os.join", "os.join", "os.join", "os.join", "gta5_dataset.GTA5DataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "\n", "self", ".", "id_to_trainid", "=", "{", "7", ":", "0", ",", "8", ":", "1", ",", "11", ":", "2", ",", "12", ":", "3", ",", "13", ":", "4", ",", "17", ":", "5", ",", "\n", "19", ":", "6", ",", "20", ":", "7", ",", "21", ":", "8", ",", "22", ":", "9", ",", "23", ":", "10", ",", "24", ":", "11", ",", "25", ":", "12", ",", "\n", "26", ":", "13", ",", "27", ":", "14", ",", "28", ":", "15", ",", "31", ":", "16", ",", "32", ":", "17", ",", "33", ":", "18", "}", "\n", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"images/%s\"", "%", "name", ")", "\n", "label_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"labels/%s\"", "%", "name", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"label\"", ":", "label_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.dataset.gta5_dataset.GTA5DataSet.__len__": [[42, 44], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.dataset.gta5_dataset.GTA5DataSet.__getitem__": [[46, 71], ["PIL.Image.open().convert", "PIL.Image.open", "image.transpose.transpose.resize", "numpy.asarray.resize", "numpy.asarray", "numpy.asarray", "gta5_dataset.GTA5DataSet.id_to_trainid.items", "image.transpose.transpose.transpose", "numpy.ones", "image.transpose.transpose.copy", "label_copy.copy", "numpy.array", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "Image", ".", "open", "(", "datafiles", "[", "\"label\"", "]", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "float32", ")", "\n", "\n", "# re-assign labels to match the format of Cityscapes", "\n", "label_copy", "=", "255", "*", "np", ".", "ones", "(", "label", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "id_to_trainid", ".", "items", "(", ")", ":", "\n", "            ", "label_copy", "[", "label", "==", "k", "]", "=", "v", "\n", "\n", "", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "return", "image", ".", "copy", "(", ")", ",", "label_copy", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.dataset.cityscapes_dataset.cityscapesDataSet.__init__": [[13, 35], ["i_id.strip", "os.join", "os.join", "cityscapes_dataset.cityscapesDataSet.files.append", "open", "int", "numpy.ceil", "float", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "list_path", ",", "max_iters", "=", "None", ",", "crop_size", "=", "(", "321", ",", "321", ")", ",", "\n", "mean", "=", "(", "128", ",", "128", ",", "128", ")", ",", "scale", "=", "True", ",", "mirror", "=", "True", ",", "ignore_label", "=", "255", ",", "set", "=", "'val'", ",", "ssl_dir", "=", "''", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "list_path", "=", "list_path", "\n", "self", ".", "crop_size", "=", "crop_size", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "is_mirror", "=", "mirror", "\n", "self", ".", "ssl_dir", "=", "ssl_dir", "\n", "# self.mean_bgr = np.array([104.00698793, 116.66876762, 122.67891434])", "\n", "self", ".", "img_ids", "=", "[", "i_id", ".", "strip", "(", ")", "for", "i_id", "in", "open", "(", "list_path", ")", "]", "\n", "if", "not", "max_iters", "==", "None", ":", "\n", "            ", "self", ".", "img_ids", "=", "self", ".", "img_ids", "*", "int", "(", "np", ".", "ceil", "(", "float", "(", "max_iters", ")", "/", "len", "(", "self", ".", "img_ids", ")", ")", ")", "\n", "", "self", ".", "files", "=", "[", "]", "\n", "self", ".", "set", "=", "set", "\n", "# for split in [\"train\", \"trainval\", \"val\"]:", "\n", "for", "name", "in", "self", ".", "img_ids", ":", "\n", "            ", "img_file", "=", "osp", ".", "join", "(", "self", ".", "root", ",", "\"leftImg8bit/%s/%s\"", "%", "(", "self", ".", "set", ",", "name", ")", ")", "\n", "self", ".", "files", ".", "append", "(", "{", "\n", "\"img\"", ":", "img_file", ",", "\n", "\"name\"", ":", "name", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.dataset.cityscapes_dataset.cityscapesDataSet.__len__": [[37, 39], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.dataset.cityscapes_dataset.cityscapesDataSet.__getitem__": [[40, 63], ["PIL.Image.open().convert", "image.transpose.transpose.resize", "numpy.asarray", "image.transpose.transpose.transpose", "len", "PIL.Image.open", "numpy.asarray.resize", "numpy.asarray", "image.transpose.transpose.copy", "numpy.array", "PIL.Image.open", "os.join", "os.join", "image.transpose.transpose.copy", "numpy.asarray.copy", "numpy.array", "name.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "datafiles", "=", "self", ".", "files", "[", "index", "]", "\n", "\n", "image", "=", "Image", ".", "open", "(", "datafiles", "[", "\"img\"", "]", ")", ".", "convert", "(", "'RGB'", ")", "\n", "name", "=", "datafiles", "[", "\"name\"", "]", "\n", "\n", "# resize", "\n", "image", "=", "image", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "BICUBIC", ")", "\n", "\n", "image", "=", "np", ".", "asarray", "(", "image", ",", "np", ".", "float32", ")", "\n", "\n", "size", "=", "image", ".", "shape", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# change to BGR", "\n", "image", "-=", "self", ".", "mean", "\n", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "\n", "if", "len", "(", "self", ".", "ssl_dir", ")", ">", "0", ":", "\n", "            ", "label", "=", "Image", ".", "open", "(", "osp", ".", "join", "(", "self", ".", "ssl_dir", ",", "name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", ")", "\n", "label", "=", "label", ".", "resize", "(", "self", ".", "crop_size", ",", "Image", ".", "NEAREST", ")", "\n", "label", "=", "np", ".", "asarray", "(", "label", ",", "np", ".", "int64", ")", "\n", "return", "image", ".", "copy", "(", ")", ",", "label", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n", "", "return", "image", ".", "copy", "(", ")", ",", "np", ".", "array", "(", "size", ")", ",", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.discriminator.FCDiscriminator.__init__": [[8, 18], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__"], ["\t", "def", "__init__", "(", "self", ",", "num_classes", ",", "ndf", "=", "64", ")", ":", "\n", "\t\t", "super", "(", "FCDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "num_classes", ",", "ndf", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "#self.up_sample = nn.Upsample(scale_factor=32, mode='bilinear')", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.discriminator.FCDiscriminator.forward": [[22, 36], ["discriminator.FCDiscriminator.conv1", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.conv2", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.conv3", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.conv4", "discriminator.FCDiscriminator.leaky_relu", "discriminator.FCDiscriminator.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "leaky_relu", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "#x = self.up_sample(x)", "\n", "#x = self.sigmoid(x) ", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.BasicBlock.__init__": [[25, 34], ["torch.Module.__init__", "deeplab.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplab.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.conv3x3", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.BasicBlock.forward": [[35, 52], ["deeplab.BasicBlock.conv1", "deeplab.BasicBlock.bn1", "deeplab.BasicBlock.relu", "deeplab.BasicBlock.conv2", "deeplab.BasicBlock.bn2", "deeplab.BasicBlock.relu", "deeplab.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.Bottleneck.__init__": [[57, 77], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.Bottleneck.bn3.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.Bottleneck.forward": [[79, 100], ["deeplab.Bottleneck.conv1", "deeplab.Bottleneck.bn1", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.conv2", "deeplab.Bottleneck.bn2", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.conv3", "deeplab.Bottleneck.bn3", "deeplab.Bottleneck.relu", "deeplab.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.Classifier_Module.__init__": [[103, 111], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "deeplab.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "nn", ".", "Conv2d", "(", "2048", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.Classifier_Module.forward": [[112, 117], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.ResNet.__init__": [[121, 144], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab.ResNet.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_layer", "deeplab.ResNet._make_pred_layer", "deeplab.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#        for i in m.parameters():", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.ResNet._make_layer": [[147, 163], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.ResNet._make_pred_layer": [[163, 165], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.ResNet.forward": [[166, 178], ["deeplab.ResNet.conv1", "deeplab.ResNet.bn1", "deeplab.ResNet.relu", "deeplab.ResNet.maxpool", "deeplab.ResNet.layer1", "deeplab.ResNet.layer2", "deeplab.ResNet.layer3", "deeplab.ResNet.layer4", "deeplab.ResNet.layer5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.ResNet.get_1x_lr_params_NOscale": [[179, 203], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for \n        the last classification layer. Note that for each batchnorm layer, \n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return \n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.ResNet.get_10x_lr_params": [[204, 215], ["b.append", "range", "deeplab.ResNet.layer5.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.ResNet.optim_parameters": [[218, 221], ["deeplab.ResNet.get_1x_lr_params_NOscale", "deeplab.ResNet.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.outS": [[9, 15], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab.Res_Deeplab": [[223, 226], ["deeplab.ResNet"], "function", ["None"], ["", "", "def", "Res_Deeplab", "(", "num_classes", "=", "21", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "deeplab_multi.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "deeplab_multi.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.conv3x3", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.BasicBlock.forward": [[38, 55], ["deeplab_multi.BasicBlock.conv1", "deeplab_multi.BasicBlock.bn1", "deeplab_multi.BasicBlock.relu", "deeplab_multi.BasicBlock.conv2", "deeplab_multi.BasicBlock.bn2", "deeplab_multi.BasicBlock.relu", "deeplab_multi.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.Bottleneck.__init__": [[60, 80], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab_multi.Bottleneck.bn1.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab_multi.Bottleneck.bn2.parameters", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab_multi.Bottleneck.bn3.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "# change", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "\n", "", "padding", "=", "dilation", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "# change", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn2", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn3", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.Bottleneck.forward": [[81, 102], ["deeplab_multi.Bottleneck.conv1", "deeplab_multi.Bottleneck.bn1", "deeplab_multi.Bottleneck.relu", "deeplab_multi.Bottleneck.conv2", "deeplab_multi.Bottleneck.bn2", "deeplab_multi.Bottleneck.relu", "deeplab_multi.Bottleneck.conv3", "deeplab_multi.Bottleneck.bn3", "deeplab_multi.Bottleneck.relu", "deeplab_multi.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.Classifier_Module.__init__": [[105, 114], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "deeplab_multi.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.Classifier_Module.forward": [[115, 120], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMulti.__init__": [[123, 147], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab_multi.ResNetMulti.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplab_multi.ResNetMulti._make_layer", "deeplab_multi.ResNetMulti._make_layer", "deeplab_multi.ResNetMulti._make_layer", "deeplab_multi.ResNetMulti._make_layer", "deeplab_multi.ResNetMulti._make_pred_layer", "deeplab_multi.ResNetMulti._make_pred_layer", "deeplab_multi.ResNetMulti.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_pred_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#        for i in m.parameters():", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMulti._make_layer": [[150, 166], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMulti._make_pred_layer": [[167, 169], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMulti.forward": [[170, 185], ["deeplab_multi.ResNetMulti.conv1", "deeplab_multi.ResNetMulti.bn1", "deeplab_multi.ResNetMulti.relu", "deeplab_multi.ResNetMulti.maxpool", "deeplab_multi.ResNetMulti.layer1", "deeplab_multi.ResNetMulti.layer2", "deeplab_multi.ResNetMulti.layer3", "deeplab_multi.ResNetMulti.layer5", "deeplab_multi.ResNetMulti.layer4", "deeplab_multi.ResNetMulti.layer6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x1", "=", "self", ".", "layer5", "(", "x", ")", "\n", "\n", "x2", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x2", "=", "self", ".", "layer6", "(", "x2", ")", "\n", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMulti.get_1x_lr_params_NOscale": [[186, 209], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMulti.get_10x_lr_params": [[210, 222], ["b.append", "b.append", "range", "deeplab_multi.ResNetMulti.layer5.parameters", "deeplab_multi.ResNetMulti.layer6.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer5", ".", "parameters", "(", ")", ")", "\n", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMulti.optim_parameters": [[223, 226], ["deeplab_multi.ResNetMulti.get_1x_lr_params_NOscale", "deeplab_multi.ResNetMulti.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature.__init__": [[229, 253], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "deeplab_multi.ResNetMultiFeature.bn1.parameters", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "deeplab_multi.ResNetMultiFeature._make_layer", "deeplab_multi.ResNetMultiFeature._make_layer", "deeplab_multi.ResNetMultiFeature._make_layer", "deeplab_multi.ResNetMultiFeature._make_layer", "deeplab_multi.ResNetMultiFeature._make_pred_layer", "deeplab_multi.ResNetMultiFeature._make_pred_layer", "deeplab_multi.ResNetMultiFeature.modules", "isinstance", "m.weight.data.normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_pred_layer", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_pred_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNetMultiFeature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "affine", "=", "affine_par", ")", "\n", "for", "i", "in", "self", ".", "bn1", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "ceil_mode", "=", "True", ")", "# change", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "dilation", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "dilation", "=", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "self", ".", "layer6", "=", "self", ".", "_make_pred_layer", "(", "Classifier_Module", ",", "2048", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "#        for i in m.parameters():", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_layer": [[256, 272], ["torch.Sequential._modules[].parameters", "layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", "or", "dilation", "==", "2", "or", "dilation", "==", "4", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "affine", "=", "affine_par", ")", ")", "\n", "", "for", "i", "in", "downsample", ".", "_modules", "[", "'1'", "]", ".", "parameters", "(", ")", ":", "\n", "            ", "i", ".", "requires_grad", "=", "False", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "dilation", ",", "downsample", "=", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature._make_pred_layer": [[273, 275], ["block"], "methods", ["None"], ["", "def", "_make_pred_layer", "(", "self", ",", "block", ",", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "return", "block", "(", "inplanes", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature.forward": [[276, 289], ["deeplab_multi.ResNetMultiFeature.conv1", "deeplab_multi.ResNetMultiFeature.bn1", "deeplab_multi.ResNetMultiFeature.relu", "deeplab_multi.ResNetMultiFeature.maxpool", "deeplab_multi.ResNetMultiFeature.layer1", "deeplab_multi.ResNetMultiFeature.layer2", "deeplab_multi.ResNetMultiFeature.layer3", "deeplab_multi.ResNetMultiFeature.layer4", "deeplab_multi.ResNetMultiFeature.layer6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x_feature", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x_pred", "=", "self", ".", "layer6", "(", "x_feature", ")", "\n", "\n", "return", "x_feature", ",", "x_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature.get_1x_lr_params_NOscale": [[290, 313], ["b.append", "b.append", "b.append", "b.append", "b.append", "b.append", "range", "len", "b[].modules", "j.parameters"], "methods", ["None"], ["", "def", "get_1x_lr_params_NOscale", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters of the net except for\n        the last classification layer. Note that for each batchnorm layer,\n        requires_grad is set to False in deeplab_resnet.py, therefore this function does not return\n        any batchnorm parameter\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "\n", "b", ".", "append", "(", "self", ".", "conv1", ")", "\n", "b", ".", "append", "(", "self", ".", "bn1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer1", ")", "\n", "b", ".", "append", "(", "self", ".", "layer2", ")", "\n", "b", ".", "append", "(", "self", ".", "layer3", ")", "\n", "b", ".", "append", "(", "self", ".", "layer4", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "j", "in", "b", "[", "i", "]", ".", "modules", "(", ")", ":", "\n", "                ", "jj", "=", "0", "\n", "for", "k", "in", "j", ".", "parameters", "(", ")", ":", "\n", "                    ", "jj", "+=", "1", "\n", "if", "k", ".", "requires_grad", ":", "\n", "                        ", "yield", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature.get_10x_lr_params": [[314, 325], ["b.append", "range", "deeplab_multi.ResNetMultiFeature.layer6.parameters", "len"], "methods", ["None"], ["", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This generator returns all the parameters for the last layer of the net,\n        which does the classification of pixel into classes\n        \"\"\"", "\n", "b", "=", "[", "]", "\n", "b", ".", "append", "(", "self", ".", "layer6", ".", "parameters", "(", ")", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "b", ")", ")", ":", "\n", "            ", "for", "i", "in", "b", "[", "j", "]", ":", "\n", "                ", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature.optim_parameters": [[326, 329], ["deeplab_multi.ResNetMultiFeature.get_1x_lr_params_NOscale", "deeplab_multi.ResNetMultiFeature.get_10x_lr_params"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature.get_1x_lr_params_NOscale", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.ResNetMultiFeature.get_10x_lr_params"], ["", "", "", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "[", "{", "'params'", ":", "self", ".", "get_1x_lr_params_NOscale", "(", ")", ",", "'lr'", ":", "args", ".", "learning_rate", "}", ",", "\n", "{", "'params'", ":", "self", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "10", "*", "args", ".", "learning_rate", "}", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.outS": [[11, 17], ["int", "int", "numpy.ceil"], "function", ["None"], ["def", "outS", "(", "i", ")", ":", "\n", "    ", "i", "=", "int", "(", "i", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "i", "=", "int", "(", "np", ".", "ceil", "(", "(", "i", "+", "1", ")", "/", "2.0", ")", ")", "\n", "i", "=", "(", "i", "+", "1", ")", "/", "2", "\n", "return", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.DeeplabMulti": [[332, 335], ["deeplab_multi.ResNetMulti"], "function", ["None"], ["", "", "def", "DeeplabMulti", "(", "num_classes", "=", "21", ")", ":", "\n", "    ", "model", "=", "ResNetMulti", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_multi.DeeplabMultiFeature": [[336, 339], ["deeplab_multi.ResNetMultiFeature"], "function", ["None"], ["", "def", "DeeplabMultiFeature", "(", "num_classes", "=", "21", ")", ":", "\n", "    ", "model", "=", "ResNetMultiFeature", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_vgg.Classifier_Module.__init__": [[8, 16], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "zip", "deeplab_vgg.Classifier_Module.conv2d_list.append", "m.weight.data.normal_", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dims_in", ",", "dilation_series", ",", "padding_series", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "Classifier_Module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv2d_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dilation", ",", "padding", "in", "zip", "(", "dilation_series", ",", "padding_series", ")", ":", "\n", "            ", "self", ".", "conv2d_list", ".", "append", "(", "nn", ".", "Conv2d", "(", "dims_in", ",", "num_classes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "True", ")", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "conv2d_list", ":", "\n", "            ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_vgg.Classifier_Module.forward": [[17, 22], ["range", "len"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv2d_list", "[", "0", "]", "(", "x", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "conv2d_list", ")", "-", "1", ")", ":", "\n", "            ", "out", "+=", "self", ".", "conv2d_list", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_vgg.DeeplabVGG.__init__": [[25, 46], ["torch.nn.Module.__init__", "torchvision.models.vgg16", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Sequential", "deeplab_vgg.Classifier_Module", "torchvision.models.vgg16.load_state_dict", "list", "list", "torch.load", "torchvision.models.vgg16.features.children", "torchvision.models.vgg16.classifier.children", "torch.nn.ReLU", "torch.nn.ReLU", "list", "list", "range", "range", "range", "len"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "vgg16_caffe_path", "=", "None", ",", "pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", "DeeplabVGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "vgg", "=", "models", ".", "vgg16", "(", ")", "\n", "if", "pretrained", ":", "\n", "            ", "vgg", ".", "load_state_dict", "(", "torch", ".", "load", "(", "vgg16_caffe_path", ")", ")", "\n", "\n", "", "features", ",", "classifier", "=", "list", "(", "vgg", ".", "features", ".", "children", "(", ")", ")", ",", "list", "(", "vgg", ".", "classifier", ".", "children", "(", ")", ")", "\n", "\n", "#remove pool4/pool5", "\n", "features", "=", "nn", ".", "Sequential", "(", "*", "(", "features", "[", "i", "]", "for", "i", "in", "list", "(", "range", "(", "23", ")", ")", "+", "list", "(", "range", "(", "24", ",", "30", ")", ")", ")", ")", "\n", "\n", "for", "i", "in", "[", "23", ",", "25", ",", "27", "]", ":", "\n", "            ", "features", "[", "i", "]", ".", "dilation", "=", "(", "2", ",", "2", ")", "\n", "features", "[", "i", "]", ".", "padding", "=", "(", "2", ",", "2", ")", "\n", "\n", "", "fc6", "=", "nn", ".", "Conv2d", "(", "512", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ",", "dilation", "=", "4", ")", "\n", "fc7", "=", "nn", ".", "Conv2d", "(", "1024", ",", "1024", ",", "kernel_size", "=", "3", ",", "padding", "=", "4", ",", "dilation", "=", "4", ")", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "(", "[", "features", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "features", ")", ")", "]", "+", "[", "fc6", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "fc7", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "Classifier_Module", "(", "1024", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "[", "6", ",", "12", ",", "18", ",", "24", "]", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_vgg.DeeplabVGG.forward": [[48, 52], ["deeplab_vgg.DeeplabVGG.features", "deeplab_vgg.DeeplabVGG.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.deeplab_vgg.DeeplabVGG.optim_parameters": [[53, 55], ["deeplab_vgg.DeeplabVGG.parameters"], "methods", ["None"], ["", "def", "optim_parameters", "(", "self", ",", "args", ")", ":", "\n", "        ", "return", "self", ".", "parameters", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.anchor_label.save_img": [[28, 43], ["PIL.Image.open().convert", "np.asarray.resize", "numpy.asarray", "range", "len", "PIL.Image.fromarray", "Image.fromarray.save", "PIL.Image.open", "len", "range", "len", "[].astype"], "function", ["None"], ["def", "save_img", "(", "img_path", ",", "anchors", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "w", ",", "h", "=", "1280", ",", "720", "\n", "img", "=", "img", ".", "resize", "(", "(", "w", ",", "h", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "ih", ",", "iw", ",", "_", "=", "img", ".", "shape", "\n", "for", "i", "in", "range", "(", "len", "(", "FG_LABEL", ")", ")", ":", "\n", "        ", "if", "len", "(", "anchors", "[", "i", "]", ")", ">", "0", ":", "\n", "            ", "color", "=", "(", "palette", "[", "3", "*", "FG_LABEL", "[", "i", "]", "]", ",", "palette", "[", "3", "*", "FG_LABEL", "[", "i", "]", "+", "1", "]", ",", "palette", "[", "3", "*", "FG_LABEL", "[", "i", "]", "+", "2", "]", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "anchors", "[", "i", "]", ")", ")", ":", "\n", "                ", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "_", "=", "anchors", "[", "i", "]", "[", "j", ",", ":", "]", ".", "astype", "(", "int", ")", "\n", "#cv2.rectangle(img, (y1, x1), (y2, x2), color, 2)", "\n", "", "", "imgsave", "=", "Image", ".", "fromarray", "(", "img", ",", "'RGB'", ")", "\n", "imgsave", ".", "save", "(", "'sample.png'", ")", "\n", "#pdb.set_trace()", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.anchor_label.colorize_mask": [[49, 55], ["PIL.Image.fromarray().convert", "Image.fromarray().convert.putpalette", "PIL.Image.fromarray", "mask.astype"], "function", ["None"], ["", "", "def", "colorize_mask", "(", "mask", ")", ":", "\n", "# mask: numpy array of the mask", "\n", "    ", "new_mask", "=", "Image", ".", "fromarray", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", ".", "convert", "(", "'P'", ")", "\n", "new_mask", ".", "putpalette", "(", "palette", ")", "\n", "\n", "return", "new_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.anchor_label.anchorsbi": [[56, 96], ["numpy.ceil", "numpy.ceil", "numpy.zeros", "range", "anchors.append", "float", "float", "torch.sum", "mask.cpu().clone().detach().numpy().astype", "skimage.measure.label", "numpy.where", "len", "numpy.min", "numpy.min", "numpy.max", "numpy.max", "float", "max", "numpy.argsort", "len", "len", "numpy.floor", "numpy.ceil", "numpy.where", "numpy.ceil", "numpy.ceil", "numpy.where", "mask.cpu().clone().detach().numpy", "len", "mask.cpu().clone().detach", "numpy.where", "numpy.where", "mask.cpu().clone", "mask.cpu"], "function", ["None"], ["", "def", "anchorsbi", "(", "label", ",", "origin_size", "=", "(", "720", ",", "1280", ")", ",", "iou_thresh", "=", "0.4", ")", ":", "\n", "    ", "h", ",", "w", "=", "label", ".", "shape", "[", "0", "]", ",", "label", ".", "shape", "[", "1", "]", "\n", "h_scale", ",", "w_scale", "=", "float", "(", "origin_size", "[", "0", "]", ")", "/", "h", ",", "float", "(", "origin_size", "[", "1", "]", ")", "/", "w", "\n", "hthre", "=", "np", ".", "ceil", "(", "32.", "/", "h_scale", ")", "\n", "wthre", "=", "np", ".", "ceil", "(", "32.", "/", "w_scale", ")", "\n", "anchors", "=", "[", "]", "\n", "for", "fg", "in", "FG_LABEL", ":", "\n", "        ", "mask", "=", "label", "==", "fg", "\n", "foreidx", "=", "1", "\n", "if", "torch", ".", "sum", "(", "mask", ")", ">", "0", ":", "\n", "\n", "            ", "masknp", "=", "mask", ".", "cpu", "(", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "int", ")", "\n", "seg", ",", "foreidx", "=", "sklabel", "(", "masknp", ",", "background", "=", "0", ",", "return_num", "=", "True", ",", "connectivity", "=", "2", ")", "\n", "foreidx", "+=", "1", "\n", "\n", "", "anc_cls", "=", "np", ".", "zeros", "(", "(", "foreidx", "-", "1", ",", "5", ")", ")", "\n", "for", "fi", "in", "range", "(", "1", ",", "foreidx", ")", ":", "\n", "            ", "x", ",", "y", "=", "np", ".", "where", "(", "seg", "==", "fi", ")", "\n", "anc_cls", "[", "fi", "-", "1", ",", ":", "4", "]", "=", "np", ".", "min", "(", "x", ")", ",", "np", ".", "min", "(", "y", ")", ",", "np", ".", "max", "(", "x", ")", ",", "np", ".", "max", "(", "y", ")", "\n", "area", "=", "(", "anc_cls", "[", "fi", "-", "1", ",", "2", "]", "-", "anc_cls", "[", "fi", "-", "1", ",", "0", "]", ")", "*", "(", "anc_cls", "[", "fi", "-", "1", ",", "3", "]", "-", "anc_cls", "[", "fi", "-", "1", ",", "1", "]", ")", "\n", "anc_cls", "[", "fi", "-", "1", ",", "4", "]", "=", "float", "(", "len", "(", "x", ")", ")", "/", "max", "(", "area", ",", "1e-5", ")", "\n", "", "if", "len", "(", "anc_cls", ")", ">", "0", ":", "\n", "            ", "hdis", "=", "anc_cls", "[", ":", ",", "2", "]", "-", "anc_cls", "[", ":", ",", "0", "]", "\n", "wdis", "=", "anc_cls", "[", ":", ",", "3", "]", "-", "anc_cls", "[", ":", ",", "1", "]", "\n", "anc_cls", "=", "anc_cls", "[", "np", ".", "where", "(", "(", "hdis", ">=", "hthre", ")", "&", "(", "wdis", ">=", "wthre", ")", ")", "[", "0", "]", ",", ":", "]", "\n", "area", "=", "(", "anc_cls", "[", ":", ",", "2", "]", "-", "anc_cls", "[", ":", ",", "0", "]", ")", "*", "(", "anc_cls", "[", ":", ",", "3", "]", "-", "anc_cls", "[", ":", ",", "1", "]", ")", "\n", "sortidx", "=", "np", ".", "argsort", "(", "area", ")", "[", ":", ":", "-", "1", "]", "\n", "anc_cls", "=", "anc_cls", "[", "sortidx", ",", ":", "]", "\n", "if", "len", "(", "anc_cls", ")", ">", "0", ":", "\n", "                ", "anc_cls", "=", "anc_cls", "[", "np", ".", "where", "(", "anc_cls", "[", ":", ",", "4", "]", ">=", "iou_thresh", ")", "[", "0", "]", ",", ":", "]", "\n", "", "if", "len", "(", "anc_cls", ")", ">", "0", ":", "\n", "                ", "anc_cls", "[", ":", ",", "0", "]", "=", "np", ".", "floor", "(", "h_scale", "*", "anc_cls", "[", ":", ",", "0", "]", ")", "\n", "anc_cls", "[", ":", ",", "2", "]", "=", "np", ".", "ceil", "(", "h_scale", "*", "anc_cls", "[", ":", ",", "2", "]", ")", "\n", "anc_cls", "[", ":", ",", "2", "]", "=", "np", ".", "where", "(", "anc_cls", "[", ":", ",", "2", "]", "<", "origin_size", "[", "0", "]", ",", "anc_cls", "[", ":", ",", "2", "]", ",", "origin_size", "[", "0", "]", ")", "\n", "anc_cls", "[", ":", ",", "1", "]", "=", "np", ".", "ceil", "(", "w_scale", "*", "anc_cls", "[", ":", ",", "1", "]", ")", "\n", "anc_cls", "[", ":", ",", "3", "]", "=", "np", ".", "ceil", "(", "w_scale", "*", "anc_cls", "[", ":", ",", "3", "]", ")", "\n", "anc_cls", "[", ":", ",", "3", "]", "=", "np", ".", "where", "(", "anc_cls", "[", ":", ",", "3", "]", "<", "origin_size", "[", "1", "]", ",", "anc_cls", "[", ":", ",", "3", "]", ",", "origin_size", "[", "1", "]", ")", "\n", "", "", "anchors", ".", "append", "(", "anc_cls", ")", "\n", "\n", "", "return", "anchors", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__": [[9, 74], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout2d", "torch.Dropout2d", "torch.Dropout2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "fcn8s.FCN8s._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.__init__", "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "21", ")", ":", "\n", "        ", "super", "(", "FCN8s", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# conv1", "\n", "self", ".", "conv1_1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "3", ",", "padding", "=", "100", ")", "\n", "self", ".", "relu1_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1_2", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu1_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", "# 1/2", "\n", "\n", "# conv2", "\n", "self", ".", "conv2_1", "=", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu2_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2_2", "=", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu2_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", "# 1/4", "\n", "\n", "# conv3", "\n", "self", ".", "conv3_1", "=", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_2", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv3_3", "=", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu3_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool3", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", "# 1/8", "\n", "\n", "# conv4", "\n", "self", ".", "conv4_1", "=", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv4_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu4_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool4", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", "# 1/16", "\n", "\n", "# conv5", "\n", "self", ".", "conv5_1", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_2", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv5_3", "=", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "3", ",", "padding", "=", "1", ")", "\n", "self", ".", "relu5_3", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", "# 1/32", "\n", "\n", "# fc6", "\n", "self", ".", "fc6", "=", "nn", ".", "Conv2d", "(", "512", ",", "4096", ",", "7", ")", "\n", "self", ".", "relu6", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "drop6", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "\n", "# fc7", "\n", "self", ".", "fc7", "=", "nn", ".", "Conv2d", "(", "4096", ",", "4096", ",", "1", ")", "\n", "self", ".", "relu7", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "drop7", "=", "nn", ".", "Dropout2d", "(", ")", "\n", "\n", "self", ".", "score_fr", "=", "nn", ".", "Conv2d", "(", "4096", ",", "num_classes", ",", "1", ")", "\n", "self", ".", "score_pool3", "=", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "1", ")", "\n", "self", ".", "score_pool4", "=", "nn", ".", "Conv2d", "(", "512", ",", "num_classes", ",", "1", ")", "\n", "\n", "self", ".", "upscore2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "num_classes", ",", "num_classes", ",", "4", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "upscore8", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "num_classes", ",", "num_classes", ",", "16", ",", "stride", "=", "8", ",", "bias", "=", "False", ")", "\n", "self", ".", "upscore_pool4", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "num_classes", ",", "num_classes", ",", "4", ",", "stride", "=", "2", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s._initialize_weights": [[75, 86], ["fcn8s.FCN8s.modules", "isinstance", "isinstance", "m.weight.data.zero_", "fcn8s.FCN8s.get_upsampling_weight", "m.weight.data.copy_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.get_upsampling_weight"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "zero_", "(", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "if", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "assert", "m", ".", "kernel_size", "[", "0", "]", "==", "m", ".", "kernel_size", "[", "1", "]", "\n", "initial_weight", "=", "self", ".", "get_upsampling_weight", "(", "\n", "m", ".", "in_channels", ",", "m", ".", "out_channels", ",", "m", ".", "kernel_size", "[", "0", "]", ")", "\n", "m", ".", "weight", ".", "data", ".", "copy_", "(", "initial_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.get_upsampling_weight": [[87, 101], ["numpy.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "abs", "abs", "range", "range"], "methods", ["None"], ["", "", "", "def", "get_upsampling_weight", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ")", ":", "\n", "        ", "\"\"\"Make a 2D bilinear kernel suitable for upsampling\"\"\"", "\n", "factor", "=", "(", "kernel_size", "+", "1", ")", "//", "2", "\n", "if", "kernel_size", "%", "2", "==", "1", ":", "\n", "            ", "center", "=", "factor", "-", "1", "\n", "", "else", ":", "\n", "            ", "center", "=", "factor", "-", "0.5", "\n", "", "og", "=", "np", ".", "ogrid", "[", ":", "kernel_size", ",", ":", "kernel_size", "]", "\n", "filt", "=", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", ")", "/", "factor", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", ")", "/", "factor", ")", "\n", "weight", "=", "np", ".", "zeros", "(", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "kernel_size", ")", ",", "\n", "dtype", "=", "np", ".", "float64", ")", "\n", "weight", "[", "range", "(", "in_channels", ")", ",", "range", "(", "out_channels", ")", ",", ":", ",", ":", "]", "=", "filt", "\n", "return", "torch", ".", "from_numpy", "(", "weight", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.forward": [[102, 162], ["fcn8s.FCN8s.relu1_1", "fcn8s.FCN8s.relu1_2", "fcn8s.FCN8s.pool1", "fcn8s.FCN8s.relu2_1", "fcn8s.FCN8s.relu2_2", "fcn8s.FCN8s.pool2", "fcn8s.FCN8s.relu3_1", "fcn8s.FCN8s.relu3_2", "fcn8s.FCN8s.relu3_3", "fcn8s.FCN8s.pool3", "fcn8s.FCN8s.relu4_1", "fcn8s.FCN8s.relu4_2", "fcn8s.FCN8s.relu4_3", "fcn8s.FCN8s.pool4", "fcn8s.FCN8s.relu5_1", "fcn8s.FCN8s.relu5_2", "fcn8s.FCN8s.relu5_3", "fcn8s.FCN8s.pool5", "pdb.set_trace", "fcn8s.FCN8s.relu6", "fcn8s.FCN8s.drop6", "fcn8s.FCN8s.relu7", "fcn8s.FCN8s.drop7", "fcn8s.FCN8s.score_fr", "fcn8s.FCN8s.upscore2", "fcn8s.FCN8s.score_pool4", "fcn8s.FCN8s.upscore_pool4", "fcn8s.FCN8s.score_pool3", "fcn8s.FCN8s.upscore8", "h[].contiguous", "fcn8s.FCN8s.conv1_1", "fcn8s.FCN8s.conv1_2", "fcn8s.FCN8s.conv2_1", "fcn8s.FCN8s.conv2_2", "fcn8s.FCN8s.conv3_1", "fcn8s.FCN8s.conv3_2", "fcn8s.FCN8s.conv3_3", "fcn8s.FCN8s.conv4_1", "fcn8s.FCN8s.conv4_2", "fcn8s.FCN8s.conv4_3", "fcn8s.FCN8s.conv5_1", "fcn8s.FCN8s.conv5_2", "fcn8s.FCN8s.conv5_3", "fcn8s.FCN8s.fc6", "fcn8s.FCN8s.fc7", "fcn8s.FCN8s.CrossEntropy2d", "upscore2.size", "upscore2.size", "upscore_pool4.size", "upscore_pool4.size", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.CrossEntropy2d"], ["", "def", "forward", "(", "self", ",", "x", ",", "ssl", "=", "False", ",", "lbl", "=", "None", ")", ":", "\n", "        ", "h", "=", "x", "\n", "h", "=", "self", ".", "relu1_1", "(", "self", ".", "conv1_1", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu1_2", "(", "self", ".", "conv1_2", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "pool1", "(", "h", ")", "\n", "\n", "h", "=", "self", ".", "relu2_1", "(", "self", ".", "conv2_1", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu2_2", "(", "self", ".", "conv2_2", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "pool2", "(", "h", ")", "\n", "\n", "h", "=", "self", ".", "relu3_1", "(", "self", ".", "conv3_1", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu3_2", "(", "self", ".", "conv3_2", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu3_3", "(", "self", ".", "conv3_3", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "pool3", "(", "h", ")", "\n", "pool3", "=", "h", "# 1/8", "\n", "\n", "h", "=", "self", ".", "relu4_1", "(", "self", ".", "conv4_1", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu4_2", "(", "self", ".", "conv4_2", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu4_3", "(", "self", ".", "conv4_3", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "pool4", "(", "h", ")", "\n", "pool4", "=", "h", "# 1/16", "\n", "\n", "h", "=", "self", ".", "relu5_1", "(", "self", ".", "conv5_1", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu5_2", "(", "self", ".", "conv5_2", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "relu5_3", "(", "self", ".", "conv5_3", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "pool5", "(", "h", ")", "\n", "pdb", ".", "set_trace", "(", ")", "\n", "h", "=", "self", ".", "relu6", "(", "self", ".", "fc6", "(", "h", ")", ")", "\n", "h", "=", "self", ".", "drop6", "(", "h", ")", "\n", "\n", "h", "=", "self", ".", "relu7", "(", "self", ".", "fc7", "(", "h", ")", ")", "\n", "fc7_response", "=", "self", ".", "drop7", "(", "h", ")", "\n", "\n", "h", "=", "self", ".", "score_fr", "(", "fc7_response", ")", "\n", "h", "=", "self", ".", "upscore2", "(", "h", ")", "\n", "upscore2", "=", "h", "# 1/16", "\n", "\n", "h", "=", "self", ".", "score_pool4", "(", "pool4", "*", "0.01", ")", "\n", "h", "=", "h", "[", ":", ",", ":", ",", "5", ":", "5", "+", "upscore2", ".", "size", "(", ")", "[", "2", "]", ",", "5", ":", "5", "+", "upscore2", ".", "size", "(", ")", "[", "3", "]", "]", "\n", "score_pool4c", "=", "h", "# 1/16", "\n", "\n", "h", "=", "upscore2", "+", "score_pool4c", "# 1/16", "\n", "h", "=", "self", ".", "upscore_pool4", "(", "h", ")", "\n", "upscore_pool4", "=", "h", "# 1/8", "\n", "\n", "h", "=", "self", ".", "score_pool3", "(", "pool3", "*", "0.0001", ")", "\n", "h", "=", "h", "[", ":", ",", ":", ",", "\n", "9", ":", "9", "+", "upscore_pool4", ".", "size", "(", ")", "[", "2", "]", ",", "\n", "9", ":", "9", "+", "upscore_pool4", ".", "size", "(", ")", "[", "3", "]", "]", "\n", "score_pool3c", "=", "h", "# 1/8", "\n", "\n", "h", "=", "upscore_pool4", "+", "score_pool3c", "# 1/8", "\n", "\n", "h", "=", "self", ".", "upscore8", "(", "h", ")", "\n", "h", "=", "h", "[", ":", ",", ":", ",", "31", ":", "31", "+", "x", ".", "size", "(", ")", "[", "2", "]", ",", "31", ":", "31", "+", "x", ".", "size", "(", ")", "[", "3", "]", "]", ".", "contiguous", "(", ")", "\n", "\n", "if", "lbl", "is", "not", "None", "and", "not", "ssl", ":", "\n", "            ", "self", ".", "loss", "=", "self", ".", "CrossEntropy2d", "(", "h", ",", "lbl", ")", "\n", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.get_parameters": [[163, 186], ["fcn8s.FCN8s.modules", "isinstance", "isinstance", "isinstance", "ValueError", "str"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ",", "bias", "=", "False", ")", ":", "\n", "        ", "import", "torch", ".", "nn", "as", "nn", "\n", "modules_skipped", "=", "(", "\n", "nn", ".", "ReLU", ",", "\n", "nn", ".", "MaxPool2d", ",", "\n", "nn", ".", "Dropout2d", ",", "\n", "nn", ".", "Sequential", ",", "\n", "FCN8s", ",", "\n", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "if", "bias", ":", "\n", "                    ", "yield", "m", ".", "bias", "\n", "", "else", ":", "\n", "                    ", "yield", "m", ".", "weight", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "# weight is frozen because it is just a bilinear upsampling", "\n", "                ", "if", "bias", ":", "\n", "                    ", "assert", "m", ".", "bias", "is", "None", "\n", "", "", "elif", "isinstance", "(", "m", ",", "modules_skipped", ")", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unexpected module: %s'", "%", "str", "(", "m", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.adjust_learning_rate": [[187, 191], ["len", "int", "int"], "methods", ["None"], ["", "", "", "def", "adjust_learning_rate", "(", "self", ",", "args", ",", "optimizer", ",", "i", ")", ":", "\n", "        ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "args", ".", "learning_rate", "*", "(", "0.1", "**", "(", "int", "(", "i", "/", "50000", ")", ")", ")", "\n", "if", "len", "(", "optimizer", ".", "param_groups", ")", ">", "1", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "args", ".", "learning_rate", "*", "(", "0.1", "**", "(", "int", "(", "i", "/", "50000", ")", ")", ")", "*", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.FCN8s.CrossEntropy2d": [[192, 208], ["predict[].view.size", "predict[].view.transpose().transpose().contiguous", "predict[].view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "predict[].view.dim", "target.dim", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "target.data.dim", "Variable", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predict[].view.transpose().transpose", "predict[].view.transpose", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "", "def", "CrossEntropy2d", "(", "self", ",", "predict", ",", "target", ",", "weight", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "assert", "not", "target", ".", "requires_grad", "\n", "assert", "predict", ".", "dim", "(", ")", "==", "4", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "\n", "assert", "predict", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "assert", "predict", ".", "size", "(", "2", ")", "==", "target", ".", "size", "(", "1", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "2", ")", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "assert", "predict", ".", "size", "(", "3", ")", "==", "target", ".", "size", "(", "2", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "3", ")", ",", "target", ".", "size", "(", "3", ")", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "size", "(", ")", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "255", ")", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "if", "not", "target", ".", "data", ".", "dim", "(", ")", ":", "\n", "            ", "return", "Variable", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "", "predict", "=", "predict", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "predict", "=", "predict", "[", "target_mask", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "weight", "=", "weight", ",", "size_average", "=", "size_average", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SHI-Labs_Unsupervised-Domain-Adaptation-with-Differential-Treatment.model.fcn8s.VGG16_FCN8s": [[209, 216], ["fcn8s.FCN8s", "FCN8s.load_state_dict", "FCN8s.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "", "def", "VGG16_FCN8s", "(", "num_classes", "=", "21", ",", "init_weights", "=", "None", ",", "restore_from", "=", "None", ")", ":", "\n", "    ", "model", "=", "FCN8s", "(", "num_classes", "=", "num_classes", ")", "\n", "if", "init_weights", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "init_weights", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "if", "restore_from", "is", "not", "None", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "restore_from", "+", "'.pth'", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", ")", "\n", "", "return", "model", "", "", ""]]}