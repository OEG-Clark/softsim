{"home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.plot_UCI": [[16, 41], ["datasets.UCI_loader.load_temporarl_edgelist", "print", "util.normal_util.plot_edges", "print", "util.normal_util.plot_avg_clustering", "print", "util.normal_util.plot_num_components_directed", "print", "util.normal_util.plot_weighted_edges", "print", "util.normal_util.plot_degree_changes"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_edges", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_avg_clustering", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_num_components_directed", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_weighted_edges", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_degree_changes"], ["def", "plot_UCI", "(", ")", ":", "\n", "\n", "    ", "'''\n    plot statistics from UCI Message\n    '''", "\n", "fname", "=", "\"datasets/UCI_processed/OCnodeslinks_chars.txt\"", "\n", "max_nodes", "=", "1901", "\n", "G_times", "=", "UCI_loader", ".", "load_temporarl_edgelist", "(", "fname", ",", "max_nodes", "=", "max_nodes", ")", "\n", "\n", "graph_name", "=", "\"UCI_Message\"", "\n", "'''\n    dictionary of weak labels\n    '''", "\n", "labels_dict", "=", "{", "}", "\n", "print", "(", "\"edge\"", ")", "\n", "labels_dict", "[", "'edge'", "]", "=", "normal_util", ".", "plot_edges", "(", "G_times", ",", "graph_name", ")", "\n", "print", "(", "\"acc\"", ")", "\n", "labels_dict", "[", "'acc'", "]", "=", "normal_util", ".", "plot_avg_clustering", "(", "G_times", ",", "graph_name", ")", "\n", "print", "(", "\"component\"", ")", "\n", "labels_dict", "[", "'component'", "]", "=", "normal_util", ".", "plot_num_components_directed", "(", "G_times", ",", "graph_name", ")", "\n", "print", "(", "\"weights\"", ")", "\n", "labels_dict", "[", "'weights'", "]", "=", "normal_util", ".", "plot_weighted_edges", "(", "G_times", ",", "graph_name", ")", "\n", "print", "(", "\"degree\"", ")", "\n", "labels_dict", "[", "'degree'", "]", "=", "normal_util", ".", "plot_degree_changes", "(", "G_times", ",", "graph_name", ")", "\n", "return", "labels_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.plot_UCI_allinOne": [[42, 66], ["datasets.UCI_loader.load_temporarl_edgelist", "label_sets.append", "label_sets.append", "label_sets.append", "util.normal_util.all_in_one_compare", "util.normal_util.all_plots_in_one"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.all_in_one_compare", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.all_plots_in_one"], ["", "def", "plot_UCI_allinOne", "(", ")", ":", "\n", "    ", "fname", "=", "\"datasets/UCI_processed/OCnodeslinks_chars.txt\"", "\n", "max_nodes", "=", "1901", "\n", "G_times", "=", "UCI_loader", ".", "load_temporarl_edgelist", "(", "fname", ",", "max_nodes", "=", "max_nodes", ")", "\n", "\n", "LAD", "=", "[", "69", ",", "70", ",", "184", ",", "185", ",", "187", ",", "188", ",", "189", ",", "191", ",", "192", ",", "194", "]", "\n", "activity", "=", "[", "57", ",", "75", ",", "78", ",", "85", ",", "89", ",", "90", ",", "104", ",", "176", ",", "188", ",", "192", "]", "\n", "CPD", "=", "[", "13", ",", "16", ",", "17", ",", "20", ",", "22", ",", "23", ",", "24", ",", "31", ",", "38", ",", "40", ",", "124", "]", "\n", "label_sets", "=", "[", "]", "\n", "label_sets", ".", "append", "(", "LAD", ")", "\n", "label_sets", ".", "append", "(", "activity", ")", "\n", "label_sets", ".", "append", "(", "CPD", ")", "\n", "\n", "graph_name", "=", "\"UCI_Message\"", "\n", "normal_util", ".", "all_in_one_compare", "(", "G_times", ",", "graph_name", ",", "label_sets", ",", "True", ")", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "graph_name", "=", "\"UCI_Message\"", "\n", "normal_util", ".", "all_plots_in_one", "(", "G_times", ",", "graph_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.print_labels": [[67, 71], ["print", "print"], "function", ["None"], ["", "def", "print_labels", "(", "labels_dict", ")", ":", "\n", "    ", "for", "label", "in", "labels_dict", ":", "\n", "        ", "print", "(", "label", ")", "\n", "print", "(", "labels_dict", "[", "label", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.plot_synthetic": [[77, 87], ["datasets.SBM_loader.load_temporarl_edgelist", "util.normal_util.plot_edges", "util.normal_util.plot_num_components_undirected", "print"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_edges", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_num_components_undirected"], ["", "", "def", "plot_synthetic", "(", ")", ":", "\n", "    ", "fname", "=", "\"datasets/SBM_processed/config_edgelist.txt\"", "\n", "#fname = \"datasets/SBM_processed/ER_synthetic_edgelist_sudden_0.002_0.3.txt\"", "\n", "max_nodes", "=", "100", "\n", "max_time", "=", "150", "\n", "G_times", "=", "SBM_loader", ".", "load_temporarl_edgelist", "(", "fname", ",", "max_nodes", "=", "max_nodes", ",", "max_time", "=", "max_time", ")", "\n", "graph_name", "=", "\"synthetic\"", "\n", "outliers", "=", "normal_util", ".", "plot_edges", "(", "G_times", ",", "graph_name", ")", "\n", "normal_util", ".", "plot_num_components_undirected", "(", "G_times", ",", "graph_name", ")", "\n", "print", "(", "outliers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.plot_legislative_allinOne": [[89, 98], ["datasets.USLegis_loader.load_legis_temporarl_edgelist", "label_sets.append", "util.normal_util.all_in_one_compare"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.USLegis_loader.load_legis_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.all_in_one_compare"], ["", "def", "plot_legislative_allinOne", "(", ")", ":", "\n", "    ", "fname", "=", "\"datasets/USLegis_processed/LegisEdgelist.txt\"", "\n", "G_times", "=", "USLegis_loader", ".", "load_legis_temporarl_edgelist", "(", "fname", ")", "\n", "LAD", "=", "[", "3", ",", "7", "]", "\n", "label_sets", "=", "[", "]", "\n", "label_sets", ".", "append", "(", "LAD", ")", "\n", "\n", "graph_name", "=", "\"USLegislative\"", "\n", "normal_util", ".", "all_in_one_compare", "(", "G_times", ",", "graph_name", ",", "label_sets", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.plot_canVote_allinOne": [[100, 112], ["datasets.canVote_loader.load_canVote_temporarl_edgelist", "label_sets.append", "util.normal_util.all_in_one_compare"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.canVote_loader.load_canVote_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.all_in_one_compare"], ["", "def", "plot_canVote_allinOne", "(", ")", ":", "\n", "    ", "fname", "=", "\"datasets/canVote_processed/canVote_edgelist.txt\"", "\n", "G_times", "=", "canVote_loader", ".", "load_canVote_temporarl_edgelist", "(", "fname", ")", "\n", "LAD", "=", "[", "2", ",", "7", ",", "11", "]", "\n", "label_sets", "=", "[", "]", "\n", "label_sets", ".", "append", "(", "LAD", ")", "\n", "window", "=", "1", "\n", "initial_window", "=", "2", "\n", "percent_ranked", "=", "0.2", "\n", "\n", "graph_name", "=", "\"canVote\"", "\n", "normal_util", ".", "all_in_one_compare", "(", "G_times", ",", "graph_name", ",", "label_sets", ",", "True", ",", "window", ",", "initial_window", ",", "percent_ranked", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.plot_spectrum": [[114, 117], ["util.normal_util.load_object", "util.normal_util.plot_activity_intensity"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.load_object", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_activity_intensity"], ["", "def", "plot_spectrum", "(", "pkl_name", ",", "graph_name", ")", ":", "\n", "    ", "eigen_slices", "=", "normal_util", ".", "load_object", "(", "pkl_name", ")", "\n", "normal_util", ".", "plot_activity_intensity", "(", "eigen_slices", ",", "graph_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.plot_vis": [[119, 144], ["networkx.spring_layout", "print", "print", "range", "networkx.draw", "pylab.axis", "pylab.savefig", "len", "len", "node_list.append"], "function", ["None"], ["", "def", "plot_vis", "(", "G", ")", ":", "\n", "    ", "pos", "=", "nx", ".", "spring_layout", "(", "G", ")", "\n", "\n", "node_list", "=", "[", "]", "\n", "for", "node", "in", "G", ":", "\n", "        ", "if", "(", "G", ".", "degree", "[", "node", "]", ">", "50", ")", ":", "\n", "            ", "node_list", ".", "append", "(", "node", ")", "\n", "", "", "print", "(", "len", "(", "node_list", ")", ")", "\n", "\n", "print", "(", "node_list", ")", "\n", "\n", "colors", "=", "range", "(", "len", "(", "G", ")", ")", "\n", "options", "=", "{", "\n", "\"nodelist\"", ":", "node_list", ",", "\n", "\"node_size\"", ":", "5", ",", "\n", "\"node_color\"", ":", "\"#ffa600\"", ",", "\n", "\"edge_color\"", ":", "\"#ff6361\"", ",", "\n", "\"width\"", ":", "0.05", "\n", "}", "\n", "\n", "\n", "nx", ".", "draw", "(", "G", ",", "pos", ",", "**", "options", ")", "\n", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "savefig", "(", "'graph_vis.pdf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.plot_illus": [[146, 175], ["networkx.Graph", "nx.Graph.add_edges_from", "list", "networkx.spring_layout", "networkx.draw", "networkx.draw_networkx_labels", "pylab.axis", "pylab.savefig"], "function", ["None"], ["", "def", "plot_illus", "(", ")", ":", "\n", "    ", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "\n", "G", ".", "add_edges_from", "(", "[", "(", "0", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "0", ",", "3", ")", ",", "(", "0", ",", "4", ")", ",", "(", "0", ",", "5", ")", "]", ")", "\n", "node_list", "=", "list", "(", "G", ".", "nodes", ")", "\n", "pos", "=", "nx", ".", "spring_layout", "(", "G", ")", "\n", "\n", "options", "=", "{", "\n", "\"nodelist\"", ":", "node_list", ",", "\n", "\"node_size\"", ":", "500", ",", "\n", "\"node_color\"", ":", "\"#ffa600\"", ",", "\n", "\"edge_color\"", ":", "\"#66E3D8\"", ",", "\n", "\"width\"", ":", "3", "\n", "}", "\n", "\n", "nx", ".", "draw", "(", "G", ",", "pos", ",", "**", "options", ")", "\n", "\n", "labels", "=", "{", "}", "\n", "labels", "[", "0", "]", "=", "'0'", "\n", "labels", "[", "1", "]", "=", "'1'", "\n", "labels", "[", "2", "]", "=", "'2'", "\n", "labels", "[", "3", "]", "=", "'3'", "\n", "labels", "[", "4", "]", "=", "'4'", "\n", "labels", "[", "5", "]", "=", "'5'", "\n", "\n", "nx", ".", "draw_networkx_labels", "(", "G", ",", "pos", ",", "labels", ",", "font_size", "=", "16", ")", "\n", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "savefig", "(", "'graph_illus.pdf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.load_mp": [[177, 182], ["util.normal_util.load_object"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.load_object"], ["", "def", "load_mp", "(", ")", ":", "\n", "    ", "fname", "=", "\"datasets/canVote_processed/mp_dict.pkl\"", "\n", "MP_dict", "=", "normal_util", ".", "load_object", "(", "fname", ")", "\n", "\n", "return", "MP_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.export_gephi": [[190, 274], ["datasets.canVote_loader.load_canVote_temporarl_edgelist", "plot_graph.load_mp", "list", "print", "range", "range", "len", "len", "networkx.write_gexf", "len", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.canVote_loader.load_canVote_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.load_mp"], ["", "def", "export_gephi", "(", ")", ":", "\n", "\n", "    ", "G_times", "=", "canVote_loader", ".", "load_canVote_temporarl_edgelist", "(", "\"datasets/canVote_processed/canVote_edgelist.txt\"", ")", "\n", "MP_dict", "=", "load_mp", "(", ")", "\n", "labels", "=", "list", "(", "range", "(", "2006", ",", "2020", ",", "1", ")", ")", "\n", "print", "(", "len", "(", "MP_dict", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "G_times", ")", ")", ":", "\n", "#party for everyone!", "\n", "        ", "G", "=", "G_times", "[", "i", "]", "\n", "count", "=", "0", "\n", "for", "node", "in", "G", ".", "nodes", ":", "\n", "            ", "if", "(", "node", "in", "MP_dict", ")", ":", "\n", "                ", "if", "(", "len", "(", "MP_dict", "[", "node", "]", "[", "\"party\"", "]", ")", ">", "0", ")", ":", "\n", "                    ", "node_party", "=", "MP_dict", "[", "node", "]", "[", "\"party\"", "]", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "                    ", "node_party", "=", "MP_dict", "[", "node", "]", "[", "\"party\"", "]", "[", "0", "]", "\n", "\n", "", "if", "(", "node_party", "==", "'Conservative'", ")", ":", "\n", "#blue", "\n", "                    ", "G", ".", "nodes", "[", "node", "]", "[", "'viz'", "]", "=", "{", "'color'", ":", "{", "'r'", ":", "49", ",", "'g'", ":", "130", ",", "'b'", ":", "189", ",", "'a'", ":", "0", "}", "}", "\n", "\n", "# if (node_party == 'Progressive Conservative'):", "\n", "#     #Han Purple", "\n", "#     #http://www.flatuicolorpicker.com/blue-rgba-color-model/", "\n", "#     G.nodes[node]['viz'] = {'color': {'r': 77, 'g': 5, 'b': 232, 'a': 1}}", "\n", "\n", "# if (node_party == 'Reform'):", "\n", "#     #light green", "\n", "#     #http://www.flatuicolorpicker.com/green-hex-color-model/", "\n", "#     G.nodes[node]['viz'] = {'color': {'r': 123, 'g': 239, 'b': 178, 'a': 1}}", "\n", "\n", "# if (node_party == 'Canadian Alliance'):", "\n", "#     #Mariner", "\n", "#     #http://www.flatuicolorpicker.com/blue-rgba-color-model/", "\n", "#     G.nodes[node]['viz'] = {'color': {'r': 44, 'g': 130, 'b': 201, 'a': 1}}", "\n", "\n", "", "if", "(", "node_party", "==", "'Progressive Conservative'", ")", ":", "\n", "#blue", "\n", "                    ", "G", ".", "nodes", "[", "node", "]", "[", "'viz'", "]", "=", "{", "'color'", ":", "{", "'r'", ":", "49", ",", "'g'", ":", "130", ",", "'b'", ":", "189", ",", "'a'", ":", "0", "}", "}", "\n", "\n", "", "if", "(", "node_party", "==", "'Reform'", ")", ":", "\n", "#blue", "\n", "                    ", "G", ".", "nodes", "[", "node", "]", "[", "'viz'", "]", "=", "{", "'color'", ":", "{", "'r'", ":", "49", ",", "'g'", ":", "130", ",", "'b'", ":", "189", ",", "'a'", ":", "0", "}", "}", "\n", "\n", "", "if", "(", "node_party", "==", "'Canadian Alliance'", ")", ":", "\n", "#blue", "\n", "                    ", "G", ".", "nodes", "[", "node", "]", "[", "'viz'", "]", "=", "{", "'color'", ":", "{", "'r'", ":", "49", ",", "'g'", ":", "130", ",", "'b'", ":", "189", ",", "'a'", ":", "0", "}", "}", "\n", "\n", "", "if", "(", "node_party", "==", "'Liberal'", ")", ":", "\n", "#red", "\n", "                    ", "G", ".", "nodes", "[", "node", "]", "[", "'viz'", "]", "=", "{", "'color'", ":", "{", "'r'", ":", "227", ",", "'g'", ":", "74", ",", "'b'", ":", "51", ",", "'a'", ":", "0", "}", "}", "\n", "\n", "", "if", "(", "node_party", "==", "'Bloc'", ")", ":", "\n", "#purple", "\n", "                    ", "G", ".", "nodes", "[", "node", "]", "[", "'viz'", "]", "=", "{", "'color'", ":", "{", "'r'", ":", "136", ",", "'g'", ":", "86", ",", "'b'", ":", "167", ",", "'a'", ":", "0", "}", "}", "\n", "\n", "", "if", "(", "node_party", "==", "'NDP'", ")", ":", "\n", "#green ", "\n", "                    ", "G", ".", "nodes", "[", "node", "]", "[", "'viz'", "]", "=", "{", "'color'", ":", "{", "'r'", ":", "49", ",", "'g'", ":", "163", ",", "'b'", ":", "84", ",", "'a'", ":", "0", "}", "}", "\n", "\n", "", "if", "(", "node_party", "==", "'Independent'", ")", ":", "\n", "#black", "\n", "                    ", "G", ".", "nodes", "[", "node", "]", "[", "'viz'", "]", "=", "{", "'color'", ":", "{", "'r'", ":", "99", ",", "'g'", ":", "99", ",", "'b'", ":", "99", ",", "'a'", ":", "0", "}", "}", "\n", "\n", "", "if", "(", "node_party", "==", "'Green'", ")", ":", "\n", "#green ", "\n", "#https://www.greenparty.ca/en/downloads", "\n", "#https://www.color-hex.com/color/3d9b35", "\n", "                    ", "G", ".", "nodes", "[", "node", "]", "[", "'viz'", "]", "=", "{", "'color'", ":", "{", "'r'", ":", "61", ",", "'g'", ":", "155", ",", "'b'", ":", "53", ",", "'a'", ":", "0", "}", "}", "\n", "\n", "\n", "", "", "else", ":", "\n", "#black is default color", "\n", "                ", "G", ".", "nodes", "[", "node", "]", "[", "'viz'", "]", "=", "{", "'color'", ":", "{", "'r'", ":", "99", ",", "'g'", ":", "99", ",", "'b'", ":", "99", ",", "'a'", ":", "0", "}", "}", "\n", "\n", "\n", "\n", "#       graph.node['red']['viz'] = {'color': {'r': 255, 'g': 0, 'b': 0, 'a': 0}}", "\n", "# graph.node['green']['viz'] = {'color': {'r': 0, 'g': 255, 'b': 0, 'a': 0}}", "\n", "# graph.node['blue']['viz'] = {'color': {'r': 0, 'g': 0, 'b': 255, 'a': 0}}", "\n", "# print (count)", "\n", "\n", "", "", "nx", ".", "write_gexf", "(", "G", ",", "\"gephi_new/\"", "+", "str", "(", "labels", "[", "i", "]", ")", "+", "\".gexf\"", ",", "version", "=", "\"1.2draft\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.main": [[285, 287], ["plot_graph.export_gephi"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.plot_graph.export_gephi"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "export_gephi", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Real_Command.run_LAD_real": [[9, 21], ["compute_SVD.compute_legis_SVD", "Anomaly_Detection.USLegis", "compute_SVD.compute_UCI_SVD", "Anomaly_Detection.UCI_Message", "compute_SVD.compute_canVote_SVD", "Anomaly_Detection.canVote"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.compute_legis_SVD", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.USLegis", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.compute_UCI_SVD", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.UCI_Message", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.compute_canVote_SVD", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.canVote"], ["def", "run_LAD_real", "(", "dataset", ",", "num_eigen", ",", "top", ")", ":", "\n", "    ", "if", "(", "dataset", "==", "\"USLegis\"", ")", ":", "\n", "        ", "compute_SVD", ".", "compute_legis_SVD", "(", "num_eigen", "=", "num_eigen", ",", "top", "=", "top", ")", "\n", "Anomaly_Detection", ".", "USLegis", "(", ")", "\n", "\n", "", "if", "(", "dataset", "==", "\"UCI\"", ")", ":", "\n", "        ", "compute_SVD", ".", "compute_UCI_SVD", "(", "num_eigen", "=", "num_eigen", ",", "top", "=", "top", ")", "\n", "Anomaly_Detection", ".", "UCI_Message", "(", ")", "\n", "\n", "", "if", "(", "dataset", "==", "\"canVote\"", ")", ":", "\n", "        ", "compute_SVD", ".", "compute_canVote_SVD", "(", "num_eigen", "=", "num_eigen", ",", "top", "=", "top", ")", "\n", "Anomaly_Detection", ".", "canVote", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Real_Command.main": [[23, 34], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "vars", "Real_Command.run_LAD_real", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Real_Command.run_LAD_real"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'run LAD on real world datasets'", ")", "\n", "parser", ".", "add_argument", "(", "'-d'", ",", "'--dataset'", ",", "\n", "help", "=", "'identifying which dataset to reproduce'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"-n\"", ",", "'--num'", ",", "type", "=", "int", ",", "default", "=", "6", ",", "\n", "help", "=", "\"number of eigenvalues to compute\"", ")", "\n", "parser", ".", "add_argument", "(", "'--top'", ",", "dest", "=", "'top'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"To compute top eigenvalues\"", ")", "\n", "parser", ".", "add_argument", "(", "'--bottom'", ",", "dest", "=", "'top'", ",", "action", "=", "'store_false'", ",", "help", "=", "\"To compute bottom eigenvalues\"", ")", "\n", "parser", ".", "set_defaults", "(", "top", "=", "True", ")", "\n", "args", "=", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "run_LAD_real", "(", "args", "[", "\"dataset\"", "]", ",", "args", "[", "\"num\"", "]", ",", "args", "[", "\"top\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.compute_accuracy": [[17, 25], ["len"], "function", ["None"], ["def", "compute_accuracy", "(", "anomalies", ",", "real_events", ")", ":", "\n", "\n", "    ", "correct", "=", "0", "\n", "for", "anomaly", "in", "anomalies", ":", "\n", "        ", "if", "anomaly", "in", "real_events", ":", "\n", "            ", "correct", "=", "correct", "+", "1", "\n", "\n", "", "", "return", "(", "correct", "/", "len", "(", "real_events", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.toTensor": [[31, 43], ["tensorly.tensor", "networkx.to_numpy_matrix", "numpy.resize", "numpy.asarray", "np.asarray.astype", "tl.tensor.append"], "function", ["None"], ["def", "toTensor", "(", "G_times", ")", ":", "\n", "    ", "T", "=", "[", "]", "\n", "#load adjacency matrix from each time step and add it to tensor", "\n", "for", "G", "in", "G_times", ":", "\n", "        ", "A", "=", "nx", ".", "to_numpy_matrix", "(", "G", ")", "\n", "A", "=", "np", ".", "resize", "(", "A", ",", "(", "100", ",", "100", ")", ")", "\n", "A", "=", "np", ".", "asarray", "(", "A", ")", "\n", "A", ".", "astype", "(", "float", ")", "\n", "T", ".", "append", "(", "A", ")", "\n", "\n", "", "T", "=", "tl", ".", "tensor", "(", "T", ")", "\n", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.apply_parafac": [[47, 53], ["tensorly.decomposition.parafac", "print", "print", "str", "len"], "function", ["None"], ["def", "apply_parafac", "(", "T", ",", "dimension", "=", "3", ")", ":", "\n", "    ", "factors", "=", "parafac", "(", "T", ",", "rank", "=", "dimension", ")", "\n", "print", "(", "\"there are \"", "+", "str", "(", "len", "(", "factors", ")", ")", ")", "\n", "# print (factors[1])", "\n", "print", "(", "[", "f", ".", "shape", "for", "f", "in", "factors", "[", "1", "]", "]", ")", "\n", "return", "factors", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.find_factors_UCI": [[56, 69], ["datasets.UCI_loader.load_temporarl_edgelist", "compute_CPD.toTensor", "print", "print", "compute_CPD.apply_parafac", "print", "print", "util.normal_util.save_object", "datetime.datetime.now", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.toTensor", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.apply_parafac", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object"], ["", "def", "find_factors_UCI", "(", ")", ":", "\n", "    ", "fname", "=", "\"datasets/UCI_processed/OCnodeslinks_chars.txt\"", "\n", "max_nodes", "=", "1901", "\n", "G_times", "=", "UCI_loader", ".", "load_temporarl_edgelist", "(", "fname", ",", "max_nodes", "=", "max_nodes", ")", "\n", "T", "=", "toTensor", "(", "G_times", ",", "max_nodes", ")", "\n", "dim", "=", "3", "\n", "print", "(", "\"CPD starts\"", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "factors", "=", "apply_parafac", "(", "T", ",", "dimension", "=", "dim", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "\"CPD ends\"", ")", "\n", "tname", "=", "\"UCI_factors.pkl\"", "\n", "normal_util", ".", "save_object", "(", "factors", ",", "tname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.LocalOutlierFactor_anomalies": [[71, 95], ["print", "len", "sklearn.neighbors.LocalOutlierFactor", "sklearn.neighbors.LocalOutlierFactor.fit_predict", "range", "anomalies.append"], "function", ["None"], ["", "def", "LocalOutlierFactor_anomalies", "(", "factors", ",", "n_neighbors", "=", "20", ")", ":", "\n", "    ", "anomalies", "=", "[", "]", "\n", "Temporal_factors", "=", "factors", "[", "1", "]", "[", "0", "]", "\n", "print", "(", "Temporal_factors", ".", "shape", ")", "\n", "\n", "total_t", "=", "len", "(", "Temporal_factors", ")", "\n", "'''\n    Use the LocalOutlierFactor algorithm from Sklearn \n    uses k nearest neighbor to detect outliers\n    https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.LocalOutlierFactor.html#sklearn.neighbors.LocalOutlierFactor\n    '''", "\n", "#n_neighbors = total_t  #start with 20  ", "\n", "clf", "=", "LocalOutlierFactor", "(", "n_neighbors", "=", "n_neighbors", ")", "\n", "predictions", "=", "clf", ".", "fit_predict", "(", "Temporal_factors", ")", "\n", "for", "i", "in", "range", "(", "total_t", ")", ":", "\n", "        ", "if", "(", "predictions", "[", "i", "]", "==", "-", "1", ")", ":", "\n", "            ", "anomalies", ".", "append", "(", "i", ")", "\n", "", "", "return", "anomalies", "\n", "\n", "\n", "'''\n    eps are the maximum distance between two samples to be considered as neighbors\n    min_samples are the number of samples (or total weight) in a neighborhood for a point to be considered as a core point.\n    '''", "\n", "", "def", "DBSCAN_anomalies", "(", "factors", ",", "eps", "=", "3", ",", "min_samples", "=", "2", ",", "min_size", "=", "10", ")", ":", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.DBSCAN_anomalies": [[95, 128], ["print", "len", "sklearn.cluster.DBSCAN", "sklearn.cluster.DBSCAN.fit_predict", "rare_labels.append", "range", "rare_labels.append", "anomalies.append"], "function", ["None"], ["", "def", "DBSCAN_anomalies", "(", "factors", ",", "eps", "=", "3", ",", "min_samples", "=", "2", ",", "min_size", "=", "10", ")", ":", "\n", "    ", "anomalies", "=", "[", "]", "\n", "Temporal_factors", "=", "factors", "[", "1", "]", "[", "0", "]", "\n", "print", "(", "Temporal_factors", ".", "shape", ")", "\n", "total_t", "=", "len", "(", "Temporal_factors", ")", "\n", "\n", "\n", "clf", "=", "DBSCAN", "(", "eps", "=", "eps", ",", "min_samples", "=", "min_samples", ")", "\n", "predictions", "=", "clf", ".", "fit_predict", "(", "Temporal_factors", ")", "\n", "\n", "'''\n    Use the DBSCAN algorithm from Sklearn \n    https://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html#sklearn.cluster.DBSCAN.fit_predict\n    '''", "\n", "count_labels", "=", "{", "}", "\n", "for", "label", "in", "predictions", ":", "\n", "        ", "if", "label", "not", "in", "count_labels", ":", "\n", "            ", "count_labels", "[", "label", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "count_labels", "[", "label", "]", "=", "count_labels", "[", "label", "]", "+", "1", "\n", "\n", "", "", "rare_labels", "=", "[", "]", "#find all clusters that have size smaller than 5", "\n", "for", "key", "in", "count_labels", ":", "\n", "        ", "if", "(", "count_labels", "[", "key", "]", "<=", "min_size", ")", ":", "\n", "            ", "rare_labels", ".", "append", "(", "key", ")", "\n", "\n", "", "", "rare_labels", ".", "append", "(", "-", "1", ")", "\n", "\n", "#-1 is when it doesn't fit any density centers", "\n", "for", "i", "in", "range", "(", "total_t", ")", ":", "\n", "        ", "if", "(", "predictions", "[", "i", "]", "in", "rare_labels", ")", ":", "\n", "            ", "anomalies", ".", "append", "(", "i", ")", "\n", "", "", "return", "anomalies", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.find_synthetic_factors": [[132, 158], ["datasets.SBM_loader.load_temporarl_edgelist", "compute_CPD.toTensor", "print", "print", "compute_CPD.apply_parafac", "util.normal_util.save_object", "print", "print", "compute_CPD.LocalOutlierFactor_anomalies", "compute_CPD.compute_accuracy", "print", "print", "datetime.datetime.now", "datetime.datetime.now", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.toTensor", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.apply_parafac", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.LocalOutlierFactor_anomalies", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.compute_accuracy"], ["", "def", "find_synthetic_factors", "(", "fname", ")", ":", "\n", "    ", "fname", "=", "\"datasets/SBM_processed/\"", "+", "fname", "+", "\".txt\"", "\n", "max_nodes", "=", "500", "\n", "num_timestamps", "=", "151", "\n", "G_times", "=", "SBM_loader", ".", "load_temporarl_edgelist", "(", "fname", ")", "\n", "T", "=", "toTensor", "(", "G_times", ")", "\n", "dim", "=", "30", "\n", "print", "(", "\"CPD starts\"", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "factors", "=", "apply_parafac", "(", "T", ",", "dimension", "=", "dim", ")", "\n", "normal_util", ".", "save_object", "(", "factors", ",", "\"SBM_factors\"", "+", "str", "(", "dim", ")", "+", "\".pkl\"", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "\"CPD ends\"", ")", "\n", "\n", "#factors = normal_util.load_object(\"SBM_factors30.pkl\")", "\n", "\n", "real_events", "=", "[", "16", ",", "31", ",", "61", ",", "76", ",", "91", ",", "106", ",", "136", "]", "\n", "\n", "'''\n    either can be an option here\n    '''", "\n", "anomalies", "=", "LocalOutlierFactor_anomalies", "(", "factors", ",", "n_neighbors", "=", "20", ")", "\n", "#anomalies = DBSCAN_anomalies(factors, eps=3, min_samples=2, min_size=10)", "\n", "accuracy", "=", "compute_accuracy", "(", "anomalies", ",", "real_events", ")", "\n", "print", "(", "anomalies", ")", "\n", "print", "(", "\"prediction accuracy is \"", "+", "str", "(", "accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.find_UCI_factors": [[160, 181], ["datasets.UCI_loader.load_temporarl_edgelist", "compute_CPD.toTensor", "print", "print", "compute_CPD.apply_parafac", "util.normal_util.save_object", "print", "print", "compute_CPD.DBSCAN_anomalies", "compute_CPD.compute_accuracy", "print", "print", "datetime.datetime.now", "datetime.datetime.now", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.toTensor", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.apply_parafac", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.DBSCAN_anomalies", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.compute_accuracy"], ["", "def", "find_UCI_factors", "(", ")", ":", "\n", "    ", "fname", "=", "\"datasets/UCI_processed/OCnodeslinks_chars.txt\"", "\n", "max_nodes", "=", "1901", "\n", "num_timestamps", "=", "196", "\n", "G_times", "=", "UCI_loader", ".", "load_temporarl_edgelist", "(", "fname", ",", "max_nodes", "=", "max_nodes", ")", "\n", "T", "=", "toTensor", "(", "G_times", ")", "\n", "dim", "=", "30", "\n", "print", "(", "\"CPD starts\"", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "factors", "=", "apply_parafac", "(", "T", ",", "dimension", "=", "dim", ")", "\n", "normal_util", ".", "save_object", "(", "factors", ",", "\"UCI_factors\"", "+", "str", "(", "dim", ")", "+", "\".pkl\"", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "\"CPD ends\"", ")", "\n", "#factors = normal_util.load_object(\"UCI_factors1000.pkl\")", "\n", "\n", "real_events", "=", "[", "65", ",", "158", "]", "\n", "anomalies", "=", "DBSCAN_anomalies", "(", "factors", ",", "eps", "=", "3", ",", "min_samples", "=", "2", ",", "min_size", "=", "10", ")", "\n", "#anomalies = LocalOutlierFactor_anomalies(factors, n_neighbors=20)", "\n", "accuracy", "=", "compute_accuracy", "(", "anomalies", ",", "real_events", ")", "\n", "print", "(", "anomalies", ")", "\n", "print", "(", "\"prediction accuracy is \"", "+", "str", "(", "accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.find_USLegis_factors": [[183, 202], ["datasets.USLegis_loader.load_legis_temporarl_edgelist", "compute_CPD.toTensor", "print", "print", "compute_CPD.apply_parafac", "print", "print", "util.normal_util.save_object", "compute_CPD.LocalOutlierFactor_anomalies", "compute_CPD.compute_accuracy", "print", "print", "datetime.datetime.now", "datetime.datetime.now", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.USLegis_loader.load_legis_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.toTensor", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.apply_parafac", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.LocalOutlierFactor_anomalies", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.compute_accuracy"], ["", "def", "find_USLegis_factors", "(", ")", ":", "\n", "    ", "fname", "=", "\"datasets/USLegis_processed/LegisEdgelist.txt\"", "\n", "G_times", "=", "USLegis_loader", ".", "load_legis_temporarl_edgelist", "(", "fname", ")", "\n", "T", "=", "toTensor", "(", "G_times", ")", "\n", "\n", "dim", "=", "10", "\n", "print", "(", "\"CPD starts\"", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "factors", "=", "apply_parafac", "(", "T", ",", "dimension", "=", "dim", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "\"CPD ends\"", ")", "\n", "normal_util", ".", "save_object", "(", "factors", ",", "\"USLegis_factors\"", "+", "str", "(", "dim", ")", "+", "\".pkl\"", ")", "\n", "\n", "real_events", "=", "[", "3", ",", "7", "]", "\n", "\n", "anomalies", "=", "LocalOutlierFactor_anomalies", "(", "factors", ",", "n_neighbors", "=", "5", ")", "\n", "accuracy", "=", "compute_accuracy", "(", "anomalies", ",", "real_events", ")", "\n", "print", "(", "anomalies", ")", "\n", "print", "(", "\"prediction accuracy is \"", "+", "str", "(", "accuracy", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.find_canVote_factors": [[204, 219], ["datasets.canVote_loader.load_canVote_temporarl_edgelist", "compute_CPD.toTensor", "print", "print", "compute_CPD.apply_parafac", "print", "print", "util.normal_util.save_object", "compute_CPD.LocalOutlierFactor_anomalies", "print", "datetime.datetime.now", "datetime.datetime.now", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.canVote_loader.load_canVote_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.toTensor", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.apply_parafac", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.LocalOutlierFactor_anomalies"], ["", "def", "find_canVote_factors", "(", ")", ":", "\n", "    ", "fname", "=", "\"datasets/canVote_processed/canVote_edgelist.txt\"", "\n", "G_times", "=", "canVote_loader", ".", "load_canVote_temporarl_edgelist", "(", "fname", ")", "\n", "\n", "T", "=", "toTensor", "(", "G_times", ")", "\n", "dim", "=", "10", "\n", "print", "(", "\"CPD starts\"", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "factors", "=", "apply_parafac", "(", "T", ",", "dimension", "=", "dim", ")", "\n", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "\n", "print", "(", "\"CPD ends\"", ")", "\n", "normal_util", ".", "save_object", "(", "factors", ",", "\"canVote_factors\"", "+", "str", "(", "dim", ")", "+", "\".pkl\"", ")", "\n", "\n", "anomalies", "=", "LocalOutlierFactor_anomalies", "(", "factors", ",", "n_neighbors", "=", "7", ")", "\n", "print", "(", "anomalies", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.main": [[222, 225], ["compute_CPD.find_synthetic_factors"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_CPD.find_synthetic_factors"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "find_synthetic_factors", "(", "\"eventCP_0.05_0.25_1.0\"", ")", "\n", "#find_UCI_factors()", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.SBM_Command.run_LAD_SBM": [[9, 12], ["compute_SVD.compute_synthetic_SVD", "Anomaly_Detection.synthetic"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.compute_synthetic_SVD", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.synthetic"], ["def", "run_LAD_SBM", "(", "fname", ",", "num_eigen", ",", "top", ")", ":", "\n", "    ", "compute_SVD", ".", "compute_synthetic_SVD", "(", "fname", ",", "num_eigen", "=", "num_eigen", ",", "top", "=", "top", ")", "\n", "Anomaly_Detection", ".", "synthetic", "(", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.SBM_Command.main": [[14, 28], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "vars", "SBM_Command.run_LAD_SBM", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.SBM_Command.run_LAD_SBM"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'run LAD on synthetic experiments'", ")", "\n", "parser", ".", "add_argument", "(", "'-f'", ",", "'--file'", ",", "\n", "help", "=", "'decide which synthetic edgelist to run on'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"-n\"", ",", "'--num'", ",", "type", "=", "int", ",", "default", "=", "499", ",", "\n", "help", "=", "\"number of eigenvalues to compute\"", ")", "\n", "parser", ".", "add_argument", "(", "'--top'", ",", "dest", "=", "'top'", ",", "action", "=", "'store_true'", ",", "help", "=", "\"To compute top eigenvalues\"", ")", "\n", "parser", ".", "add_argument", "(", "'--bottom'", ",", "dest", "=", "'top'", ",", "action", "=", "'store_false'", ",", "help", "=", "\"To compute bottom eigenvalues\"", ")", "\n", "parser", ".", "set_defaults", "(", "top", "=", "True", ")", "\n", "\n", "\n", "\n", "args", "=", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "run_LAD_SBM", "(", "args", "[", "\"file\"", "]", ",", "args", "[", "\"num\"", "]", ",", "args", "[", "\"top\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.random_SVD": [[13, 50], ["sklearn.utils.extmath.randomized_svd", "list().index", "activity_vecs.append", "Temporal_eigenvalues.append", "print", "networkx.to_numpy_matrix", "G.to_undirected", "networkx.to_scipy_sparse_matrix", "A.asfptype.asfptype", "max", "numpy.asarray", "numpy.asarray", "list", "list", "str"], "function", ["None"], ["def", "random_SVD", "(", "G_times", ",", "directed", "=", "True", ",", "num_eigen", "=", "6", ",", "top", "=", "True", ")", ":", "\n", "    ", "Temporal_eigenvalues", "=", "[", "]", "\n", "activity_vecs", "=", "[", "]", "#eigenvector of the largest eigenvalue", "\n", "counter", "=", "0", "\n", "\n", "\n", "for", "G", "in", "G_times", ":", "\n", "        ", "if", "(", "directed", ")", ":", "\n", "            ", "A", "=", "nx", ".", "to_numpy_matrix", "(", "G", ")", "\n", "\n", "", "else", ":", "\n", "            ", "G2", "=", "G", ".", "to_undirected", "(", ")", "\n", "A", "=", "nx", ".", "to_scipy_sparse_matrix", "(", "G", ")", "\n", "A", "=", "A", ".", "asfptype", "(", ")", "\n", "\n", "", "if", "(", "top", ")", ":", "\n", "            ", "which", "=", "\"LM\"", "\n", "", "else", ":", "\n", "            ", "which", "=", "\"SM\"", "\n", "\n", "\n", "#compute svd, find diagonal matrix and append the diagonal entries", "\n", "#only consider 6 eigenvalues for now as the number of graph is small", "\n", "#num_eigenvalues=6", "\n", "#k=min(L.shape)-1", "\n", "", "u", ",", "s", ",", "vh", "=", "randomized_svd", "(", "A", ",", "num_eigen", ")", "\n", "vals", "=", "s", "\n", "vecs", "=", "u", "\n", "max_index", "=", "list", "(", "vals", ")", ".", "index", "(", "max", "(", "list", "(", "vals", ")", ")", ")", "\n", "activity_vecs", ".", "append", "(", "np", ".", "asarray", "(", "vecs", "[", "max_index", "]", ")", ")", "\n", "#Temporal_eigenvalues.append(np.asarray(vals))", "\n", "Temporal_eigenvalues", ".", "append", "(", "np", ".", "asarray", "(", "vals", ")", ")", "\n", "\n", "print", "(", "\"processing \"", "+", "str", "(", "counter", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "counter", "=", "counter", "+", "1", "\n", "\n", "", "return", "(", "Temporal_eigenvalues", ",", "activity_vecs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.find_eigs": [[52, 68], ["networkx.to_numpy_matrix", "numpy.linalg.eig", "list().index", "activity_vecs.append", "Temporal_eigenvalues.append", "print", "max", "numpy.asarray", "numpy.asarray", "list", "list", "str"], "function", ["None"], ["", "def", "find_eigs", "(", "G_times", ",", "max_size", ",", "directed", "=", "True", ")", ":", "\n", "    ", "Temporal_eigenvalues", "=", "[", "]", "\n", "activity_vecs", "=", "[", "]", "#eigenvector of the largest eigenvalue", "\n", "counter", "=", "0", "\n", "\n", "\n", "for", "G", "in", "G_times", ":", "\n", "        ", "A", "=", "nx", ".", "to_numpy_matrix", "(", "G", ")", "\n", "vals", ",", "vecs", "=", "LA", ".", "eig", "(", "A", ")", "\n", "max_index", "=", "list", "(", "vals", ")", ".", "index", "(", "max", "(", "list", "(", "vals", ")", ")", ")", "\n", "activity_vecs", ".", "append", "(", "np", ".", "asarray", "(", "vecs", "[", "max_index", "]", ")", ")", "\n", "Temporal_eigenvalues", ".", "append", "(", "np", ".", "asarray", "(", "vals", ")", ")", "\n", "print", "(", "\"processing \"", "+", "str", "(", "counter", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "counter", "=", "counter", "+", "1", "\n", "\n", "", "return", "(", "Temporal_eigenvalues", ",", "activity_vecs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.SVD_perSlice": [[82, 116], ["scipy.sparse.linalg.svds", "list().index", "activity_vecs.append", "Temporal_eigenvalues.append", "print", "len", "range", "networkx.directed_laplacian_matrix", "networkx.laplacian_matrix", "L.asfptype.asfptype", "max", "numpy.asarray", "numpy.asarray", "len", "G.add_node", "list", "list", "str"], "function", ["None"], ["def", "SVD_perSlice", "(", "G_times", ",", "directed", "=", "True", ",", "num_eigen", "=", "6", ",", "top", "=", "True", ",", "max_size", "=", "500", ")", ":", "\n", "    ", "Temporal_eigenvalues", "=", "[", "]", "\n", "activity_vecs", "=", "[", "]", "#eigenvector of the largest eigenvalue", "\n", "counter", "=", "0", "\n", "\n", "for", "G", "in", "G_times", ":", "\n", "        ", "if", "(", "len", "(", "G", ")", "<", "max_size", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "G", ")", ",", "max_size", ")", ":", "\n", "                ", "G", ".", "add_node", "(", "-", "1", "*", "i", ")", "#add empty node with no connectivity (zero padding)", "\n", "", "", "if", "(", "directed", ")", ":", "\n", "            ", "L", "=", "nx", ".", "directed_laplacian_matrix", "(", "G", ")", "\n", "\n", "", "else", ":", "\n", "            ", "L", "=", "nx", ".", "laplacian_matrix", "(", "G", ")", "\n", "L", "=", "L", ".", "asfptype", "(", ")", "\n", "\n", "", "if", "(", "top", ")", ":", "\n", "            ", "which", "=", "\"LM\"", "\n", "", "else", ":", "\n", "            ", "which", "=", "\"SM\"", "\n", "\n", "", "u", ",", "s", ",", "vh", "=", "svds", "(", "L", ",", "k", "=", "num_eigen", ",", "which", "=", "which", ")", "\n", "# u, s, vh = randomized_svd(L, num_eigen)", "\n", "vals", "=", "s", "\n", "vecs", "=", "u", "\n", "#vals, vecs= LA.eig(L)", "\n", "max_index", "=", "list", "(", "vals", ")", ".", "index", "(", "max", "(", "list", "(", "vals", ")", ")", ")", "\n", "activity_vecs", ".", "append", "(", "np", ".", "asarray", "(", "vecs", "[", "max_index", "]", ")", ")", "\n", "Temporal_eigenvalues", ".", "append", "(", "np", ".", "asarray", "(", "vals", ")", ")", "\n", "\n", "print", "(", "\"processing \"", "+", "str", "(", "counter", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "counter", "=", "counter", "+", "1", "\n", "\n", "", "return", "(", "Temporal_eigenvalues", ",", "activity_vecs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.limited_eigenVal": [[125, 171], ["numpy.zeros", "range", "scipy.sparse.csr_matrix", "L.asfptype.asfptype", "scipy.sparse.linalg.svds", "list().index", "activity_vecs.append", "Temporal_eigenvalues.append", "print", "max", "numpy.asarray", "numpy.asarray", "numpy.sum", "list", "list", "str"], "function", ["None"], ["def", "limited_eigenVal", "(", "G_times", ",", "directed", "=", "True", ",", "num_eigen", "=", "6", ",", "max_nodes", "=", "88282", ",", "top", "=", "True", ")", ":", "\n", "    ", "Temporal_eigenvalues", "=", "[", "]", "\n", "activity_vecs", "=", "[", "]", "#eigenvector of the largest eigenvalue", "\n", "counter", "=", "0", "\n", "\n", "#D are degree for each node at diagonal entries ", "\n", "#L = -A + D", "\n", "\n", "for", "G", "in", "G_times", ":", "\n", "\n", "#1. construct a 0 matrix", "\n", "        ", "L", "=", "np", ".", "zeros", "(", "(", "max_nodes", ",", "max_nodes", ")", ",", "dtype", "=", "np", ".", "int8", ")", "\n", "\n", "#2. add the adjacency edges (out edges)", "\n", "# -A", "\n", "for", "(", "u", ",", "v", ")", "in", "G", ":", "\n", "            ", "L", "[", "u", ",", "v", "]", "=", "L", "[", "u", ",", "v", "]", "-", "1", "\n", "\n", "#consider outdegrees", "\n", "#3. compute the out degree for each node", "\n", "# +D", "\n", "", "for", "i", "in", "range", "(", "0", ",", "max_nodes", ")", ":", "\n", "            ", "L", "[", "i", ",", "i", "]", "=", "L", "[", "i", ",", "i", "]", "+", "np", ".", "sum", "(", "L", "[", "i", "]", ")", "\n", "\n", "", "L", "=", "sparse", ".", "csr_matrix", "(", "L", ")", "\n", "L", "=", "L", ".", "asfptype", "(", ")", "\n", "\n", "if", "(", "top", ")", ":", "\n", "            ", "which", "=", "\"LM\"", "\n", "", "else", ":", "\n", "            ", "which", "=", "\"SM\"", "\n", "\n", "\n", "#compute svd, find diagonal matrix and append the diagonal entries", "\n", "", "u", ",", "s", ",", "vh", "=", "svds", "(", "L", ",", "k", "=", "num_eigen", ",", "which", "=", "which", ")", "\n", "vals", "=", "s", "\n", "vecs", "=", "u", "\n", "\n", "max_index", "=", "list", "(", "vals", ")", ".", "index", "(", "max", "(", "list", "(", "vals", ")", ")", ")", "\n", "activity_vecs", ".", "append", "(", "np", ".", "asarray", "(", "vecs", "[", "max_index", "]", ")", ")", "\n", "Temporal_eigenvalues", ".", "append", "(", "np", ".", "asarray", "(", "vals", ")", ")", "\n", "\n", "print", "(", "\"processing \"", "+", "str", "(", "counter", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "counter", "=", "counter", "+", "1", "\n", "\n", "", "return", "(", "Temporal_eigenvalues", ",", "activity_vecs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.adj_eigenvecs_perSlice": [[181, 212], ["scipy.sparse.linalg.svds", "list().index", "activity_vecs.append", "Temporal_eigenvalues.append", "print", "networkx.to_numpy_matrix", "G.to_undirected", "networkx.to_scipy_sparse_matrix", "A.asfptype.asfptype", "max", "numpy.asarray", "numpy.asarray", "list", "list", "str"], "function", ["None"], ["def", "adj_eigenvecs_perSlice", "(", "G_times", ",", "directed", "=", "True", ",", "num_eigen", "=", "6", ",", "top", "=", "True", ")", ":", "\n", "    ", "Temporal_eigenvalues", "=", "[", "]", "\n", "activity_vecs", "=", "[", "]", "#eigenvector of the largest eigenvalue", "\n", "counter", "=", "0", "\n", "\n", "\n", "for", "G", "in", "G_times", ":", "\n", "        ", "if", "(", "directed", ")", ":", "\n", "            ", "A", "=", "nx", ".", "to_numpy_matrix", "(", "G", ")", "\n", "\n", "", "else", ":", "\n", "            ", "G2", "=", "G", ".", "to_undirected", "(", ")", "\n", "A", "=", "nx", ".", "to_scipy_sparse_matrix", "(", "G", ")", "\n", "A", "=", "A", ".", "asfptype", "(", ")", "\n", "\n", "", "if", "(", "top", ")", ":", "\n", "            ", "which", "=", "\"LM\"", "\n", "", "else", ":", "\n", "            ", "which", "=", "\"SM\"", "\n", "", "u", ",", "s", ",", "vh", "=", "svds", "(", "A", ",", "k", "=", "num_eigen", ",", "which", "=", "which", ")", "\n", "vals", "=", "s", "\n", "vecs", "=", "u", "\n", "\n", "max_index", "=", "list", "(", "vals", ")", ".", "index", "(", "max", "(", "list", "(", "vals", ")", ")", ")", "\n", "activity_vecs", ".", "append", "(", "np", ".", "asarray", "(", "vecs", "[", "max_index", "]", ")", ")", "\n", "Temporal_eigenvalues", ".", "append", "(", "np", ".", "asarray", "(", "vals", ")", ")", "\n", "\n", "print", "(", "\"processing \"", "+", "str", "(", "counter", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "counter", "=", "counter", "+", "1", "\n", "\n", "", "return", "(", "Temporal_eigenvalues", ",", "activity_vecs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.compute_diags": [[218, 227], ["compute_SVD.SVD_perSlice", "util.normal_util.save_object", "util.normal_util.save_object", "datasets.UCI_loader.load_temporarl_edgelist", "DBLP_loader.load_dblp_temporarl_edgelist"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.SVD_perSlice", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist"], ["def", "compute_diags", "(", "outEigenFile", ",", "outVecFile", ",", "fname", "=", "\"datasets/OCnodeslinks_chars.txt\"", ",", "max_nodes", "=", "1901", ",", "UCI", "=", "True", ")", ":", "\n", "    ", "if", "UCI", ":", "\n", "        ", "G_times", "=", "UCI_loader", ".", "load_temporarl_edgelist", "(", "fname", ",", "max_nodes", "=", "max_nodes", ")", "\n", "", "else", ":", "\n", "        ", "G_times", "=", "DBLP_loader", ".", "load_dblp_temporarl_edgelist", "(", "fname", ",", "max_nodes", "=", "max_nodes", ")", "\n", "\n", "", "(", "Temporal_eigenvalues", ",", "activity_vecs", ")", "=", "SVD_perSlice", "(", "G_times", ",", "directed", "=", "UCI", ")", "\n", "normal_util", ".", "save_object", "(", "Temporal_eigenvalues", ",", "outEigenFile", ")", "\n", "normal_util", ".", "save_object", "(", "activity_vecs", ",", "outVecFile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.compute_adj_SVD": [[231, 239], ["compute_SVD.adj_eigenvecs_perSlice", "util.normal_util.save_object", "util.normal_util.save_object", "datasets.UCI_loader.load_temporarl_edgelist", "DBLP_loader.load_dblp_temporarl_edgelist"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.adj_eigenvecs_perSlice", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist"], ["", "def", "compute_adj_SVD", "(", "outEigenFile", ",", "outVecFile", ",", "fname", "=", "\"datasets/OCnodeslinks_chars.txt\"", ",", "max_nodes", "=", "1901", ",", "UCI", "=", "True", ")", ":", "\n", "    ", "if", "UCI", ":", "\n", "        ", "G_times", "=", "UCI_loader", ".", "load_temporarl_edgelist", "(", "fname", ",", "max_nodes", "=", "max_nodes", ")", "\n", "", "else", ":", "\n", "        ", "G_times", "=", "DBLP_loader", ".", "load_dblp_temporarl_edgelist", "(", "fname", ",", "max_nodes", "=", "max_nodes", ")", "\n", "", "(", "Temporal_eigenvalues", ",", "activity_vecs", ")", "=", "adj_eigenvecs_perSlice", "(", "G_times", ",", "directed", "=", "UCI", ")", "\n", "normal_util", ".", "save_object", "(", "Temporal_eigenvalues", ",", "outEigenFile", ")", "\n", "normal_util", ".", "save_object", "(", "activity_vecs", ",", "outVecFile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.visiualize_vecs_UCI": [[241, 255], ["util.normal_util.load_object", "util.normal_util.load_object", "range", "range", "util.normal_util.plot_activity_intensity", "util.normal_util.plot_activity_intensity", "len", "len", "activity_vecs[].flatten", "numpy.asarray", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.load_object", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.load_object", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_activity_intensity", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_activity_intensity"], ["", "def", "visiualize_vecs_UCI", "(", "eigen_file", ",", "vec_file", ",", "eigen_name", ",", "vec_name", ")", ":", "\n", "    ", "Temporal_eigenvalues", "=", "normal_util", ".", "load_object", "(", "eigen_file", ")", "\n", "activity_vecs", "=", "normal_util", ".", "load_object", "(", "vec_file", ")", "\n", "limit", "=", "5", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "Temporal_eigenvalues", ")", ")", ":", "\n", "        ", "Temporal_eigenvalues", "[", "i", "]", "=", "Temporal_eigenvalues", "[", "i", "]", "[", "0", ":", "limit", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "activity_vecs", ")", ")", ":", "\n", "        ", "activity_vecs", "[", "i", "]", "=", "activity_vecs", "[", "i", "]", ".", "flatten", "(", ")", "[", "0", ":", "limit", "]", "\n", "\n", "", "graph_name", "=", "\"UCI\"", "\n", "normal_util", ".", "plot_activity_intensity", "(", "np", ".", "asarray", "(", "Temporal_eigenvalues", ")", ".", "real", ",", "eigen_name", ")", "\n", "normal_util", ".", "plot_activity_intensity", "(", "np", ".", "asarray", "(", "activity_vecs", ")", ".", "real", ",", "vec_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.compute_synthetic_SVD": [[259, 280], ["datasets.SBM_loader.load_temporarl_edgelist", "compute_SVD.SVD_perSlice", "util.normal_util.save_object"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.SVD_perSlice", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object"], ["", "def", "compute_synthetic_SVD", "(", "fname", ",", "num_eigen", "=", "499", ",", "top", "=", "True", ")", ":", "\n", "\n", "    ", "edgefile", "=", "\"datasets/SBM_processed/\"", "+", "fname", "+", "\".txt\"", "\n", "\n", "'''\n    careful\n    '''", "\n", "\n", "\n", "max_nodes", "=", "1000", "\n", "\n", "\n", "\n", "\n", "max_time", "=", "151", "\n", "directed", "=", "False", "\n", "\n", "G_times", "=", "SBM_loader", ".", "load_temporarl_edgelist", "(", "edgefile", ")", "\n", "\n", "(", "Temporal_eigenvalues", ",", "activity_vecs", ")", "=", "SVD_perSlice", "(", "G_times", ",", "directed", "=", "directed", ",", "num_eigen", "=", "num_eigen", ",", "top", "=", "top", ",", "max_size", "=", "max_nodes", ")", "\n", "normal_util", ".", "save_object", "(", "Temporal_eigenvalues", ",", "fname", "+", "\".pkl\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.compute_legis_SVD": [[283, 291], ["datasets.USLegis_loader.load_legis_temporarl_edgelist", "compute_SVD.SVD_perSlice", "util.normal_util.save_object"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.USLegis_loader.load_legis_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.SVD_perSlice", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object"], ["", "def", "compute_legis_SVD", "(", "num_eigen", "=", "6", ",", "top", "=", "True", ")", ":", "\n", "    ", "fname", "=", "\"datasets/USLegis_processed/LegisEdgelist.txt\"", "\n", "directed", "=", "False", "\n", "\n", "G_times", "=", "USLegis_loader", ".", "load_legis_temporarl_edgelist", "(", "fname", ")", "\n", "max_nodes", "=", "102", "\n", "(", "Temporal_eigenvalues", ",", "activity_vecs", ")", "=", "SVD_perSlice", "(", "G_times", ",", "directed", "=", "directed", ",", "num_eigen", "=", "num_eigen", ",", "top", "=", "top", ",", "max_size", "=", "max_nodes", ")", "\n", "normal_util", ".", "save_object", "(", "Temporal_eigenvalues", ",", "\"USLegis_L_singular.pkl\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.compute_canVote_SVD": [[295, 307], ["datasets.canVote_loader.load_canVote_temporarl_edgelist", "print", "compute_SVD.SVD_perSlice", "util.normal_util.save_object", "len", "len"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.canVote_loader.load_canVote_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.SVD_perSlice", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object"], ["", "def", "compute_canVote_SVD", "(", "num_eigen", "=", "338", ",", "top", "=", "True", ")", ":", "\n", "    ", "fname", "=", "\"datasets/canVote_processed/canVote_edgelist.txt\"", "\n", "directed", "=", "True", "\n", "G_times", "=", "canVote_loader", ".", "load_canVote_temporarl_edgelist", "(", "fname", ")", "\n", "max_len", "=", "0", "\n", "for", "G", "in", "G_times", ":", "\n", "        ", "if", "(", "len", "(", "G", ")", ">", "max_len", ")", ":", "\n", "            ", "max_len", "=", "len", "(", "G", ")", "\n", "", "", "print", "(", "max_len", ")", "\n", "max_nodes", "=", "max_len", "\n", "(", "Temporal_eigenvalues", ",", "activity_vecs", ")", "=", "SVD_perSlice", "(", "G_times", ",", "directed", "=", "directed", ",", "num_eigen", "=", "num_eigen", ",", "top", "=", "top", ",", "max_size", "=", "max_nodes", ")", "\n", "normal_util", ".", "save_object", "(", "Temporal_eigenvalues", ",", "\"canVote_L_singular.pkl\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.compute_UCI_SVD": [[309, 316], ["datasets.UCI_loader.load_temporarl_edgelist", "compute_SVD.SVD_perSlice", "util.normal_util.save_object"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.SVD_perSlice", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object"], ["", "def", "compute_UCI_SVD", "(", "num_eigen", "=", "6", ",", "top", "=", "True", ")", ":", "\n", "    ", "fname", "=", "\"datasets/UCI_processed/OCnodeslinks_chars.txt\"", "\n", "max_nodes", "=", "1901", "\n", "directed", "=", "True", "\n", "G_times", "=", "UCI_loader", ".", "load_temporarl_edgelist", "(", "fname", ",", "max_nodes", "=", "max_nodes", ")", "\n", "(", "Temporal_eigenvalues", ",", "activity_vecs", ")", "=", "SVD_perSlice", "(", "G_times", ",", "directed", "=", "directed", ",", "num_eigen", "=", "num_eigen", ",", "top", "=", "top", ",", "max_size", "=", "max_nodes", ")", "\n", "normal_util", ".", "save_object", "(", "Temporal_eigenvalues", ",", "\"UCI_L_singular.pkl\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.main": [[323, 325], ["compute_SVD.compute_legis_SVD"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.compute_SVD.compute_legis_SVD"], ["", "def", "main", "(", ")", ":", "\n", "    ", "compute_legis_SVD", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.average_typical_behavior": [[18, 21], ["numpy.mean"], "function", ["None"], ["def", "average_typical_behavior", "(", "context_vecs", ")", ":", "\n", "    ", "avg", "=", "np", ".", "mean", "(", "context_vecs", ",", "axis", "=", "0", ")", "\n", "return", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.principal_vec_typical_behavior": [[25, 31], ["numpy.linalg.svd"], "function", ["None"], ["def", "principal_vec_typical_behavior", "(", "context_vecs", ")", ":", "\n", "    ", "activity_matrix", "=", "context_vecs", ".", "T", "\n", "u", ",", "s", ",", "vh", "=", "np", ".", "linalg", ".", "svd", "(", "activity_matrix", ",", "full_matrices", "=", "False", ")", "\n", "# print (\"shape of each vector is: \" + str(context_vecs[0].shape))", "\n", "# print (\"shape of typical vector is: \" + str(u[:,0].shape))", "\n", "return", "u", "[", ":", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.compute_Z_score": [[38, 44], ["abs", "numpy.linalg.norm", "numpy.dot", "numpy.linalg.norm"], "function", ["None"], ["def", "compute_Z_score", "(", "cur_vec", ",", "typical_vec", ")", ":", "\n", "# print (cur_vec[0:6])", "\n", "# print (typical_vec[0:6])", "\n", "    ", "cosine_similarity", "=", "abs", "(", "np", ".", "dot", "(", "cur_vec", ",", "typical_vec", ")", "/", "LA", ".", "norm", "(", "cur_vec", ")", "/", "LA", ".", "norm", "(", "typical_vec", ")", ")", "\n", "z", "=", "(", "1", "-", "cosine_similarity", ")", "\n", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.rank_outliers": [[46, 66], ["numpy.asarray", "range", "range", "numpy.asarray", "np.asarray.argsort", "np.asarray.append", "len", "numpy.mean", "numpy.std", "np.asarray.append", "abs"], "function", ["None"], ["", "def", "rank_outliers", "(", "x", ",", "window", "=", "5", ",", "initial_period", "=", "10", ")", ":", "\n", "#percent_ranked = 0.18", "\n", "    ", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "mv_std", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "initial_period", ")", ":", "\n", "        ", "mv_std", ".", "append", "(", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "initial_period", ",", "len", "(", "x", ")", ")", ":", "\n", "#compute moving average until this point", "\n", "        ", "avg", "=", "np", ".", "mean", "(", "x", "[", "i", "-", "window", ":", "i", "]", ")", "\n", "std", "=", "np", ".", "std", "(", "x", "[", "i", "-", "window", ":", "i", "]", ")", "\n", "if", "(", "std", "==", "0", ")", ":", "\n", "            ", "std", "=", "1", "\n", "", "mv_std", ".", "append", "(", "abs", "(", "x", "[", "i", "]", "-", "avg", ")", "/", "std", ")", "\n", "\n", "", "mv_std", "=", "np", ".", "asarray", "(", "mv_std", ")", "\n", "outlier_ranks", "=", "mv_std", ".", "argsort", "(", ")", "\n", "\n", "return", "outlier_ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.spearman": [[72, 181], ["len", "list", "Anomaly_Detection.rank_outliers", "scipy.stats.spearmanr", "Anomaly_Detection.rank_outliers", "scipy.stats.spearmanr", "print", "print", "print", "Anomaly_Detection.rank_outliers", "scipy.stats.spearmanr", "print", "print", "print", "Anomaly_Detection.rank_outliers", "scipy.stats.spearmanr", "print", "print", "print", "range", "list", "list", "total_edges.append", "avg_degree.append", "avg_clustering.append", "transitivity.append", "len", "Anomaly_Detection.rank_outliers", "scipy.stats.spearmanr", "print", "print", "print", "Anomaly_Detection.rank_outliers", "scipy.stats.spearmanr", "print", "print", "print", "Anomaly_Detection.rank_outliers", "scipy.stats.spearmanr", "print", "print", "print", "Anomaly_Detection.rank_outliers", "scipy.stats.spearmanr", "print", "print", "print", "util.normal_util.plot_ranks", "util.normal_util.plot_ranks", "util.normal_util.plot_ranks", "networkx.get_edge_attributes().values", "G.number_of_edges", "len", "avg_weight.append", "networkx.average_clustering", "networkx.transitivity", "num_strong.append", "num_weak.append", "num_connected_components.append", "util.normal_util.plot_ranks", "util.normal_util.plot_ranks", "util.normal_util.plot_ranks", "util.normal_util.plot_ranks", "str", "str", "str", "str", "str", "str", "len", "networkx.number_strongly_connected_components", "networkx.number_weakly_connected_components", "networkx.number_connected_components", "str", "str", "str", "str", "str", "str", "str", "str", "networkx.get_edge_attributes", "sum", "len"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.rank_outliers", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.rank_outliers", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.rank_outliers", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.rank_outliers", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.rank_outliers", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.rank_outliers", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.rank_outliers", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.rank_outliers", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_ranks", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_ranks", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_ranks", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_ranks", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_ranks", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_ranks", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_ranks"], ["def", "spearman", "(", "G_times", ",", "anomaly_ranks", ",", "directed", ",", "window", ",", "initial_period", ",", "plot", "=", "False", ")", ":", "\n", "\n", "    ", "max_time", "=", "len", "(", "G_times", ")", "\n", "t", "=", "list", "(", "range", "(", "0", ",", "max_time", ")", ")", "\n", "avg_clustering", "=", "[", "]", "\n", "\n", "avg_weight", "=", "[", "]", "\n", "total_edges", "=", "[", "]", "\n", "avg_clustering", "=", "[", "]", "\n", "avg_degree", "=", "[", "]", "\n", "transitivity", "=", "[", "]", "\n", "\n", "\n", "if", "(", "directed", ")", ":", "\n", "        ", "num_strong", "=", "[", "]", "\n", "num_weak", "=", "[", "]", "\n", "", "else", ":", "\n", "        ", "num_connected_components", "=", "[", "]", "\n", "\n", "", "for", "G", "in", "G_times", ":", "\n", "        ", "weights", "=", "list", "(", "nx", ".", "get_edge_attributes", "(", "G", ",", "'weight'", ")", ".", "values", "(", ")", ")", "\n", "degrees", "=", "list", "(", "G", ".", "degree", ")", "\n", "sum_degree", "=", "0", "\n", "for", "(", "v", ",", "d", ")", "in", "degrees", ":", "\n", "            ", "sum_degree", "=", "sum_degree", "+", "d", "\n", "\n", "", "total_edges", ".", "append", "(", "G", ".", "number_of_edges", "(", ")", ")", "\n", "avg_degree", ".", "append", "(", "sum_degree", "/", "len", "(", "degrees", ")", ")", "\n", "if", "(", "len", "(", "weights", ")", ">", "0", ")", ":", "\n", "            ", "avg_weight", ".", "append", "(", "sum", "(", "weights", ")", "/", "len", "(", "weights", ")", ")", "\n", "", "avg_clustering", ".", "append", "(", "nx", ".", "average_clustering", "(", "G", ")", ")", "\n", "transitivity", ".", "append", "(", "nx", ".", "transitivity", "(", "G", ")", ")", "\n", "\n", "if", "(", "directed", ")", ":", "\n", "            ", "num_strong", ".", "append", "(", "nx", ".", "number_strongly_connected_components", "(", "G", ")", ")", "\n", "num_weak", ".", "append", "(", "nx", ".", "number_weakly_connected_components", "(", "G", ")", ")", "\n", "", "else", ":", "\n", "            ", "num_connected_components", ".", "append", "(", "nx", ".", "number_connected_components", "(", "G", ")", ")", "\n", "\n", "\n", "", "", "if", "(", "len", "(", "avg_weight", ")", ">", "0", ")", ":", "\n", "        ", "ranks", "=", "rank_outliers", "(", "avg_weight", ",", "window", "=", "window", ",", "initial_period", "=", "initial_period", ")", "\n", "(", "corr", ",", "p_test", ")", "=", "spearmanr", "(", "anomaly_ranks", ",", "ranks", ")", "\n", "if", "(", "plot", ")", ":", "\n", "            ", "normal_util", ".", "plot_ranks", "(", "anomaly_ranks", ",", "ranks", ",", "\"avg_weight\"", ")", "\n", "", "print", "(", "\"spearman rank correlation with avg edge weight is \"", "+", "str", "(", "corr", ")", ")", "\n", "print", "(", "\"p-test with avg edge weight is \"", "+", "str", "(", "p_test", ")", ")", "\n", "print", "(", ")", "\n", "\n", "", "ranks", "=", "rank_outliers", "(", "avg_clustering", ",", "window", "=", "window", ",", "initial_period", "=", "initial_period", ")", "\n", "(", "corr", ",", "p_test", ")", "=", "spearmanr", "(", "anomaly_ranks", ",", "ranks", ")", "\n", "\n", "# if (plot):", "\n", "#     normal_util.plot_ranks(anomaly_ranks, ranks, \"avg_clustering\")", "\n", "# print (\"spearman rank correlation with avg clustering coefficient is \" + str(corr))", "\n", "# print (\"p-test with avg clustering coefficient is \" + str(p_test))", "\n", "# print ()", "\n", "\n", "if", "(", "directed", ")", ":", "\n", "        ", "ranks", "=", "rank_outliers", "(", "num_weak", ",", "window", "=", "window", ",", "initial_period", "=", "initial_period", ")", "\n", "(", "corr", ",", "p_test", ")", "=", "spearmanr", "(", "anomaly_ranks", ",", "ranks", ")", "\n", "if", "(", "plot", ")", ":", "\n", "            ", "normal_util", ".", "plot_ranks", "(", "anomaly_ranks", ",", "ranks", ",", "\"weak_connected\"", ")", "\n", "", "print", "(", "\"spearman rank correlation with number of weakly connected components is \"", "+", "str", "(", "corr", ")", ")", "\n", "print", "(", "\"p-test with number of weakly connected components is \"", "+", "str", "(", "p_test", ")", ")", "\n", "print", "(", ")", "\n", "\n", "ranks", "=", "rank_outliers", "(", "num_strong", ",", "window", "=", "window", ",", "initial_period", "=", "initial_period", ")", "\n", "(", "corr", ",", "p_test", ")", "=", "spearmanr", "(", "anomaly_ranks", ",", "ranks", ")", "\n", "if", "(", "plot", ")", ":", "\n", "            ", "normal_util", ".", "plot_ranks", "(", "anomaly_ranks", ",", "ranks", ",", "\"strong_connected\"", ")", "\n", "", "print", "(", "\"spearman rank correlation with number of strongly connected components is \"", "+", "str", "(", "corr", ")", ")", "\n", "print", "(", "\"p-test with number of strongly connected components is \"", "+", "str", "(", "p_test", ")", ")", "\n", "print", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "ranks", "=", "rank_outliers", "(", "num_connected_components", ",", "window", "=", "window", ",", "initial_period", "=", "initial_period", ")", "\n", "(", "corr", ",", "p_test", ")", "=", "spearmanr", "(", "anomaly_ranks", ",", "ranks", ")", "\n", "if", "(", "plot", ")", ":", "\n", "            ", "normal_util", ".", "plot_ranks", "(", "anomaly_ranks", ",", "ranks", ",", "\"num_connected\"", ")", "\n", "", "print", "(", "\"spearman rank correlation with number of connected components is \"", "+", "str", "(", "corr", ")", ")", "\n", "print", "(", "\"p-test with number of connected components is \"", "+", "str", "(", "p_test", ")", ")", "\n", "print", "(", ")", "\n", "\n", "\n", "\n", "", "ranks", "=", "rank_outliers", "(", "transitivity", ",", "window", "=", "window", ",", "initial_period", "=", "initial_period", ")", "\n", "(", "corr", ",", "p_test", ")", "=", "spearmanr", "(", "anomaly_ranks", ",", "ranks", ")", "\n", "if", "(", "plot", ")", ":", "\n", "        ", "normal_util", ".", "plot_ranks", "(", "anomaly_ranks", ",", "ranks", ",", "\"transitivity\"", ")", "\n", "", "print", "(", "\"spearman rank correlation with transitivity is \"", "+", "str", "(", "corr", ")", ")", "\n", "print", "(", "\"p-test with transitivity is \"", "+", "str", "(", "p_test", ")", ")", "\n", "print", "(", ")", "\n", "\n", "ranks", "=", "rank_outliers", "(", "total_edges", ",", "window", "=", "window", ",", "initial_period", "=", "initial_period", ")", "\n", "(", "corr", ",", "p_test", ")", "=", "spearmanr", "(", "anomaly_ranks", ",", "ranks", ")", "\n", "if", "(", "plot", ")", ":", "\n", "        ", "normal_util", ".", "plot_ranks", "(", "anomaly_ranks", ",", "ranks", ",", "\"num_edges\"", ")", "\n", "", "print", "(", "\"spearman rank correlation with total number of edges is \"", "+", "str", "(", "corr", ")", ")", "\n", "print", "(", "\"p-test with total number of edges is \"", "+", "str", "(", "p_test", ")", ")", "\n", "print", "(", ")", "\n", "\n", "ranks", "=", "rank_outliers", "(", "avg_degree", ",", "window", "=", "window", ",", "initial_period", "=", "initial_period", ")", "\n", "(", "corr", ",", "p_test", ")", "=", "spearmanr", "(", "anomaly_ranks", ",", "ranks", ")", "\n", "if", "(", "plot", ")", ":", "\n", "        ", "normal_util", ".", "plot_ranks", "(", "anomaly_ranks", ",", "ranks", ",", "\"average_degree\"", ")", "\n", "", "print", "(", "\"spearman rank correlation with average degree is \"", "+", "str", "(", "corr", ")", ")", "\n", "print", "(", "\"p-test with average degree is \"", "+", "str", "(", "p_test", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.set_non_negative": [[184, 189], ["range", "len"], "function", ["None"], ["", "def", "set_non_negative", "(", "z_scores", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "z_scores", ")", ")", ":", "\n", "        ", "if", "(", "z_scores", "[", "i", "]", "<", "0", ")", ":", "\n", "            ", "z_scores", "[", "i", "]", "=", "0", "\n", "", "", "return", "z_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.plot_anomaly_score": [[197, 307], ["range", "len", "list", "pylab.rcParams.update", "pylab.rc", "pylab.rc", "pylab.figure", "plt.figure.add_subplot", "range", "pylab.xticks", "pylab.yticks", "fig.add_subplot.set_ylabel", "pylab.legend", "pylab.savefig", "print", "len", "Anomaly_Detection.set_non_negative", "range", "len", "fig.add_subplot.plot", "range", "range", "range", "list", "pylab.xticks", "fig.add_subplot.set_xlabel", "list", "range", "pylab.xticks", "fig.add_subplot.set_xlabel", "list", "range", "pylab.xticks", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_xlabel", "len", "pylab.annotate", "len", "fig.add_subplot.plot", "fig.add_subplot.plot", "len", "str", "range", "range", "len", "str", "range", "len", "str", "str", "pylab.annotate", "pylab.annotate", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.set_non_negative"], ["def", "plot_anomaly_score", "(", "dataset", ",", "fname", ",", "scores", ",", "score_labels", ",", "events", ")", ":", "\n", "\n", "\n", "    ", "for", "k", "in", "range", "(", "len", "(", "scores", ")", ")", ":", "\n", "        ", "scores", "[", "k", "]", "=", "set_non_negative", "(", "scores", "[", "k", "]", ")", "\n", "\n", "\n", "\n", "", "max_time", "=", "len", "(", "scores", "[", "0", "]", ")", "\n", "t", "=", "list", "(", "range", "(", "0", ",", "max_time", ")", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "plt", ".", "rc", "(", "'xtick'", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "4", ",", "2", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "colors", "=", "[", "'#fdbb84'", ",", "'#43a2ca'", ",", "'#bc5090'", ",", "'#e5f5e0'", ",", "'#fa9fb5'", ",", "'#c51b8a'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "scores", ")", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "t", ",", "scores", "[", "i", "]", ",", "color", "=", "colors", "[", "i", "]", ",", "ls", "=", "'solid'", ",", "lw", "=", "0.8", ",", "label", "=", "score_labels", "[", "i", "]", ")", "\n", "\n", "\n", "", "for", "event", "in", "events", ":", "\n", "        ", "max_score", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "scores", ")", ")", ":", "\n", "            ", "if", "scores", "[", "i", "]", "[", "event", "]", ">", "max_score", ":", "\n", "                ", "max_score", "=", "scores", "[", "i", "]", "[", "event", "]", "\n", "\n", "", "", "if", "(", "dataset", "==", "\"USLegis\"", ")", ":", "\n", "            ", "plt", ".", "annotate", "(", "str", "(", "97", "+", "event", ")", ",", "# this is the text", "\n", "(", "event", ",", "max_score", ")", ",", "# this is the point to label", "\n", "textcoords", "=", "\"offset points\"", ",", "# how to position the text", "\n", "xytext", "=", "(", "8", ",", "0", ")", ",", "# distance from text to points (x,y)", "\n", "ha", "=", "'center'", ",", "\n", "fontsize", "=", "4", ")", "# horizontal alignment can be left, right or center", "\n", "\n", "", "elif", "(", "dataset", "==", "\"canVote\"", ")", ":", "\n", "            ", "plt", ".", "annotate", "(", "str", "(", "2006", "+", "event", ")", ",", "# this is the text", "\n", "(", "event", ",", "max_score", ")", ",", "# this is the point to label", "\n", "textcoords", "=", "\"offset points\"", ",", "# how to position the text", "\n", "xytext", "=", "(", "8", ",", "0", ")", ",", "# distance from text to points (x,y)", "\n", "ha", "=", "'center'", ",", "\n", "fontsize", "=", "4", ")", "# horizontal alignment can be left, right or center", "\n", "\n", "#(dataset == \"synthetic\" or \"UCI\")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "annotate", "(", "str", "(", "event", ")", ",", "# this is the text", "\n", "(", "event", ",", "max_score", ")", ",", "# this is the point to label", "\n", "textcoords", "=", "\"offset points\"", ",", "# how to position the text", "\n", "xytext", "=", "(", "8", ",", "0", ")", ",", "# distance from text to points (x,y)", "\n", "ha", "=", "'center'", ",", "\n", "fontsize", "=", "4", ")", "# horizontal alignment can be left, right or center", "\n", "\n", "\n", "\n", "\n", "", "", "addLegend", "=", "True", "\n", "\n", "for", "event", "in", "events", ":", "\n", "#plt.axvline(x=event,color='k', linestyle=\"--\", linewidth=0.5)", "\n", "        ", "max_score", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "scores", ")", ")", ":", "\n", "            ", "if", "scores", "[", "i", "]", "[", "event", "]", ">", "max_score", ":", "\n", "                ", "max_score", "=", "scores", "[", "i", "]", "[", "event", "]", "\n", "", "", "if", "(", "addLegend", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "event", ",", "max_score", ",", "marker", "=", "\"*\"", ",", "markersize", "=", "5", ",", "color", "=", "'#de2d26'", ",", "ls", "=", "'solid'", ",", "lw", "=", "0.5", ",", "label", "=", "\"detected anomalies\"", ")", "\n", "addLegend", "=", "False", "\n", "", "else", ":", "\n", "            ", "ax", ".", "plot", "(", "event", ",", "max_score", ",", "marker", "=", "\"*\"", ",", "color", "=", "'#de2d26'", ",", "ls", "=", "'solid'", ",", "lw", "=", "0.5", ")", "\n", "\n", "\n", "", "", "'''\n    specify the xticks here\n    '''", "\n", "\n", "#first day is April 14th 2004", "\n", "#UCI Message", "\n", "if", "(", "dataset", "==", "\"UCI\"", ")", ":", "\n", "        ", "labels", "=", "[", "\"May\"", ",", "\"June\"", ",", "\"July\"", ",", "\"August\"", ",", "\"September\"", ",", "\"October\"", ",", "\"November\"", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "          ", "labels", "[", "i", "]", "=", "str", "(", "labels", "[", "i", "]", ")", "\n", "", "time_gaps", "=", "list", "(", "range", "(", "17", ",", "195", ",", "30", ")", ")", "\n", "plt", ".", "xticks", "(", "time_gaps", ",", "labels", ",", "rotation", "=", "'horizontal'", ")", "\n", "ax", ".", "set_xlabel", "(", "'day'", ",", "fontsize", "=", "6", ")", "\n", "\n", "#US Legislative", "\n", "", "if", "(", "dataset", "==", "\"USLegis\"", ")", ":", "\n", "        ", "labels", "=", "list", "(", "range", "(", "97", ",", "109", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "          ", "labels", "[", "i", "]", "=", "str", "(", "labels", "[", "i", "]", ")", "\n", "", "plt", ".", "xticks", "(", "t", ",", "labels", ",", "rotation", "=", "'horizontal'", ")", "\n", "ax", ".", "set_xlabel", "(", "'Congress'", ",", "fontsize", "=", "6", ")", "\n", "\n", "#canVote", "\n", "", "if", "(", "dataset", "==", "\"canVote\"", ")", ":", "\n", "        ", "labels", "=", "list", "(", "range", "(", "2006", ",", "2020", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "            ", "labels", "[", "i", "]", "=", "str", "(", "labels", "[", "i", "]", ")", "\n", "", "plt", ".", "xticks", "(", "t", ",", "labels", ",", "fontsize", "=", "8", ",", "rotation", "=", "'horizontal'", ")", "\n", "ax", ".", "set_xlabel", "(", "'year'", ",", "fontsize", "=", "6", ")", "\n", "\n", "", "if", "(", "dataset", "==", "\"synthetic\"", ")", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "'time point'", ",", "fontsize", "=", "6", ")", "\n", "\n", "\n", "", "plt", ".", "xticks", "(", "fontsize", "=", "5", ")", "\n", "plt", ".", "yticks", "(", "fontsize", "=", "5", ")", "\n", "ax", ".", "set_ylabel", "(", "'anomaly score'", ",", "fontsize", "=", "6", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "5", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'.pdf'", ")", "\n", "\n", "print", "(", "\"plotting anomaly scores complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.plot_diff_and_nodiff": [[310, 388], ["pylab.subplots", "pylab.rcParams.update", "len", "list", "axs[].plot", "numpy.asarray", "int", "events.sort", "axs[].set_xlabel", "axs[].set_ylabel", "axs[].legend", "axs[].plot", "numpy.asarray", "int", "events.sort", "axs[].set_xlabel", "axs[].set_ylabel", "axs[].legend", "pylab.tight_layout", "pylab.savefig", "range", "round", "axs[].annotate", "round", "axs[].annotate", "np.asarray.argsort", "str", "axs[].plot", "axs[].plot", "np.asarray.argsort", "str", "axs[].plot", "axs[].plot", "len", "len"], "function", ["None"], ["", "def", "plot_diff_and_nodiff", "(", "fname", ",", "diffscore", ",", "nodiffscore", ",", "percent_ranked", ")", ":", "\n", "\n", "    ", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "2", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "\n", "#diffscore = set_non_negative(diffscore)", "\n", "\n", "max_time", "=", "len", "(", "diffscore", ")", "\n", "t", "=", "list", "(", "range", "(", "0", ",", "max_time", ")", ")", "\n", "colors", "=", "[", "'#fdbb84'", ",", "'#43a2ca'", ",", "'#bc5090'", ",", "'#e5f5e0'", ",", "'#fa9fb5'", ",", "'#c51b8a'", "]", "\n", "axs", "[", "0", "]", ".", "plot", "(", "t", ",", "nodiffscore", ",", "color", "=", "colors", "[", "2", "]", ",", "ls", "=", "'solid'", ",", "label", "=", "\"raw Z score\"", ")", "\n", "\n", "\n", "nodiffscore", "=", "np", ".", "asarray", "(", "nodiffscore", ")", "\n", "num_ranked", "=", "int", "(", "round", "(", "len", "(", "nodiffscore", ")", "*", "percent_ranked", ")", ")", "\n", "events", "=", "nodiffscore", ".", "argsort", "(", ")", "[", "-", "num_ranked", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "events", ".", "sort", "(", ")", "\n", "\n", "for", "event", "in", "events", ":", "\n", "        ", "axs", "[", "0", "]", ".", "annotate", "(", "str", "(", "event", ")", ",", "# this is the text", "\n", "(", "event", ",", "nodiffscore", "[", "event", "]", ")", ",", "# this is the point to label", "\n", "textcoords", "=", "\"offset points\"", ",", "# how to position the text", "\n", "xytext", "=", "(", "8", ",", "-", "5", ")", ",", "# distance from text to points (x,y)", "\n", "ha", "=", "'center'", ")", "# horizontal alignment can be left, right or center", "\n", "\n", "", "addLegend", "=", "True", "\n", "\n", "for", "event", "in", "events", ":", "\n", "#plt.axvline(x=event,color='k', linestyle=\"--\", linewidth=0.5)", "\n", "        ", "max_score", "=", "nodiffscore", "[", "event", "]", "\n", "if", "(", "addLegend", ")", ":", "\n", "            ", "axs", "[", "0", "]", ".", "plot", "(", "event", ",", "max_score", ",", "marker", "=", "\"*\"", ",", "color", "=", "'#de2d26'", ",", "ls", "=", "'solid'", ",", "label", "=", "\"detected anomalies\"", ")", "\n", "addLegend", "=", "False", "\n", "", "else", ":", "\n", "            ", "axs", "[", "0", "]", ".", "plot", "(", "event", ",", "max_score", ",", "marker", "=", "\"*\"", ",", "color", "=", "'#de2d26'", ",", "ls", "=", "'solid'", ")", "\n", "\n", "\n", "", "", "axs", "[", "0", "]", ".", "set_xlabel", "(", "'time point'", ")", "\n", "# ax.set_yscale('log')", "\n", "axs", "[", "0", "]", ".", "set_ylabel", "(", "'anomaly score'", ")", "\n", "axs", "[", "0", "]", ".", "legend", "(", "fontsize", "=", "9", ")", "\n", "\n", "\n", "\n", "axs", "[", "1", "]", ".", "plot", "(", "t", ",", "diffscore", ",", "color", "=", "colors", "[", "2", "]", ",", "ls", "=", "'solid'", ",", "label", "=", "\"difference in Z score\"", ")", "\n", "\n", "diffscore", "=", "np", ".", "asarray", "(", "diffscore", ")", "\n", "num_ranked", "=", "int", "(", "round", "(", "len", "(", "diffscore", ")", "*", "percent_ranked", ")", ")", "\n", "events", "=", "diffscore", ".", "argsort", "(", ")", "[", "-", "num_ranked", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "events", ".", "sort", "(", ")", "\n", "\n", "\n", "for", "event", "in", "events", ":", "\n", "        ", "axs", "[", "1", "]", ".", "annotate", "(", "str", "(", "event", ")", ",", "# this is the text", "\n", "(", "event", ",", "diffscore", "[", "event", "]", ")", ",", "# this is the point to label", "\n", "textcoords", "=", "\"offset points\"", ",", "# how to position the text", "\n", "xytext", "=", "(", "8", ",", "-", "5", ")", ",", "# distance from text to points (x,y)", "\n", "ha", "=", "'center'", ")", "# horizontal alignment can be left, right or center", "\n", "\n", "", "addLegend", "=", "True", "\n", "\n", "for", "event", "in", "events", ":", "\n", "#plt.axvline(x=event,color='k', linestyle=\"--\", linewidth=0.5)", "\n", "        ", "max_score", "=", "diffscore", "[", "event", "]", "\n", "if", "(", "addLegend", ")", ":", "\n", "            ", "axs", "[", "1", "]", ".", "plot", "(", "event", ",", "max_score", ",", "marker", "=", "\"*\"", ",", "color", "=", "'#de2d26'", ",", "ls", "=", "'solid'", ",", "label", "=", "\"detected anomalies\"", ")", "\n", "addLegend", "=", "False", "\n", "", "else", ":", "\n", "            ", "axs", "[", "1", "]", ".", "plot", "(", "event", ",", "max_score", ",", "marker", "=", "\"*\"", ",", "color", "=", "'#de2d26'", ",", "ls", "=", "'solid'", ")", "\n", "\n", "\n", "", "", "axs", "[", "1", "]", ".", "set_xlabel", "(", "'time point'", ")", "\n", "# ax.set_yscale('log')", "\n", "axs", "[", "1", "]", ".", "set_ylabel", "(", "'anomaly score'", ")", "\n", "axs", "[", "1", "]", ".", "legend", "(", "fontsize", "=", "9", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "plt", ".", "savefig", "(", "fname", "+", "'diff.pdf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.plot_anomaly_and_spectro": [[392, 459], ["list", "Anomaly_Detection.set_non_negative", "pylab.subplots", "pylab.rcParams.update", "util.normal_util.load_object", "numpy.transpose", "numpy.flip", "len", "list", "range", "range", "axs[].set_xlabel", "axs[].set_ylabel", "pylab.tight_layout", "axs[].legend", "axs[].set_xticks", "axs[].set_xticklabels", "axs[].set_xlabel", "axs[].set_ylabel", "axs[].set_xticks", "axs[].set_xticklabels", "axs[].imshow", "pylab.savefig", "range", "numpy.asarray", "range", "len", "axs[].plot", "range", "axs[].annotate", "range", "len", "str", "len", "str", "len", "axs[].plot", "axs[].plot"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.set_non_negative", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.load_object"], ["", "def", "plot_anomaly_and_spectro", "(", "fname", ",", "scores", ",", "score_labels", ",", "events", ",", "eigen_file", "=", "\"USLegis_L_singular.pkl\"", ")", ":", "\n", "\n", "\n", "    ", "labels", "=", "list", "(", "range", "(", "97", ",", "109", ",", "1", ")", ")", "\n", "scores", "[", "0", "]", "=", "set_non_negative", "(", "scores", "[", "0", "]", ")", "\n", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "2", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "\n", "diag_vecs", "=", "normal_util", ".", "load_object", "(", "eigen_file", ")", "\n", "diag_vecs", "=", "np", ".", "transpose", "(", "np", ".", "asarray", "(", "diag_vecs", ")", ")", "#let time be x-axis", "\n", "diag_vecs", "=", "np", ".", "flip", "(", "diag_vecs", ",", "0", ")", "\n", "\n", "max_time", "=", "len", "(", "scores", "[", "0", "]", ")", "\n", "t", "=", "list", "(", "range", "(", "0", ",", "max_time", ")", ")", "\n", "colors", "=", "[", "'#fdbb84'", ",", "'#43a2ca'", ",", "'#bc5090'", ",", "'#e5f5e0'", ",", "'#fa9fb5'", ",", "'#c51b8a'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "scores", ")", ")", ":", "\n", "        ", "axs", "[", "0", "]", ".", "plot", "(", "t", ",", "scores", "[", "0", "]", ",", "color", "=", "colors", "[", "i", "]", ",", "ls", "=", "'solid'", ",", "label", "=", "score_labels", "[", "i", "]", ")", "\n", "\n", "", "for", "event", "in", "events", ":", "\n", "        ", "max_score", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "scores", ")", ")", ":", "\n", "            ", "if", "scores", "[", "i", "]", "[", "event", "]", ">", "max_score", ":", "\n", "                ", "max_score", "=", "scores", "[", "i", "]", "[", "event", "]", "\n", "\n", "\n", "", "", "axs", "[", "0", "]", ".", "annotate", "(", "str", "(", "labels", "[", "event", "]", ")", ",", "# this is the text", "\n", "(", "event", ",", "max_score", ")", ",", "# this is the point to label", "\n", "textcoords", "=", "\"offset points\"", ",", "# how to position the text", "\n", "xytext", "=", "(", "0", ",", "-", "12", ")", ",", "# distance from text to points (x,y)", "\n", "ha", "=", "'center'", ")", "# horizontal alignment can be left, right or center", "\n", "\n", "", "addLegend", "=", "True", "\n", "\n", "for", "event", "in", "events", ":", "\n", "#plt.axvline(x=event,color='k', linestyle=\"--\", linewidth=0.5)", "\n", "        ", "max_score", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "scores", ")", ")", ":", "\n", "            ", "if", "scores", "[", "i", "]", "[", "event", "]", ">", "max_score", ":", "\n", "                ", "max_score", "=", "scores", "[", "i", "]", "[", "event", "]", "\n", "", "", "if", "(", "addLegend", ")", ":", "\n", "            ", "axs", "[", "0", "]", ".", "plot", "(", "event", ",", "max_score", ",", "marker", "=", "\"*\"", ",", "color", "=", "'#de2d26'", ",", "ls", "=", "'solid'", ",", "label", "=", "\"detected anomalies\"", ")", "\n", "addLegend", "=", "False", "\n", "", "else", ":", "\n", "            ", "axs", "[", "0", "]", ".", "plot", "(", "event", ",", "max_score", ",", "marker", "=", "\"*\"", ",", "color", "=", "'#de2d26'", ",", "ls", "=", "'solid'", ")", "\n", "\n", "#US senate", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "      ", "labels", "[", "i", "]", "=", "str", "(", "labels", "[", "i", "]", ")", "\n", "\n", "", "axs", "[", "0", "]", ".", "set_xlabel", "(", "'Congress'", ")", "\n", "axs", "[", "0", "]", ".", "set_ylabel", "(", "'anomaly score'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "axs", "[", "0", "]", ".", "legend", "(", ")", "\n", "axs", "[", "0", "]", ".", "set_xticks", "(", "t", ")", "\n", "axs", "[", "0", "]", ".", "set_xticklabels", "(", "labels", ")", "\n", "\n", "\n", "axs", "[", "1", "]", ".", "set_xlabel", "(", "'Congress'", ")", "\n", "axs", "[", "1", "]", ".", "set_ylabel", "(", "'rank'", ")", "\n", "axs", "[", "1", "]", ".", "set_xticks", "(", "t", ")", "\n", "axs", "[", "1", "]", ".", "set_xticklabels", "(", "labels", ")", "\n", "\n", "\n", "axs", "[", "1", "]", ".", "imshow", "(", "diag_vecs", ",", "aspect", "=", "'auto'", ")", "\n", "\n", "plt", ".", "savefig", "(", "fname", "+", "'anomalySpectro.pdf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.change_detection": [[463, 495], ["range", "range", "numpy.asarray", "int", "outliers.sort", "difference_score.append", "len", "difference_score.append", "Anomaly_Detection.difference_score", "round", "Anomaly_Detection.principal_vec_typical_behavior", "Anomaly_Detection.average_typical_behavior", "Anomaly_Detection.compute_Z_score", "difference_score.argsort", "len"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.difference_score", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.principal_vec_typical_behavior", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.average_typical_behavior", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.compute_Z_score"], ["", "def", "change_detection", "(", "spectrums", ",", "principal", "=", "True", ",", "percent_ranked", "=", "0.05", ",", "window", "=", "5", ",", "initial_window", "=", "10", ",", "difference", "=", "False", ")", ":", "\n", "\n", "    ", "z_scores", "=", "[", "]", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "initial_window", ")", ":", "\n", "        ", "z_scores", ".", "append", "(", "0", ")", "#these points should never be picked", "\n", "\n", "#compute the z score for each signature vector after initial window", "\n", "#1. find typical behavior", "\n", "#2. compute anomaly score", "\n", "", "for", "i", "in", "range", "(", "initial_window", ",", "len", "(", "spectrums", ")", ")", ":", "\n", "        ", "if", "(", "principal", ")", ":", "\n", "            ", "typical_vec", "=", "principal_vec_typical_behavior", "(", "spectrums", "[", "i", "-", "window", ":", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "typical_vec", "=", "average_typical_behavior", "(", "spectrums", "[", "i", "-", "window", ":", "i", "]", ")", "\n", "", "cur_vec", "=", "spectrums", "[", "i", "]", "\n", "z_scores", ".", "append", "(", "compute_Z_score", "(", "cur_vec", ",", "typical_vec", ")", ")", "\n", "\n", "\n", "", "'''\n    change score\n    '''", "\n", "\n", "#check the change in z score instead", "\n", "if", "(", "difference", ")", ":", "\n", "        ", "z_scores", "=", "difference_score", "(", "z_scores", ")", "\n", "\n", "", "z_scores", "=", "np", ".", "asarray", "(", "z_scores", ")", "\n", "num_ranked", "=", "int", "(", "round", "(", "len", "(", "z_scores", ")", "*", "percent_ranked", ")", ")", "\n", "outliers", "=", "z_scores", ".", "argsort", "(", ")", "[", "-", "num_ranked", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "outliers", ".", "sort", "(", ")", "\n", "return", "(", "z_scores", ",", "outliers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.change_detection_two_windows": [[497, 546], ["range", "range", "range", "numpy.asarray", "int", "outliers.sort", "difference_score.append", "difference_score.append", "np.asarray.append", "len", "Anomaly_Detection.compute_Z_score", "difference_score.append", "Anomaly_Detection.compute_Z_score", "difference_score.append", "Anomaly_Detection.difference_score", "Anomaly_Detection.difference_score", "len", "len", "max", "round", "Anomaly_Detection.principal_vec_typical_behavior", "Anomaly_Detection.average_typical_behavior", "Anomaly_Detection.principal_vec_typical_behavior", "Anomaly_Detection.average_typical_behavior", "np.asarray.argsort", "len"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.compute_Z_score", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.compute_Z_score", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.difference_score", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.difference_score", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.principal_vec_typical_behavior", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.average_typical_behavior", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.principal_vec_typical_behavior", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.average_typical_behavior"], ["", "def", "change_detection_two_windows", "(", "spectrums", ",", "principal", "=", "True", ",", "percent_ranked", "=", "0.05", ",", "window1", "=", "5", ",", "window2", "=", "15", ",", "initial_window", "=", "20", ",", "difference", "=", "True", ")", ":", "\n", "\n", "    ", "z_scores", "=", "[", "]", "\n", "z_shorts", "=", "[", "]", "\n", "z_longs", "=", "[", "]", "\n", "counter", "=", "0", "\n", "for", "i", "in", "range", "(", "0", ",", "initial_window", ")", ":", "\n", "        ", "z_shorts", ".", "append", "(", "0", ")", "\n", "z_longs", ".", "append", "(", "0", ")", "\n", "z_scores", ".", "append", "(", "0", ")", "\n", "\n", "#compute the z score for each signature vector after initial window", "\n", "#1. find typical behavior", "\n", "#2. compute anomaly score", "\n", "", "for", "i", "in", "range", "(", "initial_window", ",", "len", "(", "spectrums", ")", ")", ":", "\n", "\n", "#1. compute short term window first", "\n", "        ", "if", "(", "principal", ")", ":", "\n", "            ", "typical_vec", "=", "principal_vec_typical_behavior", "(", "spectrums", "[", "i", "-", "window1", ":", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "typical_vec", "=", "average_typical_behavior", "(", "spectrums", "[", "i", "-", "window1", ":", "i", "]", ")", "\n", "", "cur_vec", "=", "spectrums", "[", "i", "]", "\n", "z_short", "=", "compute_Z_score", "(", "cur_vec", ",", "typical_vec", ")", "\n", "z_shorts", ".", "append", "(", "z_short", ")", "\n", "\n", "\n", "#2. compute long term window", "\n", "if", "(", "principal", ")", ":", "\n", "            ", "typical_vec", "=", "principal_vec_typical_behavior", "(", "spectrums", "[", "i", "-", "window2", ":", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "typical_vec", "=", "average_typical_behavior", "(", "spectrums", "[", "i", "-", "window2", ":", "i", "]", ")", "\n", "", "cur_vec", "=", "spectrums", "[", "i", "]", "\n", "z_long", "=", "compute_Z_score", "(", "cur_vec", ",", "typical_vec", ")", "\n", "z_longs", ".", "append", "(", "z_long", ")", "\n", "\n", "#check the change in z score instead", "\n", "", "if", "(", "difference", ")", ":", "\n", "        ", "z_shorts", "=", "difference_score", "(", "z_shorts", ")", "\n", "z_longs", "=", "difference_score", "(", "z_longs", ")", "\n", "\n", "", "z_scores", "=", "[", "0", "]", "*", "len", "(", "z_shorts", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "z_scores", ")", ")", ":", "\n", "        ", "z_scores", "[", "i", "]", "=", "max", "(", "z_shorts", "[", "i", "]", ",", "z_longs", "[", "i", "]", ")", "\n", "\n", "", "z_scores", "=", "np", ".", "asarray", "(", "z_scores", ")", "\n", "num_ranked", "=", "int", "(", "round", "(", "len", "(", "z_scores", ")", "*", "percent_ranked", ")", ")", "\n", "outliers", "=", "z_scores", ".", "argsort", "(", ")", "[", "-", "num_ranked", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "outliers", ".", "sort", "(", ")", "\n", "return", "(", "z_shorts", ",", "z_longs", ",", "z_scores", ",", "outliers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.difference_score": [[548, 556], ["range", "len", "z.append", "z.append"], "function", ["None"], ["", "def", "difference_score", "(", "z_scores", ")", ":", "\n", "    ", "z", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "z_scores", ")", ")", ":", "\n", "        ", "if", "(", "i", "==", "0", ")", ":", "\n", "            ", "z", ".", "append", "(", "z_scores", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "z", ".", "append", "(", "z_scores", "[", "i", "]", "-", "z_scores", "[", "i", "-", "1", "]", ")", "\n", "", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.detection_with_shortwindow": [[558, 577], ["util.normal_util.load_object", "sklearn.preprocessing.normalize.reshape", "sklearn.preprocessing.normalize", "print", "print", "print", "Anomaly_Detection.change_detection", "print", "print", "numpy.asarray", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.load_object", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.change_detection"], ["", "def", "detection_with_shortwindow", "(", "eigen_file", "=", "\"UCI_eigs_slices.pkl\"", ",", "timestamps", "=", "195", ",", "percent_ranked", "=", "0.05", ",", "window", "=", "10", ",", "initial_window", "=", "15", ",", "difference", "=", "True", ")", ":", "\n", "\n", "    ", "principal", "=", "True", "\n", "spectrums", "=", "normal_util", ".", "load_object", "(", "eigen_file", ")", "\n", "spectrums", "=", "np", ".", "asarray", "(", "spectrums", ")", ".", "real", "\n", "spectrums", "=", "spectrums", ".", "reshape", "(", "(", "timestamps", ",", "-", "1", ")", ")", "\n", "\n", "\n", "spectrums", "=", "normalize", "(", "spectrums", ",", "norm", "=", "'l2'", ")", "\n", "\n", "print", "(", "\"window is \"", "+", "str", "(", "window", ")", ")", "\n", "print", "(", "\"initial window is \"", "+", "str", "(", "initial_window", ")", ")", "\n", "print", "(", "spectrums", ".", "shape", ")", "\n", "(", "z_scores", ",", "anomalies", ")", "=", "change_detection", "(", "spectrums", ",", "principal", "=", "principal", ",", "\n", "percent_ranked", "=", "percent_ranked", ",", "window", "=", "window", ",", "initial_window", "=", "initial_window", ",", "difference", "=", "difference", ")", "\n", "print", "(", "\"found anomalous time stamps are\"", ")", "\n", "print", "(", "anomalies", ")", "\n", "\n", "return", "z_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.compute_accuracy": [[579, 593], ["numpy.asarray", "int", "outliers.sort", "round", "len", "np.asarray.argsort", "len"], "function", ["None"], ["", "def", "compute_accuracy", "(", "z_scores", ",", "real_events", ",", "percent_ranked", ")", ":", "\n", "\n", "    ", "z_scores", "=", "np", ".", "asarray", "(", "z_scores", ")", "\n", "num_ranked", "=", "int", "(", "round", "(", "len", "(", "z_scores", ")", "*", "percent_ranked", ")", ")", "\n", "outliers", "=", "z_scores", ".", "argsort", "(", ")", "[", "-", "num_ranked", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "outliers", ".", "sort", "(", ")", "\n", "anomalies", "=", "outliers", "\n", "correct", "=", "0", "\n", "\n", "for", "anomaly", "in", "anomalies", ":", "\n", "        ", "if", "anomaly", "in", "real_events", ":", "\n", "            ", "correct", "=", "correct", "+", "1", "\n", "\n", "", "", "return", "(", "correct", "/", "len", "(", "real_events", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.detection_with_bothwindows": [[596, 619], ["util.normal_util.load_object", "numpy.asarray", "sklearn.preprocessing.normalize.reshape", "sklearn.preprocessing.normalize", "print", "print", "print", "print", "Anomaly_Detection.change_detection_two_windows", "print", "print", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.load_object", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.change_detection_two_windows"], ["", "def", "detection_with_bothwindows", "(", "eigen_file", "=", "\"UCI_eigs_slices.pkl\"", ",", "timestamps", "=", "195", ",", "percent_ranked", "=", "0.05", ",", "window1", "=", "10", ",", "window2", "=", "30", ",", "initial_window", "=", "30", ",", "difference", "=", "True", ")", ":", "\n", "    ", "principal", "=", "True", "\n", "spectrums", "=", "normal_util", ".", "load_object", "(", "eigen_file", ")", "\n", "spectrums", "=", "np", ".", "asarray", "(", "spectrums", ")", "\n", "\n", "\n", "spectrums", "=", "spectrums", ".", "real", "\n", "spectrums", "=", "spectrums", ".", "reshape", "(", "(", "timestamps", ",", "-", "1", ")", ")", "\n", "\n", "\n", "spectrums", "=", "normalize", "(", "spectrums", ",", "norm", "=", "'l2'", ")", "\n", "\n", "print", "(", "\"short window is \"", "+", "str", "(", "window1", ")", ")", "\n", "print", "(", "\"long window is \"", "+", "str", "(", "window2", ")", ")", "\n", "print", "(", "\"initial window is \"", "+", "str", "(", "initial_window", ")", ")", "\n", "print", "(", "spectrums", ".", "shape", ")", "\n", "(", "z_shorts", ",", "z_longs", ",", "z_scores", ",", "anomalies", ")", "=", "change_detection_two_windows", "(", "spectrums", ",", "principal", "=", "principal", ",", "percent_ranked", "=", "percent_ranked", ",", "\n", "window1", "=", "window1", ",", "window2", "=", "window2", ",", "initial_window", "=", "initial_window", ",", "difference", "=", "difference", ")", "\n", "print", "(", "\"found anomalous time stamps are\"", ")", "\n", "print", "(", "anomalies", ")", "\n", "\n", "events", "=", "anomalies", "\n", "return", "(", "z_shorts", ",", "z_longs", ",", "z_scores", ",", "events", ")", "\n", "# plot_anomaly_score(fname, scores, score_labels, events, real_events)", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.USLegis": [[638, 662], ["Anomaly_Detection.detection_with_bothwindows", "scores.append", "scores.append", "Anomaly_Detection.plot_anomaly_score", "Anomaly_Detection.plot_anomaly_and_spectro", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.detection_with_bothwindows", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.plot_anomaly_score", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.plot_anomaly_and_spectro"], ["def", "USLegis", "(", ")", ":", "\n", "\n", "    ", "timestamps", "=", "12", "\n", "percent_ranked", "=", "0.20", "\n", "eigen_file", "=", "\"USLegis_L_singular.pkl\"", "\n", "fname", "=", "\"USLegis\"", "\n", "difference", "=", "True", "\n", "#real_events = [3,7]", "\n", "\n", "window1", "=", "1", "\n", "window2", "=", "2", "\n", "initial_window", "=", "2", "\n", "(", "z_shorts", ",", "z_longs", ",", "z_scores", ",", "events", ")", "=", "detection_with_bothwindows", "(", "eigen_file", "=", "eigen_file", ",", "timestamps", "=", "timestamps", ",", "\n", "percent_ranked", "=", "percent_ranked", ",", "window1", "=", "window1", ",", "window2", "=", "window2", ",", "initial_window", "=", "initial_window", ",", "difference", "=", "difference", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "scores", ".", "append", "(", "z_shorts", ")", "\n", "scores", ".", "append", "(", "z_longs", ")", "\n", "score_labels", "=", "[", "\"short term \"", "+", "str", "(", "window1", ")", ",", "\"long term \"", "+", "str", "(", "window2", ")", "]", "\n", "plot_anomaly_score", "(", "\"USLegis\"", ",", "fname", ",", "scores", ",", "score_labels", ",", "events", ")", "\n", "\n", "scores", "=", "[", "z_scores", "]", "\n", "score_labels", "=", "[", "\"anomaly score\"", "]", "\n", "plot_anomaly_and_spectro", "(", "fname", ",", "scores", ",", "score_labels", ",", "events", ",", "eigen_file", "=", "eigen_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.UCI_Message": [[671, 690], ["datasets.UCI_loader.load_temporarl_edgelist", "Anomaly_Detection.detection_with_bothwindows", "scores.append", "scores.append", "Anomaly_Detection.plot_anomaly_score", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.detection_with_bothwindows", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.plot_anomaly_score"], ["", "def", "UCI_Message", "(", ")", ":", "\n", "    ", "timestamps", "=", "196", "\n", "percent_ranked", "=", "0.05", "\n", "eigen_file", "=", "\"UCI_L_singular.pkl\"", "\n", "fname", "=", "\"UCI\"", "\n", "difference", "=", "True", "\n", "G_times", "=", "UCI_loader", ".", "load_temporarl_edgelist", "(", "\"datasets/UCI_processed/OCnodeslinks_chars.txt\"", ",", "max_nodes", "=", "1901", ")", "\n", "\n", "#real_events = [65,158]", "\n", "window1", "=", "7", "\n", "window2", "=", "14", "\n", "initial_window", "=", "14", "\n", "(", "z_shorts", ",", "z_longs", ",", "z_scores", ",", "events", ")", "=", "detection_with_bothwindows", "(", "eigen_file", "=", "eigen_file", ",", "timestamps", "=", "timestamps", ",", "percent_ranked", "=", "percent_ranked", ",", "window1", "=", "window1", ",", "window2", "=", "window2", ",", "initial_window", "=", "initial_window", ",", "difference", "=", "difference", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "scores", ".", "append", "(", "z_shorts", ")", "\n", "scores", ".", "append", "(", "z_longs", ")", "\n", "score_labels", "=", "[", "\"short term \"", "+", "str", "(", "window1", ")", ",", "\"long term \"", "+", "str", "(", "window2", ")", "]", "\n", "plot_anomaly_score", "(", "\"UCI\"", ",", "fname", ",", "scores", ",", "score_labels", ",", "events", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.synthetic": [[701, 724], ["Anomaly_Detection.detection_with_bothwindows", "scores.append", "scores.append", "Anomaly_Detection.plot_anomaly_score", "Anomaly_Detection.compute_accuracy", "print", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.detection_with_bothwindows", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.plot_anomaly_score", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.compute_accuracy"], ["", "def", "synthetic", "(", "fname", ")", ":", "\n", "\n", "    ", "timestamps", "=", "151", "\n", "percent_ranked", "=", "0.047", "\n", "eigen_file", "=", "fname", "+", "\".pkl\"", "\n", "difference", "=", "True", "\n", "real_events", "=", "[", "16", ",", "31", ",", "61", ",", "76", ",", "91", ",", "106", ",", "136", "]", "\n", "\n", "\n", "window1", "=", "5", "\n", "window2", "=", "10", "\n", "initial_window", "=", "10", "\n", "(", "z_shorts", ",", "z_longs", ",", "z_scores", ",", "events", ")", "=", "detection_with_bothwindows", "(", "eigen_file", "=", "eigen_file", ",", "timestamps", "=", "timestamps", ",", "\n", "percent_ranked", "=", "percent_ranked", ",", "window1", "=", "window1", ",", "window2", "=", "window2", ",", "initial_window", "=", "initial_window", ",", "difference", "=", "difference", ")", "\n", "scores", "=", "[", "]", "\n", "scores", ".", "append", "(", "z_shorts", ")", "\n", "scores", ".", "append", "(", "z_longs", ")", "\n", "score_labels", "=", "[", "\"short term \"", "+", "str", "(", "window1", ")", ",", "\"long term \"", "+", "str", "(", "window2", ")", "]", "\n", "plot_anomaly_score", "(", "\"synthetic\"", ",", "fname", ",", "scores", ",", "score_labels", ",", "events", ")", "\n", "\n", "\n", "accu", "=", "compute_accuracy", "(", "z_scores", ",", "real_events", ",", "percent_ranked", ")", "\n", "print", "(", "\"the hits at 7 score is \"", "+", "str", "(", "accu", ")", "+", "\" %\"", ")", "\n", "# anomaly_ranks = [sorted(z_scores).index(x) for x in z_scores]", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.canVote": [[732, 751], ["Anomaly_Detection.detection_with_bothwindows", "scores.append", "scores.append", "Anomaly_Detection.plot_anomaly_score", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.detection_with_bothwindows", "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.plot_anomaly_score"], ["", "def", "canVote", "(", ")", ":", "\n", "\n", "    ", "timestamps", "=", "14", "\n", "percent_ranked", "=", "0.154", "\n", "eigen_file", "=", "\"canVote_L_singular.pkl\"", "\n", "fname", "=", "\"canVote\"", "\n", "difference", "=", "True", "\n", "#real_events = [5,9]", "\n", "\n", "window1", "=", "2", "\n", "window2", "=", "4", "\n", "initial_window", "=", "4", "\n", "(", "z_shorts", ",", "z_longs", ",", "z_scores", ",", "events", ")", "=", "detection_with_bothwindows", "(", "eigen_file", "=", "eigen_file", ",", "timestamps", "=", "timestamps", ",", "\n", "percent_ranked", "=", "percent_ranked", ",", "window1", "=", "window1", ",", "window2", "=", "window2", ",", "initial_window", "=", "initial_window", ",", "difference", "=", "difference", ")", "\n", "scores", "=", "[", "]", "\n", "scores", ".", "append", "(", "z_shorts", ")", "\n", "scores", ".", "append", "(", "z_longs", ")", "\n", "score_labels", "=", "[", "\"short term \"", "+", "str", "(", "window1", ")", ",", "\"long term \"", "+", "str", "(", "window2", ")", "]", "\n", "plot_anomaly_score", "(", "\"canVote\"", ",", "fname", ",", "scores", ",", "score_labels", ",", "events", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.main": [[760, 765], ["Anomaly_Detection.synthetic"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.None.Anomaly_Detection.synthetic"], ["", "def", "main", "(", ")", ":", "\n", "#canVote()", "\n", "#synthetic()", "\n", "#USLegis()", "\n", "    ", "synthetic", "(", "\"pure_0.05_0.25_0\"", ")", "\n", "#UCI_Message()", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.canVote_loader.load_object": [[6, 11], ["open", "pickle.load"], "function", ["None"], ["def", "load_object", "(", "filename", ")", ":", "\n", "    ", "output", "=", "0", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "fp", ":", "\n", "        ", "output", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.canVote_loader.save_object": [[13, 16], ["open", "pickle.dump"], "function", ["None"], ["", "def", "save_object", "(", "obj", ",", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "output", ":", "# Overwrites any existing file.", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "output", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.canVote_loader.pkl2edgelist": [[18, 36], ["canVote_loader.load_object", "open", "list", "list.sort", "print", "range", "open.close", "load_object.keys", "len", "open.write", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.load_object"], ["", "", "def", "pkl2edgelist", "(", "fname", ",", "outName", ")", ":", "\n", "    ", "temp_dict", "=", "load_object", "(", "fname", ")", "\n", "outfile", "=", "open", "(", "outName", ",", "\"w\"", ")", "\n", "temps", "=", "list", "(", "temp_dict", ".", "keys", "(", ")", ")", "\n", "temps", ".", "sort", "(", ")", "\n", "print", "(", "temps", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "temps", ")", ")", ":", "\n", "# (u,v) : w", "\n", "        ", "edges", "=", "{", "}", "\n", "for", "(", "u", ",", "v", ")", "in", "temp_dict", "[", "temps", "[", "i", "]", "]", ":", "\n", "            ", "if", "(", "(", "u", ",", "v", ")", "in", "edges", ")", ":", "\n", "                ", "edges", "[", "(", "u", ",", "v", ")", "]", "=", "edges", "[", "(", "u", ",", "v", ")", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "edges", "[", "(", "u", ",", "v", ")", "]", "=", "1", "\n", "\n", "", "", "for", "(", "u", ",", "v", ")", "in", "edges", ":", "\n", "            ", "outfile", ".", "write", "(", "str", "(", "temps", "[", "i", "]", ")", "+", "\",\"", "+", "str", "(", "u", ")", "+", "\",\"", "+", "str", "(", "v", ")", "+", "\",\"", "+", "str", "(", "edges", "[", "(", "u", ",", "v", ")", "]", ")", "+", "\"\\n\"", ")", "\n", "", "", "outfile", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.canVote_loader.load_canVote_temporarl_edgelist": [[48, 87], ["open", "list", "open.close", "networkx.DiGraph", "range", "G_times.append", "print", "open.readlines", "len", "line.split", "int", "nx.DiGraph.add_edge", "str", "G_times.append", "networkx.DiGraph", "len"], "function", ["None"], ["def", "load_canVote_temporarl_edgelist", "(", "fname", ")", ":", "\n", "    ", "edgelist", "=", "open", "(", "fname", ",", "\"r\"", ")", "\n", "lines", "=", "list", "(", "edgelist", ".", "readlines", "(", ")", ")", "\n", "edgelist", ".", "close", "(", ")", "\n", "#assume it is a directed graph at each timestamp", "\n", "# G = nx.DiGraph()", "\n", "\n", "#date u  v  w", "\n", "#find how many timestamps there are", "\n", "max_time", "=", "0", "\n", "current_date", "=", "''", "\n", "#create one graph for each day", "\n", "G_times", "=", "[", "]", "\n", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "#idx = 0   #gephi", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lines", ")", ")", ":", "\n", "        ", "line", "=", "lines", "[", "i", "]", "\n", "values", "=", "line", ".", "split", "(", "','", ")", "\n", "t", "=", "values", "[", "0", "]", "\n", "v", "=", "values", "[", "1", "]", "\n", "u", "=", "values", "[", "2", "]", "\n", "w", "=", "int", "(", "values", "[", "3", "]", ")", "#edge weight by number of shared publications in a year", "\n", "if", "current_date", "!=", "''", ":", "\n", "            ", "if", "t", "!=", "current_date", ":", "\n", "                ", "G_times", ".", "append", "(", "G", ")", "#append old graph", "\n", "#nx.write_gexf(G, str(idx+2006) + \".gexf\")      #gephi", "\n", "#idx = idx + 1      #gephi", "\n", "G", "=", "nx", ".", "DiGraph", "(", ")", "#create new graph", "\n", "current_date", "=", "t", "\n", "", "", "else", ":", "\n", "            ", "current_date", "=", "t", "\n", "", "G", ".", "add_edge", "(", "u", ",", "v", ",", "weight", "=", "w", ")", "\n", "#don't forget to add last one!!!!", "\n", "", "G_times", ".", "append", "(", "G", ")", "\n", "#nx.write_gexf(G, str(idx+2006) + \".gexf\")      #gephi", "\n", "\n", "print", "(", "\"maximum time stamp is \"", "+", "str", "(", "len", "(", "G_times", ")", ")", ")", "\n", "return", "G_times", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.canVote_loader.load_csv": [[89, 101], ["open", "open.readline", "open.readlines", "line.strip.strip", "line.strip.split"], "function", ["None"], ["", "def", "load_csv", "(", ")", ":", "\n", "    ", "MP_dict", "=", "{", "}", "\n", "fname", "=", "\"party_politics.csv\"", "\n", "file", "=", "open", "(", "fname", ",", "\"r\"", ")", "\n", "file", ".", "readline", "(", ")", "\n", "for", "line", "in", "file", ".", "readlines", "(", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", "\"\\n\"", ")", "\n", "values", "=", "line", ".", "split", "(", "\",\"", ")", "\n", "u", "=", "values", "[", "-", "2", "]", "\n", "party", "=", "values", "[", "-", "1", "]", "\n", "MP_dict", "[", "u", "]", "=", "party", "\n", "", "return", "MP_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.canVote_loader.load_pkl": [[103, 106], ["canVote_loader.load_object"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.load_object"], ["", "def", "load_pkl", "(", ")", ":", "\n", "    ", "MP_dict", "=", "load_object", "(", "\"mp_dict.pkl\"", ")", "\n", "return", "MP_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.canVote_loader.main": [[109, 132], ["canVote_loader.pkl2edgelist"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.canVote_loader.pkl2edgelist"], ["", "def", "main", "(", ")", ":", "\n", "# G_times = load_canVote_temporarl_edgelist(\"canVote_processed/canVote_edgelist.txt\")", "\n", "\n", "# MP_dict = load_pkl()", "\n", "# print (len(MP_dict))", "\n", "# labels = list(range(2006,2020,1))", "\n", "\n", "# parties = []", "\n", "# for key in MP_dict.keys():", "\n", "#     if MP_dict[key] not in parties:", "\n", "#         parties.append(MP_dict[key])", "\n", "\n", "# # print (MP_dict)", "\n", "\n", "# noParties = {}", "\n", "# for G in G_times:", "\n", "#     for n in G.nodes():", "\n", "#         if n not in MP_dict and n not in noParties:", "\n", "#             noParties[n] = 1", "\n", "\n", "# print (MP_dict)", "\n", "\n", "    ", "pkl2edgelist", "(", "\"temp_edgelist.pkl\"", ",", "\"canVote_edgelist.txt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.SBM_loader.load_temporarl_edgelist": [[17, 44], ["open", "list", "open.close", "networkx.Graph", "range", "G_times.append", "print", "open.readlines", "len", "re.findall", "int", "int", "int", "nx.Graph.add_edge", "G_times.append", "networkx.Graph", "str", "len"], "function", ["None"], ["def", "load_temporarl_edgelist", "(", "fname", ")", ":", "\n", "    ", "edgelist", "=", "open", "(", "fname", ",", "\"r\"", ")", "\n", "lines", "=", "list", "(", "edgelist", ".", "readlines", "(", ")", ")", "\n", "edgelist", ".", "close", "(", ")", "\n", "cur_t", "=", "0", "\n", "\n", "'''\n    t u v\n    '''", "\n", "G_times", "=", "[", "]", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lines", ")", ")", ":", "\n", "        ", "line", "=", "lines", "[", "i", "]", "\n", "values", "=", "re", ".", "findall", "(", "r\"[-+]?\\d*\\.\\d+|[-+]?\\d+\"", ",", "line", ")", "\n", "t", "=", "int", "(", "values", "[", "0", "]", ")", "\n", "u", "=", "int", "(", "values", "[", "1", "]", ")", "\n", "v", "=", "int", "(", "values", "[", "2", "]", ")", "\n", "#start a new graph with a new date", "\n", "if", "(", "t", "!=", "cur_t", ")", ":", "\n", "            ", "G_times", ".", "append", "(", "G", ")", "#append old graph", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "#create new graph", "\n", "cur_t", "=", "t", "\n", "", "G", ".", "add_edge", "(", "u", ",", "v", ")", "\n", "", "G_times", ".", "append", "(", "G", ")", "\n", "print", "(", "\"maximum time stamp is \"", "+", "str", "(", "len", "(", "G_times", ")", ")", ")", "\n", "return", "G_times", "", "", ""]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.UCI_loader.load_temporarl_edgelist": [[10, 52], ["open", "list", "open.close", "networkx.DiGraph", "range", "G_times.append", "print", "open.readlines", "nx.DiGraph.add_nodes_from", "len", "re.findall", "list", "len", "re.search", "re.search.group", "int", "int", "int", "nx.DiGraph.add_edge", "str", "range", "len", "G_times.append", "networkx.DiGraph", "nx.DiGraph.add_nodes_from", "list", "range"], "function", ["None"], ["def", "load_temporarl_edgelist", "(", "fname", ",", "max_nodes", "=", "-", "1", ")", ":", "\n", "\t", "edgelist", "=", "open", "(", "fname", ",", "\"r\"", ")", "\n", "lines", "=", "list", "(", "edgelist", ".", "readlines", "(", ")", ")", "\n", "edgelist", ".", "close", "(", ")", "\n", "#assume it is a directed graph at each timestamp", "\n", "# G = nx.DiGraph()", "\n", "\n", "#date u  v  w", "\n", "#find how many timestamps there are", "\n", "max_time", "=", "0", "\n", "current_date", "=", "''", "\n", "#create one graph for each day", "\n", "G_times", "=", "[", "]", "\n", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "if", "(", "max_nodes", ">", "0", ")", ":", "\n", "\t\t", "G", ".", "add_nodes_from", "(", "list", "(", "range", "(", "0", ",", "max_nodes", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lines", ")", ")", ":", "\n", "\t\t", "line", "=", "lines", "[", "i", "]", "\n", "values", "=", "re", ".", "findall", "(", "r\"[-+]?\\d*\\.\\d+|[-+]?\\d+\"", ",", "line", ")", "\n", "if", "(", "len", "(", "values", ")", "<", "3", ")", ":", "\n", "\t\t\t", "continue", "\n", "", "else", ":", "\n", "\t\t\t", "match", "=", "re", ".", "search", "(", "r'\\d{4}-\\d{2}-\\d{2}'", ",", "line", ")", "\n", "date_str", "=", "match", ".", "group", "(", "0", ")", "#xxxx-xx-xx", "\n", "\n", "#start a new graph with a new date", "\n", "if", "(", "date_str", "!=", "current_date", ")", ":", "\n", "\t\t\t\t", "if", "(", "current_date", "!=", "''", ")", ":", "\n", "\t\t\t\t\t", "G_times", ".", "append", "(", "G", ")", "#append old graph", "\n", "G", "=", "nx", ".", "DiGraph", "(", ")", "#create new graph", "\n", "if", "(", "max_nodes", ">", "0", ")", ":", "\n", "\t\t\t\t\t\t", "G", ".", "add_nodes_from", "(", "list", "(", "range", "(", "0", ",", "max_nodes", ")", ")", ")", "\n", "", "", "current_date", "=", "date_str", "#update the current date", "\n", "\n", "", "w", "=", "int", "(", "values", "[", "-", "1", "]", ")", "#edge weight by number of characters ", "\n", "v", "=", "int", "(", "values", "[", "-", "2", "]", ")", "\n", "u", "=", "int", "(", "values", "[", "-", "3", "]", ")", "\n", "G", ".", "add_edge", "(", "u", ",", "v", ",", "weight", "=", "w", ")", "\n", "", "", "G_times", ".", "append", "(", "G", ")", "\n", "print", "(", "\"maximum time stamp is \"", "+", "str", "(", "len", "(", "G_times", ")", ")", ")", "\n", "return", "G_times", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.datasets.USLegis_loader.load_legis_temporarl_edgelist": [[9, 42], ["open", "list", "open.close", "networkx.Graph", "range", "G_times.append", "print", "open.readlines", "len", "line.split", "int", "int", "int", "nx.Graph.add_edge", "str", "G_times.append", "networkx.Graph", "len"], "function", ["None"], ["def", "load_legis_temporarl_edgelist", "(", "fname", ")", ":", "\n", "\t", "edgelist", "=", "open", "(", "fname", ",", "\"r\"", ")", "\n", "lines", "=", "list", "(", "edgelist", ".", "readlines", "(", ")", ")", "\n", "edgelist", ".", "close", "(", ")", "\n", "#assume it is a directed graph at each timestamp", "\n", "# G = nx.DiGraph()", "\n", "\n", "#date u  v  w", "\n", "#find how many timestamps there are", "\n", "max_time", "=", "0", "\n", "current_date", "=", "''", "\n", "#create one graph for each day", "\n", "G_times", "=", "[", "]", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lines", ")", ")", ":", "\n", "\t\t", "line", "=", "lines", "[", "i", "]", "\n", "values", "=", "line", ".", "split", "(", "','", ")", "\n", "t", "=", "values", "[", "0", "]", "\n", "v", "=", "int", "(", "values", "[", "1", "]", ")", "\n", "u", "=", "int", "(", "values", "[", "2", "]", ")", "\n", "w", "=", "int", "(", "values", "[", "3", "]", ")", "#edge weight by number of shared publications in a year", "\n", "if", "current_date", "!=", "''", ":", "\n", "\t\t\t", "if", "t", "!=", "current_date", ":", "\n", "\t\t\t\t", "G_times", ".", "append", "(", "G", ")", "#append old graph", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "#create new graph", "\n", "current_date", "=", "t", "\n", "", "", "else", ":", "\n", "\t\t\t", "current_date", "=", "t", "\n", "", "G", ".", "add_edge", "(", "u", ",", "v", ",", "weight", "=", "w", ")", "\n", "", "G_times", ".", "append", "(", "G", ")", "\n", "print", "(", "\"maximum time stamp is \"", "+", "str", "(", "len", "(", "G_times", ")", ")", ")", "\n", "return", "G_times", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.UCI_processed.UCI_separator.load_temporarl_edgelist": [[10, 52], ["open", "list", "open.close", "networkx.DiGraph", "range", "G_times.append", "print", "open.readlines", "nx.DiGraph.add_nodes_from", "len", "re.findall", "list", "len", "re.search", "re.search.group", "int", "int", "int", "nx.DiGraph.add_edge", "str", "range", "len", "G_times.append", "networkx.DiGraph", "nx.DiGraph.add_nodes_from", "list", "range"], "function", ["None"], ["def", "load_temporarl_edgelist", "(", "fname", ",", "max_nodes", "=", "-", "1", ")", ":", "\n", "\t", "edgelist", "=", "open", "(", "fname", ",", "\"r\"", ")", "\n", "lines", "=", "list", "(", "edgelist", ".", "readlines", "(", ")", ")", "\n", "edgelist", ".", "close", "(", ")", "\n", "#assume it is a directed graph at each timestamp", "\n", "# G = nx.DiGraph()", "\n", "\n", "#date u  v  w", "\n", "#find how many timestamps there are", "\n", "max_time", "=", "0", "\n", "current_date", "=", "''", "\n", "#create one graph for each day", "\n", "G_times", "=", "[", "]", "\n", "G", "=", "nx", ".", "DiGraph", "(", ")", "\n", "if", "(", "max_nodes", ">", "0", ")", ":", "\n", "\t\t", "G", ".", "add_nodes_from", "(", "list", "(", "range", "(", "0", ",", "max_nodes", ")", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lines", ")", ")", ":", "\n", "\t\t", "line", "=", "lines", "[", "i", "]", "\n", "values", "=", "re", ".", "findall", "(", "r\"[-+]?\\d*\\.\\d+|[-+]?\\d+\"", ",", "line", ")", "\n", "if", "(", "len", "(", "values", ")", "<", "3", ")", ":", "\n", "\t\t\t", "continue", "\n", "", "else", ":", "\n", "\t\t\t", "match", "=", "re", ".", "search", "(", "r'\\d{4}-\\d{2}-\\d{2}'", ",", "line", ")", "\n", "date_str", "=", "match", ".", "group", "(", "0", ")", "#xxxx-xx-xx", "\n", "\n", "#start a new graph with a new date", "\n", "if", "(", "date_str", "!=", "current_date", ")", ":", "\n", "\t\t\t\t", "if", "(", "current_date", "!=", "''", ")", ":", "\n", "\t\t\t\t\t", "G_times", ".", "append", "(", "G", ")", "#append old graph", "\n", "G", "=", "nx", ".", "DiGraph", "(", ")", "#create new graph", "\n", "if", "(", "max_nodes", ">", "0", ")", ":", "\n", "\t\t\t\t\t\t", "G", ".", "add_nodes_from", "(", "list", "(", "range", "(", "0", ",", "max_nodes", ")", ")", ")", "\n", "", "", "current_date", "=", "date_str", "#update the current date", "\n", "\n", "", "w", "=", "int", "(", "values", "[", "-", "1", "]", ")", "#edge weight by number of characters ", "\n", "v", "=", "int", "(", "values", "[", "-", "2", "]", ")", "\n", "u", "=", "int", "(", "values", "[", "-", "3", "]", ")", "\n", "G", ".", "add_edge", "(", "u", ",", "v", ",", "weight", "=", "w", ")", "\n", "", "", "G_times", ".", "append", "(", "G", ")", "\n", "print", "(", "\"maximum time stamp is \"", "+", "str", "(", "len", "(", "G_times", ")", ")", ")", "\n", "return", "G_times", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.UCI_processed.UCI_separator.separate_files": [[54, 64], ["range", "len", "open", "open.close", "print", "open.write", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "separate_files", "(", "G_times", ")", ":", "\n", "\t", "for", "i", "in", "range", "(", "len", "(", "G_times", ")", ")", ":", "\n", "\t\t", "G", "=", "G_times", "[", "i", "]", "\n", "t", "=", "i", "\n", "fname", "=", "\"UCI/\"", "+", "str", "(", "t", ")", "+", "\".txt\"", "\n", "edgelist", "=", "open", "(", "fname", ",", "\"w\"", ")", "\n", "for", "(", "u", ",", "v", ")", "in", "G", ".", "edges", ":", "\n", "\t\t\t", "edgelist", ".", "write", "(", "str", "(", "u", ")", "+", "\" \"", "+", "str", "(", "v", ")", "+", "\" \"", "+", "str", "(", "G", "[", "u", "]", "[", "v", "]", "[", "'weight'", "]", ")", "+", "\"\\n\"", ")", "\n", "", "edgelist", ".", "close", "(", ")", "\n", "print", "(", "\"finished writing \"", "+", "str", "(", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.UCI_processed.UCI_separator.main": [[74, 77], ["UCI_separator.load_temporarl_edgelist", "UCI_separator.separate_files"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.separate_files"], ["", "", "def", "main", "(", ")", ":", "\n", "\t", "G_times", "=", "load_temporarl_edgelist", "(", "\"OCnodeslinks_chars.txt\"", ",", "max_nodes", "=", "1901", ")", "\n", "separate_files", "(", "G_times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.to_edgelist": [[18, 29], ["open", "open.close", "print", "open.write", "str", "str", "str"], "function", ["None"], ["def", "to_edgelist", "(", "G_times", ",", "outfile", ")", ":", "\n", "\n", "    ", "outfile", "=", "open", "(", "outfile", ",", "\"w\"", ")", "\n", "tdx", "=", "0", "\n", "for", "G", "in", "G_times", ":", "\n", "\n", "        ", "for", "(", "u", ",", "v", ")", "in", "G", ".", "edges", ":", "\n", "            ", "outfile", ".", "write", "(", "str", "(", "tdx", ")", "+", "\",\"", "+", "str", "(", "u", ")", "+", "\",\"", "+", "str", "(", "v", ")", "+", "\"\\n\"", ")", "\n", "", "tdx", "=", "tdx", "+", "1", "\n", "", "outfile", ".", "close", "(", ")", "\n", "print", "(", "\"write successful\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.ER_snapshot": [[35, 53], ["G_prev.copy", "networkx.generators.gnp_random_graph", "range", "range", "random.uniform", "generators.gnp_random_graph.has_edge", "G_prev.copy.add_edge", "G_prev.copy.has_edge", "G_prev.copy.remove_edge", "G_prev.copy.has_edge", "generators.gnp_random_graph.has_edge"], "function", ["None"], ["def", "ER_snapshot", "(", "G_prev", ",", "alpha", ",", "p", ")", ":", "\n", "\n", "    ", "'''\n    for all pairs of nodes, keep its status from time t-1 with 1-alpha prob and resample with alpha prob\n    '''", "\n", "G_t", "=", "G_prev", ".", "copy", "(", ")", "\n", "G_new", "=", "generators", ".", "gnp_random_graph", "(", "500", ",", "p", ",", "directed", "=", "False", ")", "\n", "n", "=", "500", "\n", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n", ")", ":", "\n", "#remain the same if prob > alpha", "\n", "            ", "prob", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "(", "prob", "<=", "alpha", ")", ":", "\n", "                ", "if", "(", "G_new", ".", "has_edge", "(", "i", ",", "j", ")", "and", "not", "G_t", ".", "has_edge", "(", "i", ",", "j", ")", ")", ":", "\n", "                    ", "G_t", ".", "add_edge", "(", "i", ",", "j", ")", "\n", "", "if", "(", "not", "G_new", ".", "has_edge", "(", "i", ",", "j", ")", "and", "G_t", ".", "has_edge", "(", "i", ",", "j", ")", ")", ":", "\n", "                    ", "G_t", ".", "remove_edge", "(", "i", ",", "j", ")", "\n", "", "", "", "", "return", "G_t", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.SBM_snapshot": [[61, 81], ["G_prev.copy", "list", "networkx.stochastic_block_model", "len", "range", "range", "range", "sum", "random.uniform", "nx.stochastic_block_model.has_edge", "G_prev.copy.add_edge", "G_prev.copy.has_edge", "G_prev.copy.remove_edge", "G_prev.copy.has_edge", "nx.stochastic_block_model.has_edge"], "function", ["None"], ["", "def", "SBM_snapshot", "(", "G_prev", ",", "alpha", ",", "sizes", ",", "probs", ")", ":", "\n", "\n", "    ", "G_t", "=", "G_prev", ".", "copy", "(", ")", "\n", "nodelist", "=", "list", "(", "range", "(", "0", ",", "sum", "(", "sizes", ")", ")", ")", "\n", "G_new", "=", "nx", ".", "stochastic_block_model", "(", "sizes", ",", "probs", ",", "nodelist", "=", "nodelist", ")", "\n", "n", "=", "len", "(", "G_t", ")", "\n", "if", "(", "alpha", "==", "1.0", ")", ":", "\n", "        ", "return", "G_new", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "n", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n", ")", ":", "\n", "#randomly decide if remain the same or resample", "\n", "#remain the same if prob > alpha", "\n", "            ", "prob", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "(", "prob", "<=", "alpha", ")", ":", "\n", "                ", "if", "(", "G_new", ".", "has_edge", "(", "i", ",", "j", ")", "and", "not", "G_t", ".", "has_edge", "(", "i", ",", "j", ")", ")", ":", "\n", "                    ", "G_t", ".", "add_edge", "(", "i", ",", "j", ")", "\n", "", "if", "(", "not", "G_new", ".", "has_edge", "(", "i", ",", "j", ")", "and", "G_t", ".", "has_edge", "(", "i", ",", "j", ")", ")", ":", "\n", "                    ", "G_t", ".", "remove_edge", "(", "i", ",", "j", ")", "\n", "", "", "", "", "return", "G_t", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block": [[88, 95], ["range", "len", "probs.append", "len"], "function", ["None"], ["def", "construct_SBM_block", "(", "blocks", ",", "inter", ",", "intra", ")", ":", "\n", "    ", "probs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "blocks", ")", ")", ":", "\n", "        ", "prob", "=", "[", "inter", "]", "*", "len", "(", "blocks", ")", "\n", "prob", "[", "i", "]", "=", "intra", "\n", "probs", ".", "append", "(", "prob", ")", "\n", "", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.generate_pureSetting": [[105, 164], ["SBM_generator.construct_SBM_block", "SBM_generator.construct_SBM_block", "SBM_generator.construct_SBM_block", "list_sizes.append", "list_sizes.append", "list_sizes.append", "list_probs.append", "list_probs.append", "list_probs.append", "networkx.stochastic_block_model", "networkx.Graph", "G_times.append", "range", "SBM_generator.to_edgelist", "str", "SBM_generator.SBM_snapshot", "G_times.append", "print", "SBM_generator.SBM_snapshot", "G_times.append", "print", "str", "len", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.to_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.SBM_snapshot", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.SBM_snapshot"], ["def", "generate_pureSetting", "(", "inter_prob", ",", "intra_prob", ",", "alpha", ")", ":", "\n", "    ", "cps", "=", "[", "15", ",", "30", ",", "60", ",", "75", ",", "90", ",", "105", ",", "135", "]", "\n", "fname", "=", "\"pure_\"", "+", "str", "(", "inter_prob", ")", "+", "\"_\"", "+", "str", "(", "intra_prob", ")", "+", "\"_\"", "+", "str", "(", "alpha", ")", "+", "\".txt\"", "\n", "\n", "cps_sizes", "=", "[", "]", "\n", "cps_probs", "=", "[", "]", "\n", "\n", "\n", "#let there be 500 nodes", "\n", "sizes_1", "=", "[", "250", ",", "250", "]", "#500 nodes total at all times", "\n", "probs_1", "=", "construct_SBM_block", "(", "sizes_1", ",", "inter_prob", ",", "intra_prob", ")", "\n", "\n", "sizes_2", "=", "[", "125", ",", "125", ",", "125", ",", "125", "]", "\n", "probs_2", "=", "construct_SBM_block", "(", "sizes_2", ",", "inter_prob", ",", "intra_prob", ")", "\n", "\n", "\n", "sizes_3", "=", "[", "50", "]", "*", "10", "\n", "probs_3", "=", "construct_SBM_block", "(", "sizes_3", ",", "inter_prob", ",", "intra_prob", ")", "\n", "\n", "list_sizes", "=", "[", "]", "\n", "list_sizes", ".", "append", "(", "sizes_1", ")", "\n", "list_sizes", ".", "append", "(", "sizes_2", ")", "\n", "list_sizes", ".", "append", "(", "sizes_3", ")", "\n", "\n", "\n", "list_probs", "=", "[", "]", "\n", "list_probs", ".", "append", "(", "probs_1", ")", "\n", "list_probs", ".", "append", "(", "probs_2", ")", "\n", "list_probs", ".", "append", "(", "probs_3", ")", "\n", "\n", "list_idx", "=", "1", "\n", "sizes", "=", "sizes_2", "\n", "probs", "=", "probs_2", "\n", "maxt", "=", "150", "\n", "G_0", "=", "nx", ".", "stochastic_block_model", "(", "sizes", ",", "probs", ")", "\n", "G_0", "=", "nx", ".", "Graph", "(", "G_0", ")", "\n", "G_t", "=", "G_0", "\n", "G_times", "=", "[", "]", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "\n", "for", "t", "in", "range", "(", "maxt", ")", ":", "\n", "        ", "if", "(", "t", "in", "cps", ")", ":", "\n", "            ", "if", "(", "(", "list_idx", "+", "1", ")", ">", "len", "(", "list_sizes", ")", "-", "1", ")", ":", "\n", "                ", "list_idx", "=", "0", "\n", "", "else", ":", "\n", "                ", "list_idx", "=", "list_idx", "+", "1", "\n", "", "sizes", "=", "list_sizes", "[", "list_idx", "]", "\n", "probs", "=", "list_probs", "[", "list_idx", "]", "\n", "G_t", "=", "SBM_snapshot", "(", "G_t", ",", "1.0", ",", "sizes", ",", "probs", ")", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "print", "(", "\"generating \"", "+", "str", "(", "t", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "G_t", "=", "SBM_snapshot", "(", "G_t", ",", "alpha", ",", "sizes", ",", "probs", ")", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "print", "(", "\"generating \"", "+", "str", "(", "t", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "\n", "#write the entire history of snapshots", "\n", "", "", "to_edgelist", "(", "G_times", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.generate_hybridSetting": [[175, 248], ["SBM_generator.construct_SBM_block", "SBM_generator.construct_SBM_block", "SBM_generator.construct_SBM_block", "list_sizes.append", "list_sizes.append", "list_sizes.append", "list_probs.append", "list_probs.append", "list_probs.append", "networkx.stochastic_block_model", "networkx.Graph", "G_times.append", "range", "SBM_generator.to_edgelist", "str", "SBM_generator.SBM_snapshot", "G_times.append", "print", "copy.deepcopy", "range", "SBM_generator.SBM_snapshot", "G_times.append", "print", "SBM_generator.SBM_snapshot", "G_times.append", "print", "str", "len", "range", "numpy.asarray", "str", "len", "str", "len", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.to_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.SBM_snapshot", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.SBM_snapshot", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.SBM_snapshot"], ["def", "generate_hybridSetting", "(", "inter_prob", ",", "intra_prob", ",", "alpha", ",", "increment", ")", ":", "\n", "    ", "cps", "=", "[", "15", ",", "30", ",", "60", ",", "75", ",", "90", ",", "105", ",", "135", "]", "\n", "fname", "=", "\"hybrid_\"", "+", "str", "(", "inter_prob", ")", "+", "\"_\"", "+", "str", "(", "intra_prob", ")", "+", "\"_\"", "+", "str", "(", "alpha", ")", "+", "\".txt\"", "\n", "\n", "cps_sizes", "=", "[", "]", "\n", "cps_probs", "=", "[", "]", "\n", "\n", "sizes_1", "=", "[", "250", ",", "250", "]", "#500 nodes total at all times", "\n", "probs_1", "=", "construct_SBM_block", "(", "sizes_1", ",", "inter_prob", ",", "intra_prob", ")", "\n", "\n", "sizes_2", "=", "[", "125", ",", "125", ",", "125", ",", "125", "]", "\n", "probs_2", "=", "construct_SBM_block", "(", "sizes_2", ",", "inter_prob", ",", "intra_prob", ")", "\n", "\n", "sizes_3", "=", "[", "50", "]", "*", "10", "\n", "probs_3", "=", "construct_SBM_block", "(", "sizes_3", ",", "inter_prob", ",", "intra_prob", ")", "\n", "\n", "list_sizes", "=", "[", "]", "\n", "list_sizes", ".", "append", "(", "sizes_1", ")", "\n", "list_sizes", ".", "append", "(", "sizes_2", ")", "\n", "list_sizes", ".", "append", "(", "sizes_3", ")", "\n", "\n", "list_probs", "=", "[", "]", "\n", "list_probs", ".", "append", "(", "probs_1", ")", "\n", "list_probs", ".", "append", "(", "probs_2", ")", "\n", "list_probs", ".", "append", "(", "probs_3", ")", "\n", "\n", "list_idx", "=", "1", "\n", "isEvent", "=", "True", "\n", "sizes", "=", "sizes_2", "\n", "probs", "=", "probs_2", "\n", "\n", "maxt", "=", "150", "\n", "G_0", "=", "nx", ".", "stochastic_block_model", "(", "sizes", ",", "probs", ")", "\n", "G_0", "=", "nx", ".", "Graph", "(", "G_0", ")", "\n", "G_t", "=", "G_0", "\n", "G_times", "=", "[", "]", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "\n", "for", "t", "in", "range", "(", "maxt", ")", ":", "\n", "        ", "if", "(", "t", "in", "cps", ")", ":", "\n", "\n", "            ", "if", "(", "isEvent", ")", ":", "\n", "\n", "                ", "copy_probs", "=", "copy", ".", "deepcopy", "(", "probs", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "copy_probs", ")", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "len", "(", "copy_probs", "[", "0", "]", ")", ")", ":", "\n", "                        ", "if", "(", "copy_probs", "[", "i", "]", "[", "j", "]", "<", "intra_prob", ")", ":", "\n", "                            ", "copy_probs", "[", "i", "]", "[", "j", "]", "=", "copy_probs", "[", "i", "]", "[", "j", "]", "+", "increment", "\n", "\n", "", "", "", "G_t", "=", "SBM_snapshot", "(", "G_t", ",", "1.0", ",", "sizes", ",", "np", ".", "asarray", "(", "copy_probs", ")", ")", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "print", "(", "\"generating \"", "+", "str", "(", "t", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "isEvent", "=", "False", "\n", "#go back to normal afterwards", "\n", "", "else", ":", "\n", "                ", "if", "(", "(", "list_idx", "+", "1", ")", ">", "len", "(", "list_sizes", ")", "-", "1", ")", ":", "\n", "                    ", "list_idx", "=", "0", "\n", "", "else", ":", "\n", "                    ", "list_idx", "=", "list_idx", "+", "1", "\n", "", "sizes", "=", "list_sizes", "[", "list_idx", "]", "\n", "probs", "=", "list_probs", "[", "list_idx", "]", "\n", "G_t", "=", "SBM_snapshot", "(", "G_t", ",", "1.0", ",", "sizes", ",", "probs", ")", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "print", "(", "\"generating \"", "+", "str", "(", "t", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "isEvent", "=", "True", "\n", "\n", "", "", "else", ":", "\n", "            ", "G_t", "=", "SBM_snapshot", "(", "G_t", ",", "alpha", ",", "sizes", ",", "probs", ")", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "print", "(", "\"generating \"", "+", "str", "(", "t", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "\n", "#write the entire history of snapshots", "\n", "", "", "to_edgelist", "(", "G_times", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.generate_Connectivity_CP": [[259, 294], ["SBM_generator.construct_SBM_block", "networkx.stochastic_block_model", "networkx.Graph", "G_times.append", "range", "SBM_generator.to_edgelist", "str", "range", "SBM_generator.SBM_snapshot", "G_times.append", "SBM_generator.SBM_snapshot", "G_times.append", "print", "len", "range", "str", "len", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.to_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.SBM_snapshot", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.SBM_snapshot"], ["def", "generate_Connectivity_CP", "(", "inter_prob", ",", "intra_prob", ",", "increment", ",", "alpha", "=", "0.49", ")", ":", "\n", "    ", "cps", "=", "[", "15", ",", "30", ",", "60", ",", "75", ",", "90", ",", "105", ",", "135", "]", "\n", "fname", "=", "\"CPConnect_\"", "+", "str", "(", "inter_prob", ")", "+", "\"_\"", "+", "str", "(", "intra_prob", ")", "+", "\"_\"", "+", "str", "(", "increment", ")", "+", "\"_\"", "+", "str", "(", "alpha", ")", "+", "\".txt\"", "\n", "\n", "\n", "sizes_2", "=", "[", "125", ",", "125", ",", "125", ",", "125", "]", "\n", "probs_2", "=", "construct_SBM_block", "(", "sizes_2", ",", "inter_prob", ",", "intra_prob", ")", "\n", "\n", "\n", "\n", "sizes", "=", "sizes_2", "\n", "probs", "=", "probs_2", "\n", "maxt", "=", "150", "\n", "G_0", "=", "nx", ".", "stochastic_block_model", "(", "sizes", ",", "probs", ")", "\n", "G_0", "=", "nx", ".", "Graph", "(", "G_0", ")", "\n", "G_t", "=", "G_0", "\n", "G_times", "=", "[", "]", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "\n", "for", "t", "in", "range", "(", "maxt", ")", ":", "\n", "        ", "if", "(", "t", "in", "cps", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "probs", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "probs", "[", "0", "]", ")", ")", ":", "\n", "                    ", "if", "(", "probs", "[", "i", "]", "[", "j", "]", "<", "intra_prob", ")", ":", "\n", "                        ", "probs", "[", "i", "]", "[", "j", "]", "=", "probs", "[", "i", "]", "[", "j", "]", "+", "increment", "\n", "", "", "", "G_t", "=", "SBM_snapshot", "(", "G_t", ",", "alpha", ",", "sizes", ",", "probs", ")", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "\n", "", "else", ":", "\n", "            ", "G_t", "=", "SBM_snapshot", "(", "G_t", ",", "alpha", ",", "sizes", ",", "probs", ")", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "print", "(", "\"generating \"", "+", "str", "(", "t", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "\n", "#write the entire history of snapshots", "\n", "", "", "to_edgelist", "(", "G_times", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.generate_ChangePoint": [[305, 364], ["SBM_generator.construct_SBM_block", "SBM_generator.construct_SBM_block", "SBM_generator.construct_SBM_block", "list_sizes.append", "list_sizes.append", "list_sizes.append", "list_probs.append", "list_probs.append", "list_probs.append", "networkx.stochastic_block_model", "networkx.Graph", "G_times.append", "range", "SBM_generator.to_edgelist", "str", "SBM_generator.SBM_snapshot", "G_times.append", "print", "SBM_generator.SBM_snapshot", "G_times.append", "print", "str", "len", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.to_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.SBM_snapshot", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.SBM_snapshot"], ["def", "generate_ChangePoint", "(", "inter_prob", ",", "intra_prob", ",", "alpha", ")", ":", "\n", "    ", "cps", "=", "[", "15", ",", "30", ",", "60", ",", "75", ",", "90", ",", "105", ",", "135", "]", "\n", "fname", "=", "\"ChangePoint_\"", "+", "str", "(", "inter_prob", ")", "+", "\"_\"", "+", "str", "(", "intra_prob", ")", "+", "\"_\"", "+", "str", "(", "alpha", ")", "+", "\".txt\"", "\n", "\n", "cps_sizes", "=", "[", "]", "\n", "cps_probs", "=", "[", "]", "\n", "\n", "\n", "#let there be 500 nodes", "\n", "sizes_1", "=", "[", "250", ",", "250", "]", "#500 nodes total at all times", "\n", "probs_1", "=", "construct_SBM_block", "(", "sizes_1", ",", "inter_prob", ",", "intra_prob", ")", "\n", "\n", "sizes_2", "=", "[", "125", ",", "125", ",", "125", ",", "125", "]", "\n", "probs_2", "=", "construct_SBM_block", "(", "sizes_2", ",", "inter_prob", ",", "intra_prob", ")", "\n", "\n", "\n", "sizes_3", "=", "[", "50", "]", "*", "10", "\n", "probs_3", "=", "construct_SBM_block", "(", "sizes_3", ",", "inter_prob", ",", "intra_prob", ")", "\n", "\n", "list_sizes", "=", "[", "]", "\n", "list_sizes", ".", "append", "(", "sizes_1", ")", "\n", "list_sizes", ".", "append", "(", "sizes_2", ")", "\n", "list_sizes", ".", "append", "(", "sizes_3", ")", "\n", "\n", "\n", "list_probs", "=", "[", "]", "\n", "list_probs", ".", "append", "(", "probs_1", ")", "\n", "list_probs", ".", "append", "(", "probs_2", ")", "\n", "list_probs", ".", "append", "(", "probs_3", ")", "\n", "\n", "list_idx", "=", "1", "\n", "sizes", "=", "sizes_2", "\n", "probs", "=", "probs_2", "\n", "maxt", "=", "150", "\n", "G_0", "=", "nx", ".", "stochastic_block_model", "(", "sizes", ",", "probs", ")", "\n", "G_0", "=", "nx", ".", "Graph", "(", "G_0", ")", "\n", "G_t", "=", "G_0", "\n", "G_times", "=", "[", "]", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "\n", "for", "t", "in", "range", "(", "maxt", ")", ":", "\n", "        ", "if", "(", "t", "in", "cps", ")", ":", "\n", "            ", "if", "(", "(", "list_idx", "+", "1", ")", ">", "len", "(", "list_sizes", ")", "-", "1", ")", ":", "\n", "                ", "list_idx", "=", "0", "\n", "", "else", ":", "\n", "                ", "list_idx", "=", "list_idx", "+", "1", "\n", "", "sizes", "=", "list_sizes", "[", "list_idx", "]", "\n", "probs", "=", "list_probs", "[", "list_idx", "]", "\n", "G_t", "=", "SBM_snapshot", "(", "G_t", ",", "alpha", ",", "sizes", ",", "probs", ")", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "print", "(", "\"generating \"", "+", "str", "(", "t", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "\n", "", "else", ":", "\n", "            ", "G_t", "=", "SBM_snapshot", "(", "G_t", ",", "alpha", ",", "sizes", ",", "probs", ")", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "print", "(", "\"generating \"", "+", "str", "(", "t", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "\n", "#write the entire history of snapshots", "\n", "", "", "to_edgelist", "(", "G_times", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.generate_event_change": [[378, 451], ["SBM_generator.construct_SBM_block", "SBM_generator.construct_SBM_block", "SBM_generator.construct_SBM_block", "list_sizes.append", "list_sizes.append", "list_sizes.append", "list_probs.append", "list_probs.append", "list_probs.append", "networkx.stochastic_block_model", "networkx.Graph", "G_times.append", "range", "SBM_generator.to_edgelist", "str", "SBM_generator.SBM_snapshot", "G_times.append", "print", "copy.deepcopy", "range", "SBM_generator.SBM_snapshot", "G_times.append", "print", "SBM_generator.SBM_snapshot", "G_times.append", "print", "str", "len", "range", "numpy.asarray", "str", "len", "str", "len", "str", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.construct_SBM_block", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.to_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.SBM_snapshot", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.SBM_snapshot", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.SBM_snapshot"], ["def", "generate_event_change", "(", "inter_prob", ",", "intra_prob", ",", "alpha", ",", "increment", ")", ":", "\n", "    ", "cps", "=", "[", "15", ",", "30", ",", "60", ",", "75", ",", "90", ",", "105", ",", "135", "]", "\n", "fname", "=", "\"eventCP_\"", "+", "str", "(", "inter_prob", ")", "+", "\"_\"", "+", "str", "(", "intra_prob", ")", "+", "\"_\"", "+", "str", "(", "alpha", ")", "+", "\".txt\"", "\n", "\n", "cps_sizes", "=", "[", "]", "\n", "cps_probs", "=", "[", "]", "\n", "\n", "sizes_1", "=", "[", "250", ",", "250", "]", "\n", "probs_1", "=", "construct_SBM_block", "(", "sizes_1", ",", "inter_prob", ",", "intra_prob", ")", "\n", "\n", "sizes_2", "=", "[", "125", ",", "125", ",", "125", ",", "125", "]", "\n", "probs_2", "=", "construct_SBM_block", "(", "sizes_2", ",", "inter_prob", ",", "intra_prob", ")", "\n", "\n", "sizes_3", "=", "[", "50", "]", "*", "10", "\n", "probs_3", "=", "construct_SBM_block", "(", "sizes_3", ",", "inter_prob", ",", "intra_prob", ")", "\n", "\n", "list_sizes", "=", "[", "]", "\n", "list_sizes", ".", "append", "(", "sizes_1", ")", "\n", "list_sizes", ".", "append", "(", "sizes_2", ")", "\n", "list_sizes", ".", "append", "(", "sizes_3", ")", "\n", "\n", "list_probs", "=", "[", "]", "\n", "list_probs", ".", "append", "(", "probs_1", ")", "\n", "list_probs", ".", "append", "(", "probs_2", ")", "\n", "list_probs", ".", "append", "(", "probs_3", ")", "\n", "\n", "list_idx", "=", "1", "\n", "isEvent", "=", "True", "\n", "sizes", "=", "sizes_2", "\n", "probs", "=", "probs_2", "\n", "\n", "maxt", "=", "150", "\n", "G_0", "=", "nx", ".", "stochastic_block_model", "(", "sizes", ",", "probs", ")", "\n", "G_0", "=", "nx", ".", "Graph", "(", "G_0", ")", "\n", "G_t", "=", "G_0", "\n", "G_times", "=", "[", "]", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "\n", "for", "t", "in", "range", "(", "maxt", ")", ":", "\n", "        ", "if", "(", "t", "in", "cps", ")", ":", "\n", "\n", "            ", "if", "(", "isEvent", ")", ":", "\n", "\n", "                ", "copy_probs", "=", "copy", ".", "deepcopy", "(", "probs", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "copy_probs", ")", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "len", "(", "copy_probs", "[", "0", "]", ")", ")", ":", "\n", "                        ", "if", "(", "copy_probs", "[", "i", "]", "[", "j", "]", "<", "intra_prob", ")", ":", "\n", "                            ", "copy_probs", "[", "i", "]", "[", "j", "]", "=", "copy_probs", "[", "i", "]", "[", "j", "]", "+", "increment", "\n", "\n", "", "", "", "G_t", "=", "SBM_snapshot", "(", "G_t", ",", "alpha", ",", "sizes", ",", "np", ".", "asarray", "(", "copy_probs", ")", ")", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "print", "(", "\"generating \"", "+", "str", "(", "t", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "isEvent", "=", "False", "\n", "#go back to normal afterwards", "\n", "", "else", ":", "\n", "                ", "if", "(", "(", "list_idx", "+", "1", ")", ">", "len", "(", "list_sizes", ")", "-", "1", ")", ":", "\n", "                    ", "list_idx", "=", "0", "\n", "", "else", ":", "\n", "                    ", "list_idx", "=", "list_idx", "+", "1", "\n", "", "sizes", "=", "list_sizes", "[", "list_idx", "]", "\n", "probs", "=", "list_probs", "[", "list_idx", "]", "\n", "G_t", "=", "SBM_snapshot", "(", "G_t", ",", "alpha", ",", "sizes", ",", "probs", ")", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "print", "(", "\"generating \"", "+", "str", "(", "t", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "isEvent", "=", "True", "\n", "\n", "", "", "else", ":", "\n", "            ", "G_t", "=", "SBM_snapshot", "(", "G_t", ",", "alpha", ",", "sizes", ",", "probs", ")", "\n", "G_times", ".", "append", "(", "G_t", ")", "\n", "print", "(", "\"generating \"", "+", "str", "(", "t", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "\n", "#write the entire history of snapshots", "\n", "", "", "to_edgelist", "(", "G_times", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.main": [[456, 471], ["SBM_generator.generate_pureSetting"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_generator.generate_pureSetting"], ["", "def", "main", "(", ")", ":", "\n", "\n", "# inter_prob = 0.005", "\n", "# intra_prob = 0.080", "\n", "# increment = 0.01", "\n", "# alpha = 0.49 #recommended 0.49 in EdgeMonitoring", "\n", "# generate_Connectivity_CP(inter_prob, intra_prob, increment, alpha=alpha)", "\n", "\n", "\n", "\n", "    ", "inter_prob", "=", "0.05", "\n", "intra_prob", "=", "0.25", "\n", "increment", "=", "0.10", "\n", "alpha", "=", "0.0", "\n", "generate_pureSetting", "(", "inter_prob", ",", "intra_prob", ",", "alpha", ")", "\n", "#alpha = 0.1", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist": [[19, 46], ["open", "list", "open.close", "networkx.Graph", "range", "G_times.append", "print", "open.readlines", "len", "re.findall", "int", "int", "int", "nx.Graph.add_edge", "G_times.append", "networkx.Graph", "str", "len"], "function", ["None"], ["def", "load_temporarl_edgelist", "(", "fname", ",", "max_nodes", "=", "1000", ",", "max_time", "=", "150", ")", ":", "\n", "\t", "edgelist", "=", "open", "(", "fname", ",", "\"r\"", ")", "\n", "lines", "=", "list", "(", "edgelist", ".", "readlines", "(", ")", ")", "\n", "edgelist", ".", "close", "(", ")", "\n", "cur_t", "=", "0", "\n", "\n", "'''\n\tt u v\n\t'''", "\n", "G_times", "=", "[", "]", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "lines", ")", ")", ":", "\n", "\t\t", "line", "=", "lines", "[", "i", "]", "\n", "values", "=", "re", ".", "findall", "(", "r\"[-+]?\\d*\\.\\d+|[-+]?\\d+\"", ",", "line", ")", "\n", "t", "=", "int", "(", "values", "[", "0", "]", ")", "\n", "u", "=", "int", "(", "values", "[", "1", "]", ")", "\n", "v", "=", "int", "(", "values", "[", "2", "]", ")", "\n", "#start a new graph with a new date", "\n", "if", "(", "t", "!=", "cur_t", ")", ":", "\n", "\t\t\t", "G_times", ".", "append", "(", "G", ")", "#append old graph", "\n", "G", "=", "nx", ".", "Graph", "(", ")", "#create new graph", "\n", "cur_t", "=", "t", "\n", "", "G", ".", "add_edge", "(", "u", ",", "v", ")", "\n", "", "G_times", ".", "append", "(", "G", ")", "\n", "print", "(", "\"maximum time stamp is \"", "+", "str", "(", "len", "(", "G_times", ")", ")", ")", "\n", "return", "G_times", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.separate_files": [[49, 62], ["range", "os.path.exists", "os.makedirs", "len", "open", "open.close", "print", "os.path.join", "os.path.join", "open.write", "os.getcwd", "os.getcwd", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "separate_files", "(", "G_times", ",", "title", ")", ":", "\n", "\t", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "title", ")", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "title", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "G_times", ")", ")", ":", "\n", "\t\t", "G", "=", "G_times", "[", "i", "]", "\n", "t", "=", "i", "\n", "fname", "=", "title", "+", "\"/\"", "+", "str", "(", "t", ")", "+", "\".txt\"", "\n", "edgelist", "=", "open", "(", "fname", ",", "\"w\"", ")", "\n", "for", "(", "u", ",", "v", ")", "in", "G", ".", "edges", ":", "\n", "\t\t\t", "edgelist", ".", "write", "(", "str", "(", "u", ")", "+", "\" \"", "+", "str", "(", "v", ")", "+", "\" \"", "+", "str", "(", "1", ")", "+", "\"\\n\"", ")", "\n", "", "edgelist", ".", "close", "(", ")", "\n", "print", "(", "\"finished writing \"", "+", "str", "(", "t", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.main": [[72, 80], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "vars", "SBM_separator.load_temporarl_edgelist", "SBM_separator.separate_files", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.load_temporarl_edgelist", "home.repos.pwc.inspect_result.shenyangHuang_LAD.SBM_processed.SBM_separator.separate_files"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'parse egdelist for EdgeMonitoring'", ")", "\n", "parser", ".", "add_argument", "(", "'-f'", ",", "'--file'", ",", "\n", "help", "=", "'which file to parse'", ",", "required", "=", "True", ")", "\n", "args", "=", "vars", "(", "parser", ".", "parse_args", "(", ")", ")", "\n", "title", "=", "args", "[", "\"file\"", "]", "\n", "G_times", "=", "load_temporarl_edgelist", "(", "title", "+", "\".txt\"", ",", "max_nodes", "=", "500", ",", "max_time", "=", "151", ")", "\n", "separate_files", "(", "G_times", ",", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.save_object": [[11, 14], ["open", "pickle.dump"], "function", ["None"], ["def", "save_object", "(", "obj", ",", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "output", ":", "# Overwrites any existing file.", "\n", "        ", "pickle", ".", "dump", "(", "obj", ",", "output", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.load_object": [[15, 20], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "load_object", "(", "filename", ")", ":", "\n", "\t", "output", "=", "0", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "fp", ":", "\n", "\t\t", "output", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.edgelist2numEdge": [[24, 27], ["len", "set"], "function", ["None"], ["def", "edgelist2numEdge", "(", "edgelist", ")", ":", "\n", "\t", "num_edges", "=", "len", "(", "set", "(", "edgelist", ")", ")", "\n", "return", "num_edges", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.edgelist2weights": [[31, 37], ["list", "set", "len", "list.index"], "function", ["None"], ["def", "edgelist2weights", "(", "edgelist", ")", ":", "\n", "\t", "unique_edges", "=", "list", "(", "set", "(", "edgelist", ")", ")", "\n", "weights", "=", "[", "0", "]", "*", "len", "(", "unique_edges", ")", "\n", "for", "edge", "in", "edgelist", ":", "\n", "\t\t", "weights", "[", "unique_edges", ".", "index", "(", "edge", ")", "]", "+=", "1", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.edgelist2degrees": [[38, 51], ["len", "unique_nodes.append", "unique_nodes.append", "unique_nodes.index", "unique_nodes.index"], "function", ["None"], ["", "def", "edgelist2degrees", "(", "edgelist", ")", ":", "\n", "\t", "unique_nodes", "=", "[", "]", "\n", "for", "(", "u", ",", "v", ")", "in", "edgelist", ":", "\n", "\t\t", "if", "u", "not", "in", "unique_nodes", ":", "\n", "\t\t\t", "unique_nodes", ".", "append", "(", "u", ")", "\n", "", "if", "v", "not", "in", "unique_nodes", ":", "\n", "\t\t\t", "unique_nodes", ".", "append", "(", "v", ")", "\n", "\n", "", "", "degrees", "=", "[", "0", "]", "*", "len", "(", "unique_nodes", ")", "\n", "for", "(", "u", ",", "v", ")", "in", "edgelist", ":", "\n", "\t\t", "degrees", "[", "unique_nodes", ".", "index", "(", "u", ")", "]", "+=", "1", "\n", "degrees", "[", "unique_nodes", ".", "index", "(", "v", ")", "]", "+=", "1", "\n", "", "return", "degrees", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_ranks": [[53, 74], ["list", "pylab.rcParams.update", "pylab.rc", "pylab.rc", "pylab.figure", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "pylab.title", "pylab.legend", "pylab.savefig", "print", "range", "len"], "function", ["None"], ["", "def", "plot_ranks", "(", "anoRank", ",", "proRank", ",", "fname", ")", ":", "\n", "\t", "t", "=", "list", "(", "range", "(", "0", ",", "len", "(", "anoRank", ")", ")", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "4", ",", "2", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "colors", "=", "[", "'#ffa600'", ",", "'#003f5c'", ",", "'#bc5090'", ",", "'#e5f5e0'", ",", "'#fa9fb5'", ",", "'#c51b8a'", "]", "\n", "ax", ".", "plot", "(", "t", ",", "anoRank", ",", "marker", "=", "\"P\"", ",", "color", "=", "colors", "[", "0", "]", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"Anomaly Rank\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "proRank", ",", "marker", "=", "\"P\"", ",", "color", "=", "colors", "[", "1", "]", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"Graph property Rank\"", ")", "\n", "\n", "\n", "\n", "ax", ".", "set_xlabel", "(", "'time stamps'", ",", "fontsize", "=", "8", ")", "\n", "# ax.set_yscale('log')", "\n", "ax", ".", "set_ylabel", "(", "'rank'", ",", "fontsize", "=", "8", ")", "\n", "plt", ".", "title", "(", "\"plotting rank over time\"", ",", "fontsize", "=", "'small'", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "3", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'anomalyScores.pdf'", ")", "\n", "\n", "print", "(", "\"plotting rank complete\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_global_average_outlier": [[86, 95], ["numpy.asarray", "numpy.mean", "numpy.std", "range", "len", "abs", "outlier.append"], "function", ["None"], ["def", "find_global_average_outlier", "(", "x", ",", "coefficient", "=", "2.0", ")", ":", "\n", "\t", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "avg", "=", "np", ".", "mean", "(", "x", ")", "\n", "std", "=", "np", ".", "std", "(", "x", ")", "\n", "outlier", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "\t\t", "if", "(", "abs", "(", "x", "[", "i", "]", "-", "avg", ")", ">=", "coefficient", "*", "std", ")", ":", "\n", "\t\t\t", "outlier", ".", "append", "(", "i", ")", "\n", "", "", "return", "outlier", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_local_average_outlier": [[107, 118], ["numpy.asarray", "range", "len", "numpy.mean", "numpy.std", "abs", "outliers.append"], "function", ["None"], ["def", "find_local_average_outlier", "(", "x", ",", "coefficient", "=", "2.0", ",", "percent_ranked", "=", "0.05", ",", "window", "=", "5", ",", "initial_period", "=", "10", ")", ":", "\n", "\t", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "outliers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "initial_period", ",", "len", "(", "x", ")", ")", ":", "\n", "#compute moving average until this point", "\n", "\t\t", "avg", "=", "np", ".", "mean", "(", "x", "[", "i", "-", "window", ":", "i", "]", ")", "\n", "std", "=", "np", ".", "std", "(", "x", "[", "i", "-", "window", ":", "i", "]", ")", "\n", "if", "(", "abs", "(", "x", "[", "i", "]", "-", "avg", ")", ">=", "coefficient", "*", "std", ")", ":", "\n", "\t\t\t", "outliers", ".", "append", "(", "i", ")", "\n", "\n", "", "", "return", "outliers", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier": [[130, 151], ["numpy.asarray", "range", "range", "numpy.asarray", "int", "np.asarray.append", "len", "numpy.mean", "numpy.std", "np.asarray.append", "round", "np.asarray.argsort", "abs", "len"], "function", ["None"], ["def", "find_rarity_windowed_outlier", "(", "x", ",", "percent_ranked", "=", "0.05", ",", "window", "=", "5", ",", "initial_period", "=", "10", ")", ":", "\n", "#percent_ranked = 0.18", "\n", "\t", "x", "=", "np", ".", "asarray", "(", "x", ")", "\n", "mv_std", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "initial_period", ")", ":", "\n", "\t\t", "mv_std", ".", "append", "(", "0", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "initial_period", ",", "len", "(", "x", ")", ")", ":", "\n", "#compute moving average until this point", "\n", "\t\t", "avg", "=", "np", ".", "mean", "(", "x", "[", "i", "-", "window", ":", "i", "]", ")", "\n", "std", "=", "np", ".", "std", "(", "x", "[", "i", "-", "window", ":", "i", "]", ")", "\n", "if", "(", "std", "==", "0", ")", ":", "\n", "\t\t\t", "std", "=", "1", "\n", "", "mv_std", ".", "append", "(", "abs", "(", "x", "[", "i", "]", "-", "avg", ")", "/", "std", ")", "\n", "\n", "", "mv_std", "=", "np", ".", "asarray", "(", "mv_std", ")", "\n", "num_ranked", "=", "int", "(", "round", "(", "len", "(", "x", ")", "*", "percent_ranked", ")", ")", "\n", "outliers", "=", "mv_std", ".", "argsort", "(", ")", "[", "-", "num_ranked", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "\n", "return", "outliers", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_edges": [[160, 204], ["len", "list", "pylab.rcParams.update", "pylab.rc", "pylab.rc", "pylab.figure", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.set_xlabel", "normal_util.find_rarity_windowed_outlier", "find_rarity_windowed_outlier.sort", "fig.add_subplot.set_yscale", "fig.add_subplot.set_ylabel", "pylab.title", "pylab.legend", "pylab.savefig", "range", "isinstance", "num_edges.append", "cumulative_edges.append", "pylab.axvline", "normal_util.edgelist2numEdge", "G.number_of_edges"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.edgelist2numEdge"], ["def", "plot_edges", "(", "G_times", ",", "fname", ")", ":", "\n", "\t", "max_time", "=", "len", "(", "G_times", ")", "\n", "t", "=", "list", "(", "range", "(", "0", ",", "max_time", ")", ")", "\n", "num_edges", "=", "[", "]", "\n", "cumulative_edges", "=", "[", "]", "\n", "sum_edges", "=", "0", "\n", "\n", "for", "G", "in", "G_times", ":", "\n", "\t\t", "if", "(", "isinstance", "(", "G", ",", "list", ")", ")", ":", "\n", "\t\t\t", "num_edge", "=", "edgelist2numEdge", "(", "G", ")", "\n", "", "else", ":", "\n", "\t\t\t", "num_edge", "=", "G", ".", "number_of_edges", "(", ")", "\n", "", "num_edges", ".", "append", "(", "num_edge", ")", "\n", "sum_edges", "=", "sum_edges", "+", "num_edge", "\n", "cumulative_edges", ".", "append", "(", "sum_edges", ")", "\n", "\n", "", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "4", ",", "2", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "ax", ".", "plot", "(", "t", ",", "cumulative_edges", ",", "marker", "=", "'o'", ",", "color", "=", "'#74a9cf'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"cumulative edges\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "num_edges", ",", "marker", "=", "'o'", ",", "color", "=", "'#78f542'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"number of edges\"", ")", "\n", "ax", ".", "set_xlabel", "(", "'time stamp'", ",", "fontsize", "=", "8", ")", "\n", "\n", "'''\n\tplot outlier as vertical lines\n\t'''", "\n", "#outliers = find_global_average_outlier(num_edges)", "\n", "#outliers = find_local_average_outlier(num_edges)", "\n", "outliers", "=", "find_rarity_windowed_outlier", "(", "num_edges", ")", "\n", "outliers", ".", "sort", "(", ")", "\n", "for", "xc", "in", "outliers", ":", "\n", "\t\t", "plt", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "'k'", ",", "linestyle", "=", "\":\"", ",", "linewidth", "=", "0.5", ")", "\n", "\n", "\n", "# ax.set_xscale('log')", "\n", "", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "ax", ".", "set_ylabel", "(", "'number of edges'", ",", "fontsize", "=", "8", ")", "\n", "plt", ".", "title", "(", "\"plotting number of edges\"", ",", "fontsize", "=", "'x-small'", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "'x-small'", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'edge.pdf'", ",", "pad_inches", "=", "0", ")", "\n", "\n", "return", "outliers", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_compare_weak_labels_edge": [[208, 254], ["len", "list", "pylab.subplots", "pylab.rcParams.update", "pylab.subplots_adjust", "pylab.tight_layout", "pylab.savefig", "range", "num_edges.append", "cumulative_edges.append", "ax.plot", "ax.plot", "ax.set_yscale", "ax.set_ylabel", "ax.tick_params", "ax.tick_params", "ax.legend", "G.number_of_edges", "G.number_of_edges", "normal_util.find_global_average_outlier", "ax.set_title", "normal_util.find_local_average_outlier", "ax.set_title", "normal_util.find_rarity_windowed_outlier", "ax.set_title", "ax.set_xlabel", "ax.axvline"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_global_average_outlier", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_local_average_outlier", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier"], ["def", "plot_compare_weak_labels_edge", "(", "G_times", ",", "fname", ")", ":", "\n", "\t", "max_time", "=", "len", "(", "G_times", ")", "\n", "t", "=", "list", "(", "range", "(", "0", ",", "max_time", ")", ")", "\n", "num_edges", "=", "[", "]", "\n", "cumulative_edges", "=", "[", "]", "\n", "sum_edges", "=", "0", "\n", "\n", "for", "G", "in", "G_times", ":", "\n", "\t\t", "num_edges", ".", "append", "(", "G", ".", "number_of_edges", "(", ")", ")", "\n", "sum_edges", "=", "sum_edges", "+", "G", ".", "number_of_edges", "(", ")", "\n", "cumulative_edges", ".", "append", "(", "sum_edges", ")", "\n", "\n", "", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "3", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "plot_num", "=", "0", "\n", "for", "ax", "in", "axs", ":", "\n", "\t\t", "ax", ".", "plot", "(", "t", ",", "cumulative_edges", ",", "marker", "=", "'o'", ",", "color", "=", "'#74a9cf'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"cumulative edges\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "num_edges", ",", "marker", "=", "'o'", ",", "color", "=", "'#78f542'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"number of edges\"", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "ax", ".", "set_ylabel", "(", "'number of edges'", ",", "fontsize", "=", "5", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "\"x\"", ",", "labelsize", "=", "5", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "\"y\"", ",", "labelsize", "=", "5", ")", "\n", "'''\n\t\tplot outlier as vertical lines\n\t\t'''", "\n", "if", "(", "plot_num", "==", "0", ")", ":", "\n", "\t\t\t", "outliers", "=", "find_global_average_outlier", "(", "num_edges", ")", "\n", "ax", ".", "set_title", "(", "\"Global Average Outliers\"", ",", "fontsize", "=", "6", ")", "\n", "\n", "", "if", "(", "plot_num", "==", "1", ")", ":", "\n", "\t\t\t", "outliers", "=", "find_local_average_outlier", "(", "num_edges", ")", "\n", "ax", ".", "set_title", "(", "\"Moving Window Average Outliers\"", ",", "fontsize", "=", "6", ")", "\n", "\n", "", "if", "(", "plot_num", "==", "2", ")", ":", "\n", "\t\t\t", "outliers", "=", "find_rarity_windowed_outlier", "(", "num_edges", ")", "\n", "ax", ".", "set_title", "(", "\"Moving Window Rarity Outliers\"", ",", "fontsize", "=", "6", ")", "\n", "ax", ".", "set_xlabel", "(", "'time stamp'", ",", "fontsize", "=", "5", ")", "\n", "\n", "", "for", "xc", "in", "outliers", ":", "\n", "\t\t\t", "ax", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "'k'", ",", "linestyle", "=", "\":\"", ",", "linewidth", "=", "0.5", ")", "\n", "", "plot_num", "=", "plot_num", "+", "1", "\n", "\n", "ax", ".", "legend", "(", ")", "\n", "", "plt", ".", "subplots_adjust", "(", "left", "=", "0.125", ",", "bottom", "=", "0.1", ",", "right", "=", "0.9", ",", "top", "=", "0.9", ",", "wspace", "=", "0.2", ",", "hspace", "=", "0.2", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'comparison.pdf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_avg_clustering": [[260, 289], ["len", "list", "pylab.rcParams.update", "pylab.rc", "pylab.rc", "pylab.figure", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.set_xlabel", "normal_util.find_rarity_windowed_outlier", "find_rarity_windowed_outlier.sort", "fig.add_subplot.set_ylabel", "pylab.title", "pylab.savefig", "range", "avg_clustering.append", "pylab.axvline", "networkx.average_clustering"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier"], ["def", "plot_avg_clustering", "(", "G_times", ",", "fname", ")", ":", "\n", "\t", "max_time", "=", "len", "(", "G_times", ")", "\n", "t", "=", "list", "(", "range", "(", "0", ",", "max_time", ")", ")", "\n", "avg_clustering", "=", "[", "]", "\n", "\n", "for", "G", "in", "G_times", ":", "\n", "\t\t", "avg_clustering", ".", "append", "(", "nx", ".", "average_clustering", "(", "G", ")", ")", "\n", "\n", "", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "4", ",", "2", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "ax", ".", "plot", "(", "t", ",", "avg_clustering", ",", "marker", "=", "'o'", ",", "color", "=", "'#78f542'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ")", "\n", "ax", ".", "set_xlabel", "(", "'time'", ",", "fontsize", "=", "8", ")", "\n", "\n", "outliers", "=", "find_rarity_windowed_outlier", "(", "avg_clustering", ",", "percent_ranked", "=", "0.05", ",", "window", "=", "5", ",", "initial_period", "=", "10", ")", "\n", "outliers", ".", "sort", "(", ")", "\n", "for", "xc", "in", "outliers", ":", "\n", "\t\t", "plt", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "'k'", ",", "linestyle", "=", "\":\"", ",", "linewidth", "=", "0.5", ")", "\n", "\n", "# ax.set_xscale('log')", "\n", "# ax.set_yscale('log')", "\n", "", "ax", ".", "set_ylabel", "(", "'average clustering coefficient'", ",", "fontsize", "=", "8", ")", "\n", "plt", ".", "title", "(", "\"plotting temporal average clustering coefficient \"", ",", "fontsize", "=", "'x-small'", ")", "\n", "#plt.legend(fontsize=8)", "\n", "plt", ".", "savefig", "(", "fname", "+", "'clustering.pdf'", ",", "pad_inches", "=", "0", ")", "\n", "\n", "return", "outliers", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_num_components_undirected": [[293, 321], ["len", "list", "pylab.rcParams.update", "pylab.rc", "pylab.rc", "pylab.figure", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.set_xlabel", "normal_util.find_rarity_windowed_outlier", "find_rarity_windowed_outlier.sort", "fig.add_subplot.set_ylabel", "pylab.title", "pylab.savefig", "range", "G.to_undirected.to_undirected", "num_connected_components.append", "pylab.axvline", "networkx.number_connected_components"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier"], ["def", "plot_num_components_undirected", "(", "G_times", ",", "fname", ")", ":", "\n", "\t", "max_time", "=", "len", "(", "G_times", ")", "\n", "t", "=", "list", "(", "range", "(", "0", ",", "max_time", ")", ")", "\n", "num_connected_components", "=", "[", "]", "\n", "\n", "for", "G", "in", "G_times", ":", "\n", "\t\t", "G", "=", "G", ".", "to_undirected", "(", ")", "\n", "num_connected_components", ".", "append", "(", "nx", ".", "number_connected_components", "(", "G", ")", ")", "\n", "\n", "", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "4", ",", "2", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "ax", ".", "plot", "(", "t", ",", "num_connected_components", ",", "marker", "=", "\"P\"", ",", "color", "=", "'#ffa600'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ")", "\n", "ax", ".", "set_xlabel", "(", "'time'", ",", "fontsize", "=", "8", ")", "\n", "\n", "outliers", "=", "find_rarity_windowed_outlier", "(", "num_connected_components", ")", "\n", "outliers", ".", "sort", "(", ")", "\n", "for", "xc", "in", "outliers", ":", "\n", "\t\t", "plt", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "'k'", ",", "linestyle", "=", "\":\"", ",", "linewidth", "=", "0.5", ")", "\n", "# ax.set_xscale('log')", "\n", "# ax.set_yscale('log')", "\n", "", "ax", ".", "set_ylabel", "(", "'number of connected components'", ",", "fontsize", "=", "8", ")", "\n", "plt", ".", "title", "(", "\"number of connected components over time\"", ",", "fontsize", "=", "'x-small'", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'components.pdf'", ",", "pad_inches", "=", "0", ")", "\n", "\n", "return", "outliers", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_num_components_directed": [[326, 358], ["len", "list", "pylab.rcParams.update", "pylab.rc", "pylab.rc", "pylab.figure", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.set_xlabel", "normal_util.find_rarity_windowed_outlier", "find_rarity_windowed_outlier.sort", "fig.add_subplot.set_ylabel", "pylab.title", "pylab.legend", "pylab.savefig", "range", "num_strong.append", "num_weak.append", "pylab.axvline", "networkx.number_strongly_connected_components", "networkx.number_weakly_connected_components"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier"], ["def", "plot_num_components_directed", "(", "G_times", ",", "fname", ")", ":", "\n", "\t", "max_time", "=", "len", "(", "G_times", ")", "\n", "t", "=", "list", "(", "range", "(", "0", ",", "max_time", ")", ")", "\n", "num_strong", "=", "[", "]", "\n", "num_weak", "=", "[", "]", "\n", "\n", "for", "G", "in", "G_times", ":", "\n", "\t\t", "num_strong", ".", "append", "(", "nx", ".", "number_strongly_connected_components", "(", "G", ")", ")", "\n", "num_weak", ".", "append", "(", "nx", ".", "number_weakly_connected_components", "(", "G", ")", ")", "\n", "\n", "", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "4", ",", "2", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "ax", ".", "plot", "(", "t", ",", "num_strong", ",", "marker", "=", "\"P\"", ",", "color", "=", "'#ffa600'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"strongly\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "num_weak", ",", "marker", "=", "\"h\"", ",", "color", "=", "'#003f5c'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"weakly\"", ")", "\n", "ax", ".", "set_xlabel", "(", "'time'", ",", "fontsize", "=", "8", ")", "\n", "\n", "\n", "outliers", "=", "find_rarity_windowed_outlier", "(", "num_weak", ")", "#use weakly ", "\n", "outliers", ".", "sort", "(", ")", "\n", "for", "xc", "in", "outliers", ":", "\n", "\t\t", "plt", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "'k'", ",", "linestyle", "=", "\":\"", ",", "linewidth", "=", "0.5", ")", "\n", "# ax.set_xscale('log')", "\n", "# ax.set_yscale('log')", "\n", "", "ax", ".", "set_ylabel", "(", "'number of connected components'", ",", "fontsize", "=", "8", ")", "\n", "plt", ".", "title", "(", "\"number of connected components over time\"", ",", "fontsize", "=", "'x-small'", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "5", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'components.pdf'", ",", "pad_inches", "=", "0", ")", "\n", "\n", "return", "outliers", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_weighted_edges": [[365, 404], ["len", "list", "pylab.rcParams.update", "pylab.rc", "pylab.rc", "pylab.figure", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "normal_util.find_rarity_windowed_outlier", "find_rarity_windowed_outlier.sort", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_yscale", "fig.add_subplot.set_ylabel", "pylab.title", "pylab.legend", "pylab.savefig", "range", "isinstance", "max_weight.append", "min_weight.append", "avg_weight.append", "pylab.axvline", "normal_util.edgelist2weights", "list", "max", "min", "networkx.get_edge_attributes().values", "sum", "len", "networkx.get_edge_attributes"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.edgelist2weights"], ["def", "plot_weighted_edges", "(", "G_times", ",", "fname", ")", ":", "\n", "\t", "max_time", "=", "len", "(", "G_times", ")", "\n", "t", "=", "list", "(", "range", "(", "0", ",", "max_time", ")", ")", "\n", "avg_weight", "=", "[", "]", "\n", "max_weight", "=", "[", "]", "\n", "min_weight", "=", "[", "]", "\n", "for", "G", "in", "G_times", ":", "\n", "\t\t", "if", "(", "isinstance", "(", "G", ",", "list", ")", ")", ":", "\n", "\t\t\t", "weights", "=", "edgelist2weights", "(", "G", ")", "\n", "", "else", ":", "\n", "\t\t\t", "weights", "=", "list", "(", "nx", ".", "get_edge_attributes", "(", "G", ",", "'weight'", ")", ".", "values", "(", ")", ")", "\n", "\n", "", "max_weight", ".", "append", "(", "max", "(", "weights", ")", ")", "\n", "min_weight", ".", "append", "(", "min", "(", "weights", ")", ")", "\n", "avg_weight", ".", "append", "(", "sum", "(", "weights", ")", "/", "len", "(", "weights", ")", ")", "\n", "", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "4", ",", "2", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "ax", ".", "plot", "(", "t", ",", "max_weight", ",", "marker", "=", "\"P\"", ",", "color", "=", "'#ffa600'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"maximum weight\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "min_weight", ",", "marker", "=", "\"h\"", ",", "color", "=", "'#003f5c'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"minimum weight\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "avg_weight", ",", "marker", "=", "\"o\"", ",", "color", "=", "'#bc5090'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"average weight\"", ")", "\n", "\n", "outliers", "=", "find_rarity_windowed_outlier", "(", "avg_weight", ")", "#use weakly ", "\n", "outliers", ".", "sort", "(", ")", "\n", "for", "xc", "in", "outliers", ":", "\n", "\t\t", "plt", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "'k'", ",", "linestyle", "=", "\":\"", ",", "linewidth", "=", "0.5", ")", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "'time stamp'", ",", "fontsize", "=", "8", ")", "\n", "# ax.set_xscale('log')", "\n", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "ax", ".", "set_ylabel", "(", "'edge weight'", ",", "fontsize", "=", "8", ")", "\n", "plt", ".", "title", "(", "\"weighted edges over time\"", ",", "fontsize", "=", "'small'", ")", "\n", "#plt.legend(bbox_to_anchor=(1.04,1), loc=\"lower center\", fontsize='x-small')", "\n", "plt", ".", "legend", "(", "fontsize", "=", "5", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'weighted.pdf'", ")", "\n", "\n", "return", "outliers", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_degree_changes": [[413, 456], ["len", "list", "pylab.rcParams.update", "pylab.rc", "pylab.rc", "pylab.figure", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "normal_util.find_rarity_windowed_outlier", "find_rarity_windowed_outlier.sort", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_yscale", "fig.add_subplot.set_ylabel", "pylab.title", "pylab.legend", "pylab.savefig", "range", "isinstance", "max_degree.append", "min_degree.append", "avg_degree.append", "pylab.axvline", "normal_util.edgelist2degrees", "max", "min", "edgelist2degrees.append", "sum", "len", "G.degree"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.edgelist2degrees"], ["def", "plot_degree_changes", "(", "G_times", ",", "fname", ")", ":", "\n", "\t", "max_time", "=", "len", "(", "G_times", ")", "\n", "t", "=", "list", "(", "range", "(", "0", ",", "max_time", ")", ")", "\n", "avg_degree", "=", "[", "]", "\n", "# std_degree = []", "\n", "max_degree", "=", "[", "]", "\n", "min_degree", "=", "[", "]", "\n", "for", "G", "in", "G_times", ":", "\n", "\t\t", "degrees", "=", "[", "]", "\n", "if", "(", "isinstance", "(", "G", ",", "list", ")", ")", ":", "\n", "\t\t\t", "degrees", "=", "edgelist2degrees", "(", "G", ")", "\n", "", "else", ":", "\n", "\t\t\t", "for", "n", "in", "G", ".", "nodes", ":", "\n", "\t\t\t\t", "degrees", ".", "append", "(", "G", ".", "degree", "(", "n", ")", ")", "\n", "\n", "\n", "", "", "max_degree", ".", "append", "(", "max", "(", "degrees", ")", ")", "\n", "min_degree", ".", "append", "(", "min", "(", "degrees", ")", ")", "\n", "avg_degree", ".", "append", "(", "sum", "(", "degrees", ")", "/", "len", "(", "degrees", ")", ")", "\n", "", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "'x-small'", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "4", ",", "2", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "ax", ".", "plot", "(", "t", ",", "max_degree", ",", "marker", "=", "\"P\"", ",", "color", "=", "'#ffa600'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"maximum degree\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "min_degree", ",", "marker", "=", "\"h\"", ",", "color", "=", "'#003f5c'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"minimum degree\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "avg_degree", ",", "marker", "=", "\"o\"", ",", "color", "=", "'#bc5090'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"average degree\"", ")", "\n", "#ax.errorbar(t, avg_degree, yerr=std_degree, marker=\"o\", color='#bc5090', ls='solid', linewidth=0.5, markersize=1, label=\"average degree\")", "\n", "\n", "outliers", "=", "find_rarity_windowed_outlier", "(", "avg_degree", ")", "#use weakly ", "\n", "outliers", ".", "sort", "(", ")", "\n", "for", "xc", "in", "outliers", ":", "\n", "\t\t", "plt", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "'k'", ",", "linestyle", "=", "\":\"", ",", "linewidth", "=", "0.5", ")", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "'time stamp'", ",", "fontsize", "=", "8", ")", "\n", "# ax.set_xscale('log')", "\n", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "ax", ".", "set_ylabel", "(", "'degree'", ",", "fontsize", "=", "8", ")", "\n", "plt", ".", "title", "(", "\"plotting degree change over time\"", ",", "fontsize", "=", "'small'", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "5", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'degree.pdf'", ")", "\n", "\n", "return", "outliers", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.plot_activity_intensity": [[463, 478], ["numpy.transpose", "numpy.flip", "pylab.gca", "pylab.xlabel", "pylab.ylabel", "pylab.imshow", "pylab.savefig", "pylab.clf", "numpy.asarray"], "function", ["None"], ["def", "plot_activity_intensity", "(", "diag_vecs", ",", "fname", ")", ":", "\n", "# sub_vecs = diag_vecs[0:24]", "\n", "\t", "diag_vecs", "=", "np", ".", "transpose", "(", "np", ".", "asarray", "(", "diag_vecs", ")", ")", "#let time be x-axis", "\n", "diag_vecs", "=", "np", ".", "flip", "(", "diag_vecs", ",", "0", ")", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "\n", "plt", ".", "xlabel", "(", "'time stamp'", ")", "\n", "plt", ".", "ylabel", "(", "'rank'", ")", "\n", "plt", ".", "imshow", "(", "diag_vecs", ",", "aspect", "=", "'equal'", ")", "\n", "# divider = make_axes_locatable(ax)", "\n", "# cax = divider.append_axes(\"right\", size=\"5%\", pad=0.05)", "\n", "# plt.colorbar(np.array(diag_vecs), cax=cax)", "\n", "\n", "plt", ".", "savefig", "(", "fname", "+", "'spectrogram.pdf'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.compare_spectrogram": [[482, 519], ["pylab.subplots", "pylab.rcParams.update", "fig.set_facecolor", "pylab.subplots_adjust", "pylab.tight_layout", "pylab.savefig", "pylab.clf", "numpy.transpose", "ax.set_ylabel", "ax.imshow", "ax.set_title", "ax.set_title", "ax.set_title", "ax.set_title", "ax.set_xlabel", "numpy.asarray"], "function", ["None"], ["", "def", "compare_spectrogram", "(", "Laplace_eigs", ",", "Laplace_vecs", ",", "adj_eigs", ",", "adj_vecs", ",", "fname", ")", ":", "\n", "\t", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "4", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "fig", ".", "set_facecolor", "(", "\"white\"", ")", "\n", "plot_num", "=", "0", "\n", "for", "ax", "in", "axs", ":", "\n", "\n", "\t\t", "'''\n\t\tplot outlier as vertical lines\n\t\t'''", "\n", "if", "(", "plot_num", "==", "0", ")", ":", "\n", "\t\t\t", "diag_vecs", "=", "Laplace_eigs", "\n", "ax", ".", "set_title", "(", "\"Laplacian Spectrum (Proposed)\"", ")", "\n", "\n", "", "if", "(", "plot_num", "==", "1", ")", ":", "\n", "\t\t\t", "diag_vecs", "=", "Laplace_vecs", "\n", "ax", ".", "set_title", "(", "\"Laplacian principal eigenvector\"", ")", "\n", "\n", "", "if", "(", "plot_num", "==", "2", ")", ":", "\n", "\t\t\t", "diag_vecs", "=", "adj_eigs", "\n", "ax", ".", "set_title", "(", "\"Adjacency Spectrum\"", ")", "\n", "\n", "", "if", "(", "plot_num", "==", "3", ")", ":", "\n", "\t\t\t", "diag_vecs", "=", "adj_vecs", "\n", "ax", ".", "set_title", "(", "\"Adjacency principal eigenvector\"", ")", "\n", "ax", ".", "set_xlabel", "(", "'time stamp'", ")", "\n", "\n", "", "diag_vecs", "=", "np", ".", "transpose", "(", "np", ".", "asarray", "(", "diag_vecs", ")", ")", "\n", "ax", ".", "set_ylabel", "(", "'index'", ")", "\n", "ax", ".", "imshow", "(", "diag_vecs", ",", "aspect", "=", "'auto'", ")", "\n", "plot_num", "=", "plot_num", "+", "1", "\n", "# fig.colorbar(diag_vecs)", "\n", "\n", "", "plt", ".", "subplots_adjust", "(", "left", "=", "0.125", ",", "bottom", "=", "0.1", ",", "right", "=", "0.9", ",", "top", "=", "0.9", ",", "wspace", "=", "0.2", ",", "hspace", "=", "0.2", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'specCompare.pdf'", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.all_plots_in_one": [[529, 603], ["len", "list", "pylab.subplots", "pylab.rcParams.update", "pylab.tight_layout", "pylab.savefig", "range", "list", "max_weight.append", "min_weight.append", "avg_weight.append", "avg_clustering.append", "num_strong.append", "num_weak.append", "ax.tick_params", "ax.tick_params", "networkx.get_edge_attributes().values", "max", "min", "networkx.average_clustering", "networkx.number_strongly_connected_components", "networkx.number_weakly_connected_components", "ax.plot", "ax.plot", "ax.plot", "ax.set_yscale", "ax.set_ylabel", "normal_util.find_rarity_windowed_outlier", "find_rarity_windowed_outlier.sort", "ax.set_title", "ax.legend", "ax.plot", "normal_util.find_rarity_windowed_outlier", "find_rarity_windowed_outlier.sort", "ax.set_ylabel", "ax.set_title", "ax.plot", "ax.plot", "normal_util.find_rarity_windowed_outlier", "find_rarity_windowed_outlier.sort", "ax.set_ylabel", "ax.set_title", "ax.set_xlabel", "ax.legend", "sum", "len", "ax.axvline", "ax.axvline", "ax.axvline", "networkx.get_edge_attributes"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier"], ["def", "all_plots_in_one", "(", "G_times", ",", "fname", ")", ":", "\n", "\n", "\t", "max_time", "=", "len", "(", "G_times", ")", "\n", "t", "=", "list", "(", "range", "(", "0", ",", "max_time", ")", ")", "\n", "avg_clustering", "=", "[", "]", "\n", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "3", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "plot_num", "=", "0", "\n", "\n", "avg_weight", "=", "[", "]", "\n", "max_weight", "=", "[", "]", "\n", "min_weight", "=", "[", "]", "\n", "avg_clustering", "=", "[", "]", "\n", "num_strong", "=", "[", "]", "\n", "num_weak", "=", "[", "]", "\n", "\n", "for", "G", "in", "G_times", ":", "\n", "\t\t", "weights", "=", "list", "(", "nx", ".", "get_edge_attributes", "(", "G", ",", "'weight'", ")", ".", "values", "(", ")", ")", "\n", "max_weight", ".", "append", "(", "max", "(", "weights", ")", ")", "\n", "min_weight", ".", "append", "(", "min", "(", "weights", ")", ")", "\n", "avg_weight", ".", "append", "(", "sum", "(", "weights", ")", "/", "len", "(", "weights", ")", ")", "\n", "avg_clustering", ".", "append", "(", "nx", ".", "average_clustering", "(", "G", ")", ")", "\n", "num_strong", ".", "append", "(", "nx", ".", "number_strongly_connected_components", "(", "G", ")", ")", "\n", "num_weak", ".", "append", "(", "nx", ".", "number_weakly_connected_components", "(", "G", ")", ")", "\n", "\n", "", "for", "ax", "in", "axs", ":", "\n", "\t\t", "ax", ".", "tick_params", "(", "axis", "=", "\"x\"", ",", "labelsize", "=", "5", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "\"y\"", ",", "labelsize", "=", "5", ")", "\n", "\n", "#plot weighted edge graph", "\n", "if", "(", "plot_num", "==", "0", ")", ":", "\n", "\t\t\t", "ax", ".", "plot", "(", "t", ",", "max_weight", ",", "marker", "=", "\"P\"", ",", "color", "=", "'#ffa600'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"maximum weight\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "min_weight", ",", "marker", "=", "\"h\"", ",", "color", "=", "'#003f5c'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"minimum weight\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "avg_weight", ",", "marker", "=", "\"o\"", ",", "color", "=", "'#bc5090'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"average weight\"", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "ax", ".", "set_ylabel", "(", "'edge weight'", ",", "fontsize", "=", "5", ")", "\n", "\n", "outliers", "=", "find_rarity_windowed_outlier", "(", "avg_weight", ")", "#use weakly ", "\n", "outliers", ".", "sort", "(", ")", "\n", "for", "xc", "in", "outliers", ":", "\n", "\t\t\t\t", "ax", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "'k'", ",", "linestyle", "=", "\":\"", ",", "linewidth", "=", "0.5", ")", "\n", "", "ax", ".", "set_title", "(", "\"weighted edges over time\"", ",", "fontsize", "=", "'small'", ")", "\n", "ax", ".", "legend", "(", "fontsize", "=", "5", ")", "\n", "\n", "\n", "#plot average clustering coefficinet", "\n", "", "if", "(", "plot_num", "==", "1", ")", ":", "\n", "\t\t\t", "ax", ".", "plot", "(", "t", ",", "avg_clustering", ",", "marker", "=", "'o'", ",", "color", "=", "'#78f542'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ")", "\n", "\n", "outliers", "=", "find_rarity_windowed_outlier", "(", "avg_clustering", ",", "percent_ranked", "=", "0.05", ",", "window", "=", "5", ",", "initial_period", "=", "10", ")", "\n", "outliers", ".", "sort", "(", ")", "\n", "for", "xc", "in", "outliers", ":", "\n", "\t\t\t\t", "ax", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "'k'", ",", "linestyle", "=", "\":\"", ",", "linewidth", "=", "0.5", ")", "\n", "", "ax", ".", "set_ylabel", "(", "'average clustering coefficient'", ",", "fontsize", "=", "5", ")", "\n", "ax", ".", "set_title", "(", "\"average clustering coefficient over time\"", ",", "fontsize", "=", "'x-small'", ")", "\n", "\n", "\n", "", "if", "(", "plot_num", "==", "2", ")", ":", "\n", "\t\t\t", "ax", ".", "plot", "(", "t", ",", "num_strong", ",", "marker", "=", "\"P\"", ",", "color", "=", "'#ffa600'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"strongly\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "num_weak", ",", "marker", "=", "\"h\"", ",", "color", "=", "'#003f5c'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"weakly\"", ")", "\n", "outliers", "=", "find_rarity_windowed_outlier", "(", "num_weak", ")", "#use weakly ", "\n", "outliers", ".", "sort", "(", ")", "\n", "for", "xc", "in", "outliers", ":", "\n", "\t\t\t\t", "ax", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "'k'", ",", "linestyle", "=", "\":\"", ",", "linewidth", "=", "0.5", ")", "\n", "", "ax", ".", "set_ylabel", "(", "'number of connected components'", ",", "fontsize", "=", "5", ")", "\n", "ax", ".", "set_title", "(", "\"number of connected components over time\"", ",", "fontsize", "=", "'x-small'", ")", "\n", "ax", ".", "set_xlabel", "(", "'time stamp'", ",", "fontsize", "=", "8", ")", "\n", "ax", ".", "legend", "(", ")", "\n", "\n", "", "plot_num", "=", "plot_num", "+", "1", "\n", "#plt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9, wspace=0.2, hspace=0.2)", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'allinOne.pdf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.all_in_one_compare": [[614, 765], ["len", "list", "pylab.subplots", "pylab.rcParams.update", "list", "range", "pylab.xticks", "pylab.tight_layout", "pylab.savefig", "range", "list", "max_weight.append", "min_weight.append", "avg_weight.append", "avg_clustering.append", "num_edges.append", "num_nodes.append", "ax.tick_params", "ax.tick_params", "range", "len", "str", "networkx.get_edge_attributes().values", "max", "min", "networkx.average_clustering", "G.number_of_edges", "len", "num_strong.append", "num_weak.append", "num_connected_components.append", "ax.plot", "ax.plot", "ax.plot", "ax.set_yscale", "ax.set_ylabel", "normal_util.find_rarity_windowed_outlier", "find_rarity_windowed_outlier.sort", "ax.set_title", "ax.legend", "ax.plot", "normal_util.find_rarity_windowed_outlier", "find_rarity_windowed_outlier.sort", "ax.set_ylabel", "ax.set_title", "ax.plot", "normal_util.find_rarity_windowed_outlier", "find_rarity_windowed_outlier.sort", "ax.set_ylabel", "ax.set_title", "find_rarity_windowed_outlier.sort", "ax.set_ylabel", "ax.set_title", "ax.set_xlabel", "sum", "len", "networkx.number_strongly_connected_components", "networkx.number_weakly_connected_components", "networkx.number_connected_components", "ax.plot", "ax.plot", "ax.plot", "normal_util.find_rarity_windowed_outlier", "normal_util.find_rarity_windowed_outlier", "print", "ax.legend", "networkx.get_edge_attributes", "ax.axvline", "ax.axvline", "ax.axvline", "ax.axvline", "str"], "function", ["home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier", "home.repos.pwc.inspect_result.shenyangHuang_LAD.util.normal_util.find_rarity_windowed_outlier"], ["def", "all_in_one_compare", "(", "G_times", ",", "fname", ",", "label_sets", ",", "directed", ",", "window", ",", "initial_window", ",", "percent_ranked", ")", ":", "\n", "\n", "\t", "max_time", "=", "len", "(", "G_times", ")", "\n", "t", "=", "list", "(", "range", "(", "0", ",", "max_time", ")", ")", "\n", "avg_clustering", "=", "[", "]", "\n", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "4", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'figure.autolayout'", ":", "True", "}", ")", "\n", "plot_num", "=", "0", "\n", "\n", "avg_weight", "=", "[", "]", "\n", "max_weight", "=", "[", "]", "\n", "min_weight", "=", "[", "]", "\n", "avg_clustering", "=", "[", "]", "\n", "# avg_shortest_path = []", "\n", "num_edges", "=", "[", "]", "\n", "num_nodes", "=", "[", "]", "\n", "\n", "if", "(", "directed", ")", ":", "\n", "\t\t", "num_strong", "=", "[", "]", "\n", "num_weak", "=", "[", "]", "\n", "", "else", ":", "\n", "\t\t", "num_connected_components", "=", "[", "]", "\n", "\n", "", "for", "G", "in", "G_times", ":", "\n", "\t\t", "weights", "=", "list", "(", "nx", ".", "get_edge_attributes", "(", "G", ",", "'weight'", ")", ".", "values", "(", ")", ")", "\n", "max_weight", ".", "append", "(", "max", "(", "weights", ")", ")", "\n", "min_weight", ".", "append", "(", "min", "(", "weights", ")", ")", "\n", "avg_weight", ".", "append", "(", "sum", "(", "weights", ")", "/", "len", "(", "weights", ")", ")", "\n", "avg_clustering", ".", "append", "(", "nx", ".", "average_clustering", "(", "G", ")", ")", "\n", "num_edges", ".", "append", "(", "G", ".", "number_of_edges", "(", ")", ")", "\n", "num_nodes", ".", "append", "(", "len", "(", "G", ")", ")", "\n", "# avg_shortest_path.append(nx.average_shortest_path_length(G))", "\n", "\n", "if", "(", "directed", ")", ":", "\n", "\t\t\t", "num_strong", ".", "append", "(", "nx", ".", "number_strongly_connected_components", "(", "G", ")", ")", "\n", "num_weak", ".", "append", "(", "nx", ".", "number_weakly_connected_components", "(", "G", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t", "num_connected_components", ".", "append", "(", "nx", ".", "number_connected_components", "(", "G", ")", ")", "\n", "\n", "", "", "for", "ax", "in", "axs", ":", "\n", "\t\t", "ax", ".", "tick_params", "(", "axis", "=", "\"x\"", ",", "labelsize", "=", "5", ")", "\n", "ax", ".", "tick_params", "(", "axis", "=", "\"y\"", ",", "labelsize", "=", "5", ")", "\n", "\n", "#plot weighted edge graph", "\n", "if", "(", "plot_num", "==", "0", ")", ":", "\n", "\t\t\t", "ax", ".", "plot", "(", "t", ",", "max_weight", ",", "marker", "=", "\"P\"", ",", "color", "=", "'#ffa600'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"maximum weight\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "min_weight", ",", "marker", "=", "\"h\"", ",", "color", "=", "'#003f5c'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"minimum weight\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "avg_weight", ",", "marker", "=", "\"o\"", ",", "color", "=", "'#bc5090'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"average weight\"", ")", "\n", "ax", ".", "set_yscale", "(", "'log'", ")", "\n", "ax", ".", "set_ylabel", "(", "'edge weight'", ",", "fontsize", "=", "5", ")", "\n", "\n", "outliers", "=", "find_rarity_windowed_outlier", "(", "avg_weight", ",", "percent_ranked", "=", "percent_ranked", ",", "window", "=", "window", ",", "initial_period", "=", "initial_window", ")", "#use weakly ", "\n", "outliers", ".", "sort", "(", ")", "\n", "colors", "=", "[", "'r'", ",", "'b'", ",", "'g'", ",", "'c'", ",", "'m'", ",", "'y'", "]", "\n", "c_idx", "=", "0", "\n", "# for xc in outliers:", "\n", "# \tax.axvline(x=xc,color='k', linestyle='--', linewidth=1.0)", "\n", "\n", "for", "label_set", "in", "label_sets", ":", "\n", "\t\t\t\t", "for", "xc", "in", "label_set", ":", "\n", "\t\t\t\t\t", "ax", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "colors", "[", "c_idx", "]", ",", "linestyle", "=", "\"--\"", ",", "linewidth", "=", "1.0", ")", "\n", "", "c_idx", "=", "c_idx", "+", "1", "\n", "\n", "\n", "", "ax", ".", "set_title", "(", "\"weighted edges over time\"", ",", "fontsize", "=", "'small'", ")", "\n", "ax", ".", "legend", "(", "fontsize", "=", "5", ")", "\n", "\n", "\n", "#plot average clustering coefficinet", "\n", "", "if", "(", "plot_num", "==", "1", ")", ":", "\n", "# ax.plot(t, avg_clustering, marker='o', color='#78f542', ls='solid', linewidth=0.5, markersize=1)", "\n", "\t\t\t", "ax", ".", "plot", "(", "t", ",", "num_nodes", ",", "marker", "=", "'o'", ",", "color", "=", "'#78f542'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ")", "\n", "\n", "outliers", "=", "find_rarity_windowed_outlier", "(", "num_nodes", ",", "percent_ranked", "=", "percent_ranked", ",", "window", "=", "window", ",", "initial_period", "=", "initial_window", ")", "\n", "outliers", ".", "sort", "(", ")", "\n", "colors", "=", "[", "'r'", ",", "'b'", ",", "'g'", ",", "'c'", ",", "'m'", ",", "'y'", "]", "\n", "c_idx", "=", "0", "\n", "# for xc in outliers:", "\n", "# \tax.axvline(x=xc,color='k', linestyle=\"--\", linewidth=1.0)", "\n", "for", "label_set", "in", "label_sets", ":", "\n", "\t\t\t\t", "for", "xc", "in", "label_set", ":", "\n", "\t\t\t\t\t", "ax", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "colors", "[", "c_idx", "]", ",", "linestyle", "=", "\"--\"", ",", "linewidth", "=", "1.0", ")", "\n", "", "c_idx", "=", "c_idx", "+", "1", "\n", "\n", "\n", "", "ax", ".", "set_ylabel", "(", "'number of nodes'", ",", "fontsize", "=", "5", ")", "\n", "ax", ".", "set_title", "(", "\"number of active nodes over time\"", ",", "fontsize", "=", "'x-small'", ")", "\n", "\n", "#plot average shortest path", "\n", "", "if", "(", "plot_num", "==", "2", ")", ":", "\n", "\t\t\t", "ax", ".", "plot", "(", "t", ",", "num_edges", ",", "marker", "=", "'o'", ",", "color", "=", "'#78f542'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ")", "\n", "\n", "outliers", "=", "find_rarity_windowed_outlier", "(", "num_edges", ",", "percent_ranked", "=", "percent_ranked", ",", "window", "=", "window", ",", "initial_period", "=", "initial_window", ")", "\n", "outliers", ".", "sort", "(", ")", "\n", "colors", "=", "[", "'r'", ",", "'b'", ",", "'g'", ",", "'c'", ",", "'m'", ",", "'y'", "]", "\n", "c_idx", "=", "0", "\n", "# for xc in outliers:", "\n", "# \tax.axvline(x=xc,color='k', linestyle=\"--\", linewidth=1.0)", "\n", "for", "label_set", "in", "label_sets", ":", "\n", "\t\t\t\t", "for", "xc", "in", "label_set", ":", "\n", "\t\t\t\t\t", "ax", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "colors", "[", "c_idx", "]", ",", "linestyle", "=", "\"--\"", ",", "linewidth", "=", "1.0", ")", "\n", "", "c_idx", "=", "c_idx", "+", "1", "\n", "\n", "\n", "", "ax", ".", "set_ylabel", "(", "'number of edges'", ",", "fontsize", "=", "5", ")", "\n", "ax", ".", "set_title", "(", "\"number of edges\"", ",", "fontsize", "=", "'x-small'", ")", "\n", "\n", "\n", "", "if", "(", "plot_num", "==", "3", ")", ":", "\n", "\t\t\t", "if", "(", "directed", ")", ":", "\n", "\t\t\t\t", "ax", ".", "plot", "(", "t", ",", "num_strong", ",", "marker", "=", "\"P\"", ",", "color", "=", "'#ffa600'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"strongly\"", ")", "\n", "ax", ".", "plot", "(", "t", ",", "num_weak", ",", "marker", "=", "\"h\"", ",", "color", "=", "'#003f5c'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ",", "label", "=", "\"weakly\"", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "ax", ".", "plot", "(", "t", ",", "num_connected_components", ",", "marker", "=", "\"P\"", ",", "color", "=", "'#ffa600'", ",", "ls", "=", "'solid'", ",", "linewidth", "=", "0.5", ",", "markersize", "=", "1", ")", "\n", "\n", "", "if", "(", "directed", ")", ":", "\n", "\t\t\t\t", "outliers", "=", "find_rarity_windowed_outlier", "(", "num_weak", ",", "percent_ranked", "=", "percent_ranked", ",", "window", "=", "window", ",", "initial_period", "=", "initial_window", ")", "#use weakly ", "\n", "", "else", ":", "\n", "\t\t\t\t", "outliers", "=", "find_rarity_windowed_outlier", "(", "num_connected_components", ",", "percent_ranked", "=", "percent_ranked", ",", "window", "=", "window", ",", "initial_period", "=", "initial_window", ")", "\n", "", "outliers", ".", "sort", "(", ")", "\n", "colors", "=", "[", "'r'", ",", "'b'", ",", "'g'", ",", "'c'", ",", "'m'", ",", "'y'", "]", "\n", "c_idx", "=", "0", "\n", "\n", "# for xc in outliers:", "\n", "# \tax.axvline(x=xc,color='k', linestyle=\"--\", linewidth=0.5)", "\n", "\n", "for", "label_set", "in", "label_sets", ":", "\n", "\t\t\t\t", "for", "xc", "in", "label_set", ":", "\n", "\t\t\t\t\t", "ax", ".", "axvline", "(", "x", "=", "xc", ",", "color", "=", "colors", "[", "c_idx", "]", ",", "linestyle", "=", "\"--\"", ",", "linewidth", "=", "1.0", ")", "\n", "", "print", "(", "\"set \"", "+", "str", "(", "c_idx", ")", "+", "\" is \"", "+", "colors", "[", "c_idx", "]", ")", "\n", "c_idx", "=", "c_idx", "+", "1", "\n", "", "ax", ".", "set_ylabel", "(", "'number of connected components'", ",", "fontsize", "=", "5", ")", "\n", "ax", ".", "set_title", "(", "\"number of connected components over time\"", ",", "fontsize", "=", "'x-small'", ")", "\n", "ax", ".", "set_xlabel", "(", "'time stamp'", ",", "fontsize", "=", "8", ")", "\n", "\n", "if", "(", "directed", ")", ":", "\n", "\t\t\t\t", "ax", ".", "legend", "(", ")", "\n", "\n", "", "", "plot_num", "=", "plot_num", "+", "1", "\n", "\n", "", "'''\n\tspecify the xticks here\n\t'''", "\n", "labels", "=", "list", "(", "range", "(", "2006", ",", "2020", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "\t\t", "labels", "[", "i", "]", "=", "str", "(", "labels", "[", "i", "]", ")", "\n", "", "plt", ".", "xticks", "(", "t", ",", "labels", ")", "\n", "#plt.subplots_adjust(left=0.125, bottom=0.1, right=0.9, top=0.9, wspace=0.2, hspace=0.2)", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "fname", "+", "'allinOne.pdf'", ")", "\n", "\n"]]}