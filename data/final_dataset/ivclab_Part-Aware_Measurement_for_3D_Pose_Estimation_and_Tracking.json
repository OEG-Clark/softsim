{"home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src._init_path.add_path": [[4, 7], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.Camera.__init__": [[36, 47], ["numpy.linalg.inv", "numpy.linalg.inv", "numpy.linalg.inv", "numpy.vstack"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "cid", ",", "P", ",", "K", ",", "RT", ",", "F", ",", "w", "=", "640", ",", "h", "=", "480", ")", ":", "\n", "\t\t", "self", ".", "cid", "=", "cid", "\n", "self", ".", "P", "=", "P", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "RT", "=", "RT", "\n", "self", ".", "RK_INV", "=", "np", ".", "linalg", ".", "inv", "(", "self", ".", "RT", "[", ":", ",", ":", "3", "]", ")", "@", "np", ".", "linalg", ".", "inv", "(", "self", ".", "K", ")", "\n", "self", ".", "F", "=", "F", "\n", "self", ".", "w", "=", "w", "\n", "self", ".", "h", "=", "h", "\n", "RT_inv", "=", "np", ".", "linalg", ".", "inv", "(", "np", ".", "vstack", "(", "[", "self", ".", "RT", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", ")", "\n", "self", ".", "position", "=", "RT_inv", "[", ":", "3", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.Camera.undistort": [[48, 54], ["None"], "methods", ["None"], ["", "def", "undistort", "(", "self", ",", "im", ")", ":", "\n", "\t\t", "\"\"\" undistorts the image\n\t\t:param im: {h x w x c}\n\t\t:return:\n\t\t\"\"\"", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.Camera.undistort_points": [[55, 61], ["None"], "methods", ["None"], ["", "def", "undistort_points", "(", "self", ",", "points2d", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t:param points2d: [ (x,y,w), ...]\n\t\t:return:\n\t\t\"\"\"", "\n", "return", "points2d", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.Camera.projectPoints_undist": [[62, 79], ["numpy.zeros", "enumerate", "numpy.array", "len"], "methods", ["None"], ["", "def", "projectPoints_undist", "(", "self", ",", "points3d", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\tprojects 3d points into 2d ones with\n\t\t\tno distortion\n\t\t:param points3d: {n x 3}\n\t\t:return:\n\t\t\"\"\"", "\n", "\n", "points2d", "=", "np", ".", "zeros", "(", "(", "len", "(", "points3d", ")", ",", "2", ")", ")", "\n", "for", "i", ",", "(", "x", ",", "y", ",", "z", ")", "in", "enumerate", "(", "points3d", ")", ":", "\n", "\t\t\t", "p3d", "=", "np", ".", "array", "(", "[", "x", ",", "y", ",", "z", ",", "1", "]", ")", "\n", "a", ",", "b", ",", "c", "=", "self", ".", "P", "@", "p3d", "\n", "# assert c != 0 , print(self.P, p3d,self.P @ p3d)", "\n", "c", "=", "10e-6", "if", "c", "==", "0", "else", "c", "\n", "points2d", "[", "i", ",", "1", "]", "=", "a", "/", "c", "if", "a", "is", "not", "None", "else", "None", "\n", "points2d", "[", "i", ",", "0", "]", "=", "b", "/", "c", "if", "b", "is", "not", "None", "else", "None", "\n", "", "return", "points2d", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.Camera.projectPoints": [[80, 90], ["ivclabpose.Camera.projectPoints_undist"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.Camera.projectPoints_undist"], ["", "def", "projectPoints", "(", "self", ",", "points3d", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\tprojects 3d points into 2d with\n\t\t\tdistortion being considered\n\t\t:param points3d: {n x 3}\n\t\t:param withmask: {boolean} if True return mask that tells if a point is in the view or not\n\t\t:return:\n\t\t\"\"\"", "\n", "pts2d", "=", "self", ".", "projectPoints_undist", "(", "points3d", ")", "\n", "return", "pts2d", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.Camera.projectPoints_parallel": [[91, 99], ["numpy.concatenate", "numpy.transpose", "numpy.flip", "reproj.reshape.reshape.reshape", "homo_reproj[].reshape", "numpy.ones", "numpy.concatenate.reshape"], "methods", ["None"], ["", "def", "projectPoints_parallel", "(", "self", ",", "points3d", ")", ":", "\n", "\t\t", "points3d", "=", "np", ".", "concatenate", "(", "[", "points3d", ",", "np", ".", "ones", "(", "(", "points3d", ".", "shape", "[", "0", "]", ",", "points3d", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "]", ",", "axis", "=", "2", ")", "\n", "homo_reproj", "=", "np", ".", "transpose", "(", "self", ".", "P", "@", "points3d", ".", "reshape", "(", "-", "1", ",", "4", ")", ".", "T", ")", "\n", "reproj", "=", "homo_reproj", "[", ":", ",", ":", "2", "]", "/", "homo_reproj", "[", ":", ",", "2", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "reproj", "=", "np", ".", "flip", "(", "reproj", ",", "axis", "=", "1", ")", "\n", "reproj", "=", "reproj", ".", "reshape", "(", "-", "1", ",", "17", ",", "2", ")", "\n", "\n", "return", "reproj", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.ivclabpose.__init__": [[101, 161], ["easydict.EasyDict", "range", "torch.device", "torch.cuda.device_count", "easydict.EasyDict.gpus.append", "print", "print", "print", "backend.YOLOv3.YOLOv3", "print", "tuple", "backend.HRPose.SimpleHRNet.HRNetPose", "print", "easydict.EasyDict", "tracking.IterativeTracker.IterativeTracker", "print", "len", "str", "copy.deepcopy", "len"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "person_detector", "=", "None", ",", "pose_detector", "=", "None", ",", "person_matcher", "=", "None", ",", "conf_threshold", "=", "0.4", ")", ":", "\n", "\t\t", "self", ".", "person_detector", "=", "person_detector", "if", "person_detector", ".", "NAME", "!=", "''", "else", "None", "\n", "self", ".", "pose_detector", "=", "pose_detector", "\n", "self", ".", "person_matcher", "=", "person_matcher", "\n", "self", ".", "conf_threshold", "=", "conf_threshold", "\n", "\n", "gpu_args", "=", "edict", "(", ")", "\n", "gpu_args", ".", "gpus", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ":", "\n", "\t\t\t", "gpu_args", ".", "gpus", ".", "append", "(", "i", ")", "\n", "", "gpu_args", ".", "device", "=", "torch", ".", "device", "(", "'cuda:'", "+", "str", "(", "gpu_args", ".", "gpus", "[", "0", "]", ")", "if", "len", "(", "gpu_args", ".", "gpus", ")", ">", "0", "else", "'cpu'", ")", "\n", "\n", "# Detect Models", "\n", "if", "self", ".", "person_detector", "==", "None", ":", "\n", "\t\t\t", "print", "(", "\"Person Detector : Close.\"", ")", "\n", "", "elif", "self", ".", "person_detector", ".", "NAME", "==", "'YOLOv3'", ":", "\n", "\t\t\t", "self", ".", "bbox_detector", "=", "YOLOv3", "(", "self", ".", "person_detector", ".", "CFG", ",", "self", ".", "person_detector", ".", "WEIGHT", ",", "self", ".", "person_detector", ".", "CLASS_NAMES", ",", "\n", "score_thresh", "=", "self", ".", "person_detector", ".", "SCORE_THRESH", ",", "nms_thresh", "=", "self", ".", "person_detector", ".", "NMS_THRESH", ",", "\n", "use_cuda", "=", "True", "if", "len", "(", "gpu_args", ".", "gpus", ")", ">", "0", "else", "False", ")", "\n", "print", "(", "\"Pose Detector : \"", ",", "self", ".", "person_detector", ".", "NAME", ")", "\n", "\n", "# Pose Models", "\n", "", "if", "self", ".", "pose_detector", "==", "None", ":", "\n", "\t\t\t", "print", "(", "\"Pose Detector : Close.\"", ")", "\n", "", "elif", "self", ".", "pose_detector", ".", "NAME", "==", "'HRPose'", ":", "\n", "\t\t\t", "c", "=", "self", ".", "pose_detector", ".", "C", "\n", "num_joints", "=", "self", ".", "pose_detector", ".", "NUM_JOINTS", "\n", "checkpoint_file", "=", "self", ".", "pose_detector", ".", "CHECKPOINT_FILE", "\n", "model_name", "=", "self", ".", "pose_detector", ".", "MODEL_NAME", "\n", "resolution", "=", "tuple", "(", "self", ".", "pose_detector", ".", "RESOLUTION", ")", "\n", "self", ".", "pose_model", "=", "HRNetPose", "(", "c", ",", "num_joints", ",", "checkpoint_file", ",", "\n", "model_name", "=", "model_name", ",", "resolution", "=", "resolution", ",", "hrpose_args", "=", "deepcopy", "(", "gpu_args", ")", ")", "\n", "\n", "print", "(", "\"Pose Detector : \"", ",", "self", ".", "pose_detector", ".", "NAME", ")", "\n", "\n", "# Matching and Tracking Methods", "\n", "", "if", "self", ".", "person_matcher", "==", "None", ":", "\n", "\t\t\t", "print", "(", "\"Person Matcher : Close.\"", ")", "\n", "", "elif", "self", ".", "person_matcher", ".", "NAME", "==", "'Iterative'", ":", "\n", "\t\t\t", "iter_args", "=", "edict", "(", ")", "\n", "iter_args", ".", "conf_threshold", "=", "self", ".", "conf_threshold", "\n", "iter_args", ".", "epi_threshold", "=", "self", ".", "person_matcher", ".", "EPI_THRESHOLD", "\n", "iter_args", ".", "init_threshold", "=", "self", ".", "person_matcher", ".", "INIT_THRESHOLD", "\n", "iter_args", ".", "joint_threshold", "=", "self", ".", "person_matcher", ".", "JOINT_THRESHOLD", "\n", "iter_args", ".", "num_joints", "=", "self", ".", "person_matcher", ".", "NUM_JOINTS", "\n", "iter_args", ".", "init_method", "=", "self", ".", "person_matcher", ".", "INIT_METHOD", "\n", "iter_args", ".", "n_init", "=", "self", ".", "person_matcher", ".", "N_INIT", "\n", "iter_args", ".", "max_age", "=", "self", ".", "person_matcher", ".", "MAX_AGE", "\n", "iter_args", ".", "w2d", "=", "self", ".", "person_matcher", ".", "W2D", "\n", "iter_args", ".", "alpha2d", "=", "self", ".", "person_matcher", ".", "ALPHA2D", "\n", "iter_args", ".", "w3d", "=", "self", ".", "person_matcher", ".", "W3D", "\n", "iter_args", ".", "alpha3d", "=", "self", ".", "person_matcher", ".", "ALPHA3D", "\n", "iter_args", ".", "lambda_a", "=", "self", ".", "person_matcher", ".", "LAMBDA_A", "\n", "iter_args", ".", "lambda_t", "=", "self", ".", "person_matcher", ".", "LAMBDA_T", "\n", "iter_args", ".", "sigma", "=", "self", ".", "person_matcher", ".", "SIGMA", "\n", "iter_args", ".", "arm_sigma", "=", "self", ".", "person_matcher", ".", "ARM_SIGMA", "\n", "\n", "self", ".", "tracker", "=", "IterativeTracker", "(", "iter_args", ")", "\n", "\n", "print", "(", "\"Person Matcher : \"", ",", "self", ".", "person_matcher", ".", "NAME", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.ivclabpose.GetCameraParameters": [[162, 182], ["camera_parameter[].astype", "camera_parameter[].astype", "camera_parameter[].astype", "len", "torch.zeros", "range", "F.numpy.numpy.numpy", "range", "torch.tensor", "fundamental_op", "range", "ivclabpose.ivclabpose.cameras.append", "skew_op", "fundamental_RT_op", "ivclabpose.Camera", "K_1.t", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "F[].sum", "torch.inverse().t", "R_1.t", "R_0.t", "torch.inverse", "R_1.t"], "methods", ["None"], ["", "", "def", "GetCameraParameters", "(", "self", ",", "camera_parameter", ",", "im_width", ",", "im_height", ")", ":", "\n", "\t\t", "P", "=", "camera_parameter", "[", "'P'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "K", "=", "camera_parameter", "[", "'K'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "RT", "=", "camera_parameter", "[", "'RT'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "skew_op", "=", "lambda", "x", ":", "torch", ".", "tensor", "(", "[", "[", "0", ",", "-", "x", "[", "2", "]", ",", "x", "[", "1", "]", "]", ",", "[", "x", "[", "2", "]", ",", "0", ",", "-", "x", "[", "0", "]", "]", ",", "[", "-", "x", "[", "1", "]", ",", "x", "[", "0", "]", ",", "0", "]", "]", ")", "\n", "fundamental_op", "=", "lambda", "K_0", ",", "R_0", ",", "T_0", ",", "K_1", ",", "R_1", ",", "T_1", ":", "torch", ".", "inverse", "(", "K_0", ")", ".", "t", "(", ")", "@", "(", "R_0", "@", "R_1", ".", "t", "(", ")", ")", "@", "K_1", ".", "t", "(", ")", "@", "skew_op", "(", "K_1", "@", "R_1", "@", "R_0", ".", "t", "(", ")", "@", "(", "T_0", "-", "R_0", "@", "R_1", ".", "t", "(", ")", "@", "T_1", ")", ")", "\n", "fundamental_RT_op", "=", "lambda", "K_0", ",", "RT_0", ",", "K_1", ",", "RT_1", ":", "fundamental_op", "(", "K_0", ",", "RT_0", "[", ":", ",", ":", "3", "]", ",", "RT_0", "[", ":", ",", "3", "]", ",", "K_1", ",", "RT_1", "[", ":", ",", ":", "3", "]", ",", "RT_1", "[", ":", ",", "3", "]", ")", "\n", "camera_num", "=", "len", "(", "P", ")", "\n", "F", "=", "torch", ".", "zeros", "(", "camera_num", ",", "camera_num", ",", "3", ",", "3", ")", "# NxNx3x3 matrix", "\n", "# TODO: optimize this stupid nested for loop", "\n", "for", "x", "in", "range", "(", "camera_num", ")", ":", "\n", "\t\t\t", "for", "y", "in", "range", "(", "camera_num", ")", ":", "\n", "\t\t\t\t", "F", "[", "x", ",", "y", "]", "+=", "fundamental_RT_op", "(", "torch", ".", "tensor", "(", "K", "[", "x", "]", ")", ",", "torch", ".", "tensor", "(", "RT", "[", "x", "]", ")", ",", "torch", ".", "tensor", "(", "K", "[", "y", "]", ")", ",", "torch", ".", "tensor", "(", "RT", "[", "y", "]", ")", ")", "\n", "if", "F", "[", "x", ",", "y", "]", ".", "sum", "(", ")", "==", "0", ":", "\n", "\t\t\t\t\t", "F", "[", "x", ",", "y", "]", "+=", "1e-12", "# to avoid nan", "\n", "", "", "", "F", "=", "F", ".", "numpy", "(", ")", "\n", "self", ".", "cameras", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "camera_num", ")", ":", "\n", "\t\t\t", "self", ".", "cameras", ".", "append", "(", "Camera", "(", "j", ",", "P", "[", "j", "]", ",", "K", "[", "j", "]", ",", "RT", "[", "j", "]", ",", "F", "[", "j", "]", ",", "w", "=", "im_width", ",", "h", "=", "im_height", ")", ")", "\n", "", "return", "self", ".", "cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.ivclabpose.PersonDetect": [[183, 207], ["list", "ivclabpose.ivclabpose.bbox_detector", "enumerate", "list.append", "max", "max", "min", "min", "dict", "person_temps.append", "float", "round"], "methods", ["None"], ["", "def", "PersonDetect", "(", "self", ",", "imglist", ",", "camera_num", ",", "image_id", ")", ":", "\n", "\t\t", "if", "self", ".", "person_detector", ".", "NAME", "==", "'YOLOv3'", ":", "\n", "\t\t\t", "person_bbox_list", "=", "list", "(", ")", "\n", "results", "=", "self", ".", "bbox_detector", "(", "imglist", ")", "\n", "for", "idx", ",", "result", "in", "enumerate", "(", "results", ")", ":", "\n", "\t\t\t\t", "person_temps", "=", "[", "]", "\n", "h", ",", "w", ",", "_", "=", "imglist", "[", "idx", "]", ".", "shape", "\n", "for", "ret", "in", "result", ":", "\n", "\t\t\t\t\t", "x1", "=", "max", "(", "0", ",", "ret", "[", "0", "]", ")", "\n", "y1", "=", "max", "(", "0", ",", "ret", "[", "1", "]", ")", "\n", "x2", "=", "min", "(", "ret", "[", "2", "]", ",", "w", ")", "\n", "y2", "=", "min", "(", "ret", "[", "3", "]", ",", "h", ")", "\n", "person_temp", "=", "dict", "(", "\n", "image_id", "=", "image_id", ",", "\n", "category_id", "=", "1", ",", "\n", "score", "=", "float", "(", "round", "(", "ret", "[", "4", "]", ",", "4", ")", ")", ",", "\n", "bbox", "=", "[", "x1", ",", "y1", ",", "x2", "-", "x1", ",", "y2", "-", "y1", "]", ",", "\n", "data", "=", "imglist", "[", "idx", "]", ",", "\n", "feature", "=", "[", "]", ")", "\n", "person_temps", ".", "append", "(", "person_temp", ")", "\n", "", "person_bbox_list", ".", "append", "(", "person_temps", ")", "\n", "", "return", "person_bbox_list", "\n", "", "else", ":", "\n", "\t\t\t", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.ivclabpose.PersonPoseDetect": [[208, 215], ["ivclabpose.ivclabpose.pose_model.predict"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.KalmanFilter.KalmanFilter.predict"], ["", "", "def", "PersonPoseDetect", "(", "self", ",", "imagelist", "=", "None", ",", "person_bbox_list", "=", "None", ",", "batch_size", "=", "20", ",", "image_id", "=", "None", ")", ":", "\n", "\t\t", "if", "self", ".", "pose_detector", ".", "NAME", "==", "\"HRPose\"", ":", "\n", "\t\t\t", "dump_results", "=", "self", ".", "pose_model", ".", "predict", "(", "person_bbox_list", ",", "batch_size", ",", "self", ".", "conf_threshold", ")", "\n", "\n", "return", "dump_results", "\n", "", "else", ":", "\n", "\t\t\t", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.ivclabpose.PersonTrack_Project3DPose": [[216, 288], ["enumerate", "ivclabpose.ivclabpose.tracker.tracking", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "frames.append", "boxes.append", "poses.append", "features.append", "numpy.array.append", "pts3d_joints_views.append", "numpy.array.append", "numpy.array.append", "poses2d.items", "numpy.array.append", "numpy.array.append", "len", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.transpose", "numpy.array.append", "numpy.array", "keypoints.reshape.reshape.reshape", "keypoints[].copy", "keypoints[].copy", "numpy.array", "numpy.array.append", "numpy.array.append", "track.is_confirmed", "cams.append", "poses.append", "range", "len"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterativeTracker.tracking", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.is_confirmed"], ["", "", "def", "PersonTrack_Project3DPose", "(", "self", ",", "frame_id", ",", "person_bbox_list", "=", "None", ",", "dump_results", "=", "None", ",", "build3D", "=", "'SVD'", ")", ":", "\n", "\t\t", "frames", "=", "[", "]", "\n", "poses", "=", "[", "]", "\n", "features", "=", "[", "]", "\n", "boxes", "=", "[", "]", "\n", "for", "f_id", ",", "sub_person_bbox_list", "in", "enumerate", "(", "person_bbox_list", ")", ":", "\n", "\t\t\t", "bxs", "=", "[", "]", "\n", "pts", "=", "[", "]", "\n", "fts", "=", "[", "]", "\n", "if", "len", "(", "sub_person_bbox_list", ")", "==", "0", ":", "\n", "\t\t\t\t", "person_ids", "=", "np", ".", "array", "(", "(", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "frame", "=", "[", "]", "\n", "bxs", "=", "np", ".", "array", "(", "bxs", ")", "\n", "pts", "=", "np", ".", "array", "(", "pts", ")", "\n", "fts", "=", "np", ".", "array", "(", "fts", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "frame", "=", "sub_person_bbox_list", "[", "0", "]", "[", "'data'", "]", "\n", "for", "item", "in", "dump_results", "[", "f_id", "]", ":", "\n", "\t\t\t\t\t", "bxs", ".", "append", "(", "[", "item", "[", "'bbox'", "]", "[", "0", "]", ",", "item", "[", "'bbox'", "]", "[", "1", "]", ",", "item", "[", "'bbox'", "]", "[", "2", "]", ",", "item", "[", "'bbox'", "]", "[", "3", "]", "]", ")", "\n", "keypoints", "=", "item", "[", "'keypoints'", "]", "\n", "keypoints", "=", "np", ".", "array", "(", "keypoints", ")", "\n", "keypoints", "=", "keypoints", ".", "reshape", "(", "17", ",", "3", ")", "\n", "keypoints_y", "=", "keypoints", "[", ":", ",", "0", "]", ".", "copy", "(", ")", "# \u9019\u6a23\u5f8c\u9762x y\u662f\u4e0d\u662f\u4e0d\u7528\u6389\u63db", "\n", "keypoints_x", "=", "keypoints", "[", ":", ",", "1", "]", ".", "copy", "(", ")", "\n", "keypoints_score", "=", "item", "[", "'keypoints_score'", "]", "\n", "keypoints_score", "=", "np", ".", "array", "(", "keypoints_score", ")", "\n", "keypoints", "[", ":", ",", "2", "]", "=", "keypoints_score", "\n", "keypoints", "[", ":", ",", "0", "]", "=", "keypoints_x", "\n", "keypoints", "[", ":", ",", "1", "]", "=", "keypoints_y", "\n", "pts", ".", "append", "(", "keypoints", ")", "\n", "fts", ".", "append", "(", "item", "[", "'feature'", "]", ")", "\n", "", "bxs", "=", "np", ".", "array", "(", "bxs", ")", "\n", "pts", "=", "np", ".", "array", "(", "pts", ")", "\n", "fts", "=", "np", ".", "array", "(", "fts", ")", "\n", "\n", "", "frames", ".", "append", "(", "frame", ")", "\n", "boxes", ".", "append", "(", "bxs", ")", "\n", "poses", ".", "append", "(", "pts", ")", "\n", "features", ".", "append", "(", "fts", ")", "\n", "\n", "\n", "", "asso_time", ",", "update_time", ",", "init_time", "=", "self", ".", "tracker", ".", "tracking", "(", "frame_id", ",", "self", ".", "cameras", ",", "frames", ",", "boxes", ",", "poses", ",", "build3D", ")", "\n", "\n", "camera_ids", "=", "[", "]", "\n", "pts", "=", "[", "]", "\n", "person_ids", "=", "[", "]", "\n", "pts3d", "=", "[", "]", "\n", "pts3d_joints_views", "=", "[", "]", "\n", "person3d_ids", "=", "[", "]", "\n", "for", "track", "in", "self", ".", "tracker", ".", "tracks", ":", "\n", "\t\t\t", "if", "track", ".", "time_since_update", ">", "0", "or", "not", "track", ".", "is_confirmed", "(", ")", ":", "\n", "\t\t\t\t", "continue", "\n", "\n", "", "poses2d", ",", "pose3d", ",", "joints_views", "=", "track", ".", "poses2d", ",", "track", ".", "poses3d", "[", "-", "1", "]", "[", "'pose3d'", "]", ",", "track", ".", "poses3d", "[", "-", "1", "]", "[", "'joints_views'", "]", "\n", "pts3d", ".", "append", "(", "np", ".", "transpose", "(", "pose3d", ")", ")", "\n", "pts3d_joints_views", ".", "append", "(", "joints_views", ")", "\n", "person3d_ids", ".", "append", "(", "track", ".", "track_id", ")", "\n", "person_ids", ".", "append", "(", "[", "track", ".", "track_id", "for", "i", "in", "range", "(", "len", "(", "poses2d", ")", ")", "]", ")", "\n", "cams", "=", "[", "]", "\n", "poses", "=", "[", "]", "\n", "for", "cid", ",", "pose_2d", "in", "poses2d", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "if", "pose_2d", "[", "'time'", "]", "==", "frame_id", ":", "\n", "\t\t\t\t\t", "cams", ".", "append", "(", "cid", ")", "\n", "poses", ".", "append", "(", "pose_2d", "[", "'pose'", "]", ")", "\n", "", "", "camera_ids", ".", "append", "(", "cams", ")", "\n", "pts", ".", "append", "(", "poses", ")", "\n", "\n", "", "camera_ids", "=", "np", ".", "array", "(", "camera_ids", ",", "dtype", "=", "'object'", ")", "\n", "pts", "=", "np", ".", "array", "(", "pts", ",", "dtype", "=", "'object'", ")", "\n", "pts3d", "=", "np", ".", "array", "(", "pts3d", ")", "\n", "person3d_ids", "=", "np", ".", "array", "(", "person3d_ids", ")", "\n", "return", "camera_ids", ",", "pts", ",", "person_ids", ",", "pts3d", ",", "pts3d_joints_views", ",", "person3d_ids", ",", "asso_time", ",", "update_time", ",", "init_time", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.dataset.Testdatast.__init__": [[48, 58], ["dataset.Testdatast._get_filenames", "range"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.dataset.Testdatast._get_filenames"], ["\t", "def", "__init__", "(", "self", ",", "dataset", ",", "is_train", "=", "False", ")", ":", "\n", "\t\t", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "dataset", "=", "dataset", ".", "TEST_DATASET", "\n", "self", ".", "root", "=", "dataset", ".", "ROOT", "\n", "self", ".", "folders", "=", "dataset", ".", "FOLDERS_ORDER", "\n", "self", ".", "ext", "=", "dataset", ".", "DATA_FORMAT", "\n", "self", ".", "files", "=", "self", ".", "_get_filenames", "(", ")", "\n", "test_start", "=", "dataset", ".", "TEST_RANGE", "[", "0", "]", "\n", "test_end", "=", "dataset", ".", "TEST_RANGE", "[", "1", "]", "\n", "self", ".", "test_range", "=", "[", "i", "for", "i", "in", "range", "(", "test_start", ",", "test_end", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.dataset.Testdatast._get_filenames": [[59, 66], ["os.path.join", "glob.glob", "files.append", "natsort.natsorted"], "methods", ["None"], ["", "def", "_get_filenames", "(", "self", ")", ":", "\n", "\t\t", "files", "=", "[", "]", "\n", "for", "folder", "in", "self", ".", "folders", ":", "\n", "\t\t\t", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "folder", ",", "self", ".", "ext", ")", "\n", "f", "=", "glob", ".", "glob", "(", "data_path", ")", "\n", "files", ".", "append", "(", "natsort", ".", "natsorted", "(", "f", ",", "reverse", "=", "False", ")", ")", "\n", "", "return", "files", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.dataset.Testdatast.__len__": [[67, 69], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "test_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.dataset.Testdatast.__getitem__": [[70, 79], ["datas.append", "int", "cv2.imread", "[].split", "[].split", "[].split", "[].split", "[].split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\t\t", "datas", "=", "[", "]", "\n", "datas", ".", "append", "(", "[", "cv2", ".", "imread", "(", "f", "[", "idx", "]", ")", "for", "f", "in", "self", ".", "files", "]", ")", "\n", "if", "self", ".", "dataset", "==", "'Panoptic'", ":", "\n", "\t\t\t", "timestamp", "=", "int", "(", "self", ".", "files", "[", "0", "]", "[", "idx", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t", "timestamp", "=", "self", ".", "files", "[", "0", "]", "[", "idx", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "", "return", "datas", ",", "timestamp", "", "", "", ""]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.dataset.GetConfig": [[13, 18], ["open", "easydict.EasyDict", "yaml.load"], "function", ["None"], ["def", "GetConfig", "(", "config_file", ")", ":", "\n", "\t", "exp_config", "=", "None", "\n", "with", "open", "(", "config_file", ")", "as", "f", ":", "\n", "\t\t", "exp_config", "=", "edict", "(", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", ")", "\n", "", "return", "exp_config", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.dataset.LoadFilenames": [[19, 35], ["print", "range", "print", "os.path.join", "glob.glob", "files.append", "len", "datas.append", "natsort.natsorted"], "function", ["None"], ["", "def", "LoadFilenames", "(", "dataset", ")", ":", "\n", "\t", "print", "(", "'------start load files------'", ")", "\n", "root", "=", "dataset", ".", "ROOT", "\n", "folders", "=", "dataset", ".", "FOLDERS_ORDER", "\n", "ext", "=", "dataset", ".", "DATA_FORMAT", "\n", "files", "=", "[", "]", "\n", "for", "folder", "in", "folders", ":", "\n", "\t\t", "data_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "folder", ",", "ext", ")", "\n", "f", "=", "glob", ".", "glob", "(", "data_path", ")", "\n", "files", ".", "append", "(", "natsort", ".", "natsorted", "(", "f", ",", "reverse", "=", "False", ")", ")", "\n", "\n", "", "datas", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "files", "[", "0", "]", ")", ")", ":", "\n", "\t\t", "datas", ".", "append", "(", "[", "f", "[", "i", "]", "for", "f", "in", "files", "]", ")", "\n", "", "print", "(", "'------finish load files------'", ")", "\n", "return", "datas", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.dataset.LoadImages": [[36, 46], ["int", "datas.append", "[].split", "cv2.imread", "[].split", "files[].split", "[].split", "files[].split"], "function", ["None"], ["", "def", "LoadImages", "(", "dataset", ",", "files", ")", ":", "\n", "\t", "if", "dataset", "==", "'Panoptic'", ":", "\n", "\t\t", "timestamp", "=", "int", "(", "files", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "\t\t", "timestamp", "=", "files", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "", "datas", "=", "[", "]", "\n", "for", "f", "in", "files", ":", "\n", "\t\t", "datas", ".", "append", "(", "cv2", ".", "imread", "(", "f", ")", ")", "\n", "", "return", "datas", ",", "timestamp", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.testmodel.test_ivclabpose_PersonTrack_Project3DPose": [[19, 100], ["os.makedirs", "os.makedirs", "ivclabpose", "enumerate", "print", "print", "print", "print", "print", "open", "pickle.load", "tqdm.tqdm", "dataset.LoadImages", "time.time", "ivclabpose.PersonDetect", "time.time", "time.time", "ivclabpose.PersonPoseDetect", "time.time", "pipeline[].upper", "pipeline[].upper", "pipeline[].upper", "range", "ivclabpose.GetCameraParameters", "time.time", "ivclabpose.PersonTrack_Project3DPose", "time.time", "zip", "numpy.array", "zip", "draw_points_and_skeleton", "len", "joints_dict"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.dataset.LoadImages", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.ivclabpose.PersonDetect", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.ivclabpose.PersonPoseDetect", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.ivclabpose.GetCameraParameters", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.ivclabpose.PersonTrack_Project3DPose"], ["def", "test_ivclabpose_PersonTrack_Project3DPose", "(", "cfg", ",", "inputs", ")", ":", "\n", "\t", "output", "=", "cfg", ".", "OUTPUT", "\n", "os", ".", "makedirs", "(", "output", ",", "exist_ok", "=", "True", ")", "\n", "\n", "import", "pickle", "\n", "import", "copy", "\n", "\n", "dataset", "=", "cfg", ".", "DATASET", "\n", "storecameradir", "=", "output", "+", "os", ".", "sep", "+", "dataset", ".", "TEST_DATASET", "+", "os", ".", "sep", "+", "'Images'", "\n", "os", ".", "makedirs", "(", "storecameradir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "dataset", ".", "ROOT", "+", "os", ".", "sep", "+", "dataset", ".", "CALIBRATION_FILE", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t", "camera_parameter", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "from", "ivclabpose", "import", "ivclabpose", "\n", "# from visualization import plot3DPose", "\n", "from", "HRPose", ".", "misc", ".", "visualization", "import", "joints_dict", ",", "draw_points_and_skeleton", "\n", "\n", "pipeline", "=", "cfg", ".", "PIPELINE_COMBINATION", "\n", "det_model", "=", "cfg", ".", "DETECT_MODELS", "[", "pipeline", "[", "'DETECT_MODEL'", "]", ".", "upper", "(", ")", "]", "\n", "pose_model", "=", "cfg", ".", "POSE_MODELS", "[", "pipeline", "[", "'POSE_MODEL'", "]", ".", "upper", "(", ")", "]", "\n", "person_matcher", "=", "cfg", ".", "PERSON_MATCHERS", "[", "pipeline", "[", "'PERSON_MATCHER'", "]", ".", "upper", "(", ")", "]", "\n", "conf_threshold", "=", "pipeline", "[", "'CONF_THRESHOLD'", "]", "\n", "build3D", "=", "pipeline", "[", "'BUILD_3D'", "]", "\n", "\n", "ivclabpose_model", "=", "ivclabpose", "(", "person_detector", "=", "det_model", ",", "\n", "pose_detector", "=", "pose_model", ",", "person_matcher", "=", "person_matcher", ",", "conf_threshold", "=", "conf_threshold", ")", "\n", "\n", "totaltimeperson", "=", "0", "\n", "totaltimepose", "=", "0", "\n", "totaltimetrack", "=", "0", "\n", "test_start", "=", "dataset", ".", "TEST_RANGE", "[", "0", "]", "\n", "test_end", "=", "dataset", ".", "TEST_RANGE", "[", "1", "]", "\n", "for", "i", ",", "frame_id", "in", "enumerate", "(", "tqdm", "(", "range", "(", "test_start", ",", "test_end", ")", ")", ")", ":", "\n", "\t\t", "imagelist", ",", "_", "=", "LoadImages", "(", "dataset", ".", "TEST_DATASET", ",", "inputs", "[", "frame_id", "]", ")", "\n", "image3d", "=", "None", "\n", "if", "i", "==", "0", ":", "\n", "\t\t\t", "cameras", "=", "ivclabpose_model", ".", "GetCameraParameters", "(", "camera_parameter", ",", "imagelist", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "imagelist", "[", "0", "]", ".", "shape", "[", "1", "]", ")", "\n", "\n", "\n", "", "personstarttime", "=", "time", ".", "time", "(", ")", "\n", "person_bbox_list", "=", "ivclabpose_model", ".", "PersonDetect", "(", "imagelist", ",", "3", ",", "frame_id", ")", "\n", "personendtime", "=", "time", ".", "time", "(", ")", "\n", "\n", "posestarttime", "=", "time", ".", "time", "(", ")", "\n", "dump_result_list", "=", "ivclabpose_model", ".", "PersonPoseDetect", "(", "imagelist", "=", "None", ",", "person_bbox_list", "=", "person_bbox_list", ",", "batch_size", "=", "20", ")", "\n", "poseendtime", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "np", ".", "array", "(", "dump_result_list", ",", "dtype", "=", "'object'", ")", ".", "size", ">", "0", ":", "\n", "\t\t\t", "trackstarttime", "=", "time", ".", "time", "(", ")", "\n", "camera_ids", ",", "pts", ",", "person_ids", ",", "pts3d", ",", "pts3d_joints_views", ",", "person3d_ids", ",", "asso_time", ",", "update_time", ",", "init_time", "=", "ivclabpose_model", ".", "PersonTrack_Project3DPose", "(", "frame_id", "=", "frame_id", ",", "\n", "person_bbox_list", "=", "person_bbox_list", ",", "dump_results", "=", "dump_result_list", ",", "build3D", "=", "build3D", ")", "\n", "\n", "trackendtime", "=", "time", ".", "time", "(", ")", "\n", "for", "cids", ",", "poses_2d", ",", "pids", ",", "in", "zip", "(", "camera_ids", ",", "pts", ",", "person_ids", ")", ":", "\n", "\t\t\t\t", "for", "cid", ",", "pose_2d", ",", "pid", "in", "zip", "(", "cids", ",", "poses_2d", ",", "pids", ")", ":", "\n", "\t\t\t\t\t", "imagelist", "[", "cid", "]", "=", "draw_points_and_skeleton", "(", "imagelist", "[", "cid", "]", ",", "pose_2d", ",", "joints_dict", "(", ")", "[", "\"coco\"", "]", "[", "'skeleton'", "]", ",", "person_index", "=", "pid", ",", "\n", "points_color_palette", "=", "'gist_rainbow'", ",", "skeleton_color_palette", "=", "'tab20'", ",", "\n", "points_palette_samples", "=", "17", ",", "confidence_threshold", "=", "0.0", ")", "\n", "# you can design your own method to visualize 3D poses", "\n", "# below is our method, but we are't releasing our visualize code yet", "\n", "#if len(pts3d) != 0:", "\n", "# plot3DPose(dataset.TEST_DATASET, storecameradir, frame_id, cameras, imagelist[0].shape, person3d_ids, pts3d, pts3d_joints_views)", "\n", "# image3d = cv2.imread(storecameradir+os.sep+str(frame_id)+'.png')", "\n", "", "", "", "else", ":", "\n", "\t\t\t", "trackstarttime", "=", "0", "\n", "trackendtime", "=", "0", "\n", "\n", "", "if", "frame_id", ">", "test_start", "+", "10", ":", "\n", "\t\t\t", "totaltimeperson", "=", "totaltimeperson", "+", "(", "personendtime", "-", "personstarttime", ")", "\n", "totaltimepose", "=", "totaltimepose", "+", "(", "poseendtime", "-", "posestarttime", ")", "\n", "totaltimetrack", "=", "totaltimetrack", "+", "(", "trackendtime", "-", "trackstarttime", ")", "\n", "\n", "\n", "", "", "avgpersondetecttime", "=", "totaltimeperson", "/", "(", "(", "test_end", "-", "test_start", "-", "10", ")", ")", "\n", "avgposedetecttime", "=", "totaltimepose", "/", "(", "(", "test_end", "-", "test_start", "-", "10", ")", ")", "\n", "avgtracktime", "=", "totaltimetrack", "/", "(", "(", "test_end", "-", "test_start", "-", "10", ")", ")", "\n", "print", "(", "\"Person Detect Processing time (s/f): %f\"", "%", "(", "avgpersondetecttime", ")", ")", "\n", "print", "(", "\"Pose Detect Processing time (s/f): %f\"", "%", "(", "avgposedetecttime", ")", ")", "\n", "print", "(", "\"Track Processing time (s/f): %f\"", "%", "(", "avgtracktime", ")", ")", "\n", "print", "(", "\"fps: %f\"", "%", "(", "1", "/", "(", "(", "avgpersondetecttime", "+", "avgposedetecttime", ")", "/", "len", "(", "imagelist", ")", "+", "avgtracktime", ")", ")", ")", "\n", "print", "(", "\"tracking fps: %f\"", "%", "(", "1", "/", "avgtracktime", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.evalmodel.eval_ivclabpose_PersonTrack_Project3DPose": [[32, 119], ["os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "ivclabpose", "dict", "enumerate", "evalmodel.Write3DResult", "print", "print", "print", "print", "print", "open", "pickle.load", "tqdm.tqdm", "dataset.LoadImages", "time.time", "ivclabpose.PersonDetect", "time.time", "time.time", "ivclabpose.PersonPoseDetect", "time.time", "evalmodel.EvaluatePanoptic", "evalmodel.Evaluate3DPose_PCP", "pipeline[].upper", "pipeline[].upper", "pipeline[].upper", "range", "ivclabpose.GetCameraParameters", "time.time", "ivclabpose.PersonTrack_Project3DPose", "time.time", "zip", "numpy.array", "zip", "dataset.ROOT.split", "annotations.append"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.evalmodel.Write3DResult", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.dataset.LoadImages", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.ivclabpose.PersonDetect", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.ivclabpose.PersonPoseDetect", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.evalmodel.EvaluatePanoptic", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.evalmodel.Evaluate3DPose_PCP", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.ivclabpose.GetCameraParameters", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.ivclabpose.PersonTrack_Project3DPose"], ["def", "eval_ivclabpose_PersonTrack_Project3DPose", "(", "cfg", ",", "inputs", ")", ":", "\n", "\t", "output", "=", "cfg", ".", "OUTPUT", "\n", "os", ".", "makedirs", "(", "output", ",", "exist_ok", "=", "True", ")", "\n", "\n", "dataset", "=", "cfg", ".", "DATASET", "\n", "store_dir", "=", "output", "+", "os", ".", "sep", "+", "dataset", ".", "TEST_DATASET", "\n", "os", ".", "makedirs", "(", "store_dir", "+", "os", ".", "sep", "+", "'Images'", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "dataset", ".", "ROOT", "+", "os", ".", "sep", "+", "dataset", ".", "CALIBRATION_FILE", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t", "camera_parameter", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "from", "ivclabpose", "import", "ivclabpose", "\n", "from", "HRPose", ".", "misc", ".", "visualization", "import", "joints_dict", ",", "draw_points_and_skeleton", "\n", "\n", "pipeline", "=", "cfg", ".", "PIPELINE_COMBINATION", "\n", "det_model", "=", "cfg", ".", "DETECT_MODELS", "[", "pipeline", "[", "'DETECT_MODEL'", "]", ".", "upper", "(", ")", "]", "\n", "pose_model", "=", "cfg", ".", "POSE_MODELS", "[", "pipeline", "[", "'POSE_MODEL'", "]", ".", "upper", "(", ")", "]", "\n", "person_matcher", "=", "cfg", ".", "PERSON_MATCHERS", "[", "pipeline", "[", "'PERSON_MATCHER'", "]", ".", "upper", "(", ")", "]", "\n", "conf_threshold", "=", "pipeline", "[", "'CONF_THRESHOLD'", "]", "\n", "build3D", "=", "pipeline", "[", "'BUILD_3D'", "]", "\n", "ivclabpose_model", "=", "ivclabpose", "(", "person_detector", "=", "det_model", ",", "\n", "pose_detector", "=", "pose_model", ",", "person_matcher", "=", "person_matcher", ",", "conf_threshold", "=", "conf_threshold", ")", "\n", "\n", "\n", "totaltimeperson", "=", "0", "\n", "totaltimepose", "=", "0", "\n", "totaltimeasso", "=", "0", "\n", "totaltimeupdate", "=", "0", "\n", "totaltimeinit", "=", "0", "\n", "totaltimetrack", "=", "0", "\n", "multi_poses3d", "=", "dict", "(", ")", "\n", "annotations", "=", "[", "]", "\n", "test_start", "=", "dataset", ".", "TEST_RANGE", "[", "0", "]", "\n", "test_end", "=", "dataset", ".", "TEST_RANGE", "[", "1", "]", "\n", "for", "i", ",", "frame_id", "in", "enumerate", "(", "tqdm", "(", "range", "(", "test_start", ",", "test_end", ")", ")", ")", ":", "\n", "\t\t", "imagelist", ",", "timestamp", "=", "LoadImages", "(", "dataset", ".", "TEST_DATASET", ",", "inputs", "[", "frame_id", "]", ")", "\n", "if", "i", "==", "0", ":", "\n", "\t\t\t", "cameras", "=", "ivclabpose_model", ".", "GetCameraParameters", "(", "camera_parameter", ",", "imagelist", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "imagelist", "[", "0", "]", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "personstarttime", "=", "time", ".", "time", "(", ")", "\n", "person_bbox_list", "=", "ivclabpose_model", ".", "PersonDetect", "(", "imagelist", ",", "3", ",", "frame_id", ")", "\n", "personendtime", "=", "time", ".", "time", "(", ")", "\n", "\n", "posestarttime", "=", "time", ".", "time", "(", ")", "\n", "dump_result_list", "=", "ivclabpose_model", ".", "PersonPoseDetect", "(", "imagelist", "=", "None", ",", "person_bbox_list", "=", "person_bbox_list", ",", "batch_size", "=", "20", ")", "\n", "poseendtime", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "np", ".", "array", "(", "dump_result_list", ",", "dtype", "=", "'object'", ")", ".", "size", ">", "0", ":", "\n", "\t\t\t", "trackstarttime", "=", "time", ".", "time", "(", ")", "\n", "camera_ids", ",", "pts", ",", "person_ids", ",", "pts3d", ",", "pts3d_joints_views", ",", "person3d_ids", ",", "asso_time", ",", "update_time", ",", "init_time", "=", "ivclabpose_model", ".", "PersonTrack_Project3DPose", "(", "frame_id", "=", "frame_id", ",", "\n", "person_bbox_list", "=", "person_bbox_list", ",", "dump_results", "=", "dump_result_list", ",", "build3D", "=", "build3D", ")", "\n", "trackendtime", "=", "time", ".", "time", "(", ")", "\n", "multi_poses3d", "[", "timestamp", "if", "dataset", ".", "TEST_DATASET", "==", "'Panoptic'", "else", "frame_id", "]", "=", "pts3d", "\n", "for", "cids", ",", "poses_2d", ",", "pids", ",", "in", "zip", "(", "camera_ids", ",", "pts", ",", "person_ids", ")", ":", "\n", "\t\t\t\t", "for", "cid", ",", "pose_2d", ",", "pid", "in", "zip", "(", "cids", ",", "poses_2d", ",", "pids", ")", ":", "\n", "\t\t\t\t\t", "annotations", ".", "append", "(", "{", "'timestamp'", ":", "timestamp", ",", "'cid'", ":", "cid", ",", "'pid'", ":", "pid", ",", "'pose'", ":", "pose_2d", "[", ":", ",", "0", ":", "2", "]", ",", "'scores'", ":", "pose_2d", "[", ":", ",", "2", "]", "}", ")", "\n", "", "", "", "else", ":", "\n", "\t\t\t", "trackstarttime", "=", "0", "\n", "trackendtime", "=", "0", "\n", "asso_time", ",", "update_time", ",", "init_time", "=", "0", ",", "0", ",", "0", "\n", "multi_poses3d", "[", "timestamp", "if", "dataset", ".", "TEST_DATASET", "==", "'Panoptic'", "else", "frame_id", "]", "=", "[", "]", "\n", "\n", "", "totaltimeperson", "=", "totaltimeperson", "+", "(", "personendtime", "-", "personstarttime", ")", "\n", "totaltimepose", "=", "totaltimepose", "+", "(", "poseendtime", "-", "posestarttime", ")", "\n", "totaltimeasso", "=", "totaltimeasso", "+", "asso_time", "\n", "totaltimeupdate", "=", "totaltimeupdate", "+", "update_time", "\n", "totaltimeinit", "=", "totaltimeinit", "+", "init_time", "\n", "totaltimetrack", "=", "totaltimetrack", "+", "(", "trackendtime", "-", "trackstarttime", ")", "\n", "\n", "\n", "", "filepath", "=", "store_dir", "+", "os", ".", "sep", "+", "'logs'", "+", "os", ".", "sep", "+", "'{}_{}_{}_{}.pkl'", ".", "format", "(", "\n", "pipeline", "[", "'DETECT_MODEL'", "]", ",", "pipeline", "[", "'POSE_MODEL'", "]", ",", "pipeline", "[", "'PERSON_MATCHER'", "]", ",", "dataset", ".", "ROOT", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "Write3DResult", "(", "multi_poses3d", ",", "filepath", ")", "\n", "if", "dataset", ".", "TEST_DATASET", "==", "'Panoptic'", ":", "\n", "\t\t", "EvaluatePanoptic", "(", "dataset", ".", "EVAL_RANGE", ",", "filepath", ",", "dataset", ".", "TEST_DATASET", ",", "seqs", "=", "dataset", ".", "FOLDERS_ORDER", ",", "data_root", "=", "dataset", ".", "ROOT", ")", "\n", "", "else", ":", "\n", "\t\t", "Evaluate3DPose_PCP", "(", "dataset", ".", "EVAL_RANGE", ",", "filepath", ",", "gt_path", "=", "dataset", ".", "ROOT", ",", "dataset_name", "=", "dataset", ".", "TEST_DATASET", ")", "\n", "", "avgpersondetecttime", "=", "totaltimeperson", "/", "(", "test_end", "-", "test_start", ")", "\n", "avgposedetecttime", "=", "totaltimepose", "/", "(", "test_end", "-", "test_start", ")", "\n", "avgassotime", "=", "totaltimeasso", "/", "(", "test_end", "-", "test_start", ")", "\n", "avgupdatetime", "=", "totaltimeupdate", "/", "(", "test_end", "-", "test_start", ")", "\n", "avginittime", "=", "totaltimeinit", "/", "(", "test_end", "-", "test_start", ")", "\n", "avgtracktime", "=", "totaltimetrack", "/", "(", "test_end", "-", "test_start", ")", "\n", "print", "(", "\"Person Detect Processing time (s/f): %f\"", "%", "(", "avgpersondetecttime", ")", ")", "\n", "print", "(", "\"Pose Detect Processing time (s/f): %f\"", "%", "(", "avgposedetecttime", ")", ")", "\n", "print", "(", "\"Track Processing time (s/f): %f\"", "%", "(", "avgtracktime", ")", ")", "\n", "print", "(", "\"fps: %f\"", "%", "(", "1", "/", "(", "(", "avgpersondetecttime", "+", "avgposedetecttime", ")", "/", "3", "+", "avgtracktime", ")", ")", ")", "\n", "print", "(", "\"tracking fps: %f\"", "%", "(", "1", "/", "avgtracktime", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.evalmodel.Evaluate3DPose_PCP": [[120, 207], ["scipy.loadmat", "numpy.zeros", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict.items", "prettytable.PrettyTable", "collections.OrderedDict.items", "prettytable.PrettyTable.add_row", "list_tb.append", "print", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "open", "pickle.load", "os.join", "range", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "list_tb.append", "prettytable.PrettyTable.add_row", "len", "len", "multi_poses3d[].astype", "range", "numpy.abs", "numpy.abs", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.char.mod", "len", "numpy.stack", "numeric.vectorize_distance", "enumerate", "evalmodel.Evaluate3DPose_PCP.is_right"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.eval.numeric.vectorize_distance"], ["", "def", "Evaluate3DPose_PCP", "(", "eval_ranges", ",", "pred_path", ",", "gt_path", "=", "'CatchImage/CampusSeq1'", ",", "dataset_name", "=", "'CampusSeq1'", ")", ":", "\n", "\t", "'''\n\tcoco17 \n\tkp_names = ['nose', 'l_eye', 'r_eye', 'l_ear', 'r_ear', 'l_shoulder',  # 5\n                'r_shoulder', 'l_elbow', 'r_elbow', 'l_wrist', 'r_wrist',  # 10\n                'l_hip', 'r_hip', 'l_knee', 'r_knee', 'l_ankle', 'r_ankle']\n\t'''", "\n", "def", "is_right", "(", "model_start_point", ",", "model_end_point", ",", "gt_start_point", ",", "gt_end_point", ",", "alpha", "=", "0.5", ")", ":", "\n", "\t\t", "bone_lenth", "=", "np", ".", "linalg", ".", "norm", "(", "gt_end_point", "-", "gt_start_point", ")", "\n", "start_difference", "=", "np", ".", "linalg", ".", "norm", "(", "gt_start_point", "-", "model_start_point", ")", "\n", "end_difference", "=", "np", ".", "linalg", ".", "norm", "(", "gt_end_point", "-", "model_end_point", ")", "\n", "return", "(", "(", "start_difference", "+", "end_difference", ")", "/", "2", ")", "<=", "alpha", "*", "bone_lenth", "\n", "\n", "", "with", "open", "(", "pred_path", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t", "multi_poses3d", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "actorsGT", "=", "scio", ".", "loadmat", "(", "osp", ".", "join", "(", "gt_path", ",", "'actorsGT.mat'", ")", ")", "\n", "actorsGT", "=", "actorsGT", "[", "'actor3D'", "]", "[", "0", "]", "\n", "if", "dataset_name", "==", "'Panoptic'", ":", "\n", "\t\t", "actorsGT", "/=", "100", "# mm -> m", "\n", "\n", "", "check_result", "=", "np", ".", "zeros", "(", "(", "len", "(", "actorsGT", "[", "0", "]", ")", ",", "len", "(", "actorsGT", ")", ",", "10", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "accuracy_cnt", "=", "0", "\n", "error_cnt", "=", "0", "\n", "for", "eval_range", "in", "eval_ranges", ":", "\n", "\t\t", "eval_start", "=", "eval_range", "[", "0", "]", "\n", "eval_end", "=", "eval_range", "[", "1", "]", "\n", "for", "frame_id", "in", "range", "(", "eval_start", ",", "eval_end", ")", ":", "\n", "\t\t\t", "poses3d", "=", "multi_poses3d", "[", "frame_id", "]", ".", "astype", "(", "np", ".", "float", ")", "\n", "for", "pid", "in", "range", "(", "len", "(", "actorsGT", ")", ")", ":", "\n", "\t\t\t\t", "if", "actorsGT", "[", "pid", "]", "[", "frame_id", "]", "[", "0", "]", ".", "shape", "==", "(", "1", ",", "0", ")", "or", "actorsGT", "[", "pid", "]", "[", "frame_id", "]", "[", "0", "]", ".", "shape", "==", "(", "0", ",", "0", ")", ":", "\n", "\t\t\t\t\t", "continue", "\n", "", "if", "len", "(", "poses3d", ")", "==", "0", ":", "\n", "\t\t\t\t\t", "check_result", "[", "frame_id", ",", "pid", ",", ":", "]", "=", "-", "1", "\n", "print", "(", "'Cannot get any pose in frame:{}'", ".", "format", "(", "frame_id", ")", ")", "\n", "continue", "\n", "", "model_poses", "=", "np", ".", "stack", "(", "[", "coco2shelf3D", "(", "i", ")", "for", "i", "in", "deepcopy", "(", "poses3d", ")", "]", ")", "\n", "gt_pose", "=", "actorsGT", "[", "pid", "]", "[", "frame_id", "]", "[", "0", "]", "\n", "dist", "=", "vectorize_distance", "(", "np", ".", "expand_dims", "(", "gt_pose", ",", "0", ")", ",", "model_poses", ")", "\n", "model_pose", "=", "model_poses", "[", "np", ".", "argmin", "(", "dist", "[", "0", "]", ")", "]", "\n", "bones", "=", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", ",", "[", "4", ",", "5", "]", ",", "[", "6", ",", "7", "]", ",", "[", "7", ",", "8", "]", ",", "[", "9", ",", "10", "]", ",", "[", "10", ",", "11", "]", ",", "[", "12", ",", "13", "]", "]", "\n", "for", "i", ",", "bone", "in", "enumerate", "(", "bones", ")", ":", "\n", "\t\t\t\t\t", "start_point", ",", "end_point", "=", "bone", "\n", "if", "is_right", "(", "model_pose", "[", "start_point", "]", ",", "model_pose", "[", "end_point", "]", ",", "gt_pose", "[", "start_point", "]", ",", "\n", "gt_pose", "[", "end_point", "]", ")", ":", "\n", "\t\t\t\t\t\t", "check_result", "[", "frame_id", ",", "pid", ",", "i", "]", "=", "1", "\n", "accuracy_cnt", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t\t\t", "check_result", "[", "frame_id", ",", "pid", ",", "i", "]", "=", "-", "1", "\n", "error_cnt", "+=", "1", "\n", "", "", "gt_hip", "=", "(", "gt_pose", "[", "2", "]", "+", "gt_pose", "[", "3", "]", ")", "/", "2", "\n", "model_hip", "=", "(", "model_pose", "[", "2", "]", "+", "model_pose", "[", "3", "]", ")", "/", "2", "\n", "if", "is_right", "(", "model_hip", ",", "model_pose", "[", "12", "]", ",", "gt_hip", ",", "gt_pose", "[", "12", "]", ")", ":", "\n", "\t\t\t\t\t", "check_result", "[", "frame_id", ",", "pid", ",", "-", "1", "]", "=", "1", "\n", "accuracy_cnt", "+=", "1", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "check_result", "[", "frame_id", ",", "pid", ",", "-", "1", "]", "=", "-", "1", "\n", "error_cnt", "+=", "1", "\n", "\n", "", "", "", "", "bone_group", "=", "OrderedDict", "(", "\n", "[", "(", "'Head'", ",", "np", ".", "array", "(", "[", "8", "]", ")", ")", ",", "(", "'Torso'", ",", "np", ".", "array", "(", "[", "9", "]", ")", ")", ",", "(", "'Upper arms'", ",", "np", ".", "array", "(", "[", "5", ",", "6", "]", ")", ")", ",", "\n", "(", "'Lower arms'", ",", "np", ".", "array", "(", "[", "4", ",", "7", "]", ")", ")", ",", "(", "'Upper legs'", ",", "np", ".", "array", "(", "[", "1", ",", "2", "]", ")", ")", ",", "\n", "(", "'Lower legs'", ",", "np", ".", "array", "(", "[", "0", ",", "3", "]", ")", ")", "]", ")", "\n", "\n", "total_avg", "=", "np", ".", "sum", "(", "check_result", ">", "0", ")", "/", "np", ".", "sum", "(", "np", ".", "abs", "(", "check_result", ")", ")", "\n", "person_wise_avg", "=", "np", ".", "sum", "(", "check_result", ">", "0", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "/", "np", ".", "sum", "(", "np", ".", "abs", "(", "check_result", ")", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "\n", "bone_wise_result", "=", "OrderedDict", "(", ")", "\n", "bone_person_wise_result", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "bone_group", ".", "items", "(", ")", ":", "\n", "\t\t", "bone_wise_result", "[", "k", "]", "=", "np", ".", "sum", "(", "check_result", "[", ":", ",", ":", ",", "v", "]", ">", "0", ")", "/", "np", ".", "sum", "(", "np", ".", "abs", "(", "check_result", "[", ":", ",", ":", ",", "v", "]", ")", ")", "\n", "bone_person_wise_result", "[", "k", "]", "=", "np", ".", "sum", "(", "check_result", "[", ":", ",", ":", ",", "v", "]", ">", "0", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "/", "np", ".", "sum", "(", "\n", "np", ".", "abs", "(", "check_result", "[", ":", ",", ":", ",", "v", "]", ")", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "# np.save('ours.npy', np.sum(check_result[500:666,1,:] < 0, axis=1))", "\n", "", "tb", "=", "PrettyTable", "(", ")", "\n", "tb", ".", "field_names", "=", "[", "'Bone Group'", "]", "+", "[", "'Actor {}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "3", ")", "]", "+", "[", "'Average'", "]", "\n", "list_tb", "=", "[", "tb", ".", "field_names", "]", "\n", "for", "k", ",", "v", "in", "bone_person_wise_result", ".", "items", "(", ")", ":", "\n", "\t\t", "this_row", "=", "[", "k", "]", "+", "[", "np", ".", "char", ".", "mod", "(", "'%.2f'", ",", "i", "*", "100", ")", "for", "i", "in", "v", "[", ":", "3", "]", "]", "+", "[", "np", ".", "char", ".", "mod", "(", "'%.2f'", ",", "np", ".", "sum", "(", "v", "[", ":", "3", "]", ")", "*", "100", "/", "len", "(", "v", "[", ":", "3", "]", ")", ")", "]", "\n", "list_tb", ".", "append", "(", "[", "float", "(", "i", ")", "if", "isinstance", "(", "i", ",", "type", "(", "np", ".", "array", "(", "[", "]", ")", ")", ")", "else", "i", "for", "i", "in", "this_row", "]", ")", "\n", "tb", ".", "add_row", "(", "this_row", ")", "\n", "\n", "", "this_row", "=", "[", "'Total'", "]", "+", "[", "np", ".", "char", ".", "mod", "(", "'%.2f'", ",", "i", "*", "100", ")", "for", "i", "in", "person_wise_avg", "[", ":", "3", "]", "]", "+", "[", "np", ".", "char", ".", "mod", "(", "'%.2f'", ",", "np", ".", "sum", "(", "person_wise_avg", "[", ":", "3", "]", ")", "*", "100", "/", "len", "(", "person_wise_avg", "[", ":", "3", "]", ")", ")", "]", "\n", "tb", ".", "add_row", "(", "this_row", ")", "\n", "list_tb", ".", "append", "(", "[", "float", "(", "i", ")", "if", "isinstance", "(", "i", ",", "type", "(", "np", ".", "array", "(", "[", "]", ")", ")", ")", "else", "i", "for", "i", "in", "this_row", "]", ")", "\n", "print", "(", "tb", ")", "\n", "return", "check_result", ",", "list_tb", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.evalmodel.EvaluatePanoptic": [[208, 351], ["evalmodel.EvaluatePanoptic.getGT"], "function", ["None"], ["", "def", "EvaluatePanoptic", "(", "eval_ranges", ",", "pred_path", ",", "dataset", "=", "'Panoptic'", ",", "seqs", "=", "[", "'Camera0'", ",", "'Camera1'", ",", "'Camera2'", "]", ",", "data_root", "=", "'CatchImage/Panoptic/160906_pizza1'", ")", ":", "\n", "\t", "JOINTS_DEF", "=", "{", "'neck'", ":", "0", ",", "'nose'", ":", "1", ",", "'mid-hip'", ":", "2", ",", "'l-shoulder'", ":", "3", ",", "'l-elbow'", ":", "4", ",", "'l-wrist'", ":", "5", ",", "'l-hip'", ":", "6", ",", "\n", "'l-knee'", ":", "7", ",", "'l-ankle'", ":", "8", ",", "'r-shoulder'", ":", "9", ",", "'r-elbow'", ":", "10", ",", "'r-wrist'", ":", "11", ",", "'r-hip'", ":", "12", ",", "'r-knee'", ":", "13", ",", "'r-ankle'", ":", "14", ",", "\n", "'l-eye'", ":", "15", ",", "'l-ear'", ":", "16", ",", "'r-eye'", ":", "17", ",", "'r-ear'", ":", "18", "}", "\n", "def", "getGT", "(", "interval", "=", "12", ")", ":", "\n", "\t\t", "curr_anno", "=", "osp", ".", "join", "(", "data_root", ",", "'hdPose3d_stage1_coco19'", ")", "\n", "anno_files", "=", "sorted", "(", "glob", ".", "iglob", "(", "'{:s}/*.json'", ".", "format", "(", "curr_anno", ")", ")", ")", "\n", "human_gt", "=", "dict", "(", ")", "\n", "for", "i", ",", "filename", "in", "enumerate", "(", "anno_files", ")", ":", "\n", "\t\t\t", "timestamp", "=", "filename", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "5", "]", ".", "replace", "(", "'body3DScene_'", ",", "''", ")", "\n", "if", "i", "%", "interval", "==", "0", ":", "\n", "\t\t\t\t", "with", "open", "(", "filename", ")", "as", "dfile", ":", "\n", "\t\t\t\t\t", "bodies", "=", "json", ".", "load", "(", "dfile", ")", "[", "'bodies'", "]", "\n", "", "if", "len", "(", "bodies", ")", "==", "0", ":", "\n", "\t\t\t\t\t", "continue", "\n", "\n", "", "all_poses_3d", "=", "[", "]", "\n", "all_poses_vis_3d", "=", "[", "]", "\n", "for", "body", "in", "bodies", ":", "\n", "\t\t\t\t\t", "pose3d", "=", "np", ".", "array", "(", "body", "[", "'joints19'", "]", ")", ".", "reshape", "(", "(", "-", "1", ",", "4", ")", ")", "\n", "pose3d", "=", "pose3d", "[", "1", ":", "15", "]", "\n", "\n", "joints_vis", "=", "pose3d", "[", ":", ",", "-", "1", "]", ">", "0.1", "\n", "\n", "if", "not", "joints_vis", "[", "2", "]", ":", "\n", "\t\t\t\t\t\t", "continue", "\n", "\n", "# Coordinate transformation", "\n", "", "M", "=", "np", ".", "array", "(", "[", "[", "1.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "-", "1.0", "]", ",", "\n", "[", "0.0", ",", "1.0", ",", "0.0", "]", "]", ")", "\n", "pose3d", "[", ":", ",", "0", ":", "3", "]", "=", "pose3d", "[", ":", ",", "0", ":", "3", "]", ".", "dot", "(", "M", ")", "\n", "\n", "all_poses_3d", ".", "append", "(", "pose3d", "[", ":", ",", "0", ":", "3", "]", "*", "10.0", ")", "\n", "all_poses_vis_3d", ".", "append", "(", "\n", "np", ".", "repeat", "(", "\n", "np", ".", "reshape", "(", "joints_vis", ",", "(", "-", "1", ",", "1", ")", ")", ",", "3", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "human_gt", "[", "int", "(", "timestamp", ")", "]", "=", "{", "'joints_3d'", ":", "all_poses_3d", ",", "\n", "'joints_3d_vis'", ":", "all_poses_vis_3d", "}", "\n", "", "", "return", "human_gt", "\n", "\n", "", "def", "eval_list_to_ap", "(", "eval_list", ",", "total_gt", ",", "threshold", ")", ":", "\n", "\t\t", "total_num", "=", "len", "(", "eval_list", ")", "\n", "\n", "tp", "=", "np", ".", "zeros", "(", "total_num", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "total_num", ")", "\n", "gt_det", "=", "[", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "eval_list", ")", ":", "\n", "\t\t\t", "if", "item", "[", "\"mpjpe\"", "]", "<", "threshold", "and", "item", "[", "\"gt_id\"", "]", "not", "in", "gt_det", ":", "\n", "\t\t\t\t", "tp", "[", "i", "]", "=", "1", "\n", "gt_det", ".", "append", "(", "item", "[", "\"gt_id\"", "]", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "fp", "[", "i", "]", "=", "1", "\n", "", "", "tp", "=", "np", ".", "cumsum", "(", "tp", ")", "\n", "fp", "=", "np", ".", "cumsum", "(", "fp", ")", "\n", "recall", "=", "tp", "/", "(", "total_gt", "+", "1e-5", ")", "\n", "precise", "=", "tp", "/", "(", "tp", "+", "fp", "+", "1e-5", ")", "\n", "for", "n", "in", "range", "(", "total_num", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "\t\t\t", "precise", "[", "n", "]", "=", "max", "(", "precise", "[", "n", "]", ",", "precise", "[", "n", "+", "1", "]", ")", "\n", "\n", "", "precise", "=", "np", ".", "concatenate", "(", "(", "[", "0", "]", ",", "precise", ",", "[", "0", "]", ")", ")", "\n", "recall", "=", "np", ".", "concatenate", "(", "(", "[", "0", "]", ",", "recall", ",", "[", "1", "]", ")", ")", "\n", "index", "=", "np", ".", "where", "(", "recall", "[", "1", ":", "]", "!=", "recall", "[", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "ap", "=", "np", ".", "sum", "(", "(", "recall", "[", "index", "+", "1", "]", "-", "recall", "[", "index", "]", ")", "*", "precise", "[", "index", "+", "1", "]", ")", "\n", "\n", "return", "ap", ",", "recall", "[", "-", "2", "]", "\n", "\n", "", "def", "eval_list_to_mpjpe", "(", "eval_list", ",", "threshold", "=", "500", ")", ":", "\n", "\t\t", "gt_det", "=", "[", "]", "\n", "mpjpes", "=", "[", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "eval_list", ")", ":", "\n", "\t\t\t", "if", "item", "[", "\"mpjpe\"", "]", "<", "threshold", "and", "item", "[", "\"gt_id\"", "]", "not", "in", "gt_det", ":", "\n", "\t\t\t\t", "mpjpes", ".", "append", "(", "item", "[", "\"mpjpe\"", "]", ")", "\n", "gt_det", ".", "append", "(", "item", "[", "\"gt_id\"", "]", ")", "\n", "\n", "", "", "return", "np", ".", "mean", "(", "mpjpes", ")", "if", "len", "(", "mpjpes", ")", ">", "0", "else", "np", ".", "inf", "\n", "\n", "", "def", "eval_list_to_recall", "(", "eval_list", ",", "total_gt", ",", "threshold", "=", "500", ")", ":", "\n", "\t\t", "gt_ids", "=", "[", "e", "[", "\"gt_id\"", "]", "for", "e", "in", "eval_list", "if", "e", "[", "\"mpjpe\"", "]", "<", "threshold", "]", "\n", "\n", "return", "len", "(", "np", ".", "unique", "(", "gt_ids", ")", ")", "/", "total_gt", "\n", "\n", "", "def", "evaluate", "(", "gts", ",", "preds", ")", ":", "\n", "\t\t", "eval_list", "=", "[", "]", "\n", "total_gt", "=", "0", "\n", "ranges", "=", "[", "]", "\n", "for", "eval_range", "in", "eval_ranges", ":", "\n", "\t\t\t", "eval_start", "=", "eval_range", "[", "0", "]", "\n", "eval_end", "=", "eval_range", "[", "1", "]", "\n", "ranges", "+=", "[", "i", "for", "i", "in", "range", "(", "eval_start", ",", "eval_end", ")", "]", "\n", "\n", "# for timestamp, pred in preds.items():", "\n", "", "for", "timestamp", ",", "gt", "in", "gts", ".", "items", "(", ")", ":", "\n", "# gt = gts[timestamp]", "\n", "\t\t\t", "joints_3d", "=", "gt", "[", "'joints_3d'", "]", "\n", "joints_3d_vis", "=", "gt", "[", "'joints_3d_vis'", "]", "\n", "\n", "if", "len", "(", "joints_3d", ")", "==", "0", ":", "\n", "\t\t\t\t", "continue", "\n", "\n", "", "pred", "=", "preds", "[", "timestamp", "]", ".", "copy", "(", ")", "\n", "for", "pose", "in", "pred", ":", "\n", "\t\t\t\t", "pose", "=", "pose", ".", "T", "*", "1000.", "\n", "pelvis", "=", "(", "pose", "[", "11", "]", "+", "pose", "[", "12", "]", ")", "/", "2", "\n", "pose", "=", "pose", "[", "[", "0", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", "15", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14", ",", "16", "]", "]", "\n", "pose", "=", "np", ".", "insert", "(", "pose", ",", "1", "*", "3", ",", "pelvis", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "mpjpes", "=", "[", "]", "\n", "for", "(", "gt", ",", "gt_vis", ")", "in", "zip", "(", "joints_3d", ",", "joints_3d_vis", ")", ":", "\n", "\t\t\t\t\t", "vis", "=", "gt_vis", "[", ":", ",", "0", "]", ">", "0", "\n", "mpjpe", "=", "np", ".", "mean", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "(", "pose", "[", "vis", ",", "0", ":", "3", "]", "-", "gt", "[", "vis", "]", ")", "**", "2", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "mpjpes", ".", "append", "(", "mpjpe", ")", "\n", "", "min_gt", "=", "np", ".", "argmin", "(", "mpjpes", ")", "\n", "min_mpjpe", "=", "np", ".", "min", "(", "mpjpes", ")", "\n", "eval_list", ".", "append", "(", "{", "\n", "\"mpjpe\"", ":", "float", "(", "min_mpjpe", ")", ",", "\n", "\"gt_id\"", ":", "int", "(", "total_gt", "+", "min_gt", ")", "\n", "}", ")", "\n", "\n", "", "total_gt", "+=", "len", "(", "joints_3d", ")", "\n", "\n", "", "mpjpe_threshold", "=", "np", ".", "arange", "(", "25", ",", "155", ",", "25", ")", "\n", "aps", "=", "[", "]", "\n", "recs", "=", "[", "]", "\n", "for", "t", "in", "mpjpe_threshold", ":", "\n", "\t\t\t", "ap", ",", "rec", "=", "eval_list_to_ap", "(", "eval_list", ",", "total_gt", ",", "t", ")", "\n", "aps", ".", "append", "(", "ap", ")", "\n", "recs", ".", "append", "(", "rec", ")", "\n", "\n", "", "return", "aps", ",", "recs", ",", "eval_list_to_mpjpe", "(", "eval_list", ")", ",", "eval_list_to_recall", "(", "eval_list", ",", "total_gt", ")", "\n", "\n", "", "with", "open", "(", "pred_path", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t", "multi_poses3d", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "human_gts", "=", "getGT", "(", ")", "\n", "tb", "=", "PrettyTable", "(", ")", "\n", "mpjpe_threshold", "=", "np", ".", "arange", "(", "25", ",", "155", ",", "25", ")", "\n", "aps", ",", "recs", ",", "mpjpe", ",", "_", "=", "evaluate", "(", "human_gts", ",", "multi_poses3d", ")", "\n", "tb", ".", "field_names", "=", "[", "'Threshold/mm'", "]", "+", "[", "f'{i}'", "for", "i", "in", "mpjpe_threshold", "]", "\n", "tb", ".", "add_row", "(", "[", "'AP'", "]", "+", "[", "f'{ap * 100:.2f}'", "for", "ap", "in", "aps", "]", ")", "\n", "tb", ".", "add_row", "(", "[", "'Recall'", "]", "+", "[", "f'{re * 100:.2f}'", "for", "re", "in", "recs", "]", ")", "\n", "print", "(", "tb", ")", "\n", "print", "(", "f'MPJPE: {mpjpe:.2f}mm'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.evalmodel.Write2DResult": [[352, 372], ["os.makedirs", "os.makedirs", "dict", "dict.items", "dict.setdefault", "[].setdefault", "numpy.flip().tolist", "annotation[].tolist", "[].append", "str", "open", "json.dump", "dict", "float", "list", "numpy.flip"], "function", ["None"], ["", "def", "Write2DResult", "(", "image_wh", ",", "annotations", ",", "save_dir", "=", "'TrackResult'", ")", ":", "\n", "\t\t", "import", "json", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "Cameras", "=", "dict", "(", ")", "\n", "for", "annotation", "in", "annotations", ":", "\n", "# {'timestamp':timestamp, 'cid':cid, 'pid':pid, 'pose':pose_2d[:, 0:2], 'scores':pose_2d[:, 2]}", "\n", "\t\t\t", "camera", "=", "\"Camera\"", "+", "str", "(", "annotation", "[", "'cid'", "]", ")", "\n", "timestamp", "=", "annotation", "[", "'timestamp'", "]", "\n", "frame_name", "=", "camera", "+", "os", ".", "sep", "+", "timestamp", "+", "'.jpg'", "\n", "Cameras", ".", "setdefault", "(", "camera", ",", "{", "'image_wh'", ":", "[", "image_wh", "[", "1", "]", ",", "image_wh", "[", "0", "]", "]", ",", "'frames'", ":", "dict", "(", ")", "}", ")", "\n", "Cameras", "[", "camera", "]", "[", "'frames'", "]", ".", "setdefault", "(", "frame_name", ",", "{", "'camera'", ":", "camera", ",", "'timestamp'", ":", "float", "(", "timestamp", ")", ",", "'poses'", ":", "list", "(", ")", "}", ")", "\n", "\n", "target_id", "=", "annotation", "[", "'pid'", "]", "\n", "pose", "=", "np", ".", "flip", "(", "annotation", "[", "'pose'", "]", ",", "axis", "=", "1", ")", ".", "tolist", "(", ")", "\n", "scores", "=", "annotation", "[", "'scores'", "]", ".", "tolist", "(", ")", "\n", "Cameras", "[", "camera", "]", "[", "'frames'", "]", "[", "frame_name", "]", "[", "'poses'", "]", ".", "append", "(", "{", "'id'", ":", "target_id", ",", "'points_2d'", ":", "pose", ",", "'scores'", ":", "scores", "}", ")", "\n", "\n", "", "for", "key", ",", "value", "in", "Cameras", ".", "items", "(", ")", ":", "\n", "\t\t\t", "with", "open", "(", "save_dir", "+", "os", ".", "sep", "+", "key", "+", "'.json'", ",", "'w'", ")", "as", "fp", ":", "\n", "\t\t\t\t", "json", ".", "dump", "(", "value", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.evalmodel.Write3DResult": [[373, 378], ["os.makedirs", "os.makedirs", "open", "pickle.dump", "open.close", "filepath.split"], "function", ["None"], ["", "", "", "def", "Write3DResult", "(", "multi_poses3d", ",", "filepath", ")", ":", "\n", "\t", "os", ".", "makedirs", "(", "'/'", ".", "join", "(", "filepath", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "exist_ok", "=", "True", ")", "\n", "annotation_3d", "=", "open", "(", "filepath", ",", "\"wb\"", ")", "\n", "pickle", ".", "dump", "(", "multi_poses3d", ",", "annotation_3d", ")", "\n", "annotation_3d", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.get_believe": [[8, 15], ["numpy.mean", "believe.append"], "function", ["None"], ["def", "get_believe", "(", "points2d", ")", ":", "\n", "    ", "believe", "=", "[", "]", "\n", "for", "point", "in", "points2d", ":", "\n", "        ", "w", "=", "point", "[", "2", "]", "\n", "if", "w", ">=", "0", ":", "\n", "            ", "believe", ".", "append", "(", "w", ")", "\n", "", "", "return", "np", ".", "mean", "(", "believe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.line_to_point_distance": [[16, 19], ["numba.vectorize", "abs", "math.sqrt", "numba.float64"], "function", ["None"], ["", "@", "vectorize", "(", "[", "float64", "(", "float64", ",", "float64", ",", "float64", ",", "float64", ",", "float64", ")", "]", ")", "\n", "def", "line_to_point_distance", "(", "a", ",", "b", ",", "c", ",", "x", ",", "y", ")", ":", "\n", "    ", "return", "abs", "(", "a", "*", "x", "+", "b", "*", "y", "+", "c", ")", "/", "sqrt", "(", "a", "**", "2", "+", "b", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.line2line_distance_3D": [[20, 25], ["numpy.cross", "numpy.abs", "numpy.linalg.norm().reshape", "numpy.sum", "numpy.linalg.norm"], "function", ["None"], ["", "def", "line2line_distance_3D", "(", "pt1", ",", "directions1", ",", "pt2", ",", "directions2", ")", ":", "\n", "    ", "n", "=", "np", ".", "cross", "(", "directions1", ",", "directions2", ")", "\n", "n", "=", "n", "/", "np", ".", "linalg", ".", "norm", "(", "n", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "distances", "=", "np", ".", "abs", "(", "np", ".", "sum", "(", "n", "*", "(", "pt1", "-", "pt2", ")", ",", "axis", "=", "1", ")", ")", "\n", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.line2point_distance_3D": [[26, 33], ["points3d.astype", "numpy.cross", "numpy.norm", "numpy.norm"], "function", ["None"], ["", "def", "line2point_distance_3D", "(", "camera_position", ",", "directions", ",", "points3d", ")", ":", "\n", "    ", "x0", "=", "points3d", ".", "astype", "(", "np", ".", "float", ")", "\n", "x1", "=", "camera_position", "\n", "x2", "=", "camera_position", "+", "directions", "\n", "cross", "=", "np", ".", "cross", "(", "x2", "-", "x1", ",", "x1", "-", "x0", ")", "\n", "distances", "=", "la", ".", "norm", "(", "cross", ",", "axis", "=", "1", ")", "/", "la", ".", "norm", "(", "x2", "-", "x1", ",", "axis", "=", "1", ")", "\n", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.euclidean_distance": [[34, 58], ["numpy.clip", "numpy.maximum", "numpy.asarray", "numpy.asarray", "numpy.zeros", "numpy.square().sum", "numpy.square().sum", "float", "np.clip.min", "len", "len", "len", "len", "numpy.square", "numpy.square", "numpy.dot"], "function", ["None"], ["", "def", "euclidean_distance", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\" Helper function for nearest neighbor distance metric (Euclidean).\n\n    Parameters\n    ----------\n    x : ndarray\n        A matrix of N row-vectors (sample points).\n    y : ndarray\n        A matrix of M row-vectors (query points).\n\n    Returns\n    -------\n    ndarray\n        A vector of length M that contains for each entry in `y` the\n        smallest Euclidean distance to a sample in `x`.\n\n    \"\"\"", "\n", "a", ",", "b", "=", "np", ".", "asarray", "(", "a", ")", ",", "np", ".", "asarray", "(", "b", ")", "\n", "if", "len", "(", "a", ")", "==", "0", "or", "len", "(", "b", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "len", "(", "a", ")", ",", "len", "(", "b", ")", ")", ")", "\n", "", "a2", ",", "b2", "=", "np", ".", "square", "(", "a", ")", ".", "sum", "(", "axis", "=", "1", ")", ",", "np", ".", "square", "(", "b", ")", ".", "sum", "(", "axis", "=", "1", ")", "\n", "r2", "=", "-", "2.", "*", "np", ".", "dot", "(", "a", ",", "b", ".", "T", ")", "+", "a2", "[", ":", ",", "None", "]", "+", "b2", "[", "None", ",", ":", "]", "\n", "distances", "=", "np", ".", "clip", "(", "r2", ",", "0.", ",", "float", "(", "np", ".", "inf", ")", ")", "\n", "return", "np", ".", "maximum", "(", "0.0", ",", "distances", ".", "min", "(", "axis", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.cosine_distance": [[59, 81], ["distances.min", "numpy.dot", "numpy.asarray", "numpy.linalg.norm", "numpy.asarray", "numpy.linalg.norm"], "function", ["None"], ["", "def", "cosine_distance", "(", "a", ",", "b", ",", "data_is_normalized", "=", "False", ")", ":", "\n", "    ", "\"\"\" Helper function for nearest neighbor distance metric (cosine).\n\n    Parameters\n    ----------\n    x : ndarray\n        A matrix of N row-vectors (sample points).\n    y : ndarray\n        A matrix of M row-vectors (query points).\n\n    Returns\n    -------\n    ndarray\n        A vector of length M that contains for each entry in `y` the\n        smallest cosine distance to a sample in `x`.\n\n    \"\"\"", "\n", "if", "not", "data_is_normalized", ":", "\n", "        ", "a", "=", "np", ".", "asarray", "(", "a", ")", "/", "np", ".", "linalg", ".", "norm", "(", "a", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "b", "=", "np", ".", "asarray", "(", "b", ")", "/", "np", ".", "linalg", ".", "norm", "(", "b", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "distances", "=", "1.", "-", "np", ".", "dot", "(", "a", ",", "b", ".", "T", ")", "\n", "return", "distances", ".", "min", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.transform_closure": [[82, 104], ["torch.zeros_like", "range", "torch.zeros", "torch.zeros_like", "enumerate", "range", "enumerate", "range"], "function", ["None"], ["", "def", "transform_closure", "(", "X_bin", ")", ":", "\n", "    ", "\"\"\"\n    Convert binary relation matrix to permutation matrix\n    :param X_bin: torch.tensor which is binarized by a threshold\n    :return:\n    \"\"\"", "\n", "temp", "=", "torch", ".", "zeros_like", "(", "X_bin", ")", "\n", "N", "=", "X_bin", ".", "shape", "[", "0", "]", "\n", "for", "k", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "                ", "temp", "[", "i", "]", "[", "j", "]", "=", "X_bin", "[", "i", ",", "j", "]", "or", "(", "X_bin", "[", "i", ",", "k", "]", "and", "X_bin", "[", "k", ",", "j", "]", ")", "\n", "", "", "", "vis", "=", "torch", ".", "zeros", "(", "N", ")", "\n", "match_mat", "=", "torch", ".", "zeros_like", "(", "X_bin", ")", "\n", "for", "i", ",", "row", "in", "enumerate", "(", "temp", ")", ":", "\n", "        ", "if", "vis", "[", "i", "]", ":", "\n", "            ", "continue", "\n", "", "for", "j", ",", "is_relative", "in", "enumerate", "(", "row", ")", ":", "\n", "            ", "if", "is_relative", ":", "\n", "                ", "vis", "[", "j", "]", "=", "1", "\n", "match_mat", "[", "j", ",", "i", "]", "=", "1", "\n", "", "", "", "return", "match_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.proj2dpam": [[105, 122], ["range", "calculate.projR", "calculate.projC", "torch.sum", "X.numel", "torch.abs"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.projR", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.projC"], ["", "def", "proj2dpam", "(", "Y", ",", "tol", "=", "1e-4", ")", ":", "\n", "    ", "X0", "=", "Y", "\n", "X", "=", "Y", "\n", "I2", "=", "0", "\n", "\n", "for", "iter_", "in", "range", "(", "10", ")", ":", "\n", "\n", "        ", "X1", "=", "projR", "(", "X0", "+", "I2", ")", "\n", "I1", "=", "X1", "-", "(", "X0", "+", "I2", ")", "\n", "X2", "=", "projC", "(", "X0", "+", "I1", ")", "\n", "I2", "=", "X2", "-", "(", "X0", "+", "I1", ")", "\n", "\n", "chg", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "X2", "[", ":", "]", "-", "X", "[", ":", "]", ")", ")", "/", "X", ".", "numel", "(", ")", "\n", "X", "=", "X2", "\n", "if", "chg", "<", "tol", ":", "\n", "            ", "return", "X", "\n", "", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.projR": [[123, 127], ["range", "calculate.proj2pav"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.proj2pav"], ["", "def", "projR", "(", "X", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "X", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "X", "[", "i", ",", ":", "]", "=", "proj2pav", "(", "X", "[", "i", ",", ":", "]", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.projC": [[128, 132], ["range", "calculate.proj2pav"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.proj2pav"], ["", "def", "projC", "(", "X", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "X", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "X", "[", ":", ",", "j", "]", "=", "proj2pav", "(", "X", "[", ":", ",", "j", "]", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.proj2pav": [[133, 146], ["torch.zeros_like", "torch.sum", "torch.sort", "torch.cumsum", "torch.max", "torch.max", "torch.nonzero", "torch.tensor", "torch.tensor", "torch.arange", "to_find.reshape", "rho.float", "len"], "function", ["None"], ["", "def", "proj2pav", "(", "y", ")", ":", "\n", "    ", "y", "[", "y", "<", "0", "]", "=", "0", "\n", "x", "=", "torch", ".", "zeros_like", "(", "y", ")", "\n", "if", "torch", ".", "sum", "(", "y", ")", "<", "1", ":", "\n", "        ", "x", "+=", "y", "\n", "", "else", ":", "\n", "        ", "u", ",", "_", "=", "torch", ".", "sort", "(", "y", ",", "descending", "=", "True", ")", "\n", "sv", "=", "torch", ".", "cumsum", "(", "u", ",", "0", ")", "\n", "to_find", "=", "u", ">", "(", "sv", "-", "1", ")", "/", "(", "torch", ".", "arange", "(", "1", ",", "len", "(", "u", ")", "+", "1", ",", "device", "=", "u", ".", "device", ",", "dtype", "=", "u", ".", "dtype", ")", ")", "\n", "rho", "=", "torch", ".", "nonzero", "(", "to_find", ".", "reshape", "(", "-", "1", ")", ")", "[", "-", "1", "]", "\n", "theta", "=", "torch", ".", "max", "(", "torch", ".", "tensor", "(", "0", ",", "device", "=", "sv", ".", "device", ",", "dtype", "=", "sv", ".", "dtype", ")", ",", "(", "sv", "[", "rho", "]", "-", "1", ")", "/", "(", "rho", ".", "float", "(", ")", "+", "1", ")", ")", "\n", "x", "+=", "torch", ".", "max", "(", "y", "-", "theta", ",", "torch", ".", "tensor", "(", "0", ",", "device", "=", "sv", ".", "device", ",", "dtype", "=", "y", ".", "dtype", ")", ")", "\n", "", "return", "x", "", "", ""]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.default_limbs.test_distance": [[86, 93], ["numpy.norm"], "function", ["None"], ["def", "test_distance", "(", "jid1", ",", "jid2", ",", "limb", ")", ":", "\n", "    ", "lower", ",", "higher", "=", "DEFAULT_SENSIBLE_LIMB_LENGTH", "[", "limb", "]", "\n", "distance", "=", "la", ".", "norm", "(", "jid1", "-", "jid2", ")", "\n", "if", "lower", "<=", "distance", "<=", "higher", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "return", "True", "", "", "", ""]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.back_project_ray": [[10, 18], ["len", "numpy.concatenate", "Xs.reshape", "numpy.repeat", "np.concatenate.reshape", "numpy.linalg.norm().reshape", "numpy.ones", "numpy.linalg.norm"], "function", ["None"], ["def", "back_project_ray", "(", "RK_INV", ",", "camera_position", ",", "points", ")", ":", "\n", "    ", "joints", "=", "len", "(", "points", ")", "\n", "projected_points", "=", "np", ".", "concatenate", "(", "[", "points", "[", ":", ",", ":", "2", "]", ",", "np", ".", "ones", "(", "(", "joints", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "Xs", "=", "np", ".", "repeat", "(", "[", "RK_INV", "]", ",", "joints", ",", "axis", "=", "0", ")", "@", "projected_points", ".", "reshape", "(", "joints", ",", "3", ",", "1", ")", "\n", "Xs", "=", "Xs", "[", ":", ",", ":", "3", "]", "\n", "directions", "=", "Xs", ".", "reshape", "(", "joints", ",", "3", ")", "\n", "directions", "=", "directions", "/", "np", ".", "linalg", ".", "norm", "(", "directions", ",", "axis", "=", "1", ")", ".", "reshape", "(", "joints", ",", "1", ")", "\n", "return", "directions", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.back_project_distance": [[19, 28], ["back_project_ray_", "back_project_ray_", "line2line_distance_3D_", "numpy.mean", "len", "len"], "function", ["None"], ["", "def", "back_project_distance", "(", "points0", ",", "POS0", ",", "RK_INV0", ",", "points1", ",", "POS1", ",", "RK_INV1", ")", ":", "\n", "    ", "assert", "len", "(", "points0", ")", "==", "len", "(", "points1", ")", "\n", "camera_position0", "=", "POS0", "\n", "camera_position1", "=", "POS1", "\n", "distances", "=", "[", "]", "\n", "directions0", "=", "back_project_ray_", "(", "RK_INV0", ",", "camera_position0", ",", "points0", ")", "\n", "directions1", "=", "back_project_ray_", "(", "RK_INV1", ",", "camera_position1", ",", "points1", ")", "\n", "distances", "=", "line2line_distance_3D_", "(", "camera_position0", ",", "directions0", ",", "camera_position1", ",", "directions1", ")", "\n", "return", "np", ".", "mean", "(", "distances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.back_project_affinity": [[29, 49], ["numpy.ones", "numpy.fill_diagonal", "range", "range", "np.ones.std", "matching.back_project_distance", "numpy.exp", "np.ones.mean"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.back_project_distance"], ["", "def", "back_project_affinity", "(", "points_set", ",", "cams", ",", "sub_imgid2cam", ")", ":", "\n", "    ", "M", ",", "_", ",", "_", "=", "points_set", ".", "shape", "\n", "distance_matrix", "=", "np", ".", "ones", "(", "(", "M", ",", "M", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "np", ".", "fill_diagonal", "(", "distance_matrix", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "M", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", ",", "M", ")", ":", "\n", "            ", "if", "sub_imgid2cam", "[", "i", "]", "==", "sub_imgid2cam", "[", "j", "]", ":", "\n", "                ", "continue", "\n", "", "cam_id0", "=", "sub_imgid2cam", "[", "i", "]", "\n", "cam_id1", "=", "sub_imgid2cam", "[", "j", "]", "\n", "pose_id0", "=", "points_set", "[", "i", "]", "\n", "pose_id1", "=", "points_set", "[", "j", "]", "\n", "distance", "=", "back_project_distance", "(", "pose_id0", ",", "cams", "[", "cam_id0", "]", ".", "POS", ",", "cams", "[", "cam_id0", "]", ".", "RK_INV", ",", "pose_id1", ",", "cams", "[", "cam_id1", "]", ".", "POS", ",", "cams", "[", "cam_id1", "]", ".", "RK_INV", ")", "\n", "distance_matrix", "[", "i", ",", "j", "]", "=", "distance", "\n", "distance_matrix", "[", "j", ",", "i", "]", "=", "distance", "\n", "", "", "affinity_matrix", "=", "-", "(", "distance_matrix", "-", "distance_matrix", ".", "mean", "(", ")", ")", "/", "distance_matrix", ".", "std", "(", ")", "\n", "# TODO: add flexible factor", "\n", "affinity_matrix", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "5", "*", "affinity_matrix", ")", ")", "\n", "# print(affinity_matrix)", "\n", "return", "affinity_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.epipolar_distance": [[50, 92], ["len", "numpy.flip", "numpy.flip", "numpy.array", "numpy.array", "numpy.squeeze", "numpy.squeeze", "numpy.concatenate", "numpy.concatenate", "numpy.hstack", "len", "cv2.computeCorrespondEpilines", "cv2.computeCorrespondEpilines", "numpy.expand_dims", "numpy.expand_dims", "numpy.abs", "numpy.sqrt", "numpy.abs", "numpy.sqrt", "numpy.ones", "numpy.ones", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "d1.reshape", "d2.reshape"], "function", ["None"], ["", "def", "epipolar_distance", "(", "cam1", ",", "person1", ",", "cam2", ",", "person2", ")", ":", "\n", "    ", "\"\"\" calculate the epipolar distance between two humans\n    :param cam1:\n    :param person1:\n    :param cam2:\n    :param person2:\n    :return:\n    \"\"\"", "\n", "n_pairs", "=", "len", "(", "person1", ")", "\n", "F", "=", "cam1", ".", "F", "[", "cam2", ".", "cid", "]", "\n", "pts1", "=", "np", ".", "flip", "(", "person1", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", "\n", "pts2", "=", "np", ".", "flip", "(", "person2", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", "\n", "\n", "\n", "if", "len", "(", "pts1", ")", "==", "0", ":", "\n", "        ", "return", "[", "]", "\n", "\n", "", "pts1", "=", "np", ".", "array", "(", "pts1", ")", "\n", "pts2", "=", "np", ".", "array", "(", "pts2", ")", "\n", "epilines_1to2", "=", "np", ".", "squeeze", "(", "\n", "cv2", ".", "computeCorrespondEpilines", "(", "pts1", ",", "2", ",", "F", ")", ")", "\n", "\n", "epilines_2to1", "=", "np", ".", "squeeze", "(", "\n", "cv2", ".", "computeCorrespondEpilines", "(", "pts2", ",", "1", ",", "F", ")", ")", "\n", "\n", "\n", "if", "n_pairs", "==", "1", ":", "\n", "        ", "epilines_1to2", "=", "np", ".", "expand_dims", "(", "epilines_1to2", ",", "axis", "=", "0", ")", "\n", "epilines_2to1", "=", "np", ".", "expand_dims", "(", "epilines_2to1", ",", "axis", "=", "0", ")", "\n", "\n", "", "pts1", "=", "np", ".", "concatenate", "(", "[", "pts1", ",", "np", ".", "ones", "(", "(", "n_pairs", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "pts2", "=", "np", ".", "concatenate", "(", "[", "pts2", ",", "np", ".", "ones", "(", "(", "n_pairs", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "d1", "=", "np", ".", "abs", "(", "np", ".", "sum", "(", "pts1", "*", "epilines_2to1", ",", "axis", "=", "1", ")", ")", "/", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "epilines_2to1", "[", ":", ",", ":", "2", "]", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "d2", "=", "np", ".", "abs", "(", "np", ".", "sum", "(", "pts2", "*", "epilines_1to2", ",", "axis", "=", "1", ")", ")", "/", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "epilines_1to2", "[", ":", ",", ":", "2", "]", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "distances", "=", "np", ".", "hstack", "(", "[", "d1", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "d2", ".", "reshape", "(", "-", "1", ",", "1", ")", "]", ")", "\n", "\n", "# print(epilines_1to2)", "\n", "# test = np.transpose(F.T @ pts1.T)", "\n", "# test = test / np.linalg.norm(test[:, :2], axis=1).reshape(-1,1)", "\n", "\n", "\n", "return", "distances", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.epipolar_affinity": [[93, 114], ["len", "numpy.array", "numpy.zeros", "numpy.fill_diagonal", "range", "numpy.ones", "range", "matching.epipolar_distance", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.epipolar_distance"], ["", "def", "epipolar_affinity", "(", "cameras", ",", "sub_imgid2cam", ",", "pose_mat", ",", "num_joints", ")", ":", "\n", "    ", "M", "=", "len", "(", "pose_mat", ")", "\n", "pose_mat", "=", "np", ".", "array", "(", "pose_mat", ")", "\n", "distances_matrix", "=", "np", ".", "zeros", "(", "(", "M", ",", "M", ",", "num_joints", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "affinity_matrix", "=", "np", ".", "ones", "(", "(", "M", ",", "M", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "25", "\n", "np", ".", "fill_diagonal", "(", "affinity_matrix", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "M", "-", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "M", ")", ":", "\n", "            ", "if", "sub_imgid2cam", "[", "i", "]", "==", "sub_imgid2cam", "[", "j", "]", ":", "\n", "                ", "continue", "\n", "", "cam_id0", "=", "sub_imgid2cam", "[", "i", "]", "\n", "cam_id1", "=", "sub_imgid2cam", "[", "j", "]", "\n", "pose_id0", "=", "pose_mat", "[", "i", "]", "\n", "pose_id1", "=", "pose_mat", "[", "j", "]", "\n", "distances", "=", "epipolar_distance", "(", "cameras", "[", "cam_id0", "]", ",", "pose_id0", ",", "cameras", "[", "cam_id1", "]", ",", "pose_id1", ")", "\n", "distances_matrix", "[", "i", ",", "j", "]", "=", "[", "(", "dis", "[", "0", "]", "+", "dis", "[", "1", "]", ")", "/", "2", "for", "dis", "in", "distances", "]", "\n", "distances_matrix", "[", "j", ",", "i", "]", "=", "[", "(", "dis", "[", "0", "]", "+", "dis", "[", "1", "]", ")", "/", "2", "for", "dis", "in", "distances", "]", "\n", "distance", "=", "np", ".", "mean", "(", "[", "(", "dis", "[", "0", "]", "+", "dis", "[", "1", "]", ")", "/", "2", "for", "dis", "in", "distances", "]", ")", "\n", "affinity_matrix", "[", "i", ",", "j", "]", "=", "distance", "\n", "affinity_matrix", "[", "j", ",", "i", "]", "=", "distance", "\n", "", "", "return", "affinity_matrix", ",", "distances_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.epipolar_affinity_parallel": [[115, 152], ["len", "numpy.array", "numpy.concatenate", "numpy.transpose", "numpy.tile", "range", "numpy.array", "numpy.transpose", "numpy.linalg.norm().reshape", "numpy.sum", "distances.reshape", "numpy.mean", "numpy.repeat", "range", "numpy.abs", "numpy.sqrt", "numpy.flip", "numpy.ones", "numpy.linalg.norm", "numpy.sum", "numpy.transpose", "np.array.append", "np.array.append", "numpy.zeros"], "function", ["None"], ["", "def", "epipolar_affinity_parallel", "(", "cameras", ",", "sub_imgid2cam", ",", "pose_mat", ",", "num_joints", ")", ":", "\n", "    ", "M", "=", "len", "(", "pose_mat", ")", "\n", "pose_mat", "=", "np", ".", "array", "(", "pose_mat", ")", "\n", "pose_mat", "=", "np", ".", "concatenate", "(", "[", "np", ".", "flip", "(", "pose_mat", "[", ":", ",", ":", ",", ":", "2", "]", ",", "axis", "=", "2", ")", ",", "np", ".", "ones", "(", "(", "M", ",", "num_joints", ",", "1", ")", ")", "]", ",", "axis", "=", "2", ")", "\n", "poses0", "=", "np", ".", "transpose", "(", "np", ".", "repeat", "(", "pose_mat", ",", "M", ",", "0", ")", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "poses1", "=", "np", ".", "tile", "(", "pose_mat", ",", "(", "M", ",", "1", ",", "1", ")", ")", "\n", "# poses0 = []", "\n", "# poses1 = []", "\n", "Fs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "M", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "M", ")", ":", "\n", "# pose0 = np.concatenate([np.flip(pose_mat[i, :, :2], axis=1), np.ones((num_joints,1))], axis=1)", "\n", "# pose1 = np.concatenate([np.flip(pose_mat[j, :, :2], axis=1), np.ones((num_joints,1))], axis=1)", "\n", "# poses0.append(pose0.T)", "\n", "# poses1.append(pose1)", "\n", "\n", "            ", "cam_id0", "=", "sub_imgid2cam", "[", "i", "]", "\n", "cam_id1", "=", "sub_imgid2cam", "[", "j", "]", "\n", "if", "cam_id0", "==", "cam_id1", ":", "\n", "                ", "Fs", ".", "append", "(", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "Fs", ".", "append", "(", "cameras", "[", "cam_id0", "]", ".", "F", "[", "cameras", "[", "cam_id1", "]", ".", "cid", "]", ".", "T", ")", "\n", "# poses0 = np.array(poses0)", "\n", "# poses1 = np.array(poses1)", "\n", "", "", "", "Fs", "=", "np", ".", "array", "(", "Fs", ")", "\n", "lines", "=", "np", ".", "transpose", "(", "Fs", "@", "poses0", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "nu", "=", "np", ".", "linalg", ".", "norm", "(", "lines", "[", ":", ",", ":", ",", ":", "2", "]", ",", "axis", "=", "2", ")", ".", "reshape", "(", "-", "1", ",", "num_joints", ",", "1", ")", "\n", "nu", "[", "nu", "==", "0", "]", "=", "1", "\n", "lines", "/=", "nu", "\n", "norm", "=", "np", ".", "sum", "(", "lines", "[", ":", ",", ":", ",", ":", "2", "]", "**", "2", ",", "axis", "=", "2", ")", "\n", "norm", "[", "norm", "==", "0", "]", "=", "1", "\n", "distances", "=", "np", ".", "abs", "(", "np", ".", "sum", "(", "poses1", "*", "lines", ",", "axis", "=", "2", ")", ")", "/", "np", ".", "sqrt", "(", "norm", ")", "\n", "distances_matrix", "=", "distances", ".", "reshape", "(", "M", ",", "M", ",", "-", "1", ")", "\n", "distances_matrix", "=", "(", "distances_matrix", "+", "np", ".", "transpose", "(", "distances_matrix", ",", "(", "1", ",", "0", ",", "2", ")", ")", ")", "/", "2", "\n", "affinity_matrix", "=", "np", ".", "mean", "(", "distances_matrix", ",", "axis", "=", "2", ")", "\n", "\n", "return", "affinity_matrix", ",", "distances_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.geometry_distance": [[153, 163], ["cv2.computeCorrespondEpilines", "lines.transpose.reshape", "lines.transpose.transpose", "numpy.ones", "numpy.sum", "numpy.abs", "numpy.mean", "pts_0.reshape"], "function", ["None"], ["", "def", "geometry_distance", "(", "pts_0", ",", "pts_1", ",", "F", ")", ":", "\n", "    ", "lines", "=", "cv2", ".", "computeCorrespondEpilines", "(", "pts_0", ".", "reshape", "(", "-", "1", ",", "1", ",", "2", ")", ",", "2", ",", "F", ")", "\n", "lines", "=", "lines", ".", "reshape", "(", "-", "1", ",", "17", ",", "1", ",", "3", ")", "\n", "lines", "=", "lines", ".", "transpose", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "points_1", "=", "np", ".", "ones", "(", "[", "1", ",", "pts_1", ".", "shape", "[", "0", "]", ",", "17", ",", "3", "]", ")", "\n", "points_1", "[", "0", ",", ":", ",", ":", ",", ":", "2", "]", "=", "pts_1", "\n", "dist", "=", "np", ".", "sum", "(", "lines", "*", "points_1", ",", "axis", "=", "3", ")", "#/ np.linalg.norm(lines[:, :, :, :2], axis=3)", "\n", "dist", "=", "np", ".", "abs", "(", "dist", ")", "\n", "dist", "=", "np", ".", "mean", "(", "dist", ",", "axis", "=", "2", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.geometry_affinity": [[164, 185], ["numpy.fill_diagonal", "enumerate", "numpy.ones", "range", "enumerate", "range", "distance_matrix.std", "numpy.exp", "len", "distance_matrix.mean", "len", "matching.geometry_distance", "matching.geometry_distance"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.geometry_distance", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.geometry_distance"], ["", "def", "geometry_affinity", "(", "points_set", ",", "cameras", ",", "dimGroup", ")", ":", "\n", "    ", "M", ",", "_", ",", "_", "=", "points_set", ".", "shape", "\n", "# distance_matrix = np.zeros ( (M, M), dtype=np.float32 )", "\n", "distance_matrix", "=", "np", ".", "ones", "(", "(", "M", ",", "M", ")", ",", "dtype", "=", "np", ".", "float32", ")", "*", "25", "\n", "np", ".", "fill_diagonal", "(", "distance_matrix", ",", "0", ")", "\n", "for", "cam_id0", ",", "h", "in", "enumerate", "(", "range", "(", "len", "(", "dimGroup", ")", "-", "1", ")", ")", ":", "\n", "        ", "for", "cam_add", ",", "k", "in", "enumerate", "(", "range", "(", "cam_id0", "+", "1", ",", "len", "(", "dimGroup", ")", "-", "1", ")", ")", ":", "\n", "            ", "cam_id1", "=", "cam_id0", "+", "cam_add", "+", "1", "\n", "if", "dimGroup", "[", "h", "]", "==", "dimGroup", "[", "h", "+", "1", "]", "or", "dimGroup", "[", "k", "]", "==", "dimGroup", "[", "k", "+", "1", "]", ":", "\n", "                ", "continue", "\n", "", "F0", "=", "cameras", "[", "cam_id0", "]", "\n", "F1", "=", "cameras", "[", "cam_id1", "]", "\n", "pose_id0", "=", "points_set", "[", "dimGroup", "[", "h", "]", ":", "dimGroup", "[", "h", "+", "1", "]", "]", "\n", "pose_id1", "=", "points_set", "[", "dimGroup", "[", "k", "]", ":", "dimGroup", "[", "k", "+", "1", "]", "]", "\n", "distance_matrix", "[", "dimGroup", "[", "h", "]", ":", "dimGroup", "[", "h", "+", "1", "]", ",", "dimGroup", "[", "k", "]", ":", "dimGroup", "[", "k", "+", "1", "]", "]", "=", "(", "geometry_distance", "(", "pose_id0", ",", "pose_id1", ",", "F0", "[", "cam_id1", "]", ")", "+", "geometry_distance", "(", "pose_id1", ",", "pose_id0", ",", "F1", "[", "cam_id0", "]", ")", ".", "T", ")", "/", "2", "\n", "\n", "distance_matrix", "[", "dimGroup", "[", "k", "]", ":", "dimGroup", "[", "k", "+", "1", "]", ",", "dimGroup", "[", "h", "]", ":", "dimGroup", "[", "h", "+", "1", "]", "]", "=", "distance_matrix", "[", "dimGroup", "[", "h", "]", ":", "dimGroup", "[", "h", "+", "1", "]", ",", "dimGroup", "[", "k", "]", ":", "dimGroup", "[", "k", "+", "1", "]", "]", ".", "T", "\n", "", "", "affinity_matrix", "=", "-", "(", "distance_matrix", "-", "distance_matrix", ".", "mean", "(", ")", ")", "/", "(", "distance_matrix", ".", "std", "(", ")", "+", "10e-6", ")", "\n", "affinity_matrix", "=", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "5", "*", "affinity_matrix", ")", ")", "\n", "return", "affinity_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.pairwise_distance": [[186, 197], ["torch.cat", "torch.cat", "x.view.view", "y.view.view", "dist.addmm_", "x.view.size", "y.view.size", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "y.view.t", "query_features[].unsqueeze", "gallery_features[].unsqueeze", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.size", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.size"], ["", "def", "pairwise_distance", "(", "query_features", ",", "gallery_features", ",", "query", "=", "None", ",", "gallery", "=", "None", ")", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "    ", "x", "=", "torch", ".", "cat", "(", "[", "query_features", "[", "f", "]", ".", "unsqueeze", "(", "0", ")", "for", "f", ",", "_", ",", "_", "in", "query", "]", ",", "0", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "gallery_features", "[", "f", "]", ".", "unsqueeze", "(", "0", ")", "for", "f", ",", "_", ",", "_", "in", "gallery", "]", ",", "0", ")", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "m", ",", "-", "1", ")", "\n", "y", "=", "y", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "dist", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.pairwise_affinity": [[198, 215], ["torch.cat", "torch.cat", "x.view.view", "y.view.view", "dist.addmm_", "torch.sigmoid", "x.view.size", "y.view.size", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "y.view.t", "dist.std", "query_features[].unsqueeze", "gallery_features[].unsqueeze", "torch.tensor", "torch.pow().sum", "torch.pow().sum().expand", "dist.mean", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.size", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.size"], ["", "def", "pairwise_affinity", "(", "query_features", ",", "gallery_features", ",", "query", "=", "None", ",", "gallery", "=", "None", ")", ":", "\n", "# import pdb; pdb.set_trace()", "\n", "    ", "x", "=", "torch", ".", "cat", "(", "[", "query_features", "[", "f", "]", ".", "unsqueeze", "(", "0", ")", "for", "f", ",", "_", ",", "_", "in", "query", "]", ",", "0", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "gallery_features", "[", "f", "]", ".", "unsqueeze", "(", "0", ")", "for", "f", ",", "_", ",", "_", "in", "gallery", "]", ",", "0", ")", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "m", ",", "-", "1", ")", "\n", "y", "=", "y", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "dist", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "normalized_affinity", "=", "-", "(", "dist", "-", "dist", ".", "mean", "(", ")", ")", "/", "dist", ".", "std", "(", ")", "\n", "affinity", "=", "torch", ".", "sigmoid", "(", "normalized_affinity", "*", "torch", ".", "tensor", "(", "5.", ")", ")", "# x5 to match 1->1", "\n", "# pro = x @ y.t ()", "\n", "# norms = x.norm ( dim=1 ).unsqueeze ( 1 ) @ y.norm ( dim=1 ).unsqueeze ( 0 )", "\n", "# affinity = (pro / norms + 1) / 2  # map from (-1, 1) to (0, 1)", "\n", "# affinity = torch.sigmoid ( pro / norms ) #  map to (0, 1)", "\n", "return", "affinity", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.embedding_affinity": [[216, 232], ["numpy.zeros", "numpy.maximum", "torch.from_numpy().float().cuda", "query_features[].numpy", "gallery_features[].numpy", "cdist", "len", "len", "torch.from_numpy().float", "torch.from_numpy"], "function", ["None"], ["", "def", "embedding_affinity", "(", "query_features", ",", "gallery_features", ",", "query", "=", "None", ",", "gallery", "=", "None", ",", "metric", "=", "'cosine'", ")", ":", "\n", "    ", "\"\"\"\n    :param tracks: list[STrack]\n    :param detections: list[BaseTrack]\n    :param metric:\n    :return: cost_matrix np.ndarray\n    \"\"\"", "\n", "x", "=", "[", "query_features", "[", "f", "]", ".", "numpy", "(", ")", "for", "f", ",", "_", ",", "_", "in", "query", "]", "\n", "y", "=", "[", "gallery_features", "[", "f", "]", ".", "numpy", "(", ")", "for", "f", ",", "_", ",", "_", "in", "gallery", "]", "\n", "cost_matrix", "=", "np", ".", "zeros", "(", "(", "len", "(", "x", ")", ",", "len", "(", "y", ")", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "if", "cost_matrix", ".", "size", "==", "0", ":", "\n", "        ", "return", "cost_matrix", "\n", "\n", "", "cost_matrix", "=", "np", ".", "maximum", "(", "0.0", ",", "cdist", "(", "x", ",", "y", ",", "metric", ")", ")", "# Nomalized features", "\n", "cost_matrix", "=", "1", "-", "cost_matrix", "\n", "return", "torch", ".", "from_numpy", "(", "cost_matrix", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.BIP_matching": [[234, 242], ["numpy.zeros", "enumerate", "matching.epipolar_affinity", "model.solve", "range", "affinity_mat.astype", "len"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.epipolar_affinity", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.binary_integer_programming._BIPSolver.solve"], ["", "def", "BIP_matching", "(", "model", ",", "cameras", ",", "dimGroup", ",", "pose_mat", "=", "None", ",", "num_joints", "=", "17", ",", "threshold", "=", "40", ")", ":", "\n", "    ", "sub_imgid2cam", "=", "np", ".", "zeros", "(", "dimGroup", "[", "-", "1", "]", "if", "dimGroup", "[", "-", "1", "]", "-", "1", ">=", "0", "else", "0", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "idx", ",", "i", "in", "enumerate", "(", "range", "(", "len", "(", "dimGroup", ")", "-", "1", ")", ")", ":", "\n", "        ", "sub_imgid2cam", "[", "dimGroup", "[", "i", "]", ":", "dimGroup", "[", "i", "+", "1", "]", "]", "=", "idx", "\n", "", "affinity_mat", ",", "_", "=", "epipolar_affinity", "(", "cameras", ",", "sub_imgid2cam", ",", "pose_mat", ",", "num_joints", ")", "\n", "affinity_mat", "=", "1", "-", "affinity_mat", "/", "threshold", "\n", "matched_list", "=", "model", ".", "solve", "(", "affinity_mat", ".", "astype", "(", "np", ".", "double", ")", ")", "\n", "return", "matched_list", ",", "sub_imgid2cam", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.Greedy_matching": [[243, 296], ["numpy.arange", "numpy.ones", "numpy.where", "numpy.zeros", "zip", "numpy.triu", "numpy.sum", "numpy.sum", "numpy.array", "matching.back_project_ray", "calculate.line2point_distance_3D", "numpy.array", "matching.back_project_ray", "calculate.line2point_distance_3D", "numpy.array", "numpy.array", "numpy.flip", "numpy.flip"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.back_project_ray", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.line2point_distance_3D", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.back_project_ray", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.line2point_distance_3D"], ["", "def", "Greedy_matching", "(", "cameras", ",", "pose_mat", "=", "None", ",", "affinity_mat", "=", "None", ",", "costs", "=", "None", ",", "next_pose", "=", "None", ",", "mode", "=", "'update'", ")", ":", "\n", "    ", "n_nodes", "=", "affinity_mat", ".", "shape", "[", "0", "]", "\n", "matched_list", "=", "np", ".", "arange", "(", "n_nodes", ")", "\n", "binary_list", "=", "np", ".", "ones", "(", "n_nodes", "*", "2", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "rows", ",", "cols", "=", "np", ".", "where", "(", "np", ".", "triu", "(", "affinity_mat", ")", "<", "0", ")", "\n", "back_project_distances", "=", "np", ".", "zeros", "(", "n_nodes", ")", "\n", "for", "row", ",", "col", "in", "zip", "(", "rows", ",", "cols", ")", ":", "\n", "        ", "if", "row", "not", "in", "matched_list", "or", "col", "not", "in", "matched_list", ":", "\n", "            ", "continue", "\n", "", "if", "mode", "==", "'update'", ":", "\n", "            ", "if", "back_project_distances", "[", "row", "]", "==", "0", ":", "\n", "                ", "RK_INV", "=", "cameras", "[", "row", "]", ".", "RK_INV", "\n", "position", "=", "cameras", "[", "row", "]", ".", "position", "\n", "point", "=", "np", ".", "array", "(", "[", "np", ".", "flip", "(", "pose_mat", "[", "row", ",", "0", ",", ":", "2", "]", ")", "]", ")", "\n", "\n", "direction", "=", "back_project_ray", "(", "RK_INV", ",", "position", ",", "point", ")", "\n", "cost", "=", "line2point_distance_3D", "(", "position", ",", "direction", ",", "np", ".", "array", "(", "[", "next_pose", "]", ")", ")", "\n", "back_project_distances", "[", "row", "]", "=", "cost", "[", "0", "]", "\n", "\n", "", "if", "back_project_distances", "[", "col", "]", "==", "0", ":", "\n", "                ", "RK_INV", "=", "cameras", "[", "col", "]", ".", "RK_INV", "\n", "position", "=", "cameras", "[", "col", "]", ".", "position", "\n", "point", "=", "np", ".", "array", "(", "[", "np", ".", "flip", "(", "pose_mat", "[", "col", ",", "0", ",", ":", "2", "]", ")", "]", ")", "\n", "\n", "direction", "=", "back_project_ray", "(", "RK_INV", ",", "position", ",", "point", ")", "\n", "cost", "=", "line2point_distance_3D", "(", "position", ",", "direction", ",", "np", ".", "array", "(", "[", "next_pose", "]", ")", ")", "\n", "back_project_distances", "[", "col", "]", "=", "cost", "[", "0", "]", "\n", "\n", "", "if", "back_project_distances", "[", "row", "]", ">", "back_project_distances", "[", "col", "]", ":", "\n", "                ", "matched_list", "=", "matched_list", "[", "matched_list", "!=", "row", "]", "\n", "binary_list", "[", "row", "*", "2", ":", "row", "*", "2", "+", "2", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "matched_list", "=", "matched_list", "[", "matched_list", "!=", "col", "]", "\n", "binary_list", "[", "col", "*", "2", ":", "col", "*", "2", "+", "2", "]", "=", "0", "\n", "\n", "\n", "# if costs[row] > costs[col]:", "\n", "#     matched_list = matched_list[matched_list != row]", "\n", "#     binary_list[row*2:row*2+2] = 0", "\n", "# else:", "\n", "#     matched_list = matched_list[matched_list != col]", "\n", "#     binary_list[col*2:col*2+2] = 0", "\n", "", "", "else", ":", "\n", "            ", "sum1", "=", "np", ".", "sum", "(", "affinity_mat", "[", "row", "]", ")", "\n", "sum2", "=", "np", ".", "sum", "(", "affinity_mat", "[", "col", "]", ")", "\n", "if", "sum1", ">", "sum2", ":", "\n", "                ", "matched_list", "=", "matched_list", "[", "matched_list", "!=", "col", "]", "\n", "binary_list", "[", "col", "*", "2", ":", "col", "*", "2", "+", "2", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "matched_list", "=", "matched_list", "[", "matched_list", "!=", "row", "]", "\n", "binary_list", "[", "row", "*", "2", ":", "row", "*", "2", "+", "2", "]", "=", "0", "\n", "", "", "", "return", "matched_list", ",", "binary_list", ",", "affinity_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.distance_between_3Dposes": [[297, 340], ["range", "len", "numpy.norm", "distances.append", "len", "range", "numpy.mean", "numpy.mean", "numpy.norm", "numpy.mean", "len", "len", "len", "len", "len", "len", "numpy.isnan().any", "numpy.isnan().any", "min", "len", "len", "len", "len", "len", "abs", "valid1.append", "valid2.append", "numpy.isnan", "numpy.isnan"], "function", ["None"], ["", "def", "distance_between_3Dposes", "(", "pose1", ",", "weight1", ",", "pose2", ",", "weight2", ",", "z_axis", ")", ":", "\n", "    ", "\"\"\"\n    :param pose1: dict('3dpose', '3dweight)\n    :param pose2: dict('3dpose', '3dweight)\n    :param z_axis: some datasets are rotated around one axis\n    :return:\n    \"\"\"", "\n", "assert", "len", "(", "pose1", ")", "==", "len", "(", "pose2", ")", "and", "len", "(", "weight1", ")", "==", "len", "(", "pose1", ")", "and", "len", "(", "weight2", ")", "==", "len", "(", "pose2", ")", "\n", "distances", "=", "[", "]", "\n", "dis", "=", "[", "]", "\n", "wei", "=", "[", "]", "\n", "for", "jid", "in", "range", "(", "len", "(", "pose1", ")", ")", ":", "\n", "        ", "if", "np", ".", "isnan", "(", "pose2", "[", "jid", "]", ")", ".", "any", "(", ")", "or", "np", ".", "isnan", "(", "pose1", "[", "jid", "]", ")", ".", "any", "(", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "d", "=", "la", ".", "norm", "(", "pose2", "[", "jid", "]", "-", "pose1", "[", "jid", "]", ")", "\n", "w", "=", "(", "1", "-", "abs", "(", "weight1", "[", "jid", "]", "-", "weight2", "[", "jid", "]", ")", ")", "*", "min", "(", "weight1", "[", "jid", "]", ",", "weight2", "[", "jid", "]", ")", "\n", "distances", ".", "append", "(", "d", "*", "w", ")", "\n", "", "if", "len", "(", "distances", ")", "==", "0", ":", "\n", "# TODO check this heuristic", "\n", "# take the centre distance in x-y coordinates", "\n", "        ", "valid1", "=", "[", "]", "\n", "valid2", "=", "[", "]", "\n", "for", "jid", "in", "range", "(", "len", "(", "pose1", ")", ")", ":", "\n", "            ", "if", "pose1", "[", "jid", "]", "is", "not", "None", ":", "\n", "                ", "valid1", ".", "append", "(", "pose1", "[", "jid", "]", ")", "\n", "", "if", "pose2", "[", "jid", "]", "is", "not", "None", ":", "\n", "                ", "valid2", ".", "append", "(", "pose2", "[", "jid", "]", ")", "\n", "\n", "", "", "assert", "len", "(", "valid1", ")", ">", "0", "\n", "assert", "len", "(", "valid2", ")", ">", "0", "\n", "mean1", "=", "np", ".", "mean", "(", "valid1", ",", "axis", "=", "0", ")", "\n", "mean2", "=", "np", ".", "mean", "(", "valid2", ",", "axis", "=", "0", ")", "\n", "assert", "len", "(", "mean1", ")", "==", "3", "\n", "assert", "len", "(", "mean2", ")", "==", "3", "\n", "\n", "# we only care about xy coordinates", "\n", "mean1", "[", "z_axis", "]", "=", "0", "\n", "mean2", "[", "z_axis", "]", "=", "0", "\n", "\n", "return", "la", ".", "norm", "(", "mean1", "-", "mean2", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "distances", ")", "# TODO try different versions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.Edge.__init__": [[271, 276], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "child", "=", "None", "\n", "parent", "=", "None", "\n", "bone_mean", "=", "None", "\n", "bone_std", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.top_down_pose_kernel": [[9, 32], ["range", "len", "range", "numpy.argmin", "len", "cv2.triangulatePoints", "poses3d.append", "weight3d.append", "zip", "reproj_error.append", "numpy.linalg.norm"], "function", ["None"], ["def", "top_down_pose_kernel", "(", "cameras", ",", "poses2d", ",", "weight2d", "=", "None", ")", ":", "\n", "    ", "poses3d", "=", "[", "]", "\n", "weight3d", "=", "[", "]", "\n", "reproj_error", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "poses2d", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "poses2d", ")", ")", ":", "\n", "            ", "projmat_i", ",", "projmat_j", "=", "cameras", "[", "i", "]", ".", "P", ",", "cameras", "[", "j", "]", ".", "P", "\n", "pose2d_i", ",", "pose2d_j", "=", "poses2d", "[", "i", "]", ",", "poses2d", "[", "j", "]", "\n", "pose3d_homo", "=", "cv2", ".", "triangulatePoints", "(", "projmat_i", ",", "projmat_j", ",", "pose2d_i", ".", "T", ",", "pose2d_j", ".", "T", ")", "\n", "pose3d_ij", "=", "pose3d_homo", "[", ":", "3", "]", "/", "pose3d_homo", "[", "3", "]", "\n", "poses3d", ".", "append", "(", "pose3d_ij", ")", "\n", "weight3d", ".", "append", "(", "(", "weight2d", "[", "i", "]", "+", "weight2d", "[", "j", "]", ")", "/", "2", ")", "\n", "this_error", "=", "0", "\n", "for", "camera", ",", "pk", "in", "zip", "(", "cameras", ",", "poses2d", ")", ":", "\n", "                ", "projmat_k", "=", "camera", ".", "P", "\n", "projected_pose_k_homo", "=", "projmat_k", "@", "pose3d_homo", "\n", "projected_pose_k", "=", "projected_pose_k_homo", "[", ":", "2", "]", "/", "(", "projected_pose_k_homo", "[", "2", "]", "+", "10e-6", ")", "\n", "this_error", "+=", "np", ".", "linalg", ".", "norm", "(", "projected_pose_k", ".", "T", "-", "pk", ")", "\n", "", "reproj_error", ".", "append", "(", "this_error", ")", "\n", "", "idx", "=", "np", ".", "argmin", "(", "reproj_error", ")", "\n", "", "pose3d", "=", "poses3d", "[", "idx", "]", "\n", "\n", "return", "pose3d", ".", "T", ",", "weight3d", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.hybrid_pose_kernel": [[33, 63], ["numpy.zeros", "range", "len", "len", "numpy.log10", "construction.getskel", "construction.getPictoStruct", "construction.inferPict3D_MaxProd", "numpy.array", "numpy.zeros", "len", "len", "range", "numpy.array", "construction.load_distribution", "len", "cv2.triangulatePoints", "numpy.ones", "zip", "len", "range", "len"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.getskel", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.getPictoStruct", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.inferPict3D_MaxProd", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.load_distribution"], ["", "def", "hybrid_pose_kernel", "(", "cameras", ",", "poses2d", ",", "joint_num", ")", ":", "\n", "    ", "if", "len", "(", "poses2d", ")", "<", "2", ":", "\n", "        ", "return", "\n", "\n", "", "candidates", "=", "np", ".", "zeros", "(", "(", "joint_num", ",", "len", "(", "poses2d", ")", "*", "(", "len", "(", "poses2d", ")", "-", "1", ")", "//", "2", ",", "3", ")", ")", "\n", "cnt", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "poses2d", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "poses2d", ")", ")", ":", "\n", "            ", "projmat_i", ",", "projmat_j", "=", "cameras", "[", "i", "]", ".", "P", ",", "cameras", "[", "j", "]", ".", "P", "\n", "pose2d_i", ",", "pose2d_j", "=", "poses2d", "[", "i", "]", ",", "poses2d", "[", "j", "]", "\n", "pose3d_homo", "=", "cv2", ".", "triangulatePoints", "(", "projmat_i", ",", "projmat_j", ",", "pose2d_i", ".", "T", ",", "pose2d_j", ".", "T", ")", "\n", "pose3d_ij", "=", "pose3d_homo", "[", ":", "3", "]", "/", "pose3d_homo", "[", "3", "]", "\n", "candidates", "[", ":", ",", "cnt", "]", "+=", "pose3d_ij", ".", "T", "\n", "cnt", "+=", "1", "\n", "\n", "", "", "joint_num", "=", "len", "(", "candidates", ")", "\n", "point_num", "=", "len", "(", "candidates", "[", "0", "]", ")", "\n", "unary", "=", "np", ".", "log10", "(", "np", ".", "ones", "(", "(", "joint_num", ",", "point_num", ")", ")", "*", "10e-6", ")", "\n", "coco_2_skel", "=", "[", "0", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", "]", "\n", "candidates", "=", "np", ".", "array", "(", "candidates", ")", "[", "coco_2_skel", "]", "\n", "unary", "=", "unary", "[", "coco_2_skel", "]", "\n", "skel", "=", "getskel", "(", ")", "\n", "edges", "=", "getPictoStruct", "(", "skel", ",", "load_distribution", "(", "'Unified'", ")", ")", "\n", "xp", "=", "inferPict3D_MaxProd", "(", "unary", ",", "edges", ",", "candidates", ")", "\n", "human", "=", "np", ".", "array", "(", "[", "candidates", "[", "i", "]", "[", "j", "]", "for", "i", ",", "j", "in", "zip", "(", "range", "(", "xp", ".", "shape", "[", "0", "]", ")", ",", "xp", ")", "]", ")", "\n", "human_coco", "=", "np", ".", "zeros", "(", "(", "17", ",", "3", ")", ")", "\n", "human_coco", "[", "[", "0", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", "]", "]", "=", "human", "\n", "human_coco", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", "]", "=", "human_coco", "[", "0", "]", "\n", "\n", "return", "human_coco", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.SVD_pose_kernel": [[64, 88], ["enumerate", "zip", "enumerate", "numpy.multiply", "numpy.svd", "numpy.transpose", "numpy.transpose", "pose3d.append", "len", "pose3d.append", "C.append", "W.append", "C.append", "W.append", "numpy.array().reshape", "numpy.array", "math.exp", "numpy.norm", "math.exp", "numpy.norm", "numpy.array"], "function", ["None"], ["", "def", "SVD_pose_kernel", "(", "cameras", ",", "Ts", ",", "joints", ",", "remains", ",", "lambda_t", ",", "next_pose", "=", "None", ")", ":", "\n", "    ", "pose3d", "=", "[", "]", "\n", "for", "jid", ",", "(", "joint", ",", "remain", ")", "in", "enumerate", "(", "zip", "(", "joints", ",", "remains", ")", ")", ":", "\n", "        ", "if", "len", "(", "remain", ")", "<=", "1", ":", "\n", "            ", "pose3d", ".", "append", "(", "np", ".", "array", "(", "[", "None", ",", "None", ",", "None", "]", ")", "if", "next_pose", "is", "None", "else", "next_pose", "[", "jid", "]", ")", "\n", "continue", "\n", "\n", "", "C", "=", "[", "]", "\n", "W", "=", "[", "]", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "remain", ")", ":", "\n", "            ", "x", "=", "joint", "[", "j", "]", "[", "0", "]", "\n", "y", "=", "joint", "[", "j", "]", "[", "1", "]", "\n", "P", "=", "cameras", "[", "j", "]", ".", "P", "\n", "C", ".", "append", "(", "y", "*", "P", "[", "2", "]", "-", "P", "[", "0", "]", ")", "\n", "W", ".", "append", "(", "exp", "(", "-", "lambda_t", "*", "Ts", "[", "j", "]", ")", "/", "la", ".", "norm", "(", "C", "[", "2", "*", "i", "]", ")", ")", "\n", "C", ".", "append", "(", "x", "*", "P", "[", "2", "]", "-", "P", "[", "1", "]", ")", "\n", "W", ".", "append", "(", "exp", "(", "-", "lambda_t", "*", "Ts", "[", "j", "]", ")", "/", "la", ".", "norm", "(", "C", "[", "2", "*", "i", "+", "1", "]", ")", ")", "\n", "", "A", "=", "np", ".", "multiply", "(", "np", ".", "array", "(", "W", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "C", ")", "\n", "U", ",", "sigma", ",", "VT", "=", "la", ".", "svd", "(", "A", ")", "\n", "V", "=", "np", ".", "transpose", "(", "VT", ")", "\n", "X", "=", "np", ".", "transpose", "(", "V", "[", ":", ",", "-", "1", "]", ")", "\n", "X", "/=", "X", "[", "3", "]", "\n", "pose3d", ".", "append", "(", "X", "[", ":", "3", "]", ")", "\n", "", "return", "pose3d", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.SVD_pose_kernel_jf": [[89, 115], ["zip", "numpy.concatenate", "numpy.zeros", "enumerate", "numpy.flip", "numpy.multiply", "numpy.repeat", "numpy.multiply().reshape", "np.concatenate.append", "np.flip.reshape", "numpy.repeat", "numpy.tile", "numpy.linalg.norm().reshape", "len", "[].reshape", "numpy.svd", "numpy.transpose", "math.exp", "numpy.multiply", "len", "X[].reshape", "len", "numpy.linalg.norm", "np.repeat.reshape"], "function", ["None"], ["", "def", "SVD_pose_kernel_jf", "(", "cameras", ",", "Ts", ",", "pose_mat", ",", "lambda_t", ",", "remains", ",", "joints_views", ",", "next_pose", "=", "None", ")", ":", "\n", "    ", "A", "=", "[", "]", "\n", "for", "camera", ",", "poses", ",", "T", "in", "zip", "(", "cameras", ",", "pose_mat", ",", "Ts", ")", ":", "\n", "        ", "poses", "=", "np", ".", "flip", "(", "poses", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", "\n", "C", "=", "np", ".", "multiply", "(", "poses", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "np", ".", "repeat", "(", "[", "camera", ".", "P", "[", "2", "]", "]", ",", "poses", ".", "size", ",", "0", ")", ")", "\n", "C", "=", "C", "-", "np", ".", "tile", "(", "camera", ".", "P", "[", ":", "2", "]", ",", "(", "len", "(", "poses", ")", ",", "1", ")", ")", "\n", "C", "=", "C", "/", "np", ".", "linalg", ".", "norm", "(", "C", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "W", "=", "np", ".", "repeat", "(", "[", "exp", "(", "-", "lambda_t", "*", "T", ")", "]", ",", "poses", ".", "size", ",", "0", ")", "\n", "A_", "=", "np", ".", "multiply", "(", "W", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "C", ")", ".", "reshape", "(", "-", "1", ",", "2", ",", "4", ")", "\n", "A", ".", "append", "(", "A_", ")", "\n", "", "A", "=", "np", ".", "concatenate", "(", "A", ",", "axis", "=", "1", ")", "\n", "\n", "pose3d", "=", "np", ".", "zeros", "(", "(", "17", ",", "3", ")", ")", "\n", "remains", "=", "remains", "==", "1", "\n", "for", "i", ",", "views", "in", "enumerate", "(", "joints_views", ")", ":", "\n", "        ", "if", "len", "(", "views", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "if", "i", "==", "0", ":", "\n", "            ", "pose3d", "[", "views", "]", "=", "next_pose", "[", "views", "]", "\n", "", "else", ":", "\n", "            ", "A_", "=", "A", "[", "views", "]", "[", "remains", "[", "views", "]", "]", ".", "reshape", "(", "len", "(", "views", ")", ",", "-", "1", ",", "4", ")", "\n", "U", ",", "sigma", ",", "VT", "=", "la", ".", "svd", "(", "A_", ")", "\n", "V", "=", "np", ".", "transpose", "(", "VT", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "X", "=", "V", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "pose3d", "[", "views", "]", "=", "X", "[", ":", ",", ":", "3", "]", "/", "X", "[", ":", ",", "3", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "", "return", "pose3d", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.SVD_pose_kernel_parallel": [[116, 132], ["zip", "numpy.concatenate", "numpy.svd", "numpy.transpose", "numpy.flip", "numpy.multiply", "numpy.repeat", "numpy.multiply().reshape", "np.concatenate.append", "X[].reshape", "np.flip.reshape", "numpy.repeat", "numpy.tile", "numpy.linalg.norm().reshape", "math.exp", "numpy.multiply", "len", "numpy.linalg.norm", "np.repeat.reshape"], "function", ["None"], ["", "def", "SVD_pose_kernel_parallel", "(", "cameras", ",", "Ts", ",", "pose_mat", ",", "lambda_t", ")", ":", "\n", "    ", "A", "=", "[", "]", "\n", "for", "camera", ",", "poses", ",", "T", "in", "zip", "(", "cameras", ",", "pose_mat", ",", "Ts", ")", ":", "\n", "        ", "poses", "=", "np", ".", "flip", "(", "poses", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", "\n", "C", "=", "np", ".", "multiply", "(", "poses", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "np", ".", "repeat", "(", "[", "camera", ".", "P", "[", "2", "]", "]", ",", "poses", ".", "size", ",", "0", ")", ")", "\n", "C", "=", "C", "-", "np", ".", "tile", "(", "camera", ".", "P", "[", ":", "2", "]", ",", "(", "len", "(", "poses", ")", ",", "1", ")", ")", "\n", "C", "=", "C", "/", "np", ".", "linalg", ".", "norm", "(", "C", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "W", "=", "np", ".", "repeat", "(", "[", "exp", "(", "-", "lambda_t", "*", "T", ")", "]", ",", "poses", ".", "size", ",", "0", ")", "\n", "A_", "=", "np", ".", "multiply", "(", "W", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "C", ")", ".", "reshape", "(", "-", "1", ",", "2", ",", "4", ")", "\n", "A", ".", "append", "(", "A_", ")", "\n", "", "A", "=", "np", ".", "concatenate", "(", "A", ",", "axis", "=", "1", ")", "\n", "U", ",", "sigma", ",", "VT", "=", "la", ".", "svd", "(", "A", ")", "\n", "V", "=", "np", ".", "transpose", "(", "VT", ",", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "X", "=", "V", "[", ":", ",", ":", ",", "-", "1", "]", "\n", "pose3d", "=", "X", "[", ":", ",", ":", "3", "]", "/", "X", "[", ":", ",", "3", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "return", "pose3d", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.correct_limbs": [[133, 167], ["construction.test_distance", "construction.test_distance", "construction.test_distance", "construction.test_distance", "construction.test_distance", "construction.test_distance", "construction.test_distance", "construction.test_distance"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.test_distance", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.test_distance", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.test_distance", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.test_distance", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.test_distance", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.test_distance", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.test_distance", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.test_distance"], ["", "def", "correct_limbs", "(", "human", ",", "scale_to_mm", ")", ":", "\n", "# --- remove limbs with bad length ---", "\n", "    ", "ua_range", "=", "DEFAULT_SENSIBLE_LIMB_LENGTH", "[", "2", "]", "\n", "la_range", "=", "DEFAULT_SENSIBLE_LIMB_LENGTH", "[", "3", "]", "\n", "ul_range", "=", "DEFAULT_SENSIBLE_LIMB_LENGTH", "[", "7", "]", "\n", "ll_range", "=", "DEFAULT_SENSIBLE_LIMB_LENGTH", "[", "8", "]", "\n", "\n", "# check left arm", "\n", "if", "test_distance", "(", "human", ",", "scale_to_mm", ",", "5", ",", "6", ",", "*", "ua_range", ")", ":", "\n", "        ", "human", "[", "6", "]", "=", "None", "\n", "human", "[", "7", "]", "=", "None", "# we need to disable hand too", "\n", "", "elif", "test_distance", "(", "human", ",", "scale_to_mm", ",", "6", ",", "7", ",", "*", "la_range", ")", ":", "\n", "        ", "human", "[", "7", "]", "=", "None", "\n", "\n", "# check right arm", "\n", "", "if", "test_distance", "(", "human", ",", "scale_to_mm", ",", "2", ",", "3", ",", "*", "ua_range", ")", ":", "\n", "        ", "human", "[", "3", "]", "=", "None", "\n", "human", "[", "4", "]", "=", "None", "# we need to disable hand too", "\n", "", "elif", "test_distance", "(", "human", ",", "scale_to_mm", ",", "3", ",", "4", ",", "*", "la_range", ")", ":", "\n", "        ", "human", "[", "4", "]", "=", "None", "\n", "\n", "# check left leg", "\n", "", "if", "test_distance", "(", "human", ",", "scale_to_mm", ",", "11", ",", "12", ",", "*", "ua_range", ")", ":", "\n", "        ", "human", "[", "12", "]", "=", "None", "\n", "human", "[", "13", "]", "=", "None", "# we need to disable foot too", "\n", "", "elif", "test_distance", "(", "human", ",", "scale_to_mm", ",", "12", ",", "13", ",", "*", "la_range", ")", ":", "\n", "        ", "human", "[", "13", "]", "=", "None", "\n", "\n", "# check right leg", "\n", "", "if", "test_distance", "(", "human", ",", "scale_to_mm", ",", "8", ",", "9", ",", "*", "ua_range", ")", ":", "\n", "        ", "human", "[", "9", "]", "=", "None", "\n", "human", "[", "10", "]", "=", "None", "# we need to disable foot too", "\n", "", "elif", "test_distance", "(", "human", ",", "scale_to_mm", ",", "9", ",", "10", ",", "*", "la_range", ")", ":", "\n", "        ", "human", "[", "10", "]", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.test_distance": [[168, 187], ["numpy.norm"], "function", ["None"], ["", "", "def", "test_distance", "(", "human", ",", "scale_to_mm", ",", "jid1", ",", "jid2", ",", "lower", ",", "higher", ")", ":", "\n", "    ", "\"\"\"\n    :param human: [ (x, y, z) ] * J\n    :param scale_to_mm:\n    :param jid1:\n    :param jid2:\n    :param lower:\n    :param higher:\n    :return:\n    \"\"\"", "\n", "a", "=", "human", "[", "jid1", "]", "\n", "b", "=", "human", "[", "jid2", "]", "\n", "if", "a", "is", "None", "or", "b", "is", "None", ":", "\n", "        ", "return", "False", "\n", "", "distance", "=", "la", ".", "norm", "(", "a", "-", "b", ")", "*", "scale_to_mm", "\n", "if", "lower", "<=", "distance", "<=", "higher", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.getskel": [[188, 218], ["range"], "function", ["None"], ["", "", "def", "getskel", "(", ")", ":", "\n", "    ", "skel", "=", "{", "}", "\n", "skel", "[", "'tree'", "]", "=", "[", "{", "}", "for", "i", "in", "range", "(", "13", ")", "]", "\n", "skel", "[", "'tree'", "]", "[", "0", "]", "[", "'name'", "]", "=", "'Nose'", "\n", "skel", "[", "'tree'", "]", "[", "0", "]", "[", "'children'", "]", "=", "[", "1", ",", "2", ",", "7", ",", "8", "]", "\n", "skel", "[", "'tree'", "]", "[", "1", "]", "[", "'name'", "]", "=", "'LSho'", "\n", "skel", "[", "'tree'", "]", "[", "1", "]", "[", "'children'", "]", "=", "[", "3", "]", "\n", "skel", "[", "'tree'", "]", "[", "2", "]", "[", "'name'", "]", "=", "'RSho'", "\n", "skel", "[", "'tree'", "]", "[", "2", "]", "[", "'children'", "]", "=", "[", "4", "]", "\n", "skel", "[", "'tree'", "]", "[", "3", "]", "[", "'name'", "]", "=", "'LElb'", "\n", "skel", "[", "'tree'", "]", "[", "3", "]", "[", "'children'", "]", "=", "[", "5", "]", "\n", "skel", "[", "'tree'", "]", "[", "4", "]", "[", "'name'", "]", "=", "'RElb'", "\n", "skel", "[", "'tree'", "]", "[", "4", "]", "[", "'children'", "]", "=", "[", "6", "]", "\n", "skel", "[", "'tree'", "]", "[", "5", "]", "[", "'name'", "]", "=", "'LWri'", "\n", "skel", "[", "'tree'", "]", "[", "5", "]", "[", "'children'", "]", "=", "[", "]", "\n", "skel", "[", "'tree'", "]", "[", "6", "]", "[", "'name'", "]", "=", "'RWri'", "\n", "skel", "[", "'tree'", "]", "[", "6", "]", "[", "'children'", "]", "=", "[", "]", "\n", "skel", "[", "'tree'", "]", "[", "7", "]", "[", "'name'", "]", "=", "'LHip'", "\n", "skel", "[", "'tree'", "]", "[", "7", "]", "[", "'children'", "]", "=", "[", "9", "]", "\n", "skel", "[", "'tree'", "]", "[", "8", "]", "[", "'name'", "]", "=", "'RHip'", "\n", "skel", "[", "'tree'", "]", "[", "8", "]", "[", "'children'", "]", "=", "[", "10", "]", "\n", "skel", "[", "'tree'", "]", "[", "9", "]", "[", "'name'", "]", "=", "'LKne'", "\n", "skel", "[", "'tree'", "]", "[", "9", "]", "[", "'children'", "]", "=", "[", "11", "]", "\n", "skel", "[", "'tree'", "]", "[", "10", "]", "[", "'name'", "]", "=", "'RKne'", "\n", "skel", "[", "'tree'", "]", "[", "10", "]", "[", "'children'", "]", "=", "[", "12", "]", "\n", "skel", "[", "'tree'", "]", "[", "11", "]", "[", "'name'", "]", "=", "'LAnk'", "\n", "skel", "[", "'tree'", "]", "[", "11", "]", "[", "'children'", "]", "=", "[", "]", "\n", "skel", "[", "'tree'", "]", "[", "12", "]", "[", "'name'", "]", "=", "'RAnk'", "\n", "skel", "[", "'tree'", "]", "[", "12", "]", "[", "'children'", "]", "=", "[", "]", "\n", "return", "skel", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.load_distribution": [[219, 269], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "load_distribution", "(", "dataset", "=", "'Shelf'", ")", ":", "\n", "# please give a detailed description for \"distribution\"", "\n", "    ", "joints2edges", "=", "{", "(", "0", ",", "1", ")", ":", "0", ",", "\n", "(", "1", ",", "0", ")", ":", "0", ",", "\n", "(", "0", ",", "2", ")", ":", "1", ",", "\n", "(", "2", ",", "0", ")", ":", "1", ",", "\n", "(", "0", ",", "7", ")", ":", "2", ",", "\n", "(", "7", ",", "0", ")", ":", "2", ",", "\n", "(", "0", ",", "8", ")", ":", "3", ",", "\n", "(", "8", ",", "0", ")", ":", "3", ",", "\n", "(", "1", ",", "3", ")", ":", "4", ",", "\n", "(", "3", ",", "1", ")", ":", "4", ",", "\n", "(", "2", ",", "4", ")", ":", "5", ",", "\n", "(", "4", ",", "2", ")", ":", "5", ",", "\n", "(", "3", ",", "5", ")", ":", "6", ",", "\n", "(", "5", ",", "3", ")", ":", "6", ",", "\n", "(", "4", ",", "6", ")", ":", "7", ",", "\n", "(", "6", ",", "4", ")", ":", "7", ",", "\n", "(", "7", ",", "9", ")", ":", "8", ",", "\n", "(", "9", ",", "7", ")", ":", "8", ",", "\n", "(", "8", ",", "10", ")", ":", "9", ",", "\n", "(", "10", ",", "8", ")", ":", "9", ",", "\n", "(", "9", ",", "11", ")", ":", "10", ",", "\n", "(", "11", ",", "9", ")", ":", "10", ",", "\n", "(", "10", ",", "12", ")", ":", "11", ",", "\n", "(", "12", ",", "10", ")", ":", "11", "}", "\n", "\n", "distribution_dict", "=", "{", "\n", "'Shelf'", ":", "{", "'mean'", ":", "np", ".", "array", "(", "[", "0.30280354", ",", "0.30138756", ",", "0.79123502", ",", "0.79222949", ",", "0.28964179", ",", "\n", "0.30393598", ",", "0.24479075", ",", "0.24903801", ",", "0.40435882", ",", "0.39445121", ",", "\n", "0.3843522", ",", "0.38199836", "]", ")", ",", "\n", "'std'", ":", "np", ".", "array", "(", "[", "0.0376412", ",", "0.0304385", ",", "0.0368604", ",", "0.0350577", ",", "0.03475468", ",", "\n", "0.03876828", ",", "0.0353617", ",", "0.04009757", ",", "0.03974647", ",", "0.03696424", ",", "\n", "0.03008979", ",", "0.03143456", "]", ")", "*", "2", ",", "'joints2edges'", ":", "joints2edges", "\n", "}", ",", "\n", "'Campus'", ":", "{", "'mean'", ":", "np", ".", "array", "(", "[", "0.29567343", ",", "0.28090078", ",", "0.89299809", ",", "0.88799211", ",", "0.32651703", ",", "\n", "0.33454941", ",", "0.29043165", ",", "0.29932416", ",", "0.43846395", ",", "0.44881553", ",", "\n", "0.46952846", ",", "0.45528477", "]", ")", ",", "\n", "'std'", ":", "np", ".", "array", "(", "[", "0.01731019", ",", "0.0226062", ",", "0.06650426", ",", "0.06009805", ",", "0.04606478", ",", "\n", "0.04059899", ",", "0.05868499", ",", "0.06553948", ",", "0.04129285", ",", "0.04205624", ",", "\n", "0.03633746", ",", "0.02889456", "]", ")", "*", "2", ",", "'joints2edges'", ":", "joints2edges", "}", ",", "\n", "'Unified'", ":", "{", "'mean'", ":", "np", ".", "array", "(", "[", "0.29743698", ",", "0.28764493", ",", "0.86562234", ",", "0.86257052", ",", "0.31774172", ",", "\n", "0.32603399", ",", "0.27688682", ",", "0.28548218", ",", "0.42981244", ",", "0.43392589", ",", "\n", "0.44601327", ",", "0.43572195", "]", ")", ",", "\n", "'std'", ":", "np", ".", "array", "(", "[", "0.02486281", ",", "0.02611557", ",", "0.07588978", ",", "0.07094158", ",", "0.04725651", ",", "\n", "0.04132808", ",", "0.05556177", ",", "0.06311393", ",", "0.04445206", ",", "0.04843436", ",", "\n", "0.0510811", ",", "0.04460523", "]", ")", "*", "16", ",", "'joints2edges'", ":", "joints2edges", "}", "\n", "}", "\n", "\n", "return", "distribution_dict", "[", "dataset", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.getPictoStruct": [[277, 299], ["numpy.zeros", "range", "numpy.argsort", "range", "len", "len", "numpy.array", "range", "construction.Edge", "numpy.append", "numpy.delete", "numpy.array", "range", "len", "len"], "function", ["None"], ["", "", "def", "getPictoStruct", "(", "skel", ",", "distribution", ")", ":", "\n", "    ", "\"\"\"to get the pictorial structure\"\"\"", "\n", "graph", "=", "skel", "[", "'tree'", "]", "\n", "level", "=", "np", ".", "zeros", "(", "len", "(", "graph", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "graph", ")", ")", ":", "\n", "        ", "queue", "=", "np", ".", "array", "(", "graph", "[", "i", "]", "[", "'children'", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "j", "in", "range", "(", "queue", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "graph", "[", "queue", "[", "j", "]", "]", "[", "'parent'", "]", "=", "i", "\n", "", "while", "queue", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "            ", "level", "[", "queue", "[", "0", "]", "]", "=", "level", "[", "queue", "[", "0", "]", "]", "+", "1", "\n", "queue", "=", "np", ".", "append", "(", "queue", ",", "graph", "[", "queue", "[", "0", "]", "]", "[", "'children'", "]", ")", "\n", "queue", "=", "np", ".", "delete", "(", "queue", ",", "0", ")", "\n", "queue", "=", "np", ".", "array", "(", "queue", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "", "trans_order", "=", "np", ".", "argsort", "(", "-", "level", ")", "\n", "edges", "=", "[", "Edge", "(", ")", "for", "i", "in", "range", "(", "len", "(", "trans_order", ")", "-", "1", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "trans_order", ")", "-", "1", ")", ":", "\n", "        ", "edges", "[", "i", "]", ".", "child", "=", "trans_order", "[", "i", "]", "\n", "edges", "[", "i", "]", ".", "parent", "=", "graph", "[", "edges", "[", "i", "]", ".", "child", "]", "[", "'parent'", "]", "\n", "edge_id", "=", "distribution", "[", "'joints2edges'", "]", "[", "(", "edges", "[", "i", "]", ".", "child", ",", "edges", "[", "i", "]", ".", "parent", ")", "]", "\n", "edges", "[", "i", "]", ".", "bone_mean", "=", "distribution", "[", "'mean'", "]", "[", "edge_id", "]", "\n", "edges", "[", "i", "]", ".", "bone_std", "=", "distribution", "[", "'std'", "]", "[", "edge_id", "]", "\n", "", "return", "edges", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.get_prior": [[300, 310], ["numpy.linalg.norm", "numpy.abs", "scipy.stats.norm.sf"], "function", ["None"], ["", "def", "get_prior", "(", "i", ",", "n", ",", "p", ",", "j", ",", "edges", ",", "X", ")", ":", "\n", "    ", "\"\"\"calculate the probability p(si,sj)\"\"\"", "\n", "edges_2_joint", "[", "13", "]", "\n", "edges_2_joint", "[", ":", "]", "=", "[", "-", "1", ",", "8", ",", "9", ",", "4", ",", "5", ",", "0", ",", "1", ",", "10", ",", "11", ",", "6", ",", "7", ",", "2", ",", "3", "]", "\n", "bone_std", "=", "edges", "[", "edges_2_joint", "[", "i", "]", "]", ".", "bone_std", "\n", "bone_mean", "=", "edges", "[", "edges_2_joint", "[", "i", "]", "]", ".", "bone_mean", "\n", "distance", "=", "np", ".", "linalg", ".", "norm", "(", "X", "[", "i", "]", "[", "n", "]", "-", "X", "[", "p", "]", "[", "j", "]", ")", "\n", "relative_error", "=", "np", ".", "abs", "(", "distance", "-", "bone_mean", ")", "/", "bone_std", "\n", "prior", "=", "scipy", ".", "stats", ".", "norm", ".", "sf", "(", "relative_error", ")", "*", "2", "\n", "return", "prior", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.get_max": [[311, 323], ["numpy.zeros", "range", "numpy.max", "numpy.where", "construction.get_prior", "len", "numpy.max"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.get_prior"], ["", "def", "get_max", "(", "i", ",", "p", ",", "j", ",", "unary", ",", "candidateNum", ",", "edges", ",", "X", ")", ":", "\n", "    ", "unary_sum", "=", "np", ".", "zeros", "(", "candidateNum", ")", "\n", "for", "n", "in", "range", "(", "candidateNum", ")", ":", "\n", "        ", "prior", "=", "get_prior", "(", "i", ",", "n", ",", "p", ",", "j", ",", "edges", ",", "X", ")", "\n", "unary_sum", "[", "n", "]", "=", "prior", "+", "unary", "[", "i", "]", "[", "n", "]", "\n", "", "this_max", "=", "np", ".", "max", "(", "unary_sum", ")", "\n", "indextemp", "=", "np", ".", "where", "(", "unary_sum", "==", "np", ".", "max", "(", "unary_sum", ")", ")", "\n", "if", "len", "(", "indextemp", "[", "0", "]", ")", "==", "0", ":", "\n", "        ", "index", "=", "0", "\n", "", "else", ":", "\n", "        ", "index", "=", "indextemp", "[", "0", "]", "[", "0", "]", "\n", "", "return", "this_max", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.inferPict3D_MaxProd": [[324, 360], ["range", "numpy.zeros", "values.argmax", "range", "prange", "construction.get_max", "range", "c_sqrt", "c_exp"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.get_max"], ["", "def", "inferPict3D_MaxProd", "(", "unary", ",", "edges", ",", "X", ")", ":", "\n", "    ", "\"\"\"\n    To inference the pictorial structure in parallel\n    \"\"\"", "\n", "unary_c", "=", "unary", "\n", "X_c", "=", "X", "\n", "jointNum", "=", "unary", ".", "shape", "[", "0", "]", "\n", "candidateNum", "=", "unary", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "for", "curJoint", "in", "range", "(", "jointNum", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "parentJoint", "=", "get_pa", "[", "curJoint", "]", "\n", "for", "parentCandidate", "in", "prange", "(", "candidateNum", ",", "nogil", "=", "True", ")", ":", "\n", "            ", "maxUnary", "=", "-", "100000", "# very negative value", "\n", "for", "curCandidate", "in", "range", "(", "candidateNum", ")", ":", "\n", "# Begin of get prior", "\n", "                ", "bone_std", "=", "edges", "[", "edges2Joint", "[", "curJoint", "]", "]", ".", "bone_std", "\n", "bone_mean", "=", "edges", "[", "edges2Joint", "[", "curJoint", "]", "]", ".", "bone_mean", "\n", "distance", "=", "c_sqrt", "(", "(", "X_c", "[", "curJoint", "]", "[", "curCandidate", "]", "[", "0", "]", "-", "X_c", "[", "parentJoint", "]", "[", "parentCandidate", "]", "[", "0", "]", ")", "**", "2", "+", "\n", "(", "X_c", "[", "curJoint", "]", "[", "curCandidate", "]", "[", "1", "]", "-", "X_c", "[", "parentJoint", "]", "[", "parentCandidate", "]", "[", "1", "]", ")", "**", "2", "+", "\n", "(", "X_c", "[", "curJoint", "]", "[", "curCandidate", "]", "[", "2", "]", "-", "X_c", "[", "parentJoint", "]", "[", "parentCandidate", "]", "[", "2", "]", ")", "**", "2", ")", "\n", "# relative_error = (distance - bone_mean) / bone_std", "\n", "prior", "=", "c_exp", "(", "-", "(", "distance", "-", "bone_mean", ")", "**", "2", "/", "(", "2", "*", "bone_std", "**", "2", ")", ")", "/", "bone_std", "\n", "# end of get prior", "\n", "if", "prior", "+", "unary_c", "[", "curJoint", "]", "[", "curCandidate", "]", ">", "maxUnary", ":", "\n", "                    ", "maxUnary", "=", "prior", "+", "unary_c", "[", "curJoint", "]", "[", "curCandidate", "]", "\n", "", "", "unary_c", "[", "parentJoint", "]", "[", "parentCandidate", "]", "+=", "maxUnary", "\n", "# get the max index", "\n", "\n", "", "", "values", "=", "unary", "[", "0", "]", "\n", "xpk", "=", "np", ".", "zeros", "(", "unary", ".", "shape", "[", "0", "]", ",", "dtype", "=", "np", ".", "int64", ")", "# Also change from original implementation", "\n", "xpk", "[", "0", "]", "=", "values", ".", "argmax", "(", ")", "\n", "for", "curJoint", "in", "range", "(", "1", ",", "jointNum", ")", ":", "\n", "        ", "parentJoint", "=", "get_pa", "[", "curJoint", "]", "\n", "xn", "=", "get_max", "(", "curJoint", ",", "parentJoint", ",", "xpk", "[", "parentJoint", "]", ",", "unary", ",", "candidateNum", ",", "edges", ",", "X", ")", "\n", "xpk", "[", "curJoint", "]", "=", "xn", "[", "1", "]", "\n", "", "return", "xpk", "", "", ""]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.__init__.add_path": [[4, 7], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.__init__": [[11, 19], ["len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cam", ",", "pts", ",", "epi_threshold", "=", "40", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "self", ".", "joints", "=", "len", "(", "pts", ")", "\n", "self", ".", "pose3d", "=", "None", "\n", "self", ".", "poses", "=", "[", "pts", "]", "\n", "self", ".", "cams", "=", "[", "cam", "]", "\n", "self", ".", "threshold", "=", "epi_threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.size": [[20, 22], ["len"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "poses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.get_3dpose_jf": [[23, 45], ["matching.epipolar_affinity", "numpy.ones", "numpy.ones", "enumerate", "construction.SVD_pose_kernel_jf", "Ts.append", "range", "numpy.arange", "numpy.arange", "matching.Greedy_matching", "joints_views[].append", "range", "joints[].append", "len", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.epipolar_affinity", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.SVD_pose_kernel_jf", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.Greedy_matching"], ["", "def", "get_3dpose_jf", "(", "self", ",", "init_threshold", ",", "lambda_t", ")", ":", "\n", "        ", "Ts", "=", "[", "]", "\n", "joints", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "joints", ")", "]", "\n", "for", "pts", "in", "self", ".", "poses", ":", "\n", "            ", "Ts", ".", "append", "(", "0", ")", "\n", "for", "j", "in", "range", "(", "self", ".", "joints", ")", ":", "\n", "                ", "joints", "[", "j", "]", ".", "append", "(", "pts", "[", "j", "]", ")", "\n", "\n", "", "", "_", ",", "distances_mat", "=", "epipolar_affinity", "(", "self", ".", "cams", ",", "np", ".", "arange", "(", "len", "(", "self", ".", "cams", ")", ")", ",", "self", ".", "poses", ",", "num_joints", "=", "self", ".", "joints", ")", "\n", "distances_mat", "=", "1", "-", "distances_mat", "/", "init_threshold", "\n", "\n", "joints_views", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cams", ")", ")", "]", "\n", "binary_lists", "=", "np", ".", "ones", "(", "(", "self", ".", "joints", ",", "len", "(", "self", ".", "cams", ")", "*", "2", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "j", ",", "(", "joint", ")", "in", "enumerate", "(", "joints", ")", ":", "\n", "            ", "matched_list", ",", "binary_lists", "[", "j", "]", ",", "_", "=", "Greedy_matching", "(", "self", ".", "cams", ",", "affinity_mat", "=", "distances_mat", "[", ":", ",", ":", ",", "j", "]", ",", "mode", "=", "'init'", ")", "\n", "joints_views", "[", "len", "(", "matched_list", ")", "-", "1", "]", ".", "append", "(", "j", ")", "\n", "\n", "if", "len", "(", "matched_list", ")", "<", "2", ":", "\n", "                ", "return", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "False", "\n", "\n", "", "", "human3d", "=", "SVD_pose_kernel_jf", "(", "self", ".", "cams", ",", "Ts", ",", "self", ".", "poses", ",", "lambda_t", ",", "binary_lists", ",", "joints_views", ")", "\n", "return", "self", ".", "cams", ",", "self", ".", "poses", ",", "human3d", ",", "joints_views", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.get_3dpose": [[46, 52], ["list", "construction.SVD_pose_kernel_parallel", "hypothesis.Hypothesis.size", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.SVD_pose_kernel_parallel", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.size"], ["", "def", "get_3dpose", "(", "self", ",", "lambda_t", ")", ":", "\n", "        ", "assert", "self", ".", "size", "(", ")", ">", "1", "\n", "joints_views", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cams", ")", ")", "]", "\n", "joints_views", "[", "len", "(", "self", ".", "cams", ")", "-", "1", "]", "=", "list", "(", "range", "(", "self", ".", "joints", ")", ")", "\n", "SVD_pose_kernel_parallel", "(", "self", ".", "cams", ",", "Ts", ",", "self", ".", "poses", ",", "lambda_t", ")", "\n", "return", "self", ".", "cams", ",", "self", ".", "poses", ",", "human3d", ",", "joints_views", ",", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.calculate_cost": [[53, 69], ["zip", "matching.epipolar_distance", "numpy.mean", "numpy.mean", "len", "calculate.get_believe", "zip"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.epipolar_distance", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.get_believe"], ["", "def", "calculate_cost", "(", "self", ",", "o_cam", ",", "o_pose", ")", ":", "\n", "        ", "\"\"\"\n        :param o_pose: other poses * J\n        :param o_cam: other camera\n        :return:\n        \"\"\"", "\n", "veto", "=", "False", "# if true we cannot join {other} with this", "\n", "pose_cost", "=", "0", "\n", "for", "person", ",", "cam", "in", "zip", "(", "self", ".", "poses", ",", "self", ".", "cams", ")", ":", "\n", "            ", "distances", "=", "epipolar_distance", "(", "cam", ",", "person", ",", "o_cam", ",", "o_pose", ")", "\n", "p_cost", "=", "np", ".", "mean", "(", "[", "(", "dis", "[", "0", "]", "*", "j0", "[", "2", "]", "+", "dis", "[", "1", "]", "*", "j1", "[", "2", "]", ")", "/", "2", "for", "dis", ",", "j0", ",", "j1", ",", "in", "zip", "(", "distances", ",", "person", ",", "o_pose", ")", "]", ")", "/", "self", ".", "threshold", "\n", "pose_cost", "+=", "p_cost", "\n", "\n", "if", "p_cost", ">", "1", "and", "get_believe", "(", "o_pose", ")", ">", "0.5", ":", "\n", "                ", "veto", "=", "True", "\n", "", "", "return", "pose_cost", "/", "len", "(", "self", ".", "poses", ")", ",", "veto", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.merge": [[70, 78], ["hypothesis.Hypothesis.cams.append", "hypothesis.Hypothesis.poses.append"], "methods", ["None"], ["", "def", "merge", "(", "self", ",", "o_cam", ",", "o_pose", ")", ":", "\n", "        ", "\"\"\" integrate {other} into our hypothesis\n        :param o_pose:\n        :param o_cam:\n        :return:\n        \"\"\"", "\n", "self", ".", "cams", ".", "append", "(", "o_cam", ")", "\n", "self", ".", "poses", ".", "append", "(", "o_pose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Person2d.__init__": [[80, 107], ["calculate.get_believe", "enumerate", "numpy.array", "numpy.array", "cam.undistort_points", "points2d.copy", "enumerate", "jids.append", "numpy.array.append"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.get_believe", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.Camera.undistort_points"], ["    ", "def", "__init__", "(", "self", ",", "cid", ",", "cam", ",", "points2d", ",", "noundistort", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param cid\n        :param cam: {Camera}\n        :param points2d: distorted points\n        :param noundistort: if True do not undistort\n        \"\"\"", "\n", "self", ".", "cid", "=", "cid", "\n", "self", ".", "cam", "=", "cam", "\n", "self", ".", "believe", "=", "get_believe", "(", "points2d", ")", "\n", "\n", "if", "noundistort", ":", "\n", "            ", "self", ".", "points2d", "=", "points2d", "\n", "", "else", ":", "\n", "# ~~~ undistort ~~~", "\n", "            ", "valid_points2d", "=", "[", "]", "\n", "jids", "=", "[", "]", "\n", "for", "jid", ",", "pt2d", "in", "enumerate", "(", "points2d", ")", ":", "\n", "                ", "if", "pt2d", "[", "0", "]", "<", "0", ":", "\n", "                    ", "continue", "\n", "", "jids", ".", "append", "(", "jid", ")", "\n", "valid_points2d", ".", "append", "(", "pt2d", ")", "\n", "", "valid_points2d", "=", "np", ".", "array", "(", "valid_points2d", ",", "np", ".", "float32", ")", "\n", "points2d_undist", "=", "cam", ".", "undistort_points", "(", "valid_points2d", ")", "\n", "self", ".", "points2d", "=", "points2d", ".", "copy", "(", ")", "\n", "for", "idx", ",", "jid", "in", "enumerate", "(", "jids", ")", ":", "\n", "                ", "self", ".", "points2d", "[", "jid", "]", "=", "points2d_undist", "[", "idx", "]", "\n", "# ~~~~~~~~~~~~~~~~~~~~", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Person2d.__len__": [[109, 111], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "points2d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Person2d.triangulate": [[112, 152], ["len", "range", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "len", "len", "len", "cv2.triangulatePoints", "numpy.transpose", "numpy.transpose", "numpy.array", "numpy.array", "zip", "numpy.array", "numpy.array", "numpy.transpose.append", "numpy.transpose.append", "jids.append", "W1.append", "W2.append", "min"], "methods", ["None"], ["", "def", "triangulate", "(", "self", ",", "other", ")", ":", "\n", "        ", "\"\"\"\n        :param other: {Person2d}\n        :return:\n        \"\"\"", "\n", "Pts1", "=", "[", "]", "\n", "Pts2", "=", "[", "]", "\n", "jids", "=", "[", "]", "\n", "W1", "=", "[", "]", "\n", "W2", "=", "[", "]", "\n", "\n", "J", "=", "len", "(", "other", ")", "\n", "assert", "J", "==", "len", "(", "self", ".", "points2d", ")", "\n", "assert", "J", "==", "len", "(", "self", ")", "\n", "\n", "for", "jid", "in", "range", "(", "J", ")", ":", "\n", "            ", "if", "self", ".", "points2d", "[", "jid", ",", "2", "]", ">", "0", "and", "other", ".", "points2d", "[", "jid", ",", "2", "]", ">", "0", ":", "\n", "                ", "Pts1", ".", "append", "(", "[", "self", ".", "points2d", "[", "jid", ",", "1", "]", ",", "self", ".", "points2d", "[", "jid", ",", "0", "]", "]", ")", "\n", "Pts2", ".", "append", "(", "[", "other", ".", "points2d", "[", "jid", ",", "1", "]", ",", "other", ".", "points2d", "[", "jid", ",", "0", "]", "]", ")", "\n", "jids", ".", "append", "(", "jid", ")", "\n", "W1", ".", "append", "(", "self", ".", "points2d", "[", "jid", ",", "2", "]", ")", "\n", "W2", ".", "append", "(", "other", ".", "points2d", "[", "jid", ",", "2", "]", ")", "\n", "\n", "", "", "Pts1", "=", "np", ".", "transpose", "(", "Pts1", ")", "\n", "Pts2", "=", "np", ".", "transpose", "(", "Pts2", ")", "\n", "\n", "Points3d", "=", "[", "None", "]", "*", "J", "\n", "w", "=", "[", "-", "1", "]", "*", "J", "\n", "if", "len", "(", "Pts1", ")", ">", "0", ":", "\n", "            ", "pose3d_homo", "=", "cv2", ".", "triangulatePoints", "(", "self", ".", "cam", ".", "P", ",", "other", ".", "cam", ".", "P", ",", "Pts1", ",", "Pts2", ")", "\n", "Pts3d", "=", "np", ".", "transpose", "(", "pose3d_homo", "[", ":", "3", "]", "/", "(", "pose3d_homo", "[", "3", "]", "+", "10e-6", ")", ")", "\n", "# \u4e0b\u9762\u662f\u7528\u4f86\u8abf\u6574pose axis", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "Pts3d", "=", "[", "R", "@", "i", "for", "i", "in", "Pts3d", "]", "\n", "\n", "for", "jid", ",", "pt3d", ",", "w1", ",", "w2", "in", "zip", "(", "jids", ",", "Pts3d", ",", "W1", ",", "W2", ")", ":", "\n", "                ", "Points3d", "[", "jid", "]", "=", "pt3d", "\n", "w", "[", "jid", "]", "=", "min", "(", "w1", ",", "w2", ")", "\n", "\n", "", "", "return", "Points3d", ",", "np", ".", "array", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.get_single_human3d": [[153, 181], ["len", "range", "len", "numpy.sum", "numpy.mean", "np.mean.append", "pts3d.append", "pts3d.append", "float", "float"], "function", ["None"], ["", "", "def", "get_single_human3d", "(", "humans3d", ")", ":", "\n", "    ", "J", "=", "len", "(", "humans3d", "[", "0", "]", "[", "0", "]", ")", "\n", "total_cost", "=", "0", "\n", "count", "=", "0", "\n", "for", "person3d", "in", "humans3d", ":", "\n", "        ", "total_cost", "+=", "person3d", "[", "2", "]", "\n", "count", "+=", "1", "\n", "\n", "", "human3d", "=", "[", "None", "]", "*", "J", "# single 3d person", "\n", "weight3d", "=", "[", "None", "]", "*", "J", "\n", "for", "jid", "in", "range", "(", "J", ")", ":", "\n", "        ", "pts3d", "=", "[", "]", "\n", "w3d", "=", "[", "]", "\n", "for", "person3d", "in", "humans3d", ":", "\n", "            ", "if", "person3d", "[", "0", "]", "[", "jid", "]", "is", "not", "None", ":", "\n", "                ", "if", "count", "==", "1", ":", "\n", "                    ", "pts3d", ".", "append", "(", "person3d", "[", "0", "]", "[", "jid", "]", ")", "\n", "", "else", ":", "\n", "                    ", "pts3d", ".", "append", "(", "person3d", "[", "0", "]", "[", "jid", "]", "*", "float", "(", "(", "total_cost", "-", "person3d", "[", "2", "]", ")", ")", "/", "float", "(", "(", "total_cost", "*", "(", "count", "-", "1", ")", ")", ")", ")", "\n", "", "w3d", ".", "append", "(", "person3d", "[", "1", "]", "[", "jid", "]", ")", "\n", "\n", "", "", "if", "len", "(", "pts3d", ")", ">", "0", ":", "\n", "            ", "pt3d", "=", "np", ".", "sum", "(", "pts3d", ",", "axis", "=", "0", ")", "\n", "human3d", "[", "jid", "]", "=", "pt3d", "\n", "w3d", "=", "np", ".", "mean", "(", "w3d", ")", "\n", "weight3d", "[", "jid", "]", "=", "w3d", "\n", "\n", "", "", "return", "human3d", ",", "weight3d", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.evaluate.evaluate": [[17, 52], ["collections.namedtuple", "evaluate.calculate_pcp_for_limbs", "evaluate.calculate_pcp_for_limbs", "evaluate.calculate_pcp_for_limbs", "evaluate.calculate_pcp_for_limbs", "len", "len"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.evaluate.calculate_pcp_for_limbs", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.evaluate.calculate_pcp_for_limbs", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.evaluate.calculate_pcp_for_limbs", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.evaluate.calculate_pcp_for_limbs"], ["def", "evaluate", "(", "gt", ",", "d", ",", "alpha", ")", ":", "\n", "    ", "\"\"\"\n        percentage of correctly estimated parts.\n        This score only works on single-human estimations\n        and the 3d data must be transformed to fit the\n        KTH football2 data format (see {transform3d_from_mscoco})\n    :param gt: ground truth human\n    :param d: detection human\n    :param alpha: 0.5\n    :return:\n    \"\"\"", "\n", "assert", "len", "(", "gt", ")", "==", "14", "\n", "assert", "len", "(", "d", ")", "==", "14", "\n", "result", "=", "namedtuple", "(", "'Result'", ",", "[", "\n", "'upper_arms'", ",", "\n", "'lower_arms'", ",", "\n", "'lower_legs'", ",", "\n", "'upper_legs'", ",", "\n", "'all_parts'", "]", ")", "\n", "\n", "limbs", "=", "[", "(", "7", ",", "6", ")", ",", "(", "10", ",", "11", ")", "]", "# -- lower arms --", "\n", "result", ".", "lower_arms", "=", "calculate_pcp_for_limbs", "(", "alpha", ",", "d", ",", "gt", ",", "limbs", ")", "\n", "\n", "limbs", "=", "[", "(", "8", ",", "7", ")", ",", "(", "9", ",", "10", ")", "]", "# -- upper arms --", "\n", "result", ".", "upper_arms", "=", "calculate_pcp_for_limbs", "(", "alpha", ",", "d", ",", "gt", ",", "limbs", ")", "\n", "\n", "limbs", "=", "[", "(", "0", ",", "1", ")", ",", "(", "5", ",", "4", ")", "]", "# -- lower legs --", "\n", "result", ".", "lower_legs", "=", "calculate_pcp_for_limbs", "(", "alpha", ",", "d", ",", "gt", ",", "limbs", ")", "\n", "\n", "limbs", "=", "[", "(", "1", ",", "2", ")", ",", "(", "3", ",", "4", ")", "]", "# -- upper legs --", "\n", "result", ".", "upper_legs", "=", "calculate_pcp_for_limbs", "(", "alpha", ",", "d", ",", "gt", ",", "limbs", ")", "\n", "\n", "result", ".", "all_parts", "=", "(", "result", ".", "lower_arms", "+", "result", ".", "upper_arms", "+", "result", ".", "lower_legs", "+", "result", ".", "upper_legs", ")", "/", "4", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.evaluate.calculate_pcp_for_limbs": [[54, 77], ["numpy.norm", "numpy.norm", "numpy.norm", "len"], "function", ["None"], ["", "def", "calculate_pcp_for_limbs", "(", "alpha", ",", "d", ",", "gt", ",", "limbs", ")", ":", "\n", "    ", "\"\"\"\n        helper function\n    :param alpha:\n    :param d:\n    :param gt:\n    :param limbs:\n    :return:\n    \"\"\"", "\n", "val", "=", "0", "\n", "for", "a", ",", "b", "in", "limbs", ":", "\n", "        ", "s_hat", "=", "gt", "[", "a", "]", "\n", "s", "=", "d", "[", "a", "]", "\n", "e_hat", "=", "gt", "[", "b", "]", "\n", "e", "=", "d", "[", "b", "]", "\n", "if", "s", "is", "not", "None", "and", "e", "is", "not", "None", ":", "\n", "            ", "s_term", "=", "la", ".", "norm", "(", "s_hat", "-", "s", ")", "\n", "e_term", "=", "la", ".", "norm", "(", "e_hat", "-", "e", ")", "\n", "term", "=", "(", "s_term", "+", "e_term", ")", "/", "2", "\n", "alpha_term", "=", "alpha", "*", "la", ".", "norm", "(", "s_hat", "-", "e_hat", ")", "\n", "if", "term", "<=", "alpha_term", ":", "\n", "                ", "val", "+=", "1", "/", "len", "(", "limbs", ")", "\n", "", "", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.evaluate.transform3d_from_mscoco": [[79, 134], ["human_t.append", "len", "numpy.array", "numpy.mean", "len"], "function", ["None"], ["", "def", "transform3d_from_mscoco", "(", "humans", ")", ":", "\n", "    ", "\"\"\"\n        transforms the humans in the list from the mscoco\n        data structure to the kth football2 structure\n    :param humans: [ [ (x,y,z), ... ] * n_limbs ] * n_humans\n    :return:\n    \"\"\"", "\n", "# R_ANKLE       0", "\n", "# R_KNEE        1", "\n", "# R_HIP         2", "\n", "# L_HIP         3", "\n", "# L_KNEE        4", "\n", "# L_ANKLE       5", "\n", "# R_WRIST       6", "\n", "# R_ELBOW       7", "\n", "# R_SHOULDER    8", "\n", "# L_SHOULDER    9", "\n", "# L_ELBOW       10", "\n", "# L_WRIST       11", "\n", "# BOTTOM_HEAD   12", "\n", "# TOP_HEAD      13", "\n", "human_t", "=", "[", "]", "\n", "\n", "for", "human", "in", "humans", ":", "\n", "        ", "new_human", "=", "[", "None", "]", "*", "14", "\n", "new_human", "[", "0", "]", "=", "human", "[", "10", "]", "\n", "new_human", "[", "1", "]", "=", "human", "[", "9", "]", "\n", "new_human", "[", "2", "]", "=", "human", "[", "8", "]", "\n", "new_human", "[", "3", "]", "=", "human", "[", "11", "]", "\n", "new_human", "[", "4", "]", "=", "human", "[", "12", "]", "\n", "new_human", "[", "5", "]", "=", "human", "[", "13", "]", "\n", "new_human", "[", "6", "]", "=", "human", "[", "4", "]", "\n", "new_human", "[", "7", "]", "=", "human", "[", "3", "]", "\n", "new_human", "[", "8", "]", "=", "human", "[", "2", "]", "\n", "new_human", "[", "9", "]", "=", "human", "[", "5", "]", "\n", "new_human", "[", "10", "]", "=", "human", "[", "6", "]", "\n", "new_human", "[", "11", "]", "=", "human", "[", "7", "]", "\n", "new_human", "[", "12", "]", "=", "human", "[", "1", "]", "\n", "\n", "top_head", "=", "None", "\n", "nose", "=", "human", "[", "0", "]", "\n", "eyer", "=", "human", "[", "14", "]", "\n", "eyel", "=", "human", "[", "15", "]", "\n", "earr", "=", "human", "[", "16", "]", "\n", "earl", "=", "human", "[", "17", "]", "\n", "top_head_items", "=", "[", "elem", "for", "elem", "in", "[", "nose", ",", "eyel", ",", "eyer", ",", "earr", ",", "earl", "]", "\n", "if", "elem", "is", "not", "None", "]", "\n", "if", "len", "(", "top_head_items", ")", ">", "0", ":", "\n", "            ", "top_head_items", "=", "np", ".", "array", "(", "top_head_items", ")", "\n", "assert", "len", "(", "top_head_items", ".", "shape", ")", "==", "2", "\n", "top_head", "=", "np", ".", "mean", "(", "top_head_items", ",", "axis", "=", "0", ")", "\n", "", "new_human", "[", "13", "]", "=", "top_head", "\n", "human_t", ".", "append", "(", "new_human", ")", "\n", "\n", "", "return", "human_t", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.evaluate.proper_pcp_calc": [[136, 180], ["isinstance", "enumerate", "L_Arms.append", "U_Arms.append", "L_Legs.append", "U_Legs.append", "GTIDs.append", "len", "evaluate.evaluate"], "function", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.evaluate.evaluate"], ["", "def", "proper_pcp_calc", "(", "Y", ",", "Humans", ")", ":", "\n", "    ", "alpha", "=", "0.5", "\n", "L_Arms", "=", "[", "]", "\n", "U_Arms", "=", "[", "]", "\n", "L_Legs", "=", "[", "]", "\n", "U_Legs", "=", "[", "]", "\n", "GTIDs", "=", "[", "]", "\n", "\n", "if", "isinstance", "(", "Y", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "if", "len", "(", "Y", ".", "shape", ")", "==", "4", ":", "# 1, N_PPL, J, 3", "\n", "# hack to work for UMPM", "\n", "            ", "assert", "Y", ".", "shape", "[", "0", "]", "==", "1", "\n", "Y", "=", "Y", "[", "0", "]", "\n", "\n", "", "", "for", "gtid", ",", "gt", "in", "enumerate", "(", "Y", ")", ":", "\n", "        ", "if", "gt", "is", "None", ":", "\n", "            ", "continue", "\n", "\n", "", "larms", "=", "0", "\n", "uarms", "=", "0", "\n", "llegs", "=", "0", "\n", "ulegs", "=", "0", "\n", "avg", "=", "0", "\n", "for", "d", "in", "Humans", ":", "\n", "            ", "r", "=", "evaluate", "(", "gt", ",", "d", ",", "alpha", ")", "\n", "larms_", "=", "r", ".", "lower_arms", "\n", "uarms_", "=", "r", ".", "upper_arms", "\n", "ulegs_", "=", "r", ".", "upper_legs", "\n", "llegs_", "=", "r", ".", "lower_legs", "\n", "avg_", "=", "(", "larms_", "+", "uarms_", "+", "ulegs_", "+", "llegs_", ")", "/", "4", "\n", "if", "avg_", ">", "avg", ":", "\n", "                ", "avg", "=", "avg_", "\n", "larms", "=", "larms_", "\n", "uarms", "=", "uarms_", "\n", "llegs", "=", "llegs_", "\n", "ulegs", "=", "ulegs_", "\n", "\n", "", "", "L_Arms", ".", "append", "(", "larms", ")", "\n", "U_Arms", ".", "append", "(", "uarms", ")", "\n", "L_Legs", ".", "append", "(", "llegs", ")", "\n", "U_Legs", ".", "append", "(", "ulegs", ")", "\n", "GTIDs", ".", "append", "(", "gtid", ")", "\n", "\n", "", "return", "L_Arms", ",", "U_Arms", ",", "L_Legs", ",", "U_Legs", ",", "GTIDs", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterativeTracker.__init__": [[36, 46], ["dict", "list", "set"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "cam_num", "=", "0", "\n", "self", ".", "conf_threshold", "=", "self", ".", "args", ".", "conf_threshold", "\n", "self", ".", "num_joints", "=", "self", ".", "args", ".", "num_joints", "\n", "self", ".", "epi_threshold", "=", "self", ".", "args", ".", "epi_threshold", "\n", "self", ".", "unmatched", "=", "dict", "(", ")", "\n", "self", ".", "tracks", "=", "list", "(", ")", "\n", "self", ".", "tracks_ids", "=", "set", "(", ")", "\n", "self", ".", "build3D", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterativeTracker.track_restart": [[47, 51], ["dict", "list", "set"], "methods", ["None"], ["", "def", "track_restart", "(", "self", ")", ":", "\n", "        ", "self", ".", "unmatched", "=", "dict", "(", ")", "\n", "self", ".", "tracks", "=", "list", "(", ")", "\n", "self", ".", "tracks_ids", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterativeTracker.init_target_GD": [[52, 114], ["IterativeTracker.IterativeTracker.unmatched.items", "enumerate", "enumerate", "len", "list", "numpy.array", "numpy.array", "IterativeTracker.IterativeTracker.unmatched.items", "IterativeTracker.IterativeTracker.unmatched.keys", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros_like().astype", "numpy.zeros_like().astype", "enumerate", "scipy.optimize.linear_sum_assignment", "set", "zip", "enumerate", "hyp.size", "hyp.get_3dpose_jf", "IterativeTracker.IterativeTracker.tracks.append", "IterativeTracker.IterativeTracker.tracks_ids.add", "calculate.get_believe", "list.append", "hypothesis.Hypothesis", "enumerate", "set.add", "len", "IterativeTracker.IterTrack", "numpy.zeros_like", "numpy.zeros_like", "hyp.calculate_cost", "H.append", "H[].merge", "H.append", "max", "hypothesis.Hypothesis", "hypothesis.Hypothesis"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.size", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.get_3dpose_jf", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.get_believe", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.calculate_cost", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.hypothesis.Hypothesis.merge"], ["", "def", "init_target_GD", "(", "self", ",", "time", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "unmatched", ".", "keys", "(", ")", ")", "<", "2", ":", "\n", "            ", "return", "\n", "\n", "", "for", "cid", ",", "value", "in", "self", ".", "unmatched", ".", "items", "(", ")", ":", "\n", "            ", "_detections", "=", "list", "(", ")", "\n", "for", "detection", "in", "value", "[", "'detections'", "]", ":", "\n", "                ", "if", "get_believe", "(", "detection", ")", ">", "self", ".", "conf_threshold", ":", "\n", "                    ", "_detections", ".", "append", "(", "detection", ")", "\n", "", "", "value", "[", "'detections'", "]", "=", "np", ".", "array", "(", "_detections", ")", "\n", "\n", "", "H", "=", "[", "]", "\n", "for", "idx", ",", "(", "key", ",", "value", ")", "in", "enumerate", "(", "self", ".", "unmatched", ".", "items", "(", ")", ")", ":", "\n", "            ", "if", "idx", "==", "0", ":", "\n", "                ", "H", "=", "[", "Hypothesis", "(", "value", "[", "'camera'", "]", ",", "detection", ",", "self", ".", "epi_threshold", ")", "for", "detection", "in", "value", "[", "'detections'", "]", "]", "\n", "", "else", ":", "\n", "                ", "n_hyp", "=", "len", "(", "H", ")", "\n", "n_det", "=", "len", "(", "value", "[", "'detections'", "]", ")", "\n", "C", "=", "np", ".", "zeros", "(", "(", "n_hyp", ",", "n_det", ")", ")", "\n", "Mask", "=", "np", ".", "zeros_like", "(", "C", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n", "for", "hid", ",", "hyp", "in", "enumerate", "(", "H", ")", ":", "\n", "                    ", "for", "pid", ",", "detection", "in", "enumerate", "(", "value", "[", "'detections'", "]", ")", ":", "\n", "                        ", "pose_cost", ",", "veto", "=", "hyp", ".", "calculate_cost", "(", "value", "[", "'camera'", "]", ",", "detection", ")", "\n", "C", "[", "hid", ",", "pid", "]", "=", "pose_cost", "\n", "if", "veto", ":", "\n", "                            ", "Mask", "[", "hid", ",", "pid", "]", "=", "1", "\n", "", "", "", "rows", ",", "cols", "=", "linear_sum_assignment", "(", "C", ")", "\n", "handled_pids", "=", "set", "(", ")", "\n", "for", "hid", ",", "pid", "in", "zip", "(", "rows", ",", "cols", ")", ":", "\n", "                    ", "is_masked", "=", "Mask", "[", "hid", ",", "pid", "]", "==", "1", "\n", "handled_pids", ".", "add", "(", "pid", ")", "\n", "if", "is_masked", ":", "\n", "                        ", "H", ".", "append", "(", "\n", "Hypothesis", "(", "\n", "value", "[", "'camera'", "]", ",", "\n", "value", "[", "'detections'", "]", "[", "pid", "]", ",", "\n", "self", ".", "epi_threshold", ")", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "H", "[", "hid", "]", ".", "merge", "(", "value", "[", "'camera'", "]", ",", "value", "[", "'detections'", "]", "[", "pid", "]", ")", "\n", "\n", "", "", "for", "pid", ",", "detection", "in", "enumerate", "(", "value", "[", "'detections'", "]", ")", ":", "\n", "                    ", "if", "pid", "not", "in", "handled_pids", ":", "\n", "                        ", "H", ".", "append", "(", "\n", "Hypothesis", "(", "\n", "value", "[", "'camera'", "]", ",", "\n", "value", "[", "'detections'", "]", "[", "pid", "]", ",", "\n", "self", ".", "epi_threshold", ")", "\n", ")", "\n", "", "", "", "", "for", "hid", ",", "hyp", "in", "enumerate", "(", "H", ")", ":", "\n", "            ", "if", "hyp", ".", "size", "(", ")", ">", "1", ":", "\n", "# cameras, poses2d, pose3d, joints_views, succeed = hyp.get_3dpose(self.args.lambda_t)", "\n", "                ", "cameras", ",", "poses2d", ",", "pose3d", ",", "joints_views", ",", "succeed", "=", "hyp", ".", "get_3dpose_jf", "(", "self", ".", "args", ".", "init_threshold", ",", "self", ".", "args", ".", "lambda_t", ")", "\n", "if", "not", "succeed", ":", "\n", "                    ", "continue", "\n", "", "if", "len", "(", "self", ".", "tracks_ids", ")", "==", "0", ":", "\n", "                    ", "track_id", "=", "0", "\n", "", "else", ":", "\n", "                    ", "track_id", "=", "max", "(", "self", ".", "tracks_ids", ")", "+", "1", "\n", "", "self", ".", "tracks", ".", "append", "(", "IterTrack", "(", "track_id", ",", "time", ",", "cameras", ",", "poses2d", ",", "pose3d", ",", "joints_views", ",", "self", ".", "args", ",", "self", ".", "build3D", ")", ")", "\n", "self", ".", "tracks_ids", ".", "add", "(", "track_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterativeTracker.tracking": [[115, 181], ["len", "zip", "time.time", "time.time", "track.add_age", "tracks_pose.append", "tracks_time_interval.append", "len", "len", "track.update", "time.time", "eval", "time.time", "time.time", "camera.projectPoints_parallel", "numpy.array", "numpy.array", "numpy.repeat", "numpy.repeat", "numpy.tile", "numpy.tile", "numpy.linalg.norm().reshape", "numpy.linalg.norm().reshape", "numpy.transpose", "numpy.transpose", "scipy.optimize.linear_sum_assignment", "set", "zip", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.delete", "numpy.array", "numpy.array", "numpy.transpose", "numpy.transpose", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "time.time", "list", "list", "track.is_deleted", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.exp", "numpy.exp", "numpy.isnan", "numpy.isnan", "IterativeTracker.IterativeTracker.tracks[].add_pose", "set.add", "match_ids.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.add_age", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.update", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.Camera.projectPoints_parallel", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.is_deleted", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.add_pose"], ["", "", "", "def", "tracking", "(", "self", ",", "frame_id", ",", "camera_list", ",", "frame_list", ",", "boxes_list", ",", "detections_list", ",", "build3D", "=", "'TopDown'", ")", ":", "\n", "        ", "\"\"\"\n        :param calib_per_frame: [ [cam1, ... ], ... ] * frames\n        :param poses_per_frame: [ [pose1, ...], ... ] * frames\n        :return:\n        \"\"\"", "\n", "self", ".", "frame_list", "=", "frame_list", "\n", "self", ".", "build3D", "=", "build3D", "\n", "self", ".", "cam_num", "=", "len", "(", "camera_list", ")", "\n", "tracks_pose", "=", "[", "]", "\n", "tracks_time_interval", "=", "[", "]", "\n", "for", "track", "in", "self", ".", "tracks", ":", "\n", "            ", "track", ".", "add_age", "(", ")", "\n", "tracks_pose", ".", "append", "(", "track", ".", "poses3d", "[", "-", "1", "]", "[", "'pose3d'", "]", ")", "\n", "tracks_time_interval", ".", "append", "(", "frame_id", "-", "track", ".", "poses3d", "[", "-", "1", "]", "[", "'time'", "]", ")", "\n", "\n", "", "asso_time", "=", "0", "\n", "for", "camera", ",", "boxes", ",", "detections", "in", "zip", "(", "camera_list", ",", "boxes_list", ",", "detections_list", ")", ":", "\n", "            ", "n", "=", "len", "(", "self", ".", "tracks", ")", "\n", "m", "=", "len", "(", "detections", ")", "\n", "if", "n", ">", "0", "and", "m", ">", "0", ":", "\n", "                ", "start", "=", "t", ".", "time", "(", ")", "\n", "tracks_reprojection", "=", "camera", ".", "projectPoints_parallel", "(", "np", ".", "array", "(", "tracks_pose", ")", ")", "\n", "detections", "=", "np", ".", "array", "(", "detections", ")", "\n", "Ts", "=", "np", ".", "repeat", "(", "tracks_reprojection", ",", "m", ",", "0", ")", "\n", "Ds", "=", "np", ".", "tile", "(", "detections", "[", ":", ",", ":", ",", ":", "2", "]", ",", "(", "n", ",", "1", ",", "1", ")", ")", "\n", "\n", "costs_2d", "=", "np", ".", "linalg", ".", "norm", "(", "Ts", "-", "Ds", ",", "axis", "=", "2", ")", ".", "reshape", "(", "n", ",", "m", ",", "-", "1", ")", "\n", "costs_2d", "=", "1", "-", "np", ".", "transpose", "(", "costs_2d", ".", "T", "/", "(", "self", ".", "args", ".", "alpha2d", "*", "np", ".", "array", "(", "tracks_time_interval", ")", ")", ")", "\n", "\n", "remain", "=", "np", ".", "sum", "(", "costs_2d", ">", "0", ",", "axis", "=", "2", ")", ">", "10", "# Shelf 10 Campus 14", "\n", "affinity_matrix", "=", "np", ".", "sum", "(", "costs_2d", ",", "where", "=", "costs_2d", ">", "0", ",", "axis", "=", "2", ")", "/", "np", ".", "sum", "(", "costs_2d", ">", "0", ",", "axis", "=", "2", ")", "\n", "affinity_matrix", "[", "~", "remain", "]", "=", "0", "\n", "affinity_matrix", "=", "np", ".", "transpose", "(", "affinity_matrix", ".", "T", "/", "np", ".", "exp", "(", "self", ".", "args", ".", "lambda_a", "*", "np", ".", "array", "(", "tracks_time_interval", ")", ")", ")", "\n", "affinity_matrix", "[", "np", ".", "isnan", "(", "affinity_matrix", ")", "]", "=", "0", "\n", "rows", ",", "cols", "=", "linear_sum_assignment", "(", "-", "affinity_matrix", ")", "\n", "asso_time", "+=", "t", ".", "time", "(", ")", "-", "start", "\n", "\n", "handled_pids", "=", "set", "(", ")", "\n", "match_ids", "=", "[", "]", "\n", "for", "tid", ",", "pid", "in", "zip", "(", "rows", ",", "cols", ")", ":", "\n", "                    ", "if", "affinity_matrix", "[", "tid", ",", "pid", "]", ">", "0", ":", "\n", "                        ", "detection", "=", "detections", "[", "pid", "]", "\n", "self", ".", "tracks", "[", "tid", "]", ".", "add_pose", "(", "camera", ",", "frame_id", ",", "detection", ")", "\n", "handled_pids", ".", "add", "(", "pid", ")", "\n", "match_ids", ".", "append", "(", "tid", ")", "\n", "\n", "\n", "", "", "detections", "=", "np", ".", "delete", "(", "detections", ",", "list", "(", "handled_pids", ")", ",", "axis", "=", "0", ")", "\n", "boxes", "=", "np", ".", "delete", "(", "boxes", ",", "list", "(", "handled_pids", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "unmatched", "[", "camera", ".", "cid", "]", "=", "{", "'camera'", ":", "camera", ",", "'time'", ":", "frame_id", ",", "'bboxes'", ":", "boxes", ",", "'detections'", ":", "detections", "}", "\n", "", "else", ":", "\n", "                ", "self", ".", "unmatched", "[", "camera", ".", "cid", "]", "=", "{", "'camera'", ":", "camera", ",", "'time'", ":", "frame_id", ",", "'bboxes'", ":", "boxes", ",", "'detections'", ":", "detections", "}", "\n", "\n", "", "", "start", "=", "t", ".", "time", "(", ")", "\n", "for", "track", "in", "self", ".", "tracks", ":", "\n", "            ", "track", ".", "update", "(", "frame_id", ")", "\n", "", "update_time", "=", "t", ".", "time", "(", ")", "-", "start", "\n", "\n", "start", "=", "t", ".", "time", "(", ")", "\n", "eval", "(", "'self.init_target_'", "+", "self", ".", "args", ".", "init_method", ")", "(", "frame_id", ")", "\n", "init_time", "=", "t", ".", "time", "(", ")", "-", "start", "\n", "\n", "self", ".", "tracks", "=", "[", "track", "for", "track", "in", "self", ".", "tracks", "if", "not", "track", ".", "is_deleted", "(", ")", "]", "\n", "\n", "return", "asso_time", ",", "update_time", ",", "init_time", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.__init__": [[183, 238], ["len", "IterativeTracker.IterTrack.init_poses2d", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "OneEuroFilter.OneEuroFilter.OneEuroFilter", "OneEuroFilter.OneEuroFilter.OneEuroFilter", "range", "OneEuroFilter.OneEuroFilter.OneEuroFilter", "OneEuroFilter.OneEuroFilter.OneEuroFilter", "OneEuroFilter.OneEuroFilter.OneEuroFilter", "range", "range"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.init_poses2d"], ["    ", "def", "__init__", "(", "self", ",", "track_id", ",", "time", ",", "cameras", ",", "poses2d", ",", "pose3d", ",", "joints_views", ",", "args", ",", "build3D", "=", "'SVD'", ")", ":", "\n", "# for campus w2d=0.4, alpha2d=25, w3d=0.6, alpha3d=0.1, lambda_a=5, lambda_t=10", "\n", "# for shelf and panoptic w2d=0.4, alpha2d=60, w3d=0.6, alpha3d=0.15, lambda_a=5, lambda_t=10", "\n", "# for 5FLobby w2d=0.4, alpha2d=70, w3d=0.6, alpha3d=0.25, lambda_a=3, lambda_t=5", "\n", "        ", "\"\"\"\n        :param track_id: track's id\n        :param hypothesis: 3d pose, included camera, 2d poses\n        :param z_axis: some datasets are rotated around one axis\n        :param max_age: maximum time hasn't been updated\n        :param n_init: a confirmed threshold that need to be updated\n        \"\"\"", "\n", "self", ".", "track_id", "=", "track_id", "\n", "self", ".", "hits", "=", "1", "\n", "self", ".", "age", "=", "1", "\n", "self", ".", "time_since_update", "=", "0", "\n", "self", ".", "already_update", "=", "False", "\n", "\n", "self", ".", "joints", "=", "len", "(", "pose3d", ")", "\n", "self", ".", "poses2d", "=", "self", ".", "init_poses2d", "(", "time", ",", "cameras", ",", "poses2d", ")", "\n", "self", ".", "poses3d", "=", "[", "{", "'time'", ":", "time", ",", "'pose3d'", ":", "np", ".", "array", "(", "pose3d", ")", ",", "'joints_views'", ":", "joints_views", "}", "]", "\n", "self", ".", "next_pose3d", "=", "np", ".", "array", "(", "pose3d", ")", "\n", "self", ".", "velocity_3d", "=", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", ",", "0.", "]", "for", "i", "in", "range", "(", "self", ".", "joints", ")", "]", ")", "\n", "\n", "self", ".", "state", "=", "TrackState", ".", "Tentative", "\n", "self", ".", "_n_init", "=", "args", ".", "n_init", "\n", "self", ".", "_max_age", "=", "args", ".", "max_age", "\n", "self", ".", "alpha2d", "=", "args", ".", "alpha2d", "\n", "self", ".", "alpha3d", "=", "args", ".", "alpha3d", "\n", "self", ".", "lambda_a", "=", "args", ".", "lambda_a", "\n", "self", ".", "lambda_t", "=", "args", ".", "lambda_t", "\n", "self", ".", "joint_threshold", "=", "args", ".", "joint_threshold", "\n", "self", ".", "sigma", "=", "args", ".", "sigma", "\n", "self", ".", "arm_sigma", "=", "args", ".", "arm_sigma", "\n", "self", ".", "build3D", "=", "build3D", "\n", "\n", "# initializing one euro filters for all the joints", "\n", "filter_config_2d", "=", "{", "\n", "'freq'", ":", "25", ",", "# system frequency about 25 Hz", "\n", "'mincutoff'", ":", "1.7", ",", "# value refer to the paper", "\n", "'beta'", ":", "0.3", ",", "# value refer to the paper", "\n", "'dcutoff'", ":", "0.4", "# not mentioned, empirically set", "\n", "}", "\n", "filter_config_3d", "=", "{", "\n", "'freq'", ":", "25", ",", "# system frequency about 25 Hz", "\n", "'mincutoff'", ":", "0.8", ",", "# value refer to the paper", "\n", "'beta'", ":", "0.4", ",", "# value refer to the paper", "\n", "'dcutoff'", ":", "0.4", "# not mentioned, empirically set", "\n", "}", "\n", "self", ".", "filter_2d", "=", "[", "(", "OneEuroFilter", "(", "**", "filter_config_2d", ")", ",", "\n", "OneEuroFilter", "(", "**", "filter_config_2d", ")", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "joints", ")", "]", "\n", "self", ".", "filter_3d", "=", "[", "(", "OneEuroFilter", "(", "**", "filter_config_3d", ")", ",", "\n", "OneEuroFilter", "(", "**", "filter_config_3d", ")", ",", "\n", "OneEuroFilter", "(", "**", "filter_config_3d", ")", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "joints", ")", "]", "\n", "# Kalman Filter            ", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.init_poses2d": [[241, 247], ["dict", "zip", "dict.setdefault", "dict"], "methods", ["None"], ["", "def", "init_poses2d", "(", "self", ",", "time", ",", "cameras", ",", "poses2d", ")", ":", "\n", "        ", "init_poses2d", "=", "dict", "(", ")", "\n", "for", "cam", ",", "pose", "in", "zip", "(", "cameras", ",", "poses2d", ")", ":", "\n", "            ", "init_poses2d", ".", "setdefault", "(", "cam", ".", "cid", ",", "dict", "(", ")", ")", "\n", "init_poses2d", "[", "cam", ".", "cid", "]", "=", "{", "'time'", ":", "time", ",", "'camera'", ":", "cam", ",", "'pose'", ":", "pose", "}", "\n", "", "return", "init_poses2d", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.add_age": [[248, 252], ["None"], "methods", ["None"], ["", "def", "add_age", "(", "self", ")", ":", "\n", "        ", "self", ".", "already_update", "=", "False", "\n", "self", ".", "age", "+=", "1", "\n", "self", ".", "time_since_update", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.update": [[253, 265], ["IterativeTracker.IterTrack.update_3dpose", "IterativeTracker.IterTrack.update_motion", "IterativeTracker.IterTrack.mark_missed"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.update_3dpose", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.update_motion", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.mark_missed"], ["", "def", "update", "(", "self", ",", "time", ")", ":", "\n", "        ", "if", "self", ".", "update_3dpose", "(", "time", ")", ":", "\n", "\n", "            ", "self", ".", "update_motion", "(", "time", ")", "\n", "self", ".", "hits", "+=", "1", "\n", "self", ".", "time_since_update", "=", "0", "\n", "if", "self", ".", "state", "==", "TrackState", ".", "Tentative", "and", "self", ".", "hits", ">=", "self", ".", "_n_init", ":", "\n", "                ", "self", ".", "state", "=", "TrackState", ".", "Confirmed", "\n", "# for j in range(self.joints):", "\n", "#     self.next_pose3d[j] = self.kalman_3d[j].predict(self.poses3d[-1]['pose3d'][j])", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "mark_missed", "(", ")", "\n", "# for j in range(self.joints):", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.mark_missed": [[268, 275], ["None"], "methods", ["None"], ["", "", "def", "mark_missed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Mark this track as missed (no association at the current time step).\n        \"\"\"", "\n", "if", "self", ".", "state", "==", "TrackState", ".", "Tentative", "and", "not", "self", ".", "already_update", ":", "\n", "            ", "self", ".", "state", "=", "TrackState", ".", "Deleted", "\n", "", "elif", "self", ".", "time_since_update", ">=", "self", ".", "_max_age", ":", "\n", "            ", "self", ".", "state", "=", "TrackState", ".", "Deleted", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.is_tentative": [[276, 280], ["None"], "methods", ["None"], ["", "", "def", "is_tentative", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns True if this track is tentative (unconfirmed).\n        \"\"\"", "\n", "return", "self", ".", "state", "==", "TrackState", ".", "Tentative", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.is_confirmed": [[281, 284], ["None"], "methods", ["None"], ["", "def", "is_confirmed", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns True if this track is confirmed.\"\"\"", "\n", "return", "self", ".", "state", "==", "TrackState", ".", "Confirmed", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.is_deleted": [[285, 288], ["None"], "methods", ["None"], ["", "def", "is_deleted", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns True if this track is dead and should be deleted.\"\"\"", "\n", "return", "self", ".", "state", "==", "TrackState", ".", "Deleted", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.add_pose": [[289, 299], ["IterativeTracker.IterTrack.poses2d.setdefault", "dict"], "methods", ["None"], ["", "def", "add_pose", "(", "self", ",", "camera", ",", "time", ",", "pose", ")", ":", "\n", "        ", "\"\"\" add pose\n        :param pose:\n        :return:\n        \"\"\"", "\n", "if", "not", "self", ".", "already_update", ":", "\n", "            ", "self", ".", "already_update", "=", "True", "\n", "\n", "", "self", ".", "poses2d", ".", "setdefault", "(", "camera", ".", "cid", ",", "dict", "(", ")", ")", "\n", "self", ".", "poses2d", "[", "camera", ".", "cid", "]", "=", "{", "'time'", ":", "time", ",", "'camera'", ":", "camera", ",", "'pose'", ":", "pose", "}", "\n", "# self.poses2d.setdefault(camera.cid, list())", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.update_3dpose": [[305, 336], ["IterativeTracker.IterTrack.poses2d.values", "IterativeTracker.IterTrack.get_3dpose", "numpy.array", "numpy.array", "IterativeTracker.IterTrack.smooth_3dpose", "IterativeTracker.IterTrack.poses3d.append", "Ts.append", "cameras.append", "pose_mat.append", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.get_3dpose", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.smooth_3dpose"], ["", "def", "update_3dpose", "(", "self", ",", "time", ")", ":", "\n", "        ", "assert", "self", ".", "build3D", "==", "'SVD'", ",", "\"Please modify BUILD3D to SVD when PERSON_MATCHER == Iterative\"", "\n", "if", "not", "self", ".", "already_update", ":", "\n", "            ", "return", "False", "\n", "\n", "", "Ts", "=", "[", "]", "\n", "cameras", "=", "[", "]", "\n", "pose_mat", "=", "[", "]", "\n", "costs3d", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "poses", "in", "self", ".", "poses2d", ".", "values", "(", ")", ":", "\n", "            ", "time_interval", "=", "time", "-", "poses", "[", "'time'", "]", "\n", "if", "time_interval", "<=", "3", ":", "\n", "                ", "Ts", ".", "append", "(", "time_interval", ")", "\n", "cameras", ".", "append", "(", "poses", "[", "'camera'", "]", ")", "\n", "last_pose", "=", "poses", "[", "'pose'", "]", "\n", "pose_mat", ".", "append", "(", "last_pose", ")", "\n", "# costs3d.append(self.cost_to_3d(poses['camera'], time, poses['pose']))", "\n", "count", "+=", "1", "\n", "", "", "if", "count", "<", "2", ":", "\n", "            ", "return", "False", "\n", "\n", "", "pose3d", ",", "joints_views", ",", "succeed", "=", "self", ".", "get_3dpose", "(", "time", ",", "cameras", ",", "Ts", ",", "np", ".", "array", "(", "pose_mat", ")", ")", "#, np.array(costs3d))", "\n", "if", "succeed", ":", "\n", "            ", "pose3d", "=", "self", ".", "smooth_3dpose", "(", "time", ",", "np", ".", "array", "(", "pose3d", ")", ",", "self", ".", "sigma", ",", "self", ".", "arm_sigma", ")", "\n", "self", ".", "poses3d", ".", "append", "(", "{", "'time'", ":", "time", ",", "'pose3d'", ":", "pose3d", ",", "'joints_views'", ":", "joints_views", "}", ")", "\n", "if", "time", "-", "self", ".", "poses3d", "[", "0", "]", "[", "'time'", "]", ">", "self", ".", "_max_age", ":", "\n", "                ", "del", "self", ".", "poses3d", "[", "0", "]", "\n", "", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.get_3dpose": [[337, 370], ["matching.epipolar_affinity_parallel", "numpy.ones", "numpy.ones", "enumerate", "construction.SVD_pose_kernel_jf", "numpy.arange", "numpy.arange", "numpy.transpose", "numpy.transpose", "matching.Greedy_matching", "remains.append", "joints_views[].append", "len", "range", "len", "len", "len", "pose.reshape", "len"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.epipolar_affinity_parallel", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.construction.SVD_pose_kernel_jf", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.Greedy_matching"], ["", "", "def", "get_3dpose", "(", "self", ",", "time", ",", "cameras", ",", "Ts", ",", "pose_mat", ",", "costs3d", "=", "None", ")", ":", "\n", "        ", "last_pose3d_info", "=", "self", ".", "poses3d", "[", "-", "1", "]", "\n", "last_time", "=", "last_pose3d_info", "[", "'time'", "]", "\n", "last_pose3d", "=", "last_pose3d_info", "[", "'pose3d'", "]", "\n", "next_pose3d", "=", "last_pose3d", "+", "self", ".", "velocity_3d", "*", "(", "time", "-", "last_time", ")", "\n", "\n", "# start = t.time()", "\n", "# _, distances_mat = epipolar_affinity(cameras, np.arange(len(cameras)), pose_mat, num_joints=self.joints)", "\n", "_", ",", "distances_mat", "=", "epipolar_affinity_parallel", "(", "cameras", ",", "np", ".", "arange", "(", "len", "(", "cameras", ")", ")", ",", "pose_mat", ",", "num_joints", "=", "self", ".", "joints", ")", "\n", "distances_mat", "=", "1", "-", "distances_mat", "/", "self", ".", "joint_threshold", "\n", "# print('distances matrix:', t.time() - start)", "\n", "\n", "remains", "=", "[", "]", "\n", "fail_match", "=", "0", "\n", "# start = t.time()", "\n", "joints_views", "=", "[", "[", "]", "for", "i", "in", "range", "(", "len", "(", "cameras", ")", ")", "]", "\n", "binary_lists", "=", "np", ".", "ones", "(", "(", "self", ".", "joints", ",", "len", "(", "cameras", ")", "*", "2", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "j", ",", "pose", "in", "enumerate", "(", "np", ".", "transpose", "(", "pose_mat", ",", "(", "1", ",", "0", ",", "2", ")", ")", ")", ":", "\n", "# costs = costs3d[:,j]", "\n", "            ", "matched_list", ",", "binary_lists", "[", "j", "]", ",", "_", "=", "Greedy_matching", "(", "cameras", ",", "pose_mat", "=", "pose", ".", "reshape", "(", "-", "1", ",", "1", ",", "3", ")", ",", "affinity_mat", "=", "distances_mat", "[", ":", ",", ":", ",", "j", "]", ",", "next_pose", "=", "next_pose3d", "[", "j", "]", ")", "\n", "remains", ".", "append", "(", "matched_list", ")", "\n", "joints_views", "[", "len", "(", "matched_list", ")", "-", "1", "]", ".", "append", "(", "j", ")", "\n", "\n", "if", "len", "(", "matched_list", ")", "<", "2", ":", "\n", "                ", "fail_match", "+=", "1", "\n", "# print('joint filter:', t.time() - start)", "\n", "\n", "# start = t.time()", "\n", "# pose3d = SVD_pose_kernel(cameras, Ts, joints, remains, self.lambda_t, next_pose3d)", "\n", "", "", "pose3d", "=", "SVD_pose_kernel_jf", "(", "cameras", ",", "Ts", ",", "pose_mat", ",", "self", ".", "lambda_t", ",", "binary_lists", ",", "joints_views", ",", "next_pose3d", ")", "\n", "# pose3d = SVD_pose_kernel_parallel(cameras, Ts, pose_mat, self.lambda_t)", "\n", "# print('SVD:', t.time() - start)", "\n", "return", "pose3d", ",", "joints_views", ",", "False", "if", "fail_match", ">", "self", ".", "joints", "/", "3", "else", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.smooth_3dpose": [[371, 384], ["numpy.array", "numpy.array", "scipy.ndimage.filters.gaussian_filter1d", "scipy.ndimage.filters.gaussian_filter1d"], "methods", ["None"], ["", "def", "smooth_3dpose", "(", "self", ",", "time", ",", "pose3d", "=", "None", ",", "sigma", "=", "0.3", ",", "arm_sigma", "=", "0.8", ")", ":", "\n", "# One Euro Filter", "\n", "# for i in range(self.joints):", "\n", "#     pose3d[i][0] = self.filter_3d[i][0](pose3d[i][0], time)", "\n", "#     pose3d[i][1] = self.filter_3d[i][1](pose3d[i][1], time)", "\n", "#     pose3d[i][2] = self.filter_3d[i][2](pose3d[i][2], time)", "\n", "\n", "# gaussian filter", "\n", "        ", "poses3d", "=", "np", ".", "array", "(", "[", "p3d", "[", "'pose3d'", "]", "for", "p3d", "in", "self", ".", "poses3d", "]", "+", "[", "pose3d", "]", ")", "\n", "not_arm", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", "]", "\n", "pose3d", "[", "not_arm", "]", "=", "gaussian_filter1d", "(", "poses3d", "[", ":", ",", "not_arm", ",", ":", "]", ".", "T", ",", "sigma", "=", "sigma", ",", "mode", "=", "'reflect'", ")", "[", ":", ",", ":", ",", "-", "1", "]", ".", "T", "\n", "pose3d", "[", "[", "9", ",", "10", "]", "]", "=", "gaussian_filter1d", "(", "poses3d", "[", ":", ",", "[", "9", ",", "10", "]", ",", ":", "]", ".", "T", ",", "sigma", "=", "arm_sigma", ",", "mode", "=", "'reflect'", ")", "[", ":", ",", ":", ",", "-", "1", "]", ".", "T", "\n", "return", "pose3d", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.update_motion": [[385, 396], ["range", "numpy.mean", "numpy.mean", "len", "numpy.mean.append", "len", "len", "[].astype", "[].astype"], "methods", ["None"], ["", "def", "update_motion", "(", "self", ",", "time", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "poses3d", ")", "<", "2", ":", "\n", "            ", "return", "\n", "\n", "", "motions", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "self", ".", "poses3d", ")", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "            ", "motions", ".", "append", "(", "self", ".", "poses3d", "[", "idx", "]", "[", "'pose3d'", "]", ".", "astype", "(", "np", ".", "float32", ")", "-", "self", ".", "poses3d", "[", "idx", "-", "1", "]", "[", "'pose3d'", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "if", "len", "(", "motions", ")", ">", "4", ":", "\n", "                ", "break", "\n", "", "", "motions", "=", "np", ".", "mean", "(", "motions", ",", "axis", "=", "0", ")", "\n", "self", ".", "velocity_3d", "=", "motions", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.cost_to_last": [[397, 412], ["camera.projectPoints", "numpy.norm", "numpy.norm", "numpy.sum", "numpy.sum", "math.exp", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.src.ivclabpose.Camera.projectPoints"], ["", "def", "cost_to_last", "(", "self", ",", "camera", ",", "time", ",", "pose", ")", ":", "\n", "        ", "body_parts", "=", "[", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "5", ",", "7", ",", "9", "]", ",", "[", "6", ",", "8", ",", "10", "]", ",", "[", "11", ",", "13", ",", "15", "]", ",", "[", "12", ",", "14", ",", "16", "]", "]", "\n", "# last 3D pose info", "\n", "last_pose3d_info", "=", "self", ".", "poses3d", "[", "-", "1", "]", "\n", "last_time", "=", "last_pose3d_info", "[", "'time'", "]", "\n", "last_pose3d", "=", "last_pose3d_info", "[", "'pose3d'", "]", "\n", "time_interval_3d", "=", "time", "-", "last_time", "\n", "\n", "# last 3D pose project to 2D view", "\n", "last_pose2d", "=", "camera", ".", "projectPoints", "(", "last_pose3d", ")", "\n", "cost2d", "=", "la", ".", "norm", "(", "pose", "[", ":", ",", ":", "2", "]", "-", "last_pose2d", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", "\n", "cost2d", "=", "cost2d", "[", "cost2d", "<", "self", ".", "alpha2d", "*", "time_interval_3d", "]", "\n", "total_cost", "=", "np", ".", "sum", "(", "(", "1", "-", "cost2d", "/", "(", "self", ".", "alpha2d", "*", "time_interval_3d", ")", ")", "/", "exp", "(", "self", ".", "lambda_a", "*", "time_interval_3d", ")", ")", "\n", "\n", "return", "total_cost", "/", "len", "(", "cost2d", ")", "if", "len", "(", "cost2d", ")", ">", "14", "else", "0", "# Shelf 10 Campus 14 ", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.IterativeTracker.IterTrack.cost_to_3d": [[413, 427], ["numpy.flip", "numpy.flip", "matching.back_project_ray", "calculate.line2point_distance_3D"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.matching.back_project_ray", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.utils.calculate.line2point_distance_3D"], ["", "def", "cost_to_3d", "(", "self", ",", "camera", ",", "time", ",", "pose", ")", ":", "\n", "# camera info", "\n", "        ", "RK_INV", "=", "camera", ".", "RK_INV", "\n", "position", "=", "camera", ".", "position", "\n", "\n", "# Geometry", "\n", "last_pose3d", "=", "self", ".", "poses3d", "[", "-", "1", "]", "[", "'pose3d'", "]", "\n", "time_interval", "=", "time", "-", "self", ".", "poses3d", "[", "-", "1", "]", "[", "'time'", "]", "\n", "\n", "pose", "=", "np", ".", "flip", "(", "pose", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", "\n", "poses3d", "=", "last_pose3d", "+", "self", ".", "velocity_3d", "*", "time_interval", "\n", "directions", "=", "back_project_ray", "(", "RK_INV", ",", "position", ",", "pose", ")", "\n", "cost3d", "=", "line2point_distance_3D", "(", "position", ",", "directions", ",", "poses3d", ")", "\n", "return", "cost3d", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.binary_integer_programming._BIPSolver.__init__": [[14, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "min_affinity", "=", "-", "np", ".", "inf", ",", "max_affinity", "=", "np", ".", "inf", ",", "create_bip", "=", "None", ")", ":", "\n", "        ", "self", ".", "min_affinity", "=", "min_affinity", "\n", "self", ".", "max_affinity", "=", "max_affinity", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.binary_integer_programming._BIPSolver._create_bip": [[18, 119], ["numpy.triu", "numpy.logical_not", "numpy.vstack", "numpy.ones_like", "numpy.ones", "numpy.sum", "numpy.repeat", "numpy.asarray().reshape.reshape", "constraints_coefficients.reshape.reshape.reshape", "numpy.ones_like", "len", "numpy.asarray", "numpy.zeros_like", "numpy.zeros_like", "numpy.arange", "numpy.zeros_like", "numpy.zeros_like.fill", "numpy.asarray", "numpy.zeros_like", "len", "numpy.asarray().reshape", "len", "numpy.asarray().reshape", "len", "numpy.arange", "len", "tuple", "numpy.roll", "numpy.roll", "numpy.all", "len", "itertools.combinations", "numpy.any", "numpy.asarray", "numpy.asarray", "range"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_create_bip", "(", "affinity_matrix", ",", "min_affinity", ",", "max_affinity", ")", ":", "\n", "        ", "n_nodes", "=", "affinity_matrix", ".", "shape", "[", "0", "]", "\n", "\n", "# mask for selecting pairs of nodes", "\n", "triu_mask", "=", "np", ".", "triu", "(", "np", ".", "ones_like", "(", "affinity_matrix", ",", "dtype", "=", "np", ".", "bool", ")", ",", "1", ")", "\n", "\n", "affinities", "=", "affinity_matrix", "[", "triu_mask", "]", "\n", "frozen_pos_mask", "=", "affinities", ">=", "max_affinity", "\n", "frozen_neg_mask", "=", "affinities", "<=", "min_affinity", "\n", "unfrozen_mask", "=", "np", ".", "logical_not", "(", "frozen_pos_mask", "|", "frozen_neg_mask", ")", "\n", "\n", "# generate objective coefficients", "\n", "objective_coefficients", "=", "affinities", "[", "unfrozen_mask", "]", "\n", "\n", "if", "len", "(", "objective_coefficients", ")", "==", "0", ":", "# nio unfrozen edges", "\n", "            ", "objective_coefficients", "=", "np", ".", "asarray", "(", "[", "affinity_matrix", "[", "0", ",", "-", "1", "]", "]", ")", "\n", "unfrozen_mask", "=", "np", ".", "zeros_like", "(", "unfrozen_mask", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "unfrozen_mask", "[", "affinity_matrix", ".", "shape", "[", "1", "]", "-", "1", "]", "=", "1", "\n", "\n", "# create matrix whose rows are the indices of the three edges in a", "\n", "# constraint x_ij + x_ik - x_jk <= 1", "\n", "", "constraints_edges_idx", "=", "[", "]", "\n", "if", "n_nodes", ">=", "3", ":", "\n", "            ", "edges_idx", "=", "np", ".", "zeros_like", "(", "affinities", ",", "dtype", "=", "int", ")", "\n", "edges_idx", "[", "frozen_pos_mask", "]", "=", "FROZEN_POS_EDGE", "\n", "edges_idx", "[", "frozen_neg_mask", "]", "=", "FROZEN_NEG_EDGE", "\n", "edges_idx", "[", "unfrozen_mask", "]", "=", "np", ".", "arange", "(", "len", "(", "objective_coefficients", ")", ")", "\n", "nodes_to_edge_matrix", "=", "np", ".", "zeros_like", "(", "affinity_matrix", ",", "dtype", "=", "int", ")", "\n", "nodes_to_edge_matrix", ".", "fill", "(", "INVALID_EDGE", ")", "\n", "nodes_to_edge_matrix", "[", "triu_mask", "]", "=", "edges_idx", "\n", "\n", "triplets", "=", "np", ".", "asarray", "(", "\n", "tuple", "(", "itertools", ".", "combinations", "(", "range", "(", "n_nodes", ")", ",", "3", ")", ")", ",", "dtype", "=", "int", "\n", ")", "\n", "constraints_edges_idx", "=", "np", ".", "zeros_like", "(", "triplets", ")", "\n", "constraints_edges_idx", "[", ":", ",", "0", "]", "=", "nodes_to_edge_matrix", "[", "\n", "(", "triplets", "[", ":", ",", "0", "]", ",", "triplets", "[", ":", ",", "1", "]", ")", "\n", "]", "\n", "constraints_edges_idx", "[", ":", ",", "1", "]", "=", "nodes_to_edge_matrix", "[", "\n", "(", "triplets", "[", ":", ",", "0", "]", ",", "triplets", "[", ":", ",", "2", "]", ")", "\n", "]", "\n", "constraints_edges_idx", "[", ":", ",", "2", "]", "=", "nodes_to_edge_matrix", "[", "\n", "(", "triplets", "[", ":", ",", "1", "]", ",", "triplets", "[", ":", ",", "2", "]", ")", "\n", "]", "\n", "constraints_edges_idx", "=", "constraints_edges_idx", "[", "\n", "np", ".", "any", "(", "constraints_edges_idx", ">=", "0", ",", "axis", "=", "1", ")", "\n", "]", "\n", "\n", "", "if", "len", "(", "constraints_edges_idx", ")", "==", "0", ":", "# no constraints", "\n", "            ", "constraints_edges_idx", "=", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "0", "]", ",", "dtype", "=", "int", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "# add remaining constraints by permutation", "\n", "", "constraints_edges_idx", "=", "np", ".", "vstack", "(", "\n", "(", "\n", "constraints_edges_idx", ",", "\n", "np", ".", "roll", "(", "constraints_edges_idx", ",", "1", ",", "axis", "=", "1", ")", ",", "\n", "np", ".", "roll", "(", "constraints_edges_idx", ",", "2", ",", "axis", "=", "1", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "# clean redundant constraints", "\n", "# x1 + x2 <= 2", "\n", "constraints_edges_idx", "=", "constraints_edges_idx", "[", "\n", "constraints_edges_idx", "[", ":", ",", "2", "]", "!=", "FROZEN_POS_EDGE", "\n", "]", "\n", "# x1 - x2 <= 1", "\n", "constraints_edges_idx", "=", "constraints_edges_idx", "[", "\n", "np", ".", "all", "(", "constraints_edges_idx", "[", ":", ",", "0", ":", "2", "]", "!=", "FROZEN_NEG_EDGE", ",", "axis", "=", "1", ")", "\n", "]", "\n", "if", "len", "(", "constraints_edges_idx", ")", "==", "0", ":", "# no constraints", "\n", "            ", "constraints_edges_idx", "=", "np", ".", "asarray", "(", "[", "0", ",", "0", ",", "0", "]", ",", "dtype", "=", "int", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "# generate constraint coefficients", "\n", "", "constraints_coefficients", "=", "np", ".", "ones_like", "(", "constraints_edges_idx", ")", "\n", "constraints_coefficients", "[", ":", ",", "2", "]", "=", "-", "1", "\n", "\n", "# generate constraint upper bounds", "\n", "upper_bounds", "=", "np", ".", "ones", "(", "len", "(", "constraints_coefficients", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "upper_bounds", "-=", "np", ".", "sum", "(", "\n", "constraints_coefficients", "*", "(", "constraints_edges_idx", "==", "FROZEN_POS_EDGE", ")", ",", "\n", "axis", "=", "1", ",", "\n", ")", "\n", "\n", "# flatten constraints data into sparse matrix format", "\n", "constraints_idx", "=", "np", ".", "repeat", "(", "np", ".", "arange", "(", "len", "(", "constraints_edges_idx", ")", ")", ",", "3", ")", "\n", "constraints_edges_idx", "=", "constraints_edges_idx", ".", "reshape", "(", "-", "1", ")", "\n", "constraints_coefficients", "=", "constraints_coefficients", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "unfrozen_edges", "=", "constraints_edges_idx", ">=", "0", "\n", "constraints_idx", "=", "constraints_idx", "[", "unfrozen_edges", "]", "\n", "constraints_edges_idx", "=", "constraints_edges_idx", "[", "unfrozen_edges", "]", "\n", "constraints_coefficients", "=", "constraints_coefficients", "[", "unfrozen_edges", "]", "\n", "\n", "return", "(", "\n", "objective_coefficients", ",", "\n", "unfrozen_mask", ",", "\n", "frozen_pos_mask", ",", "\n", "frozen_neg_mask", ",", "\n", "(", "constraints_coefficients", ",", "constraints_idx", ",", "constraints_edges_idx", ")", ",", "\n", "upper_bounds", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.binary_integer_programming._BIPSolver._solve_bip": [[121, 124], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_solve_bip", "(", "objective_coefficients", ",", "sparse_constraints", ",", "upper_bounds", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.binary_integer_programming._BIPSolver.solution_mat_clusters": [[125, 138], ["numpy.arange", "range", "collections.defaultdict", "enumerate", "list", "range", "clusters[].append", "collections.defaultdict.values"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "solution_mat_clusters", "(", "solution_mat", ")", ":", "\n", "        ", "n", "=", "solution_mat", ".", "shape", "[", "0", "]", "\n", "labels", "=", "np", ".", "arange", "(", "1", ",", "n", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n", ")", ":", "\n", "                ", "if", "solution_mat", "[", "i", ",", "j", "]", ">", "0", ":", "\n", "                    ", "labels", "[", "j", "]", "=", "labels", "[", "i", "]", "\n", "\n", "", "", "", "clusters", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "clusters", "[", "label", "]", ".", "append", "(", "i", ")", "\n", "", "return", "list", "(", "clusters", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.binary_integer_programming._BIPSolver.solve": [[139, 186], ["binary_integer_programming._BIPSolver.solution_mat_clusters", "numpy.asarray", "numpy.asarray", "numpy.zeros_like", "binary_integer_programming._BIPSolver._create_bip", "binary_integer_programming._BIPSolver._solve_bip", "numpy.zeros_like", "numpy.array().reshape", "numpy.zeros_like", "numpy.asarray", "numpy.array", "numpy.triu", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.binary_integer_programming._BIPSolver.solution_mat_clusters", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.binary_integer_programming._BIPSolver._create_bip", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.binary_integer_programming.GLPKSolver._solve_bip"], ["", "def", "solve", "(", "self", ",", "affinity_matrix", ",", "rtn_matrix", "=", "False", ")", ":", "\n", "        ", "n_nodes", "=", "affinity_matrix", ".", "shape", "[", "0", "]", "\n", "if", "n_nodes", "<=", "1", ":", "\n", "            ", "solution_x", ",", "sol_matrix", "=", "(", "\n", "np", ".", "asarray", "(", "[", "]", ",", "dtype", "=", "int", ")", ",", "\n", "np", ".", "asarray", "(", "[", "0", "]", "*", "n_nodes", ",", "dtype", "=", "int", ")", ",", "\n", ")", "\n", "sol_matrix", "=", "sol_matrix", "[", ":", ",", "None", "]", "\n", "", "elif", "n_nodes", "==", "2", ":", "\n", "            ", "solution_matrix", "=", "np", ".", "zeros_like", "(", "affinity_matrix", ",", "dtype", "=", "int", ")", "\n", "solution_matrix", "[", "0", ",", "1", "]", "=", "affinity_matrix", "[", "0", ",", "1", "]", ">", "0", "\n", "solution_matrix", "+=", "solution_matrix", ".", "T", "\n", "solution_x", "=", "(", "\n", "[", "solution_matrix", "[", "0", ",", "1", "]", "]", "\n", "if", "self", ".", "min_affinity", "<", "affinity_matrix", "[", "0", ",", "1", "]", "<", "self", ".", "max_affinity", "\n", "else", "[", "]", "\n", ")", "\n", "solution_x", ",", "sol_matrix", "=", "np", ".", "asarray", "(", "solution_x", ")", ",", "solution_matrix", "\n", "", "else", ":", "\n", "# create BIP problem", "\n", "            ", "(", "\n", "objective_coefficients", ",", "\n", "unfrozen_mask", ",", "\n", "frozen_pos_mask", ",", "\n", "frozen_neg_mask", ",", "\n", "sparse_constraints", ",", "\n", "upper_bounds", ",", "\n", ")", "=", "self", ".", "_create_bip", "(", "affinity_matrix", ",", "self", ".", "min_affinity", ",", "self", ".", "max_affinity", ")", "\n", "\n", "# solve", "\n", "solution_x", "=", "self", ".", "_solve_bip", "(", "\n", "objective_coefficients", ",", "sparse_constraints", ",", "upper_bounds", "\n", ")", "\n", "# solution to matrix", "\n", "all_sols", "=", "np", ".", "zeros_like", "(", "unfrozen_mask", ",", "dtype", "=", "int", ")", "\n", "all_sols", "[", "unfrozen_mask", "]", "=", "np", ".", "array", "(", "solution_x", ",", "dtype", "=", "int", ")", ".", "reshape", "(", "-", "1", ")", "\n", "all_sols", "[", "frozen_neg_mask", "]", "=", "0", "\n", "all_sols", "[", "frozen_pos_mask", "]", "=", "1", "\n", "sol_matrix", "=", "np", ".", "zeros_like", "(", "affinity_matrix", ",", "dtype", "=", "int", ")", "\n", "sol_matrix", "[", "\n", "np", ".", "triu", "(", "np", ".", "ones", "(", "[", "n_nodes", ",", "n_nodes", "]", ",", "dtype", "=", "int", ")", ",", "1", ")", ">", "0", "\n", "]", "=", "all_sols", "\n", "sol_matrix", "+=", "sol_matrix", ".", "T", "\n", "", "clusters", "=", "self", ".", "solution_mat_clusters", "(", "sol_matrix", ")", "\n", "if", "not", "rtn_matrix", ":", "\n", "            ", "return", "clusters", "\n", "", "return", "clusters", ",", "sol_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.binary_integer_programming.GLPKSolver.__init__": [[189, 191], ["binary_integer_programming._BIPSolver.__init__"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.OneEuroFilter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "min_affinity", "=", "-", "np", ".", "inf", ",", "max_affinity", "=", "np", ".", "inf", ")", ":", "\n", "        ", "super", "(", "GLPKSolver", ",", "self", ")", ".", "__init__", "(", "min_affinity", ",", "max_affinity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.binary_integer_programming.GLPKSolver._solve_bip": [[192, 203], ["cvxopt.matrix", "cvxopt.spmatrix", "cvxopt.matrix", "scipy.optimize.linprog", "numpy.array().reshape", "numpy.array", "numpy.array", "dict", "len", "len", "numpy.array", "cvxopt.matrix"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_solve_bip", "(", "objective_coefficients", ",", "sparse_constraints", ",", "upper_bounds", ")", ":", "\n", "        ", "c", "=", "matrix", "(", "-", "objective_coefficients", ")", "# max -> min", "\n", "G", "=", "spmatrix", "(", "\n", "*", "sparse_constraints", ",", "size", "=", "(", "len", "(", "upper_bounds", ")", ",", "len", "(", "objective_coefficients", ")", ")", "\n", ")", "# G * x <= h", "\n", "h", "=", "matrix", "(", "upper_bounds", ")", "\n", "res", "=", "linprog", "(", "np", ".", "array", "(", "c", ")", ".", "reshape", "(", "-", "1", ")", ",", "A_ub", "=", "np", ".", "array", "(", "matrix", "(", "G", ")", ")", ",", "b_ub", "=", "np", ".", "array", "(", "h", ")", ",", "options", "=", "dict", "(", "maxiter", "=", "100", ",", "bland", "=", "True", ")", ",", "method", "=", "'simplex'", ")", "\n", "assert", "res", "[", "'x'", "]", "is", "not", "None", ",", "\"Solver error: {}\"", ".", "format", "(", "res", "[", "'message'", "]", ")", "\n", "\n", "return", "res", "[", "'x'", "]", "\n", "# return np.asarray(solution, int).reshape(-1)", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.KalmanFilter.KalmanFilter.__init__": [[5, 53], ["cv2.KalmanFilter", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pt3d", ",", "Hz", "=", "25", ")", ":", "\n", "        ", "self", ".", "Hz", "=", "Hz", "# Frequency of Vision System", "\n", "dt", "=", "1.0", "/", "Hz", "\n", "v", "=", "dt", "\n", "a", "=", "0.5", "*", "(", "dt", "**", "2", ")", "\n", "sp", "=", "0.1", "\n", "\n", "self", ".", "kalman", "=", "cv2", ".", "KalmanFilter", "(", "9", ",", "3", ",", "0", ")", "\n", "self", ".", "kalman", ".", "measurementMatrix", "=", "np", ".", "array", "(", "[", "\n", "[", "1", ",", "0", ",", "0", ",", "v", ",", "0", ",", "0", ",", "a", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "v", ",", "0", ",", "0", ",", "a", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "v", ",", "0", ",", "0", ",", "a", "]", "\n", "]", ",", "np", ".", "float32", ")", "\n", "\n", "self", ".", "kalman", ".", "transitionMatrix", "=", "np", ".", "array", "(", "[", "\n", "[", "1", ",", "0", ",", "0", ",", "v", ",", "0", ",", "0", ",", "a", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "v", ",", "0", ",", "0", ",", "a", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "v", ",", "0", ",", "0", ",", "a", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "v", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "v", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "v", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "]", ",", "np", ".", "float32", ")", "\n", "\n", "self", ".", "kalman", ".", "processNoiseCov", "=", "np", ".", "array", "(", "[", "\n", "[", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "]", ",", "np", ".", "float32", ")", "*", "0.007", "\n", "\n", "self", ".", "kalman", ".", "measurementNoiseCov", "=", "np", ".", "array", "(", "[", "\n", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ",", "np", ".", "float32", ")", "*", "sp", "\n", "\n", "self", ".", "kalman", ".", "statePre", "=", "np", ".", "array", "(", "[", "\n", "[", "np", ".", "float32", "(", "pt3d", "[", "0", "]", ")", "]", ",", "[", "np", ".", "float32", "(", "pt3d", "[", "1", "]", ")", "]", ",", "[", "np", ".", "float32", "(", "pt3d", "[", "2", "]", ")", "]", "\n", ",", "[", "np", ".", "float32", "(", "0.", ")", "]", ",", "[", "np", ".", "float32", "(", "0.", ")", "]", ",", "[", "np", ".", "float32", "(", "0.", ")", "]", "\n", ",", "[", "np", ".", "float32", "(", "0.", ")", "]", ",", "[", "np", ".", "float32", "(", "0.", ")", "]", ",", "[", "np", ".", "float32", "(", "0.", ")", "]", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.KalmanFilter.KalmanFilter.predict": [[55, 66], ["KalmanFilter.KalmanFilter.kalman.predict", "tp[].flatten", "numpy.array", "KalmanFilter.KalmanFilter.kalman.correct", "numpy.float32", "numpy.float32", "numpy.float32"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.KalmanFilter.KalmanFilter.predict"], ["", "def", "predict", "(", "self", ",", "pt3d", "=", "None", ")", ":", "\n", "        ", "if", "pt3d", "is", "not", "None", ":", "\n", "            ", "mp", "=", "np", ".", "array", "(", "[", "\n", "[", "np", ".", "float32", "(", "pt3d", "[", "0", "]", ")", "]", ",", "\n", "[", "np", ".", "float32", "(", "pt3d", "[", "1", "]", ")", "]", ",", "\n", "[", "np", ".", "float32", "(", "pt3d", "[", "2", "]", ")", "]", "\n", "]", ")", "\n", "self", ".", "kalman", ".", "correct", "(", "mp", ")", "\n", "\n", "", "tp", "=", "self", ".", "kalman", ".", "predict", "(", ")", "\n", "return", "tp", "[", ":", "3", "]", ".", "flatten", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.__init__.add_path": [[4, 7], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.LowPassFilter.__init__": [[15, 18], ["OneEuroFilter.LowPassFilter.__setAlpha"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.LowPassFilter.__setAlpha"], ["    ", "def", "__init__", "(", "self", ",", "alpha", ")", ":", "\n", "        ", "self", ".", "__setAlpha", "(", "alpha", ")", "\n", "self", ".", "__y", "=", "self", ".", "__s", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.LowPassFilter.__setAlpha": [[19, 24], ["float", "ValueError"], "methods", ["None"], ["", "def", "__setAlpha", "(", "self", ",", "alpha", ")", ":", "\n", "        ", "alpha", "=", "float", "(", "alpha", ")", "\n", "if", "alpha", "<=", "0", "or", "alpha", ">", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"alpha (%s) should be in (0.0, 1.0]\"", "%", "alpha", ")", "\n", "", "self", ".", "__alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.LowPassFilter.__call__": [[25, 35], ["OneEuroFilter.LowPassFilter.__setAlpha"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.LowPassFilter.__setAlpha"], ["", "def", "__call__", "(", "self", ",", "value", ",", "timestamp", "=", "None", ",", "alpha", "=", "None", ")", ":", "\n", "        ", "if", "alpha", "is", "not", "None", ":", "\n", "            ", "self", ".", "__setAlpha", "(", "alpha", ")", "\n", "", "if", "self", ".", "__y", "is", "None", ":", "\n", "            ", "s", "=", "value", "\n", "", "else", ":", "\n", "            ", "s", "=", "self", ".", "__alpha", "*", "value", "+", "(", "1.0", "-", "self", ".", "__alpha", ")", "*", "self", ".", "__s", "\n", "", "self", ".", "__y", "=", "value", "\n", "self", ".", "__s", "=", "s", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.LowPassFilter.lastValue": [[36, 38], ["None"], "methods", ["None"], ["", "def", "lastValue", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__y", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.OneEuroFilter.__init__": [[43, 57], ["float", "float", "float", "float", "OneEuroFilter.LowPassFilter", "OneEuroFilter.LowPassFilter", "ValueError", "ValueError", "ValueError", "OneEuroFilter.OneEuroFilter.__alpha", "OneEuroFilter.OneEuroFilter.__alpha"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.OneEuroFilter.__alpha", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.OneEuroFilter.__alpha"], ["    ", "def", "__init__", "(", "self", ",", "freq", ",", "mincutoff", "=", "1.0", ",", "beta", "=", "0.0", ",", "dcutoff", "=", "1.0", ")", ":", "\n", "        ", "if", "freq", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"freq should be >0\"", ")", "\n", "", "if", "mincutoff", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"mincutoff should be >0\"", ")", "\n", "", "if", "dcutoff", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"dcutoff should be >0\"", ")", "\n", "", "self", ".", "__freq", "=", "float", "(", "freq", ")", "\n", "self", ".", "__mincutoff", "=", "float", "(", "mincutoff", ")", "\n", "self", ".", "__beta", "=", "float", "(", "beta", ")", "\n", "self", ".", "__dcutoff", "=", "float", "(", "dcutoff", ")", "\n", "self", ".", "__x", "=", "LowPassFilter", "(", "self", ".", "__alpha", "(", "self", ".", "__mincutoff", ")", ")", "\n", "self", ".", "__dx", "=", "LowPassFilter", "(", "self", ".", "__alpha", "(", "self", ".", "__dcutoff", ")", ")", "\n", "self", ".", "__lasttime", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.OneEuroFilter.__alpha": [[58, 62], ["None"], "methods", ["None"], ["", "def", "__alpha", "(", "self", ",", "cutoff", ")", ":", "\n", "        ", "te", "=", "1.0", "/", "self", ".", "__freq", "\n", "tau", "=", "1.0", "/", "(", "2", "*", "math", ".", "pi", "*", "cutoff", ")", "\n", "return", "1.0", "/", "(", "1.0", "+", "tau", "/", "te", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.OneEuroFilter.__call__": [[63, 78], ["OneEuroFilter.OneEuroFilter.__x.lastValue", "OneEuroFilter.OneEuroFilter.__dx", "OneEuroFilter.OneEuroFilter.__x", "OneEuroFilter.OneEuroFilter.__alpha", "math.fabs", "OneEuroFilter.OneEuroFilter.__alpha"], "methods", ["home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.LowPassFilter.lastValue", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.OneEuroFilter.__alpha", "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.tracking.OneEuroFilter.OneEuroFilter.__alpha"], ["", "def", "__call__", "(", "self", ",", "x", ",", "timestamp", "=", "None", ")", ":", "\n", "# ---- update the sampling frequency based on timestamps", "\n", "        ", "if", "x", "is", "None", ":", "\n", "            ", "return", "x", "\n", "", "if", "self", ".", "__lasttime", "and", "timestamp", ":", "\n", "            ", "self", ".", "__freq", "=", "1.0", "/", "(", "timestamp", "-", "self", ".", "__lasttime", ")", "\n", "", "self", ".", "__lasttime", "=", "timestamp", "\n", "# ---- estimate the current variation per second", "\n", "prev_x", "=", "self", ".", "__x", ".", "lastValue", "(", ")", "\n", "dx", "=", "0.0", "if", "prev_x", "is", "None", "else", "(", "x", "-", "prev_x", ")", "*", "self", ".", "__freq", "# FIXME: 0.0 or value?", "\n", "edx", "=", "self", ".", "__dx", "(", "dx", ",", "timestamp", ",", "alpha", "=", "self", ".", "__alpha", "(", "self", ".", "__dcutoff", ")", ")", "\n", "# ---- use it to update the cutoff frequency", "\n", "cutoff", "=", "self", ".", "__mincutoff", "+", "self", ".", "__beta", "*", "math", ".", "fabs", "(", "edx", ")", "\n", "# ---- filter the given value", "\n", "return", "self", ".", "__x", "(", "x", ",", "timestamp", ",", "alpha", "=", "self", ".", "__alpha", "(", "cutoff", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.eval.numeric.vectorize_distance": [[5, 26], ["a.reshape.reshape", "numpy.array().reshape", "p[].reshape.reshape", "a[].reshape", "numpy.tile", "p[].reshape", "numpy.tile", "dists.append", "numpy.isnan", "numpy.sum().reshape", "numpy.sum", "numpy.array", "len", "numpy.sum"], "function", ["None"], ["def", "vectorize_distance", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"\n    Calculate euclid distance on each row of a and b\n    :param a: Nx... np.array\n    :param b: Mx... np.array\n    :return: MxN np.array representing correspond distance\n    \"\"\"", "\n", "N", "=", "a", ".", "shape", "[", "0", "]", "\n", "a", "=", "a", ".", "reshape", "(", "N", ",", "-", "1", ")", "\n", "M", "=", "b", ".", "shape", "[", "0", "]", "\n", "dists", "=", "[", "]", "\n", "for", "p", "in", "b", ":", "\n", "        ", "p", "=", "p", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "remain", "=", "~", "np", ".", "isnan", "(", "p", ")", "\n", "gt", "=", "a", "[", "remain", "]", ".", "reshape", "(", "N", ",", "-", "1", ")", "\n", "gt2", "=", "np", ".", "tile", "(", "np", ".", "sum", "(", "gt", "**", "2", ",", "axis", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "(", "1", ",", "1", ")", ")", "\n", "p", "=", "p", "[", "remain", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "p2", "=", "np", ".", "tile", "(", "np", ".", "sum", "(", "p", "**", "2", ",", "axis", "=", "1", ")", ",", "(", "N", ",", "1", ")", ")", "\n", "d", "=", "gt2", "+", "p2", "-", "2", "*", "(", "gt", "@", "p", ".", "T", ")", "\n", "dists", ".", "append", "(", "d", "/", "len", "(", "remain", ")", ")", "\n", "", "return", "np", ".", "array", "(", "dists", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "# b = b.reshape ( M, -1 )", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.eval.transformation.coco2shelf3D": [[5, 40], ["numpy.zeros", "numpy.array", "coco_pose.astype", "numpy.array", "numpy.array"], "function", ["None"], ["def", "coco2shelf3D", "(", "coco_pose", ")", ":", "\n", "    ", "\"\"\"\n    transform coco order(our method output) 3d pose to shelf dataset order with interpolation\n    :param coco_pose: np.array with shape 3x17\n    :return: 3D pose in shelf order with shape 14x3\n    \"\"\"", "\n", "coco_pose", "=", "coco_pose", ".", "astype", "(", "np", ".", "float", ")", ".", "T", "\n", "shelf_pose", "=", "np", ".", "zeros", "(", "(", "14", ",", "3", ")", ")", "\n", "coco2shelf", "=", "np", ".", "array", "(", "[", "16", ",", "14", ",", "12", ",", "11", ",", "13", ",", "15", ",", "10", ",", "8", ",", "6", ",", "5", ",", "7", ",", "9", "]", ")", "\n", "shelf_pose", "[", "0", ":", "12", "]", "+=", "coco_pose", "[", "coco2shelf", "]", "\n", "neck", "=", "(", "coco_pose", "[", "5", "]", "+", "coco_pose", "[", "6", "]", ")", "/", "2", "# L and R shoulder", "\n", "head_bottom", "=", "(", "neck", "+", "coco_pose", "[", "0", "]", ")", "/", "2", "# nose and head center", "\n", "head_center", "=", "(", "coco_pose", "[", "3", "]", "+", "coco_pose", "[", "4", "]", ")", "/", "2", "# middle of two ear", "\n", "head_top", "=", "head_bottom", "+", "(", "head_center", "-", "head_bottom", ")", "*", "2", "\n", "# shelf_pose[12] = (shelf_pose[8] + shelf_pose[9]) / 2", "\n", "# shelf_pose[13] = head_center", "\n", "# shelf_pose[13] = shelf_pose[12] + (shelf_pose[13] - shelf_pose[12]) * np.array ( [0.75, 0.75, 1.5] )", "\n", "# shelf_pose[12] = shelf_pose[12] + (shelf_pose[13] - shelf_pose[12]) * np.array ( [0.5, 0.5, 0.5] )", "\n", "\n", "shelf_pose", "[", "12", "]", "=", "(", "shelf_pose", "[", "8", "]", "+", "shelf_pose", "[", "9", "]", ")", "/", "2", "\n", "shelf_pose", "[", "13", "]", "=", "shelf_pose", "[", "12", "]", "+", "(", "coco_pose", "[", "0", "]", "-", "shelf_pose", "[", "12", "]", ")", "*", "np", ".", "array", "(", "[", "0.78", ",", "0.5", ",", "1.5", "]", ")", "\n", "shelf_pose", "[", "12", "]", "=", "shelf_pose", "[", "12", "]", "+", "(", "coco_pose", "[", "0", "]", "-", "shelf_pose", "[", "12", "]", ")", "*", "np", ".", "array", "(", "[", "0.3", ",", "0.4", ",", "0.6", "]", ")", "\n", "\n", "# shelf_pose[12] = (shelf_pose[8] + shelf_pose[9]) / 2  # Use middle of shoulder to init", "\n", "# shelf_pose[13] = coco_pose[0]  # use nose to init", "\n", "# shelf_pose[13] = shelf_pose[12] + (shelf_pose[13] - shelf_pose[12]) * np.array ( [0.75, 0.75, 1.5] )", "\n", "# shelf_pose[12] = shelf_pose[12] + (coco_pose[0] - shelf_pose[12]) * np.array ( [1. / 2., 1. / 2., 1. / 2.] )", "\n", "\n", "\n", "# head_top = coco_pose[0] + (coco_pose[0] - head_bottom)", "\n", "# shelf_pose[12] += head_bottom", "\n", "# shelf_pose[13] += head_top", "\n", "# shelf_pose[13] = shelf_pose[12] + (shelf_pose[13] - shelf_pose[12]) * np.array ( [0.5, 0.5, 1.5] )", "\n", "# shelf_pose[12] = shelf_pose[12] + (shelf_pose[13] - shelf_pose[12]) * np.array ( [1.0 / 3, 1.0 / 3, 1.0 / 3] )", "\n", "return", "shelf_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.eval.transformation.coco2panoptic": [[42, 60], ["numpy.zeros", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "coco2panoptic", "(", "coco_pose", ")", ":", "\n", "    ", "\"\"\"\n\n    :param coco_pose: 3x17 MS COCO17 order keypoints\n    :return: 3x15 old style panoptic order keypoints\n    \"\"\"", "\n", "coco_pose", "=", "coco_pose", ".", "T", "\n", "panoptic_pose", "=", "np", ".", "zeros", "(", "(", "15", ",", "3", ")", ")", "\n", "map_array", "=", "np", ".", "array", "(", "[", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", "15", ",", "6", ",", "8", ",", "10", ",", "12", ",", "14", ",", "16", "]", ")", "\n", "panoptic_pose", "[", "3", ":", "]", "+=", "coco_pose", "[", "map_array", "]", "\n", "panoptic_pose", "[", "2", "]", "+=", "(", "coco_pose", "[", "11", "]", "+", "coco_pose", "[", "12", "]", ")", "/", "2", "# Take middle of two hips as BodyCenter", "\n", "mid_shoulder", "=", "(", "coco_pose", "[", "5", "]", "+", "coco_pose", "[", "6", "]", ")", "/", "2", "# Use middle of shoulder to init", "\n", "nose", "=", "coco_pose", "[", "0", "]", "# use nose to init", "\n", "head_top", "=", "mid_shoulder", "+", "(", "nose", "-", "mid_shoulder", ")", "*", "np", ".", "array", "(", "[", "0.4", ",", "1.75", ",", "0.4", "]", ")", "\n", "neck", "=", "mid_shoulder", "+", "(", "nose", "-", "mid_shoulder", ")", "*", "np", ".", "array", "(", "[", ".3", ",", ".5", ",", ".3", "]", ")", "\n", "panoptic_pose", "[", "0", "]", "+=", "neck", "\n", "panoptic_pose", "[", "1", "]", "=", "head_top", "\n", "return", "panoptic_pose", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.eval.transformation.coco17to19": [[62, 81], ["numpy.zeros", "numpy.array"], "function", ["None"], ["", "def", "coco17to19", "(", "coco17pose", ")", ":", "\n", "    ", "\"\"\"\n    kp_names = ['nose', 'l_eye', 'r_eye', 'l_ear', 'r_ear', 'l_shoulder',  # 5\n                'r_shoulder', 'l_elbow', 'r_elbow', 'l_wrist', 'r_wrist',  # 10\n                'l_hip', 'r_hip', 'l_knee', 'r_knee', 'l_ankle', 'r_ankle']\n    coco19_kp_names = ['neck', 'nose', 'hip', 'l_shoulder', 'l_elbow', 'l_wrist',  # 5\n                'l_hip', 'l_knee', 'l_ankle', 'r_shoulder', 'r_elbow',  # 10\n                'r_wrist', 'r_hip', 'r_knee', 'r_ankle', 'l_eye', # 15\n                'l_ear', 'r_eye', 'r_ear']\n    :param coco17pose: 17x3 coco pose np.array\n    :return: 19x3 coco19 pose np.array\n    \"\"\"", "\n", "coco19pose", "=", "np", ".", "zeros", "(", "(", "19", ",", "coco17pose", ".", "shape", "[", "1", "]", ")", ")", "\n", "index_array", "=", "np", ".", "array", "(", "[", "1", ",", "15", ",", "17", ",", "16", ",", "18", ",", "3", ",", "9", ",", "4", ",", "10", ",", "5", ",", "11", ",", "6", ",", "12", ",", "7", ",", "13", ",", "8", ",", "14", "]", ")", "\n", "coco19pose", "[", "index_array", "]", "=", "coco17pose", "\n", "coco19pose", "[", "0", "]", "=", "(", "coco17pose", "[", "5", "]", "+", "coco17pose", "[", "6", "]", ")", "/", "2", "\n", "coco19pose", "[", "2", "]", "=", "(", "coco17pose", "[", "11", "]", "+", "coco17pose", "[", "12", "]", ")", "/", "2", "\n", "coco19pose", "[", "-", "4", ":", "]", "=", "coco17pose", "[", "0", "]", "# Since we have not implement eye and ear yet.", "\n", "return", "coco19pose", "\n", "", ""]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.eval.log.get_logger": [[4, 16], ["logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.addHandler"], "function", ["None"], ["def", "get_logger", "(", "name", "=", "'root'", ")", ":", "\n", "    ", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "# fmt='%(asctime)s [%(levelname)s]: %(filename)s(%(funcName)s:%(lineno)s) >> %(message)s')", "\n", "fmt", "=", "'%(asctime)s [%(levelname)s]: %(message)s'", ",", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "\n", "handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.eval.__init__.add_path": [[4, 7], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ivclab_Part-Aware_Measurement_for_3D_Pose_Estimation_and_Tracking.backend.__init__.add_path": [[4, 7], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]]}