{"home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.count_parameters_in_MB": [[6, 11], ["isinstance", "numpy.sum", "numpy.sum", "numpy.prod", "numpy.prod", "v.size", "model.parameters", "v.size"], "function", ["None"], ["def", "count_parameters_in_MB", "(", "model", ")", ":", "\n", "  ", "if", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ".", "parameters", "(", ")", ")", "/", "1e6", "\n", "", "else", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "for", "v", "in", "model", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.get_model_infos": [[13, 40], ["flop_benchmark.add_flops_counting_methods", "add_flops_counting_methods.eval", "torch.rand", "torch.rand", "flop_benchmark.count_parameters_in_MB", "hasattr", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "add_flops_counting_methods.apply", "next", "cache_inputs.cuda.cuda", "torch.no_grad", "torch.no_grad", "add_flops_counting_methods.", "flop_benchmark.compute_average_flops_cost", "flop_benchmark.count_parameters_in_MB", "print", "print", "add_flops_counting_methods.parameters", "add_flops_counting_methods.auxiliary_param"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.add_flops_counting_methods", "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.count_parameters_in_MB", "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.compute_average_flops_cost", "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.count_parameters_in_MB"], ["", "", "def", "get_model_infos", "(", "model", ",", "shape", ")", ":", "\n", "#model = copy.deepcopy( model )", "\n", "\n", "  ", "model", "=", "add_flops_counting_methods", "(", "model", ")", "\n", "#model = model.cuda()", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "#cache_inputs = torch.zeros(*shape).cuda()", "\n", "#cache_inputs = torch.zeros(*shape)", "\n", "cache_inputs", "=", "torch", ".", "rand", "(", "*", "shape", ")", "\n", "if", "next", "(", "model", ".", "parameters", "(", ")", ")", ".", "is_cuda", ":", "cache_inputs", "=", "cache_inputs", ".", "cuda", "(", ")", "\n", "#print_log('In the calculating function : cache input size : {:}'.format(cache_inputs.size()), log)", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "_____", "=", "model", "(", "cache_inputs", ")", "\n", "", "FLOPs", "=", "compute_average_flops_cost", "(", "model", ")", "/", "1e6", "\n", "Param", "=", "count_parameters_in_MB", "(", "model", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'auxiliary_param'", ")", ":", "\n", "    ", "aux_params", "=", "count_parameters_in_MB", "(", "model", ".", "auxiliary_param", "(", ")", ")", "\n", "print", "(", "'The auxiliary params of this model is : {:}'", ".", "format", "(", "aux_params", ")", ")", "\n", "print", "(", "'We remove the auxiliary params from the total params ({:}) when counting'", ".", "format", "(", "Param", ")", ")", "\n", "Param", "=", "Param", "-", "aux_params", "\n", "\n", "#print_log('FLOPs : {:} MB'.format(FLOPs), log)", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "model", ".", "apply", "(", "remove_hook_function", ")", "\n", "return", "FLOPs", ",", "Param", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.add_flops_counting_methods": [[43, 49], ["flop_benchmark.add_batch_counter_hook_function", "model.apply", "model.apply", "flop_benchmark.remove_hook_function"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.add_batch_counter_hook_function", "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.remove_hook_function"], ["", "def", "add_flops_counting_methods", "(", "model", ")", ":", "\n", "  ", "model", ".", "__batch_counter__", "=", "0", "\n", "add_batch_counter_hook_function", "(", "model", ")", "\n", "model", ".", "apply", "(", "add_flops_counter_variable_or_reset", ")", "\n", "model", ".", "apply", "(", "add_flops_counter_hook_function", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.compute_average_flops_cost": [[52, 66], ["model.modules", "isinstance", "isinstance", "isinstance", "hasattr"], "function", ["None"], ["", "def", "compute_average_flops_cost", "(", "model", ")", ":", "\n", "  ", "\"\"\"\n  A method that will be available after add_flops_counting_methods() is called on a desired net object.\n  Returns current mean flops consumption per image.\n  \"\"\"", "\n", "batches_count", "=", "model", ".", "__batch_counter__", "\n", "flops_sum", "=", "0", "\n", "#or isinstance(module, torch.nn.AvgPool2d) or isinstance(module, torch.nn.MaxPool2d) \\", "\n", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "    ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "\n", "      ", "flops_sum", "+=", "module", ".", "__flops__", "\n", "", "", "return", "flops_sum", "/", "batches_count", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.pool_flops_counter_hook": [[69, 77], ["inputs[].size", "inputs[].size", "inputs[].size"], "function", ["None"], ["", "def", "pool_flops_counter_hook", "(", "pool_module", ",", "inputs", ",", "output", ")", ":", "\n", "  ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "kernel_size", "=", "pool_module", ".", "kernel_size", "\n", "out_C", ",", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "1", ":", "]", "\n", "assert", "out_C", "==", "inputs", "[", "0", "]", ".", "size", "(", "1", ")", ",", "'{:} vs. {:}'", ".", "format", "(", "out_C", ",", "inputs", "[", "0", "]", ".", "size", "(", ")", ")", "\n", "\n", "overall_flops", "=", "batch_size", "*", "out_C", "*", "output_height", "*", "output_width", "*", "kernel_size", "*", "kernel_size", "\n", "pool_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.self_calculate_flops_counter_hook": [[79, 82], ["flop_benchmark..calculate_flop_self"], "function", ["None"], ["", "def", "self_calculate_flops_counter_hook", "(", "self_module", ",", "inputs", ",", "output", ")", ":", "\n", "  ", "overall_flops", "=", "self_module", ".", "calculate_flop_self", "(", "inputs", "[", "0", "]", ".", "shape", ",", "output", ".", "shape", ")", "\n", "self_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.fc_flops_counter_hook": [[84, 92], ["inputs[].size", "inputs[].size", "output.size"], "function", ["None"], ["", "def", "fc_flops_counter_hook", "(", "fc_module", ",", "inputs", ",", "output", ")", ":", "\n", "  ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "xin", ",", "xout", "=", "fc_module", ".", "in_features", ",", "fc_module", ".", "out_features", "\n", "assert", "xin", "==", "inputs", "[", "0", "]", ".", "size", "(", "1", ")", "and", "xout", "==", "output", ".", "size", "(", "1", ")", ",", "'IO=({:}, {:})'", ".", "format", "(", "xin", ",", "xout", ")", "\n", "overall_flops", "=", "batch_size", "*", "xin", "*", "xout", "\n", "if", "fc_module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "overall_flops", "+=", "batch_size", "*", "xout", "\n", "", "fc_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.conv1d_flops_counter_hook": [[94, 109], ["inputs[].size"], "function", ["None"], ["", "def", "conv1d_flops_counter_hook", "(", "conv_module", ",", "inputs", ",", "outputs", ")", ":", "\n", "  ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "outL", "=", "outputs", ".", "shape", "[", "-", "1", "]", "\n", "[", "kernel", "]", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "conv_per_position_flops", "=", "kernel", "*", "in_channels", "*", "out_channels", "/", "groups", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "outL", "\n", "overall_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "overall_flops", "+=", "out_channels", "*", "active_elements_count", "\n", "", "conv_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.conv2d_flops_counter_hook": [[111, 127], ["inputs[].size"], "function", ["None"], ["", "def", "conv2d_flops_counter_hook", "(", "conv_module", ",", "inputs", ",", "output", ")", ":", "\n", "  ", "batch_size", "=", "inputs", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "output_height", ",", "output_width", "=", "output", ".", "shape", "[", "2", ":", "]", "\n", "\n", "kernel_height", ",", "kernel_width", "=", "conv_module", ".", "kernel_size", "\n", "in_channels", "=", "conv_module", ".", "in_channels", "\n", "out_channels", "=", "conv_module", ".", "out_channels", "\n", "groups", "=", "conv_module", ".", "groups", "\n", "conv_per_position_flops", "=", "kernel_height", "*", "kernel_width", "*", "in_channels", "*", "out_channels", "/", "groups", "\n", "\n", "active_elements_count", "=", "batch_size", "*", "output_height", "*", "output_width", "\n", "overall_flops", "=", "conv_per_position_flops", "*", "active_elements_count", "\n", "\n", "if", "conv_module", ".", "bias", "is", "not", "None", ":", "\n", "    ", "overall_flops", "+=", "out_channels", "*", "active_elements_count", "\n", "", "conv_module", ".", "__flops__", "+=", "overall_flops", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.batch_counter_hook": [[129, 134], ["None"], "function", ["None"], ["", "def", "batch_counter_hook", "(", "module", ",", "inputs", ",", "output", ")", ":", "\n", "# Can have multiple inputs, getting the first one", "\n", "  ", "inputs", "=", "inputs", "[", "0", "]", "\n", "batch_size", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "module", ".", "__batch_counter__", "+=", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.add_batch_counter_hook_function": [[136, 140], ["hasattr", "module.register_forward_hook"], "function", ["None"], ["", "def", "add_batch_counter_hook_function", "(", "module", ")", ":", "\n", "  ", "if", "not", "hasattr", "(", "module", ",", "'__batch_counter_handle__'", ")", ":", "\n", "    ", "handle", "=", "module", ".", "register_forward_hook", "(", "batch_counter_hook", ")", "\n", "module", ".", "__batch_counter_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.add_flops_counter_variable_or_reset": [[142, 148], ["isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "hasattr"], "function", ["None"], ["", "", "def", "add_flops_counter_variable_or_reset", "(", "module", ")", ":", "\n", "  ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", "or", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "\n", "    ", "module", ".", "__flops__", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.add_flops_counter_hook_function": [[150, 171], ["isinstance", "isinstance", "hasattr", "module.register_forward_hook", "isinstance", "hasattr", "module.register_forward_hook", "hasattr", "module.register_forward_hook", "isinstance", "isinstance", "hasattr", "hasattr", "module.register_forward_hook", "hasattr", "module.register_forward_hook"], "function", ["None"], ["", "", "def", "add_flops_counter_hook_function", "(", "module", ")", ":", "\n", "  ", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv2d", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv2d_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Conv1d", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "conv1d_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "fc_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "AvgPool2d", ")", "or", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "MaxPool2d", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "pool_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "", "", "elif", "hasattr", "(", "module", ",", "'calculate_flop_self'", ")", ":", "# self-defined module", "\n", "    ", "if", "not", "hasattr", "(", "module", ",", "'__flops_handle__'", ")", ":", "\n", "      ", "handle", "=", "module", ".", "register_forward_hook", "(", "self_calculate_flops_counter_hook", ")", "\n", "module", ".", "__flops_handle__", "=", "handle", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.remove_hook_function": [[173, 182], ["hasattr", "hasattr", "getattr", "getattr.remove", "delattr"], "function", ["None"], ["", "", "", "def", "remove_hook_function", "(", "module", ")", ":", "\n", "  ", "hookers", "=", "[", "'__batch_counter_handle__'", ",", "'__flops_handle__'", "]", "\n", "for", "hooker", "in", "hookers", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "hooker", ")", ":", "\n", "      ", "handle", "=", "getattr", "(", "module", ",", "hooker", ")", "\n", "handle", ".", "remove", "(", ")", "\n", "", "", "keys", "=", "[", "'__flops__'", ",", "'__batch_counter__'", ",", "'__flops__'", "]", "+", "hookers", "\n", "for", "ckey", "in", "keys", ":", "\n", "    ", "if", "hasattr", "(", "module", ",", "ckey", ")", ":", "delattr", "(", "module", ",", "ckey", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.metrics.AverageMeter.__init__": [[6, 9], ["metrics.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "\t\t", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.metrics.AverageMeter.reset": [[10, 15], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "\t\t", "self", ".", "avg", "=", "0.", "\n", "self", ".", "sum", "=", "0.", "\n", "self", ".", "count", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.metrics.AverageMeter.update": [[16, 21], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "\n", "\t\t", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.metrics.RunningAverageMeter.__init__": [[24, 28], ["metrics.RunningAverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset"], ["\t", "def", "__init__", "(", "self", ",", "alpha", "=", "0.98", ")", ":", "\n", "\n", "\t\t", "self", ".", "reset", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.metrics.RunningAverageMeter.reset": [[29, 32], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "\t\t", "self", ".", "avg", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.metrics.RunningAverageMeter.update": [[33, 39], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ")", ":", "\n", "\n", "\t\t", "if", "self", ".", "avg", "==", "0.", ":", "\n", "\t\t\t", "self", ".", "avg", "=", "val", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "avg", "=", "self", ".", "avg", "*", "self", ".", "alpha", "+", "(", "1", "-", "self", ".", "alpha", ")", "*", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_val.eval_func": [[6, 81], ["numpy.argsort", "range", "numpy.asarray().astype", "numpy.mean", "print", "numpy.invert", "numpy.sum", "orig_cmc.cumsum", "np.asarray().astype.append", "orig_cmc.sum", "orig_cmc.cumsum", "all_AP.append", "np.asarray().astype.sum", "numpy.any", "numpy.asarray", "orig_cmc.cumsum.sum", "numpy.asarray", "enumerate"], "function", ["None"], ["def", "eval_func", "(", "dist_mat", ",", "q_pids", ",", "q_camids", ",", "g_pids", ",", "g_camids", ",", "max_rank", "=", "50", ")", ":", "\n", "\n", "\t", "num_q", ",", "num_g", "=", "dist_mat", ".", "shape", "\n", "\n", "if", "num_g", "<", "max_rank", ":", "\n", "\n", "\t\t", "max_rank", "=", "num_g", "\n", "print", "(", "\"Note: number of gallery samples is small than max_rank , got {}\"", ".", "format", "(", "num_g", ")", ")", "\n", "\n", "# sort the dist_mat by distance in dimension 1", "\n", "# return the index sorted", "\n", "", "indices", "=", "np", ".", "argsort", "(", "dist_mat", ",", "axis", "=", "1", ")", "\n", "\"\"\"\n\there,\n\tindices: num_q x num_g\n\tg_pids: 1xnum_g\n\tg_pids[indices]-> num_q x num_g, equals to for each row in indice, produce the g_pids row according the sorted indexs\n\tq_pids: 1x num_q\n\tq_pids[:,np.newaxis]: num_q x 1\n\tg_pids[indices] == q_pids[:, np.newaxis] : num_q x num_g \n\t -> equals to for each row in q_pids,determine pids == the same row in g_pids ?\n\t\"\"\"", "\n", "matches", "=", "(", "g_pids", "[", "indices", "]", "==", "q_pids", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "# compute cmc curve for each query ", "\n", "all_cmc", "=", "[", "]", "\n", "all_AP", "=", "[", "]", "\n", "# number of valid query except the same camids ", "\n", "num_valid_q", "=", "0.", "\n", "for", "q_idx", "in", "range", "(", "num_q", ")", ":", "\n", "\n", "\t\t", "q_pid", "=", "q_pids", "[", "q_idx", "]", "\n", "q_camid", "=", "q_camids", "[", "q_idx", "]", "\n", "\n", "#remove the gallery samples that have sampe pids and camids with the query", "\n", "\n", "order", "=", "indices", "[", "q_idx", "]", "\n", "remove", "=", "(", "g_pids", "[", "order", "]", "==", "q_pid", ")", "&", "(", "g_camids", "[", "order", "]", "==", "q_camid", ")", "\n", "\n", "keep", "=", "np", ".", "invert", "(", "remove", ")", "\n", "\n", "# compute cmc curve", "\n", "# a binary vector, position with True denotes correct mathes", "\n", "orig_cmc", "=", "matches", "[", "q_idx", "]", "[", "keep", "]", "\n", "res", "=", "np", ".", "sum", "(", "orig_cmc", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "not", "np", ".", "any", "(", "orig_cmc", ")", ":", "\n", "# this condition is true when query identity does not appear in the gallery", "\n", "\t\t\t", "continue", "\n", "", "cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "cmc", "[", "cmc", ">", "1", "]", "=", "1", "\n", "all_cmc", ".", "append", "(", "cmc", "[", ":", "max_rank", "]", ")", "\n", "num_valid_q", "+=", "1", "\n", "\n", "# compute average percision", "\n", "# get the number of same identity with query in gallery", "\n", "num_rel", "=", "orig_cmc", ".", "sum", "(", ")", "\n", "tmp_cmc", "=", "orig_cmc", ".", "cumsum", "(", ")", "\n", "# compute the correctly matches in k retrieval result propotion", "\n", "# just like precision", "\n", "tmp_cmc", "=", "[", "x", "/", "(", "i", "+", "1.", ")", "for", "i", ",", "x", "in", "enumerate", "(", "tmp_cmc", ")", "]", "\n", "# just consider the result of correctly matches at 1,2,3,...", "\n", "tmp_cmc", "=", "np", ".", "asarray", "(", "tmp_cmc", ")", "*", "orig_cmc", "\n", "\n", "AP", "=", "tmp_cmc", ".", "sum", "(", ")", "/", "num_rel", "\n", "all_AP", ".", "append", "(", "AP", ")", "\n", "\n", "", "assert", "num_valid_q", ">", "0", ",", "\"Error: all query identity do not appear in the gallery\"", "\n", "\n", "# compute all query", "\n", "all_cmc", "=", "np", ".", "asarray", "(", "all_cmc", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_cmc", "=", "all_cmc", ".", "sum", "(", "0", ")", "/", "num_valid_q", "\n", "mAP", "=", "np", ".", "mean", "(", "all_AP", ")", "\n", "\n", "return", "all_cmc", ",", "mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.__init__": [[11, 18], ["reid_metic.R1_mAP.reset"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset"], ["\t", "def", "__init__", "(", "self", ",", "num_query", ",", "max_rank", "=", "50", ",", "use_gpu", "=", "False", ",", "feat_norm", "=", "'yes'", ")", ":", "\n", "\n", "\t\t", "self", ".", "num_query", "=", "num_query", "\n", "self", ".", "max_rank", "=", "max_rank", "\n", "self", ".", "feat_norm", "=", "feat_norm", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset": [[19, 25], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "\t\t", "self", ".", "feats", "=", "[", "]", "\n", "self", ".", "pids", "=", "[", "]", "\n", "self", ".", "camids", "=", "[", "]", "\n", "self", ".", "paths", "=", "[", "]", "\n", "#batch contains feat,pid,camid", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update": [[26, 32], ["reid_metic.R1_mAP.feats.append", "reid_metic.R1_mAP.pids.extend", "reid_metic.R1_mAP.camids.extend", "numpy.asarray", "numpy.asarray"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "batch", ")", ":", "\n", "\n", "\t\t", "feat", ",", "pid", ",", "camid", "=", "batch", "\n", "self", ".", "feats", ".", "append", "(", "feat", ")", "\n", "self", ".", "pids", ".", "extend", "(", "np", ".", "asarray", "(", "pid", ")", ")", "\n", "self", ".", "camids", ".", "extend", "(", "np", ".", "asarray", "(", "camid", ")", ")", "\n", "# self.paths.extend(np.asrray(path))", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.compute": [[34, 66], ["torch.cat", "numpy.asarray", "numpy.asarray", "numpy.asarray", "numpy.asarray", "dist_mat.numpy.numpy.addmm_", "reid_val.eval_func", "print", "torch.nn.functional.normalize", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "gf.t", "dist_mat.numpy.numpy.cpu().numpy", "dist_mat.numpy.numpy.numpy", "torch.pow().sum", "torch.pow().sum().expand", "dist_mat.numpy.numpy.cpu", "torch.pow", "torch.pow().sum", "torch.pow"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_val.eval_func", "home.repos.pwc.inspect_result.solicucu_ReID.loss.triplet_loss.normalize"], ["", "def", "compute", "(", "self", ")", ":", "\n", "\n", "\t\t", "feats", "=", "torch", ".", "cat", "(", "self", ".", "feats", ",", "dim", "=", "0", ")", "\n", "if", "self", ".", "feat_norm", "==", "'yes'", ":", "\n", "\t\t\t", "print", "(", "\"the test feature is normalized\"", ")", "\n", "feats", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "feats", ",", "dim", "=", "1", ",", "p", "=", "2", ")", "\n", "# query", "\n", "", "qf", "=", "feats", "[", ":", "self", ".", "num_query", "]", "\n", "q_pids", "=", "np", ".", "asarray", "(", "self", ".", "pids", "[", ":", "self", ".", "num_query", "]", ")", "\n", "q_camids", "=", "np", ".", "asarray", "(", "self", ".", "camids", "[", ":", "self", ".", "num_query", "]", ")", "\n", "\n", "# gallery", "\n", "gf", "=", "feats", "[", "self", ".", "num_query", ":", "]", "\n", "g_pids", "=", "np", ".", "asarray", "(", "self", ".", "pids", "[", "self", ".", "num_query", ":", "]", ")", "\n", "g_camids", "=", "np", ".", "asarray", "(", "self", ".", "camids", "[", "self", ".", "num_query", ":", "]", ")", "\n", "\n", "m", ",", "n", "=", "qf", ".", "shape", "[", "0", "]", ",", "gf", ".", "shape", "[", "0", "]", "\n", "# compute the euclidian distance", "\n", "\n", "dist_mat", "=", "torch", ".", "pow", "(", "qf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "+", "torch", ".", "pow", "(", "gf", ",", "2", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist_mat", ".", "addmm_", "(", "1", ",", "-", "2", ",", "qf", ",", "gf", ".", "t", "(", ")", ")", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "dist_mat", "=", "dist_mat", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "dist_mat", "=", "dist_mat", ".", "numpy", "(", ")", "\n", "\n", "", "cmc", ",", "mAP", "=", "eval_func", "(", "dist_mat", ",", "q_pids", ",", "q_camids", ",", "g_pids", ",", "g_camids", ")", "\n", "\n", "return", "cmc", ",", "mAP", "", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.logger.setup_logger": [[8, 36], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.path.exists", "os.makedirs", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "log_name", "=", "\"log.txt\"", ")", ":", "\n", "\n", "\t", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "\n", "# do not log the results for the non-master process", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "\t\t", "return", "logger", "\n", "# redirect the output to the screen", "\n", "", "stdh", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "stdh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formater", "=", "logging", ".", "Formatter", "(", "\"%(filename)s line %(lineno)s %(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "\n", "stdh", ".", "setFormatter", "(", "formater", ")", "\n", "logger", ".", "addHandler", "(", "stdh", ")", "\n", "\n", "log_dir", "=", "save_dir", "+", "\"logs/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "\n", "# log the result to the text", "\n", "", "if", "save_dir", ":", "\n", "\t\t", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "log_name", ")", ",", "mode", "=", "'w'", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formater", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.utils.count_parameters": [[13, 19], ["numpy.sum", "numpy.prod", "param.size", "model.parameters"], "function", ["None"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "# print(model)", "\n", "# for name, param in model.named_parameters():", "\n", "# \tprint(name, param.size())", "\n", "\n", "\t", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "param", ".", "size", "(", ")", ")", "for", "param", "in", "model", ".", "parameters", "(", ")", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.utils.infer_count_parameters": [[21, 32], ["model.named_parameters", "numpy.array", "np.array.append", "numpy.sum", "numpy.prod", "param.size"], "function", ["None"], ["", "def", "infer_count_parameters", "(", "model", ")", ":", "\n", "# only in fblneck fc named fcs ", "\n", "# removes = ['fcs', 'classifier']", "\n", "\t", "params", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "\t\t", "if", "'fcs'", "in", "name", "or", "'classifier'", "in", "name", ":", "\n", "\t\t\t", "continue", "\n", "", "params", ".", "append", "(", "np", ".", "prod", "(", "param", ".", "size", "(", ")", ")", ")", "\n", "\n", "", "params", "=", "np", ".", "array", "(", "params", ")", "\n", "return", "np", ".", "sum", "(", "params", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.utils.utils.frozen_some_layers": [[34, 43], ["model.named_parameters"], "function", ["None"], ["", "def", "frozen_some_layers", "(", "keys", ",", "model", ")", ":", "\n", "# ", "\n", "\t", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "\t\t", "param", ".", "grad", "=", "False", "\n", "for", "key", "in", "keys", ":", "\n", "\t\t\t", "if", "key", "in", "name", ":", "\n", "\t\t\t\t", "param", ".", "grad", "=", "True", "\n", "break", "\n", "", "", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.model.models.BaseNet.__init__": [[23, 104], ["torch.Module.__init__", "logger.info", "backbone.OSNetwork", "head.STDNeck", "logger.info", "models.BaseNet.load_latest_state_dict", "models.BaseNet.kaiming_init_", "models.BaseNet.load_imagenet_state_dict", "backbone.CNetwork", "head.BLNeck", "backbone.MobileNetV2", "head.FBLNeck", "backbone.CDNetwork", "RuntimeError", "backbone.STDNetwork", "backbone.GDASNet", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.model.models.BaseNet.load_latest_state_dict", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.kaiming_init_", "home.repos.pwc.inspect_result.solicucu_ReID.model.models.BaseNet.load_imagenet_state_dict"], ["\t", "def", "__init__", "(", "self", ",", "num_class", ",", "cfg", "=", "None", ")", ":", "\n", "\n", "\t\t", "super", "(", "BaseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "model_name", "=", "cfg", ".", "MODEL", ".", "NAME", "\n", "neck_name", "=", "cfg", ".", "MODEL", ".", "NECK_TYPE", "\n", "bnneck", "=", "cfg", ".", "MODEL", ".", "USE_BNNECK", "\n", "\n", "self", ".", "self_ckpt", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", "\n", "self", ".", "imagenet_ckpt", "=", "cfg", ".", "MODEL", ".", "IMAGENET_CKPT", "\n", "self", ".", "start_epoch", "=", "0", "\n", "self", ".", "classification", "=", "cfg", ".", "DATA", ".", "DATASET", "in", "[", "'cifar10'", ",", "'cifar100'", ",", "'cifar100_combine'", ",", "'imagenet'", "]", "\n", "\n", "if", "model_name", "==", "\"osnet\"", ":", "\n", "\n", "\t\t\t", "self", ".", "base", "=", "OSNetwork", "(", "num_class", ",", "pretrained", "=", "False", ",", "loss", "=", "cfg", ".", "SOLVER", ".", "LOSS_NAME", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "base", ".", "final_planes", "\n", "\n", "", "elif", "model_name", "==", "\"cnet\"", ":", "\n", "\n", "\t\t\t", "self", ".", "base", "=", "CNetwork", "(", "num_class", ",", "cfg", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "base", ".", "final_planes", "\n", "\n", "", "elif", "model_name", "==", "\"mobilenetv2\"", ":", "\n", "\n", "\t\t\t", "self", ".", "base", "=", "MobileNetV2", "(", "width_mult", "=", "cfg", ".", "MODEL", ".", "WIDTH_MULT", ",", "before_gap", "=", "True", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "base", ".", "final_planes", "\n", "\n", "", "elif", "model_name", "==", "\"cdnet\"", ":", "\n", "\n", "\t\t\t", "self", ".", "base", "=", "CDNetwork", "(", "num_class", ",", "cfg", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "base", ".", "final_planes", "\n", "\n", "", "elif", "model_name", "==", "'stdnet'", ":", "\n", "\n", "\t\t\t", "self", ".", "base", "=", "STDNetwork", "(", "num_class", ",", "cfg", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "base", ".", "final_planes", "\n", "\n", "", "elif", "model_name", "==", "'gdasnet'", ":", "\n", "\n", "\t\t\t", "self", ".", "base", "=", "GDASNet", "(", "num_class", ",", "cfg", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "base", ".", "final_planes", "\n", "\n", "", "else", ":", "\n", "\n", "\t\t\t", "raise", "RuntimeError", "(", "\"{} not implement\"", ".", "format", "(", "model_name", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"final planes: {}\"", ".", "format", "(", "self", ".", "base", ".", "planes", ")", ")", "\n", "\n", "if", "neck_name", "==", "\"stdneck\"", ":", "\n", "\n", "\t\t\t", "self", ".", "neck", "=", "STDNeck", "(", "num_class", ",", "self", ".", "final_planes", ",", "dropout", "=", "cfg", ".", "TRICKS", ".", "DROPOUT", ",", "fc_dims", "=", "cfg", ".", "MODEL", ".", "FC_DIMS", ",", "use_bnneck", "=", "bnneck", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "neck", ".", "final_planes", "\n", "\n", "", "elif", "neck_name", "==", "\"blneck\"", ":", "\n", "\n", "\t\t\t", "self", ".", "neck", "=", "BLNeck", "(", "num_class", ",", "self", ".", "final_planes", ",", "dropout", "=", "cfg", ".", "TRICKS", ".", "DROPOUT", ",", "fc_dims", "=", "cfg", ".", "MODEL", ".", "FC_DIMS", ",", "classification", "=", "self", ".", "classification", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "neck", ".", "final_planes", "\n", "\n", "", "elif", "neck_name", "==", "\"fblneck\"", ":", "\n", "\n", "\t\t\t", "self", ".", "neck", "=", "FBLNeck", "(", "num_class", ",", "self", ".", "base", ".", "planes", ",", "dropout", "=", "cfg", ".", "TRICKS", ".", "DROPOUT", ",", "fc_dims", "=", "cfg", ".", "MODEL", ".", "FC_DIMS", ",", "classification", "=", "self", ".", "classification", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "neck", ".", "final_planes", "\n", "\n", "", "elif", "neck_name", "==", "\"none\"", ":", "\n", "# some network no need the neck ", "\n", "\t\t\t", "self", ".", "neck", "=", "None", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "raise", "RuntimeError", "(", "\"{} not implement\"", ".", "format", "(", "neck_name", ")", ")", "\n", "\n", "", "if", "self", ".", "self_ckpt", "!=", "\"\"", ":", "\n", "\n", "\t\t\t", "logger", ".", "info", "(", "\"load the latest checkpoint from self training\"", ")", "\n", "self", ".", "load_latest_state_dict", "(", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "kaiming_init_", "(", ")", "\n", "# pass ", "\n", "", "if", "self", ".", "imagenet_ckpt", "!=", "''", ":", "\n", "\t\t\t", "self", ".", "load_imagenet_state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.model.models.BaseNet.forward": [[106, 114], ["models.BaseNet.base", "models.BaseNet.neck"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "res", "=", "self", ".", "base", "(", "x", ")", "\n", "\n", "if", "self", ".", "neck", "is", "not", "None", ":", "\n", "\t\t\t", "res", "=", "self", ".", "neck", "(", "res", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.model.models.BaseNet.kaiming_init_": [[115, 132], ["logger.info", "models.BaseNet.modules", "isinstance", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["", "def", "kaiming_init_", "(", "self", ")", ":", "\n", "\n", "\t\t", "logger", ".", "info", "(", "\"use kaiming init the model\"", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t\t\t", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t\t\t", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t\t", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.model.models.BaseNet.load_imagenet_state_dict": [[133, 147], ["logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "models.BaseNet.state_dict", "logger.info", "models.BaseNet.data.copy_"], "methods", ["None"], ["", "", "", "", "def", "load_imagenet_state_dict", "(", "self", ")", ":", "\n", "\n", "\t\t", "logger", ".", "info", "(", "\"load the self-trained imagenet ckpt to init the model\"", ")", "\n", "\n", "state_dict", "=", "torch", ".", "load", "(", "self", ".", "imagenet_ckpt", ")", "\n", "self_state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "# remove the key with classifier ", "\n", "\n", "for", "key", "in", "self_state_dict", ":", "\n", "\t\t\t", "if", "'classifier'", "in", "key", ":", "\n", "\t\t\t\t", "continue", "\n", "", "self_state_dict", "[", "key", "]", ".", "data", ".", "copy_", "(", "state_dict", "[", "key", "]", ".", "data", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"end of loading checkpoint from {}\"", ".", "format", "(", "self", ".", "imagenet_ckpt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.model.models.BaseNet.load_best_checkpoint": [[148, 158], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "models.BaseNet.state_dict", "logger.info", "models.BaseNet.data.copy_"], "methods", ["None"], ["", "def", "load_best_checkpoint", "(", "self", ",", "path", ")", ":", "\n", "\n", "\t\t", "state_dict", "=", "torch", ".", "load", "(", "path", ")", "\n", "# self.load_state_dict(state_dict)", "\n", "# or ", "\n", "self_state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "key", "in", "self_state_dict", ":", "\n", "\t\t\t", "self_state_dict", "[", "key", "]", ".", "data", ".", "copy_", "(", "state_dict", "[", "key", "]", ".", "data", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"load the best checkpoint from {}\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.model.models.BaseNet.load_latest_state_dict": [[159, 179], ["logger.info", "glob.glob", "sorted", "int", "models.BaseNet.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "logger.info", "models.BaseNet.data.copy_", "[].split", "[].split", "ckpt_name.split"], "methods", ["None"], ["", "def", "load_latest_state_dict", "(", "self", ")", ":", "\n", "\n", "\t\t", "logger", ".", "info", "(", "\"load the latest checkpoint\"", ")", "\n", "# checkpoint", "\n", "ckpt_list", "=", "glob", ".", "glob", "(", "self", ".", "self_ckpt", "+", "\"checkpoint_*\"", ")", "\n", "ckpt_list", "=", "sorted", "(", "ckpt_list", ")", "\n", "# print(ckpt_list)", "\n", "# exit(1)", "\n", "ckpt_name", "=", "ckpt_list", "[", "-", "1", "]", "\n", "# print(ckpt_name)", "\n", "num", "=", "int", "(", "ckpt_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "self", ".", "start_epoch", "=", "num", "\n", "\n", "#self.load_state_dict(torch.load(ckpt_name)) ", "\n", "# or", "\n", "self_state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "ckpt_name", ")", "\n", "for", "key", "in", "self_state_dict", ":", "\n", "\t\t\t", "self_state_dict", "[", "key", "]", ".", "data", ".", "copy_", "(", "state_dict", "[", "key", "]", ".", "data", ")", "\n", "", "logger", ".", "info", "(", "\"load checkpoint from {}\"", ".", "format", "(", "ckpt_name", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.model.__init__.build_model": [[7, 12], ["models.BaseNet"], "function", ["None"], ["from", ".", "utils", "import", "*", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.head.imagenet_bl_neck.FBLNeck.__init__": [[16, 38], ["torch.Module.__init__", "len", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "imagenet_bl_neck.FBLNeck._make_fc_layers"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers"], ["\t", "def", "__init__", "(", "self", ",", "num_class", ",", "planes", ",", "dropout", "=", "0.", ",", "fc_dims", "=", "[", "512", "]", ",", "classification", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "FBLNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc_dims", "=", "fc_dims", "\n", "self", ".", "fc_num", "=", "len", "(", "fc_dims", ")", "\n", "self", ".", "final_planes", "=", "planes", "[", "-", "1", "]", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "classification", "=", "classification", "\n", "\n", "# for global feat  #", "\n", "self", ".", "GAP", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "self", ".", "global_fcs", "=", "self", ".", "_make_fc_layers", "(", "self", ".", "final_planes", ")", "\n", "\n", "self", ".", "final_planes", "=", "fc_dims", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "global_classifier", "=", "nn", ".", "Linear", "(", "fc_dims", "[", "-", "1", "]", ",", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.head.imagenet_bl_neck.FBLNeck._make_fc_layers": [[39, 51], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fc_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "\n", "\t\t", "layers", "=", "[", "]", "\n", "in_dim", "=", "in_planes", "\n", "for", "i", ",", "dim", "in", "enumerate", "(", "self", ".", "fc_dims", ")", ":", "\n", "\t\t\t", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "in_dim", "=", "dim", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.head.imagenet_bl_neck.FBLNeck.forward": [[52, 83], ["fmap3.size", "imagenet_bl_neck.FBLNeck.GAP", "imagenet_bl_neck.FBLNeck.view", "imagenet_bl_neck.FBLNeck.global_classifier", "imagenet_bl_neck.FBLNeck.drop", "imagenet_bl_neck.FBLNeck.global_fcs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "####### extract the fmap ", "\n", "# return x ", "\n", "\n", "\t\t", "fmap3", "=", "x", "[", "-", "1", "]", "\n", "################### global feature", "\n", "batch", "=", "fmap3", ".", "size", "(", "0", ")", "\n", "global_feat", "=", "self", ".", "GAP", "(", "fmap3", ")", "\n", "global_feat", "=", "global_feat", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "global_feat", "=", "self", ".", "drop", "(", "global_feat", ")", "\n", "\n", "# feat_fc for fc", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "global_feat_fc", "=", "self", ".", "global_fcs", "(", "global_feat", ")", "\n", "", "else", ":", "\n", "\t\t\t", "global_feat_fc", "=", "global_feat", "\n", "\n", "\n", "", "global_scores", "=", "self", ".", "global_classifier", "(", "global_feat_fc", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "\t\t\t", "return", "[", "[", "global_scores", ",", "global_feat", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "classification", ":", "\n", "# for imagenet, cifar ", "\n", "\t\t\t\t", "return", "[", "global_scores", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "return", "global_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.head.bl_neck.BLNeck.__init__": [[12, 31], ["torch.Module.__init__", "len", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "bl_neck.BLNeck._make_fc_layers"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers"], ["\t", "def", "__init__", "(", "self", ",", "num_class", ",", "in_planes", ",", "dropout", "=", "0.", ",", "fc_dims", "=", "[", "512", "]", ",", "classification", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "BLNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc_dims", "=", "fc_dims", "\n", "self", ".", "fc_num", "=", "len", "(", "fc_dims", ")", "\n", "self", ".", "final_planes", "=", "in_planes", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "classification", "=", "classification", "\n", "\n", "self", ".", "GP", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "self", ".", "fcs", "=", "self", ".", "_make_fc_layers", "(", "in_planes", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "fc_dims", "[", "-", "1", "]", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "final_planes", ",", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.head.bl_neck.BLNeck._make_fc_layers": [[32, 44], ["enumerate", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fc_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "\n", "\t\t", "layers", "=", "[", "]", "\n", "in_dim", "=", "in_planes", "\n", "for", "i", ",", "dim", "in", "enumerate", "(", "self", ".", "fc_dims", ")", ":", "\n", "\t\t\t", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "in_dim", "=", "dim", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.head.bl_neck.BLNeck.forward": [[46, 71], ["bl_neck.BLNeck.GP", "bl_neck.BLNeck.size", "bl_neck.BLNeck.view", "bl_neck.BLNeck.classifier", "bl_neck.BLNeck.drop", "bl_neck.BLNeck.fcs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "# global pooling", "\n", "\t\t", "feat", "=", "self", ".", "GP", "(", "x", ")", "\n", "batch", "=", "feat", ".", "size", "(", "0", ")", "\n", "feat", "=", "feat", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "feat", "=", "self", ".", "drop", "(", "feat", ")", "\n", "\n", "# fc for softmax ", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "feat_fc", "=", "self", ".", "fcs", "(", "feat", ")", "\n", "", "else", ":", "\n", "\t\t\t", "feat_fc", "=", "feat", "\n", "\n", "", "scores", "=", "self", ".", "classifier", "(", "feat_fc", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "\t\t\t", "return", "[", "[", "scores", ",", "feat", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "classification", ":", "\n", "\t\t\t\t", "return", "[", "scores", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "return", "feat", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.head.fbl_neck.FBLNeck.__init__": [[17, 58], ["torch.Module.__init__", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "fbl_neck.FBLNeck._make_fc_layers", "fbl_neck.FBLNeck._make_fc_layers"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers"], ["\t", "def", "__init__", "(", "self", ",", "num_class", ",", "planes", ",", "dropout", "=", "0.", ",", "fc_dims", "=", "[", "512", "]", ",", "classification", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "FBLNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc_dims", "=", "fc_dims", "\n", "self", ".", "fc_num", "=", "len", "(", "fc_dims", ")", "\n", "self", ".", "final_planes", "=", "planes", "[", "-", "1", "]", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "classification", "=", "classification", "\n", "\n", "###############################################", "\n", "# for local feat use feature map stage2 ", "\n", "self", ".", "part_num", "=", "2", "\n", "\n", "self", ".", "local_plane", "=", "planes", "[", "-", "2", "]", "\n", "# squeeze the channe into 128 ", "\n", "self", ".", "mid_plane", "=", "128", "\n", "\n", "self", ".", "squeeze", "=", "nn", ".", "Conv2d", "(", "self", ".", "local_plane", ",", "self", ".", "mid_plane", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n", "\n", "###############################################", "\n", "# for global feat  #", "\n", "self", ".", "GAP", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "in_planes", "=", "self", ".", "mid_plane", "*", "self", ".", "part_num", "+", "self", ".", "final_planes", "\n", "\n", "# self.fc = self._make_fc_layers(in_planes)", "\n", "self", ".", "local_fcs", "=", "self", ".", "_make_fc_layers", "(", "self", ".", "mid_plane", "*", "self", ".", "part_num", ")", "\n", "self", ".", "global_fcs", "=", "self", ".", "_make_fc_layers", "(", "self", ".", "final_planes", ")", "\n", "\n", "self", ".", "final_planes", "=", "in_planes", "\n", "\n", "# self.classifier = nn.Linear(fc_dims[-1], num_class)", "\n", "# ", "\n", "", "self", ".", "local_classifier", "=", "nn", ".", "Linear", "(", "fc_dims", "[", "-", "1", "]", ",", "num_class", ")", "\n", "self", ".", "global_classifier", "=", "nn", ".", "Linear", "(", "fc_dims", "[", "-", "1", "]", ",", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.head.fbl_neck.FBLNeck._make_fc_layers": [[59, 71], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fc_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "\n", "\t\t", "layers", "=", "[", "]", "\n", "in_dim", "=", "in_planes", "\n", "for", "i", ",", "dim", "in", "enumerate", "(", "self", ".", "fc_dims", ")", ":", "\n", "\t\t\t", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "in_dim", "=", "dim", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.head.fbl_neck.FBLNeck.forward": [[72, 127], ["fbl_neck.FBLNeck.squeeze", "fbl_neck.FBLNeck.chunk", "fbl_neck.FBLNeck.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fbl_neck.FBLNeck.GAP", "fbl_neck.FBLNeck.view", "fbl_neck.FBLNeck.GAP", "p.view", "fbl_neck.FBLNeck.drop", "fbl_neck.FBLNeck.drop", "fbl_neck.FBLNeck.local_classifier", "fbl_neck.FBLNeck.global_classifier", "fbl_neck.FBLNeck.global_fcs", "fbl_neck.FBLNeck.local_fcs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "####### extract the fmap ", "\n", "# return x ", "\n", "\n", "\t\t", "fmap2", "=", "x", "[", "-", "2", "]", "\n", "fmap3", "=", "x", "[", "-", "1", "]", "\n", "\n", "#################### fine-grained partition", "\n", "fmap2", "=", "self", ".", "squeeze", "(", "fmap2", ")", "\n", "parts", "=", "fmap2", ".", "chunk", "(", "self", ".", "part_num", ",", "dim", "=", "2", ")", "\n", "\n", "batch", "=", "fmap2", ".", "size", "(", "0", ")", "\n", "\n", "# gap ", "\n", "parts", "=", "[", "self", ".", "GAP", "(", "p", ")", "for", "p", "in", "parts", "]", "\n", "# reshape", "\n", "local_feats", "=", "[", "p", ".", "view", "(", "batch", ",", "-", "1", ")", "for", "p", "in", "parts", "]", "\n", "\n", "##################################### local features", "\n", "# cat the feats", "\n", "local_feats", "=", "torch", ".", "cat", "(", "local_feats", ",", "dim", "=", "-", "1", ")", "\n", "\n", "################### global feature", "\n", "\n", "global_feat", "=", "self", ".", "GAP", "(", "fmap3", ")", "\n", "global_feat", "=", "global_feat", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "local_feats", "=", "self", ".", "drop", "(", "local_feats", ")", "\n", "global_feat", "=", "self", ".", "drop", "(", "global_feat", ")", "\n", "\n", "# feat_fc for fc", "\n", "# no need for inference ", "\n", "", "if", "self", ".", "training", "or", "self", ".", "classification", ":", "\n", "\t\t\t", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t\t", "global_feat_fc", "=", "self", ".", "global_fcs", "(", "global_feat", ")", "\n", "local_feats_fc", "=", "self", ".", "local_fcs", "(", "local_feats", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "global_feat_fc", "=", "global_feat", "\n", "local_feats_fc", "=", "local_feats", "\n", "\n", "", "local_scores", "=", "self", ".", "local_classifier", "(", "local_feats_fc", ")", "\n", "global_scores", "=", "self", ".", "global_classifier", "(", "global_feat_fc", ")", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "\t\t\t", "return", "[", "[", "global_scores", ",", "global_feat", "]", ",", "[", "local_scores", ",", "local_feats", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "classification", ":", "\n", "# for imagenet, cifar ", "\n", "# return [local_scores]", "\n", "# return [global_scores]", "\n", "\t\t\t\t", "return", "[", "local_scores", "+", "global_scores", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "return", "torch", ".", "cat", "(", "[", "global_feat", ",", "local_feats", "]", ",", "dim", "=", "-", "1", ")", "\n", "# for extract features ", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.head.std_neck.STDNeck.__init__": [[9, 30], ["torch.Module.__init__", "len", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "std_neck.STDNeck._make_fc_layers", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers"], ["\t", "def", "__init__", "(", "self", ",", "num_class", ",", "in_planes", ",", "dropout", "=", "0.", ",", "fc_dims", "=", "[", "]", ",", "use_bnneck", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "STDNeck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc_dims", "=", "fc_dims", "\n", "self", ".", "use_bnneck", "=", "use_bnneck", "\n", "self", ".", "final_planes", "=", "in_planes", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "fc_num", "=", "len", "(", "fc_dims", ")", "\n", "self", ".", "GP", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "self", ".", "fc", "=", "self", ".", "_make_fc_layers", "(", "in_planes", ")", "\n", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "", "if", "self", ".", "use_bnneck", ":", "\n", "\t\t\t", "self", ".", "bnneck", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "final_planes", ")", "\n", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "final_planes", ",", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.head.std_neck.STDNeck._make_fc_layers": [[32, 47], ["enumerate", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fc_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "\n", "\t\t", "layers", "=", "[", "]", "\n", "in_dim", "=", "in_planes", "\n", "\n", "for", "i", ",", "dim", "in", "enumerate", "(", "self", ".", "fc_dims", ")", ":", "\n", "\t\t\t", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "in_dim", "=", "dim", "\n", "\n", "", "self", ".", "final_planes", "=", "in_dim", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.head.std_neck.STDNeck.forward": [[49, 75], ["std_neck.STDNeck.GP", "std_neck.STDNeck.size", "std_neck.STDNeck.view", "std_neck.STDNeck.classifier", "std_neck.STDNeck.fc", "std_neck.STDNeck.drop", "std_neck.STDNeck.bnneck"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "# need a featrue map before GAP", "\n", "\t\t", "feat", "=", "self", ".", "GP", "(", "x", ")", "\n", "batch", "=", "feat", ".", "size", "(", "0", ")", "\n", "feat", "=", "feat", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "feat", "=", "self", ".", "fc", "(", "feat", ")", "\n", "# dropout", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "feat", "=", "self", ".", "drop", "(", "feat", ")", "\n", "\n", "", "if", "self", ".", "use_bnneck", ":", "\n", "# bn_feat = torch.nn.functional.normalize(feat, dim = 1, p = 2)", "\n", "\t\t\t", "bn_feat", "=", "self", ".", "bnneck", "(", "feat", ")", "# return for triplet loss", "\n", "", "else", ":", "\n", "\t\t\t", "bn_feat", "=", "feat", "\n", "\n", "", "scores", "=", "self", ".", "classifier", "(", "feat", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "# return the result in the form of list", "\n", "\t\t\t", "return", "[", "[", "scores", ",", "bn_feat", "]", "]", "\n", "", "else", ":", "\n", "\t\t\t", "return", "bn_feat", "\n", "# return [scores] # for classification", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.mobilenetv2.ConvBNReLU.__init__": [[26, 33], ["torch.nn.Sequential.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU6"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "group", "=", "1", ")", ":", "\n", "\n", "\t\t", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", "\n", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "groups", "=", "group", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.mobilenetv2.InvertedResidual.__init__": [[37, 59], ["torch.nn.Module.__init__", "int", "layers.extend", "torch.nn.Sequential", "round", "layers.append", "mobilenetv2.ConvBNReLU", "mobilenetv2.ConvBNReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "exapned_ratio", ")", ":", "\n", "\n", "\t\t", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "int", "(", "round", "(", "in_planes", "*", "exapned_ratio", ")", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "in_planes", "==", "out_planes", "\n", "\n", "layers", "=", "[", "]", "\n", "if", "exapned_ratio", "!=", "1", ":", "\n", "# pw", "\n", "\t\t\t", "layers", ".", "append", "(", "ConvBNReLU", "(", "in_planes", ",", "hidden_dim", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "layers", ".", "extend", "(", "[", "\n", "# dw", "\n", "ConvBNReLU", "(", "hidden_dim", ",", "hidden_dim", ",", "stride", "=", "stride", ",", "group", "=", "hidden_dim", ")", ",", "\n", "# pw - linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "out_planes", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "]", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.mobilenetv2.InvertedResidual.forward": [[60, 66], ["mobilenetv2.InvertedResidual.conv", "mobilenetv2.InvertedResidual.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "if", "self", ".", "use_res_connect", ":", "\n", "\t\t\t", "return", "x", "+", "self", ".", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "conv", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.mobilenetv2.MobileNetV2.__init__": [[79, 143], ["torch.nn.Module.__init__", "mobilenetv2._make_divisible", "mobilenetv2._make_divisible", "features.append", "torch.nn.Sequential", "torch.nn.AdaptiveAvgPool2d", "ValueError", "mobilenetv2.ConvBNReLU", "mobilenetv2._make_divisible", "range", "mobilenetv2.ConvBNReLU", "print", "mobilenetv2.MobileNetV2.load_state_dicts", "len", "len", "features.append", "block"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.mobilenetv2._make_divisible", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.mobilenetv2._make_divisible", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.mobilenetv2._make_divisible", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.mobilenetv2.MobileNetV2.load_state_dicts"], ["\t", "def", "__init__", "(", "self", ",", "\n", "width_mult", "=", "1.0", ",", "\n", "inverted_residual_setting", "=", "None", ",", "\n", "round_nearest", "=", "8", ",", "\n", "block", "=", "None", ",", "\n", "pretrained", "=", "False", ",", "\n", "before_gap", "=", "False", ")", ":", "\n", "\t\t", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "is_before_gap", "=", "before_gap", "\n", "\n", "if", "block", "is", "None", ":", "\n", "\t\t\t", "block", "=", "InvertedResidual", "\n", "", "input_channel", "=", "32", "\n", "last_channel", "=", "1024", "\n", "self", ".", "planes", "=", "last_channel", "\n", "\n", "if", "inverted_residual_setting", "is", "None", ":", "\n", "\t\t\t", "inverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "# expansion out_channel, repeated number, stride ", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# check the inverted residual setting", "\n", "", "if", "len", "(", "inverted_residual_setting", ")", "==", "0", "or", "len", "(", "inverted_residual_setting", "[", "0", "]", ")", "!=", "4", ":", "\n", "\t\t\t", "raise", "ValueError", "(", "\"inverted_residual_setting can not be None and each item must has four elem, got {}\"", ".", "format", "(", "inverted_residual_setting", ")", ")", "\n", "\n", "# build first layer", "\n", "# default is 32, can be ajust by width_multi", "\n", "", "input_channel", "=", "_make_divisible", "(", "input_channel", "*", "width_mult", ",", "round_nearest", ")", "\n", "\n", "self", ".", "last_channel", "=", "_make_divisible", "(", "last_channel", ",", "round_nearest", ")", "\n", "# self.last_channel = _make_divisible(last_channel * max(1.0, width_mult), round_nearest)", "\n", "self", ".", "final_planes", "=", "self", ".", "last_channel", "\n", "\n", "features", "=", "[", "ConvBNReLU", "(", "3", ",", "input_channel", ",", "stride", "=", "2", ")", "]", "\n", "\n", "# build inverted redidual", "\n", "# t: expansion_ratio, c: out_planes, n: repeated number, s: stride", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "inverted_residual_setting", ":", "\n", "\t\t\t", "output_channel", "=", "_make_divisible", "(", "c", "*", "width_mult", ",", "round_nearest", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "\t\t\t\t", "stride", "=", "s", "if", "i", "==", "0", "else", "1", "\n", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "stride", ",", "exapned_ratio", "=", "t", ")", ")", "\n", "input_channel", "=", "output_channel", "\n", "\n", "# building last layer", "\n", "", "", "features", ".", "append", "(", "ConvBNReLU", "(", "input_channel", ",", "self", ".", "last_channel", ",", "kernel_size", "=", "1", ")", ")", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "features", ")", "\n", "# self.GAP = nn.AvgPool2d((8,4))", "\n", "self", ".", "GAP", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "if", "self", ".", "pretrained", ":", "\n", "\t\t\t", "print", "(", "\"use pretrained model from imagenet\"", ")", "\n", "self", ".", "load_state_dicts", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.mobilenetv2.MobileNetV2._forward_impl": [[144, 151], ["mobilenetv2.MobileNetV2.features", "mobilenetv2.MobileNetV2.GAP"], "methods", ["None"], ["", "", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "if", "self", ".", "is_before_gap", ":", "\n", "\t\t\t", "return", "x", "\n", "", "else", ":", "\n", "\t\t\t", "return", "self", ".", "GAP", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.mobilenetv2.MobileNetV2.forward": [[152, 155], ["mobilenetv2.MobileNetV2._forward_impl"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.backbone.mobilenetv2.MobileNetV2._forward_impl"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.mobilenetv2.MobileNetV2.load_state_dicts": [[156, 163], ["torch.utils.model_zoo.load_url", "mobilenetv2.MobileNetV2.state_dict"], "methods", ["None"], ["", "def", "load_state_dicts", "(", "self", ")", ":", "\n", "\n", "\t\t", "state_dicts", "=", "load_url", "(", "model_url", ",", "progress", "=", "True", ")", "\n", "self_state_dicts", "=", "self", ".", "state_dict", "(", ")", "\n", "\n", "for", "key", "in", "self_state_dicts", ":", "\n", "\t\t\t", "self_state_dicts", "[", "key", "]", "=", "state_dicts", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.mobilenetv2._make_divisible": [[13, 23], ["max", "int"], "function", ["None"], ["def", "_make_divisible", "(", "v", ",", "divisor", ",", "min_value", "=", "None", ")", ":", "\n", "\n", "\t", "if", "min_value", "is", "None", ":", "\n", "\t\t", "min_value", "=", "divisor", "\n", "# v + divisor/2 is for upper round", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "# Make sure that round down does not go down by more than 10%.", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "\t\t", "new_v", "+=", "divisor", "\n", "", "return", "new_v", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.cnet.CNetwork.__init__": [[18, 70], ["nn.Module.__init__", "len", "StdStem", "nn.ModuleList", "len", "range", "cnet.CNetwork._make_layers", "nn.AdaptiveAvgPool2d", "cnet.make_divisible", "open", "json.load", "cnet.CNetwork._make_layers", "cnet.CNetwork.cells.append", "cnet.CNetwork._make_fc_layers", "nn.Linear", "DownSample"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.make_divisible", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers"], ["\t", "def", "__init__", "(", "self", ",", "num_class", ",", "cfg", ")", ":", "\n", "\n", "\t\t", "super", "(", "CNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "stages", "=", "cfg", ".", "MODEL", ".", "STAGES", "\n", "self", ".", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "self", ".", "multiplier", "=", "cfg", ".", "MODEL", ".", "WIDTH_MULT", "\n", "self", ".", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", "\n", "self", ".", "genotype", "=", "cfg", ".", "MODEL", ".", "GENOTYPE", "\n", "self", ".", "adaption_fusion", "=", "cfg", ".", "MODEL", ".", "ADAPTION_FUSION", "\n", "self", ".", "fc_dims", "=", "cfg", ".", "MODEL", ".", "FC_DIMS", "\n", "self", ".", "fc_num", "=", "len", "(", "self", ".", "fc_dims", ")", "\n", "self", ".", "before_gap", "=", "True", "\n", "# return each stages feat ", "\n", "self", ".", "extract_stages_feats", "=", "cfg", ".", "MODEL", ".", "NECK_TYPE", "==", "\"fblneck\"", "\n", "# change the channel for scaling ", "\n", "self", ".", "planes", "=", "[", "make_divisible", "(", "n", "*", "self", ".", "multiplier", ")", "for", "n", "in", "cfg", ".", "MODEL", ".", "PLANES", "]", "\n", "self", ".", "final_planes", "=", "512", "\n", "# self.final_planes = 1024", "\n", "\n", "self", ".", "stem", "=", "StdStem", "(", "3", ",", "self", ".", "planes", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "\n", "# read the genotype ", "\n", "# self.genotype_file = cfg.OUTPUT.DIRS + self.genotype", "\n", "self", ".", "genotype_file", "=", "\"../geno/\"", "+", "self", ".", "genotype", "\n", "\n", "with", "open", "(", "self", ".", "genotype_file", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "self", ".", "geno", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "kernels", "=", "self", ".", "geno", "[", "\"layers\"", "]", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "num", "=", "len", "(", "self", ".", "stages", ")", "\n", "\n", "for", "i", "in", "range", "(", "num", "-", "1", ")", ":", "\n", "\t\t\t", "kernel_list", "=", "kernels", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", "\n", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "kernel_list", ")", "\n", "self", ".", "cells", ".", "append", "(", "DownSample", "(", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "-", "1", "]", ",", "self", ".", "planes", "[", "-", "2", "]", ",", "self", ".", "planes", "[", "-", "1", "]", ",", "kernels", "[", "-", "2", ":", "]", ")", "\n", "\n", "# gap", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# fully connected layer ", "\n", "self", ".", "final_planes", "=", "self", ".", "planes", "[", "-", "1", "]", "\n", "# if is before gap no need setup fc ", "\n", "if", "self", ".", "fc_num", ">", "0", "and", "not", "self", ".", "before_gap", ":", "\n", "\t\t\t", "self", ".", "fc", "=", "self", ".", "_make_fc_layers", "(", "self", ".", "planes", "[", "-", "1", "]", ")", "\n", "\n", "", "if", "not", "self", ".", "before_gap", ":", "\n", "\t\t\t", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "final_planes", ",", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.cnet.CNetwork._make_layers": [[71, 81], ["cells.append", "range", "CBlock", "cells.append", "CBlock"], "methods", ["None"], ["", "", "def", "_make_layers", "(", "self", ",", "num_cells", ",", "in_planes", ",", "out_planes", ",", "kernel_list", ")", ":", "\n", "\n", "\t\t", "cells", "=", "[", "]", "\n", "k1", ",", "k2", "=", "kernel_list", "[", "0", "]", "\n", "cells", ".", "append", "(", "CBlock", "(", "in_planes", ",", "out_planes", ",", "k1", ",", "k2", ",", "adaptionfuse", "=", "self", ".", "adaption_fusion", ")", ")", "\n", "for", "i", "in", "range", "(", "num_cells", "-", "1", ")", ":", "\n", "\t\t\t", "k1", ",", "k2", "=", "kernel_list", "[", "i", "+", "1", "]", "\n", "cells", ".", "append", "(", "CBlock", "(", "out_planes", ",", "out_planes", ",", "k1", ",", "k2", ",", "adaptionfuse", "=", "self", ".", "adaption_fusion", ")", ")", "\n", "\n", "", "return", "cells", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.cnet.CNetwork._make_fc_layers": [[82, 96], ["nn.Sequential", "layers.append", "layers.append", "layers.append", "nn.Linear", "nn.BatchNorm1d", "nn.ReLU"], "methods", ["None"], ["", "def", "_make_fc_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "\n", "\t\t", "layers", "=", "[", "]", "\n", "in_dim", "=", "in_planes", "\n", "\n", "for", "dim", "in", "self", ".", "fc_dims", ":", "\n", "\n", "\t\t\t", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "in_dim", "=", "dim", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.cnet.CNetwork.forward": [[98, 133], ["cnet.CNetwork.stem", "cnet.CNetwork.gap", "cnet.CNetwork.size", "cnet.CNetwork.view", "cnet.CNetwork.classifier", "cell", "cnet.CNetwork.fc", "feature_maps.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# c1,c2,d1,c1,c2,d2,c1,c2", "\n", "\t\t", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "stages", "=", "[", "3", ",", "6", ",", "8", "]", "\n", "i", "=", "0", "\n", "feature_maps", "=", "[", "]", "\n", "for", "cell", "in", "self", ".", "cells", ":", "\n", "\n", "\t\t\t", "x", "=", "cell", "(", "x", ")", "\n", "i", "+=", "1", "\n", "if", "self", ".", "extract_stages_feats", "and", "i", "in", "stages", ":", "\n", "\t\t\t\t", "feature_maps", ".", "append", "(", "x", ")", "\n", "\n", "# return the feature and no need to return below x ", "\n", "", "", "if", "self", ".", "extract_stages_feats", ":", "\n", "\t\t\t", "return", "feature_maps", "\n", "\n", "", "if", "self", ".", "before_gap", ":", "\n", "\t\t\t", "return", "x", "\n", "# gap ", "\n", "", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "\n", "# reshape the shape", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "\t\t\t", "return", "x", "\n", "\n", "", "score", "=", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "return", "[", "[", "score", ",", "x", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.cnet.make_divisible": [[12, 15], ["int"], "function", ["None"], ["def", "make_divisible", "(", "num", ",", "divisor", "=", "4", ")", ":", "\n", "\n", "\t", "return", "int", "(", "(", "num", "//", "divisor", ")", "*", "divisor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.ConvLayer.__init__": [[31, 56], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.InstanceNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "groups", "=", "1", ",", "\n", "IN", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "ConvLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", "\n", ")", "\n", "if", "IN", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.ConvLayer.forward": [[57, 62], ["osnet.ConvLayer.conv", "osnet.ConvLayer.bn", "osnet.ConvLayer.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.Conv1x1.__init__": [[67, 80], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv1x1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.Conv1x1.forward": [[81, 86], ["osnet.Conv1x1.conv", "osnet.Conv1x1.bn", "osnet.Conv1x1.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.Conv1x1Linear.__init__": [[91, 97], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv1x1Linear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.Conv1x1Linear.forward": [[98, 102], ["osnet.Conv1x1Linear.conv", "osnet.Conv1x1Linear.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.Conv3x3.__init__": [[107, 120], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "stride", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "groups", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.Conv3x3.forward": [[121, 126], ["osnet.Conv3x3.conv", "osnet.Conv3x3.bn", "osnet.Conv3x3.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.LightConv3x3.__init__": [[133, 149], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "LightConv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "out_channels", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.LightConv3x3.forward": [[150, 157], ["osnet.LightConv3x3.conv1", "osnet.LightConv3x3.conv2", "osnet.LightConv3x3.bn", "osnet.LightConv3x3.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.ChannelGate.__init__": [[165, 206], ["torch.nn.Module.__init__", "torch.nn.AdaptiveAvgPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.LayerNorm", "torch.nn.Sigmoid", "torch.nn.ReLU", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "num_gates", "=", "None", ",", "\n", "return_gates", "=", "False", ",", "\n", "gate_activation", "=", "'sigmoid'", ",", "\n", "reduction", "=", "16", ",", "\n", "layer_norm", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "ChannelGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "num_gates", "is", "None", ":", "\n", "            ", "num_gates", "=", "in_channels", "\n", "", "self", ".", "return_gates", "=", "return_gates", "\n", "self", ".", "global_avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "in_channels", "//", "reduction", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "self", ".", "norm1", "=", "None", "\n", "if", "layer_norm", ":", "\n", "            ", "self", ".", "norm1", "=", "nn", ".", "LayerNorm", "(", "(", "in_channels", "//", "reduction", ",", "1", ",", "1", ")", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "//", "reduction", ",", "\n", "num_gates", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "padding", "=", "0", "\n", ")", "\n", "if", "gate_activation", "==", "'sigmoid'", ":", "\n", "            ", "self", ".", "gate_activation", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "elif", "gate_activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "gate_activation", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "", "elif", "gate_activation", "==", "'linear'", ":", "\n", "            ", "self", ".", "gate_activation", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Unknown gate activation: {}\"", ".", "format", "(", "gate_activation", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.ChannelGate.forward": [[208, 221], ["osnet.ChannelGate.global_avgpool", "osnet.ChannelGate.fc1", "osnet.ChannelGate.relu", "osnet.ChannelGate.fc2", "osnet.ChannelGate.norm1", "osnet.ChannelGate.gate_activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input", "=", "x", "\n", "x", "=", "self", ".", "global_avgpool", "(", "x", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "if", "self", ".", "norm1", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "if", "self", ".", "gate_activation", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "gate_activation", "(", "x", ")", "\n", "", "if", "self", ".", "return_gates", ":", "\n", "            ", "return", "x", "\n", "", "return", "input", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.OSBlock.__init__": [[226, 262], ["torch.nn.Module.__init__", "osnet.Conv1x1", "osnet.LightConv3x3", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "osnet.ChannelGate", "osnet.Conv1x1Linear", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.LightConv3x3", "osnet.Conv1x1Linear", "torch.nn.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "IN", "=", "False", ",", "\n", "bottleneck_reduction", "=", "4", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "OSBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_channels", "=", "out_channels", "//", "bottleneck_reduction", "\n", "self", ".", "conv1", "=", "Conv1x1", "(", "in_channels", ",", "mid_channels", ")", "\n", "self", ".", "conv2a", "=", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", "\n", "self", ".", "conv2b", "=", "nn", ".", "Sequential", "(", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", ")", "\n", "self", ".", "conv2c", "=", "nn", ".", "Sequential", "(", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", ")", "\n", "self", ".", "conv2d", "=", "nn", ".", "Sequential", "(", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", "LightConv3x3", "(", "mid_channels", ",", "mid_channels", ")", ",", "\n", ")", "\n", "# note the reduction is change ", "\n", "self", ".", "gate", "=", "ChannelGate", "(", "mid_channels", ",", "reduction", "=", "4", ")", "\n", "self", ".", "conv3", "=", "Conv1x1Linear", "(", "mid_channels", ",", "out_channels", ")", "\n", "self", ".", "downsample", "=", "None", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "downsample", "=", "Conv1x1Linear", "(", "in_channels", ",", "out_channels", ")", "\n", "", "self", ".", "IN", "=", "None", "\n", "if", "IN", ":", "\n", "            ", "self", ".", "IN", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.OSBlock.forward": [[263, 279], ["osnet.OSBlock.conv1", "osnet.OSBlock.conv2a", "osnet.OSBlock.conv2b", "osnet.OSBlock.conv2c", "osnet.OSBlock.conv2d", "osnet.OSBlock.conv3", "torch.nn.functional.relu", "osnet.OSBlock.gate", "osnet.OSBlock.downsample", "osnet.OSBlock.IN", "osnet.OSBlock.gate", "osnet.OSBlock.gate", "osnet.OSBlock.gate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "x1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x2a", "=", "self", ".", "conv2a", "(", "x1", ")", "\n", "x2b", "=", "self", ".", "conv2b", "(", "x1", ")", "\n", "x2c", "=", "self", ".", "conv2c", "(", "x1", ")", "\n", "x2d", "=", "self", ".", "conv2d", "(", "x1", ")", "\n", "x2", "=", "self", ".", "gate", "(", "x2a", ")", "+", "self", ".", "gate", "(", "x2b", ")", "+", "self", ".", "gate", "(", "x2c", ")", "+", "self", ".", "gate", "(", "x2d", ")", "\n", "\n", "x3", "=", "self", ".", "conv3", "(", "x2", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "identity", ")", "\n", "", "out", "=", "x3", "+", "identity", "\n", "if", "self", ".", "IN", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "IN", "(", "out", ")", "\n", "", "return", "F", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.OSNet.__init__": [[293, 351], ["torch.nn.Module.__init__", "len", "osnet.ConvLayer", "torch.nn.MaxPool2d", "osnet.OSNet._make_layer", "osnet.OSNet._make_layer", "osnet.OSNet._make_layer", "torch.nn.Linear", "len", "len"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.OSNet._make_layer", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.OSNet._make_layer", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.OSNet._make_layer"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_classes", ",", "\n", "blocks", ",", "\n", "layers", ",", "\n", "channels", ",", "\n", "feature_dim", "=", "512", ",", "\n", "loss", "=", "'softmax'", ",", "\n", "IN", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "super", "(", "OSNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_blocks", "=", "len", "(", "blocks", ")", "\n", "assert", "num_blocks", "==", "len", "(", "layers", ")", "\n", "assert", "num_blocks", "==", "len", "(", "channels", ")", "-", "1", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "feature_dim", "=", "feature_dim", "\n", "\n", "# convolutional backbone", "\n", "self", ".", "conv1", "=", "ConvLayer", "(", "3", ",", "channels", "[", "0", "]", ",", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "IN", "=", "IN", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "conv2", "=", "self", ".", "_make_layer", "(", "\n", "blocks", "[", "0", "]", ",", "\n", "layers", "[", "0", "]", ",", "\n", "channels", "[", "0", "]", ",", "\n", "channels", "[", "1", "]", ",", "\n", "reduce_spatial_size", "=", "True", ",", "\n", "IN", "=", "IN", "\n", ")", "\n", "self", ".", "conv3", "=", "self", ".", "_make_layer", "(", "\n", "blocks", "[", "1", "]", ",", "\n", "layers", "[", "1", "]", ",", "\n", "channels", "[", "1", "]", ",", "\n", "channels", "[", "2", "]", ",", "\n", "reduce_spatial_size", "=", "True", "\n", ")", "\n", "self", ".", "conv4", "=", "self", ".", "_make_layer", "(", "\n", "blocks", "[", "2", "]", ",", "\n", "layers", "[", "2", "]", ",", "\n", "channels", "[", "2", "]", ",", "\n", "channels", "[", "3", "]", ",", "\n", "reduce_spatial_size", "=", "False", "\n", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "feature_dim", "\n", "self", ".", "planes", "=", "channels", "\n", "\n", "# if use fblneck, follows conv_fc can be removed", "\n", "\"\"\"\n        self.conv5 = Conv1x1(channels[3], self.feature_dim) \n        self.global_avgpool = nn.AdaptiveAvgPool2d(1)\n        # fully connected layer\n        self.fc = self._construct_fc_layer(\n            self.feature_dim, channels[3], dropout_p=None\n        )\"\"\"", "\n", "# identity classification layer", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "feature_dim", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.OSNet._make_layer": [[354, 378], ["layers.append", "range", "torch.nn.Sequential", "block", "layers.append", "layers.append", "block", "torch.nn.Sequential", "osnet.Conv1x1", "torch.nn.AvgPool2d"], "methods", ["None"], ["", "def", "_make_layer", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layer", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "reduce_spatial_size", ",", "\n", "IN", "=", "False", "\n", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "\n", "layers", ".", "append", "(", "block", "(", "in_channels", ",", "out_channels", ",", "IN", "=", "IN", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "layer", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "out_channels", ",", "out_channels", ",", "IN", "=", "IN", ")", ")", "\n", "\n", "", "if", "reduce_spatial_size", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "nn", ".", "Sequential", "(", "\n", "Conv1x1", "(", "out_channels", ",", "out_channels", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "2", ")", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.OSNet._construct_fc_layer": [[379, 399], ["isinstance", "torch.nn.Sequential", "layers.append", "layers.append", "layers.append", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "layers.append", "torch.nn.Dropout"], "methods", ["None"], ["", "def", "_construct_fc_layer", "(", "self", ",", "fc_dims", ",", "input_dim", ",", "dropout_p", "=", "None", ")", ":", "\n", "        ", "if", "fc_dims", "is", "None", "or", "fc_dims", "<", "0", ":", "\n", "            ", "self", ".", "feature_dim", "=", "input_dim", "\n", "return", "None", "\n", "\n", "", "if", "isinstance", "(", "fc_dims", ",", "int", ")", ":", "\n", "            ", "fc_dims", "=", "[", "fc_dims", "]", "\n", "\n", "", "layers", "=", "[", "]", "\n", "for", "dim", "in", "fc_dims", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "input_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "if", "dropout_p", "is", "not", "None", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "dropout_p", ")", ")", "\n", "", "input_dim", "=", "dim", "\n", "\n", "", "self", ".", "feature_dim", "=", "fc_dims", "[", "-", "1", "]", "\n", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.OSNet._init_params": [[400, 421], ["osnet.OSNet.modules", "isinstance", "torch.nn.init.kaiming_normal_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.constant_", "torch.nn.init.constant_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_init_params", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "\n", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", "\n", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.OSNet.featuremaps": [[422, 434], ["osnet.OSNet.conv1", "osnet.OSNet.maxpool", "osnet.OSNet.conv2", "osnet.OSNet.conv3", "fmap.append", "osnet.OSNet.conv4", "fmap.append"], "methods", ["None"], ["", "", "", "", "def", "featuremaps", "(", "self", ",", "x", ")", ":", "\n", "        ", "fmap", "=", "[", "]", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "fmap", ".", "append", "(", "x", ")", "# fmap2", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "fmap", ".", "append", "(", "x", ")", "# fmap3", "\n", "# x = self.conv5(x) # conv1x1", "\n", "# return x", "\n", "return", "fmap", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.OSNet.forward": [[435, 457], ["osnet.OSNet.featuremaps", "osnet.OSNet.global_avgpool", "osnet.OSNet.view", "osnet.OSNet.classifier", "osnet.OSNet.size", "osnet.OSNet.fc", "KeyError"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.OSNet.featuremaps"], ["", "def", "forward", "(", "self", ",", "x", ",", "return_featuremaps", "=", "True", ")", ":", "\n", "        ", "x", "=", "self", ".", "featuremaps", "(", "x", ")", "\n", "# if use stdneck or blneck", "\n", "# return x[-1]", "\n", "if", "return_featuremaps", ":", "\n", "            ", "return", "x", "\n", "\n", "", "v", "=", "self", ".", "global_avgpool", "(", "x", ")", "\n", "v", "=", "v", ".", "view", "(", "v", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "fc", "is", "not", "None", ":", "\n", "            ", "v", "=", "self", ".", "fc", "(", "v", ")", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "v", "\n", "", "y", "=", "self", ".", "classifier", "(", "v", ")", "\n", "if", "self", ".", "loss", "==", "'softmax'", ":", "\n", "            ", "return", "[", "[", "y", ",", "v", "]", "]", "\n", "# origin is triplet", "\n", "", "elif", "self", ".", "loss", "==", "'softmax_triplet'", ":", "\n", "# v = self.bn(v)", "\n", "            ", "return", "[", "[", "y", ",", "v", "]", "]", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\"Unsupported loss: {}\"", ".", "format", "(", "self", ".", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.init_pretrained_weights": [[459, 534], ["osnet.init_pretrained_weights._get_torch_home"], "function", ["None"], ["", "", "", "def", "init_pretrained_weights", "(", "model", ",", "key", "=", "''", ")", ":", "\n", "    ", "\"\"\"Initializes model with pretrained weights.\n    \n    Layers that don't match with pretrained layers in name or size are kept unchanged.\n    \"\"\"", "\n", "import", "os", "\n", "import", "errno", "\n", "import", "gdown", "\n", "from", "collections", "import", "OrderedDict", "\n", "\n", "def", "_get_torch_home", "(", ")", ":", "\n", "        ", "ENV_TORCH_HOME", "=", "'TORCH_HOME'", "\n", "ENV_XDG_CACHE_HOME", "=", "'XDG_CACHE_HOME'", "\n", "DEFAULT_CACHE_DIR", "=", "'~/.cache'", "\n", "torch_home", "=", "os", ".", "path", ".", "expanduser", "(", "\n", "os", ".", "getenv", "(", "\n", "ENV_TORCH_HOME", ",", "\n", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "getenv", "(", "ENV_XDG_CACHE_HOME", ",", "DEFAULT_CACHE_DIR", ")", ",", "'torch'", "\n", ")", "\n", ")", "\n", ")", "\n", "return", "torch_home", "\n", "\n", "", "torch_home", "=", "_get_torch_home", "(", ")", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "torch_home", ",", "'checkpoints'", ")", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "# Directory already exists, ignore.", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "# Unexpected OSError, re-raise.", "\n", "            ", "raise", "\n", "", "", "filename", "=", "key", "+", "'_imagenet.pth'", "\n", "cached_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", ":", "\n", "        ", "gdown", ".", "download", "(", "pretrained_urls", "[", "key", "]", ",", "cached_file", ",", "quiet", "=", "False", ")", "\n", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "cached_file", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "matched_layers", ",", "discarded_layers", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "            ", "k", "=", "k", "[", "7", ":", "]", "# discard module.", "\n", "\n", "", "if", "k", "in", "model_dict", "and", "model_dict", "[", "k", "]", ".", "size", "(", ")", "==", "v", ".", "size", "(", ")", ":", "\n", "            ", "new_state_dict", "[", "k", "]", "=", "v", "\n", "matched_layers", ".", "append", "(", "k", ")", "\n", "", "else", ":", "\n", "            ", "discarded_layers", ".", "append", "(", "k", ")", "\n", "\n", "", "", "model_dict", ".", "update", "(", "new_state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "\n", "if", "len", "(", "matched_layers", ")", "==", "0", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "'The pretrained weights from \"{}\" cannot be loaded, '", "\n", "'please check the key names manually '", "\n", "'(** ignored and continue **)'", ".", "format", "(", "cached_file", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\n", "'Successfully loaded imagenet pretrained weights from \"{}\"'", ".", "\n", "format", "(", "cached_file", ")", "\n", ")", "\n", "if", "len", "(", "discarded_layers", ")", ">", "0", ":", "\n", "            ", "print", "(", "\n", "'** The following layers are discarded '", "\n", "'due to unmatched keys or layer size: {}'", ".", "\n", "format", "(", "discarded_layers", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.osnet_x1_0": [[540, 554], ["osnet.OSNet", "osnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.init_pretrained_weights"], ["", "", "", "def", "osnet_x1_0", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "True", ",", "loss", "=", "'softmax'", ",", "**", "kwargs", ")", ":", "\n", "# standard size (width x1.0)", "\n", "    ", "model", "=", "OSNet", "(", "\n", "num_classes", ",", "\n", "blocks", "=", "[", "OSBlock", ",", "OSBlock", ",", "OSBlock", "]", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "channels", "=", "[", "64", ",", "256", ",", "384", ",", "512", "]", ",", "\n", "# channels = [32, 64, 128, 256],", "\n", "loss", "=", "loss", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "key", "=", "'osnet_x1_0'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.osnet_x0_75": [[556, 569], ["osnet.OSNet", "osnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.init_pretrained_weights"], ["", "def", "osnet_x0_75", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "True", ",", "loss", "=", "'softmax'", ",", "**", "kwargs", ")", ":", "\n", "# medium size (width x0.75)", "\n", "    ", "model", "=", "OSNet", "(", "\n", "num_classes", ",", "\n", "blocks", "=", "[", "OSBlock", ",", "OSBlock", ",", "OSBlock", "]", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "channels", "=", "[", "48", ",", "192", ",", "288", ",", "384", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "key", "=", "'osnet_x0_75'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.osnet_x0_5": [[571, 584], ["osnet.OSNet", "osnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.init_pretrained_weights"], ["", "def", "osnet_x0_5", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "True", ",", "loss", "=", "'softmax'", ",", "**", "kwargs", ")", ":", "\n", "# tiny size (width x0.5)", "\n", "    ", "model", "=", "OSNet", "(", "\n", "num_classes", ",", "\n", "blocks", "=", "[", "OSBlock", ",", "OSBlock", ",", "OSBlock", "]", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "channels", "=", "[", "32", ",", "128", ",", "192", ",", "256", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "key", "=", "'osnet_x0_5'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.osnet_x0_25": [[586, 599], ["osnet.OSNet", "osnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.init_pretrained_weights"], ["", "def", "osnet_x0_25", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "True", ",", "loss", "=", "'softmax'", ",", "**", "kwargs", ")", ":", "\n", "# very tiny size (width x0.25)", "\n", "    ", "model", "=", "OSNet", "(", "\n", "num_classes", ",", "\n", "blocks", "=", "[", "OSBlock", ",", "OSBlock", ",", "OSBlock", "]", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "channels", "=", "[", "16", ",", "64", ",", "96", ",", "128", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "key", "=", "'osnet_x0_25'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.osnet_ibn_x1_0": [[601, 618], ["osnet.OSNet", "osnet.init_pretrained_weights"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.init_pretrained_weights"], ["", "def", "osnet_ibn_x1_0", "(", "\n", "num_classes", "=", "1000", ",", "pretrained", "=", "True", ",", "loss", "=", "'softmax'", ",", "**", "kwargs", "\n", ")", ":", "\n", "# standard size (width x1.0) + IBN layer", "\n", "# Ref: Pan et al. Two at Once: Enhancing Learning and Generalization Capacities via IBN-Net. ECCV, 2018.", "\n", "    ", "model", "=", "OSNet", "(", "\n", "num_classes", ",", "\n", "blocks", "=", "[", "OSBlock", ",", "OSBlock", ",", "OSBlock", "]", ",", "\n", "layers", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "channels", "=", "[", "64", ",", "256", ",", "384", ",", "512", "]", ",", "\n", "loss", "=", "loss", ",", "\n", "IN", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "pretrained", ":", "\n", "        ", "init_pretrained_weights", "(", "model", ",", "key", "=", "'osnet_ibn_x1_0'", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.count_parameters": [[620, 627], ["numpy.sum", "numpy.prod", "param.size", "model.parameters"], "function", ["None"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "# see the param according the model ", "\n", "# print(model)", "\n", "# for name, param in model.named_parameters():", "\n", "#   print(name, param.size())", "\n", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "prod", "(", "param", ".", "size", "(", ")", ")", "for", "param", "in", "model", ".", "parameters", "(", ")", ")", "/", "1e6", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.std_cdnet.STDBlock.__init__": [[12, 28], ["torch.Module.__init__", "Conv1x1BNReLU", "std_cdnet.STDBlock.make_layers", "std_cdnet.STDBlock.make_layers", "Conv1x1BN", "torch.ReLU", "torch.ReLU", "Conv1x1BN"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.std_cdnet.STDBlock.make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.std_cdnet.STDBlock.make_layers"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "k1", ",", "k2", ",", "reduction", "=", "4", ")", ":", "\n", "\n", "\t\t", "super", "(", "STDBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_planes", "=", "out_planes", "//", "reduction", "\n", "\n", "self", ".", "squeeze", "=", "Conv1x1BNReLU", "(", "in_planes", ",", "mid_planes", ")", "\n", "self", ".", "conv1", "=", "self", ".", "make_layers", "(", "mid_planes", ",", "k1", ")", "\n", "self", ".", "conv2", "=", "self", ".", "make_layers", "(", "mid_planes", ",", "k2", ")", "\n", "self", ".", "restore", "=", "Conv1x1BN", "(", "mid_planes", ",", "out_planes", ")", "\n", "\n", "self", ".", "expand", "=", "None", "\n", "\n", "if", "in_planes", "!=", "out_planes", ":", "\n", "\t\t\t", "self", ".", "expand", "=", "Conv1x1BN", "(", "in_planes", ",", "out_planes", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.std_cdnet.STDBlock.forward": [[29, 44], ["std_cdnet.STDBlock.squeeze", "std_cdnet.STDBlock.conv1", "std_cdnet.STDBlock.conv2", "std_cdnet.STDBlock.restore", "std_cdnet.STDBlock.relu", "std_cdnet.STDBlock.expand"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "identity", "=", "x", "\n", "x", "=", "self", ".", "squeeze", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "restore", "(", "x", ")", "\n", "\n", "if", "self", ".", "expand", "is", "not", "None", ":", "\n", "\n", "\t\t\t", "identity", "=", "self", ".", "expand", "(", "identity", ")", "\n", "\n", "", "out", "=", "x", "+", "identity", "\n", "\n", "return", "self", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.std_cdnet.STDBlock.make_layers": [[45, 52], ["range", "torch.Sequential", "torch.Sequential", "layers.append", "DWBlock"], "methods", ["None"], ["", "def", "make_layers", "(", "self", ",", "in_planes", ",", "k", ")", ":", "\n", "\n", "\t\t", "layers", "=", "[", "]", "\n", "num", "=", "k", "//", "2", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "\t\t\t", "layers", ".", "append", "(", "DWBlock", "(", "in_planes", ",", "in_planes", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.std_cdnet.STDDBlock.__init__": [[55, 66], ["torch.Module.__init__", "blocks.append", "range", "torch.Sequential", "torch.Sequential", "std_cdnet.STDBlock", "blocks.append", "std_cdnet.STDBlock"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_list", ")", ":", "\n", "\n", "\t\t", "super", "(", "STDDBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "blocks", "=", "[", "]", "\n", "k1", ",", "k2", ",", "r", "=", "kernel_list", "\n", "# first block may occur expand channel", "\n", "blocks", ".", "append", "(", "STDBlock", "(", "in_planes", ",", "out_planes", ",", "k1", ",", "k2", ")", ")", "\n", "for", "i", "in", "range", "(", "r", "-", "1", ")", ":", "\n", "\t\t\t", "blocks", ".", "append", "(", "STDBlock", "(", "out_planes", ",", "out_planes", ",", "k1", ",", "k2", ")", ")", "\n", "\n", "", "self", ".", "ops", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.std_cdnet.STDDBlock.forward": [[67, 70], ["std_cdnet.STDDBlock.ops"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "ops", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.std_cdnet.STDNetwork.__init__": [[78, 115], ["torch.Module.__init__", "StdStem", "torch.ModuleList", "torch.ModuleList", "len", "range", "std_cdnet.STDNetwork._make_layers", "std_cdnet.make_divisible", "open", "json.load", "std_cdnet.STDNetwork._make_layers", "std_cdnet.STDNetwork.cells.append", "DownSample"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.make_divisible", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers"], ["\t", "def", "__init__", "(", "self", ",", "num_class", ",", "cfg", ")", ":", "\n", "\n", "\t\t", "super", "(", "STDNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "stages", "=", "cfg", ".", "MODEL", ".", "STAGES", "\n", "self", ".", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "self", ".", "multiplier", "=", "cfg", ".", "MODEL", ".", "WIDTH_MULT", "\n", "self", ".", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", "\n", "self", ".", "genotype", "=", "cfg", ".", "MODEL", ".", "GENOTYPE", "\n", "self", ".", "before_gap", "=", "True", "\n", "\n", "# change the channel for scaling ", "\n", "self", ".", "planes", "=", "[", "make_divisible", "(", "n", "*", "self", ".", "multiplier", ")", "for", "n", "in", "cfg", ".", "MODEL", ".", "PLANES", "]", "\n", "self", ".", "final_planes", "=", "512", "\n", "self", ".", "extract_stages_feats", "=", "cfg", ".", "MODEL", ".", "NECK_TYPE", "==", "'fblneck'", "\n", "\n", "self", ".", "stem", "=", "StdStem", "(", "3", ",", "self", ".", "planes", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "\n", "# read the genotype ", "\n", "# self.genotype_file = cfg.OUTPUT.DIRS + self.genotype", "\n", "self", ".", "genotype_file", "=", "\"../geno/\"", "+", "self", ".", "genotype", "\n", "\n", "with", "open", "(", "self", ".", "genotype_file", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "self", ".", "geno", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "kernels", "=", "self", ".", "geno", "[", "\"layers\"", "]", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# before last stage ", "\n", "num", "=", "len", "(", "self", ".", "stages", ")", "\n", "\n", "for", "i", "in", "range", "(", "num", "-", "1", ")", ":", "\n", "\t\t\t", "kernel_list", "=", "kernels", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", "\n", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "kernel_list", ")", "\n", "self", ".", "cells", ".", "append", "(", "DownSample", "(", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "-", "1", "]", ",", "self", ".", "planes", "[", "-", "2", "]", ",", "self", ".", "planes", "[", "-", "1", "]", ",", "kernels", "[", "-", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.std_cdnet.STDNetwork._make_layers": [[116, 125], ["cells.append", "range", "std_cdnet.STDDBlock", "cells.append", "std_cdnet.STDDBlock"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "num_cells", ",", "in_planes", ",", "out_planes", ",", "kernel_list", ")", ":", "\n", "\n", "\t\t", "cells", "=", "[", "]", "\n", "\n", "cells", ".", "append", "(", "STDDBlock", "(", "in_planes", ",", "out_planes", ",", "kernel_list", "[", "0", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "num_cells", "-", "1", ")", ":", "\n", "\t\t\t", "cells", ".", "append", "(", "STDDBlock", "(", "out_planes", ",", "out_planes", ",", "kernel_list", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "", "return", "cells", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.std_cdnet.STDNetwork.forward": [[126, 146], ["std_cdnet.STDNetwork.stem", "cell", "feature_maps.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "stages", "=", "[", "3", ",", "6", ",", "8", "]", "\n", "i", "=", "0", "\n", "feature_maps", "=", "[", "]", "\n", "for", "cell", "in", "self", ".", "cells", ":", "\n", "\n", "\t\t\t", "x", "=", "cell", "(", "x", ")", "\n", "i", "+=", "1", "\n", "if", "self", ".", "extract_stages_feats", "and", "i", "in", "stages", ":", "\n", "\t\t\t\t", "feature_maps", ".", "append", "(", "x", ")", "\n", "\n", "# return the feature and no need to return below x ", "\n", "", "", "if", "self", ".", "extract_stages_feats", ":", "\n", "\t\t\t", "return", "feature_maps", "\n", "\n", "", "if", "self", ".", "before_gap", ":", "\n", "\t\t\t", "return", "x", "", "", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.std_cdnet.make_divisible": [[71, 74], ["int"], "function", ["None"], ["", "", "def", "make_divisible", "(", "num", ",", "divisor", "=", "4", ")", ":", "\n", "\n", "\t", "return", "int", "(", "(", "num", "//", "divisor", ")", "*", "divisor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.cdnet.CDNetwork.__init__": [[18, 78], ["nn.Module.__init__", "len", "nn.ModuleList", "len", "range", "cdnet.CDNetwork._make_layers", "nn.AdaptiveAvgPool2d", "cdnet.make_divisible", "StdStem", "StdStem", "open", "json.load", "cdnet.CDNetwork._make_layers", "cdnet.CDNetwork.cells.append", "cdnet.CDNetwork._make_fc_layers", "nn.Linear", "DownSample"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.make_divisible", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers"], ["\t", "def", "__init__", "(", "self", ",", "num_class", ",", "cfg", ")", ":", "\n", "\n", "\t\t", "super", "(", "CDNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "stages", "=", "cfg", ".", "MODEL", ".", "STAGES", "\n", "self", ".", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "self", ".", "multiplier", "=", "cfg", ".", "MODEL", ".", "WIDTH_MULT", "\n", "self", ".", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", "\n", "self", ".", "genotype", "=", "cfg", ".", "MODEL", ".", "GENOTYPE", "\n", "self", ".", "adaption_fusion", "=", "cfg", ".", "MODEL", ".", "ADAPTION_FUSION", "\n", "self", ".", "fc_dims", "=", "cfg", ".", "MODEL", ".", "FC_DIMS", "\n", "self", ".", "fc_num", "=", "len", "(", "self", ".", "fc_dims", ")", "\n", "self", ".", "before_gap", "=", "True", "\n", "self", ".", "dataset", "=", "cfg", ".", "DATA", ".", "DATASET", "\n", "# change the channel for scaling ", "\n", "self", ".", "planes", "=", "[", "make_divisible", "(", "n", "*", "self", ".", "multiplier", ")", "for", "n", "in", "cfg", ".", "MODEL", ".", "PLANES", "]", "\n", "# self.planes[0] = 64 # do not change the first planes ", "\n", "self", ".", "final_planes", "=", "512", "\n", "self", ".", "extract_stages_feats", "=", "cfg", ".", "MODEL", ".", "NECK_TYPE", "==", "'fblneck'", "\n", "# self.final_planes = 1024", "\n", "\n", "if", "'cifar'", "in", "self", ".", "dataset", ":", "\n", "\t\t\t", "self", ".", "stem", "=", "StdStem", "(", "3", ",", "self", ".", "planes", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "usepool", "=", "False", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "stem", "=", "StdStem", "(", "3", ",", "self", ".", "planes", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "\n", "# read the genotype ", "\n", "# self.genotype_file = cfg.OUTPUT.DIRS + self.genotype", "\n", "# \"../\" is relative to main process(*.sh)", "\n", "", "self", ".", "genotype_file", "=", "\"../geno/\"", "+", "self", ".", "genotype", "\n", "\n", "with", "open", "(", "self", ".", "genotype_file", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "self", ".", "geno", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "kernels", "=", "self", ".", "geno", "[", "\"layers\"", "]", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# before last stage ", "\n", "num", "=", "len", "(", "self", ".", "stages", ")", "\n", "\n", "for", "i", "in", "range", "(", "num", "-", "1", ")", ":", "\n", "\t\t\t", "kernel_list", "=", "kernels", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", "\n", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "kernel_list", ")", "\n", "self", ".", "cells", ".", "append", "(", "DownSample", "(", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "-", "1", "]", ",", "self", ".", "planes", "[", "-", "2", "]", ",", "self", ".", "planes", "[", "-", "1", "]", ",", "kernels", "[", "-", "2", ":", "]", ")", "\n", "\n", "# gap", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# fully connected layer ", "\n", "self", ".", "final_planes", "=", "self", ".", "planes", "[", "-", "1", "]", "\n", "# if is before gap no need setup fc ", "\n", "if", "self", ".", "fc_num", ">", "0", "and", "not", "self", ".", "before_gap", ":", "\n", "\t\t\t", "self", ".", "fc", "=", "self", ".", "_make_fc_layers", "(", "self", ".", "planes", "[", "-", "1", "]", ")", "\n", "\n", "# if self.fc_num > 0:", "\n", "# \tself.final_planes = self.fc_dims[-1]", "\n", "\n", "", "if", "not", "self", ".", "before_gap", ":", "\n", "\t\t\t", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "final_planes", ",", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.cdnet.CDNetwork._make_layers": [[79, 88], ["cells.append", "range", "CDBlock", "cells.append", "CDBlock"], "methods", ["None"], ["", "", "def", "_make_layers", "(", "self", ",", "num_cells", ",", "in_planes", ",", "out_planes", ",", "kernel_list", ")", ":", "\n", "\n", "\t\t", "cells", "=", "[", "]", "\n", "\n", "cells", ".", "append", "(", "CDBlock", "(", "in_planes", ",", "out_planes", ",", "kernel_list", "[", "0", "]", ",", "adaptionfuse", "=", "self", ".", "adaption_fusion", ")", ")", "\n", "for", "i", "in", "range", "(", "num_cells", "-", "1", ")", ":", "\n", "\t\t\t", "cells", ".", "append", "(", "CDBlock", "(", "out_planes", ",", "out_planes", ",", "kernel_list", "[", "i", "+", "1", "]", ",", "adaptionfuse", "=", "self", ".", "adaption_fusion", ")", ")", "\n", "\n", "", "return", "cells", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.cdnet.CDNetwork._make_fc_layers": [[89, 103], ["nn.Sequential", "layers.append", "layers.append", "layers.append", "nn.Linear", "nn.BatchNorm1d", "nn.ReLU"], "methods", ["None"], ["", "def", "_make_fc_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "\n", "\t\t", "layers", "=", "[", "]", "\n", "in_dim", "=", "in_planes", "\n", "\n", "for", "dim", "in", "self", ".", "fc_dims", ":", "\n", "\n", "\t\t\t", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "in_dim", "=", "dim", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.cdnet.CDNetwork.forward": [[105, 141], ["cdnet.CDNetwork.stem", "cdnet.CDNetwork.gap", "cdnet.CDNetwork.size", "cdnet.CDNetwork.view", "cdnet.CDNetwork.classifier", "cell", "cdnet.CDNetwork.fc", "feature_maps.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "stages", "=", "[", "3", ",", "6", ",", "8", "]", "\n", "i", "=", "0", "\n", "feature_maps", "=", "[", "]", "\n", "for", "cell", "in", "self", ".", "cells", ":", "\n", "\n", "\t\t\t", "x", "=", "cell", "(", "x", ")", "\n", "i", "+=", "1", "\n", "if", "self", ".", "extract_stages_feats", "and", "i", "in", "stages", ":", "\n", "\t\t\t\t", "feature_maps", ".", "append", "(", "x", ")", "\n", "\n", "# return the feature and no need to return below x ", "\n", "", "", "if", "self", ".", "extract_stages_feats", ":", "\n", "\t\t\t", "return", "feature_maps", "\n", "\n", "", "if", "self", ".", "before_gap", ":", "\n", "\t\t\t", "return", "x", "\n", "# gap ", "\n", "", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "\n", "# reshape the shape", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "\t\t\t", "return", "x", "\n", "\n", "", "score", "=", "self", ".", "classifier", "(", "x", ")", "\n", "\n", "return", "[", "[", "score", ",", "x", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.cdnet.make_divisible": [[12, 15], ["int"], "function", ["None"], ["def", "make_divisible", "(", "num", ",", "divisor", "=", "4", ")", ":", "\n", "\n", "\t", "return", "int", "(", "(", "num", "//", "divisor", ")", "*", "divisor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.gdas_model.Network.__init__": [[15, 93], ["torch.Module.__init__", "logger.info", "len", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "Conv1x1BNReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "len", "gdas_model.Cell", "torch.Dropout", "torch.Dropout", "torch.Dropout", "gdas_model.Network._make_fc_layers", "torch.Linear", "torch.Linear", "torch.Linear", "gdas_model.Network.planes.append"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers"], ["  ", "def", "__init__", "(", "self", ",", "num_class", ",", "cfg", ")", ":", "\n", "    ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_class", "\n", "\n", "# self.planes = cfg.MODEL.PLANES    # 64", "\n", "# data type is different from cdnet", "\n", "# self.nodes = cfg.MODEL.NODES      # 4", "\n", "# self.layers = cfg.MODEL.LAYERS    # 6", "\n", "# self.stages = cfg.MODEL.STAGES    # 3", "\n", "# set the param here", "\n", "self", ".", "in_planes", "=", "64", "\n", "self", ".", "nodes", "=", "4", "\n", "self", ".", "layers", "=", "6", "\n", "self", ".", "stages", "=", "3", "\n", "self", ".", "extract_stages_feats", "=", "cfg", ".", "MODEL", ".", "NECK_TYPE", "==", "'fblneck'", "\n", "self", ".", "planes", "=", "[", "]", "\n", "logger", ".", "info", "(", "\"model info: in_planes:{}, nodes:{}, layers:{}, stages:{}\"", ".", "format", "(", "self", ".", "in_planes", ",", "self", ".", "nodes", ",", "self", ".", "layers", ",", "self", ".", "stages", ")", ")", "\n", "\n", "self", ".", "fc_dims", "=", "cfg", ".", "MODEL", ".", "FC_DIMS", "# 512", "\n", "self", ".", "fc_num", "=", "len", "(", "self", ".", "fc_dims", ")", "\n", "self", ".", "tau", "=", "10", "\n", "self", ".", "before_gap", "=", "True", "\n", "self", ".", "dropout", "=", "0.2", "\n", "self", ".", "genotype", "=", "genotype_model", "\n", "\n", "C_curr", "=", "self", ".", "in_planes", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_curr", "//", "2", ",", "C_curr", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_curr", ",", "C_curr", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", ",", "\n", ")", "\n", "\n", "assert", "len", "(", "self", ".", "genotype", ")", "==", "self", ".", "layers", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C_curr", "\n", "# reduction_layer = [0, self.layers//self.stages, self.layers//self.stages*2]", "\n", "reduction_layer", "=", "[", "self", ".", "layers", "//", "self", ".", "stages", ",", "self", ".", "layers", "//", "self", ".", "stages", "*", "2", "]", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "reduction", "=", "True", "\n", "reduction_prev", "=", "True", "\n", "for", "j", ",", "genotype", "in", "enumerate", "(", "self", ".", "genotype", ")", ":", "\n", "      ", "if", "j", "in", "reduction_layer", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "self", ".", "planes", ".", "append", "(", "C_curr", ")", "\n", "reduction_prev", "=", "reduction", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction_prev", "=", "reduction", "\n", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ")", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "C_curr", "*", "cell", ".", "multiplier", "\n", "\n", "", "self", ".", "planes", "=", "[", "i", "*", "4", "for", "i", "in", "self", ".", "planes", "]", "\n", "self", ".", "planes", "[", "-", "2", "]", "=", "self", ".", "planes", "[", "-", "1", "]", "\n", "\n", "self", ".", "conv1x1", "=", "Conv1x1BNReLU", "(", "C_prev", ",", "C_prev", ")", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "final_planes", "=", "C_prev", "\n", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "      ", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "\n", "", "if", "self", ".", "fc_num", ">", "0", "and", "not", "self", ".", "before_gap", ":", "\n", "      ", "self", ".", "fc", "=", "self", ".", "_make_fc_layers", "(", "C_prev", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "fc_dims", "[", "-", "1", "]", "\n", "\n", "# classifier", "\n", "", "if", "not", "self", ".", "before_gap", ":", "\n", "      ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "final_planes", ",", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.gdas_model.Network._make_fc_layers": [[94, 108], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "def", "_make_fc_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "\n", "    ", "layers", "=", "[", "]", "\n", "in_dim", "=", "in_planes", "\n", "\n", "for", "dim", "in", "self", ".", "fc_dims", ":", "\n", "\n", "      ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "in_dim", "=", "dim", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.gdas_model.Network.kaiming_init_": [[109, 126], ["gdas_model.Network.modules", "isinstance", "init.kaiming_normal_", "isinstance", "init.constant_", "isinstance", "init.constant_", "init.constant_", "init.normal_", "init.constant_"], "methods", ["None"], ["", "def", "kaiming_init_", "(", "self", ")", ":", "\n", "\n", "# print(\"use kaiming init\")", "\n", "    ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "          ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "          ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "          ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "          ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.gdas_model.Network.train_fix_bn": [[127, 135], ["gdas_model.Network.children", "isinstance", "module.train", "module.train"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train"], ["", "", "", "", "def", "train_fix_bn", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "# freeze BN mean and std", "\n", "    ", "for", "module", "in", "self", ".", "children", "(", ")", ":", "\n", "# for module in self.modules():", "\n", "      ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "module", ".", "train", "(", "False", ")", "\n", "", "else", ":", "\n", "        ", "module", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.gdas_model.Network.forward": [[136, 167], ["gdas_model.Network.stem0", "gdas_model.Network.stem1", "enumerate", "gdas_model.Network.conv1x1", "gdas_model.Network.gap", "gdas_model.Network.size", "gdas_model.Network.view", "gdas_model.Network.classifier", "gdas_model.Network.drop", "gdas_model.Network.fc", "cell", "feature_maps.append"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1"], ["", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "stages", "=", "[", "1", ",", "4", ",", "5", "]", "\n", "feature_maps", "=", "[", "]", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "s0", ",", "s1", "=", "s1", ",", "cell", "(", "s0", ",", "s1", ")", "\n", "# print('layer {}, shape: {}'.format(i, s1.shape))", "\n", "if", "self", ".", "extract_stages_feats", "and", "i", "in", "stages", ":", "\n", "        ", "feature_maps", ".", "append", "(", "s1", ")", "\n", "\n", "", "", "if", "self", ".", "extract_stages_feats", ":", "\n", "      ", "return", "feature_maps", "\n", "\n", "", "x", "=", "self", ".", "conv1x1", "(", "s1", ")", "\n", "if", "self", ".", "before_gap", ":", "\n", "      ", "return", "x", "\n", "\n", "", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "feat", "=", "x", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "      ", "feat", "=", "self", ".", "drop", "(", "feat", ")", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "      ", "feat_fc", "=", "self", ".", "fc", "(", "feat", ")", "\n", "", "else", ":", "\n", "      ", "feat_fc", "=", "feat", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "      ", "return", "feat", "\n", "", "score", "=", "self", ".", "classifier", "(", "feat_fc", ")", "\n", "return", "[", "[", "score", ",", "feat", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.gdas_model.Cell.__init__": [[170, 181], ["torch.Module.__init__", "ReLUConvBN", "zip", "gdas_model.Cell._compile", "FactorizedReduce", "ReLUConvBN"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.gdas_model.Cell._compile"], ["  ", "def", "__init__", "(", "self", ",", "genotype", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "op_names", ",", "indices", "=", "zip", "(", "*", "genotype", ".", "cell", ")", "\n", "concat", "=", "genotype", ".", "cell_concat", "\n", "self", ".", "_compile", "(", "C", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.gdas_model.Cell._compile": [[182, 195], ["len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "zip", "len", "len", "len"], "methods", ["None"], ["", "def", "_compile", "(", "self", ",", "C_curr", ",", "op_names", ",", "indices", ",", "concat", ",", "reduction", ")", ":", "\n", "        ", "assert", "len", "(", "op_names", ")", "==", "len", "(", "indices", ")", "\n", "self", ".", "_nodes", "=", "len", "(", "op_names", ")", "//", "2", "\n", "self", ".", "_concat", "=", "concat", "\n", "self", ".", "multiplier", "=", "len", "(", "concat", ")", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "name", ",", "index", "in", "zip", "(", "op_names", ",", "indices", ")", ":", "\n", "            ", "stride", "=", "2", "if", "reduction", "and", "index", "<", "2", "else", "1", "\n", "op", "=", "OPS", "[", "name", "]", "(", "C_curr", ",", "stride", ",", "True", ")", "\n", "self", ".", "_ops", "+=", "[", "op", "]", "\n", "", "self", ".", "_indices", "=", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.backbone.gdas_model.Cell.forward": [[196, 212], ["gdas_model.Cell.preprocess0", "gdas_model.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "op1", "op2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "drop_path_prob", "=", "0.3", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_nodes", ")", ":", "\n", "      ", "h1", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "]", "]", "\n", "h2", "=", "states", "[", "self", ".", "_indices", "[", "2", "*", "i", "+", "1", "]", "]", "\n", "op1", "=", "self", ".", "_ops", "[", "2", "*", "i", "]", "\n", "op2", "=", "self", ".", "_ops", "[", "2", "*", "i", "+", "1", "]", "\n", "h1", "=", "op1", "(", "h1", ")", "\n", "h2", "=", "op2", "(", "h2", ")", "\n", "s", "=", "h1", "+", "h2", "\n", "states", "+=", "[", "s", "]", "\n", "\n", "", "return", "torch", ".", "cat", "(", "[", "states", "[", "i", "]", "for", "i", "in", "self", ".", "_concat", "]", ",", "dim", "=", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.main.train_on_cifar.compute_loss_acc": [[32, 53], ["len", "loss_fn", "scores.max", "scores.max"], "function", ["None"], ["def", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", "=", "None", ")", ":", "\n", "\n", "\t", "loss", ",", "acc", "=", "0.", ",", "0.", "\n", "num", "=", "len", "(", "res", ")", "\n", "# for cifar val ", "\n", "if", "loss_fn", "is", "None", ":", "\n", "\t\t", "for", "scores", "in", "res", ":", "\n", "\t\t\t", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n", "\n", "", "for", "scores", ",", "feats", "in", "res", ":", "\n", "\n", "\t\t", "ls", "=", "loss_fn", "(", "scores", ",", "feats", ",", "labels", ")", "\n", "loss", "+=", "ls", "\n", "\n", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.train_on_cifar.parse_config": [[54, 104], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.cfg.merge_from_list", "utils.setup_logger", "utils.setup_logger.info", "utils.setup_logger.info", "config.cfg.merge_from_file", "print", "exit", "utils.setup_logger.info", "utils.setup_logger.info", "utils.setup_logger.info", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.logger.setup_logger"], ["", "def", "parse_config", "(", ")", ":", "\n", "\n", "# create the parser", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"CDNet training\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--config_file\"", ",", "default", "=", "''", ",", "help", "=", "\"path to specify config file\"", ",", "type", "=", "str", ")", "\n", "\n", "#remainder parameters in a list", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "default", "=", "None", ",", "help", "=", "'modify some value for the config file in command line'", ",", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "# use config file to update the default config value", "\n", "\t\t", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "# note that opts is a list ", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "# cfg.freeze() if use this, the cfg can not be revised", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "if", "output_dir", "!=", "\"\"", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"ERROR:please specify an output path\"", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# config the logger ", "\n", "", "logger", "=", "setup_logger", "(", "\"CDNet\"", ",", "output_dir", ",", "0", ",", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", "\n", "\n", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "if", "use_gpu", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with GPU: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "DEVICE_IDS", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with CPU\"", ")", "\n", "\n", "#print the all arguments", "\n", "", "logger", ".", "info", "(", "args", ")", "\n", "#read the config file", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"load configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "\n", "# print the configuration", "\n", "", "logger", ".", "info", "(", "\"running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_IDS", "\n", "\n", "#this setup will facilitate the training", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.train_on_cifar.train": [[105, 279], ["data.cifar_make_data_loader", "model.build_model", "optims.make_optimizer", "optims.make_lr_scheduler", "optims.make_loss", "len", "openpyxl.Workbook", "sheet.append", "logging.getLogger", "utils.utils.count_parameters", "values.append", "values.append", "logging.getLogger.info", "logging.getLogger.info", "range", "values.insert", "sheet.append", "xl.Workbook.save", "logging.getLogger.info", "logging.getLogger.info", "os.path.exists", "os.makedirs", "format", "RunningAverageMeter", "RunningAverageMeter", "AverageMeter", "AverageMeter", "torch.DataParallel", "model.to.to", "optims.make_lr_scheduler.step", "model.to.train", "avg_loss.reset", "avg_acc.reset", "avg_time.reset", "enumerate", "logging.getLogger.info", "global_avg_time.update", "format", "config.cfg.OUTPUT.LOG_NAME.split", "optims.make_lr_scheduler.get_lr", "time.time", "model.to.", "train_on_cifar.compute_loss_acc", "loss.backward", "optims.make_optimizer.step", "optims.make_optimizer.zero_grad", "time.time", "avg_time.update", "avg_loss.update", "avg_acc.update", "model.to.eval", "logging.getLogger.info", "AverageMeter", "logging.getLogger.info", "imgs.to.to", "labels.to.to", "torch.utils.clip_grad_norm_", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "enumerate", "logging.getLogger.info", "logging.getLogger.info", "torch.save", "torch.save", "torch.save", "torch.save", "logging.getLogger.info", "model.to.parameters", "model.to.", "train_on_cifar.compute_loss_acc", "AverageMeter.update", "logging.getLogger.info", "values.extend", "model.to.module.state_dict", "model.to.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "imgs.to.to", "labels.to.to", "format", "format", "model.to.module.state_dict", "model.to.state_dict"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.model.__init__.build_model", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_optimizer", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_lr_scheduler", "home.repos.pwc.inspect_result.solicucu_ReID.loss.__init__.make_loss", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.WarmupCosAnnLR.get_lr", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update"], ["", "def", "train", "(", ")", ":", "\n", "\n", "# 1\u3001make dataloader", "\n", "# prepare train,val img_info list, elem is tuple; ", "\n", "\t", "train_loader", ",", "val_loader", ",", "num_class", "=", "cifar_make_data_loader", "(", "cfg", ")", "\n", "\n", "# 2\u3001make model", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_class", ")", "\n", "\n", "# 3\u3001 make optimizer", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "\n", "# 4\u3001 make lr_scheduler", "\n", "scheduler", "=", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "\n", "# 5\u3001make loss: default use softmax loss ", "\n", "loss_fn", "=", "make_loss", "(", "cfg", ",", "num_class", ")", "\n", "\n", "# get parameters ", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "use_gpu", "=", "device", "==", "\"cuda\"", "\n", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", "!=", "\"\"", "\n", "parallel", "=", "cfg", ".", "MODEL", ".", "PARALLEL", "\n", "\n", "log_period", "=", "cfg", ".", "OUTPUT", ".", "LOG_PERIOD", "\n", "ckpt_period", "=", "cfg", ".", "OUTPUT", ".", "CKPT_PERIOD", "\n", "eval_period", "=", "cfg", ".", "OUTPUT", ".", "EVAL_PERIOD", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "ckpt_save_path", "=", "output_dir", "+", "cfg", ".", "OUTPUT", ".", "CKPT_DIRS", "\n", "\n", "epochs", "=", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "\n", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "grad_clip", "=", "cfg", ".", "SOLVER", ".", "GRAD_CLIP", "\n", "\n", "batch_num", "=", "len", "(", "train_loader", ")", "\n", "log_iters", "=", "batch_num", "//", "log_period", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_save_path", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "ckpt_save_path", ")", "\n", "\n", "# create *_result.xlsx", "\n", "# save the result for analyze", "\n", "", "name", "=", "(", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".xlsx\"", "\n", "result_path", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "+", "name", "\n", "\n", "wb", "=", "xl", ".", "Workbook", "(", ")", "\n", "sheet", "=", "wb", ".", "worksheets", "[", "0", "]", "\n", "titles", "=", "[", "'size/M'", ",", "'speed/ms'", ",", "'final_planes'", ",", "'acc'", ",", "'loss'", ",", "'acc'", ",", "'loss'", ",", "'acc'", ",", "'loss'", "]", "\n", "sheet", ".", "append", "(", "titles", ")", "\n", "check_epochs", "=", "[", "40", ",", "80", ",", "120", ",", "160", ",", "200", ",", "240", ",", "280", ",", "320", ",", "360", ",", "epochs", "]", "\n", "values", "=", "[", "]", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"CDNet.train\"", ")", "\n", "size", "=", "count_parameters", "(", "model", ")", "\n", "values", ".", "append", "(", "format", "(", "size", ",", "'.2f'", ")", ")", "\n", "values", ".", "append", "(", "model", ".", "final_planes", ")", "\n", "\n", "logger", ".", "info", "(", "\"the model size is {:.2} M\"", ".", "format", "(", "size", ")", ")", "\n", "logger", ".", "info", "(", "\"Starting Training CDNetwork\"", ")", "\n", "best_acc", "=", "0.", "\n", "is_best", "=", "False", "\n", "avg_loss", ",", "avg_acc", "=", "RunningAverageMeter", "(", ")", ",", "RunningAverageMeter", "(", ")", "\n", "avg_time", ",", "global_avg_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "if", "parallel", ":", "\n", "\t\t", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "if", "use_gpu", ":", "\n", "\t\t", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "\t\t", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# if save epoch_num k, then run k+1 epoch next", "\n", "if", "pretrained", "and", "epoch", "<", "model", ".", "start_epoch", ":", "\n", "\t\t\t", "continue", "\n", "\n", "# rest the record", "\n", "", "model", ".", "train", "(", ")", "\n", "avg_loss", ".", "reset", "(", ")", "\n", "avg_acc", ".", "reset", "(", ")", "\n", "avg_time", ".", "reset", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "\t\t\t", "t0", "=", "time", ".", "time", "(", ")", "\n", "imgs", ",", "labels", "=", "batch", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "", "res", "=", "model", "(", "imgs", ")", "\n", "\n", "loss", ",", "acc", "=", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "grad_clip", "!=", "0", ":", "\n", "\t\t\t\t", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "grad_clip", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "avg_time", ".", "update", "(", "(", "t1", "-", "t0", ")", "/", "batch_size", ")", "\n", "avg_loss", ".", "update", "(", "loss", ")", "\n", "avg_acc", ".", "update", "(", "acc", ")", "\n", "\n", "# log info", "\n", "if", "(", "i", "+", "1", ")", "%", "log_iters", "==", "0", ":", "\n", "\t\t\t\t", "logger", ".", "info", "(", "\"epoch {}: {}/{} with loss is {:.5f} and acc is {:.3f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "i", "+", "1", ",", "batch_num", ",", "avg_loss", ".", "avg", ",", "avg_acc", ".", "avg", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"end epochs {}/{} with lr: {:.5f} and avg_time is: {:.3f} ms\"", ".", "format", "(", "epoch", "+", "1", ",", "epochs", ",", "lr", ",", "avg_time", ".", "avg", "*", "1000", ")", ")", "\n", "global_avg_time", ".", "update", "(", "avg_time", ".", "avg", ")", "\n", "\n", "# test the model", "\n", "if", "(", "epoch", "+", "1", ")", "%", "eval_period", "==", "0", "or", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\n", "\t\t\t", "model", ".", "eval", "(", ")", "\n", "logger", ".", "info", "(", "\"begin eval the model\"", ")", "\n", "val_acc", "=", "AverageMeter", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "\t\t\t\t", "for", "vi", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "\t\t\t\t\t", "imgs", ",", "labels", "=", "batch", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "", "res", "=", "model", "(", "imgs", ")", "\n", "_", ",", "acc", "=", "compute_loss_acc", "(", "res", ",", "labels", ")", "\n", "val_acc", ".", "update", "(", "acc", ")", "\n", "\n", "\n", "", "logger", ".", "info", "(", "\"validation results at epoch:{}\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"acc:{:.2%}\"", ".", "format", "(", "val_acc", ".", "avg", ")", ")", "\n", "\n", "# determine whether current model is the best", "\n", "if", "val_acc", ".", "avg", ">", "best_acc", ":", "\n", "\t\t\t\t\t", "logger", ".", "info", "(", "\"get a new best acc\"", ")", "\n", "best_acc", "=", "val_acc", ".", "avg", "\n", "is_best", "=", "True", "\n", "\n", "# add the result to sheet", "\n", "", "if", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\t\t\t\t\t", "val", "=", "[", "format", "(", "val_acc", ".", "avg", "*", "100", ",", "'.2f'", ")", ",", "format", "(", "avg_loss", ".", "avg", ",", "'.3f'", ")", "]", "\n", "values", ".", "extend", "(", "val", ")", "\n", "\n", "# whether to save the model", "\n", "", "", "", "if", "(", "epoch", "+", "1", ")", "%", "ckpt_period", "==", "0", "or", "is_best", ":", "\n", "\t\t\t", "if", "parallel", ":", "\n", "\t\t\t\t", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"checkpoint_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"checkpoint_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "", "logger", ".", "info", "(", "\"checkpoint {} was saved\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "if", "is_best", ":", "\n", "\t\t\t\t", "if", "parallel", ":", "\n", "\t\t\t\t\t", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"best_ckpt.pth\"", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"best_ckpt.pth\"", ")", "\n", "", "logger", ".", "info", "(", "\"best_checkpoint was saved\"", ")", "\n", "is_best", "=", "False", "\n", "\n", "\n", "", "", "", "values", ".", "insert", "(", "1", ",", "format", "(", "global_avg_time", ".", "avg", "*", "1000", ",", "'.2f'", ")", ")", "\n", "sheet", ".", "append", "(", "values", ")", "\n", "wb", ".", "save", "(", "result_path", ")", "\n", "logger", ".", "info", "(", "\"best_acc:{:.2%}\"", ".", "format", "(", "best_acc", ")", ")", "\n", "logger", ".", "info", "(", "\"Ending training CDNetwork on cifar\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.train_on_cifar.main": [[280, 284], ["train_on_cifar.parse_config", "train_on_cifar.train"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.main.train_on_imagenet.parse_config", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train"], ["", "def", "main", "(", ")", ":", "\n", "\n", "\t", "parse_config", "(", ")", "\n", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.inference.parse_config": [[23, 65], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.cfg.merge_from_list", "config.cfg.freeze", "utils.setup_logger", "utils.setup_logger.info", "utils.setup_logger.info", "config.cfg.merge_from_file", "print", "exit", "utils.setup_logger.info", "utils.setup_logger.info", "utils.setup_logger.info", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.logger.setup_logger"], ["def", "parse_config", "(", ")", ":", "\n", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'CDNet inference'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--config_file\"", ",", "default", "=", "\"\"", ",", "help", "=", "\"path to specified config file\"", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "default", "=", "None", ",", "help", "=", "\"modify some value in config file\"", ",", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "\t\t", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "if", "output_dir", "!=", "\"\"", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"ERROR: please specify an output path\"", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "logger", "=", "setup_logger", "(", "\"CDNet\"", ",", "output_dir", ",", "0", ",", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", "\n", "\n", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "'cuda'", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Test with GPU: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "DEVICE_IDS", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Test with CPU\"", ")", "\n", "\n", "", "logger", ".", "info", "(", "args", ")", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"load configuratioin file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"test with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICE\"", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_IDS", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.inference.test": [[67, 122], ["logging.getLogger", "data.make_data_loader", "model.build_model", "utils.utils.infer_count_parameters", "logging.getLogger.info", "shape.extend", "utils.flop_benchmark.get_model_infos", "logging.getLogger.info", "os.path.isfile", "model.cuda.eval", "utils.R1_mAP", "model.cuda.load_best_checkpoint", "logging.getLogger.info", "exit", "torch.DataParallel", "model.cuda.cuda", "torch.no_grad", "torch.no_grad", "time.time", "time.time", "utils.R1_mAP.compute", "time.time", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "print", "model.cuda.", "utils.R1_mAP.update", "logging.getLogger.info", "imgs.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.data.darts_builder.make_data_loader", "home.repos.pwc.inspect_result.solicucu_ReID.model.__init__.build_model", "home.repos.pwc.inspect_result.solicucu_ReID.utils.utils.infer_count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.get_model_infos", "home.repos.pwc.inspect_result.solicucu_ReID.model.models.BaseNet.load_best_checkpoint", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.compute", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update"], ["", "def", "test", "(", ")", ":", "\n", "\n", "\t", "logger", "=", "logging", ".", "getLogger", "(", "'CDNet.test'", ")", "\n", "\n", "# prepare dataloader", "\n", "train_loader", ",", "val_loader", ",", "num_query", ",", "num_class", "=", "make_data_loader", "(", "cfg", ")", "\n", "# prepare model", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_class", ")", "\n", "\n", "infer_size", "=", "infer_count_parameters", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"the infer param number of the model is {:.2f}M\"", ".", "format", "(", "infer_size", ")", ")", "\n", "\n", "shape", "=", "[", "1", ",", "3", "]", "\n", "shape", ".", "extend", "(", "cfg", ".", "DATA", ".", "IMAGE_SIZE", ")", "\n", "flops", ",", "_", "=", "get_model_infos", "(", "model", ",", "shape", ")", "\n", "logger", ".", "info", "(", "\"the total flops is: {:.2f} M\"", ".", "format", "(", "flops", ")", ")", "\n", "\n", "# load param", "\n", "ckpt_path", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "+", "cfg", ".", "OUTPUT", ".", "CKPT_DIRS", "+", "cfg", ".", "TEST", ".", "BEST_CKPT", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "ckpt_path", ")", ":", "\n", "\t\t", "model", ".", "load_best_checkpoint", "(", "ckpt_path", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"file: {} is not found\"", ".", "format", "(", "ckpt_path", ")", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "'cuda'", "\n", "if", "cfg", ".", "MODEL", ".", "PARALLEL", ":", "\n", "\t\t", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "if", "use_gpu", ":", "\n", "\t\t", "model", "=", "model", ".", "cuda", "(", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "metrics", "=", "R1_mAP", "(", "num_query", ",", "use_gpu", "=", "use_gpu", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "begin", "=", "time", ".", "time", "(", ")", "\n", "for", "batch", "in", "val_loader", ":", "\n", "\t\t\t", "imgs", ",", "pids", ",", "camids", "=", "batch", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "", "feats", "=", "model", "(", "imgs", ")", "\n", "metrics", ".", "update", "(", "(", "feats", ",", "pids", ",", "camids", ")", ")", "\n", "", "end1", "=", "time", ".", "time", "(", ")", "\n", "cmc", ",", "mAP", "=", "metrics", ".", "compute", "(", ")", "\n", "end2", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"extract feature time is:{:.2f} s\"", ".", "format", "(", "end1", "-", "begin", ")", ")", "\n", "logger", ".", "info", "(", "\"match time is:{:.2f} s\"", ".", "format", "(", "end2", "-", "end1", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"test result as follows\"", ")", "\n", "logger", ".", "info", "(", "\"mAP:{:.2%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "\t\t\t", "logger", ".", "info", "(", "\"CMC cure, Rank-{:<3}:{:.2%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "\n", "", "print", "(", "\"test is endding\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.inference.extract_features": [[124, 183], ["logging.getLogger", "extra.make_dataloader", "model.build_model", "utils.utils.infer_count_parameters", "logging.getLogger.info", "os.path.isfile", "model.cuda.eval", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.save", "torch.save", "torch.save", "torch.save", "logging.getLogger.info", "model.cuda.load_best_checkpoint", "logging.getLogger.info", "exit", "torch.DataParallel", "model.cuda.cuda", "torch.no_grad", "torch.no_grad", "open", "range", "model.cuda.", "torch.cat().cpu.append", "torch.cat().cpu.append", "label_list.extend", "pid_list.extend", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "f.write", "torch.cat().cpu.size", "imgs.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.make_dataloader", "home.repos.pwc.inspect_result.solicucu_ReID.model.__init__.build_model", "home.repos.pwc.inspect_result.solicucu_ReID.utils.utils.infer_count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.model.models.BaseNet.load_best_checkpoint"], ["", "", "def", "extract_features", "(", "save_path", "=", "'./'", ",", "num_pids", "=", "20", ")", ":", "\n", "\n", "\t", "logger", "=", "logging", ".", "getLogger", "(", "'CDNet.test'", ")", "\n", "\n", "# prepare dataloader", "\n", "# param num_pids=5, batch_size = 64, num_workers = 4", "\n", "dataloader", ",", "num_class", "=", "make_dataloader", "(", "num_pids", "=", "num_pids", ",", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", ",", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", ")", "\n", "# prepare model", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_class", ")", "\n", "\n", "infer_size", "=", "infer_count_parameters", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"the infer param number of the model is {:.2f}M\"", ".", "format", "(", "infer_size", ")", ")", "\n", "\n", "# load param", "\n", "ckpt_path", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "+", "cfg", ".", "OUTPUT", ".", "CKPT_DIRS", "+", "cfg", ".", "TEST", ".", "BEST_CKPT", "\n", "if", "os", ".", "path", ".", "isfile", "(", "ckpt_path", ")", ":", "\n", "\t\t", "model", ".", "load_best_checkpoint", "(", "ckpt_path", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"file: {} is not found\"", ".", "format", "(", "ckpt_path", ")", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "'cuda'", "\n", "if", "cfg", ".", "MODEL", ".", "PARALLEL", ":", "\n", "\t\t", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "if", "use_gpu", ":", "\n", "\t\t", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "tri_features", "=", "[", "]", "\n", "fc_features", "=", "[", "]", "\n", "label_list", "=", "[", "]", "\n", "pid_list", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "for", "batch", "in", "dataloader", ":", "\n", "\t\t\t", "imgs", ",", "labels", ",", "pids", "=", "batch", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "", "feats", "=", "model", "(", "imgs", ")", "\n", "# features.append(feats)", "\n", "tri_features", ".", "append", "(", "feats", "[", "0", "]", ")", "\n", "fc_features", ".", "append", "(", "feats", "[", "1", "]", ")", "\n", "label_list", ".", "extend", "(", "labels", ")", "\n", "pid_list", ".", "extend", "(", "pids", ")", "\n", "\n", "", "", "tri_features", "=", "torch", ".", "cat", "(", "tri_features", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "fc_features", "=", "torch", ".", "cat", "(", "fc_features", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "tri_file_name", "=", "save_path", "+", "'bnneck_tri_feats_20.feats'", "\n", "fc_file_name", "=", "save_path", "+", "'bnneck_fc_feats_20.feats'", "\n", "\n", "with", "open", "(", "save_path", "+", "'bnneck_label_pid.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "len", "(", "label_list", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "\"{} {}\\n\"", ".", "format", "(", "label_list", "[", "i", "]", ",", "pid_list", "[", "i", "]", ")", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "tri_features", ",", "tri_file_name", ")", "\n", "torch", ".", "save", "(", "fc_features", ",", "fc_file_name", ")", "\n", "\n", "logger", ".", "info", "(", "\"extract features is endding, total images:{} and identities:{}\"", ".", "format", "(", "tri_features", ".", "size", "(", "0", ")", ",", "num_pids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.inference.extract_fmap": [[184, 247], ["logging.getLogger", "extra.make_combine_dataloader", "model.build_model", "utils.utils.infer_count_parameters", "logging.getLogger.info", "os.path.isfile", "model.cuda.eval", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "logging.getLogger.info", "model.cuda.load_best_checkpoint", "logging.getLogger.info", "exit", "torch.DataParallel", "model.cuda.cuda", "torch.no_grad", "torch.no_grad", "open", "range", "model.cuda.", "torch.cat().cpu.append", "torch.cat().cpu.append", "torch.cat().cpu.append", "label_list.extend", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "f.write", "torch.cat().cpu.size", "imgs.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.make_combine_dataloader", "home.repos.pwc.inspect_result.solicucu_ReID.model.__init__.build_model", "home.repos.pwc.inspect_result.solicucu_ReID.utils.utils.infer_count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.model.models.BaseNet.load_best_checkpoint"], ["", "def", "extract_fmap", "(", "save_path", "=", "'./'", ")", ":", "\n", "\n", "\t", "logger", "=", "logging", ".", "getLogger", "(", "'CDNet.test'", ")", "\n", "\n", "# prepare dataloader", "\n", "# param num_pids=5, batch_size = 64, num_workers = 4", "\n", "dataloader", ",", "num_class", "=", "make_combine_dataloader", "(", ")", "\n", "# prepare model", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_class", ")", "\n", "\n", "infer_size", "=", "infer_count_parameters", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"the infer param number of the model is {:.2f}M\"", ".", "format", "(", "infer_size", ")", ")", "\n", "\n", "# load param", "\n", "ckpt_path", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "+", "cfg", ".", "OUTPUT", ".", "CKPT_DIRS", "+", "cfg", ".", "TEST", ".", "BEST_CKPT", "\n", "if", "os", ".", "path", ".", "isfile", "(", "ckpt_path", ")", ":", "\n", "\t\t", "model", ".", "load_best_checkpoint", "(", "ckpt_path", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"file: {} is not found\"", ".", "format", "(", "ckpt_path", ")", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "'cuda'", "\n", "if", "cfg", ".", "MODEL", ".", "PARALLEL", ":", "\n", "\t\t", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "if", "use_gpu", ":", "\n", "\t\t", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "fmap1", "=", "[", "]", "\n", "fmap2", "=", "[", "]", "\n", "fmap3", "=", "[", "]", "\n", "label_list", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t", "for", "batch", "in", "dataloader", ":", "\n", "\t\t\t", "imgs", ",", "labels", ",", "pids", "=", "batch", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "", "feats", "=", "model", "(", "imgs", ")", "\n", "# features.append(feats)", "\n", "fmap1", ".", "append", "(", "feats", "[", "0", "]", ")", "\n", "fmap2", ".", "append", "(", "feats", "[", "1", "]", ")", "\n", "fmap3", ".", "append", "(", "feats", "[", "2", "]", ")", "\n", "label_list", ".", "extend", "(", "labels", ")", "\n", "\n", "", "", "fmap1", "=", "torch", ".", "cat", "(", "fmap1", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "fmap2", "=", "torch", ".", "cat", "(", "fmap2", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "fmap3", "=", "torch", ".", "cat", "(", "fmap3", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", "\n", "\n", "fmap1_file_name", "=", "save_path", "+", "'fmap1.fmap'", "\n", "fmap2_file_name", "=", "save_path", "+", "'fmap2.fmap'", "\n", "fmap3_file_name", "=", "save_path", "+", "'fmap3.fmap'", "\n", "\n", "with", "open", "(", "save_path", "+", "'labels.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "len", "(", "label_list", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "label_list", "[", "i", "]", ")", ")", "\n", "\n", "", "", "torch", ".", "save", "(", "fmap1", ",", "fmap1_file_name", ")", "\n", "torch", ".", "save", "(", "fmap2", ",", "fmap2_file_name", ")", "\n", "torch", ".", "save", "(", "fmap3", ",", "fmap3_file_name", ")", "\n", "\n", "logger", ".", "info", "(", "\"extract features is endding, total images:{}\"", ".", "format", "(", "fmap1", ".", "size", "(", "0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.infer_on_imagenet.compute_loss_acc": [[31, 52], ["len", "loss_fn", "scores.max", "scores.max"], "function", ["None"], ["def", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", "=", "None", ")", ":", "\n", "\n", "\t", "loss", ",", "acc", "=", "0.", ",", "0.", "\n", "num", "=", "len", "(", "res", ")", "\n", "# for imagenet val ", "\n", "if", "loss_fn", "is", "None", ":", "\n", "\t\t", "for", "scores", "in", "res", ":", "\n", "\t\t\t", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n", "\n", "", "for", "scores", ",", "feats", "in", "res", ":", "\n", "\n", "\t\t", "ls", "=", "loss_fn", "(", "scores", ",", "feats", ",", "labels", ")", "\n", "loss", "+=", "ls", "\n", "\n", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.infer_on_imagenet.parse_config": [[53, 103], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.cfg.merge_from_list", "utils.setup_logger", "utils.setup_logger.info", "utils.setup_logger.info", "config.cfg.merge_from_file", "print", "exit", "utils.setup_logger.info", "utils.setup_logger.info", "utils.setup_logger.info", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.logger.setup_logger"], ["", "def", "parse_config", "(", ")", ":", "\n", "\n", "# create the parser", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"CDNet training\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--config_file\"", ",", "default", "=", "''", ",", "help", "=", "\"path to specify config file\"", ",", "type", "=", "str", ")", "\n", "\n", "#remainder parameters in a list", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "default", "=", "None", ",", "help", "=", "'modify some value for the config file in command line'", ",", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "# use config file to update the default config value", "\n", "\t\t", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "# note that opts is a list ", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "# cfg.freeze() if use this, the cfg can not be revised", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "if", "output_dir", "!=", "\"\"", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"ERROR:please specify an output path\"", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# config the logger ", "\n", "", "logger", "=", "setup_logger", "(", "\"CDNet\"", ",", "output_dir", ",", "0", ",", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", "\n", "\n", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "if", "use_gpu", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with GPU: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "DEVICE_IDS", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with CPU\"", ")", "\n", "\n", "#print the all arguments", "\n", "", "logger", ".", "info", "(", "args", ")", "\n", "#read the config file", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"load configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "\n", "# print the configuration", "\n", "", "logger", ".", "info", "(", "\"running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_IDS", "\n", "\n", "#this setup will facilitate the training", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.infer_on_imagenet.test": [[104, 156], ["logging.getLogger", "data.imagenet_make_data_loader", "model.build_model", "os.path.isfile", "utils.utils.count_parameters", "logging.getLogger.info", "utils.flop_benchmark.get_model_infos", "logging.getLogger.info", "model.cuda.eval", "logging.getLogger.info", "AverageMeter", "logging.getLogger.info", "model.cuda.load_best_checkpoint", "logging.getLogger.info", "exit", "torch.DataParallel", "model.cuda.cuda", "torch.no_grad", "torch.no_grad", "enumerate", "logging.getLogger.info", "model.cuda.", "infer_on_imagenet.compute_loss_acc", "AverageMeter.update", "imgs.cuda.cuda", "labels.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.model.__init__.build_model", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.get_model_infos", "home.repos.pwc.inspect_result.solicucu_ReID.model.models.BaseNet.load_best_checkpoint", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update"], ["", "def", "test", "(", ")", ":", "\n", "\t", "logger", "=", "logging", ".", "getLogger", "(", "'CDNet.test'", ")", "\n", "# 1\u3001make dataloader", "\n", "train_loader", ",", "val_loader", ",", "num_class", "=", "imagenet_make_data_loader", "(", "cfg", ",", "is_val", "=", "True", ")", "\n", "# print(\"num_query:{},num_class:{}\".format(num_query,num_class))", "\n", "\n", "# 2\u3001make model", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_class", ")", "\n", "\n", "# load param", "\n", "ckpt_path", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "+", "cfg", ".", "OUTPUT", ".", "CKPT_DIRS", "+", "cfg", ".", "TEST", ".", "BEST_CKPT", "\n", "if", "os", ".", "path", ".", "isfile", "(", "ckpt_path", ")", ":", "\n", "\t\t", "model", ".", "load_best_checkpoint", "(", "ckpt_path", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"file: {} is not found\"", ".", "format", "(", "ckpt_path", ")", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "'cuda'", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE_IDS", "\n", "\n", "size", "=", "count_parameters", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"the param number of the model is {:.2f}M\"", ".", "format", "(", "size", ")", ")", "\n", "\n", "flops", ",", "_", "=", "get_model_infos", "(", "model", ",", "[", "1", ",", "3", ",", "224", ",", "244", "]", ")", "\n", "logger", ".", "info", "(", "\"the total flops number of the model is {:.2f} M\"", ".", "format", "(", "flops", ")", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "PARALLEL", ":", "\n", "\t\t", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "if", "use_gpu", ":", "\n", "\t\t", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "logger", ".", "info", "(", "\"begin eval the model\"", ")", "\n", "val_acc", "=", "AverageMeter", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "\t\t", "for", "vi", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "\t\t\t", "imgs", ",", "labels", "=", "batch", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "", "res", "=", "model", "(", "imgs", ")", "\n", "# acc = (scores.max(1)[1] == labels).float().mean()", "\n", "_", ",", "acc", "=", "compute_loss_acc", "(", "res", ",", "labels", ")", "\n", "val_acc", ".", "update", "(", "acc", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"final test acc is:{:.2%}\"", ".", "format", "(", "val_acc", ".", "avg", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Ending testing CDNetwork on imagenet\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.infer_on_imagenet.main": [[157, 161], ["infer_on_imagenet.parse_config", "infer_on_imagenet.test"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.main.train_on_imagenet.parse_config", "home.repos.pwc.inspect_result.solicucu_ReID.main.infer_on_cifar.test"], ["", "def", "main", "(", ")", ":", "\n", "\n", "\t", "parse_config", "(", ")", "\n", "test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.train.compute_loss_acc": [[33, 46], ["len", "loss_fn", "scores.max"], "function", ["None"], ["def", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", ")", ":", "\n", "\n", "\t", "loss", ",", "acc", "=", "0.", ",", "0.", "\n", "num", "=", "len", "(", "res", ")", "\n", "\n", "for", "scores", ",", "feats", "in", "res", ":", "\n", "\t\t", "ls", "=", "loss_fn", "(", "scores", ",", "feats", ",", "labels", ")", "\n", "loss", "+=", "ls", "\n", "\n", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.train.parse_config": [[47, 97], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.cfg.merge_from_list", "utils.setup_logger", "utils.setup_logger.info", "utils.setup_logger.info", "config.cfg.merge_from_file", "print", "exit", "utils.setup_logger.info", "utils.setup_logger.info", "utils.setup_logger.info", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.logger.setup_logger"], ["", "def", "parse_config", "(", ")", ":", "\n", "\n", "# create the parser", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"CDNet training\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--config_file\"", ",", "default", "=", "''", ",", "help", "=", "\"path to specify config file\"", ",", "type", "=", "str", ")", "\n", "\n", "#remainder parameters in a list", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "default", "=", "None", ",", "help", "=", "'modify some value for the config file in command line'", ",", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "# use config file to update the default config value", "\n", "\t\t", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "# note that opts is a list ", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "# cfg.freeze() if use this, the cfg can not be revised", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "if", "output_dir", "!=", "\"\"", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"ERROR:please specify an output path\"", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# config the logger ", "\n", "", "logger", "=", "setup_logger", "(", "\"CDNet\"", ",", "output_dir", ",", "0", ",", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", "\n", "\n", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "if", "use_gpu", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with GPU: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "DEVICE_IDS", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with CPU\"", ")", "\n", "\n", "#print the all arguments", "\n", "", "logger", ".", "info", "(", "args", ")", "\n", "#read the config file", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"load configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "\n", "# print the configuration", "\n", "", "logger", ".", "info", "(", "\"running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_IDS", "\n", "\n", "#this setup will facilitate the training", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.train.train": [[98, 291], ["data.make_data_loader", "model.build_model", "optims.make_optimizer", "optims.make_lr_scheduler", "optims.make_loss", "len", "openpyxl.Workbook", "sheet.append", "logging.getLogger", "utils.utils.count_parameters", "values.append", "values.append", "logging.getLogger.info", "utils.utils.infer_count_parameters", "logging.getLogger.info", "shape.extend", "utils.flop_benchmark.get_model_infos", "logging.getLogger.info", "logging.getLogger.info", "range", "values.insert", "values.append", "sheet.append", "xl.Workbook.save", "logging.getLogger.info", "logging.getLogger.info", "os.path.exists", "os.makedirs", "format", "RunningAverageMeter", "RunningAverageMeter", "AverageMeter", "AverageMeter", "torch.DataParallel", "model.to.to", "optims.make_lr_scheduler.step", "model.to.train", "avg_loss.reset", "avg_acc.reset", "avg_time.reset", "enumerate", "logging.getLogger.info", "global_avg_time.update", "format", "format", "config.cfg.OUTPUT.LOG_NAME.split", "optims.make_lr_scheduler.get_lr", "time.time", "model.to.", "train.compute_loss_acc", "loss.backward", "optims.make_optimizer.step", "optims.make_optimizer.zero_grad", "time.time", "avg_time.update", "avg_loss.update", "avg_acc.update", "model.to.eval", "utils.R1_mAP", "torch.save", "torch.save", "logging.getLogger.info", "imgs.to.to", "labels.to.to", "torch.utils.clip_grad_norm_", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "enumerate", "utils.R1_mAP.compute", "logging.getLogger.info", "logging.getLogger.info", "model.to.state_dict", "torch.save", "torch.save", "logging.getLogger.info", "model.to.parameters", "model.to.", "utils.R1_mAP.update", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "change.append", "values.extend", "model.to.state_dict", "imgs.to.to", "format", "format"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.data.darts_builder.make_data_loader", "home.repos.pwc.inspect_result.solicucu_ReID.model.__init__.build_model", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_optimizer", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_lr_scheduler", "home.repos.pwc.inspect_result.solicucu_ReID.loss.__init__.make_loss", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.utils.utils.infer_count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.get_model_infos", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.WarmupCosAnnLR.get_lr", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.compute", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update"], ["", "def", "train", "(", ")", ":", "\n", "\n", "# 1\u3001make dataloader", "\n", "# prepare train,val img_info list, elem is tuple; ", "\n", "\t", "train_loader", ",", "val_loader", ",", "num_query", ",", "num_class", "=", "make_data_loader", "(", "cfg", ")", "\n", "\n", "# 2\u3001make model", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_class", ")", "\n", "\n", "# 3\u3001 make optimizer", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "\n", "# 4\u3001 make lr_scheduler", "\n", "scheduler", "=", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "\n", "# 5\u3001make loss ", "\n", "loss_fn", "=", "make_loss", "(", "cfg", ",", "num_class", ")", "\n", "\n", "# get parameters ", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "use_gpu", "=", "device", "==", "\"cuda\"", "\n", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", "!=", "\"\"", "\n", "parallel", "=", "cfg", ".", "MODEL", ".", "PARALLEL", "\n", "\n", "log_period", "=", "cfg", ".", "OUTPUT", ".", "LOG_PERIOD", "\n", "ckpt_period", "=", "cfg", ".", "OUTPUT", ".", "CKPT_PERIOD", "\n", "eval_period", "=", "cfg", ".", "OUTPUT", ".", "EVAL_PERIOD", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "ckpt_save_path", "=", "output_dir", "+", "cfg", ".", "OUTPUT", ".", "CKPT_DIRS", "\n", "\n", "epochs", "=", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "\n", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "grad_clip", "=", "cfg", ".", "SOLVER", ".", "GRAD_CLIP", "\n", "\n", "batch_num", "=", "len", "(", "train_loader", ")", "\n", "log_iters", "=", "batch_num", "//", "log_period", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_save_path", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "ckpt_save_path", ")", "\n", "\n", "# create *_result.xlsx", "\n", "# save the result for analyze", "\n", "", "name", "=", "(", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".xlsx\"", "\n", "result_path", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "+", "name", "\n", "\n", "wb", "=", "xl", ".", "Workbook", "(", ")", "\n", "sheet", "=", "wb", ".", "worksheets", "[", "0", "]", "\n", "titles", "=", "[", "'size/M'", ",", "'speed/ms'", ",", "'final_planes'", ",", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", ",", "\n", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", ",", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", "]", "\n", "sheet", ".", "append", "(", "titles", ")", "\n", "check_epochs", "=", "[", "40", ",", "80", ",", "120", ",", "160", ",", "200", ",", "240", ",", "280", ",", "320", ",", "360", ",", "epochs", "]", "\n", "values", "=", "[", "]", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"CDNet.train\"", ")", "\n", "size", "=", "count_parameters", "(", "model", ")", "\n", "values", ".", "append", "(", "format", "(", "size", ",", "'.2f'", ")", ")", "\n", "values", ".", "append", "(", "model", ".", "final_planes", ")", "\n", "\n", "logger", ".", "info", "(", "\"the param number of the model is {:.2f} M\"", ".", "format", "(", "size", ")", ")", "\n", "infer_size", "=", "infer_count_parameters", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"the infer param number of the model is {:.2f}M\"", ".", "format", "(", "infer_size", ")", ")", "\n", "\n", "shape", "=", "[", "1", ",", "3", "]", "\n", "shape", ".", "extend", "(", "cfg", ".", "DATA", ".", "IMAGE_SIZE", ")", "\n", "\n", "# if cfg.MODEL.NAME == 'cdnet' :", "\n", "# \tinfer_model = CDNetwork(num_class, cfg)", "\n", "# elif cfg.MODEL.NAME == 'cnet':", "\n", "# \tinfer_model = CNetwork(num_class, cfg)", "\n", "# else:", "\n", "# \tinfer_model = model ", "\n", "\n", "# for scaling experiment", "\n", "flops", ",", "_", "=", "get_model_infos", "(", "model", ",", "shape", ")", "\n", "logger", ".", "info", "(", "\"the total flops number of the model is {:.2f} M\"", ".", "format", "(", "flops", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Starting Training CDNetwork\"", ")", "\n", "\n", "best_mAP", ",", "best_r1", "=", "0.", ",", "0.", "\n", "is_best", "=", "False", "\n", "avg_loss", ",", "avg_acc", "=", "RunningAverageMeter", "(", ")", ",", "RunningAverageMeter", "(", ")", "\n", "avg_time", ",", "global_avg_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "if", "parallel", ":", "\n", "\t\t", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "if", "use_gpu", ":", "\n", "\t\t", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "\t\t", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# if save epoch_num k, then run k+1 epoch next", "\n", "if", "pretrained", "and", "epoch", "<", "model", ".", "start_epoch", ":", "\n", "\t\t\t", "continue", "\n", "\n", "# rest the record", "\n", "", "model", ".", "train", "(", ")", "\n", "avg_loss", ".", "reset", "(", ")", "\n", "avg_acc", ".", "reset", "(", ")", "\n", "avg_time", ".", "reset", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "\t\t\t", "t0", "=", "time", ".", "time", "(", ")", "\n", "imgs", ",", "labels", "=", "batch", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "", "res", "=", "model", "(", "imgs", ")", "\n", "\n", "loss", ",", "acc", "=", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "grad_clip", "!=", "0", ":", "\n", "\t\t\t\t", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "grad_clip", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "avg_time", ".", "update", "(", "(", "t1", "-", "t0", ")", "/", "batch_size", ")", "\n", "avg_loss", ".", "update", "(", "loss", ")", "\n", "avg_acc", ".", "update", "(", "acc", ")", "\n", "\n", "# log info", "\n", "if", "(", "i", "+", "1", ")", "%", "log_iters", "==", "0", ":", "\n", "\t\t\t\t", "logger", ".", "info", "(", "\"epoch {}: {}/{} with loss is {:.5f} and acc is {:.3f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "i", "+", "1", ",", "batch_num", ",", "avg_loss", ".", "avg", ",", "avg_acc", ".", "avg", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"end epochs {}/{} with lr: {:.5f} and avg_time is: {:.3f} ms\"", ".", "format", "(", "epoch", "+", "1", ",", "epochs", ",", "lr", ",", "avg_time", ".", "avg", "*", "1000", ")", ")", "\n", "global_avg_time", ".", "update", "(", "avg_time", ".", "avg", ")", "\n", "\n", "# test the model", "\n", "if", "(", "epoch", "+", "1", ")", "%", "eval_period", "==", "0", "or", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\n", "\t\t\t", "model", ".", "eval", "(", ")", "\n", "metrics", "=", "R1_mAP", "(", "num_query", ",", "use_gpu", "=", "use_gpu", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "for", "vi", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "\t\t\t\t\t", "imgs", ",", "labels", ",", "camids", "=", "batch", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "\n", "", "feats", "=", "model", "(", "imgs", ")", "\n", "metrics", ".", "update", "(", "(", "feats", ",", "labels", ",", "camids", ")", ")", "\n", "\n", "#compute cmc and mAP", "\n", "", "cmc", ",", "mAP", "=", "metrics", ".", "compute", "(", ")", "\n", "logger", ".", "info", "(", "\"validation results at epoch {}\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"mAP:{:2%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "\t\t\t\t\t", "logger", ".", "info", "(", "\"CMC curve, Rank-{:<3}:{:.2%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "\n", "# determine whether current model is the best", "\n", "", "if", "mAP", ">", "best_mAP", ":", "\n", "\t\t\t\t\t", "is_best", "=", "True", "\n", "best_mAP", "=", "mAP", "\n", "logger", ".", "info", "(", "\"Get a new best mAP\"", ")", "\n", "", "if", "cmc", "[", "0", "]", ">", "best_r1", ":", "\n", "\t\t\t\t\t", "is_best", "=", "True", "\n", "best_r1", "=", "cmc", "[", "0", "]", "\n", "logger", ".", "info", "(", "\"Get a new best r1\"", ")", "\n", "\n", "# add the result to sheet", "\n", "", "if", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\t\t\t\t\t", "val", "=", "[", "avg_acc", ".", "avg", ",", "mAP", ",", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", "]", "\n", "change", "=", "[", "format", "(", "v", "*", "100", ",", "'.2f'", ")", "for", "v", "in", "val", "]", "\n", "change", ".", "append", "(", "format", "(", "avg_loss", ".", "avg", ",", "'.3f'", ")", ")", "\n", "values", ".", "extend", "(", "change", ")", "\n", "\n", "# whether to save the model", "\n", "", "", "", "if", "(", "epoch", "+", "1", ")", "%", "ckpt_period", "==", "0", "or", "is_best", ":", "\n", "\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"checkpoint_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"checkpoint {} was saved\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "if", "is_best", ":", "\n", "\t\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"best_ckpt.pth\"", ")", "\n", "logger", ".", "info", "(", "\"best_checkpoint was saved\"", ")", "\n", "is_best", "=", "False", "\n", "\n", "\n", "", "", "", "values", ".", "insert", "(", "1", ",", "format", "(", "global_avg_time", ".", "avg", "*", "1000", ",", "'.2f'", ")", ")", "\n", "values", ".", "append", "(", "format", "(", "infer_size", ",", "'.2f'", ")", ")", "\n", "sheet", ".", "append", "(", "values", ")", "\n", "wb", ".", "save", "(", "result_path", ")", "\n", "logger", ".", "info", "(", "\"best_mAP:{:.2%}, best_r1:{:.2%}\"", ".", "format", "(", "best_mAP", ",", "best_r1", ")", ")", "\n", "logger", ".", "info", "(", "\"Ending training CDNetwork\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.train.main": [[292, 296], ["train.parse_config", "train.train"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.main.train_on_imagenet.parse_config", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train"], ["", "def", "main", "(", ")", ":", "\n", "\n", "\t", "parse_config", "(", ")", "\n", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.infer_on_cifar.compute_loss_acc": [[31, 52], ["len", "loss_fn", "scores.max", "scores.max"], "function", ["None"], ["def", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", "=", "None", ")", ":", "\n", "\n", "\t", "loss", ",", "acc", "=", "0.", ",", "0.", "\n", "num", "=", "len", "(", "res", ")", "\n", "# for imagenet val ", "\n", "if", "loss_fn", "is", "None", ":", "\n", "\t\t", "for", "scores", "in", "res", ":", "\n", "\t\t\t", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n", "\n", "", "for", "scores", ",", "feats", "in", "res", ":", "\n", "\n", "\t\t", "ls", "=", "loss_fn", "(", "scores", ",", "feats", ",", "labels", ")", "\n", "loss", "+=", "ls", "\n", "\n", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.infer_on_cifar.parse_config": [[53, 103], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.cfg.merge_from_list", "utils.setup_logger", "utils.setup_logger.info", "utils.setup_logger.info", "config.cfg.merge_from_file", "print", "exit", "utils.setup_logger.info", "utils.setup_logger.info", "utils.setup_logger.info", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.logger.setup_logger"], ["", "def", "parse_config", "(", ")", ":", "\n", "\n", "# create the parser", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"CDNet training\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--config_file\"", ",", "default", "=", "''", ",", "help", "=", "\"path to specify config file\"", ",", "type", "=", "str", ")", "\n", "\n", "#remainder parameters in a list", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "default", "=", "None", ",", "help", "=", "'modify some value for the config file in command line'", ",", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "# use config file to update the default config value", "\n", "\t\t", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "# note that opts is a list ", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "# cfg.freeze() if use this, the cfg can not be revised", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "if", "output_dir", "!=", "\"\"", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"ERROR:please specify an output path\"", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# config the logger ", "\n", "", "logger", "=", "setup_logger", "(", "\"CDNet\"", ",", "output_dir", ",", "0", ",", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", "\n", "\n", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "if", "use_gpu", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with GPU: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "DEVICE_IDS", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with CPU\"", ")", "\n", "\n", "#print the all arguments", "\n", "", "logger", ".", "info", "(", "args", ")", "\n", "#read the config file", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"load configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "\n", "# print the configuration", "\n", "", "logger", ".", "info", "(", "\"running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_IDS", "\n", "\n", "#this setup will facilitate the training", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.infer_on_cifar.test": [[104, 156], ["logging.getLogger", "data.cifar_make_data_loader", "model.build_model", "os.path.isfile", "utils.utils.count_parameters", "logging.getLogger.info", "utils.flop_benchmark.get_model_infos", "logging.getLogger.info", "model.cuda.eval", "logging.getLogger.info", "AverageMeter", "logging.getLogger.info", "model.cuda.load_best_checkpoint", "logging.getLogger.info", "exit", "torch.DataParallel", "model.cuda.cuda", "torch.no_grad", "torch.no_grad", "enumerate", "logging.getLogger.info", "model.cuda.", "infer_on_cifar.compute_loss_acc", "AverageMeter.update", "imgs.cuda.cuda", "labels.cuda.cuda"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.model.__init__.build_model", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.utils.flop_benchmark.get_model_infos", "home.repos.pwc.inspect_result.solicucu_ReID.model.models.BaseNet.load_best_checkpoint", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update"], ["", "def", "test", "(", ")", ":", "\n", "\t", "logger", "=", "logging", ".", "getLogger", "(", "'CDNet.test'", ")", "\n", "# 1\u3001make dataloader", "\n", "train_loader", ",", "val_loader", ",", "num_class", "=", "cifar_make_data_loader", "(", "cfg", ",", "is_val", "=", "True", ")", "\n", "# print(\"num_query:{},num_class:{}\".format(num_query,num_class))", "\n", "\n", "# 2\u3001make model", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_class", ")", "\n", "\n", "# load param", "\n", "ckpt_path", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "+", "cfg", ".", "OUTPUT", ".", "CKPT_DIRS", "+", "cfg", ".", "TEST", ".", "BEST_CKPT", "\n", "if", "os", ".", "path", ".", "isfile", "(", "ckpt_path", ")", ":", "\n", "\t\t", "model", ".", "load_best_checkpoint", "(", "ckpt_path", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"file: {} is not found\"", ".", "format", "(", "ckpt_path", ")", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "'cuda'", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE_IDS", "\n", "\n", "size", "=", "count_parameters", "(", "model", ")", "\n", "logger", ".", "info", "(", "\"the param number of the model is {:.2f}M\"", ".", "format", "(", "size", ")", ")", "\n", "\n", "flops", ",", "_", "=", "get_model_infos", "(", "model", ",", "[", "1", ",", "3", ",", "224", ",", "244", "]", ")", "\n", "logger", ".", "info", "(", "\"the total flops number of the model is {:.2f} M\"", ".", "format", "(", "flops", ")", ")", "\n", "\n", "if", "cfg", ".", "MODEL", ".", "PARALLEL", ":", "\n", "\t\t", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "if", "use_gpu", ":", "\n", "\t\t", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "logger", ".", "info", "(", "\"begin eval the model\"", ")", "\n", "val_acc", "=", "AverageMeter", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "\t\t", "for", "vi", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "\t\t\t", "imgs", ",", "labels", "=", "batch", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t", "imgs", "=", "imgs", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "", "res", "=", "model", "(", "imgs", ")", "\n", "# acc = (scores.max(1)[1] == labels).float().mean()", "\n", "_", ",", "acc", "=", "compute_loss_acc", "(", "res", ",", "labels", ")", "\n", "val_acc", ".", "update", "(", "acc", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"final test acc is:{:.2%}\"", ".", "format", "(", "val_acc", ".", "avg", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Ending testing CDNetwork on cifar\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.infer_on_cifar.main": [[157, 161], ["infer_on_cifar.parse_config", "infer_on_cifar.test"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.main.train_on_imagenet.parse_config", "home.repos.pwc.inspect_result.solicucu_ReID.main.infer_on_cifar.test"], ["", "def", "main", "(", ")", ":", "\n", "\n", "\t", "parse_config", "(", ")", "\n", "test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.train_on_imagenet.compute_loss_acc": [[32, 53], ["len", "loss_fn", "scores.max", "scores.max"], "function", ["None"], ["def", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", "=", "None", ")", ":", "\n", "\n", "\t", "loss", ",", "acc", "=", "0.", ",", "0.", "\n", "num", "=", "len", "(", "res", ")", "\n", "# for imagenet val ", "\n", "if", "loss_fn", "is", "None", ":", "\n", "\t\t", "for", "scores", "in", "res", ":", "\n", "\t\t\t", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n", "\n", "", "for", "scores", ",", "feats", "in", "res", ":", "\n", "\n", "\t\t", "ls", "=", "loss_fn", "(", "scores", ",", "feats", ",", "labels", ")", "\n", "loss", "+=", "ls", "\n", "\n", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.train_on_imagenet.parse_config": [[54, 104], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.cfg.merge_from_list", "utils.setup_logger", "utils.setup_logger.info", "utils.setup_logger.info", "config.cfg.merge_from_file", "print", "exit", "utils.setup_logger.info", "utils.setup_logger.info", "utils.setup_logger.info", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.logger.setup_logger"], ["", "def", "parse_config", "(", ")", ":", "\n", "\n", "# create the parser", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"CDNet training\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--config_file\"", ",", "default", "=", "''", ",", "help", "=", "\"path to specify config file\"", ",", "type", "=", "str", ")", "\n", "\n", "#remainder parameters in a list", "\n", "parser", ".", "add_argument", "(", "\"opts\"", ",", "default", "=", "None", ",", "help", "=", "'modify some value for the config file in command line'", ",", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "# use config file to update the default config value", "\n", "\t\t", "cfg", ".", "merge_from_file", "(", "args", ".", "config_file", ")", "\n", "# note that opts is a list ", "\n", "", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "# cfg.freeze() if use this, the cfg can not be revised", "\n", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "if", "output_dir", "!=", "\"\"", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"ERROR:please specify an output path\"", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# config the logger ", "\n", "", "logger", "=", "setup_logger", "(", "\"CDNet\"", ",", "output_dir", ",", "0", ",", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", "\n", "\n", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "if", "use_gpu", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with GPU: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "DEVICE_IDS", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with CPU\"", ")", "\n", "\n", "#print the all arguments", "\n", "", "logger", ".", "info", "(", "args", ")", "\n", "#read the config file", "\n", "if", "args", ".", "config_file", "!=", "\"\"", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"load configuration file {}\"", ".", "format", "(", "args", ".", "config_file", ")", ")", "\n", "\n", "# print the configuration", "\n", "", "logger", ".", "info", "(", "\"running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_IDS", "\n", "\n", "#this setup will facilitate the training", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.train_on_imagenet.train": [[105, 285], ["data.imagenet_make_data_loader", "model.build_model", "optims.make_optimizer", "optims.make_lr_scheduler", "optims.make_loss", "len", "openpyxl.Workbook", "sheet.append", "logging.getLogger", "utils.utils.count_parameters", "values.append", "values.append", "logging.getLogger.info", "logging.getLogger.info", "range", "values.insert", "sheet.append", "xl.Workbook.save", "logging.getLogger.info", "logging.getLogger.info", "os.path.exists", "os.makedirs", "format", "RunningAverageMeter", "RunningAverageMeter", "AverageMeter", "AverageMeter", "torch.DataParallel", "model.to.to", "optims.make_lr_scheduler.step", "model.to.train", "avg_loss.reset", "avg_acc.reset", "avg_time.reset", "enumerate", "logging.getLogger.info", "global_avg_time.update", "format", "config.cfg.OUTPUT.LOG_NAME.split", "optims.make_lr_scheduler.get_lr", "time.time", "model.to.", "train_on_imagenet.compute_loss_acc", "loss.backward", "optims.make_optimizer.step", "optims.make_optimizer.zero_grad", "time.time", "avg_time.update", "avg_loss.update", "avg_acc.update", "model.to.eval", "logging.getLogger.info", "RunningAverageMeter", "logging.getLogger.info", "imgs.to.to", "labels.to.to", "torch.utils.clip_grad_norm_", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "enumerate", "logging.getLogger.info", "logging.getLogger.info", "torch.save", "torch.save", "torch.save", "torch.save", "logging.getLogger.info", "model.to.parameters", "model.to.", "train_on_imagenet.compute_loss_acc", "RunningAverageMeter.update", "logging.getLogger.info", "values.extend", "model.to.module.state_dict", "model.to.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "imgs.to.to", "labels.to.to", "format", "format", "model.to.module.state_dict", "model.to.state_dict"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.model.__init__.build_model", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_optimizer", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_lr_scheduler", "home.repos.pwc.inspect_result.solicucu_ReID.loss.__init__.make_loss", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.WarmupCosAnnLR.get_lr", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update"], ["", "def", "train", "(", ")", ":", "\n", "\n", "# 1\u3001make dataloader", "\n", "\t", "train_loader", ",", "val_loader", ",", "num_class", "=", "imagenet_make_data_loader", "(", "cfg", ")", "\n", "\n", "# 2\u3001make model", "\n", "model", "=", "build_model", "(", "cfg", ",", "num_class", ")", "\n", "\n", "# 3\u3001 make optimizer", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "\n", "# 4\u3001 make lr_scheduler", "\n", "scheduler", "=", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "\n", "# 5\u3001make loss: default use softmax loss ", "\n", "loss_fn", "=", "make_loss", "(", "cfg", ",", "num_class", ")", "\n", "\n", "# get parameters ", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "use_gpu", "=", "device", "==", "\"cuda\"", "\n", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAIN_PATH", "!=", "\"\"", "\n", "parallel", "=", "cfg", ".", "MODEL", ".", "PARALLEL", "\n", "\n", "log_period", "=", "cfg", ".", "OUTPUT", ".", "LOG_PERIOD", "\n", "ckpt_period", "=", "cfg", ".", "OUTPUT", ".", "CKPT_PERIOD", "\n", "eval_period", "=", "cfg", ".", "OUTPUT", ".", "EVAL_PERIOD", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "ckpt_save_path", "=", "output_dir", "+", "cfg", ".", "OUTPUT", ".", "CKPT_DIRS", "\n", "\n", "epochs", "=", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "\n", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "grad_clip", "=", "cfg", ".", "SOLVER", ".", "GRAD_CLIP", "\n", "\n", "batch_num", "=", "len", "(", "train_loader", ")", "\n", "log_iters", "=", "batch_num", "//", "log_period", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_save_path", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "ckpt_save_path", ")", "\n", "\n", "# create *_result.xlsx", "\n", "# save the result for analyze", "\n", "", "name", "=", "(", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".xlsx\"", "\n", "result_path", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "+", "name", "\n", "\n", "wb", "=", "xl", ".", "Workbook", "(", ")", "\n", "sheet", "=", "wb", ".", "worksheets", "[", "0", "]", "\n", "titles", "=", "[", "'size/M'", ",", "'speed/ms'", ",", "'final_planes'", ",", "'acc'", ",", "'loss'", ",", "'acc'", ",", "'loss'", ",", "'acc'", ",", "'loss'", "]", "\n", "sheet", ".", "append", "(", "titles", ")", "\n", "check_epochs", "=", "[", "40", ",", "80", ",", "120", ",", "160", ",", "200", ",", "240", ",", "280", ",", "320", ",", "360", ",", "epochs", "]", "\n", "values", "=", "[", "]", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"CDNet.train\"", ")", "\n", "size", "=", "count_parameters", "(", "model", ")", "\n", "values", ".", "append", "(", "format", "(", "size", ",", "'.2f'", ")", ")", "\n", "values", ".", "append", "(", "model", ".", "final_planes", ")", "\n", "logger", ".", "info", "(", "\"the total parameters is: {:.2f}\"", ".", "format", "(", "size", ")", ")", "\n", "\n", "\n", "logger", ".", "info", "(", "\"Starting Training CDNetwork\"", ")", "\n", "best_acc", "=", "0.", "\n", "is_best", "=", "False", "\n", "avg_loss", ",", "avg_acc", "=", "RunningAverageMeter", "(", ")", ",", "RunningAverageMeter", "(", ")", "\n", "avg_time", ",", "global_avg_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "if", "pretrained", ":", "\n", "\t\t", "start_epoch", "=", "model", ".", "start_epoch", "\n", "\n", "", "if", "parallel", ":", "\n", "\t\t", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "", "if", "use_gpu", ":", "\n", "\t\t", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "\t\t", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "\n", "# if save epoch_num k, then run k+1 epoch next", "\n", "if", "pretrained", "and", "epoch", "<", "start_epoch", ":", "\n", "\t\t\t", "continue", "\n", "\n", "# rest the record", "\n", "", "model", ".", "train", "(", ")", "\n", "avg_loss", ".", "reset", "(", ")", "\n", "avg_acc", ".", "reset", "(", ")", "\n", "avg_time", ".", "reset", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "\t\t\t", "t0", "=", "time", ".", "time", "(", ")", "\n", "imgs", ",", "labels", "=", "batch", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "", "res", "=", "model", "(", "imgs", ")", "\n", "\n", "loss", ",", "acc", "=", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "grad_clip", "!=", "0", ":", "\n", "\t\t\t\t", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "grad_clip", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "avg_time", ".", "update", "(", "(", "t1", "-", "t0", ")", "/", "batch_size", ")", "\n", "avg_loss", ".", "update", "(", "loss", ")", "\n", "avg_acc", ".", "update", "(", "acc", ")", "\n", "\n", "# log info", "\n", "if", "(", "i", "+", "1", ")", "%", "log_iters", "==", "0", ":", "\n", "\t\t\t\t", "logger", ".", "info", "(", "\"epoch {}: {}/{} with loss is {:.5f} and acc is {:.3f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "i", "+", "1", ",", "batch_num", ",", "avg_loss", ".", "avg", ",", "avg_acc", ".", "avg", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"end epochs {}/{} with lr: {:.5f} and avg_time is: {:.3f} ms\"", ".", "format", "(", "epoch", "+", "1", ",", "epochs", ",", "lr", ",", "avg_time", ".", "avg", "*", "1000", ")", ")", "\n", "global_avg_time", ".", "update", "(", "avg_time", ".", "avg", ")", "\n", "\n", "# test the model", "\n", "if", "(", "epoch", "+", "1", ")", "%", "eval_period", "==", "0", "or", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\n", "\t\t\t", "model", ".", "eval", "(", ")", "\n", "logger", ".", "info", "(", "\"begin eval the model\"", ")", "\n", "val_acc", "=", "RunningAverageMeter", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "\t\t\t\t", "for", "vi", ",", "batch", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "\t\t\t\t\t", "imgs", ",", "labels", "=", "batch", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "", "res", "=", "model", "(", "imgs", ")", "\n", "# acc = (scores.max(1)[1] == labels).float().mean()", "\n", "_", ",", "acc", "=", "compute_loss_acc", "(", "res", ",", "labels", ")", "\n", "val_acc", ".", "update", "(", "acc", ")", "\n", "\n", "\n", "", "logger", ".", "info", "(", "\"validation results at epoch:{}\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"acc:{:.2%}\"", ".", "format", "(", "val_acc", ".", "avg", ")", ")", "\n", "\n", "# determine whether current model is the best", "\n", "if", "val_acc", ".", "avg", ">", "best_acc", ":", "\n", "\t\t\t\t\t", "logger", ".", "info", "(", "\"get a new best acc\"", ")", "\n", "best_acc", "=", "val_acc", ".", "avg", "\n", "is_best", "=", "True", "\n", "\n", "# add the result to sheet", "\n", "", "if", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\t\t\t\t\t", "val", "=", "[", "format", "(", "val_acc", ".", "avg", "*", "100", ",", "'.2f'", ")", ",", "format", "(", "avg_loss", ".", "avg", ",", "'.3f'", ")", "]", "\n", "values", ".", "extend", "(", "val", ")", "\n", "# exit(1)", "\n", "# whether to save the model", "\n", "", "", "", "if", "(", "epoch", "+", "1", ")", "%", "ckpt_period", "==", "0", "or", "is_best", ":", "\n", "\t\t\t", "if", "parallel", ":", "\n", "\t\t\t\t", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"checkpoint_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"checkpoint_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "", "logger", ".", "info", "(", "\"checkpoint {} was saved\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "if", "is_best", ":", "\n", "\t\t\t\t", "if", "parallel", ":", "\n", "\t\t\t\t\t", "torch", ".", "save", "(", "model", ".", "module", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"best_ckpt.pth\"", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"best_ckpt.pth\"", ")", "\n", "", "logger", ".", "info", "(", "\"best_checkpoint was saved\"", ")", "\n", "is_best", "=", "False", "\n", "\n", "\n", "", "", "", "values", ".", "insert", "(", "1", ",", "format", "(", "global_avg_time", ".", "avg", "*", "1000", ",", "'.2f'", ")", ")", "\n", "sheet", ".", "append", "(", "values", ")", "\n", "wb", ".", "save", "(", "result_path", ")", "\n", "logger", ".", "info", "(", "\"best_acc:{:.2%}\"", ".", "format", "(", "best_acc", ")", ")", "\n", "logger", ".", "info", "(", "\"Ending training CDNetwork on imagenet\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.main.train_on_imagenet.main": [[286, 290], ["train_on_imagenet.parse_config", "train_on_imagenet.train"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.main.train_on_imagenet.parse_config", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train"], ["", "def", "main", "(", ")", ":", "\n", "\n", "\t", "parse_config", "(", ")", "\n", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.Conv1x1BNReLU.__init__": [[15, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "\n", "\t\t", "super", "(", "Conv1x1BNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.Conv1x1BNReLU.forward": [[25, 28], ["operations.Conv1x1BNReLU.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.Conv1x1BN.__init__": [[33, 40], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "\n", "\t\t", "super", "(", "Conv1x1BN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.Conv1x1BN.forward": [[42, 45], ["operations.Conv1x1BN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.ConvBNReLU.__init__": [[51, 61], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "keepsame", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# resize the padding to keep the same shape for special kernel_size", "\n", "if", "keepsame", ":", "\n", "\t\t\t", "padding", "=", "kernel_size", "//", "2", "\n", "", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.ConvBNReLU.forward": [[63, 66], ["operations.ConvBNReLU.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.AdaptiveFuse.__init__": [[69, 81], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "reduction", "=", "4", ",", "layer_norm", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "AdaptiveFuse", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "mid_planes", "=", "in_planes", "//", "reduction", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "\t\t\t", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "mid_planes", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.AdaptiveFuse.forward": [[82, 94], ["operations.AdaptiveFuse.gap", "operations.AdaptiveFuse.fc1", "operations.AdaptiveFuse.relu", "operations.AdaptiveFuse.fc2", "operations.AdaptiveFuse.activation", "operations.AdaptiveFuse.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "res", "=", "self", ".", "gap", "(", "x", ")", "\n", "res", "=", "self", ".", "fc1", "(", "res", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "\t\t\t", "res", "=", "self", ".", "norm", "(", "res", ")", "\n", "", "res", "=", "self", ".", "relu", "(", "res", ")", "\n", "res", "=", "self", ".", "fc2", "(", "res", ")", "\n", "\n", "w", "=", "self", ".", "activation", "(", "res", ")", "\n", "\n", "return", "x", "*", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.StdStem.__init__": [[98, 105], ["torch.Module.__init__", "operations.ConvBNReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "usepool", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "StdStem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "usepool", "=", "usepool", "\n", "self", ".", "conv1", "=", "ConvBNReLU", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "keepsame", "=", "False", ")", "\n", "if", "self", ".", "usepool", ":", "\n", "\t\t\t", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "# ", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.StdStem.forward": [[106, 112], ["operations.StdStem.conv1", "operations.StdStem.pool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "usepool", ":", "\n", "\t\t\t", "return", "self", ".", "pool", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.DWBlock.__init__": [[117, 128], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "operations.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "keepsame", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "DWBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_planes", "==", "out_planes", "\n", "if", "keepsame", ":", "\n", "\t\t\t", "padding", "=", "kernel_size", "//", "2", "\n", "", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "out_planes", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.DWBlock.forward": [[130, 133], ["operations.DWBlock.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.CBlock.__init__": [[144, 165], ["torch.Module.__init__", "operations.Conv1x1BNReLU", "operations.CBlock.make_block_layer", "operations.CBlock.make_block_layer", "operations.Conv1x1BN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "operations.AdaptiveFuse", "operations.Conv1x1BN"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.CBlock.make_block_layer", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.CBlock.make_block_layer"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "k1", ",", "k2", ",", "reduction", "=", "4", ",", "adaptionfuse", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "CBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "adaptionfuse", "=", "adaptionfuse", "\n", "mid_planes", "=", "out_planes", "//", "reduction", "\n", "\n", "self", ".", "squeeze", "=", "Conv1x1BNReLU", "(", "in_planes", ",", "mid_planes", ")", "\n", "self", ".", "conv1", "=", "self", ".", "make_block_layer", "(", "mid_planes", ",", "k1", ")", "\n", "self", ".", "conv2", "=", "self", ".", "make_block_layer", "(", "mid_planes", ",", "k2", ")", "\n", "if", "self", ".", "adaptionfuse", ":", "\n", "\t\t\t", "self", ".", "adaption", "=", "AdaptiveFuse", "(", "mid_planes", ")", "\n", "# note the conv1x1 is linear", "\n", "", "self", ".", "restore", "=", "Conv1x1BN", "(", "mid_planes", ",", "out_planes", ")", "\n", "\n", "# use for identity", "\n", "self", ".", "expand", "=", "None", "\n", "# note the conv1x1 is linear", "\n", "if", "in_planes", "!=", "out_planes", ":", "\n", "\t\t\t", "self", ".", "expand", "=", "Conv1x1BN", "(", "in_planes", ",", "out_planes", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.CBlock.forward": [[166, 189], ["operations.CBlock.squeeze", "operations.CBlock.conv1", "operations.CBlock.conv2", "operations.CBlock.restore", "operations.CBlock.relu", "operations.CBlock.expand", "operations.CBlock.adaption", "operations.CBlock.adaption"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "identity", "=", "x", "\n", "\n", "# reduction for bottleneck", "\n", "x", "=", "self", ".", "squeeze", "(", "x", ")", "\n", "res1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "res2", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "self", ".", "adaptionfuse", ":", "\n", "\t\t\t", "add", "=", "self", ".", "adaption", "(", "res1", ")", "+", "self", ".", "adaption", "(", "res2", ")", "\n", "", "else", ":", "\n", "\t\t\t", "add", "=", "res1", "+", "res2", "\n", "\n", "", "res", "=", "self", ".", "restore", "(", "add", ")", "\n", "\n", "if", "self", ".", "expand", "is", "not", "None", ":", "\n", "\n", "\t\t\t", "identity", "=", "self", ".", "expand", "(", "identity", ")", "\n", "\n", "", "out", "=", "res", "+", "identity", "\n", "\n", "return", "self", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.CBlock.make_block_layer": [[191, 200], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "blocks.append", "operations.DWBlock"], "methods", ["None"], ["", "def", "make_block_layer", "(", "self", ",", "in_planes", ",", "k", ")", ":", "\n", "\n", "\t\t", "blocks", "=", "[", "]", "\n", "# compute how many dw_conv3x3 to be construct", "\n", "num", "=", "k", "//", "2", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "\t\t\t", "blocks", ".", "append", "(", "DWBlock", "(", "in_planes", ",", "in_planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.CDBlock.__init__": [[208, 219], ["torch.Module.__init__", "blocks.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "operations.CBlock", "blocks.append", "operations.CBlock"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_list", ",", "adaptionfuse", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "CDBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "blocks", "=", "[", "]", "\n", "k1", ",", "k2", ",", "r", "=", "kernel_list", "\n", "# first block may occur expand channel", "\n", "blocks", ".", "append", "(", "CBlock", "(", "in_planes", ",", "out_planes", ",", "k1", ",", "k2", ",", "adaptionfuse", "=", "adaptionfuse", ")", ")", "\n", "for", "i", "in", "range", "(", "r", "-", "1", ")", ":", "\n", "\t\t\t", "blocks", ".", "append", "(", "CBlock", "(", "out_planes", ",", "out_planes", ",", "k1", ",", "k2", ",", "adaptionfuse", "=", "adaptionfuse", ")", ")", "\n", "\n", "", "self", ".", "ops", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.CDBlock.forward": [[220, 223], ["operations.CDBlock.ops"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "ops", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.DownSample.__init__": [[227, 232], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "operations.Conv1x1BNReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "2", ")", ":", "\n", "\n", "\t\t", "super", "(", "DownSample", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "stride", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv1x1", "=", "Conv1x1BNReLU", "(", "in_planes", ",", "out_planes", ")", "\n", "# here we do conv1x1 first before avg_pool as osnet", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.DownSample.forward": [[233, 236], ["operations.DownSample.conv1x1", "operations.DownSample.avg_pool"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "return", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.operations.conv1x1": [[9, 11], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "\t", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.cdnet_search.MBlock.__init__": [[23, 36], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "operations.CDBlock", "cdnet_search.MBlock.ops.append"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "adaptionfuse", "=", "False", ",", "usek9", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "MBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "usek9", ":", "\n", "\t\t\t", "kernel_list", "=", "kernels", "[", ":", "-", "3", "]", "\n", "", "else", ":", "\n", "\t\t\t", "kernel_list", "=", "kernels", "\n", "\n", "", "self", ".", "ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "kernel", "in", "kernel_list", ":", "\n", "\t\t\t", "cblock", "=", "CDBlock", "(", "in_planes", ",", "out_planes", ",", "kernel", ",", "adaptionfuse", "=", "adaptionfuse", ")", "\n", "self", ".", "ops", ".", "append", "(", "cblock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.cdnet_search.MBlock.forward": [[37, 40], ["sum", "enumerate", "op"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ",", "index", ")", ":", "\n", "\n", "\t\t", "return", "sum", "(", "weights", "[", "i", "]", "*", "op", "(", "x", ")", "if", "i", "in", "index", "else", "weights", "[", "i", "]", "for", "i", ",", "op", "in", "enumerate", "(", "self", ".", "ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.cdnet_search.CDNetwork.__init__": [[58, 108], ["torch.Module.__init__", "len", "operations.StdStem", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "range", "cdnet_search.CDNetwork._make_layers", "operations.Conv1x1BNReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "cdnet_search.CDNetwork._init_alphas", "cdnet_search.make_divisible", "cdnet_search.CDNetwork._make_layers", "cdnet_search.CDNetwork.cells.append", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "cdnet_search.CDNetwork._make_fc_layers", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "operations.DownSample"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._init_alphas", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.make_divisible", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers"], ["def", "__init__", "(", "self", ",", "num_class", ",", "cfg", ")", ":", "\n", "\n", "\t\t", "super", "(", "CDNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "stages", "=", "cfg", ".", "MODEL", ".", "STAGES", "\n", "self", ".", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "self", ".", "multiplier", "=", "cfg", ".", "MODEL", ".", "MULTIPLIER", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAINED", "\n", "self", ".", "adaption_fusion", "=", "cfg", ".", "MODEL", ".", "ADAPTION_FUSION", "\n", "self", ".", "fc_dims", "=", "cfg", ".", "MODEL", ".", "FC_DIMS", "\n", "self", ".", "fc_num", "=", "len", "(", "self", ".", "fc_dims", ")", "\n", "# change the channel for scaling", "\n", "self", ".", "planes", "=", "[", "make_divisible", "(", "n", "*", "self", ".", "multiplier", ")", "for", "n", "in", "cfg", ".", "MODEL", ".", "PLANES", "]", "\n", "self", ".", "final_planes", "=", "512", "\n", "self", ".", "before_gap", "=", "False", "\n", "self", ".", "dropout", "=", "0.2", "\n", "\n", "\n", "self", ".", "stem", "=", "StdStem", "(", "3", ",", "self", ".", "planes", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "num", "=", "len", "(", "self", ".", "stages", ")", "\n", "for", "i", "in", "range", "(", "num", "-", "1", ")", ":", "\n", "\t\t\t", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "usek9", "=", "True", ")", "\n", "self", ".", "cells", ".", "append", "(", "DownSample", "(", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "-", "1", "]", ",", "self", ".", "planes", "[", "-", "2", "]", ",", "self", ".", "planes", "[", "-", "1", "]", ",", "usek9", "=", "True", ")", "\n", "\n", "# expand or squeeze the channel", "\n", "self", ".", "conv1x1", "=", "Conv1x1BNReLU", "(", "self", ".", "planes", "[", "-", "1", "]", ",", "self", ".", "planes", "[", "-", "1", "]", ")", "\n", "\n", "# gap", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# fully connected layer ", "\n", "self", ".", "final_planes", "=", "self", ".", "planes", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "# balance neck", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "self", ".", "fc", "=", "self", ".", "_make_fc_layers", "(", "self", ".", "planes", "[", "-", "1", "]", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "fc_dims", "[", "-", "1", "]", "\n", "\n", "# classifier", "\n", "", "if", "not", "self", ".", "before_gap", ":", "\n", "\t\t\t", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "final_planes", ",", "num_class", ")", "\n", "\n", "", "self", ".", "_init_alphas", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.cdnet_search.CDNetwork._make_layers": [[111, 119], ["cells.append", "range", "cdnet_search.MBlock", "cells.append", "cdnet_search.MBlock"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "num_cells", ",", "in_planes", ",", "out_planes", ",", "usek9", "=", "True", ")", ":", "\n", "\n", "\t\t", "cells", "=", "[", "]", "\n", "cells", ".", "append", "(", "MBlock", "(", "in_planes", ",", "out_planes", ",", "self", ".", "adaption_fusion", ",", "usek9", ")", ")", "\n", "for", "i", "in", "range", "(", "num_cells", "-", "1", ")", ":", "\n", "\t\t\t", "cells", ".", "append", "(", "MBlock", "(", "out_planes", ",", "out_planes", ",", "self", ".", "adaption_fusion", ",", "usek9", ")", ")", "\n", "\n", "", "return", "cells", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.cdnet_search.CDNetwork._make_fc_layers": [[120, 134], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fc_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "\n", "\t\t", "layers", "=", "[", "]", "\n", "in_dim", "=", "in_planes", "\n", "\n", "for", "dim", "in", "self", ".", "fc_dims", ":", "\n", "\n", "\t\t\t", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "in_dim", "=", "dim", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.cdnet_search.CDNetwork._init_alphas": [[135, 147], ["sum", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "_init_alphas", "(", "self", ")", ":", "\n", "\n", "\t\t", "k1", "=", "sum", "(", "self", ".", "stages", ")", "\n", "\n", "num_ops", "=", "len", "(", "op_names", ")", "\n", "scale", "=", "1e-3", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "self", ".", "alphas1", "=", "Variable", "(", "scale", "*", "torch", ".", "ones", "(", "k1", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "alphas1", "=", "Variable", "(", "scale", "*", "torch", ".", "ones", "(", "k1", ",", "num_ops", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "self", ".", "arch_parameters", "=", "[", "self", ".", "alphas1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.cdnet_search.CDNetwork.get_weights": [[150, 180], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "weights.append", "indexs.append", "torch.softmax.topk", "torch.softmax.detach", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ",", "alphas_list", ")", ":", "\n", "\n", "\t\t", "k", "=", "self", ".", "cfg", ".", "SOLVER", ".", "TOPK", "\n", "\n", "# process each alpha", "\n", "weights", "=", "[", "]", "\n", "indexs", "=", "[", "]", "\n", "\n", "for", "alphas", "in", "alphas_list", ":", "\n", "\n", "# softmax", "\n", "\t\t\t", "probs", "=", "F", ".", "softmax", "(", "alphas", ",", "dim", "=", "1", ")", "\n", "\n", "# select the max_prob index , max() return [val, indices]", "\n", "index", "=", "probs", ".", "topk", "(", "k", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "# construt one-zero vector according to the top-k index", "\n", "one_zero", "=", "torch", ".", "zeros_like", "(", "probs", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "# create a mid value ", "\n", "mid_val", "=", "one_zero", "-", "probs", ".", "detach", "(", ")", "\n", "\n", "# we can construct a weight with the same value as one_zero for forward propagation", "\n", "# Note that mid_val is no need to calculate gradients and the gradients will be backpropagated ", "\n", "# via probs to update the architecture parameters.", "\n", "weight", "=", "mid_val", "+", "probs", "\n", "\n", "\n", "weights", ".", "append", "(", "weight", ")", "\n", "indexs", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "weights", ",", "indexs", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.cdnet_search.CDNetwork.forward": [[182, 239], ["cdnet_search.CDNetwork.stem", "cdnet_search.CDNetwork.get_weights", "enumerate", "range", "cdnet_search.CDNetwork.conv1x1", "cdnet_search.CDNetwork.gap", "cdnet_search.CDNetwork.size", "cdnet_search.CDNetwork.view", "cdnet_search.CDNetwork.classifier", "range", "cdnet_search.CDNetwork.drop", "cdnet_search.CDNetwork.fc"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.CNetwork.get_weights", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "weights", ",", "indexs", "=", "self", ".", "get_weights", "(", "self", ".", "arch_parameters", ")", "\n", "pos", "=", "-", "1", "\n", "\n", "weights1", "=", "weights", "[", "0", "]", "\n", "indexs1", "=", "indexs", "[", "0", "]", "\n", "new_stage", "=", "self", ".", "stages", "[", ":", "-", "1", "]", "\n", "\n", "#1~2 stages", "\n", "w", "=", "-", "1", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "new_stage", ")", ":", "\n", "# each stage", "\n", "\t\t\t", "for", "j", "in", "range", "(", "num", ")", ":", "\n", "\t\t\t\t", "pos", "+=", "1", "\n", "w", "+=", "1", "\n", "x", "=", "self", ".", "cells", "[", "pos", "]", "(", "x", ",", "weights1", "[", "w", "]", ",", "indexs1", "[", "w", "]", ")", "\n", "# downsample", "\n", "", "pos", "+=", "1", "\n", "\n", "x", "=", "self", ".", "cells", "[", "pos", "]", "(", "x", ")", "\n", "\n", "# last stage, without downsample", "\n", "", "for", "i", "in", "range", "(", "self", ".", "stages", "[", "-", "1", "]", ")", ":", "\n", "\t\t\t", "pos", "+=", "1", "\n", "w", "+=", "1", "\n", "x", "=", "self", ".", "cells", "[", "pos", "]", "(", "x", ",", "weights1", "[", "w", "]", ",", "indexs1", "[", "w", "]", ")", "\n", "\n", "# conv1x1 before gap", "\n", "", "x", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "\n", "if", "self", ".", "before_gap", ":", "\n", "\t\t\t", "return", "x", "\n", "# gap ", "\n", "", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "\n", "# reshape the shape", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "feat", "=", "x", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "\n", "# dropout ", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "feat", "=", "self", ".", "drop", "(", "feat", ")", "\n", "# balance neck", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "feat_fc", "=", "self", ".", "fc", "(", "feat", ")", "\n", "", "else", ":", "\n", "\t\t\t", "feat_fc", "=", "feat", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "\t\t\t", "return", "feat", "\n", "\n", "", "score", "=", "self", ".", "classifier", "(", "feat_fc", ")", "\n", "\n", "return", "[", "[", "score", ",", "feat", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.cdnet_search.CDNetwork._arch_parameters": [[240, 243], ["None"], "methods", ["None"], ["", "def", "_arch_parameters", "(", "self", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.cdnet_search.CDNetwork._parse_genotype": [[244, 278], ["w1.max", "copy.deepcopy", "alphas1.cpu.cpu.detach().numpy().tolist", "json.dumps", "indices1.numpy.numpy.cpu().numpy", "indices1.numpy.numpy.numpy", "layers.append", "alphas1.cpu.cpu.cpu", "open", "f.write", "alphas1.cpu.cpu.detach().numpy", "indices1.numpy.numpy.cpu", "alphas1.cpu.cpu.detach"], "methods", ["None"], ["", "def", "_parse_genotype", "(", "self", ",", "file", "=", "\"./genotype.json\"", ")", ":", "\n", "\n", "\t\t", "geno", "=", "{", "}", "\n", "\n", "w1", "=", "self", ".", "alphas1", "\n", "# find the maxvlaue indices", "\n", "_", ",", "indices1", "=", "w1", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "indices1", "=", "indices1", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "indices1", "=", "indices1", ".", "numpy", "(", ")", "\n", "\n", "", "for", "ind", "in", "indices1", ":", "\n", "\t\t\t", "layers", ".", "append", "(", "kernels", "[", "ind", "]", ")", "\n", "\n", "", "geno", "[", "\"layers\"", "]", "=", "layers", "\n", "\n", "\n", "# alphas", "\n", "alphas1", "=", "copy", ".", "deepcopy", "(", "self", ".", "alphas1", ")", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "alphas1", "=", "alphas1", ".", "cpu", "(", ")", "\n", "\n", "", "alphas1", "=", "alphas1", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "geno", "[", "\"alphas1\"", "]", "=", "alphas1", "\n", "\n", "json_data", "=", "json", ".", "dumps", "(", "geno", ",", "indent", "=", "4", ")", "\n", "with", "open", "(", "file", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t", "f", ".", "write", "(", "json_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.cdnet_search.CDNetwork.kaiming_init_": [[281, 298], ["cdnet_search.CDNetwork.modules", "isinstance", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["", "", "def", "kaiming_init_", "(", "self", ")", ":", "\n", "\n", "# print(\"use kaiming init\")", "\n", "\t\t", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t\t\t", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t\t\t", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t\t", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.cdnet_search.CDNetwork.load_pretrained_model": [[299, 329], ["glob.glob", "sorted", "int", "logger.info", "cdnet_search.CDNetwork.load_state_dict", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "cdnet_search.CDNetwork.alphas1.data.copy_", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "open", "json.load", "[].split", "[].split", "os.path.split"], "methods", ["None"], ["", "", "", "", "def", "load_pretrained_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "# checkpoint", "\n", "\t\t", "ckpt_list", "=", "glob", ".", "glob", "(", "path", "+", "\"checkpoint_*\"", ")", "\n", "# ", "\n", "ckpt_list", "=", "sorted", "(", "ckpt_list", ")", "\n", "\n", "ckpt_name", "=", "ckpt_list", "[", "-", "1", "]", "\n", "\"\"\"\n\t\tfile_path = \"D:/test/test.py\"\n\t\t(filepath, tempfilename) = os.path.split(file_path)\n\t\t(filename, extension) = os.path.splitext(tempfilename)\n\t\t\"\"\"", "\n", "num", "=", "int", "(", "os", ".", "path", ".", "split", "(", "ckpt_name", ")", "[", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "self", ".", "start_epoch", "=", "num", "\n", "logger", ".", "info", "(", "\"load checkpoint from {}\"", ".", "format", "(", "ckpt_name", ")", ")", "\n", "\n", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt_name", ")", ")", "\n", "\n", "# genotype", "\n", "geno_name", "=", "path", "+", "\"genotype_{}.json\"", ".", "format", "(", "num", ")", "\n", "\n", "with", "open", "(", "geno_name", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "geno", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "alphas1", "=", "torch", ".", "tensor", "(", "geno", "[", "\"alphas1\"", "]", ")", "\n", "\n", "self", ".", "alphas1", ".", "data", ".", "copy_", "(", "alphas1", ")", "\n", "\n", "logger", ".", "info", "(", "\"end of load the checkpoint and alpha\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.cdnet_search.make_divisible": [[41, 44], ["int"], "function", ["None"], ["", "", "def", "make_divisible", "(", "num", ",", "divisor", "=", "4", ")", ":", "\n", "\n", "\t", "return", "int", "(", "(", "num", "//", "divisor", ")", "*", "divisor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.train_search.compute_loss_acc": [[34, 47], ["len", "loss_fn", "scores.max"], "function", ["None"], ["def", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", ")", ":", "\n", "\n", "\t", "loss", ",", "acc", "=", "0.", ",", "0.", "\n", "num", "=", "len", "(", "res", ")", "\n", "\n", "for", "scores", ",", "feats", "in", "res", ":", "\n", "\t\t", "ls", "=", "loss_fn", "(", "scores", ",", "feats", ",", "labels", ")", "\n", "loss", "+=", "ls", "\n", "\n", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.train_search.set_config": [[48, 80], ["utils.setup_logger", "utils.setup_logger.info", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "print", "exit", "utils.setup_logger.info", "utils.setup_logger.info", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.logger.setup_logger"], ["", "def", "set_config", "(", ")", ":", "\n", "\n", "\t", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "if", "output_dir", "!=", "\"\"", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"ERROR:please specify an output path\"", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# config the logger ", "\n", "", "logger", "=", "setup_logger", "(", "\"CDNet_Search\"", ",", "output_dir", ",", "0", ",", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", "\n", "\n", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "if", "use_gpu", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with GPU: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "DEVICE_IDS", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with CPU\"", ")", "\n", "\n", "", "if", "use_gpu", ":", "\n", "\t\t", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_IDS", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# print the configuration", "\n", "logger", ".", "info", "(", "\"running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "# init rand seed ", "\n", "seed", "=", "cfg", ".", "SOLVER", ".", "SEED", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "use_gpu", ":", "\n", "\t\t", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.train_search.train": [[81, 292], ["data.darts_make_data_loader", "cdnet_search.CDNetwork", "optims.make_optimizer", "torch.optim.Adam", "torch.optim.Adam", "optims.make_lr_scheduler", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "optims.darts_make_loss", "len", "openpyxl.Workbook", "sheet.append", "logging.getLogger", "utils.utils.count_parameters", "values.append", "values.append", "logging.getLogger.info", "logging.getLogger.info", "range", "values.insert", "sheet.append", "xl.Workbook.save", "logging.getLogger.info", "model.to._arch_parameters", "os.path.exists", "os.makedirs", "format", "RunningAverageMeter", "RunningAverageMeter", "AverageMeter", "AverageMeter", "model.to.to", "logging.getLogger.info", "model.to.load_pretrained_model", "logging.getLogger.info", "model.to.kaiming_init_", "optims.make_lr_scheduler.step", "torch.optim.lr_scheduler.MultiStepLR.step", "model.to.train", "avg_loss.reset", "avg_acc.reset", "avg_time.reset", "enumerate", "logging.getLogger.info", "global_avg_time.update", "format", "configs._C.OUTPUT.LOG_NAME.split", "optims.make_lr_scheduler.get_lr", "time.time", "next", "optims.make_optimizer.zero_grad", "model.to.", "train_search.compute_loss_acc", "loss.backward", "optims.make_optimizer.step", "torch.optim.Adam.zero_grad", "model.to.", "train_search.compute_loss_acc", "val_loss.backward", "torch.optim.Adam.step", "time.time", "avg_time.update", "avg_loss.update", "avg_acc.update", "model.to.eval", "utils.R1_mAP", "torch.save", "torch.save", "model.to._parse_genotype", "logging.getLogger.info", "iter", "imgs.to.to", "labels.to.to", "val_imgs.to.to", "val_labels.to.to", "torch.utils.clip_grad_norm_", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "enumerate", "utils.R1_mAP.compute", "logging.getLogger.info", "logging.getLogger.info", "model.to.state_dict", "torch.save", "torch.save", "model.to._parse_genotype", "logging.getLogger.info", "model.to.parameters", "model.to.", "utils.R1_mAP.update", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "change.append", "values.extend", "model.to.state_dict", "imgs.to.to", "format", "format"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_optimizer", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_lr_scheduler", "home.repos.pwc.inspect_result.solicucu_ReID.loss.__init__.darts_make_loss", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.load_pretrained_model", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.kaiming_init_", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.WarmupCosAnnLR.get_lr", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._parse_genotype", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.compute", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._parse_genotype", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update"], ["", "", "def", "train", "(", ")", ":", "\n", "\n", "\t", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "# 1\u3001make dataloader ", "\n", "train_loader", ",", "val_loader", ",", "test_loader", ",", "num_query", ",", "num_class", "=", "darts_make_data_loader", "(", "cfg", ")", "\n", "# print(num_query, num_class)", "\n", "\n", "# 2\u3001make model", "\n", "model", "=", "CDNetwork", "(", "num_class", ",", "cfg", ")", "\n", "# tensor = torch.randn(2, 3, 256, 128)", "\n", "# res = model(tensor)", "\n", "# print(res[0].size()) [2, 751]", "\n", "\n", "# 3\u3001make optimizer", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "_arch_parameters", "(", ")", ",", "\n", "lr", "=", "cfg", ".", "SOLVER", ".", "ARCH_LR", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "ARCH_WEIGHT_DECAY", ")", "\n", "\n", "# 4\u3001make lr scheduler", "\n", "lr_scheduler", "=", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "# make lr scheduler", "\n", "arch_lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "arch_optimizer", ",", "[", "80", ",", "160", "]", ",", "0.1", ")", "\n", "\n", "# 5\u3001make loss ", "\n", "loss_fn", "=", "darts_make_loss", "(", "cfg", ")", "\n", "\n", "\n", "# get parameters", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "use_gpu", "=", "device", "==", "\"cuda\"", "\n", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAINED", "!=", "\"\"", "\n", "\n", "log_period", "=", "cfg", ".", "OUTPUT", ".", "LOG_PERIOD", "\n", "ckpt_period", "=", "cfg", ".", "OUTPUT", ".", "CKPT_PERIOD", "\n", "eval_period", "=", "cfg", ".", "OUTPUT", ".", "EVAL_PERIOD", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "ckpt_save_path", "=", "output_dir", "+", "cfg", ".", "OUTPUT", ".", "CKPT_DIRS", "\n", "\n", "epochs", "=", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "\n", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "grad_clip", "=", "cfg", ".", "SOLVER", ".", "GRAD_CLIP", "\n", "\n", "batch_num", "=", "len", "(", "train_loader", ")", "\n", "log_iters", "=", "batch_num", "//", "log_period", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_save_path", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "ckpt_save_path", ")", "\n", "\n", "# create *_result.xlsx", "\n", "# save the result for analyze", "\n", "", "name", "=", "(", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".xlsx\"", "\n", "result_path", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "+", "name", "\n", "\n", "wb", "=", "xl", ".", "Workbook", "(", ")", "\n", "sheet", "=", "wb", ".", "worksheets", "[", "0", "]", "\n", "titles", "=", "[", "'size/M'", ",", "'speed/ms'", ",", "'final_planes'", ",", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", ",", "\n", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", ",", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", "]", "\n", "sheet", ".", "append", "(", "titles", ")", "\n", "check_epochs", "=", "[", "40", ",", "80", ",", "120", ",", "160", ",", "200", ",", "240", ",", "280", ",", "320", ",", "360", ",", "epochs", "]", "\n", "values", "=", "[", "]", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"CDNet_Search.train\"", ")", "\n", "size", "=", "count_parameters", "(", "model", ")", "\n", "values", ".", "append", "(", "format", "(", "size", ",", "'.2f'", ")", ")", "\n", "values", ".", "append", "(", "model", ".", "final_planes", ")", "\n", "\n", "logger", ".", "info", "(", "\"the param number of the model is {:.2f} M\"", ".", "format", "(", "size", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Starting Search CDNetwork\"", ")", "\n", "\n", "best_mAP", ",", "best_r1", "=", "0.", ",", "0.", "\n", "is_best", "=", "False", "\n", "avg_loss", ",", "avg_acc", "=", "RunningAverageMeter", "(", ")", ",", "RunningAverageMeter", "(", ")", "\n", "avg_time", ",", "global_avg_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "pretrained", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"load self pretrained chekpoint to init\"", ")", "\n", "model", ".", "load_pretrained_model", "(", "cfg", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"use kaiming init to init the model\"", ")", "\n", "model", ".", "kaiming_init_", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "\t\t", "lr_scheduler", ".", "step", "(", ")", "\n", "lr", "=", "lr_scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# architect lr.step", "\n", "arch_lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# if save epoch_num k, then run k+1 epoch next", "\n", "if", "pretrained", "and", "epoch", "<", "model", ".", "start_epoch", ":", "\n", "\t\t\t", "continue", "\n", "\n", "# print(epoch)", "\n", "# exit(1)", "\n", "", "model", ".", "train", "(", ")", "\n", "avg_loss", ".", "reset", "(", ")", "\n", "avg_acc", ".", "reset", "(", ")", "\n", "avg_time", ".", "reset", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "\t\t\t", "t0", "=", "time", ".", "time", "(", ")", "\n", "imgs", ",", "labels", "=", "batch", "\n", "val_imgs", ",", "val_labels", "=", "next", "(", "iter", "(", "val_loader", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "val_imgs", "=", "val_imgs", ".", "to", "(", "device", ")", "\n", "val_labels", "=", "val_labels", ".", "to", "(", "device", ")", "\n", "\n", "# 1\u3001 update the weights", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "res", "=", "model", "(", "imgs", ")", "\n", "\n", "# loss = loss_fn(scores, feats, labels)", "\n", "loss", ",", "acc", "=", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "grad_clip", "!=", "0", ":", "\n", "\t\t\t\t", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "grad_clip", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# 2\u3001update the alpha", "\n", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "res", "=", "model", "(", "val_imgs", ")", "\n", "\n", "val_loss", ",", "val_acc", "=", "compute_loss_acc", "(", "res", ",", "val_labels", ",", "loss_fn", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# compute the acc ", "\n", "# acc = (scores.max(1)[1] == labels).float().mean()", "\n", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "avg_time", ".", "update", "(", "(", "t1", "-", "t0", ")", "/", "batch_size", ")", "\n", "avg_loss", ".", "update", "(", "loss", ")", "\n", "avg_acc", ".", "update", "(", "acc", ")", "\n", "\n", "# log info", "\n", "if", "(", "i", "+", "1", ")", "%", "log_iters", "==", "0", ":", "\n", "\t\t\t\t", "logger", ".", "info", "(", "\"epoch {}: {}/{} with loss is {:.5f} and acc is {:.3f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "i", "+", "1", ",", "batch_num", ",", "avg_loss", ".", "avg", ",", "avg_acc", ".", "avg", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"end epochs {}/{} with lr: {:.5f} and avg_time is: {:.3f} ms\"", ".", "format", "(", "epoch", "+", "1", ",", "epochs", ",", "lr", ",", "avg_time", ".", "avg", "*", "1000", ")", ")", "\n", "global_avg_time", ".", "update", "(", "avg_time", ".", "avg", ")", "\n", "\n", "# test the model", "\n", "if", "(", "epoch", "+", "1", ")", "%", "eval_period", "==", "0", "or", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\n", "\t\t\t", "model", ".", "eval", "(", ")", "\n", "metrics", "=", "R1_mAP", "(", "num_query", ",", "use_gpu", "=", "use_gpu", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "for", "vi", ",", "batch", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "# break", "\n", "# print(len(batch))", "\n", "\t\t\t\t\t", "imgs", ",", "labels", ",", "camids", "=", "batch", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "\n", "", "feats", "=", "model", "(", "imgs", ")", "\n", "metrics", ".", "update", "(", "(", "feats", ",", "labels", ",", "camids", ")", ")", "\n", "\n", "#compute cmc and mAP", "\n", "", "cmc", ",", "mAP", "=", "metrics", ".", "compute", "(", ")", "\n", "logger", ".", "info", "(", "\"validation results at epoch {}\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"mAP:{:2%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "\t\t\t\t\t", "logger", ".", "info", "(", "\"CMC curve, Rank-{:<3}:{:.2%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "\n", "# determine whether current model is the best", "\n", "", "if", "mAP", ">", "best_mAP", ":", "\n", "\t\t\t\t\t", "is_best", "=", "True", "\n", "best_mAP", "=", "mAP", "\n", "logger", ".", "info", "(", "\"Get a new best mAP\"", ")", "\n", "", "if", "cmc", "[", "0", "]", ">", "best_r1", ":", "\n", "\t\t\t\t\t", "is_best", "=", "True", "\n", "best_r1", "=", "cmc", "[", "0", "]", "\n", "logger", ".", "info", "(", "\"Get a new best r1\"", ")", "\n", "\n", "# add the result to sheet", "\n", "", "if", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\t\t\t\t\t", "val", "=", "[", "avg_acc", ".", "avg", ",", "mAP", ",", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", "]", "\n", "change", "=", "[", "format", "(", "v", "*", "100", ",", "'.2f'", ")", "for", "v", "in", "val", "]", "\n", "change", ".", "append", "(", "format", "(", "avg_loss", ".", "avg", ",", "'.3f'", ")", ")", "\n", "values", ".", "extend", "(", "change", ")", "\n", "\n", "# whether to save the model", "\n", "", "", "", "if", "(", "epoch", "+", "1", ")", "%", "ckpt_period", "==", "0", "or", "is_best", ":", "\n", "\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"checkpoint_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "model", ".", "_parse_genotype", "(", "file", "=", "ckpt_save_path", "+", "\"genotype_{}.json\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"checkpoint {} was saved\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "if", "is_best", ":", "\n", "\t\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"best_ckpt.pth\"", ")", "\n", "model", ".", "_parse_genotype", "(", "file", "=", "ckpt_save_path", "+", "\"best_genotype.json\"", ")", "\n", "logger", ".", "info", "(", "\"best_checkpoint was saved\"", ")", "\n", "is_best", "=", "False", "\n", "# exit(1)", "\n", "\n", "", "", "", "values", ".", "insert", "(", "1", ",", "format", "(", "global_avg_time", ".", "avg", "*", "1000", ",", "'.2f'", ")", ")", "\n", "sheet", ".", "append", "(", "values", ")", "\n", "wb", ".", "save", "(", "result_path", ")", "\n", "\n", "logger", ".", "info", "(", "\"Ending Search CDNetwork\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_sample_topk_search.train_search.main": [[293, 296], ["train_search.set_config", "train_search.train"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.set_config", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train"], ["", "def", "main", "(", ")", ":", "\n", "\t", "set_config", "(", ")", "\n", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.Conv1x1BNReLU.__init__": [[15, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "\n", "\t\t", "super", "(", "Conv1x1BNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.Conv1x1BNReLU.forward": [[25, 28], ["operations.Conv1x1BNReLU.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.Conv1x1BN.__init__": [[33, 40], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "\n", "\t\t", "super", "(", "Conv1x1BN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.Conv1x1BN.forward": [[42, 45], ["operations.Conv1x1BN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.ConvBNReLU.__init__": [[51, 61], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "keepsame", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# resize the padding to keep the same shape for special kernel_size", "\n", "if", "keepsame", ":", "\n", "\t\t\t", "padding", "=", "kernel_size", "//", "2", "\n", "", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.ConvBNReLU.forward": [[63, 66], ["operations.ConvBNReLU.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.AdaptiveFuse.__init__": [[69, 81], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "reduction", "=", "4", ",", "layer_norm", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "AdaptiveFuse", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "mid_planes", "=", "in_planes", "//", "reduction", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "\t\t\t", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "mid_planes", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.AdaptiveFuse.forward": [[82, 94], ["operations.AdaptiveFuse.gap", "operations.AdaptiveFuse.fc1", "operations.AdaptiveFuse.relu", "operations.AdaptiveFuse.fc2", "operations.AdaptiveFuse.activation", "operations.AdaptiveFuse.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "res", "=", "self", ".", "gap", "(", "x", ")", "\n", "res", "=", "self", ".", "fc1", "(", "res", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "\t\t\t", "res", "=", "self", ".", "norm", "(", "res", ")", "\n", "", "res", "=", "self", ".", "relu", "(", "res", ")", "\n", "res", "=", "self", ".", "fc2", "(", "res", ")", "\n", "\n", "w", "=", "self", ".", "activation", "(", "res", ")", "\n", "\n", "return", "x", "*", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.StdStem.__init__": [[98, 103], ["torch.Module.__init__", "operations.ConvBNReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "usepool", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "StdStem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "usepool", "=", "usepool", "\n", "self", ".", "conv1", "=", "ConvBNReLU", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "keepsame", "=", "False", ")", "\n", "if", "self", ".", "usepool", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.StdStem.forward": [[104, 108], ["operations.StdStem.conv1", "operations.StdStem.pool"], "methods", ["None"], ["\t\t\t", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "# ", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.DWBlock.__init__": [[114, 125], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "operations.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1"], ["", "", "class", "DWBlock", "(", "nn", ".", "Module", ")", ":", "\n", "# notice that in dwblock, in_planes always equal to out_planes", "\n", "# we reverse the order of conv1x1 and dw_conv as osnet", "\n", "\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "keepsame", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "DWBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_planes", "==", "out_planes", "\n", "if", "keepsame", ":", "\n", "\t\t\t", "padding", "=", "kernel_size", "//", "2", "\n", "", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "out_planes", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.DWBlock.forward": [[127, 130], ["operations.DWBlock.op"], "methods", ["None"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.CBlock.__init__": [[141, 163], ["torch.Module.__init__", "operations.Conv1x1BNReLU", "operations.CBlock.make_block_layer", "operations.CBlock.make_block_layer", "operations.Conv1x1BN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "operations.AdaptiveFuse", "operations.Conv1x1BN"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.CBlock.make_block_layer", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.CBlock.make_block_layer"], ["\n", "class", "CBlock", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "k1", ",", "k2", ",", "reduction", "=", "4", ",", "adaptionfuse", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "CBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "adaptionfuse", "=", "adaptionfuse", "\n", "mid_planes", "=", "out_planes", "//", "reduction", "\n", "\n", "self", ".", "squeeze", "=", "Conv1x1BNReLU", "(", "in_planes", ",", "mid_planes", ")", "\n", "self", ".", "conv1", "=", "self", ".", "make_block_layer", "(", "mid_planes", ",", "k1", ")", "\n", "self", ".", "conv2", "=", "self", ".", "make_block_layer", "(", "mid_planes", ",", "k2", ")", "\n", "if", "self", ".", "adaptionfuse", ":", "\n", "\t\t\t", "self", ".", "adaption", "=", "AdaptiveFuse", "(", "mid_planes", ")", "\n", "# note the conv1x1 is linear", "\n", "", "self", ".", "restore", "=", "Conv1x1BN", "(", "mid_planes", ",", "out_planes", ")", "\n", "\n", "# use for identity", "\n", "self", ".", "expand", "=", "None", "\n", "# note the conv1x1 is linear", "\n", "if", "in_planes", "!=", "out_planes", ":", "\n", "\t\t\t", "self", ".", "expand", "=", "Conv1x1BN", "(", "in_planes", ",", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.CBlock.forward": [[164, 187], ["operations.CBlock.squeeze", "operations.CBlock.conv1", "operations.CBlock.conv2", "operations.CBlock.restore", "operations.CBlock.relu", "operations.CBlock.expand", "operations.CBlock.adaption", "operations.CBlock.adaption"], "methods", ["None"], ["", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "identity", "=", "x", "\n", "\n", "# reduction for bottleneck", "\n", "x", "=", "self", ".", "squeeze", "(", "x", ")", "\n", "res1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "res2", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "self", ".", "adaptionfuse", ":", "\n", "\t\t\t", "add", "=", "self", ".", "adaption", "(", "res1", ")", "+", "self", ".", "adaption", "(", "res2", ")", "\n", "", "else", ":", "\n", "\t\t\t", "add", "=", "res1", "+", "res2", "\n", "\n", "", "res", "=", "self", ".", "restore", "(", "add", ")", "\n", "\n", "if", "self", ".", "expand", "is", "not", "None", ":", "\n", "\n", "\t\t\t", "identity", "=", "self", ".", "expand", "(", "identity", ")", "\n", "\n", "", "out", "=", "res", "+", "identity", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.CBlock.make_block_layer": [[189, 199], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "blocks.append", "operations.DWBlock"], "methods", ["None"], ["\n", "\n", "", "def", "make_block_layer", "(", "self", ",", "in_planes", ",", "k", ")", ":", "\n", "\n", "\t\t", "blocks", "=", "[", "]", "\n", "# compute how many dw_conv3x3 to be construct", "\n", "num", "=", "k", "//", "2", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "\t\t\t", "blocks", ".", "append", "(", "DWBlock", "(", "in_planes", ",", "in_planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.DownSample.__init__": [[202, 207], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "operations.Conv1x1BNReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\n", "class", "CDBlock", "(", "nn", ".", "Module", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.DownSample.forward": [[208, 211], ["operations.DownSample.conv1x1", "operations.DownSample.avg_pool"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_list", ",", "adaptionfuse", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "CDBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "blocks", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.operations.conv1x1": [[9, 11], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "\t", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.train_search.compute_loss_acc": [[34, 47], ["len", "loss_fn", "scores.max"], "function", ["None"], ["def", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", ")", ":", "\n", "\n", "\t", "loss", ",", "acc", "=", "0.", ",", "0.", "\n", "num", "=", "len", "(", "res", ")", "\n", "\n", "for", "scores", ",", "feats", "in", "res", ":", "\n", "\t\t", "ls", "=", "loss_fn", "(", "scores", ",", "feats", ",", "labels", ")", "\n", "loss", "+=", "ls", "\n", "\n", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.train_search.set_config": [[48, 80], ["utils.setup_logger", "utils.setup_logger.info", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "print", "exit", "utils.setup_logger.info", "utils.setup_logger.info", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.logger.setup_logger"], ["", "def", "set_config", "(", ")", ":", "\n", "\n", "\t", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "if", "output_dir", "!=", "\"\"", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"ERROR:please specify an output path\"", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# config the logger ", "\n", "", "logger", "=", "setup_logger", "(", "\"CDNet_Search\"", ",", "output_dir", ",", "0", ",", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", "\n", "\n", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "if", "use_gpu", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with GPU: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "DEVICE_IDS", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with CPU\"", ")", "\n", "\n", "", "if", "use_gpu", ":", "\n", "\t\t", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_IDS", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# print the configuration", "\n", "logger", ".", "info", "(", "\"running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "# init rand seed ", "\n", "seed", "=", "cfg", ".", "SOLVER", ".", "SEED", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "use_gpu", ":", "\n", "\t\t", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.train_search.train": [[81, 292], ["data.darts_make_data_loader", "cnet_search.CNetwork", "optims.make_optimizer", "torch.optim.Adam", "torch.optim.Adam", "optims.make_lr_scheduler", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "optims.darts_make_loss", "len", "openpyxl.Workbook", "sheet.append", "logging.getLogger", "utils.utils.count_parameters", "values.append", "values.append", "logging.getLogger.info", "logging.getLogger.info", "range", "values.insert", "sheet.append", "xl.Workbook.save", "logging.getLogger.info", "model.to._arch_parameters", "os.path.exists", "os.makedirs", "format", "RunningAverageMeter", "RunningAverageMeter", "AverageMeter", "AverageMeter", "model.to.to", "logging.getLogger.info", "model.to.load_pretrained_model", "logging.getLogger.info", "model.to.kaiming_init_", "optims.make_lr_scheduler.step", "torch.optim.lr_scheduler.MultiStepLR.step", "model.to.train", "avg_loss.reset", "avg_acc.reset", "avg_time.reset", "enumerate", "logging.getLogger.info", "global_avg_time.update", "format", "configs._C.OUTPUT.LOG_NAME.split", "optims.make_lr_scheduler.get_lr", "time.time", "next", "optims.make_optimizer.zero_grad", "model.to.", "train_search.compute_loss_acc", "loss.backward", "optims.make_optimizer.step", "torch.optim.Adam.zero_grad", "model.to.", "train_search.compute_loss_acc", "val_loss.backward", "torch.optim.Adam.step", "time.time", "avg_time.update", "avg_loss.update", "avg_acc.update", "model.to.eval", "utils.R1_mAP", "torch.save", "torch.save", "model.to._parse_genotype", "logging.getLogger.info", "iter", "imgs.to.to", "labels.to.to", "val_imgs.to.to", "val_labels.to.to", "torch.utils.clip_grad_norm_", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "enumerate", "utils.R1_mAP.compute", "logging.getLogger.info", "logging.getLogger.info", "model.to.state_dict", "torch.save", "torch.save", "model.to._parse_genotype", "logging.getLogger.info", "model.to.parameters", "model.to.", "utils.R1_mAP.update", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "change.append", "values.extend", "model.to.state_dict", "imgs.to.to", "format", "format"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_optimizer", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_lr_scheduler", "home.repos.pwc.inspect_result.solicucu_ReID.loss.__init__.darts_make_loss", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.load_pretrained_model", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.kaiming_init_", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.WarmupCosAnnLR.get_lr", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._parse_genotype", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.compute", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._parse_genotype", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update"], ["", "", "def", "train", "(", ")", ":", "\n", "\n", "\t", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "# 1\u3001make dataloader ", "\n", "train_loader", ",", "val_loader", ",", "test_loader", ",", "num_query", ",", "num_class", "=", "darts_make_data_loader", "(", "cfg", ")", "\n", "# print(num_query, num_class)", "\n", "\n", "# 2\u3001make model", "\n", "model", "=", "CDNetwork", "(", "num_class", ",", "cfg", ")", "\n", "# tensor = torch.randn(2, 3, 256, 128)", "\n", "# res = model(tensor)", "\n", "# print(res[0].size()) [2, 751]", "\n", "\n", "# 3\u3001make optimizer", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "_arch_parameters", "(", ")", ",", "\n", "lr", "=", "cfg", ".", "SOLVER", ".", "ARCH_LR", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "ARCH_WEIGHT_DECAY", ")", "\n", "\n", "# 4\u3001make lr scheduler", "\n", "lr_scheduler", "=", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "# make lr scheduler", "\n", "arch_lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "arch_optimizer", ",", "[", "80", ",", "160", "]", ",", "0.1", ")", "\n", "\n", "# 5\u3001make loss ", "\n", "loss_fn", "=", "darts_make_loss", "(", "cfg", ")", "\n", "\n", "\n", "# get parameters", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "use_gpu", "=", "device", "==", "\"cuda\"", "\n", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAINED", "!=", "\"\"", "\n", "\n", "log_period", "=", "cfg", ".", "OUTPUT", ".", "LOG_PERIOD", "\n", "ckpt_period", "=", "cfg", ".", "OUTPUT", ".", "CKPT_PERIOD", "\n", "eval_period", "=", "cfg", ".", "OUTPUT", ".", "EVAL_PERIOD", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "ckpt_save_path", "=", "output_dir", "+", "cfg", ".", "OUTPUT", ".", "CKPT_DIRS", "\n", "\n", "epochs", "=", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "\n", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "grad_clip", "=", "cfg", ".", "SOLVER", ".", "GRAD_CLIP", "\n", "\n", "batch_num", "=", "len", "(", "train_loader", ")", "\n", "log_iters", "=", "batch_num", "//", "log_period", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_save_path", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "ckpt_save_path", ")", "\n", "\n", "# create *_result.xlsx", "\n", "# save the result for analyze", "\n", "", "name", "=", "(", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".xlsx\"", "\n", "result_path", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "+", "name", "\n", "\n", "wb", "=", "xl", ".", "Workbook", "(", ")", "\n", "sheet", "=", "wb", ".", "worksheets", "[", "0", "]", "\n", "titles", "=", "[", "'size/M'", ",", "'speed/ms'", ",", "'final_planes'", ",", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", ",", "\n", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", ",", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", "]", "\n", "sheet", ".", "append", "(", "titles", ")", "\n", "check_epochs", "=", "[", "40", ",", "80", ",", "120", ",", "160", ",", "200", ",", "240", ",", "280", ",", "320", ",", "360", ",", "epochs", "]", "\n", "values", "=", "[", "]", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"CDNet_Search.train\"", ")", "\n", "size", "=", "count_parameters", "(", "model", ")", "\n", "values", ".", "append", "(", "format", "(", "size", ",", "'.2f'", ")", ")", "\n", "values", ".", "append", "(", "model", ".", "final_planes", ")", "\n", "\n", "logger", ".", "info", "(", "\"the param number of the model is {:.2f} M\"", ".", "format", "(", "size", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Starting Search CDNetwork\"", ")", "\n", "\n", "best_mAP", ",", "best_r1", "=", "0.", ",", "0.", "\n", "is_best", "=", "False", "\n", "avg_loss", ",", "avg_acc", "=", "RunningAverageMeter", "(", ")", ",", "RunningAverageMeter", "(", ")", "\n", "avg_time", ",", "global_avg_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "pretrained", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"load self pretrained chekpoint to init\"", ")", "\n", "model", ".", "load_pretrained_model", "(", "cfg", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"use kaiming init to init the model\"", ")", "\n", "model", ".", "kaiming_init_", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "\t\t", "lr_scheduler", ".", "step", "(", ")", "\n", "lr", "=", "lr_scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# architect lr.step", "\n", "arch_lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# if save epoch_num k, then run k+1 epoch next", "\n", "if", "pretrained", "and", "epoch", "<", "model", ".", "start_epoch", ":", "\n", "\t\t\t", "continue", "\n", "\n", "# print(epoch)", "\n", "# exit(1)", "\n", "", "model", ".", "train", "(", ")", "\n", "avg_loss", ".", "reset", "(", ")", "\n", "avg_acc", ".", "reset", "(", ")", "\n", "avg_time", ".", "reset", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "\t\t\t", "t0", "=", "time", ".", "time", "(", ")", "\n", "imgs", ",", "labels", "=", "batch", "\n", "val_imgs", ",", "val_labels", "=", "next", "(", "iter", "(", "val_loader", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "val_imgs", "=", "val_imgs", ".", "to", "(", "device", ")", "\n", "val_labels", "=", "val_labels", ".", "to", "(", "device", ")", "\n", "\n", "# 1\u3001 update the weights", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "res", "=", "model", "(", "imgs", ")", "\n", "\n", "# loss = loss_fn(scores, feats, labels)", "\n", "loss", ",", "acc", "=", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "grad_clip", "!=", "0", ":", "\n", "\t\t\t\t", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "grad_clip", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# 2\u3001update the alpha", "\n", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "res", "=", "model", "(", "val_imgs", ")", "\n", "\n", "val_loss", ",", "val_acc", "=", "compute_loss_acc", "(", "res", ",", "val_labels", ",", "loss_fn", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# compute the acc ", "\n", "# acc = (scores.max(1)[1] == labels).float().mean()", "\n", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "avg_time", ".", "update", "(", "(", "t1", "-", "t0", ")", "/", "batch_size", ")", "\n", "avg_loss", ".", "update", "(", "loss", ")", "\n", "avg_acc", ".", "update", "(", "acc", ")", "\n", "\n", "# log info", "\n", "if", "(", "i", "+", "1", ")", "%", "log_iters", "==", "0", ":", "\n", "\t\t\t\t", "logger", ".", "info", "(", "\"epoch {}: {}/{} with loss is {:.5f} and acc is {:.3f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "i", "+", "1", ",", "batch_num", ",", "avg_loss", ".", "avg", ",", "avg_acc", ".", "avg", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"end epochs {}/{} with lr: {:.5f} and avg_time is: {:.3f} ms\"", ".", "format", "(", "epoch", "+", "1", ",", "epochs", ",", "lr", ",", "avg_time", ".", "avg", "*", "1000", ")", ")", "\n", "global_avg_time", ".", "update", "(", "avg_time", ".", "avg", ")", "\n", "\n", "# test the model", "\n", "if", "(", "epoch", "+", "1", ")", "%", "eval_period", "==", "0", "or", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\n", "\t\t\t", "model", ".", "eval", "(", ")", "\n", "metrics", "=", "R1_mAP", "(", "num_query", ",", "use_gpu", "=", "use_gpu", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "for", "vi", ",", "batch", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "# break", "\n", "# print(len(batch))", "\n", "\t\t\t\t\t", "imgs", ",", "labels", ",", "camids", "=", "batch", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "\n", "", "feats", "=", "model", "(", "imgs", ")", "\n", "metrics", ".", "update", "(", "(", "feats", ",", "labels", ",", "camids", ")", ")", "\n", "\n", "#compute cmc and mAP", "\n", "", "cmc", ",", "mAP", "=", "metrics", ".", "compute", "(", ")", "\n", "logger", ".", "info", "(", "\"validation results at epoch {}\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"mAP:{:2%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "\t\t\t\t\t", "logger", ".", "info", "(", "\"CMC curve, Rank-{:<3}:{:.2%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "\n", "# determine whether current model is the best", "\n", "", "if", "mAP", ">", "best_mAP", ":", "\n", "\t\t\t\t\t", "is_best", "=", "True", "\n", "best_mAP", "=", "mAP", "\n", "logger", ".", "info", "(", "\"Get a new best mAP\"", ")", "\n", "", "if", "cmc", "[", "0", "]", ">", "best_r1", ":", "\n", "\t\t\t\t\t", "is_best", "=", "True", "\n", "best_r1", "=", "cmc", "[", "0", "]", "\n", "logger", ".", "info", "(", "\"Get a new best r1\"", ")", "\n", "\n", "# add the result to sheet", "\n", "", "if", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\t\t\t\t\t", "val", "=", "[", "avg_acc", ".", "avg", ",", "mAP", ",", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", "]", "\n", "change", "=", "[", "format", "(", "v", "*", "100", ",", "'.2f'", ")", "for", "v", "in", "val", "]", "\n", "change", ".", "append", "(", "format", "(", "avg_loss", ".", "avg", ",", "'.3f'", ")", ")", "\n", "values", ".", "extend", "(", "change", ")", "\n", "\n", "# whether to save the model", "\n", "", "", "", "if", "(", "epoch", "+", "1", ")", "%", "ckpt_period", "==", "0", "or", "is_best", ":", "\n", "\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"checkpoint_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "model", ".", "_parse_genotype", "(", "file", "=", "ckpt_save_path", "+", "\"genotype_{}.json\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"checkpoint {} was saved\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "if", "is_best", ":", "\n", "\t\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"best_ckpt.pth\"", ")", "\n", "model", ".", "_parse_genotype", "(", "file", "=", "ckpt_save_path", "+", "\"best_genotype.json\"", ")", "\n", "logger", ".", "info", "(", "\"best_checkpoint was saved\"", ")", "\n", "is_best", "=", "False", "\n", "# exit(1)", "\n", "\n", "", "", "", "values", ".", "insert", "(", "1", ",", "format", "(", "global_avg_time", ".", "avg", "*", "1000", ",", "'.2f'", ")", ")", "\n", "sheet", ".", "append", "(", "values", ")", "\n", "wb", ".", "save", "(", "result_path", ")", "\n", "\n", "logger", ".", "info", "(", "\"Ending Search CDNetwork\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.train_search.main": [[293, 296], ["train_search.set_config", "train_search.train"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.set_config", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train"], ["", "def", "main", "(", ")", ":", "\n", "\t", "set_config", "(", ")", "\n", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.MBlock.__init__": [[23, 36], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "operations.CBlock", "cnet_search.MBlock.ops.append"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "adaptionfuse", "=", "False", ",", "usek9", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "MBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "usek9", ":", "\n", "\t\t\t", "kernel", "=", "kernels", "[", ":", "-", "3", "]", "\n", "", "else", ":", "\n", "\t\t\t", "kernel", "=", "kernels", "\n", "\n", "", "self", ".", "ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "k1", ",", "k2", "in", "kernel", ":", "\n", "\t\t\t", "cblock", "=", "CBlock", "(", "in_planes", ",", "out_planes", ",", "k1", ",", "k2", ",", "adaptionfuse", "=", "adaptionfuse", ")", "\n", "self", ".", "ops", ".", "append", "(", "cblock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.MBlock.forward": [[37, 40], ["sum", "enumerate", "op"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ",", "index", ")", ":", "\n", "\n", "\t\t", "return", "sum", "(", "weights", "[", "i", "]", "*", "op", "(", "x", ")", "if", "i", "in", "index", "else", "weights", "[", "i", "]", "for", "i", ",", "op", "in", "enumerate", "(", "self", ".", "ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.CNetwork.__init__": [[58, 108], ["torch.Module.__init__", "len", "operations.StdStem", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "range", "cnet_search.CNetwork._make_layers", "operations.Conv1x1BNReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "cnet_search.CNetwork._init_alphas", "cnet_search.make_divisible", "cnet_search.CNetwork._make_layers", "cnet_search.CNetwork.cells.append", "cnet_search.CNetwork._make_fc_layers", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "operations.DownSample"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._init_alphas", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.make_divisible", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers"], ["def", "__init__", "(", "self", ",", "num_class", ",", "cfg", ")", ":", "\n", "\n", "\t\t", "super", "(", "CNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "stages", "=", "cfg", ".", "MODEL", ".", "STAGES", "\n", "self", ".", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "self", ".", "multiplier", "=", "cfg", ".", "MODEL", ".", "MULTIPLIER", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAINED", "\n", "self", ".", "adaption_fusion", "=", "cfg", ".", "MODEL", ".", "ADAPTION_FUSION", "\n", "self", ".", "fc_dims", "=", "cfg", ".", "MODEL", ".", "FC_DIMS", "\n", "self", ".", "fc_num", "=", "len", "(", "self", ".", "fc_dims", ")", "\n", "# change the channel for scaling", "\n", "self", ".", "planes", "=", "[", "make_divisible", "(", "n", "*", "self", ".", "multiplier", ")", "for", "n", "in", "cfg", ".", "MODEL", ".", "PLANES", "]", "\n", "self", ".", "final_planes", "=", "512", "\n", "self", ".", "before_gap", "=", "False", "\n", "self", ".", "dropout", "=", "0.2", "\n", "\n", "\n", "self", ".", "stem", "=", "StdStem", "(", "3", ",", "self", ".", "planes", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "num", "=", "len", "(", "self", ".", "stages", ")", "\n", "for", "i", "in", "range", "(", "num", "-", "1", ")", ":", "\n", "\t\t\t", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "usek9", "=", "True", ")", "\n", "self", ".", "cells", ".", "append", "(", "DownSample", "(", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "-", "1", "]", ",", "self", ".", "planes", "[", "-", "2", "]", ",", "self", ".", "planes", "[", "-", "1", "]", ",", "usek9", "=", "True", ")", "\n", "\n", "# expand or squeeze the channel", "\n", "self", ".", "conv1x1", "=", "Conv1x1BNReLU", "(", "self", ".", "planes", "[", "-", "1", "]", ",", "self", ".", "planes", "[", "-", "1", "]", ")", "\n", "\n", "# gap", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# fully connected layer ", "\n", "self", ".", "final_planes", "=", "self", ".", "planes", "[", "-", "1", "]", "\n", "# balance neck", "\n", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "self", ".", "fc", "=", "self", ".", "_make_fc_layers", "(", "self", ".", "planes", "[", "-", "1", "]", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "fc_dims", "[", "-", "1", "]", "\n", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "\n", "# classifier", "\n", "", "if", "not", "self", ".", "before_gap", ":", "\n", "\t\t\t", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "final_planes", ",", "num_class", ")", "\n", "\n", "", "self", ".", "_init_alphas", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.CNetwork._make_layers": [[109, 117], ["cells.append", "range", "cnet_search.MBlock", "cells.append", "cnet_search.MBlock"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "num_cells", ",", "in_planes", ",", "out_planes", ",", "usek9", "=", "True", ")", ":", "\n", "\n", "\t\t", "cells", "=", "[", "]", "\n", "cells", ".", "append", "(", "MBlock", "(", "in_planes", ",", "out_planes", ",", "self", ".", "adaption_fusion", ",", "usek9", ")", ")", "\n", "for", "i", "in", "range", "(", "num_cells", "-", "1", ")", ":", "\n", "\t\t\t", "cells", ".", "append", "(", "MBlock", "(", "out_planes", ",", "out_planes", ",", "self", ".", "adaption_fusion", ",", "usek9", ")", ")", "\n", "\n", "", "return", "cells", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.CNetwork._make_fc_layers": [[118, 132], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_fc_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "\n", "\t\t", "layers", "=", "[", "]", "\n", "in_dim", "=", "in_planes", "\n", "\n", "for", "dim", "in", "self", ".", "fc_dims", ":", "\n", "\n", "\t\t\t", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "in_dim", "=", "dim", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.CNetwork._init_alphas": [[133, 145], ["sum", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "_init_alphas", "(", "self", ")", ":", "\n", "\n", "\t\t", "k1", "=", "sum", "(", "self", ".", "stages", ")", "\n", "\n", "num_ops", "=", "len", "(", "op_names", ")", "\n", "scale", "=", "1e-3", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "self", ".", "alphas1", "=", "Variable", "(", "scale", "*", "torch", ".", "ones", "(", "k1", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "alphas1", "=", "Variable", "(", "scale", "*", "torch", ".", "ones", "(", "k1", ",", "num_ops", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "self", ".", "arch_parameters", "=", "[", "self", ".", "alphas1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.CNetwork.get_weights": [[148, 178], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "weights.append", "indexs.append", "torch.softmax.topk", "torch.softmax.detach", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ",", "alphas_list", ")", ":", "\n", "\n", "\t\t", "k", "=", "self", ".", "cfg", ".", "SOLVER", ".", "TOPK", "\n", "\n", "# process each alpha", "\n", "weights", "=", "[", "]", "\n", "indexs", "=", "[", "]", "\n", "\n", "for", "alphas", "in", "alphas_list", ":", "\n", "\n", "# softmax", "\n", "\t\t\t", "probs", "=", "F", ".", "softmax", "(", "alphas", ",", "dim", "=", "1", ")", "\n", "\n", "# select the max_prob index , max() return [val, indices]", "\n", "index", "=", "probs", ".", "topk", "(", "k", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "# construt one-zero vector according to the top-k index", "\n", "one_zero", "=", "torch", ".", "zeros_like", "(", "probs", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "# create a mid value ", "\n", "mid_val", "=", "one_zero", "-", "probs", ".", "detach", "(", ")", "\n", "\n", "# we can construct a weight with the same value as one_zero for forward propagation", "\n", "# Note that mid_val is no need to calculate gradients and the gradients will be backpropagated ", "\n", "# via probs to update the architecture parameters.", "\n", "weight", "=", "mid_val", "+", "probs", "\n", "\n", "\n", "weights", ".", "append", "(", "weight", ")", "\n", "indexs", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "weights", ",", "indexs", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.CNetwork.forward": [[179, 236], ["cnet_search.CNetwork.stem", "cnet_search.CNetwork.get_weights", "enumerate", "range", "cnet_search.CNetwork.conv1x1", "cnet_search.CNetwork.gap", "cnet_search.CNetwork.size", "cnet_search.CNetwork.view", "cnet_search.CNetwork.classifier", "range", "cnet_search.CNetwork.drop", "cnet_search.CNetwork.fc"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.CNetwork.get_weights", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "weights", ",", "indexs", "=", "self", ".", "get_weights", "(", "self", ".", "arch_parameters", ")", "\n", "pos", "=", "-", "1", "\n", "\n", "weights1", "=", "weights", "[", "0", "]", "\n", "indexs1", "=", "indexs", "[", "0", "]", "\n", "new_stage", "=", "self", ".", "stages", "[", ":", "-", "1", "]", "\n", "\n", "#1~2 stages", "\n", "w", "=", "-", "1", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "new_stage", ")", ":", "\n", "# each stage", "\n", "\t\t\t", "for", "j", "in", "range", "(", "num", ")", ":", "\n", "\t\t\t\t", "pos", "+=", "1", "\n", "w", "+=", "1", "\n", "x", "=", "self", ".", "cells", "[", "pos", "]", "(", "x", ",", "weights1", "[", "w", "]", ",", "indexs1", "[", "w", "]", ")", "\n", "# downsample", "\n", "", "pos", "+=", "1", "\n", "\n", "x", "=", "self", ".", "cells", "[", "pos", "]", "(", "x", ")", "\n", "\n", "# last stage, without downsample", "\n", "", "for", "i", "in", "range", "(", "self", ".", "stages", "[", "-", "1", "]", ")", ":", "\n", "\t\t\t", "pos", "+=", "1", "\n", "w", "+=", "1", "\n", "x", "=", "self", ".", "cells", "[", "pos", "]", "(", "x", ",", "weights1", "[", "w", "]", ",", "indexs1", "[", "w", "]", ")", "\n", "\n", "# conv1x1 before gap", "\n", "", "x", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "\n", "if", "self", ".", "before_gap", ":", "\n", "\t\t\t", "return", "x", "\n", "# gap ", "\n", "", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "\n", "# reshape the shape", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "feat", "=", "x", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "\n", "# dropout ", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "feat", "=", "self", ".", "drop", "(", "feat", ")", "\n", "# balance neck", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "feat_fc", "=", "self", ".", "fc", "(", "feat", ")", "\n", "", "else", ":", "\n", "\t\t\t", "feat_fc", "=", "feat", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "\t\t\t", "return", "feat", "\n", "\n", "", "score", "=", "self", ".", "classifier", "(", "feat_fc", ")", "\n", "\n", "return", "[", "[", "score", ",", "feat", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.CNetwork._arch_parameters": [[237, 240], ["None"], "methods", ["None"], ["", "def", "_arch_parameters", "(", "self", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "arch_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.CNetwork._parse_genotype": [[242, 275], ["w1.max", "copy.deepcopy", "alphas1.cpu.cpu.detach().numpy().tolist", "json.dumps", "indices1.numpy.numpy.cpu().numpy", "indices1.numpy.numpy.numpy", "layers.append", "alphas1.cpu.cpu.cpu", "open", "f.write", "alphas1.cpu.cpu.detach().numpy", "indices1.numpy.numpy.cpu", "alphas1.cpu.cpu.detach"], "methods", ["None"], ["", "def", "_parse_genotype", "(", "self", ",", "file", "=", "\"./genotype.json\"", ")", ":", "\n", "\n", "\t\t", "geno", "=", "{", "}", "\n", "\n", "w1", "=", "self", ".", "alphas1", "\n", "# find the maxvlaue indices", "\n", "_", ",", "indices1", "=", "w1", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "indices1", "=", "indices1", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "indices1", "=", "indices1", ".", "numpy", "(", ")", "\n", "\n", "", "for", "ind", "in", "indices1", ":", "\n", "\t\t\t", "layers", ".", "append", "(", "kernels", "[", "ind", "]", ")", "\n", "\n", "", "geno", "[", "\"layers\"", "]", "=", "layers", "\n", "\n", "# alphas", "\n", "alphas1", "=", "copy", ".", "deepcopy", "(", "self", ".", "alphas1", ")", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "alphas1", "=", "alphas1", ".", "cpu", "(", ")", "\n", "\n", "", "alphas1", "=", "alphas1", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "geno", "[", "\"alphas1\"", "]", "=", "alphas1", "\n", "\n", "json_data", "=", "json", ".", "dumps", "(", "geno", ",", "indent", "=", "4", ")", "\n", "with", "open", "(", "file", ",", "'w'", ")", "as", "f", ":", "\n", "\t\t\t", "f", ".", "write", "(", "json_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.CNetwork.kaiming_init_": [[278, 295], ["cnet_search.CNetwork.modules", "isinstance", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["", "", "def", "kaiming_init_", "(", "self", ")", ":", "\n", "\n", "# print(\"use kaiming init\")", "\n", "\t\t", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t\t\t", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t\t\t", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t\t", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.CNetwork.load_pretrained_model": [[296, 324], ["glob.glob", "sorted", "int", "logger.info", "cnet_search.CNetwork.load_state_dict", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "cnet_search.CNetwork.alphas1.data.copy_", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "open", "json.load", "[].split", "[].split", "os.path.split"], "methods", ["None"], ["", "", "", "", "def", "load_pretrained_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "# checkpoint", "\n", "\t\t", "ckpt_list", "=", "glob", ".", "glob", "(", "path", "+", "\"checkpoint_*\"", ")", "\n", "ckpt_list", "=", "sorted", "(", "ckpt_list", ")", "\n", "\n", "ckpt_name", "=", "ckpt_list", "[", "-", "1", "]", "\n", "\"\"\"\n\t\tfile_path = \"D:/test/test.py\"\n\t\t(filepath, tempfilename) = os.path.split(file_path)\n\t\t(filename, extension) = os.path.splitext(tempfilename)\n\t\t\"\"\"", "\n", "num", "=", "int", "(", "os", ".", "path", ".", "split", "(", "ckpt_name", ")", "[", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "self", ".", "start_epoch", "=", "num", "\n", "logger", ".", "info", "(", "\"load checkpoint from {}\"", ".", "format", "(", "ckpt_name", ")", ")", "\n", "\n", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt_name", ")", ")", "\n", "\n", "# genotype", "\n", "geno_name", "=", "path", "+", "\"genotype_{}.json\"", ".", "format", "(", "num", ")", "\n", "\n", "with", "open", "(", "geno_name", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "geno", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "alphas1", "=", "torch", ".", "tensor", "(", "geno", "[", "\"alphas1\"", "]", ")", "\n", "self", ".", "alphas1", ".", "data", ".", "copy_", "(", "alphas1", ")", "\n", "\n", "logger", ".", "info", "(", "\"end of load the checkpoint and alpha\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_sample_topk_search.cnet_search.make_divisible": [[41, 44], ["int"], "function", ["None"], ["", "", "def", "make_divisible", "(", "num", ",", "divisor", "=", "4", ")", ":", "\n", "\n", "\t", "return", "int", "(", "(", "num", "//", "divisor", ")", "*", "divisor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.Zero.__init__": [[17, 20], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t\t", "super", "(", "Conv1x1BNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.Zero.forward": [[21, 26], ["x.mul", "x[].mul"], "methods", ["None"], ["nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.Identity.__init__": [[29, 31], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["# conv1x1 with bn no relu for linear transformation", "\n", "\n", "", "", "class", "Conv1x1BN", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.Identity.forward": [[32, 34], ["None"], "methods", ["None"], ["\n", "\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.FactorizedReduce.__init__": [[37, 44], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.FactorizedReduce.forward": [[45, 50], ["operations.FactorizedReduce.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "operations.FactorizedReduce.bn", "operations.FactorizedReduce.conv_1", "operations.FactorizedReduce.conv_2"], "methods", ["None"], ["\n", "", "", "\"\"\"\nstandard convolution 3x3, 5x5\n\"\"\"", "\n", "class", "ConvBNReLU", "(", "nn", ".", "Module", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.SepConv.__init__": [[54, 65], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["# resize the padding to keep the same shape for special kernel_size", "\n", "if", "keepsame", ":", "\n", "\t\t\t", "padding", "=", "kernel_size", "//", "2", "\n", "", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.SepConv.forward": [[67, 69], ["operations.SepConv.op"], "methods", ["None"], ["", "", "class", "AdaptiveFuse", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "reduction", "=", "4", ",", "layer_norm", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.DilConv.__init__": [[73, 81], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["mid_planes", "=", "in_planes", "//", "reduction", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "\t\t\t", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "mid_planes", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.DilConv.forward": [[83, 85], ["operations.DilConv.op"], "methods", ["None"], ["\n", "\t\t", "res", "=", "self", ".", "gap", "(", "x", ")", "\n", "res", "=", "self", ".", "fc1", "(", "res", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.ReLUConvBN.__init__": [[88, 94], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["", "res", "=", "self", ".", "relu", "(", "res", ")", "\n", "res", "=", "self", ".", "fc2", "(", "res", ")", "\n", "\n", "w", "=", "self", ".", "activation", "(", "res", ")", "\n", "\n", "return", "x", "*", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.ReLUConvBN.forward": [[96, 98], ["operations.ReLUConvBN.op"], "methods", ["None"], ["", "", "class", "StdStem", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "usepool", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.StdStem.__init__": [[101, 106], ["torch.Module.__init__", "operations.ConvBNReLU", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["self", ".", "usepool", "=", "usepool", "\n", "self", ".", "conv1", "=", "ConvBNReLU", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "keepsame", "=", "False", ")", "\n", "if", "self", ".", "usepool", ":", "\n", "\t\t\t", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "# ", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.StdStem.forward": [[107, 111], ["operations.StdStem.conv1", "operations.StdStem.pool"], "methods", ["None"], ["\n", "\t\t", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "usepool", ":", "\n", "\t\t\t", "return", "self", ".", "pool", "(", "x", ")", "\n", "", "return", "x", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.ConvBNReLU.__init__": [[116, 126], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["# we reverse the order of conv1x1 and dw_conv as osnet", "\n", "\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "keepsame", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "DWBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_planes", "==", "out_planes", "\n", "if", "keepsame", ":", "\n", "\t\t\t", "padding", "=", "kernel_size", "//", "2", "\n", "", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "out_planes", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.Conv1x1BNReLU.__init__": [[130, 138], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.operations.Conv1x1BNReLU.forward": [[140, 143], ["operations.Conv1x1BNReLU.op"], "methods", ["None"], ["\n", "class", "CBlock", "(", "nn", ".", "Module", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Network.__init__": [[16, 82], ["torch.Module.__init__", "len", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "operations.Conv1x1BNReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model_search.Cell", "model_search.Network.arch.append", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "model_search.Network._make_fc_layers", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model_search.Cell.arch_parameters"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers", "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Cell.arch_parameters"], ["  ", "def", "__init__", "(", "self", ",", "num_class", ",", "cfg", ")", ":", "\n", "    ", "super", "(", "Network", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "planes", "=", "cfg", ".", "MODEL", ".", "PLANES", "# 64", "\n", "self", ".", "num_classes", "=", "num_class", "\n", "self", ".", "nodes", "=", "cfg", ".", "MODEL", ".", "NODES", "# 4", "\n", "self", ".", "layers", "=", "cfg", ".", "MODEL", ".", "LAYERS", "# 6", "\n", "self", ".", "stages", "=", "cfg", ".", "MODEL", ".", "STAGES", "# 3", "\n", "self", ".", "multiplier", "=", "cfg", ".", "MODEL", ".", "MULTIPLIER", "# 4", "\n", "self", ".", "fc_dims", "=", "cfg", ".", "MODEL", ".", "FC_DIMS", "# 512", "\n", "self", ".", "use_bnneck", "=", "cfg", ".", "MODEL", ".", "USE_BNNECK", "\n", "self", ".", "fc_num", "=", "len", "(", "self", ".", "fc_dims", ")", "\n", "self", ".", "tau", "=", "10", "\n", "self", ".", "before_gap", "=", "False", "\n", "self", ".", "dropout", "=", "0.2", "\n", "\n", "C_curr", "=", "self", ".", "planes", "\n", "self", ".", "stem0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "C_curr", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_curr", "//", "2", ",", "C_curr", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stem1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "C_curr", ",", "C_curr", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "C_curr", ")", ",", "\n", ")", "\n", "\n", "C_prev_prev", ",", "C_prev", ",", "C_curr", "=", "C_curr", ",", "C_curr", ",", "C_curr", "\n", "reduction_layer", "=", "[", "0", ",", "self", ".", "layers", "//", "self", ".", "stages", ",", "self", ".", "layers", "//", "self", ".", "stages", "*", "2", "]", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "arch", "=", "[", "]", "\n", "reduction", "=", "True", "\n", "reduction_prev", "=", "True", "\n", "for", "j", "in", "range", "(", "self", ".", "layers", ")", ":", "\n", "      ", "if", "j", "in", "reduction_layer", ":", "\n", "        ", "C_curr", "*=", "2", "\n", "reduction_prev", "=", "reduction", "\n", "reduction", "=", "True", "\n", "", "else", ":", "\n", "        ", "reduction_prev", "=", "reduction", "\n", "reduction", "=", "False", "\n", "", "cell", "=", "Cell", "(", "self", ".", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C_curr", ",", "reduction", ",", "reduction_prev", ",", "self", ".", "nodes", ")", "\n", "self", ".", "arch", ".", "append", "(", "cell", ".", "arch_parameters", "(", ")", ")", "\n", "self", ".", "cells", "+=", "[", "cell", "]", "\n", "C_prev_prev", ",", "C_prev", "=", "C_prev", ",", "C_curr", "*", "self", ".", "multiplier", "\n", "\n", "", "self", ".", "conv1x1", "=", "Conv1x1BNReLU", "(", "C_prev", ",", "C_prev", ")", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "final_planes", "=", "C_prev", "\n", "# print(self.final_planes)", "\n", "# exit(1)", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "      ", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "      ", "self", ".", "fc", "=", "self", ".", "_make_fc_layers", "(", "C_prev", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "fc_dims", "[", "-", "1", "]", "\n", "\n", "", "if", "self", ".", "use_bnneck", ":", "\n", "      ", "self", ".", "bnneck", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "final_planes", ")", "\n", "# classifier", "\n", "", "if", "not", "self", ".", "before_gap", ":", "\n", "      ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "final_planes", ",", "num_class", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Network._make_fc_layers": [[83, 97], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "", "def", "_make_fc_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "\n", "    ", "layers", "=", "[", "]", "\n", "in_dim", "=", "in_planes", "\n", "\n", "for", "dim", "in", "self", ".", "fc_dims", ":", "\n", "\n", "      ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "in_dim", "=", "dim", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Network.kaiming_init_": [[98, 115], ["model_search.Network.modules", "isinstance", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["", "def", "kaiming_init_", "(", "self", ")", ":", "\n", "\n", "# print(\"use kaiming init\")", "\n", "    ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "          ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "          ", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "          ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "          ", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Network.train_fix_bn": [[116, 124], ["model_search.Network.children", "isinstance", "module.train", "module.train"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train"], ["", "", "", "", "def", "train_fix_bn", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "# freeze BN mean and std", "\n", "    ", "for", "module", "in", "self", ".", "children", "(", ")", ":", "\n", "# for module in self.modules():", "\n", "      ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "module", ".", "train", "(", "False", ")", "\n", "", "else", ":", "\n", "        ", "module", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Network.forward": [[125, 163], ["model_search.Network.stem0", "model_search.Network.stem1", "enumerate", "model_search.Network.conv1x1", "model_search.Network.gap", "model_search.Network.size", "model_search.Network.view", "model_search.Network.classifier", "model_search.Network.drop", "model_search.Network.fc", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "cell.forward_hard", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.softmax.max", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "alphs_curr.log_softmax", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.softmax.detach", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isinf", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like", "torch.empty_like"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1", "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Cell.forward_hard"], ["", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "s0", "=", "self", ".", "stem0", "(", "input", ")", "\n", "s1", "=", "self", ".", "stem1", "(", "s0", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "      ", "alphs_curr", "=", "self", ".", "arch", "[", "i", "]", "\n", "while", "True", ":", "\n", "        ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "alphs_curr", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "\n", "logits", "=", "(", "alphs_curr", ".", "log_softmax", "(", "dim", "=", "1", ")", "+", "gumbels", ")", "/", "self", ".", "tau", "\n", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "# probs = F.softmax(alphs_curr, dim = 1) # for no gumbel", "\n", "index", "=", "probs", ".", "max", "(", "-", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "one_h", "=", "torch", ".", "zeros_like", "(", "logits", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "# one_h = torch.zeros_like(probs).scatter_(-1, index, 1.0) # for no gumbel", "\n", "weights", "=", "one_h", "-", "probs", ".", "detach", "(", ")", "+", "probs", "\n", "if", "(", "torch", ".", "isinf", "(", "gumbels", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isinf", "(", "probs", ")", ".", "any", "(", ")", ")", "or", "(", "torch", ".", "isnan", "(", "probs", ")", ".", "any", "(", ")", ")", ":", "\n", "          ", "continue", "\n", "", "else", ":", "break", "\n", "\n", "\n", "", "s0", ",", "s1", "=", "s1", ",", "cell", ".", "forward_hard", "(", "s0", ",", "s1", ",", "weights", ",", "index", ")", "\n", "# print('layer {}, shape: {}'.format(i, s1.shape))", "\n", "\n", "", "x", "=", "self", ".", "conv1x1", "(", "s1", ")", "\n", "if", "self", ".", "before_gap", ":", "\n", "      ", "return", "x", "\n", "", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "feat", "=", "x", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "      ", "feat", "=", "self", ".", "drop", "(", "feat", ")", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "      ", "feat_fc", "=", "self", ".", "fc", "(", "feat", ")", "\n", "", "else", ":", "\n", "      ", "feat_fc", "=", "feat", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "      ", "return", "feat", "\n", "", "score", "=", "self", ".", "classifier", "(", "feat_fc", ")", "\n", "return", "[", "[", "score", ",", "feat", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Network._arch_parameters": [[164, 167], ["None"], "methods", ["None"], ["", "def", "_arch_parameters", "(", "self", ")", ":", "\n", "\n", "    ", "return", "self", ".", "arch", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Network.genotype": [[168, 173], ["genotypes.append", "cell.genotype"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Cell.genotype"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "genotypes", "=", "[", "]", "\n", "for", "cell", "in", "self", ".", "cells", ":", "\n", "      ", "genotypes", ".", "append", "(", "cell", ".", "genotype", "(", ")", ")", "\n", "", "return", "genotypes", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Network.set_tau": [[174, 176], ["None"], "methods", ["None"], ["", "def", "set_tau", "(", "self", ",", "tau", ")", ":", "\n", "    ", "self", ".", "tau", "=", "tau", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Network.load_arch": [[177, 184], ["range", "model_search.Network.stages[].load_arch", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "arc.append"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Network.load_arch"], ["", "def", "load_arch", "(", "self", ",", "arc_np", ")", ":", "\n", "    ", "arc", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_stages", ")", ":", "\n", "      ", "self", ".", "stages", "[", "i", "]", ".", "load_arch", "(", "arc_np", "[", "i", "]", ")", "\n", "a", "=", "torch", ".", "from_numpy", "(", "arc_np", "[", "i", "]", ")", "\n", "arc", ".", "append", "(", "a", ")", "\n", "", "self", ".", "arch", "=", "arc", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Network.fix_arch": [[185, 188], ["None"], "methods", ["None"], ["", "def", "fix_arch", "(", "self", ")", ":", "\n", "    ", "for", "arc", "in", "self", ".", "arch", ":", "\n", "      ", "arc", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Network._parse_genotype": [[189, 206], ["model_search.Network.genotype", "enumerate", "json.dumps", "open", "enumerate", "model_search.Network.arch[].cpu().detach().numpy().tolist", "open", "f.write", "file.split", "print", "f.write", "model_search.Network.arch[].cpu().detach().numpy", "model_search.Network.arch[].cpu().detach", "model_search.Network.arch[].cpu"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Cell.genotype"], ["", "", "def", "_parse_genotype", "(", "self", ",", "file", "=", "\"./genotype.json\"", ")", ":", "\n", "    ", "genotypes", "=", "self", ".", "genotype", "(", ")", "\n", "name", "=", "file", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".txt\"", "\n", "with", "open", "(", "name", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "for", "i", ",", "genotype", "in", "enumerate", "(", "genotypes", ")", ":", "\n", "        ", "print", "(", "'{}th, {}'", ".", "format", "(", "i", ",", "genotype", ")", ")", "\n", "f", ".", "write", "(", "'{}th, {}'", ".", "format", "(", "i", ",", "genotype", ")", ")", "\n", "", "", "geno", "=", "{", "}", "\n", "# geno['genotype'] = {}", "\n", "geno", "[", "'alphas'", "]", "=", "{", "}", "\n", "for", "i", ",", "genotype", "in", "enumerate", "(", "genotypes", ")", ":", "\n", "# geno['genotype'][i] = list(genotype._asdict())", "\n", "      ", "geno", "[", "'alphas'", "]", "[", "i", "]", "=", "self", ".", "arch", "[", "i", "]", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "", "json_data", "=", "json", ".", "dumps", "(", "geno", ",", "indent", "=", "4", ")", "\n", "with", "open", "(", "file", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "f", ".", "write", "(", "json_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Cell.__init__": [[209, 229], ["torch.Module.__init__", "operations.ReLUConvBN", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "model_search.Cell._init_alphas", "operations.FactorizedReduce", "operations.ReLUConvBN", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "model_search.Cell._ops.append", "torch.ModuleList.append"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._init_alphas"], ["  ", "def", "__init__", "(", "self", ",", "multiplier", ",", "C_prev_prev", ",", "C_prev", ",", "C", ",", "reduction", ",", "reduction_prev", ",", "nodes", ")", ":", "\n", "    ", "super", "(", "Cell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "if", "reduction_prev", ":", "\n", "      ", "self", ".", "preprocess0", "=", "FactorizedReduce", "(", "C_prev_prev", ",", "C", ",", "affine", "=", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preprocess0", "=", "ReLUConvBN", "(", "C_prev_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "", "self", ".", "preprocess1", "=", "ReLUConvBN", "(", "C_prev", ",", "C", ",", "1", ",", "1", ",", "0", ",", "affine", "=", "False", ")", "\n", "self", ".", "_nodes", "=", "nodes", "\n", "self", ".", "_multiplier", "=", "multiplier", "\n", "\n", "self", ".", "_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "_nodes", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "i", "+", "2", ")", ":", "\n", "        ", "stride", "=", "2", "if", "reduction", "and", "j", "<", "2", "else", "1", "\n", "mixed_ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "primitive", "in", "PRIMITIVES", ":", "\n", "          ", "mixed_ops", ".", "append", "(", "OPS", "[", "primitive", "]", "(", "C", ",", "stride", ",", "affine", "=", "False", ")", ")", "\n", "", "self", ".", "_ops", ".", "append", "(", "mixed_ops", ")", "\n", "", "", "self", ".", "_init_alphas", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Cell._init_alphas": [[230, 235], ["sum", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "torch.randn().cuda", "range", "range", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "_init_alphas", "(", "self", ")", ":", "\n", "    ", "k", "=", "sum", "(", "1", "for", "i", "in", "range", "(", "self", ".", "_nodes", ")", "for", "j", "in", "range", "(", "2", "+", "i", ")", ")", "\n", "num_ops", "=", "len", "(", "PRIMITIVES", ")", "\n", "\n", "self", ".", "_alphas", "=", "Variable", "(", "1e-3", "*", "torch", ".", "randn", "(", "k", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Cell.arch_parameters": [[236, 238], ["None"], "methods", ["None"], ["", "def", "arch_parameters", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_alphas", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Cell.forward_hard": [[239, 262], ["model_search.Cell.preprocess0", "model_search.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "sum", "len", "states.append", "index[].item", "sum", "inter_nodes.append", "enumerate"], "methods", ["None"], ["", "def", "forward_hard", "(", "self", ",", "s0", ",", "s1", ",", "weights", ",", "index", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "# print(s0.shape)", "\n", "# print(s1.shape)", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "offset", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "i", "+", "2", ")", ":", "\n", "          ", "argmaxs", "=", "index", "[", "offset", "+", "j", "]", ".", "item", "(", ")", "\n", "weight", "=", "weights", "[", "offset", "+", "j", "]", "\n", "op", "=", "self", ".", "_ops", "[", "offset", "+", "j", "]", "\n", "h", "=", "states", "[", "j", "]", "\n", "weightsum", "=", "sum", "(", "weight", "[", "_ie", "]", "*", "op", "[", "_ie", "]", "(", "h", ")", "if", "_ie", "==", "argmaxs", "else", "weight", "[", "_ie", "]", "for", "_ie", ",", "edge", "in", "enumerate", "(", "op", ")", ")", "\n", "inter_nodes", ".", "append", "(", "weightsum", ")", "\n", "# print(weightsum.shape)", "\n", "", "s", "=", "sum", "(", "inter_nodes", ")", "\n", "offset", "+=", "len", "(", "states", ")", "\n", "states", ".", "append", "(", "s", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Cell.forward": [[263, 281], ["model_search.Cell.preprocess0", "model_search.Cell.preprocess1", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "sum", "len", "states.append", "sum", "inter_nodes.append", "enumerate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "s0", ",", "s1", ",", "weights", ")", ":", "\n", "    ", "s0", "=", "self", ".", "preprocess0", "(", "s0", ")", "\n", "s1", "=", "self", ".", "preprocess1", "(", "s1", ")", "\n", "\n", "states", "=", "[", "s0", ",", "s1", "]", "\n", "offset", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "_nodes", ")", ":", "\n", "      ", "inter_nodes", "=", "[", "]", "\n", "for", "j", ",", "h", "in", "enumerate", "(", "states", ")", ":", "\n", "        ", "weight", "=", "weights", "[", "offset", "+", "j", "]", "\n", "op", "=", "self", ".", "_ops", "[", "offset", "+", "j", "]", "\n", "weightsum", "=", "sum", "(", "weight", "[", "ie", "]", "*", "op", "[", "ie", "]", "(", "h", ")", "for", "ie", ",", "edge", "in", "enumerate", "(", "op", ")", ")", "\n", "inter_nodes", ".", "append", "(", "weightsum", ")", "\n", "", "s", "=", "sum", "(", "inter_nodes", ")", "\n", "offset", "+=", "len", "(", "states", ")", "\n", "states", ".", "append", "(", "s", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "states", "[", "-", "self", ".", "_multiplier", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Cell.genotype": [[282, 312], ["model_search.Cell.genotype._parse"], "methods", ["None"], ["", "def", "genotype", "(", "self", ")", ":", "\n", "    ", "def", "_parse", "(", "weights", ")", ":", "\n", "      ", "gene", "=", "[", "]", "\n", "n", "=", "2", "\n", "start", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_nodes", ")", ":", "\n", "        ", "end", "=", "start", "+", "n", "\n", "\n", "W", "=", "weights", "[", "start", ":", "end", "]", ".", "copy", "(", ")", "\n", "edges", "=", "sorted", "(", "range", "(", "i", "+", "2", ")", ",", "key", "=", "lambda", "x", ":", "-", "max", "(", "W", "[", "x", "]", "[", "k", "]", "for", "k", "in", "range", "(", "len", "(", "W", "[", "x", "]", ")", ")", "if", "k", "!=", "PRIMITIVES", ".", "index", "(", "'none'", ")", ")", ")", "[", ":", "2", "]", "\n", "# edges = sorted(range(i + 2), key=lambda x: -max(W[x][k] for k in range(len(W[x]))))[:2]", "\n", "\n", "for", "j", "in", "edges", ":", "\n", "          ", "k_best", "=", "None", "\n", "for", "k", "in", "range", "(", "len", "(", "W", "[", "j", "]", ")", ")", ":", "\n", "            ", "if", "k", "!=", "PRIMITIVES", ".", "index", "(", "'none'", ")", ":", "\n", "              ", "if", "k_best", "is", "None", "or", "W", "[", "j", "]", "[", "k", "]", ">", "W", "[", "j", "]", "[", "k_best", "]", ":", "\n", "                ", "k_best", "=", "k", "\n", "# if k_best is None or W[j][k] > W[j][k_best]:", "\n", "# k_best = k", "\n", "", "", "", "gene", ".", "append", "(", "(", "PRIMITIVES", "[", "k_best", "]", ",", "j", ")", ")", "\n", "", "start", "=", "end", "\n", "n", "+=", "1", "\n", "", "return", "gene", "\n", "\n", "", "gene", "=", "_parse", "(", "F", ".", "softmax", "(", "self", ".", "_alphas", ",", "dim", "=", "1", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "concat", "=", "range", "(", "2", "+", "self", ".", "_nodes", "-", "self", ".", "_multiplier", ",", "self", ".", "_nodes", "+", "2", ")", "\n", "genotype", "=", "Genotype_stage", "(", "cell", "=", "gene", ",", "cell_concat", "=", "concat", ")", "\n", "return", "genotype", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.train_search.compute_loss_acc": [[34, 47], ["len", "loss_fn", "scores.max"], "function", ["None"], ["def", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", ")", ":", "\n", "\n", "\t", "loss", ",", "acc", "=", "0.", ",", "0.", "\n", "num", "=", "len", "(", "res", ")", "\n", "\n", "for", "scores", ",", "feats", "in", "res", ":", "\n", "\t\t", "ls", "=", "loss_fn", "(", "scores", ",", "feats", ",", "labels", ")", "\n", "loss", "+=", "ls", "\n", "\n", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.train_search.set_config": [[48, 80], ["utils.setup_logger", "utils.setup_logger.info", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "print", "exit", "utils.setup_logger.info", "utils.setup_logger.info", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.logger.setup_logger"], ["", "def", "set_config", "(", ")", ":", "\n", "\n", "\t", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "if", "output_dir", "!=", "\"\"", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"ERROR:please specify an output path\"", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# config the logger ", "\n", "", "logger", "=", "setup_logger", "(", "\"CDNet_Search\"", ",", "output_dir", ",", "0", ",", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", "\n", "\n", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "if", "use_gpu", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with GPU: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "DEVICE_IDS", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with CPU\"", ")", "\n", "\n", "", "if", "use_gpu", ":", "\n", "\t\t", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_IDS", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# print the configuration", "\n", "logger", ".", "info", "(", "\"running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "# init rand seed ", "\n", "seed", "=", "cfg", ".", "SOLVER", ".", "SEED", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "use_gpu", ":", "\n", "\t\t", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.train_search.train": [[81, 296], ["data.darts_make_data_loader", "model_search.Network", "optims.make_optimizer", "torch.optim.Adam", "torch.optim.Adam", "optims.make_lr_scheduler", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "optims.darts_make_loss", "len", "openpyxl.Workbook", "sheet.append", "logging.getLogger", "utils.utils.count_parameters", "values.append", "values.append", "logging.getLogger.info", "logging.getLogger.info", "range", "values.insert", "sheet.append", "xl.Workbook.save", "logging.getLogger.info", "model.to._arch_parameters", "os.path.exists", "os.makedirs", "format", "RunningAverageMeter", "RunningAverageMeter", "AverageMeter", "AverageMeter", "model.to.to", "logging.getLogger.info", "model.to.load_pretrained_model", "logging.getLogger.info", "model.to.kaiming_init_", "model.to.set_tau", "optims.make_lr_scheduler.step", "torch.optim.lr_scheduler.MultiStepLR.step", "model.to.train", "avg_loss.reset", "avg_acc.reset", "avg_time.reset", "enumerate", "logging.getLogger.info", "global_avg_time.update", "format", "configs._C.OUTPUT.LOG_NAME.split", "optims.make_lr_scheduler.get_lr", "time.time", "next", "optims.make_optimizer.zero_grad", "model.to.", "train_search.compute_loss_acc", "loss.backward", "optims.make_optimizer.step", "torch.optim.Adam.zero_grad", "model.to.", "train_search.compute_loss_acc", "val_loss.backward", "torch.optim.Adam.step", "time.time", "avg_time.update", "avg_loss.update", "avg_acc.update", "model.to.eval", "utils.R1_mAP", "torch.save", "torch.save", "model.to._parse_genotype", "logging.getLogger.info", "iter", "imgs.to.to", "labels.to.to", "val_imgs.to.to", "val_labels.to.to", "torch.utils.clip_grad_norm_", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "enumerate", "utils.R1_mAP.compute", "logging.getLogger.info", "logging.getLogger.info", "model.to.state_dict", "torch.save", "torch.save", "model.to._parse_genotype", "logging.getLogger.info", "model.to.parameters", "model.to.", "utils.R1_mAP.update", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "change.append", "values.extend", "model.to.state_dict", "imgs.to.to", "format", "format"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_optimizer", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_lr_scheduler", "home.repos.pwc.inspect_result.solicucu_ReID.loss.__init__.darts_make_loss", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.load_pretrained_model", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.kaiming_init_", "home.repos.pwc.inspect_result.solicucu_ReID.gdas.model_search.Network.set_tau", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.WarmupCosAnnLR.get_lr", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._parse_genotype", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.compute", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._parse_genotype", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update"], ["", "", "def", "train", "(", ")", ":", "\n", "\n", "\t", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "# 1\u3001make dataloader ", "\n", "train_loader", ",", "val_loader", ",", "test_loader", ",", "num_query", ",", "num_class", "=", "darts_make_data_loader", "(", "cfg", ")", "\n", "# print(num_query, num_class)", "\n", "\n", "# 2\u3001make model", "\n", "model", "=", "CDNetwork", "(", "num_class", ",", "cfg", ")", "\n", "# tensor = torch.randn(2, 3, 256, 128)", "\n", "# res = model(tensor)", "\n", "# print(res[0].size()) [2, 751]", "\n", "\n", "# 3\u3001make optimizer", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "_arch_parameters", "(", ")", ",", "\n", "lr", "=", "cfg", ".", "SOLVER", ".", "ARCH_LR", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "ARCH_WEIGHT_DECAY", ")", "\n", "\n", "# 4\u3001make lr scheduler", "\n", "lr_scheduler", "=", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "# make lr scheduler", "\n", "arch_lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "arch_optimizer", ",", "[", "80", ",", "160", "]", ",", "0.1", ")", "\n", "\n", "# 5\u3001make loss ", "\n", "loss_fn", "=", "darts_make_loss", "(", "cfg", ")", "\n", "\n", "\n", "# get parameters", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "use_gpu", "=", "device", "==", "\"cuda\"", "\n", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAINED", "!=", "\"\"", "\n", "\n", "log_period", "=", "cfg", ".", "OUTPUT", ".", "LOG_PERIOD", "\n", "ckpt_period", "=", "cfg", ".", "OUTPUT", ".", "CKPT_PERIOD", "\n", "eval_period", "=", "cfg", ".", "OUTPUT", ".", "EVAL_PERIOD", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "ckpt_save_path", "=", "output_dir", "+", "cfg", ".", "OUTPUT", ".", "CKPT_DIRS", "\n", "\n", "epochs", "=", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "\n", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "grad_clip", "=", "cfg", ".", "SOLVER", ".", "GRAD_CLIP", "\n", "\n", "batch_num", "=", "len", "(", "train_loader", ")", "\n", "log_iters", "=", "batch_num", "//", "log_period", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_save_path", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "ckpt_save_path", ")", "\n", "\n", "# create *_result.xlsx", "\n", "# save the result for analyze", "\n", "", "name", "=", "(", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".xlsx\"", "\n", "result_path", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "+", "name", "\n", "\n", "wb", "=", "xl", ".", "Workbook", "(", ")", "\n", "sheet", "=", "wb", ".", "worksheets", "[", "0", "]", "\n", "titles", "=", "[", "'size/M'", ",", "'speed/ms'", ",", "'final_planes'", ",", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", ",", "\n", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", ",", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", "]", "\n", "sheet", ".", "append", "(", "titles", ")", "\n", "check_epochs", "=", "[", "40", ",", "80", ",", "120", ",", "160", ",", "200", ",", "240", ",", "280", ",", "320", ",", "360", ",", "epochs", "]", "\n", "values", "=", "[", "]", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"CDNet_Search.train\"", ")", "\n", "size", "=", "count_parameters", "(", "model", ")", "\n", "values", ".", "append", "(", "format", "(", "size", ",", "'.2f'", ")", ")", "\n", "values", ".", "append", "(", "model", ".", "final_planes", ")", "\n", "\n", "logger", ".", "info", "(", "\"the param number of the model is {:.2f} M\"", ".", "format", "(", "size", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Starting Search CDNetwork\"", ")", "\n", "\n", "best_mAP", ",", "best_r1", "=", "0.", ",", "0.", "\n", "is_best", "=", "False", "\n", "avg_loss", ",", "avg_acc", "=", "RunningAverageMeter", "(", ")", ",", "RunningAverageMeter", "(", ")", "\n", "avg_time", ",", "global_avg_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "pretrained", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"load self pretrained chekpoint to init\"", ")", "\n", "model", ".", "load_pretrained_model", "(", "cfg", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"use kaiming init to init the model\"", ")", "\n", "model", ".", "kaiming_init_", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "\t\t", "lr_scheduler", ".", "step", "(", ")", "\n", "lr", "=", "lr_scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# architect lr.step", "\n", "arch_lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# if save epoch_num k, then run k+1 epoch next", "\n", "if", "pretrained", "and", "epoch", "<", "model", ".", "start_epoch", ":", "\n", "\t\t\t", "continue", "\n", "\n", "# print(epoch)", "\n", "# exit(1)", "\n", "", "model", ".", "train", "(", ")", "\n", "avg_loss", ".", "reset", "(", ")", "\n", "avg_acc", ".", "reset", "(", ")", "\n", "avg_time", ".", "reset", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "\t\t\t", "t0", "=", "time", ".", "time", "(", ")", "\n", "imgs", ",", "labels", "=", "batch", "\n", "val_imgs", ",", "val_labels", "=", "next", "(", "iter", "(", "val_loader", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "val_imgs", "=", "val_imgs", ".", "to", "(", "device", ")", "\n", "val_labels", "=", "val_labels", ".", "to", "(", "device", ")", "\n", "\n", "# 1\u3001 update the weights", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "res", "=", "model", "(", "imgs", ")", "\n", "\n", "# loss = loss_fn(scores, feats, labels)", "\n", "loss", ",", "acc", "=", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "grad_clip", "!=", "0", ":", "\n", "\t\t\t\t", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "grad_clip", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# 2\u3001update the alpha", "\n", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "res", "=", "model", "(", "val_imgs", ")", "\n", "\n", "val_loss", ",", "val_acc", "=", "compute_loss_acc", "(", "res", ",", "val_labels", ",", "loss_fn", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# compute the acc ", "\n", "# acc = (scores.max(1)[1] == labels).float().mean()", "\n", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "avg_time", ".", "update", "(", "(", "t1", "-", "t0", ")", "/", "batch_size", ")", "\n", "avg_loss", ".", "update", "(", "loss", ")", "\n", "avg_acc", ".", "update", "(", "acc", ")", "\n", "\n", "# log info", "\n", "if", "(", "i", "+", "1", ")", "%", "log_iters", "==", "0", ":", "\n", "\t\t\t\t", "logger", ".", "info", "(", "\"epoch {}: {}/{} with loss is {:.5f} and acc is {:.3f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "i", "+", "1", ",", "batch_num", ",", "avg_loss", ".", "avg", ",", "avg_acc", ".", "avg", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"end epochs {}/{} with lr: {:.5f} and avg_time is: {:.3f} ms\"", ".", "format", "(", "epoch", "+", "1", ",", "epochs", ",", "lr", ",", "avg_time", ".", "avg", "*", "1000", ")", ")", "\n", "global_avg_time", ".", "update", "(", "avg_time", ".", "avg", ")", "\n", "\n", "# test the model", "\n", "if", "(", "epoch", "+", "1", ")", "%", "eval_period", "==", "0", "or", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\n", "\t\t\t", "model", ".", "eval", "(", ")", "\n", "metrics", "=", "R1_mAP", "(", "num_query", ",", "use_gpu", "=", "use_gpu", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "for", "vi", ",", "batch", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "# break", "\n", "# print(len(batch))", "\n", "\t\t\t\t\t", "imgs", ",", "labels", ",", "camids", "=", "batch", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "\n", "", "feats", "=", "model", "(", "imgs", ")", "\n", "metrics", ".", "update", "(", "(", "feats", ",", "labels", ",", "camids", ")", ")", "\n", "\n", "#compute cmc and mAP", "\n", "", "cmc", ",", "mAP", "=", "metrics", ".", "compute", "(", ")", "\n", "logger", ".", "info", "(", "\"validation results at epoch {}\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"mAP:{:2%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "\t\t\t\t\t", "logger", ".", "info", "(", "\"CMC curve, Rank-{:<3}:{:.2%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "\n", "# determine whether current model is the best", "\n", "", "if", "mAP", ">", "best_mAP", ":", "\n", "\t\t\t\t\t", "is_best", "=", "True", "\n", "best_mAP", "=", "mAP", "\n", "logger", ".", "info", "(", "\"Get a new best mAP\"", ")", "\n", "", "if", "cmc", "[", "0", "]", ">", "best_r1", ":", "\n", "\t\t\t\t\t", "is_best", "=", "True", "\n", "best_r1", "=", "cmc", "[", "0", "]", "\n", "logger", ".", "info", "(", "\"Get a new best r1\"", ")", "\n", "\n", "# add the result to sheet", "\n", "", "if", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\t\t\t\t\t", "val", "=", "[", "avg_acc", ".", "avg", ",", "mAP", ",", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", "]", "\n", "change", "=", "[", "format", "(", "v", "*", "100", ",", "'.2f'", ")", "for", "v", "in", "val", "]", "\n", "change", ".", "append", "(", "format", "(", "avg_loss", ".", "avg", ",", "'.3f'", ")", ")", "\n", "values", ".", "extend", "(", "change", ")", "\n", "\n", "# whether to save the model", "\n", "", "", "", "if", "(", "epoch", "+", "1", ")", "%", "ckpt_period", "==", "0", "or", "is_best", ":", "\n", "\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"checkpoint_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "model", ".", "_parse_genotype", "(", "file", "=", "ckpt_save_path", "+", "\"genotype_{}.json\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"checkpoint {} was saved\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "if", "is_best", ":", "\n", "\t\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"best_ckpt.pth\"", ")", "\n", "model", ".", "_parse_genotype", "(", "file", "=", "ckpt_save_path", "+", "\"best_genotype.json\"", ")", "\n", "logger", ".", "info", "(", "\"best_checkpoint was saved\"", ")", "\n", "is_best", "=", "False", "\n", "# exit(1)", "\n", "\n", "", "", "", "values", ".", "insert", "(", "1", ",", "format", "(", "global_avg_time", ".", "avg", "*", "1000", ",", "'.2f'", ")", ")", "\n", "sheet", ".", "append", "(", "values", ")", "\n", "wb", ".", "save", "(", "result_path", ")", "\n", "\n", "logger", ".", "info", "(", "\"Ending Search CDNetwork\"", ")", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "\t", "set_config", "(", ")", "\n", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.gdas.train_search.main": [[297, 300], ["train_search.set_config", "train_search.train"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.set_config", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train"], ["", "if", "__name__", "==", "\"__main__\"", ":", "\n", "\n", "\t", "main", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.Conv1x1BNReLU.__init__": [[15, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "\n", "\t\t", "super", "(", "Conv1x1BNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.Conv1x1BNReLU.forward": [[25, 28], ["operations.Conv1x1BNReLU.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.Conv1x1BN.__init__": [[33, 40], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "\n", "\t\t", "super", "(", "Conv1x1BN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.Conv1x1BN.forward": [[42, 45], ["operations.Conv1x1BN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.ConvBNReLU.__init__": [[51, 61], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "keepsame", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# resize the padding to keep the same shape for special kernel_size", "\n", "if", "keepsame", ":", "\n", "\t\t\t", "padding", "=", "kernel_size", "//", "2", "\n", "", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.ConvBNReLU.forward": [[63, 66], ["operations.ConvBNReLU.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.AdaptiveFuse.__init__": [[69, 81], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "reduction", "=", "4", ",", "layer_norm", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "AdaptiveFuse", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "mid_planes", "=", "in_planes", "//", "reduction", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "\t\t\t", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "mid_planes", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.AdaptiveFuse.forward": [[82, 94], ["operations.AdaptiveFuse.gap", "operations.AdaptiveFuse.fc1", "operations.AdaptiveFuse.relu", "operations.AdaptiveFuse.fc2", "operations.AdaptiveFuse.activation", "operations.AdaptiveFuse.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "res", "=", "self", ".", "gap", "(", "x", ")", "\n", "res", "=", "self", ".", "fc1", "(", "res", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "\t\t\t", "res", "=", "self", ".", "norm", "(", "res", ")", "\n", "", "res", "=", "self", ".", "relu", "(", "res", ")", "\n", "res", "=", "self", ".", "fc2", "(", "res", ")", "\n", "\n", "w", "=", "self", ".", "activation", "(", "res", ")", "\n", "\n", "return", "x", "*", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.StdStem.__init__": [[98, 103], ["torch.Module.__init__", "operations.ConvBNReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "usepool", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "StdStem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "usepool", "=", "usepool", "\n", "self", ".", "conv1", "=", "ConvBNReLU", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "keepsame", "=", "False", ")", "\n", "if", "self", ".", "usepool", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.StdStem.forward": [[104, 108], ["operations.StdStem.conv1", "operations.StdStem.pool"], "methods", ["None"], ["\t\t\t", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "# ", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.DWBlock.__init__": [[114, 125], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "operations.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1"], ["", "", "class", "DWBlock", "(", "nn", ".", "Module", ")", ":", "\n", "# notice that in dwblock, in_planes always equal to out_planes", "\n", "# we reverse the order of conv1x1 and dw_conv as osnet", "\n", "\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "keepsame", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "DWBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_planes", "==", "out_planes", "\n", "if", "keepsame", ":", "\n", "\t\t\t", "padding", "=", "kernel_size", "//", "2", "\n", "", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "out_planes", ",", "bias", "=", "False", ")", ",", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.DWBlock.forward": [[127, 130], ["operations.DWBlock.op"], "methods", ["None"], ["nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.CBlock.__init__": [[141, 162], ["torch.Module.__init__", "operations.Conv1x1BNReLU", "operations.CBlock.make_block_layer", "operations.CBlock.make_block_layer", "operations.Conv1x1BN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "operations.AdaptiveFuse", "operations.Conv1x1BN"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.CBlock.make_block_layer", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.CBlock.make_block_layer"], ["\n", "class", "CBlock", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "k1", ",", "k2", ",", "reduction", "=", "4", ",", "adaptionfuse", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "CBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "adaptionfuse", "=", "adaptionfuse", "\n", "mid_planes", "=", "out_planes", "//", "reduction", "\n", "\n", "self", ".", "squeeze", "=", "Conv1x1BNReLU", "(", "in_planes", ",", "mid_planes", ")", "\n", "self", ".", "conv1", "=", "self", ".", "make_block_layer", "(", "mid_planes", ",", "k1", ")", "\n", "self", ".", "conv2", "=", "self", ".", "make_block_layer", "(", "mid_planes", ",", "k2", ")", "\n", "if", "self", ".", "adaptionfuse", ":", "\n", "\t\t\t", "self", ".", "adaption", "=", "AdaptiveFuse", "(", "mid_planes", ")", "\n", "# note the conv1x1 is linear", "\n", "", "self", ".", "restore", "=", "Conv1x1BN", "(", "mid_planes", ",", "out_planes", ")", "\n", "\n", "# use for identity", "\n", "self", ".", "expand", "=", "None", "\n", "# note the conv1x1 is linear", "\n", "if", "in_planes", "!=", "out_planes", ":", "\n", "\t\t\t", "self", ".", "expand", "=", "Conv1x1BN", "(", "in_planes", ",", "out_planes", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.CBlock.forward": [[163, 185], ["operations.CBlock.squeeze", "operations.CBlock.conv1", "operations.CBlock.conv2", "operations.CBlock.restore", "operations.CBlock.relu", "operations.CBlock.expand", "operations.CBlock.adaption", "operations.CBlock.adaption"], "methods", ["None"], ["\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "identity", "=", "x", "\n", "\n", "# reduction for bottleneck", "\n", "x", "=", "self", ".", "squeeze", "(", "x", ")", "\n", "res1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "res2", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "self", ".", "adaptionfuse", ":", "\n", "\t\t\t", "add", "=", "self", ".", "adaption", "(", "res1", ")", "+", "self", ".", "adaption", "(", "res2", ")", "\n", "", "else", ":", "\n", "\t\t\t", "add", "=", "res1", "+", "res2", "\n", "\n", "", "res", "=", "self", ".", "restore", "(", "add", ")", "\n", "\n", "if", "self", ".", "expand", "is", "not", "None", ":", "\n", "\n", "\t\t\t", "identity", "=", "self", ".", "expand", "(", "identity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.CBlock.make_block_layer": [[187, 197], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "blocks.append", "operations.DWBlock"], "methods", ["None"], ["\n", "return", "self", ".", "relu", "(", "out", ")", "\n", "\n", "\n", "", "def", "make_block_layer", "(", "self", ",", "in_planes", ",", "k", ")", ":", "\n", "\n", "\t\t", "blocks", "=", "[", "]", "\n", "# compute how many dw_conv3x3 to be construct", "\n", "num", "=", "k", "//", "2", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "\t\t\t", "blocks", ".", "append", "(", "DWBlock", "(", "in_planes", ",", "in_planes", ")", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.DownSample.__init__": [[201, 206], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "operations.Conv1x1BNReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["", "", "\"\"\"\nParam:\n\tkernel_list: a 3-elem list [k1, k2, r], r denote the number of cblock to be constructed\n\tin_planes will be same with out_planes, channel only change in downsample \n\"\"\"", "\n", "class", "CDBlock", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.DownSample.forward": [[208, 212], ["operations.DownSample.conv1x1", "operations.DownSample.avg_pool"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_list", ",", "adaptionfuse", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "CDBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "blocks", "=", "[", "]", "\n", "k1", ",", "k2", ",", "r", "=", "kernel_list", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.operations.conv1x1": [[9, 11], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "\t", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.train_search.compute_loss_acc": [[35, 48], ["len", "loss_fn", "scores.max"], "function", ["None"], ["\n", "\t", "loss", ",", "acc", "=", "0.", ",", "0.", "\n", "num", "=", "len", "(", "res", ")", "\n", "\n", "for", "scores", ",", "feats", "in", "res", ":", "\n", "\t\t", "ls", "=", "loss_fn", "(", "scores", ",", "feats", ",", "labels", ")", "\n", "loss", "+=", "ls", "\n", "\n", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n", "", "def", "set_config", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.train_search.set_config": [[49, 81], ["utils.setup_logger", "utils.setup_logger.info", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "print", "exit", "utils.setup_logger.info", "utils.setup_logger.info", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.logger.setup_logger"], ["\n", "\t", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "if", "output_dir", "!=", "\"\"", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"ERROR:please specify an output path\"", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# config the logger ", "\n", "", "logger", "=", "setup_logger", "(", "\"CDNet_Search\"", ",", "output_dir", ",", "0", ",", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", "\n", "\n", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "if", "use_gpu", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with GPU: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "DEVICE_IDS", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with CPU\"", ")", "\n", "\n", "", "if", "use_gpu", ":", "\n", "\t\t", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_IDS", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# print the configuration", "\n", "logger", ".", "info", "(", "\"running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "# init rand seed ", "\n", "seed", "=", "cfg", ".", "SOLVER", ".", "SEED", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "use_gpu", ":", "\n", "\t\t", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "", "", "def", "train", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.train_search.train": [[82, 286], ["data.darts_make_data_loader", "cnet_search.CNetwork", "optims.make_optimizer", "optims.make_lr_scheduler", "optims.darts_make_loss", "model.to._set_loss", "architect.Architect", "len", "openpyxl.Workbook", "sheet.append", "logging.getLogger", "utils.utils.count_parameters", "values.append", "values.append", "logging.getLogger.info", "logging.getLogger.info", "range", "values.insert", "sheet.append", "xl.Workbook.save", "logging.getLogger.info", "os.path.exists", "os.makedirs", "format", "RunningAverageMeter", "RunningAverageMeter", "AverageMeter", "AverageMeter", "model.to.to", "logging.getLogger.info", "model.to.load_pretrained_model", "logging.getLogger.info", "model.to.kaiming_init_", "optims.make_lr_scheduler.step", "architect.Architect.lr_scheduler.step", "model.to.train", "avg_loss.reset", "avg_acc.reset", "avg_time.reset", "enumerate", "logging.getLogger.info", "global_avg_time.update", "format", "configs._C.OUTPUT.LOG_NAME.split", "optims.make_lr_scheduler.get_lr", "time.time", "next", "architect.Architect.step", "optims.make_optimizer.zero_grad", "model.to.", "train_search.compute_loss_acc", "loss.backward", "optims.make_optimizer.step", "time.time", "avg_time.update", "avg_loss.update", "avg_acc.update", "model.to.eval", "utils.R1_mAP", "torch.save", "torch.save", "model.to._parse_genotype", "logging.getLogger.info", "iter", "imgs.to.to", "labels.to.to", "val_imgs.to.to", "val_labels.to.to", "torch.utils.clip_grad_norm", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "enumerate", "utils.R1_mAP.compute", "logging.getLogger.info", "logging.getLogger.info", "model.to.state_dict", "torch.save", "torch.save", "model.to._parse_genotype", "logging.getLogger.info", "model.to.parameters", "model.to.", "utils.R1_mAP.update", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "change.append", "values.extend", "model.to.state_dict", "imgs.to.to", "format", "format"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_optimizer", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_lr_scheduler", "home.repos.pwc.inspect_result.solicucu_ReID.loss.__init__.darts_make_loss", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._set_loss", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.load_pretrained_model", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.kaiming_init_", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.WarmupCosAnnLR.get_lr", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._parse_genotype", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.compute", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._parse_genotype", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update"], ["\n", "\t", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "# 1\u3001make dataloader ", "\n", "train_loader", ",", "val_loader", ",", "test_loader", ",", "num_query", ",", "num_class", "=", "darts_make_data_loader", "(", "cfg", ")", "\n", "# print(num_query, num_class)", "\n", "\n", "# 2\u3001make model", "\n", "model", "=", "CDNetwork", "(", "num_class", ",", "cfg", ")", "\n", "# tensor = torch.randn(2, 3, 256, 128)", "\n", "# res = model(tensor)", "\n", "# print(res[0].size()) [2, 751]", "\n", "\n", "# 3\u3001make optimizer", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "_arch_parameters", "(", ")", ",", "\n", "lr", "=", "cfg", ".", "SOLVER", ".", "ARCH_LR", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "ARCH_WEIGHT_DECAY", ")", "\n", "\n", "# 4\u3001make lr scheduler", "\n", "lr_scheduler", "=", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "# make lr scheduler", "\n", "arch_lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "arch_optimizer", ",", "[", "80", ",", "160", "]", ",", "0.1", ")", "\n", "\n", "# 5\u3001make loss ", "\n", "loss_fn", "=", "darts_make_loss", "(", "cfg", ")", "\n", "\n", "\n", "# get parameters", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "use_gpu", "=", "device", "==", "\"cuda\"", "\n", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAINED", "!=", "\"\"", "\n", "\n", "log_period", "=", "cfg", ".", "OUTPUT", ".", "LOG_PERIOD", "\n", "ckpt_period", "=", "cfg", ".", "OUTPUT", ".", "CKPT_PERIOD", "\n", "eval_period", "=", "cfg", ".", "OUTPUT", ".", "EVAL_PERIOD", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "ckpt_save_path", "=", "output_dir", "+", "cfg", ".", "OUTPUT", ".", "CKPT_DIRS", "\n", "\n", "epochs", "=", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "\n", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "grad_clip", "=", "cfg", ".", "SOLVER", ".", "GRAD_CLIP", "\n", "\n", "batch_num", "=", "len", "(", "train_loader", ")", "\n", "log_iters", "=", "batch_num", "//", "log_period", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_save_path", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "ckpt_save_path", ")", "\n", "\n", "# create *_result.xlsx", "\n", "# save the result for analyze", "\n", "", "name", "=", "(", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".xlsx\"", "\n", "result_path", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "+", "name", "\n", "\n", "wb", "=", "xl", ".", "Workbook", "(", ")", "\n", "sheet", "=", "wb", ".", "worksheets", "[", "0", "]", "\n", "titles", "=", "[", "'size/M'", ",", "'speed/ms'", ",", "'final_planes'", ",", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", ",", "\n", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", ",", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", "]", "\n", "sheet", ".", "append", "(", "titles", ")", "\n", "check_epochs", "=", "[", "40", ",", "80", ",", "120", ",", "160", ",", "200", ",", "240", ",", "280", ",", "320", ",", "360", ",", "epochs", "]", "\n", "values", "=", "[", "]", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"CDNet_Search.train\"", ")", "\n", "size", "=", "count_parameters", "(", "model", ")", "\n", "values", ".", "append", "(", "format", "(", "size", ",", "'.2f'", ")", ")", "\n", "values", ".", "append", "(", "model", ".", "final_planes", ")", "\n", "\n", "logger", ".", "info", "(", "\"the param number of the model is {:.2f} M\"", ".", "format", "(", "size", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Starting Search CDNetwork\"", ")", "\n", "\n", "best_mAP", ",", "best_r1", "=", "0.", ",", "0.", "\n", "is_best", "=", "False", "\n", "avg_loss", ",", "avg_acc", "=", "RunningAverageMeter", "(", ")", ",", "RunningAverageMeter", "(", ")", "\n", "avg_time", ",", "global_avg_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "pretrained", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"load self pretrained chekpoint to init\"", ")", "\n", "model", ".", "load_pretrained_model", "(", "cfg", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"use kaiming init to init the model\"", ")", "\n", "model", ".", "kaiming_init_", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "\t\t", "lr_scheduler", ".", "step", "(", ")", "\n", "lr", "=", "lr_scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# architect lr.step", "\n", "arch_lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# if save epoch_num k, then run k+1 epoch next", "\n", "if", "pretrained", "and", "epoch", "<", "model", ".", "start_epoch", ":", "\n", "\t\t\t", "continue", "\n", "\n", "# print(epoch)", "\n", "# exit(1)", "\n", "", "model", ".", "train", "(", ")", "\n", "avg_loss", ".", "reset", "(", ")", "\n", "avg_acc", ".", "reset", "(", ")", "\n", "avg_time", ".", "reset", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "\t\t\t", "t0", "=", "time", ".", "time", "(", ")", "\n", "imgs", ",", "labels", "=", "batch", "\n", "val_imgs", ",", "val_labels", "=", "next", "(", "iter", "(", "val_loader", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "val_imgs", "=", "val_imgs", ".", "to", "(", "device", ")", "\n", "val_labels", "=", "val_labels", ".", "to", "(", "device", ")", "\n", "\n", "# 1\u3001 update the weights", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "res", "=", "model", "(", "imgs", ")", "\n", "\n", "# loss = loss_fn(scores, feats, labels)", "\n", "loss", ",", "acc", "=", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "grad_clip", "!=", "0", ":", "\n", "\t\t\t\t", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "grad_clip", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# 2\u3001update the alpha", "\n", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "res", "=", "model", "(", "val_imgs", ")", "\n", "\n", "val_loss", ",", "val_acc", "=", "compute_loss_acc", "(", "res", ",", "val_labels", ",", "loss_fn", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# compute the acc ", "\n", "# acc = (scores.max(1)[1] == labels).float().mean()", "\n", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "avg_time", ".", "update", "(", "(", "t1", "-", "t0", ")", "/", "batch_size", ")", "\n", "avg_loss", ".", "update", "(", "loss", ")", "\n", "avg_acc", ".", "update", "(", "acc", ")", "\n", "\n", "# log info", "\n", "if", "(", "i", "+", "1", ")", "%", "log_iters", "==", "0", ":", "\n", "\t\t\t\t", "logger", ".", "info", "(", "\"epoch {}: {}/{} with loss is {:.5f} and acc is {:.3f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "i", "+", "1", ",", "batch_num", ",", "avg_loss", ".", "avg", ",", "avg_acc", ".", "avg", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"end epochs {}/{} with lr: {:.5f} and avg_time is: {:.3f} ms\"", ".", "format", "(", "epoch", "+", "1", ",", "epochs", ",", "lr", ",", "avg_time", ".", "avg", "*", "1000", ")", ")", "\n", "global_avg_time", ".", "update", "(", "avg_time", ".", "avg", ")", "\n", "\n", "# test the model", "\n", "if", "(", "epoch", "+", "1", ")", "%", "eval_period", "==", "0", "or", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\n", "\t\t\t", "model", ".", "eval", "(", ")", "\n", "metrics", "=", "R1_mAP", "(", "num_query", ",", "use_gpu", "=", "use_gpu", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "for", "vi", ",", "batch", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "# break", "\n", "# print(len(batch))", "\n", "\t\t\t\t\t", "imgs", ",", "labels", ",", "camids", "=", "batch", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "\n", "", "feats", "=", "model", "(", "imgs", ")", "\n", "metrics", ".", "update", "(", "(", "feats", ",", "labels", ",", "camids", ")", ")", "\n", "\n", "#compute cmc and mAP", "\n", "", "cmc", ",", "mAP", "=", "metrics", ".", "compute", "(", ")", "\n", "logger", ".", "info", "(", "\"validation results at epoch {}\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"mAP:{:2%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "\t\t\t\t\t", "logger", ".", "info", "(", "\"CMC curve, Rank-{:<3}:{:.2%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "\n", "# determine whether current model is the best", "\n", "", "if", "mAP", ">", "best_mAP", ":", "\n", "\t\t\t\t\t", "is_best", "=", "True", "\n", "best_mAP", "=", "mAP", "\n", "logger", ".", "info", "(", "\"Get a new best mAP\"", ")", "\n", "", "if", "cmc", "[", "0", "]", ">", "best_r1", ":", "\n", "\t\t\t\t\t", "is_best", "=", "True", "\n", "best_r1", "=", "cmc", "[", "0", "]", "\n", "logger", ".", "info", "(", "\"Get a new best r1\"", ")", "\n", "\n", "# add the result to sheet", "\n", "", "if", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\t\t\t\t\t", "val", "=", "[", "avg_acc", ".", "avg", ",", "mAP", ",", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", "]", "\n", "change", "=", "[", "format", "(", "v", "*", "100", ",", "'.2f'", ")", "for", "v", "in", "val", "]", "\n", "change", ".", "append", "(", "format", "(", "avg_loss", ".", "avg", ",", "'.3f'", ")", ")", "\n", "values", ".", "extend", "(", "change", ")", "\n", "\n", "# whether to save the model", "\n", "", "", "", "if", "(", "epoch", "+", "1", ")", "%", "ckpt_period", "==", "0", "or", "is_best", ":", "\n", "\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"checkpoint_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "model", ".", "_parse_genotype", "(", "file", "=", "ckpt_save_path", "+", "\"genotype_{}.json\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"checkpoint {} was saved\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "if", "is_best", ":", "\n", "\t\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"best_ckpt.pth\"", ")", "\n", "model", ".", "_parse_genotype", "(", "file", "=", "ckpt_save_path", "+", "\"best_genotype.json\"", ")", "\n", "logger", ".", "info", "(", "\"best_checkpoint was saved\"", ")", "\n", "is_best", "=", "False", "\n", "# exit(1)", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.train_search.main": [[287, 290], ["train_search.set_config", "train_search.train"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.set_config", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train"], ["", "", "", "values", ".", "insert", "(", "1", ",", "format", "(", "global_avg_time", ".", "avg", "*", "1000", ",", "'.2f'", ")", ")", "\n", "sheet", ".", "append", "(", "values", ")", "\n", "wb", ".", "save", "(", "result_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.architect.Architect.__init__": [[18, 26], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "architect.Architect.model._arch_parameters"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters"], ["\t", "def", "__init__", "(", "self", ",", "model", ",", "args", ")", ":", "\n", "\t\t", "self", ".", "network_momentum", "=", "args", ".", "SOLVER", ".", "MOMENTUM", "\n", "self", ".", "network_weight_decay", "=", "args", ".", "SOLVER", ".", "WEIGHT_DECAY", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "gpu", "=", "args", ".", "MODEL", ".", "DEVICE", "==", "'cuda'", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "_arch_parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "SOLVER", ".", "ARCH_LR", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "args", ".", "SOLVER", ".", "ARCH_WEIGHT_DECAY", ")", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "optimizer", ",", "[", "40", ",", "80", "]", ",", "0.1", ")", "\n", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.architect.Architect.step": [[37, 47], ["architect.Architect.optimizer.zero_grad", "architect.Architect.optimizer.step", "architect.Architect._backward_step_unrolled", "architect.Architect._backward_step"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._backward_step_unrolled", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._backward_step"], ["def", "step", "(", "self", ",", "train_input", ",", "train_label", ",", "val_input", ",", "val_label", ",", "eta", ",", "network_optimizer", ",", "unrolled", ")", ":", "\n", "\t\t", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "unrolled", ":", "\n", "\t\t\t", "self", ".", "_backward_step_unrolled", "(", "train_input", ",", "train_label", ",", "val_input", ",", "val_label", ",", "eta", ",", "network_optimizer", ")", "\n", "", "else", ":", "\n", "# no unrolled, compute dalpha directly", "\n", "\t\t\t", "self", ".", "_backward_step", "(", "val_input", ",", "val_label", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.architect.Architect._backward_step_unrolled": [[48, 83], ["architect.Architect._compute_unrolled_model", "architect.Architect._loss", "architect.Architect._loss.backward", "architect.Architect._hessian_vector_prodcut", "zip", "zip", "g.data.sub_", "architect.Architect.model._arch_parameters", "architect.Architect._arch_parameters", "architect.Architect.parameters", "alpha.grad.data.copy_"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._compute_unrolled_model", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._loss", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._hessian_vector_prodcut", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters"], ["", "def", "_backward_step_unrolled", "(", "self", ",", "train_input", ",", "train_label", ",", "val_input", ",", "val_label", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "# formula 6: d\u03b1Lval(w',\u03b1) \uff0cwhere w' = w \u2212 \u03be*dwLtrain(w, \u03b1)", "\n", "# in other words, compute d\u03b1 after the model is update by (train_input, train_label)", "\n", "\n", "# create a new model to update w, the old model will be used later", "\n", "\t\t", "unrolled_model", "=", "self", ".", "_compute_unrolled_model", "(", "train_input", ",", "train_label", ",", "eta", ",", "network_optimizer", ")", "\n", "\n", "val_loss", "=", "unrolled_model", ".", "_loss", "(", "val_input", ",", "val_label", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "\n", "# compute  d\u03b1Lval(w',\u03b1)", "\n", "dalpha", "=", "[", "v", ".", "grad", "for", "v", "in", "unrolled_model", ".", "_arch_parameters", "(", ")", "]", "\n", "\n", "# compute dw'(Lval(w',\u03b1)) # new_w is w'", "\n", "dnew_w", "=", "[", "v", ".", "grad", ".", "data", "for", "v", "in", "unrolled_model", ".", "parameters", "(", ")", "]", "\n", "\n", "# compute formula 8:", "\n", "# (d\u03b1Ltrain(w+,\u03b1)-d\u03b1Ltrain(w-,\u03b1))/(2*epsilon) , where w+ = w+dw'Lval(w',\u03b1)*epsilon , w- = w-dw'Lval(w',\u03b1)*epsilon", "\n", "\n", "implicit_grads", "=", "self", ".", "_hessian_vector_prodcut", "(", "dnew_w", ",", "train_input", ",", "train_label", ")", "\n", "\n", "# formula 7: d\u03b1Lval(w',\u03b1)-(d\u03b1Ltrain(w+,\u03b1)-d\u03b1Ltrain(w-,\u03b1))/(2*epsilon)", "\n", "for", "g", ",", "ig", "in", "zip", "(", "dalpha", ",", "implicit_grads", ")", ":", "\n", "\t\t\t", "g", ".", "data", ".", "sub_", "(", "eta", ",", "ig", ".", "data", ")", "\n", "\n", "# update dalpha of self.model", "\n", "# note that here alpha is from self.model, dalpha is from unrolled model", "\n", "", "for", "alpha", ",", "dalpha", "in", "zip", "(", "self", ".", "model", ".", "_arch_parameters", "(", ")", ",", "dalpha", ")", ":", "\n", "\n", "\t\t\t", "if", "alpha", ".", "grad", "is", "None", ":", "\n", "\t\t\t\t", "alpha", ".", "grad", "=", "dalpha", ".", "data", "\n", "", "else", ":", "\n", "# ?? why not alpha = alpha - \u03b7 * dalpha  but directly copy", "\n", "# because we just compute the dalpha, upper formula computed by self.optimizer", "\n", "\t\t\t\t", "alpha", ".", "grad", ".", "data", ".", "copy_", "(", "dalpha", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.architect.Architect._compute_unrolled_model": [[84, 120], ["architect.Architect.model._loss", "w.sub", "architect.Architect._construct_updated_model", "architect.concat", "concat().mul", "architect.Architect.model.parameters", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "architect.concat", "architect.concat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "architect.Architect.model.parameters", "architect.Architect.model.parameters"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._loss", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._construct_updated_model", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.concat", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.concat", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.concat"], ["", "", "", "def", "_compute_unrolled_model", "(", "self", ",", "train_input", ",", "train_label", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "\n", "\t\t", "loss", "=", "self", ".", "model", ".", "_loss", "(", "train_input", ",", "train_label", ")", "\n", "# loss.backward() # compute the gradient", "\n", "\n", "w", "=", "concat", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "data", "\n", "\n", "# compute moment: v = old_v * momentum", "\n", "try", ":", "\n", "\t\t\t", "moment", "=", "concat", "(", "network_optimizer", ".", "state", "[", "v", "]", "[", "'momentum_buffer'", "]", "for", "v", "in", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "mul", "(", "self", ".", "network_momentum", ")", "\n", "", "except", ":", "\n", "# first time to use moment, init with zeros", "\n", "\t\t\t", "moment", "=", "torch", ".", "zeros_like", "(", "w", ")", "\n", "", "\"\"\"\n\t\tres = torch.autograd.grad(loss, self.model.parameters(), allow_unused = True)\n\t\t# print(res[0].size())# 741\n\t\t\n\t\tfor (name, _), value in zip(self.model.named_parameters(),res):\n\t\t\tif value is not None:\n\t\t\t\tlogger.info(\"{}, size:{}\".format(name,value.size()))\n\t\t\telse:\n\t\t\t\tlogger.info(\"{}, None\".format(name))\n\t\texit(1)\n\t\t\"\"\"", "\n", "\"\"\"\n\t\tfor name, value in self.model.named_parameters():\n\t\t\tlogger.info(\"name:{}, size:{}\".format(name, value.size()))\n\t\t\"\"\"", "\n", "\n", "dw", "=", "concat", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "parameters", "(", ")", ",", "allow_unused", "=", "False", ")", ")", ".", "data", "+", "w", "*", "self", ".", "network_weight_decay", "\n", "\n", "new_w", "=", "w", ".", "sub", "(", "eta", ",", "moment", "+", "dw", ")", "\n", "\n", "unrolled_model", "=", "self", ".", "_construct_updated_model", "(", "new_w", ")", "\n", "\n", "return", "unrolled_model", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.architect.Architect._construct_updated_model": [[121, 142], ["architect.Architect.model.new", "architect.Architect.model.state_dict", "architect.Architect.model.named_parameters", "architect.Architect.update", "architect.Architect.load_state_dict", "numpy.prod", "w[].view", "len", "architect.Architect.cuda", "v.size", "v.size"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.new", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update"], ["", "def", "_construct_updated_model", "(", "self", ",", "w", ")", ":", "\n", "\n", "\t\t", "model_new", "=", "self", ".", "model", ".", "new", "(", ")", "\n", "\n", "model_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "\n", "params", ",", "offset", "=", "{", "}", ",", "0", "\n", "for", "name", ",", "v", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "\t\t\t", "lens", "=", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "\n", "# reshape as a tensor", "\n", "params", "[", "name", "]", "=", "w", "[", "offset", ":", "offset", "+", "lens", "]", ".", "view", "(", "v", ".", "size", "(", ")", ")", "\n", "offset", "+=", "lens", "\n", "\n", "", "assert", "offset", "==", "len", "(", "w", ")", "\n", "model_dict", ".", "update", "(", "params", ")", "\n", "# load param by state_dict", "\n", "model_new", ".", "load_state_dict", "(", "model_dict", ")", "\n", "if", "self", ".", "gpu", ":", "\n", "\t\t\t", "return", "model_new", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "model_new", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.architect.Architect._hessian_vector_prodcut": [[145, 170], ["zip", "architect.Architect.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "architect.Architect.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "concat().norm", "architect.Architect.model.parameters", "p.data.add_", "architect.Architect.model._arch_parameters", "architect.Architect.model.parameters", "p.data.sub_", "architect.Architect.model._arch_parameters", "architect.Architect.model.parameters", "p.data.add_", "zip", "architect.concat"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._loss", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._loss", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.concat"], ["", "", "def", "_hessian_vector_prodcut", "(", "self", ",", "vector", ",", "train_input", ",", "train_label", ",", "r", "=", "1e-2", ")", ":", "\n", "\n", "# vector = dw'Lval(w',\u03b1)", "\n", "# compute epsilon", "\n", "\t\t", "eps", "=", "r", "/", "concat", "(", "vector", ")", ".", "norm", "(", ")", "# norm default is 2-order  res = np.sqrt(sum(pow(item,2))", "\n", "\n", "# d\u03b1Ltrain(w+,\u03b1)", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "\t\t\t", "p", ".", "data", ".", "add_", "(", "eps", ",", "v", ")", "\n", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "train_input", ",", "train_label", ")", "\n", "grad_p", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "_arch_parameters", "(", ")", ")", "\n", "\n", "# d\u03b1Ltrain(w-,\u03b1) w- = w + dw'Lval(w',\u03b1)*epsilon - 2 * dw'Lval(w',\u03b1)*epsilon", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "\t\t\t", "p", ".", "data", ".", "sub_", "(", "2", "*", "eps", ",", "v", ")", "\n", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "train_input", ",", "train_label", ")", "\n", "grad_n", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "_arch_parameters", "(", ")", ")", "\n", "\n", "# restore the model from w- to w ", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "\t\t\t", "p", ".", "data", ".", "add_", "(", "eps", ",", "v", ")", "\n", "\n", "", "return", "[", "(", "x", "-", "y", ")", ".", "div_", "(", "2", "*", "eps", ")", "for", "x", ",", "y", "in", "zip", "(", "grad_p", ",", "grad_n", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.architect.Architect._backward_step": [[173, 176], ["architect.Architect.model._loss", "architect.Architect.backward"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._loss"], ["", "def", "_backward_step", "(", "self", ",", "val_input", ",", "val_label", ")", ":", "\n", "\t\t", "loss", "=", "self", ".", "model", ".", "_loss", "(", "val_input", ",", "val_label", ")", "\n", "loss", ".", "backward", "(", ")", "# compute the gradient with regard to all  ", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.architect.concat": [[13, 15], ["torch.cat", "torch.cat", "x.view"], "function", ["None"], ["def", "concat", "(", "tensors", ")", ":", "\n", "\t", "return", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "tensors", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.MBlock.__init__": [[23, 36], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "operations.CBlock", "cnet_search.MBlock.ops.append"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "adaptionfuse", "=", "False", ",", "usek9", "=", "True", ")", ":", "\n", "\t\t", "super", "(", "MBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "usek9", ":", "\n", "\t\t\t", "kernel", "=", "kernels", "[", ":", "-", "3", "]", "\n", "", "else", ":", "\n", "\t\t\t", "kernel", "=", "kernels", "\n", "\n", "", "self", ".", "ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "k1", ",", "k2", "in", "kernel", ":", "\n", "\t\t\t", "cblock", "=", "CBlock", "(", "in_planes", ",", "out_planes", ",", "k1", ",", "k2", ",", "adaptionfuse", "=", "adaptionfuse", ")", "\n", "self", ".", "ops", ".", "append", "(", "cblock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.MBlock.forward": [[37, 40], ["sum", "op", "zip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ",", "index", ")", ":", "\n", "\n", "\t\t", "return", "sum", "(", "weights", "[", "i", "]", "*", "op", "(", "x", ")", "if", "i", "in", "index", "else", "weights", "[", "i", "]", "for", "i", ",", "op", "in", "enumerate", "(", "self", ".", "ops", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.CNetwork.__init__": [[59, 111], ["torch.Module.__init__", "len", "operations.StdStem", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "range", "cnet_search.CNetwork._make_layers", "operations.Conv1x1BNReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "cnet_search.CNetwork._init_alphas", "cnet_search.make_divisible", "cnet_search.CNetwork._make_layers", "cnet_search.CNetwork.cells.append", "cnet_search.CNetwork._make_fc_layers", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "operations.DownSample"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._init_alphas", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.make_divisible", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers"], ["\n", "\t\t", "super", "(", "CNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "stages", "=", "cfg", ".", "MODEL", ".", "STAGES", "\n", "self", ".", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "self", ".", "multiplier", "=", "cfg", ".", "MODEL", ".", "MULTIPLIER", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAINED", "\n", "self", ".", "adaption_fusion", "=", "cfg", ".", "MODEL", ".", "ADAPTION_FUSION", "\n", "self", ".", "fc_dims", "=", "cfg", ".", "MODEL", ".", "FC_DIMS", "\n", "self", ".", "fc_num", "=", "len", "(", "self", ".", "fc_dims", ")", "\n", "# change the channel for scaling", "\n", "self", ".", "planes", "=", "[", "make_divisible", "(", "n", "*", "self", ".", "multiplier", ")", "for", "n", "in", "cfg", ".", "MODEL", ".", "PLANES", "]", "\n", "self", ".", "final_planes", "=", "512", "\n", "self", ".", "before_gap", "=", "False", "\n", "self", ".", "dropout", "=", "0.2", "\n", "\n", "\n", "self", ".", "stem", "=", "StdStem", "(", "3", ",", "self", ".", "planes", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "num", "=", "len", "(", "self", ".", "stages", ")", "\n", "for", "i", "in", "range", "(", "num", "-", "1", ")", ":", "\n", "\t\t\t", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "usek9", "=", "True", ")", "\n", "self", ".", "cells", ".", "append", "(", "DownSample", "(", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "-", "1", "]", ",", "self", ".", "planes", "[", "-", "2", "]", ",", "self", ".", "planes", "[", "-", "1", "]", ",", "usek9", "=", "True", ")", "\n", "\n", "# expand or squeeze the channel", "\n", "self", ".", "conv1x1", "=", "Conv1x1BNReLU", "(", "self", ".", "planes", "[", "-", "1", "]", ",", "self", ".", "planes", "[", "-", "1", "]", ")", "\n", "\n", "# gap", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# fully connected layer ", "\n", "self", ".", "final_planes", "=", "self", ".", "planes", "[", "-", "1", "]", "\n", "# balance neck", "\n", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "self", ".", "fc", "=", "self", ".", "_make_fc_layers", "(", "self", ".", "planes", "[", "-", "1", "]", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "fc_dims", "[", "-", "1", "]", "\n", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "\n", "# classifier", "\n", "", "if", "not", "self", ".", "before_gap", ":", "\n", "\t\t\t", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "final_planes", ",", "num_class", ")", "\n", "\n", "", "self", ".", "_init_alphas", "(", ")", "\n", "\n", "", "def", "_make_layers", "(", "self", ",", "num_cells", ",", "in_planes", ",", "out_planes", ",", "usek9", "=", "True", ")", ":", "\n", "\n", "\t\t", "cells", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.CNetwork._make_layers": [[113, 121], ["cells.append", "range", "cnet_search.MBlock", "cells.append", "cnet_search.MBlock"], "methods", ["None"], ["for", "i", "in", "range", "(", "num_cells", "-", "1", ")", ":", "\n", "\t\t\t", "cells", ".", "append", "(", "MBlock", "(", "out_planes", ",", "out_planes", ",", "self", ".", "adaption_fusion", ",", "usek9", ")", ")", "\n", "\n", "", "return", "cells", "\n", "\n", "", "def", "_make_fc_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "\n", "\t\t", "layers", "=", "[", "]", "\n", "in_dim", "=", "in_planes", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.CNetwork._make_fc_layers": [[122, 136], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["\n", "for", "dim", "in", "self", ".", "fc_dims", ":", "\n", "\n", "\t\t\t", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "in_dim", "=", "dim", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "_init_alphas", "(", "self", ")", ":", "\n", "\n", "\t\t", "k1", "=", "sum", "(", "self", ".", "stages", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.CNetwork._init_alphas": [[137, 150], ["sum", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["num_ops", "=", "len", "(", "op_names", ")", "\n", "scale", "=", "1e-3", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "self", ".", "alphas1", "=", "Variable", "(", "scale", "*", "torch", ".", "ones", "(", "k1", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "alphas1", "=", "Variable", "(", "scale", "*", "torch", ".", "ones", "(", "k1", ",", "num_ops", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "self", ".", "arch_parameters", "=", "[", "self", ".", "alphas1", "]", "\n", "\n", "\n", "# \talphas is a list [alpha1]", "\n", "", "def", "get_weights", "(", "self", ",", "alphas_list", ")", ":", "\n", "\n", "\t\t", "k", "=", "self", ".", "cfg", ".", "SOLVER", ".", "TOPK", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.CNetwork.forward": [[152, 207], ["cnet_search.CNetwork.stem", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "enumerate", "range", "cnet_search.CNetwork.conv1x1", "cnet_search.CNetwork.gap", "cnet_search.CNetwork.size", "cnet_search.CNetwork.view", "cnet_search.CNetwork.classifier", "range", "cnet_search.CNetwork.drop", "cnet_search.CNetwork.fc"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1"], ["# process each alpha", "\n", "weights", "=", "[", "]", "\n", "indexs", "=", "[", "]", "\n", "\n", "for", "alphas", "in", "alphas_list", ":", "\n", "\n", "# softmax", "\n", "\t\t\t", "probs", "=", "F", ".", "softmax", "(", "alphas", ",", "dim", "=", "1", ")", "\n", "\n", "# select the max_prob index , max() return [val, indices]", "\n", "index", "=", "probs", ".", "topk", "(", "k", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "# construt one-zero vector according to the top-k index", "\n", "one_zero", "=", "torch", ".", "zeros_like", "(", "probs", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "# create a mid value ", "\n", "mid_val", "=", "one_zero", "-", "probs", ".", "detach", "(", ")", "\n", "\n", "# we can construct a weight with the same value as one_zero for forward propagation", "\n", "# Note that mid_val is no need to calculate gradients and the gradients will be backpropagated ", "\n", "# via probs to update the architecture parameters.", "\n", "weight", "=", "mid_val", "+", "probs", "\n", "\n", "\n", "weights", ".", "append", "(", "weight", ")", "\n", "indexs", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "weights", ",", "indexs", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "weights", ",", "indexs", "=", "self", ".", "get_weights", "(", "self", ".", "arch_parameters", ")", "\n", "pos", "=", "-", "1", "\n", "\n", "weights1", "=", "weights", "[", "0", "]", "\n", "indexs1", "=", "indexs", "[", "0", "]", "\n", "new_stage", "=", "self", ".", "stages", "[", ":", "-", "1", "]", "\n", "\n", "#1~2 stages", "\n", "w", "=", "-", "1", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "new_stage", ")", ":", "\n", "# each stage", "\n", "\t\t\t", "for", "j", "in", "range", "(", "num", ")", ":", "\n", "\t\t\t\t", "pos", "+=", "1", "\n", "w", "+=", "1", "\n", "x", "=", "self", ".", "cells", "[", "pos", "]", "(", "x", ",", "weights1", "[", "w", "]", ",", "indexs1", "[", "w", "]", ")", "\n", "# downsample", "\n", "", "pos", "+=", "1", "\n", "\n", "x", "=", "self", ".", "cells", "[", "pos", "]", "(", "x", ")", "\n", "\n", "# last stage, without downsample", "\n", "", "for", "i", "in", "range", "(", "self", ".", "stages", "[", "-", "1", "]", ")", ":", "\n", "\t\t\t", "pos", "+=", "1", "\n", "w", "+=", "1", "\n", "x", "=", "self", ".", "cells", "[", "pos", "]", "(", "x", ",", "weights1", "[", "w", "]", ",", "indexs1", "[", "w", "]", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.CNetwork._arch_parameters": [[208, 211], ["None"], "methods", ["None"], ["\n", "# conv1x1 before gap", "\n", "", "x", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.CNetwork.new": [[212, 225], ["cnet_search.CNetwork", "zip", "model_new.cuda.cuda._set_loss", "model_new.cuda.cuda.cuda", "model_new.cuda.cuda._arch_parameters", "cnet_search.CNetwork._arch_parameters", "x.data.copy_"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._set_loss", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters"], ["if", "self", ".", "before_gap", ":", "\n", "\t\t\t", "return", "x", "\n", "# gap ", "\n", "", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "\n", "# reshape the shape", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "feat", "=", "x", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "\n", "# dropout ", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "feat", "=", "self", ".", "drop", "(", "feat", ")", "\n", "# balance neck", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.CNetwork._set_loss": [[226, 230], ["None"], "methods", ["None"], ["\t\t\t", "feat_fc", "=", "self", ".", "fc", "(", "feat", ")", "\n", "", "else", ":", "\n", "\t\t\t", "feat_fc", "=", "feat", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.CNetwork._loss": [[231, 238], ["cnet_search.CNetwork.", "cnet_search.CNetwork.loss_acc_fn"], "methods", ["None"], ["\t\t\t", "return", "feat", "\n", "\n", "", "score", "=", "self", ".", "classifier", "(", "feat_fc", ")", "\n", "\n", "return", "[", "[", "score", ",", "feat", "]", "]", "\n", "\n", "", "def", "_arch_parameters", "(", "self", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.CNetwork._parse_genotype": [[239, 272], ["w1.max", "copy.deepcopy", "alphas1.cpu.cpu.detach().numpy().tolist", "json.dumps", "indices1.numpy.numpy.cpu().numpy", "indices1.numpy.numpy.numpy", "layers.append", "alphas1.cpu.cpu.cpu", "open", "f.write", "alphas1.cpu.cpu.detach().numpy", "indices1.numpy.numpy.cpu", "alphas1.cpu.cpu.detach"], "methods", ["None"], ["\t\t", "return", "self", ".", "arch_parameters", "\n", "\n", "\n", "", "def", "_parse_genotype", "(", "self", ",", "file", "=", "\"./genotype.json\"", ")", ":", "\n", "\n", "\t\t", "geno", "=", "{", "}", "\n", "\n", "w1", "=", "self", ".", "alphas1", "\n", "# find the maxvlaue indices", "\n", "_", ",", "indices1", "=", "w1", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "indices1", "=", "indices1", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "indices1", "=", "indices1", ".", "numpy", "(", ")", "\n", "\n", "", "for", "ind", "in", "indices1", ":", "\n", "\t\t\t", "layers", ".", "append", "(", "kernels", "[", "ind", "]", ")", "\n", "\n", "", "geno", "[", "\"layers\"", "]", "=", "layers", "\n", "\n", "# alphas", "\n", "alphas1", "=", "copy", ".", "deepcopy", "(", "self", ".", "alphas1", ")", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "alphas1", "=", "alphas1", ".", "cpu", "(", ")", "\n", "\n", "", "alphas1", "=", "alphas1", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "geno", "[", "\"alphas1\"", "]", "=", "alphas1", "\n", "\n", "json_data", "=", "json", ".", "dumps", "(", "geno", ",", "indent", "=", "4", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.CNetwork.kaiming_init_": [[275, 292], ["cnet_search.CNetwork.modules", "isinstance", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["\n", "# return geno  ", "\n", "\n", "", "", "def", "kaiming_init_", "(", "self", ")", ":", "\n", "\n", "# print(\"use kaiming init\")", "\n", "\t\t", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t\t\t", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t\t\t", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t\t", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.CNetwork.load_pretrained_model": [[293, 323], ["glob.glob", "sorted", "int", "logger.info", "cnet_search.CNetwork.load_state_dict", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "cnet_search.CNetwork.alphas1.data.copy_", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "open", "json.load", "[].split", "[].split", "os.path.split"], "methods", ["None"], ["if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "", "def", "load_pretrained_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "# checkpoint", "\n", "\t\t", "ckpt_list", "=", "glob", ".", "glob", "(", "path", "+", "\"checkpoint_*\"", ")", "\n", "ckpt_list", "=", "sorted", "(", "ckpt_list", ")", "\n", "\n", "ckpt_name", "=", "ckpt_list", "[", "-", "1", "]", "\n", "\"\"\"\n\t\tfile_path = \"D:/test/test.py\"\n\t\t(filepath, tempfilename) = os.path.split(file_path)\n\t\t(filename, extension) = os.path.splitext(tempfilename)\n\t\t\"\"\"", "\n", "num", "=", "int", "(", "os", ".", "path", ".", "split", "(", "ckpt_name", ")", "[", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "self", ".", "start_epoch", "=", "num", "\n", "logger", ".", "info", "(", "\"load checkpoint from {}\"", ".", "format", "(", "ckpt_name", ")", ")", "\n", "\n", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt_name", ")", ")", "\n", "\n", "# genotype", "\n", "geno_name", "=", "path", "+", "\"genotype_{}.json\"", ".", "format", "(", "num", ")", "\n", "\n", "with", "open", "(", "geno_name", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "geno", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "alphas1", "=", "torch", ".", "tensor", "(", "geno", "[", "\"alphas1\"", "]", ")", "\n", "self", ".", "alphas1", ".", "data", ".", "copy_", "(", "alphas1", ")", "\n", "\n", "logger", ".", "info", "(", "\"end of load the checkpoint and alpha\"", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cnet_search.cnet_search.make_divisible": [[42, 45], ["int"], "function", ["None"], ["\n", "\t", "return", "int", "(", "(", "num", "//", "divisor", ")", "*", "divisor", ")", "\n", "\n", "", "class", "CNetwork", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.Conv1x1BNReLU.__init__": [[15, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "\n", "\t\t", "super", "(", "Conv1x1BNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.Conv1x1BNReLU.forward": [[25, 28], ["operations.Conv1x1BNReLU.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.Conv1x1BN.__init__": [[33, 40], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "\n", "\t\t", "super", "(", "Conv1x1BN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.Conv1x1BN.forward": [[42, 45], ["operations.Conv1x1BN.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.ConvBNReLU.__init__": [[51, 61], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "keepsame", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "ConvBNReLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# resize the padding to keep the same shape for special kernel_size", "\n", "if", "keepsame", ":", "\n", "\t\t\t", "padding", "=", "kernel_size", "//", "2", "\n", "", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.ConvBNReLU.forward": [[63, 66], ["operations.ConvBNReLU.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.AdaptiveFuse.__init__": [[69, 81], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "reduction", "=", "4", ",", "layer_norm", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "AdaptiveFuse", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "mid_planes", "=", "in_planes", "//", "reduction", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "\t\t\t", "self", ".", "norm", "=", "nn", ".", "LayerNorm", "(", "mid_planes", ")", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.AdaptiveFuse.forward": [[82, 94], ["operations.AdaptiveFuse.gap", "operations.AdaptiveFuse.fc1", "operations.AdaptiveFuse.relu", "operations.AdaptiveFuse.fc2", "operations.AdaptiveFuse.activation", "operations.AdaptiveFuse.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "res", "=", "self", ".", "gap", "(", "x", ")", "\n", "res", "=", "self", ".", "fc1", "(", "res", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "\t\t\t", "res", "=", "self", ".", "norm", "(", "res", ")", "\n", "", "res", "=", "self", ".", "relu", "(", "res", ")", "\n", "res", "=", "self", ".", "fc2", "(", "res", ")", "\n", "\n", "w", "=", "self", ".", "activation", "(", "res", ")", "\n", "\n", "return", "x", "*", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.StdStem.__init__": [[98, 105], ["torch.Module.__init__", "operations.ConvBNReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "usepool", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "StdStem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "usepool", "=", "usepool", "\n", "self", ".", "conv1", "=", "ConvBNReLU", "(", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ",", "padding", ",", "keepsame", "=", "False", ")", "\n", "if", "self", ".", "usepool", ":", "\n", "\t\t\t", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "# ", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.StdStem.forward": [[106, 112], ["operations.StdStem.conv1", "operations.StdStem.pool"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "if", "self", ".", "usepool", ":", "\n", "\t\t\t", "return", "self", ".", "pool", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.DWBlock.__init__": [[117, 128], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "operations.conv1x1", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "keepsame", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "DWBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "in_planes", "==", "out_planes", "\n", "if", "keepsame", ":", "\n", "\t\t\t", "padding", "=", "kernel_size", "//", "2", "\n", "", "self", ".", "op", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "groups", "=", "out_planes", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.DWBlock.forward": [[130, 133], ["operations.DWBlock.op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "op", "(", "x", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.CBlock.__init__": [[144, 168], ["torch.Module.__init__", "operations.Conv1x1BNReLU", "operations.CBlock.make_block_layer", "operations.CBlock.make_block_layer", "operations.Conv1x1BN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "operations.AdaptiveFuse", "operations.Conv1x1BN"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.CBlock.make_block_layer", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.CBlock.make_block_layer"], ["\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "k1", ",", "k2", ",", "reduction", "=", "4", ",", "adaptionfuse", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "CBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "adaptionfuse", "=", "adaptionfuse", "\n", "mid_planes", "=", "out_planes", "//", "reduction", "\n", "\n", "self", ".", "squeeze", "=", "Conv1x1BNReLU", "(", "in_planes", ",", "mid_planes", ")", "\n", "self", ".", "conv1", "=", "self", ".", "make_block_layer", "(", "mid_planes", ",", "k1", ")", "\n", "self", ".", "conv2", "=", "self", ".", "make_block_layer", "(", "mid_planes", ",", "k2", ")", "\n", "if", "self", ".", "adaptionfuse", ":", "\n", "\t\t\t", "self", ".", "adaption", "=", "AdaptiveFuse", "(", "mid_planes", ")", "\n", "# note the conv1x1 is linear", "\n", "", "self", ".", "restore", "=", "Conv1x1BN", "(", "mid_planes", ",", "out_planes", ")", "\n", "\n", "# use for identity", "\n", "self", ".", "expand", "=", "None", "\n", "# note the conv1x1 is linear", "\n", "if", "in_planes", "!=", "out_planes", ":", "\n", "\t\t\t", "self", ".", "expand", "=", "Conv1x1BN", "(", "in_planes", ",", "out_planes", ")", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "identity", "=", "x", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.CBlock.forward": [[169, 193], ["operations.CBlock.squeeze", "operations.CBlock.conv1", "operations.CBlock.conv2", "operations.CBlock.restore", "operations.CBlock.relu", "operations.CBlock.expand", "operations.CBlock.adaption", "operations.CBlock.adaption"], "methods", ["None"], ["\n", "# reduction for bottleneck", "\n", "x", "=", "self", ".", "squeeze", "(", "x", ")", "\n", "res1", "=", "self", ".", "conv1", "(", "x", ")", "\n", "res2", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "self", ".", "adaptionfuse", ":", "\n", "\t\t\t", "add", "=", "self", ".", "adaption", "(", "res1", ")", "+", "self", ".", "adaption", "(", "res2", ")", "\n", "", "else", ":", "\n", "\t\t\t", "add", "=", "res1", "+", "res2", "\n", "\n", "", "res", "=", "self", ".", "restore", "(", "add", ")", "\n", "\n", "if", "self", ".", "expand", "is", "not", "None", ":", "\n", "\n", "\t\t\t", "identity", "=", "self", ".", "expand", "(", "identity", ")", "\n", "\n", "", "out", "=", "res", "+", "identity", "\n", "\n", "return", "self", ".", "relu", "(", "out", ")", "\n", "\n", "\n", "", "def", "make_block_layer", "(", "self", ",", "in_planes", ",", "k", ")", ":", "\n", "\n", "\t\t", "blocks", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.CBlock.make_block_layer": [[195, 204], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "blocks.append", "operations.DWBlock"], "methods", ["None"], ["num", "=", "k", "//", "2", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "\t\t\t", "blocks", ".", "append", "(", "DWBlock", "(", "in_planes", ",", "in_planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.CDBlock.__init__": [[212, 223], ["torch.Module.__init__", "blocks.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "operations.CBlock", "blocks.append", "operations.CBlock"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["k1", ",", "k2", ",", "r", "=", "kernel_list", "\n", "# first block may occur expand channel", "\n", "blocks", ".", "append", "(", "CBlock", "(", "in_planes", ",", "out_planes", ",", "k1", ",", "k2", ",", "adaptionfuse", "=", "adaptionfuse", ")", ")", "\n", "for", "i", "in", "range", "(", "r", "-", "1", ")", ":", "\n", "\t\t\t", "blocks", ".", "append", "(", "CBlock", "(", "out_planes", ",", "out_planes", ",", "k1", ",", "k2", ",", "adaptionfuse", "=", "adaptionfuse", ")", ")", "\n", "\n", "", "self", ".", "ops", "=", "nn", ".", "Sequential", "(", "*", "blocks", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "ops", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.CDBlock.forward": [[224, 227], ["operations.CDBlock.ops"], "methods", ["None"], ["\n", "", "", "class", "DownSample", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "\t", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "2", ")", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.DownSample.__init__": [[231, 236], ["torch.Module.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "operations.Conv1x1BNReLU"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["self", ".", "conv1x1", "=", "Conv1x1BNReLU", "(", "in_planes", ",", "out_planes", ")", "\n", "# here we do conv1x1 first before avg_pool as osnet", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "x", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "return", "self", ".", "avg_pool", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.DownSample.forward": [[237, 240], ["operations.DownSample.conv1x1", "operations.DownSample.avg_pool"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1"], ["\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1": [[9, 11], ["torch.Conv2d"], "function", ["None"], ["def", "conv1x1", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "\t", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.MBlock.__init__": [[26, 39], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "operations.CDBlock", "cdnet_search.MBlock.ops.append"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["if", "not", "usek9", ":", "\n", "\t\t\t", "kernel_list", "=", "kernels", "[", ":", "-", "3", "]", "\n", "", "else", ":", "\n", "\t\t\t", "kernel_list", "=", "kernels", "\n", "\n", "", "self", ".", "ops", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "kernel", "in", "kernel_list", ":", "\n", "\t\t\t", "cblock", "=", "CDBlock", "(", "in_planes", ",", "out_planes", ",", "kernel", ",", "adaptionfuse", "=", "adaptionfuse", ")", "\n", "self", ".", "ops", ".", "append", "(", "cblock", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "weights", ",", "index", ")", ":", "\n", "\n", "\t\t", "return", "sum", "(", "weights", "[", "i", "]", "*", "op", "(", "x", ")", "if", "i", "in", "index", "else", "weights", "[", "i", "]", "for", "i", ",", "op", "in", "enumerate", "(", "self", ".", "ops", ")", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.MBlock.forward": [[40, 43], ["sum", "op", "zip"], "methods", ["None"], ["\n", "", "", "def", "make_divisible", "(", "num", ",", "divisor", "=", "4", ")", ":", "\n", "\n", "\t", "return", "int", "(", "(", "num", "//", "divisor", ")", "*", "divisor", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.__init__": [[62, 112], ["torch.Module.__init__", "len", "operations.StdStem", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "range", "cdnet_search.CDNetwork._make_layers", "operations.Conv1x1BNReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "cdnet_search.CDNetwork._init_alphas", "cdnet_search.make_divisible", "cdnet_search.CDNetwork._make_layers", "cdnet_search.CDNetwork.cells.append", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "cdnet_search.CDNetwork._make_fc_layers", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "operations.DownSample"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._init_alphas", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.make_divisible", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers"], ["self", ".", "stages", "=", "cfg", ".", "MODEL", ".", "STAGES", "\n", "self", ".", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "self", ".", "multiplier", "=", "cfg", ".", "MODEL", ".", "MULTIPLIER", "\n", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAINED", "\n", "self", ".", "adaption_fusion", "=", "cfg", ".", "MODEL", ".", "ADAPTION_FUSION", "\n", "self", ".", "fc_dims", "=", "cfg", ".", "MODEL", ".", "FC_DIMS", "\n", "self", ".", "fc_num", "=", "len", "(", "self", ".", "fc_dims", ")", "\n", "# change the channel for scaling", "\n", "self", ".", "planes", "=", "[", "make_divisible", "(", "n", "*", "self", ".", "multiplier", ")", "for", "n", "in", "cfg", ".", "MODEL", ".", "PLANES", "]", "\n", "self", ".", "final_planes", "=", "512", "\n", "self", ".", "before_gap", "=", "False", "\n", "self", ".", "dropout", "=", "0.2", "\n", "\n", "\n", "self", ".", "stem", "=", "StdStem", "(", "3", ",", "self", ".", "planes", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ")", "\n", "\n", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "num", "=", "len", "(", "self", ".", "stages", ")", "\n", "for", "i", "in", "range", "(", "num", "-", "1", ")", ":", "\n", "\t\t\t", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "usek9", "=", "True", ")", "\n", "self", ".", "cells", ".", "append", "(", "DownSample", "(", "self", ".", "planes", "[", "i", "+", "1", "]", ",", "self", ".", "planes", "[", "i", "+", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "cells", "+=", "self", ".", "_make_layers", "(", "self", ".", "stages", "[", "-", "1", "]", ",", "self", ".", "planes", "[", "-", "2", "]", ",", "self", ".", "planes", "[", "-", "1", "]", ",", "usek9", "=", "True", ")", "\n", "\n", "# expand or squeeze the channel", "\n", "self", ".", "conv1x1", "=", "Conv1x1BNReLU", "(", "self", ".", "planes", "[", "-", "1", "]", ",", "self", ".", "planes", "[", "-", "1", "]", ")", "\n", "\n", "# gap", "\n", "self", ".", "gap", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "# fully connected layer ", "\n", "self", ".", "final_planes", "=", "self", ".", "planes", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "\n", "# balance neck", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "self", ".", "fc", "=", "self", ".", "_make_fc_layers", "(", "self", ".", "planes", "[", "-", "1", "]", ")", "\n", "self", ".", "final_planes", "=", "self", ".", "fc_dims", "[", "-", "1", "]", "\n", "\n", "# classifier", "\n", "", "if", "not", "self", ".", "before_gap", ":", "\n", "\t\t\t", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "final_planes", ",", "num_class", ")", "\n", "\n", "", "self", ".", "_init_alphas", "(", ")", "\n", "\n", "\n", "\n", "", "def", "_make_layers", "(", "self", ",", "num_cells", ",", "in_planes", ",", "out_planes", ",", "usek9", "=", "True", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_layers": [[114, 122], ["cells.append", "range", "cdnet_search.MBlock", "cells.append", "cdnet_search.MBlock"], "methods", ["None"], ["cells", ".", "append", "(", "MBlock", "(", "in_planes", ",", "out_planes", ",", "self", ".", "adaption_fusion", ",", "usek9", ")", ")", "\n", "for", "i", "in", "range", "(", "num_cells", "-", "1", ")", ":", "\n", "\t\t\t", "cells", ".", "append", "(", "MBlock", "(", "out_planes", ",", "out_planes", ",", "self", ".", "adaption_fusion", ",", "usek9", ")", ")", "\n", "\n", "", "return", "cells", "\n", "\n", "", "def", "_make_fc_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "\n", "\t\t", "layers", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._make_fc_layers": [[123, 137], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "layers.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["in_dim", "=", "in_planes", "\n", "\n", "for", "dim", "in", "self", ".", "fc_dims", ":", "\n", "\n", "\t\t\t", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "in_dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "in_dim", "=", "dim", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n", "", "def", "_init_alphas", "(", "self", ")", ":", "\n", "\n", "\t\t", "k1", "=", "sum", "(", "self", ".", "stages", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._init_alphas": [[138, 151], ["sum", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["\n", "num_ops", "=", "len", "(", "op_names", ")", "\n", "scale", "=", "1e-3", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "self", ".", "alphas1", "=", "Variable", "(", "scale", "*", "torch", ".", "ones", "(", "k1", ",", "num_ops", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "alphas1", "=", "Variable", "(", "scale", "*", "torch", ".", "ones", "(", "k1", ",", "num_ops", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "self", ".", "arch_parameters", "=", "[", "self", ".", "alphas1", "]", "\n", "\n", "\n", "# \talphas is a list [alpha1]", "\n", "", "def", "get_weights", "(", "self", ",", "alphas_list", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.forward": [[153, 211], ["cdnet_search.CDNetwork.stem", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "enumerate", "range", "cdnet_search.CDNetwork.conv1x1", "cdnet_search.CDNetwork.gap", "cdnet_search.CDNetwork.size", "cdnet_search.CDNetwork.view", "cdnet_search.CDNetwork.classifier", "range", "cdnet_search.CDNetwork.drop", "cdnet_search.CDNetwork.fc"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.operations.conv1x1"], ["\n", "# process each alpha", "\n", "weights", "=", "[", "]", "\n", "indexs", "=", "[", "]", "\n", "\n", "for", "alphas", "in", "alphas_list", ":", "\n", "\n", "# softmax", "\n", "\t\t\t", "probs", "=", "F", ".", "softmax", "(", "alphas", ",", "dim", "=", "1", ")", "\n", "\n", "# select the max_prob index , max() return [val, indices]", "\n", "index", "=", "probs", ".", "topk", "(", "k", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "# construt one-zero vector according to the top-k index", "\n", "one_zero", "=", "torch", ".", "zeros_like", "(", "probs", ")", ".", "scatter_", "(", "-", "1", ",", "index", ",", "1.0", ")", "\n", "# create a mid value ", "\n", "mid_val", "=", "one_zero", "-", "probs", ".", "detach", "(", ")", "\n", "\n", "# we can construct a weight with the same value as one_zero for forward propagation", "\n", "# Note that mid_val is no need to calculate gradients and the gradients will be backpropagated ", "\n", "# via probs to update the architecture parameters.", "\n", "weight", "=", "mid_val", "+", "probs", "\n", "\n", "\n", "weights", ".", "append", "(", "weight", ")", "\n", "indexs", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "weights", ",", "indexs", "\n", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "\t\t", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "\n", "weights", ",", "indexs", "=", "self", ".", "get_weights", "(", "self", ".", "arch_parameters", ")", "\n", "pos", "=", "-", "1", "\n", "\n", "weights1", "=", "weights", "[", "0", "]", "\n", "indexs1", "=", "indexs", "[", "0", "]", "\n", "new_stage", "=", "self", ".", "stages", "[", ":", "-", "1", "]", "\n", "\n", "#1~2 stages", "\n", "w", "=", "-", "1", "\n", "for", "i", ",", "num", "in", "enumerate", "(", "new_stage", ")", ":", "\n", "# each stage", "\n", "\t\t\t", "for", "j", "in", "range", "(", "num", ")", ":", "\n", "\t\t\t\t", "pos", "+=", "1", "\n", "w", "+=", "1", "\n", "x", "=", "self", ".", "cells", "[", "pos", "]", "(", "x", ",", "weights1", "[", "w", "]", ",", "indexs1", "[", "w", "]", ")", "\n", "# downsample", "\n", "", "pos", "+=", "1", "\n", "\n", "x", "=", "self", ".", "cells", "[", "pos", "]", "(", "x", ")", "\n", "\n", "# last stage, without downsample", "\n", "", "for", "i", "in", "range", "(", "self", ".", "stages", "[", "-", "1", "]", ")", ":", "\n", "\t\t\t", "pos", "+=", "1", "\n", "w", "+=", "1", "\n", "x", "=", "self", ".", "cells", "[", "pos", "]", "(", "x", ",", "weights1", "[", "w", "]", ",", "indexs1", "[", "w", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters": [[212, 215], ["None"], "methods", ["None"], ["# conv1x1 before gap", "\n", "", "x", "=", "self", ".", "conv1x1", "(", "x", ")", "\n", "\n", "if", "self", ".", "before_gap", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.new": [[216, 229], ["cdnet_search.CDNetwork", "zip", "model_new.cuda.cuda._set_loss", "model_new.cuda.cuda.cuda", "model_new.cuda.cuda._arch_parameters", "cdnet_search.CDNetwork._arch_parameters", "x.data.copy_"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._set_loss", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters"], ["\t\t\t", "return", "x", "\n", "# gap ", "\n", "", "x", "=", "self", ".", "gap", "(", "x", ")", "\n", "\n", "# reshape the shape", "\n", "batch", "=", "x", ".", "size", "(", "0", ")", "\n", "feat", "=", "x", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "\n", "# dropout ", "\n", "if", "self", ".", "dropout", ">", "0", ":", "\n", "\t\t\t", "feat", "=", "self", ".", "drop", "(", "feat", ")", "\n", "# balance neck", "\n", "", "if", "self", ".", "fc_num", ">", "0", ":", "\n", "\t\t\t", "feat_fc", "=", "self", ".", "fc", "(", "feat", ")", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._set_loss": [[230, 234], ["None"], "methods", ["None"], ["", "else", ":", "\n", "\t\t\t", "feat_fc", "=", "feat", "\n", "\n", "", "if", "not", "self", ".", "training", ":", "\n", "\t\t\t", "return", "feat", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._loss": [[235, 242], ["cdnet_search.CDNetwork.", "cdnet_search.CDNetwork.loss_acc_fn"], "methods", ["None"], ["\n", "", "score", "=", "self", ".", "classifier", "(", "feat_fc", ")", "\n", "\n", "return", "[", "[", "score", ",", "feat", "]", "]", "\n", "\n", "", "def", "_arch_parameters", "(", "self", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "arch_parameters", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._parse_genotype": [[243, 276], ["w1.max", "copy.deepcopy", "alphas1.cpu.cpu.detach().numpy().tolist", "json.dumps", "indices1.numpy.numpy.cpu().numpy", "indices1.numpy.numpy.numpy", "layers.append", "alphas1.cpu.cpu.cpu", "open", "f.write", "alphas1.cpu.cpu.detach().numpy", "indices1.numpy.numpy.cpu", "alphas1.cpu.cpu.detach"], "methods", ["None"], ["\n", "", "def", "_parse_genotype", "(", "self", ",", "file", "=", "\"./genotype.json\"", ")", ":", "\n", "\n", "\t\t", "geno", "=", "{", "}", "\n", "\n", "w1", "=", "self", ".", "alphas1", "\n", "# find the maxvlaue indices", "\n", "_", ",", "indices1", "=", "w1", ".", "max", "(", "dim", "=", "-", "1", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "indices1", "=", "indices1", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "indices1", "=", "indices1", ".", "numpy", "(", ")", "\n", "\n", "", "for", "ind", "in", "indices1", ":", "\n", "\t\t\t", "layers", ".", "append", "(", "kernels", "[", "ind", "]", ")", "\n", "\n", "", "geno", "[", "\"layers\"", "]", "=", "layers", "\n", "\n", "\n", "# alphas", "\n", "alphas1", "=", "copy", ".", "deepcopy", "(", "self", ".", "alphas1", ")", "\n", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "alphas1", "=", "alphas1", ".", "cpu", "(", ")", "\n", "\n", "", "alphas1", "=", "alphas1", ".", "detach", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "geno", "[", "\"alphas1\"", "]", "=", "alphas1", "\n", "\n", "json_data", "=", "json", ".", "dumps", "(", "geno", ",", "indent", "=", "4", ")", "\n", "with", "open", "(", "file", ",", "'w'", ")", "as", "f", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.kaiming_init_": [[279, 296], ["cdnet_search.CDNetwork.modules", "isinstance", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "torch.kaiming_normal_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "isinstance", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.normal_", "torch.constant_", "torch.constant_", "torch.constant_", "torch.constant_"], "methods", ["None"], ["# return geno  ", "\n", "\n", "", "", "def", "kaiming_init_", "(", "self", ")", ":", "\n", "\n", "# print(\"use kaiming init\")", "\n", "\t\t", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "\t\t\t", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "\t\t\t\t", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "\t\t\t\t", "if", "m", ".", "weight", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "\t\t\t\t", "init", ".", "normal_", "(", "m", ".", "weight", ",", "std", "=", "1e-3", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.load_pretrained_model": [[297, 323], ["glob.glob", "sorted", "int", "logger.info", "cdnet_search.CDNetwork.load_state_dict", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "cdnet_search.CDNetwork.alphas1.data.copy_", "logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "open", "json.load", "[].split", "[].split", "os.path.split"], "methods", ["None"], ["\t\t\t\t\t", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "", "", "def", "load_pretrained_model", "(", "self", ",", "path", ")", ":", "\n", "\n", "# checkpoint", "\n", "\t\t", "ckpt_list", "=", "glob", ".", "glob", "(", "path", "+", "\"checkpoint_*\"", ")", "\n", "# ", "\n", "ckpt_list", "=", "sorted", "(", "ckpt_list", ")", "\n", "\n", "ckpt_name", "=", "ckpt_list", "[", "-", "1", "]", "\n", "\"\"\"\n\t\tfile_path = \"D:/test/test.py\"\n\t\t(filepath, tempfilename) = os.path.split(file_path)\n\t\t(filename, extension) = os.path.splitext(tempfilename)\n\t\t\"\"\"", "\n", "num", "=", "int", "(", "os", ".", "path", ".", "split", "(", "ckpt_name", ")", "[", "1", "]", ".", "split", "(", "\"_\"", ")", "[", "1", "]", ".", "split", "(", "\".\"", ")", "[", "0", "]", ")", "\n", "self", ".", "start_epoch", "=", "num", "\n", "logger", ".", "info", "(", "\"load checkpoint from {}\"", ".", "format", "(", "ckpt_name", ")", ")", "\n", "\n", "self", ".", "load_state_dict", "(", "torch", ".", "load", "(", "ckpt_name", ")", ")", "\n", "\n", "# genotype", "\n", "geno_name", "=", "path", "+", "\"genotype_{}.json\"", ".", "format", "(", "num", ")", "\n", "\n", "with", "open", "(", "geno_name", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t\t", "geno", "=", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.make_divisible": [[45, 48], ["int"], "function", ["None"], ["", "class", "CDNetwork", "(", "nn", ".", "Module", ")", ":", "\n", "\t"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc": [[35, 48], ["len", "loss_fn", "scores.max"], "function", ["None"], ["\n", "\t", "loss", ",", "acc", "=", "0.", ",", "0.", "\n", "num", "=", "len", "(", "res", ")", "\n", "\n", "for", "scores", ",", "feats", "in", "res", ":", "\n", "\t\t", "ls", "=", "loss_fn", "(", "scores", ",", "feats", ",", "labels", ")", "\n", "loss", "+=", "ls", "\n", "\n", "ac", "=", "(", "scores", ".", "max", "(", "1", ")", "[", "1", "]", "==", "labels", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "acc", "+=", "ac", "\n", "\n", "", "return", "loss", ",", "acc", "/", "num", "\n", "\n", "", "def", "set_config", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.set_config": [[49, 81], ["utils.setup_logger", "utils.setup_logger.info", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "print", "exit", "utils.setup_logger.info", "utils.setup_logger.info", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.utils.logger.setup_logger"], ["\n", "\t", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "if", "output_dir", "!=", "\"\"", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "output_dir", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "", "else", ":", "\n", "\t\t", "print", "(", "\"ERROR:please specify an output path\"", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# config the logger ", "\n", "", "logger", "=", "setup_logger", "(", "\"CDNet_Search\"", ",", "output_dir", ",", "0", ",", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", "\n", "\n", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "if", "use_gpu", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with GPU: {}\"", ".", "format", "(", "cfg", ".", "MODEL", ".", "DEVICE_IDS", ")", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"Train with CPU\"", ")", "\n", "\n", "", "if", "use_gpu", ":", "\n", "\t\t", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "cfg", ".", "MODEL", ".", "DEVICE_IDS", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# print the configuration", "\n", "logger", ".", "info", "(", "\"running with config:\\n{}\"", ".", "format", "(", "cfg", ")", ")", "\n", "\n", "# init rand seed ", "\n", "seed", "=", "cfg", ".", "SOLVER", ".", "SEED", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "use_gpu", ":", "\n", "\t\t", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "", "", "def", "train", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train": [[82, 286], ["data.darts_make_data_loader", "cdnet_search.CDNetwork", "optims.make_optimizer", "optims.make_lr_scheduler", "optims.darts_make_loss", "model.to._set_loss", "architect.Architect", "len", "openpyxl.Workbook", "sheet.append", "logging.getLogger", "utils.utils.count_parameters", "values.append", "values.append", "logging.getLogger.info", "logging.getLogger.info", "range", "values.insert", "sheet.append", "xl.Workbook.save", "logging.getLogger.info", "os.path.exists", "os.makedirs", "format", "RunningAverageMeter", "RunningAverageMeter", "AverageMeter", "AverageMeter", "model.to.to", "logging.getLogger.info", "model.to.load_pretrained_model", "logging.getLogger.info", "model.to.kaiming_init_", "optims.make_lr_scheduler.step", "architect.Architect.lr_scheduler.step", "model.to.train", "avg_loss.reset", "avg_acc.reset", "avg_time.reset", "enumerate", "logging.getLogger.info", "global_avg_time.update", "format", "configs._C.OUTPUT.LOG_NAME.split", "optims.make_lr_scheduler.get_lr", "time.time", "next", "architect.Architect.step", "optims.make_optimizer.zero_grad", "model.to.", "train_search.compute_loss_acc", "loss.backward", "optims.make_optimizer.step", "time.time", "avg_time.update", "avg_loss.update", "avg_acc.update", "model.to.eval", "utils.R1_mAP", "torch.save", "torch.save", "model.to._parse_genotype", "logging.getLogger.info", "iter", "imgs.to.to", "labels.to.to", "val_imgs.to.to", "val_labels.to.to", "torch.utils.clip_grad_norm", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "enumerate", "utils.R1_mAP.compute", "logging.getLogger.info", "logging.getLogger.info", "model.to.state_dict", "torch.save", "torch.save", "model.to._parse_genotype", "logging.getLogger.info", "model.to.parameters", "model.to.", "utils.R1_mAP.update", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "change.append", "values.extend", "model.to.state_dict", "imgs.to.to", "format", "format"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_optimizer", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_lr_scheduler", "home.repos.pwc.inspect_result.solicucu_ReID.loss.__init__.darts_make_loss", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._set_loss", "home.repos.pwc.inspect_result.solicucu_ReID.backbone.osnet.count_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.load_pretrained_model", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.kaiming_init_", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.reset", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.WarmupCosAnnLR.get_lr", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.compute_loss_acc", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._parse_genotype", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.compute", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._parse_genotype", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update"], ["\n", "\t", "use_gpu", "=", "cfg", ".", "MODEL", ".", "DEVICE", "==", "\"cuda\"", "\n", "# 1\u3001make dataloader ", "\n", "train_loader", ",", "val_loader", ",", "test_loader", ",", "num_query", ",", "num_class", "=", "darts_make_data_loader", "(", "cfg", ")", "\n", "# print(num_query, num_class)", "\n", "\n", "# 2\u3001make model", "\n", "model", "=", "CDNetwork", "(", "num_class", ",", "cfg", ")", "\n", "# tensor = torch.randn(2, 3, 256, 128)", "\n", "# res = model(tensor)", "\n", "# print(res[0].size()) [2, 751]", "\n", "\n", "# 3\u3001make optimizer", "\n", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "arch_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "_arch_parameters", "(", ")", ",", "\n", "lr", "=", "cfg", ".", "SOLVER", ".", "ARCH_LR", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "ARCH_WEIGHT_DECAY", ")", "\n", "\n", "# 4\u3001make lr scheduler", "\n", "lr_scheduler", "=", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "# make lr scheduler", "\n", "arch_lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "arch_optimizer", ",", "[", "80", ",", "160", "]", ",", "0.1", ")", "\n", "\n", "# 5\u3001make loss ", "\n", "loss_fn", "=", "darts_make_loss", "(", "cfg", ")", "\n", "\n", "\n", "# get parameters", "\n", "device", "=", "cfg", ".", "MODEL", ".", "DEVICE", "\n", "use_gpu", "=", "device", "==", "\"cuda\"", "\n", "pretrained", "=", "cfg", ".", "MODEL", ".", "PRETRAINED", "!=", "\"\"", "\n", "\n", "log_period", "=", "cfg", ".", "OUTPUT", ".", "LOG_PERIOD", "\n", "ckpt_period", "=", "cfg", ".", "OUTPUT", ".", "CKPT_PERIOD", "\n", "eval_period", "=", "cfg", ".", "OUTPUT", ".", "EVAL_PERIOD", "\n", "output_dir", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "\n", "ckpt_save_path", "=", "output_dir", "+", "cfg", ".", "OUTPUT", ".", "CKPT_DIRS", "\n", "\n", "epochs", "=", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", "\n", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "grad_clip", "=", "cfg", ".", "SOLVER", ".", "GRAD_CLIP", "\n", "\n", "batch_num", "=", "len", "(", "train_loader", ")", "\n", "log_iters", "=", "batch_num", "//", "log_period", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ckpt_save_path", ")", ":", "\n", "\t\t", "os", ".", "makedirs", "(", "ckpt_save_path", ")", "\n", "\n", "# create *_result.xlsx", "\n", "# save the result for analyze", "\n", "", "name", "=", "(", "cfg", ".", "OUTPUT", ".", "LOG_NAME", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".xlsx\"", "\n", "result_path", "=", "cfg", ".", "OUTPUT", ".", "DIRS", "+", "name", "\n", "\n", "wb", "=", "xl", ".", "Workbook", "(", ")", "\n", "sheet", "=", "wb", ".", "worksheets", "[", "0", "]", "\n", "titles", "=", "[", "'size/M'", ",", "'speed/ms'", ",", "'final_planes'", ",", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", ",", "\n", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", ",", "'acc'", ",", "'mAP'", ",", "'r1'", ",", "'r5'", ",", "'r10'", ",", "'loss'", "]", "\n", "sheet", ".", "append", "(", "titles", ")", "\n", "check_epochs", "=", "[", "40", ",", "80", ",", "120", ",", "160", ",", "200", ",", "240", ",", "280", ",", "320", ",", "360", ",", "epochs", "]", "\n", "values", "=", "[", "]", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "\"CDNet_Search.train\"", ")", "\n", "size", "=", "count_parameters", "(", "model", ")", "\n", "values", ".", "append", "(", "format", "(", "size", ",", "'.2f'", ")", ")", "\n", "values", ".", "append", "(", "model", ".", "final_planes", ")", "\n", "\n", "logger", ".", "info", "(", "\"the param number of the model is {:.2f} M\"", ".", "format", "(", "size", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"Starting Search CDNetwork\"", ")", "\n", "\n", "best_mAP", ",", "best_r1", "=", "0.", ",", "0.", "\n", "is_best", "=", "False", "\n", "avg_loss", ",", "avg_acc", "=", "RunningAverageMeter", "(", ")", ",", "RunningAverageMeter", "(", ")", "\n", "avg_time", ",", "global_avg_time", "=", "AverageMeter", "(", ")", ",", "AverageMeter", "(", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "pretrained", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"load self pretrained chekpoint to init\"", ")", "\n", "model", ".", "load_pretrained_model", "(", "cfg", ".", "MODEL", ".", "PRETRAINED", ")", "\n", "", "else", ":", "\n", "\t\t", "logger", ".", "info", "(", "\"use kaiming init to init the model\"", ")", "\n", "model", ".", "kaiming_init_", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "\t\t", "lr_scheduler", ".", "step", "(", ")", "\n", "lr", "=", "lr_scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "# architect lr.step", "\n", "arch_lr_scheduler", ".", "step", "(", ")", "\n", "\n", "# if save epoch_num k, then run k+1 epoch next", "\n", "if", "pretrained", "and", "epoch", "<", "model", ".", "start_epoch", ":", "\n", "\t\t\t", "continue", "\n", "\n", "# print(epoch)", "\n", "# exit(1)", "\n", "", "model", ".", "train", "(", ")", "\n", "avg_loss", ".", "reset", "(", ")", "\n", "avg_acc", ".", "reset", "(", ")", "\n", "avg_time", ".", "reset", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "\t\t\t", "t0", "=", "time", ".", "time", "(", ")", "\n", "imgs", ",", "labels", "=", "batch", "\n", "val_imgs", ",", "val_labels", "=", "next", "(", "iter", "(", "val_loader", ")", ")", "\n", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "val_imgs", "=", "val_imgs", ".", "to", "(", "device", ")", "\n", "val_labels", "=", "val_labels", ".", "to", "(", "device", ")", "\n", "\n", "# 1\u3001 update the weights", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "res", "=", "model", "(", "imgs", ")", "\n", "\n", "# loss = loss_fn(scores, feats, labels)", "\n", "loss", ",", "acc", "=", "compute_loss_acc", "(", "res", ",", "labels", ",", "loss_fn", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "grad_clip", "!=", "0", ":", "\n", "\t\t\t\t", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "grad_clip", ")", "\n", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "# 2\u3001update the alpha", "\n", "arch_optimizer", ".", "zero_grad", "(", ")", "\n", "res", "=", "model", "(", "val_imgs", ")", "\n", "\n", "val_loss", ",", "val_acc", "=", "compute_loss_acc", "(", "res", ",", "val_labels", ",", "loss_fn", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "arch_optimizer", ".", "step", "(", ")", "\n", "\n", "# compute the acc ", "\n", "# acc = (scores.max(1)[1] == labels).float().mean()", "\n", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "avg_time", ".", "update", "(", "(", "t1", "-", "t0", ")", "/", "batch_size", ")", "\n", "avg_loss", ".", "update", "(", "loss", ")", "\n", "avg_acc", ".", "update", "(", "acc", ")", "\n", "\n", "# log info", "\n", "if", "(", "i", "+", "1", ")", "%", "log_iters", "==", "0", ":", "\n", "\t\t\t\t", "logger", ".", "info", "(", "\"epoch {}: {}/{} with loss is {:.5f} and acc is {:.3f}\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "i", "+", "1", ",", "batch_num", ",", "avg_loss", ".", "avg", ",", "avg_acc", ".", "avg", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"end epochs {}/{} with lr: {:.5f} and avg_time is: {:.3f} ms\"", ".", "format", "(", "epoch", "+", "1", ",", "epochs", ",", "lr", ",", "avg_time", ".", "avg", "*", "1000", ")", ")", "\n", "global_avg_time", ".", "update", "(", "avg_time", ".", "avg", ")", "\n", "\n", "# test the model", "\n", "if", "(", "epoch", "+", "1", ")", "%", "eval_period", "==", "0", "or", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\n", "\t\t\t", "model", ".", "eval", "(", ")", "\n", "metrics", "=", "R1_mAP", "(", "num_query", ",", "use_gpu", "=", "use_gpu", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "for", "vi", ",", "batch", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "# break", "\n", "# print(len(batch))", "\n", "\t\t\t\t\t", "imgs", ",", "labels", ",", "camids", "=", "batch", "\n", "if", "use_gpu", ":", "\n", "\t\t\t\t\t\t", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "\n", "", "feats", "=", "model", "(", "imgs", ")", "\n", "metrics", ".", "update", "(", "(", "feats", ",", "labels", ",", "camids", ")", ")", "\n", "\n", "#compute cmc and mAP", "\n", "", "cmc", ",", "mAP", "=", "metrics", ".", "compute", "(", ")", "\n", "logger", ".", "info", "(", "\"validation results at epoch {}\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"mAP:{:2%}\"", ".", "format", "(", "mAP", ")", ")", "\n", "for", "r", "in", "[", "1", ",", "5", ",", "10", "]", ":", "\n", "\t\t\t\t\t", "logger", ".", "info", "(", "\"CMC curve, Rank-{:<3}:{:.2%}\"", ".", "format", "(", "r", ",", "cmc", "[", "r", "-", "1", "]", ")", ")", "\n", "\n", "# determine whether current model is the best", "\n", "", "if", "mAP", ">", "best_mAP", ":", "\n", "\t\t\t\t\t", "is_best", "=", "True", "\n", "best_mAP", "=", "mAP", "\n", "logger", ".", "info", "(", "\"Get a new best mAP\"", ")", "\n", "", "if", "cmc", "[", "0", "]", ">", "best_r1", ":", "\n", "\t\t\t\t\t", "is_best", "=", "True", "\n", "best_r1", "=", "cmc", "[", "0", "]", "\n", "logger", ".", "info", "(", "\"Get a new best r1\"", ")", "\n", "\n", "# add the result to sheet", "\n", "", "if", "(", "epoch", "+", "1", ")", "in", "check_epochs", ":", "\n", "\t\t\t\t\t", "val", "=", "[", "avg_acc", ".", "avg", ",", "mAP", ",", "cmc", "[", "0", "]", ",", "cmc", "[", "4", "]", ",", "cmc", "[", "9", "]", "]", "\n", "change", "=", "[", "format", "(", "v", "*", "100", ",", "'.2f'", ")", "for", "v", "in", "val", "]", "\n", "change", ".", "append", "(", "format", "(", "avg_loss", ".", "avg", ",", "'.3f'", ")", ")", "\n", "values", ".", "extend", "(", "change", ")", "\n", "\n", "# whether to save the model", "\n", "", "", "", "if", "(", "epoch", "+", "1", ")", "%", "ckpt_period", "==", "0", "or", "is_best", ":", "\n", "\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"checkpoint_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "model", ".", "_parse_genotype", "(", "file", "=", "ckpt_save_path", "+", "\"genotype_{}.json\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"checkpoint {} was saved\"", ".", "format", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "if", "is_best", ":", "\n", "\t\t\t\t", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_save_path", "+", "\"best_ckpt.pth\"", ")", "\n", "model", ".", "_parse_genotype", "(", "file", "=", "ckpt_save_path", "+", "\"best_genotype.json\"", ")", "\n", "logger", ".", "info", "(", "\"best_checkpoint was saved\"", ")", "\n", "is_best", "=", "False", "\n", "# exit(1)", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.main": [[287, 290], ["train_search.set_config", "train_search.train"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.set_config", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.train_search.train"], ["", "", "", "values", ".", "insert", "(", "1", ",", "format", "(", "global_avg_time", ".", "avg", "*", "1000", ",", "'.2f'", ")", ")", "\n", "sheet", ".", "append", "(", "values", ")", "\n", "wb", ".", "save", "(", "result_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.__init__": [[18, 26], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "architect.Architect.model._arch_parameters"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters"], ["\t", "def", "__init__", "(", "self", ",", "model", ",", "args", ")", ":", "\n", "\t\t", "self", ".", "network_momentum", "=", "args", ".", "SOLVER", ".", "MOMENTUM", "\n", "self", ".", "network_weight_decay", "=", "args", ".", "SOLVER", ".", "WEIGHT_DECAY", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "gpu", "=", "args", ".", "MODEL", ".", "DEVICE", "==", "'cuda'", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "_arch_parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "SOLVER", ".", "ARCH_LR", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ",", "weight_decay", "=", "args", ".", "SOLVER", ".", "ARCH_WEIGHT_DECAY", ")", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "optimizer", ",", "[", "40", ",", "80", "]", ",", "0.1", ")", "\n", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step": [[37, 47], ["architect.Architect.optimizer.zero_grad", "architect.Architect.optimizer.step", "architect.Architect._backward_step_unrolled", "architect.Architect._backward_step"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect.step", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._backward_step_unrolled", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._backward_step"], ["def", "step", "(", "self", ",", "train_input", ",", "train_label", ",", "val_input", ",", "val_label", ",", "eta", ",", "network_optimizer", ",", "unrolled", ")", ":", "\n", "\t\t", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "if", "unrolled", ":", "\n", "\t\t\t", "self", ".", "_backward_step_unrolled", "(", "train_input", ",", "train_label", ",", "val_input", ",", "val_label", ",", "eta", ",", "network_optimizer", ")", "\n", "", "else", ":", "\n", "# no unrolled, compute dalpha directly", "\n", "\t\t\t", "self", ".", "_backward_step", "(", "val_input", ",", "val_label", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._backward_step_unrolled": [[48, 83], ["architect.Architect._compute_unrolled_model", "architect.Architect._loss", "architect.Architect._loss.backward", "architect.Architect._hessian_vector_prodcut", "zip", "zip", "g.data.sub_", "architect.Architect.model._arch_parameters", "architect.Architect._arch_parameters", "architect.Architect.parameters", "alpha.grad.data.copy_"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._compute_unrolled_model", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._loss", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._hessian_vector_prodcut", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters"], ["", "def", "_backward_step_unrolled", "(", "self", ",", "train_input", ",", "train_label", ",", "val_input", ",", "val_label", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "# formula 6: d\u03b1Lval(w',\u03b1) \uff0cwhere w' = w \u2212 \u03be*dwLtrain(w, \u03b1)", "\n", "# in other words, compute d\u03b1 after the model is update by (train_input, train_label)", "\n", "\n", "# create a new model to update w, the old model will be used later", "\n", "\t\t", "unrolled_model", "=", "self", ".", "_compute_unrolled_model", "(", "train_input", ",", "train_label", ",", "eta", ",", "network_optimizer", ")", "\n", "\n", "val_loss", "=", "unrolled_model", ".", "_loss", "(", "val_input", ",", "val_label", ")", "\n", "val_loss", ".", "backward", "(", ")", "\n", "\n", "# compute  d\u03b1Lval(w',\u03b1)", "\n", "dalpha", "=", "[", "v", ".", "grad", "for", "v", "in", "unrolled_model", ".", "_arch_parameters", "(", ")", "]", "\n", "\n", "# compute dw'(Lval(w',\u03b1)) # new_w is w'", "\n", "dnew_w", "=", "[", "v", ".", "grad", ".", "data", "for", "v", "in", "unrolled_model", ".", "parameters", "(", ")", "]", "\n", "\n", "# compute formula 8:", "\n", "# (d\u03b1Ltrain(w+,\u03b1)-d\u03b1Ltrain(w-,\u03b1))/(2*epsilon) , where w+ = w+dw'Lval(w',\u03b1)*epsilon , w- = w-dw'Lval(w',\u03b1)*epsilon", "\n", "\n", "implicit_grads", "=", "self", ".", "_hessian_vector_prodcut", "(", "dnew_w", ",", "train_input", ",", "train_label", ")", "\n", "\n", "# formula 7: d\u03b1Lval(w',\u03b1)-(d\u03b1Ltrain(w+,\u03b1)-d\u03b1Ltrain(w-,\u03b1))/(2*epsilon)", "\n", "for", "g", ",", "ig", "in", "zip", "(", "dalpha", ",", "implicit_grads", ")", ":", "\n", "\t\t\t", "g", ".", "data", ".", "sub_", "(", "eta", ",", "ig", ".", "data", ")", "\n", "\n", "# update dalpha of self.model", "\n", "# note that here alpha is from self.model, dalpha is from unrolled model", "\n", "", "for", "alpha", ",", "dalpha", "in", "zip", "(", "self", ".", "model", ".", "_arch_parameters", "(", ")", ",", "dalpha", ")", ":", "\n", "\n", "\t\t\t", "if", "alpha", ".", "grad", "is", "None", ":", "\n", "\t\t\t\t", "alpha", ".", "grad", "=", "dalpha", ".", "data", "\n", "", "else", ":", "\n", "# ?? why not alpha = alpha - \u03b7 * dalpha  but directly copy", "\n", "# because we just compute the dalpha, upper formula computed by self.optimizer", "\n", "\t\t\t\t", "alpha", ".", "grad", ".", "data", ".", "copy_", "(", "dalpha", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._compute_unrolled_model": [[84, 120], ["architect.Architect.model._loss", "w.sub", "architect.Architect._construct_updated_model", "architect.concat", "concat().mul", "architect.Architect.model.parameters", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "architect.concat", "architect.concat", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "architect.Architect.model.parameters", "architect.Architect.model.parameters"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._loss", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._construct_updated_model", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.concat", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.concat", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.concat"], ["", "", "", "def", "_compute_unrolled_model", "(", "self", ",", "train_input", ",", "train_label", ",", "eta", ",", "network_optimizer", ")", ":", "\n", "\n", "\t\t", "loss", "=", "self", ".", "model", ".", "_loss", "(", "train_input", ",", "train_label", ")", "\n", "# loss.backward() # compute the gradient", "\n", "\n", "w", "=", "concat", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "data", "\n", "\n", "# compute moment: v = old_v * momentum", "\n", "try", ":", "\n", "\t\t\t", "moment", "=", "concat", "(", "network_optimizer", ".", "state", "[", "v", "]", "[", "'momentum_buffer'", "]", "for", "v", "in", "self", ".", "model", ".", "parameters", "(", ")", ")", ".", "mul", "(", "self", ".", "network_momentum", ")", "\n", "", "except", ":", "\n", "# first time to use moment, init with zeros", "\n", "\t\t\t", "moment", "=", "torch", ".", "zeros_like", "(", "w", ")", "\n", "", "\"\"\"\n\t\tres = torch.autograd.grad(loss, self.model.parameters(), allow_unused = True)\n\t\t# print(res[0].size())# 741\n\t\t\n\t\tfor (name, _), value in zip(self.model.named_parameters(),res):\n\t\t\tif value is not None:\n\t\t\t\tlogger.info(\"{}, size:{}\".format(name,value.size()))\n\t\t\telse:\n\t\t\t\tlogger.info(\"{}, None\".format(name))\n\t\texit(1)\n\t\t\"\"\"", "\n", "\"\"\"\n\t\tfor name, value in self.model.named_parameters():\n\t\t\tlogger.info(\"name:{}, size:{}\".format(name, value.size()))\n\t\t\"\"\"", "\n", "\n", "dw", "=", "concat", "(", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "parameters", "(", ")", ",", "allow_unused", "=", "False", ")", ")", ".", "data", "+", "w", "*", "self", ".", "network_weight_decay", "\n", "\n", "new_w", "=", "w", ".", "sub", "(", "eta", ",", "moment", "+", "dw", ")", "\n", "\n", "unrolled_model", "=", "self", ".", "_construct_updated_model", "(", "new_w", ")", "\n", "\n", "return", "unrolled_model", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._construct_updated_model": [[121, 142], ["architect.Architect.model.new", "architect.Architect.model.state_dict", "architect.Architect.model.named_parameters", "architect.Architect.update", "architect.Architect.load_state_dict", "numpy.prod", "w[].view", "len", "architect.Architect.cuda", "v.size", "v.size"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.new", "home.repos.pwc.inspect_result.solicucu_ReID.utils.reid_metic.R1_mAP.update"], ["", "def", "_construct_updated_model", "(", "self", ",", "w", ")", ":", "\n", "\n", "\t\t", "model_new", "=", "self", ".", "model", ".", "new", "(", ")", "\n", "\n", "model_dict", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "\n", "params", ",", "offset", "=", "{", "}", ",", "0", "\n", "for", "name", ",", "v", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "\t\t\t", "lens", "=", "np", ".", "prod", "(", "v", ".", "size", "(", ")", ")", "\n", "# reshape as a tensor", "\n", "params", "[", "name", "]", "=", "w", "[", "offset", ":", "offset", "+", "lens", "]", ".", "view", "(", "v", ".", "size", "(", ")", ")", "\n", "offset", "+=", "lens", "\n", "\n", "", "assert", "offset", "==", "len", "(", "w", ")", "\n", "model_dict", ".", "update", "(", "params", ")", "\n", "# load param by state_dict", "\n", "model_new", ".", "load_state_dict", "(", "model_dict", ")", "\n", "if", "self", ".", "gpu", ":", "\n", "\t\t\t", "return", "model_new", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "return", "model_new", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._hessian_vector_prodcut": [[145, 170], ["zip", "architect.Architect.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "architect.Architect.model._loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "zip", "concat().norm", "architect.Architect.model.parameters", "p.data.add_", "architect.Architect.model._arch_parameters", "architect.Architect.model.parameters", "p.data.sub_", "architect.Architect.model._arch_parameters", "architect.Architect.model.parameters", "p.data.add_", "zip", "architect.concat"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._loss", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._loss", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._arch_parameters", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.concat"], ["", "", "def", "_hessian_vector_prodcut", "(", "self", ",", "vector", ",", "train_input", ",", "train_label", ",", "r", "=", "1e-2", ")", ":", "\n", "\n", "# vector = dw'Lval(w',\u03b1)", "\n", "# compute epsilon", "\n", "\t\t", "eps", "=", "r", "/", "concat", "(", "vector", ")", ".", "norm", "(", ")", "# norm default is 2-order  res = np.sqrt(sum(pow(item,2))", "\n", "\n", "# d\u03b1Ltrain(w+,\u03b1)", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "\t\t\t", "p", ".", "data", ".", "add_", "(", "eps", ",", "v", ")", "\n", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "train_input", ",", "train_label", ")", "\n", "grad_p", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "_arch_parameters", "(", ")", ")", "\n", "\n", "# d\u03b1Ltrain(w-,\u03b1) w- = w + dw'Lval(w',\u03b1)*epsilon - 2 * dw'Lval(w',\u03b1)*epsilon", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "\t\t\t", "p", ".", "data", ".", "sub_", "(", "2", "*", "eps", ",", "v", ")", "\n", "\n", "", "loss", "=", "self", ".", "model", ".", "_loss", "(", "train_input", ",", "train_label", ")", "\n", "grad_n", "=", "torch", ".", "autograd", ".", "grad", "(", "loss", ",", "self", ".", "model", ".", "_arch_parameters", "(", ")", ")", "\n", "\n", "# restore the model from w- to w ", "\n", "for", "p", ",", "v", "in", "zip", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "vector", ")", ":", "\n", "\t\t\t", "p", ".", "data", ".", "add_", "(", "eps", ",", "v", ")", "\n", "\n", "", "return", "[", "(", "x", "-", "y", ")", ".", "div_", "(", "2", "*", "eps", ")", "for", "x", ",", "y", "in", "zip", "(", "grad_p", ",", "grad_n", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.Architect._backward_step": [[173, 176], ["architect.Architect.model._loss", "architect.Architect.backward"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork._loss"], ["", "def", "_backward_step", "(", "self", ",", "val_input", ",", "val_label", ")", ":", "\n", "\t\t", "loss", "=", "self", ".", "model", ".", "_loss", "(", "val_input", ",", "val_label", ")", "\n", "loss", ".", "backward", "(", ")", "# compute the gradient with regard to all  ", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.architect.concat": [[13, 15], ["torch.cat", "torch.cat", "x.view"], "function", ["None"], ["def", "concat", "(", "tensors", ")", ":", "\n", "\t", "return", "torch", ".", "cat", "(", "[", "x", ".", "view", "(", "-", "1", ")", "for", "x", "in", "tensors", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.cifar.RandomErasing.__init__": [[28, 35], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.04", ",", "r", "=", "0.3", ",", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ")", ":", "\n", "\n", "\t\t", "self", ".", "prob", "=", "probability", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "mean", "=", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.cifar.RandomErasing.__call__": [[36, 71], ["img.size", "range", "random.uniform", "random.uniform", "random.uniform", "int", "int", "round", "round", "random.randint", "random.randint", "math.sqrt", "math.sqrt", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "# if bigger than self.prob,no need to erase", "\n", "\t\t", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "prob", ":", "\n", "\t\t\t", "return", "img", "\n", "# get the image height and width", "\n", "", "ic", ",", "ih", ",", "iw", "=", "img", ".", "size", "(", ")", "\n", "area", "=", "ih", "*", "iw", "\n", "#try 100 times to produce proper region", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "\n", "\t\t\t", "erase_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "\n", "\n", "#the ratio is range in (0.3, 1/0.3)", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r", ",", "1.", "/", "self", ".", "r", ")", "\n", "\n", "#compute w and h", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "erase_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "erase_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "#confirm the both h and w is less than ih and iw respectively", "\n", "if", "h", "<", "ih", "and", "w", "<", "iw", ":", "\n", "# random produe the left coner for the region to be rease", "\n", "\t\t\t\t", "h1", "=", "random", ".", "randint", "(", "0", ",", "ih", "-", "h", ")", "\n", "w1", "=", "random", ".", "randint", "(", "0", ",", "iw", "-", "w", ")", "\n", "\n", "if", "ic", "==", "3", ":", "\n", "\t\t\t\t\t", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "\t\t\t\t\t\t", "img", "[", "i", ",", "h1", ":", "h1", "+", "h", ",", "w1", ":", "w1", "+", "w", "]", "=", "self", ".", "mean", "[", "i", "]", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t", "img", "[", "0", ",", "h1", ":", "h1", "+", "h", ",", "w1", ":", "w1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "\n", "", "return", "img", "\n", "#if faile to erase image", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.cifar.CUTOUT.__init__": [[74, 76], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "\t\t", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.cifar.CUTOUT.__call__": [[77, 95], ["numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\t\t", "h", ",", "w", "=", "img", ".", "size", "(", "1", ")", ",", "img", ".", "size", "(", "2", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "# produce the center point to be cutout", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "# get the upper left and lower right corner", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "# expand as img shape", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "*=", "mask", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.cifar.ImageDataset.__init__": [[160, 164], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "dataset", ",", "transform", "=", "None", ")", ":", "\n", "\n", "\t\t", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.cifar.ImageDataset.__len__": [[165, 168], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\n", "\t\t", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.cifar.ImageDataset.__getitem__": [[169, 180], ["cifar.ImageDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "# img_path, cid = self.dataset[index]", "\n", "# img = read_image(img_path)", "\n", "# follow is for the img is PIL format ", "\n", "\t\t", "img", ",", "cid", "=", "self", ".", "dataset", "[", "index", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "\t\t\t", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "cid", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.cifar.get_transforms": [[96, 133], ["torchvision.transforms.Resize", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.Pad", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "lists.extend", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "TypeError", "cifar.CUTOUT", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "", "def", "get_transforms", "(", "name", ",", "types", "=", "'train'", ",", "cutout", "=", "0", ",", "size", "=", "[", "32", ",", "32", "]", ")", ":", "\n", "\n", "\t", "if", "name", "==", "'cifar10'", ":", "\n", "\t\t", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "125.3", ",", "123.0", ",", "113.9", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "63.0", ",", "62.1", ",", "66.7", "]", "]", "\n", "\n", "", "elif", "name", "==", "'cifar100'", "or", "name", "==", "'cifar100_combine'", ":", "\n", "\t\t", "mean", "=", "[", "x", "/", "255", "for", "x", "in", "[", "129.3", ",", "124.1", ",", "112.4", "]", "]", "\n", "std", "=", "[", "x", "/", "255", "for", "x", "in", "[", "68.2", ",", "65.4", ",", "70.4", "]", "]", "\n", "\n", "", "else", ":", "\n", "\t\t", "raise", "TypeError", "(", "\"unkonw dataset: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "# data Augmentation", "\n", "", "lists", "=", "[", "\n", "transforms", ".", "Resize", "(", "size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "Pad", "(", "4", ")", ",", "\n", "# transforms.RandomCrop(64, padding=4), ", "\n", "transforms", ".", "RandomCrop", "(", "size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", "\n", "if", "cutout", ">", "0", ":", "\n", "\t\t", "lists", ".", "extend", "(", "[", "CUTOUT", "(", "cutout", ")", "]", ")", "\n", "# lists.extend([RandomErasing()])", "\n", "\n", "", "data_transforms", "=", "{", "\n", "'train'", ":", "transforms", ".", "Compose", "(", "lists", ")", ",", "\n", "'test'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "\n", "]", ")", "\n", "}", "\n", "\n", "return", "data_transforms", "[", "types", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.cifar.read_image": [[141, 154], ["os.path.exists", "IOError", "PIL.Image.open().convert", "logger.info", "PIL.Image.open"], "function", ["None"], ["def", "read_image", "(", "img_path", ")", ":", "\n", "\n", "\t", "got_img", "=", "False", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "img_path", ")", ":", "\n", "\t\t", "raise", "IOError", "(", "\"{} doses not exist\"", ".", "format", "(", "img_path", ")", ")", "\n", "", "while", "not", "got_img", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "got_img", "=", "True", "\n", "", "except", "IOError", ":", "\n", "\t\t\t", "logger", ".", "info", "(", "\"IOErro incurred when reading {}\"", ".", "format", "(", "img_path", ")", ")", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.cifar.make_data_loader_by_folder": [[181, 209], ["cifar.get_transforms", "cifar.get_transforms", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.data.cifar.get_transforms", "home.repos.pwc.inspect_result.solicucu_ReID.data.cifar.get_transforms"], ["", "", "def", "make_data_loader_by_folder", "(", "cfg", ",", "is_val", "=", "False", ")", ":", "\n", "\n", "\n", "\t", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", "\n", "\n", "name", "=", "cfg", ".", "DATA", ".", "DATASET", "\n", "cutout", "=", "cfg", ".", "DATA", ".", "CUTOUT", "\n", "size", "=", "cfg", ".", "DATA", ".", "IMAGE_SIZE", "\n", "# name only in [cifar10, cifar100]", "\n", "assert", "name", "in", "[", "'cifar10'", ",", "'cifar100'", ",", "'cifar100_combine'", "]", ",", "\"not know dataset {}\"", ".", "format", "(", "name", ")", "\n", "\n", "data_path", "=", "cfg", ".", "DATA", ".", "DATASET_DIR", "+", "\"{}/\"", ".", "format", "(", "name", ")", "\n", "train_transform", "=", "get_transforms", "(", "name", ",", "\"train\"", ",", "cutout", ",", "size", "=", "size", ")", "\n", "test_transform", "=", "get_transforms", "(", "name", ",", "'test'", ",", "size", "=", "size", ")", "\n", "\n", "if", "is_val", ":", "\n", "\t\t", "train_loader", "=", "None", "\n", "", "else", ":", "\n", "\t\t", "train_set", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'train'", ")", ",", "train_transform", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "", "test_set", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'test'", ")", ",", "test_transform", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "num_class", "=", "10", "if", "name", "==", "'cifar10'", "else", "100", "\n", "\n", "return", "train_loader", ",", "test_loader", ",", "num_class", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.cifar.combine_cifar100": [[216, 231], ["os.listdir", "print", "os.listdir", "os.listdir", "os.path.exists", "os.makedirs", "shutil.copyfile"], "function", ["None"], ["def", "combine_cifar100", "(", "origin_path", ",", "target_path", ")", ":", "\n", "\t", "names", "=", "os", ".", "listdir", "(", "origin_path", ")", "\n", "for", "name", "in", "names", ":", "\n", "\t\t", "class_names", "=", "os", ".", "listdir", "(", "origin_path", "+", "name", ")", "\n", "for", "class_name", "in", "class_names", ":", "\n", "\t\t\t", "cur_dir", "=", "origin_path", "+", "\"{}/{}/\"", ".", "format", "(", "name", ",", "class_name", ")", "\n", "new_class_dir", "=", "target_path", "+", "\"{}_{}/\"", ".", "format", "(", "name", ",", "class_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "new_class_dir", ")", ":", "\n", "\t\t\t\t", "os", ".", "makedirs", "(", "new_class_dir", ")", "\n", "", "files", "=", "os", ".", "listdir", "(", "cur_dir", ")", "\n", "for", "file", "in", "files", ":", "\n", "\t\t\t\t", "src_file", "=", "cur_dir", "+", "file", "\n", "target_file", "=", "new_class_dir", "+", "file", "\n", "shutil", ".", "copyfile", "(", "src_file", ",", "target_file", ")", "\n", "", "", "", "print", "(", "\"end of copying\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.imagenet.ImageDataset.__init__": [[44, 48], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "dataset", ",", "transform", "=", "None", ")", ":", "\n", "\n", "\t\t", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.imagenet.ImageDataset.__len__": [[49, 52], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\n", "\t\t", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.imagenet.ImageDataset.__getitem__": [[53, 62], ["imagenet.read_image", "imagenet.ImageDataset.transform"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.read_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "\t\t", "img_path", ",", "cid", "=", "self", ".", "dataset", "[", "index", "]", "\n", "img", "=", "read_image", "(", "img_path", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "\t\t\t", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "cid", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.imagenet.read_image": [[25, 38], ["os.path.exists", "IOError", "PIL.Image.open().convert", "logger.info", "PIL.Image.open"], "function", ["None"], ["def", "read_image", "(", "img_path", ")", ":", "\n", "\n", "\t", "got_img", "=", "False", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "img_path", ")", ":", "\n", "\t\t", "raise", "IOError", "(", "\"{} doses not exist\"", ".", "format", "(", "img_path", ")", ")", "\n", "", "while", "not", "got_img", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "got_img", "=", "True", "\n", "", "except", "IOError", ":", "\n", "\t\t\t", "logger", ".", "info", "(", "\"IOErro incurred when reading {}\"", ".", "format", "(", "img_path", ")", ")", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.imagenet.make_data_loader_by_folder": [[80, 96], ["torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "os.path.join", "os.path.join"], "function", ["None"], ["def", "make_data_loader_by_folder", "(", "cfg", ",", "is_val", "=", "False", ")", ":", "\n", "\n", "\t", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", "\n", "\n", "if", "is_val", ":", "\n", "\t\t", "train_loader", "=", "None", "\n", "", "else", ":", "\n", "\t\t", "train_set", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'train'", ")", ",", "data_transforms", "[", "'train'", "]", ")", "\n", "train_loader", "=", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "", "val_set", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'val'", ")", ",", "data_transforms", "[", "'val'", "]", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.builder.make_data_loader": [[14, 51], ["transforms.build_transforms", "transforms.build_transforms", "datasets.init_dataset", "datasets.ImageDataset", "datasets.ImageDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "RuntimeError", "len", "samplers.TripletSampler"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.transforms.transforms.build_transforms", "home.repos.pwc.inspect_result.solicucu_ReID.transforms.transforms.build_transforms", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.__init__.init_dataset"], ["def", "make_data_loader", "(", "cfg", ")", ":", "\n", "\t", "train_transforms", "=", "build_transforms", "(", "cfg", ",", "is_train", "=", "True", ")", "\n", "val_transfroms", "=", "build_transforms", "(", "cfg", ",", "is_train", "=", "False", ")", "\n", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", "\n", "\n", "# init the dataset", "\n", "# get the train, val, test data in the form of list  respectively", "\n", "dataset", "=", "init_dataset", "(", "cfg", ".", "DATA", ".", "DATASET", ",", "cfg", ".", "DATA", ".", "DATASET_DIR", ")", "\n", "\n", "\n", "num_classes", "=", "dataset", ".", "num_train_pids", "\n", "# create ImageDataset ", "\n", "# it will store the data info list such as (img_path, pid, camid) and ", "\n", "# return 4-tuple(img, pid, camid, img_path) via given index (from sampler)", "\n", "train_set", "=", "ImageDataset", "(", "dataset", ".", "train", ",", "train_transforms", ")", "\n", "\n", "# create dataloader", "\n", "# 11776 samplers # sampler is used to produce the index ", "\n", "if", "cfg", ".", "DATALOADER", ".", "SAMPLER", "==", "'triplet'", ":", "\n", "\t\t", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", ",", "\n", "sampler", "=", "TripletSampler", "(", "dataset", ".", "train", ",", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", ",", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "collate_fn", "=", "train_collate_fn", "\n", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "RuntimeError", "(", "\"{} not know sampler\"", ".", "format", "(", "cfg", ".", "DATALOADER", ".", "SAMPLER", ")", ")", "\n", "\n", "\n", "", "val_set", "=", "ImageDataset", "(", "dataset", ".", "query", "+", "dataset", ".", "gallery", ",", "val_transfroms", ")", "\n", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_set", ",", "batch_size", "=", "cfg", ".", "TEST", ".", "IMGS_PER_BATCH", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "collate_fn", "=", "val_collate_fn", "\n", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "len", "(", "dataset", ".", "query", ")", ",", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.builder.make_batch_data": [[60, 86], ["transforms.build_transforms", "PIL.Image.open().convert", "transforms.build_transforms.", "re.compile", "re.compile.search().groups", "map", "img.unsqueeze.unsqueeze", "torch.cat.append", "pids.append", "camids.append", "len", "torch.cat", "os.path.exists", "IOError", "PIL.Image.open", "re.compile.search"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.transforms.transforms.build_transforms"], ["def", "make_batch_data", "(", "cfg", ",", "img_paths", ")", ":", "\n", "\t", "imgs", "=", "[", "]", "\n", "pids", "=", "[", "]", "\n", "camids", "=", "[", "]", "\n", "# \u56fe\u7247\u9884\u5904\u7406", "\n", "val_transfroms", "=", "build_transforms", "(", "cfg", ",", "is_train", "=", "False", ")", "\n", "for", "path", "in", "img_paths", ":", "\n", "# \u5224\u65ad\u56fe\u7247\u662f\u5426\u5b58\u5728", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "\t\t\t", "raise", "IOError", "(", "\"{} doses not exist\"", ".", "format", "(", "path", ")", ")", "\n", "\n", "", "img", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img", "=", "val_transfroms", "(", "img", ")", "\n", "# \u83b7\u53d6\u56fe\u7247\u7684id \u548c camid", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "res", "=", "pattern", ".", "search", "(", "path", ")", ".", "groups", "(", ")", "\n", "pid", ",", "camid", "=", "map", "(", "int", ",", "res", ")", "\n", "img", "=", "img", ".", "unsqueeze", "(", "0", ")", "\n", "imgs", ".", "append", "(", "img", ")", "\n", "pids", ".", "append", "(", "pid", ")", "\n", "camids", ".", "append", "(", "camid", ")", "\n", "\n", "", "if", "len", "(", "imgs", ")", ">", "1", ":", "\n", "\t\t", "imgs", "=", "torch", ".", "cat", "(", "imgs", ",", "dim", "=", "0", ")", "\n", "\n", "", "return", "[", "imgs", ",", "pids", ",", "camids", ",", "img_paths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.collate_batch.train_collate_fn": [[7, 12], ["zip", "torch.tensor", "torch.stack"], "function", ["None"], ["def", "train_collate_fn", "(", "batch", ")", ":", "\n", "\n", "\t", "imgs", ",", "pids", ",", "_", ",", "_", "=", "zip", "(", "*", "batch", ")", "\n", "pids", "=", "torch", ".", "tensor", "(", "pids", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "return", "torch", ".", "stack", "(", "imgs", ",", "dim", "=", "0", ")", ",", "pids", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.collate_batch.val_collate_fn": [[13, 17], ["zip", "torch.stack"], "function", ["None"], ["", "def", "val_collate_fn", "(", "batch", ")", ":", "\n", "\n", "\t", "imgs", ",", "pids", ",", "camids", ",", "_", "=", "zip", "(", "*", "batch", ")", "\n", "return", "torch", ".", "stack", "(", "imgs", ",", "dim", "=", "0", ")", ",", "pids", ",", "camids", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.data.darts_builder.build_transforms": [[15, 35], ["torchvision.Compose", "torchvision.Compose", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.Pad", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "transforms.RandomErasing", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["def", "build_transforms", "(", "is_train", "=", "False", ")", ":", "\n", "\n", "\t", "if", "is_train", ":", "\n", "\t\t", "transform", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "256", ",", "128", ")", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "T", ".", "Pad", "(", "10", ")", ",", "\n", "T", ".", "RandomCrop", "(", "(", "256", ",", "128", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", ",", "\n", "RandomErasing", "(", "probability", "=", "0.5", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "\t\t", "transform", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "(", "256", ",", "128", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "", "return", "transform", "\n", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.data.darts_builder.split_train_and_val": [[45, 126], ["collections.defaultdict", "collections.defaultdict.items", "pid_dicts[].append", "len", "range", "np.random.choice.append", "numpy.random.choice", "val_set.extend", "numpy.random.choice", "train_set.extend", "numpy.random.choice", "val_set.extend", "range", "numpy.random.choice", "val_set.extend", "train_set.extend", "darts_builder.split_train_and_val.get_list_by_index"], "function", ["None"], ["def", "split_train_and_val", "(", "data", ",", "num_instance", ")", ":", "\n", "\n", "# print(len(data)) # 12936", "\n", "# compute the number instances for each identity", "\n", "\t", "pid_dicts", "=", "defaultdict", "(", "list", ")", "\n", "\n", "\n", "for", "item", "in", "data", ":", "\n", "\t\t", "_", ",", "pid", ",", "_", "=", "item", "\n", "pid_dicts", "[", "pid", "]", ".", "append", "(", "item", ")", "\n", "", "\"\"\"\n\tsplit the data into train and val\n\trandom choose 4 instance for each pid \n\tdo not delete if the number of idenity less than 4\n\tif number > 4, rm those beyond  4 times\n\t\"\"\"", "\n", "def", "get_list_by_index", "(", "data", ",", "index", ")", ":", "\n", "\n", "\t\t", "select", "=", "[", "]", "\n", "for", "i", "in", "index", ":", "\n", "\t\t\t", "select", ".", "append", "(", "data", "[", "i", "]", ")", "\n", "", "return", "select", "\n", "\n", "", "train_set", ",", "val_set", "=", "[", "]", ",", "[", "]", "\n", "for", "key", ",", "item", "in", "pid_dicts", ".", "items", "(", ")", ":", "\n", "\t\t", "num", "=", "len", "(", "item", ")", "\n", "# random.choice just use for 1-dimension list, so we work on index", "\n", "index", "=", "range", "(", "num", ")", "\n", "if", "num", "<", "num_instance", ":", "\n", "\t\t\t", "select", "=", "np", ".", "random", ".", "choice", "(", "index", ",", "size", "=", "num_instance", ",", "replace", "=", "True", ")", "\n", "val_set", ".", "extend", "(", "get_list_by_index", "(", "item", ",", "select", ")", ")", "\n", "\n", "select", "=", "np", ".", "random", ".", "choice", "(", "index", ",", "size", "=", "num_instance", ",", "replace", "=", "True", ")", "\n", "train_set", ".", "extend", "(", "get_list_by_index", "(", "item", ",", "select", ")", ")", "\n", "\n", "", "else", ":", "\n", "\t\t\t", "num_rm", "=", "num", "%", "num_instance", "\n", "if", "num_rm", "==", "0", ":", "\n", "\t\t\t\t", "num_rm", "=", "num_instance", "\n", "", "index_rm", "=", "np", ".", "random", ".", "choice", "(", "index", ",", "size", "=", "num_rm", ",", "replace", "=", "False", ")", "\n", "val_set", ".", "extend", "(", "get_list_by_index", "(", "item", ",", "index_rm", ")", ")", "\n", "# two type to rm the item ", "\n", "if", "num_rm", "!=", "num_instance", "or", "(", "num_rm", "==", "num_instance", "and", "num", ">=", "2", "*", "num_instance", ")", ":", "\n", "# delete must from end to begin, if not so, the index will change", "\n", "\t\t\t\t", "index_rm", "=", "sorted", "(", "index_rm", ",", "reverse", "=", "True", ")", "\n", "# print(index_rm)", "\n", "for", "rm", "in", "index_rm", ":", "\n", "\t\t\t\t\t", "item", ".", "pop", "(", "rm", ")", "\n", "\n", "", "", "rest_size", "=", "num_instance", "-", "num_rm", "\n", "index", "=", "range", "(", "len", "(", "item", ")", ")", "# update the index ", "\n", "rest_index", "=", "np", ".", "random", ".", "choice", "(", "index", ",", "size", "=", "rest_size", ",", "replace", "=", "False", ")", "\n", "\n", "val_set", ".", "extend", "(", "get_list_by_index", "(", "item", ",", "rest_index", ")", ")", "\n", "train_set", ".", "extend", "(", "item", ")", "\n", "\n", "", "", "return", "train_set", ",", "val_set", "\n", "\n", "\"\"\"\n\t# construct num_pid\n\tnum_pid = {} # key is number instance, value is the number of pid \n\tfor key in pid_dicts:\n\t\tnum = len(pid_dicts[key])\n\t\tif num in num_pid:\n\t\t\tnum_pid[num] += 1\n\t\telse:\n\t\t\tnum_pid[num] = 1\n\t\"\"\"", "\n", "# show the result ", "\n", "# sorted by key default", "\n", "# for key in sorted(num_pid):", "\n", "# \tprint(key, num_pid[key])", "\n", "\"\"\" less than 8 \n\t2 3\n\t3 12\n\t4 12\n\t5 31\n\t6 24\n\t7 40\n\t8 39\n\t\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.data.darts_builder.make_data_loader": [[127, 177], ["logging.getLogger", "darts_builder.build_transforms", "darts_builder.build_transforms", "datasets.init_dataset", "darts_builder.split_train_and_val", "logging.getLogger.info", "logging.getLogger.info", "datasets.ImageDataset", "datasets.ImageDataset", "datasets.ImageDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "RuntimeError", "len", "len", "len", "samplers.TripletSampler", "samplers.TripletSampler"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.transforms.transforms.build_transforms", "home.repos.pwc.inspect_result.solicucu_ReID.transforms.transforms.build_transforms", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.__init__.init_dataset", "home.repos.pwc.inspect_result.solicucu_ReID.data.darts_builder.split_train_and_val"], ["", "def", "make_data_loader", "(", "cfg", ")", ":", "\n", "# CSNet_Search must be same can be get, name after by . can be any str", "\n", "\t", "logger", "=", "logging", ".", "getLogger", "(", "\"CDNet_Search.data\"", ")", "\n", "train_transforms", "=", "build_transforms", "(", "is_train", "=", "True", ")", "\n", "val_transforms", "=", "build_transforms", "(", ")", "\n", "\n", "num_workers", "=", "cfg", ".", "DATALOADER", ".", "NUM_WORKERS", "\n", "batch_size", "=", "cfg", ".", "SOLVER", ".", "BATCH_SIZE", "\n", "num_instance", "=", "cfg", ".", "DATALOADER", ".", "NUM_INSTANCE", "\n", "\n", "# init the dataset", "\n", "# has self.train self.query, self.gallery with item (imgpath, pid, camid)", "\n", "dataset", "=", "init_dataset", "(", "cfg", ".", "DATA", ".", "DATASET", ",", "cfg", ".", "DATA", ".", "DATASET_DIR", ")", "\n", "\n", "num_classes", "=", "dataset", ".", "num_train_pids", "\n", "# print(num_classes) 751", "\n", "\n", "train", ",", "val", "=", "split_train_and_val", "(", "dataset", ".", "train", ",", "num_instance", ")", "\n", "logger", ".", "info", "(", "\"size of train_set is {}\"", ".", "format", "(", "len", "(", "train", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"size of val_set is {}\"", ".", "format", "(", "len", "(", "val", ")", ")", ")", "\n", "\n", "# 11160 + 3004", "\n", "train_set", "=", "ImageDataset", "(", "train", ",", "train_transforms", ")", "\n", "val_set", "=", "ImageDataset", "(", "val", ",", "train_transforms", ")", "\n", "\n", "# create dataloader", "\n", "if", "cfg", ".", "DATALOADER", ".", "SAMPLER", "==", "'triplet'", ":", "\n", "\t\t", "train_loader", "=", "DataLoader", "(", "train_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "TripletSampler", "(", "train", ",", "batch_size", ",", "num_instance", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "train_collate_fn", ")", "\n", "val_loader", "=", "DataLoader", "(", "val_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "sampler", "=", "TripletSampler", "(", "val", ",", "batch_size", ",", "num_instance", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "train_collate_fn", ")", "\n", "", "else", ":", "\n", "\t\t", "raise", "RuntimeError", "(", "\"{} not know sampler\"", ".", "format", "(", "cfg", ".", "DATALOADER", ".", "SAMPLER", ")", ")", "\n", "\n", "", "test_set", "=", "ImageDataset", "(", "dataset", ".", "query", "+", "dataset", ".", "gallery", ",", "val_transforms", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_set", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "collate_fn", "=", "val_collate_fn", "\n", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", ",", "len", "(", "dataset", ".", "query", ")", ",", "num_classes", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.get_imagedata_info": [[16, 31], ["set", "set", "len", "len", "len"], "methods", ["None"], ["\t", "def", "get_imagedata_info", "(", "self", ",", "data", ")", ":", "\n", "\t\t", "pids", ",", "cams", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "_", ",", "pid", ",", "camid", "in", "data", ":", "\n", "\n", "\t\t\t", "pids", "+=", "[", "pid", "]", "\n", "cams", "+=", "[", "camid", "]", "\n", "#unique the elem", "\n", "", "pids", "=", "set", "(", "pids", ")", "\n", "cams", "=", "set", "(", "cams", ")", "\n", "\n", "num_pid", "=", "len", "(", "pids", ")", "\n", "num_cams", "=", "len", "(", "cams", ")", "\n", "num_imgs", "=", "len", "(", "data", ")", "\n", "return", "num_pid", ",", "num_imgs", ",", "num_cams", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.print_dataset_statistics": [[33, 35], ["None"], "methods", ["None"], ["", "def", "print_dataset_statistics", "(", "self", ")", ":", "\n", "\t\t", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseImageDataset.print_dataset_statistics": [[41, 52], ["base.BaseImageDataset.get_imagedata_info", "base.BaseImageDataset.get_imagedata_info", "base.BaseImageDataset.get_imagedata_info", "print", "print", "print", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.get_imagedata_info"], ["def", "print_dataset_statistics", "(", "self", ",", "train", ",", "query", ",", "gallery", ")", ":", "\n", "\t\t", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "train", ")", "\n", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "query", ")", "\n", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "gallery", ")", "\n", "\n", "print", "(", "\"Dataset statistics:\"", ")", "\n", "print", "(", "\"  -------------------------------------\"", ")", "\n", "print", "(", "\"  subset   | # ids | # images | cameras\"", ")", "\n", "print", "(", "\"  train    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_train_pids", ",", "num_train_imgs", ",", "num_train_cams", ")", ")", "\n", "print", "(", "\"  query    | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_query_pids", ",", "num_query_imgs", ",", "num_query_cams", ")", ")", "\n", "print", "(", "\"  gallery  | {:5d} | {:8d} | {:9d}\"", ".", "format", "(", "num_gallery_pids", ",", "num_gallery_imgs", ",", "num_gallery_cams", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.dukemtcm.DukeMTMC.__init__": [[19, 42], ["base.BaseImageDataset.__init__", "dukemtcm.DukeMTMC._download_data", "dukemtcm.DukeMTMC._check_before_run", "dukemtcm.DukeMTMC._process_dir", "dukemtcm.DukeMTMC._process_dir", "dukemtcm.DukeMTMC._process_dir", "dukemtcm.DukeMTMC.get_imagedata_info", "dukemtcm.DukeMTMC.get_imagedata_info", "dukemtcm.DukeMTMC.get_imagedata_info", "print", "dukemtcm.DukeMTMC.print_dataset_statistics"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.dukemtcm.DukeMTMC._download_data", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.msmt17.MSMT17._check_before_run", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseImageDataset.print_dataset_statistics"], ["\t", "def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "\n", "\t\t", "super", "(", "DukeMTMC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "root", "+", "\"dukemtmc/\"", "\n", "self", ".", "data_url", "=", "\"http://vision.cs.duke.edu/DukeMTMC/data/misc/DukeMTMC-reID.zip\"", "\n", "self", ".", "train_dir", "=", "self", ".", "dataset_dir", "+", "\"bounding_box_train/\"", "\n", "self", ".", "query_dir", "=", "self", ".", "dataset_dir", "+", "\"query/\"", "\n", "self", ".", "gallery_dir", "=", "self", ".", "dataset_dir", "+", "\"bounding_box_test/\"", "\n", "\n", "self", ".", "_download_data", "(", ")", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "\n", "self", ".", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "self", ".", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "query_dir", ")", "\n", "self", ".", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "gallery_dir", ")", "\n", "\n", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "\"=> DukeMTMC dataset is loaded\"", ")", "\n", "self", ".", "print_dataset_statistics", "(", "self", ".", "train", ",", "self", ".", "query", ",", "self", ".", "gallery", ")", "\n", "\n", "", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.dukemtcm.DukeMTMC._check_before_run": [[44, 54], ["os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError", "os.exists", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "\n", "\t\t", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "\t\t\t", "raise", "RuntimeError", "(", "\"{} is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "\t\t\t", "raise", "RuntimeError", "(", "\"{} is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "\t\t\t", "raise", "RuntimeError", "(", "\"{} is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "\t\t\t", "raise", "RuntimeError", "(", "\"{} is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.dukemtcm.DukeMTMC._download_data": [[55, 71], ["os.exists", "os.exists", "print", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "os.join", "os.join", "print", "urllib.request.urlretrieve", "print", "zipfile.ZipFile", "extractall", "extractall.close", "print", "os.basename", "os.basename"], "methods", ["None"], ["", "", "def", "_download_data", "(", "self", ")", ":", "\n", "\n", "\t\t", "if", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "\t\t\t", "print", "(", "\"the dataset has been downloaded\"", ")", "\n", "return", "\n", "", "print", "(", "\"Create directory {}\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "\n", "os", ".", "makedirs", "(", "self", ".", "dataset_dir", ")", "\n", "fpath", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "osp", ".", "basename", "(", "self", ".", "data_url", ")", ")", "\n", "print", "(", "\"Download dukemtmc dataset\"", ")", "\n", "urllib", ".", "request", ".", "urlretrieve", "(", "self", ".", "data_url", ",", "fpath", ")", "\n", "\n", "print", "(", "\"Extracting files\"", ")", "\n", "zip_ref", "=", "zipfile", ".", "ZipFile", "(", "fpath", ",", "'r'", ")", "\n", "zip_ref", "=", "extractall", "(", "self", ".", "dataset_dir", ")", "\n", "zip_ref", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.dukemtcm.DukeMTMC._process_dir": [[72, 98], ["glob.glob", "re.compile", "set", "os.join", "os.join", "map", "set.add", "map", "dataset.append", "re.compile.search().groups", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "def", "_process_dir", "(", "self", ",", "path", ",", "relabel", "=", "False", ")", ":", "\n", "\n", "\t\t", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "path", ",", "'*.jpg'", ")", ")", "\n", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "\n", "pids", "=", "set", "(", ")", "\n", "for", "path", "in", "img_paths", ":", "\n", "# change the pid and camid to int , ignore camid", "\n", "\t\t\t", "pid", ",", "_", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "path", ")", ".", "groups", "(", ")", ")", "\n", "pids", ".", "add", "(", "pid", ")", "\n", "\n", "# construct a dict with pid as key, vlaue is label", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pids", ")", "}", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "path", "in", "img_paths", ":", "\n", "\t\t\t", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "path", ")", ".", "groups", "(", ")", ")", "\n", "assert", "1", "<=", "camid", "<=", "8", "\n", "camid", "-=", "1", "# index start from 0 ", "\n", "if", "relabel", ":", "\n", "\t\t\t\t", "pid", "=", "pid2label", "[", "pid", "]", "\n", "\n", "", "dataset", ".", "append", "(", "(", "path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.imageDataset.ImageDataset.__init__": [[32, 36], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "dataset", ",", "transform", "=", "None", ")", ":", "\n", "\n", "\t\t", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.imageDataset.ImageDataset.__len__": [[37, 40], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\n", "\t\t", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.imageDataset.ImageDataset.__getitem__": [[41, 50], ["imageDataset.read_image", "imageDataset.ImageDataset.transform"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.read_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "\t\t", "img_path", ",", "pid", ",", "camid", "=", "self", ".", "dataset", "[", "index", "]", "\n", "img", "=", "read_image", "(", "img_path", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "\t\t\t", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "pid", ",", "camid", ",", "img_path", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.imageDataset.read_image": [[13, 26], ["os.exists", "IOError", "PIL.Image.open().convert", "print", "PIL.Image.open"], "function", ["None"], ["def", "read_image", "(", "img_path", ")", ":", "\n", "\n", "\t", "got_img", "=", "False", "\n", "if", "not", "osp", ".", "exists", "(", "img_path", ")", ":", "\n", "\t\t", "raise", "IOError", "(", "\"{} doses not exist\"", ".", "format", "(", "img_path", ")", ")", "\n", "", "while", "not", "got_img", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "got_img", "=", "True", "\n", "", "except", "IOError", ":", "\n", "\t\t\t", "print", "(", "\"IOErro incurred when reading {}\"", ".", "format", "(", "img_path", ")", ")", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.market1501.Market1501.__init__": [[23, 44], ["base.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "market1501.Market1501.check_before_run", "market1501.Market1501.process_dir", "market1501.Market1501.process_dir", "market1501.Market1501.process_dir", "market1501.Market1501.get_imagedata_info", "market1501.Market1501.get_imagedata_info", "market1501.Market1501.get_imagedata_info", "print", "market1501.Market1501.print_dataset_statistics"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.market1501.Market1501.check_before_run", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.market1501.Market1501.process_dir", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.market1501.Market1501.process_dir", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.market1501.Market1501.process_dir", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseImageDataset.print_dataset_statistics"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "\t\t", "super", "(", "Market1501", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_name", ")", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_train'", ")", "\n", "self", ".", "query_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'query'", ")", "\n", "self", ".", "gallery_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'bounding_box_test'", ")", "\n", "#check the directory whether valid or not", "\n", "self", ".", "check_before_run", "(", ")", "\n", "\n", "self", ".", "train", "=", "self", ".", "process_dir", "(", "self", ".", "train_dir", ",", "relabel", "=", "True", ")", "\n", "self", ".", "query", "=", "self", ".", "process_dir", "(", "self", ".", "query_dir", ")", "\n", "self", ".", "gallery", "=", "self", ".", "process_dir", "(", "self", ".", "gallery_dir", ")", "\n", "\n", "if", "verbose", ":", "\n", "\t\t\t", "print", "(", "\"=> init Market1501\"", ")", "\n", "self", ".", "print_dataset_statistics", "(", "self", ".", "train", ",", "self", ".", "query", ",", "self", ".", "gallery", ")", "\n", "\n", "", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_camids", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_camids", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_camids", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.market1501.Market1501.check_before_run": [[45, 55], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "check_before_run", "(", "self", ")", ":", "\n", "\n", "\t\t", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "\t\t\t", "raise", "RuntimeError", "(", "\"{} is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "query_dir", ")", ":", "\n", "\t\t\t", "raise", "RuntimeError", "(", "\"{} is not available\"", ".", "format", "(", "self", ".", "query_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "\t\t\t", "raise", "RuntimeError", "(", "\"{} is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "gallery_dir", ")", ":", "\n", "\t\t\t", "raise", "RuntimeError", "(", "\"{} is not available\"", ".", "format", "(", "self", ".", "gallery_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.market1501.Market1501.process_dir": [[57, 92], ["glob.glob", "re.compile", "set", "os.join", "re.compile.search().groups", "map", "set.add", "map", "dataset.append", "enumerate", "re.compile.search().groups", "re.compile.search", "re.compile.search"], "methods", ["None"], ["", "", "def", "process_dir", "(", "slef", ",", "dir_path", ",", "relabel", "=", "False", ")", ":", "\n", "# list all image in the specified path", "\n", "\t\t", "img_paths", "=", "glob", ".", "glob", "(", "osp", ".", "join", "(", "dir_path", ",", "'*.jpg'", ")", ")", "\n", "# first group is pid(note that some pid begin with - ), second group is camid", "\n", "pattern", "=", "re", ".", "compile", "(", "r'([-\\d]+)_c(\\d)'", ")", "\n", "# used to store all pids", "\n", "pid_sets", "=", "set", "(", ")", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "# map the pid(str type) to int (int type)  ", "\n", "\t\t\t", "res", "=", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", "\n", "pid", ",", "_", "=", "map", "(", "int", ",", "res", ")", "\n", "\n", "# pid == -1 denote the junk images, we just ignored", "\n", "if", "pid", "==", "-", "1", ":", "\n", "\t\t\t\t", "continue", "\n", "", "pid_sets", ".", "add", "(", "pid", ")", "\n", "# construct a dict pid2lable", "\n", "", "pid2label", "=", "{", "pid", ":", "label", "for", "label", ",", "pid", "in", "enumerate", "(", "pid_sets", ")", "}", "\n", "\n", "\n", "dataset", "=", "[", "]", "\n", "for", "img_path", "in", "img_paths", ":", "\n", "\n", "\t\t\t", "pid", ",", "camid", "=", "map", "(", "int", ",", "pattern", ".", "search", "(", "img_path", ")", ".", "groups", "(", ")", ")", "\n", "if", "pid", "==", "-", "1", ":", "\n", "\t\t\t\t", "continue", "\n", "", "assert", "0", "<=", "pid", "<=", "1501", "\n", "assert", "1", "<=", "camid", "<=", "6", "\n", "#change camid index start from 0", "\n", "camid", "-=", "1", "\n", "if", "relabel", ":", "\n", "\t\t\t\t", "pid", "=", "pid2label", "[", "pid", "]", "\n", "", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.__init__.get_dataset_names": [[16, 19], ["datasets.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.__init__.init_dataset": [[21, 27], ["datasets.keys", "KeyError"], "function", ["None"], []], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.msmt17.MSMT17.__init__": [[31, 58], ["base.BaseImageDataset.__init__", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "os.join", "msmt17.MSMT17._check_before_run", "msmt17.MSMT17._process_dir", "msmt17.MSMT17._process_dir", "msmt17.MSMT17._process_dir", "msmt17.MSMT17.get_imagedata_info", "msmt17.MSMT17.get_imagedata_info", "msmt17.MSMT17.get_imagedata_info", "print", "msmt17.MSMT17.print_dataset_statistics"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.msmt17.MSMT17._check_before_run", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.msmt17.MSMT17._process_dir", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseDataset.get_imagedata_info", "home.repos.pwc.inspect_result.solicucu_ReID.datasets.base.BaseImageDataset.print_dataset_statistics"], ["def", "__init__", "(", "self", ",", "root", "=", "''", ",", "verbose", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MSMT17", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_name", "=", "\"MSMT17_V1\"", "\n", "self", ".", "dataset_dir", "=", "osp", ".", "join", "(", "root", ",", "self", ".", "dataset_name", ")", "\n", "self", ".", "train_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'train'", ")", "\n", "self", ".", "test_dir", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'test'", ")", "# combine query and test as test", "\n", "self", ".", "list_train_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'list_train.txt'", ")", "\n", "self", ".", "list_val_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'list_val.txt'", ")", "\n", "self", ".", "list_query_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'list_query.txt'", ")", "\n", "self", ".", "list_gallery_path", "=", "osp", ".", "join", "(", "self", ".", "dataset_dir", ",", "'list_gallery.txt'", ")", "\n", "\n", "self", ".", "_check_before_run", "(", ")", "\n", "train", "=", "self", ".", "_process_dir", "(", "self", ".", "train_dir", ",", "self", ".", "list_train_path", ")", "\n", "#val, num_val_pids, num_val_imgs = self._process_dir(self.train_dir, self.list_val_path)", "\n", "query", "=", "self", ".", "_process_dir", "(", "self", ".", "test_dir", ",", "self", ".", "list_query_path", ")", "\n", "gallery", "=", "self", ".", "_process_dir", "(", "self", ".", "test_dir", ",", "self", ".", "list_gallery_path", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"=> MSMT17 loaded\"", ")", "\n", "self", ".", "print_dataset_statistics", "(", "train", ",", "query", ",", "gallery", ")", "\n", "\n", "", "self", ".", "train", "=", "train", "\n", "self", ".", "query", "=", "query", "\n", "self", ".", "gallery", "=", "gallery", "\n", "\n", "self", ".", "num_train_pids", ",", "self", ".", "num_train_imgs", ",", "self", ".", "num_train_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "train", ")", "\n", "self", ".", "num_query_pids", ",", "self", ".", "num_query_imgs", ",", "self", ".", "num_query_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "query", ")", "\n", "self", ".", "num_gallery_pids", ",", "self", ".", "num_gallery_imgs", ",", "self", ".", "num_gallery_cams", "=", "self", ".", "get_imagedata_info", "(", "self", ".", "gallery", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.msmt17.MSMT17._check_before_run": [[59, 67], ["os.exists", "RuntimeError", "os.exists", "RuntimeError", "os.exists", "RuntimeError"], "methods", ["None"], ["", "def", "_check_before_run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Check if all files are available before going deeper\"\"\"", "\n", "if", "not", "osp", ".", "exists", "(", "self", ".", "dataset_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "dataset_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "train_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "train_dir", ")", ")", "\n", "", "if", "not", "osp", ".", "exists", "(", "self", ".", "test_dir", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"'{}' is not available\"", ".", "format", "(", "self", ".", "test_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.datasets.msmt17.MSMT17._process_dir": [[68, 85], ["set", "enumerate", "enumerate", "open", "txt.readlines", "img_info.split", "int", "int", "os.join", "dataset.append", "set.add", "os.join.split"], "methods", ["None"], ["", "", "def", "_process_dir", "(", "self", ",", "dir_path", ",", "list_path", ")", ":", "\n", "        ", "with", "open", "(", "list_path", ",", "'r'", ")", "as", "txt", ":", "\n", "            ", "lines", "=", "txt", ".", "readlines", "(", ")", "\n", "", "dataset", "=", "[", "]", "\n", "pid_container", "=", "set", "(", ")", "\n", "for", "img_idx", ",", "img_info", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "img_path", ",", "pid", "=", "img_info", ".", "split", "(", "' '", ")", "\n", "pid", "=", "int", "(", "pid", ")", "# no need to relabel", "\n", "camid", "=", "int", "(", "img_path", ".", "split", "(", "'_'", ")", "[", "2", "]", ")", "\n", "img_path", "=", "osp", ".", "join", "(", "dir_path", ",", "img_path", ")", "\n", "dataset", ".", "append", "(", "(", "img_path", ",", "pid", ",", "camid", ")", ")", "\n", "pid_container", ".", "add", "(", "pid", ")", "\n", "\n", "# check if pid starts from 0 and increments with 1", "\n", "", "for", "idx", ",", "pid", "in", "enumerate", "(", "pid_container", ")", ":", "\n", "            ", "assert", "idx", "==", "pid", ",", "\"See code comment for explanation\"", "\n", "", "return", "dataset", "", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.samplers.tripletSampler.TripletSampler.__init__": [[23, 47], ["collections.defaultdict", "enumerate", "list", "tripletSampler.TripletSampler.index_dict[].append", "tripletSampler.TripletSampler.index_dict.keys", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ",", "batch_size", ",", "num_instances", ")", ":", "\n", "\n", "\t\t", "self", ".", "data", "=", "data", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "# K", "\n", "self", ".", "num_instances", "=", "num_instances", "\n", "# compute the N", "\n", "self", ".", "num_pids_per_batch", "=", "self", ".", "batch_size", "//", "self", ".", "num_instances", "\n", "# use pid as key, value is all index of same pid", "\n", "# default value is list", "\n", "self", ".", "index_dict", "=", "defaultdict", "(", "list", ")", "\n", "for", "index", ",", "(", "_", ",", "pid", ",", "_", ")", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "\t\t\t", "self", ".", "index_dict", "[", "pid", "]", ".", "append", "(", "index", ")", "\n", "", "self", ".", "pids", "=", "list", "(", "self", ".", "index_dict", ".", "keys", "(", ")", ")", "\n", "# estimate number of examples in an epoch", "\n", "self", ".", "length", "=", "0", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "\t\t\t", "idxs", "=", "self", ".", "index_dict", "[", "pid", "]", "\n", "num", "=", "len", "(", "idxs", ")", "\n", "#insufficient pid will repeated to satify num_instances", "\n", "if", "num", "<", "self", ".", "num_instances", ":", "\n", "\t\t\t\t", "num", "=", "self", ".", "num_instances", "\n", "#remainders are ignored", "\n", "", "self", ".", "length", "+=", "(", "num", "-", "num", "%", "self", ".", "num_instances", ")", "\n", "# return a iterable object", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.samplers.tripletSampler.TripletSampler.__iter__": [[48, 91], ["collections.defaultdict", "copy.deepcopy", "len", "iter", "copy.deepcopy", "random.shuffle", "len", "random.sample", "len", "numpy.random.choice", "batch_idxs_dict[].pop.append", "batch_idxs_dict[].pop", "final_idxs.extend", "len", "batch_idxs_dict[].append", "len", "copy.deepcopy.remove"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "\n", "# key is pid, value is a list, elem is list contains self.num_instances", "\n", "\t\t", "batch_idxs_dict", "=", "defaultdict", "(", "list", ")", "\n", "\n", "for", "pid", "in", "self", ".", "pids", ":", "\n", "\t\t\t", "idxs", "=", "copy", ".", "deepcopy", "(", "self", ".", "index_dict", "[", "pid", "]", ")", "\n", "\n", "if", "len", "(", "idxs", ")", "<", "self", ".", "num_instances", ":", "\n", "#select num_instances which can be repeated", "\n", "\t\t\t\t", "idxs", "=", "np", ".", "random", ".", "choice", "(", "idxs", ",", "size", "=", "self", ".", "num_instances", ",", "replace", "=", "True", ")", "\n", "# be careful for the indention\t!!!!!!!!!!!", "\n", "", "random", ".", "shuffle", "(", "idxs", ")", "\n", "#continuously select num_instances as a combination", "\n", "batch_idxs", "=", "[", "]", "\n", "for", "idx", "in", "idxs", ":", "\n", "\t\t\t\t", "batch_idxs", ".", "append", "(", "idx", ")", "\n", "if", "len", "(", "batch_idxs", ")", "==", "self", ".", "num_instances", ":", "\n", "\t\t\t\t\t", "batch_idxs_dict", "[", "pid", "]", ".", "append", "(", "batch_idxs", ")", "\n", "batch_idxs", "=", "[", "]", "\n", "\n", "\n", "\n", "#copy a temp pid", "\n", "", "", "", "temp_pids", "=", "copy", ".", "deepcopy", "(", "self", ".", "pids", ")", "\n", "final_idxs", "=", "[", "]", "\n", "\n", "while", "len", "(", "temp_pids", ")", ">=", "self", ".", "num_pids_per_batch", ":", "\n", "\n", "# randomly select n pids", "\n", "\t\t\t", "selected_pids", "=", "random", ".", "sample", "(", "temp_pids", ",", "self", ".", "num_pids_per_batch", ")", "\n", "\n", "for", "pid", "in", "selected_pids", ":", "\n", "\n", "\t\t\t\t", "batch_idxs", "=", "batch_idxs_dict", "[", "pid", "]", ".", "pop", "(", "0", ")", "\n", "final_idxs", ".", "extend", "(", "batch_idxs", ")", "\n", "\n", "if", "len", "(", "batch_idxs_dict", "[", "pid", "]", ")", "==", "0", ":", "\n", "\t\t\t\t\t", "temp_pids", ".", "remove", "(", "pid", ")", "\n", "\n", "", "", "", "self", ".", "length", "=", "len", "(", "final_idxs", ")", "\n", "\n", "return", "iter", "(", "final_idxs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.samplers.tripletSampler.TripletSampler.__len__": [[92, 95], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\n", "\t\t", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.transforms.transforms.RandomErasing.__init__": [[17, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.04", ",", "r", "=", "0.3", ",", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ")", ":", "\n", "\n", "\t\t", "self", ".", "prob", "=", "probability", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "mean", "=", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.transforms.transforms.RandomErasing.__call__": [[25, 60], ["img.size", "range", "random.uniform", "random.uniform", "random.uniform", "int", "int", "round", "round", "random.randint", "random.randint", "math.sqrt", "math.sqrt", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "# if bigger than self.prob,no need to erase", "\n", "\t\t", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">", "self", ".", "prob", ":", "\n", "\t\t\t", "return", "img", "\n", "# get the image height and width", "\n", "", "ic", ",", "ih", ",", "iw", "=", "img", ".", "size", "(", ")", "\n", "area", "=", "ih", "*", "iw", "\n", "#try 100 times to produce proper region", "\n", "for", "_", "in", "range", "(", "100", ")", ":", "\n", "\n", "\t\t\t", "erase_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "\n", "\n", "#the ratio is range in (0.3, 1/0.3)", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r", ",", "1.", "/", "self", ".", "r", ")", "\n", "\n", "#compute w and h", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "erase_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "erase_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "#confirm the both h and w is less than ih and iw respectively", "\n", "if", "h", "<", "ih", "and", "w", "<", "iw", ":", "\n", "# random produe the left coner for the region to be rease", "\n", "\t\t\t\t", "h1", "=", "random", ".", "randint", "(", "0", ",", "ih", "-", "h", ")", "\n", "w1", "=", "random", ".", "randint", "(", "0", ",", "iw", "-", "w", ")", "\n", "\n", "if", "ic", "==", "3", ":", "\n", "\t\t\t\t\t", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "\t\t\t\t\t\t", "img", "[", "i", ",", "h1", ":", "h1", "+", "h", ",", "w1", ":", "w1", "+", "w", "]", "=", "self", ".", "mean", "[", "i", "]", "\n", "", "", "else", ":", "\n", "\t\t\t\t\t", "img", "[", "0", ",", "h1", ":", "h1", "+", "h", ",", "w1", ":", "w1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "\n", "", "return", "img", "\n", "#if faile to erase image", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.transforms.transforms.build_transforms": [[62, 82], ["torchvision.Compose", "torchvision.Compose", "torchvision.Resize", "torchvision.RandomHorizontalFlip", "torchvision.Pad", "torchvision.RandomCrop", "torchvision.ToTensor", "torchvision.Normalize", "transforms.RandomErasing", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize"], "function", ["None"], ["", "", "def", "build_transforms", "(", "cfg", ",", "is_train", "=", "True", ")", ":", "\n", "\n", "\t", "if", "is_train", ":", "\n", "\t\t", "transform", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "cfg", ".", "DATA", ".", "IMAGE_SIZE", ")", ",", "\n", "T", ".", "RandomHorizontalFlip", "(", "p", "=", "cfg", ".", "DATA", ".", "HF_PROB", ")", ",", "\n", "T", ".", "Pad", "(", "cfg", ".", "DATA", ".", "PADDING", ")", ",", "\n", "T", ".", "RandomCrop", "(", "cfg", ".", "DATA", ".", "IMAGE_SIZE", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "cfg", ".", "DATA", ".", "MEAN", ",", "std", "=", "cfg", ".", "DATA", ".", "STD", ")", ",", "\n", "RandomErasing", "(", "probability", "=", "cfg", ".", "DATA", ".", "RE_PROB", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "\t\t", "transform", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "Resize", "(", "cfg", ".", "DATA", ".", "IMAGE_SIZE", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "mean", "=", "cfg", ".", "DATA", ".", "MEAN", ",", "std", "=", "cfg", ".", "DATA", ".", "STD", ")", "\n", "]", ")", "\n", "\n", "", "return", "transform", "", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.WarmupMultiStepLR.__init__": [[30, 45], ["len", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "optimizer", ",", "milestones", "=", "[", "40", ",", "70", "]", ",", "lr_list", "=", "None", ",", "gama", "=", "0.", ",", "warmup_factor", "=", "0.1", ",", "\n", "warmup_iters", "=", "10", ",", "warmup_method", "=", "'linear'", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "\n", "\t\t", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "lr_list", "=", "lr_list", "\n", "if", "gama", "==", "0", "and", "warmup_iters", ">", "0", ":", "\n", "\t\t\t", "self", ".", "gama", "=", "1.", "/", "warmup_iters", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "gama", "=", "gama", "\n", "", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "self", ".", "stages", "=", "len", "(", "self", ".", "milestones", ")", "\n", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.WarmupMultiStepLR.get_lr": [[46, 68], ["range", "NotImplementedError"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "# self.last_epoch is current epoch", "\n", "\t\t", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "\t\t\t", "if", "self", ".", "warmup_method", "==", "'linear'", ":", "\n", "\t\t\t\t", "cur_iter", "=", "self", ".", "last_epoch", "+", "1", "\n", "# warmup_factor default is 1.", "\n", "# gama = 1/warmup_iters", "\n", "# lr = init_lr * gama * t, where init_lr = base_lr * warmup_factor", "\n", "lr", "=", "self", ".", "base_lrs", "[", "0", "]", "*", "self", ".", "warmup_factor", "*", "self", ".", "gama", "*", "cur_iter", "\n", "return", "[", "lr", "]", "\n", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "(", "\"not know such warmup method {}\"", ".", "format", "(", "self", ".", "warmup_method", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "# default is the first lr", "\n", "\t\t\t", "lr", "=", "self", ".", "lr_list", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "stages", ")", ":", "\n", "# select the proper lr", "\n", "\t\t\t\t", "if", "self", ".", "last_epoch", ">=", "self", ".", "milestones", "[", "i", "]", ":", "\n", "\t\t\t\t\t", "lr", "=", "self", ".", "lr_list", "[", "i", "+", "1", "]", "\n", "\n", "", "", "return", "[", "lr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.WarmupCosAnnLR.__init__": [[73, 90], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["\t", "def", "__init__", "(", "self", ",", "optimizer", ",", "T_max", ",", "eta_min", ",", "last_epoch", "=", "-", "1", ",", "gama", "=", "0.", ",", "warmup_factor", "=", "0.1", ",", "\n", "warmup_iters", "=", "10", ",", "warmup_method", "=", "'linear'", ")", ":", "\n", "\n", "\t\t", "self", ".", "eta_min", "=", "eta_min", "\n", "self", ".", "T_max", "=", "T_max", "-", "warmup_iters", "\n", "if", "gama", "==", "0", ":", "\n", "\t\t\t", "self", ".", "gama", "=", "1.", "/", "warmup_iters", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "gama", "=", "gama", "\n", "", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "# for constant warmup ", "\n", "# warmup iter include two part, constant and linear ", "\n", "self", ".", "first_warmup", "=", "warmup_iters", "-", "10", "\n", "\n", "super", "(", "WarmupCosAnnLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.WarmupCosAnnLR.get_lr": [[92, 120], ["NotImplementedError", "numpy.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "\n", "\t\t", "eta_max_sub_min", "=", "self", ".", "base_lrs", "[", "0", "]", "-", "self", ".", "eta_min", "\n", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "\t\t\t", "if", "self", ".", "warmup_method", "==", "'linear'", ":", "\n", "\n", "\t\t\t\t", "cur_iter", "=", "self", ".", "last_epoch", "+", "1", "\n", "# lr = init_lr * gama * t, where init_lr = base_lr * warmup_factor", "\n", "lr", "=", "self", ".", "base_lrs", "[", "0", "]", "*", "self", ".", "warmup_factor", "*", "self", ".", "gama", "*", "cur_iter", "\n", "return", "[", "lr", "]", "\n", "", "elif", "self", ".", "warmup_method", "==", "'constant'", ":", "\n", "\t\t\t\t", "if", "self", ".", "last_epoch", "<", "self", ".", "first_warmup", ":", "\n", "# first parts", "\n", "# constant will return a constant lr as follow", "\n", "\t\t\t\t\t", "lr", "=", "self", ".", "base_lrs", "[", "0", "]", "*", "self", ".", "warmup_factor", "\n", "return", "[", "lr", "]", "\n", "# second part use linear method to smooth ", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "cur_iter", "=", "self", ".", "last_epoch", "+", "1", "\n", "lr", "=", "self", ".", "base_lrs", "[", "0", "]", "*", "self", ".", "warmup_factor", "*", "self", ".", "gama", "*", "(", "cur_iter", "-", "self", ".", "first_warmup", ")", "\n", "return", "[", "lr", "]", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "raise", "NotImplementedError", "(", "\"not know warmup method {}\"", ".", "format", "(", "self", ".", "warmup_method", ")", ")", "\n", "", "", "else", ":", "\n", "\t\t\t", "cur_iter", "=", "self", ".", "last_epoch", "-", "self", ".", "warmup_iters", "\n", "lr", "=", "self", ".", "eta_min", "+", "0.5", "*", "eta_max_sub_min", "*", "(", "1", "+", "np", ".", "cos", "(", "(", "cur_iter", "/", "self", ".", "T_max", ")", "*", "np", ".", "pi", ")", ")", "\n", "return", "[", "lr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_optimizer": [[9, 27], ["filter", "model.parameters", "getattr", "getattr", "getattr"], "function", ["None"], ["def", "make_optimizer", "(", "cfg", ",", "model", ")", ":", "\n", "\n", "# for some layer was frozen ", "\n", "\t", "params", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "cfg", ".", "SOLVER", ".", "OPTIMIZER_NAME", "==", "\"SGD\"", ":", "\n", "\n", "\t\t", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "\"SGD\"", ")", "(", "params", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "momentum", "=", "cfg", ".", "SOLVER", ".", "MOMENTUM", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "OPTIMIZER_NAME", "==", "\"Adam\"", ":", "\n", "\n", "\t\t", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "cfg", ".", "SOLVER", ".", "OPTIMIZER_NAME", ")", "(", "params", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ")", "\n", "\n", "", "elif", "cfg", ".", "SOLVER", ".", "OPTIMIZER_NAME", "==", "'AMSGrad'", ":", "\n", "\n", "\t\t", "optimizer", "=", "getattr", "(", "torch", ".", "optim", ",", "\"Adam\"", ")", "(", "params", ",", "lr", "=", "cfg", ".", "SOLVER", ".", "BASE_LR", ",", "weight_decay", "=", "cfg", ".", "SOLVER", ".", "WEIGHT_DECAY", ",", "betas", "=", "(", "0.9", ",", "0.99", ")", ",", "amsgrad", "=", "True", ")", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.optims.optimizers.make_lr_scheduler": [[123, 148], ["torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "float", "optimizers.WarmupMultiStepLR", "optimizers.WarmupCosAnnLR", "RuntimeError"], "function", ["None"], ["", "", "", "def", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", ":", "\n", "\n", "\t", "name", "=", "cfg", ".", "SOLVER", ".", "LR_SCHEDULER_NAME", "\n", "if", "name", "==", "\"StepLR\"", ":", "\n", "\n", "\t\t", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "cfg", ".", "SOLVER", ".", "LR_DECAY_PERIOD", ",", "gamma", "=", "cfg", ".", "SOLVER", ".", "LR_DECAY_FACTOR", ")", "\n", "\n", "", "elif", "name", "==", "\"CosineAnnealingLR\"", ":", "\n", "\n", "\t\t", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "float", "(", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", ")", ",", "eta_min", "=", "cfg", ".", "SOLVER", ".", "LR_MIN", ")", "\n", "\n", "", "elif", "name", "==", "\"WarmupMultiStepLR\"", ":", "\n", "\n", "\t\t", "scheduler", "=", "WarmupMultiStepLR", "(", "optimizer", ",", "cfg", ".", "SOLVER", ".", "MILESTONES", ",", "cfg", ".", "SOLVER", ".", "LR_LIST", ",", "cfg", ".", "SOLVER", ".", "GAMA", ",", "cfg", ".", "SOLVER", ".", "WARMUP_FACTOR", ",", "cfg", ".", "SOLVER", ".", "WARMUP_ITERS", ",", "cfg", ".", "SOLVER", ".", "WARMUP_METHOD", ")", "\n", "\n", "", "elif", "name", "==", "\"WarmupCosAnnLR\"", ":", "\n", "\n", "\t\t", "scheduler", "=", "WarmupCosAnnLR", "(", "optimizer", ",", "cfg", ".", "SOLVER", ".", "MAX_EPOCHS", ",", "cfg", ".", "SOLVER", ".", "LR_MIN", ",", "gama", "=", "cfg", ".", "SOLVER", ".", "GAMA", ",", "warmup_factor", "=", "cfg", ".", "SOLVER", ".", "WARMUP_FACTOR", ",", "\n", "warmup_iters", "=", "cfg", ".", "SOLVER", ".", "WARMUP_ITERS", ",", "warmup_method", "=", "cfg", ".", "SOLVER", ".", "WARMUP_METHOD", ")", "\n", "\n", "", "else", ":", "\n", "\n", "\t\t", "raise", "RuntimeError", "(", "\" name {} is not know\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "", "return", "scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.solicucu_ReID.loss.triplet_loss.TripletLoss.__init__": [[121, 131], ["torch.MarginRankingLoss", "torch.MarginRankingLoss", "torch.SoftMarginLoss", "torch.SoftMarginLoss"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "margin", "=", "0", ")", ":", "\n", "\n", "\t\t", "self", ".", "margin", "=", "margin", "\n", "\n", "if", "margin", "!=", "0", ":", "\n", "\n", "\t\t\t", "self", ".", "rank_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "self", ".", "margin", ")", "\n", "", "else", ":", "\n", "# do not  specify the margin, so it will continously make dist_an  >> dist_ap", "\n", "\t\t\t", "self", ".", "rank_loss", "=", "nn", ".", "SoftMarginLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.loss.triplet_loss.TripletLoss.__call__": [[132, 158], ["triplet_loss.euclidean_dist", "triplet_loss.hard_example_mining", "dist_an.new().resize_as_().fill_", "triplet_loss.normalize", "triplet_loss.TripletLoss.rank_loss", "triplet_loss.TripletLoss.rank_loss", "dist_an.new().resize_as_", "dist_an.new"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.loss.triplet_loss.euclidean_dist", "home.repos.pwc.inspect_result.solicucu_ReID.loss.triplet_loss.hard_example_mining", "home.repos.pwc.inspect_result.solicucu_ReID.loss.triplet_loss.normalize", "home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.new"], ["", "", "def", "__call__", "(", "self", ",", "global_feat", ",", "labels", ",", "normalize_feat", "=", "False", ")", ":", "\n", "\n", "# normalize the feature vector", "\n", "\t\t", "if", "normalize_feat", ":", "\n", "\n", "\t\t\t", "global_feat", "=", "normalize", "(", "global_feat", ",", "axis", "=", "-", "1", ")", "\n", "\n", "#compute the dist_mat for hard example mining", "\n", "\n", "", "dist_mat", "=", "euclidean_dist", "(", "global_feat", ",", "global_feat", ")", "\n", "\n", "#for given anchor identity, select the most similar negtive example and most disimilar positive example", "\n", "dist_ap", ",", "dist_an", "=", "hard_example_mining", "(", "dist_mat", ",", "labels", ")", "\n", "\n", "# ranking_loss,nn.MarginRankingLoss(x1,x2,y)", "\n", "# -> given y , if y == 1, expect x1 is much larger while x2 is much smaller", "\n", "y", "=", "dist_an", ".", "new", "(", ")", ".", "resize_as_", "(", "dist_an", ")", ".", "fill_", "(", "1", ")", "\n", "\n", "if", "self", ".", "margin", "!=", "0", ":", "\n", "\n", "\t\t\t", "loss", "=", "self", ".", "rank_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "", "else", ":", "\n", "\n", "\t\t\t", "loss", "=", "self", ".", "rank_loss", "(", "dist_an", "-", "dist_ap", ",", "y", ")", "\n", "\n", "", "return", "loss", ",", "dist_ap", ",", "dist_an", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.loss.triplet_loss.CrossEntropyLabelSmooth.__init__": [[175, 182], ["torch.Module.__init__", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", "=", "0.1", ",", "use_gpu", "=", "False", ")", ":", "\n", "\n", "\t\t", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "use_gpu", "=", "use_gpu", "\n", "self", ".", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.loss.triplet_loss.CrossEntropyLabelSmooth.forward": [[183, 202], ["triplet_loss.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "torch.zeros().scatter_", "q.cuda.cuda.cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "labels.unsqueeze().data.cpu", "triplet_loss.CrossEntropyLabelSmooth.size", "labels.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "scores", ",", "labels", ")", ":", "\n", "\n", "\t\t", "\"\"\"\n\t\targs:\n\t\t\tscores: predict matrix (before softmax) with shape [batch_size, num_classes]\n\t\t\tlabels: ground true labels with shape [num_classes]\n\t\t\"\"\"", "\n", "# compute log(pi)", "\n", "log_probs", "=", "self", ".", "logsoftmax", "(", "scores", ")", "\n", "q", "=", "torch", ".", "zeros", "(", "log_probs", ".", "size", "(", ")", ")", ".", "scatter_", "(", "dim", "=", "1", ",", "index", "=", "labels", ".", "unsqueeze", "(", "1", ")", ".", "data", ".", "cpu", "(", ")", ",", "value", "=", "1", ")", "\n", "# since q is a new tensor", "\n", "if", "self", ".", "use_gpu", ":", "\n", "\t\t\t", "q", "=", "q", ".", "cuda", "(", ")", "\n", "# smooth the q ", "\n", "", "q", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "q", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "\n", "loss", "=", "(", "-", "q", "*", "log_probs", ")", ".", "mean", "(", "0", ")", ".", "sum", "(", ")", "# same as tensor.sum(dim = 1).mean()", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.loss.triplet_loss.normalize": [[8, 17], ["torch.norm", "torch.norm", "torch.norm.expand_as"], "function", ["None"], ["def", "normalize", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "\n", "# normalize x to unit length along the specified dimension", "\n", "# len = (sum(xi^k)) -> \u5f00k\u6b21\u6839\u53f7\uff0chere k is 2", "\n", "\t", "x_len", "=", "torch", ".", "norm", "(", "x", ",", "2", ",", "axis", ",", "keepdim", "=", "True", ")", "\n", "\n", "x", "=", "1.", "*", "x", "/", "(", "x_len", ".", "expand_as", "(", "x", ")", "+", "1e-12", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.loss.triplet_loss.euclidean_dist": [[34, 51], ["torch.pow().sum().expand", "torch.pow().sum().expand", "torch.pow().sum().expand().t", "torch.pow().sum().expand().t", "dist.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt", "x.size", "y.size", "y.t", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum().expand", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp", "torch.pow", "torch.pow", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow"], "function", ["None"], ["def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "\n", "\t", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "# compute x^2, y^2", "\n", "# expand the same col to compute with y", "\n", "xx", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "\n", "yy", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "\n", "dist", "=", "xx", "+", "yy", "\n", "\n", "# compute x * y -> res, and then, compute (dist + (-2 * res ))", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "# for numerical stability", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "\n", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.loss.triplet_loss.hard_example_mining": [[63, 104], ["dist_mat.size", "labels.expand().eq", "labels.expand().ne", "dist_mat[].contiguous().view", "torch.max", "torch.max", "dist_mat[].contiguous().view", "torch.min", "torch.min", "len", "dist_mat.size", "dist_mat.size", "labels.expand().t", "labels.expand().t", "dist_ap.squeeze", "dist_an.squeeze", "labels.new().resize_as_().copy_().unsqueeze().expand", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "dist_mat.size", "labels.expand", "labels.expand", "dist_mat[].contiguous", "dist_mat[].contiguous", "ind[].contiguous().view", "ind[].contiguous().view", "labels.expand", "labels.expand", "labels.new().resize_as_().copy_().unsqueeze", "ind[].contiguous", "ind[].contiguous", "labels.new().resize_as_().copy_", "torch.arange().long", "torch.arange().long", "labels.new().resize_as_", "torch.arange", "torch.arange", "labels.new"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.cdnet_search.cdnet_search.CDNetwork.new"], ["def", "hard_example_mining", "(", "dist_mat", ",", "labels", ",", "return_inds", "=", "False", ")", ":", "\n", "\n", "\t", "assert", "len", "(", "dist_mat", ".", "size", "(", ")", ")", "==", "2", "\n", "assert", "dist_mat", ".", "size", "(", "0", ")", "==", "dist_mat", ".", "size", "(", "1", ")", "\n", "\n", "N", "=", "dist_mat", ".", "size", "(", "0", ")", "\n", "\n", "# find the same identity or not ", "\n", "# with result shape [N, N] -> bool", "\n", "is_pos", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "eq", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "is_neg", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "ne", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "\n", "# extact pos example", "\n", "# to correctly use view(N, -1), it must promise that for each identiy,", "\n", "# they need to have the same number of positive number, if not , it will go wrong", "\n", "pos", "=", "dist_mat", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "# select the most disimilar positive identity", "\n", "# with dist_ap means dist(anchor, hard_positive)", "\n", "# both dist_ap, p_inds with shape [N, 1]", "\n", "dist_ap", ",", "p_inds", "=", "torch", ".", "max", "(", "pos", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "neg", "=", "dist_mat", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", "\n", "#select the most similar negative identity", "\n", "dist_an", ",", "n_inds", "=", "torch", ".", "min", "(", "neg", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# squeeze 1 channel", "\n", "dist_ap", ",", "dist_an", "=", "dist_ap", ".", "squeeze", "(", "1", ")", ",", "dist_an", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "return_inds", ":", "\n", "# shape [N, N]", "\n", "# contruct a matrix", "\n", "# for each row is range(0,n)", "\n", "\t\t", "ind", "=", "(", "labels", ".", "new", "(", ")", ")", ".", "resize_as_", "(", "labels", ")", ".", "copy_", "(", "torch", ".", "arange", "(", "0", ",", "N", ")", ".", "long", "(", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "N", ")", "\n", "p_ind", "=", "torch", ".", "gather", "(", "ind", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "p_inds", ".", "data", ")", "\n", "n_ind", "=", "torch", ".", "gather", "(", "ind", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "n_inds", ".", "data", ")", "\n", "\n", "return", "dist_ap", ",", "dist_an", ",", "p_ind", ",", "n_ind", "\n", "\n", "", "return", "dist_ap", ",", "dist_an", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.loss.__init__.make_loss": [[9, 47], ["triplet_loss.TripletLoss", "triplet_loss.CrossEntropyLabelSmooth", "print", "torch.cross_entropy", "RuntimeError", "triplet_loss.TripletLoss.", "triplet_loss.CrossEntropyLabelSmooth.", "torch.cross_entropy", "triplet_loss.TripletLoss.", "triplet_loss.TripletLoss."], "function", ["None"], []], "home.repos.pwc.inspect_result.solicucu_ReID.loss.__init__.darts_make_loss": [[48, 75], ["triplet_loss.TripletLoss", "torch.cross_entropy", "RuntimeError", "triplet_loss.TripletLoss.", "torch.cross_entropy", "triplet_loss.TripletLoss."], "function", ["None"], []], "home.repos.pwc.inspect_result.solicucu_ReID.extra.visualize.load_feats": [[13, 37], ["torch.load", "torch.load", "torch.load", "torch.load", "print", "range", "open", "f.readlines", "len", "len", "labels.append", "str", "item.split"], "function", ["None"], ["def", "load_feats", "(", "num_pids", ")", ":", "\n", "\t", "tri_file_name", "=", "'tri_feats_20.feats'", "\n", "fc_file_name", "=", "'fc_feats_20.feats'", "\n", "label_file_name", "=", "'label_pid.txt'", "\n", "# tri_file_name = 'bnneck_tri_feats_20.feats'", "\n", "# fc_file_name = 'bnneck_fc_feats_20.feats'", "\n", "# label_file_name = 'bnneck_label_pid.txt'", "\n", "\n", "tri_feats", "=", "torch", ".", "load", "(", "root", "+", "tri_file_name", ")", "\n", "fc_feats", "=", "torch", ".", "load", "(", "root", "+", "fc_file_name", ")", "\n", "labels", "=", "[", "]", "\n", "with", "open", "(", "root", "+", "label_file_name", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "data", "=", "f", ".", "readlines", "(", ")", "\n", "for", "item", "in", "data", ":", "\n", "\t\t\t", "labels", ".", "append", "(", "item", ".", "split", "(", "' '", ")", "[", "0", "]", ")", "\n", "\n", "", "", "print", "(", "\"total sample:\"", ",", "len", "(", "labels", ")", ")", "\n", "\n", "s", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "\t\t", "if", "labels", "[", "i", "]", "==", "str", "(", "num_pids", ")", ":", "\n", "\t\t\t", "s", "=", "i", "\n", "break", "\n", "", "", "return", "tri_feats", "[", ":", "s", "]", ",", "fc_feats", "[", ":", "s", "]", ",", "labels", "[", ":", "s", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.extra.visualize.plot_embedding": [[38, 66], ["matplotlib.xlim", "matplotlib.ylim", "zip", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.title", "matplotlib.gca", "plt.gca.xaxis.set_ticks_position", "plt.gca.spines[].set_position", "plt.gca.yaxis.set_ticks_position", "plt.gca.spines[].set_position", "plt.gca.spines[].set_color", "plt.gca.spines[].set_color", "numpy.min", "numpy.max", "matplotlib.text", "str", "matplotlib.cm.Set1", "int"], "function", ["None"], ["", "def", "plot_embedding", "(", "data", ",", "labels", ",", "title", ")", ":", "\n", "\t", "x_min", ",", "x_max", "=", "np", ".", "min", "(", "data", ",", "0", ")", ",", "np", ".", "max", "(", "data", ",", "0", ")", "\n", "data", "=", "(", "data", "-", "x_min", ")", "/", "(", "x_max", "-", "x_min", ")", "\n", "# center with 0.5 ", "\n", "data", "=", "data", "-", "0.5", "\n", "\n", "plt", ".", "xlim", "(", "-", "0.6", ",", "0.6", ")", "\n", "plt", ".", "ylim", "(", "-", "0.6", ",", "0.6", ")", "\n", "\n", "# plt.subplot(111)", "\n", "for", "x", ",", "label", "in", "zip", "(", "data", ",", "labels", ")", ":", "\n", "\t\t", "plt", ".", "text", "(", "x", "[", "0", "]", ",", "x", "[", "1", "]", ",", "str", "(", "label", ")", ",", "color", "=", "plt", ".", "cm", ".", "Set1", "(", "int", "(", "label", ")", "/", "10.", ")", ",", "\n", "fontdict", "=", "{", "'weight'", ":", "'bold'", ",", "'size'", ":", "9", "}", ")", "\n", "", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "# move the axis ", "\n", "ax", "=", "plt", ".", "gca", "(", ")", "\n", "\n", "ax", ".", "xaxis", ".", "set_ticks_position", "(", "'bottom'", ")", "\n", "ax", ".", "spines", "[", "'bottom'", "]", ".", "set_position", "(", "(", "'data'", ",", "0", ")", ")", "\n", "\n", "ax", ".", "yaxis", ".", "set_ticks_position", "(", "'left'", ")", "\n", "ax", ".", "spines", "[", "'left'", "]", ".", "set_position", "(", "(", "'data'", ",", "0", ")", ")", "\n", "\n", "ax", ".", "spines", "[", "'top'", "]", ".", "set_color", "(", "'none'", ")", "# \u8bbe\u7f6e\u9876\u90e8\u652f\u67f1\u7684\u989c\u8272\u4e3a\u7a7a", "\n", "\n", "ax", ".", "spines", "[", "'right'", "]", ".", "set_color", "(", "'none'", ")", "# \u8bbe\u7f6e\u53f3\u8fb9\u652f\u67f1\u7684\u989c\u8272\u4e3a\u7a7a", "\n", "# plt.show()", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.extra.visualize.visualize_trifeat_and_fc_feat": [[68, 85], ["visualize.load_feats", "tri_feats.numpy.numpy", "fc_feats.numpy.numpy", "print", "sklearn.manifold.TSNE", "sklearn.manifold.TSNE.fit_transform", "sklearn.manifold.TSNE.fit_transform", "print", "matplotlib.subplot", "visualize.plot_embedding", "matplotlib.subplot", "visualize.plot_embedding", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.visualize.load_feats", "home.repos.pwc.inspect_result.solicucu_ReID.extra.visualize.plot_embedding", "home.repos.pwc.inspect_result.solicucu_ReID.extra.visualize.plot_embedding"], ["", "def", "visualize_trifeat_and_fc_feat", "(", "num_pids", "=", "8", ")", ":", "\n", "\n", "\t", "tri_feats", ",", "fc_feats", ",", "labels", "=", "load_feats", "(", "num_pids", ")", "\n", "# print(tri_feats.size())", "\n", "# print(len(labels))", "\n", "tri_feats", "=", "tri_feats", ".", "numpy", "(", ")", "\n", "fc_feats", "=", "fc_feats", ".", "numpy", "(", ")", "\n", "print", "(", "'Computing t-SNE embedding'", ")", "\n", "tsne", "=", "TSNE", "(", "n_components", "=", "2", ",", "init", "=", "'pca'", ",", "random_state", "=", "0", ")", "\n", "tri_result", "=", "tsne", ".", "fit_transform", "(", "tri_feats", ")", "\n", "fc_result", "=", "tsne", ".", "fit_transform", "(", "fc_feats", ")", "\n", "print", "(", "\"end of computing\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plot_embedding", "(", "tri_result", ",", "labels", ",", "\"distribution of triplet_feats of fblneck\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plot_embedding", "(", "fc_result", ",", "labels", ",", "'distribution of softmax_feats of fblneck'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.extra.visualize.load_fmaps_and_imgs": [[87, 157], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "len", "torch.mean().numpy", "torch.mean().numpy", "torch.mean().numpy", "torch.mean().numpy", "torch.mean().numpy", "torch.mean().numpy", "range", "range", "range", "numpy.uint8", "numpy.uint8", "numpy.uint8", "zip", "open", "f.readlines", "cv2.imread", "imgs.append", "fmap1[].min", "fmap1[].max", "fmap2[].min", "fmap2[].max", "fmap3[].min", "fmap3[].max", "numpy.clip", "numpy.clip", "numpy.clip", "cv2.applyColorMap", "cv2.applyColorMap", "cv2.applyColorMap", "heatmap1.append", "heatmap2.append", "heatmap3.append", "labels.append", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "cv2.resize", "cv2.resize", "cv2.resize", "item.strip"], "function", ["None"], ["", "def", "load_fmaps_and_imgs", "(", ")", ":", "\n", "\t", "dirs", "=", "\"D:/project/data/combine/\"", "\n", "fmap1_name", "=", "'fmap1.fmap'", "# 64x32", "\n", "fmap2_name", "=", "'fmap2.fmap'", "# 32x16 ", "\n", "fmap3_name", "=", "'fmap3.fmap'", "# 16x8", "\n", "label_name", "=", "'labels.txt'", "\n", "\n", "fmap1", "=", "torch", ".", "load", "(", "root", "+", "fmap1_name", ")", "\n", "fmap2", "=", "torch", ".", "load", "(", "root", "+", "fmap2_name", ")", "\n", "fmap3", "=", "torch", ".", "load", "(", "root", "+", "fmap3_name", ")", "\n", "\n", "labels", "=", "[", "]", "\n", "with", "open", "(", "root", "+", "label_name", ",", "'r'", ")", "as", "f", ":", "\n", "\t\t", "data", "=", "f", ".", "readlines", "(", ")", "\n", "for", "item", "in", "data", ":", "\n", "\t\t\t", "labels", ".", "append", "(", "item", ".", "strip", "(", ")", ")", "\n", "\n", "", "", "imgs", "=", "[", "]", "\n", "for", "name", "in", "labels", ":", "\n", "\t\t", "img_path", "=", "dirs", "+", "name", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "imgs", ".", "append", "(", "img", ")", "\n", "\n", "\n", "", "batch", "=", "len", "(", "labels", ")", "\n", "\n", "# normalize to (0,1)", "\n", "fmap1", "=", "torch", ".", "mean", "(", "fmap1", ",", "dim", "=", "1", ")", ".", "numpy", "(", ")", "\n", "fmap2", "=", "torch", ".", "mean", "(", "fmap2", ",", "dim", "=", "1", ")", ".", "numpy", "(", ")", "\n", "fmap3", "=", "torch", ".", "mean", "(", "fmap3", ",", "dim", "=", "1", ")", ".", "numpy", "(", ")", "\n", "# min number among all ", "\n", "for", "i", "in", "range", "(", "fmap1", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t", "min1", "=", "fmap1", "[", "i", "]", ".", "min", "(", ")", "\n", "max1", "=", "fmap1", "[", "i", "]", ".", "max", "(", ")", "\n", "fmap1", "[", "i", "]", "=", "(", "fmap1", "[", "i", "]", "-", "min1", ")", "/", "(", "max1", "-", "min1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "fmap2", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t", "min1", "=", "fmap2", "[", "i", "]", ".", "min", "(", ")", "\n", "max1", "=", "fmap2", "[", "i", "]", ".", "max", "(", ")", "\n", "fmap2", "[", "i", "]", "=", "(", "fmap2", "[", "i", "]", "-", "min1", ")", "/", "(", "max1", "-", "min1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "fmap3", ".", "shape", "[", "0", "]", ")", ":", "\n", "\t\t", "min1", "=", "fmap3", "[", "i", "]", ".", "min", "(", ")", "\n", "max1", "=", "fmap3", "[", "i", "]", ".", "max", "(", ")", "\n", "fmap3", "[", "i", "]", "=", "(", "fmap3", "[", "i", "]", "-", "min1", ")", "/", "(", "max1", "-", "min1", ")", "\n", "\n", "\n", "", "fmap1", "=", "np", ".", "uint8", "(", "np", ".", "clip", "(", "255", "*", "fmap1", ",", "0", ",", "255", ")", ")", "\n", "fmap2", "=", "np", ".", "uint8", "(", "np", ".", "clip", "(", "255", "*", "fmap2", ",", "0", ",", "255", ")", ")", "\n", "fmap3", "=", "np", ".", "uint8", "(", "np", ".", "clip", "(", "255", "*", "fmap3", ",", "0", ",", "255", ")", ")", "\n", "\n", "heatmap1", "=", "[", "]", "\n", "heatmap2", "=", "[", "]", "\n", "heatmap3", "=", "[", "]", "\n", "# w,h", "\n", "size", "=", "(", "64", ",", "128", ")", "\n", "for", "img1", ",", "img2", ",", "img3", "in", "zip", "(", "fmap1", ",", "fmap2", ",", "fmap3", ")", ":", "\n", "\t\t", "heat1", "=", "cv2", ".", "applyColorMap", "(", "img1", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heat2", "=", "cv2", ".", "applyColorMap", "(", "img2", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "heat3", "=", "cv2", ".", "applyColorMap", "(", "img3", ",", "cv2", ".", "COLORMAP_JET", ")", "\n", "# cv2.resize(size = (w,h))", "\n", "heatmap1", ".", "append", "(", "cv2", ".", "resize", "(", "heat1", ",", "size", ")", ")", "\n", "heatmap2", ".", "append", "(", "cv2", ".", "resize", "(", "heat2", ",", "size", ")", ")", "\n", "heatmap3", ".", "append", "(", "cv2", ".", "resize", "(", "heat3", ",", "size", ")", ")", "\n", "\n", "#img_add = cv2.addWeighted(org_img, 0.3, heat_img, 0.7, 0)", "\n", "# \u4e94\u4e2a\u53c2\u6570\u5206\u522b\u4e3a \u56fe\u50cf1 \u56fe\u50cf1\u900f\u660e\u5ea6(\u6743\u91cd) \u56fe\u50cf2 \u56fe\u50cf2\u900f\u660e\u5ea6(\u6743\u91cd) \u53e0\u52a0\u540e\u56fe\u50cf\u4eae\u5ea6", "\n", "# cv2.imshow('heapmap3', heatmap1[0])", "\n", "# cv2.waitKey(0)", "\n", "", "return", "[", "heatmap1", ",", "heatmap2", ",", "heatmap3", "]", ",", "imgs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.extra.visualize.visualize_combine_learning": [[160, 173], ["visualize.load_fmaps_and_imgs", "range", "print", "len", "range", "cv2.addWeighted", "cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.visualize.load_fmaps_and_imgs"], ["", "def", "visualize_combine_learning", "(", ")", ":", "\n", "\t", "dirs", "=", "\"D:/project/data/combine/\"", "\n", "heatmaps", ",", "imgs", ",", "labels", "=", "load_fmaps_and_imgs", "(", ")", "\n", "# add the origin image and heatmap ", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "# for each heatmap ", "\n", "\t\t", "for", "j", "in", "range", "(", "3", ")", ":", "\n", "\t\t\t", "img_add", "=", "cv2", ".", "addWeighted", "(", "imgs", "[", "i", "]", ",", "0.5", ",", "heatmaps", "[", "j", "]", "[", "i", "]", ",", "0.5", ",", "0", ")", "\n", "# img_add = heatmaps[j][i]", "\n", "name", "=", "\"com{}_\"", ".", "format", "(", "j", ")", "+", "labels", "[", "i", "]", "\n", "cv2", ".", "imwrite", "(", "dirs", "+", "name", ",", "img_add", ")", "\n", "\n", "", "", "print", "(", "\"end of visualize\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.extra.visualize.compare_performance": [[175, 200], ["matplotlib.subplot", "matplotlib.scatter", "numpy.arange", "numpy.arange", "range", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "len", "matplotlib.text"], "function", ["None"], ["", "def", "compare_performance", "(", ")", ":", "\n", "\n", "\t", "text", "=", "[", "'ShuffleNetv1'", ",", "'MobileNetv2'", ",", "'OSNet'", ",", "'HA-CNN'", ",", "'AutoReID'", ",", "'CNet(ours)'", ",", "\n", "'CDNet(our)'", "]", "\n", "mAP", "=", "[", "65", ",", "69.5", ",", "81", ",", "75.7", ",", "72.7", ",", "83.5", ",", "83.7", "]", "\n", "r1", "=", "[", "84.8", ",", "87", ",", "93.6", ",", "91.2", ",", "89.7", ",", "93.6", ",", "93.7", "]", "\n", "param", "=", "[", "1.9", ",", "2.14", ",", "2.2", ",", "2.7", ",", "11.4", ",", "1.44", ",", "1.8", "]", "\n", "# coordinate", "\n", "y", "=", "[", "64", ",", "68.5", ",", "80", ",", "74.7", ",", "71.7", ",", "82.1", ",", "83.3", "]", "\n", "x", "=", "[", "1.9", ",", "2.14", ",", "2.2", ",", "2.7", ",", "10.3", ",", "1.24", ",", "2.0", "]", "\n", "plt", ".", "subplot", "(", "111", ")", "\n", "plt", ".", "scatter", "(", "param", ",", "mAP", ",", "c", "=", "'r'", ",", "marker", "=", "'+'", ")", "\n", "x_margin", "=", "np", ".", "arange", "(", "1", ",", "12", ",", "1", ")", "\n", "y_margin", "=", "np", ".", "arange", "(", "60", ",", "86", ",", "2.5", ")", "\n", "\n", "# add the text", "\n", "for", "i", "in", "range", "(", "len", "(", "text", ")", ")", ":", "\n", "\t\t", "plt", ".", "text", "(", "x", "[", "i", "]", ",", "y", "[", "i", "]", ",", "text", "[", "i", "]", ",", "fontdict", "=", "{", "'size'", ":", "9", ",", "'color'", ":", "'black'", "}", ")", "\n", "\n", "", "plt", ".", "xticks", "(", "x_margin", ")", "\n", "# plt.ylim(60,85)", "\n", "plt", ".", "yticks", "(", "y_margin", ")", "\n", "plt", ".", "xlabel", "(", "\"parameters(M)\"", ")", "\n", "plt", ".", "ylabel", "(", "\"mAP(%)\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__init__": [[80, 84], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "dataset", ",", "transform", "=", "None", ")", ":", "\n", "\n", "\t\t", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__len__": [[85, 88], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\n", "\t\t", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.ImageDataset.__getitem__": [[89, 98], ["prepare_data.read_image", "prepare_data.ImageDataset.transform"], "methods", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.read_image"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "\t\t", "label", ",", "path", ",", "pid", "=", "self", ".", "dataset", "[", "index", "]", "\n", "img", "=", "read_image", "(", "path", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "\t\t\t", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "label", ",", "pid", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.get_data": [[16, 45], ["os.listdir", "collections.defaultdict", "list", "int", "pid2list[].append", "collections.defaultdict.keys", "data.extend", "len", "name.split"], "function", ["None"], ["def", "get_data", "(", "n", ",", "min_num", "=", "20", ")", ":", "\n", "\t", "names", "=", "os", ".", "listdir", "(", "root", ")", "\n", "pid2list", "=", "defaultdict", "(", "list", ")", "\n", "for", "name", "in", "names", ":", "\n", "# print(name)", "\n", "\t\t", "if", "name", "==", "\"Thumbs.db\"", ":", "\n", "\t\t\t", "continue", "\n", "", "pid", "=", "int", "(", "name", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "\n", "path", "=", "root", "+", "name", "\n", "pid2list", "[", "pid", "]", ".", "append", "(", "path", ")", "\n", "\n", "\n", "", "pids", "=", "list", "(", "pid2list", ".", "keys", "(", ")", ")", "\n", "# num = len(pids)", "\n", "data", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "pid", "in", "pids", ":", "\n", "# constaint the ids number >= min_num ", "\n", "\t\t", "if", "len", "(", "pid2list", "[", "pid", "]", ")", "<", "min_num", ":", "\n", "\t\t\t", "continue", "\n", "", "item", "=", "[", "(", "count", ",", "path", ",", "pid", ")", "for", "path", "in", "pid2list", "[", "pid", "]", "]", "\n", "data", ".", "extend", "(", "item", ")", "\n", "\n", "count", "+=", "1", "\n", "if", "count", "==", "n", ":", "\n", "\t\t\t", "break", "\n", "\n", "", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.get_all_data": [[46, 57], ["os.listdir", "int", "data.append", "name.split"], "function", ["None"], ["", "def", "get_all_data", "(", ")", ":", "\n", "\n", "\t", "path", "=", "'/home/share/solicucu/data/combine/'", "\n", "names", "=", "os", ".", "listdir", "(", "path", ")", "\n", "data", "=", "[", "]", "\n", "for", "name", "in", "names", ":", "\n", "\t\t", "pid", "=", "int", "(", "name", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "img_path", "=", "path", "+", "name", "\n", "data", ".", "append", "(", "(", "name", ",", "img_path", ",", "pid", ")", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.read_image": [[64, 77], ["os.path.exists", "IOError", "PIL.Image.open().convert", "print", "PIL.Image.open"], "function", ["None"], ["def", "read_image", "(", "img_path", ")", ":", "\n", "\n", "\t", "got_img", "=", "False", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "img_path", ")", ":", "\n", "\t\t", "raise", "IOError", "(", "\"{} doses not exist\"", ".", "format", "(", "img_path", ")", ")", "\n", "", "while", "not", "got_img", ":", "\n", "\t\t", "try", ":", "\n", "\t\t\t", "img", "=", "Image", ".", "open", "(", "img_path", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "got_img", "=", "True", "\n", "", "except", "IOError", ":", "\n", "\t\t\t", "print", "(", "\"IOErro incurred when reading {}\"", ".", "format", "(", "img_path", ")", ")", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.make_dataloader": [[100, 108], ["prepare_data.get_data", "print", "prepare_data.ImageDataset", "torch.utils.data.DataLoader", "len"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.get_data"], ["", "", "def", "make_dataloader", "(", "num_pids", "=", "5", ",", "batch_size", "=", "64", ",", "num_workers", "=", "4", ")", ":", "\n", "\n", "\t", "data", "=", "get_data", "(", "num_pids", ")", "\n", "print", "(", "\"select images:\"", ",", "len", "(", "data", ")", ")", "\n", "dataset", "=", "ImageDataset", "(", "data", ",", "transform", "=", "val_transform", ")", "\n", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "# 751 for market1501", "\n", "return", "data_loader", ",", "751", "\n", "\n"]], "home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.make_combine_dataloader": [[109, 117], ["prepare_data.get_all_data", "print", "prepare_data.ImageDataset", "torch.utils.data.DataLoader", "len"], "function", ["home.repos.pwc.inspect_result.solicucu_ReID.extra.prepare_data.get_all_data"], ["", "def", "make_combine_dataloader", "(", ")", ":", "\n", "\n", "\t", "data", "=", "get_all_data", "(", ")", "\n", "print", "(", "\"select images:\"", ",", "len", "(", "data", ")", ")", "\n", "dataset", "=", "ImageDataset", "(", "data", ",", "transform", "=", "val_transform", ")", "\n", "data_loader", "=", "DataLoader", "(", "dataset", ",", "batch_size", "=", "64", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "# 751 for market1501", "\n", "return", "data_loader", ",", "751", "\n", "\n"]]}