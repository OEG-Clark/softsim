{"home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.__init__": [[28, 49], ["transformers.GPT2Tokenizer.from_pretrained", "reader.MultiWozReader", "transformers.GPT2LMHeadModel.from_pretrained", "train_DST.Modal.model.to", "eval.MultiWozEvaluator", "train_DST.Modal.model.resize_token_embeddings", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "# initialize tokenizer", "\n", "self", ".", "tokenizer", "=", "GPT2Tokenizer", ".", "from_pretrained", "(", "cfg", ".", "gpt_path", ")", "\n", "# cfg.tokenizer = tokenizer", "\n", "\n", "# initialize multiwoz reader", "\n", "self", ".", "reader", "=", "MultiWozReader", "(", "self", ".", "tokenizer", ")", "\n", "\n", "# create model: gpt2", "\n", "self", ".", "model", "=", "GPT2LMHeadModel", ".", "from_pretrained", "(", "cfg", ".", "gpt_path", ")", "\n", "if", "cfg", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model", ".", "resize_token_embeddings", "(", "len", "(", "self", ".", "tokenizer", ")", ")", "\n", "", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "# single gpu", "\n", "\n", "#", "\n", "self", ".", "evaluator", "=", "MultiWozEvaluator", "(", "self", ".", "reader", ")", "\n", "if", "cfg", ".", "save_log", "and", "cfg", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "tb_writer", "=", "SummaryWriter", "(", "log_dir", "=", "'./log'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tb_writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.get_optimizers": [[50, 78], ["transformers.optimization.AdamW", "transformers.optimization.get_linear_schedule_with_warmup", "train_DST.Modal.model.named_parameters", "train_DST.Modal.model.named_parameters", "any", "any"], "methods", ["None"], ["", "", "def", "get_optimizers", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Setup the optimizer and the learning rate scheduler.\n\n        from transformers.Trainer\n\n        parameters from cfg: lr (1e-3); warmup_steps\n        \"\"\"", "\n", "# Prepare optimizer and schedule (linear warmup and decay)", "\n", "no_decay", "=", "[", "\"bias\"", ",", "\"LayerNorm.weight\"", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "\"weight_decay\"", ":", "cfg", ".", "weight_decay", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "\"weight_decay\"", ":", "0.0", ",", "\n", "}", ",", "\n", "]", "\n", "optimizer", "=", "AdamW", "(", "optimizer_grouped_parameters", ",", "lr", "=", "cfg", ".", "lr", ")", "\n", "num_training_steps", "=", "self", ".", "reader", ".", "set_stats", "[", "'train'", "]", "[", "'num_dials'", "]", "*", "cfg", ".", "epoch_num", "//", "cfg", ".", "gradient_accumulation_steps", "\n", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "\n", "optimizer", ",", "num_warmup_steps", "=", "cfg", ".", "warmup_steps", ",", "\n", "num_training_steps", "=", "num_training_steps", "\n", ")", "\n", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.log_first_inputs": [[79, 88], ["logging.info", "tokenizer.decode", "logging.info"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "def", "log_first_inputs", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "tokenizer", "=", "self", ".", "tokenizer", "\n", "logging", ".", "info", "(", "\"**** Input Examples: ****\"", ")", "\n", "for", "context", "in", "inputs", "[", "'contexts'", "]", "[", ":", "4", "]", ":", "\n", "# ubar = tokenizer.convert_ids_to_tokens(context)", "\n", "# ubar = tokenizer.convert_tokens_to_string(context)", "\n", "# ubar = \" \".join(ubar)", "\n", "            ", "ubar", "=", "tokenizer", ".", "decode", "(", "context", ")", "\n", "logging", ".", "info", "(", "ubar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.add_torch_input": [[89, 95], ["torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "contexts_tensor.to.to.to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "add_torch_input", "(", "self", ",", "inputs", ")", ":", "\n", "# to tensor and to device", "\n", "        ", "contexts_tensor", "=", "torch", ".", "from_numpy", "(", "inputs", "[", "'contexts_np'", "]", ")", ".", "long", "(", ")", "\n", "contexts_tensor", "=", "contexts_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "inputs", "[", "'contexts_tensor'", "]", "=", "contexts_tensor", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.add_torch_input_eval": [[96, 101], ["torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "add_torch_input_eval", "(", "self", ",", "inputs", ")", ":", "\n", "# inputs: context", "\n", "        ", "inputs", "[", "'context_tensor'", "]", "=", "torch", ".", "tensor", "(", "\n", "[", "inputs", "[", "'context'", "]", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.calculate_loss_and_accuracy": [[102, 120], ["lm_logits[].contiguous", "labels[].contiguous", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "labels[].contiguous.ne", "labels[].contiguous.ne.long().sum().item", "lm_logits[].contiguous.view", "labels[].contiguous.view", "lm_logits[].contiguous.size", "labels[].contiguous.ne.long().sum", "labels[].contiguous.ne.long"], "methods", ["None"], ["", "def", "calculate_loss_and_accuracy", "(", "self", ",", "outputs", ",", "labels", ")", ":", "\n", "# GPT2-chicahat/train.py", "\n", "        ", "lm_logits", "=", "outputs", "[", "0", "]", "\n", "\n", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "pad_id", "=", "cfg", ".", "pad_id", "\n", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "pad_id", ",", "reduction", "=", "'sum'", ")", "\n", "loss", "=", "loss_fct", "(", "\n", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# avg loss", "\n", "not_ignore", "=", "shift_labels", ".", "ne", "(", "pad_id", ")", "\n", "num_targets", "=", "not_ignore", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "loss", "/=", "num_targets", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.train": [[121, 251], ["train_DST.Modal.reader.get_batches", "train_DST.Modal.get_optimizers", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "time.time", "range", "amp.initialize", "train_DST.Modal.tb_writer.add_text", "time.time", "train_DST.Modal.model.zero_grad", "random.shuffle", "train_DST.Modal.reader.get_nontranspose_data_iterator", "enumerate", "logging.info", "logging.info", "json.dumps", "train_DST.Modal.reader.convert_batch_session", "train_DST.Modal.save_model", "ImportError", "train_DST.Modal.model.train", "train_DST.Modal.add_torch_input", "train_DST.Modal.model", "train_DST.Modal.calculate_loss_and_accuracy", "train_DST.Modal.item", "train_DST.Modal.log_first_inputs", "train_DST.Modal.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "optimizer.step", "scheduler.step", "optimizer.zero_grad", "amp.scale_loss", "scaled_loss.backward", "train_DST.Modal.model.parameters", "logging.info", "str", "max", "logging.info", "hasattr", "logging.info", "time.time", "train_DST.Modal.validate", "train_DST.Modal.items", "logs.items", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "str", "train_DST.Modal.tb_writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_batches", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.get_optimizers", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_nontranspose_data_iterator", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.convert_batch_session", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.save_model", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.train", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.add_torch_input", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.calculate_loss_and_accuracy", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.log_first_inputs", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.validate"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "all_batches", "=", "self", ".", "reader", ".", "get_batches", "(", "'train'", ")", "\n", "# compute num_training_steps in get_batches()", "\n", "optimizer", ",", "scheduler", "=", "self", ".", "get_optimizers", "(", ")", "\n", "if", "cfg", ".", "fp16", ":", "\n", "            ", "try", ":", "\n", "                ", "from", "apex", "import", "amp", "\n", "", "except", "ImportError", ":", "\n", "                ", "raise", "ImportError", "(", "\"Please install apex from https://www.github.com/nvidia/apex to use fp16 training.\"", ")", "\n", "", "self", ".", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "self", ".", "model", ",", "optimizer", ",", "opt_level", "=", "\"O1\"", ")", "\n", "# log info", "\n", "", "set_stats", "=", "self", ".", "reader", ".", "set_stats", "[", "'train'", "]", "\n", "logging", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logging", ".", "info", "(", "\"  Num Training steps(one turn in a batch of dialogs) per epoch = %d\"", ",", "\n", "set_stats", "[", "'num_training_steps_per_epoch'", "]", ")", "\n", "logging", ".", "info", "(", "\"  Num Turns = %d\"", ",", "set_stats", "[", "'num_turns'", "]", ")", "\n", "logging", ".", "info", "(", "\"  Num Dialogs = %d\"", ",", "set_stats", "[", "'num_dials'", "]", ")", "\n", "logging", ".", "info", "(", "\"  Num Epochs = %d\"", ",", "cfg", ".", "epoch_num", ")", "\n", "logging", ".", "info", "(", "\"  Batch size  = %d\"", ",", "cfg", ".", "batch_size", ")", "\n", "logging", ".", "info", "(", "\"  Gradient Accumulation steps = %d\"", ",", "\n", "cfg", ".", "gradient_accumulation_steps", ")", "\n", "logging", ".", "info", "(", "\"  Total optimization steps = %d\"", ",", "\n", "set_stats", "[", "'num_training_steps_per_epoch'", "]", "*", "cfg", ".", "epoch_num", "//", "cfg", ".", "gradient_accumulation_steps", ")", "\n", "\n", "# tb writer", "\n", "if", "self", ".", "tb_writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "tb_writer", ".", "add_text", "(", "'cfg'", ",", "json", ".", "dumps", "(", "cfg", ".", "__dict__", ",", "indent", "=", "2", ")", ")", "\n", "# self.tb_writer.add_hparams(self.args.to_sanitized_dict(), metric_dict={})", "\n", "\n", "", "log_inputs", "=", "2", "\n", "global_step", "=", "0", "\n", "sw", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "cfg", ".", "epoch_num", ")", ":", "\n", "            ", "epoch_step", "=", "0", "\n", "tr_loss", "=", "0.0", "\n", "logging_loss", "=", "0.0", "\n", "btm", "=", "time", ".", "time", "(", ")", "\n", "oom_time", "=", "0", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "random", ".", "shuffle", "(", "all_batches", ")", "\n", "data_iterator", "=", "self", ".", "reader", ".", "get_nontranspose_data_iterator", "(", "\n", "all_batches", ")", "\n", "# pbar = tqdm(data_iterator)", "\n", "pbar", "=", "data_iterator", "\n", "# 69 batches for bs of 128", "\n", "for", "batch_idx", ",", "dial_batch", "in", "enumerate", "(", "pbar", ")", ":", "\n", "                ", "inputs", "=", "self", ".", "reader", ".", "convert_batch_session", "(", "dial_batch", ")", "\n", "try", ":", "# avoid OOM", "\n", "                    ", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "log_inputs", ">", "0", ":", "# log inputs for the very first two turns", "\n", "                        ", "self", ".", "log_first_inputs", "(", "inputs", ")", "\n", "log_inputs", "-=", "1", "\n", "\n", "# to tensor", "\n", "", "inputs", "=", "self", ".", "add_torch_input", "(", "inputs", ")", "\n", "# loss", "\n", "outputs", "=", "self", ".", "model", "(", "inputs", "[", "'contexts_tensor'", "]", ")", "\n", "# outputs = self.model(inputs['contexts_tensor']) # debugging with GPT2Model", "\n", "loss", "=", "self", ".", "calculate_loss_and_accuracy", "(", "\n", "outputs", ",", "labels", "=", "inputs", "[", "'contexts_tensor'", "]", ")", "\n", "if", "cfg", ".", "fp16", ":", "\n", "                        ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                            ", "scaled_loss", ".", "backward", "(", ")", "\n", "# torch.nn.utils.clip_grad_norm_(amp.master_params(optimizer), 5.0)", "\n", "", "", "else", ":", "\n", "                        ", "loss", ".", "backward", "(", ")", "\n", "", "tr_loss", "+=", "loss", ".", "item", "(", ")", "\n", "# torch.nn.utils.clip_grad_norm_(", "\n", "#     self.model.parameters(), 5.0)", "\n", "epoch_step", "+=", "1", "\n", "\n", "# step, wrt gradient_accumulation_steps, clip grad norm", "\n", "if", "(", "epoch_step", "+", "1", ")", "%", "cfg", ".", "gradient_accumulation_steps", "==", "0", "or", "(", "\n", "# end of an epoch", "\n", "(", "epoch_step", "+", "1", ")", "==", "set_stats", "[", "'num_training_steps_per_epoch'", "]", "\n", ")", ":", "\n", "                        ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# global_step: actual step the optimizer took", "\n", "global_step", "+=", "1", "\n", "\n", "logs", "=", "{", "}", "# for tb writer", "\n", "# logging: loss, lr... after certain amount of steps", "\n", "if", "cfg", ".", "report_interval", ">", "0", "and", "global_step", "%", "cfg", ".", "report_interval", "==", "0", ":", "\n", "                            ", "loss_scalar", "=", "(", "tr_loss", "-", "logging_loss", ")", "/", "cfg", ".", "report_interval", "\n", "logging_loss", "=", "tr_loss", "\n", "logs", "[", "'loss'", "]", "=", "loss_scalar", "\n", "logging", ".", "info", "(", "\n", "'Global step: {}, epoch step: {}, interval loss: {:.4f}'", ".", "format", "(", "\n", "global_step", ",", "epoch_step", ",", "loss_scalar", "\n", ")", ")", "\n", "# validate", "\n", "# add to tensorboard...", "\n", "if", "cfg", ".", "evaluate_during_training", "and", "loss_scalar", "<", "10", ":", "\n", "                                ", "results", "=", "self", ".", "validate", "(", ")", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "                                    ", "eval_key", "=", "\"eval_{}\"", ".", "format", "(", "k", ")", "\n", "logs", "[", "eval_key", "]", "=", "v", "\n", "\n", "", "", "if", "self", ".", "tb_writer", ":", "\n", "                                ", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", ":", "\n", "                                    ", "self", ".", "tb_writer", ".", "add_scalar", "(", "\n", "k", ",", "v", ",", "global_step", ")", "\n", "# save model... ", "\n", "\n", "", "", "", "", "", "except", "RuntimeError", "as", "exception", ":", "\n", "                    ", "if", "\"out of memory\"", "in", "str", "(", "exception", ")", ":", "\n", "                        ", "max_length", "=", "max", "(", "inputs", "[", "'lengths'", "]", ")", "\n", "oom_time", "+=", "1", "\n", "logging", ".", "info", "(", "\"WARNING: ran out of memory,times: {}, batch size: {}, max_len: {}\"", ".", "format", "(", "\n", "oom_time", ",", "cfg", ".", "batch_size", ",", "max_length", ")", ")", "\n", "if", "hasattr", "(", "torch", ".", "cuda", ",", "'empty_cache'", ")", ":", "\n", "                            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "", "else", ":", "\n", "                        ", "logging", ".", "info", "(", "str", "(", "exception", ")", ")", "\n", "raise", "exception", "\n", "", "", "", "logging", ".", "info", "(", "'Epoch {} Train epoch time: {:.2f} min, epoch loss: {:.4f}'", ".", "format", "(", "epoch", ",", "(", "time", ".", "time", "(", ")", "-", "btm", ")", "/", "60", ",", "tr_loss", ")", ")", "\n", "# save model after every epoch", "\n", "avg_loss", "=", "tr_loss", "/", "epoch_step", "\n", "logging", ".", "info", "(", "\"Average loss {:.4}\"", ".", "format", "(", "avg_loss", ")", ")", "\n", "if", "avg_loss", "<", "0.7", ":", "\n", "                ", "self", ".", "save_model", "(", "epoch", ",", "avg_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.save_model": [[252, 262], ["os.path.join", "logging.info", "train_DST.Modal.model.save_pretrained", "train_DST.Modal.tokenizer.save_pretrained", "os.path.exists", "os.mkdir"], "methods", ["None"], ["", "", "", "def", "save_model", "(", "self", ",", "epoch", ",", "loss", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "\n", "cfg", ".", "exp_path", ",", "'epoch{}_trloss{:.2f}_gpt2'", ".", "format", "(", "epoch", "+", "1", ",", "loss", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "logging", ".", "info", "(", "'Saving model checkpoint to %s'", ",", "save_path", ")", "\n", "# save gpt2", "\n", "self", ".", "model", ".", "save_pretrained", "(", "save_path", ")", "\n", "# save tokenizer", "\n", "self", ".", "tokenizer", ".", "save_pretrained", "(", "save_path", ")", "\n", "# save cfg", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.validate": [[264, 436], ["train_DST.Modal.model.eval", "train_DST.Modal.reader.get_eval_data", "logging.info", "logging.info", "time.time", "logging.info", "compute_joint_acc.compute_jacc", "time.time", "train_DST.Modal.reader.wrap_result_lm", "train_DST.Modal.evaluator.validation_metric", "logging.info", "logging.info", "logging.info", "logging.info", "str", "os.path.join", "os.path.exists", "logging.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "open", "json.dump", "open", "json.dump", "json.load", "json.dump", "json.dump", "enumerate", "result_collection.update", "config.global_config.eval_load_path.split", "config.global_config.eval_load_path.split", "open", "open", "open", "train_DST.Modal.reader.convert_turn_eval", "train_DST.Modal.add_torch_input_eval", "len", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.reader.inverse_transpose_turn", "logging.info", "train_DST.Modal.model.generate", "outputs[].cpu().numpy().tolist", "train_DST.Modal.reader.bspan_to_DBpointer", "train_DST.Modal.model.generate", "outputs[].cpu().numpy().tolist", "train_DST.Modal.decode_generated_bspn", "time.time", "time.time", "train_DST.Modal.decode_generated_act_resp", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.convert_tokens_to_ids", "train_DST.Modal.tokenizer.encode", "train_DST.Modal.rule_based_bs_fix", "train_DST.Modal.reader.bspan_to_DBpointer", "train_DST.Modal.reader.bspan_to_DBpointer", "train_DST.Modal.tokenizer.convert_tokens_to_ids", "train_DST.Modal.tokenizer.encode", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "len", "train_DST.Modal.model.generate", "outputs_db[].cpu().numpy().tolist", "outputs[].cpu().numpy", "logging.info", "logging.info", "train_DST.Modal.tokenizer.tokenize", "outputs[].cpu().numpy", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.tokenize", "len", "train_DST.Modal.decode_generated_act_resp", "train_DST.Modal.tokenizer.encode", "str", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.encode", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "outputs_db[].cpu().numpy", "logging.info", "logging.info", "outputs[].cpu", "outputs[].cpu", "train_DST.Modal.tokenizer.encode", "str", "train_DST.Modal.tokenizer.decode", "outputs_db[].cpu"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.BeamSearchNode.eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_eval_data", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.compute_joint_acc.compute_jacc", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.wrap_result_lm", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.validation_metric", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.convert_turn_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.add_torch_input_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.inverse_transpose_turn", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_DBpointer", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_bspn", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_act_resp", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.rule_based_bs_fix", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_DBpointer", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_DBpointer", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_act_resp", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "def", "validate", "(", "self", ",", "data", "=", "'dev'", ",", "do_test", "=", "False", ")", ":", "\n", "# predict one dialog/ one turn at a time", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "# all_batches = self.reader.get_batches('dev')", "\n", "# data_iterator = self.reader.get_data_iterator(all_batches)", "\n", "eval_data", "=", "self", ".", "reader", ".", "get_eval_data", "(", "data", ")", "\n", "model_output", "=", "{", "}", "\n", "set_stats", "=", "self", ".", "reader", ".", "set_stats", "[", "data", "]", "\n", "logging", ".", "info", "(", "\"***** Running Evaluation *****\"", ")", "\n", "logging", ".", "info", "(", "\"  Num Turns = %d\"", ",", "set_stats", "[", "'num_turns'", "]", ")", "\n", "# logging.info(\"  Num Dialogs = %d\", set_stats['num_dials'])", "\n", "\n", "# valid_losses = []", "\n", "btm", "=", "time", ".", "time", "(", ")", "\n", "result_collection", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "eval_pbar", "=", "eval_data", "\n", "count", "=", "0", "\n", "for", "dial_idx", ",", "dialog", "in", "enumerate", "(", "eval_pbar", ")", ":", "\n", "                ", "pv_turn", "=", "{", "}", "\n", "for", "turn_idx", ",", "turn", "in", "enumerate", "(", "dialog", ")", ":", "\n", "                    ", "if", "count", "%", "1000", "==", "0", ":", "\n", "                        ", "logging", ".", "info", "(", "\"Decoded turn: {}\"", ".", "format", "(", "count", ")", ")", "\n", "", "count", "+=", "1", "\n", "first_turn", "=", "(", "turn_idx", "==", "0", ")", "\n", "inputs", "=", "self", ".", "reader", ".", "convert_turn_eval", "(", "\n", "turn", ",", "pv_turn", ",", "first_turn", ")", "\n", "inputs", "=", "self", ".", "add_torch_input_eval", "(", "inputs", ")", "\n", "\n", "# fail to generate new tokens, if max_length not set", "\n", "context_length", "=", "len", "(", "inputs", "[", "'context'", "]", ")", "\n", "max_len", "=", "60", "\n", "if", "cfg", ".", "use_true_curr_bspn", ":", "\n", "                        ", "if", "not", "cfg", ".", "use_true_curr_aspn", ":", "\n", "                            ", "max_len", "=", "80", "\n", "# if not cfg.use_true_curr_bspn:", "\n", "#     max_len = 100", "\n", "", "outputs", "=", "self", ".", "model", ".", "generate", "(", "\n", "input_ids", "=", "inputs", "[", "'context_tensor'", "]", ",", "\n", "max_length", "=", "context_length", "+", "max_len", ",", "temperature", "=", "0.7", ",", "# top_p=0.9, num_beams=4,", "\n", "pad_token_id", "=", "self", ".", "tokenizer", ".", "eos_token_id", ",", "eos_token_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_r>'", "]", ")", "[", "0", "]", "\n", ")", "#   no_repeat_ngram_size=4", "\n", "# turn['generated'] = self.tokenizer.decode(outputs[0])", "\n", "\n", "# resp_gen, nedd to trim previous context", "\n", "generated", "=", "outputs", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "generated", "=", "generated", "[", "context_length", "-", "1", ":", "]", "\n", "\n", "try", ":", "\n", "                            ", "decoded", "=", "self", ".", "decode_generated_act_resp", "(", "generated", ")", "\n", "", "except", "ValueError", "as", "exception", ":", "\n", "                            ", "logging", ".", "info", "(", "str", "(", "exception", ")", ")", "\n", "logging", ".", "info", "(", "self", ".", "tokenizer", ".", "decode", "(", "generated", ")", ")", "\n", "decoded", "=", "{", "'resp'", ":", "[", "]", ",", "'bspn'", ":", "[", "]", ",", "'aspn'", ":", "[", "]", "}", "\n", "# check DB result", "\n", "", "db_result", "=", "self", ".", "reader", ".", "bspan_to_DBpointer", "(", "self", ".", "tokenizer", ".", "decode", "(", "turn", "[", "'bspn'", "]", ")", ",", "turn", "[", "'turn_domain'", "]", ")", "\n", "# error in pretraining data, db special tokens are just two <eos_db>.", "\n", "db", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "'<sos_db> '", "+", "db_result", "+", "' <eos_db>'", ")", ")", "+", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<sos_a>'", "]", ")", "\n", "", "else", ":", "# predict bspn, access db, then generate act and resp", "\n", "                        ", "decoded", "=", "{", "'resp'", ":", "[", "]", ",", "'bspn'", ":", "[", "]", ",", "'aspn'", ":", "[", "]", "}", "\n", "outputs", "=", "self", ".", "model", ".", "generate", "(", "input_ids", "=", "inputs", "[", "'context_tensor'", "]", ",", "\n", "max_length", "=", "context_length", "+", "80", ",", "# top_p=0.9, num_beams=4,", "\n", "pad_token_id", "=", "self", ".", "tokenizer", ".", "eos_token_id", ",", "eos_token_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_b>'", "]", ")", "[", "0", "]", ")", "\n", "generated_bs", "=", "outputs", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "# generated_bs = generated_bs[context_length-1:]", "\n", "bspn_gen", "=", "self", ".", "decode_generated_bspn", "(", "generated_bs", "[", "context_length", "-", "1", ":", "]", ")", "\n", "if", "cfg", ".", "fix_bs", ":", "\n", "                            ", "bspn_gen", "=", "self", ".", "rule_based_bs_fix", "(", "inputs", "[", "'context'", "]", ",", "bspn_gen", ")", "\n", "# check DB result", "\n", "", "if", "cfg", ".", "use_true_db_pointer", ":", "\n", "                            ", "db_result", "=", "self", ".", "reader", ".", "bspan_to_DBpointer", "(", "self", ".", "tokenizer", ".", "decode", "(", "turn", "[", "'bspn'", "]", ")", ",", "turn", "[", "'turn_domain'", "]", ")", "\n", "", "else", ":", "\n", "                            ", "db_result", "=", "self", ".", "reader", ".", "bspan_to_DBpointer", "(", "self", ".", "tokenizer", ".", "decode", "(", "bspn_gen", ")", ",", "turn", "[", "'turn_domain'", "]", ")", "\n", "# error in pretraining data, db special tokens are just two <eos_db>.", "\n", "", "db", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "'<sos_db> '", "+", "db_result", "+", "' <eos_db>'", ")", ")", "+", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<sos_a>'", "]", ")", "\n", "if", "True", ":", "\n", "                            ", "context", "=", "inputs", "[", "'context'", "]", "[", ":", "-", "1", "]", "+", "bspn_gen", "+", "db", "\n", "if", "len", "(", "context", ")", ">", "cfg", ".", "max_context_length", ":", "\n", "                                ", "context", "=", "context", "[", "-", "cfg", ".", "max_context_length", ":", "]", "\n", "", "inputs", "[", "'context_tensor_db'", "]", "=", "torch", ".", "tensor", "(", "[", "context", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "context_length", "=", "len", "(", "inputs", "[", "'context_tensor_db'", "]", "[", "0", "]", ")", "\n", "outputs_db", "=", "self", ".", "model", ".", "generate", "(", "input_ids", "=", "inputs", "[", "'context_tensor_db'", "]", ",", "\n", "max_length", "=", "context_length", "+", "80", ",", "temperature", "=", "0.7", ",", "# top_p=0.9, num_beams=4,", "\n", "pad_token_id", "=", "self", ".", "tokenizer", ".", "eos_token_id", ",", "eos_token_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_r>'", "]", ")", "[", "0", "]", ")", "\n", "generated_ar", "=", "outputs_db", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "generated_ar", "=", "generated_ar", "[", "context_length", "-", "1", ":", "]", "\n", "try", ":", "\n", "                                ", "decoded", "=", "self", ".", "decode_generated_act_resp", "(", "generated_ar", ")", "\n", "decoded", "[", "'bspn'", "]", "=", "bspn_gen", "\n", "", "except", "ValueError", "as", "exception", ":", "\n", "                                ", "logging", ".", "info", "(", "str", "(", "exception", ")", ")", "\n", "logging", ".", "info", "(", "self", ".", "tokenizer", ".", "decode", "(", "generated", ")", ")", "\n", "decoded", "=", "{", "'resp'", ":", "[", "]", ",", "'bspn'", ":", "[", "]", ",", "'aspn'", ":", "[", "]", "}", "\n", "", "", "else", ":", "\n", "                            ", "decoded", "[", "'bspn'", "]", "=", "bspn_gen", "\n", "\n", "", "", "turn", "[", "'resp_gen'", "]", "=", "decoded", "[", "'resp'", "]", "\n", "turn", "[", "'bspn_gen'", "]", "=", "turn", "[", "'bspn'", "]", "if", "cfg", ".", "use_true_curr_bspn", "else", "decoded", "[", "'bspn'", "]", "\n", "turn", "[", "'aspn_gen'", "]", "=", "turn", "[", "'aspn'", "]", "if", "cfg", ".", "use_true_curr_aspn", "else", "decoded", "[", "'aspn'", "]", "\n", "turn", "[", "'dspn_gen'", "]", "=", "turn", "[", "'dspn'", "]", "\n", "turn", "[", "'context'", "]", "=", "self", ".", "tokenizer", ".", "decode", "(", "inputs", "[", "'context'", "]", ")", "\n", "file_name", "=", "turn", "[", "'dial_id'", "]", "\n", "if", "file_name", "not", "in", "model_output", ":", "\n", "                        ", "model_output", "[", "file_name", "]", "=", "{", "}", "\n", "", "decoded_turn", "=", "{", "}", "\n", "decoded_turn", "[", "'context'", "]", "=", "self", ".", "tokenizer", ".", "decode", "(", "inputs", "[", "'context'", "]", ")", "\n", "decoded_turn", "[", "'bspn_gen'", "]", "=", "self", ".", "tokenizer", ".", "decode", "(", "turn", "[", "'bspn_gen'", "]", ")", "\n", "decoded_turn", "[", "'aspn_gen'", "]", "=", "self", ".", "tokenizer", ".", "decode", "(", "turn", "[", "'aspn_gen'", "]", ")", "\n", "decoded_turn", "[", "'resp_gen'", "]", "=", "self", ".", "tokenizer", ".", "decode", "(", "turn", "[", "'resp_gen'", "]", ")", "\n", "decoded_turn", "[", "'resp'", "]", "=", "self", ".", "tokenizer", ".", "decode", "(", "turn", "[", "'resp'", "]", ")", "\n", "decoded_turn", "[", "'bspn'", "]", "=", "self", ".", "tokenizer", ".", "decode", "(", "turn", "[", "'bspn'", "]", ")", "\n", "decoded_turn", "[", "'aspn'", "]", "=", "self", ".", "tokenizer", ".", "decode", "(", "turn", "[", "'aspn'", "]", ")", "\n", "model_output", "[", "file_name", "]", "[", "turn_idx", "]", "=", "decoded_turn", "\n", "\n", "# check DB results", "\n", "# db_result = self.reader.bspan_to_DBpointer(self.tokenizer.decode(turn['bspn']), turn['turn_domain'])", "\n", "# if db_result[0] == 1: # no match", "\n", "#     print('gt:', self.tokenizer.decode(turn['aspn']), '     |gen:', self.tokenizer.decode(decoded['aspn']))", "\n", "#     print('gen_resp: ', self.tokenizer.decode(decoded['resp']))", "\n", "#     print('gt_resp: ', self.tokenizer.decode(turn['resp']), '\\n')", "\n", "\n", "pv_turn", "[", "'labels'", "]", "=", "inputs", "[", "'labels'", "]", "# all true previous context", "\n", "pv_turn", "[", "'resp'", "]", "=", "turn", "[", "'resp'", "]", "if", "cfg", ".", "use_true_pv_resp", "else", "decoded", "[", "'resp'", "]", "\n", "pv_turn", "[", "'bspn'", "]", "=", "turn", "[", "'bspn'", "]", "if", "cfg", ".", "use_true_prev_bspn", "else", "decoded", "[", "'bspn'", "]", "\n", "pv_turn", "[", "'db'", "]", "=", "db", "\n", "pv_turn", "[", "'aspn'", "]", "=", "turn", "[", "'aspn'", "]", "if", "cfg", ".", "use_true_prev_aspn", "else", "decoded", "[", "'aspn'", "]", "\n", "\n", "", "result_collection", ".", "update", "(", "\n", "self", ".", "reader", ".", "inverse_transpose_turn", "(", "dialog", ")", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "\"inference time: {:.2f} min\"", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "btm", ")", "/", "60", ")", ")", "\n", "joint_acc", "=", "compute_jacc", "(", "data", "=", "model_output", ",", "path", "=", "cfg", ".", "eval_load_path", ")", "\n", "with", "open", "(", "cfg", ".", "gpt_path", "+", "cfg", ".", "model_output", "+", "'BS.json'", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "model_output", ",", "f", ",", "indent", "=", "2", ")", "\n", "# score", "\n", "", "btm", "=", "time", ".", "time", "(", ")", "\n", "results", ",", "_", "=", "self", ".", "reader", ".", "wrap_result_lm", "(", "result_collection", ")", "\n", "bleu", ",", "success", ",", "match", ",", "dials", "=", "self", ".", "evaluator", ".", "validation_metric", "(", "results", ")", "\n", "logging", ".", "info", "(", "'Jonit ACC: {:.4f}'", ".", "format", "(", "joint_acc", ")", ")", "\n", "\n", "logging", ".", "info", "(", "\"Saving model output ot {}\"", ".", "format", "(", "cfg", ".", "gpt_path", ")", ")", "\n", "with", "open", "(", "cfg", ".", "gpt_path", "+", "cfg", ".", "model_output", "+", "'.json'", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "dials", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n", "", "logging", ".", "info", "(", "\"Scoring time: {:.2f} min\"", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "btm", ")", "/", "60", ")", ")", "\n", "score", "=", "0.5", "*", "(", "success", "+", "match", ")", "+", "bleu", "\n", "valid_loss", "=", "130", "-", "score", "\n", "logging", ".", "info", "(", "'validation [CTR] match: %2.1f  success: %2.1f  bleu: %2.1f    score: %.1f'", "%", "(", "\n", "match", ",", "success", ",", "bleu", ",", "score", ")", ")", "\n", "eval_results", "=", "{", "}", "\n", "eval_results", "[", "'score'", "]", "=", "score", "\n", "eval_results", "[", "'bleu'", "]", "=", "bleu", "\n", "eval_results", "[", "'success'", "]", "=", "success", "\n", "eval_results", "[", "'match'", "]", "=", "match", "\n", "eval_results", "[", "'joint_acc'", "]", "=", "joint_acc", "\n", "\n", "model_setting", ",", "epoch_setting", "=", "cfg", ".", "eval_load_path", ".", "split", "(", "'/'", ")", "[", "1", "]", ",", "cfg", ".", "eval_load_path", ".", "split", "(", "'/'", ")", "[", "2", "]", "\n", "epoch_setting", "+=", "str", "(", "cfg", ".", "max_context_length", ")", "\n", "eval_on", "=", "'-'", ".", "join", "(", "cfg", ".", "exp_domains", ")", "\n", "log_file_name", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "log_path", ",", "cfg", ".", "exp_no", "+", "model_setting", "+", "'-'", "+", "eval_on", "+", "'.json'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "log_file_name", ")", ":", "\n", "            ", "eval_to_json", "=", "json", ".", "load", "(", "open", "(", "log_file_name", ",", "'r'", ")", ")", "\n", "eval_to_json", "[", "epoch_setting", "]", "=", "eval_results", "\n", "json", ".", "dump", "(", "eval_to_json", ",", "open", "(", "log_file_name", ",", "'w'", ")", ",", "indent", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "eval_to_json", "=", "{", "}", "\n", "eval_to_json", "[", "epoch_setting", "]", "=", "eval_results", "\n", "json", ".", "dump", "(", "eval_to_json", ",", "open", "(", "log_file_name", ",", "'w'", ")", ",", "indent", "=", "2", ")", "\n", "", "logging", ".", "info", "(", "'update eval results to {}'", ".", "format", "(", "log_file_name", ")", ")", "\n", "\n", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.validate_URURU": [[437, 558], ["train_DST.Modal.model.eval", "train_DST.Modal.reader.get_eval_data", "logging.info", "logging.info", "time.time", "logging.info", "time.time", "train_DST.Modal.reader.wrap_result_lm", "train_DST.Modal.evaluator.validation_metric", "logging.info", "logging.info", "logging.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "open", "json.dump", "enumerate", "result_collection.update", "train_DST.Modal.reader.convert_turn_eval_URURU", "train_DST.Modal.add_torch_input_eval", "len", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.reader.inverse_transpose_turn", "train_DST.Modal.model.generate", "outputs[].cpu().numpy().tolist", "train_DST.Modal.model.generate", "outputs[].cpu().numpy().tolist", "train_DST.Modal.decode_generated_bspn", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "len", "train_DST.Modal.model.generate", "outputs_db[].cpu().numpy().tolist", "time.time", "time.time", "train_DST.Modal.decode_generated_act_resp", "train_DST.Modal.reader.bspan_to_DBpointer", "train_DST.Modal.decode_generated_act_resp", "outputs[].cpu().numpy", "logging.info", "logging.info", "outputs[].cpu().numpy", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.convert_tokens_to_ids", "train_DST.Modal.tokenizer.encode", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "outputs_db[].cpu().numpy", "logging.info", "logging.info", "train_DST.Modal.tokenizer.encode", "str", "train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.encode", "train_DST.Modal.tokenizer.tokenize", "train_DST.Modal.tokenizer.encode", "str", "train_DST.Modal.tokenizer.decode", "outputs[].cpu", "outputs[].cpu", "outputs_db[].cpu"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.BeamSearchNode.eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_eval_data", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.wrap_result_lm", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.validation_metric", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.convert_turn_eval_URURU", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.add_torch_input_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.inverse_transpose_turn", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_bspn", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_act_resp", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_DBpointer", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_act_resp", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "def", "validate_URURU", "(", "self", ",", "data", "=", "'dev'", ",", "do_test", "=", "False", ")", ":", "\n", "# predict one dialog/ one turn at a time", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "# all_batches = self.reader.get_batches('dev')", "\n", "# data_iterator = self.reader.get_data_iterator(all_batches)", "\n", "eval_data", "=", "self", ".", "reader", ".", "get_eval_data", "(", "data", ")", "\n", "\n", "set_stats", "=", "self", ".", "reader", ".", "set_stats", "[", "data", "]", "\n", "logging", ".", "info", "(", "\"***** Running Evaluation *****\"", ")", "\n", "logging", ".", "info", "(", "\"  Num Turns = %d\"", ",", "set_stats", "[", "'num_turns'", "]", ")", "\n", "# logging.info(\"  Num Dialogs = %d\", set_stats['num_dials'])", "\n", "\n", "# valid_losses = []", "\n", "btm", "=", "time", ".", "time", "(", ")", "\n", "result_collection", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "eval_pbar", "=", "eval_data", "\n", "for", "dial_idx", ",", "dialog", "in", "enumerate", "(", "eval_pbar", ")", ":", "\n", "                ", "pv_turn", "=", "{", "}", "\n", "for", "turn_idx", ",", "turn", "in", "enumerate", "(", "dialog", ")", ":", "\n", "                    ", "first_turn", "=", "(", "turn_idx", "==", "0", ")", "\n", "inputs", "=", "self", ".", "reader", ".", "convert_turn_eval_URURU", "(", "\n", "turn", ",", "pv_turn", ",", "first_turn", ")", "\n", "inputs", "=", "self", ".", "add_torch_input_eval", "(", "inputs", ")", "\n", "\n", "# fail to generate new tokens, if max_length not set", "\n", "context_length", "=", "len", "(", "inputs", "[", "'context'", "]", ")", "\n", "if", "cfg", ".", "use_true_curr_bspn", ":", "# generate act, response", "\n", "                        ", "max_len", "=", "60", "\n", "if", "not", "cfg", ".", "use_true_curr_aspn", ":", "\n", "                            ", "max_len", "=", "80", "\n", "\n", "", "outputs", "=", "self", ".", "model", ".", "generate", "(", "input_ids", "=", "inputs", "[", "'context_tensor'", "]", ",", "\n", "max_length", "=", "context_length", "+", "max_len", ",", "temperature", "=", "0.7", ",", "# top_p=0.9, num_beams=4,", "\n", "pad_token_id", "=", "self", ".", "tokenizer", ".", "eos_token_id", ",", "eos_token_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_r>'", "]", ")", "[", "0", "]", ")", "\n", "#   no_repeat_ngram_size=4", "\n", "# turn['generated'] = self.tokenizer.decode(outputs[0])", "\n", "\n", "# resp_gen, need to trim previous context", "\n", "generated", "=", "outputs", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "generated", "=", "generated", "[", "context_length", "-", "1", ":", "]", "\n", "\n", "try", ":", "\n", "                            ", "decoded", "=", "self", ".", "decode_generated_act_resp", "(", "generated", ")", "\n", "", "except", "ValueError", "as", "exception", ":", "\n", "                            ", "logging", ".", "info", "(", "str", "(", "exception", ")", ")", "\n", "logging", ".", "info", "(", "self", ".", "tokenizer", ".", "decode", "(", "generated", ")", ")", "\n", "decoded", "=", "{", "'resp'", ":", "[", "]", ",", "'bspn'", ":", "[", "]", ",", "'aspn'", ":", "[", "]", "}", "\n", "\n", "", "", "else", ":", "# predict bspn, access db, then generate act and resp", "\n", "                        ", "outputs", "=", "self", ".", "model", ".", "generate", "(", "input_ids", "=", "inputs", "[", "'context_tensor'", "]", ",", "\n", "max_length", "=", "context_length", "+", "60", ",", "temperature", "=", "0.7", ",", "# top_p=0.9, num_beams=4,", "\n", "pad_token_id", "=", "self", ".", "tokenizer", ".", "eos_token_id", ",", "eos_token_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_b>'", "]", ")", "[", "0", "]", ")", "\n", "generated_bs", "=", "outputs", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "# generated_bs = generated_bs[context_length-1:]", "\n", "bspn_gen", "=", "self", ".", "decode_generated_bspn", "(", "generated_bs", "[", "context_length", "-", "1", ":", "]", ")", "\n", "# check DB result", "\n", "if", "cfg", ".", "use_true_db_pointer", ":", "\n", "# db_result = self.reader.bspan_to_DBpointer(self.tokenizer.decode(turn['bspn']), turn['turn_domain'])", "\n", "                            ", "db", "=", "turn", "[", "'db'", "]", "\n", "", "else", ":", "\n", "                            ", "db_result", "=", "self", ".", "reader", ".", "bspan_to_DBpointer", "(", "self", ".", "tokenizer", ".", "decode", "(", "bspn_gen", ")", ",", "turn", "[", "'turn_domain'", "]", ")", "\n", "db", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "'<sos_db> '", "+", "db_result", "+", "' <eos_db>'", ")", ")", "+", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<sos_a>'", "]", ")", "\n", "", "inputs", "[", "'context_tensor_db'", "]", "=", "torch", ".", "tensor", "(", "[", "inputs", "[", "'context'", "]", "[", ":", "-", "1", "]", "+", "bspn_gen", "+", "db", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "context_length", "=", "len", "(", "inputs", "[", "'context_tensor_db'", "]", "[", "0", "]", ")", "\n", "outputs_db", "=", "self", ".", "model", ".", "generate", "(", "input_ids", "=", "inputs", "[", "'context_tensor_db'", "]", ",", "\n", "max_length", "=", "context_length", "+", "80", ",", "temperature", "=", "0.7", ",", "# top_p=0.9, num_beams=4,", "\n", "pad_token_id", "=", "self", ".", "tokenizer", ".", "eos_token_id", ",", "eos_token_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_r>'", "]", ")", "[", "0", "]", ")", "\n", "generated_ar", "=", "outputs_db", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "generated_ar", "=", "generated_ar", "[", "context_length", "-", "1", ":", "]", "\n", "try", ":", "\n", "                            ", "decoded", "=", "self", ".", "decode_generated_act_resp", "(", "generated_ar", ")", "\n", "decoded", "[", "'bspn'", "]", "=", "bspn_gen", "\n", "", "except", "ValueError", "as", "exception", ":", "\n", "                            ", "logging", ".", "info", "(", "str", "(", "exception", ")", ")", "\n", "logging", ".", "info", "(", "self", ".", "tokenizer", ".", "decode", "(", "generated_ar", ")", ")", "\n", "decoded", "=", "{", "'resp'", ":", "[", "]", ",", "'bspn'", ":", "[", "]", ",", "'aspn'", ":", "[", "]", "}", "\n", "\n", "", "", "turn", "[", "'resp_gen'", "]", "=", "decoded", "[", "'resp'", "]", "\n", "turn", "[", "'bspn_gen'", "]", "=", "turn", "[", "'bspn'", "]", "if", "cfg", ".", "use_true_curr_bspn", "else", "decoded", "[", "'bspn'", "]", "\n", "turn", "[", "'aspn_gen'", "]", "=", "turn", "[", "'aspn'", "]", "if", "cfg", ".", "use_true_curr_aspn", "else", "decoded", "[", "'aspn'", "]", "\n", "turn", "[", "'dspn_gen'", "]", "=", "turn", "[", "'dspn'", "]", "\n", "turn", "[", "'context'", "]", "=", "self", ".", "tokenizer", ".", "decode", "(", "inputs", "[", "'context'", "]", ")", "\n", "# check DB results", "\n", "# db_result = self.reader.bspan_to_DBpointer(self.tokenizer.decode(turn['bspn']), turn['turn_domain'])", "\n", "# if db_result[0] == 1: # no match", "\n", "#     print('gt:', self.tokenizer.decode(turn['aspn']), '     |gen:', self.tokenizer.decode(decoded['aspn']))", "\n", "#     print('gen_resp: ', self.tokenizer.decode(decoded['resp']))", "\n", "#     print('gt_resp: ', self.tokenizer.decode(turn['resp']), '\\n')", "\n", "\n", "pv_turn", "[", "'labels'", "]", "=", "inputs", "[", "'labels'", "]", "# all true previous context", "\n", "pv_turn", "[", "'resp'", "]", "=", "turn", "[", "'resp'", "]", "if", "cfg", ".", "use_true_prev_resp", "else", "decoded", "[", "'resp'", "]", "\n", "# pv_turn['bspn'] = turn['bspn'] if cfg.use_true_prev_bspn else decoded['bspn']", "\n", "# pv_turn['db'] = db", "\n", "# pv_turn['aspn'] = turn['aspn'] if cfg.use_true_prev_aspn else decoded['aspn']", "\n", "# pv_turn = inputs['labels']", "\n", "\n", "", "result_collection", ".", "update", "(", "\n", "self", ".", "reader", ".", "inverse_transpose_turn", "(", "dialog", ")", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "\"inference time: {:.2f} min\"", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "btm", ")", "/", "60", ")", ")", "\n", "# score", "\n", "btm", "=", "time", ".", "time", "(", ")", "\n", "results", ",", "_", "=", "self", ".", "reader", ".", "wrap_result_lm", "(", "result_collection", ")", "\n", "# bleu, success, match = self.evaluator.validation_metric(results)", "\n", "bleu", ",", "success", ",", "match", ",", "dials", "=", "self", ".", "evaluator", ".", "validation_metric", "(", "results", ")", "\n", "logging", ".", "info", "(", "\"Saving model output ot {}\"", ".", "format", "(", "cfg", ".", "gpt_path", ")", ")", "\n", "with", "open", "(", "cfg", ".", "gpt_path", "+", "cfg", ".", "model_output", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "dials", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "logging", ".", "info", "(", "\"Scoring time: {:.2f} min\"", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "btm", ")", "/", "60", ")", ")", "\n", "score", "=", "0.5", "*", "(", "success", "+", "match", ")", "+", "bleu", "\n", "valid_loss", "=", "130", "-", "score", "\n", "logging", ".", "info", "(", "'validation [CTR] match: %2.1f  success: %2.1f  bleu: %2.1f    score: %.1f'", "%", "(", "\n", "match", ",", "success", ",", "bleu", ",", "score", ")", ")", "\n", "eval_results", "=", "{", "}", "\n", "eval_results", "[", "'bleu'", "]", "=", "bleu", "\n", "eval_results", "[", "'success'", "]", "=", "success", "\n", "eval_results", "[", "'match'", "]", "=", "match", "\n", "\n", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.decode_generated_act_resp": [[559, 592], ["train_DST.Modal.tokenizer.encode", "train_DST.Modal.tokenizer.encode", "train_DST.Modal.tokenizer.encode", "generated.index", "logging.info", "generated.index", "len", "train_DST.Modal.tokenizer.decode"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "def", "decode_generated_act_resp", "(", "self", ",", "generated", ")", ":", "\n", "        ", "\"\"\"\n        decode generated\n        return decoded['resp'] ('bspn', 'aspn')\n        \"\"\"", "\n", "decoded", "=", "{", "}", "\n", "eos_a_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_a>'", "]", ")", "[", "0", "]", "\n", "eos_r_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_r>'", "]", ")", "[", "0", "]", "\n", "eos_b_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_b>'", "]", ")", "[", "0", "]", "\n", "\n", "# eos_r may not exists if gpt2 generated repetitive words.", "\n", "if", "eos_r_id", "in", "generated", ":", "\n", "            ", "eos_r_idx", "=", "generated", ".", "index", "(", "eos_r_id", ")", "\n", "", "else", ":", "\n", "            ", "eos_r_idx", "=", "len", "(", "generated", ")", "-", "1", "\n", "logging", ".", "info", "(", "'eos_r not in generated: '", "+", "self", ".", "tokenizer", ".", "decode", "(", "generated", ")", ")", "\n", "# eos_r_idx = generated.index(eos_r_id) if eos_r_id in generated else len(generated)-1", "\n", "\n", "", "if", "cfg", ".", "use_true_curr_aspn", ":", "# only predict resp", "\n", "            ", "decoded", "[", "'resp'", "]", "=", "generated", "[", ":", "eos_r_idx", "+", "1", "]", "\n", "", "else", ":", "# predicted aspn, resp", "\n", "            ", "eos_a_idx", "=", "generated", ".", "index", "(", "eos_a_id", ")", "\n", "decoded", "[", "'aspn'", "]", "=", "generated", "[", ":", "eos_a_idx", "+", "1", "]", "\n", "decoded", "[", "'resp'", "]", "=", "generated", "[", "eos_a_idx", "+", "1", ":", "eos_r_idx", "+", "1", "]", "\n", "# if cfg.use_true_curr_bspn:", "\n", "\n", "# else:  # predict bspn aspn resp", "\n", "#     eos_b_idx = generated.index(eos_b_id)", "\n", "#     eos_a_idx = generated.index(eos_a_id)", "\n", "#     decoded['bspn'] = generated[: eos_b_idx+1]", "\n", "#     decoded['aspn'] = generated[eos_b_idx+1: eos_a_idx+1]", "\n", "#     decoded['resp'] = generated[eos_a_idx+1: eos_r_idx+1]", "\n", "", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.decode_generated_bspn": [[593, 600], ["train_DST.Modal.tokenizer.encode", "generated.index", "len"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode"], ["", "def", "decode_generated_bspn", "(", "self", ",", "generated", ")", ":", "\n", "        ", "eos_b_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_b>'", "]", ")", "[", "0", "]", "\n", "if", "eos_b_id", "in", "generated", ":", "\n", "            ", "eos_b_idx", "=", "generated", ".", "index", "(", "eos_b_id", ")", "\n", "", "else", ":", "\n", "            ", "eos_b_idx", "=", "len", "(", "generated", ")", "-", "1", "\n", "", "return", "generated", "[", ":", "eos_b_idx", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.Modal.rule_based_bs_fix": [[601, 640], ["train_DST.Modal.tokenizer.decode", "train_DST.Modal.tokenizer.decode", "dst.paser_bs", "bs.split.split.split", "bspn2.append", "train_DST.Modal.tokenizer.encode", "train_DST.Modal.tokenizer.encode", "bs.split.split.split", "bs.split.split.split", "bspn2.append", "dst.paser_bs.remove"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.dst.paser_bs", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode"], ["", "def", "rule_based_bs_fix", "(", "self", ",", "context", ",", "bspn", ")", ":", "\n", "        ", "context", "=", "self", ".", "tokenizer", ".", "decode", "(", "context", ")", "\n", "bspn", "=", "self", ".", "tokenizer", ".", "decode", "(", "bspn", ")", "\n", "triple_bs", "=", "paser_bs", "(", "bspn", ")", "\n", "flag", "=", "False", "\n", "for", "bs", "in", "triple_bs", ":", "\n", "            ", "value", "=", "bs", ".", "split", "(", ")", "[", "2", ":", "]", "\n", "slot", "=", "bs", ".", "split", "(", ")", "[", "1", "]", "\n", "for", "v", "in", "value", ":", "\n", "                ", "if", "v", "not", "in", "context", "and", "v", "!=", "'centre'", "and", "slot", "==", "'name'", ":", "\n", "                    ", "flag", "=", "True", "\n", "triple_bs", ".", "remove", "(", "bs", ")", "\n", "break", "\n", "\n", "", "", "", "bspn2", "=", "[", "]", "\n", "for", "bs", "in", "triple_bs", ":", "\n", "            ", "bs", "=", "bs", ".", "split", "(", ")", "\n", "d", "=", "bs", "[", "0", "]", "\n", "sv", "=", "' '", ".", "join", "(", "bs", "[", "1", ":", "]", ")", "\n", "if", "d", "not", "in", "bspn2", ":", "\n", "                ", "bspn2", ".", "append", "(", "d", ")", "\n", "", "bspn2", ".", "append", "(", "sv", ")", "\n", "\n", "", "bspn2", "=", "[", "'<sos_b>'", "]", "+", "bspn2", "+", "[", "'<eos_b>'", "]", "\n", "bspn2", "=", "' '", ".", "join", "(", "bspn2", ")", "\n", "if", "flag", ":", "\n", "# logging.info(\"Context {}\".format(context))", "\n", "# logging.info(\"Bspn {}\".format(bspn))", "\n", "# logging.info(\"Bspn2 {}\".format(bspn2))", "\n", "# logging.info(\"\")", "\n", "# if self.tokenizer.encode(bspn) != self.tokenizer.encode(bspn2):", "\n", "#     logging.info(\"Context {}\".format(context))", "\n", "#     logging.info(\"Bspn1 {}\".format(bspn))", "\n", "#     logging.info(\"Bspn1\u3000ids {}\".format(str(self.tokenizer.encode(bspn))))", "\n", "#     logging.info(\"Bspn2 {}\".format(bspn2))", "\n", "#     logging.info(\"Bspn2\u3000ids {}\".format(str(self.tokenizer.encode(bspn2))))", "\n", "            ", "return", "self", ".", "tokenizer", ".", "encode", "(", "bspn2", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "tokenizer", ".", "encode", "(", "bspn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.parse_arg_cfg": [[641, 659], ["tuple", "type", "setattr", "pair.split", "getattr", "type", "ValueError", "dtype.split", "type.", "int"], "function", ["None"], ["", "", "", "def", "parse_arg_cfg", "(", "args", ")", ":", "\n", "# add args to cfg", "\n", "    ", "if", "args", ".", "cfg", ":", "\n", "        ", "for", "pair", "in", "args", ".", "cfg", ":", "\n", "            ", "k", ",", "v", "=", "tuple", "(", "pair", ".", "split", "(", "'='", ")", ")", "\n", "dtype", "=", "type", "(", "getattr", "(", "cfg", ",", "k", ")", ")", "\n", "if", "dtype", "==", "type", "(", "None", ")", ":", "\n", "                ", "raise", "ValueError", "(", ")", "\n", "", "if", "dtype", "is", "bool", ":", "\n", "                ", "v", "=", "False", "if", "v", "==", "'False'", "else", "True", "\n", "", "elif", "dtype", "is", "list", ":", "\n", "                ", "v", "=", "v", ".", "split", "(", "','", ")", "\n", "if", "k", "==", "'cuda_device'", ":", "\n", "                    ", "v", "=", "[", "int", "(", "no", ")", "for", "no", "in", "v", "]", "\n", "", "", "else", ":", "\n", "                ", "v", "=", "dtype", "(", "v", ")", "\n", "", "setattr", "(", "cfg", ",", "k", ",", "v", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train_DST.main": [[661, 730], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.global_config._init_logging_handler", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "random.seed", "numpy.random.seed", "train_DST.Modal", "os.path.exists", "os.mkdir", "train_DST.parse_arg_cfg", "train_DST.parse_arg_cfg", "torch.device", "torch.device", "logging.info", "train_DST.Modal.train", "os.path.join", "os.path.join", "os.path.join", "len", "torch.device", "torch.device", "torch.cuda.current_device", "torch.cuda.current_device", "logging.info", "train_DST.Modal.validate_URURU", "os.path.exists", "os.mkdir", "logging.info", "train_DST.Modal.validate"], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.config21._Config._init_logging_handler", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.parse_arg_cfg", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.parse_arg_cfg", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.train", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.validate_URURU", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.validate"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./experiments'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'./experiments'", ")", "\n", "\n", "", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-mode'", ")", "\n", "parser", ".", "add_argument", "(", "'-cfg'", ",", "nargs", "=", "'*'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "cfg", ".", "mode", "=", "args", ".", "mode", "\n", "if", "args", ".", "mode", "==", "'test'", "or", "args", ".", "mode", "==", "'adjust'", ":", "\n", "        ", "parse_arg_cfg", "(", "args", ")", "\n", "# cfg.model_path = cfg.eval_load_path", "\n", "cfg", ".", "gpt_path", "=", "cfg", ".", "eval_load_path", "\n", "", "else", ":", "# train", "\n", "        ", "parse_arg_cfg", "(", "args", ")", "\n", "if", "cfg", ".", "exp_path", "in", "[", "''", ",", "'to be generated'", "]", ":", "\n", "# log file path, control the factors: seed, learning_rate, batch_size, early_stop_count, weight decay...", "\n", "# cfg.exp_path = 'experiments/{}_{}_sd{}_lr{}_bs{}_sp{}_dc{}/'.format('-'.join(cfg.exp_domains),", "\n", "#                                                                     cfg.exp_no, cfg.seed, cfg.lr, cfg.batch_size,", "\n", "#                                                                     cfg.early_stop_count, cfg.weight_decay_count)", "\n", "            ", "cfg", ".", "exp_path", "=", "'experiments/{}_{}_sd{}_lr{}_bs{}_ga{}'", ".", "format", "(", "'-'", ".", "join", "(", "cfg", ".", "exp_domains", ")", ",", "\n", "cfg", ".", "exp_no", ",", "cfg", ".", "seed", ",", "cfg", ".", "lr", ",", "cfg", ".", "batch_size", ",", "\n", "cfg", ".", "gradient_accumulation_steps", ")", "\n", "if", "cfg", ".", "save_log", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "exp_path", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "cfg", ".", "exp_path", ")", "\n", "\n", "# to gpt later", "\n", "", "", "cfg", ".", "model_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "exp_path", ",", "'model.pkl'", ")", "\n", "cfg", ".", "result_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "exp_path", ",", "'result.csv'", ")", "\n", "cfg", ".", "vocab_path_eval", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "exp_path", ",", "'vocab'", ")", "\n", "cfg", ".", "eval_load_path", "=", "cfg", ".", "exp_path", "\n", "\n", "", "", "cfg", ".", "_init_logging_handler", "(", "args", ".", "mode", ")", "\n", "if", "cfg", ".", "cuda", ":", "\n", "        ", "if", "len", "(", "cfg", ".", "cuda_device", ")", "==", "1", ":", "\n", "            ", "cfg", ".", "multi_gpu", "=", "False", "\n", "# torch.cuda.set_device(cfg.cuda_device[0])", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "cfg", ".", "cuda_device", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "pass", "# multi-gpu", "\n", "", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "logging", ".", "info", "(", "'Device: {}'", ".", "format", "(", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", ")", "\n", "\n", "# fix random seed", "\n", "", "torch", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "random", ".", "seed", "(", "cfg", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "cfg", ".", "seed", ")", "\n", "\n", "# initialize model", "\n", "m", "=", "Modal", "(", "device", ")", "\n", "\n", "if", "args", ".", "mode", "==", "'train'", ":", "# train", "\n", "        ", "if", "cfg", ".", "save_log", ":", "# save cfg details.", "\n", "            ", "pass", "\n", "", "m", ".", "train", "(", ")", "\n", "", "elif", "args", ".", "mode", "==", "'adjuest'", ":", "\n", "        ", "pass", "\n", "", "elif", "cfg", ".", "context_scheme", "==", "'URURU'", ":", "# test", "\n", "# m.validate_URURU()", "\n", "        ", "logging", ".", "info", "(", "'Running eavl on test'", ")", "\n", "m", ".", "validate_URURU", "(", "'test'", ")", "\n", "", "elif", "cfg", ".", "context_scheme", "==", "'UBARU'", ":", "\n", "# m.validate()", "\n", "        ", "logging", ".", "info", "(", "'Running eavl on test'", ")", "\n", "m", ".", "validate", "(", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.config._Config.__init__": [[4, 6], ["config._Config._multiwoz_damd_init"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.config21._Config._multiwoz_damd_init"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_multiwoz_damd_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.config._Config._multiwoz_damd_init": [[7, 124], ["time.strftime", "time.localtime"], "methods", ["None"], ["", "def", "_multiwoz_damd_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "gpt_path", "=", "'distilgpt2'", "\n", "\n", "self", ".", "vocab_path_train", "=", "'./data/multi-woz-processed/vocab'", "\n", "self", ".", "vocab_path_eval", "=", "None", "\n", "self", ".", "data_path", "=", "'./data/multi-woz-processed/'", "\n", "self", ".", "data_file", "=", "'data_for_damd.json'", "\n", "self", ".", "dev_list", "=", "'data/multi-woz/valListFile.json'", "\n", "self", ".", "test_list", "=", "'data/multi-woz/testListFile.json'", "\n", "self", ".", "dbs", "=", "{", "\n", "'attraction'", ":", "'db/attraction_db_processed.json'", ",", "\n", "'hospital'", ":", "'db/hospital_db_processed.json'", ",", "\n", "'hotel'", ":", "'db/hotel_db_processed.json'", ",", "\n", "'police'", ":", "'db/police_db_processed.json'", ",", "\n", "'restaurant'", ":", "'db/restaurant_db_processed.json'", ",", "\n", "'taxi'", ":", "'db/taxi_db_processed.json'", ",", "\n", "'train'", ":", "'db/train_db_processed.json'", ",", "\n", "}", "\n", "self", ".", "glove_path", "=", "'./data/glove/glove.6B.50d.txt'", "\n", "self", ".", "domain_file_path", "=", "'data/multi-woz-processed/domain_files.json'", "\n", "self", ".", "slot_value_set_path", "=", "'db/value_set_processed.json'", "\n", "self", ".", "multi_acts_path", "=", "'data/multi-woz-processed/multi_act_mapping_train.json'", "\n", "self", ".", "exp_path", "=", "'to be generated'", "\n", "self", ".", "log_time", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "\n", "# experiment settings", "\n", "self", ".", "mode", "=", "'unknown'", "\n", "self", ".", "cuda", "=", "True", "\n", "self", ".", "cuda_device", "=", "[", "3", "]", "\n", "self", ".", "exp_no", "=", "''", "\n", "self", ".", "seed", "=", "11", "\n", "self", ".", "save_log", "=", "True", "# tensorboard ", "\n", "self", ".", "evaluate_during_training", "=", "False", "# evaluate during training", "\n", "self", ".", "report_interval", "=", "200", "# 485 for bs 128", "\n", "self", ".", "max_nl_length", "=", "60", "\n", "self", ".", "max_span_length", "=", "30", "\n", "self", ".", "truncated", "=", "False", "\n", "\n", "# training settings", "\n", "self", ".", "lr", "=", "1e-4", "\n", "self", ".", "warmup_steps", "=", "-", "1", "\n", "self", ".", "weight_decay", "=", "0.0", "\n", "self", ".", "gradient_accumulation_steps", "=", "16", "\n", "self", ".", "batch_size", "=", "2", "\n", "\n", "self", ".", "label_smoothing", "=", ".0", "\n", "self", ".", "lr_decay", "=", "0.5", "\n", "self", ".", "epoch_num", "=", "40", "\n", "self", ".", "early_stop_count", "=", "5", "\n", "self", ".", "weight_decay_count", "=", "3", "\n", "self", ".", "teacher_force", "=", "100", "\n", "self", ".", "multi_acts_training", "=", "False", "\n", "self", ".", "multi_act_sampling_num", "=", "1", "\n", "self", ".", "valid_loss", "=", "'score'", "\n", "\n", "# evaluation settings", "\n", "self", ".", "eval_load_path", "=", "'experiments/all_0729_sd11_lr0.0001_bs2_ga16/epoch43_trloss0.56_gpt2'", "\n", "self", ".", "model_output", "=", "'model_output_e2e_FFFT_fix_bs.json'", "\n", "self", ".", "eval_per_domain", "=", "False", "\n", "\n", "### my setting", "\n", "self", ".", "use_true_prev_bspn", "=", "False", "\n", "self", ".", "use_true_prev_aspn", "=", "False", "\n", "self", ".", "use_true_db_pointer", "=", "False", "\n", "self", ".", "use_true_prev_resp", "=", "False", "\n", "\n", "self", ".", "use_true_curr_bspn", "=", "False", "\n", "self", ".", "use_true_curr_aspn", "=", "False", "\n", "self", ".", "use_all_previous_context", "=", "True", "\n", "\n", "self", ".", "context_scheme", "=", "'UBARU'", "# UBARU or URURU", "\n", "\n", "self", ".", "exp_domains", "=", "[", "'all'", "]", "# hotel,train, attraction, restaurant, taxi", "\n", "self", ".", "log_path", "=", "'logs_test'", "\n", "self", ".", "low_resource", "=", "False", "\n", "###", "\n", "\n", "## dst setting", "\n", "self", ".", "fix_bs", "=", "True", "\n", "self", ".", "use_nodelex_resp", "=", "True", "\n", "self", ".", "max_context_length", "=", "900", "\n", "##", "\n", "\n", "# model settings", "\n", "self", ".", "vocab_size", "=", "3000", "\n", "self", ".", "embed_size", "=", "50", "\n", "self", ".", "hidden_size", "=", "100", "\n", "self", ".", "pointer_dim", "=", "6", "# fixed", "\n", "self", ".", "enc_layer_num", "=", "1", "\n", "self", ".", "dec_layer_num", "=", "1", "\n", "self", ".", "dropout", "=", "0", "\n", "self", ".", "layer_norm", "=", "False", "\n", "self", ".", "skip_connect", "=", "False", "\n", "self", ".", "encoder_share", "=", "False", "\n", "self", ".", "attn_param_share", "=", "False", "\n", "self", ".", "copy_param_share", "=", "False", "\n", "self", ".", "enable_aspn", "=", "True", "\n", "self", ".", "use_pvaspn", "=", "False", "\n", "self", ".", "enable_bspn", "=", "True", "\n", "self", ".", "bspn_mode", "=", "'bspn'", "# 'bspn' or 'bsdx'", "\n", "self", ".", "enable_dspn", "=", "False", "# removed", "\n", "self", ".", "enable_dst", "=", "False", "\n", "\n", "self", ".", "use_true_bspn_for_ctr_eval", "=", "True", "\n", "self", ".", "use_true_domain_for_ctr_eval", "=", "True", "\n", "self", ".", "limit_bspn_vocab", "=", "False", "\n", "self", ".", "limit_aspn_vocab", "=", "False", "\n", "self", ".", "same_eval_as_cambridge", "=", "True", "\n", "self", ".", "same_eval_act_f1_as_hdsa", "=", "False", "\n", "self", ".", "aspn_decode_mode", "=", "'greedy'", "#beam, greedy, nucleur_sampling, topk_sampling", "\n", "self", ".", "beam_width", "=", "5", "\n", "self", ".", "nbest", "=", "5", "\n", "self", ".", "beam_diverse_param", "=", "0.2", "\n", "self", ".", "act_selection_scheme", "=", "'high_test_act_f1'", "\n", "self", ".", "topk_num", "=", "1", "\n", "self", ".", "nucleur_p", "=", "0.", "\n", "self", ".", "record_mode", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.config._Config.__str__": [[125, 130], ["config._Config.__dict__.items"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "s", "+=", "'{} : {}\\n'", ".", "format", "(", "k", ",", "v", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.config._Config._init_logging_handler": [[132, 149], ["logging.StreamHandler", "logging.getLogger", "logging.getLogger.setLevel", "os.path.exists", "os.mkdir", "logging.FileHandler", "logging.basicConfig", "os.path.join", "logging.FileHandler", "logging.basicConfig", "logging.basicConfig"], "methods", ["None"], ["", "def", "_init_logging_handler", "(", "self", ",", "mode", ")", ":", "\n", "        ", "stderr_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./log'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'./log'", ")", "\n", "", "if", "self", ".", "save_log", "and", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "file_handler", "=", "logging", ".", "FileHandler", "(", "'./log/log_{}_{}_{}_{}_sd{}.txt'", ".", "format", "(", "self", ".", "log_time", ",", "mode", ",", "'-'", ".", "join", "(", "self", ".", "exp_domains", ")", ",", "self", ".", "exp_no", ",", "self", ".", "seed", ")", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "stderr_handler", ",", "file_handler", "]", ")", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "eval_log_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "eval_load_path", ",", "'eval_log.json'", ")", "\n", "# if os.path.exists(eval_log_path):", "\n", "#     os.remove(eval_log_path)", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "eval_log_path", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "stderr_handler", ",", "file_handler", "]", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "stderr_handler", "]", ")", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.compute_joint_acc.compute_jacc": [[8, 76], ["print", "data[].items", "dst.paser_bs", "dst.paser_bs", "dst.ignore_none", "dst.default_cleaning", "set", "set", "dst.paser_bs.remove", "bs.replace().strip.replace().strip", "new_turn_pred.append", "bs.replace().strip.split", "bs.replace().strip.replace", "dial.split"], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.dst.paser_bs", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.dst.paser_bs", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.dst.ignore_none", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.dst.default_cleaning"], ["def", "compute_jacc", "(", "data", ",", "path", ",", "default_cleaning_flag", "=", "True", ",", "type2_cleaning_flag", "=", "False", ")", ":", "\n", "    ", "num_turns", "=", "0", "\n", "joint_acc", "=", "0", "\n", "error", "=", "{", "}", "\n", "clean_tokens", "=", "[", "'<|endoftext|>'", ",", "]", "\n", "for", "file_name", "in", "data", ":", "\n", "        ", "for", "turn_id", ",", "turn_data", "in", "data", "[", "file_name", "]", ".", "items", "(", ")", ":", "\n", "            ", "turn_target", "=", "turn_data", "[", "'bspn'", "]", "\n", "turn_pred", "=", "turn_data", "[", "'bspn_gen'", "]", "\n", "turn_target", "=", "paser_bs", "(", "turn_target", ")", "\n", "turn_pred", "=", "paser_bs", "(", "turn_pred", ")", "\n", "# clean", "\n", "for", "bs", "in", "turn_pred", ":", "\n", "                ", "if", "bs", "in", "clean_tokens", "+", "[", "''", ",", "' '", "]", "or", "bs", ".", "split", "(", ")", "[", "-", "1", "]", "==", "'none'", ":", "\n", "                    ", "turn_pred", ".", "remove", "(", "bs", ")", "\n", "\n", "", "", "new_turn_pred", "=", "[", "]", "\n", "for", "bs", "in", "turn_pred", ":", "\n", "                ", "for", "tok", "in", "clean_tokens", ":", "\n", "                    ", "bs", "=", "bs", ".", "replace", "(", "tok", ",", "''", ")", ".", "strip", "(", ")", "\n", "new_turn_pred", ".", "append", "(", "bs", ")", "\n", "", "", "turn_pred", "=", "new_turn_pred", "\n", "\n", "turn_pred", ",", "turn_target", "=", "ignore_none", "(", "turn_pred", ",", "turn_target", ")", "\n", "\n", "# MultiWOZ default cleaning", "\n", "if", "default_cleaning_flag", ":", "\n", "                ", "turn_pred", ",", "turn_target", "=", "default_cleaning", "(", "turn_pred", ",", "turn_target", ")", "\n", "\n", "", "join_flag", "=", "False", "\n", "if", "set", "(", "turn_target", ")", "==", "set", "(", "turn_pred", ")", ":", "\n", "                ", "joint_acc", "+=", "1", "\n", "join_flag", "=", "True", "\n", "\n", "", "elif", "type2_cleaning_flag", ":", "# check for possible Type 2 noisy annotations", "\n", "                ", "flag", "=", "True", "\n", "for", "bs", "in", "turn_target", ":", "\n", "                    ", "if", "bs", "not", "in", "turn_pred", ":", "\n", "                        ", "flag", "=", "False", "\n", "break", "\n", "", "", "if", "flag", ":", "\n", "                    ", "for", "bs", "in", "turn_pred", ":", "\n", "                        ", "if", "bs", "not", "in", "turn_target", ":", "\n", "                            ", "flag", "=", "False", "\n", "break", "\n", "\n", "", "", "", "if", "flag", ":", "# model prediction might be correct if found in Type 2 list of noisy annotations", "\n", "                    ", "dial_name", "=", "dial", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "dial_name", "in", "IGNORE_TURNS_TYPE2", "and", "turn_id", "in", "IGNORE_TURNS_TYPE2", "[", "dial_name", "]", ":", "# ignore these turns", "\n", "                        ", "pass", "\n", "", "else", ":", "\n", "                        ", "joint_acc", "+=", "1", "\n", "join_flag", "=", "True", "\n", "", "", "", "if", "not", "join_flag", ":", "\n", "                ", "if", "file_name", "not", "in", "error", ":", "\n", "                    ", "error", "[", "file_name", "]", "=", "{", "}", "\n", "", "turn_data", "[", "'gtbs'", "]", "=", "turn_target", "\n", "turn_data", "[", "'predbs'", "]", "=", "turn_pred", "\n", "error", "[", "file_name", "]", "[", "turn_id", "]", "=", "turn_data", "\n", "\n", "", "num_turns", "+=", "1", "\n", "\n", "", "", "joint_acc", "/=", "num_turns", "\n", "\n", "print", "(", "'joint accuracy: {}'", ".", "format", "(", "joint_acc", ")", ")", "\n", "# with open(path+'bs_error.json',\"w\") as f:", "\n", "#     json.dump(error,f,indent=2)", "\n", "return", "joint_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.data_analysis.analysis": [[18, 150], ["set", "zipfile.ZipFile", "zipfile.ZipFile.open().read().decode().lower", "list", "json.loads", "json.loads.items", "set", "goals.items", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "open", "json.dump", "open", "json.dump", "open", "json.dump", "print", "open", "json.dump", "open", "json.dump", "open", "collections.OrderedDict", "json.dump", "open", "json.dump", "open", "json.dump", "zipfile.ZipFile.open().read().decode", "re.findall", "list", "len", "[].append", "meta.items", "[].append", "goals[].get", "goals[].get", "goals[].get", "list", "dom_count.items", "dom_count.items", "dom_count.items", "zipfile.ZipFile.open().read", "book.items", "semi.items", "dom_count.get", "dom_fnlist.get", "dom_fnlist[].append", "dom_count.get", "dom_fnlist.get", "dom_fnlist[].append", "set.add", "copy.deepcopy().items", "set.add", "zipfile.ZipFile.open", "turn_dict[].get", "copy.deepcopy"], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["def", "analysis", "(", ")", ":", "\n", "    ", "compressed_raw_data", "=", "{", "}", "\n", "goal_of_dials", "=", "{", "}", "\n", "req_slots", "=", "{", "}", "\n", "info_slots", "=", "{", "}", "\n", "dom_count", "=", "{", "}", "\n", "dom_fnlist", "=", "{", "}", "\n", "all_domain_specific_slots", "=", "set", "(", ")", "\n", "for", "domain", "in", "domains", ":", "\n", "        ", "req_slots", "[", "domain", "]", "=", "[", "]", "\n", "info_slots", "[", "domain", "]", "=", "[", "]", "\n", "\n", "", "archive", "=", "zipfile", ".", "ZipFile", "(", "data_path", "+", "data_file", "+", "'.zip'", ",", "'r'", ")", "\n", "data", "=", "archive", ".", "open", "(", "data_file", ",", "'r'", ")", ".", "read", "(", ")", ".", "decode", "(", "'utf-8'", ")", ".", "lower", "(", ")", "\n", "ref_nos", "=", "list", "(", "set", "(", "re", ".", "findall", "(", "r'\\\"reference\\\"\\: \\\"(\\w+)\\\"'", ",", "data", ")", ")", ")", "\n", "data", "=", "json", ".", "loads", "(", "data", ")", "\n", "\n", "for", "fn", ",", "dial", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "goals", "=", "dial", "[", "'goal'", "]", "\n", "logs", "=", "dial", "[", "'log'", "]", "\n", "\n", "# get compressed_raw_data and goal_of_dials", "\n", "compressed_raw_data", "[", "fn", "]", "=", "{", "'goal'", ":", "{", "}", ",", "'log'", ":", "[", "]", "}", "\n", "goal_of_dials", "[", "fn", "]", "=", "{", "}", "\n", "for", "dom", ",", "goal", "in", "goals", ".", "items", "(", ")", ":", "# get goal of domains that are in demmand", "\n", "            ", "if", "dom", "!=", "'topic'", "and", "dom", "!=", "'message'", "and", "goal", ":", "\n", "                ", "compressed_raw_data", "[", "fn", "]", "[", "'goal'", "]", "[", "dom", "]", "=", "goal", "\n", "goal_of_dials", "[", "fn", "]", "[", "dom", "]", "=", "goal", "\n", "\n", "", "", "for", "turn", "in", "logs", ":", "\n", "            ", "if", "not", "turn", "[", "'metadata'", "]", ":", "# user's turn", "\n", "                ", "compressed_raw_data", "[", "fn", "]", "[", "'log'", "]", ".", "append", "(", "{", "'text'", ":", "turn", "[", "'text'", "]", "}", ")", "\n", "", "else", ":", "# system's turn", "\n", "                ", "meta", "=", "turn", "[", "'metadata'", "]", "\n", "turn_dict", "=", "{", "'text'", ":", "turn", "[", "'text'", "]", ",", "'metadata'", ":", "{", "}", "}", "\n", "for", "dom", ",", "book_semi", "in", "meta", ".", "items", "(", ")", ":", "# for every domain, sys updates \"book\" and \"semi\"", "\n", "                    ", "book", ",", "semi", "=", "book_semi", "[", "'book'", "]", ",", "book_semi", "[", "'semi'", "]", "\n", "record", "=", "False", "\n", "for", "slot", ",", "value", "in", "book", ".", "items", "(", ")", ":", "# record indicates non-empty-book domain", "\n", "                        ", "if", "value", "not", "in", "[", "''", ",", "[", "]", "]", ":", "\n", "                            ", "record", "=", "True", "\n", "", "", "if", "record", ":", "\n", "                        ", "turn_dict", "[", "'metadata'", "]", "[", "dom", "]", "=", "{", "}", "\n", "turn_dict", "[", "'metadata'", "]", "[", "dom", "]", "[", "'book'", "]", "=", "book", "# add that domain's book", "\n", "", "record", "=", "False", "\n", "for", "slot", ",", "value", "in", "semi", ".", "items", "(", ")", ":", "# here record indicates non-empty-semi domain", "\n", "                        ", "if", "value", "not", "in", "[", "''", ",", "[", "]", "]", ":", "\n", "                            ", "record", "=", "True", "\n", "break", "\n", "", "", "if", "record", ":", "\n", "                        ", "for", "s", ",", "v", "in", "copy", ".", "deepcopy", "(", "semi", ")", ".", "items", "(", ")", ":", "\n", "                            ", "if", "v", "==", "'not mentioned'", ":", "\n", "                                ", "del", "semi", "[", "s", "]", "\n", "", "", "if", "not", "turn_dict", "[", "'metadata'", "]", ".", "get", "(", "dom", ")", ":", "\n", "                            ", "turn_dict", "[", "'metadata'", "]", "[", "dom", "]", "=", "{", "}", "\n", "", "turn_dict", "[", "'metadata'", "]", "[", "dom", "]", "[", "'semi'", "]", "=", "semi", "# add that domain's semi", "\n", "", "", "compressed_raw_data", "[", "fn", "]", "[", "'log'", "]", ".", "append", "(", "turn_dict", ")", "# add to log the compressed turn_dict", "\n", "\n", "\n", "# get domain statistics", "\n", "", "dial_type", "=", "'multi'", "if", "'mul'", "in", "fn", "or", "'MUL'", "in", "fn", "else", "'single'", "# determine the dialog's type: sinle or multi", "\n", "if", "fn", "in", "[", "'pmul2756.json'", ",", "'pmul4958.json'", ",", "'pmul3599.json'", "]", ":", "\n", "                ", "dial_type", "=", "'single'", "\n", "", "dial_domains", "=", "[", "dom", "for", "dom", "in", "domains", "if", "goals", "[", "dom", "]", "]", "# domains that are in demmand", "\n", "dom_str", "=", "''", "\n", "for", "dom", "in", "dial_domains", ":", "\n", "                ", "if", "not", "dom_count", ".", "get", "(", "dom", "+", "'_'", "+", "dial_type", ")", ":", "# count each domain type, with single or multi considered", "\n", "                    ", "dom_count", "[", "dom", "+", "'_'", "+", "dial_type", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "dom_count", "[", "dom", "+", "'_'", "+", "dial_type", "]", "+=", "1", "\n", "", "if", "not", "dom_fnlist", ".", "get", "(", "dom", "+", "'_'", "+", "dial_type", ")", ":", "# keep track the file number of each domain type", "\n", "                    ", "dom_fnlist", "[", "dom", "+", "'_'", "+", "dial_type", "]", "=", "[", "fn", "]", "\n", "", "else", ":", "\n", "                    ", "dom_fnlist", "[", "dom", "+", "'_'", "+", "dial_type", "]", ".", "append", "(", "fn", ")", "\n", "", "dom_str", "+=", "'%s_'", "%", "dom", "\n", "", "dom_str", "=", "dom_str", "[", ":", "-", "1", "]", "# substract the last char in dom_str", "\n", "if", "dial_type", "==", "'multi'", ":", "# count multi-domains", "\n", "                ", "if", "not", "dom_count", ".", "get", "(", "dom_str", ")", ":", "\n", "                    ", "dom_count", "[", "dom_str", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "dom_count", "[", "dom_str", "]", "+=", "1", "\n", "", "if", "not", "dom_fnlist", ".", "get", "(", "dom_str", ")", ":", "\n", "                    ", "dom_fnlist", "[", "dom_str", "]", "=", "[", "fn", "]", "\n", "", "else", ":", "\n", "                    ", "dom_fnlist", "[", "dom_str", "]", ".", "append", "(", "fn", ")", "\n", "######", "\n", "\n", "# get informable and requestable slots statistics", "\n", "", "", "for", "domain", "in", "domains", ":", "\n", "                ", "info_ss", "=", "goals", "[", "domain", "]", ".", "get", "(", "'info'", ",", "{", "}", ")", "\n", "book_ss", "=", "goals", "[", "domain", "]", ".", "get", "(", "'book'", ",", "{", "}", ")", "\n", "req_ss", "=", "goals", "[", "domain", "]", ".", "get", "(", "'reqt'", ",", "{", "}", ")", "\n", "for", "info_s", "in", "info_ss", ":", "\n", "                    ", "all_domain_specific_slots", ".", "add", "(", "domain", "+", "'-'", "+", "info_s", ")", "\n", "if", "info_s", "not", "in", "info_slots", "[", "domain", "]", ":", "\n", "                        ", "info_slots", "[", "domain", "]", "+=", "[", "info_s", "]", "\n", "", "", "for", "book_s", "in", "book_ss", ":", "\n", "                    ", "if", "'book_'", "+", "book_s", "not", "in", "info_slots", "[", "domain", "]", "and", "book_s", "not", "in", "[", "'invalid'", ",", "'pre_invalid'", "]", ":", "\n", "                        ", "all_domain_specific_slots", ".", "add", "(", "domain", "+", "'-'", "+", "book_s", ")", "\n", "info_slots", "[", "domain", "]", "+=", "[", "'book_'", "+", "book_s", "]", "\n", "", "", "for", "req_s", "in", "req_ss", ":", "\n", "                    ", "if", "req_s", "not", "in", "req_slots", "[", "domain", "]", ":", "\n", "                        ", "req_slots", "[", "domain", "]", "+=", "[", "req_s", "]", "\n", "\n", "\n", "\n", "# result statistics", "\n", "", "", "", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path_exp", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "save_path_exp", ")", "\n", "", "with", "open", "(", "save_path", "+", "'req_slots.json'", ",", "'w'", ")", "as", "sf", ":", "\n", "        ", "json", ".", "dump", "(", "req_slots", ",", "sf", ",", "indent", "=", "2", ")", "\n", "", "with", "open", "(", "save_path", "+", "'info_slots.json'", ",", "'w'", ")", "as", "sf", ":", "\n", "        ", "json", ".", "dump", "(", "info_slots", ",", "sf", ",", "indent", "=", "2", ")", "\n", "", "with", "open", "(", "save_path", "+", "'all_domain_specific_info_slots.json'", ",", "'w'", ")", "as", "sf", ":", "\n", "        ", "json", ".", "dump", "(", "list", "(", "all_domain_specific_slots", ")", ",", "sf", ",", "indent", "=", "2", ")", "\n", "print", "(", "\"slot num:\"", ",", "len", "(", "list", "(", "all_domain_specific_slots", ")", ")", ")", "\n", "", "with", "open", "(", "save_path", "+", "'goal_of_each_dials.json'", ",", "'w'", ")", "as", "sf", ":", "\n", "        ", "json", ".", "dump", "(", "goal_of_dials", ",", "sf", ",", "indent", "=", "2", ")", "\n", "", "with", "open", "(", "save_path", "+", "'compressed_data.json'", ",", "'w'", ")", "as", "sf", ":", "\n", "        ", "json", ".", "dump", "(", "compressed_raw_data", ",", "sf", ",", "indent", "=", "2", ")", "\n", "", "with", "open", "(", "save_path", "+", "'domain_count.json'", ",", "'w'", ")", "as", "sf", ":", "\n", "        ", "single_count", "=", "[", "d", "for", "d", "in", "dom_count", ".", "items", "(", ")", "if", "'single'", "in", "d", "[", "0", "]", "]", "\n", "multi_count", "=", "[", "d", "for", "d", "in", "dom_count", ".", "items", "(", ")", "if", "'multi'", "in", "d", "[", "0", "]", "]", "\n", "other_count", "=", "[", "d", "for", "d", "in", "dom_count", ".", "items", "(", ")", "if", "'multi'", "not", "in", "d", "[", "0", "]", "and", "'single'", "not", "in", "d", "[", "0", "]", "]", "\n", "dom_count_od", "=", "OrderedDict", "(", "single_count", "+", "multi_count", "+", "other_count", ")", "\n", "json", ".", "dump", "(", "dom_count_od", ",", "sf", ",", "indent", "=", "2", ")", "\n", "", "with", "open", "(", "save_path_exp", "+", "'reference_no.json'", ",", "'w'", ")", "as", "sf", ":", "\n", "        ", "json", ".", "dump", "(", "ref_nos", ",", "sf", ",", "indent", "=", "2", ")", "\n", "", "with", "open", "(", "save_path_exp", "+", "'domain_files.json'", ",", "'w'", ")", "as", "sf", ":", "\n", "        ", "json", ".", "dump", "(", "dom_fnlist", ",", "sf", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.dst.paser_bs": [[103, 123], ["sent.split.strip().strip", "sent.split.split", "enumerate", "list", "enumerate", "set", "sent.split.strip", "enumerate", "len", "belief_state.append", "len", "enumerate", "len", "len"], "function", ["None"], ["def", "paser_bs", "(", "sent", ")", ":", "\n", "    ", "\"\"\"Convert compacted bs span to triple list\n        Ex:  \n    \"\"\"", "\n", "sent", "=", "sent", ".", "strip", "(", "'<sos_b>'", ")", ".", "strip", "(", "'<eos_b>'", ")", "\n", "sent", "=", "sent", ".", "split", "(", ")", "\n", "belief_state", "=", "[", "]", "\n", "domain_idx", "=", "[", "idx", "for", "idx", ",", "token", "in", "enumerate", "(", "sent", ")", "if", "token", "in", "all_domain", "]", "\n", "for", "i", ",", "d_idx", "in", "enumerate", "(", "domain_idx", ")", ":", "\n", "        ", "next_d_idx", "=", "len", "(", "sent", ")", "if", "i", "+", "1", "==", "len", "(", "domain_idx", ")", "else", "domain_idx", "[", "i", "+", "1", "]", "\n", "domain", "=", "sent", "[", "d_idx", "]", "\n", "sub_span", "=", "sent", "[", "d_idx", "+", "1", ":", "next_d_idx", "]", "\n", "sub_s_idx", "=", "[", "idx", "for", "idx", ",", "token", "in", "enumerate", "(", "sub_span", ")", "if", "token", "in", "all_slots", "]", "\n", "for", "j", ",", "s_idx", "in", "enumerate", "(", "sub_s_idx", ")", ":", "\n", "            ", "next_s_idx", "=", "len", "(", "sub_span", ")", "if", "j", "==", "len", "(", "sub_s_idx", ")", "-", "1", "else", "sub_s_idx", "[", "j", "+", "1", "]", "\n", "slot", "=", "sub_span", "[", "s_idx", "]", "\n", "value", "=", "' '", ".", "join", "(", "sub_span", "[", "s_idx", "+", "1", ":", "next_s_idx", "]", ")", "\n", "bs", "=", "\" \"", ".", "join", "(", "[", "domain", ",", "slot", ",", "value", "]", ")", "\n", "belief_state", ".", "append", "(", "bs", ")", "\n", "", "", "return", "list", "(", "set", "(", "belief_state", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.dst.ignore_none": [[124, 152], ["clean_target_belief.append", "clean_pred_belief.append", "pred.replace", "dontcare_slots.append", "bs.split", "bs.split"], "function", ["None"], ["", "def", "ignore_none", "(", "pred_belief", ",", "target_belief", ")", ":", "\n", "    ", "for", "pred", "in", "pred_belief", ":", "\n", "        ", "if", "'catherine s'", "in", "pred", ":", "\n", "            ", "pred", ".", "replace", "(", "'catherine s'", ",", "'catherines'", ")", "\n", "\n", "", "", "clean_target_belief", "=", "[", "]", "\n", "clean_pred_belief", "=", "[", "]", "\n", "for", "bs", "in", "target_belief", ":", "\n", "        ", "if", "'not mentioned'", "in", "bs", "or", "'none'", "in", "bs", ":", "\n", "            ", "continue", "\n", "", "clean_target_belief", ".", "append", "(", "bs", ")", "\n", "\n", "", "for", "bs", "in", "pred_belief", ":", "\n", "        ", "if", "'not mentioned'", "in", "bs", "or", "'none'", "in", "bs", ":", "\n", "            ", "continue", "\n", "", "clean_pred_belief", ".", "append", "(", "bs", ")", "\n", "\n", "", "dontcare_slots", "=", "[", "]", "\n", "for", "bs", "in", "target_belief", ":", "\n", "        ", "if", "'dontcare'", "in", "bs", ":", "\n", "            ", "domain", "=", "bs", ".", "split", "(", ")", "[", "0", "]", "\n", "slot", "=", "bs", ".", "split", "(", ")", "[", "1", "]", "\n", "dontcare_slots", ".", "append", "(", "'{}_{}'", ".", "format", "(", "domain", ",", "slot", ")", ")", "\n", "\n", "", "", "target_belief", "=", "clean_target_belief", "\n", "pred_belief", "=", "clean_pred_belief", "\n", "\n", "return", "pred_belief", ",", "target_belief", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.dst.fix_mismatch_jason": [[154, 192], ["None"], "function", ["None"], ["", "def", "fix_mismatch_jason", "(", "slot", ",", "value", ")", ":", "\n", "# miss match slot and value", "\n", "    ", "if", "slot", "==", "\"type\"", "and", "value", "in", "[", "\"nigh\"", ",", "\"moderate -ly priced\"", ",", "\"bed and breakfast\"", ",", "\n", "\"centre\"", ",", "\"venetian\"", ",", "\"intern\"", ",", "\"a cheap -er hotel\"", "]", "or", "slot", "==", "\"internet\"", "and", "value", "==", "\"4\"", "or", "slot", "==", "\"pricerange\"", "and", "value", "==", "\"2\"", "or", "slot", "==", "\"type\"", "and", "value", "in", "[", "\"gastropub\"", ",", "\"la raza\"", ",", "\"galleria\"", ",", "\"gallery\"", ",", "\n", "\"science\"", ",", "\"m\"", "]", "or", "\"area\"", "in", "slot", "and", "value", "in", "[", "\"moderate\"", "]", "or", "\"day\"", "in", "slot", "and", "value", "==", "\"t\"", ":", "\n", "        ", "value", "=", "\"none\"", "\n", "", "elif", "slot", "==", "\"type\"", "and", "value", "in", "[", "\"hotel with free parking and free wifi\"", ",", "\"4\"", ",", "\n", "\"3 star hotel\"", "]", ":", "\n", "        ", "value", "=", "\"hotel\"", "\n", "", "elif", "slot", "==", "\"star\"", "and", "value", "==", "\"3 star hotel\"", ":", "\n", "        ", "value", "=", "\"3\"", "\n", "", "elif", "\"area\"", "in", "slot", ":", "\n", "        ", "if", "value", "==", "\"no\"", ":", "\n", "            ", "value", "=", "\"north\"", "\n", "", "elif", "value", "==", "\"we\"", ":", "\n", "            ", "value", "=", "\"west\"", "\n", "", "elif", "value", "==", "\"cent\"", ":", "\n", "            ", "value", "=", "\"centre\"", "\n", "", "", "elif", "\"day\"", "in", "slot", ":", "\n", "        ", "if", "value", "==", "\"we\"", ":", "\n", "            ", "value", "=", "\"wednesday\"", "\n", "", "elif", "value", "==", "\"no\"", ":", "\n", "            ", "value", "=", "\"none\"", "\n", "", "", "elif", "\"price\"", "in", "slot", "and", "value", "==", "\"ch\"", ":", "\n", "        ", "value", "=", "\"cheap\"", "\n", "", "elif", "\"internet\"", "in", "slot", "and", "value", "==", "\"free\"", ":", "\n", "        ", "value", "=", "\"yes\"", "\n", "\n", "# some out-of-define classification slot values", "\n", "", "if", "slot", "==", "\"area\"", "and", "value", "in", "[", "\"stansted airport\"", ",", "\"cambridge\"", ",", "\"silver street\"", "]", "or", "slot", "==", "\"area\"", "and", "value", "in", "[", "\"norwich\"", ",", "\"ely\"", ",", "\"museum\"", ",", "\"same area as hotel\"", "]", ":", "\n", "        ", "value", "=", "\"none\"", "\n", "", "return", "slot", ",", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.dst.default_cleaning": [[194, 233], ["dst.fix_mismatch_jason", "pred_belief_jason.append", "dst.fix_mismatch_jason", "target_belief_jason.append", "pred.split", "tgt.split", "pred.split", "tgt.split", "pred.split", "pred.split", "pred.split", "tgt.split", "tgt.split", "tgt.split"], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.dst.fix_mismatch_jason", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.dst.fix_mismatch_jason"], ["", "def", "default_cleaning", "(", "pred_belief", ",", "target_belief", ")", ":", "\n", "    ", "pred_belief_jason", "=", "[", "]", "\n", "target_belief_jason", "=", "[", "]", "\n", "for", "pred", "in", "pred_belief", ":", "\n", "        ", "if", "pred", "in", "[", "''", ",", "' '", "]", ":", "\n", "            ", "continue", "\n", "", "domain", "=", "pred", ".", "split", "(", ")", "[", "0", "]", "\n", "if", "'book'", "in", "pred", ":", "\n", "            ", "slot", "=", "' '", ".", "join", "(", "pred", ".", "split", "(", ")", "[", "1", ":", "3", "]", ")", "\n", "val", "=", "' '", ".", "join", "(", "pred", ".", "split", "(", ")", "[", "3", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "slot", "=", "pred", ".", "split", "(", ")", "[", "1", "]", "\n", "val", "=", "' '", ".", "join", "(", "pred", ".", "split", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "", "if", "slot", "in", "GENERAL_TYPO", ":", "\n", "            ", "val", "=", "GENERAL_TYPO", "[", "slot", "]", "\n", "\n", "", "slot", ",", "val", "=", "fix_mismatch_jason", "(", "slot", ",", "val", ")", "\n", "\n", "pred_belief_jason", ".", "append", "(", "'{} {} {}'", ".", "format", "(", "domain", ",", "slot", ",", "val", ")", ")", "\n", "\n", "", "for", "tgt", "in", "target_belief", ":", "\n", "        ", "domain", "=", "tgt", ".", "split", "(", ")", "[", "0", "]", "\n", "if", "'book'", "in", "tgt", ":", "\n", "            ", "slot", "=", "' '", ".", "join", "(", "tgt", ".", "split", "(", ")", "[", "1", ":", "3", "]", ")", "\n", "val", "=", "' '", ".", "join", "(", "tgt", ".", "split", "(", ")", "[", "3", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "slot", "=", "tgt", ".", "split", "(", ")", "[", "1", "]", "\n", "val", "=", "' '", ".", "join", "(", "tgt", ".", "split", "(", ")", "[", "2", ":", "]", ")", "\n", "\n", "", "if", "slot", "in", "GENERAL_TYPO", ":", "\n", "            ", "val", "=", "GENERAL_TYPO", "[", "slot", "]", "\n", "", "slot", ",", "val", "=", "fix_mismatch_jason", "(", "slot", ",", "val", ")", "\n", "target_belief_jason", ".", "append", "(", "'{} {} {}'", ".", "format", "(", "domain", ",", "slot", ",", "val", ")", ")", "\n", "\n", "", "turn_pred", "=", "pred_belief_jason", "\n", "turn_target", "=", "target_belief_jason", "\n", "\n", "return", "turn_pred", ",", "turn_target", "", "", ""]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.BLEUScorer.__init__": [[14, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.BLEUScorer.score": [[17, 68], ["math.fsum", "math.exp", "math.exp", "hyp.split", "ref.split", "range", "len", "range", "collections.Counter", "sum", "dict", "sum", "abs", "float", "float", "math.log", "zip", "nltk.util.ngrams", "collections.Counter.values", "collections.Counter", "dict.values", "len", "float", "float", "nltk.util.ngrams", "max", "len", "len", "max_counts.get", "min", "collections.Counter.items"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "parallel_corpus", ")", ":", "\n", "\n", "# containers", "\n", "        ", "count", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "clip_count", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "r", "=", "0", "\n", "c", "=", "0", "\n", "weights", "=", "[", "0.25", ",", "0.25", ",", "0.25", ",", "0.25", "]", "\n", "\n", "# accumulate ngram statistics", "\n", "for", "hyps", ",", "refs", "in", "parallel_corpus", ":", "\n", "            ", "hyps", "=", "[", "hyp", ".", "split", "(", ")", "for", "hyp", "in", "hyps", "]", "\n", "refs", "=", "[", "ref", ".", "split", "(", ")", "for", "ref", "in", "refs", "]", "\n", "for", "hyp", "in", "hyps", ":", "\n", "\n", "                ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "# accumulate ngram counts", "\n", "                    ", "hypcnts", "=", "Counter", "(", "ngrams", "(", "hyp", ",", "i", "+", "1", ")", ")", "\n", "cnt", "=", "sum", "(", "hypcnts", ".", "values", "(", ")", ")", "\n", "count", "[", "i", "]", "+=", "cnt", "\n", "\n", "# compute clipped counts", "\n", "max_counts", "=", "{", "}", "\n", "for", "ref", "in", "refs", ":", "\n", "                        ", "refcnts", "=", "Counter", "(", "ngrams", "(", "ref", ",", "i", "+", "1", ")", ")", "\n", "for", "ng", "in", "hypcnts", ":", "\n", "                            ", "max_counts", "[", "ng", "]", "=", "max", "(", "max_counts", ".", "get", "(", "ng", ",", "0", ")", ",", "refcnts", "[", "ng", "]", ")", "\n", "", "", "clipcnt", "=", "dict", "(", "(", "ng", ",", "min", "(", "count", ",", "max_counts", "[", "ng", "]", ")", ")", "for", "ng", ",", "count", "in", "hypcnts", ".", "items", "(", ")", ")", "\n", "clip_count", "[", "i", "]", "+=", "sum", "(", "clipcnt", ".", "values", "(", ")", ")", "\n", "\n", "# accumulate r & c", "\n", "", "bestmatch", "=", "[", "1000", ",", "1000", "]", "\n", "for", "ref", "in", "refs", ":", "\n", "                    ", "if", "bestmatch", "[", "0", "]", "==", "0", ":", "break", "\n", "diff", "=", "abs", "(", "len", "(", "ref", ")", "-", "len", "(", "hyp", ")", ")", "\n", "if", "diff", "<", "bestmatch", "[", "0", "]", ":", "\n", "                        ", "bestmatch", "[", "0", "]", "=", "diff", "\n", "bestmatch", "[", "1", "]", "=", "len", "(", "ref", ")", "\n", "", "", "r", "+=", "bestmatch", "[", "1", "]", "\n", "c", "+=", "len", "(", "hyp", ")", "\n", "\n", "# computing bleu score", "\n", "", "", "p0", "=", "1e-7", "\n", "bp", "=", "1", "if", "c", ">", "r", "else", "math", ".", "exp", "(", "1", "-", "float", "(", "r", ")", "/", "float", "(", "c", ")", ")", "\n", "p_ns", "=", "[", "float", "(", "clip_count", "[", "i", "]", ")", "/", "float", "(", "count", "[", "i", "]", "+", "p0", ")", "+", "p0", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "s", "=", "math", ".", "fsum", "(", "w", "*", "math", ".", "log", "(", "p_n", ")", "for", "w", ",", "p_n", "in", "zip", "(", "weights", ",", "p_ns", ")", "if", "p_n", ")", "\n", "bleu", "=", "bp", "*", "math", ".", "exp", "(", "s", ")", "\n", "return", "bleu", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.__init__": [[71, 87], ["eval.BLEUScorer", "ontology.informable_slots.items", "eval.MultiWozEvaluator.all_info_slot.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "reader", ")", ":", "\n", "        ", "self", ".", "reader", "=", "reader", "\n", "self", ".", "domains", "=", "ontology", ".", "all_domains", "\n", "self", ".", "domain_files", "=", "self", ".", "reader", ".", "domain_files", "\n", "self", ".", "all_data", "=", "self", ".", "reader", ".", "data", "\n", "self", ".", "test_data", "=", "self", ".", "reader", ".", "test", "\n", "\n", "self", ".", "bleu_scorer", "=", "BLEUScorer", "(", ")", "\n", "\n", "self", ".", "all_info_slot", "=", "[", "]", "\n", "for", "d", ",", "s_list", "in", "ontology", ".", "informable_slots", ".", "items", "(", ")", ":", "\n", "            ", "for", "s", "in", "s_list", ":", "\n", "                ", "self", ".", "all_info_slot", ".", "append", "(", "d", "+", "'-'", "+", "s", ")", "\n", "\n", "# only evaluate these slots for dialog success", "\n", "", "", "self", ".", "requestables", "=", "[", "'phone'", ",", "'address'", ",", "'postcode'", ",", "'reference'", ",", "'id'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.pack_dial": [[89, 97], ["dials[].append"], "methods", ["None"], ["", "def", "pack_dial", "(", "self", ",", "data", ")", ":", "\n", "        ", "dials", "=", "{", "}", "\n", "for", "turn", "in", "data", ":", "\n", "            ", "dial_id", "=", "turn", "[", "'dial_id'", "]", "\n", "if", "dial_id", "not", "in", "dials", ":", "\n", "                ", "dials", "[", "dial_id", "]", "=", "[", "]", "\n", "", "dials", "[", "dial_id", "]", ".", "append", "(", "turn", ")", "\n", "", "return", "dials", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.run_metrics": [[99, 129], ["eval.MultiWozEvaluator._get_metric_results", "metric_results.append", "eval.MultiWozEvaluator.domain_files.items", "eval.MultiWozEvaluator._get_metric_results", "eval.MultiWozEvaluator.domain_files.get", "eval.MultiWozEvaluator._get_metric_results", "metric_results.append", "print", "metric_results.append"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._get_metric_results", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._get_metric_results", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._get_metric_results"], ["", "def", "run_metrics", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "'all'", "in", "cfg", ".", "exp_domains", ":", "\n", "            ", "metric_results", "=", "[", "]", "\n", "metric_result", "=", "self", ".", "_get_metric_results", "(", "data", ")", "\n", "metric_results", ".", "append", "(", "metric_result", ")", "\n", "\n", "if", "cfg", ".", "eval_per_domain", ":", "\n", "# all domain experiments, sub domain evaluation", "\n", "                ", "domains", "=", "[", "d", "+", "'_single'", "for", "d", "in", "ontology", ".", "all_domains", "]", "\n", "domains", "=", "domains", "+", "[", "'restaurant_train'", ",", "'restaurant_hotel'", ",", "'restaurant_attraction'", ",", "'hotel_train'", ",", "'hotel_attraction'", ",", "\n", "'attraction_train'", ",", "'restaurant_hotel_taxi'", ",", "'restaurant_attraction_taxi'", ",", "'hotel_attraction_taxi'", ",", "]", "\n", "for", "domain", "in", "domains", ":", "\n", "                    ", "file_list", "=", "self", ".", "domain_files", ".", "get", "(", "domain", ",", "[", "]", ")", "\n", "if", "not", "file_list", ":", "\n", "                        ", "print", "(", "'No sub domain [%s]'", "%", "domain", ")", "\n", "", "metric_result", "=", "self", ".", "_get_metric_results", "(", "data", ",", "domain", ",", "file_list", ")", "\n", "if", "metric_result", ":", "\n", "                        ", "metric_results", ".", "append", "(", "metric_result", ")", "\n", "\n", "", "", "", "", "else", ":", "\n", "# sub domain experiments", "\n", "            ", "metric_results", "=", "[", "]", "\n", "for", "domain", ",", "file_list", "in", "self", ".", "domain_files", ".", "items", "(", ")", ":", "\n", "                ", "if", "domain", "not", "in", "cfg", ".", "exp_domains", ":", "\n", "                    ", "continue", "\n", "", "metric_result", "=", "self", ".", "_get_metric_results", "(", "data", ",", "domain", ",", "file_list", ")", "\n", "if", "metric_result", ":", "\n", "                    ", "metric_results", ".", "append", "(", "metric_result", ")", "\n", "\n", "", "", "", "return", "metric_results", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.validation_metric": [[130, 136], ["eval.MultiWozEvaluator.bleu_metric", "eval.MultiWozEvaluator.context_to_response_eval"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.bleu_metric", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.context_to_response_eval"], ["", "def", "validation_metric", "(", "self", ",", "data", ")", ":", "\n", "        ", "bleu", "=", "self", ".", "bleu_metric", "(", "data", ")", "\n", "# accu_single_dom, accu_multi_dom, multi_dom_num = self.domain_eval(data)", "\n", "success", ",", "match", ",", "req_offer_counts", ",", "dial_num", "=", "self", ".", "context_to_response_eval", "(", "data", ",", "\n", "same_eval_as_cambridge", "=", "cfg", ".", "same_eval_as_cambridge", ")", "\n", "return", "bleu", ",", "success", ",", "match", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._get_metric_results": [[137, 194], ["eval.MultiWozEvaluator.bleu_metric", "collections.OrderedDict", "eval.MultiWozEvaluator.aspn_eval", "eval.MultiWozEvaluator.multi_act_eval", "eval.MultiWozEvaluator.domain_eval", "eval.MultiWozEvaluator.context_to_response_eval", "collections.OrderedDict", "eval.MultiWozEvaluator.dialog_state_tracking_eval", "eval.MultiWozEvaluator.dialog_state_tracking_eval", "eval.MultiWozEvaluator.dialog_state_tracking_eval", "eval.MultiWozEvaluator.dialog_state_tracking_eval", "metric_result.update", "eval.MultiWozEvaluator.dialog_state_tracking_eval", "eval.MultiWozEvaluator.dialog_state_tracking_eval", "metric_result.update", "slot_corr.get", "sorted", "sorted", "metric_result.update", "logging.info", "logging.info", "logging.info", "collections.OrderedDict.items", "collections.OrderedDict.items", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "domain.upper", "collections.OrderedDict.items"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.bleu_metric", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.aspn_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.multi_act_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.domain_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.context_to_response_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.dialog_state_tracking_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.dialog_state_tracking_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.dialog_state_tracking_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.dialog_state_tracking_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.dialog_state_tracking_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.dialog_state_tracking_eval"], ["", "def", "_get_metric_results", "(", "self", ",", "data", ",", "domain", "=", "'all'", ",", "file_list", "=", "None", ")", ":", "\n", "        ", "metric_result", "=", "{", "'domain'", ":", "domain", "}", "\n", "bleu", "=", "self", ".", "bleu_metric", "(", "data", ",", "file_list", ")", "\n", "if", "cfg", ".", "bspn_mode", "==", "'bspn'", "or", "cfg", ".", "enable_dst", ":", "\n", "            ", "jg", ",", "slot_f1", ",", "slot_acc", ",", "slot_cnt", ",", "slot_corr", "=", "self", ".", "dialog_state_tracking_eval", "(", "data", ",", "file_list", ")", "\n", "jg_nn", ",", "sf1_nn", ",", "sac_nn", ",", "_", ",", "_", "=", "self", ".", "dialog_state_tracking_eval", "(", "data", ",", "file_list", ",", "no_name", "=", "True", ",", "no_book", "=", "False", ")", "\n", "jg_nb", ",", "sf1_nb", ",", "sac_nb", ",", "_", ",", "_", "=", "self", ".", "dialog_state_tracking_eval", "(", "data", ",", "file_list", ",", "no_name", "=", "False", ",", "no_book", "=", "True", ")", "\n", "jg_nnnb", ",", "sf1_nnnb", ",", "sac_nnnb", ",", "_", ",", "_", "=", "self", ".", "dialog_state_tracking_eval", "(", "data", ",", "file_list", ",", "no_name", "=", "True", ",", "no_book", "=", "True", ")", "\n", "metric_result", ".", "update", "(", "{", "'joint_goal'", ":", "jg", ",", "'slot_acc'", ":", "slot_acc", ",", "'slot_f1'", ":", "slot_f1", "}", ")", "\n", "", "if", "cfg", ".", "bspn_mode", "==", "'bsdx'", ":", "\n", "            ", "jg_", ",", "slot_f1_", ",", "slot_acc_", ",", "slot_cnt", ",", "slot_corr", "=", "self", ".", "dialog_state_tracking_eval", "(", "data", ",", "file_list", ",", "bspn_mode", "=", "'bsdx'", ")", "\n", "jg_nn_", ",", "sf1_nn_", ",", "sac_nn_", ",", "_", ",", "_", "=", "self", ".", "dialog_state_tracking_eval", "(", "data", ",", "file_list", ",", "bspn_mode", "=", "'bsdx'", ",", "no_name", "=", "True", ",", "no_book", "=", "False", ")", "\n", "metric_result", ".", "update", "(", "{", "'joint_goal_delex'", ":", "jg_", ",", "'slot_acc_delex'", ":", "slot_acc_", ",", "'slot_f1_delex'", ":", "slot_f1_", "}", ")", "\n", "\n", "", "info_slots_acc", "=", "{", "}", "\n", "for", "slot", "in", "slot_cnt", ":", "\n", "            ", "correct", "=", "slot_corr", ".", "get", "(", "slot", ",", "0", ")", "\n", "info_slots_acc", "[", "slot", "]", "=", "correct", "/", "slot_cnt", "[", "slot", "]", "*", "100", "\n", "", "info_slots_acc", "=", "OrderedDict", "(", "sorted", "(", "info_slots_acc", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", ")", "\n", "\n", "act_f1", "=", "self", ".", "aspn_eval", "(", "data", ",", "file_list", ")", "\n", "avg_act_num", ",", "avg_diverse_score", "=", "self", ".", "multi_act_eval", "(", "data", ",", "file_list", ")", "\n", "accu_single_dom", ",", "accu_multi_dom", ",", "multi_dom_num", "=", "self", ".", "domain_eval", "(", "data", ",", "file_list", ")", "\n", "\n", "success", ",", "match", ",", "req_offer_counts", ",", "dial_num", "=", "self", ".", "context_to_response_eval", "(", "data", ",", "file_list", ",", "\n", "same_eval_as_cambridge", "=", "cfg", ".", "same_eval_as_cambridge", ")", "\n", "req_slots_acc", "=", "{", "}", "\n", "for", "req", "in", "self", ".", "requestables", ":", "\n", "            ", "acc", "=", "req_offer_counts", "[", "req", "+", "'_offer'", "]", "/", "(", "req_offer_counts", "[", "req", "+", "'_total'", "]", "+", "1e-10", ")", "\n", "req_slots_acc", "[", "req", "]", "=", "acc", "*", "100", "\n", "", "req_slots_acc", "=", "OrderedDict", "(", "sorted", "(", "req_slots_acc", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", ")", "\n", "\n", "if", "dial_num", ":", "\n", "            ", "metric_result", ".", "update", "(", "{", "'act_f1'", ":", "act_f1", ",", "'success'", ":", "success", ",", "'match'", ":", "match", ",", "'bleu'", ":", "bleu", ",", "\n", "'req_slots_acc'", ":", "req_slots_acc", ",", "'info_slots_acc'", ":", "info_slots_acc", ",", "'dial_num'", ":", "dial_num", ",", "\n", "'accu_single_dom'", ":", "accu_single_dom", ",", "'accu_multi_dom'", ":", "accu_multi_dom", ",", "\n", "'avg_act_num'", ":", "avg_act_num", ",", "'avg_diverse_score'", ":", "avg_diverse_score", "}", ")", "\n", "if", "domain", "==", "'all'", ":", "\n", "                ", "logging", ".", "info", "(", "'-------------------------- All DOMAINS --------------------------'", ")", "\n", "", "else", ":", "\n", "                ", "logging", ".", "info", "(", "'-------------------------- %s (# %d) -------------------------- '", "%", "(", "domain", ".", "upper", "(", ")", ",", "dial_num", ")", ")", "\n", "", "if", "cfg", ".", "bspn_mode", "==", "'bspn'", "or", "cfg", ".", "enable_dst", ":", "\n", "                ", "logging", ".", "info", "(", "'[DST] joint goal:%2.1f  slot acc: %2.1f  slot f1: %2.1f  act f1: %2.1f'", "%", "(", "jg", ",", "slot_acc", ",", "slot_f1", ",", "act_f1", ")", ")", "\n", "logging", ".", "info", "(", "'[DST] [not eval name slots] joint goal:%2.1f  slot acc: %2.1f  slot f1: %2.1f'", "%", "(", "jg_nn", ",", "sac_nn", ",", "sf1_nn", ")", ")", "\n", "logging", ".", "info", "(", "'[DST] [not eval book slots] joint goal:%2.1f  slot acc: %2.1f  slot f1: %2.1f'", "%", "(", "jg_nb", ",", "sac_nb", ",", "sf1_nb", ")", ")", "\n", "logging", ".", "info", "(", "'[DST] [not eval name & book slots] joint goal:%2.1f  slot acc: %2.1f  slot f1: %2.1f'", "%", "(", "jg_nnnb", ",", "sac_nnnb", ",", "sf1_nnnb", ")", ")", "\n", "", "if", "cfg", ".", "bspn_mode", "==", "'bsdx'", ":", "\n", "                ", "logging", ".", "info", "(", "'[BDX] joint goal:%2.1f  slot acc: %2.1f  slot f1: %2.1f  act f1: %2.1f'", "%", "(", "jg_", ",", "slot_acc_", ",", "slot_f1_", ",", "act_f1", ")", ")", "\n", "logging", ".", "info", "(", "'[BDX] [not eval name slots] joint goal:%2.1f  slot acc: %2.1f  slot f1: %2.1f'", "%", "(", "jg_nn_", ",", "sac_nn_", ",", "sf1_nn_", ")", ")", "\n", "", "logging", ".", "info", "(", "'[CTR] match: %2.1f  success: %2.1f  bleu: %2.1f'", "%", "(", "match", ",", "success", ",", "bleu", ")", ")", "\n", "logging", ".", "info", "(", "'[CTR] '", "+", "'; '", ".", "join", "(", "[", "'%s: %2.1f'", "%", "(", "req", ",", "acc", ")", "for", "req", ",", "acc", "in", "req_slots_acc", ".", "items", "(", ")", "]", ")", ")", "\n", "logging", ".", "info", "(", "'[DOM] accuracy: single %2.1f / multi: %2.1f (%d)'", "%", "(", "accu_single_dom", ",", "accu_multi_dom", ",", "multi_dom_num", ")", ")", "\n", "if", "self", ".", "reader", ".", "multi_acts_record", "is", "not", "None", ":", "\n", "                ", "logging", ".", "info", "(", "'[MA] avg acts num %2.1f  avg slots num: %2.1f '", "%", "(", "avg_act_num", ",", "avg_diverse_score", ")", ")", "\n", "", "return", "metric_result", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.bleu_metric": [[195, 209], ["gen.append", "truth.append", "eval.MultiWozEvaluator.bleu_scorer.score", "zip"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.Attn.score"], ["", "", "def", "bleu_metric", "(", "self", ",", "data", ",", "eval_dial_list", "=", "None", ")", ":", "\n", "        ", "gen", ",", "truth", "=", "[", "]", ",", "[", "]", "\n", "for", "row", "in", "data", ":", "\n", "            ", "if", "eval_dial_list", "and", "row", "[", "'dial_id'", "]", "+", "'.json'", "not", "in", "eval_dial_list", ":", "\n", "                ", "continue", "\n", "", "gen", ".", "append", "(", "row", "[", "'resp_gen'", "]", ")", "\n", "truth", ".", "append", "(", "row", "[", "'resp'", "]", ")", "\n", "", "wrap_generated", "=", "[", "[", "_", "]", "for", "_", "in", "gen", "]", "\n", "wrap_truth", "=", "[", "[", "_", "]", "for", "_", "in", "truth", "]", "\n", "if", "gen", "and", "truth", ":", "\n", "            ", "sc", "=", "self", ".", "bleu_scorer", ".", "score", "(", "zip", "(", "wrap_generated", ",", "wrap_truth", ")", ")", "\n", "", "else", ":", "\n", "            ", "sc", "=", "0.0", "\n", "", "return", "sc", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.value_similar": [[210, 217], ["a.split", "b.split", "a.split", "b.split"], "methods", ["None"], ["", "def", "value_similar", "(", "self", ",", "a", ",", "b", ")", ":", "\n", "        ", "return", "True", "if", "a", "==", "b", "else", "False", "\n", "\n", "# the value equal condition used in \"Sequicity\" is too loose", "\n", "if", "a", "in", "b", "or", "b", "in", "a", "or", "a", ".", "split", "(", ")", "[", "0", "]", "==", "b", ".", "split", "(", ")", "[", "0", "]", "or", "a", ".", "split", "(", ")", "[", "-", "1", "]", "==", "b", ".", "split", "(", ")", "[", "-", "1", "]", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._bspn_to_dict": [[218, 231], ["eval.MultiWozEvaluator.reader.bspan_to_constraint_dict", "eval.MultiWozEvaluator.items", "cons.items"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_constraint_dict"], ["", "def", "_bspn_to_dict", "(", "self", ",", "bspn", ",", "no_name", "=", "False", ",", "no_book", "=", "False", ",", "bspn_mode", "=", "'bspn'", ")", ":", "\n", "        ", "constraint_dict", "=", "self", ".", "reader", ".", "bspan_to_constraint_dict", "(", "bspn", ",", "bspn_mode", "=", "bspn_mode", ")", "\n", "constraint_dict_flat", "=", "{", "}", "\n", "for", "domain", ",", "cons", "in", "constraint_dict", ".", "items", "(", ")", ":", "\n", "            ", "for", "s", ",", "v", "in", "cons", ".", "items", "(", ")", ":", "\n", "                ", "key", "=", "domain", "+", "'-'", "+", "s", "\n", "if", "no_name", "and", "s", "==", "'name'", ":", "\n", "                    ", "continue", "\n", "", "if", "no_book", ":", "\n", "                    ", "if", "s", "in", "[", "'people'", ",", "'stay'", "]", "or", "key", "in", "[", "'hotel-day'", ",", "'restaurant-day'", ",", "'restaurant-time'", "]", ":", "\n", "                        ", "continue", "\n", "", "", "constraint_dict_flat", "[", "key", "]", "=", "v", "\n", "", "", "return", "constraint_dict_flat", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._constraint_compare": [[232, 253], ["list", "eval.MultiWozEvaluator.value_similar", "false_slot.append", "false_slot.append", "len", "set", "eval.MultiWozEvaluator.value_similar", "slot_appear_num.get", "slot_appear_num.get", "slot_correct_num.get", "slot_correct_num.get"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.value_similar", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.value_similar"], ["", "def", "_constraint_compare", "(", "self", ",", "truth_cons", ",", "gen_cons", ",", "slot_appear_num", "=", "None", ",", "slot_correct_num", "=", "None", ")", ":", "\n", "        ", "tp", ",", "fp", ",", "fn", "=", "0", ",", "0", ",", "0", "\n", "false_slot", "=", "[", "]", "\n", "for", "slot", "in", "gen_cons", ":", "\n", "            ", "v_gen", "=", "gen_cons", "[", "slot", "]", "\n", "if", "slot", "in", "truth_cons", "and", "self", ".", "value_similar", "(", "v_gen", ",", "truth_cons", "[", "slot", "]", ")", ":", "#v_truth = truth_cons[slot]", "\n", "                ", "tp", "+=", "1", "\n", "if", "slot_correct_num", "is", "not", "None", ":", "\n", "                    ", "slot_correct_num", "[", "slot", "]", "=", "1", "if", "not", "slot_correct_num", ".", "get", "(", "slot", ")", "else", "slot_correct_num", ".", "get", "(", "slot", ")", "+", "1", "\n", "", "", "else", ":", "\n", "                ", "fp", "+=", "1", "\n", "false_slot", ".", "append", "(", "slot", ")", "\n", "", "", "for", "slot", "in", "truth_cons", ":", "\n", "            ", "v_truth", "=", "truth_cons", "[", "slot", "]", "\n", "if", "slot_appear_num", "is", "not", "None", ":", "\n", "                ", "slot_appear_num", "[", "slot", "]", "=", "1", "if", "not", "slot_appear_num", ".", "get", "(", "slot", ")", "else", "slot_appear_num", ".", "get", "(", "slot", ")", "+", "1", "\n", "", "if", "slot", "not", "in", "gen_cons", "or", "not", "self", ".", "value_similar", "(", "v_truth", ",", "gen_cons", "[", "slot", "]", ")", ":", "\n", "                ", "fn", "+=", "1", "\n", "false_slot", ".", "append", "(", "slot", ")", "\n", "", "", "acc", "=", "len", "(", "self", ".", "all_info_slot", ")", "-", "fp", "-", "fn", "\n", "return", "tp", ",", "fp", ",", "fn", ",", "acc", ",", "list", "(", "set", "(", "false_slot", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.domain_eval": [[254, 333], ["eval.MultiWozEvaluator.pack_dial", "enumerate", "eval.MultiWozEvaluator.reader.dspan_to_domain", "eval.MultiWozEvaluator.reader.dspan_to_domain", "turn[].split", "copy.deepcopy", "copy.deepcopy", "len", "eval.MultiWozEvaluator.reader.bspan_to_constraint_dict", "eval.MultiWozEvaluator.reader.bspan_to_constraint_dict", "turn_domain.remove", "len", "wrong_pred.append", "wrong_pred.append", "turn_dom_bs.append", "turn_dom_da.append", "turn_domain.append", "len", "str", "str", "turn_dom_bs.append", "len"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.pack_dial", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.dspan_to_domain", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.dspan_to_domain", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_constraint_dict", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_constraint_dict"], ["", "def", "domain_eval", "(", "self", ",", "data", ",", "eval_dial_list", "=", "None", ")", ":", "\n", "        ", "dials", "=", "self", ".", "pack_dial", "(", "data", ")", "\n", "corr_single", ",", "total_single", ",", "corr_multi", ",", "total_multi", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "dial_num", "=", "0", "\n", "for", "dial_id", "in", "dials", ":", "\n", "            ", "if", "eval_dial_list", "and", "dial_id", "+", "'.json'", "not", "in", "eval_dial_list", ":", "\n", "                ", "continue", "\n", "", "dial_num", "+=", "1", "\n", "dial", "=", "dials", "[", "dial_id", "]", "\n", "wrong_pred", "=", "[", "]", "\n", "\n", "prev_constraint_dict", "=", "{", "}", "\n", "prev_turn_domain", "=", "[", "'general'", "]", "\n", "\n", "for", "turn_num", ",", "turn", "in", "enumerate", "(", "dial", ")", ":", "\n", "                ", "if", "turn_num", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "true_domains", "=", "self", ".", "reader", ".", "dspan_to_domain", "(", "turn", "[", "'dspn'", "]", ")", "\n", "if", "cfg", ".", "enable_dspn", ":", "\n", "                    ", "pred_domains", "=", "self", ".", "reader", ".", "dspan_to_domain", "(", "turn", "[", "'dspn_gen'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "turn_dom_bs", "=", "[", "]", "\n", "if", "cfg", ".", "enable_bspn", "and", "not", "cfg", ".", "use_true_bspn_for_ctr_eval", "and", "(", "cfg", ".", "bspn_mode", "==", "'bspn'", "or", "cfg", ".", "enable_dst", ")", ":", "\n", "                        ", "constraint_dict", "=", "self", ".", "reader", ".", "bspan_to_constraint_dict", "(", "turn", "[", "'bspn_gen'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "constraint_dict", "=", "self", ".", "reader", ".", "bspan_to_constraint_dict", "(", "turn", "[", "'bspn'", "]", ")", "\n", "", "for", "domain", "in", "constraint_dict", ":", "\n", "                        ", "if", "domain", "not", "in", "prev_constraint_dict", ":", "\n", "                            ", "turn_dom_bs", ".", "append", "(", "domain", ")", "\n", "", "elif", "prev_constraint_dict", "[", "domain", "]", "!=", "constraint_dict", "[", "domain", "]", ":", "\n", "                            ", "turn_dom_bs", ".", "append", "(", "domain", ")", "\n", "", "", "aspn", "=", "'aspn'", "if", "not", "cfg", ".", "enable_aspn", "else", "'aspn_gen'", "\n", "turn_dom_da", "=", "[", "]", "\n", "for", "a", "in", "turn", "[", "aspn", "]", ".", "split", "(", ")", ":", "\n", "                        ", "if", "a", "[", "1", ":", "-", "1", "]", "in", "ontology", ".", "all_domains", "+", "[", "'general'", "]", ":", "\n", "                            ", "turn_dom_da", ".", "append", "(", "a", "[", "1", ":", "-", "1", "]", ")", "\n", "\n", "# get turn domain", "\n", "", "", "turn_domain", "=", "turn_dom_bs", "\n", "for", "dom", "in", "turn_dom_da", ":", "\n", "                        ", "if", "dom", "!=", "'booking'", "and", "dom", "not", "in", "turn_domain", ":", "\n", "                            ", "turn_domain", ".", "append", "(", "dom", ")", "\n", "", "", "if", "not", "turn_domain", ":", "\n", "                        ", "turn_domain", "=", "prev_turn_domain", "\n", "", "if", "len", "(", "turn_domain", ")", "==", "2", "and", "'general'", "in", "turn_domain", ":", "\n", "                        ", "turn_domain", ".", "remove", "(", "'general'", ")", "\n", "", "if", "len", "(", "turn_domain", ")", "==", "2", ":", "\n", "                        ", "if", "len", "(", "prev_turn_domain", ")", "==", "1", "and", "prev_turn_domain", "[", "0", "]", "==", "turn_domain", "[", "1", "]", ":", "\n", "                            ", "turn_domain", "=", "turn_domain", "[", ":", ":", "-", "1", "]", "\n", "", "", "prev_turn_domain", "=", "copy", ".", "deepcopy", "(", "turn_domain", ")", "\n", "prev_constraint_dict", "=", "copy", ".", "deepcopy", "(", "constraint_dict", ")", "\n", "\n", "turn", "[", "'dspn_gen'", "]", "=", "' '", ".", "join", "(", "[", "'['", "+", "d", "+", "']'", "for", "d", "in", "turn_domain", "]", ")", "\n", "pred_domains", "=", "{", "}", "\n", "for", "d", "in", "turn_domain", ":", "\n", "                        ", "pred_domains", "[", "'['", "+", "d", "+", "']'", "]", "=", "1", "\n", "\n", "", "", "if", "len", "(", "true_domains", ")", "==", "1", ":", "\n", "                    ", "total_single", "+=", "1", "\n", "if", "pred_domains", "==", "true_domains", ":", "\n", "                        ", "corr_single", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "wrong_pred", ".", "append", "(", "str", "(", "turn", "[", "'turn_num'", "]", ")", ")", "\n", "turn", "[", "'wrong_domain'", "]", "=", "'x'", "\n", "", "", "else", ":", "\n", "                    ", "total_multi", "+=", "1", "\n", "if", "pred_domains", "==", "true_domains", ":", "\n", "                        ", "corr_multi", "+=", "1", "\n", "", "else", ":", "\n", "                        ", "wrong_pred", ".", "append", "(", "str", "(", "turn", "[", "'turn_num'", "]", ")", ")", "\n", "turn", "[", "'wrong_domain'", "]", "=", "'x'", "\n", "\n", "# dialog inform metric record", "\n", "", "", "", "dial", "[", "0", "]", "[", "'wrong_domain'", "]", "=", "' '", ".", "join", "(", "wrong_pred", ")", "\n", "", "accu_single", "=", "corr_single", "/", "(", "total_single", "+", "1e-10", ")", "\n", "accu_multi", "=", "corr_multi", "/", "(", "total_multi", "+", "1e-10", ")", "\n", "return", "accu_single", "*", "100", ",", "accu_multi", "*", "100", ",", "total_multi", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.dialog_state_tracking_eval": [[335, 385], ["eval.MultiWozEvaluator.pack_dial", "enumerate", "eval.MultiWozEvaluator._bspn_to_dict", "eval.MultiWozEvaluator._bspn_to_dict", "missed_jg_turn_id.append", "eval.MultiWozEvaluator._constraint_compare", "eval.MultiWozEvaluator._constraint_compare", "str", "len"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.pack_dial", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._bspn_to_dict", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._bspn_to_dict", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._constraint_compare", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._constraint_compare"], ["", "def", "dialog_state_tracking_eval", "(", "self", ",", "data", ",", "eval_dial_list", "=", "None", ",", "bspn_mode", "=", "'bspn'", ",", "no_name", "=", "False", ",", "no_book", "=", "False", ")", ":", "\n", "        ", "dials", "=", "self", ".", "pack_dial", "(", "data", ")", "\n", "total_turn", ",", "joint_match", ",", "total_tp", ",", "total_fp", ",", "total_fn", ",", "total_acc", "=", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "slot_appear_num", ",", "slot_correct_num", "=", "{", "}", ",", "{", "}", "\n", "dial_num", "=", "0", "\n", "for", "dial_id", "in", "dials", ":", "\n", "            ", "if", "eval_dial_list", "and", "dial_id", "+", "'.json'", "not", "in", "eval_dial_list", ":", "\n", "                ", "continue", "\n", "", "dial_num", "+=", "1", "\n", "dial", "=", "dials", "[", "dial_id", "]", "\n", "missed_jg_turn_id", "=", "[", "]", "\n", "for", "turn_num", ",", "turn", "in", "enumerate", "(", "dial", ")", ":", "\n", "                ", "if", "turn_num", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "gen_cons", "=", "self", ".", "_bspn_to_dict", "(", "turn", "[", "bspn_mode", "+", "'_gen'", "]", ",", "no_name", "=", "no_name", ",", "\n", "no_book", "=", "no_book", ",", "bspn_mode", "=", "bspn_mode", ")", "\n", "truth_cons", "=", "self", ".", "_bspn_to_dict", "(", "turn", "[", "bspn_mode", "]", ",", "no_name", "=", "no_name", ",", "\n", "no_book", "=", "no_book", ",", "bspn_mode", "=", "bspn_mode", ")", "\n", "\n", "if", "truth_cons", "==", "gen_cons", ":", "\n", "                    ", "joint_match", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "missed_jg_turn_id", ".", "append", "(", "str", "(", "turn", "[", "'turn_num'", "]", ")", ")", "\n", "\n", "", "if", "eval_dial_list", "is", "None", ":", "\n", "                    ", "tp", ",", "fp", ",", "fn", ",", "acc", ",", "false_slots", "=", "self", ".", "_constraint_compare", "(", "truth_cons", ",", "gen_cons", ",", "\n", "slot_appear_num", ",", "slot_correct_num", ")", "\n", "", "else", ":", "\n", "                    ", "tp", ",", "fp", ",", "fn", ",", "acc", ",", "false_slots", "=", "self", ".", "_constraint_compare", "(", "truth_cons", ",", "gen_cons", ",", ")", "\n", "\n", "", "total_tp", "+=", "tp", "\n", "total_fp", "+=", "fp", "\n", "total_fn", "+=", "fn", "\n", "total_acc", "+=", "acc", "\n", "total_turn", "+=", "1", "\n", "if", "not", "no_name", "and", "not", "no_book", ":", "\n", "                    ", "turn", "[", "'wrong_inform'", "]", "=", "'; '", ".", "join", "(", "false_slots", ")", "# turn inform metric record", "\n", "\n", "# dialog inform metric record", "\n", "", "", "if", "not", "no_name", "and", "not", "no_book", ":", "\n", "                ", "dial", "[", "0", "]", "[", "'wrong_inform'", "]", "=", "' '", ".", "join", "(", "missed_jg_turn_id", ")", "\n", "\n", "", "", "precision", "=", "total_tp", "/", "(", "total_tp", "+", "total_fp", "+", "1e-10", ")", "\n", "recall", "=", "total_tp", "/", "(", "total_tp", "+", "total_fn", "+", "1e-10", ")", "\n", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", "+", "1e-10", ")", "*", "100", "\n", "accuracy", "=", "total_acc", "/", "(", "total_turn", "*", "len", "(", "self", ".", "all_info_slot", ")", "+", "1e-10", ")", "*", "100", "\n", "joint_goal", "=", "joint_match", "/", "(", "total_turn", "+", "1e-10", ")", "*", "100", "\n", "\n", "\n", "return", "joint_goal", ",", "f1", ",", "accuracy", ",", "slot_appear_num", ",", "slot_correct_num", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.aspn_eval": [[387, 433], ["eval.MultiWozEvaluator.pack_dial", "len", "max", "max", "enumerate", "len", "len", "eval.MultiWozEvaluator.aspn_eval._get_tp_fp_fn"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.pack_dial"], ["", "def", "aspn_eval", "(", "self", ",", "data", ",", "eval_dial_list", "=", "None", ")", ":", "\n", "\n", "        ", "def", "_get_tp_fp_fn", "(", "label_list", ",", "pred_list", ")", ":", "\n", "            ", "tp", "=", "len", "(", "[", "t", "for", "t", "in", "pred_list", "if", "t", "in", "label_list", "]", ")", "\n", "fp", "=", "max", "(", "0", ",", "len", "(", "pred_list", ")", "-", "tp", ")", "\n", "fn", "=", "max", "(", "0", ",", "len", "(", "label_list", ")", "-", "tp", ")", "\n", "return", "tp", ",", "fp", ",", "fn", "\n", "\n", "", "dials", "=", "self", ".", "pack_dial", "(", "data", ")", "\n", "total_tp", ",", "total_fp", ",", "total_fn", "=", "0", ",", "0", ",", "0", "\n", "\n", "dial_num", "=", "0", "\n", "for", "dial_id", "in", "dials", ":", "\n", "            ", "if", "eval_dial_list", "and", "dial_id", "+", "'.json'", "not", "in", "eval_dial_list", ":", "\n", "                ", "continue", "\n", "", "dial_num", "+=", "1", "\n", "dial", "=", "dials", "[", "dial_id", "]", "\n", "wrong_act", "=", "[", "]", "\n", "for", "turn_num", ",", "turn", "in", "enumerate", "(", "dial", ")", ":", "\n", "                ", "if", "turn_num", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "if", "cfg", ".", "same_eval_act_f1_as_hdsa", ":", "\n", "                    ", "pred_acts", ",", "true_acts", "=", "{", "}", ",", "{", "}", "\n", "for", "t", "in", "turn", "[", "'aspn_gen'", "]", ":", "\n", "                        ", "pred_acts", "[", "t", "]", "=", "1", "\n", "", "for", "t", "in", "turn", "[", "'aspn'", "]", ":", "\n", "                        ", "true_acts", "[", "t", "]", "=", "1", "\n", "", "tp", ",", "fp", ",", "fn", "=", "_get_tp_fp_fn", "(", "true_acts", ",", "pred_acts", ")", "\n", "", "else", ":", "\n", "                    ", "pred_acts", "=", "self", ".", "reader", ".", "aspan_to_act_list", "(", "turn", "[", "'aspn_gen'", "]", ")", "\n", "true_acts", "=", "self", ".", "reader", ".", "aspan_to_act_list", "(", "turn", "[", "'aspn'", "]", ")", "\n", "tp", ",", "fp", ",", "fn", "=", "_get_tp_fp_fn", "(", "true_acts", ",", "pred_acts", ")", "\n", "", "if", "fp", "+", "fn", "!=", "0", ":", "\n", "                    ", "wrong_act", ".", "append", "(", "str", "(", "turn", "[", "'turn_num'", "]", ")", ")", "\n", "turn", "[", "'wrong_act'", "]", "=", "'x'", "\n", "\n", "", "total_tp", "+=", "tp", "\n", "total_fp", "+=", "fp", "\n", "total_fn", "+=", "fn", "\n", "\n", "", "dial", "[", "0", "]", "[", "'wrong_act'", "]", "=", "' '", ".", "join", "(", "wrong_act", ")", "\n", "", "precision", "=", "total_tp", "/", "(", "total_tp", "+", "total_fp", "+", "1e-10", ")", "\n", "recall", "=", "total_tp", "/", "(", "total_tp", "+", "total_fn", "+", "1e-10", ")", "\n", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", "+", "1e-10", ")", "\n", "\n", "return", "f1", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.multi_act_eval": [[434, 477], ["eval.MultiWozEvaluator.pack_dial", "enumerate", "target.split", "len", "len", "float", "float", "eval.MultiWozEvaluator.reader.aspan_to_act_list", "act.split"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.pack_dial", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.aspan_to_act_list"], ["", "def", "multi_act_eval", "(", "self", ",", "data", ",", "eval_dial_list", "=", "None", ")", ":", "\n", "\n", "        ", "dials", "=", "self", ".", "pack_dial", "(", "data", ")", "\n", "total_act_num", ",", "total_slot_num", "=", "0", ",", "0", "\n", "\n", "dial_num", "=", "0", "\n", "turn_count", "=", "0", "\n", "for", "dial_id", "in", "dials", ":", "\n", "            ", "if", "eval_dial_list", "and", "dial_id", "+", "'.json'", "not", "in", "eval_dial_list", ":", "\n", "                ", "continue", "\n", "", "dial_num", "+=", "1", "\n", "dial", "=", "dials", "[", "dial_id", "]", "\n", "for", "turn_num", ",", "turn", "in", "enumerate", "(", "dial", ")", ":", "\n", "                ", "if", "turn_num", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "target", "=", "turn", "[", "'multi_act_gen'", "]", "if", "self", ".", "reader", ".", "multi_acts_record", "is", "not", "None", "else", "turn", "[", "'aspn_gen'", "]", "\n", "\n", "\n", "# diversity", "\n", "act_collect", ",", "slot_collect", "=", "{", "}", ",", "{", "}", "\n", "act_type_collect", "=", "{", "}", "\n", "slot_score", "=", "0", "\n", "for", "act_str", "in", "target", ".", "split", "(", "' | '", ")", ":", "\n", "                    ", "pred_acts", "=", "self", ".", "reader", ".", "aspan_to_act_list", "(", "act_str", ")", "\n", "act_type", "=", "''", "\n", "for", "act", "in", "pred_acts", ":", "\n", "                        ", "d", ",", "a", ",", "s", "=", "act", ".", "split", "(", "'-'", ")", "\n", "if", "d", "+", "'-'", "+", "a", "not", "in", "act_collect", ":", "\n", "                            ", "act_collect", "[", "d", "+", "'-'", "+", "a", "]", "=", "{", "s", ":", "1", "}", "\n", "slot_score", "+=", "1", "\n", "act_type", "+=", "d", "+", "'-'", "+", "a", "+", "';'", "\n", "", "elif", "s", "not", "in", "act_collect", ":", "\n", "                            ", "act_collect", "[", "d", "+", "'-'", "+", "a", "]", "[", "s", "]", "=", "1", "\n", "slot_score", "+=", "1", "\n", "", "slot_collect", "[", "s", "]", "=", "1", "\n", "", "act_type_collect", "[", "act_type", "]", "=", "1", "\n", "", "total_act_num", "+=", "len", "(", "act_collect", ")", "\n", "total_slot_num", "+=", "len", "(", "slot_collect", ")", "\n", "turn_count", "+=", "1", "\n", "\n", "", "", "total_act_num", "=", "total_act_num", "/", "(", "float", "(", "turn_count", ")", "+", "1e-10", ")", "\n", "total_slot_num", "=", "total_slot_num", "/", "(", "float", "(", "turn_count", ")", "+", "1e-10", ")", "\n", "return", "total_act_num", ",", "total_slot_num", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.context_to_response_eval": [[479, 527], ["eval.MultiWozEvaluator.pack_dial", "eval.MultiWozEvaluator.keys", "eval.MultiWozEvaluator._evaluateGeneratedDialogue", "[].get", "eval.MultiWozEvaluator._parseGoal", "float", "float", "list", "eval.MultiWozEvaluator.all_data.keys"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.pack_dial", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._evaluateGeneratedDialogue", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._parseGoal"], ["", "def", "context_to_response_eval", "(", "self", ",", "data", ",", "eval_dial_list", "=", "None", ",", "same_eval_as_cambridge", "=", "False", ")", ":", "\n", "        ", "dials", "=", "self", ".", "pack_dial", "(", "data", ")", "\n", "counts", "=", "{", "}", "\n", "for", "req", "in", "self", ".", "requestables", ":", "\n", "            ", "counts", "[", "req", "+", "'_total'", "]", "=", "0", "\n", "counts", "[", "req", "+", "'_offer'", "]", "=", "0", "\n", "\n", "", "dial_num", ",", "successes", ",", "matches", "=", "0", ",", "0", ",", "0", "\n", "\n", "for", "dial_id", "in", "dials", ":", "\n", "            ", "if", "eval_dial_list", "and", "dial_id", "+", "'.json'", "not", "in", "eval_dial_list", ":", "\n", "                ", "continue", "\n", "", "dial", "=", "dials", "[", "dial_id", "]", "\n", "reqs", "=", "{", "}", "\n", "goal", "=", "{", "}", "\n", "if", "'.json'", "not", "in", "dial_id", "and", "'.json'", "in", "list", "(", "self", ".", "all_data", ".", "keys", "(", ")", ")", "[", "0", "]", ":", "\n", "                ", "dial_id", "=", "dial_id", "+", "'.json'", "\n", "", "for", "domain", "in", "ontology", ".", "all_domains", ":", "\n", "                ", "if", "self", ".", "all_data", "[", "dial_id", "]", "[", "'goal'", "]", ".", "get", "(", "domain", ")", ":", "\n", "                    ", "true_goal", "=", "self", ".", "all_data", "[", "dial_id", "]", "[", "'goal'", "]", "\n", "goal", "=", "self", ".", "_parseGoal", "(", "goal", ",", "true_goal", ",", "domain", ")", "\n", "# print(goal)", "\n", "", "", "for", "domain", "in", "goal", ".", "keys", "(", ")", ":", "\n", "                ", "reqs", "[", "domain", "]", "=", "goal", "[", "domain", "]", "[", "'requestable'", "]", "\n", "\n", "# print('\\n',dial_id)", "\n", "", "success", ",", "match", ",", "stats", ",", "counts", "=", "self", ".", "_evaluateGeneratedDialogue", "(", "dial", ",", "goal", ",", "reqs", ",", "counts", ",", "\n", "same_eval_as_cambridge", "=", "same_eval_as_cambridge", ")", "\n", "\n", "successes", "+=", "success", "\n", "matches", "+=", "match", "\n", "dial_num", "+=", "1", "\n", "\n", "# for domain in gen_stats.keys():", "\n", "#     gen_stats[domain][0] += stats[domain][0]", "\n", "#     gen_stats[domain][1] += stats[domain][1]", "\n", "#     gen_stats[domain][2] += stats[domain][2]", "\n", "\n", "# if 'SNG' in filename:", "\n", "#     for domain in gen_stats.keys():", "\n", "#         sng_gen_stats[domain][0] += stats[domain][0]", "\n", "#         sng_gen_stats[domain][1] += stats[domain][1]", "\n", "#         sng_gen_stats[domain][2] += stats[domain][2]", "\n", "\n", "# self.logger.info(report)", "\n", "", "succ_rate", "=", "successes", "/", "(", "float", "(", "dial_num", ")", "+", "1e-10", ")", "*", "100", "\n", "match_rate", "=", "matches", "/", "(", "float", "(", "dial_num", ")", "+", "1e-10", ")", "*", "100", "\n", "return", "succ_rate", ",", "match_rate", ",", "counts", ",", "dial_num", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._evaluateGeneratedDialogue": [[529, 717], ["goal.keys", "enumerate", "goal.keys", "goal.keys", "domains_in_goal.append", "goal.keys", "eval.MultiWozEvaluator.reader.db.queryJsons", "float", "len", "len", "goal.keys", "goal.keys", "len", "len", "float", "len", "len", "eval.MultiWozEvaluator.reader.bspan_to_constraint_dict", "eval.MultiWozEvaluator.get", "type", "eval.MultiWozEvaluator.reader.db.queryJsons", "provided_requestables[].append", "len", "len", "turn[].split", "turn[].split", "len", "provided_requestables[].append", "set", "set"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.queryJsons", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_constraint_dict", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.queryJsons"], ["", "def", "_evaluateGeneratedDialogue", "(", "self", ",", "dialog", ",", "goal", ",", "real_requestables", ",", "counts", ",", "\n", "soft_acc", "=", "False", ",", "same_eval_as_cambridge", "=", "False", ")", ":", "\n", "        ", "\"\"\"Evaluates the dialogue created by the model.\n            First we load the user goal of the dialogue, then for each turn\n            generated by the system we look for key-words.\n            For the Inform rate we look whether the entity was proposed.\n            For the Success rate we look for requestables slots\"\"\"", "\n", "# for computing corpus success", "\n", "#'id'", "\n", "requestables", "=", "self", ".", "requestables", "\n", "\n", "# CHECK IF MATCH HAPPENED", "\n", "provided_requestables", "=", "{", "}", "\n", "venue_offered", "=", "{", "}", "\n", "domains_in_goal", "=", "[", "]", "\n", "bspans", "=", "{", "}", "\n", "\n", "for", "domain", "in", "goal", ".", "keys", "(", ")", ":", "\n", "            ", "venue_offered", "[", "domain", "]", "=", "[", "]", "\n", "provided_requestables", "[", "domain", "]", "=", "[", "]", "\n", "domains_in_goal", ".", "append", "(", "domain", ")", "\n", "\n", "", "for", "t", ",", "turn", "in", "enumerate", "(", "dialog", ")", ":", "\n", "            ", "if", "t", "==", "0", ":", "\n", "                ", "continue", "\n", "", "sent_t", "=", "turn", "[", "'resp_gen'", "]", "\n", "# sent_t = turn['resp']", "\n", "for", "domain", "in", "goal", ".", "keys", "(", ")", ":", "\n", "# for computing success", "\n", "                ", "if", "same_eval_as_cambridge", ":", "\n", "# [restaurant_name], [hotel_name] instead of [value_name]", "\n", "                        ", "if", "cfg", ".", "use_true_domain_for_ctr_eval", ":", "\n", "                            ", "dom_pred", "=", "[", "d", "[", "1", ":", "-", "1", "]", "for", "d", "in", "turn", "[", "'dspn'", "]", ".", "split", "(", ")", "]", "\n", "", "else", ":", "\n", "                            ", "dom_pred", "=", "[", "d", "[", "1", ":", "-", "1", "]", "for", "d", "in", "turn", "[", "'dspn_gen'", "]", ".", "split", "(", ")", "]", "\n", "# else:", "\n", "#     raise NotImplementedError('Just use true domain label')", "\n", "", "if", "domain", "not", "in", "dom_pred", ":", "# fail", "\n", "                            ", "continue", "\n", "", "", "if", "'[value_name]'", "in", "sent_t", "or", "'[value_id]'", "in", "sent_t", ":", "\n", "                    ", "if", "domain", "in", "[", "'restaurant'", ",", "'hotel'", ",", "'attraction'", ",", "'train'", "]", ":", "\n", "# HERE YOU CAN PUT YOUR BELIEF STATE ESTIMATION", "\n", "                        ", "if", "not", "cfg", ".", "use_true_curr_bspn", "and", "not", "cfg", ".", "use_true_bspn_for_ctr_eval", ":", "\n", "                            ", "bspn", "=", "turn", "[", "'bspn_gen'", "]", "\n", "", "else", ":", "\n", "                            ", "bspn", "=", "turn", "[", "'bspn'", "]", "\n", "# bspn = turn['bspn']", "\n", "\n", "", "constraint_dict", "=", "self", ".", "reader", ".", "bspan_to_constraint_dict", "(", "bspn", ")", "\n", "if", "constraint_dict", ".", "get", "(", "domain", ")", ":", "\n", "                            ", "venues", "=", "self", ".", "reader", ".", "db", ".", "queryJsons", "(", "domain", ",", "constraint_dict", "[", "domain", "]", ",", "return_name", "=", "True", ")", "\n", "", "else", ":", "\n", "                            ", "venues", "=", "[", "]", "\n", "\n", "# if venue has changed", "\n", "", "if", "len", "(", "venue_offered", "[", "domain", "]", ")", "==", "0", "and", "venues", ":", "\n", "# venue_offered[domain] = random.sample(venues, 1)", "\n", "                            ", "venue_offered", "[", "domain", "]", "=", "venues", "\n", "bspans", "[", "domain", "]", "=", "constraint_dict", "[", "domain", "]", "\n", "", "else", ":", "\n", "# flag = False", "\n", "# for ven in venues:", "\n", "#     if venue_offered[domain][0] == ven:", "\n", "#         flag = True", "\n", "#         break", "\n", "# if not flag and venues:", "\n", "                            ", "flag", "=", "False", "\n", "for", "ven", "in", "venues", ":", "\n", "                                ", "if", "ven", "not", "in", "venue_offered", "[", "domain", "]", ":", "\n", "# if ven not in venue_offered[domain]:", "\n", "                                    ", "flag", "=", "True", "\n", "break", "\n", "# if flag and venues:", "\n", "", "", "if", "flag", "and", "venues", ":", "# sometimes there are no results so sample won't work", "\n", "# print venues", "\n", "# venue_offered[domain] = random.sample(venues, 1)", "\n", "                                ", "venue_offered", "[", "domain", "]", "=", "venues", "\n", "bspans", "[", "domain", "]", "=", "constraint_dict", "[", "domain", "]", "\n", "", "", "", "else", ":", "# not limited so we can provide one", "\n", "                        ", "venue_offered", "[", "domain", "]", "=", "'[value_name]'", "\n", "\n", "# ATTENTION: assumption here - we didn't provide phone or address twice! etc", "\n", "", "", "for", "requestable", "in", "requestables", ":", "\n", "                    ", "if", "requestable", "==", "'reference'", ":", "\n", "                        ", "if", "'[value_reference]'", "in", "sent_t", ":", "\n", "                            ", "if", "'booked'", "in", "turn", "[", "'pointer'", "]", "or", "'ok'", "in", "turn", "[", "'pointer'", "]", ":", "# if pointer was allowing for that?", "\n", "                                ", "provided_requestables", "[", "domain", "]", ".", "append", "(", "'reference'", ")", "\n", "# provided_requestables[domain].append('reference')", "\n", "", "", "", "else", ":", "\n", "                        ", "if", "'[value_'", "+", "requestable", "+", "']'", "in", "sent_t", ":", "\n", "                            ", "provided_requestables", "[", "domain", "]", ".", "append", "(", "requestable", ")", "\n", "\n", "# if name was given in the task", "\n", "", "", "", "", "", "for", "domain", "in", "goal", ".", "keys", "(", ")", ":", "\n", "# if name was provided for the user, the match is being done automatically", "\n", "            ", "if", "'name'", "in", "goal", "[", "domain", "]", "[", "'informable'", "]", ":", "\n", "                ", "venue_offered", "[", "domain", "]", "=", "'[value_name]'", "\n", "\n", "# special domains - entity does not need to be provided", "\n", "", "if", "domain", "in", "[", "'taxi'", ",", "'police'", ",", "'hospital'", "]", ":", "\n", "                ", "venue_offered", "[", "domain", "]", "=", "'[value_name]'", "\n", "\n", "", "if", "domain", "==", "'train'", ":", "\n", "                ", "if", "not", "venue_offered", "[", "domain", "]", "and", "'id'", "not", "in", "goal", "[", "domain", "]", "[", "'requestable'", "]", ":", "\n", "                    ", "venue_offered", "[", "domain", "]", "=", "'[value_name]'", "\n", "\n", "", "", "", "\"\"\"\n        Given all inform and requestable slots\n        we go through each domain from the user goal\n        and check whether right entity was provided and\n        all requestable slots were given to the user.\n        The dialogue is successful if that's the case for all domains.\n        \"\"\"", "\n", "# HARD EVAL", "\n", "stats", "=", "{", "'restaurant'", ":", "[", "0", ",", "0", ",", "0", "]", ",", "'hotel'", ":", "[", "0", ",", "0", ",", "0", "]", ",", "'attraction'", ":", "[", "0", ",", "0", ",", "0", "]", ",", "'train'", ":", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "'taxi'", ":", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "'hospital'", ":", "[", "0", ",", "0", ",", "0", "]", ",", "'police'", ":", "[", "0", ",", "0", ",", "0", "]", "}", "\n", "\n", "match", "=", "0", "\n", "success", "=", "0", "\n", "# MATCH", "\n", "for", "domain", "in", "goal", ".", "keys", "(", ")", ":", "\n", "            ", "match_stat", "=", "0", "\n", "if", "domain", "in", "[", "'restaurant'", ",", "'hotel'", ",", "'attraction'", ",", "'train'", "]", ":", "\n", "                ", "goal_venues", "=", "self", ".", "reader", ".", "db", ".", "queryJsons", "(", "domain", ",", "goal", "[", "domain", "]", "[", "'informable'", "]", ",", "return_name", "=", "True", ")", "\n", "if", "type", "(", "venue_offered", "[", "domain", "]", ")", "is", "str", "and", "'_name'", "in", "venue_offered", "[", "domain", "]", ":", "\n", "                    ", "match", "+=", "1", "\n", "match_stat", "=", "1", "\n", "", "elif", "len", "(", "venue_offered", "[", "domain", "]", ")", ">", "0", "and", "len", "(", "set", "(", "venue_offered", "[", "domain", "]", ")", "&", "set", "(", "goal_venues", ")", ")", ">", "0", ":", "\n", "                    ", "match", "+=", "1", "\n", "match_stat", "=", "1", "\n", "", "", "else", ":", "\n", "                ", "if", "'_name]'", "in", "venue_offered", "[", "domain", "]", ":", "\n", "                    ", "match", "+=", "1", "\n", "match_stat", "=", "1", "\n", "\n", "", "", "stats", "[", "domain", "]", "[", "0", "]", "=", "match_stat", "\n", "stats", "[", "domain", "]", "[", "2", "]", "=", "1", "\n", "\n", "", "if", "soft_acc", ":", "\n", "            ", "match", "=", "float", "(", "match", ")", "/", "len", "(", "goal", ".", "keys", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "match", "==", "len", "(", "goal", ".", "keys", "(", ")", ")", ":", "\n", "                ", "match", "=", "1.0", "\n", "", "else", ":", "\n", "                ", "match", "=", "0.0", "\n", "\n", "", "", "for", "domain", "in", "domains_in_goal", ":", "\n", "            ", "for", "request", "in", "real_requestables", "[", "domain", "]", ":", "\n", "                ", "counts", "[", "request", "+", "'_total'", "]", "+=", "1", "\n", "if", "request", "in", "provided_requestables", "[", "domain", "]", ":", "\n", "                    ", "counts", "[", "request", "+", "'_offer'", "]", "+=", "1", "\n", "\n", "# SUCCESS", "\n", "", "", "", "if", "match", "==", "1.0", ":", "\n", "            ", "for", "domain", "in", "domains_in_goal", ":", "\n", "                ", "success_stat", "=", "0", "\n", "domain_success", "=", "0", "\n", "if", "len", "(", "real_requestables", "[", "domain", "]", ")", "==", "0", ":", "\n", "                    ", "success", "+=", "1", "\n", "success_stat", "=", "1", "\n", "stats", "[", "domain", "]", "[", "1", "]", "=", "success_stat", "\n", "continue", "\n", "# if values in sentences are super set of requestables", "\n", "# for request in set(provided_requestables[domain]):", "\n", "#     if request in real_requestables[domain]:", "\n", "#         domain_success += 1", "\n", "", "for", "request", "in", "real_requestables", "[", "domain", "]", ":", "\n", "                    ", "if", "request", "in", "provided_requestables", "[", "domain", "]", ":", "\n", "                        ", "domain_success", "+=", "1", "\n", "\n", "# if domain_success >= len(real_requestables[domain]):", "\n", "", "", "if", "domain_success", "==", "len", "(", "real_requestables", "[", "domain", "]", ")", ":", "\n", "                    ", "success", "+=", "1", "\n", "success_stat", "=", "1", "\n", "\n", "", "stats", "[", "domain", "]", "[", "1", "]", "=", "success_stat", "\n", "\n", "# final eval", "\n", "", "if", "soft_acc", ":", "\n", "                ", "success", "=", "float", "(", "success", ")", "/", "len", "(", "real_requestables", ")", "\n", "", "else", ":", "\n", "                ", "if", "success", ">=", "len", "(", "real_requestables", ")", ":", "\n", "                    ", "success", "=", "1", "\n", "", "else", ":", "\n", "                    ", "success", "=", "0", "\n", "\n", "", "", "", "return", "success", ",", "match", ",", "stats", ",", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator._parseGoal": [[720, 750], ["[].items", "clean_dataset.clean_slot_values", "[].append", "[].append", "len", "[].append", "v_.split", "[].append", "eval.MultiWozEvaluator.reader.nlp"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values"], ["", "def", "_parseGoal", "(", "self", ",", "goal", ",", "true_goal", ",", "domain", ")", ":", "\n", "        ", "\"\"\"Parses user goal into dictionary format.\"\"\"", "\n", "goal", "[", "domain", "]", "=", "{", "}", "\n", "goal", "[", "domain", "]", "=", "{", "'informable'", ":", "{", "}", ",", "'requestable'", ":", "[", "]", ",", "'booking'", ":", "[", "]", "}", "\n", "if", "'info'", "in", "true_goal", "[", "domain", "]", ":", "\n", "            ", "if", "domain", "==", "'train'", ":", "\n", "# we consider dialogues only where train had to be booked!", "\n", "                ", "if", "'book'", "in", "true_goal", "[", "domain", "]", ":", "\n", "                    ", "goal", "[", "domain", "]", "[", "'requestable'", "]", ".", "append", "(", "'reference'", ")", "\n", "", "if", "'reqt'", "in", "true_goal", "[", "domain", "]", ":", "\n", "                    ", "if", "'id'", "in", "true_goal", "[", "domain", "]", "[", "'reqt'", "]", ":", "\n", "                        ", "goal", "[", "domain", "]", "[", "'requestable'", "]", ".", "append", "(", "'id'", ")", "\n", "", "", "", "else", ":", "\n", "                ", "if", "'reqt'", "in", "true_goal", "[", "domain", "]", ":", "\n", "                    ", "for", "s", "in", "true_goal", "[", "domain", "]", "[", "'reqt'", "]", ":", "# addtional requests:", "\n", "                        ", "if", "s", "in", "[", "'phone'", ",", "'address'", ",", "'postcode'", ",", "'reference'", ",", "'id'", "]", ":", "\n", "# ones that can be easily delexicalized", "\n", "                            ", "goal", "[", "domain", "]", "[", "'requestable'", "]", ".", "append", "(", "s", ")", "\n", "", "", "", "if", "'book'", "in", "true_goal", "[", "domain", "]", ":", "\n", "                    ", "goal", "[", "domain", "]", "[", "'requestable'", "]", ".", "append", "(", "\"reference\"", ")", "\n", "\n", "", "", "for", "s", ",", "v", "in", "true_goal", "[", "domain", "]", "[", "'info'", "]", ".", "items", "(", ")", ":", "\n", "                ", "s_", ",", "v_", "=", "clean_slot_values", "(", "domain", ",", "s", ",", "v", ")", "\n", "if", "len", "(", "v_", ".", "split", "(", ")", ")", ">", "1", ":", "\n", "                    ", "v_", "=", "' '", ".", "join", "(", "[", "token", ".", "text", "for", "token", "in", "self", ".", "reader", ".", "nlp", "(", "v_", ")", "]", ")", ".", "strip", "(", ")", "\n", "", "goal", "[", "domain", "]", "[", "\"informable\"", "]", "[", "s_", "]", "=", "v_", "\n", "\n", "", "if", "'book'", "in", "true_goal", "[", "domain", "]", ":", "\n", "                ", "goal", "[", "domain", "]", "[", "\"booking\"", "]", "=", "true_goal", "[", "domain", "]", "[", "'book'", "]", "\n", "", "", "return", "goal", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.config21._Config.__init__": [[4, 6], ["config21._Config._multiwoz_damd_init"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.config21._Config._multiwoz_damd_init"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_multiwoz_damd_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.config21._Config._multiwoz_damd_init": [[7, 124], ["time.strftime", "time.localtime"], "methods", ["None"], ["", "def", "_multiwoz_damd_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "gpt_path", "=", "'/data/yangyy/BERT-models/huggingface/distilgpt2/'", "\n", "\n", "self", ".", "vocab_path_train", "=", "'./data/multi-woz-2.1-processed/vocab'", "\n", "self", ".", "vocab_path_eval", "=", "None", "\n", "self", ".", "data_path", "=", "'./data/multi-woz-2.1-processed/'", "\n", "self", ".", "data_file", "=", "'data_for_damd.json'", "\n", "self", ".", "dev_list", "=", "'data/multi-woz/valListFile.json'", "\n", "self", ".", "test_list", "=", "'data/multi-woz/testListFile.json'", "\n", "self", ".", "dbs", "=", "{", "\n", "'attraction'", ":", "'db/attraction_db_processed.json'", ",", "\n", "'hospital'", ":", "'db/hospital_db_processed.json'", ",", "\n", "'hotel'", ":", "'db/hotel_db_processed.json'", ",", "\n", "'police'", ":", "'db/police_db_processed.json'", ",", "\n", "'restaurant'", ":", "'db/restaurant_db_processed.json'", ",", "\n", "'taxi'", ":", "'db/taxi_db_processed.json'", ",", "\n", "'train'", ":", "'db/train_db_processed.json'", ",", "\n", "}", "\n", "self", ".", "glove_path", "=", "'./data/glove/glove.6B.50d.txt'", "\n", "self", ".", "domain_file_path", "=", "'data/multi-woz-2.1-processed/domain_files.json'", "\n", "self", ".", "slot_value_set_path", "=", "'db/value_set_processed.json'", "\n", "self", ".", "multi_acts_path", "=", "'data/multi-woz-2.1-processed/multi_act_mapping_train.json'", "\n", "self", ".", "exp_path", "=", "'to be generated'", "\n", "self", ".", "log_time", "=", "time", ".", "strftime", "(", "\"%Y-%m-%d-%H-%M-%S\"", ",", "time", ".", "localtime", "(", ")", ")", "\n", "\n", "# experiment settings", "\n", "self", ".", "mode", "=", "'unknown'", "\n", "self", ".", "cuda", "=", "True", "\n", "self", ".", "cuda_device", "=", "[", "1", "]", "\n", "self", ".", "exp_no", "=", "''", "\n", "self", ".", "seed", "=", "11", "\n", "self", ".", "exp_domains", "=", "[", "'all'", "]", "\n", "self", ".", "save_log", "=", "True", "# tensorboard ", "\n", "self", ".", "evaluate_during_training", "=", "False", "# evaluate during training", "\n", "self", ".", "report_interval", "=", "200", "# 485 for bs 128", "\n", "self", ".", "max_nl_length", "=", "60", "\n", "self", ".", "max_span_length", "=", "30", "\n", "self", ".", "truncated", "=", "False", "\n", "\n", "# model settings", "\n", "self", ".", "vocab_size", "=", "3000", "\n", "self", ".", "embed_size", "=", "50", "\n", "self", ".", "hidden_size", "=", "100", "\n", "self", ".", "pointer_dim", "=", "6", "# fixed", "\n", "self", ".", "enc_layer_num", "=", "1", "\n", "self", ".", "dec_layer_num", "=", "1", "\n", "self", ".", "dropout", "=", "0", "\n", "self", ".", "layer_norm", "=", "False", "\n", "self", ".", "skip_connect", "=", "False", "\n", "self", ".", "encoder_share", "=", "False", "\n", "self", ".", "attn_param_share", "=", "False", "\n", "self", ".", "copy_param_share", "=", "False", "\n", "self", ".", "enable_aspn", "=", "True", "\n", "self", ".", "use_pvaspn", "=", "False", "\n", "self", ".", "enable_bspn", "=", "True", "\n", "self", ".", "bspn_mode", "=", "'bsdx'", "# 'bspn' or 'bsdx'", "\n", "self", ".", "enable_dspn", "=", "False", "# removed", "\n", "self", ".", "enable_dst", "=", "False", "\n", "\n", "# training settings", "\n", "self", ".", "lr", "=", "5e-4", "\n", "self", ".", "warmup_steps", "=", "2000", "# gpt tbd", "\n", "self", ".", "weight_decay", "=", "0.0", "# gpt tbd", "\n", "self", ".", "gradient_accumulation_steps", "=", "16", "\n", "self", ".", "batch_size", "=", "2", "\n", "\n", "self", ".", "label_smoothing", "=", ".0", "\n", "self", ".", "lr_decay", "=", "0.5", "\n", "self", ".", "epoch_num", "=", "60", "\n", "self", ".", "early_stop_count", "=", "5", "\n", "self", ".", "weight_decay_count", "=", "3", "\n", "self", ".", "teacher_force", "=", "100", "\n", "self", ".", "multi_acts_training", "=", "False", "\n", "self", ".", "multi_act_sampling_num", "=", "1", "\n", "self", ".", "valid_loss", "=", "'score'", "\n", "\n", "# evaluation settings", "\n", "self", ".", "eval_load_path", "=", "'experiments/all_0729_sd11_lr0.0001_bs2_ga16/epoch43_trloss0.56_gpt2'", "\n", "self", ".", "model_output", "=", "'model_output_e2e_FFFT_fix_bs.json'", "\n", "self", ".", "eval_per_domain", "=", "False", "\n", "\n", "### generation setting", "\n", "self", ".", "use_true_prev_bspn", "=", "True", "\n", "self", ".", "use_true_prev_aspn", "=", "True", "\n", "self", ".", "use_true_db_pointer", "=", "False", "\n", "self", ".", "use_true_prev_resp", "=", "True", "\n", "\n", "self", ".", "use_true_curr_bspn", "=", "True", "\n", "self", ".", "use_true_curr_aspn", "=", "False", "\n", "self", ".", "use_all_previous_context", "=", "True", "\n", "\n", "self", ".", "context_scheme", "=", "'UBARU'", "# UBARU or URURU", "\n", "self", ".", "exp_domains", "=", "[", "'all'", "]", "# hotel,train, attraction, restaurant, taxi", "\n", "self", ".", "log_path", "=", "'logs2.1'", "\n", "self", ".", "low_resource", "=", "False", "\n", "###", "\n", "\n", "## dst setting", "\n", "self", ".", "fix_bs", "=", "True", "\n", "self", ".", "use_nodelex_resp", "=", "True", "\n", "self", ".", "max_context_length", "=", "900", "\n", "##", "\n", "\n", "self", ".", "use_true_bspn_for_ctr_eval", "=", "True", "\n", "self", ".", "use_true_domain_for_ctr_eval", "=", "True", "\n", "self", ".", "limit_bspn_vocab", "=", "False", "\n", "self", ".", "limit_aspn_vocab", "=", "False", "\n", "self", ".", "same_eval_as_cambridge", "=", "True", "\n", "self", ".", "same_eval_act_f1_as_hdsa", "=", "False", "\n", "self", ".", "aspn_decode_mode", "=", "'greedy'", "#beam, greedy, nucleur_sampling, topk_sampling", "\n", "self", ".", "beam_width", "=", "5", "\n", "self", ".", "nbest", "=", "5", "\n", "self", ".", "beam_diverse_param", "=", "0.2", "\n", "self", ".", "act_selection_scheme", "=", "'high_test_act_f1'", "\n", "self", ".", "topk_num", "=", "1", "\n", "self", ".", "nucleur_p", "=", "0.", "\n", "self", ".", "record_mode", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.config21._Config.__str__": [[125, 130], ["config21._Config.__dict__.items"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "''", "\n", "for", "k", ",", "v", "in", "self", ".", "__dict__", ".", "items", "(", ")", ":", "\n", "            ", "s", "+=", "'{} : {}\\n'", ".", "format", "(", "k", ",", "v", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.config21._Config._init_logging_handler": [[132, 149], ["logging.StreamHandler", "logging.getLogger", "logging.getLogger.setLevel", "os.path.exists", "os.mkdir", "logging.FileHandler", "logging.basicConfig", "os.path.join", "logging.FileHandler", "logging.basicConfig", "logging.basicConfig"], "methods", ["None"], ["", "def", "_init_logging_handler", "(", "self", ",", "mode", ")", ":", "\n", "        ", "stderr_handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'./log'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'./log'", ")", "\n", "", "if", "self", ".", "save_log", "and", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "file_handler", "=", "logging", ".", "FileHandler", "(", "'./log/log_{}_{}_{}_{}_sd{}.txt'", ".", "format", "(", "self", ".", "log_time", ",", "mode", ",", "'-'", ".", "join", "(", "self", ".", "exp_domains", ")", ",", "self", ".", "exp_no", ",", "self", ".", "seed", ")", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "stderr_handler", ",", "file_handler", "]", ")", "\n", "", "elif", "self", ".", "mode", "==", "'test'", ":", "\n", "            ", "eval_log_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "eval_load_path", ",", "'eval_log.json'", ")", "\n", "# if os.path.exists(eval_log_path):", "\n", "#     os.remove(eval_log_path)", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "eval_log_path", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "stderr_handler", ",", "file_handler", "]", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "stderr_handler", "]", ")", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.__init__": [[5, 11], ["open", "json.loads", "f.read().lower", "f.read"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "db_paths", ")", ":", "\n", "        ", "self", ".", "dbs", "=", "{", "}", "\n", "self", ".", "sql_dbs", "=", "{", "}", "\n", "for", "domain", "in", "all_domains", ":", "\n", "            ", "with", "open", "(", "db_paths", "[", "domain", "]", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "self", ".", "dbs", "[", "domain", "]", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ".", "lower", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.oneHotVector": [[13, 37], ["None"], "methods", ["None"], ["", "", "", "def", "oneHotVector", "(", "self", ",", "domain", ",", "num", ")", ":", "\n", "        ", "\"\"\"Return number of available entities for particular domain.\"\"\"", "\n", "vector", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "if", "num", "==", "''", ":", "\n", "            ", "return", "vector", "\n", "", "if", "domain", "!=", "'train'", ":", "\n", "            ", "if", "num", "==", "0", ":", "\n", "                ", "vector", "=", "[", "1", ",", "0", ",", "0", ",", "0", "]", "\n", "", "elif", "num", "==", "1", ":", "\n", "                ", "vector", "=", "[", "0", ",", "1", ",", "0", ",", "0", "]", "\n", "", "elif", "num", "<=", "3", ":", "\n", "                ", "vector", "=", "[", "0", ",", "0", ",", "1", ",", "0", "]", "\n", "", "else", ":", "\n", "                ", "vector", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "", "", "else", ":", "\n", "            ", "if", "num", "==", "0", ":", "\n", "                ", "vector", "=", "[", "1", ",", "0", ",", "0", ",", "0", "]", "\n", "", "elif", "num", "<=", "5", ":", "\n", "                ", "vector", "=", "[", "0", ",", "1", ",", "0", ",", "0", "]", "\n", "", "elif", "num", "<=", "10", ":", "\n", "                ", "vector", "=", "[", "0", ",", "0", ",", "1", ",", "0", "]", "\n", "", "else", ":", "\n", "                ", "vector", "=", "[", "0", ",", "0", ",", "0", ",", "1", "]", "\n", "", "", "return", "vector", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.addBookingPointer": [[39, 49], ["turn_da.get", "turn_da.get", "turn_da.get"], "methods", ["None"], ["", "def", "addBookingPointer", "(", "self", ",", "turn_da", ")", ":", "\n", "        ", "\"\"\"Add information about availability of the booking option.\"\"\"", "\n", "# Booking pointer", "\n", "# Do not consider booking two things in a single turn.", "\n", "vector", "=", "[", "0", ",", "0", "]", "\n", "if", "turn_da", ".", "get", "(", "'booking-nobook'", ")", ":", "\n", "            ", "vector", "=", "[", "1", ",", "0", "]", "\n", "", "if", "turn_da", ".", "get", "(", "'booking-book'", ")", "or", "turn_da", ".", "get", "(", "'train-offerbooked'", ")", ":", "\n", "            ", "vector", "=", "[", "0", ",", "1", "]", "\n", "", "return", "vector", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.addDBPointer": [[51, 60], ["db_ops.MultiWozDB.oneHotVector"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.oneHotVector"], ["", "def", "addDBPointer", "(", "self", ",", "domain", ",", "match_num", ",", "return_num", "=", "False", ")", ":", "\n", "        ", "\"\"\"Create database pointer for all related domains.\"\"\"", "\n", "# if turn_domains is None:", "\n", "#     turn_domains = db_domains", "\n", "if", "domain", "in", "db_domains", ":", "\n", "            ", "vector", "=", "self", ".", "oneHotVector", "(", "domain", ",", "match_num", ")", "\n", "", "else", ":", "\n", "            ", "vector", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "", "return", "vector", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.addDBIndicator": [[61, 76], ["db_ops.MultiWozDB.oneHotVector", "db_ops.MultiWozDB.index"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.oneHotVector"], ["", "def", "addDBIndicator", "(", "self", ",", "domain", ",", "match_num", ",", "return_num", "=", "False", ")", ":", "\n", "        ", "\"\"\"Create database indicator for all related domains.\"\"\"", "\n", "# if turn_domains is None:", "\n", "#     turn_domains = db_domains", "\n", "if", "domain", "in", "db_domains", ":", "\n", "            ", "vector", "=", "self", ".", "oneHotVector", "(", "domain", ",", "match_num", ")", "\n", "", "else", ":", "\n", "            ", "vector", "=", "[", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "\n", "# '[db_nores]', '[db_0]', '[db_1]', '[db_2]', '[db_3]'", "\n", "", "if", "vector", "==", "[", "0", ",", "0", ",", "0", ",", "0", "]", ":", "\n", "            ", "indicator", "=", "'[db_nores]'", "\n", "", "else", ":", "\n", "            ", "indicator", "=", "'[db_%s]'", "%", "vector", ".", "index", "(", "1", ")", "\n", "", "return", "indicator", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.get_match_num": [[77, 93], ["constraints.get", "db_ops.MultiWozDB.queryJsons", "len"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.queryJsons"], ["", "def", "get_match_num", "(", "self", ",", "constraints", ",", "return_entry", "=", "False", ")", ":", "\n", "        ", "\"\"\"Create database pointer for all related domains.\"\"\"", "\n", "match", "=", "{", "'general'", ":", "''", "}", "\n", "entry", "=", "{", "}", "\n", "# if turn_domains is None:", "\n", "#     turn_domains = db_domains", "\n", "for", "domain", "in", "all_domains", ":", "\n", "            ", "match", "[", "domain", "]", "=", "''", "\n", "if", "domain", "in", "db_domains", "and", "constraints", ".", "get", "(", "domain", ")", ":", "\n", "                ", "matched_ents", "=", "self", ".", "queryJsons", "(", "domain", ",", "constraints", "[", "domain", "]", ")", "\n", "match", "[", "domain", "]", "=", "len", "(", "matched_ents", ")", "\n", "if", "return_entry", ":", "\n", "                    ", "entry", "[", "domain", "]", "=", "matched_ents", "\n", "", "", "", "if", "return_entry", ":", "\n", "            ", "return", "entry", "\n", "", "return", "match", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.pointerBack": [[95, 126], ["domain.endswith", "vector.index"], "methods", ["None"], ["", "def", "pointerBack", "(", "self", ",", "vector", ",", "domain", ")", ":", "\n", "# multi domain implementation", "\n", "# domnum = cfg.domain_num", "\n", "        ", "if", "domain", ".", "endswith", "(", "']'", ")", ":", "\n", "            ", "domain", "=", "domain", "[", "1", ":", "-", "1", "]", "\n", "", "if", "domain", "!=", "'train'", ":", "\n", "            ", "nummap", "=", "{", "\n", "0", ":", "'0'", ",", "\n", "1", ":", "'1'", ",", "\n", "2", ":", "'2-3'", ",", "\n", "3", ":", "'>3'", "\n", "}", "\n", "", "else", ":", "\n", "            ", "nummap", "=", "{", "\n", "0", ":", "'0'", ",", "\n", "1", ":", "'1-5'", ",", "\n", "2", ":", "'6-10'", ",", "\n", "3", ":", "'>10'", "\n", "}", "\n", "", "if", "vector", "[", ":", "4", "]", "==", "[", "0", ",", "0", ",", "0", ",", "0", "]", ":", "\n", "            ", "report", "=", "''", "\n", "", "else", ":", "\n", "            ", "num", "=", "vector", ".", "index", "(", "1", ")", "\n", "report", "=", "domain", "+", "': '", "+", "nummap", "[", "num", "]", "+", "'; '", "\n", "\n", "", "if", "vector", "[", "-", "2", "]", "==", "0", "and", "vector", "[", "-", "1", "]", "==", "1", ":", "\n", "            ", "report", "+=", "'booking: ok'", "\n", "", "if", "vector", "[", "-", "2", "]", "==", "1", "and", "vector", "[", "-", "1", "]", "==", "0", ":", "\n", "            ", "report", "+=", "'booking: unable'", "\n", "\n", "", "return", "report", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.queryJsons": [[128, 221], ["constraints.values", "constraints.get", "constraints.items", "skip_case.get", "match_result.append", "random.choice", "random.choice", "random.randint", "entry.get", "constraints.get", "match_result.append", "v.split", "int", "range", "int", "int", "int", "db_ent[].split", "db_ent[].split"], "methods", ["None"], ["", "def", "queryJsons", "(", "self", ",", "domain", ",", "constraints", ",", "exactly_match", "=", "True", ",", "return_name", "=", "False", ")", ":", "\n", "        ", "\"\"\"Returns the list of entities for a given domain\n        based on the annotation of the belief state\n        constraints: dict e.g. {'pricerange': 'cheap', 'area': 'west'}\n        \"\"\"", "\n", "# query the db", "\n", "if", "domain", "==", "'taxi'", ":", "\n", "            ", "return", "[", "{", "'taxi_colors'", ":", "random", ".", "choice", "(", "self", ".", "dbs", "[", "domain", "]", "[", "'taxi_colors'", "]", ")", ",", "\n", "'taxi_types'", ":", "random", ".", "choice", "(", "self", ".", "dbs", "[", "domain", "]", "[", "'taxi_types'", "]", ")", ",", "\n", "'taxi_phone'", ":", "[", "random", ".", "randint", "(", "1", ",", "9", ")", "for", "_", "in", "range", "(", "10", ")", "]", "}", "]", "\n", "", "if", "domain", "==", "'police'", ":", "\n", "            ", "return", "self", ".", "dbs", "[", "'police'", "]", "\n", "", "if", "domain", "==", "'hospital'", ":", "\n", "            ", "if", "constraints", ".", "get", "(", "'department'", ")", ":", "\n", "                ", "for", "entry", "in", "self", ".", "dbs", "[", "'hospital'", "]", ":", "\n", "                    ", "if", "entry", ".", "get", "(", "'department'", ")", "==", "constraints", ".", "get", "(", "'department'", ")", ":", "\n", "                        ", "return", "[", "entry", "]", "\n", "", "", "", "else", ":", "\n", "                ", "return", "[", "]", "\n", "\n", "", "", "valid_cons", "=", "False", "\n", "for", "v", "in", "constraints", ".", "values", "(", ")", ":", "\n", "            ", "if", "v", "not", "in", "[", "\"not mentioned\"", ",", "\"\"", "]", ":", "\n", "                ", "valid_cons", "=", "True", "\n", "", "", "if", "not", "valid_cons", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "match_result", "=", "[", "]", "\n", "\n", "\n", "if", "'name'", "in", "constraints", ":", "\n", "            ", "for", "db_ent", "in", "self", ".", "dbs", "[", "domain", "]", ":", "\n", "                ", "if", "'name'", "in", "db_ent", ":", "\n", "                    ", "cons", "=", "constraints", "[", "'name'", "]", "\n", "dbn", "=", "db_ent", "[", "'name'", "]", "\n", "if", "cons", "==", "dbn", ":", "\n", "                        ", "db_ent", "=", "db_ent", "if", "not", "return_name", "else", "db_ent", "[", "'name'", "]", "\n", "match_result", ".", "append", "(", "db_ent", ")", "\n", "return", "match_result", "\n", "\n", "", "", "", "", "for", "db_ent", "in", "self", ".", "dbs", "[", "domain", "]", ":", "\n", "            ", "match", "=", "True", "\n", "for", "s", ",", "v", "in", "constraints", ".", "items", "(", ")", ":", "\n", "                ", "if", "s", "==", "'name'", ":", "\n", "                    ", "continue", "\n", "", "if", "s", "in", "[", "'people'", ",", "'stay'", "]", "or", "(", "domain", "==", "'hotel'", "and", "s", "==", "'day'", ")", "or", "(", "domain", "==", "'restaurant'", "and", "s", "in", "[", "'day'", ",", "'time'", "]", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "skip_case", "=", "{", "\"don't care\"", ":", "1", ",", "\"do n't care\"", ":", "1", ",", "\"dont care\"", ":", "1", ",", "\"not mentioned\"", ":", "1", ",", "\"dontcare\"", ":", "1", ",", "\"\"", ":", "1", "}", "\n", "if", "skip_case", ".", "get", "(", "v", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "if", "s", "not", "in", "db_ent", ":", "\n", "# logging.warning('Searching warning: slot %s not in %s db'%(s, domain))", "\n", "                    ", "match", "=", "False", "\n", "break", "\n", "\n", "# v = 'guesthouse' if v == 'guest house' else v", "\n", "# v = 'swimmingpool' if v == 'swimming pool' else v", "\n", "", "v", "=", "'yes'", "if", "v", "==", "'free'", "else", "v", "\n", "\n", "if", "s", "in", "[", "'arrive'", ",", "'leave'", "]", ":", "\n", "                    ", "try", ":", "\n", "                        ", "h", ",", "m", "=", "v", ".", "split", "(", "':'", ")", "# raise error if time value is not xx:xx format", "\n", "v", "=", "int", "(", "h", ")", "*", "60", "+", "int", "(", "m", ")", "\n", "", "except", ":", "\n", "                        ", "match", "=", "False", "\n", "break", "\n", "", "time", "=", "int", "(", "db_ent", "[", "s", "]", ".", "split", "(", "':'", ")", "[", "0", "]", ")", "*", "60", "+", "int", "(", "db_ent", "[", "s", "]", ".", "split", "(", "':'", ")", "[", "1", "]", ")", "\n", "if", "s", "==", "'arrive'", "and", "v", ">", "time", ":", "\n", "                        ", "match", "=", "False", "\n", "", "if", "s", "==", "'leave'", "and", "v", "<", "time", ":", "\n", "                        ", "match", "=", "False", "\n", "", "", "else", ":", "\n", "                    ", "if", "exactly_match", "and", "v", "!=", "db_ent", "[", "s", "]", ":", "\n", "                        ", "match", "=", "False", "\n", "break", "\n", "", "elif", "v", "not", "in", "db_ent", "[", "s", "]", ":", "\n", "                        ", "match", "=", "False", "\n", "break", "\n", "\n", "", "", "", "if", "match", ":", "\n", "                ", "match_result", ".", "append", "(", "db_ent", ")", "\n", "\n", "", "", "if", "not", "return_name", ":", "\n", "            ", "return", "match_result", "\n", "", "else", ":", "\n", "            ", "if", "domain", "==", "'train'", ":", "\n", "                ", "match_result", "=", "[", "e", "[", "'id'", "]", "for", "e", "in", "match_result", "]", "\n", "", "else", ":", "\n", "                ", "match_result", "=", "[", "e", "[", "'name'", "]", "for", "e", "in", "match_result", "]", "\n", "", "return", "match_result", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.querySQL": [[223, 265], ["constraints.items", "print", "db_ops.MultiWozDB.sql_dbs[].execute().fetchall", "sqlite3.connect", "sqlite3.connect.cursor", "val.replace", "val.replace", "db_ops.MultiWozDB.sql_dbs[].execute"], "methods", ["None"], ["", "", "def", "querySQL", "(", "self", ",", "domain", ",", "constraints", ")", ":", "\n", "        ", "if", "not", "self", ".", "sql_dbs", ":", "\n", "            ", "for", "dom", "in", "db_domains", ":", "\n", "                ", "db", "=", "'db/{}-dbase.db'", ".", "format", "(", "dom", ")", "\n", "conn", "=", "sqlite3", ".", "connect", "(", "db", ")", "\n", "c", "=", "conn", ".", "cursor", "(", ")", "\n", "self", ".", "sql_dbs", "[", "dom", "]", "=", "c", "\n", "\n", "", "", "sql_query", "=", "\"select * from {}\"", ".", "format", "(", "domain", ")", "\n", "\n", "\n", "flag", "=", "True", "\n", "for", "key", ",", "val", "in", "constraints", ".", "items", "(", ")", ":", "\n", "            ", "if", "val", "==", "\"\"", "or", "val", "==", "\"dontcare\"", "or", "val", "==", "'not mentioned'", "or", "val", "==", "\"don't care\"", "or", "val", "==", "\"dont care\"", "or", "val", "==", "\"do n't care\"", ":", "\n", "                ", "pass", "\n", "", "else", ":", "\n", "                ", "if", "flag", ":", "\n", "                    ", "sql_query", "+=", "\" where \"", "\n", "val2", "=", "val", ".", "replace", "(", "\"'\"", ",", "\"''\"", ")", "\n", "# val2 = normalize(val2)", "\n", "if", "key", "==", "'leaveAt'", ":", "\n", "                        ", "sql_query", "+=", "r\" \"", "+", "key", "+", "\" > \"", "+", "r\"'\"", "+", "val2", "+", "r\"'\"", "\n", "", "elif", "key", "==", "'arriveBy'", ":", "\n", "                        ", "sql_query", "+=", "r\" \"", "+", "key", "+", "\" < \"", "+", "r\"'\"", "+", "val2", "+", "r\"'\"", "\n", "", "else", ":", "\n", "                        ", "sql_query", "+=", "r\" \"", "+", "key", "+", "\"=\"", "+", "r\"'\"", "+", "val2", "+", "r\"'\"", "\n", "", "flag", "=", "False", "\n", "", "else", ":", "\n", "                    ", "val2", "=", "val", ".", "replace", "(", "\"'\"", ",", "\"''\"", ")", "\n", "# val2 = normalize(val2)", "\n", "if", "key", "==", "'leaveAt'", ":", "\n", "                        ", "sql_query", "+=", "r\" and \"", "+", "key", "+", "\" > \"", "+", "r\"'\"", "+", "val2", "+", "r\"'\"", "\n", "", "elif", "key", "==", "'arriveBy'", ":", "\n", "                        ", "sql_query", "+=", "r\" and \"", "+", "key", "+", "\" < \"", "+", "r\"'\"", "+", "val2", "+", "r\"'\"", "\n", "", "else", ":", "\n", "                        ", "sql_query", "+=", "r\" and \"", "+", "key", "+", "\"=\"", "+", "r\"'\"", "+", "val2", "+", "r\"'\"", "\n", "\n", "", "", "", "", "try", ":", "# \"select * from attraction  where name = 'queens college'\"", "\n", "            ", "print", "(", "sql_query", ")", "\n", "return", "self", ".", "sql_dbs", "[", "domain", "]", ".", "execute", "(", "sql_query", ")", ".", "fetchall", "(", ")", "\n", "", "except", ":", "\n", "            ", "return", "[", "]", "# TODO test it", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.__init__": [[31, 52], ["transformers.GPT2Tokenizer.from_pretrained", "reader.MultiWozReader", "transformers.GPT2LMHeadModel.from_pretrained", "train.Modal.model.to", "eval.MultiWozEvaluator", "train.Modal.model.resize_token_embeddings", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "device", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "# initialize tokenizer", "\n", "self", ".", "tokenizer", "=", "GPT2Tokenizer", ".", "from_pretrained", "(", "cfg", ".", "gpt_path", ")", "\n", "# cfg.tokenizer = tokenizer", "\n", "\n", "# initialize multiwoz reader", "\n", "self", ".", "reader", "=", "MultiWozReader", "(", "self", ".", "tokenizer", ")", "\n", "\n", "# create model: gpt2", "\n", "self", ".", "model", "=", "GPT2LMHeadModel", ".", "from_pretrained", "(", "cfg", ".", "gpt_path", ")", "\n", "if", "cfg", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "model", ".", "resize_token_embeddings", "(", "len", "(", "self", ".", "tokenizer", ")", ")", "\n", "", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "# single gpu", "\n", "\n", "#", "\n", "self", ".", "evaluator", "=", "MultiWozEvaluator", "(", "self", ".", "reader", ")", "\n", "if", "cfg", ".", "save_log", "and", "cfg", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "tb_writer", "=", "SummaryWriter", "(", "log_dir", "=", "'./log'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "tb_writer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.get_optimizers": [[53, 82], ["transformers.optimization.AdamW", "transformers.optimization.get_linear_schedule_with_warmup", "int", "train.Modal.model.named_parameters", "train.Modal.model.named_parameters", "any", "any"], "methods", ["None"], ["", "", "def", "get_optimizers", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Setup the optimizer and the learning rate scheduler.\n\n        from transformers.Trainer\n\n        parameters from cfg: lr (1e-3); warmup_steps\n        \"\"\"", "\n", "# Prepare optimizer and schedule (linear warmup and decay)", "\n", "no_decay", "=", "[", "\"bias\"", ",", "\"LayerNorm.weight\"", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "\"weight_decay\"", ":", "cfg", ".", "weight_decay", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "p", "for", "n", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "]", ",", "\n", "\"weight_decay\"", ":", "0.0", ",", "\n", "}", ",", "\n", "]", "\n", "optimizer", "=", "AdamW", "(", "optimizer_grouped_parameters", ",", "lr", "=", "cfg", ".", "lr", ")", "\n", "num_training_steps", "=", "self", ".", "reader", ".", "set_stats", "[", "'train'", "]", "[", "'num_dials'", "]", "*", "cfg", ".", "epoch_num", "//", "(", "cfg", ".", "gradient_accumulation_steps", "*", "cfg", ".", "batch_size", ")", "\n", "num_warmup_steps", "=", "cfg", ".", "warmup_steps", "if", "cfg", ".", "warmup_steps", ">=", "0", "else", "int", "(", "num_training_steps", "*", "0.2", ")", "\n", "scheduler", "=", "get_linear_schedule_with_warmup", "(", "\n", "optimizer", ",", "num_warmup_steps", "=", "num_warmup_steps", ",", "\n", "num_training_steps", "=", "num_training_steps", "\n", ")", "\n", "return", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.log_first_inputs": [[83, 92], ["logging.info", "tokenizer.decode", "logging.info"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "def", "log_first_inputs", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "tokenizer", "=", "self", ".", "tokenizer", "\n", "logging", ".", "info", "(", "\"**** Input Examples: ****\"", ")", "\n", "for", "context", "in", "inputs", "[", "'contexts'", "]", "[", ":", "4", "]", ":", "\n", "# ubar = tokenizer.convert_ids_to_tokens(context)", "\n", "# ubar = tokenizer.convert_tokens_to_string(context)", "\n", "# ubar = \" \".join(ubar)", "\n", "            ", "ubar", "=", "tokenizer", ".", "decode", "(", "context", ")", "\n", "logging", ".", "info", "(", "ubar", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.add_torch_input": [[93, 99], ["torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "contexts_tensor.to.to.to", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "", "def", "add_torch_input", "(", "self", ",", "inputs", ")", ":", "\n", "# to tensor and to device", "\n", "        ", "contexts_tensor", "=", "torch", ".", "from_numpy", "(", "inputs", "[", "'contexts_np'", "]", ")", ".", "long", "(", ")", "\n", "contexts_tensor", "=", "contexts_tensor", ".", "to", "(", "self", ".", "device", ")", "\n", "inputs", "[", "'contexts_tensor'", "]", "=", "contexts_tensor", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.add_torch_input_eval": [[100, 105], ["torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "add_torch_input_eval", "(", "self", ",", "inputs", ")", ":", "\n", "# inputs: context", "\n", "        ", "inputs", "[", "'context_tensor'", "]", "=", "torch", ".", "tensor", "(", "\n", "[", "inputs", "[", "'context'", "]", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.calculate_loss_and_accuracy": [[106, 124], ["lm_logits[].contiguous", "labels[].contiguous", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "labels[].contiguous.ne", "labels[].contiguous.ne.long().sum().item", "lm_logits[].contiguous.view", "labels[].contiguous.view", "lm_logits[].contiguous.size", "labels[].contiguous.ne.long().sum", "labels[].contiguous.ne.long"], "methods", ["None"], ["", "def", "calculate_loss_and_accuracy", "(", "self", ",", "outputs", ",", "labels", ")", ":", "\n", "# GPT2-chicahat/train.py", "\n", "        ", "lm_logits", "=", "outputs", "[", "0", "]", "\n", "\n", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "pad_id", "=", "cfg", ".", "pad_id", "\n", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "pad_id", ",", "reduction", "=", "'sum'", ")", "\n", "loss", "=", "loss_fct", "(", "\n", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "\n", "# avg loss", "\n", "not_ignore", "=", "shift_labels", ".", "ne", "(", "pad_id", ")", "\n", "num_targets", "=", "not_ignore", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "loss", "/=", "num_targets", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.train_URURU": [[125, 245], ["train.Modal.reader.get_batches", "train.Modal.get_optimizers", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "time.time", "range", "train.Modal.tb_writer.add_text", "time.time", "train.Modal.model.zero_grad", "train.Modal.reader.get_data_iterator", "enumerate", "logging.info", "train.Modal.save_model", "json.dumps", "enumerate", "train.Modal.reader.convert_batch_turn", "train.Modal.model.train", "train.Modal.add_torch_input", "train.Modal.model", "train.Modal.calculate_loss_and_accuracy", "train.Modal.backward", "train.Modal.item", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "train.Modal.log_first_inputs", "train.Modal.model.parameters", "optimizer.step", "scheduler.step", "optimizer.zero_grad", "time.time", "logging.info", "str", "max", "logging.info", "hasattr", "logging.info", "train.Modal.validate", "train.Modal.items", "logs.items", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "str", "train.Modal.tb_writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_batches", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.get_optimizers", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_data_iterator", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.save_model", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.convert_batch_turn", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.train", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.add_torch_input", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.calculate_loss_and_accuracy", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.log_first_inputs", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.validate"], ["", "def", "train_URURU", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        URURU\n        \"\"\"", "\n", "all_batches", "=", "self", ".", "reader", ".", "get_batches", "(", "'train'", ")", "\n", "# compute num_training_steps in get_batches()", "\n", "optimizer", ",", "scheduler", "=", "self", ".", "get_optimizers", "(", ")", "\n", "\n", "# log info", "\n", "set_stats", "=", "self", ".", "reader", ".", "set_stats", "[", "'train'", "]", "\n", "logging", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logging", ".", "info", "(", "\"  Num Training steps(one turn in a batch of dialogs) per epoch = %d\"", ",", "\n", "set_stats", "[", "'num_training_steps_per_epoch'", "]", ")", "\n", "logging", ".", "info", "(", "\"  Num Turns = %d\"", ",", "set_stats", "[", "'num_turns'", "]", ")", "\n", "logging", ".", "info", "(", "\"  Num Dialogs = %d\"", ",", "set_stats", "[", "'num_dials'", "]", ")", "\n", "logging", ".", "info", "(", "\"  Num Epochs = %d\"", ",", "cfg", ".", "epoch_num", ")", "\n", "logging", ".", "info", "(", "\"  Batch size  = %d\"", ",", "cfg", ".", "batch_size", ")", "\n", "logging", ".", "info", "(", "\"  Gradient Accumulation steps = %d\"", ",", "\n", "cfg", ".", "gradient_accumulation_steps", ")", "\n", "logging", ".", "info", "(", "\"  Total optimization steps = %d\"", ",", "\n", "set_stats", "[", "'num_training_steps_per_epoch'", "]", "*", "cfg", ".", "epoch_num", "//", "cfg", ".", "gradient_accumulation_steps", ")", "\n", "\n", "# tb writer", "\n", "if", "self", ".", "tb_writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "tb_writer", ".", "add_text", "(", "'cfg'", ",", "json", ".", "dumps", "(", "cfg", ".", "__dict__", ",", "indent", "=", "2", ")", ")", "\n", "# self.tb_writer.add_hparams(self.args.to_sanitized_dict(), metric_dict={})", "\n", "\n", "", "log_inputs", "=", "2", "\n", "global_step", "=", "0", "\n", "sw", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "cfg", ".", "epoch_num", ")", ":", "\n", "            ", "epoch_step", "=", "0", "\n", "tr_loss", "=", "0.0", "\n", "logging_loss", "=", "0.0", "\n", "btm", "=", "time", ".", "time", "(", ")", "\n", "oom_time", "=", "0", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "\n", "data_iterator", "=", "self", ".", "reader", ".", "get_data_iterator", "(", "\n", "all_batches", ")", "\n", "\n", "for", "batch_idx", ",", "dial_batch", "in", "enumerate", "(", "data_iterator", ")", ":", "\n", "                ", "pv_batch", "=", "None", "\n", "for", "turn_num", ",", "turn_batch", "in", "enumerate", "(", "dial_batch", ")", ":", "\n", "                    ", "first_turn", "=", "(", "turn_num", "==", "0", ")", "\n", "inputs", "=", "self", ".", "reader", ".", "convert_batch_turn", "(", "turn_batch", ",", "pv_batch", ",", "first_turn", ")", "\n", "pv_batch", "=", "inputs", "[", "'labels'", "]", "\n", "try", ":", "# avoid OOM", "\n", "                        ", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "log_inputs", ">", "0", ":", "# log inputs for the very first two turns", "\n", "                            ", "self", ".", "log_first_inputs", "(", "inputs", ")", "\n", "log_inputs", "-=", "1", "\n", "\n", "# to tensor", "\n", "", "inputs", "=", "self", ".", "add_torch_input", "(", "inputs", ")", "\n", "# loss", "\n", "outputs", "=", "self", ".", "model", "(", "inputs", "[", "'contexts_tensor'", "]", ")", "\n", "# outputs = self.model(inputs['contexts_tensor']) # debugging with GPT2Model", "\n", "loss", "=", "self", ".", "calculate_loss_and_accuracy", "(", "\n", "outputs", ",", "labels", "=", "inputs", "[", "'contexts_tensor'", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "tr_loss", "+=", "loss", ".", "item", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "5.0", ")", "\n", "epoch_step", "+=", "1", "\n", "\n", "# step, wrt gradient_accumulation_steps, clip grad norm", "\n", "if", "(", "epoch_step", "+", "1", ")", "%", "cfg", ".", "gradient_accumulation_steps", "==", "0", "or", "(", "\n", "# end of an epoch", "\n", "(", "epoch_step", "+", "1", ")", "==", "set_stats", "[", "'num_training_steps_per_epoch'", "]", "\n", ")", ":", "\n", "                            ", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# global_step: actual step the optimizer took", "\n", "global_step", "+=", "1", "\n", "\n", "logs", "=", "{", "}", "# for tb writer", "\n", "# logging: loss, lr... after certain amount of steps", "\n", "if", "cfg", ".", "report_interval", ">", "0", "and", "global_step", "%", "cfg", ".", "report_interval", "==", "0", ":", "\n", "                                ", "loss_scalar", "=", "(", "tr_loss", "-", "logging_loss", ")", "/", "cfg", ".", "report_interval", "\n", "logging_loss", "=", "tr_loss", "\n", "logs", "[", "'loss'", "]", "=", "loss_scalar", "\n", "logging", ".", "info", "(", "\n", "'Global step: {}, epoch step: {}, interval loss: {:.4f}'", ".", "format", "(", "\n", "global_step", ",", "epoch_step", ",", "loss_scalar", "\n", ")", ")", "\n", "# validate", "\n", "# add to tensorboard...", "\n", "if", "cfg", ".", "evaluate_during_training", "and", "loss_scalar", "<", "10", ":", "\n", "                                    ", "results", "=", "self", ".", "validate", "(", ")", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "                                        ", "eval_key", "=", "\"eval_{}\"", ".", "format", "(", "k", ")", "\n", "logs", "[", "eval_key", "]", "=", "v", "\n", "\n", "", "", "if", "self", ".", "tb_writer", ":", "\n", "                                    ", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", ":", "\n", "                                        ", "self", ".", "tb_writer", ".", "add_scalar", "(", "\n", "k", ",", "v", ",", "global_step", ")", "\n", "# save model... ", "\n", "\n", "", "", "", "", "", "except", "RuntimeError", "as", "exception", ":", "\n", "                        ", "if", "\"out of memory\"", "in", "str", "(", "exception", ")", ":", "\n", "                            ", "max_length", "=", "max", "(", "inputs", "[", "'lengths'", "]", ")", "\n", "oom_time", "+=", "1", "\n", "logging", ".", "info", "(", "\"WARNING: ran out of memory,times: {}, batch size: {}, max_len: {}\"", ".", "format", "(", "\n", "oom_time", ",", "cfg", ".", "batch_size", ",", "max_length", ")", ")", "\n", "if", "hasattr", "(", "torch", ".", "cuda", ",", "'empty_cache'", ")", ":", "\n", "                                ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "", "else", ":", "\n", "                            ", "logging", ".", "info", "(", "str", "(", "exception", ")", ")", "\n", "raise", "exception", "\n", "", "", "", "", "logging", ".", "info", "(", "'Train epoch time: {:.2f} min, epoch loss: {:.4f}'", ".", "format", "(", "\n", "(", "time", ".", "time", "(", ")", "-", "btm", ")", "/", "60", ",", "tr_loss", ")", ")", "\n", "# save model after every epoch", "\n", "# if epoch > 30 and tr_loss/epoch_step < 0.6:", "\n", "self", ".", "save_model", "(", "epoch", ",", "tr_loss", "/", "epoch_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.train": [[249, 365], ["train.Modal.reader.get_batches", "train.Modal.get_optimizers", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "logging.info", "time.time", "range", "train.Modal.tb_writer.add_text", "time.time", "train.Modal.model.zero_grad", "train.Modal.reader.get_nontranspose_data_iterator", "enumerate", "logging.info", "train.Modal.save_model", "json.dumps", "train.Modal.reader.convert_batch_session", "train.Modal.model.train", "train.Modal.add_torch_input", "train.Modal.model", "train.Modal.calculate_loss_and_accuracy", "train.Modal.backward", "train.Modal.item", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "train.Modal.log_first_inputs", "train.Modal.model.parameters", "optimizer.step", "scheduler.step", "optimizer.zero_grad", "logging.info", "str", "max", "logging.info", "hasattr", "logging.info", "time.time", "train.Modal.validate", "train.Modal.items", "logs.items", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "str", "train.Modal.tb_writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_batches", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.get_optimizers", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_nontranspose_data_iterator", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.save_model", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.convert_batch_session", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.train", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.add_torch_input", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.calculate_loss_and_accuracy", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.log_first_inputs", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.validate"], ["", "", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        UBARU\n        \"\"\"", "\n", "all_batches", "=", "self", ".", "reader", ".", "get_batches", "(", "'train'", ")", "\n", "# compute num_training_steps in get_batches()", "\n", "optimizer", ",", "scheduler", "=", "self", ".", "get_optimizers", "(", ")", "\n", "\n", "# log info", "\n", "set_stats", "=", "self", ".", "reader", ".", "set_stats", "[", "'train'", "]", "\n", "logging", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logging", ".", "info", "(", "\"  Num Training steps(one turn in a batch of dialogs) per epoch = %d\"", ",", "\n", "set_stats", "[", "'num_training_steps_per_epoch'", "]", ")", "\n", "logging", ".", "info", "(", "\"  Num Turns = %d\"", ",", "set_stats", "[", "'num_turns'", "]", ")", "\n", "logging", ".", "info", "(", "\"  Num Dialogs = %d\"", ",", "set_stats", "[", "'num_dials'", "]", ")", "\n", "logging", ".", "info", "(", "\"  Num Epochs = %d\"", ",", "cfg", ".", "epoch_num", ")", "\n", "logging", ".", "info", "(", "\"  Batch size  = %d\"", ",", "cfg", ".", "batch_size", ")", "\n", "logging", ".", "info", "(", "\"  Gradient Accumulation steps = %d\"", ",", "\n", "cfg", ".", "gradient_accumulation_steps", ")", "\n", "logging", ".", "info", "(", "\"  Total optimization steps = %d\"", ",", "\n", "set_stats", "[", "'num_dials'", "]", "*", "cfg", ".", "epoch_num", "//", "(", "cfg", ".", "gradient_accumulation_steps", "*", "cfg", ".", "batch_size", ")", ")", "\n", "\n", "# tb writer", "\n", "if", "self", ".", "tb_writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "tb_writer", ".", "add_text", "(", "'cfg'", ",", "json", ".", "dumps", "(", "cfg", ".", "__dict__", ",", "indent", "=", "2", ")", ")", "\n", "# self.tb_writer.add_hparams(self.args.to_sanitized_dict(), metric_dict={})", "\n", "\n", "", "log_inputs", "=", "2", "\n", "global_step", "=", "0", "\n", "sw", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "cfg", ".", "epoch_num", ")", ":", "\n", "            ", "epoch_step", "=", "0", "\n", "tr_loss", "=", "0.0", "\n", "logging_loss", "=", "0.0", "\n", "btm", "=", "time", ".", "time", "(", ")", "\n", "oom_time", "=", "0", "\n", "self", ".", "model", ".", "zero_grad", "(", ")", "\n", "\n", "data_iterator", "=", "self", ".", "reader", ".", "get_nontranspose_data_iterator", "(", "\n", "all_batches", ")", "\n", "\n", "for", "batch_idx", ",", "dial_batch", "in", "enumerate", "(", "data_iterator", ")", ":", "\n", "                ", "inputs", "=", "self", ".", "reader", ".", "convert_batch_session", "(", "dial_batch", ")", "\n", "try", ":", "# avoid OOM", "\n", "                    ", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "log_inputs", ">", "0", ":", "# log inputs for the very first two turns", "\n", "                        ", "self", ".", "log_first_inputs", "(", "inputs", ")", "\n", "log_inputs", "-=", "1", "\n", "\n", "# to tensor", "\n", "", "inputs", "=", "self", ".", "add_torch_input", "(", "inputs", ")", "\n", "# loss", "\n", "outputs", "=", "self", ".", "model", "(", "inputs", "[", "'contexts_tensor'", "]", ")", "\n", "# outputs = self.model(inputs['contexts_tensor']) # debugging with GPT2Model", "\n", "loss", "=", "self", ".", "calculate_loss_and_accuracy", "(", "\n", "outputs", ",", "labels", "=", "inputs", "[", "'contexts_tensor'", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "tr_loss", "+=", "loss", ".", "item", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "5.0", ")", "\n", "epoch_step", "+=", "1", "\n", "\n", "# step, wrt gradient_accumulation_steps, clip grad norm", "\n", "if", "(", "epoch_step", "+", "1", ")", "%", "cfg", ".", "gradient_accumulation_steps", "==", "0", "or", "(", "\n", "# end of an epoch", "\n", "(", "epoch_step", "+", "1", ")", "==", "set_stats", "[", "'num_training_steps_per_epoch'", "]", "\n", ")", ":", "\n", "                        ", "optimizer", ".", "step", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "# global_step: actual step the optimizer took", "\n", "global_step", "+=", "1", "\n", "\n", "logs", "=", "{", "}", "# for tb writer", "\n", "# logging: loss, lr... after certain amount of steps", "\n", "if", "cfg", ".", "report_interval", ">", "0", "and", "global_step", "%", "cfg", ".", "report_interval", "==", "0", ":", "\n", "                            ", "loss_scalar", "=", "(", "tr_loss", "-", "logging_loss", ")", "/", "cfg", ".", "report_interval", "\n", "logging_loss", "=", "tr_loss", "\n", "logs", "[", "'loss'", "]", "=", "loss_scalar", "\n", "logging", ".", "info", "(", "\n", "'Global step: {}, epoch step: {}, interval loss: {:.4f}'", ".", "format", "(", "\n", "global_step", ",", "epoch_step", ",", "loss_scalar", "\n", ")", ")", "\n", "# validate", "\n", "# add to tensorboard...", "\n", "if", "cfg", ".", "evaluate_during_training", "and", "loss_scalar", "<", "10", ":", "\n", "                                ", "results", "=", "self", ".", "validate", "(", ")", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "                                    ", "eval_key", "=", "\"eval_{}\"", ".", "format", "(", "k", ")", "\n", "logs", "[", "eval_key", "]", "=", "v", "\n", "\n", "", "", "if", "self", ".", "tb_writer", ":", "\n", "                                ", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", ":", "\n", "                                    ", "self", ".", "tb_writer", ".", "add_scalar", "(", "\n", "k", ",", "v", ",", "global_step", ")", "\n", "# save model... ", "\n", "\n", "", "", "", "", "", "except", "RuntimeError", "as", "exception", ":", "\n", "                    ", "if", "\"out of memory\"", "in", "str", "(", "exception", ")", ":", "\n", "                        ", "max_length", "=", "max", "(", "inputs", "[", "'lengths'", "]", ")", "\n", "oom_time", "+=", "1", "\n", "logging", ".", "info", "(", "\"WARNING: ran out of memory,times: {}, batch size: {}, max_len: {}\"", ".", "format", "(", "\n", "oom_time", ",", "cfg", ".", "batch_size", ",", "max_length", ")", ")", "\n", "if", "hasattr", "(", "torch", ".", "cuda", ",", "'empty_cache'", ")", ":", "\n", "                            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "", "else", ":", "\n", "                        ", "logging", ".", "info", "(", "str", "(", "exception", ")", ")", "\n", "raise", "exception", "\n", "", "", "", "logging", ".", "info", "(", "'Train epoch time: {:.2f} min, epoch loss: {:.4f}'", ".", "format", "(", "\n", "(", "time", ".", "time", "(", ")", "-", "btm", ")", "/", "60", ",", "tr_loss", ")", ")", "\n", "# save model after every epoch", "\n", "# if epoch > 10 or tr_loss/epoch_step < 1:", "\n", "self", ".", "save_model", "(", "epoch", ",", "tr_loss", "/", "epoch_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.save_model": [[366, 376], ["os.path.join", "logging.info", "train.Modal.model.save_pretrained", "train.Modal.tokenizer.save_pretrained", "os.path.exists", "os.mkdir"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ",", "epoch", ",", "loss", ")", ":", "\n", "        ", "save_path", "=", "os", ".", "path", ".", "join", "(", "\n", "cfg", ".", "exp_path", ",", "'epoch{}_trloss{:.2f}_gpt2'", ".", "format", "(", "epoch", "+", "1", ",", "loss", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_path", ")", "\n", "", "logging", ".", "info", "(", "'Saving model checkpoint to %s'", ",", "save_path", ")", "\n", "# save gpt2", "\n", "self", ".", "model", ".", "save_pretrained", "(", "save_path", ")", "\n", "# save tokenizer", "\n", "self", ".", "tokenizer", ".", "save_pretrained", "(", "save_path", ")", "\n", "# save cfg", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.validate_URURU": [[378, 496], ["train.Modal.model.eval", "train.Modal.reader.get_eval_data", "logging.info", "logging.info", "time.time", "logging.info", "time.time", "train.Modal.reader.wrap_result_lm", "train.Modal.evaluator.validation_metric", "logging.info", "logging.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "enumerate", "result_collection.update", "train.Modal.reader.convert_turn_eval_URURU", "train.Modal.add_torch_input_eval", "len", "train.Modal.reader.inverse_transpose_turn", "train.Modal.model.generate", "outputs[].cpu().numpy().tolist", "train.Modal.model.generate", "outputs[].cpu().numpy().tolist", "train.Modal.decode_generated_bspn", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "len", "train.Modal.model.generate", "outputs_db[].cpu().numpy().tolist", "time.time", "time.time", "train.Modal.decode_generated_act_resp", "train.Modal.reader.bspan_to_DBpointer", "train.Modal.decode_generated_act_resp", "outputs[].cpu().numpy", "logging.info", "logging.info", "outputs[].cpu().numpy", "train.Modal.tokenizer.decode", "train.Modal.tokenizer.convert_tokens_to_ids", "train.Modal.tokenizer.encode", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "outputs_db[].cpu().numpy", "logging.info", "logging.info", "train.Modal.tokenizer.encode", "str", "train.Modal.tokenizer.decode", "train.Modal.tokenizer.encode", "train.Modal.tokenizer.tokenize", "train.Modal.tokenizer.encode", "str", "train.Modal.tokenizer.decode", "outputs[].cpu", "outputs[].cpu", "outputs_db[].cpu"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.BeamSearchNode.eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_eval_data", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.wrap_result_lm", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.validation_metric", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.convert_turn_eval_URURU", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.add_torch_input_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.inverse_transpose_turn", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_bspn", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_act_resp", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_DBpointer", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_act_resp", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "def", "validate_URURU", "(", "self", ",", "data", "=", "'dev'", ",", "do_test", "=", "False", ")", ":", "\n", "# predict one dialog/ one turn at a time", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "# all_batches = self.reader.get_batches('dev')", "\n", "# data_iterator = self.reader.get_data_iterator(all_batches)", "\n", "eval_data", "=", "self", ".", "reader", ".", "get_eval_data", "(", "data", ")", "\n", "\n", "set_stats", "=", "self", ".", "reader", ".", "set_stats", "[", "data", "]", "\n", "logging", ".", "info", "(", "\"***** Running Evaluation *****\"", ")", "\n", "logging", ".", "info", "(", "\"  Num Turns = %d\"", ",", "set_stats", "[", "'num_turns'", "]", ")", "\n", "# logging.info(\"  Num Dialogs = %d\", set_stats['num_dials'])", "\n", "\n", "# valid_losses = []", "\n", "btm", "=", "time", ".", "time", "(", ")", "\n", "result_collection", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "eval_pbar", "=", "eval_data", "\n", "for", "dial_idx", ",", "dialog", "in", "enumerate", "(", "eval_pbar", ")", ":", "\n", "\n", "                ", "pv_turn", "=", "{", "}", "\n", "for", "turn_idx", ",", "turn", "in", "enumerate", "(", "dialog", ")", ":", "\n", "                    ", "first_turn", "=", "(", "turn_idx", "==", "0", ")", "\n", "inputs", "=", "self", ".", "reader", ".", "convert_turn_eval_URURU", "(", "\n", "turn", ",", "pv_turn", ",", "first_turn", ")", "\n", "inputs", "=", "self", ".", "add_torch_input_eval", "(", "inputs", ")", "\n", "\n", "# fail to generate new tokens, if max_length not set", "\n", "context_length", "=", "len", "(", "inputs", "[", "'context'", "]", ")", "\n", "if", "cfg", ".", "use_true_curr_bspn", ":", "# generate act, response", "\n", "                        ", "max_len", "=", "60", "\n", "if", "not", "cfg", ".", "use_true_curr_aspn", ":", "\n", "                            ", "max_len", "=", "80", "\n", "\n", "", "outputs", "=", "self", ".", "model", ".", "generate", "(", "input_ids", "=", "inputs", "[", "'context_tensor'", "]", ",", "\n", "max_length", "=", "context_length", "+", "max_len", ",", "temperature", "=", "0.7", ",", "# top_p=0.9, num_beams=4,", "\n", "pad_token_id", "=", "self", ".", "tokenizer", ".", "eos_token_id", ",", "eos_token_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_r>'", "]", ")", "[", "0", "]", ")", "\n", "#   no_repeat_ngram_size=4", "\n", "# turn['generated'] = self.tokenizer.decode(outputs[0])", "\n", "\n", "# resp_gen, need to trim previous context", "\n", "generated", "=", "outputs", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "generated", "=", "generated", "[", "context_length", "-", "1", ":", "]", "\n", "\n", "try", ":", "\n", "                            ", "decoded", "=", "self", ".", "decode_generated_act_resp", "(", "generated", ")", "\n", "", "except", "ValueError", "as", "exception", ":", "\n", "                            ", "logging", ".", "info", "(", "str", "(", "exception", ")", ")", "\n", "logging", ".", "info", "(", "self", ".", "tokenizer", ".", "decode", "(", "generated", ")", ")", "\n", "decoded", "=", "{", "'resp'", ":", "[", "]", ",", "'bspn'", ":", "[", "]", ",", "'aspn'", ":", "[", "]", "}", "\n", "\n", "", "", "else", ":", "# predict bspn, access db, then generate act and resp", "\n", "                        ", "outputs", "=", "self", ".", "model", ".", "generate", "(", "input_ids", "=", "inputs", "[", "'context_tensor'", "]", ",", "\n", "max_length", "=", "context_length", "+", "60", ",", "temperature", "=", "0.7", ",", "# top_p=0.9, num_beams=4,", "\n", "pad_token_id", "=", "self", ".", "tokenizer", ".", "eos_token_id", ",", "eos_token_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_b>'", "]", ")", "[", "0", "]", ")", "\n", "generated_bs", "=", "outputs", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "# generated_bs = generated_bs[context_length-1:]", "\n", "bspn_gen", "=", "self", ".", "decode_generated_bspn", "(", "generated_bs", "[", "context_length", "-", "1", ":", "]", ")", "\n", "# check DB result", "\n", "if", "cfg", ".", "use_true_db_pointer", ":", "\n", "# db_result = self.reader.bspan_to_DBpointer(self.tokenizer.decode(turn['bspn']), turn['turn_domain'])", "\n", "                            ", "db", "=", "turn", "[", "'db'", "]", "\n", "", "else", ":", "\n", "                            ", "db_result", "=", "self", ".", "reader", ".", "bspan_to_DBpointer", "(", "self", ".", "tokenizer", ".", "decode", "(", "bspn_gen", ")", ",", "turn", "[", "'turn_domain'", "]", ")", "\n", "db", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "'<sos_db> '", "+", "db_result", "+", "' <eos_db>'", ")", ")", "+", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<sos_a>'", "]", ")", "\n", "", "inputs", "[", "'context_tensor_db'", "]", "=", "torch", ".", "tensor", "(", "[", "inputs", "[", "'context'", "]", "[", ":", "-", "1", "]", "+", "bspn_gen", "+", "db", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "context_length", "=", "len", "(", "inputs", "[", "'context_tensor_db'", "]", "[", "0", "]", ")", "\n", "outputs_db", "=", "self", ".", "model", ".", "generate", "(", "input_ids", "=", "inputs", "[", "'context_tensor_db'", "]", ",", "\n", "max_length", "=", "context_length", "+", "80", ",", "temperature", "=", "0.7", ",", "# top_p=0.9, num_beams=4,", "\n", "pad_token_id", "=", "self", ".", "tokenizer", ".", "eos_token_id", ",", "eos_token_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_r>'", "]", ")", "[", "0", "]", ")", "\n", "generated_ar", "=", "outputs_db", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "generated_ar", "=", "generated_ar", "[", "context_length", "-", "1", ":", "]", "\n", "try", ":", "\n", "                            ", "decoded", "=", "self", ".", "decode_generated_act_resp", "(", "generated_ar", ")", "\n", "decoded", "[", "'bspn'", "]", "=", "bspn_gen", "\n", "", "except", "ValueError", "as", "exception", ":", "\n", "                            ", "logging", ".", "info", "(", "str", "(", "exception", ")", ")", "\n", "logging", ".", "info", "(", "self", ".", "tokenizer", ".", "decode", "(", "generated_ar", ")", ")", "\n", "decoded", "=", "{", "'resp'", ":", "[", "]", ",", "'bspn'", ":", "[", "]", ",", "'aspn'", ":", "[", "]", "}", "\n", "\n", "", "", "turn", "[", "'resp_gen'", "]", "=", "decoded", "[", "'resp'", "]", "\n", "turn", "[", "'bspn_gen'", "]", "=", "turn", "[", "'bspn'", "]", "if", "cfg", ".", "use_true_curr_bspn", "else", "decoded", "[", "'bspn'", "]", "\n", "turn", "[", "'aspn_gen'", "]", "=", "turn", "[", "'aspn'", "]", "if", "cfg", ".", "use_true_curr_aspn", "else", "decoded", "[", "'aspn'", "]", "\n", "turn", "[", "'dspn_gen'", "]", "=", "turn", "[", "'dspn'", "]", "\n", "\n", "# check DB results", "\n", "# db_result = self.reader.bspan_to_DBpointer(self.tokenizer.decode(turn['bspn']), turn['turn_domain'])", "\n", "# if db_result[0] == 1: # no match", "\n", "#     print('gt:', self.tokenizer.decode(turn['aspn']), '     |gen:', self.tokenizer.decode(decoded['aspn']))", "\n", "#     print('gen_resp: ', self.tokenizer.decode(decoded['resp']))", "\n", "#     print('gt_resp: ', self.tokenizer.decode(turn['resp']), '\\n')", "\n", "\n", "pv_turn", "[", "'labels'", "]", "=", "inputs", "[", "'labels'", "]", "# all true previous context", "\n", "pv_turn", "[", "'resp'", "]", "=", "turn", "[", "'resp'", "]", "if", "cfg", ".", "use_true_prev_resp", "else", "decoded", "[", "'resp'", "]", "\n", "# pv_turn['bspn'] = turn['bspn'] if cfg.use_true_prev_bspn else decoded['bspn']", "\n", "# pv_turn['db'] = db", "\n", "# pv_turn['aspn'] = turn['aspn'] if cfg.use_true_prev_aspn else decoded['aspn']", "\n", "# pv_turn = inputs['labels']", "\n", "\n", "", "result_collection", ".", "update", "(", "\n", "self", ".", "reader", ".", "inverse_transpose_turn", "(", "dialog", ")", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "\"inference time: {:.2f} min\"", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "btm", ")", "/", "60", ")", ")", "\n", "# score", "\n", "btm", "=", "time", ".", "time", "(", ")", "\n", "results", ",", "_", "=", "self", ".", "reader", ".", "wrap_result_lm", "(", "result_collection", ")", "\n", "bleu", ",", "success", ",", "match", "=", "self", ".", "evaluator", ".", "validation_metric", "(", "results", ")", "\n", "logging", ".", "info", "(", "\"Scoring time: {:.2f} min\"", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "btm", ")", "/", "60", ")", ")", "\n", "score", "=", "0.5", "*", "(", "success", "+", "match", ")", "+", "bleu", "\n", "valid_loss", "=", "130", "-", "score", "\n", "logging", ".", "info", "(", "'validation [CTR] match: %2.2f  success: %2.2f  bleu: %2.2f    score: %.2f'", "%", "(", "\n", "match", ",", "success", ",", "bleu", ",", "score", ")", ")", "\n", "eval_results", "=", "{", "}", "\n", "eval_results", "[", "'bleu'", "]", "=", "bleu", "\n", "eval_results", "[", "'success'", "]", "=", "success", "\n", "eval_results", "[", "'match'", "]", "=", "match", "\n", "\n", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.validate": [[497, 632], ["train.Modal.model.eval", "train.Modal.reader.get_eval_data", "logging.info", "logging.info", "time.time", "logging.info", "time.time", "train.Modal.reader.wrap_result_lm", "train.Modal.evaluator.validation_metric", "logging.info", "logging.info", "os.path.join", "os.path.exists", "logging.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "os.path.exists", "os.mkdir", "json.load", "json.dump", "json.dump", "enumerate", "result_collection.update", "config.global_config.eval_load_path.split", "config.global_config.eval_load_path.split", "open", "open", "open", "train.Modal.reader.convert_turn_eval", "train.Modal.add_torch_input_eval", "len", "train.Modal.reader.inverse_transpose_turn", "train.Modal.model.generate", "outputs[].cpu().numpy().tolist", "train.Modal.model.generate", "outputs[].cpu().numpy().tolist", "train.Modal.decode_generated_bspn", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "len", "train.Modal.model.generate", "outputs_db[].cpu().numpy().tolist", "time.time", "time.time", "train.Modal.decode_generated_act_resp", "train.Modal.reader.bspan_to_DBpointer", "train.Modal.decode_generated_act_resp", "outputs[].cpu().numpy", "logging.info", "logging.info", "outputs[].cpu().numpy", "train.Modal.tokenizer.decode", "train.Modal.tokenizer.convert_tokens_to_ids", "train.Modal.tokenizer.encode", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "outputs_db[].cpu().numpy", "logging.info", "logging.info", "train.Modal.tokenizer.encode", "str", "train.Modal.tokenizer.decode", "train.Modal.tokenizer.encode", "train.Modal.tokenizer.tokenize", "train.Modal.tokenizer.encode", "str", "train.Modal.tokenizer.decode", "outputs[].cpu", "outputs[].cpu", "outputs_db[].cpu"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.BeamSearchNode.eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_eval_data", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.wrap_result_lm", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.eval.MultiWozEvaluator.validation_metric", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.convert_turn_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.add_torch_input_eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.inverse_transpose_turn", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_bspn", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_act_resp", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_DBpointer", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_act_resp", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "def", "validate", "(", "self", ",", "data", "=", "'dev'", ",", "do_test", "=", "False", ")", ":", "\n", "# predict one dialog/ one turn at a time", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "# all_batches = self.reader.get_batches('dev')", "\n", "# data_iterator = self.reader.get_data_iterator(all_batches)", "\n", "eval_data", "=", "self", ".", "reader", ".", "get_eval_data", "(", "data", ")", "\n", "\n", "set_stats", "=", "self", ".", "reader", ".", "set_stats", "[", "data", "]", "\n", "logging", ".", "info", "(", "\"***** Running Evaluation *****\"", ")", "\n", "logging", ".", "info", "(", "\"  Num Turns = %d\"", ",", "set_stats", "[", "'num_turns'", "]", ")", "\n", "# logging.info(\"  Num Dialogs = %d\", set_stats['num_dials'])", "\n", "\n", "# valid_losses = []", "\n", "btm", "=", "time", ".", "time", "(", ")", "\n", "result_collection", "=", "{", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "dial_idx", ",", "dialog", "in", "enumerate", "(", "eval_data", ")", ":", "\n", "\n", "                ", "pv_turn", "=", "{", "}", "\n", "for", "turn_idx", ",", "turn", "in", "enumerate", "(", "dialog", ")", ":", "\n", "                    ", "first_turn", "=", "(", "turn_idx", "==", "0", ")", "\n", "inputs", "=", "self", ".", "reader", ".", "convert_turn_eval", "(", "\n", "turn", ",", "pv_turn", ",", "first_turn", ")", "\n", "inputs", "=", "self", ".", "add_torch_input_eval", "(", "inputs", ")", "\n", "\n", "# fail to generate new tokens, if max_length not set", "\n", "context_length", "=", "len", "(", "inputs", "[", "'context'", "]", ")", "\n", "if", "cfg", ".", "use_true_curr_bspn", ":", "# generate act, response", "\n", "                        ", "max_len", "=", "60", "\n", "if", "not", "cfg", ".", "use_true_curr_aspn", ":", "\n", "                            ", "max_len", "=", "80", "\n", "\n", "", "outputs", "=", "self", ".", "model", ".", "generate", "(", "input_ids", "=", "inputs", "[", "'context_tensor'", "]", ",", "\n", "max_length", "=", "context_length", "+", "max_len", ",", "temperature", "=", "0.7", ",", "# top_p=0.9, num_beams=4,", "\n", "pad_token_id", "=", "self", ".", "tokenizer", ".", "eos_token_id", ",", "eos_token_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_r>'", "]", ")", "[", "0", "]", ")", "\n", "#   no_repeat_ngram_size=4", "\n", "# turn['generated'] = self.tokenizer.decode(outputs[0])", "\n", "\n", "# resp_gen, need to trim previous context", "\n", "generated", "=", "outputs", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "generated", "=", "generated", "[", "context_length", "-", "1", ":", "]", "\n", "\n", "try", ":", "\n", "                            ", "decoded", "=", "self", ".", "decode_generated_act_resp", "(", "generated", ")", "\n", "", "except", "ValueError", "as", "exception", ":", "\n", "                            ", "logging", ".", "info", "(", "str", "(", "exception", ")", ")", "\n", "logging", ".", "info", "(", "self", ".", "tokenizer", ".", "decode", "(", "generated", ")", ")", "\n", "decoded", "=", "{", "'resp'", ":", "[", "]", ",", "'bspn'", ":", "[", "]", ",", "'aspn'", ":", "[", "]", "}", "\n", "\n", "", "", "else", ":", "# predict bspn, access db, then generate act and resp", "\n", "                        ", "outputs", "=", "self", ".", "model", ".", "generate", "(", "input_ids", "=", "inputs", "[", "'context_tensor'", "]", ",", "\n", "max_length", "=", "context_length", "+", "60", ",", "temperature", "=", "0.7", ",", "# top_p=0.9, num_beams=4,", "\n", "pad_token_id", "=", "self", ".", "tokenizer", ".", "eos_token_id", ",", "eos_token_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_b>'", "]", ")", "[", "0", "]", ")", "\n", "generated_bs", "=", "outputs", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "# generated_bs = generated_bs[context_length-1:]", "\n", "bspn_gen", "=", "self", ".", "decode_generated_bspn", "(", "generated_bs", "[", "context_length", "-", "1", ":", "]", ")", "\n", "# check DB result", "\n", "if", "cfg", ".", "use_true_db_pointer", ":", "\n", "# db_result = self.reader.bspan_to_DBpointer(self.tokenizer.decode(turn['bspn']), turn['turn_domain'])", "\n", "                            ", "db", "=", "turn", "[", "'db'", "]", "\n", "", "else", ":", "\n", "                            ", "db_result", "=", "self", ".", "reader", ".", "bspan_to_DBpointer", "(", "self", ".", "tokenizer", ".", "decode", "(", "bspn_gen", ")", ",", "turn", "[", "'turn_domain'", "]", ")", "\n", "db", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "'<sos_db> '", "+", "db_result", "+", "' <eos_db>'", ")", ")", "+", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<sos_a>'", "]", ")", "\n", "", "inputs", "[", "'context_tensor_db'", "]", "=", "torch", ".", "tensor", "(", "[", "inputs", "[", "'context'", "]", "[", ":", "-", "1", "]", "+", "bspn_gen", "+", "db", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "context_length", "=", "len", "(", "inputs", "[", "'context_tensor_db'", "]", "[", "0", "]", ")", "\n", "outputs_db", "=", "self", ".", "model", ".", "generate", "(", "input_ids", "=", "inputs", "[", "'context_tensor_db'", "]", ",", "\n", "max_length", "=", "context_length", "+", "80", ",", "temperature", "=", "0.7", ",", "# top_p=0.9, num_beams=4,", "\n", "pad_token_id", "=", "self", ".", "tokenizer", ".", "eos_token_id", ",", "eos_token_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_r>'", "]", ")", "[", "0", "]", ")", "\n", "generated_ar", "=", "outputs_db", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "generated_ar", "=", "generated_ar", "[", "context_length", "-", "1", ":", "]", "\n", "try", ":", "\n", "                            ", "decoded", "=", "self", ".", "decode_generated_act_resp", "(", "generated_ar", ")", "\n", "decoded", "[", "'bspn'", "]", "=", "bspn_gen", "\n", "", "except", "ValueError", "as", "exception", ":", "\n", "                            ", "logging", ".", "info", "(", "str", "(", "exception", ")", ")", "\n", "logging", ".", "info", "(", "self", ".", "tokenizer", ".", "decode", "(", "generated_ar", ")", ")", "\n", "decoded", "=", "{", "'resp'", ":", "[", "]", ",", "'bspn'", ":", "[", "]", ",", "'aspn'", ":", "[", "]", "}", "\n", "\n", "", "", "turn", "[", "'resp_gen'", "]", "=", "decoded", "[", "'resp'", "]", "\n", "turn", "[", "'bspn_gen'", "]", "=", "turn", "[", "'bspn'", "]", "if", "cfg", ".", "use_true_curr_bspn", "else", "decoded", "[", "'bspn'", "]", "\n", "turn", "[", "'aspn_gen'", "]", "=", "turn", "[", "'aspn'", "]", "if", "cfg", ".", "use_true_curr_aspn", "else", "decoded", "[", "'aspn'", "]", "\n", "turn", "[", "'dspn_gen'", "]", "=", "turn", "[", "'dspn'", "]", "\n", "\n", "# check DB results", "\n", "# db_result = self.reader.bspan_to_DBpointer(self.tokenizer.decode(turn['bspn']), turn['turn_domain'])", "\n", "# if db_result[0] == 1: # no match", "\n", "#     print('gt:', self.tokenizer.decode(turn['aspn']), '     |gen:', self.tokenizer.decode(decoded['aspn']))", "\n", "#     print('gen_resp: ', self.tokenizer.decode(decoded['resp']))", "\n", "#     print('gt_resp: ', self.tokenizer.decode(turn['resp']), '\\n')", "\n", "\n", "pv_turn", "[", "'labels'", "]", "=", "inputs", "[", "'labels'", "]", "# all true previous context", "\n", "pv_turn", "[", "'resp'", "]", "=", "turn", "[", "'resp'", "]", "if", "cfg", ".", "use_true_prev_resp", "else", "decoded", "[", "'resp'", "]", "\n", "pv_turn", "[", "'bspn'", "]", "=", "turn", "[", "'bspn'", "]", "if", "cfg", ".", "use_true_prev_bspn", "else", "decoded", "[", "'bspn'", "]", "\n", "pv_turn", "[", "'db'", "]", "=", "turn", "[", "'db'", "]", "if", "cfg", ".", "use_true_curr_bspn", "else", "db", "\n", "pv_turn", "[", "'aspn'", "]", "=", "turn", "[", "'aspn'", "]", "if", "cfg", ".", "use_true_prev_aspn", "else", "decoded", "[", "'aspn'", "]", "\n", "\n", "", "result_collection", ".", "update", "(", "\n", "self", ".", "reader", ".", "inverse_transpose_turn", "(", "dialog", ")", ")", "\n", "\n", "", "", "logging", ".", "info", "(", "\"inference time: {:.2f} min\"", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "btm", ")", "/", "60", ")", ")", "\n", "# score", "\n", "btm", "=", "time", ".", "time", "(", ")", "\n", "results", ",", "_", "=", "self", ".", "reader", ".", "wrap_result_lm", "(", "result_collection", ")", "\n", "bleu", ",", "success", ",", "match", "=", "self", ".", "evaluator", ".", "validation_metric", "(", "results", ")", "\n", "logging", ".", "info", "(", "\"Scoring time: {:.2f} min\"", ".", "format", "(", "(", "time", ".", "time", "(", ")", "-", "btm", ")", "/", "60", ")", ")", "\n", "score", "=", "0.5", "*", "(", "success", "+", "match", ")", "+", "bleu", "\n", "valid_loss", "=", "130", "-", "score", "\n", "logging", ".", "info", "(", "'validation [CTR] match: %2.2f  success: %2.2f  bleu: %2.2f    score: %.2f'", "%", "(", "\n", "match", ",", "success", ",", "bleu", ",", "score", ")", ")", "\n", "eval_results", "=", "{", "}", "\n", "eval_results", "[", "'bleu'", "]", "=", "bleu", "\n", "eval_results", "[", "'success'", "]", "=", "success", "\n", "eval_results", "[", "'match'", "]", "=", "match", "\n", "eval_results", "[", "'score'", "]", "=", "score", "\n", "eval_results", "[", "'result'", "]", "=", "'validation [CTR] match: %2.2f  success: %2.2f  bleu: %2.2f    score: %.2f'", "%", "(", "match", ",", "success", ",", "bleu", ",", "score", ")", "\n", "\n", "\n", "model_setting", ",", "epoch_setting", "=", "cfg", ".", "eval_load_path", ".", "split", "(", "'/'", ")", "[", "1", "]", ",", "cfg", ".", "eval_load_path", ".", "split", "(", "'/'", ")", "[", "2", "]", "\n", "eval_on", "=", "'-'", ".", "join", "(", "cfg", ".", "exp_domains", ")", "\n", "if", "data", "==", "'test'", ":", "\n", "            ", "eval_on", "+=", "'_test'", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "log_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "cfg", ".", "log_path", ")", "\n", "", "log_file_name", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "log_path", ",", "model_setting", "+", "'-'", "+", "eval_on", "+", "'.json'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "log_file_name", ")", ":", "\n", "            ", "eval_to_json", "=", "json", ".", "load", "(", "open", "(", "log_file_name", ",", "'r'", ")", ")", "\n", "eval_to_json", "[", "epoch_setting", "]", "=", "eval_results", "\n", "json", ".", "dump", "(", "eval_to_json", ",", "open", "(", "log_file_name", ",", "'w'", ")", ",", "indent", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "eval_to_json", "=", "{", "}", "\n", "eval_to_json", "[", "epoch_setting", "]", "=", "eval_results", "\n", "json", ".", "dump", "(", "eval_to_json", ",", "open", "(", "log_file_name", ",", "'w'", ")", ",", "indent", "=", "2", ")", "\n", "", "logging", ".", "info", "(", "'update eval results to {}'", ".", "format", "(", "log_file_name", ")", ")", "\n", "return", "eval_results", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_act_resp": [[633, 666], ["train.Modal.tokenizer.encode", "train.Modal.tokenizer.encode", "train.Modal.tokenizer.encode", "generated.index", "logging.info", "generated.index", "len", "train.Modal.tokenizer.decode"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "def", "decode_generated_act_resp", "(", "self", ",", "generated", ")", ":", "\n", "        ", "\"\"\"\n        decode generated\n        return decoded['resp'] ('bspn', 'aspn')\n        \"\"\"", "\n", "decoded", "=", "{", "}", "\n", "eos_a_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_a>'", "]", ")", "[", "0", "]", "\n", "eos_r_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_r>'", "]", ")", "[", "0", "]", "\n", "eos_b_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_b>'", "]", ")", "[", "0", "]", "\n", "\n", "# eos_r may not exists if gpt2 generated repetitive words.", "\n", "if", "eos_r_id", "in", "generated", ":", "\n", "            ", "eos_r_idx", "=", "generated", ".", "index", "(", "eos_r_id", ")", "\n", "", "else", ":", "\n", "            ", "eos_r_idx", "=", "len", "(", "generated", ")", "-", "1", "\n", "logging", ".", "info", "(", "'eos_r not in generated: '", "+", "self", ".", "tokenizer", ".", "decode", "(", "generated", ")", ")", "\n", "# eos_r_idx = generated.index(eos_r_id) if eos_r_id in generated else len(generated)-1", "\n", "\n", "", "if", "cfg", ".", "use_true_curr_aspn", ":", "# only predict resp", "\n", "            ", "decoded", "[", "'resp'", "]", "=", "generated", "[", ":", "eos_r_idx", "+", "1", "]", "\n", "", "else", ":", "# predicted aspn, resp", "\n", "            ", "eos_a_idx", "=", "generated", ".", "index", "(", "eos_a_id", ")", "\n", "decoded", "[", "'aspn'", "]", "=", "generated", "[", ":", "eos_a_idx", "+", "1", "]", "\n", "decoded", "[", "'resp'", "]", "=", "generated", "[", "eos_a_idx", "+", "1", ":", "eos_r_idx", "+", "1", "]", "\n", "# if cfg.use_true_curr_bspn:", "\n", "\n", "# else:  # predict bspn aspn resp", "\n", "#     eos_b_idx = generated.index(eos_b_id)", "\n", "#     eos_a_idx = generated.index(eos_a_id)", "\n", "#     decoded['bspn'] = generated[: eos_b_idx+1]", "\n", "#     decoded['aspn'] = generated[eos_b_idx+1: eos_a_idx+1]", "\n", "#     decoded['resp'] = generated[eos_a_idx+1: eos_r_idx+1]", "\n", "", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.decode_generated_bspn": [[667, 674], ["train.Modal.tokenizer.encode", "generated.index", "len"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode"], ["", "def", "decode_generated_bspn", "(", "self", ",", "generated", ")", ":", "\n", "        ", "eos_b_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "[", "'<eos_b>'", "]", ")", "[", "0", "]", "\n", "if", "eos_b_id", "in", "generated", ":", "\n", "            ", "eos_b_idx", "=", "generated", ".", "index", "(", "eos_b_id", ")", "\n", "", "else", ":", "\n", "            ", "eos_b_idx", "=", "len", "(", "generated", ")", "-", "1", "\n", "", "return", "generated", "[", ":", "eos_b_idx", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.parse_arg_cfg": [[675, 693], ["tuple", "type", "setattr", "pair.split", "getattr", "type", "ValueError", "dtype.split", "type.", "int"], "function", ["None"], ["", "", "def", "parse_arg_cfg", "(", "args", ")", ":", "\n", "# add args to cfg", "\n", "    ", "if", "args", ".", "cfg", ":", "\n", "        ", "for", "pair", "in", "args", ".", "cfg", ":", "\n", "            ", "k", ",", "v", "=", "tuple", "(", "pair", ".", "split", "(", "'='", ")", ")", "\n", "dtype", "=", "type", "(", "getattr", "(", "cfg", ",", "k", ")", ")", "\n", "if", "dtype", "==", "type", "(", "None", ")", ":", "\n", "                ", "raise", "ValueError", "(", ")", "\n", "", "if", "dtype", "is", "bool", ":", "\n", "                ", "v", "=", "False", "if", "v", "==", "'False'", "else", "True", "\n", "", "elif", "dtype", "is", "list", ":", "\n", "                ", "v", "=", "v", ".", "split", "(", "','", ")", "\n", "if", "k", "==", "'cuda_device'", ":", "\n", "                    ", "v", "=", "[", "int", "(", "no", ")", "for", "no", "in", "v", "]", "\n", "", "", "else", ":", "\n", "                ", "v", "=", "dtype", "(", "v", ")", "\n", "", "setattr", "(", "cfg", ",", "k", ",", "v", ")", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.main": [[695, 780], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "config.global_config._init_logging_handler", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "random.seed", "numpy.random.seed", "train.Modal", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "train.parse_arg_cfg", "train.parse_arg_cfg", "torch.device", "torch.device", "logging.info", "os.path.join", "logging.info", "os.path.join", "os.path.join", "os.path.join", "len", "torch.device", "torch.device", "Modal.train", "logging.info", "torch.cuda.current_device", "torch.cuda.current_device", "Modal.train_URURU", "logging.info", "exit", "train.Modal.validate", "train.Modal.validate", "os.path.exists", "os.mkdir", "train.Modal.validate_URURU", "train.Modal.validate_URURU"], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.config21._Config._init_logging_handler", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.parse_arg_cfg", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.parse_arg_cfg", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.train", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.train_URURU", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.validate", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.validate", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.validate_URURU", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.train.Modal.validate_URURU"], ["", "def", "main", "(", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./experiments'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'./experiments'", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'./experiments_21'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'./experiments_21'", ")", "\n", "\n", "", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-mode'", ")", "\n", "parser", ".", "add_argument", "(", "'-cfg'", ",", "nargs", "=", "'*'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "cfg", ".", "mode", "=", "args", ".", "mode", "\n", "if", "args", ".", "mode", "==", "'test'", "or", "args", ".", "mode", "==", "'adjust'", ":", "\n", "        ", "parse_arg_cfg", "(", "args", ")", "\n", "# cfg.model_path = cfg.eval_load_path", "\n", "cfg", ".", "gpt_path", "=", "cfg", ".", "eval_load_path", "\n", "", "else", ":", "# train", "\n", "        ", "parse_arg_cfg", "(", "args", ")", "\n", "if", "cfg", ".", "exp_path", "in", "[", "''", ",", "'to be generated'", "]", ":", "\n", "# log file path, control the factors: seed, learning_rate, batch_size, early_stop_count, weight decay...", "\n", "# cfg.exp_path = 'experiments/{}_{}_sd{}_lr{}_bs{}_sp{}_dc{}/'.format('-'.join(cfg.exp_domains),", "\n", "#                                                                     cfg.exp_no, cfg.seed, cfg.lr, cfg.batch_size,", "\n", "#                                                                     cfg.early_stop_count, cfg.weight_decay_count)", "\n", "\n", "            ", "experiments_path", "=", "'./experiments'", "if", "'all'", "in", "cfg", ".", "exp_domains", "else", "'./experiments_Xdomain'", "\n", "cfg", ".", "exp_path", "=", "os", ".", "path", ".", "join", "(", "experiments_path", ",", "'{}_{}_sd{}_lr{}_bs{}_ga{}'", ".", "format", "(", "'-'", ".", "join", "(", "cfg", ".", "exp_domains", ")", ",", "\n", "cfg", ".", "exp_no", ",", "cfg", ".", "seed", ",", "cfg", ".", "lr", ",", "cfg", ".", "batch_size", ",", "\n", "cfg", ".", "gradient_accumulation_steps", ")", ")", "\n", "logging", ".", "info", "(", "'save path:'", ",", "cfg", ".", "exp_path", ")", "\n", "if", "cfg", ".", "save_log", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "cfg", ".", "exp_path", ")", ":", "\n", "                    ", "os", ".", "mkdir", "(", "cfg", ".", "exp_path", ")", "\n", "\n", "# to gpt later", "\n", "", "", "cfg", ".", "model_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "exp_path", ",", "'model.pkl'", ")", "\n", "cfg", ".", "result_path", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "exp_path", ",", "'result.csv'", ")", "\n", "cfg", ".", "vocab_path_eval", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "exp_path", ",", "'vocab'", ")", "\n", "cfg", ".", "eval_load_path", "=", "cfg", ".", "exp_path", "\n", "\n", "", "", "cfg", ".", "_init_logging_handler", "(", "args", ".", "mode", ")", "\n", "if", "cfg", ".", "cuda", ":", "\n", "        ", "if", "len", "(", "cfg", ".", "cuda_device", ")", "==", "1", ":", "\n", "            ", "cfg", ".", "multi_gpu", "=", "False", "\n", "# torch.cuda.set_device(cfg.cuda_device[0])", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "cfg", ".", "cuda_device", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "pass", "# multi-gpu", "\n", "", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "logging", ".", "info", "(", "'Device: {}'", ".", "format", "(", "torch", ".", "cuda", ".", "current_device", "(", ")", ")", ")", "\n", "\n", "# fix random seed", "\n", "", "torch", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "random", ".", "seed", "(", "cfg", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "cfg", ".", "seed", ")", "\n", "\n", "# initialize model", "\n", "m", "=", "Modal", "(", "device", ")", "\n", "\n", "if", "args", ".", "mode", "==", "'train'", ":", "# train", "\n", "        ", "if", "cfg", ".", "save_log", ":", "# save cfg details.", "\n", "            ", "pass", "\n", "", "if", "cfg", ".", "context_scheme", "==", "'UBARU'", ":", "\n", "            ", "m", ".", "train", "(", ")", "\n", "", "elif", "cfg", ".", "context_scheme", "==", "'URURU'", ":", "\n", "            ", "m", ".", "train_URURU", "(", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "info", "(", "'Invalid context Scheme. must be UBARU or URURU'", ")", "\n", "exit", "(", ")", "\n", "", "", "elif", "args", ".", "mode", "==", "'adjuest'", ":", "\n", "        ", "pass", "\n", "", "else", ":", "# test", "\n", "        ", "logging", ".", "info", "(", "\"Generate setting: \\n\\t use true_prev_bspn={} \\n\\t use true_prev_aspn={} \\n\\t use true_db_pointer={} \\n\\t use true_prev_resp={} \\n\\t use true_curr_bspn={} \\n\\t use true_curr_aspn={} \\n\\t use_all_previous_context={}\"", ".", "format", "(", "\n", "cfg", ".", "use_true_prev_bspn", ",", "cfg", ".", "use_true_prev_aspn", ",", "cfg", ".", "use_true_db_pointer", ",", "cfg", ".", "use_true_prev_resp", ",", "\n", "cfg", ".", "use_true_curr_bspn", ",", "cfg", ".", "use_true_curr_aspn", ",", "cfg", ".", "use_all_previous_context", "\n", ")", ")", "\n", "\n", "if", "cfg", ".", "context_scheme", "==", "'UBARU'", ":", "\n", "            ", "m", ".", "validate", "(", ")", "\n", "m", ".", "validate", "(", "'test'", ")", "\n", "", "elif", "cfg", ".", "context_scheme", "==", "'URURU'", ":", "\n", "            ", "m", ".", "validate_URURU", "(", ")", "\n", "m", ".", "validate_URURU", "(", "'test'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.my_clean_text": [[5, 9], ["re.sub", "re.sub"], "function", ["None"], ["def", "my_clean_text", "(", "text", ")", ":", "\n", "    ", "text", "=", "re", ".", "sub", "(", "r'([a-zT]+)\\.([a-z])'", ",", "r'\\1 . \\2'", ",", "text", ")", "# 'abc.xyz' -> 'abc . xyz'", "\n", "text", "=", "re", ".", "sub", "(", "r'(\\w+)\\.\\.? '", ",", "r'\\1 . '", ",", "text", ")", "# if 'abc. ' -> 'abc . '", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_text": [[11, 62], ["re.sub.strip", "re.sub.lower", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "clean_dataset.clean_time", "baddata.items", "re.sub", "re.sub", "re.sub", "open", "fin.readlines", "line.replace().split", "re.sub.replace", "line.replace"], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_time"], ["", "def", "clean_text", "(", "text", ")", ":", "\n", "    ", "text", "=", "text", ".", "strip", "(", ")", "\n", "text", "=", "text", ".", "lower", "(", ")", "\n", "text", "=", "text", ".", "replace", "(", "u\"\u2019\"", ",", "\"'\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "u\"\u2018\"", ",", "\"'\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "';'", ",", "','", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\"'", ",", "' '", ")", "\n", "text", "=", "text", ".", "replace", "(", "'/'", ",", "' and '", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"don't\"", ",", "\"do n't\"", ")", "\n", "text", "=", "clean_time", "(", "text", ")", "\n", "baddata", "=", "{", "r'c\\.b (\\d), (\\d) ([a-z])\\.([a-z])'", ":", "r'cb\\1\\2\\3\\4'", ",", "\n", "'c.b. 1 7 d.y'", ":", "'cb17dy'", ",", "\n", "'c.b.1 7 d.y'", ":", "'cb17dy'", ",", "\n", "'c.b 25, 9 a.q'", ":", "'cb259aq'", ",", "\n", "'isc.b 25, 9 a.q'", ":", "'is cb259aq'", ",", "\n", "'c.b2, 1 u.f'", ":", "'cb21uf'", ",", "\n", "'c.b 1,2 q.a'", ":", "'cb12qa'", ",", "\n", "'0-122-336-5664'", ":", "'01223365664'", ",", "\n", "'postcodecb21rs'", ":", "'postcode cb21rs'", ",", "\n", "r'i\\.d'", ":", "'id'", ",", "\n", "' i d '", ":", "'id'", ",", "\n", "'Telephone:01223358966'", ":", "'Telephone: 01223358966'", ",", "\n", "'depature'", ":", "'departure'", ",", "\n", "'depearting'", ":", "'departing'", ",", "\n", "'-type'", ":", "' type'", ",", "\n", "r\"b[\\s]?&[\\s]?b\"", ":", "\"bed and breakfast\"", ",", "\n", "\"b and b\"", ":", "\"bed and breakfast\"", ",", "\n", "r\"guesthouse[s]?\"", ":", "\"guest house\"", ",", "\n", "r\"swimmingpool[s]?\"", ":", "\"swimming pool\"", ",", "\n", "\"wo n\\'t\"", ":", "\"will not\"", ",", "\n", "\" \\'d \"", ":", "\" would \"", ",", "\n", "\" \\'m \"", ":", "\" am \"", ",", "\n", "\" \\'re' \"", ":", "\" are \"", ",", "\n", "\" \\'ll' \"", ":", "\" will \"", ",", "\n", "\" \\'ve \"", ":", "\" have \"", ",", "\n", "r'^\\''", ":", "''", ",", "\n", "r'\\'$'", ":", "''", ",", "\n", "}", "\n", "for", "tmpl", ",", "good", "in", "baddata", ".", "items", "(", ")", ":", "\n", "        ", "text", "=", "re", ".", "sub", "(", "tmpl", ",", "good", ",", "text", ")", "\n", "\n", "", "text", "=", "re", ".", "sub", "(", "r'([a-zT]+)\\.([a-z])'", ",", "r'\\1 . \\2'", ",", "text", ")", "# 'abc.xyz' -> 'abc . xyz'", "\n", "text", "=", "re", ".", "sub", "(", "r'(\\w+)\\.\\.? '", ",", "r'\\1 . '", ",", "text", ")", "# if 'abc. ' -> 'abc . '", "\n", "\n", "with", "open", "(", "'data/multi-woz/mapping.pair'", ",", "'r'", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ".", "readlines", "(", ")", ":", "\n", "            ", "fromx", ",", "tox", "=", "line", ".", "replace", "(", "'\\n'", ",", "''", ")", ".", "split", "(", "'\\t'", ")", "\n", "text", "=", "' '", "+", "text", "+", "' '", "\n", "text", "=", "text", ".", "replace", "(", "' '", "+", "fromx", "+", "' '", ",", "' '", "+", "tox", "+", "' '", ")", "[", "1", ":", "-", "1", "]", "\n", "\n", "", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_time": [[64, 72], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "x.group", "x.group", "str", "str", "x.group", "int", "int", "x.group", "x.group"], "function", ["None"], ["", "def", "clean_time", "(", "utter", ")", ":", "\n", "    ", "utter", "=", "re", ".", "sub", "(", "r'(\\d+) ([ap]\\.?m)'", ",", "lambda", "x", ":", "x", ".", "group", "(", "1", ")", "+", "x", ".", "group", "(", "2", ")", ",", "utter", ")", "# 9 am -> 9am", "\n", "utter", "=", "re", ".", "sub", "(", "r'((?<!\\d)\\d:\\d+)(am)?'", ",", "r'0\\1'", ",", "utter", ")", "\n", "utter", "=", "re", ".", "sub", "(", "r'((?<!\\d)\\d)am'", ",", "r'0\\1:00'", ",", "utter", ")", "\n", "utter", "=", "re", ".", "sub", "(", "r'((?<!\\d)\\d)pm'", ",", "lambda", "x", ":", "str", "(", "int", "(", "x", ".", "group", "(", "1", ")", ")", "+", "12", ")", "+", "':00'", ",", "utter", ")", "\n", "utter", "=", "re", ".", "sub", "(", "r'(\\d+)(:\\d+)pm'", ",", "lambda", "x", ":", "str", "(", "int", "(", "x", ".", "group", "(", "1", ")", ")", "+", "12", ")", "+", "x", ".", "group", "(", "2", ")", ",", "utter", ")", "\n", "utter", "=", "re", ".", "sub", "(", "r'(\\d+)a\\.?m'", ",", "r'\\1'", ",", "utter", ")", "\n", "return", "utter", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values": [[74, 307], ["clean_dataset.clean_text", "ontology.normlize_slot_names.get", "value.replace.replace", "value.replace.replace", "value.replace.replace"], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_text"], ["", "def", "clean_slot_values", "(", "domain", ",", "slot", ",", "value", ")", ":", "\n", "    ", "value", "=", "clean_text", "(", "value", ")", "\n", "if", "not", "value", ":", "\n", "        ", "value", "=", "''", "\n", "", "elif", "value", "==", "'not mentioned'", ":", "\n", "        ", "value", "=", "''", "\n", "# value = 'not mentioned' # if in DST setting", "\n", "", "elif", "domain", "==", "'attraction'", ":", "\n", "        ", "if", "slot", "==", "'name'", ":", "\n", "            ", "if", "value", "==", "'t'", ":", "\n", "                ", "value", "=", "''", "\n", "", "if", "value", "==", "'trinity'", ":", "\n", "                ", "value", "=", "'trinity college'", "\n", "", "", "elif", "slot", "==", "'area'", ":", "\n", "            ", "if", "value", "in", "[", "'town centre'", ",", "'cent'", ",", "'center'", ",", "'ce'", "]", ":", "\n", "                ", "value", "=", "'centre'", "\n", "", "elif", "value", "in", "[", "'ely'", ",", "'in town'", ",", "'museum'", ",", "'norwich'", ",", "'same area as hotel'", "]", ":", "\n", "                ", "value", "=", "\"\"", "\n", "", "elif", "value", "in", "[", "'we'", "]", ":", "\n", "                ", "value", "=", "\"west\"", "\n", "", "", "elif", "slot", "==", "'type'", ":", "\n", "            ", "if", "value", "in", "[", "'m'", ",", "'mus'", ",", "'musuem'", "]", ":", "\n", "                ", "value", "=", "'museum'", "\n", "", "elif", "value", "in", "[", "'art'", ",", "'architectural'", "]", ":", "\n", "                ", "value", "=", "\"architecture\"", "\n", "", "elif", "value", "in", "[", "'churches'", "]", ":", "\n", "                ", "value", "=", "\"church\"", "\n", "", "elif", "value", "in", "[", "'coll'", "]", ":", "\n", "                ", "value", "=", "\"college\"", "\n", "", "elif", "value", "in", "[", "'concert'", ",", "'concerthall'", "]", ":", "\n", "                ", "value", "=", "'concert hall'", "\n", "", "elif", "value", "in", "[", "'night club'", "]", ":", "\n", "                ", "value", "=", "'nightclub'", "\n", "", "elif", "value", "in", "[", "'mutiple sports'", ",", "'mutliple sports'", ",", "'sports'", ",", "'galleria'", "]", ":", "\n", "                ", "value", "=", "'multiple sports'", "\n", "", "elif", "value", "in", "[", "'ol'", ",", "'science'", ",", "'gastropub'", ",", "'la raza'", "]", ":", "\n", "                ", "value", "=", "''", "\n", "", "elif", "value", "in", "[", "'swimmingpool'", ",", "'pool'", "]", ":", "\n", "                ", "value", "=", "'swimming pool'", "\n", "", "elif", "value", "in", "[", "'fun'", "]", ":", "\n", "                ", "value", "=", "'entertainment'", "\n", "\n", "", "", "", "elif", "domain", "==", "'hotel'", ":", "\n", "        ", "if", "slot", "==", "'area'", ":", "\n", "            ", "if", "value", "in", "[", "'cen'", ",", "'centre of town'", ",", "'near city center'", ",", "'center'", "]", ":", "\n", "                ", "value", "=", "'centre'", "\n", "", "elif", "value", "in", "[", "'east area'", ",", "'east side'", "]", ":", "\n", "                ", "value", "=", "'east'", "\n", "", "elif", "value", "in", "[", "'in the north'", ",", "'north part of town'", "]", ":", "\n", "                ", "value", "=", "'north'", "\n", "", "elif", "value", "in", "[", "'we'", "]", ":", "\n", "                ", "value", "=", "\"west\"", "\n", "", "", "elif", "slot", "==", "\"day\"", ":", "\n", "            ", "if", "value", "==", "\"monda\"", ":", "\n", "                ", "value", "=", "\"monday\"", "\n", "", "elif", "value", "==", "\"t\"", ":", "\n", "                ", "value", "=", "\"tuesday\"", "\n", "", "", "elif", "slot", "==", "'name'", ":", "\n", "            ", "if", "value", "==", "'uni'", ":", "\n", "                ", "value", "=", "'university arms hotel'", "\n", "", "elif", "value", "==", "'university arms'", ":", "\n", "                ", "value", "=", "'university arms hotel'", "\n", "", "elif", "value", "==", "'acron'", ":", "\n", "                ", "value", "=", "'acorn guest house'", "\n", "", "elif", "value", "==", "'ashley'", ":", "\n", "                ", "value", "=", "'ashley hotel'", "\n", "", "elif", "value", "==", "'arbury lodge guesthouse'", ":", "\n", "                ", "value", "=", "'arbury lodge guest house'", "\n", "", "elif", "value", "==", "'la'", ":", "\n", "                ", "value", "=", "'la margherit'", "\n", "", "elif", "value", "==", "'no'", ":", "\n", "                ", "value", "=", "''", "\n", "", "", "elif", "slot", "==", "'internet'", ":", "\n", "            ", "if", "value", "==", "'does not'", ":", "\n", "                ", "value", "=", "'no'", "\n", "", "elif", "value", "in", "[", "'y'", ",", "'free'", ",", "'free internet'", "]", ":", "\n", "                ", "value", "=", "'yes'", "\n", "", "elif", "value", "in", "[", "'4'", "]", ":", "\n", "                ", "value", "=", "''", "\n", "", "", "elif", "slot", "==", "'parking'", ":", "\n", "            ", "if", "value", "==", "'n'", ":", "\n", "                ", "value", "=", "'no'", "\n", "", "elif", "value", "in", "[", "'free parking'", "]", ":", "\n", "                ", "value", "=", "'yes'", "\n", "", "elif", "value", "in", "[", "'y'", "]", ":", "\n", "                ", "value", "=", "'yes'", "\n", "", "", "elif", "slot", "in", "[", "'pricerange'", ",", "'price range'", "]", ":", "\n", "            ", "slot", "=", "'pricerange'", "\n", "if", "value", "==", "'moderately'", ":", "\n", "                ", "value", "=", "'moderate'", "\n", "", "elif", "value", "in", "[", "'any'", "]", ":", "\n", "                ", "value", "=", "\"do n't care\"", "\n", "", "elif", "value", "in", "[", "'any'", "]", ":", "\n", "                ", "value", "=", "\"do n't care\"", "\n", "", "elif", "value", "in", "[", "'inexpensive'", "]", ":", "\n", "                ", "value", "=", "\"cheap\"", "\n", "", "elif", "value", "in", "[", "'2'", ",", "'4'", "]", ":", "\n", "                ", "value", "=", "''", "\n", "", "", "elif", "slot", "==", "'stars'", ":", "\n", "            ", "if", "value", "==", "'two'", ":", "\n", "                ", "value", "=", "'2'", "\n", "", "elif", "value", "==", "'three'", ":", "\n", "                ", "value", "=", "'3'", "\n", "", "elif", "value", "in", "[", "'4-star'", ",", "'4 stars'", ",", "'4 star'", ",", "'four star'", ",", "'four stars'", "]", ":", "\n", "                ", "value", "=", "'4'", "\n", "", "", "elif", "slot", "==", "'type'", ":", "\n", "            ", "if", "value", "==", "'0 star rarting'", ":", "\n", "                ", "value", "=", "''", "\n", "", "elif", "value", "==", "'guesthouse'", ":", "\n", "                ", "value", "=", "'guest house'", "\n", "", "elif", "value", "not", "in", "[", "'hotel'", ",", "'guest house'", ",", "\"do n't care\"", "]", ":", "\n", "                ", "value", "=", "''", "\n", "", "", "", "elif", "domain", "==", "'restaurant'", ":", "\n", "        ", "if", "slot", "==", "\"area\"", ":", "\n", "            ", "if", "value", "in", "[", "\"center\"", ",", "'scentre'", ",", "\"center of town\"", ",", "\"city center\"", ",", "\"cb30aq\"", ",", "\"town center\"", ",", "'centre of cambridge'", ",", "'city centre'", "]", ":", "\n", "                ", "value", "=", "\"centre\"", "\n", "", "elif", "value", "==", "\"west part of town\"", ":", "\n", "                ", "value", "=", "\"west\"", "\n", "", "elif", "value", "==", "\"n\"", ":", "\n", "                ", "value", "=", "\"north\"", "\n", "", "elif", "value", "in", "[", "'the south'", "]", ":", "\n", "                ", "value", "=", "'south'", "\n", "", "elif", "value", "not", "in", "[", "'centre'", ",", "'south'", ",", "\"do n't care\"", ",", "'west'", ",", "'east'", ",", "'north'", "]", ":", "\n", "                ", "value", "=", "''", "\n", "", "", "elif", "slot", "==", "\"day\"", ":", "\n", "            ", "if", "value", "==", "\"monda\"", ":", "\n", "                ", "value", "=", "\"monday\"", "\n", "", "elif", "value", "==", "\"t\"", ":", "\n", "                ", "value", "=", "\"tuesday\"", "\n", "", "", "elif", "slot", "in", "[", "'pricerange'", ",", "'price range'", "]", ":", "\n", "            ", "slot", "=", "'pricerange'", "\n", "if", "value", "in", "[", "'moderately'", ",", "'mode'", ",", "'mo'", "]", ":", "\n", "                ", "value", "=", "'moderate'", "\n", "", "elif", "value", "in", "[", "'not'", "]", ":", "\n", "                ", "value", "=", "''", "\n", "", "elif", "value", "in", "[", "'inexpensive'", ",", "'ch'", "]", ":", "\n", "                ", "value", "=", "\"cheap\"", "\n", "", "", "elif", "slot", "==", "\"food\"", ":", "\n", "            ", "if", "value", "==", "\"barbecue\"", ":", "\n", "                ", "value", "=", "\"barbeque\"", "\n", "", "", "elif", "slot", "==", "\"pricerange\"", ":", "\n", "            ", "if", "value", "==", "\"moderately\"", ":", "\n", "                ", "value", "=", "\"moderate\"", "\n", "", "", "elif", "slot", "==", "\"time\"", ":", "\n", "            ", "if", "value", "==", "\"9:00\"", ":", "\n", "                ", "value", "=", "\"09:00\"", "\n", "", "elif", "value", "==", "\"9:45\"", ":", "\n", "                ", "value", "=", "\"09:45\"", "\n", "", "elif", "value", "==", "\"1330\"", ":", "\n", "                ", "value", "=", "\"13:30\"", "\n", "", "elif", "value", "==", "\"1430\"", ":", "\n", "                ", "value", "=", "\"14:30\"", "\n", "", "elif", "value", "==", "\"9:15\"", ":", "\n", "                ", "value", "=", "\"09:15\"", "\n", "", "elif", "value", "==", "\"9:30\"", ":", "\n", "                ", "value", "=", "\"09:30\"", "\n", "", "elif", "value", "==", "\"1830\"", ":", "\n", "                ", "value", "=", "\"18:30\"", "\n", "", "elif", "value", "==", "\"9\"", ":", "\n", "                ", "value", "=", "\"09:00\"", "\n", "", "elif", "value", "==", "\"2:00\"", ":", "\n", "                ", "value", "=", "\"14:00\"", "\n", "", "elif", "value", "==", "\"1:00\"", ":", "\n", "                ", "value", "=", "\"13:00\"", "\n", "", "elif", "value", "==", "\"3:00\"", ":", "\n", "                ", "value", "=", "\"15:00\"", "\n", "", "", "", "elif", "domain", "==", "'taxi'", ":", "\n", "        ", "if", "slot", "in", "[", "'arriveBy'", ",", "'arrive by'", "]", ":", "\n", "            ", "slot", "=", "'arriveby'", "\n", "if", "value", "==", "'1530'", ":", "\n", "                ", "value", "=", "'15:30'", "\n", "", "elif", "value", "==", "'15 minutes'", ":", "\n", "                ", "value", "=", "''", "\n", "", "", "elif", "slot", "in", "[", "'leaveAt'", ",", "'leave at'", "]", ":", "\n", "            ", "slot", "=", "'leaveat'", "\n", "if", "value", "==", "'1:00'", ":", "\n", "                ", "value", "=", "'01:00'", "\n", "", "elif", "value", "==", "'21:4'", ":", "\n", "                ", "value", "=", "'21:04'", "\n", "", "elif", "value", "==", "'4:15'", ":", "\n", "                ", "value", "=", "'04:15'", "\n", "", "elif", "value", "==", "'5:45'", ":", "\n", "                ", "value", "=", "'05:45'", "\n", "", "elif", "value", "==", "'0700'", ":", "\n", "                ", "value", "=", "'07:00'", "\n", "", "elif", "value", "==", "'4:45'", ":", "\n", "                ", "value", "=", "'04:45'", "\n", "", "elif", "value", "==", "'8:30'", ":", "\n", "                ", "value", "=", "'08:30'", "\n", "", "elif", "value", "==", "'9:30'", ":", "\n", "                ", "value", "=", "'09:30'", "\n", "", "value", "=", "value", ".", "replace", "(", "\".\"", ",", "\":\"", ")", "\n", "\n", "", "", "elif", "domain", "==", "'train'", ":", "\n", "        ", "if", "slot", "in", "[", "'arriveBy'", ",", "'arrive by'", "]", ":", "\n", "            ", "slot", "=", "'arriveby'", "\n", "if", "value", "==", "'1'", ":", "\n", "                ", "value", "=", "'01:00'", "\n", "", "elif", "value", "in", "[", "'does not care'", ",", "'doesnt care'", ",", "\"doesn't care\"", "]", ":", "\n", "                ", "value", "=", "\"do n't care\"", "\n", "", "elif", "value", "==", "'8:30'", ":", "\n", "                ", "value", "=", "'08:30'", "\n", "", "elif", "value", "==", "'not 15:45'", ":", "\n", "                ", "value", "=", "''", "\n", "", "value", "=", "value", ".", "replace", "(", "\".\"", ",", "\":\"", ")", "\n", "", "elif", "slot", "==", "'day'", ":", "\n", "            ", "if", "value", "==", "'doesnt care'", "or", "value", "==", "\"doesn't care\"", ":", "\n", "                ", "value", "=", "\"do n't care\"", "\n", "", "", "elif", "slot", "in", "[", "'leaveAt'", ",", "'leave at'", "]", ":", "\n", "            ", "slot", "=", "'leaveat'", "\n", "if", "value", "==", "'2:30'", ":", "\n", "                ", "value", "=", "'02:30'", "\n", "", "elif", "value", "==", "'7:54'", ":", "\n", "                ", "value", "=", "'07:54'", "\n", "", "elif", "value", "==", "'after 5:45 pm'", ":", "\n", "                ", "value", "=", "'17:45'", "\n", "", "elif", "value", "in", "[", "'early evening'", ",", "'friday'", ",", "'sunday'", ",", "'tuesday'", ",", "'afternoon'", "]", ":", "\n", "                ", "value", "=", "''", "\n", "", "elif", "value", "==", "'12'", ":", "\n", "                ", "value", "=", "'12:00'", "\n", "", "elif", "value", "==", "'1030'", ":", "\n", "                ", "value", "=", "'10:30'", "\n", "", "elif", "value", "==", "'1700'", ":", "\n", "                ", "value", "=", "'17:00'", "\n", "", "elif", "value", "in", "[", "'does not care'", ",", "'doesnt care'", ",", "'do nt care'", ",", "\"doesn't care\"", "]", ":", "\n", "                ", "value", "=", "\"do n't care\"", "\n", "\n", "", "value", "=", "value", ".", "replace", "(", "\".\"", ",", "\":\"", ")", "\n", "", "", "if", "value", "in", "[", "'dont care'", ",", "\"don't care\"", ",", "\"do nt care\"", ",", "\"doesn't care\"", "]", ":", "\n", "        ", "value", "=", "\"do n't care\"", "\n", "", "if", "ontology", ".", "normlize_slot_names", ".", "get", "(", "slot", ")", ":", "\n", "        ", "slot", "=", "ontology", ".", "normlize_slot_names", "[", "slot", "]", "\n", "", "return", "slot", ",", "value", "\n", "", ""]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.Attn.__init__": [[73, 78], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "attn", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", "*", "2", ",", "hidden_size", ")", "\n", "self", ".", "v", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "# self.v = nn.Parameter(torch.zeros(hidden_size))", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.Attn.forward": [[82, 99], ["damd_net.Attn.score", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "damd_net.Attn.masked_fill_", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.Attn.score"], ["", "def", "forward", "(", "self", ",", "hidden", ",", "encoder_outputs", ",", "mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param hidden: tensor of size [n_layer, B, H]\n        :param encoder_outputs: tensor of size [B,T, H]\n        \"\"\"", "\n", "attn_energies", "=", "self", ".", "score", "(", "hidden", ",", "encoder_outputs", ")", "# [B,T,H]", "\n", "if", "mask", "is", "None", ":", "\n", "            ", "normalized_energy", "=", "F", ".", "softmax", "(", "attn_energies", ",", "dim", "=", "2", ")", "# [B,1,T]", "\n", "", "else", ":", "\n", "# mask = (inp_seqs > 0).float()", "\n", "            ", "attn_energies", ".", "masked_fill_", "(", "mask", ",", "-", "1e20", ")", "\n", "# print('masked attn:', attn_energies[0:2,:,:])", "\n", "normalized_energy", "=", "F", ".", "softmax", "(", "attn_energies", ",", "dim", "=", "2", ")", "# [B,1,T]", "\n", "# print('masked normalized attn:', normalized_energy[0:2,:,:])", "\n", "\n", "", "context", "=", "torch", ".", "bmm", "(", "normalized_energy", ",", "encoder_outputs", ")", "# [B,1,H]", "\n", "return", "context", "# [B,1, H]", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.Attn.score": [[100, 106], ["encoder_outputs.size", "hidden.repeat().transpose", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "damd_net.Attn.v().transpose", "damd_net.Attn.attn", "hidden.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "damd_net.Attn.v"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "hidden", ",", "encoder_outputs", ")", ":", "\n", "        ", "max_len", "=", "encoder_outputs", ".", "size", "(", "1", ")", "\n", "H", "=", "hidden", ".", "repeat", "(", "max_len", ",", "1", ",", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "# [B,T,H]", "\n", "energy", "=", "torch", ".", "tanh", "(", "self", ".", "attn", "(", "torch", ".", "cat", "(", "[", "H", ",", "encoder_outputs", "]", ",", "2", ")", ")", ")", "# [B,T,2H]->[B,T,H]", "\n", "energy", "=", "self", ".", "v", "(", "energy", ")", ".", "transpose", "(", "1", ",", "2", ")", "# [B,1,T]", "\n", "return", "energy", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.LayerNormalization.__init__": [[111, 116], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.__init__"], ["def", "__init__", "(", "self", ",", "hidden_size", ",", "eps", "=", "1e-3", ")", ":", "\n", "        ", "super", "(", "LayerNormalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "a_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "hidden_size", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "b_2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "hidden_size", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.LayerNormalization.forward": [[117, 125], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.std", "torch.std", "torch.std", "torch.std", "z.size", "damd_net.LayerNormalization.b_2.expand_as", "torch.mean.expand_as", "torch.mean.expand_as", "torch.std.expand_as", "torch.std.expand_as", "damd_net.LayerNormalization.a_2.expand_as"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "        ", "if", "z", ".", "size", "(", "1", ")", "==", "1", ":", "\n", "            ", "return", "z", "\n", "", "mu", "=", "torch", ".", "mean", "(", "z", ",", "keepdim", "=", "True", ",", "dim", "=", "-", "1", ")", "\n", "sigma", "=", "torch", ".", "std", "(", "z", ",", "keepdim", "=", "True", ",", "dim", "=", "-", "1", ")", "\n", "ln_out", "=", "(", "z", "-", "mu", ".", "expand_as", "(", "z", ")", ")", "/", "(", "sigma", ".", "expand_as", "(", "z", ")", "+", "self", ".", "eps", ")", "\n", "ln_out", "=", "ln_out", "*", "self", ".", "a_2", ".", "expand_as", "(", "ln_out", ")", "+", "self", ".", "b_2", ".", "expand_as", "(", "ln_out", ")", "\n", "return", "ln_out", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.MultiLayerGRUwithLN.__init__": [[129, 156], ["torch.nn.Module.__init__", "torch.nn.ModuleDict", "torch.nn.ModuleDict", "range", "damd_net.MultiLayerGRUwithLN.all_weights.extend", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.GRU", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "str", "str"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.__init__"], ["def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "layer_num", "=", "1", ",", "bidirec", "=", "False", ",", "\n", "layer_norm", "=", "False", ",", "skip_connect", "=", "False", ",", "dropout", "=", ".0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "layer_num", "=", "layer_num", "\n", "self", ".", "bidirec", "=", "bidirec", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "self", ".", "skip_connect", "=", "skip_connect", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "model_layers", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "self", ".", "all_weights", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "if", "l", "==", "0", ":", "\n", "                ", "gru", "=", "nn", ".", "GRU", "(", "self", ".", "input_size", ",", "self", ".", "hidden_size", ",", "num_layers", "=", "1", ",", "dropout", "=", "self", ".", "dropout", ",", "\n", "bidirectional", "=", "self", ".", "bidirec", ",", "batch_first", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "input_size", "=", "self", ".", "hidden_size", "if", "not", "self", ".", "bidirec", "else", "2", "*", "self", ".", "hidden_size", "\n", "gru", "=", "nn", ".", "GRU", "(", "input_size", ",", "self", ".", "hidden_size", ",", "num_layers", "=", "1", ",", "dropout", "=", "self", ".", "dropout", ",", "\n", "bidirectional", "=", "self", ".", "bidirec", ",", "batch_first", "=", "True", ")", "\n", "", "self", ".", "model_layers", "[", "'gru_'", "+", "str", "(", "l", ")", "]", "=", "gru", "\n", "self", ".", "all_weights", ".", "extend", "(", "gru", ".", "all_weights", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "output_size", "=", "self", ".", "hidden_size", "if", "not", "self", ".", "bidirec", "else", "2", "*", "self", ".", "hidden_size", "\n", "# ln = LayerNormalization(output_size)", "\n", "ln", "=", "nn", ".", "LayerNorm", "(", "output_size", ")", "\n", "self", ".", "model_layers", "[", "'ln_'", "+", "str", "(", "l", ")", "]", "=", "ln", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.MultiLayerGRUwithLN.forward": [[157, 183], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs.size", "hidden.view", "torch.cat.append", "torch.cat.append", "torch.dropout", "torch.dropout", "str", "str"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inputs", ",", "hidden", "=", "None", ")", ":", "\n", "        ", "\"\"\"[summary]\n\n        :param inputs: tensor of size [B, T, H]\n        :param hidden: tensor of size [n_layer*bi-direc,B,H]\n        :returns: in_l: tensor of size [B, T, H * bi-direc]\n                      hs: tensor of size [n_layer * bi-direc,B,H]\n        \"\"\"", "\n", "batch_size", "=", "inputs", ".", "size", "(", ")", "[", "0", "]", "\n", "in_l", ",", "last_input", "=", "inputs", ",", "None", "\n", "hs", "=", "[", "]", "\n", "if", "hidden", ":", "\n", "            ", "hiddens", "=", "hidden", ".", "view", "(", "self", ".", "layer_num", ",", "self", ".", "bidirec", ",", "batch_size", ",", "self", ".", "hidden_size", ")", "\n", "", "for", "l", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "init_hs", "=", "hiddens", "[", "l", "]", "if", "hidden", "else", "None", "\n", "in_l", ",", "hs_l", "=", "self", ".", "model_layers", "[", "'gru_'", "+", "str", "(", "l", ")", "]", "(", "in_l", ",", "init_hs", ")", "\n", "hs", ".", "append", "(", "hs_l", ")", "\n", "if", "self", ".", "layer_norm", ":", "\n", "                ", "in_l", "=", "self", ".", "model_layers", "[", "'ln_'", "+", "str", "(", "l", ")", "]", "(", "in_l", ")", "\n", "", "if", "self", ".", "dropout", ">", "0", "and", "l", "<", "(", "self", ".", "layer_num", "-", "1", ")", ":", "\n", "                ", "in_l", "=", "F", ".", "dropout", "(", "in_l", ")", "\n", "", "if", "self", ".", "skip_connect", "and", "last_input", "is", "not", "None", ":", "\n", "                ", "in_l", "=", "in_l", "+", "last_input", "\n", "", "last_input", "=", "in_l", "\n", "", "hs", "=", "torch", ".", "cat", "(", "hs", ",", "0", ")", "\n", "return", "in_l", ",", "hs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.biGRUencoder.__init__": [[186, 199], ["torch.nn.Module.__init__", "damd_net.init_gru", "torch.nn.GRU", "torch.nn.GRU", "damd_net.MultiLayerGRUwithLN"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.__init__", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.init_gru"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "embedding", "\n", "self", ".", "embed_size", "=", "embedding", ".", "embedding_dim", "\n", "self", ".", "hidden_size", "=", "cfg", ".", "hidden_size", "\n", "# self.embedding = nn.Embedding(vocab_size, embed_size)", "\n", "if", "cfg", ".", "enc_layer_num", "==", "1", ":", "\n", "            ", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "self", ".", "embed_size", ",", "cfg", ".", "hidden_size", ",", "cfg", ".", "enc_layer_num", ",", "dropout", "=", "cfg", ".", "dropout", ",", "\n", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "gru", "=", "MultiLayerGRUwithLN", "(", "self", ".", "embed_size", ",", "cfg", ".", "hidden_size", ",", "cfg", ".", "enc_layer_num", ",", "bidirec", "=", "True", ",", "\n", "layer_norm", "=", "cfg", ".", "layer_norm", ",", "skip_connect", "=", "cfg", ".", "skip_connect", ",", "dropout", "=", "cfg", ".", "dropout", ")", "\n", "", "init_gru", "(", "self", ".", "gru", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.biGRUencoder.forward": [[201, 214], ["damd_net.biGRUencoder.embedding", "damd_net.biGRUencoder.gru"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_seqs", ",", "hidden", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        forward procedure. No need for inputs to be sorted\n        :param input_seqs: Variable of [B,T]\n        :param hidden:\n        :return: outputs [B,T,H], hidden [n_layer*bi-direc,B,H]\n        \"\"\"", "\n", "embedded", "=", "self", ".", "embedding", "(", "input_seqs", ")", "\n", "#self.gru.flatten_parameters()", "\n", "outputs", ",", "hidden", "=", "self", ".", "gru", "(", "embedded", ",", "hidden", ")", "\n", "# print(outputs.size())", "\n", "outputs", "=", "outputs", "[", ":", ",", ":", ",", ":", "self", ".", "hidden_size", "]", "+", "outputs", "[", ":", ",", ":", ",", "self", ".", "hidden_size", ":", "]", "\n", "return", "outputs", ",", "hidden", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.Copy.__init__": [[217, 221], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "copy_weight", "=", "1.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Wcopy", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", "\n", "self", ".", "copy_weight", "=", "copy_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.Copy.forward": [[223, 234], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "damd_net.Copy.Wcopy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "enc_out_hs", ",", "dec_hs", ")", ":", "\n", "        ", "\"\"\"\n        get unnormalized copy score\n        :param enc_out_hs: [B, Tenc,  H]\n        :param dec_hs: [B, Tdec, H]   testing: Tdec=1\n        :return: raw_cp_score of each position, size [B, Tdec, Tenc]\n        \"\"\"", "\n", "# print(B,H,Tdec, enc_out_hs.size(0))", "\n", "raw_cp_score", "=", "torch", ".", "tanh", "(", "self", ".", "Wcopy", "(", "enc_out_hs", ")", ")", "#[B,Tenc,H]", "\n", "raw_cp_score", "=", "torch", ".", "einsum", "(", "'beh,bdh->bde'", ",", "raw_cp_score", ",", "dec_hs", ")", "#[B, Tdec, Tenc]", "\n", "return", "raw_cp_score", "*", "self", ".", "copy_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DomainSpanDecoder.__init__": [[343, 360], ["torch.nn.Module.__init__", "torch.nn.GRU", "torch.nn.GRU", "damd_net.init_gru", "damd_net.Attn", "damd_net.Copy", "torch.nn.Linear", "torch.nn.Linear", "damd_net.Attn", "damd_net.Attn"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.__init__", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.init_gru"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "vocab_size_oov", ",", "Wgen", "=", "None", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "embedding", "\n", "self", ".", "embed_size", "=", "embedding", ".", "embedding_dim", "\n", "self", ".", "vsize_oov", "=", "vocab_size_oov", "\n", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "3", "*", "cfg", ".", "hidden_size", "+", "self", ".", "embed_size", ",", "cfg", ".", "hidden_size", ",", "cfg", ".", "dec_layer_num", ",", "\n", "dropout", "=", "cfg", ".", "dropout", ",", "batch_first", "=", "True", ")", "\n", "init_gru", "(", "self", ".", "gru", ")", "\n", "\n", "self", ".", "Wgen", "=", "nn", ".", "Linear", "(", "cfg", ".", "hidden_size", ",", "cfg", ".", "vocab_size", ")", "if", "not", "Wgen", "else", "Wgen", "\n", "\n", "self", ".", "attn_user", "=", "Attn", "(", "cfg", ".", "hidden_size", ")", "\n", "self", ".", "attn_pvresp", "=", "self", ".", "attn_user", "if", "cfg", ".", "attn_param_share", "else", "Attn", "(", "cfg", ".", "hidden_size", ")", "\n", "self", ".", "attn_pvdspn", "=", "self", ".", "attn_user", "if", "cfg", ".", "attn_param_share", "else", "Attn", "(", "cfg", ".", "hidden_size", ")", "\n", "\n", "self", ".", "cp_pvdspn", "=", "Copy", "(", "cfg", ".", "hidden_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DomainSpanDecoder.forward": [[361, 398], ["damd_net.DomainSpanDecoder.embedding", "gru_input.append", "damd_net.DomainSpanDecoder.attn_user", "gru_input.append", "gru_input.append", "gru_input.append", "damd_net.DomainSpanDecoder.gru", "damd_net.DomainSpanDecoder.attn_pvresp", "damd_net.DomainSpanDecoder.attn_pvdspn", "inputs[].size", "damd_net.cuda_", "damd_net.cuda_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_states", ",", "dec_last_w", ",", "dec_last_h", ",", "first_turn", ",", "first_step", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "gru_input", "=", "[", "]", "\n", "embed_last_w", "=", "self", ".", "embedding", "(", "dec_last_w", ")", "\n", "# embed_last_w = self.dropout_layer(embed_last_w)", "\n", "gru_input", ".", "append", "(", "embed_last_w", ")", "\n", "# print(embed_last_w.size())", "\n", "\n", "if", "first_step", ":", "\n", "            ", "self", ".", "mask_user", "=", "(", "inputs", "[", "'user'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "self", ".", "mask_pvresp", "=", "(", "inputs", "[", "'pv_resp'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "self", ".", "mask_pvdspn", "=", "(", "inputs", "[", "'pv_dspn'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "# print('masks:', self.mask_user.device, self.mask_pvresp.device, self.mask_pvbspn.device)", "\n", "", "if", "mode", "==", "'test'", "and", "not", "first_step", ":", "\n", "            ", "self", ".", "mask_pvresp", "=", "(", "inputs", "[", "'pv_resp'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "self", ".", "mask_pvdspn", "=", "(", "inputs", "[", "'pv_dspn'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "\n", "# print('user:', inputs['user'][0:2, :])", "\n", "", "context_user", "=", "self", ".", "attn_user", "(", "dec_last_h", ",", "hidden_states", "[", "'user'", "]", ",", "self", ".", "mask_user", ")", "\n", "# context_user = self.attn_user(dec_last_h, huser, self.mask_user)", "\n", "gru_input", ".", "append", "(", "context_user", ")", "\n", "# print(context_user.size())", "\n", "if", "not", "first_turn", ":", "\n", "            ", "context_pvresp", "=", "self", ".", "attn_pvresp", "(", "dec_last_h", ",", "hidden_states", "[", "'resp'", "]", ",", "self", ".", "mask_pvresp", ")", "\n", "context_pvdspn", "=", "self", ".", "attn_pvdspn", "(", "dec_last_h", ",", "hidden_states", "[", "'dspn'", "]", ",", "self", ".", "mask_pvdspn", ")", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "inputs", "[", "'user'", "]", ".", "size", "(", "0", ")", "\n", "context_pvresp", "=", "cuda_", "(", "torch", ".", "zeros", "(", "batch_size", ",", "1", ",", "cfg", ".", "hidden_size", ")", ")", "#.to(context_user.device)", "\n", "context_pvdspn", "=", "cuda_", "(", "torch", ".", "zeros", "(", "batch_size", ",", "1", ",", "cfg", ".", "hidden_size", ")", ")", "#.to(context_user.device)", "\n", "", "gru_input", ".", "append", "(", "context_pvresp", ")", "\n", "gru_input", ".", "append", "(", "context_pvdspn", ")", "\n", "# print(context_pvbspn.size())", "\n", "\n", "#self.gru.flatten_parameters()", "\n", "gru_out", ",", "dec_last_h", "=", "self", ".", "gru", "(", "torch", ".", "cat", "(", "gru_input", ",", "2", ")", ",", "dec_last_h", ")", "# [B, 1, H], [n_layer, B, H]", "\n", "# gru_out = self.dropout_layer(gru_out)", "\n", "# print(gru_out.size())", "\n", "return", "dec_last_h", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DomainSpanDecoder.get_probs": [[400, 417], ["dec_hs.size", "damd_net.DomainSpanDecoder.Wgen", "raw_scores.append", "damd_net.get_final_scores", "damd_net.DomainSpanDecoder.cp_pvdspn", "damd_net.DomainSpanDecoder.masked_fill_", "raw_scores.append", "word_onehot_input.append", "input_idx_oov.append", "damd_net.DomainSpanDecoder.mask_pvdspn.repeat"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.get_final_scores"], ["", "def", "get_probs", "(", "self", ",", "inputs", ",", "hidden_states", ",", "dec_hs", ",", "first_turn", "=", "False", ")", ":", "\n", "        ", "Tdec", "=", "dec_hs", ".", "size", "(", "1", ")", "\n", "\n", "raw_scores", ",", "word_onehot_input", ",", "input_idx_oov", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "raw_gen_score", "=", "self", ".", "Wgen", "(", "dec_hs", ")", "#[B, Tdec, H]", "\n", "raw_scores", ".", "append", "(", "raw_gen_score", ")", "\n", "\n", "if", "not", "first_turn", ":", "\n", "            ", "raw_cp_score_dspn", "=", "self", ".", "cp_pvdspn", "(", "hidden_states", "[", "'dspn'", "]", ",", "dec_hs", ")", "#[B,Ta]", "\n", "raw_cp_score_dspn", ".", "masked_fill_", "(", "self", ".", "mask_pvdspn", ".", "repeat", "(", "1", ",", "Tdec", ",", "1", ")", ",", "-", "1e20", ")", "\n", "raw_scores", ".", "append", "(", "raw_cp_score_dspn", ")", "\n", "word_onehot_input", ".", "append", "(", "inputs", "[", "'pv_dspn_onehot'", "]", ")", "\n", "input_idx_oov", ".", "append", "(", "inputs", "[", "'pv_dspn_nounk'", "]", ")", "\n", "\n", "", "probs", "=", "get_final_scores", "(", "raw_scores", ",", "word_onehot_input", ",", "input_idx_oov", ",", "self", ".", "vsize_oov", ")", "\n", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.BeliefSpanDecoder.__init__": [[419, 447], ["torch.nn.Module.__init__", "torch.nn.GRU", "torch.nn.GRU", "damd_net.init_gru", "damd_net.Attn", "damd_net.Copy", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "damd_net.Attn", "damd_net.Attn", "damd_net.Copy", "damd_net.Copy"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.__init__", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.init_gru"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "vocab_size_oov", ",", "bspn_mode", ",", "Wgen", "=", "None", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "embedding", "\n", "self", ".", "embed_size", "=", "embedding", ".", "embedding_dim", "\n", "self", ".", "vsize_oov", "=", "vocab_size_oov", "\n", "\n", "self", ".", "bspn_mode", "=", "bspn_mode", "\n", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "3", "*", "cfg", ".", "hidden_size", "+", "self", ".", "embed_size", ",", "cfg", ".", "hidden_size", ",", "cfg", ".", "dec_layer_num", ",", "\n", "dropout", "=", "cfg", ".", "dropout", ",", "batch_first", "=", "True", ")", "\n", "init_gru", "(", "self", ".", "gru", ")", "\n", "\n", "self", ".", "Wgen", "=", "nn", ".", "Linear", "(", "cfg", ".", "hidden_size", ",", "cfg", ".", "vocab_size", ")", "if", "not", "Wgen", "else", "Wgen", "\n", "\n", "self", ".", "attn_user", "=", "Attn", "(", "cfg", ".", "hidden_size", ")", "\n", "self", ".", "attn_pvresp", "=", "self", ".", "attn_user", "if", "cfg", ".", "attn_param_share", "else", "Attn", "(", "cfg", ".", "hidden_size", ")", "\n", "self", ".", "attn_pvbspn", "=", "self", ".", "attn_user", "if", "cfg", ".", "attn_param_share", "else", "Attn", "(", "cfg", ".", "hidden_size", ")", "\n", "\n", "self", ".", "cp_user", "=", "Copy", "(", "cfg", ".", "hidden_size", ",", "1.", ")", "\n", "self", ".", "cp_pvresp", "=", "self", ".", "cp_user", "if", "cfg", ".", "copy_param_share", "else", "Copy", "(", "cfg", ".", "hidden_size", ")", "\n", "self", ".", "cp_pvbspn", "=", "self", ".", "cp_user", "if", "cfg", ".", "copy_param_share", "else", "Copy", "(", "cfg", ".", "hidden_size", ",", "1.", ")", "\n", "\n", "self", ".", "mask_user", "=", "None", "\n", "self", ".", "mask_pvresp", "=", "None", "\n", "self", ".", "mask_pvbspn", "=", "None", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropout_layer", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "# input dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.BeliefSpanDecoder.forward": [[450, 500], ["damd_net.BeliefSpanDecoder.embedding", "gru_input.append", "damd_net.BeliefSpanDecoder.attn_user", "gru_input.append", "gru_input.append", "gru_input.append", "damd_net.BeliefSpanDecoder.gru", "damd_net.BeliefSpanDecoder.attn_pvresp", "damd_net.BeliefSpanDecoder.attn_pvbspn", "inputs[].size", "damd_net.cuda_", "damd_net.cuda_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_states", ",", "dec_last_w", ",", "dec_last_h", ",", "first_turn", ",", "first_step", ",", "mode", "=", "'train'", ")", ":", "\n", "# def forward(self, inputs, huser, hresp, hbspn, dec_last_w, dec_last_h, first_turn, first_step):", "\n", "        ", "\"\"\"[summary]\n        :param inputs: inputs dict\n        :param hidden_states: hidden states dict, size [B, T, H]\n        :param dec_last_w: word index of last decoding step\n        :param dec_last_h: hidden state of last decoding step\n        :param first_turn: [description], defaults to False\n        :returns: [description]\n        \"\"\"", "\n", "\n", "gru_input", "=", "[", "]", "\n", "embed_last_w", "=", "self", ".", "embedding", "(", "dec_last_w", ")", "\n", "# embed_last_w = self.dropout_layer(embed_last_w)", "\n", "gru_input", ".", "append", "(", "embed_last_w", ")", "\n", "# print(embed_last_w.size())", "\n", "\n", "if", "first_step", ":", "\n", "            ", "self", ".", "mask_user", "=", "(", "inputs", "[", "'user'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "self", ".", "mask_pvresp", "=", "(", "inputs", "[", "'pv_resp'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "self", ".", "mask_pvbspn", "=", "(", "inputs", "[", "'pv_'", "+", "self", ".", "bspn_mode", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "# print('masks:', self.mask_user.device, self.mask_pvresp.device, self.mask_pvbspn.device)", "\n", "", "if", "mode", "==", "'test'", "and", "not", "first_step", ":", "\n", "            ", "self", ".", "mask_pvresp", "=", "(", "inputs", "[", "'pv_resp'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "self", ".", "mask_pvbspn", "=", "(", "inputs", "[", "'pv_'", "+", "self", ".", "bspn_mode", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "\n", "# print('user:', inputs['user'][0:2, :])", "\n", "", "context_user", "=", "self", ".", "attn_user", "(", "dec_last_h", ",", "hidden_states", "[", "'user'", "]", ",", "self", ".", "mask_user", ")", "\n", "# context_user = self.attn_user(dec_last_h, huser, self.mask_user)", "\n", "gru_input", ".", "append", "(", "context_user", ")", "\n", "# print(context_user.size())", "\n", "if", "not", "first_turn", ":", "\n", "            ", "context_pvresp", "=", "self", ".", "attn_pvresp", "(", "dec_last_h", ",", "hidden_states", "[", "'resp'", "]", ",", "self", ".", "mask_pvresp", ")", "\n", "context_pvbspn", "=", "self", ".", "attn_pvbspn", "(", "dec_last_h", ",", "hidden_states", "[", "self", ".", "bspn_mode", "]", ",", "self", ".", "mask_pvbspn", ")", "\n", "\n", "# context_pvresp = self.attn_pvresp(dec_last_h, hresp, self.mask_pvresp)", "\n", "# context_pvbspn = self.attn_pvbspn(dec_last_h, hbspn, self.mask_pvbspn)", "\n", "", "else", ":", "\n", "            ", "batch_size", "=", "inputs", "[", "'user'", "]", ".", "size", "(", "0", ")", "\n", "context_pvresp", "=", "cuda_", "(", "torch", ".", "zeros", "(", "batch_size", ",", "1", ",", "cfg", ".", "hidden_size", ")", ")", "#.to(context_user.device)", "\n", "context_pvbspn", "=", "cuda_", "(", "torch", ".", "zeros", "(", "batch_size", ",", "1", ",", "cfg", ".", "hidden_size", ")", ")", "#.to(context_user.device)", "\n", "", "gru_input", ".", "append", "(", "context_pvresp", ")", "\n", "gru_input", ".", "append", "(", "context_pvbspn", ")", "\n", "# print(context_pvbspn.size())", "\n", "\n", "#self.gru.flatten_parameters()", "\n", "gru_out", ",", "dec_last_h", "=", "self", ".", "gru", "(", "torch", ".", "cat", "(", "gru_input", ",", "2", ")", ",", "dec_last_h", ")", "# [B, 1, H], [n_layer, B, H]", "\n", "# gru_out = self.dropout_layer(gru_out)", "\n", "# print(gru_out.size())", "\n", "return", "dec_last_h", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.BeliefSpanDecoder.get_probs": [[502, 532], ["dec_hs.size", "damd_net.BeliefSpanDecoder.Wgen", "raw_scores.append", "damd_net.BeliefSpanDecoder.cp_user", "damd_net.BeliefSpanDecoder.masked_fill_", "raw_scores.append", "word_onehot_input.append", "input_idx_oov.append", "damd_net.get_final_scores", "damd_net.BeliefSpanDecoder.mask_user.repeat", "damd_net.BeliefSpanDecoder.cp_pvresp", "damd_net.BeliefSpanDecoder.masked_fill_", "raw_scores.append", "word_onehot_input.append", "input_idx_oov.append", "damd_net.BeliefSpanDecoder.cp_pvbspn", "damd_net.BeliefSpanDecoder.masked_fill_", "raw_scores.append", "word_onehot_input.append", "input_idx_oov.append", "damd_net.BeliefSpanDecoder.mask_pvresp.repeat", "damd_net.BeliefSpanDecoder.mask_pvbspn.repeat"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.get_final_scores"], ["", "def", "get_probs", "(", "self", ",", "inputs", ",", "hidden_states", ",", "dec_hs", ",", "first_turn", "=", "False", ")", ":", "\n", "        ", "Tdec", "=", "dec_hs", ".", "size", "(", "1", ")", "\n", "\n", "raw_scores", ",", "word_onehot_input", ",", "input_idx_oov", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "raw_gen_score", "=", "self", ".", "Wgen", "(", "dec_hs", ")", "#[B, Tdec, V]", "\n", "raw_scores", ".", "append", "(", "raw_gen_score", ")", "\n", "\n", "raw_cp_score_user", "=", "self", ".", "cp_user", "(", "hidden_states", "[", "'user'", "]", ",", "dec_hs", ")", "#[B, Tdec,Tu]", "\n", "raw_cp_score_user", ".", "masked_fill_", "(", "self", ".", "mask_user", ".", "repeat", "(", "1", ",", "Tdec", ",", "1", ")", ",", "-", "1e20", ")", "\n", "raw_scores", ".", "append", "(", "raw_cp_score_user", ")", "\n", "word_onehot_input", ".", "append", "(", "inputs", "[", "'user_onehot'", "]", ")", "\n", "input_idx_oov", ".", "append", "(", "inputs", "[", "'user_nounk'", "]", ")", "\n", "\n", "if", "not", "first_turn", ":", "\n", "            ", "raw_cp_score_pvresp", "=", "self", ".", "cp_pvresp", "(", "hidden_states", "[", "'resp'", "]", ",", "dec_hs", ")", "#[B, Tdec,Tr]", "\n", "raw_cp_score_pvresp", ".", "masked_fill_", "(", "self", ".", "mask_pvresp", ".", "repeat", "(", "1", ",", "Tdec", ",", "1", ")", ",", "-", "1e20", ")", "\n", "raw_scores", ".", "append", "(", "raw_cp_score_pvresp", ")", "\n", "word_onehot_input", ".", "append", "(", "inputs", "[", "'pv_resp_onehot'", "]", ")", "\n", "input_idx_oov", ".", "append", "(", "inputs", "[", "'pv_resp_nounk'", "]", ")", "\n", "\n", "raw_cp_score_pvbspn", "=", "self", ".", "cp_pvbspn", "(", "hidden_states", "[", "self", ".", "bspn_mode", "]", ",", "dec_hs", ")", "#[B, Tdec, Tb]", "\n", "raw_cp_score_pvbspn", ".", "masked_fill_", "(", "self", ".", "mask_pvbspn", ".", "repeat", "(", "1", ",", "Tdec", ",", "1", ")", ",", "-", "1e20", ")", "\n", "raw_scores", ".", "append", "(", "raw_cp_score_pvbspn", ")", "\n", "word_onehot_input", ".", "append", "(", "inputs", "[", "'pv_%s_onehot'", "%", "self", ".", "bspn_mode", "]", ")", "\n", "input_idx_oov", ".", "append", "(", "inputs", "[", "'pv_%s_nounk'", "%", "self", ".", "bspn_mode", "]", ")", "\n", "\n", "# print('bspn:' , inputs['bspn'][0, 0:10])", "\n", "", "probs", "=", "get_final_scores", "(", "raw_scores", ",", "word_onehot_input", ",", "input_idx_oov", ",", "self", ".", "vsize_oov", ")", "# [B, V_oov]", "\n", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.ActSpanDecoder.__init__": [[536, 574], ["torch.nn.Module.__init__", "torch.nn.GRU", "torch.nn.GRU", "damd_net.init_gru", "damd_net.Attn", "damd_net.Copy", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "damd_net.Attn", "damd_net.Copy", "damd_net.Copy", "damd_net.Attn", "damd_net.Attn"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.__init__", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.init_gru"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "vocab_size_oov", ",", "Wgen", "=", "None", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "embedding", "\n", "self", ".", "embed_size", "=", "embedding", ".", "embedding_dim", "\n", "self", ".", "vsize_oov", "=", "vocab_size_oov", "\n", "\n", "input_dim", "=", "cfg", ".", "hidden_size", "+", "self", ".", "embed_size", "+", "cfg", ".", "pointer_dim", "\n", "if", "cfg", ".", "use_pvaspn", ":", "\n", "            ", "input_dim", "+=", "cfg", ".", "hidden_size", "\n", "", "if", "cfg", ".", "enable_bspn", ":", "\n", "            ", "input_dim", "+=", "cfg", ".", "hidden_size", "\n", "", "if", "cfg", ".", "enable_dspn", ":", "\n", "            ", "input_dim", "+=", "cfg", ".", "hidden_size", "\n", "\n", "", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "input_dim", ",", "cfg", ".", "hidden_size", ",", "cfg", ".", "dec_layer_num", ",", "\n", "dropout", "=", "cfg", ".", "dropout", ",", "batch_first", "=", "True", ")", "\n", "init_gru", "(", "self", ".", "gru", ")", "\n", "\n", "self", ".", "Wgen", "=", "nn", ".", "Linear", "(", "cfg", ".", "hidden_size", ",", "cfg", ".", "vocab_size", ")", "if", "not", "Wgen", "else", "Wgen", "\n", "\n", "self", ".", "attn_usdx", "=", "Attn", "(", "cfg", ".", "hidden_size", ")", "\n", "if", "cfg", ".", "enable_bspn", ":", "\n", "            ", "self", ".", "attn_bspn", "=", "self", ".", "attn_usdx", "if", "cfg", ".", "attn_param_share", "else", "Attn", "(", "cfg", ".", "hidden_size", ")", "\n", "", "if", "cfg", ".", "enable_dspn", ":", "\n", "            ", "self", ".", "attn_dspn", "=", "self", ".", "attn_usdx", "if", "cfg", ".", "attn_param_share", "else", "Attn", "(", "cfg", ".", "hidden_size", ")", "\n", "", "self", ".", "attn_pvaspn", "=", "self", ".", "attn_usdx", "if", "cfg", ".", "attn_param_share", "else", "Attn", "(", "cfg", ".", "hidden_size", ")", "\n", "\n", "self", ".", "cp_pvaspn", "=", "Copy", "(", "cfg", ".", "hidden_size", ")", "\n", "self", ".", "cp_dspn", "=", "self", ".", "cp_pvaspn", "if", "cfg", ".", "copy_param_share", "else", "Copy", "(", "cfg", ".", "hidden_size", ")", "\n", "self", ".", "cp_bspn", "=", "self", ".", "cp_pvaspn", "if", "cfg", ".", "copy_param_share", "else", "Copy", "(", "cfg", ".", "hidden_size", ")", "\n", "\n", "self", ".", "mask_usdx", "=", "None", "\n", "self", ".", "mask_bspn", "=", "None", "\n", "self", ".", "mask_dspn", "=", "None", "\n", "self", ".", "mask_pvaspn", "=", "None", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropout_layer", "=", "nn", ".", "Dropout", "(", "cfg", ".", "dropout", ")", "# input dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.ActSpanDecoder.forward": [[576, 640], ["damd_net.ActSpanDecoder.embedding", "gru_input.append", "gru_input.append", "damd_net.ActSpanDecoder.gru", "damd_net.ActSpanDecoder.attn_usdx", "damd_net.ActSpanDecoder.attn_usdx", "gru_input.append", "gru_input.append", "gru_input.append", "gru_input.append", "gru_input.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "damd_net.ActSpanDecoder.attn_bspn", "damd_net.ActSpanDecoder.attn_bspn", "damd_net.ActSpanDecoder.attn_dspn", "damd_net.ActSpanDecoder.attn_dspn", "inputs[].unsqueeze", "[].unsqueeze", "damd_net.ActSpanDecoder.attn_pvaspn", "damd_net.ActSpanDecoder.attn_pvaspn", "damd_net.cuda_", "damd_net.cuda_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "inputs[].size"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_states", ",", "dec_last_w", ",", "dec_last_h", ",", "first_turn", ",", "first_step", ",", "bidx", "=", "None", ",", "mode", "=", "'train'", ")", ":", "\n", "# def forward(self, inputs, husdx, hbspn, haspn, dec_last_w, dec_last_h, first_turn, first_step):", "\n", "\n", "        ", "gru_input", "=", "[", "]", "\n", "embed_last_w", "=", "self", ".", "embedding", "(", "dec_last_w", ")", "\n", "# embed_last_w = self.dropout_layer(embed_last_w)", "\n", "gru_input", ".", "append", "(", "embed_last_w", ")", "\n", "\n", "if", "first_step", ":", "\n", "            ", "self", ".", "mask_usdx", "=", "(", "inputs", "[", "'usdx'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "self", ".", "mask_pvaspn", "=", "(", "inputs", "[", "'pv_aspn'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "if", "cfg", ".", "enable_bspn", ":", "\n", "                ", "self", ".", "mask_bspn", "=", "(", "inputs", "[", "cfg", ".", "bspn_mode", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "", "if", "cfg", ".", "enable_dspn", ":", "\n", "                ", "self", ".", "mask_dspn", "=", "(", "inputs", "[", "'dspn'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "", "", "if", "mode", "==", "'test'", "and", "not", "first_step", ":", "\n", "            ", "self", ".", "mask_pvaspn", "=", "(", "inputs", "[", "'pv_aspn'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "if", "cfg", ".", "enable_bspn", ":", "\n", "                ", "self", ".", "mask_bspn", "=", "(", "inputs", "[", "cfg", ".", "bspn_mode", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "", "if", "cfg", ".", "enable_dspn", ":", "\n", "                ", "self", ".", "mask_dspn", "=", "(", "inputs", "[", "'dspn'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "\n", "", "", "if", "bidx", "is", "None", ":", "\n", "            ", "context_usdx", "=", "self", ".", "attn_usdx", "(", "dec_last_h", ",", "hidden_states", "[", "'usdx'", "]", ",", "self", ".", "mask_usdx", ")", "\n", "", "else", ":", "\n", "            ", "context_usdx", "=", "self", ".", "attn_usdx", "(", "dec_last_h", ",", "hidden_states", "[", "'usdx'", "]", "[", "bidx", "]", ",", "self", ".", "mask_usdx", "[", "bidx", "]", ")", "\n", "# context_usdx = self.attn_usdx(dec_last_h, husdx, self.mask_usdx)", "\n", "", "gru_input", ".", "append", "(", "context_usdx", ")", "\n", "if", "cfg", ".", "enable_bspn", ":", "\n", "            ", "if", "bidx", "is", "None", ":", "\n", "                ", "context_bspn", "=", "self", ".", "attn_bspn", "(", "dec_last_h", ",", "hidden_states", "[", "cfg", ".", "bspn_mode", "]", ",", "self", ".", "mask_bspn", ")", "\n", "", "else", ":", "\n", "                ", "context_bspn", "=", "self", ".", "attn_bspn", "(", "dec_last_h", ",", "hidden_states", "[", "cfg", ".", "bspn_mode", "]", "[", "bidx", "]", ",", "self", ".", "mask_bspn", "[", "bidx", "]", ")", "\n", "", "gru_input", ".", "append", "(", "context_bspn", ")", "\n", "", "if", "cfg", ".", "enable_dspn", ":", "\n", "            ", "if", "bidx", "is", "None", ":", "\n", "                ", "context_dspn", "=", "self", ".", "attn_dspn", "(", "dec_last_h", ",", "hidden_states", "[", "'dspn'", "]", ",", "self", ".", "mask_dspn", ")", "\n", "", "else", ":", "\n", "                ", "context_dspn", "=", "self", ".", "attn_dspn", "(", "dec_last_h", ",", "hidden_states", "[", "'dspn'", "]", "[", "bidx", "]", ",", "self", ".", "mask_dspn", "[", "bidx", "]", ")", "\n", "", "gru_input", ".", "append", "(", "context_dspn", ")", "\n", "", "if", "cfg", ".", "use_pvaspn", ":", "\n", "            ", "if", "not", "first_turn", ":", "\n", "                ", "if", "bidx", "is", "None", ":", "\n", "                    ", "context_pvaspn", "=", "self", ".", "attn_pvaspn", "(", "dec_last_h", ",", "hidden_states", "[", "'aspn'", "]", ",", "self", ".", "mask_pvaspn", ")", "\n", "", "else", ":", "\n", "                    ", "context_pvaspn", "=", "self", ".", "attn_pvaspn", "(", "dec_last_h", ",", "hidden_states", "[", "'aspn'", "]", "[", "bidx", "]", ",", "self", ".", "mask_pvaspn", "[", "bidx", "]", ")", "\n", "# context_pvaspn = self.attn_pvaspn(dec_last_h, haspn, self.mask_pvaspn)", "\n", "", "", "else", ":", "\n", "                ", "if", "bidx", "is", "None", ":", "\n", "                    ", "context_pvaspn", "=", "cuda_", "(", "torch", ".", "zeros", "(", "inputs", "[", "'user'", "]", ".", "size", "(", "0", ")", ",", "1", ",", "cfg", ".", "hidden_size", ")", ")", "\n", "", "else", ":", "\n", "                    ", "context_pvaspn", "=", "cuda_", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "cfg", ".", "hidden_size", ")", ")", "\n", "", "", "gru_input", ".", "append", "(", "context_pvaspn", ")", "\n", "\n", "", "if", "bidx", "is", "None", ":", "\n", "            ", "gru_input", ".", "append", "(", "inputs", "[", "'db'", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "gru_input", ".", "append", "(", "inputs", "[", "'db'", "]", "[", "bidx", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "#self.gru.flatten_parameters()", "\n", "", "gru_out", ",", "dec_last_h", "=", "self", ".", "gru", "(", "torch", ".", "cat", "(", "gru_input", ",", "2", ")", ",", "dec_last_h", ")", "# [B, 1, H], [n_layer, B, H]", "\n", "# gru_out should be the same with last_h in for 1-layer GRU decoder", "\n", "# gru_out = self.dropout_layer(gru_out)", "\n", "return", "dec_last_h", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.ActSpanDecoder.get_probs": [[642, 704], ["dec_hs.size", "damd_net.ActSpanDecoder.Wgen", "raw_scores.append", "damd_net.get_final_scores", "damd_net.ActSpanDecoder.cp_bspn", "damd_net.ActSpanDecoder.masked_fill_", "raw_scores.append", "word_onehot_input.append", "input_idx_oov.append", "damd_net.ActSpanDecoder.cp_bspn", "damd_net.ActSpanDecoder.masked_fill_", "raw_scores.append", "word_onehot_input.append", "input_idx_oov.append", "damd_net.ActSpanDecoder.cp_dspn", "damd_net.ActSpanDecoder.masked_fill_", "raw_scores.append", "word_onehot_input.append", "input_idx_oov.append", "damd_net.ActSpanDecoder.cp_dspn", "damd_net.ActSpanDecoder.masked_fill_", "raw_scores.append", "word_onehot_input.append", "input_idx_oov.append", "damd_net.ActSpanDecoder.cp_pvaspn", "damd_net.ActSpanDecoder.masked_fill_", "raw_scores.append", "word_onehot_input.append", "input_idx_oov.append", "damd_net.ActSpanDecoder.cp_pvaspn", "damd_net.ActSpanDecoder.masked_fill_", "raw_scores.append", "word_onehot_input.append", "input_idx_oov.append", "damd_net.ActSpanDecoder.mask_bspn.repeat", "damd_net.ActSpanDecoder.mask_bspn[].repeat", "damd_net.ActSpanDecoder.mask_dspn.repeat", "damd_net.ActSpanDecoder.mask_dspn[].repeat", "damd_net.ActSpanDecoder.mask_pvaspn.repeat", "damd_net.ActSpanDecoder.mask_pvaspn[].repeat"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.get_final_scores"], ["", "def", "get_probs", "(", "self", ",", "inputs", ",", "hidden_states", ",", "dec_hs", ",", "first_turn", "=", "False", ",", "bidx", "=", "None", ")", ":", "\n", "        ", "\"\"\"[summary]\n        :param dec_hs: [B, Tdec, H]\n        :param dec_ws: word index [B, Tdec]\n        :param dec_hs: decoder hidden states [B, Tdec, H]\n        :returns: [description]\n        \"\"\"", "\n", "Tdec", "=", "dec_hs", ".", "size", "(", "1", ")", "\n", "\n", "raw_scores", ",", "word_onehot_input", ",", "input_idx_oov", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "raw_gen_score", "=", "self", ".", "Wgen", "(", "dec_hs", ")", "#[B, Tdec, H]", "\n", "raw_scores", ".", "append", "(", "raw_gen_score", ")", "\n", "# print('raw_gen_score:' , raw_gen_score.cpu().detach().numpy()[0,:3, 0:40])", "\n", "\n", "if", "cfg", ".", "enable_bspn", ":", "\n", "            ", "if", "bidx", "is", "None", ":", "\n", "                ", "raw_cp_score_bspn", "=", "self", ".", "cp_bspn", "(", "hidden_states", "[", "cfg", ".", "bspn_mode", "]", ",", "dec_hs", ")", "#[B,Tb]", "\n", "raw_cp_score_bspn", ".", "masked_fill_", "(", "self", ".", "mask_bspn", ".", "repeat", "(", "1", ",", "Tdec", ",", "1", ")", ",", "-", "1e20", ")", "\n", "raw_scores", ".", "append", "(", "raw_cp_score_bspn", ")", "\n", "word_onehot_input", ".", "append", "(", "inputs", "[", "cfg", ".", "bspn_mode", "+", "'_onehot'", "]", ")", "\n", "input_idx_oov", ".", "append", "(", "inputs", "[", "cfg", ".", "bspn_mode", "+", "'_nounk'", "]", ")", "\n", "", "else", ":", "\n", "                ", "raw_cp_score_bspn", "=", "self", ".", "cp_bspn", "(", "hidden_states", "[", "cfg", ".", "bspn_mode", "]", "[", "bidx", "]", ",", "dec_hs", ")", "#[B,Tb]", "\n", "raw_cp_score_bspn", ".", "masked_fill_", "(", "self", ".", "mask_bspn", "[", "bidx", "]", ".", "repeat", "(", "1", ",", "Tdec", ",", "1", ")", ",", "-", "1e20", ")", "\n", "raw_scores", ".", "append", "(", "raw_cp_score_bspn", ")", "\n", "word_onehot_input", ".", "append", "(", "inputs", "[", "cfg", ".", "bspn_mode", "+", "'_onehot'", "]", "[", "bidx", "]", ")", "\n", "input_idx_oov", ".", "append", "(", "inputs", "[", "cfg", ".", "bspn_mode", "+", "'_nounk'", "]", "[", "bidx", "]", ")", "\n", "# print('raw_cp_score_bspn:' , raw_cp_score_bspn.cpu().detach().numpy()[0,:3, 0:40])", "\n", "\n", "", "", "if", "cfg", ".", "enable_dspn", ":", "\n", "            ", "if", "bidx", "is", "None", ":", "\n", "                ", "raw_cp_score_dspn", "=", "self", ".", "cp_dspn", "(", "hidden_states", "[", "'dspn'", "]", ",", "dec_hs", ")", "#[B,Tb]", "\n", "raw_cp_score_dspn", ".", "masked_fill_", "(", "self", ".", "mask_dspn", ".", "repeat", "(", "1", ",", "Tdec", ",", "1", ")", ",", "-", "1e20", ")", "\n", "raw_scores", ".", "append", "(", "raw_cp_score_dspn", ")", "\n", "word_onehot_input", ".", "append", "(", "inputs", "[", "'dspn_onehot'", "]", ")", "\n", "input_idx_oov", ".", "append", "(", "inputs", "[", "'dspn_nounk'", "]", ")", "\n", "", "else", ":", "\n", "                ", "raw_cp_score_dspn", "=", "self", ".", "cp_dspn", "(", "hidden_states", "[", "'dspn'", "]", "[", "bidx", "]", ",", "dec_hs", ")", "#[B,Tb]", "\n", "raw_cp_score_dspn", ".", "masked_fill_", "(", "self", ".", "mask_dspn", "[", "bidx", "]", ".", "repeat", "(", "1", ",", "Tdec", ",", "1", ")", ",", "-", "1e20", ")", "\n", "raw_scores", ".", "append", "(", "raw_cp_score_dspn", ")", "\n", "word_onehot_input", ".", "append", "(", "inputs", "[", "'dspn_onehot'", "]", "[", "bidx", "]", ")", "\n", "input_idx_oov", ".", "append", "(", "inputs", "[", "'dspn_nounk'", "]", "[", "bidx", "]", ")", "\n", "\n", "", "", "if", "not", "first_turn", "and", "cfg", ".", "use_pvaspn", ":", "\n", "            ", "if", "bidx", "is", "None", ":", "\n", "                ", "raw_cp_score_aspn", "=", "self", ".", "cp_pvaspn", "(", "hidden_states", "[", "'aspn'", "]", ",", "dec_hs", ")", "#[B,Ta]", "\n", "raw_cp_score_aspn", ".", "masked_fill_", "(", "self", ".", "mask_pvaspn", ".", "repeat", "(", "1", ",", "Tdec", ",", "1", ")", ",", "-", "1e20", ")", "\n", "raw_scores", ".", "append", "(", "raw_cp_score_aspn", ")", "\n", "word_onehot_input", ".", "append", "(", "inputs", "[", "'pv_aspn_onehot'", "]", ")", "\n", "input_idx_oov", ".", "append", "(", "inputs", "[", "'pv_aspn_nounk'", "]", ")", "\n", "", "else", ":", "\n", "                ", "raw_cp_score_aspn", "=", "self", ".", "cp_pvaspn", "(", "hidden_states", "[", "'aspn'", "]", "[", "bidx", "]", ",", "dec_hs", ")", "#[B,Ta]", "\n", "raw_cp_score_aspn", ".", "masked_fill_", "(", "self", ".", "mask_pvaspn", "[", "bidx", "]", ".", "repeat", "(", "1", ",", "Tdec", ",", "1", ")", ",", "-", "1e20", ")", "\n", "raw_scores", ".", "append", "(", "raw_cp_score_aspn", ")", "\n", "word_onehot_input", ".", "append", "(", "inputs", "[", "'pv_aspn_onehot'", "]", "[", "bidx", "]", ")", "\n", "input_idx_oov", ".", "append", "(", "inputs", "[", "'pv_aspn_nounk'", "]", "[", "bidx", "]", ")", "\n", "# print('raw_cp_score_aspn:' , raw_cp_score_aspn.cpu().detach().numpy()[0,:3, 0:40])", "\n", "\n", "# print('aspn:' , inputs['aspn'][0, 0:3])", "\n", "", "", "probs", "=", "get_final_scores", "(", "raw_scores", ",", "word_onehot_input", ",", "input_idx_oov", ",", "self", ".", "vsize_oov", ")", "\n", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.ResponseDecoder.__init__": [[708, 744], ["torch.nn.Module.__init__", "torch.nn.GRU", "torch.nn.GRU", "damd_net.init_gru", "damd_net.Attn", "damd_net.Copy", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear", "damd_net.Attn", "damd_net.Attn", "damd_net.Copy", "damd_net.Copy"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.__init__", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.init_gru"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ",", "vocab_size_oov", ",", "Wgen", "=", "None", ",", "dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "embedding", "\n", "self", ".", "embed_size", "=", "embedding", ".", "embedding_dim", "\n", "self", ".", "vsize_oov", "=", "vocab_size_oov", "\n", "\n", "gru_input_size", "=", "cfg", ".", "hidden_size", "+", "self", ".", "embed_size", "+", "cfg", ".", "pointer_dim", "\n", "if", "cfg", ".", "enable_bspn", ":", "\n", "            ", "gru_input_size", "+=", "cfg", ".", "hidden_size", "\n", "", "if", "cfg", ".", "enable_aspn", ":", "\n", "            ", "gru_input_size", "+=", "cfg", ".", "hidden_size", "\n", "\n", "", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "gru_input_size", ",", "cfg", ".", "hidden_size", ",", "cfg", ".", "dec_layer_num", ",", "\n", "dropout", "=", "cfg", ".", "dropout", ",", "batch_first", "=", "True", ")", "\n", "init_gru", "(", "self", ".", "gru", ")", "\n", "\n", "self", ".", "Wgen", "=", "nn", ".", "Linear", "(", "cfg", ".", "hidden_size", ",", "cfg", ".", "vocab_size", ")", "if", "not", "Wgen", "else", "Wgen", "\n", "self", ".", "attn_usdx", "=", "Attn", "(", "cfg", ".", "hidden_size", ")", "\n", "if", "cfg", ".", "enable_bspn", ":", "\n", "            ", "self", ".", "attn_bspn", "=", "self", ".", "attn_usdx", "if", "cfg", ".", "attn_param_share", "else", "Attn", "(", "cfg", ".", "hidden_size", ")", "\n", "", "if", "cfg", ".", "enable_aspn", ":", "\n", "            ", "self", ".", "attn_aspn", "=", "self", ".", "attn_usdx", "if", "cfg", ".", "attn_param_share", "else", "Attn", "(", "cfg", ".", "hidden_size", ")", "\n", "\n", "", "self", ".", "cp_usdx", "=", "Copy", "(", "cfg", ".", "hidden_size", ")", "\n", "if", "cfg", ".", "enable_bspn", ":", "\n", "            ", "self", ".", "cp_bspn", "=", "self", ".", "cp_usdx", "if", "cfg", ".", "copy_param_share", "else", "Copy", "(", "cfg", ".", "hidden_size", ")", "\n", "", "if", "cfg", ".", "enable_aspn", ":", "\n", "            ", "self", ".", "cp_aspn", "=", "self", ".", "cp_usdx", "if", "cfg", ".", "copy_param_share", "else", "Copy", "(", "cfg", ".", "hidden_size", ")", "\n", "\n", "", "self", ".", "mask_usdx", "=", "None", "\n", "self", ".", "mask_bspn", "=", "None", "\n", "if", "cfg", ".", "enable_aspn", ":", "\n", "            ", "self", ".", "mask_aspn", "=", "None", "\n", "\n", "", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropout_layer", "=", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", "# input dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.ResponseDecoder.forward": [[746, 786], ["damd_net.ResponseDecoder.embedding", "gru_input.append", "damd_net.ResponseDecoder.attn_usdx", "gru_input.append", "gru_input.append", "damd_net.ResponseDecoder.gru", "damd_net.ResponseDecoder.attn_bspn", "gru_input.append", "damd_net.ResponseDecoder.attn_aspn", "gru_input.append", "inputs[].unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_states", ",", "dec_last_w", ",", "dec_last_h", ",", "first_turn", ",", "first_step", ",", "mode", "=", "'train'", ")", ":", "\n", "# def forward(self, inputs, husdx, hbspn, haspn, dec_last_w, dec_last_h, first_turn, first_step):", "\n", "\n", "        ", "gru_input", "=", "[", "]", "\n", "embed_last_w", "=", "self", ".", "embedding", "(", "dec_last_w", ")", "\n", "# embed_last_w = self.dropout_layer(embed_last_w)", "\n", "gru_input", ".", "append", "(", "embed_last_w", ")", "\n", "\n", "if", "first_step", ":", "\n", "            ", "self", ".", "mask_usdx", "=", "(", "inputs", "[", "'usdx'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "if", "cfg", ".", "enable_bspn", ":", "\n", "                ", "self", ".", "mask_bspn", "=", "(", "inputs", "[", "cfg", ".", "bspn_mode", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "", "if", "cfg", ".", "enable_aspn", ":", "\n", "                ", "self", ".", "mask_aspn", "=", "(", "inputs", "[", "'aspn'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "", "", "if", "mode", "==", "'test'", "and", "not", "first_step", ":", "\n", "            ", "if", "cfg", ".", "enable_bspn", ":", "\n", "                ", "self", ".", "mask_bspn", "=", "(", "inputs", "[", "cfg", ".", "bspn_mode", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "", "if", "cfg", ".", "enable_aspn", ":", "\n", "                ", "self", ".", "mask_aspn", "=", "(", "inputs", "[", "'aspn'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", "#.to(dec_last_w.device)     # [B,1,T]", "\n", "\n", "", "", "context_usdx", "=", "self", ".", "attn_usdx", "(", "dec_last_h", ",", "hidden_states", "[", "'usdx'", "]", ",", "self", ".", "mask_usdx", ")", "\n", "# context_usdx = self.attn_usdx(dec_last_h, husdx, self.mask_usdx)", "\n", "gru_input", ".", "append", "(", "context_usdx", ")", "\n", "if", "cfg", ".", "enable_bspn", ":", "\n", "            ", "context_bspn", "=", "self", ".", "attn_bspn", "(", "dec_last_h", ",", "hidden_states", "[", "cfg", ".", "bspn_mode", "]", ",", "self", ".", "mask_bspn", ")", "\n", "# context_bspn = self.attn_bspn(dec_last_h, hbspn, self.mask_bspn)", "\n", "gru_input", ".", "append", "(", "context_bspn", ")", "\n", "", "if", "cfg", ".", "enable_aspn", ":", "\n", "            ", "context_aspn", "=", "self", ".", "attn_aspn", "(", "dec_last_h", ",", "hidden_states", "[", "'aspn'", "]", ",", "self", ".", "mask_aspn", ")", "\n", "# context_aspn = self.attn_aspn(dec_last_h, haspn, self.mask_aspn)", "\n", "gru_input", ".", "append", "(", "context_aspn", ")", "\n", "\n", "", "gru_input", ".", "append", "(", "inputs", "[", "'db'", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "#self.gru.flatten_parameters()", "\n", "gru_out", ",", "dec_last_h", "=", "self", ".", "gru", "(", "torch", ".", "cat", "(", "gru_input", ",", "2", ")", ",", "dec_last_h", ")", "# [B, 1, H], [n_layer, B, H]", "\n", "# gru_out should be the same with last_h in for 1-layer GRU decoder", "\n", "# gru_out = self.dropout_layer(gru_out)", "\n", "\n", "return", "dec_last_h", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.ResponseDecoder.get_probs": [[787, 826], ["dec_hs.size", "damd_net.ResponseDecoder.Wgen", "raw_scores.append", "damd_net.ResponseDecoder.cp_usdx", "damd_net.ResponseDecoder.masked_fill_", "raw_scores.append", "word_onehot_input.append", "input_idx_oov.append", "damd_net.get_final_scores", "damd_net.ResponseDecoder.mask_usdx.repeat", "damd_net.ResponseDecoder.cp_bspn", "damd_net.ResponseDecoder.masked_fill_", "raw_scores.append", "word_onehot_input.append", "input_idx_oov.append", "damd_net.ResponseDecoder.cp_aspn", "damd_net.ResponseDecoder.masked_fill_", "raw_scores.append", "word_onehot_input.append", "input_idx_oov.append", "damd_net.ResponseDecoder.mask_bspn.repeat", "damd_net.ResponseDecoder.mask_aspn.repeat"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.get_final_scores"], ["", "def", "get_probs", "(", "self", ",", "inputs", ",", "hidden_states", ",", "dec_hs", ",", "first_turn", "=", "False", ")", ":", "\n", "        ", "\"\"\"[summary]\n        :param dec_hs: [B, Tdec, H]\n        :param dec_ws: word index [B, Tdec]\n        :param dec_hs: decoder hidden states [B, Tdec, H]\n        :returns: [description]\n        \"\"\"", "\n", "Tdec", "=", "dec_hs", ".", "size", "(", "1", ")", "\n", "\n", "raw_scores", ",", "word_onehot_input", ",", "input_idx_oov", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "raw_gen_score", "=", "self", ".", "Wgen", "(", "dec_hs", ")", "#[B, Tdec, H]", "\n", "raw_scores", ".", "append", "(", "raw_gen_score", ")", "\n", "# print('raw_gen_score:' , raw_gen_score.cpu().detach().numpy()[0,:3, 0:40])", "\n", "\n", "raw_cp_score_usdx", "=", "self", ".", "cp_usdx", "(", "hidden_states", "[", "'usdx'", "]", ",", "dec_hs", ")", "#[B,Tu]", "\n", "raw_cp_score_usdx", ".", "masked_fill_", "(", "self", ".", "mask_usdx", ".", "repeat", "(", "1", ",", "Tdec", ",", "1", ")", ",", "-", "1e20", ")", "\n", "raw_scores", ".", "append", "(", "raw_cp_score_usdx", ")", "\n", "word_onehot_input", ".", "append", "(", "inputs", "[", "'usdx_onehot'", "]", ")", "\n", "input_idx_oov", ".", "append", "(", "inputs", "[", "'usdx_nounk'", "]", ")", "\n", "\n", "if", "cfg", ".", "enable_bspn", ":", "\n", "            ", "raw_cp_score_bspn", "=", "self", ".", "cp_bspn", "(", "hidden_states", "[", "cfg", ".", "bspn_mode", "]", ",", "dec_hs", ")", "#[B,Tb]", "\n", "raw_cp_score_bspn", ".", "masked_fill_", "(", "self", ".", "mask_bspn", ".", "repeat", "(", "1", ",", "Tdec", ",", "1", ")", ",", "-", "1e20", ")", "\n", "raw_scores", ".", "append", "(", "raw_cp_score_bspn", ")", "\n", "word_onehot_input", ".", "append", "(", "inputs", "[", "cfg", ".", "bspn_mode", "+", "'_onehot'", "]", ")", "\n", "input_idx_oov", ".", "append", "(", "inputs", "[", "cfg", ".", "bspn_mode", "+", "'_nounk'", "]", ")", "\n", "# print('raw_cp_score_bspn:' , raw_cp_score_bspn.cpu().detach().numpy()[0,:3, 0:40])", "\n", "\n", "", "if", "cfg", ".", "enable_aspn", ":", "\n", "            ", "raw_cp_score_aspn", "=", "self", ".", "cp_aspn", "(", "hidden_states", "[", "'aspn'", "]", ",", "dec_hs", ")", "#[B,Ta]", "\n", "raw_cp_score_aspn", ".", "masked_fill_", "(", "self", ".", "mask_aspn", ".", "repeat", "(", "1", ",", "Tdec", ",", "1", ")", ",", "-", "1e20", ")", "\n", "raw_scores", ".", "append", "(", "raw_cp_score_aspn", ")", "\n", "word_onehot_input", ".", "append", "(", "inputs", "[", "'aspn_onehot'", "]", ")", "\n", "input_idx_oov", ".", "append", "(", "inputs", "[", "'aspn_nounk'", "]", ")", "\n", "\n", "# print('resp:' , inputs['resp'][0, 0:3])", "\n", "", "probs", "=", "get_final_scores", "(", "raw_scores", ",", "word_onehot_input", ",", "input_idx_oov", ",", "self", ".", "vsize_oov", ")", "\n", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.ActSelectionModel.__init__": [[829, 837], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_size", ",", "length", ",", "nbest", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nbest", "=", "nbest", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "W1", "=", "nn", ".", "Linear", "(", "hidden_size", "*", "length", ",", "hidden_size", ")", "\n", "self", ".", "W2", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "self", ".", "logsoftmax", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.ActSelectionModel.forward": [[838, 848], ["hiddens_batch.view", "damd_net.ActSelectionModel.W2().view", "damd_net.ActSelectionModel.logsoftmax", "hiddens_batch.size", "damd_net.ActSelectionModel.W2", "torch.nn.ReLU", "torch.nn.ReLU", "damd_net.ActSelectionModel.W1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hiddens_batch", ")", ":", "\n", "        ", "\"\"\"[summary]\n        :param hiddens_batch: [B, nbest, T, H]\n        :param decoded_batch: [B, nbest, T]\n        \"\"\"", "\n", "batch_size", "=", "hiddens_batch", ".", "size", "(", ")", "[", "0", "]", "\n", "logits", "=", "hiddens_batch", ".", "view", "(", "batch_size", ",", "self", ".", "nbest", ",", "-", "1", ")", "\n", "logits", "=", "self", ".", "W2", "(", "nn", ".", "ReLU", "(", "self", ".", "W1", "(", "logits", ")", ")", ")", ".", "view", "(", "batch_size", ")", "\n", "logprob", "=", "self", ".", "logsoftmax", "(", "logits", ")", "#[B,nbest]", "\n", "return", "logprob", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.__init__": [[850, 925], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "damd_net.biGRUencoder", "damd_net.biGRUencoder", "damd_net.ResponseDecoder", "torch.nn.NLLLoss", "torch.nn.NLLLoss", "damd_net.biGRUencoder", "torch.nn.Linear", "torch.nn.Linear", "damd_net.DomainSpanDecoder", "damd_net.BeliefSpanDecoder", "damd_net.ActSpanDecoder", "damd_net.BeliefSpanDecoder"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reader", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reader", "=", "reader", "\n", "self", ".", "vocab", "=", "self", ".", "reader", ".", "vocab", "\n", "self", ".", "vocab_size", "=", "self", ".", "vocab", ".", "vocab_size", "\n", "self", ".", "vsize_oov", "=", "self", ".", "vocab", ".", "vocab_size_oov", "\n", "self", ".", "embed_size", "=", "cfg", ".", "embed_size", "\n", "self", ".", "hidden_size", "=", "cfg", ".", "hidden_size", "\n", "self", ".", "n_layer", "=", "cfg", ".", "dec_layer_num", "\n", "self", ".", "dropout", "=", "cfg", ".", "dropout", "\n", "self", ".", "max_span_len", "=", "cfg", ".", "max_span_length", "\n", "self", ".", "max_nl_len", "=", "cfg", ".", "max_nl_length", "\n", "self", ".", "teacher_force", "=", "cfg", ".", "teacher_force", "\n", "self", ".", "label_smth", "=", "cfg", ".", "label_smoothing", "\n", "self", ".", "beam_width", "=", "cfg", ".", "beam_width", "\n", "self", ".", "nbest", "=", "cfg", ".", "nbest", "\n", "\n", "# self.module_list = nn.ModuleList()", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "vocab_size", ",", "self", ".", "embed_size", ")", "\n", "# self.module_list.append(self.embedding)", "\n", "\n", "\n", "self", ".", "user_encoder", "=", "biGRUencoder", "(", "self", ".", "embedding", ")", "\n", "# self.module_list.append(self.user_encoder)", "\n", "if", "cfg", ".", "encoder_share", ":", "\n", "            ", "self", ".", "usdx_encoder", "=", "self", ".", "user_encoder", "\n", "", "else", ":", "\n", "            ", "self", ".", "usdx_encoder", "=", "biGRUencoder", "(", "self", ".", "embedding", ")", "\n", "# self.module_list.append(self.usdx_encoder)", "\n", "", "self", ".", "span_encoder", "=", "biGRUencoder", "(", "self", ".", "embedding", ")", "\n", "\n", "\n", "Wgen", "=", "nn", ".", "Linear", "(", "cfg", ".", "hidden_size", ",", "cfg", ".", "vocab_size", ")", "if", "cfg", ".", "copy_param_share", "else", "None", "\n", "\n", "# joint training of dialogue state tracker", "\n", "self", ".", "decoders", "=", "{", "}", "\n", "if", "cfg", ".", "enable_dspn", ":", "\n", "            ", "self", ".", "dspn_decoder", "=", "DomainSpanDecoder", "(", "self", ".", "embedding", ",", "self", ".", "vsize_oov", ",", "Wgen", "=", "Wgen", ",", "\n", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decoders", "[", "'dspn'", "]", "=", "self", ".", "dspn_decoder", "\n", "", "if", "cfg", ".", "enable_bspn", ":", "\n", "            ", "self", ".", "bspn_decoder", "=", "BeliefSpanDecoder", "(", "self", ".", "embedding", ",", "self", ".", "vsize_oov", ",", "cfg", ".", "bspn_mode", ",", "\n", "Wgen", "=", "Wgen", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decoders", "[", "cfg", ".", "bspn_mode", "]", "=", "self", ".", "bspn_decoder", "\n", "", "if", "cfg", ".", "enable_aspn", ":", "\n", "            ", "self", ".", "aspn_decoder", "=", "ActSpanDecoder", "(", "self", ".", "embedding", ",", "self", ".", "vsize_oov", ",", "\n", "Wgen", "=", "Wgen", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decoders", "[", "'aspn'", "]", "=", "self", ".", "aspn_decoder", "\n", "", "self", ".", "resp_decoder", "=", "ResponseDecoder", "(", "self", ".", "embedding", ",", "self", ".", "vsize_oov", ",", "\n", "Wgen", "=", "Wgen", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decoders", "[", "'resp'", "]", "=", "self", ".", "resp_decoder", "\n", "\n", "if", "cfg", ".", "enable_dst", "and", "cfg", ".", "bspn_mode", "==", "'bsdx'", ":", "\n", "            ", "self", ".", "dst_decoder", "=", "BeliefSpanDecoder", "(", "self", ".", "embedding", ",", "self", ".", "vsize_oov", ",", "'bspn'", ",", "\n", "Wgen", "=", "Wgen", ",", "dropout", "=", "self", ".", "dropout", ")", "\n", "self", ".", "decoders", "[", "'bspn'", "]", "=", "self", ".", "dst_decoder", "\n", "\n", "", "self", ".", "nllloss", "=", "nn", ".", "NLLLoss", "(", "ignore_index", "=", "0", ")", "\n", "\n", "\n", "self", ".", "go_idx", "=", "{", "'bspn'", ":", "3", ",", "'bsdx'", ":", "3", ",", "'aspn'", ":", "4", ",", "'dspn'", ":", "9", ",", "'resp'", ":", "1", "}", "\n", "self", ".", "eos_idx", "=", "{", "'bspn'", ":", "7", ",", "'bsdx'", ":", "7", ",", "'aspn'", ":", "8", ",", "'dspn'", ":", "10", ",", "'resp'", ":", "6", "}", "\n", "self", ".", "teacher_forcing_decode", "=", "{", "\n", "'bspn'", ":", "cfg", ".", "use_true_curr_bspn", ",", "\n", "'bsdx'", ":", "cfg", ".", "use_true_curr_bspn", ",", "\n", "'aspn'", ":", "cfg", ".", "use_true_curr_aspn", ",", "\n", "'dspn'", ":", "False", ",", "\n", "'resp'", ":", "False", "}", "\n", "self", ".", "limited_vocab_decode", "=", "{", "\n", "'bspn'", ":", "cfg", ".", "limit_bspn_vocab", ",", "\n", "'bsdx'", ":", "cfg", ".", "limit_bspn_vocab", ",", "\n", "'aspn'", ":", "cfg", ".", "limit_aspn_vocab", ",", "\n", "'dspn'", ":", "False", ",", "\n", "'resp'", ":", "False", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.supervised_loss": [[926, 963], ["probs.items", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.view", "torch.cat.view", "inputs[].view", "damd_net.DAMD.nllloss", "torch.cat.view", "torch.cat.view", "inputs[].view", "damd_net.DAMD.nllloss", "damd_net.label_smoothing", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "damd_net.DAMD.supervised_loss.LabelSmoothingNLLLoss"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.label_smoothing"], ["", "def", "supervised_loss", "(", "self", ",", "inputs", ",", "probs", ")", ":", "\n", "        ", "def", "LabelSmoothingNLLLoss", "(", "logprob", ",", "labels", ")", ":", "\n", "                ", "return", "-", "(", "labels", "*", "logprob", ")", ".", "sum", "(", "(", "1", ",", "2", ")", ")", ".", "mean", "(", ")", "\n", "\n", "", "total_loss", "=", "0", "\n", "losses", "=", "{", "'bsdx'", ":", "0", ",", "'bspn'", ":", "0", ",", "'aspn'", ":", "0", ",", "'resp'", ":", "0", "}", "\n", "for", "name", ",", "prob", "in", "probs", ".", "items", "(", ")", ":", "\n", "            ", "if", "name", "==", "'aspn_aug'", ":", "\n", "                ", "continue", "\n", "# print(prob)", "\n", "# pred = torch.log(prob.view(-1, prob.size(2)))", "\n", "# print(pred[0, :50])", "\n", "", "if", "name", "!=", "'resp'", "or", "cfg", ".", "label_smoothing", "==", ".0", ":", "\n", "                ", "pred", "=", "prob", ".", "view", "(", "-", "1", ",", "prob", ".", "size", "(", "2", ")", ")", "#[B,T,Voov] -> [B*T, Voov]", "\n", "label", "=", "inputs", "[", "name", "+", "'_4loss'", "]", ".", "view", "(", "-", "1", ")", "\n", "# print(label[:50])", "\n", "loss", "=", "self", ".", "nllloss", "(", "pred", ",", "label", ")", "\n", "total_loss", "+=", "loss", "\n", "losses", "[", "name", "]", "=", "loss", "\n", "", "else", ":", "\n", "                ", "label", "=", "label_smoothing", "(", "inputs", "[", "name", "+", "'_4loss'", "]", ",", "self", ".", "label_smth", ",", "self", ".", "vsize_oov", ")", "\n", "loss", "=", "LabelSmoothingNLLLoss", "(", "prob", ",", "label", ")", "/", "10", "\n", "total_loss", "+=", "loss", "\n", "losses", "[", "name", "]", "=", "loss", "\n", "\n", "", "", "if", "cfg", ".", "multi_acts_training", "and", "'aspn_aug'", "in", "probs", ":", "\n", "            ", "prob", "=", "torch", ".", "cat", "(", "probs", "[", "'aspn_aug'", "]", ",", "0", ")", "\n", "pred", "=", "prob", ".", "view", "(", "-", "1", ",", "prob", ".", "size", "(", "2", ")", ")", "#[B,T,Voov] -> [B*T, Voov]", "\n", "label", "=", "inputs", "[", "'aspn_aug_4loss'", "]", ".", "view", "(", "-", "1", ")", "\n", "# print(label.size())", "\n", "loss", "=", "self", ".", "nllloss", "(", "pred", ",", "label", ")", "\n", "total_loss", "+=", "loss", "\n", "losses", "[", "'aspn_aug'", "]", "=", "loss", "\n", "", "else", ":", "\n", "            ", "losses", "[", "'aspn_aug'", "]", "=", "0", "\n", "\n", "", "return", "total_loss", ",", "losses", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.forward": [[965, 977], ["damd_net.DAMD.train_forward", "damd_net.DAMD.supervised_loss", "damd_net.DAMD.test_forward", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.train_forward", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.supervised_loss", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.test_forward"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_states", ",", "first_turn", ",", "mode", ")", ":", "\n", "        ", "if", "mode", "==", "'train'", "or", "mode", "==", "'valid'", ":", "\n", "# probs, hidden_states = \\", "\n", "            ", "probs", "=", "self", ".", "train_forward", "(", "inputs", ",", "hidden_states", ",", "first_turn", ")", "\n", "total_loss", ",", "losses", "=", "self", ".", "supervised_loss", "(", "inputs", ",", "probs", ")", "\n", "return", "total_loss", ",", "losses", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "decoded", "=", "self", ".", "test_forward", "(", "inputs", ",", "hidden_states", ",", "first_turn", ")", "\n", "return", "decoded", "\n", "", "elif", "mode", "==", "'rl'", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'RL not available at the moment'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.train_forward": [[979, 1063], ["damd_net.DAMD.user_encoder", "damd_net.DAMD.usdx_encoder", "damd_net.DAMD.usdx_encoder", "damd_net.DAMD.train_forward.train_decode"], "methods", ["None"], ["", "", "def", "train_forward", "(", "self", ",", "inputs", ",", "hidden_states", ",", "first_turn", ")", ":", "\n", "        ", "\"\"\"\n        compute required outputs for a single dialogue turn. Turn state{Dict} will be updated in each call.\n        \"\"\"", "\n", "def", "train_decode", "(", "name", ",", "init_hidden", ",", "hidden_states", ",", "probs", ",", "bidx", "=", "None", ")", ":", "\n", "\n", "            ", "batch_size", "=", "inputs", "[", "'user'", "]", ".", "size", "(", "0", ")", "if", "bidx", "is", "None", "else", "len", "(", "bidx", ")", "\n", "dec_last_w", "=", "cuda_", "(", "torch", ".", "ones", "(", "batch_size", ",", "1", ")", ".", "long", "(", ")", "*", "self", ".", "go_idx", "[", "name", "]", ")", "\n", "if", "bidx", "is", "None", ":", "\n", "                ", "dec_last_h", "=", "(", "init_hidden", "[", "-", "1", "]", "+", "init_hidden", "[", "-", "2", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "dec_last_h", "=", "(", "init_hidden", "[", "-", "1", "]", "+", "init_hidden", "[", "-", "2", "]", ")", ".", "unsqueeze", "(", "0", ")", "[", ":", ",", "bidx", ",", ":", "]", "\n", "\n", "", "decode_step", "=", "inputs", "[", "name", "]", ".", "size", "(", "1", ")", "if", "bidx", "is", "None", "else", "inputs", "[", "'aspn_aug_batch'", "]", ".", "size", "(", "1", ")", "\n", "hiddens", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "decode_step", ")", ":", "\n", "# print('%s step %d'%(name, t))", "\n", "                ", "first_step", "=", "(", "t", "==", "0", ")", "\n", "if", "bidx", "is", "None", ":", "\n", "                    ", "dec_last_h", "=", "self", ".", "decoders", "[", "name", "]", "(", "inputs", ",", "hidden_states", ",", "dec_last_w", ",", "\n", "dec_last_h", ",", "first_turn", ",", "first_step", ")", "\n", "hiddens", ".", "append", "(", "dec_last_h", ")", "\n", "dec_last_w", "=", "inputs", "[", "name", "]", "[", ":", ",", "t", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "name", "==", "'aspn'", ",", "'only act span decoder support batch idx selection'", "\n", "dec_last_h", "=", "self", ".", "decoders", "[", "name", "]", "(", "inputs", ",", "hidden_states", ",", "dec_last_w", ",", "\n", "dec_last_h", ",", "first_turn", ",", "first_step", ",", "bidx", "=", "bidx", ")", "\n", "hiddens", ".", "append", "(", "dec_last_h", ")", "\n", "dec_last_w", "=", "inputs", "[", "'aspn_aug_batch'", "]", "[", ":", ",", "t", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "", "dec_hs", "=", "torch", ".", "cat", "(", "hiddens", ",", "dim", "=", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "# [1,B,H] ---> [B,T,H]", "\n", "if", "bidx", "is", "None", ":", "\n", "                ", "probs", "[", "name", "]", "=", "self", ".", "decoders", "[", "name", "]", ".", "get_probs", "(", "inputs", ",", "hidden_states", ",", "dec_hs", ",", "first_turn", ")", "\n", "if", "name", "!=", "'resp'", ":", "\n", "                    ", "hidden_states", "[", "name", "]", "=", "dec_hs", "\n", "", "", "else", ":", "\n", "                ", "probs", "=", "self", ".", "decoders", "[", "name", "]", ".", "get_probs", "(", "inputs", ",", "hidden_states", ",", "dec_hs", ",", "first_turn", ",", "bidx", "=", "bidx", ")", "\n", "", "return", "hidden_states", ",", "probs", "\n", "\n", "\n", "", "user_enc", ",", "user_enc_last_h", "=", "self", ".", "user_encoder", "(", "inputs", "[", "'user'", "]", ")", "\n", "usdx_enc", ",", "usdx_enc_last_h", "=", "self", ".", "usdx_encoder", "(", "inputs", "[", "'usdx'", "]", ")", "\n", "resp_enc", ",", "resp_enc_last_h", "=", "self", ".", "usdx_encoder", "(", "inputs", "[", "'pv_resp'", "]", ")", "\n", "hidden_states", "[", "'user'", "]", "=", "user_enc", "\n", "hidden_states", "[", "'usdx'", "]", "=", "usdx_enc", "\n", "hidden_states", "[", "'resp'", "]", "=", "resp_enc", "\n", "\n", "probs", "=", "{", "}", "\n", "\n", "if", "cfg", ".", "enable_dspn", ":", "\n", "            ", "dspn_enc", ",", "_", "=", "self", ".", "span_encoder", "(", "inputs", "[", "'pv_dspn'", "]", ")", "\n", "hidden_states", "[", "'dspn'", "]", "=", "dspn_enc", "\n", "hidden_states", ",", "probs", "=", "train_decode", "(", "'dspn'", ",", "usdx_enc_last_h", ",", "hidden_states", ",", "probs", ")", "\n", "\n", "", "if", "cfg", ".", "enable_bspn", ":", "\n", "            ", "bspn_enc", ",", "_", "=", "self", ".", "span_encoder", "(", "inputs", "[", "'pv_'", "+", "cfg", ".", "bspn_mode", "]", ")", "\n", "hidden_states", "[", "cfg", ".", "bspn_mode", "]", "=", "bspn_enc", "\n", "init_hidden", "=", "user_enc_last_h", "if", "cfg", ".", "bspn_mode", "==", "'bspn'", "else", "usdx_enc_last_h", "\n", "hidden_states", ",", "probs", "=", "train_decode", "(", "cfg", ".", "bspn_mode", ",", "init_hidden", ",", "hidden_states", ",", "probs", ")", "\n", "\n", "", "if", "cfg", ".", "enable_aspn", ":", "\n", "            ", "aspn_enc", ",", "_", "=", "self", ".", "span_encoder", "(", "inputs", "[", "'pv_aspn'", "]", ")", "\n", "hidden_states", "[", "'aspn'", "]", "=", "aspn_enc", "\n", "hidden_states", ",", "probs", "=", "train_decode", "(", "'aspn'", ",", "usdx_enc_last_h", ",", "hidden_states", ",", "probs", ")", "\n", "\n", "", "hidden_states", ",", "probs", "=", "train_decode", "(", "'resp'", ",", "usdx_enc_last_h", ",", "hidden_states", ",", "probs", ")", "\n", "\n", "if", "cfg", ".", "enable_dst", "and", "cfg", ".", "bspn_mode", "==", "'bsdx'", ":", "\n", "            ", "bspn_enc", ",", "_", "=", "self", ".", "span_encoder", "(", "inputs", "[", "'pv_bspn'", "]", ")", "\n", "hidden_states", "[", "'bspn'", "]", "=", "bspn_enc", "\n", "hidden_states", ",", "probs", "=", "train_decode", "(", "'bspn'", ",", "user_enc_last_h", ",", "hidden_states", ",", "probs", ")", "\n", "\n", "", "if", "cfg", ".", "enable_aspn", "and", "cfg", ".", "multi_acts_training", "and", "'aspn_aug'", "in", "inputs", ":", "\n", "            ", "probs", "[", "'aspn_aug'", "]", "=", "[", "]", "\n", "batch_size", "=", "inputs", "[", "'user'", "]", ".", "size", "(", "0", ")", "\n", "\n", "for", "b", "in", "range", "(", "len", "(", "inputs", "[", "'aspn_bidx'", "]", ")", "//", "batch_size", "+", "1", ")", ":", "\n", "                ", "bidx_batch", "=", "inputs", "[", "'aspn_bidx'", "]", "[", "b", "*", "batch_size", ":", "(", "b", "+", "1", ")", "*", "batch_size", "]", "\n", "if", "bidx_batch", ":", "\n", "                    ", "inputs", "[", "'aspn_aug_batch'", "]", "=", "inputs", "[", "'aspn_aug'", "]", "[", "b", "*", "batch_size", ":", "(", "b", "+", "1", ")", "*", "batch_size", ",", ":", "]", "\n", "_", ",", "ps", "=", "train_decode", "(", "'aspn'", ",", "usdx_enc_last_h", ",", "hidden_states", ",", "None", ",", "bidx", "=", "bidx_batch", ")", "\n", "probs", "[", "'aspn_aug'", "]", ".", "append", "(", "ps", ")", "\n", "\n", "", "", "", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.test_forward": [[1065, 1133], ["damd_net.DAMD.user_encoder", "damd_net.DAMD.usdx_encoder", "damd_net.DAMD.usdx_encoder", "damd_net.DAMD.span_encoder", "damd_net.DAMD.greedy_decode", "damd_net.DAMD.span_encoder", "damd_net.DAMD.greedy_decode", "damd_net.DAMD.span_encoder", "damd_net.DAMD.greedy_decode", "damd_net.DAMD.span_encoder", "inputs[].size", "range", "range", "damd_net.DAMD.greedy_decode", "enumerate", "damd_net.cuda_", "damd_net.DAMD.greedy_decode", "damd_net.DAMD.reader.aspn_collect.append", "damd_net.DAMD.reader.resp_collect.append", "damd_net.DAMD.reader.resp_collect.append", "decoded_nbest.cpu().numpy", "damd_net.update_input", "damd_net.DAMD.greedy_decode", "range", "damd_net.DAMD.reader.bspan_to_DBpointer", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "damd_net.DAMD.reader.resp_collect[].append", "damd_net.DAMD.reader.aspn_collect[].append", "damd_net.DAMD.beam_decode", "damd_net.DAMD.beam_decode", "damd_net.DAMD.sampling_decode", "decoded_nbest.cpu", "list", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.greedy_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.greedy_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.greedy_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.greedy_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.greedy_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.update_input", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.greedy_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_DBpointer", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.beam_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.beam_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.sampling_decode"], ["", "def", "test_forward", "(", "self", ",", "inputs", ",", "hs", ",", "first_turn", ")", ":", "\n", "        ", "user_enc", ",", "user_enc_last_h", "=", "self", ".", "user_encoder", "(", "inputs", "[", "'user'", "]", ")", "\n", "usdx_enc", ",", "usdx_enc_last_h", "=", "self", ".", "usdx_encoder", "(", "inputs", "[", "'usdx'", "]", ")", "\n", "resp_enc", ",", "resp_enc_last_h", "=", "self", ".", "usdx_encoder", "(", "inputs", "[", "'pv_resp'", "]", ")", "\n", "hs", "[", "'user'", "]", "=", "user_enc", "\n", "hs", "[", "'usdx'", "]", "=", "usdx_enc", "\n", "hs", "[", "'resp'", "]", "=", "resp_enc", "\n", "\n", "decoded", "=", "{", "}", "\n", "\n", "if", "cfg", ".", "enable_dst", "and", "cfg", ".", "bspn_mode", "==", "'bsdx'", ":", "\n", "            ", "bspn_enc", ",", "_", "=", "self", ".", "span_encoder", "(", "inputs", "[", "'pv_bspn'", "]", ")", "\n", "hs", "[", "'bspn'", "]", "=", "bspn_enc", "\n", "hs", ",", "decoded", "=", "self", ".", "greedy_decode", "(", "'bspn'", ",", "user_enc_last_h", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "\n", "", "if", "cfg", ".", "enable_dspn", ":", "\n", "            ", "dspn_enc", ",", "dspn_enc_last_h", "=", "self", ".", "span_encoder", "(", "inputs", "[", "'pv_dspn'", "]", ")", "\n", "hs", "[", "'dspn'", "]", "=", "dspn_enc", "\n", "hs", ",", "decoded", "=", "self", ".", "greedy_decode", "(", "'dspn'", ",", "usdx_enc_last_h", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "\n", "", "if", "cfg", ".", "enable_bspn", ":", "\n", "            ", "bspn_enc", ",", "bspn_enc_last_h", "=", "self", ".", "span_encoder", "(", "inputs", "[", "'pv_'", "+", "cfg", ".", "bspn_mode", "]", ")", "\n", "hs", "[", "cfg", ".", "bspn_mode", "]", "=", "bspn_enc", "\n", "init_hidden", "=", "user_enc_last_h", "if", "cfg", ".", "bspn_mode", "==", "'bspn'", "else", "usdx_enc_last_h", "\n", "hs", ",", "decoded", "=", "self", ".", "greedy_decode", "(", "cfg", ".", "bspn_mode", ",", "init_hidden", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "\n", "if", "not", "cfg", ".", "use_true_db_pointer", "and", "'bspn'", "in", "decoded", ":", "\n", "                ", "for", "bi", ",", "bspn_list", "in", "enumerate", "(", "decoded", "[", "'bspn'", "]", ")", ":", "\n", "                    ", "turn_domain", "=", "inputs", "[", "'turn_domain'", "]", "[", "bi", "]", "\n", "db_ptr", "=", "self", ".", "reader", ".", "bspan_to_DBpointer", "(", "bspn_list", ",", "turn_domain", ")", "\n", "book_ptr", "=", "'cannot be predicted, use the groud truth'", "\n", "inputs", "[", "'db_np'", "]", "[", "bi", ",", ":", "cfg", ".", "pointer_dim", "-", "2", "]", "=", "db_ptr", "\n", "", "inputs", "[", "'db'", "]", "=", "cuda_", "(", "torch", ".", "from_numpy", "(", "inputs", "[", "'db_np'", "]", ")", ".", "float", "(", ")", ")", "\n", "\n", "\n", "", "", "if", "cfg", ".", "enable_aspn", ":", "\n", "            ", "aspn_enc", ",", "aspn_enc_last_h", "=", "self", ".", "span_encoder", "(", "inputs", "[", "'pv_aspn'", "]", ")", "\n", "hs", "[", "'aspn'", "]", "=", "aspn_enc", "\n", "if", "cfg", ".", "aspn_decode_mode", "==", "'greedy'", ":", "\n", "                ", "hs", ",", "decoded", "=", "self", ".", "greedy_decode", "(", "'aspn'", ",", "usdx_enc_last_h", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "", "elif", "cfg", ".", "aspn_decode_mode", "==", "'beam'", ":", "\n", "                ", "if", "cfg", ".", "record_mode", ":", "\n", "                    ", "hs_nbest", ",", "decoded_nbest", "=", "self", ".", "beam_decode", "(", "'aspn'", ",", "usdx_enc_last_h", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "", "else", ":", "\n", "                    ", "hs", ",", "decoded", "=", "self", ".", "beam_decode", "(", "'aspn'", ",", "usdx_enc_last_h", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "", "", "elif", "'sampling'", "in", "cfg", ".", "aspn_decode_mode", ":", "\n", "                ", "hs", ",", "decoded", "=", "self", ".", "sampling_decode", "(", "'aspn'", ",", "usdx_enc_last_h", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "\n", "", "", "if", "cfg", ".", "record_mode", ":", "\n", "            ", "batch_size", "=", "inputs", "[", "'user'", "]", ".", "size", "(", "0", ")", "\n", "self", ".", "reader", ".", "aspn_collect", ",", "self", ".", "reader", ".", "resp_collect", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "self", ".", "reader", ".", "aspn_collect", ".", "append", "(", "[", "]", ")", "\n", "self", ".", "reader", ".", "resp_collect", ".", "append", "(", "[", "]", ")", "\n", "", "for", "i", "in", "range", "(", "cfg", ".", "nbest", ")", ":", "\n", "                ", "self", ".", "reader", ".", "resp_collect", ".", "append", "(", "[", "]", ")", "\n", "wid_seqs_np", "=", "decoded_nbest", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "inputs", "[", "'aspn_np'", "]", "=", "wid_seqs_np", "[", ":", ",", "i", ",", ":", "]", "\n", "update_input", "(", "'aspn'", ",", "inputs", ")", "\n", "hs", "[", "'aspn'", "]", "=", "hs_nbest", "[", ":", ",", "i", ",", ":", ",", ":", "]", "\n", "hs", ",", "decoded", "=", "self", ".", "greedy_decode", "(", "'resp'", ",", "usdx_enc_last_h", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "                    ", "self", ".", "reader", ".", "resp_collect", "[", "b", "]", ".", "append", "(", "decoded", "[", "'resp'", "]", "[", "b", "]", ")", "\n", "self", ".", "reader", ".", "aspn_collect", "[", "b", "]", ".", "append", "(", "list", "(", "inputs", "[", "'aspn_np'", "]", "[", "b", "]", "[", ":", "]", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "hs", ",", "decoded", "=", "self", ".", "greedy_decode", "(", "'resp'", ",", "usdx_enc_last_h", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "\n", "", "return", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.addActSelection": [[1134, 1138], ["damd_net.DAMD.parameters", "damd_net.ActSelectionModel"], "methods", ["None"], ["", "def", "addActSelection", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "", "self", ".", "act_selection", "=", "ActSelectionModel", "(", "cfg", ".", "hidden_size", ",", "cfg", ".", "max_span_length", ",", "cfg", ".", "nbest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.RL_forward": [[1140, 1159], ["damd_net.DAMD.act_selection", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample", "torch.distributions.Categorical.sample.view().cpu().numpy().to_list", "range", "hiddens_batch.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "damd_net.DAMD.reader.vocab.sentence_decode", "damd_net.DAMD.reader.aspan_to_act_list", "damd_net.DAMD.reader.vocab.sentence_decode", "damd_net.DAMD.reader.aspan_to_act_list", "utils.f1_score", "torch.distributions.Categorical.sample.view().cpu().numpy", "torch.distributions.Categorical.sample.view().cpu", "torch.distributions.Categorical.sample.view"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.sentence_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.aspan_to_act_list", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.sentence_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.aspan_to_act_list", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.f1_score"], ["", "def", "RL_forward", "(", "self", ",", "inputs", ",", "decoded", ",", "hiddens_batch", ",", "decoded_batch", ")", ":", "\n", "        ", "\"\"\"[summary]\n        :param hiddens_batch: [B, nbest, T, H]\n        :param decoded_batch: [B, nbest, T]\n        \"\"\"", "\n", "batch_size", "=", "hiddens_batch", ".", "size", "(", ")", "[", "0", "]", "\n", "logprob", "=", "self", ".", "act_selection", "(", "hiddens_batch", ")", "#[B, nbest]", "\n", "dis", "=", "Categorical", "(", "torch", ".", "exp", "(", "logprob", ")", ")", "\n", "action", "=", "dis", ".", "sample", "(", ")", "\n", "index", "=", "action", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "to_list", "(", ")", "\n", "loss", "=", "0", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "ref", "=", "self", ".", "reader", ".", "vocab", ".", "sentence_decode", "(", "inputs", "[", "'aspn_np'", "]", "[", "b", "]", ",", "eos", "=", "'<eos_a>'", ")", "\n", "ref_acts", "=", "self", ".", "reader", ".", "aspan_to_act_list", "(", "ref", ")", "\n", "select", "=", "self", ".", "reader", ".", "vocab", ".", "sentence_decode", "(", "decoded", "[", "'aspn'", "]", "[", "index", "]", "[", "b", "]", ",", "eos", "=", "'<eos_a>'", ")", "\n", "select_acts", "=", "self", ".", "reader", ".", "aspan_to_act_list", "(", "select", ")", "\n", "reward", "=", "utils", ".", "f1_score", "(", "ref_acts", ",", "select_acts", ")", "\n", "loss", "+=", "reward", "*", "logprob", "[", "b", ",", "index", "]", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.greedy_decode": [[1160, 1211], ["inputs[].size", "damd_net.cuda_", "range", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.stack().cpu().numpy", "torch.stack().cpu().numpy", "torch.stack().cpu().numpy", "torch.stack().cpu().numpy", "enumerate", "dec_last_h.transpose", "damd_net.DAMD.decoders[].get_probs", "hiddens.append", "decode_idx.append", "list", "damd_net.update_input", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "cuda_.view().clone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "list().index", "range", "inputs[].size", "[].view", "damd_net.cuda_", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "int", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "cuda_.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "list", "damd_net.DAMD.squeeze", "dec_last_w[].cpu().numpy", "damd_net.DAMD.squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "dec_last_w[].cpu"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.ResponseDecoder.get_probs", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.update_input", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_"], ["", "def", "greedy_decode", "(", "self", ",", "name", ",", "init_hidden", ",", "first_turn", ",", "inputs", ",", "hidden_states", ",", "decoded", ")", ":", "\n", "        ", "max_len", "=", "cfg", ".", "max_nl_length", "if", "name", "==", "'resp'", "else", "cfg", ".", "max_span_length", "\n", "batch_size", "=", "inputs", "[", "'user'", "]", ".", "size", "(", "0", ")", "\n", "dec_last_w", "=", "cuda_", "(", "torch", ".", "ones", "(", "batch_size", ",", "1", ")", ".", "long", "(", ")", "*", "self", ".", "go_idx", "[", "name", "]", ")", "\n", "dec_last_h", "=", "(", "init_hidden", "[", "-", "1", "]", "+", "init_hidden", "[", "-", "2", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "hiddens", ",", "decode_idx", "=", "[", "]", ",", "[", "]", "\n", "for", "t", "in", "range", "(", "max_len", ")", ":", "\n", "# print('%s step %d'%(name, t))", "\n", "            ", "first_step", "=", "(", "t", "==", "0", ")", "\n", "dec_last_h", "=", "self", ".", "decoders", "[", "name", "]", "(", "inputs", ",", "hidden_states", ",", "dec_last_w", ",", "\n", "dec_last_h", ",", "first_turn", ",", "first_step", ",", "mode", "=", "'test'", ")", "\n", "dec_hs", "=", "dec_last_h", ".", "transpose", "(", "0", ",", "1", ")", "\n", "prob_turn", "=", "self", ".", "decoders", "[", "name", "]", ".", "get_probs", "(", "inputs", ",", "hidden_states", ",", "dec_hs", ",", "first_turn", ")", "#[B,1,V_oov]", "\n", "hiddens", ".", "append", "(", "dec_last_h", ")", "\n", "\n", "if", "not", "self", ".", "teacher_forcing_decode", "[", "name", "]", ":", "\n", "                ", "if", "not", "self", ".", "limited_vocab_decode", "[", "name", "]", ":", "\n", "                    ", "dec_last_w", "=", "torch", ".", "topk", "(", "prob_turn", ".", "squeeze", "(", "1", ")", ",", "1", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "                    ", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "w", "=", "int", "(", "dec_last_w", "[", "b", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "name", "==", "'aspn'", ":", "\n", "                            ", "mask", "=", "self", ".", "reader", ".", "aspn_masks_tensor", "[", "w", "]", "\n", "", "elif", "name", "==", "'bspn'", "or", "name", "==", "'bsdx'", ":", "\n", "                            ", "mask", "=", "self", ".", "reader", ".", "bspn_masks_tensor", "[", "w", "]", "\n", "", "prob_turn", "[", "b", "]", "[", "0", "]", "[", "mask", "]", "+=", "100", "\n", "", "dec_last_w", "=", "torch", ".", "topk", "(", "prob_turn", ".", "squeeze", "(", "1", ")", ",", "1", ")", "[", "1", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "t", "<", "inputs", "[", "name", "]", ".", "size", "(", "1", ")", ":", "\n", "                    ", "dec_last_w", "=", "inputs", "[", "name", "]", "[", ":", ",", "t", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "                    ", "dec_last_w", "=", "cuda_", "(", "torch", ".", "zeros", "(", "batch_size", ",", "1", ")", ".", "long", "(", ")", ")", "\n", "\n", "", "", "decode_idx", ".", "append", "(", "dec_last_w", ".", "view", "(", "-", "1", ")", ".", "clone", "(", ")", ")", "\n", "dec_last_w", "[", "dec_last_w", ">=", "self", ".", "vocab_size", "]", "=", "2", "\n", "\n", "", "hidden_states", "[", "name", "]", "=", "torch", ".", "cat", "(", "hiddens", ",", "dim", "=", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", "# [1,B,H] ---> [B,T,H]", "\n", "decoded_np", "=", "torch", ".", "stack", "(", "decode_idx", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "for", "sidx", ",", "seq", "in", "enumerate", "(", "decoded_np", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "eos", "=", "list", "(", "seq", ")", ".", "index", "(", "self", ".", "eos_idx", "[", "name", "]", ")", "\n", "decoded_np", "[", "sidx", ",", "eos", "+", "1", ":", "]", "=", "0", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "", "decoded", "[", "name", "]", "=", "[", "list", "(", "_", ")", "for", "_", "in", "decoded_np", "]", "#[B,T]", "\n", "\n", "if", "name", "!=", "'resp'", ":", "\n", "            ", "inputs", "[", "name", "+", "'_np'", "]", "=", "decoded_np", "\n", "update_input", "(", "name", ",", "inputs", ")", "\n", "\n", "", "return", "hidden_states", ",", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.beam_decode": [[1212, 1325], ["inputs[].size", "damd_net.cuda_", "range", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "dec_last_w_batch[].unsqueeze", "dec_last_h_batch[].unsqueeze", "min", "damd_net.BeamSearchNode", "queue.PriorityQueue", "queue.PriorityQueue.put", "sorted", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat().transpose.append", "torch.cat().transpose.append", "torch.cat().transpose.append", "torch.cat().transpose.append", "damd_net.DAMD.aspn_selection", "damd_net.update_input", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "queue.PriorityQueue.get", "dec_last_h_batch[].unsqueeze.transpose", "damd_net.DAMD.decoders[].get_probs", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "range", "len", "decode_idx.append", "torch.cat.append", "torch.cat.append", "damd_net.cuda_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "damd_net.cuda_", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "list", "list", "len", "endnodes.append", "damd_net.DAMD.squeeze", "[].view().clone", "[].item", "damd_net.BeamSearchNode", "queue.PriorityQueue.get", "operator.itemgetter", "decode_idx.append", "torch.cat.append", "torch.cat.append", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "damd_net.BeamSearchNode.eval", "n.wordid.item", "len", "damd_net.BeamSearchNode.eval", "queue.PriorityQueue.put", "range", "hs[].size", "torch.cat().transpose.cpu().numpy", "torch.cat().transpose.cpu().numpy", "[].view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "len", "torch.cat().transpose.cpu", "torch.cat().transpose.cpu", "len"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.aspn_selection", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.update_input", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.ResponseDecoder.get_probs", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.BeamSearchNode.eval", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.BeamSearchNode.eval"], ["", "def", "beam_decode", "(", "self", ",", "name", ",", "init_hidden", ",", "first_turn", ",", "inputs", ",", "hidden_states", ",", "decoded", ")", ":", "\n", "        ", "beam_width", "=", "self", ".", "beam_width", "\n", "nbest", "=", "self", ".", "nbest", "# how many sentence do you want to generate", "\n", "decoded_batch", ",", "hiddens_batch", "=", "[", "]", ",", "[", "]", "\n", "\n", "batch_size", "=", "inputs", "[", "'user'", "]", ".", "size", "(", "0", ")", "\n", "\n", "dec_last_w_batch", "=", "cuda_", "(", "torch", ".", "ones", "(", "batch_size", ",", "1", ")", ".", "long", "(", ")", "*", "self", ".", "go_idx", "[", "name", "]", ")", "\n", "dec_last_h_batch", "=", "(", "init_hidden", "[", "-", "1", "]", "+", "init_hidden", "[", "-", "2", "]", ")", ".", "unsqueeze", "(", "0", ")", "#[1,B,H]", "\n", "hiddens", ",", "decode_idx", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "bidx", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "dec_last_w", "=", "dec_last_w_batch", "[", "bidx", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "#[1,1]", "\n", "dec_last_h", "=", "dec_last_h_batch", "[", ":", ",", "bidx", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", "#[1,1,H]", "\n", "\n", "# Number of sentence to generate", "\n", "endnodes", "=", "[", "]", "\n", "number_required", "=", "min", "(", "(", "nbest", "+", "1", ")", ",", "nbest", "-", "len", "(", "endnodes", ")", ")", "\n", "\n", "# starting node -  hidden vector, previous node, word id, logp, length", "\n", "node", "=", "BeamSearchNode", "(", "dec_last_h", ",", "None", ",", "dec_last_w", ",", "0", ",", "1", ")", "\n", "nodes", "=", "PriorityQueue", "(", ")", "\n", "\n", "# start the queue", "\n", "nodes", ".", "put", "(", "(", "-", "node", ".", "eval", "(", "cfg", ".", "beam_diverse_param", ")", ",", "node", ")", ")", "\n", "qsize", "=", "1", "\n", "\n", "first_step", "=", "True", "\n", "# start beam search", "\n", "while", "True", ":", "\n", "# give up when decoding takes too long", "\n", "                ", "if", "qsize", ">", "2000", ":", "break", "\n", "\n", "# fetch the best node", "\n", "score", ",", "n", "=", "nodes", ".", "get", "(", ")", "\n", "dec_last_w", "=", "n", ".", "wordid", "\n", "dec_last_h", "=", "n", ".", "h", "\n", "# print(dec_last_w.size())", "\n", "# print(dec_last_h.size())", "\n", "\n", "if", "n", ".", "wordid", ".", "item", "(", ")", "==", "self", ".", "eos_idx", "[", "name", "]", "and", "n", ".", "prevNode", "!=", "None", ":", "\n", "                    ", "endnodes", ".", "append", "(", "(", "score", ",", "n", ")", ")", "\n", "# if we reached maximum # of sentences required", "\n", "if", "len", "(", "endnodes", ")", ">=", "number_required", ":", "\n", "                        ", "break", "\n", "", "else", ":", "\n", "                        ", "continue", "\n", "\n", "# decode for one step using decoder", "\n", "", "", "dec_last_h", "=", "self", ".", "decoders", "[", "name", "]", "(", "inputs", ",", "hidden_states", ",", "dec_last_w", ",", "\n", "dec_last_h", ",", "first_turn", ",", "first_step", ",", "bidx", "=", "[", "bidx", "]", ",", "mode", "=", "'test'", ")", "\n", "dec_h", "=", "dec_last_h", ".", "transpose", "(", "0", ",", "1", ")", "\n", "prob_turn", "=", "self", ".", "decoders", "[", "name", "]", ".", "get_probs", "(", "inputs", ",", "hidden_states", ",", "dec_h", ",", "first_turn", ",", "bidx", "=", "[", "bidx", "]", ")", "#[B,1,V_oov]", "\n", "\n", "# PUT HERE REAL BEAM SEARCH OF TOP", "\n", "log_probs", ",", "dec_last_ws", "=", "torch", ".", "topk", "(", "prob_turn", ".", "squeeze", "(", "1", ")", ",", "beam_width", ")", "\n", "\n", "for", "new_k", "in", "range", "(", "beam_width", ")", ":", "\n", "                    ", "rank", "=", "new_k", "\n", "decoded_t", "=", "dec_last_ws", "[", "0", "]", "[", "new_k", "]", ".", "view", "(", "1", ",", "-", "1", ")", ".", "clone", "(", ")", "\n", "log_p", "=", "log_probs", "[", "0", "]", "[", "new_k", "]", ".", "item", "(", ")", "\n", "\n", "node", "=", "BeamSearchNode", "(", "dec_last_h", ",", "n", ",", "decoded_t", ",", "n", ".", "logp", "+", "log_p", ",", "n", ".", "leng", "+", "1", ",", "rank", ")", "\n", "score", "=", "-", "node", ".", "eval", "(", "cfg", ".", "beam_diverse_param", ")", "\n", "try", ":", "\n", "                        ", "nodes", ".", "put", "(", "(", "score", ",", "node", ")", ")", "\n", "", "except", ":", "\n", "# very rarely but truely exists cases that different sequences have a same score", "\n", "# which lead to a can't-comparing exception", "\n", "                        ", "continue", "\n", "\n", "# increase qsize", "\n", "", "", "qsize", "+=", "beam_width", "-", "1", "\n", "first_step", "=", "False", "\n", "\n", "# choose nbest paths, back trace them", "\n", "", "if", "len", "(", "endnodes", ")", "<", "nbest", ":", "\n", "                ", "endnodes", "+=", "[", "nodes", ".", "get", "(", ")", "for", "_", "in", "range", "(", "nbest", "-", "len", "(", "endnodes", ")", ")", "]", "\n", "\n", "", "wid_seqs", "=", "[", "]", "\n", "hiddens", "=", "[", "]", "\n", "for", "score", ",", "n", "in", "sorted", "(", "endnodes", ",", "key", "=", "operator", ".", "itemgetter", "(", "0", ")", ")", ":", "\n", "                ", "decode_idx", ",", "hs", "=", "[", "]", ",", "[", "]", "\n", "decode_idx", ".", "append", "(", "n", ".", "wordid", ")", "\n", "hs", ".", "append", "(", "n", ".", "h", ")", "\n", "# back trace", "\n", "while", "n", ".", "prevNode", "!=", "None", ":", "\n", "                    ", "n", "=", "n", ".", "prevNode", "\n", "decode_idx", ".", "append", "(", "n", ".", "wordid", ")", "\n", "hs", ".", "append", "(", "n", ".", "h", ")", "\n", "", "zeros", "=", "cuda_", "(", "torch", ".", "zeros", "(", "1", ",", "cfg", ".", "max_span_length", "-", "len", "(", "decode_idx", ")", ")", ".", "long", "(", ")", ")", "\n", "decoded_T", "=", "torch", ".", "cat", "(", "decode_idx", "[", ":", ":", "-", "1", "]", "+", "[", "zeros", "]", ",", "dim", "=", "1", ")", "# [1,1] ---> [1,T]", "\n", "zeros", "=", "cuda_", "(", "torch", ".", "zeros", "(", "1", ",", "cfg", ".", "max_span_length", "-", "len", "(", "decode_idx", ")", ",", "hs", "[", "0", "]", ".", "size", "(", "2", ")", ")", ")", "\n", "hs", "=", "torch", ".", "cat", "(", "hs", "[", ":", ":", "-", "1", "]", "+", "[", "zeros", "]", ",", "dim", "=", "1", ")", "# [1,1,H] ---> [1,T,H]", "\n", "wid_seqs", ".", "append", "(", "decoded_T", ")", "\n", "hiddens", ".", "append", "(", "hs", ")", "# [nbest,1,H]", "\n", "\n", "", "wid_seqs", "=", "torch", ".", "stack", "(", "wid_seqs", ",", "dim", "=", "0", ")", "#[nbest, 1,T]", "\n", "hiddens", "=", "torch", ".", "stack", "(", "hiddens", ",", "dim", "=", "0", ")", "#[nbest, 1,T, H]", "\n", "decoded_batch", ".", "append", "(", "wid_seqs", ")", "\n", "hiddens_batch", ".", "append", "(", "hiddens", ")", "\n", "\n", "", "hiddens_batch", "=", "torch", ".", "cat", "(", "hiddens_batch", ",", "dim", "=", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "#[B, nbest, T, H]", "\n", "decoded_batch", "=", "torch", ".", "cat", "(", "decoded_batch", ",", "dim", "=", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "#[B, nbest, T]", "\n", "if", "cfg", ".", "record_mode", "==", "False", ":", "\n", "            ", "hidden_states", "[", "name", "]", ",", "inputs", "[", "name", "+", "'_np'", "]", "=", "self", ".", "aspn_selection", "(", "inputs", ",", "decoded", ",", "hiddens_batch", ",", "\n", "decoded_batch", ")", "\n", "update_input", "(", "name", ",", "inputs", ")", "\n", "decoded", "[", "name", "]", "=", "[", "list", "(", "_", ")", "for", "_", "in", "inputs", "[", "name", "+", "'_np'", "]", "]", "\n", "return", "hidden_states", ",", "decoded", "\n", "", "else", ":", "\n", "            ", "decoded", "[", "name", "]", "=", "[", "list", "(", "_", ")", "for", "_", "in", "decoded_batch", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", ":", ",", "cfg", ".", "nbest", "-", "1", ",", ":", "]", "]", "\n", "return", "hiddens_batch", ",", "decoded_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.sampling_decode": [[1330, 1392], ["inputs[].size", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "damd_net.DAMD.aspn_selection", "damd_net.update_input", "damd_net.cuda_", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "list", "dec_last_h.transpose", "damd_net.DAMD.decoders[].get_probs", "hiddens.append", "decode_idx.append", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.cat().transpose", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "range", "torch.gather.clone", "torch.gather.clone", "torch.stack.view().clone", "torch.stack.view().clone", "damd_net.DAMD.squeeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "damd_net.DAMD.squeeze", "range", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.stack.view", "torch.stack.view", "dec_last_w[].item", "dec_last_w[].item", "torch.gather.append", "torch.gather.append", "torch.gather.append", "torch.gather.append", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "dec_last_w[].item", "dec_last_w[].item", "damd_net.cuda_", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.aspn_selection", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.update_input", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.ResponseDecoder.get_probs", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_"], ["", "", "def", "sampling_decode", "(", "self", ",", "name", ",", "init_hidden", ",", "first_turn", ",", "inputs", ",", "hidden_states", ",", "decoded", ")", ":", "\n", "        ", "max_len", "=", "cfg", ".", "max_nl_length", "if", "name", "==", "'resp'", "else", "cfg", ".", "max_span_length", "\n", "batch_size", "=", "inputs", "[", "'user'", "]", ".", "size", "(", "0", ")", "\n", "\n", "decoded_batch", "=", "[", "]", "\n", "hiddens_batch", "=", "[", "]", "\n", "for", "s", "in", "range", "(", "cfg", ".", "nbest", ")", ":", "\n", "# print('nbest:', s)", "\n", "            ", "dec_last_w", "=", "cuda_", "(", "torch", ".", "ones", "(", "batch_size", ",", "1", ")", ".", "long", "(", ")", "*", "self", ".", "go_idx", "[", "name", "]", ")", "\n", "dec_last_h", "=", "(", "init_hidden", "[", "-", "1", "]", "+", "init_hidden", "[", "-", "2", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "hiddens", ",", "decode_idx", "=", "[", "]", ",", "[", "]", "\n", "for", "t", "in", "range", "(", "max_len", ")", ":", "\n", "# print('%s step %d'%(name, t))", "\n", "                ", "first_step", "=", "(", "t", "==", "0", ")", "\n", "dec_last_h", "=", "self", ".", "decoders", "[", "name", "]", "(", "inputs", ",", "hidden_states", ",", "dec_last_w", ",", "\n", "dec_last_h", ",", "first_turn", ",", "first_step", ",", "mode", "=", "'test'", ")", "\n", "dec_hs", "=", "dec_last_h", ".", "transpose", "(", "0", ",", "1", ")", "\n", "prob_turn", "=", "self", ".", "decoders", "[", "name", "]", ".", "get_probs", "(", "inputs", ",", "hidden_states", ",", "dec_hs", ",", "first_turn", ")", "#[B,1,V_oov]", "\n", "hiddens", ".", "append", "(", "dec_last_h", ")", "#list of [1, B, H] of length T", "\n", "\n", "if", "cfg", ".", "aspn_decode_mode", "==", "'topk_sampling'", ":", "\n", "                    ", "logprobs", ",", "topk_words", "=", "torch", ".", "topk", "(", "prob_turn", ".", "squeeze", "(", "1", ")", ",", "cfg", ".", "topk_num", ")", "\n", "widx", "=", "torch", ".", "multinomial", "(", "torch", ".", "exp", "(", "logprobs", ")", ",", "1", ",", "replacement", "=", "True", ")", "\n", "dec_curr_w", "=", "torch", ".", "gather", "(", "topk_words", ",", "1", ",", "widx", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "if", "dec_last_w", "[", "b", "]", ".", "item", "(", ")", "==", "8", "or", "dec_last_w", "[", "b", "]", ".", "item", "(", ")", "==", "0", ":", "\n", "                            ", "dec_curr_w", "[", "b", "]", "=", "0", "\n", "", "", "dec_last_w", "=", "dec_curr_w", ".", "clone", "(", ")", "\n", "", "elif", "cfg", ".", "aspn_decode_mode", "==", "'nucleur_sampling'", ":", "\n", "                    ", "logprobs", ",", "topk_words", "=", "torch", ".", "topk", "(", "prob_turn", ".", "squeeze", "(", "1", ")", ",", "55", ")", "#55 is enough for valid aspn tokens", "\n", "probs", "=", "torch", ".", "exp", "(", "logprobs", ")", "\n", "dec_curr_w", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "                        ", "for", "pnum", "in", "range", "(", "1", ",", "55", ")", ":", "\n", "                            ", "if", "torch", ".", "sum", "(", "probs", "[", "b", "]", "[", ":", "pnum", "]", ")", ">=", "cfg", ".", "nucleur_p", ":", "\n", "                                ", "break", "\n", "", "", "sample", "=", "torch", ".", "multinomial", "(", "probs", "[", "b", "]", "[", ":", "pnum", "]", ",", "1", ",", "replacement", "=", "True", ")", "\n", "if", "dec_last_w", "[", "b", "]", ".", "item", "(", ")", "==", "8", "or", "dec_last_w", "[", "b", "]", ".", "item", "(", ")", "==", "0", ":", "\n", "                            ", "dec_curr_w", ".", "append", "(", "cuda_", "(", "torch", ".", "zeros", "(", "1", ")", ".", "long", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "                            ", "dec_curr_w", ".", "append", "(", "topk_words", "[", "b", "]", "[", "sample", "]", ")", "\n", "", "", "dec_last_w", "=", "torch", ".", "stack", "(", "dec_curr_w", ",", "0", ")", "\n", "\n", "", "decode_idx", ".", "append", "(", "dec_last_w", ".", "view", "(", "-", "1", ")", ".", "clone", "(", ")", ")", "#list of [B] of length T", "\n", "dec_last_w", "[", "dec_last_w", ">=", "self", ".", "vocab_size", "]", "=", "2", "\n", "\n", "", "decoded_np", "=", "torch", ".", "stack", "(", "decode_idx", ",", "dim", "=", "1", ")", "#[B, T]", "\n", "hiddens_batch", ".", "append", "(", "torch", ".", "cat", "(", "hiddens", ",", "dim", "=", "0", ")", ".", "transpose", "(", "0", ",", "1", ")", ")", "#list of [B, T, H] of length nbest", "\n", "decoded_batch", ".", "append", "(", "decoded_np", ")", "\n", "\n", "", "hiddens_batch", "=", "torch", ".", "stack", "(", "hiddens_batch", ",", "dim", "=", "1", ")", "#[B, nbest, T, H]", "\n", "decoded_batch", "=", "torch", ".", "stack", "(", "decoded_batch", ",", "dim", "=", "1", ")", "#[B, nbest, T]", "\n", "hidden_states", "[", "name", "]", ",", "inputs", "[", "name", "+", "'_np'", "]", "=", "self", ".", "aspn_selection", "(", "inputs", ",", "decoded", ",", "hiddens_batch", ",", "\n", "decoded_batch", ")", "\n", "\n", "update_input", "(", "name", ",", "inputs", ")", "\n", "decoded", "[", "name", "]", "=", "[", "list", "(", "_", ")", "for", "_", "in", "inputs", "[", "name", "+", "'_np'", "]", "]", "\n", "# print(decoded[name][0][0:5])", "\n", "# print(decoded[name][1][0:5])", "\n", "# print(decoded[name][2][0:5])", "\n", "\n", "return", "hidden_states", ",", "decoded", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.aspn_selection": [[1393, 1431], ["inputs[].size", "decoded_batch.cpu().numpy", "range", "decoded[].append", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().cpu().numpy", "torch.stack().cpu().numpy", "torch.stack().cpu().numpy", "torch.stack().cpu().numpy", "decoded_batch.cpu", "damd_net.DAMD.reader.vocab.sentence_decode", "damd_net.DAMD.reader.aspan_to_act_list", "range", "multi_acts.append", "scores.index", "torch.stack().cpu().numpy.append", "torch.stack().cpu().numpy.append", "torch.stack.append", "torch.stack.append", "list", "damd_net.DAMD.reader.vocab.sentence_decode", "damd_net.DAMD.reader.aspan_to_act_list", "utils.f1_score", "scores.append", "max", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.sentence_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.aspan_to_act_list", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.sentence_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.aspan_to_act_list", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.f1_score"], ["", "def", "aspn_selection", "(", "self", ",", "inputs", ",", "decoded", ",", "hiddens_batch", ",", "decoded_batch", ")", ":", "\n", "        ", "\"\"\"[summary]\n        :param hiddens_batch: [B, nbest, T, H]\n        :param decoded_batch: [B, nbest, T]\n        \"\"\"", "\n", "batch_size", "=", "inputs", "[", "'user'", "]", ".", "size", "(", "0", ")", "\n", "wid_seqs_np", "=", "decoded_batch", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "#[B, nbest, T]", "\n", "decoded", "[", "'aspn'", "]", "=", "[", "]", "\n", "multi_acts", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "nbest", ")", ":", "\n", "            ", "decoded", "[", "'aspn'", "]", ".", "append", "(", "[", "list", "(", "_", ")", "for", "_", "in", "wid_seqs_np", "[", ":", ",", "i", ",", ":", "]", "]", ")", "\n", "", "if", "cfg", ".", "act_selection_scheme", "==", "'high_test_act_f1'", ":", "\n", "            ", "decode_chosen", "=", "[", "]", "\n", "hidden_chosen", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "                ", "ref", "=", "self", ".", "reader", ".", "vocab", ".", "sentence_decode", "(", "inputs", "[", "'aspn_np'", "]", "[", "b", "]", ",", "eos", "=", "'<eos_a>'", ")", "\n", "ref_acts", "=", "self", ".", "reader", ".", "aspan_to_act_list", "(", "ref", ")", "\n", "scores", "=", "[", "]", "\n", "acts", "=", "''", "\n", "for", "i", "in", "range", "(", "self", ".", "nbest", ")", ":", "\n", "                    ", "decode_str", "=", "self", ".", "reader", ".", "vocab", ".", "sentence_decode", "(", "decoded", "[", "'aspn'", "]", "[", "i", "]", "[", "b", "]", ",", "eos", "=", "'<eos_a>'", ")", "\n", "decode_str_acts", "=", "self", ".", "reader", ".", "aspan_to_act_list", "(", "decode_str", ")", "\n", "acts", "+=", "decode_str", "+", "' | '", "\n", "f1", "=", "utils", ".", "f1_score", "(", "ref_acts", ",", "decode_str_acts", ")", "\n", "# print(decode_str, f1)", "\n", "scores", ".", "append", "(", "f1", ")", "\n", "", "multi_acts", ".", "append", "(", "acts", "[", ":", "-", "3", "]", ")", "\n", "max_score_idx", "=", "scores", ".", "index", "(", "max", "(", "scores", ")", ")", "\n", "decode_chosen", ".", "append", "(", "decoded_batch", "[", "b", "]", "[", "max_score_idx", "]", ")", "\n", "hidden_chosen", ".", "append", "(", "hiddens_batch", "[", "b", "]", "[", "max_score_idx", "]", ")", "\n", "\n", "", "hidden_chosen", "=", "torch", ".", "stack", "(", "hidden_chosen", ",", "dim", "=", "0", ")", "#[B, T, H]", "\n", "decode_chosen", "=", "torch", ".", "stack", "(", "decode_chosen", ",", "dim", "=", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "#[B,T]", "\n", "self", ".", "reader", ".", "multi_acts_record", "=", "multi_acts", "#[B, T]", "\n", "", "else", ":", "\n", "            ", "hidden_chosen", "=", "hiddens_batch", "[", ":", ",", "0", ",", ":", ",", ":", "]", "#[B, nbest, T, H]", "\n", "decode_chosen", "=", "wid_seqs_np", "[", ":", ",", "0", ",", ":", "]", "\n", "", "return", "hidden_chosen", ",", "decode_chosen", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.RL_train": [[1433, 1479], ["damd_net.DAMD.user_encoder", "damd_net.DAMD.usdx_encoder", "damd_net.DAMD.usdx_encoder", "damd_net.DAMD.span_encoder", "damd_net.DAMD.greedy_decode", "damd_net.DAMD.span_encoder", "damd_net.DAMD.greedy_decode", "damd_net.DAMD.span_encoder", "damd_net.DAMD.greedy_decode", "damd_net.DAMD.span_encoder", "enumerate", "damd_net.cuda_", "damd_net.DAMD.greedy_decode", "damd_net.DAMD.reader.bspan_to_DBpointer", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "damd_net.DAMD.beam_decode", "damd_net.DAMD.sampling_decode", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.greedy_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.greedy_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.greedy_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.greedy_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_DBpointer", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.beam_decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.DAMD.sampling_decode"], ["", "def", "RL_train", "(", "self", ",", "inputs", ",", "hs", ",", "hiddens_batch", ",", "decoded_batch", ",", "first_turn", ")", ":", "\n", "        ", "\"\"\"[summary]\n        :param hiddens_batch: [B, nbest, T, H]\n        :param decoded_batch: [B, nbest, T]\n        \"\"\"", "\n", "user_enc", ",", "user_enc_last_h", "=", "self", ".", "user_encoder", "(", "inputs", "[", "'user'", "]", ")", "\n", "usdx_enc", ",", "usdx_enc_last_h", "=", "self", ".", "usdx_encoder", "(", "inputs", "[", "'usdx'", "]", ")", "\n", "resp_enc", ",", "resp_enc_last_h", "=", "self", ".", "usdx_encoder", "(", "inputs", "[", "'pv_resp'", "]", ")", "\n", "hs", "[", "'user'", "]", "=", "user_enc", "\n", "hs", "[", "'usdx'", "]", "=", "usdx_enc", "\n", "hs", "[", "'resp'", "]", "=", "resp_enc", "\n", "\n", "decoded", "=", "{", "}", "\n", "\n", "if", "cfg", ".", "enable_dst", "and", "cfg", ".", "bspn_mode", "==", "'bsdx'", ":", "\n", "            ", "bspn_enc", ",", "_", "=", "self", ".", "span_encoder", "(", "inputs", "[", "'pv_bspn'", "]", ")", "\n", "hs", "[", "'bspn'", "]", "=", "bspn_enc", "\n", "hs", ",", "decoded", "=", "self", ".", "greedy_decode", "(", "'bspn'", ",", "user_enc_last_h", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "\n", "", "if", "cfg", ".", "enable_dspn", ":", "\n", "            ", "dspn_enc", ",", "dspn_enc_last_h", "=", "self", ".", "span_encoder", "(", "inputs", "[", "'pv_dspn'", "]", ")", "\n", "hs", "[", "'dspn'", "]", "=", "dspn_enc", "\n", "hs", ",", "decoded", "=", "self", ".", "greedy_decode", "(", "'dspn'", ",", "usdx_enc_last_h", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "\n", "", "if", "cfg", ".", "enable_bspn", ":", "\n", "            ", "bspn_enc", ",", "bspn_enc_last_h", "=", "self", ".", "span_encoder", "(", "inputs", "[", "'pv_'", "+", "cfg", ".", "bspn_mode", "]", ")", "\n", "hs", "[", "cfg", ".", "bspn_mode", "]", "=", "bspn_enc", "\n", "init_hidden", "=", "user_enc_last_h", "if", "cfg", ".", "bspn_mode", "==", "'bspn'", "else", "usdx_enc_last_h", "\n", "hs", ",", "decoded", "=", "self", ".", "greedy_decode", "(", "cfg", ".", "bspn_mode", ",", "init_hidden", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "\n", "if", "not", "cfg", ".", "use_true_db_pointer", "and", "'bspn'", "in", "decoded", ":", "\n", "                ", "for", "bi", ",", "bspn_list", "in", "enumerate", "(", "decoded", "[", "'bspn'", "]", ")", ":", "\n", "                    ", "turn_domain", "=", "inputs", "[", "'turn_domain'", "]", "[", "bi", "]", "\n", "db_ptr", "=", "self", ".", "reader", ".", "bspan_to_DBpointer", "(", "bspn_list", ",", "turn_domain", ")", "\n", "book_ptr", "=", "'cannot be predicted, use the groud truth'", "\n", "inputs", "[", "'db_np'", "]", "[", "bi", ",", ":", "cfg", ".", "pointer_dim", "-", "2", "]", "=", "db_ptr", "\n", "", "inputs", "[", "'db'", "]", "=", "cuda_", "(", "torch", ".", "from_numpy", "(", "inputs", "[", "'db_np'", "]", ")", ".", "float", "(", ")", ")", "\n", "\n", "", "aspn_enc", ",", "aspn_enc_last_h", "=", "self", ".", "span_encoder", "(", "inputs", "[", "'pv_aspn'", "]", ")", "\n", "hs", "[", "'aspn'", "]", "=", "aspn_enc", "\n", "if", "cfg", ".", "aspn_decode_mode", "==", "'greedy'", ":", "\n", "                ", "hs", ",", "decoded", "=", "self", ".", "greedy_decode", "(", "'aspn'", ",", "usdx_enc_last_h", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "", "elif", "cfg", ".", "aspn_decode_mode", "==", "'beam'", ":", "\n", "                ", "hs", ",", "decoded", "=", "self", ".", "beam_decode", "(", "'aspn'", ",", "usdx_enc_last_h", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "", "elif", "'sampling'", "in", "cfg", ".", "aspn_decode_mode", ":", "\n", "                ", "hs", ",", "decoded", "=", "self", ".", "sampling_decode", "(", "'aspn'", ",", "usdx_enc_last_h", ",", "first_turn", ",", "inputs", ",", "hs", ",", "decoded", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.BeamSearchNode.__init__": [[1491, 1505], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "hiddenstate", ",", "previousNode", ",", "wordId", ",", "logProb", ",", "length", ",", "rank", "=", "None", ")", ":", "\n", "        ", "'''\n        :param hiddenstate:\n        :param previousNode:\n        :param wordId:\n        :param logProb:\n        :param length:\n        '''", "\n", "self", ".", "h", "=", "hiddenstate", "\n", "self", ".", "prevNode", "=", "previousNode", "\n", "self", ".", "wordid", "=", "wordId", "\n", "self", ".", "logp", "=", "logProb", "\n", "self", ".", "leng", "=", "length", "\n", "self", ".", "rank", "=", "rank", "if", "rank", "is", "not", "None", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.BeamSearchNode.__lt__": [[1506, 1508], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "rank", "<", "other", ".", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.BeamSearchNode.eval": [[1509, 1513], ["float"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "alpha", "=", "0", ")", ":", "\n", "        ", "reward", "=", "self", ".", "rank", "\n", "# Add here a function for shaping a reward", "\n", "return", "self", ".", "logp", "/", "float", "(", "self", ".", "leng", "-", "1", "+", "1e-6", ")", "-", "alpha", "*", "reward", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.BeamSearchNode.print_node": [[1514, 1521], ["str", "print", "damd_net.BeamSearchNode.wordid_oov.item", "str", "torch.nn.wordid_oov.item", "torch.nn.wordid_oov.item"], "methods", ["None"], ["", "def", "print_node", "(", "self", ")", ":", "\n", "        ", "string", "=", "str", "(", "self", ".", "wordid_oov", ".", "item", "(", ")", ")", "\n", "node", "=", "self", ".", "prevNode", "\n", "while", "node", "!=", "None", ":", "\n", "            ", "string", "=", "str", "(", "nn", ".", "wordid_oov", ".", "item", "(", ")", ")", "+", "','", "+", "string", "\n", "node", "=", "node", ".", "prevNode", "\n", "", "print", "(", "string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_": [[14, 17], ["var.cuda"], "function", ["None"], ["def", "cuda_", "(", "var", ")", ":", "\n", "# cfg.cuda_device[0]", "\n", "    ", "return", "var", ".", "cuda", "(", ")", "if", "cfg", ".", "cuda", "else", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.init_gru": [[19, 28], ["gru.apply", "range", "isinstance", "isinstance", "m.reset_parameters", "hh.size", "torch.nn.init.orthogonal_", "torch.nn.init.orthogonal_"], "function", ["None"], ["", "def", "init_gru", "(", "gru", ")", ":", "\n", "    ", "def", "weight_reset", "(", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "m", ".", "reset_parameters", "(", ")", "\n", "", "", "gru", ".", "apply", "(", "weight_reset", ")", "\n", "# gru.reset_parameters()", "\n", "for", "_", ",", "hh", ",", "_", ",", "_", "in", "gru", ".", "all_weights", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "hh", ".", "size", "(", "0", ")", ",", "gru", ".", "hidden_size", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "orthogonal_", "(", "hh", "[", "i", ":", "i", "+", "gru", ".", "hidden_size", "]", ",", "gain", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.label_smoothing": [[30, 40], ["torch.no_grad", "torch.no_grad", "y_tensor.type().contiguous().view.type().contiguous().view", "torch.zeros().fill_().scatter_", "torch.zeros().fill_().scatter_", "damd_net.cuda_", "labels.new_tensor", "isinstance", "cuda_.view", "y_tensor.type().contiguous().view.type().contiguous", "torch.zeros().fill_", "torch.zeros().fill_", "y_tensor.type().contiguous().view.type", "torch.zeros", "torch.zeros", "y_tensor.type().contiguous().view.size"], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_"], ["", "", "", "def", "label_smoothing", "(", "labels", ",", "smoothing_rate", ",", "vocab_size_oov", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "confidence", "=", "1.0", "-", "smoothing_rate", "\n", "low_confidence", "=", "(", "1.0", "-", "confidence", ")", "/", "labels", ".", "new_tensor", "(", "vocab_size_oov", "-", "1", ")", "\n", "y_tensor", "=", "labels", ".", "data", "if", "isinstance", "(", "labels", ",", "Variable", ")", "else", "labels", "\n", "y_tensor", "=", "y_tensor", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "n_dims", "=", "vocab_size_oov", "\n", "y_one_hot", "=", "torch", ".", "zeros", "(", "y_tensor", ".", "size", "(", ")", "[", "0", "]", ",", "n_dims", ")", ".", "fill_", "(", "low_confidence", ")", ".", "scatter_", "(", "1", ",", "y_tensor", ",", "confidence", ")", "\n", "y_one_hot", "=", "cuda_", "(", "y_one_hot", ".", "view", "(", "*", "labels", ".", "shape", ",", "-", "1", ")", ")", "\n", "", "return", "y_one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.get_one_hot_input": [[42, 70], ["numpy.copy", "range", "damd_net.cuda_", "damd_net.get_one_hot_input.to_one_hot"], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_"], ["", "def", "get_one_hot_input", "(", "x_input_np", ")", ":", "\n", "    ", "\"\"\"\n    sparse input of\n    :param x_input_np: [B, Tenc]\n    :return: tensor: [B,Tenc, V+Tenc]\n    \"\"\"", "\n", "def", "to_one_hot", "(", "y", ",", "n_dims", "=", "None", ")", ":", "\n", "        ", "\"\"\" Take integer y (tensor or variable) with n dims and convert it to 1-hot representation with n+1 dims. \"\"\"", "\n", "y_tensor", "=", "y", ".", "data", "if", "isinstance", "(", "y", ",", "Variable", ")", "else", "y", "\n", "y_tensor", "=", "y_tensor", ".", "type", "(", "torch", ".", "LongTensor", ")", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "n_dims", "=", "n_dims", "if", "n_dims", "is", "not", "None", "else", "int", "(", "torch", ".", "max", "(", "y_tensor", ")", ")", "+", "1", "\n", "y_one_hot", "=", "torch", ".", "zeros", "(", "y_tensor", ".", "size", "(", ")", "[", "0", "]", ",", "n_dims", ")", ".", "fill_", "(", "0.", ")", ".", "scatter_", "(", "1", ",", "y_tensor", ",", "1", ")", "#1e-10", "\n", "return", "cuda_", "(", "y_one_hot", ".", "view", "(", "*", "y", ".", "shape", ",", "-", "1", ")", ")", "\n", "\n", "", "new_input_np", "=", "np", ".", "copy", "(", "x_input_np", ")", "\n", "for", "b", "in", "range", "(", "x_input_np", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "t", "in", "range", "(", "x_input_np", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "if", "x_input_np", "[", "b", "]", "[", "t", "]", "==", "2", ":", "\n", "                ", "new_input_np", "[", "b", "]", "[", "t", "]", "=", "cfg", ".", "vocab_size", "+", "t", "\n", "# x_input_ = (x_input_np==unk)*(widx_offset + cfg.vocab_size-unk) + x_input_np", "\n", "\n", "# input_np[input_np==2] = 0", "\n", "", "", "", "input_t", "=", "cuda_", "(", "torch", ".", "from_numpy", "(", "new_input_np", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", ")", "#[B, T]", "\n", "input_t_onehot", "=", "to_one_hot", "(", "input_t", ",", "n_dims", "=", "cfg", ".", "vocab_size", "+", "input_t", ".", "size", "(", ")", "[", "1", "]", ")", "#[B,T,V+T]", "\n", "input_t_onehot", "[", ":", ",", ":", ",", "0", "]", "=", "0.", "#<pad> to zero", "\n", "# print(x_input_np.shape[0])", "\n", "# return torch.Tensor(x_input_np.shape[1], x_input_np.shape[0], cfg.vocab_size + x_input_np.shape[0]).fill_(1e-10)", "\n", "return", "input_t_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.get_final_scores": [[287, 340], ["enumerate", "range", "cum_idx.insert", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax.", "torch.logsumexp.size", "torch.logsumexp.size", "torch.logsumexp.size", "cuda_().fill_", "range", "torch.logsumexp", "torch.logsumexp", "cuda_().fill_.contiguous", "torch.einsum", "torch.einsum", "score.size", "torch.cat", "torch.cat", "c_to_g_scores.append", "torch.stack", "torch.stack", "len", "damd_net.cuda_", "len", "total_score[].view", "cp_score[].view", "torch.logsumexp", "torch.logsumexp", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_"], ["", "", "def", "get_final_scores", "(", "raw_scores", ",", "word_onehot_input", ",", "input_idx_oov", ",", "vocab_size_oov", ")", ":", "\n", "    ", "\"\"\"\n    :param raw_scores: list of tensor of size [B, Tdec, V], [B, Tdec, Tenc1], [B, Tdec, Tenc1] ...\n    :param word_onehot_input: list of nparray of size [B, Tenci, V+Tenci]\n    :param input_idx_oov: list of nparray of size [B, Tenc]\n    :param vocab_size_oov:\n    :returns: tensor of size [B, Tdec, vocab_size_oov]\n    \"\"\"", "\n", "\n", "\n", "for", "idx", ",", "raw_sc", "in", "enumerate", "(", "raw_scores", ")", ":", "\n", "        ", "if", "idx", "==", "0", ":", "continue", "\n", "one_hot", "=", "word_onehot_input", "[", "idx", "-", "1", "]", "#[B, Tenc_i, V+Tenc_i]", "\n", "cps", "=", "torch", ".", "einsum", "(", "'imj,ijn->imn'", ",", "raw_sc", ",", "one_hot", ")", "#[B, Tdec, V+Tenc_i]", "\n", "# cps[cps==0] = -1e20   # zero prob -> -inf log prob", "\n", "raw_scores", "[", "idx", "]", "=", "cps", "\n", "\n", "", "cum_idx", "=", "[", "score", ".", "size", "(", "2", ")", "for", "score", "in", "raw_scores", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cum_idx", ")", "-", "1", ")", ":", "\n", "        ", "cum_idx", "[", "i", "+", "1", "]", "+=", "cum_idx", "[", "i", "]", "\n", "", "cum_idx", ".", "insert", "(", "0", ",", "0", ")", "\n", "\n", "logsoftmax", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "2", ")", "\n", "normalized_scores", "=", "logsoftmax", "(", "torch", ".", "cat", "(", "raw_scores", ",", "dim", "=", "2", ")", ")", "#[B,Tdec, V+V+Tenc1+V+Tenc2+...]", "\n", "# print(normalized_scores.size())", "\n", "\n", "# print('normalized_gen_scores:' , normalized_scores.cpu().detach().numpy()[0,:5, 0:40])", "\n", "\n", "\n", "gen_score", "=", "normalized_scores", "[", ":", ",", ":", ",", "cum_idx", "[", "0", "]", ":", "cum_idx", "[", "1", "]", "]", "# [B, Tdec, V]", "\n", "Tdec", "=", "gen_score", ".", "size", "(", "1", ")", "\n", "B", "=", "gen_score", ".", "size", "(", "0", ")", "\n", "V", "=", "gen_score", ".", "size", "(", "2", ")", "\n", "\n", "total_score", "=", "cuda_", "(", "torch", ".", "zeros", "(", "B", ",", "Tdec", ",", "vocab_size_oov", ")", ")", ".", "fill_", "(", "-", "1e20", ")", "# [B, Tdec, vocab_size_oov]", "\n", "c_to_g_scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "cum_idx", ")", "-", "1", ")", ":", "\n", "        ", "cps", "=", "normalized_scores", "[", ":", ",", ":", ",", "cum_idx", "[", "i", "]", ":", "cum_idx", "[", "i", "+", "1", "]", "]", "#[B, Tdec, V+Tenc_i]", "\n", "# print('normalized_cp_scores:' , cps.cpu().detach().numpy()[0,:5, 0:40])", "\n", "c_to_g_scores", ".", "append", "(", "cps", "[", ":", ",", ":", ",", ":", "V", "]", ")", "\n", "cp_score", "=", "cps", "[", ":", ",", ":", ",", "V", ":", "]", "\n", "avail_copy_idx", "=", "(", "input_idx_oov", "[", "i", "-", "1", "]", ">=", "V", ")", ".", "nonzero", "(", ")", "\n", "# print(len(copy_idx))", "\n", "for", "idx", "in", "avail_copy_idx", ":", "\n", "            ", "b", ",", "t", "=", "idx", "[", "0", "]", ",", "idx", "[", "1", "]", "\n", "ts", "=", "total_score", "[", "b", ",", ":", ",", "input_idx_oov", "[", "i", "-", "1", "]", "[", "b", ",", "t", "]", "]", ".", "view", "(", "Tdec", ",", "1", ")", "\n", "cs", "=", "cp_score", "[", "b", ",", ":", ",", "t", "]", ".", "view", "(", "Tdec", ",", "1", ")", "\n", "total_score", "[", "b", ",", ":", ",", "input_idx_oov", "[", "i", "-", "1", "]", "[", "b", ",", "t", "]", "]", "=", "torch", ".", "logsumexp", "(", "torch", ".", "cat", "(", "[", "ts", ",", "cs", "]", ",", "1", ")", ",", "1", ")", "\n", "\n", "", "", "gen_score", "=", "torch", ".", "logsumexp", "(", "torch", ".", "stack", "(", "[", "gen_score", "]", "+", "c_to_g_scores", ",", "3", ")", ",", "3", ")", "\n", "total_score", "[", ":", ",", ":", ",", ":", "V", "]", "=", "gen_score", "\n", "# print('total_score:' , total_score.cpu().detach().numpy()[0,:3, 0:40])", "\n", "return", "total_score", ".", "contiguous", "(", ")", "#[B, Tdec, vocab_size_oov]", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.update_input": [[1482, 1488], ["copy.deepcopy", "damd_net.get_one_hot_input", "damd_net.cuda_", "damd_net.cuda_", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.get_one_hot_input", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.damd_net.cuda_"], ["", "", "", "", "def", "update_input", "(", "name", ",", "inputs", ")", ":", "\n", "    ", "inputs", "[", "name", "+", "'_unk_np'", "]", "=", "copy", ".", "deepcopy", "(", "inputs", "[", "name", "+", "'_np'", "]", ")", "\n", "inputs", "[", "name", "+", "'_unk_np'", "]", "[", "inputs", "[", "name", "+", "'_unk_np'", "]", ">=", "cfg", ".", "vocab_size", "]", "=", "2", "# <unk>", "\n", "inputs", "[", "name", "+", "'_onehot'", "]", "=", "get_one_hot_input", "(", "inputs", "[", "name", "+", "'_unk_np'", "]", ")", "\n", "inputs", "[", "name", "]", "=", "cuda_", "(", "torch", ".", "from_numpy", "(", "inputs", "[", "name", "+", "'_unk_np'", "]", ")", ".", "long", "(", ")", ")", "\n", "inputs", "[", "name", "+", "'_nounk'", "]", "=", "cuda_", "(", "torch", ".", "from_numpy", "(", "inputs", "[", "name", "+", "'_np'", "]", ")", ".", "long", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess.DataPreprocessor.__init__": [[104, 123], ["spacy.load", "db_ops.MultiWozDB", "zipfile.ZipFile", "json.loads", "json.loads", "utils.Vocab", "zipfile.ZipFile.open().read().lower", "open().read", "os.path.exists", "preprocess.DataPreprocessor.get_delex_valdict", "json.loads", "json.loads", "json.loads", "open().read", "open().read", "open().read", "zipfile.ZipFile.open().read", "open", "open", "open", "open", "zipfile.ZipFile.open", "data_path.split"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.get_delex_valdict"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "nlp", "=", "spacy", ".", "load", "(", "'en_core_web_sm'", ")", "\n", "self", ".", "db", "=", "MultiWozDB", "(", "cfg", ".", "dbs", ")", "# load all processed dbs", "\n", "data_path", "=", "'data/multi-woz/annotated_user_da_with_span_full.json'", "\n", "archive", "=", "zipfile", ".", "ZipFile", "(", "data_path", "+", "'.zip'", ",", "'r'", ")", "\n", "self", ".", "convlab_data", "=", "json", ".", "loads", "(", "archive", ".", "open", "(", "data_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "'r'", ")", ".", "read", "(", ")", ".", "lower", "(", ")", ")", "\n", "self", ".", "delex_sg_valdict_path", "=", "'data/multi-woz-processed/delex_single_valdict.json'", "\n", "self", ".", "delex_mt_valdict_path", "=", "'data/multi-woz-processed/delex_multi_valdict.json'", "\n", "self", ".", "ambiguous_val_path", "=", "'data/multi-woz-processed/ambiguous_values.json'", "\n", "self", ".", "delex_refs_path", "=", "'data/multi-woz-processed/reference_no.json'", "\n", "self", ".", "delex_refs", "=", "json", ".", "loads", "(", "open", "(", "self", ".", "delex_refs_path", ",", "'r'", ")", ".", "read", "(", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "delex_sg_valdict_path", ")", ":", "\n", "            ", "self", ".", "delex_sg_valdict", ",", "self", ".", "delex_mt_valdict", ",", "self", ".", "ambiguous_vals", "=", "self", ".", "get_delex_valdict", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "delex_sg_valdict", "=", "json", ".", "loads", "(", "open", "(", "self", ".", "delex_sg_valdict_path", ",", "'r'", ")", ".", "read", "(", ")", ")", "\n", "self", ".", "delex_mt_valdict", "=", "json", ".", "loads", "(", "open", "(", "self", ".", "delex_mt_valdict_path", ",", "'r'", ")", ".", "read", "(", ")", ")", "\n", "self", ".", "ambiguous_vals", "=", "json", ".", "loads", "(", "open", "(", "self", ".", "ambiguous_val_path", ",", "'r'", ")", ".", "read", "(", ")", ")", "\n", "\n", "", "self", ".", "vocab", "=", "utils", ".", "Vocab", "(", "cfg", ".", "vocab_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess.DataPreprocessor.delex_by_annotation": [[125, 146], ["dial_turn[].split", "u_delex.replace.replace.replace", "u_delex.replace.replace.replace", "u_delex.replace.replace.replace", "u_delex.replace.replace.replace", "ontology.da_abbr_to_slot_name.get", "range"], "methods", ["None"], ["", "def", "delex_by_annotation", "(", "self", ",", "dial_turn", ")", ":", "\n", "        ", "u", "=", "dial_turn", "[", "'text'", "]", ".", "split", "(", ")", "\n", "span", "=", "dial_turn", "[", "'span_info'", "]", "\n", "for", "s", "in", "span", ":", "\n", "            ", "slot", "=", "s", "[", "1", "]", "\n", "if", "slot", "==", "'open'", ":", "\n", "                ", "continue", "\n", "", "if", "ontology", ".", "da_abbr_to_slot_name", ".", "get", "(", "slot", ")", ":", "\n", "                ", "slot", "=", "ontology", ".", "da_abbr_to_slot_name", "[", "slot", "]", "\n", "", "for", "idx", "in", "range", "(", "s", "[", "3", "]", ",", "s", "[", "4", "]", "+", "1", ")", ":", "\n", "                ", "u", "[", "idx", "]", "=", "''", "\n", "", "try", ":", "\n", "                ", "u", "[", "s", "[", "3", "]", "]", "=", "'[value_'", "+", "slot", "+", "']'", "\n", "", "except", ":", "\n", "                ", "u", "[", "5", "]", "=", "'[value_'", "+", "slot", "+", "']'", "\n", "", "", "u_delex", "=", "' '", ".", "join", "(", "[", "t", "for", "t", "in", "u", "if", "t", "is", "not", "''", "]", ")", "\n", "u_delex", "=", "u_delex", ".", "replace", "(", "'[value_address] , [value_address] , [value_address]'", ",", "'[value_address]'", ")", "\n", "u_delex", "=", "u_delex", ".", "replace", "(", "'[value_address] , [value_address]'", ",", "'[value_address]'", ")", "\n", "u_delex", "=", "u_delex", ".", "replace", "(", "'[value_name] [value_name]'", ",", "'[value_name]'", ")", "\n", "u_delex", "=", "u_delex", ".", "replace", "(", "'[value_name]([value_phone] )'", ",", "'[value_name] ( [value_phone] )'", ")", "\n", "return", "u_delex", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess.DataPreprocessor.delex_by_valdict": [[148, 185], ["clean_dataset.clean_text", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "preprocess.DataPreprocessor.delex_mt_valdict.items", "preprocess.DataPreprocessor.delex_sg_valdict.items", "re.sub.replace", "re.sub.replace", "re.sub.split", "enumerate", "re.sub.find", "text[].split", "re.sub", "re.sub"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_text"], ["", "def", "delex_by_valdict", "(", "self", ",", "text", ")", ":", "\n", "        ", "text", "=", "clean_text", "(", "text", ")", "\n", "\n", "text", "=", "re", ".", "sub", "(", "r'\\d{5}\\s?\\d{5,7}'", ",", "'[value_phone]'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\d[\\s-]stars?'", ",", "'[value_stars]'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\$\\d+|\\$?\\d+.?(\\d+)?\\s(pounds?|gbps?)'", ",", "'[value_price]'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'tr[\\d]{4}'", ",", "'[value_id]'", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'([a-z]{1}[\\. ]?[a-z]{1}[\\. ]?\\d{1,2}[, ]+\\d{1}[\\. ]?[a-z]{1}[\\. ]?[a-z]{1}|[a-z]{2}\\d{2}[a-z]{2})'", ",", "'[value_postcode]'", ",", "text", ")", "\n", "\n", "for", "value", ",", "slot", "in", "self", ".", "delex_mt_valdict", ".", "items", "(", ")", ":", "\n", "            ", "text", "=", "text", ".", "replace", "(", "value", ",", "'[value_%s]'", "%", "slot", ")", "\n", "\n", "", "for", "value", ",", "slot", "in", "self", ".", "delex_sg_valdict", ".", "items", "(", ")", ":", "\n", "            ", "tokens", "=", "text", ".", "split", "(", ")", "\n", "for", "idx", ",", "tk", "in", "enumerate", "(", "tokens", ")", ":", "\n", "                ", "if", "tk", "==", "value", ":", "\n", "                    ", "tokens", "[", "idx", "]", "=", "'[value_%s]'", "%", "slot", "\n", "", "", "text", "=", "' '", ".", "join", "(", "tokens", ")", "\n", "\n", "", "for", "ambg_ent", "in", "self", ".", "ambiguous_vals", ":", "\n", "            ", "start_idx", "=", "text", ".", "find", "(", "' '", "+", "ambg_ent", ")", "# ely is a place, but appears in words like moderately", "\n", "if", "start_idx", "==", "-", "1", ":", "\n", "                ", "continue", "\n", "", "front_words", "=", "text", "[", ":", "start_idx", "]", ".", "split", "(", ")", "\n", "ent_type", "=", "'time'", "if", "':'", "in", "ambg_ent", "else", "'place'", "\n", "\n", "for", "fw", "in", "front_words", "[", ":", ":", "-", "1", "]", ":", "\n", "                ", "if", "fw", "in", "[", "'arrive'", ",", "'arrives'", ",", "'arrived'", ",", "'arriving'", ",", "'arrival'", ",", "'destination'", ",", "'there'", ",", "'reach'", ",", "'to'", ",", "'by'", ",", "'before'", "]", ":", "\n", "                    ", "slot", "=", "'[value_arrive]'", "if", "ent_type", "==", "'time'", "else", "'[value_destination]'", "\n", "text", "=", "re", ".", "sub", "(", "' '", "+", "ambg_ent", ",", "' '", "+", "slot", ",", "text", ")", "\n", "", "elif", "fw", "in", "[", "'leave'", ",", "'leaves'", ",", "'leaving'", ",", "'depart'", ",", "'departs'", ",", "'departing'", ",", "'departure'", ",", "\n", "'from'", ",", "'after'", ",", "'pulls'", "]", ":", "\n", "                    ", "slot", "=", "'[value_leave]'", "if", "ent_type", "==", "'time'", "else", "'[value_departure]'", "\n", "text", "=", "re", ".", "sub", "(", "' '", "+", "ambg_ent", ",", "' '", "+", "slot", ",", "text", ")", "\n", "\n", "", "", "", "text", "=", "text", ".", "replace", "(", "'[value_car] [value_car]'", ",", "'[value_car]'", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess.DataPreprocessor.get_delex_valdict": [[187, 255], ["preprocess.DataPreprocessor.db.dbs.items", "set", "list.remove", "list", "entity_value_to_slot.items", "print", "entity_value_to_slot.pop", "open", "collections.OrderedDict", "json.dump", "print", "open", "collections.OrderedDict", "json.dump", "print", "open", "json.dump", "print", "db_entry.items", "len", "sorted", "sorted", "db_entry.items", "val.split", "collections.OrderedDict.items", "collections.OrderedDict.items", "len", "len", "type", "TypeError", "clean_dataset.clean_slot_values", "list.append", "preprocess.DataPreprocessor.nlp"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values"], ["", "def", "get_delex_valdict", "(", "self", ",", ")", ":", "\n", "        ", "skip_entry_type", "=", "{", "\n", "'taxi'", ":", "[", "'taxi_phone'", "]", ",", "\n", "'police'", ":", "[", "'id'", "]", ",", "\n", "'hospital'", ":", "[", "'id'", "]", ",", "\n", "'hotel'", ":", "[", "'id'", ",", "'location'", ",", "'internet'", ",", "'parking'", ",", "'takesbookings'", ",", "'stars'", ",", "'price'", ",", "'n'", ",", "'postcode'", ",", "'phone'", "]", ",", "\n", "'attraction'", ":", "[", "'id'", ",", "'location'", ",", "'pricerange'", ",", "'price'", ",", "'openhours'", ",", "'postcode'", ",", "'phone'", "]", ",", "\n", "'train'", ":", "[", "'price'", ",", "'id'", "]", ",", "\n", "'restaurant'", ":", "[", "'id'", ",", "'location'", ",", "'introduction'", ",", "'signature'", ",", "'type'", ",", "'postcode'", ",", "'phone'", "]", ",", "\n", "}", "\n", "entity_value_to_slot", "=", "{", "}", "\n", "ambiguous_entities", "=", "[", "]", "\n", "for", "domain", ",", "db_data", "in", "self", ".", "db", ".", "dbs", ".", "items", "(", ")", ":", "\n", "            ", "print", "(", "'Processing entity values in [%s]'", "%", "domain", ")", "\n", "if", "domain", "!=", "'taxi'", ":", "\n", "                ", "for", "db_entry", "in", "db_data", ":", "\n", "                    ", "for", "slot", ",", "value", "in", "db_entry", ".", "items", "(", ")", ":", "\n", "                        ", "if", "slot", "not", "in", "skip_entry_type", "[", "domain", "]", ":", "\n", "                            ", "if", "type", "(", "value", ")", "is", "not", "str", ":", "\n", "                                ", "raise", "TypeError", "(", "\"value '%s' in domain '%s' should be rechecked\"", "%", "(", "slot", ",", "domain", ")", ")", "\n", "", "else", ":", "\n", "                                ", "slot", ",", "value", "=", "clean_slot_values", "(", "domain", ",", "slot", ",", "value", ")", "\n", "value", "=", "' '", ".", "join", "(", "[", "token", ".", "text", "for", "token", "in", "self", ".", "nlp", "(", "value", ")", "]", ")", ".", "strip", "(", ")", "\n", "if", "value", "in", "entity_value_to_slot", "and", "entity_value_to_slot", "[", "value", "]", "!=", "slot", ":", "\n", "# print(value, \": \",entity_value_to_slot[value], slot)", "\n", "                                    ", "ambiguous_entities", ".", "append", "(", "value", ")", "\n", "", "entity_value_to_slot", "[", "value", "]", "=", "slot", "\n", "", "", "", "", "", "else", ":", "# taxi db specific", "\n", "                ", "db_entry", "=", "db_data", "[", "0", "]", "\n", "for", "slot", ",", "ent_list", "in", "db_entry", ".", "items", "(", ")", ":", "\n", "                    ", "if", "slot", "not", "in", "skip_entry_type", "[", "domain", "]", ":", "\n", "                        ", "for", "ent", "in", "ent_list", ":", "\n", "                            ", "entity_value_to_slot", "[", "ent", "]", "=", "'car'", "\n", "", "", "", "", "", "ambiguous_entities", "=", "set", "(", "ambiguous_entities", ")", "\n", "ambiguous_entities", ".", "remove", "(", "'cambridge'", ")", "\n", "ambiguous_entities", "=", "list", "(", "ambiguous_entities", ")", "\n", "for", "amb_ent", "in", "ambiguous_entities", ":", "# departure or destination? arrive time or leave time?", "\n", "            ", "entity_value_to_slot", ".", "pop", "(", "amb_ent", ")", "\n", "", "entity_value_to_slot", "[", "'parkside'", "]", "=", "'address'", "\n", "entity_value_to_slot", "[", "'parkside, cambridge'", "]", "=", "'address'", "\n", "entity_value_to_slot", "[", "'cambridge belfry'", "]", "=", "'name'", "\n", "entity_value_to_slot", "[", "'hills road'", "]", "=", "'address'", "\n", "entity_value_to_slot", "[", "'hills rd'", "]", "=", "'address'", "\n", "entity_value_to_slot", "[", "'Parkside Police Station'", "]", "=", "'name'", "\n", "\n", "single_token_values", "=", "{", "}", "\n", "multi_token_values", "=", "{", "}", "\n", "for", "val", ",", "slt", "in", "entity_value_to_slot", ".", "items", "(", ")", ":", "\n", "            ", "if", "val", "in", "[", "'cambridge'", "]", ":", "\n", "                ", "continue", "\n", "", "if", "len", "(", "val", ".", "split", "(", ")", ")", ">", "1", ":", "\n", "                ", "multi_token_values", "[", "val", "]", "=", "slt", "\n", "", "else", ":", "\n", "                ", "single_token_values", "[", "val", "]", "=", "slt", "\n", "\n", "", "", "with", "open", "(", "self", ".", "delex_sg_valdict_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "single_token_values", "=", "OrderedDict", "(", "sorted", "(", "single_token_values", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "len", "(", "kv", "[", "0", "]", ")", ",", "reverse", "=", "True", ")", ")", "\n", "json", ".", "dump", "(", "single_token_values", ",", "f", ",", "indent", "=", "2", ")", "\n", "print", "(", "'single delex value dict saved!'", ")", "\n", "", "with", "open", "(", "self", ".", "delex_mt_valdict_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "multi_token_values", "=", "OrderedDict", "(", "sorted", "(", "multi_token_values", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "len", "(", "kv", "[", "0", "]", ")", ",", "reverse", "=", "True", ")", ")", "\n", "json", ".", "dump", "(", "multi_token_values", ",", "f", ",", "indent", "=", "2", ")", "\n", "print", "(", "'multi delex value dict saved!'", ")", "\n", "", "with", "open", "(", "self", ".", "ambiguous_val_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "ambiguous_entities", ",", "f", ",", "indent", "=", "2", ")", "\n", "print", "(", "'ambiguous value dict saved!'", ")", "\n", "\n", "", "return", "single_token_values", ",", "multi_token_values", ",", "ambiguous_entities", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess.DataPreprocessor.preprocess_main": [[257, 474], ["tqdm.tqdm.tqdm", "preprocess.DataPreprocessor.vocab.construct", "preprocess.DataPreprocessor.vocab.save_vocab", "list", "raw_dial[].items", "list", "collections.OrderedDict", "enumerate", "open", "json.dump", "open", "json.dump", "preprocess.DataPreprocessor.convlab_data.items", "set", "g.get", "collections.OrderedDict.items", "set", "list", "dial_turn[].items", "copy.copy", "sys_act_dict.items", "preprocess.DataPreprocessor.db.get_match_num", "preprocess.DataPreprocessor.db.addDBPointer", "preprocess.DataPreprocessor.db.addBookingPointer", "str", "len", "copy.deepcopy", "copy.deepcopy", "enumerate", "dial_domains.append", "clean_dataset.clean_text().split", "clean_dataset.clean_text", "preprocess.DataPreprocessor.delex_by_valdict", "clean_dataset.clean_text", "preprocess.DataPreprocessor.delex_by_valdict", "info_sv.items", "book_sv.items", "act.split", "list.add", "list.remove", "list.remove", "turn_domain.remove", "len", "act.split", "sys_act.extend", "acts.items", "dial[].append", "single_turn[].split", "ontology.normlize_slot_names.get", "preprocess.DataPreprocessor.delex_by_annotation", "preprocess.DataPreprocessor.delex_by_annotation", "print", "collections.OrderedDict.get", "collections.OrderedDict", "clean_dataset.clean_slot_values", "clean_dataset.clean_slot_values", "constraints.append", "cons_delex.append", "info_slots.items", "len", "len", "turn_domain.append", "len", "booking_act_map.get", "add_to_last_collect.append", "len", "len", "str", "preprocess.DataPreprocessor.vocab.add_word", "list.append", "clean_dataset.clean_text", "len", "len", "constraints.append", "constraints.extend", "cons_delex.append", "turn_dom_bs.append", "len", "ontology.da_abbr_to_slot_name.get", "add_p.append", "[].append", "single_turn[].replace", "v.split", "v.split", "value.split", "turn_dom_bs.append", "single_turn[].split", "single_turn[].split", "t.startswith", "t.endswith", "preprocess.DataPreprocessor.vocab.has_word", "preprocess.DataPreprocessor.vocab.add_word", "t.index", "t.index", "preprocess.DataPreprocessor.nlp", "preprocess.DataPreprocessor.nlp"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.construct", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.save_vocab", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.get_match_num", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.addDBPointer", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.addBookingPointer", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_text", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.delex_by_valdict", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_text", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.delex_by_valdict", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.delex_by_annotation", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.delex_by_annotation", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.add_word", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_text", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.has_word", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.add_word"], ["", "def", "preprocess_main", "(", "self", ",", "save_path", "=", "None", ",", "is_test", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "data", "=", "{", "}", "\n", "count", "=", "0", "\n", "self", ".", "unique_da", "=", "{", "}", "\n", "ordered_sysact_dict", "=", "{", "}", "\n", "for", "fn", ",", "raw_dial", "in", "tqdm", "(", "list", "(", "self", ".", "convlab_data", ".", "items", "(", ")", ")", ")", ":", "\n", "            ", "count", "+=", "1", "\n", "# if count == 100:", "\n", "#     break", "\n", "\n", "compressed_goal", "=", "{", "}", "# for every dialog, keep track the goal, domains, requests", "\n", "dial_domains", ",", "dial_reqs", "=", "[", "]", ",", "[", "]", "\n", "for", "dom", ",", "g", "in", "raw_dial", "[", "'goal'", "]", ".", "items", "(", ")", ":", "\n", "                ", "if", "dom", "!=", "'topic'", "and", "dom", "!=", "'message'", "and", "g", ":", "\n", "                    ", "if", "g", ".", "get", "(", "'reqt'", ")", ":", "# request info. eg. postcode/address/phone", "\n", "                        ", "for", "i", ",", "req_slot", "in", "enumerate", "(", "g", "[", "'reqt'", "]", ")", ":", "# normalize request slots", "\n", "                            ", "if", "ontology", ".", "normlize_slot_names", ".", "get", "(", "req_slot", ")", ":", "\n", "                                ", "g", "[", "'reqt'", "]", "[", "i", "]", "=", "ontology", ".", "normlize_slot_names", "[", "req_slot", "]", "\n", "dial_reqs", ".", "append", "(", "g", "[", "'reqt'", "]", "[", "i", "]", ")", "\n", "", "", "", "compressed_goal", "[", "dom", "]", "=", "g", "\n", "if", "dom", "in", "ontology", ".", "all_domains", ":", "\n", "                        ", "dial_domains", ".", "append", "(", "dom", ")", "\n", "\n", "", "", "", "dial_reqs", "=", "list", "(", "set", "(", "dial_reqs", ")", ")", "\n", "\n", "dial", "=", "{", "'goal'", ":", "compressed_goal", ",", "'log'", ":", "[", "]", "}", "\n", "single_turn", "=", "{", "}", "\n", "constraint_dict", "=", "OrderedDict", "(", ")", "\n", "prev_constraint_dict", "=", "{", "}", "\n", "prev_turn_domain", "=", "[", "'general'", "]", "\n", "ordered_sysact_dict", "[", "fn", "]", "=", "{", "}", "\n", "\n", "for", "turn_num", ",", "dial_turn", "in", "enumerate", "(", "raw_dial", "[", "'log'", "]", ")", ":", "\n", "# for user turn, have text", "\n", "# sys turn: text, belief states(metadata), dialog_act, span_info", "\n", "                ", "dial_state", "=", "dial_turn", "[", "'metadata'", "]", "\n", "if", "not", "dial_state", ":", "# user", "\n", "# delexicalize user utterance, either by annotation or by val_dict", "\n", "                    ", "u", "=", "' '", ".", "join", "(", "clean_text", "(", "dial_turn", "[", "'text'", "]", ")", ".", "split", "(", ")", ")", "\n", "if", "dial_turn", "[", "'span_info'", "]", ":", "\n", "                        ", "u_delex", "=", "clean_text", "(", "self", ".", "delex_by_annotation", "(", "dial_turn", ")", ")", "\n", "", "else", ":", "\n", "                        ", "u_delex", "=", "self", ".", "delex_by_valdict", "(", "dial_turn", "[", "'text'", "]", ")", "\n", "\n", "", "single_turn", "[", "'user'", "]", "=", "u", "\n", "single_turn", "[", "'user_delex'", "]", "=", "u_delex", "\n", "\n", "", "else", ":", "# system", "\n", "# delexicalize system response, either by annotation or by val_dict", "\n", "                    ", "if", "dial_turn", "[", "'span_info'", "]", ":", "\n", "                        ", "s_delex", "=", "clean_text", "(", "self", ".", "delex_by_annotation", "(", "dial_turn", ")", ")", "\n", "", "else", ":", "\n", "                        ", "if", "not", "dial_turn", "[", "'text'", "]", ":", "\n", "                            ", "print", "(", "fn", ")", "\n", "", "s_delex", "=", "self", ".", "delex_by_valdict", "(", "dial_turn", "[", "'text'", "]", ")", "\n", "", "single_turn", "[", "'resp'", "]", "=", "s_delex", "\n", "\n", "# get belief state, semi=informable/book=requestable, put into constraint_dict", "\n", "for", "domain", "in", "dial_domains", ":", "\n", "                        ", "if", "not", "constraint_dict", ".", "get", "(", "domain", ")", ":", "\n", "                            ", "constraint_dict", "[", "domain", "]", "=", "OrderedDict", "(", ")", "\n", "", "info_sv", "=", "dial_state", "[", "domain", "]", "[", "'semi'", "]", "\n", "for", "s", ",", "v", "in", "info_sv", ".", "items", "(", ")", ":", "\n", "                            ", "s", ",", "v", "=", "clean_slot_values", "(", "domain", ",", "s", ",", "v", ")", "\n", "if", "len", "(", "v", ".", "split", "(", ")", ")", ">", "1", ":", "\n", "                                ", "v", "=", "' '", ".", "join", "(", "[", "token", ".", "text", "for", "token", "in", "self", ".", "nlp", "(", "v", ")", "]", ")", ".", "strip", "(", ")", "\n", "", "if", "v", "!=", "''", ":", "\n", "                                ", "constraint_dict", "[", "domain", "]", "[", "s", "]", "=", "v", "\n", "", "", "book_sv", "=", "dial_state", "[", "domain", "]", "[", "'book'", "]", "\n", "for", "s", ",", "v", "in", "book_sv", ".", "items", "(", ")", ":", "\n", "                            ", "if", "s", "==", "'booked'", ":", "\n", "                                ", "continue", "\n", "", "s", ",", "v", "=", "clean_slot_values", "(", "domain", ",", "s", ",", "v", ")", "\n", "if", "len", "(", "v", ".", "split", "(", ")", ")", ">", "1", ":", "\n", "                                ", "v", "=", "' '", ".", "join", "(", "[", "token", ".", "text", "for", "token", "in", "self", ".", "nlp", "(", "v", ")", "]", ")", ".", "strip", "(", ")", "\n", "", "if", "v", "!=", "''", ":", "\n", "                                ", "constraint_dict", "[", "domain", "]", "[", "s", "]", "=", "v", "\n", "\n", "", "", "", "constraints", "=", "[", "]", "# list in format of [domain] slot value", "\n", "cons_delex", "=", "[", "]", "\n", "turn_dom_bs", "=", "[", "]", "\n", "for", "domain", ",", "info_slots", "in", "constraint_dict", ".", "items", "(", ")", ":", "\n", "                        ", "if", "info_slots", ":", "\n", "                            ", "constraints", ".", "append", "(", "'['", "+", "domain", "+", "']'", ")", "\n", "cons_delex", ".", "append", "(", "'['", "+", "domain", "+", "']'", ")", "\n", "for", "slot", ",", "value", "in", "info_slots", ".", "items", "(", ")", ":", "\n", "                                ", "constraints", ".", "append", "(", "slot", ")", "\n", "constraints", ".", "extend", "(", "value", ".", "split", "(", ")", ")", "\n", "cons_delex", ".", "append", "(", "slot", ")", "\n", "", "if", "domain", "not", "in", "prev_constraint_dict", ":", "\n", "                                ", "turn_dom_bs", ".", "append", "(", "domain", ")", "\n", "", "elif", "prev_constraint_dict", "[", "domain", "]", "!=", "constraint_dict", "[", "domain", "]", ":", "\n", "                                ", "turn_dom_bs", ".", "append", "(", "domain", ")", "\n", "\n", "\n", "", "", "", "sys_act_dict", "=", "{", "}", "\n", "turn_dom_da", "=", "set", "(", ")", "\n", "for", "act", "in", "dial_turn", "[", "'dialog_act'", "]", ":", "\n", "                        ", "d", ",", "a", "=", "act", ".", "split", "(", "'-'", ")", "# split domain-act", "\n", "turn_dom_da", ".", "add", "(", "d", ")", "\n", "", "turn_dom_da", "=", "list", "(", "turn_dom_da", ")", "\n", "if", "len", "(", "turn_dom_da", ")", "!=", "1", "and", "'general'", "in", "turn_dom_da", ":", "\n", "                        ", "turn_dom_da", ".", "remove", "(", "'general'", ")", "\n", "", "if", "len", "(", "turn_dom_da", ")", "!=", "1", "and", "'booking'", "in", "turn_dom_da", ":", "\n", "                        ", "turn_dom_da", ".", "remove", "(", "'booking'", ")", "\n", "\n", "# get turn domain", "\n", "", "turn_domain", "=", "turn_dom_bs", "\n", "for", "dom", "in", "turn_dom_da", ":", "\n", "                        ", "if", "dom", "!=", "'booking'", "and", "dom", "not", "in", "turn_domain", ":", "\n", "                            ", "turn_domain", ".", "append", "(", "dom", ")", "\n", "", "", "if", "not", "turn_domain", ":", "\n", "                        ", "turn_domain", "=", "prev_turn_domain", "\n", "", "if", "len", "(", "turn_domain", ")", "==", "2", "and", "'general'", "in", "turn_domain", ":", "\n", "                        ", "turn_domain", ".", "remove", "(", "'general'", ")", "\n", "", "if", "len", "(", "turn_domain", ")", "==", "2", ":", "\n", "                        ", "if", "len", "(", "prev_turn_domain", ")", "==", "1", "and", "prev_turn_domain", "[", "0", "]", "==", "turn_domain", "[", "1", "]", ":", "\n", "                            ", "turn_domain", "=", "turn_domain", "[", ":", ":", "-", "1", "]", "\n", "\n", "# get system action", "\n", "", "", "for", "dom", "in", "turn_domain", ":", "\n", "                        ", "sys_act_dict", "[", "dom", "]", "=", "{", "}", "\n", "", "add_to_last_collect", "=", "[", "]", "\n", "booking_act_map", "=", "{", "'inform'", ":", "'offerbook'", ",", "'book'", ":", "'offerbooked'", "}", "\n", "for", "act", ",", "params", "in", "dial_turn", "[", "'dialog_act'", "]", ".", "items", "(", ")", ":", "\n", "                        ", "if", "act", "==", "'general-greet'", ":", "\n", "                            ", "continue", "\n", "", "d", ",", "a", "=", "act", ".", "split", "(", "'-'", ")", "\n", "if", "d", "==", "'general'", "and", "d", "not", "in", "sys_act_dict", ":", "\n", "                            ", "sys_act_dict", "[", "d", "]", "=", "{", "}", "\n", "", "if", "d", "==", "'booking'", ":", "\n", "                            ", "d", "=", "turn_domain", "[", "0", "]", "\n", "a", "=", "booking_act_map", ".", "get", "(", "a", ",", "a", ")", "\n", "", "add_p", "=", "[", "]", "\n", "for", "param", "in", "params", ":", "\n", "                            ", "p", "=", "param", "[", "0", "]", "\n", "if", "p", "==", "'none'", ":", "\n", "                                ", "continue", "\n", "", "elif", "ontology", ".", "da_abbr_to_slot_name", ".", "get", "(", "p", ")", ":", "\n", "                                ", "p", "=", "ontology", ".", "da_abbr_to_slot_name", "[", "p", "]", "\n", "", "if", "p", "not", "in", "add_p", ":", "\n", "                                ", "add_p", ".", "append", "(", "p", ")", "\n", "", "", "add_to_last", "=", "True", "if", "a", "in", "[", "'request'", ",", "'reqmore'", ",", "'bye'", ",", "'offerbook'", "]", "else", "False", "\n", "if", "add_to_last", ":", "\n", "                            ", "add_to_last_collect", ".", "append", "(", "(", "d", ",", "a", ",", "add_p", ")", ")", "\n", "", "else", ":", "\n", "                            ", "sys_act_dict", "[", "d", "]", "[", "a", "]", "=", "add_p", "\n", "", "", "for", "d", ",", "a", ",", "add_p", "in", "add_to_last_collect", ":", "\n", "                        ", "sys_act_dict", "[", "d", "]", "[", "a", "]", "=", "add_p", "\n", "\n", "", "for", "d", "in", "copy", ".", "copy", "(", "sys_act_dict", ")", ":", "\n", "                        ", "acts", "=", "sys_act_dict", "[", "d", "]", "\n", "if", "not", "acts", ":", "\n", "                            ", "del", "sys_act_dict", "[", "d", "]", "\n", "", "if", "'inform'", "in", "acts", "and", "'offerbooked'", "in", "acts", ":", "\n", "                            ", "for", "s", "in", "sys_act_dict", "[", "d", "]", "[", "'inform'", "]", ":", "\n", "                                ", "sys_act_dict", "[", "d", "]", "[", "'offerbooked'", "]", ".", "append", "(", "s", ")", "\n", "", "del", "sys_act_dict", "[", "d", "]", "[", "'inform'", "]", "\n", "\n", "\n", "", "", "ordered_sysact_dict", "[", "fn", "]", "[", "len", "(", "dial", "[", "'log'", "]", ")", "]", "=", "sys_act_dict", "\n", "\n", "sys_act", "=", "[", "]", "\n", "if", "'general-greet'", "in", "dial_turn", "[", "'dialog_act'", "]", ":", "\n", "                        ", "sys_act", ".", "extend", "(", "[", "'[general]'", ",", "'[greet]'", "]", ")", "\n", "", "for", "d", ",", "acts", "in", "sys_act_dict", ".", "items", "(", ")", ":", "\n", "                        ", "sys_act", "+=", "[", "'['", "+", "d", "+", "']'", "]", "\n", "for", "a", ",", "slots", "in", "acts", ".", "items", "(", ")", ":", "\n", "                            ", "self", ".", "unique_da", "[", "d", "+", "'-'", "+", "a", "]", "=", "1", "\n", "sys_act", "+=", "[", "'['", "+", "a", "+", "']'", "]", "\n", "sys_act", "+=", "slots", "\n", "\n", "\n", "# get db pointers", "\n", "", "", "matnums", "=", "self", ".", "db", ".", "get_match_num", "(", "constraint_dict", ")", "\n", "match_dom", "=", "turn_domain", "[", "0", "]", "if", "len", "(", "turn_domain", ")", "==", "1", "else", "turn_domain", "[", "1", "]", "\n", "match", "=", "matnums", "[", "match_dom", "]", "\n", "dbvec", "=", "self", ".", "db", ".", "addDBPointer", "(", "match_dom", ",", "match", ")", "\n", "bkvec", "=", "self", ".", "db", ".", "addBookingPointer", "(", "dial_turn", "[", "'dialog_act'", "]", ")", "\n", "\n", "single_turn", "[", "'pointer'", "]", "=", "','", ".", "join", "(", "[", "str", "(", "d", ")", "for", "d", "in", "dbvec", "+", "bkvec", "]", ")", "# 4 database pointer for domains, 2 for booking", "\n", "single_turn", "[", "'match'", "]", "=", "str", "(", "match", ")", "\n", "single_turn", "[", "'constraint'", "]", "=", "' '", ".", "join", "(", "constraints", ")", "\n", "single_turn", "[", "'cons_delex'", "]", "=", "' '", ".", "join", "(", "cons_delex", ")", "\n", "single_turn", "[", "'sys_act'", "]", "=", "' '", ".", "join", "(", "sys_act", ")", "\n", "single_turn", "[", "'turn_num'", "]", "=", "len", "(", "dial", "[", "'log'", "]", ")", "\n", "single_turn", "[", "'turn_domain'", "]", "=", "' '", ".", "join", "(", "[", "'['", "+", "d", "+", "']'", "for", "d", "in", "turn_domain", "]", ")", "\n", "\n", "prev_turn_domain", "=", "copy", ".", "deepcopy", "(", "turn_domain", ")", "\n", "prev_constraint_dict", "=", "copy", ".", "deepcopy", "(", "constraint_dict", ")", "\n", "\n", "if", "'user'", "in", "single_turn", ":", "\n", "                        ", "dial", "[", "'log'", "]", ".", "append", "(", "single_turn", ")", "\n", "for", "t", "in", "single_turn", "[", "'user'", "]", ".", "split", "(", ")", "+", "single_turn", "[", "'resp'", "]", ".", "split", "(", ")", "+", "constraints", "+", "sys_act", ":", "\n", "                            ", "self", ".", "vocab", ".", "add_word", "(", "t", ")", "\n", "", "for", "t", "in", "single_turn", "[", "'user_delex'", "]", ".", "split", "(", ")", ":", "\n", "                            ", "if", "'['", "in", "t", "and", "']'", "in", "t", "and", "not", "t", ".", "startswith", "(", "'['", ")", "and", "not", "t", ".", "endswith", "(", "']'", ")", ":", "\n", "                                ", "single_turn", "[", "'user_delex'", "]", ".", "replace", "(", "t", ",", "t", "[", "t", ".", "index", "(", "'['", ")", ":", "t", ".", "index", "(", "']'", ")", "+", "1", "]", ")", "\n", "", "elif", "not", "self", ".", "vocab", ".", "has_word", "(", "t", ")", ":", "\n", "                                ", "self", ".", "vocab", ".", "add_word", "(", "t", ")", "\n", "\n", "", "", "", "single_turn", "=", "{", "}", "\n", "\n", "\n", "", "", "data", "[", "fn", "]", "=", "dial", "\n", "# pprint(dial)", "\n", "# if count == 20:", "\n", "#     break", "\n", "", "self", ".", "vocab", ".", "construct", "(", ")", "\n", "self", ".", "vocab", ".", "save_vocab", "(", "'data/multi-woz-processed/vocab'", ")", "\n", "with", "open", "(", "'data/multi-woz-analysis/dialog_acts.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "ordered_sysact_dict", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "with", "open", "(", "'data/multi-woz-analysis/dialog_act_type.json'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "unique_da", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess.get_db_values": [[11, 81], ["spacy.load", "json.loads.items", "json.loads.items", "json.loads.items", "print", "open", "json.loads", "open", "json.loads", "bspn_word.append", "slots.items", "slots.items", "domain_slot.split", "open", "json.dump", "open", "json.dump", "f.read().lower", "f.read().lower", "ontology.normlize_slot_names.get", "ontology.normlize_slot_names.get", "bspn_word.append", "clean_dataset.clean_slot_values", "value_set_path.replace", "bspn_word.append", "[].append", "v_p.split", "f.read", "f.read", "clean_dataset.clean_slot_values", "[].append", "v_p.split", "bspn_word.append", "bspn_word.append", "spacy.load.", "spacy.load."], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values"], ["def", "get_db_values", "(", "value_set_path", ")", ":", "# value_set.json, all the domain[slot] values in datasets", "\n", "    ", "processed", "=", "{", "}", "\n", "bspn_word", "=", "[", "]", "\n", "nlp", "=", "spacy", ".", "load", "(", "'en_core_web_sm'", ")", "\n", "\n", "with", "open", "(", "value_set_path", ",", "'r'", ")", "as", "f", ":", "# read value set file in lower", "\n", "        ", "value_set", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ".", "lower", "(", ")", ")", "\n", "\n", "", "with", "open", "(", "'db/ontology.json'", ",", "'r'", ")", "as", "f", ":", "# read ontology in lower, all the domain-slot values", "\n", "        ", "otlg", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ".", "lower", "(", ")", ")", "\n", "\n", "", "for", "domain", ",", "slots", "in", "value_set", ".", "items", "(", ")", ":", "# add all informable slots to bspn_word, create lists holder for values", "\n", "        ", "processed", "[", "domain", "]", "=", "{", "}", "\n", "bspn_word", ".", "append", "(", "'['", "+", "domain", "+", "']'", ")", "\n", "for", "slot", ",", "values", "in", "slots", ".", "items", "(", ")", ":", "\n", "            ", "s_p", "=", "ontology", ".", "normlize_slot_names", ".", "get", "(", "slot", ",", "slot", ")", "\n", "if", "s_p", "in", "ontology", ".", "informable_slots", "[", "domain", "]", ":", "\n", "                ", "bspn_word", ".", "append", "(", "s_p", ")", "\n", "processed", "[", "domain", "]", "[", "s_p", "]", "=", "[", "]", "\n", "\n", "", "", "", "for", "domain", ",", "slots", "in", "value_set", ".", "items", "(", ")", ":", "# add all words of values of informable slots to bspn_word", "\n", "        ", "for", "slot", ",", "values", "in", "slots", ".", "items", "(", ")", ":", "\n", "            ", "s_p", "=", "ontology", ".", "normlize_slot_names", ".", "get", "(", "slot", ",", "slot", ")", "\n", "if", "s_p", "in", "ontology", ".", "informable_slots", "[", "domain", "]", ":", "\n", "                ", "for", "v", "in", "values", ":", "\n", "                    ", "_", ",", "v_p", "=", "clean_slot_values", "(", "domain", ",", "slot", ",", "v", ")", "\n", "v_p", "=", "' '", ".", "join", "(", "[", "token", ".", "text", "for", "token", "in", "nlp", "(", "v_p", ")", "]", ")", ".", "strip", "(", ")", "\n", "processed", "[", "domain", "]", "[", "s_p", "]", ".", "append", "(", "v_p", ")", "\n", "for", "x", "in", "v_p", ".", "split", "(", ")", ":", "\n", "                        ", "if", "x", "not", "in", "bspn_word", ":", "\n", "                            ", "bspn_word", ".", "append", "(", "x", ")", "\n", "\n", "", "", "", "", "", "", "for", "domain_slot", ",", "values", "in", "otlg", ".", "items", "(", ")", ":", "# split domain-slots to domains and slots", "\n", "        ", "domain", ",", "slot", "=", "domain_slot", ".", "split", "(", "'-'", ")", "\n", "if", "domain", "==", "'bus'", ":", "\n", "            ", "domain", "=", "'taxi'", "\n", "", "if", "slot", "==", "'price range'", ":", "\n", "            ", "slot", "=", "'pricerange'", "\n", "", "if", "slot", "==", "'book stay'", ":", "\n", "            ", "slot", "=", "'stay'", "\n", "", "if", "slot", "==", "'book day'", ":", "\n", "            ", "slot", "=", "'day'", "\n", "", "if", "slot", "==", "'book people'", ":", "\n", "            ", "slot", "=", "'people'", "\n", "", "if", "slot", "==", "'book time'", ":", "\n", "            ", "slot", "=", "'time'", "\n", "", "if", "slot", "==", "'arrive by'", ":", "\n", "            ", "slot", "=", "'arrive'", "\n", "", "if", "slot", "==", "'leave at'", ":", "\n", "            ", "slot", "=", "'leave'", "\n", "", "if", "slot", "==", "'leaveat'", ":", "\n", "            ", "slot", "=", "'leave'", "\n", "", "if", "slot", "not", "in", "processed", "[", "domain", "]", ":", "# add all slots and words of values if not already in processed and bspn_word", "\n", "            ", "processed", "[", "domain", "]", "[", "slot", "]", "=", "[", "]", "\n", "bspn_word", ".", "append", "(", "slot", ")", "\n", "", "for", "v", "in", "values", ":", "\n", "            ", "_", ",", "v_p", "=", "clean_slot_values", "(", "domain", ",", "slot", ",", "v", ")", "\n", "v_p", "=", "' '", ".", "join", "(", "[", "token", ".", "text", "for", "token", "in", "nlp", "(", "v_p", ")", "]", ")", ".", "strip", "(", ")", "\n", "if", "v_p", "not", "in", "processed", "[", "domain", "]", "[", "slot", "]", ":", "\n", "                ", "processed", "[", "domain", "]", "[", "slot", "]", ".", "append", "(", "v_p", ")", "\n", "for", "x", "in", "v_p", ".", "split", "(", ")", ":", "\n", "                    ", "if", "x", "not", "in", "bspn_word", ":", "\n", "                        ", "bspn_word", ".", "append", "(", "x", ")", "\n", "\n", "", "", "", "", "", "with", "open", "(", "value_set_path", ".", "replace", "(", "'.json'", ",", "'_processed.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "processed", ",", "f", ",", "indent", "=", "2", ")", "# save processed.json ", "\n", "", "with", "open", "(", "'data/multi-woz-processed/bspn_word_collection.json'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "bspn_word", ",", "f", ",", "indent", "=", "2", ")", "# save bspn_word", "\n", "\n", "", "print", "(", "'DB value set processed! '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess.preprocess_db": [[82, 101], ["spacy.load", "print", "open", "json.loads", "enumerate", "open", "json.dump", "f.read().lower", "copy.deepcopy", "entry.items", "db_paths[].replace", "clean_dataset.clean_slot_values", "f.read", "type", "spacy.load."], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values"], ["", "def", "preprocess_db", "(", "db_paths", ")", ":", "# apply clean_slot_values to all dbs", "\n", "    ", "dbs", "=", "{", "}", "\n", "nlp", "=", "spacy", ".", "load", "(", "'en_core_web_sm'", ")", "\n", "for", "domain", "in", "ontology", ".", "all_domains", ":", "\n", "        ", "with", "open", "(", "db_paths", "[", "domain", "]", ",", "'r'", ")", "as", "f", ":", "# for every db_domain, read json file ", "\n", "            ", "dbs", "[", "domain", "]", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ".", "lower", "(", ")", ")", "\n", "for", "idx", ",", "entry", "in", "enumerate", "(", "dbs", "[", "domain", "]", ")", ":", "# entry has information about slots of said domain", "\n", "                ", "new_entry", "=", "copy", ".", "deepcopy", "(", "entry", ")", "\n", "for", "key", ",", "value", "in", "entry", ".", "items", "(", ")", ":", "# key = slot ", "\n", "                    ", "if", "type", "(", "value", ")", "is", "not", "str", ":", "\n", "                        ", "continue", "\n", "", "del", "new_entry", "[", "key", "]", "\n", "key", ",", "value", "=", "clean_slot_values", "(", "domain", ",", "key", ",", "value", ")", "\n", "tokenize_and_back", "=", "' '", ".", "join", "(", "[", "token", ".", "text", "for", "token", "in", "nlp", "(", "value", ")", "]", ")", ".", "strip", "(", ")", "\n", "new_entry", "[", "key", "]", "=", "tokenize_and_back", "\n", "", "dbs", "[", "domain", "]", "[", "idx", "]", "=", "new_entry", "\n", "", "", "with", "open", "(", "db_paths", "[", "domain", "]", ".", "replace", "(", "'.json'", ",", "'_processed.json'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "dbs", "[", "domain", "]", ",", "f", ",", "indent", "=", "2", ")", "\n", "", "print", "(", "'[%s] DB processed! '", "%", "domain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.__init__": [[62, 71], ["utils.Vocab._absolute_add_word"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab._absolute_add_word"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", "=", "0", ")", ":", "\n", "        ", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "vocab_size_oov", "=", "0", "# get after construction", "\n", "self", ".", "_idx2word", "=", "{", "}", "#word + oov", "\n", "self", ".", "_word2idx", "=", "{", "}", "# word", "\n", "self", ".", "_freq_dict", "=", "{", "}", "#word + oov", "\n", "for", "w", "in", "[", "'<pad>'", ",", "'<go_r>'", ",", "'<unk>'", ",", "'<go_b>'", ",", "'<go_a>'", ",", "'<eos_u>'", ",", "'<eos_r>'", ",", "\n", "'<eos_b>'", ",", "'<eos_a>'", ",", "'<go_d>'", ",", "'<eos_d>'", "]", ":", "\n", "            ", "self", ".", "_absolute_add_word", "(", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab._absolute_add_word": [[72, 76], ["len"], "methods", ["None"], ["", "", "def", "_absolute_add_word", "(", "self", ",", "w", ")", ":", "\n", "        ", "idx", "=", "len", "(", "self", ".", "_idx2word", ")", "\n", "self", ".", "_idx2word", "[", "idx", "]", "=", "w", "\n", "self", ".", "_word2idx", "[", "w", "]", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.add_word": [[77, 81], ["None"], "methods", ["None"], ["", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "_freq_dict", ":", "\n", "            ", "self", ".", "_freq_dict", "[", "word", "]", "=", "0", "\n", "", "self", ".", "_freq_dict", "[", "word", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.has_word": [[82, 84], ["utils.Vocab._freq_dict.get"], "methods", ["None"], ["", "def", "has_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "return", "self", ".", "_freq_dict", ".", "get", "(", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab._add_to_vocab": [[85, 90], ["len"], "methods", ["None"], ["", "def", "_add_to_vocab", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "_word2idx", ":", "\n", "            ", "idx", "=", "len", "(", "self", ".", "_idx2word", ")", "\n", "self", ".", "_idx2word", "[", "idx", "]", "=", "word", "\n", "self", ".", "_word2idx", "[", "word", "]", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.construct": [[91, 111], ["sorted", "print", "len", "utils.Vocab._freq_dict.keys", "logging.warning", "utils.Vocab._add_to_vocab", "utils.Vocab._add_to_vocab", "utils.Vocab._add_to_vocab", "utils.Vocab._add_to_vocab", "len", "len", "word.startswith", "word.endswith", "utils.Vocab._add_to_vocab", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab._add_to_vocab", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab._add_to_vocab", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab._add_to_vocab", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab._add_to_vocab", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab._add_to_vocab"], ["", "", "def", "construct", "(", "self", ")", ":", "\n", "        ", "l", "=", "sorted", "(", "self", ".", "_freq_dict", ".", "keys", "(", ")", ",", "key", "=", "lambda", "x", ":", "-", "self", ".", "_freq_dict", "[", "x", "]", ")", "\n", "print", "(", "'Vocabulary size including oov: %d'", "%", "(", "len", "(", "l", ")", "+", "len", "(", "self", ".", "_idx2word", ")", ")", ")", "\n", "if", "len", "(", "l", ")", "+", "len", "(", "self", ".", "_idx2word", ")", "<", "self", ".", "vocab_size", ":", "\n", "            ", "logging", ".", "warning", "(", "'actual label set smaller than that configured: {}/{}'", "\n", ".", "format", "(", "len", "(", "l", ")", "+", "len", "(", "self", ".", "_idx2word", ")", ",", "self", ".", "vocab_size", ")", ")", "\n", "", "for", "word", "in", "ontology", ".", "all_domains", "+", "[", "'general'", "]", ":", "\n", "            ", "word", "=", "'['", "+", "word", "+", "']'", "\n", "self", ".", "_add_to_vocab", "(", "word", ")", "\n", "", "for", "word", "in", "ontology", ".", "all_acts", ":", "\n", "            ", "word", "=", "'['", "+", "word", "+", "']'", "\n", "self", ".", "_add_to_vocab", "(", "word", ")", "\n", "", "for", "word", "in", "ontology", ".", "all_slots", ":", "\n", "            ", "self", ".", "_add_to_vocab", "(", "word", ")", "\n", "", "for", "word", "in", "l", ":", "\n", "            ", "if", "word", ".", "startswith", "(", "'[value_'", ")", "and", "word", ".", "endswith", "(", "']'", ")", ":", "\n", "                ", "self", ".", "_add_to_vocab", "(", "word", ")", "\n", "", "", "for", "word", "in", "l", ":", "\n", "            ", "self", ".", "_add_to_vocab", "(", "word", ")", "\n", "", "self", ".", "vocab_size_oov", "=", "len", "(", "self", ".", "_idx2word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.load_vocab": [[112, 121], ["json.loads", "json.loads", "utils.Vocab._word2idx.items", "len", "print", "print", "open().read", "open().read", "open", "open"], "methods", ["None"], ["", "def", "load_vocab", "(", "self", ",", "vocab_path", ")", ":", "\n", "        ", "self", ".", "_freq_dict", "=", "json", ".", "loads", "(", "open", "(", "vocab_path", "+", "'.freq.json'", ",", "'r'", ")", ".", "read", "(", ")", ")", "\n", "self", ".", "_word2idx", "=", "json", ".", "loads", "(", "open", "(", "vocab_path", "+", "'.word2idx.json'", ",", "'r'", ")", ".", "read", "(", ")", ")", "\n", "self", ".", "_idx2word", "=", "{", "}", "\n", "for", "w", ",", "idx", "in", "self", ".", "_word2idx", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_idx2word", "[", "idx", "]", "=", "w", "\n", "", "self", ".", "vocab_size_oov", "=", "len", "(", "self", ".", "_idx2word", ")", "\n", "print", "(", "'vocab file loaded from \"'", "+", "vocab_path", "+", "'\"'", ")", "\n", "print", "(", "'Vocabulary size including oov: %d'", "%", "(", "self", ".", "vocab_size_oov", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.save_vocab": [[122, 126], ["collections.OrderedDict", "utils.write_dict", "utils.write_dict", "sorted", "utils.Vocab._freq_dict.items"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.write_dict", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.write_dict"], ["", "def", "save_vocab", "(", "self", ",", "vocab_path", ")", ":", "\n", "        ", "_freq_dict", "=", "OrderedDict", "(", "sorted", "(", "self", ".", "_freq_dict", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ",", "reverse", "=", "True", ")", ")", "\n", "write_dict", "(", "vocab_path", "+", "'.word2idx.json'", ",", "self", ".", "_word2idx", ")", "\n", "write_dict", "(", "vocab_path", "+", "'.freq.json'", ",", "_freq_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode": [[128, 136], ["utils.Vocab._word2idx.get", "ValueError"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "word", ",", "include_oov", "=", "True", ")", ":", "\n", "        ", "if", "include_oov", ":", "\n", "            ", "if", "self", ".", "_word2idx", ".", "get", "(", "word", ",", "None", ")", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Unknown word: %s. Vocabulary should include oovs here.'", "%", "word", ")", "\n", "", "return", "self", ".", "_word2idx", "[", "word", "]", "\n", "", "else", ":", "\n", "            ", "word", "=", "'<unk>'", "if", "word", "not", "in", "self", ".", "_word2idx", "else", "word", "\n", "return", "self", ".", "_word2idx", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.sentence_encode": [[137, 139], ["utils.Vocab.encode"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode"], ["", "", "def", "sentence_encode", "(", "self", ",", "word_list", ")", ":", "\n", "        ", "return", "[", "self", ".", "encode", "(", "_", ")", "for", "_", "in", "word_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.oov_idx_map": [[140, 142], ["None"], "methods", ["None"], ["", "def", "oov_idx_map", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "2", "if", "idx", ">", "self", ".", "vocab_size", "else", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.sentence_oov_map": [[143, 145], ["utils.Vocab.oov_idx_map"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.oov_idx_map"], ["", "def", "sentence_oov_map", "(", "self", ",", "index_list", ")", ":", "\n", "        ", "return", "[", "self", ".", "oov_idx_map", "(", "_", ")", "for", "_", "in", "index_list", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode": [[147, 154], ["utils.Vocab._idx2word.get", "ValueError"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "idx", ",", "indicate_oov", "=", "False", ")", ":", "\n", "        ", "if", "not", "self", ".", "_idx2word", ".", "get", "(", "idx", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Error idx: %d. Vocabulary should include oovs here.'", "%", "idx", ")", "\n", "", "if", "not", "indicate_oov", "or", "idx", "<", "self", ".", "vocab_size", ":", "\n", "            ", "return", "self", ".", "_idx2word", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_idx2word", "[", "idx", "]", "+", "'(o)'", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.sentence_decode": [[155, 162], ["utils.Vocab.decode", "l.index"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "", "def", "sentence_decode", "(", "self", ",", "index_list", ",", "eos", "=", "None", ",", "indicate_oov", "=", "False", ")", ":", "\n", "        ", "l", "=", "[", "self", ".", "decode", "(", "_", ",", "indicate_oov", ")", "for", "_", "in", "index_list", "]", "\n", "if", "not", "eos", "or", "eos", "not", "in", "l", ":", "\n", "            ", "return", "' '", ".", "join", "(", "l", ")", "\n", "", "else", ":", "\n", "            ", "idx", "=", "l", ".", "index", "(", "eos", ")", "\n", "return", "' '", ".", "join", "(", "l", "[", ":", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.nl_decode": [[163, 165], ["utils.Vocab.sentence_decode"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.sentence_decode"], ["", "", "def", "nl_decode", "(", "self", ",", "l", ",", "eos", "=", "None", ")", ":", "\n", "        ", "return", "[", "self", ".", "sentence_decode", "(", "_", ",", "eos", ")", "+", "'\\n'", "for", "_", "in", "l", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.top_k_top_p_filtering": [[8, 43], ["min", "float", "logits.dim", "logits.size", "torch.sort", "torch.cumsum", "sorted_indices_to_remove[].clone", "F.softmax", "torch.topk"], "function", ["None"], ["def", "top_k_top_p_filtering", "(", "logits", ",", "top_k", "=", "0", ",", "top_p", "=", "0.0", ",", "filter_value", "=", "-", "float", "(", "'Inf'", ")", ")", ":", "\n", "    ", "\"\"\" Filter a distribution of logits using top-k and/or nucleus (top-p) filtering\n        Args:\n            logits: logits distribution shape (vocabulary size)\n            top_k > 0: keep only top k tokens with highest probability (top-k filtering).\n            top_p > 0.0: keep the top tokens with cumulative probability >= top_p (nucleus filtering).\n                Nucleus filtering is described in Holtzman et al. (http://arxiv.org/abs/1904.09751)\n        From: https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317\n    \"\"\"", "\n", "assert", "logits", ".", "dim", "(", ")", "==", "1", "# batch size 1 for now - could be updated for more but the code would be less clear", "\n", "top_k", "=", "min", "(", "top_k", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "# Safety check", "\n", "if", "top_k", ">", "0", ":", "\n", "# Remove all tokens with a probability less than the last token of the top-k", "\n", "# torch.topk()\u8fd4\u56de\u6700\u540e\u4e00\u7ef4\u6700\u5927\u7684top_k\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de\u503c\u4e3a\u4e8c\u7ef4(values,indices)", "\n", "# ...\u8868\u793a\u5176\u4ed6\u7ef4\u5ea6\u7531\u8ba1\u7b97\u673a\u81ea\u884c\u63a8\u65ad", "\n", "        ", "indices_to_remove", "=", "logits", "<", "torch", ".", "topk", "(", "logits", ",", "top_k", ")", "[", "\n", "0", "]", "[", "...", ",", "-", "1", ",", "None", "]", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "# \u5bf9\u4e8etopk\u4e4b\u5916\u7684\u5176\u4ed6\u5143\u7d20\u7684logits\u503c\u8bbe\u4e3a\u8d1f\u65e0\u7a77", "\n", "\n", "", "if", "top_p", ">", "0.0", ":", "\n", "        ", "sorted_logits", ",", "sorted_indices", "=", "torch", ".", "sort", "(", "\n", "logits", ",", "descending", "=", "True", ")", "# \u5bf9logits\u8fdb\u884c\u9012\u51cf\u6392\u5e8f", "\n", "cumulative_probs", "=", "torch", ".", "cumsum", "(", "\n", "F", ".", "softmax", "(", "sorted_logits", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Remove tokens with cumulative probability above the threshold", "\n", "sorted_indices_to_remove", "=", "cumulative_probs", ">", "top_p", "\n", "# Shift the indices to the right to keep also the first token above the threshold", "\n", "sorted_indices_to_remove", "[", "...", ",", "\n", "1", ":", "]", "=", "sorted_indices_to_remove", "[", "...", ",", ":", "-", "1", "]", ".", "clone", "(", ")", "\n", "sorted_indices_to_remove", "[", "...", ",", "0", "]", "=", "0", "\n", "\n", "indices_to_remove", "=", "sorted_indices", "[", "sorted_indices_to_remove", "]", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.py2np": [[44, 46], ["numpy.array"], "function", ["None"], ["", "def", "py2np", "(", "list", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.write_dict": [[48, 51], ["open", "json.dump"], "function", ["None"], ["", "def", "write_dict", "(", "fn", ",", "dic", ")", ":", "\n", "    ", "with", "open", "(", "fn", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "dic", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.f1_score": [[52, 60], ["len", "max", "max", "len", "len"], "function", ["None"], ["", "", "def", "f1_score", "(", "label_list", ",", "pred_list", ")", ":", "\n", "    ", "tp", "=", "len", "(", "[", "t", "for", "t", "in", "pred_list", "if", "t", "in", "label_list", "]", ")", "\n", "fp", "=", "max", "(", "0", ",", "len", "(", "pred_list", ")", "-", "tp", ")", "\n", "fn", "=", "max", "(", "0", ",", "len", "(", "label_list", ")", "-", "tp", ")", "\n", "precision", "=", "tp", "/", "(", "tp", "+", "fp", "+", "1e-10", ")", "\n", "recall", "=", "tp", "/", "(", "tp", "+", "fn", "+", "1e-10", ")", "\n", "f1", "=", "2", "*", "precision", "*", "recall", "/", "(", "precision", "+", "recall", "+", "1e-10", ")", "\n", "return", "f1", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.padSeqs_gpt": [[166, 197], ["len", "numpy.max", "enumerate", "lengths.append", "numpy.ones", "numpy.asarray", "len", "len", "print", "len"], "function", ["None"], ["", "", "def", "padSeqs_gpt", "(", "sequences", ",", "pad_id", ",", "maxlen", "=", "None", ")", ":", "\n", "    ", "lengths", "=", "[", "]", "\n", "for", "x", "in", "sequences", ":", "\n", "        ", "lengths", ".", "append", "(", "len", "(", "x", ")", ")", "\n", "\n", "", "num_samples", "=", "len", "(", "sequences", ")", "\n", "seq_mexlen", "=", "np", ".", "max", "(", "lengths", ")", "\n", "\n", "# maxlen = 1024", "\n", "if", "seq_mexlen", ">", "1024", ":", "# gpt2.n_ctx", "\n", "# print('maxlen exceeds 1024')", "\n", "        ", "maxlen", "=", "1024", "\n", "", "else", ":", "\n", "        ", "maxlen", "=", "seq_mexlen", "\n", "\n", "# tokenizer.encode('<|endoftext|>') = ['50256']", "\n", "# All labels set to ``-100`` are ignored (masked), the loss is only", "\n", "# computed for labels in ``[0, ..., config.vocab_size]`` (from modeling_gpt2.GPT2LMHeadModel)", "\n", "\n", "", "x", "=", "(", "np", ".", "ones", "(", "(", "num_samples", ",", "maxlen", ")", ")", "*", "pad_id", ")", "\n", "for", "idx", ",", "s", "in", "enumerate", "(", "sequences", ")", ":", "\n", "        ", "if", "not", "len", "(", "s", ")", ":", "\n", "            ", "print", "(", "'empty list was found in padSeqs'", ")", "\n", "# trunc method = 'pre'", "\n", "", "trunc", "=", "s", "[", "-", "maxlen", ":", "]", "\n", "trunc", "=", "np", ".", "asarray", "(", "trunc", ")", "\n", "\n", "# pad method = 'post'", "\n", "x", "[", "idx", ",", ":", "len", "(", "trunc", ")", "]", "=", "trunc", "\n", "\n", "", "return", "x", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.padSeqs": [[203, 254], ["len", "numpy.max", "tuple", "enumerate", "hasattr", "ValueError", "lengths.append", "min", "numpy.asarray", "hasattr", "ValueError", "len", "len", "len", "print", "ValueError", "numpy.ones", "ValueError", "ValueError", "str", "numpy.asarray", "len", "len"], "function", ["None"], ["", "def", "padSeqs", "(", "sequences", ",", "maxlen", "=", "None", ",", "truncated", "=", "False", ",", "pad_method", "=", "'post'", ",", "\n", "trunc_method", "=", "'pre'", ",", "dtype", "=", "'int32'", ",", "value", "=", "0.", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "sequences", ",", "'__len__'", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'`sequences` must be iterable.'", ")", "\n", "", "lengths", "=", "[", "]", "\n", "for", "x", "in", "sequences", ":", "\n", "        ", "if", "not", "hasattr", "(", "x", ",", "'__len__'", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'`sequences` must be a list of iterables. '", "\n", "'Found non-iterable: '", "+", "str", "(", "x", ")", ")", "\n", "", "lengths", ".", "append", "(", "len", "(", "x", ")", ")", "\n", "\n", "", "num_samples", "=", "len", "(", "sequences", ")", "\n", "seq_maxlen", "=", "np", ".", "max", "(", "lengths", ")", "\n", "\n", "if", "maxlen", "is", "not", "None", "and", "truncated", ":", "\n", "        ", "maxlen", "=", "min", "(", "seq_maxlen", ",", "maxlen", ")", "\n", "", "else", ":", "\n", "        ", "maxlen", "=", "seq_maxlen", "\n", "# take the sample shape from the first non empty sequence", "\n", "# checking for consistency in the main loop below.", "\n", "", "sample_shape", "=", "tuple", "(", ")", "\n", "for", "s", "in", "sequences", ":", "\n", "        ", "if", "len", "(", "s", ")", ">", "0", ":", "\n", "            ", "sample_shape", "=", "np", ".", "asarray", "(", "s", ")", ".", "shape", "[", "1", ":", "]", "\n", "break", "\n", "\n", "", "", "x", "=", "(", "np", ".", "ones", "(", "(", "num_samples", ",", "maxlen", ")", "+", "sample_shape", ")", "*", "value", ")", ".", "astype", "(", "dtype", ")", "\n", "for", "idx", ",", "s", "in", "enumerate", "(", "sequences", ")", ":", "\n", "        ", "if", "not", "len", "(", "s", ")", ":", "\n", "            ", "print", "(", "'empty list/array was found'", ")", "\n", "continue", "# empty list/array was found", "\n", "", "if", "trunc_method", "==", "'pre'", ":", "\n", "            ", "trunc", "=", "s", "[", "-", "maxlen", ":", "]", "\n", "", "elif", "trunc_method", "==", "'post'", ":", "\n", "            ", "trunc", "=", "s", "[", ":", "maxlen", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Truncating type \"%s\" not understood'", "%", "trunc_method", ")", "\n", "\n", "# check `trunc` has expected shape", "\n", "", "trunc", "=", "np", ".", "asarray", "(", "trunc", ",", "dtype", "=", "dtype", ")", "\n", "if", "trunc", ".", "shape", "[", "1", ":", "]", "!=", "sample_shape", ":", "\n", "            ", "raise", "ValueError", "(", "'Shape of sample %s of sequence at position %s is different from expected shape %s'", "%", "\n", "(", "trunc", ".", "shape", "[", "1", ":", "]", ",", "idx", ",", "sample_shape", ")", ")", "\n", "\n", "", "if", "pad_method", "==", "'post'", ":", "\n", "            ", "x", "[", "idx", ",", ":", "len", "(", "trunc", ")", "]", "=", "trunc", "\n", "", "elif", "pad_method", "==", "'pre'", ":", "\n", "            ", "x", "[", "idx", ",", "-", "len", "(", "trunc", ")", ":", "]", "=", "trunc", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Padding type \"%s\" not understood'", "%", "pad_method", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.get_glove_matrix": [[256, 290], ["open", "numpy.average", "numpy.std", "vec_array.astype.astype", "open.readlines", "open.close", "logging.info", "line.strip().split.strip().split", "numpy.array", "vocab.encode", "vocab.has_word", "numpy.average", "numpy.std", "line.strip().split.strip"], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.has_word"], ["", "def", "get_glove_matrix", "(", "glove_path", ",", "vocab", ",", "initial_embedding_np", ")", ":", "\n", "    ", "\"\"\"\n    return a glove embedding matrix\n    :param self:\n    :param glove_file:\n    :param initial_embedding_np:\n    :return: np array of [V,E]\n    \"\"\"", "\n", "ef", "=", "open", "(", "glove_path", ",", "'r'", ",", "encoding", "=", "'UTF-8'", ")", "\n", "cnt", "=", "0", "\n", "vec_array", "=", "initial_embedding_np", "\n", "old_avg", "=", "np", ".", "average", "(", "vec_array", ")", "\n", "old_std", "=", "np", ".", "std", "(", "vec_array", ")", "\n", "vec_array", "=", "vec_array", ".", "astype", "(", "np", ".", "float32", ")", "\n", "new_avg", ",", "new_std", "=", "0", ",", "0", "\n", "\n", "for", "line", "in", "ef", ".", "readlines", "(", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "word", ",", "vec", "=", "line", "[", "0", "]", ",", "line", "[", "1", ":", "]", "\n", "vec", "=", "np", ".", "array", "(", "vec", ",", "np", ".", "float32", ")", "\n", "if", "not", "vocab", ".", "has_word", "(", "word", ")", ":", "\n", "            ", "continue", "\n", "", "word_idx", "=", "vocab", ".", "encode", "(", "word", ")", "\n", "if", "word_idx", "<", "vocab", ".", "vocab_size", ":", "\n", "            ", "cnt", "+=", "1", "\n", "vec_array", "[", "word_idx", "]", "=", "vec", "\n", "new_avg", "+=", "np", ".", "average", "(", "vec", ")", "\n", "new_std", "+=", "np", ".", "std", "(", "vec", ")", "\n", "", "", "new_avg", "/=", "cnt", "\n", "new_std", "/=", "cnt", "\n", "ef", ".", "close", "(", ")", "\n", "logging", ".", "info", "(", "'%d known embedding. old mean: %f new mean %f, old std %f new std %f'", "%", "(", "cnt", ",", "old_avg", ",", "\n", "new_avg", ",", "old_std", ",", "new_std", ")", ")", "\n", "return", "vec_array", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.position_encoding_init": [[292, 299], ["numpy.array", "numpy.sin", "numpy.cos", "numpy.zeros", "range", "numpy.power", "range"], "function", ["None"], ["", "def", "position_encoding_init", "(", "self", ",", "n_position", ",", "d_pos_vec", ")", ":", "\n", "    ", "position_enc", "=", "np", ".", "array", "(", "[", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "j", "//", "2", ")", "/", "d_pos_vec", ")", "for", "j", "in", "range", "(", "d_pos_vec", ")", "]", "\n", "if", "pos", "!=", "0", "else", "np", ".", "zeros", "(", "d_pos_vec", ")", "for", "pos", "in", "range", "(", "n_position", ")", "]", ")", "\n", "\n", "position_enc", "[", "1", ":", ",", "0", ":", ":", "2", "]", "=", "np", ".", "sin", "(", "position_enc", "[", "1", ":", ",", "0", ":", ":", "2", "]", ")", "# dim 2i", "\n", "position_enc", "[", "1", ":", ",", "1", ":", ":", "2", "]", "=", "np", ".", "cos", "(", "position_enc", "[", "1", ":", ",", "1", ":", ":", "2", "]", ")", "# dim 2i+1", "\n", "return", "position_enc", "\n", "", ""]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.__init__": [[20, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "train", ",", "self", ".", "dev", ",", "self", ".", "test", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "vocab", "=", "None", "\n", "self", ".", "db", "=", "None", "\n", "self", ".", "set_stats", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase._bucket_by_turn": [[26, 41], ["collections.OrderedDict", "len", "turn_bucket[].append", "logging.debug", "sorted", "del_l.append", "turn_bucket.items", "len"], "methods", ["None"], ["", "def", "_bucket_by_turn", "(", "self", ",", "encoded_data", ")", ":", "\n", "        ", "turn_bucket", "=", "{", "}", "\n", "for", "dial", "in", "encoded_data", ":", "\n", "            ", "turn_len", "=", "len", "(", "dial", ")", "\n", "if", "turn_len", "not", "in", "turn_bucket", ":", "\n", "                ", "turn_bucket", "[", "turn_len", "]", "=", "[", "]", "\n", "", "turn_bucket", "[", "turn_len", "]", ".", "append", "(", "dial", ")", "\n", "", "del_l", "=", "[", "]", "\n", "for", "k", "in", "turn_bucket", ":", "\n", "            ", "if", "k", ">=", "5", ":", "\n", "                ", "del_l", ".", "append", "(", "k", ")", "\n", "", "logging", ".", "debug", "(", "\"bucket %d instance %d\"", "%", "(", "k", ",", "len", "(", "turn_bucket", "[", "k", "]", ")", ")", ")", "\n", "# for k in del_l:", "\n", "#    turn_bucket.pop(k)", "\n", "", "return", "OrderedDict", "(", "sorted", "(", "turn_bucket", ".", "items", "(", ")", ",", "key", "=", "lambda", "i", ":", "i", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase._construct_mini_batch": [[42, 62], ["batch.append", "len", "all_batches.append", "len", "len", "all_batches.append", "len", "len", "all_batches[].extend", "all_batches.append", "len", "len"], "methods", ["None"], ["", "def", "_construct_mini_batch", "(", "self", ",", "data", ")", ":", "\n", "        ", "all_batches", "=", "[", "]", "\n", "batch", "=", "[", "]", "\n", "for", "dial", "in", "data", ":", "\n", "            ", "batch", ".", "append", "(", "dial", ")", "\n", "if", "len", "(", "batch", ")", "==", "cfg", ".", "batch_size", ":", "\n", "# print('batch size: %d, batch num +1'%(len(batch)))", "\n", "                ", "all_batches", ".", "append", "(", "batch", ")", "\n", "batch", "=", "[", "]", "\n", "# if remainder > 1/2 batch_size, just put them in the previous batch, otherwise form a new batch", "\n", "# print('last batch size: %d, batch num +1'%(len(batch)))", "\n", "", "", "if", "(", "len", "(", "batch", ")", "%", "len", "(", "cfg", ".", "cuda_device", ")", ")", "!=", "0", ":", "\n", "            ", "batch", "=", "batch", "[", ":", "-", "(", "len", "(", "batch", ")", "%", "len", "(", "cfg", ".", "cuda_device", ")", ")", "]", "\n", "", "if", "len", "(", "batch", ")", ">", "0.5", "*", "cfg", ".", "batch_size", ":", "\n", "            ", "all_batches", ".", "append", "(", "batch", ")", "\n", "", "elif", "len", "(", "all_batches", ")", ":", "\n", "            ", "all_batches", "[", "-", "1", "]", ".", "extend", "(", "batch", ")", "\n", "", "else", ":", "\n", "            ", "all_batches", ".", "append", "(", "batch", ")", "\n", "", "return", "all_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.transpose_batch": [[63, 76], ["len", "range", "dial_batch.append", "turn_l[].append"], "methods", ["None"], ["", "def", "transpose_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "dial_batch", "=", "[", "]", "\n", "turn_num", "=", "len", "(", "batch", "[", "0", "]", ")", "\n", "for", "turn", "in", "range", "(", "turn_num", ")", ":", "\n", "            ", "turn_l", "=", "{", "}", "\n", "for", "dial", "in", "batch", ":", "\n", "                ", "this_turn", "=", "dial", "[", "turn", "]", "\n", "for", "k", "in", "this_turn", ":", "\n", "                    ", "if", "k", "not", "in", "turn_l", ":", "\n", "                        ", "turn_l", "[", "k", "]", "=", "[", "]", "\n", "", "turn_l", "[", "k", "]", ".", "append", "(", "this_turn", "[", "k", "]", ")", "\n", "", "", "dial_batch", ".", "append", "(", "turn_l", ")", "\n", "", "return", "dial_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.inverse_transpose_turn": [[77, 97], ["len", "range", "turn.items", "dialogs[].append", "reader._ReaderBase.db.pointerBack"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.pointerBack"], ["", "def", "inverse_transpose_turn", "(", "self", ",", "turn_list", ")", ":", "\n", "        ", "\"\"\"\n        eval, one dialog at a time\n        \"\"\"", "\n", "dialogs", "=", "{", "}", "\n", "turn_num", "=", "len", "(", "turn_list", ")", "\n", "dial_id", "=", "turn_list", "[", "0", "]", "[", "'dial_id'", "]", "\n", "dialogs", "[", "dial_id", "]", "=", "[", "]", "\n", "for", "turn_idx", "in", "range", "(", "turn_num", ")", ":", "\n", "            ", "dial_turn", "=", "{", "}", "\n", "turn", "=", "turn_list", "[", "turn_idx", "]", "\n", "for", "key", ",", "value", "in", "turn", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "==", "'dial_id'", ":", "\n", "                    ", "continue", "\n", "", "if", "key", "==", "'pointer'", "and", "self", ".", "db", "is", "not", "None", ":", "\n", "                    ", "turn_domain", "=", "turn", "[", "'turn_domain'", "]", "[", "-", "1", "]", "\n", "value", "=", "self", ".", "db", ".", "pointerBack", "(", "value", ",", "turn_domain", ")", "\n", "", "dial_turn", "[", "key", "]", "=", "value", "\n", "", "dialogs", "[", "dial_id", "]", ".", "append", "(", "dial_turn", ")", "\n", "", "return", "dialogs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.inverse_transpose_batch": [[98, 120], ["len", "enumerate", "range", "turn_batch.items", "dialogs[].append", "reader._ReaderBase.db.pointerBack"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.pointerBack"], ["", "def", "inverse_transpose_batch", "(", "self", ",", "turn_batch_list", ")", ":", "\n", "        ", "\"\"\"\n        :param turn_batch_list: list of transpose dial batch\n        \"\"\"", "\n", "dialogs", "=", "{", "}", "\n", "total_turn_num", "=", "len", "(", "turn_batch_list", ")", "\n", "# initialize", "\n", "for", "idx_in_batch", ",", "dial_id", "in", "enumerate", "(", "turn_batch_list", "[", "0", "]", "[", "'dial_id'", "]", ")", ":", "\n", "            ", "dialogs", "[", "dial_id", "]", "=", "[", "]", "\n", "for", "turn_n", "in", "range", "(", "total_turn_num", ")", ":", "\n", "                ", "dial_turn", "=", "{", "}", "\n", "turn_batch", "=", "turn_batch_list", "[", "turn_n", "]", "\n", "for", "key", ",", "v_list", "in", "turn_batch", ".", "items", "(", ")", ":", "\n", "                    ", "if", "key", "==", "'dial_id'", ":", "\n", "                        ", "continue", "\n", "", "value", "=", "v_list", "[", "idx_in_batch", "]", "\n", "if", "key", "==", "'pointer'", "and", "self", ".", "db", "is", "not", "None", ":", "\n", "                        ", "turn_domain", "=", "turn_batch", "[", "'turn_domain'", "]", "[", "idx_in_batch", "]", "[", "-", "1", "]", "\n", "value", "=", "self", ".", "db", ".", "pointerBack", "(", "value", ",", "turn_domain", ")", "\n", "", "dial_turn", "[", "key", "]", "=", "value", "\n", "", "dialogs", "[", "dial_id", "]", ".", "append", "(", "dial_turn", ")", "\n", "", "", "return", "dialogs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_eval_data": [[121, 136], ["len", "len"], "methods", ["None"], ["", "def", "get_eval_data", "(", "self", ",", "set_name", "=", "'dev'", ")", ":", "\n", "        ", "name_to_set", "=", "{", "'train'", ":", "self", ".", "train", ",", "'test'", ":", "self", ".", "test", ",", "'dev'", ":", "self", ".", "dev", "}", "\n", "dial", "=", "name_to_set", "[", "set_name", "]", "\n", "\n", "if", "set_name", "not", "in", "self", ".", "set_stats", ":", "\n", "            ", "self", ".", "set_stats", "[", "set_name", "]", "=", "{", "}", "\n", "", "num_turns", "=", "0", "\n", "num_dials", "=", "len", "(", "dial", ")", "\n", "for", "d", "in", "dial", ":", "\n", "            ", "num_turns", "+=", "len", "(", "d", ")", "\n", "\n", "", "self", ".", "set_stats", "[", "set_name", "]", "[", "'num_turns'", "]", "=", "num_turns", "\n", "self", ".", "set_stats", "[", "set_name", "]", "[", "'num_dials'", "]", "=", "num_dials", "\n", "\n", "return", "dial", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_batches": [[138, 187], ["reader._ReaderBase._bucket_by_turn", "random.sample", "logging.info", "reader._ReaderBase._construct_mini_batch", "len", "len", "random.shuffle", "len", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase._bucket_by_turn", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase._construct_mini_batch"], ["", "def", "get_batches", "(", "self", ",", "set_name", ")", ":", "\n", "        ", "\"\"\"\n        compute dataset stats.\n        \"\"\"", "\n", "global", "dia_count", "\n", "log_str", "=", "''", "\n", "name_to_set", "=", "{", "'train'", ":", "self", ".", "train", ",", "'test'", ":", "self", ".", "test", ",", "'dev'", ":", "self", ".", "dev", "}", "\n", "dial", "=", "name_to_set", "[", "set_name", "]", "\n", "if", "cfg", ".", "low_resource", "and", "set_name", "==", "'train'", ":", "\n", "# dial = random.sample(dial, int(len(dial)*0.01))", "\n", "            ", "dial", "=", "random", ".", "sample", "(", "dial", ",", "100", ")", "\n", "logging", ".", "info", "(", "'Low Resource setting, finetuning size: {}'", ".", "format", "(", "len", "(", "dial", ")", ")", ")", "\n", "", "turn_bucket", "=", "self", ".", "_bucket_by_turn", "(", "dial", ")", "\n", "# self._shuffle_turn_bucket(turn_bucket)", "\n", "all_batches", "=", "[", "]", "\n", "\n", "\n", "if", "set_name", "not", "in", "self", ".", "set_stats", ":", "\n", "            ", "self", ".", "set_stats", "[", "set_name", "]", "=", "{", "}", "\n", "", "num_training_steps", "=", "0", "\n", "num_turns", "=", "0", "\n", "num_dials", "=", "0", "\n", "\n", "for", "k", "in", "turn_bucket", ":", "\n", "            ", "if", "set_name", "!=", "'test'", "and", "k", "==", "1", "or", "k", ">=", "17", ":", "\n", "                ", "continue", "\n", "", "batches", "=", "self", ".", "_construct_mini_batch", "(", "turn_bucket", "[", "k", "]", ")", "\n", "log_str", "+=", "\"turn num:%d, dial num: %d, batch num: %d last batch len: %d\\n\"", "%", "(", "\n", "k", ",", "len", "(", "turn_bucket", "[", "k", "]", ")", ",", "len", "(", "batches", ")", ",", "len", "(", "batches", "[", "-", "1", "]", ")", ")", "\n", "# print(\"turn num:%d, dial num:v%d, batch num: %d, \"%(k, len(turn_bucket[k]), len(batches)))", "\n", "num_training_steps", "+=", "k", "*", "len", "(", "batches", ")", "\n", "num_turns", "+=", "k", "*", "len", "(", "turn_bucket", "[", "k", "]", ")", "\n", "num_dials", "+=", "len", "(", "turn_bucket", "[", "k", "]", ")", "\n", "all_batches", "+=", "batches", "\n", "", "log_str", "+=", "'total batch num: %d\\n'", "%", "len", "(", "all_batches", ")", "\n", "# print('total batch num: %d'%len(all_batches))", "\n", "# print('dialog count: %d'%dia_count)", "\n", "# return all_batches", "\n", "\n", "# log stats", "\n", "# logging.info(log_str)", "\n", "# cfg.num_training_steps = num_training_steps * cfg.epoch_num", "\n", "self", ".", "set_stats", "[", "set_name", "]", "[", "'num_training_steps_per_epoch'", "]", "=", "num_training_steps", "\n", "self", ".", "set_stats", "[", "set_name", "]", "[", "'num_turns'", "]", "=", "num_turns", "\n", "self", ".", "set_stats", "[", "set_name", "]", "[", "'num_dials'", "]", "=", "num_dials", "\n", "\n", "if", "set_name", "==", "'train'", ":", "\n", "            ", "random", ".", "shuffle", "(", "all_batches", ")", "\n", "", "return", "all_batches", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_nontranspose_data_iterator": [[188, 191], ["enumerate"], "methods", ["None"], ["", "def", "get_nontranspose_data_iterator", "(", "self", ",", "all_batches", ")", ":", "\n", "        ", "for", "i", ",", "batch", "in", "enumerate", "(", "all_batches", ")", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.get_data_iterator": [[192, 195], ["enumerate", "reader._ReaderBase.transpose_batch"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.transpose_batch"], ["", "", "def", "get_data_iterator", "(", "self", ",", "all_batches", ")", ":", "\n", "        ", "for", "i", ",", "batch", "in", "enumerate", "(", "all_batches", ")", ":", "\n", "            ", "yield", "self", ".", "transpose_batch", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.save_result": [[196, 204], ["open", "csv.DictWriter", "csv.DictWriter.writeheader", "csv.DictWriter.writerows", "rf.write"], "methods", ["None"], ["", "", "def", "save_result", "(", "self", ",", "write_mode", ",", "results", ",", "field", ",", "write_title", "=", "False", ")", ":", "\n", "        ", "with", "open", "(", "cfg", ".", "result_path", ",", "write_mode", ")", "as", "rf", ":", "\n", "            ", "if", "write_title", ":", "\n", "                ", "rf", ".", "write", "(", "write_title", "+", "'\\n'", ")", "\n", "", "writer", "=", "csv", ".", "DictWriter", "(", "rf", ",", "fieldnames", "=", "field", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "writer", ".", "writerows", "(", "results", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader._ReaderBase.save_result_report": [[205, 239], ["os.path.exists", "open", "csv.DictWriter", "csv.DictWriter.writerows", "csv.DictWriter.writeheader", "str", "list", "str", "str", "res.keys", "str"], "methods", ["None"], ["", "def", "save_result_report", "(", "self", ",", "results", ")", ":", "\n", "# if 'joint_goal' in results[0]:", "\n", "#     with open(cfg.result_path[:-4] + '_report_dst.txt', 'w') as rf:", "\n", "#         rf.write('joint goal\\tslot_acc\\tslot_f1\\tact_f1\\n')", "\n", "#         for res in results:", "\n", "#             a,b,c,d = res['joint_goal'], res['slot_acc'], res['slot_f1'], res['act_f1']", "\n", "#             rf.write('%2.1f\\t%2.1f\\t%2.1f\\t%2.1f\\n'%(a,b,c,d))", "\n", "# elif 'joint_goal_delex' in results[0]:", "\n", "#     with open(cfg.result_path[:-4] + '_report_bsdx.txt', 'w') as rf:", "\n", "#         rf.write('joint goal\\tslot_acc\\tslot_f1\\tact_f1\\n')", "\n", "#         for res in results:", "\n", "#             a,b,c,d = res['joint_goal_delex'], res['slot_acc_delex'], res['slot_f1_delex'], res['act_f1']", "\n", "#             rf.write('%2.1f\\t%2.1f\\t%2.1f\\t%2.1f\\n'%(a,b,c,d))", "\n", "        ", "ctr_save_path", "=", "cfg", ".", "result_path", "[", ":", "-", "4", "]", "+", "'_report_ctr%s.csv'", "%", "cfg", ".", "seed", "\n", "write_title", "=", "False", "if", "os", ".", "path", ".", "exists", "(", "ctr_save_path", ")", "else", "True", "\n", "if", "cfg", ".", "aspn_decode_mode", "==", "'greedy'", ":", "\n", "            ", "setting", "=", "''", "\n", "", "elif", "cfg", ".", "aspn_decode_mode", "==", "'beam'", ":", "\n", "            ", "setting", "=", "'width=%s'", "%", "str", "(", "cfg", ".", "beam_width", ")", "\n", "if", "cfg", ".", "beam_diverse_param", ">", "0", ":", "\n", "                ", "setting", "+=", "', penalty=%s'", "%", "str", "(", "cfg", ".", "beam_diverse_param", ")", "\n", "", "", "elif", "cfg", ".", "aspn_decode_mode", "==", "'topk_sampling'", ":", "\n", "            ", "setting", "=", "'topk=%s'", "%", "str", "(", "cfg", ".", "topk_num", ")", "\n", "", "elif", "cfg", ".", "aspn_decode_mode", "==", "'nucleur_sampling'", ":", "\n", "            ", "setting", "=", "'p=%s'", "%", "str", "(", "cfg", ".", "nucleur_p", ")", "\n", "", "res", "=", "{", "'exp'", ":", "cfg", ".", "eval_load_path", ",", "'true_bspn'", ":", "cfg", ".", "use_true_curr_bspn", ",", "'true_aspn'", ":", "cfg", ".", "use_true_curr_aspn", ",", "\n", "'decode'", ":", "cfg", ".", "aspn_decode_mode", ",", "'param'", ":", "setting", ",", "'nbest'", ":", "cfg", ".", "nbest", ",", "'selection_sheme'", ":", "cfg", ".", "act_selection_scheme", ",", "\n", "'match'", ":", "results", "[", "0", "]", "[", "'match'", "]", ",", "'success'", ":", "results", "[", "0", "]", "[", "'success'", "]", ",", "'bleu'", ":", "results", "[", "0", "]", "[", "'bleu'", "]", ",", "'act_f1'", ":", "results", "[", "0", "]", "[", "'act_f1'", "]", ",", "\n", "'avg_act_num'", ":", "results", "[", "0", "]", "[", "'avg_act_num'", "]", ",", "'avg_diverse'", ":", "results", "[", "0", "]", "[", "'avg_diverse_score'", "]", "}", "\n", "with", "open", "(", "ctr_save_path", ",", "'a'", ")", "as", "rf", ":", "\n", "            ", "writer", "=", "csv", ".", "DictWriter", "(", "rf", ",", "fieldnames", "=", "list", "(", "res", ".", "keys", "(", ")", ")", ")", "\n", "if", "write_title", ":", "\n", "                ", "writer", ".", "writeheader", "(", ")", "\n", "", "writer", ".", "writerows", "(", "[", "res", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.__init__": [[242, 301], ["reader._ReaderBase.__init__", "spacy.load", "db_ops.MultiWozDB", "reader.MultiWozReader._build_vocab", "json.loads", "json.loads", "list", "reader.MultiWozReader._load_data", "reader.MultiWozReader.add_sepcial_tokens", "open().read", "open().read", "json.loads", "l.strip().lower", "l.strip().lower", "reader.MultiWozReader.domain_files.keys", "reader.MultiWozReader.get_exp_domains", "logging.info", "reader.MultiWozReader._construct_bspn_constraint", "reader.MultiWozReader._construct_aspn_constraint", "open().read", "open().readlines", "open().readlines", "reader.MultiWozReader.domain_files.get", "open", "open", "l.strip", "l.strip", "fn.replace", "fn.replace", "ValueError", "open", "open", "open", "fn.replace"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.__init__", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._build_vocab", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._load_data", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.add_sepcial_tokens", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.get_exp_domains", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._construct_bspn_constraint", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._construct_aspn_constraint"], ["    ", "def", "__init__", "(", "self", ",", "tokenizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nlp", "=", "spacy", ".", "load", "(", "'en_core_web_sm'", ")", "\n", "\n", "self", ".", "db", "=", "MultiWozDB", "(", "cfg", ".", "dbs", ")", "\n", "self", ".", "vocab_size", "=", "self", ".", "_build_vocab", "(", ")", "\n", "\n", "# self.tokenizer = GPT2Tokenizer.from_pretrained(cfg.gpt_path) # add special tokens later", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "if", "cfg", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "add_sepcial_tokens", "(", ")", "\n", "\n", "", "self", ".", "domain_files", "=", "json", ".", "loads", "(", "open", "(", "cfg", ".", "domain_file_path", ",", "'r'", ")", ".", "read", "(", ")", ")", "\n", "self", ".", "slot_value_set", "=", "json", ".", "loads", "(", "\n", "open", "(", "cfg", ".", "slot_value_set_path", ",", "'r'", ")", ".", "read", "(", ")", ")", "\n", "if", "cfg", ".", "multi_acts_training", ":", "\n", "            ", "self", ".", "multi_acts", "=", "json", ".", "loads", "(", "open", "(", "cfg", ".", "multi_acts_path", ",", "'r'", ")", ".", "read", "(", ")", ")", "\n", "\n", "", "test_list", "=", "[", "l", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "for", "l", "in", "open", "(", "cfg", ".", "test_list", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "\n", "dev_list", "=", "[", "l", ".", "strip", "(", ")", ".", "lower", "(", ")", "\n", "for", "l", "in", "open", "(", "cfg", ".", "dev_list", ",", "'r'", ")", ".", "readlines", "(", ")", "]", "\n", "self", ".", "dev_files", ",", "self", ".", "test_files", "=", "{", "}", ",", "{", "}", "\n", "for", "fn", "in", "test_list", ":", "\n", "            ", "self", ".", "test_files", "[", "fn", ".", "replace", "(", "'.json'", ",", "''", ")", "]", "=", "1", "\n", "", "for", "fn", "in", "dev_list", ":", "\n", "            ", "self", ".", "dev_files", "[", "fn", ".", "replace", "(", "'.json'", ",", "''", ")", "]", "=", "1", "\n", "\n", "# for domain expanse aka. Cross domain", "\n", "", "self", ".", "exp_files", "=", "{", "}", "\n", "# if 'all' not in cfg.exp_domains:", "\n", "#     for domain in cfg.exp_domains:", "\n", "#         fn_list = self.domain_files.get(domain)", "\n", "#         if not fn_list:", "\n", "#             raise ValueError(", "\n", "#                 '[%s] is an invalid experiment setting' % domain)", "\n", "#         for fn in fn_list:", "\n", "#             self.exp_files[fn.replace('.json', '')] = 1", "\n", "all_domains_list", "=", "list", "(", "self", ".", "domain_files", ".", "keys", "(", ")", ")", "\n", "if", "'all'", "not", "in", "cfg", ".", "exp_domains", ":", "\n", "            ", "domains", "=", "self", ".", "get_exp_domains", "(", "cfg", ".", "exp_domains", ",", "all_domains_list", ")", "\n", "logging", ".", "info", "(", "domains", ")", "\n", "for", "domain", "in", "domains", ":", "\n", "                ", "fn_list", "=", "self", ".", "domain_files", ".", "get", "(", "domain", ")", "\n", "if", "not", "fn_list", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "'[%s] is an invalid experiment setting'", "%", "domain", ")", "\n", "", "for", "fn", "in", "fn_list", ":", "\n", "                    ", "self", ".", "exp_files", "[", "fn", ".", "replace", "(", "'.json'", ",", "''", ")", "]", "=", "1", "\n", "#", "\n", "\n", "", "", "", "self", ".", "_load_data", "(", ")", "\n", "\n", "if", "cfg", ".", "limit_bspn_vocab", ":", "\n", "            ", "self", ".", "bspn_masks", "=", "self", ".", "_construct_bspn_constraint", "(", ")", "\n", "", "if", "cfg", ".", "limit_aspn_vocab", ":", "\n", "            ", "self", ".", "aspn_masks", "=", "self", ".", "_construct_aspn_constraint", "(", ")", "\n", "\n", "", "self", ".", "multi_acts_record", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.get_exp_domains": [[302, 339], ["None"], "methods", ["None"], ["", "def", "get_exp_domains", "(", "self", ",", "exp_domains", ",", "all_domains_list", ")", ":", "\n", "        ", "if", "'hotel'", "in", "exp_domains", ":", "\n", "            ", "if", "'except'", "in", "exp_domains", ":", "\n", "# ['except', 'hotel']", "\n", "                ", "domains", "=", "[", "d", "for", "d", "in", "all_domains_list", "if", "'hotel'", "not", "in", "d", "and", "'multi'", "not", "in", "d", "]", "\n", "", "else", ":", "\n", "# ['hotel']", "\n", "                ", "domains", "=", "[", "'hotel_single'", ",", "'hotel_multi'", "]", "\n", "", "", "if", "'train'", "in", "exp_domains", ":", "\n", "            ", "if", "'except'", "in", "exp_domains", ":", "\n", "# ['except', 'train']", "\n", "                ", "domains", "=", "[", "d", "for", "d", "in", "all_domains_list", "if", "'train'", "not", "in", "d", "and", "'multi'", "not", "in", "d", "]", "\n", "", "else", ":", "\n", "# ['train']", "\n", "                ", "domains", "=", "[", "'train_single'", ",", "'train_multi'", "]", "\n", "", "", "if", "'attraction'", "in", "exp_domains", ":", "\n", "            ", "if", "'except'", "in", "exp_domains", ":", "\n", "# ['except', 'attraction']", "\n", "                ", "domains", "=", "[", "d", "for", "d", "in", "all_domains_list", "if", "'attraction'", "not", "in", "d", "and", "'multi'", "not", "in", "d", "]", "\n", "", "else", ":", "\n", "# ['attraction']", "\n", "                ", "domains", "=", "[", "'attraction_single'", ",", "'attraction_multi'", "]", "\n", "", "", "if", "'restaurant'", "in", "exp_domains", ":", "\n", "            ", "if", "'except'", "in", "exp_domains", ":", "\n", "# ['except', 'restaurant']", "\n", "                ", "domains", "=", "[", "d", "for", "d", "in", "all_domains_list", "if", "'restaurant'", "not", "in", "d", "and", "'multi'", "not", "in", "d", "]", "\n", "", "else", ":", "\n", "# ['restaurant']", "\n", "                ", "domains", "=", "[", "'restaurant_single'", ",", "'restaurant_multi'", "]", "\n", "", "", "if", "'taxi'", "in", "exp_domains", ":", "\n", "            ", "if", "'except'", "in", "exp_domains", ":", "\n", "# ['except', 'taxi']", "\n", "                ", "domains", "=", "[", "d", "for", "d", "in", "all_domains_list", "if", "'taxi'", "not", "in", "d", "and", "'multi'", "not", "in", "d", "]", "\n", "", "else", ":", "\n", "# ['taxi']", "\n", "                ", "domains", "=", "[", "'taxi_single'", ",", "'taxi_multi'", "]", "\n", "", "", "return", "domains", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.add_sepcial_tokens": [[340, 367], ["reader.MultiWozReader.vocab._word2idx.keys", "special_tokens.extend", "reader.MultiWozReader.tokenizer.add_special_tokens", "logging.info", "special_tokens.append", "special_tokens.append", "reader.MultiWozReader.tokenizer.encode", "word.startswith", "word.endswith", "special_tokens.append"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode"], ["", "def", "add_sepcial_tokens", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n            add special tokens to gpt tokenizer\n            serves a similar role of Vocab.construt()\n            make a dict of special tokens\n        \"\"\"", "\n", "special_tokens", "=", "[", "]", "\n", "for", "word", "in", "ontology", ".", "all_domains", "+", "[", "'general'", "]", ":", "\n", "            ", "word", "=", "'['", "+", "word", "+", "']'", "\n", "special_tokens", ".", "append", "(", "word", ")", "\n", "", "for", "word", "in", "ontology", ".", "all_acts", ":", "\n", "            ", "word", "=", "'['", "+", "word", "+", "']'", "\n", "special_tokens", ".", "append", "(", "word", ")", "\n", "# for word in ontology.all_slots:", "\n", "# to be determine whether slot should be [slot]", "\n", "# if slot, tokenizer having trouble decoding.", "\n", "# special_tokens.append(word)", "\n", "", "for", "word", "in", "self", ".", "vocab", ".", "_word2idx", ".", "keys", "(", ")", ":", "\n", "            ", "if", "word", ".", "startswith", "(", "'[value_'", ")", "and", "word", ".", "endswith", "(", "']'", ")", ":", "\n", "                ", "special_tokens", ".", "append", "(", "word", ")", "\n", "", "", "special_tokens", ".", "extend", "(", "ontology", ".", "special_tokens", ")", "\n", "\n", "special_tokens_dict", "=", "{", "'additional_special_tokens'", ":", "special_tokens", "}", "\n", "self", ".", "tokenizer", ".", "add_special_tokens", "(", "special_tokens_dict", ")", "\n", "logging", ".", "info", "(", "'Added special tokens to gpt tokenizer.'", ")", "\n", "\n", "cfg", ".", "pad_id", "=", "self", ".", "tokenizer", ".", "encode", "(", "'<pad>'", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._build_vocab": [[368, 374], ["utils.Vocab", "reader.MultiWozReader.vocab.load_vocab"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.load_vocab"], ["", "def", "_build_vocab", "(", "self", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "utils", ".", "Vocab", "(", "cfg", ".", "vocab_size", ")", "\n", "vp", "=", "cfg", ".", "vocab_path_train", "if", "cfg", ".", "mode", "==", "'train'", "or", "cfg", ".", "vocab_path_eval", "is", "None", "else", "cfg", ".", "vocab_path_eval", "\n", "# vp = cfg.vocab_path+'.json.freq.json'", "\n", "self", ".", "vocab", ".", "load_vocab", "(", "vp", ")", "\n", "return", "self", ".", "vocab", ".", "vocab_size", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._construct_bspn_constraint": [[375, 426], ["reader.MultiWozReader.slot_value_set.items", "list", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "slot_values.items", "bspn_masks.keys", "open", "bspn_masks.items", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "f.write", "bspn_masks[].append", "enumerate", "value.split", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.has_word", "bspn_masks[].append", "reader.MultiWozReader.vocab.has_word", "bspn_masks[].append", "len", "value.split", "reader.MultiWozReader.vocab.decode", "value.split", "reader.MultiWozReader.vocab.encode", "bspn_masks[].append", "bspn_masks[].append", "value.split", "reader.MultiWozReader.vocab.decode", "reader.MultiWozReader.vocab.encode", "int"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.has_word", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.has_word", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode"], ["", "def", "_construct_bspn_constraint", "(", "self", ")", ":", "\n", "        ", "bspn_masks", "=", "{", "}", "\n", "valid_domains", "=", "[", "'restaurant'", ",", "'hotel'", ",", "\n", "'attraction'", ",", "'train'", ",", "'taxi'", ",", "'hospital'", "]", "\n", "all_dom_codes", "=", "[", "self", ".", "vocab", ".", "encode", "(", "'['", "+", "d", "+", "']'", ")", "for", "d", "in", "valid_domains", "]", "\n", "all_slot_codes", "=", "[", "self", ".", "vocab", ".", "encode", "(", "s", ")", "for", "s", "in", "ontology", ".", "all_slots", "]", "\n", "bspn_masks", "[", "self", ".", "vocab", ".", "encode", "(", "\n", "'<go_b>'", ")", "]", "=", "all_dom_codes", "+", "[", "self", ".", "vocab", ".", "encode", "(", "'<eos_b>'", ")", ",", "0", "]", "\n", "bspn_masks", "[", "self", ".", "vocab", ".", "encode", "(", "'<eos_b>'", ")", "]", "=", "[", "self", ".", "vocab", ".", "encode", "(", "'<pad>'", ")", "]", "\n", "bspn_masks", "[", "self", ".", "vocab", ".", "encode", "(", "'<pad>'", ")", "]", "=", "[", "self", ".", "vocab", ".", "encode", "(", "'<pad>'", ")", "]", "\n", "for", "domain", ",", "slot_values", "in", "self", ".", "slot_value_set", ".", "items", "(", ")", ":", "\n", "            ", "if", "domain", "==", "'police'", ":", "\n", "                ", "continue", "\n", "", "dom_code", "=", "self", ".", "vocab", ".", "encode", "(", "'['", "+", "domain", "+", "']'", ")", "\n", "bspn_masks", "[", "dom_code", "]", "=", "[", "]", "\n", "for", "slot", ",", "values", "in", "slot_values", ".", "items", "(", ")", ":", "\n", "                ", "slot_code", "=", "self", ".", "vocab", ".", "encode", "(", "slot", ")", "\n", "if", "slot_code", "not", "in", "bspn_masks", ":", "\n", "                    ", "bspn_masks", "[", "slot_code", "]", "=", "[", "]", "\n", "", "if", "slot_code", "not", "in", "bspn_masks", "[", "dom_code", "]", ":", "\n", "                    ", "bspn_masks", "[", "dom_code", "]", ".", "append", "(", "slot_code", ")", "\n", "", "for", "value", "in", "values", ":", "\n", "                    ", "for", "idx", ",", "v", "in", "enumerate", "(", "value", ".", "split", "(", ")", ")", ":", "\n", "                        ", "if", "not", "self", ".", "vocab", ".", "has_word", "(", "v", ")", ":", "\n", "                            ", "continue", "\n", "", "v_code", "=", "self", ".", "vocab", ".", "encode", "(", "v", ")", "\n", "if", "v_code", "not", "in", "bspn_masks", ":", "\n", "# print(self.vocab._word2idx)", "\n", "                            ", "bspn_masks", "[", "v_code", "]", "=", "[", "]", "\n", "", "if", "idx", "==", "0", "and", "v_code", "not", "in", "bspn_masks", "[", "slot_code", "]", ":", "\n", "                            ", "bspn_masks", "[", "slot_code", "]", ".", "append", "(", "v_code", ")", "\n", "", "if", "idx", "==", "(", "len", "(", "value", ".", "split", "(", ")", ")", "-", "1", ")", ":", "\n", "                            ", "for", "w", "in", "all_dom_codes", "+", "all_slot_codes", ":", "\n", "                                ", "if", "self", ".", "vocab", ".", "encode", "(", "'<eos_b>'", ")", "not", "in", "bspn_masks", "[", "v_code", "]", ":", "\n", "                                    ", "bspn_masks", "[", "v_code", "]", ".", "append", "(", "\n", "self", ".", "vocab", ".", "encode", "(", "'<eos_b>'", ")", ")", "\n", "", "if", "w", "not", "in", "bspn_masks", "[", "v_code", "]", ":", "\n", "                                    ", "bspn_masks", "[", "v_code", "]", ".", "append", "(", "w", ")", "\n", "", "", "break", "\n", "", "if", "not", "self", ".", "vocab", ".", "has_word", "(", "value", ".", "split", "(", ")", "[", "idx", "+", "1", "]", ")", ":", "\n", "                            ", "continue", "\n", "", "next_v_code", "=", "self", ".", "vocab", ".", "encode", "(", "value", ".", "split", "(", ")", "[", "idx", "+", "1", "]", ")", "\n", "if", "next_v_code", "not", "in", "bspn_masks", "[", "v_code", "]", ":", "\n", "                            ", "bspn_masks", "[", "v_code", "]", ".", "append", "(", "next_v_code", ")", "\n", "", "", "", "", "", "bspn_masks", "[", "self", ".", "vocab", ".", "encode", "(", "'<unk>'", ")", "]", "=", "list", "(", "bspn_masks", ".", "keys", "(", ")", ")", "\n", "\n", "with", "open", "(", "'data/multi-woz-processed/bspn_masks.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "j", "in", "bspn_masks", ".", "items", "(", ")", ":", "\n", "                ", "f", ".", "write", "(", "self", ".", "vocab", ".", "decode", "(", "i", ")", "+", "': '", "+", "\n", "' '", ".", "join", "(", "[", "self", ".", "vocab", ".", "decode", "(", "int", "(", "m", ")", ")", "for", "m", "in", "j", "]", ")", "+", "'\\n'", ")", "\n", "", "", "return", "bspn_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._construct_aspn_constraint": [[427, 466], ["ontology.dialog_acts.items", "list", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "aspn_masks.keys", "open", "aspn_masks.items", "ontology.dialog_acts.keys", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.encode", "f.write", "reader.MultiWozReader.vocab.encode", "aspn_masks[].append", "reader.MultiWozReader.vocab.encode", "reader.MultiWozReader.vocab.decode", "reader.MultiWozReader.vocab.decode", "int"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "def", "_construct_aspn_constraint", "(", "self", ")", ":", "\n", "        ", "aspn_masks", "=", "{", "}", "\n", "aspn_masks", "=", "{", "}", "\n", "all_dom_codes", "=", "[", "self", ".", "vocab", ".", "encode", "(", "'['", "+", "d", "+", "']'", ")", "\n", "for", "d", "in", "ontology", ".", "dialog_acts", ".", "keys", "(", ")", "]", "\n", "all_act_codes", "=", "[", "self", ".", "vocab", ".", "encode", "(", "'['", "+", "a", "+", "']'", ")", "\n", "for", "a", "in", "ontology", ".", "dialog_act_params", "]", "\n", "all_slot_codes", "=", "[", "self", ".", "vocab", ".", "encode", "(", "s", ")", "\n", "for", "s", "in", "ontology", ".", "dialog_act_all_slots", "]", "\n", "aspn_masks", "[", "self", ".", "vocab", ".", "encode", "(", "\n", "'<go_a>'", ")", "]", "=", "all_dom_codes", "+", "[", "self", ".", "vocab", ".", "encode", "(", "'<eos_a>'", ")", ",", "0", "]", "\n", "aspn_masks", "[", "self", ".", "vocab", ".", "encode", "(", "'<eos_a>'", ")", "]", "=", "[", "self", ".", "vocab", ".", "encode", "(", "'<pad>'", ")", "]", "\n", "aspn_masks", "[", "self", ".", "vocab", ".", "encode", "(", "'<pad>'", ")", "]", "=", "[", "self", ".", "vocab", ".", "encode", "(", "'<pad>'", ")", "]", "\n", "# for d in all_dom_codes:", "\n", "#     aspn_masks[d] = all_act_codes", "\n", "for", "a", "in", "all_act_codes", ":", "\n", "            ", "aspn_masks", "[", "a", "]", "=", "all_dom_codes", "+", "all_slot_codes", "+", "[", "self", ".", "vocab", ".", "encode", "(", "'<eos_a>'", ")", "]", "\n", "", "for", "domain", ",", "acts", "in", "ontology", ".", "dialog_acts", ".", "items", "(", ")", ":", "\n", "            ", "dom_code", "=", "self", ".", "vocab", ".", "encode", "(", "'['", "+", "domain", "+", "']'", ")", "\n", "aspn_masks", "[", "dom_code", "]", "=", "[", "]", "\n", "for", "a", "in", "acts", ":", "\n", "                ", "act_code", "=", "self", ".", "vocab", ".", "encode", "(", "'['", "+", "a", "+", "']'", ")", "\n", "if", "act_code", "not", "in", "aspn_masks", "[", "dom_code", "]", ":", "\n", "                    ", "aspn_masks", "[", "dom_code", "]", ".", "append", "(", "act_code", ")", "\n", "# for a, slots in ontology.dialog_act_params.items():", "\n", "#     act_code = self.vocab.encode('['+a+']')", "\n", "#     slot_codes = [self.vocab.encode(s) for s in slots]", "\n", "#     aspn_masks[act_code] = all_dom_codes + slot_codes + [self.vocab.encode('<eos_a>')]", "\n", "", "", "", "for", "s", "in", "all_slot_codes", ":", "\n", "            ", "aspn_masks", "[", "s", "]", "=", "all_dom_codes", "+", "all_slot_codes", "+", "[", "self", ".", "vocab", ".", "encode", "(", "'<eos_a>'", ")", "]", "\n", "", "aspn_masks", "[", "self", ".", "vocab", ".", "encode", "(", "'<unk>'", ")", "]", "=", "list", "(", "aspn_masks", ".", "keys", "(", ")", ")", "\n", "\n", "with", "open", "(", "'data/multi-woz-processed/aspn_masks.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "j", "in", "aspn_masks", ".", "items", "(", ")", ":", "\n", "                ", "f", ".", "write", "(", "self", ".", "vocab", ".", "decode", "(", "i", ")", "+", "': '", "+", "\n", "' '", ".", "join", "(", "[", "self", ".", "vocab", ".", "decode", "(", "int", "(", "m", ")", ")", "for", "m", "in", "j", "]", ")", "+", "'\\n'", ")", "\n", "", "", "return", "aspn_masks", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._load_data": [[467, 534], ["random.shuffle", "logging.info", "os.path.exists", "json.loads", "reader.MultiWozReader.data.items", "os.path.join", "os.path.join", "logging.info", "json.loads", "json.loads", "logging.info", "json.loads", "reader.MultiWozReader.data.items", "json.dump", "open().read().lower", "len", "len", "len", "os.path.exists", "os.makedirs", "open().read().lower", "open().read", "open().read().lower", "open", "fn.replace.replace.replace", "reader.MultiWozReader.exp_files.get", "reader.MultiWozReader.dev_files.get", "fn.replace.replace.replace", "reader.MultiWozReader.exp_files.get", "reader.MultiWozReader.dev_files.get", "open().read", "reader.MultiWozReader.dev.append", "reader.MultiWozReader.test_files.get", "open().read", "open", "open().read", "reader.MultiWozReader.dev.append", "reader.MultiWozReader.test_files.get", "reader.MultiWozReader._get_encoded_data", "reader.MultiWozReader.test.append", "reader.MultiWozReader.train.append", "reader.MultiWozReader._get_encoded_data", "reader.MultiWozReader.test.append", "reader.MultiWozReader.train.append", "open", "reader.MultiWozReader._get_encoded_data", "reader.MultiWozReader._get_encoded_data", "open", "open", "reader.MultiWozReader._get_encoded_data", "reader.MultiWozReader._get_encoded_data"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._get_encoded_data", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._get_encoded_data", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._get_encoded_data", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._get_encoded_data", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._get_encoded_data", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._get_encoded_data"], ["", "def", "_load_data", "(", "self", ",", "save_temp", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        load processed data and encode, or load already encoded data\n        \"\"\"", "\n", "if", "save_temp", ":", "# save encoded data", "\n", "            ", "if", "'all'", "in", "cfg", ".", "exp_domains", ":", "\n", "                ", "encoded_file", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "data_path", ",", "'new_db_se_blank_encoded.data.json'", ")", "\n", "# encoded: no sos, se_encoded: sos and eos", "\n", "# db: add db results every turn", "\n", "", "else", ":", "\n", "                ", "xdomain_dir", "=", "'./experiments_Xdomain/data'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "xdomain_dir", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "xdomain_dir", ")", "\n", "", "encoded_file", "=", "os", ".", "path", ".", "join", "(", "xdomain_dir", ",", "'{}-encoded.data.json'", ".", "format", "(", "'-'", ".", "join", "(", "cfg", ".", "exp_domains", ")", ")", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "encoded_file", ")", ":", "\n", "                ", "logging", ".", "info", "(", "'Reading encoded data from {}'", ".", "format", "(", "encoded_file", ")", ")", "\n", "self", ".", "data", "=", "json", ".", "loads", "(", "\n", "open", "(", "cfg", ".", "data_path", "+", "cfg", ".", "data_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "lower", "(", ")", ")", "\n", "encoded_data", "=", "json", ".", "loads", "(", "open", "(", "encoded_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ")", "\n", "self", ".", "train", "=", "encoded_data", "[", "'train'", "]", "\n", "self", ".", "dev", "=", "encoded_data", "[", "'dev'", "]", "\n", "self", ".", "test", "=", "encoded_data", "[", "'test'", "]", "\n", "", "else", ":", "\n", "                ", "logging", ".", "info", "(", "'Encoding data now and save the encoded data in {}'", ".", "format", "(", "encoded_file", ")", ")", "\n", "# not exists, encode data and save", "\n", "self", ".", "data", "=", "json", ".", "loads", "(", "\n", "open", "(", "cfg", ".", "data_path", "+", "cfg", ".", "data_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "lower", "(", ")", ")", "\n", "self", ".", "train", ",", "self", ".", "dev", ",", "self", ".", "test", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "fn", ",", "dial", "in", "self", ".", "data", ".", "items", "(", ")", ":", "\n", "                    ", "if", "'.json'", "in", "fn", ":", "\n", "                        ", "fn", "=", "fn", ".", "replace", "(", "'.json'", ",", "''", ")", "\n", "", "if", "'all'", "in", "cfg", ".", "exp_domains", "or", "self", ".", "exp_files", ".", "get", "(", "fn", ")", ":", "\n", "                        ", "if", "self", ".", "dev_files", ".", "get", "(", "fn", ")", ":", "\n", "                            ", "self", ".", "dev", ".", "append", "(", "self", ".", "_get_encoded_data", "(", "fn", ",", "dial", ")", ")", "\n", "", "elif", "self", ".", "test_files", ".", "get", "(", "fn", ")", ":", "\n", "                            ", "self", ".", "test", ".", "append", "(", "self", ".", "_get_encoded_data", "(", "fn", ",", "dial", ")", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "train", ".", "append", "(", "self", ".", "_get_encoded_data", "(", "fn", ",", "dial", ")", ")", "\n", "\n", "# save encoded data", "\n", "", "", "", "encoded_data", "=", "{", "'train'", ":", "self", ".", "train", ",", "'dev'", ":", "self", ".", "dev", ",", "'test'", ":", "self", ".", "test", "}", "\n", "json", ".", "dump", "(", "encoded_data", ",", "open", "(", "encoded_file", ",", "'w'", ")", ",", "indent", "=", "2", ")", "\n", "\n", "", "", "else", ":", "# directly read processed data and encode", "\n", "            ", "self", ".", "data", "=", "json", ".", "loads", "(", "\n", "open", "(", "cfg", ".", "data_path", "+", "cfg", ".", "data_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "lower", "(", ")", ")", "\n", "self", ".", "train", ",", "self", ".", "dev", ",", "self", ".", "test", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "fn", ",", "dial", "in", "self", ".", "data", ".", "items", "(", ")", ":", "\n", "                ", "if", "'.json'", "in", "fn", ":", "\n", "                    ", "fn", "=", "fn", ".", "replace", "(", "'.json'", ",", "''", ")", "\n", "", "if", "'all'", "in", "cfg", ".", "exp_domains", "or", "self", ".", "exp_files", ".", "get", "(", "fn", ")", ":", "\n", "                    ", "if", "self", ".", "dev_files", ".", "get", "(", "fn", ")", ":", "\n", "                        ", "self", ".", "dev", ".", "append", "(", "self", ".", "_get_encoded_data", "(", "fn", ",", "dial", ")", ")", "\n", "", "elif", "self", ".", "test_files", ".", "get", "(", "fn", ")", ":", "\n", "                        ", "self", ".", "test", ".", "append", "(", "self", ".", "_get_encoded_data", "(", "fn", ",", "dial", ")", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "train", ".", "append", "(", "self", ".", "_get_encoded_data", "(", "fn", ",", "dial", ")", ")", "\n", "# if save_temp:", "\n", "#     json.dump(self.test, open(", "\n", "#         'data/multi-woz-analysis/test.encoded.json', 'w'), indent=2)", "\n", "#     self.vocab.save_vocab('data/multi-woz-analysis/vocab_temp')", "\n", "\n", "", "", "", "", "random", ".", "shuffle", "(", "self", ".", "train", ")", "\n", "# random.shuffle(self.dev)", "\n", "# random.shuffle(self.test)", "\n", "logging", ".", "info", "(", "'train size:{}, dev size:{}, test size:{}'", ".", "format", "(", "len", "(", "self", ".", "train", ")", ",", "len", "(", "self", ".", "dev", ")", ",", "len", "(", "self", ".", "test", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader._get_encoded_data": [[535, 611], ["enumerate", "reader.MultiWozReader.tokenizer.convert_tokens_to_ids", "reader.MultiWozReader.tokenizer.convert_tokens_to_ids", "reader.MultiWozReader.tokenizer.convert_tokens_to_ids", "reader.MultiWozReader.tokenizer.convert_tokens_to_ids", "reader.MultiWozReader.tokenizer.convert_tokens_to_ids", "reader.MultiWozReader.tokenizer.convert_tokens_to_ids", "reader.MultiWozReader.tokenizer.convert_tokens_to_ids", "t[].split", "reader.MultiWozReader.bspan_to_DBpointer", "reader.MultiWozReader.tokenizer.convert_tokens_to_ids", "encoded_dial.append", "reader.MultiWozReader.tokenizer.tokenize", "reader.MultiWozReader.tokenizer.tokenize", "reader.MultiWozReader.tokenizer.tokenize", "reader.MultiWozReader.tokenizer.tokenize", "reader.MultiWozReader.tokenizer.tokenize", "reader.MultiWozReader.tokenizer.tokenize", "reader.MultiWozReader.tokenizer.tokenize", "int", "t[].split", "reader.MultiWozReader.tokenizer.tokenize", "t[].split", "reader.MultiWozReader.multi_acts[].get", "reader.MultiWozReader.items", "str", "enc[].append", "reader.MultiWozReader.tokenizer.encode", "a.split"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_DBpointer", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode"], ["", "def", "_get_encoded_data", "(", "self", ",", "fn", ",", "dial", ")", ":", "\n", "        ", "encoded_dial", "=", "[", "]", "\n", "for", "idx", ",", "t", "in", "enumerate", "(", "dial", "[", "'log'", "]", ")", ":", "# tokenize to list of ids", "\n", "            ", "enc", "=", "{", "}", "\n", "enc", "[", "'dial_id'", "]", "=", "fn", "\n", "\n", "# enc['user'] = self.vocab.sentence_encode(t['user'].split() + ['<eos_u>'])", "\n", "# enc['usdx'] = self.vocab.sentence_encode(t['user_delex'].split() + ['<eos_u>'])", "\n", "# enc['resp'] = self.vocab.sentence_encode(t['resp'].split() + ['<eos_r>'])", "\n", "# enc['bspn'] = self.vocab.sentence_encode(t['constraint'].split() + ['<eos_b>'])", "\n", "# enc['bsdx'] = self.vocab.sentence_encode(t['cons_delex'].split() + ['<eos_b>'])", "\n", "# enc['aspn'] = self.vocab.sentence_encode(t['sys_act'].split() + ['<eos_a>'])", "\n", "# enc['dspn'] = self.vocab.sentence_encode(t['turn_domain'].split() + ['<eos_d>'])", "\n", "\n", "# use gpt tokenizer directly tokenize word list, prone to encode unknown words to |endoftext|", "\n", "# enc['user'] = self.tokenizer.encode(", "\n", "#     t['user'].split() + ['<eos_u>'])", "\n", "# enc['usdx'] = self.tokenizer.encode(", "\n", "#     t['user_delex'].split() + ['<eos_u>'])", "\n", "# enc['resp'] = self.tokenizer.encode(", "\n", "#     t['resp'].split() + ['<eos_r>'])", "\n", "# enc['bspn'] = self.tokenizer.encode(", "\n", "#     t['constraint'].split() + ['<eos_b>'])", "\n", "# enc['bsdx'] = self.tokenizer.encode(", "\n", "#     t['cons_delex'].split() + ['<eos_b>'])", "\n", "# enc['aspn'] = self.tokenizer.encode(", "\n", "#     t['sys_act'].split() + ['<eos_a>'])", "\n", "# enc['dspn'] = self.tokenizer.encode(", "\n", "#     t['turn_domain'].split() + ['<eos_d>'])", "\n", "\n", "\n", "# gpt use bpe to encode strings, very very slow. ~9min", "\n", "# in tokenization_utils.encode I find encode can pad_to_max_length, and reutrn tensor", "\n", "enc", "[", "'user'", "]", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "\n", "'<sos_u> '", "+", "\n", "t", "[", "'user'", "]", "+", "' <eos_u>'", ")", ")", "\n", "enc", "[", "'usdx'", "]", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "\n", "'<sos_u> '", "+", "\n", "t", "[", "'user'", "]", "+", "' <eos_u>'", ")", ")", "\n", "enc", "[", "'resp'", "]", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "\n", "'<sos_r> '", "+", "\n", "t", "[", "'resp'", "]", "+", "' <eos_r>'", ")", ")", "\n", "enc", "[", "'bspn'", "]", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "\n", "'<sos_b> '", "+", "\n", "t", "[", "'constraint'", "]", "+", "' <eos_b>'", ")", ")", "\n", "enc", "[", "'bsdx'", "]", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "\n", "'<sos_b> '", "+", "\n", "t", "[", "'cons_delex'", "]", "+", "' <eos_b>'", ")", ")", "\n", "enc", "[", "'aspn'", "]", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "\n", "'<sos_a> '", "+", "\n", "t", "[", "'sys_act'", "]", "+", "' <eos_a>'", ")", ")", "\n", "enc", "[", "'dspn'", "]", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "\n", "'<sos_d> '", "+", "\n", "t", "[", "'turn_domain'", "]", "+", "' <eos_d>'", ")", ")", "\n", "\n", "\n", "enc", "[", "'pointer'", "]", "=", "[", "int", "(", "i", ")", "for", "i", "in", "t", "[", "'pointer'", "]", ".", "split", "(", "','", ")", "]", "\n", "enc", "[", "'turn_domain'", "]", "=", "t", "[", "'turn_domain'", "]", ".", "split", "(", ")", "\n", "enc", "[", "'turn_num'", "]", "=", "t", "[", "'turn_num'", "]", "\n", "if", "cfg", ".", "multi_acts_training", ":", "\n", "                ", "enc", "[", "'aspn_aug'", "]", "=", "[", "]", "\n", "if", "fn", "in", "self", ".", "multi_acts", ":", "\n", "                    ", "turn_ma", "=", "self", ".", "multi_acts", "[", "fn", "]", ".", "get", "(", "str", "(", "idx", ")", ",", "{", "}", ")", "\n", "for", "act_type", ",", "act_spans", "in", "turn_ma", ".", "items", "(", ")", ":", "\n", "                        ", "enc", "[", "'aspn_aug'", "]", ".", "append", "(", "[", "self", ".", "tokenizer", ".", "encode", "(", "\n", "a", ".", "split", "(", ")", "+", "[", "'<eos_a>'", "]", ")", "for", "a", "in", "act_spans", "]", ")", "\n", "\n", "# add db results to enc, at every turn", "\n", "", "", "", "db_pointer", "=", "self", ".", "bspan_to_DBpointer", "(", "t", "[", "'constraint'", "]", ",", "t", "[", "'turn_domain'", "]", ".", "split", "(", ")", ")", "\n", "# db_tokens = ['<sos_db>', '<eos_db>', '[db_nores]', '[db_0]', '[db_1]', '[db_2]', '[db_3]']", "\n", "enc", "[", "'db'", "]", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenizer", ".", "tokenize", "(", "\n", "'<sos_db> '", "+", "\n", "db_pointer", "+", "' <eos_db>'", ")", ")", "\n", "\n", "encoded_dial", ".", "append", "(", "enc", ")", "\n", "", "return", "encoded_dial", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_constraint_dict": [[612, 660], ["len", "enumerate", "isinstance", "bspan.split", "reader.MultiWozReader.vocab.decode", "type", "constraint_dict.get", "reader.MultiWozReader.vocab.decode", "vt_collect.append", "type", "reader.MultiWozReader.vocab.decode", "reader.MultiWozReader.vocab.decode", "type", "type"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "def", "bspan_to_constraint_dict", "(", "self", ",", "bspan", ",", "bspn_mode", "=", "'bspn'", ")", ":", "\n", "        ", "bspan", "=", "bspan", ".", "split", "(", ")", "if", "isinstance", "(", "bspan", ",", "str", ")", "else", "bspan", "\n", "constraint_dict", "=", "{", "}", "\n", "domain", "=", "None", "\n", "conslen", "=", "len", "(", "bspan", ")", "\n", "for", "idx", ",", "cons", "in", "enumerate", "(", "bspan", ")", ":", "\n", "            ", "cons", "=", "self", ".", "vocab", ".", "decode", "(", "cons", ")", "if", "type", "(", "cons", ")", "is", "not", "str", "else", "cons", "\n", "if", "cons", "==", "'<eos_b>'", ":", "\n", "                ", "break", "\n", "", "if", "'['", "in", "cons", ":", "\n", "                ", "if", "cons", "[", "1", ":", "-", "1", "]", "not", "in", "ontology", ".", "all_domains", ":", "\n", "                    ", "continue", "\n", "", "domain", "=", "cons", "[", "1", ":", "-", "1", "]", "\n", "", "elif", "cons", "in", "ontology", ".", "get_slot", ":", "\n", "                ", "if", "domain", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "cons", "==", "'people'", ":", "\n", "# handle confusion of value name \"people's portraits...\" and slot people", "\n", "                    ", "try", ":", "\n", "                        ", "ns", "=", "bspan", "[", "idx", "+", "1", "]", "\n", "ns", "=", "self", ".", "vocab", ".", "decode", "(", "ns", ")", "if", "type", "(", "\n", "ns", ")", "is", "not", "str", "else", "ns", "\n", "if", "ns", "==", "\"'s\"", ":", "\n", "                            ", "continue", "\n", "", "", "except", ":", "\n", "                        ", "continue", "\n", "", "", "if", "not", "constraint_dict", ".", "get", "(", "domain", ")", ":", "\n", "                    ", "constraint_dict", "[", "domain", "]", "=", "{", "}", "\n", "", "if", "bspn_mode", "==", "'bsdx'", ":", "\n", "                    ", "constraint_dict", "[", "domain", "]", "[", "cons", "]", "=", "1", "\n", "continue", "\n", "", "vidx", "=", "idx", "+", "1", "\n", "if", "vidx", "==", "conslen", ":", "\n", "                    ", "break", "\n", "", "vt_collect", "=", "[", "]", "\n", "vt", "=", "bspan", "[", "vidx", "]", "\n", "vt", "=", "self", ".", "vocab", ".", "decode", "(", "vt", ")", "if", "type", "(", "vt", ")", "is", "not", "str", "else", "vt", "\n", "while", "vidx", "<", "conslen", "and", "vt", "!=", "'<eos_b>'", "and", "'['", "not", "in", "vt", "and", "vt", "not", "in", "ontology", ".", "get_slot", ":", "\n", "                    ", "vt_collect", ".", "append", "(", "vt", ")", "\n", "vidx", "+=", "1", "\n", "if", "vidx", "==", "conslen", ":", "\n", "                        ", "break", "\n", "", "vt", "=", "bspan", "[", "vidx", "]", "\n", "vt", "=", "self", ".", "vocab", ".", "decode", "(", "vt", ")", "if", "type", "(", "vt", ")", "is", "not", "str", "else", "vt", "\n", "", "if", "vt_collect", ":", "\n", "                    ", "constraint_dict", "[", "domain", "]", "[", "cons", "]", "=", "' '", ".", "join", "(", "vt_collect", ")", "\n", "\n", "", "", "", "return", "constraint_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_DBpointer": [[661, 671], ["reader.MultiWozReader.bspan_to_constraint_dict", "reader.MultiWozReader.db.get_match_num", "reader.MultiWozReader.db.addDBIndicator", "match_dom.startswith", "len"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_constraint_dict", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.get_match_num", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.addDBIndicator"], ["", "def", "bspan_to_DBpointer", "(", "self", ",", "bspan", ",", "turn_domain", ")", ":", "\n", "        ", "constraint_dict", "=", "self", ".", "bspan_to_constraint_dict", "(", "bspan", ")", "\n", "# print(constraint_dict)", "\n", "matnums", "=", "self", ".", "db", ".", "get_match_num", "(", "constraint_dict", ")", "\n", "match_dom", "=", "turn_domain", "[", "0", "]", "if", "len", "(", "turn_domain", ")", "==", "1", "else", "turn_domain", "[", "1", "]", "\n", "match_dom", "=", "match_dom", "[", "1", ":", "-", "1", "]", "if", "match_dom", ".", "startswith", "(", "'['", ")", "else", "match_dom", "\n", "match", "=", "matnums", "[", "match_dom", "]", "\n", "# vector = self.db.addDBPointer(match_dom, match)", "\n", "vector", "=", "self", ".", "db", ".", "addDBIndicator", "(", "match_dom", ",", "match", ")", "\n", "return", "vector", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.aspan_to_act_list": [[672, 706], ["len", "enumerate", "isinstance", "aspan.split", "reader.MultiWozReader.vocab.decode", "type", "acts.append", "reader.MultiWozReader.vocab.decode", "acts.append", "acts.append", "type", "reader.MultiWozReader.vocab.decode", "type"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "def", "aspan_to_act_list", "(", "self", ",", "aspan", ")", ":", "\n", "        ", "aspan", "=", "aspan", ".", "split", "(", ")", "if", "isinstance", "(", "aspan", ",", "str", ")", "else", "aspan", "\n", "acts", "=", "[", "]", "\n", "domain", "=", "None", "\n", "conslen", "=", "len", "(", "aspan", ")", "\n", "for", "idx", ",", "cons", "in", "enumerate", "(", "aspan", ")", ":", "\n", "            ", "cons", "=", "self", ".", "vocab", ".", "decode", "(", "cons", ")", "if", "type", "(", "cons", ")", "is", "not", "str", "else", "cons", "\n", "if", "cons", "==", "'<eos_a>'", ":", "\n", "                ", "break", "\n", "", "if", "'['", "in", "cons", "and", "cons", "[", "1", ":", "-", "1", "]", "in", "ontology", ".", "dialog_acts", ":", "\n", "                ", "domain", "=", "cons", "[", "1", ":", "-", "1", "]", "\n", "\n", "", "elif", "'['", "in", "cons", "and", "cons", "[", "1", ":", "-", "1", "]", "in", "ontology", ".", "dialog_act_params", ":", "\n", "                ", "if", "domain", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "vidx", "=", "idx", "+", "1", "\n", "if", "vidx", "==", "conslen", ":", "\n", "                    ", "acts", ".", "append", "(", "domain", "+", "'-'", "+", "cons", "[", "1", ":", "-", "1", "]", "+", "'-none'", ")", "\n", "break", "\n", "", "vt", "=", "aspan", "[", "vidx", "]", "\n", "vt", "=", "self", ".", "vocab", ".", "decode", "(", "vt", ")", "if", "type", "(", "vt", ")", "is", "not", "str", "else", "vt", "\n", "no_param_act", "=", "True", "\n", "while", "vidx", "<", "conslen", "and", "vt", "!=", "'<eos_a>'", "and", "'['", "not", "in", "vt", ":", "\n", "                    ", "no_param_act", "=", "False", "\n", "acts", ".", "append", "(", "domain", "+", "'-'", "+", "cons", "[", "1", ":", "-", "1", "]", "+", "'-'", "+", "vt", ")", "\n", "vidx", "+=", "1", "\n", "if", "vidx", "==", "conslen", ":", "\n", "                        ", "break", "\n", "", "vt", "=", "aspan", "[", "vidx", "]", "\n", "vt", "=", "self", ".", "vocab", ".", "decode", "(", "vt", ")", "if", "type", "(", "vt", ")", "is", "not", "str", "else", "vt", "\n", "", "if", "no_param_act", ":", "\n", "                    ", "acts", ".", "append", "(", "domain", "+", "'-'", "+", "cons", "[", "1", ":", "-", "1", "]", "+", "'-none'", ")", "\n", "\n", "", "", "", "return", "acts", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.dspan_to_domain": [[707, 717], ["isinstance", "dspan.split", "reader.MultiWozReader.vocab.decode", "type"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "def", "dspan_to_domain", "(", "self", ",", "dspan", ")", ":", "\n", "        ", "domains", "=", "{", "}", "\n", "dspan", "=", "dspan", ".", "split", "(", ")", "if", "isinstance", "(", "dspan", ",", "str", ")", "else", "dspan", "\n", "for", "d", "in", "dspan", ":", "\n", "            ", "dom", "=", "self", ".", "vocab", ".", "decode", "(", "d", ")", "if", "type", "(", "d", ")", "is", "not", "str", "else", "d", "\n", "if", "dom", "!=", "'<eos_d>'", ":", "\n", "                ", "domains", "[", "dom", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "return", "domains", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.convert_turn_eval": [[719, 781], ["len", "reader.MultiWozReader.tokenizer.encode", "reader.MultiWozReader.tokenizer.encode"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode"], ["", "def", "convert_turn_eval", "(", "self", ",", "turn", ",", "pv_turn", ",", "first_turn", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        input: [all previous ubar, U_t, B_t, A_t] predict R_t\n            firts turn: [U_t, B_t, A_t] predict R_t\n\n        regarding the context, all previous ubar is too slow, try the previous ubar\n        \"\"\"", "\n", "inputs", "=", "{", "}", "\n", "\n", "context_list", "=", "[", "]", "\n", "# predict_list = []", "\n", "prompt", "=", "''", "\n", "if", "cfg", ".", "use_true_curr_bspn", ":", "\n", "            ", "if", "cfg", ".", "use_true_curr_aspn", ":", "# only predict resp", "\n", "                ", "context_list", "=", "[", "'user'", ",", "'bspn'", ",", "'db'", ",", "'aspn'", "]", "\n", "# context_list = ['user','aspn'] # predict resp based on current aspn and bspn", "\n", "# predict_list = ['resp']", "\n", "prompt", "=", "'<sos_r>'", "\n", "", "else", ":", "# predicted aspn", "\n", "                ", "context_list", "=", "[", "'user'", ",", "'bspn'", ",", "'db'", "]", "\n", "# predict_list = ['aspn', 'resp']", "\n", "prompt", "=", "'<sos_a>'", "\n", "", "", "else", ":", "# predict bspn aspn resp. db are not predicted. this part tbd.", "\n", "            ", "context_list", "=", "[", "'user'", "]", "\n", "# predict_list = ['bspn', 'db','aspn', 'resp']", "\n", "prompt", "=", "'<sos_b>'", "\n", "\n", "", "if", "first_turn", ":", "\n", "            ", "context", "=", "[", "]", "\n", "for", "c", "in", "context_list", ":", "\n", "                ", "context", "+=", "turn", "[", "c", "]", "\n", "\n", "", "inputs", "[", "'context'", "]", "=", "context", "+", "self", ".", "tokenizer", ".", "encode", "(", "[", "prompt", "]", ")", "\n", "inputs", "[", "'labels'", "]", "=", "context", "\n", "# e43 with BABAU", "\n", "# inputs['labels'] = []", "\n", "\n", "", "else", ":", "\n", "            ", "context", "=", "[", "]", "\n", "for", "c", "in", "context_list", ":", "\n", "                ", "context", "+=", "turn", "[", "c", "]", "\n", "\n", "", "pv_context", "=", "pv_turn", "[", "'labels'", "]", "+", "pv_turn", "[", "'bspn'", "]", "+", "pv_turn", "[", "'db'", "]", "+", "pv_turn", "[", "'aspn'", "]", "+", "pv_turn", "[", "'resp'", "]", "\n", "# e43 with BABAU", "\n", "# pv_context = pv_turn['labels'] + pv_turn['bspn'] + pv_turn['db'] + pv_turn['aspn']", "\n", "\n", "# prompt response, add sos_r", "\n", "inputs", "[", "'context'", "]", "=", "pv_context", "+", "context", "+", "self", ".", "tokenizer", ".", "encode", "(", "[", "prompt", "]", ")", "\n", "# context just the current turn", "\n", "# inputs['context'] = context + self.tokenizer.encode([prompt])", "\n", "# context just the current action", "\n", "\n", "if", "cfg", ".", "use_all_previous_context", ":", "\n", "                ", "inputs", "[", "'labels'", "]", "=", "pv_context", "+", "context", "# use all previous ubar history", "\n", "", "else", ":", "\n", "                ", "inputs", "[", "'labels'", "]", "=", "context", "# use privosu trun", "\n", "\n", "", "", "if", "len", "(", "inputs", "[", "'context'", "]", ")", ">", "900", ":", "\n", "# print('len exceeds 900')", "\n", "            ", "inputs", "[", "'context'", "]", "=", "inputs", "[", "'context'", "]", "[", "-", "900", ":", "]", "\n", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.convert_turn_eval_URURU": [[782, 845], ["len", "reader.MultiWozReader.tokenizer.encode", "reader.MultiWozReader.tokenizer.encode"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.encode"], ["", "def", "convert_turn_eval_URURU", "(", "self", ",", "turn", ",", "pv_turn", ",", "first_turn", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        input: [all previous U_t, R_t] predict R_t\n            firts turn: [U_t, B_t, A_t] predict R_t\n\n        regarding the context, all previous ubar is too slow, try the previous ubar\n        \"\"\"", "\n", "inputs", "=", "{", "}", "\n", "\n", "context_list", "=", "[", "]", "\n", "predict_list", "=", "[", "]", "\n", "prompt", "=", "''", "\n", "if", "cfg", ".", "use_true_curr_bspn", ":", "\n", "            ", "if", "cfg", ".", "use_true_curr_aspn", ":", "# only predict resp", "\n", "                ", "context_list", "=", "[", "'user'", ",", "'bspn'", ",", "'db'", ",", "'aspn'", "]", "\n", "# context_list = ['user','aspn'] # predict resp based on current aspn and bspn", "\n", "predict_list", "=", "[", "'resp'", "]", "\n", "prompt", "=", "'<sos_r>'", "\n", "", "else", ":", "# predicted aspn", "\n", "                ", "context_list", "=", "[", "'user'", ",", "'bspn'", ",", "'db'", "]", "\n", "predict_list", "=", "[", "'aspn'", ",", "'resp'", "]", "\n", "prompt", "=", "'<sos_a>'", "\n", "", "", "else", ":", "# predict bspn aspn resp. db are not predicted. this part tbd.", "\n", "            ", "context_list", "=", "[", "'user'", "]", "\n", "predict_list", "=", "[", "'bspn'", ",", "'db'", ",", "'aspn'", ",", "'resp'", "]", "\n", "prompt", "=", "'<sos_b>'", "\n", "\n", "", "if", "first_turn", ":", "\n", "            ", "context", "=", "[", "]", "\n", "for", "c", "in", "context_list", ":", "\n", "                ", "context", "+=", "turn", "[", "c", "]", "\n", "\n", "# prompt response, add sos_r", "\n", "", "inputs", "[", "'context'", "]", "=", "context", "+", "self", ".", "tokenizer", ".", "encode", "(", "[", "prompt", "]", ")", "\n", "\n", "# labels = []", "\n", "# for p in predict_list:", "\n", "#     labels += turn[p]", "\n", "# inputs['labels'] = context + labels # or just labels", "\n", "inputs", "[", "'labels'", "]", "=", "turn", "[", "'user'", "]", "\n", "", "else", ":", "\n", "            ", "context", "=", "[", "]", "\n", "for", "c", "in", "context_list", ":", "\n", "                ", "context", "+=", "turn", "[", "c", "]", "\n", "\n", "", "pv_context", "=", "pv_turn", "[", "'labels'", "]", "+", "pv_turn", "[", "'resp'", "]", "\n", "\n", "# prompt response, add sos_r", "\n", "inputs", "[", "'context'", "]", "=", "pv_context", "+", "context", "+", "self", ".", "tokenizer", ".", "encode", "(", "[", "prompt", "]", ")", "\n", "# context just the current turn", "\n", "# inputs['context'] = context + self.tokenizer.encode([prompt])", "\n", "# context just the current action", "\n", "\n", "if", "cfg", ".", "use_all_previous_context", ":", "\n", "                ", "inputs", "[", "'labels'", "]", "=", "pv_context", "+", "context", "# use all previous ubar history", "\n", "", "else", ":", "\n", "                ", "inputs", "[", "'labels'", "]", "=", "context", "# use privosu trun", "\n", "\n", "", "", "if", "len", "(", "inputs", "[", "'context'", "]", ")", ">", "900", ":", "\n", "# print('len exceeds 900')", "\n", "            ", "inputs", "[", "'context'", "]", "=", "inputs", "[", "'context'", "]", "[", "-", "900", ":", "]", "\n", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.convert_batch_session": [[847, 869], ["enumerate", "utils.padSeqs_gpt", "enumerate", "contexts.append", "context.extend"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.padSeqs_gpt"], ["", "def", "convert_batch_session", "(", "self", ",", "dial_batch", ")", ":", "\n", "        ", "\"\"\"\n        convert the whole session for training\n        concat [U_0, B_0, A_0, R_0, ... , U_n, B_n, A_n, R_n]\n\n        try: [user, bspn, aspn, resp]\n        or\n        try: [user, bspn, db, aspn, resp]\n        \"\"\"", "\n", "inputs", "=", "{", "}", "\n", "contexts", "=", "[", "]", "\n", "cell_list", "=", "[", "'user'", ",", "'bspn'", ",", "'db'", ",", "'aspn'", ",", "'resp'", "]", "\n", "for", "idx", ",", "dial", "in", "enumerate", "(", "dial_batch", ")", ":", "\n", "            ", "context", "=", "[", "]", "\n", "for", "turn_num", ",", "turn", "in", "enumerate", "(", "dial", ")", ":", "\n", "                ", "for", "cell", "in", "cell_list", ":", "\n", "                    ", "context", ".", "extend", "(", "turn", "[", "cell", "]", ")", "\n", "", "", "contexts", ".", "append", "(", "context", ")", "\n", "\n", "", "inputs", "[", "'contexts'", "]", "=", "contexts", "\n", "inputs", "[", "'contexts_np'", "]", ",", "inputs", "[", "'lengths'", "]", "=", "utils", ".", "padSeqs_gpt", "(", "inputs", "[", "'contexts'", "]", ",", "cfg", ".", "pad_id", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.convert_batch_turn": [[870, 911], ["zip", "utils.padSeqs_gpt", "zip", "utils.padSeqs_gpt", "contexts.append", "labels.append", "contexts.append", "labels.append"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.padSeqs_gpt", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.padSeqs_gpt"], ["", "def", "convert_batch_turn", "(", "self", ",", "turn_batch", ",", "pv_batch", ",", "first_turn", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        URURU\n        convert the current and the last turn\n        concat [U_0,R_0,...,U_{t-1}, R_{t-1}, U_t, B_t, A_t, R_t]\n        firts turn: [U_t, B_t, A_t, R_t]\n        try: [user, bspn, db, aspn, resp]\n\n        \"\"\"", "\n", "inputs", "=", "{", "}", "\n", "if", "first_turn", ":", "\n", "            ", "contexts", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "batch_zipped", "=", "zip", "(", "\n", "turn_batch", "[", "'user'", "]", ",", "turn_batch", "[", "'bspn'", "]", ",", "turn_batch", "[", "'db'", "]", ",", "turn_batch", "[", "'aspn'", "]", ",", "turn_batch", "[", "'resp'", "]", ")", "\n", "for", "u", ",", "b", ",", "db", ",", "a", ",", "r", "in", "batch_zipped", ":", "\n", "                ", "context", "=", "u", "+", "b", "+", "db", "+", "a", "+", "r", "\n", "contexts", ".", "append", "(", "context", ")", "\n", "label", "=", "u", "+", "r", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "inputs", "[", "'contexts'", "]", "=", "contexts", "\n", "inputs", "[", "'contexts_np'", "]", ",", "inputs", "[", "'lengths'", "]", "=", "utils", ".", "padSeqs_gpt", "(", "inputs", "[", "'contexts'", "]", ",", "cfg", ".", "pad_id", ")", "\n", "\n", "inputs", "[", "'labels'", "]", "=", "labels", "\n", "", "else", ":", "\n", "            ", "contexts", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "batch_zipped", "=", "zip", "(", "pv_batch", ",", "\n", "turn_batch", "[", "'user'", "]", ",", "turn_batch", "[", "'bspn'", "]", ",", "turn_batch", "[", "'db'", "]", ",", "turn_batch", "[", "'aspn'", "]", ",", "turn_batch", "[", "'resp'", "]", ")", "\n", "for", "ur", ",", "u", ",", "b", ",", "db", ",", "a", ",", "r", "in", "batch_zipped", ":", "\n", "                ", "context", "=", "ur", "+", "u", "+", "b", "+", "db", "+", "a", "+", "r", "\n", "contexts", ".", "append", "(", "context", ")", "\n", "label", "=", "ur", "+", "u", "+", "r", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "inputs", "[", "'contexts'", "]", "=", "contexts", "\n", "contexts_np", ",", "lengths", "=", "utils", ".", "padSeqs_gpt", "(", "inputs", "[", "'contexts'", "]", ",", "cfg", ".", "pad_id", ")", "\n", "inputs", "[", "'contexts_np'", "]", "=", "contexts_np", "\n", "inputs", "[", "'lengths'", "]", "=", "lengths", "\n", "\n", "inputs", "[", "'labels'", "]", "=", "labels", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.convert_batch_gpt": [[912, 943], ["zip", "utils.padSeqs_gpt", "zip", "utils.padSeqs_gpt", "contexts.append", "contexts.append"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.padSeqs_gpt", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.padSeqs_gpt"], ["", "def", "convert_batch_gpt", "(", "self", ",", "turn_batch", ",", "pv_batch", ",", "first_turn", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        convert the current and the last turn\n        concat [U_{t-1}, B_{t-1}, A_{t-1}, R_{t-1}, U_t, B_t, A_t, R_t]\n        firts turn: [U_t, B_t, A_t, R_t]\n        try: [usdx, bspn, aspn, resp]\n\n        \"\"\"", "\n", "inputs", "=", "{", "}", "\n", "if", "first_turn", ":", "\n", "            ", "contexts", "=", "[", "]", "\n", "batch_zipped", "=", "zip", "(", "\n", "turn_batch", "[", "'usdx'", "]", ",", "turn_batch", "[", "'bspn'", "]", ",", "turn_batch", "[", "'aspn'", "]", ",", "turn_batch", "[", "'resp'", "]", ")", "\n", "for", "u", ",", "b", ",", "a", ",", "r", "in", "batch_zipped", ":", "\n", "                ", "context", "=", "u", "+", "b", "+", "a", "+", "r", "\n", "contexts", ".", "append", "(", "context", ")", "\n", "", "inputs", "[", "'contexts'", "]", "=", "contexts", "\n", "# padSeqs to make [UBAR] the same length", "\n", "inputs", "[", "'contexts_np'", "]", ",", "inputs", "[", "'lengths'", "]", "=", "utils", ".", "padSeqs_gpt", "(", "inputs", "[", "'contexts'", "]", ",", "cfg", ".", "pad_id", ")", "\n", "", "else", ":", "\n", "            ", "contexts", "=", "[", "]", "\n", "batch_zipped", "=", "zip", "(", "pv_batch", "[", "'pv_usdx'", "]", ",", "pv_batch", "[", "'pv_bspn'", "]", ",", "pv_batch", "[", "'pv_aspn'", "]", ",", "pv_batch", "[", "'pv_resp'", "]", ",", "\n", "turn_batch", "[", "'usdx'", "]", ",", "turn_batch", "[", "'bspn'", "]", ",", "turn_batch", "[", "'aspn'", "]", ",", "turn_batch", "[", "'resp'", "]", ")", "\n", "for", "pu", ",", "pb", ",", "pa", ",", "pr", ",", "u", ",", "b", ",", "a", ",", "r", "in", "batch_zipped", ":", "\n", "                ", "context", "=", "pu", "+", "pb", "+", "pa", "+", "pr", "+", "u", "+", "b", "+", "a", "+", "r", "\n", "contexts", ".", "append", "(", "context", ")", "\n", "", "inputs", "[", "'contexts'", "]", "=", "contexts", "\n", "contexts_np", ",", "lengths", "=", "utils", ".", "padSeqs_gpt", "(", "inputs", "[", "'contexts'", "]", ",", "cfg", ".", "pad_id", ")", "\n", "inputs", "[", "'contexts_np'", "]", "=", "contexts_np", "\n", "inputs", "[", "'lengths'", "]", "=", "lengths", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.convert_batch": [[944, 1020], ["numpy.array", "py_prev.items", "py_prev.items", "utils.padSeqs", "enumerate", "len", "numpy.array", "numpy.array", "utils.padSeqs", "copy.deepcopy", "utils.padSeqs", "copy.deepcopy", "random.shuffle", "multi_aspn.append", "inputs[].append", "range", "len", "multi_aspn.append", "inputs[].append"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.padSeqs", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.padSeqs", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.padSeqs"], ["", "def", "convert_batch", "(", "self", ",", "py_batch", ",", "py_prev", ",", "first_turn", "=", "False", ")", ":", "\n", "        ", "inputs", "=", "{", "}", "\n", "if", "first_turn", ":", "\n", "            ", "for", "item", ",", "py_list", "in", "py_prev", ".", "items", "(", ")", ":", "\n", "                ", "batch_size", "=", "len", "(", "py_batch", "[", "'user'", "]", ")", "\n", "inputs", "[", "item", "+", "'_np'", "]", "=", "np", ".", "array", "(", "[", "[", "1", "]", "]", "*", "batch_size", ")", "\n", "inputs", "[", "item", "+", "'_unk_np'", "]", "=", "np", ".", "array", "(", "[", "[", "1", "]", "]", "*", "batch_size", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "item", ",", "py_list", "in", "py_prev", ".", "items", "(", ")", ":", "\n", "                ", "if", "py_list", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "not", "cfg", ".", "enable_aspn", "and", "'aspn'", "in", "item", ":", "\n", "                    ", "continue", "\n", "", "if", "not", "cfg", ".", "enable_bspn", "and", "'bspn'", "in", "item", ":", "\n", "                    ", "continue", "\n", "", "if", "not", "cfg", ".", "enable_dspn", "and", "'dspn'", "in", "item", ":", "\n", "                    ", "continue", "\n", "", "prev_np", "=", "utils", ".", "padSeqs", "(", "\n", "py_list", ",", "truncated", "=", "cfg", ".", "truncated", ",", "trunc_method", "=", "'pre'", ")", "\n", "inputs", "[", "item", "+", "'_np'", "]", "=", "prev_np", "\n", "if", "item", "in", "[", "'pv_resp'", ",", "'pv_bspn'", "]", ":", "\n", "                    ", "inputs", "[", "item", "+", "'_unk_np'", "]", "=", "deepcopy", "(", "inputs", "[", "item", "+", "'_np'", "]", ")", "\n", "# <unk>, restrict vocab size to 3k, map ids>3k to <unk>", "\n", "inputs", "[", "item", "+", "'_unk_np'", "]", "[", "inputs", "[", "item", "+", "'_unk_np'", "]", "\n", ">=", "self", ".", "vocab_size", "]", "=", "2", "\n", "", "else", ":", "\n", "                    ", "inputs", "[", "item", "+", "'_unk_np'", "]", "=", "inputs", "[", "item", "+", "'_np'", "]", "\n", "\n", "", "", "", "for", "item", "in", "[", "'user'", ",", "'usdx'", ",", "'resp'", ",", "'bspn'", ",", "'aspn'", ",", "'bsdx'", ",", "'dspn'", "]", ":", "\n", "            ", "if", "not", "cfg", ".", "enable_aspn", "and", "item", "==", "'aspn'", ":", "\n", "                ", "continue", "\n", "", "if", "not", "cfg", ".", "enable_bspn", "and", "item", "==", "'bspn'", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "not", "cfg", ".", "enable_dspn", "and", "item", "==", "'dspn'", ":", "\n", "                ", "continue", "\n", "", "py_list", "=", "py_batch", "[", "item", "]", "\n", "trunc_method", "=", "'post'", "if", "item", "==", "'resp'", "else", "'pre'", "\n", "# max_length = cfg.max_nl_length if item in ['user', 'usdx', 'resp'] else cfg.max_span_length", "\n", "inputs", "[", "item", "+", "'_np'", "]", "=", "utils", ".", "padSeqs", "(", "\n", "py_list", ",", "truncated", "=", "cfg", ".", "truncated", ",", "trunc_method", "=", "trunc_method", ")", "\n", "if", "item", "in", "[", "'user'", ",", "'usdx'", ",", "'resp'", ",", "'bspn'", "]", ":", "\n", "                ", "inputs", "[", "item", "+", "'_unk_np'", "]", "=", "deepcopy", "(", "inputs", "[", "item", "+", "'_np'", "]", ")", "\n", "inputs", "[", "item", "+", "'_unk_np'", "]", "[", "inputs", "[", "item", "+", "'_unk_np'", "]", "\n", ">=", "self", ".", "vocab_size", "]", "=", "2", "# <unk>", "\n", "", "else", ":", "\n", "                ", "inputs", "[", "item", "+", "'_unk_np'", "]", "=", "inputs", "[", "item", "+", "'_np'", "]", "\n", "\n", "", "", "if", "cfg", ".", "multi_acts_training", "and", "cfg", ".", "mode", "==", "'train'", ":", "\n", "            ", "inputs", "[", "'aspn_bidx'", "]", ",", "multi_aspn", "=", "[", "]", ",", "[", "]", "\n", "for", "bidx", ",", "aspn_type_list", "in", "enumerate", "(", "py_batch", "[", "'aspn_aug'", "]", ")", ":", "\n", "                ", "if", "aspn_type_list", ":", "\n", "                    ", "for", "aspn_list", "in", "aspn_type_list", ":", "\n", "                        ", "random", ".", "shuffle", "(", "aspn_list", ")", "\n", "# choose one random act span in each act type", "\n", "aspn", "=", "aspn_list", "[", "0", "]", "\n", "multi_aspn", ".", "append", "(", "aspn", ")", "\n", "inputs", "[", "'aspn_bidx'", "]", ".", "append", "(", "bidx", ")", "\n", "if", "cfg", ".", "multi_act_sampling_num", ">", "1", ":", "\n", "                            ", "for", "i", "in", "range", "(", "cfg", ".", "multi_act_sampling_num", ")", ":", "\n", "                                ", "if", "len", "(", "aspn_list", ")", ">=", "i", "+", "2", ":", "\n", "# choose one random act span in each act type", "\n", "                                    ", "aspn", "=", "aspn_list", "[", "i", "+", "1", "]", "\n", "multi_aspn", ".", "append", "(", "aspn", ")", "\n", "inputs", "[", "'aspn_bidx'", "]", ".", "append", "(", "bidx", ")", "\n", "\n", "", "", "", "", "", "", "if", "multi_aspn", ":", "\n", "                ", "inputs", "[", "'aspn_aug_np'", "]", "=", "utils", ".", "padSeqs", "(", "\n", "multi_aspn", ",", "truncated", "=", "cfg", ".", "truncated", ",", "trunc_method", "=", "'pre'", ")", "\n", "# [all available aspn num in the batch, T]", "\n", "inputs", "[", "'aspn_aug_unk_np'", "]", "=", "inputs", "[", "'aspn_aug_np'", "]", "\n", "\n", "", "", "inputs", "[", "'db_np'", "]", "=", "np", ".", "array", "(", "py_batch", "[", "'pointer'", "]", ")", "\n", "inputs", "[", "'turn_domain'", "]", "=", "py_batch", "[", "'turn_domain'", "]", "\n", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.wrap_result_lm": [[1021, 1083], ["result_dict.items", "results.append", "enumerate", "len", "results.append", "turn.get", "reader.MultiWozReader.tokenizer.decode", "v.split.split.split", "v.split.split.remove", "v.split.split.remove"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.decode"], ["", "def", "wrap_result_lm", "(", "self", ",", "result_dict", ",", "eos_syntax", "=", "None", ")", ":", "\n", "        ", "results", "=", "[", "]", "\n", "eos_syntax", "=", "ontology", ".", "eos_tokens", "if", "not", "eos_syntax", "else", "eos_syntax", "\n", "sos_syntax", "=", "ontology", ".", "sos_tokens", "\n", "# ground truth bs, as, ds.. generate response", "\n", "field", "=", "[", "'dial_id'", ",", "'turn_num'", ",", "'user'", ",", "'bspn_gen'", ",", "'bsdx'", ",", "'resp_gen'", ",", "'resp'", ",", "'aspn_gen'", ",", "'aspn'", ",", "\n", "'dspn_gen'", ",", "'dspn'", ",", "'bspn'", ",", "'pointer'", "]", "\n", "\n", "for", "dial_id", ",", "turns", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "            ", "entry", "=", "{", "'dial_id'", ":", "dial_id", ",", "'trun_num'", ":", "len", "(", "turns", ")", "}", "\n", "for", "f", "in", "field", "[", "2", ":", "]", ":", "\n", "                ", "entry", "[", "f", "]", "=", "''", "# ???", "\n", "", "results", ".", "append", "(", "entry", ")", "\n", "for", "turn_idx", ",", "turn", "in", "enumerate", "(", "turns", ")", ":", "\n", "                ", "entry", "=", "{", "'dial_id'", ":", "dial_id", "}", "\n", "for", "key", "in", "field", ":", "\n", "                    ", "if", "key", "in", "[", "'dial_id'", "]", ":", "\n", "                        ", "continue", "\n", "", "v", "=", "turn", ".", "get", "(", "key", ",", "''", ")", "\n", "if", "key", "==", "'turn_domain'", ":", "\n", "                        ", "v", "=", "' '", ".", "join", "(", "v", ")", "\n", "\n", "", "if", "key", "in", "eos_syntax", "and", "v", "!=", "''", ":", "\n", "# remove eos tokens", "\n", "                        ", "v", "=", "self", ".", "tokenizer", ".", "decode", "(", "v", ")", "\n", "v", "=", "v", ".", "split", "(", ")", "\n", "# remove eos/sos in span", "\n", "if", "eos_syntax", "[", "key", "]", "in", "v", ":", "\n", "                            ", "v", ".", "remove", "(", "eos_syntax", "[", "key", "]", ")", "\n", "", "if", "sos_syntax", "[", "key", "]", "in", "v", ":", "\n", "                            ", "v", ".", "remove", "(", "sos_syntax", "[", "key", "]", ")", "\n", "# if key != 'resp_gen':", "\n", "#     # remove eos/sos in span", "\n", "#     if eos_syntax[key] in v:", "\n", "#         v.remove(eos_syntax[key])", "\n", "#     if sos_syntax[key] in v:", "\n", "#         v.remove(sos_syntax[key])", "\n", "# else: # 'resp_gen'", "\n", "#     sos_index = 0", "\n", "#     eos_index = -1", "\n", "#     if sos_syntax[key] in v:", "\n", "#         sos_index = v.index(sos_syntax[key])", "\n", "#     if eos_syntax[key] in v:", "\n", "#         eos_index = v.index(eos_syntax[key])", "\n", "#     else:", "\n", "#         pass # take too long", "\n", "#         # no <eos_r> found, stop at any eos_tokens", "\n", "#         # for i in range(sos_index+1, len(v)):", "\n", "#         #     if v[i] in sos_syntax.values() or v[i] in eos_syntax.values():", "\n", "#         #         eos_index = i", "\n", "#     v = v[sos_index+1: eos_index]", "\n", "\n", "\n", "# v = self.tokenizer.convert_tokens_to_string(v)", "\n", "", "v", "=", "\" \"", ".", "join", "(", "v", ")", "\n", "", "else", ":", "\n", "                        ", "pass", "# v = v", "\n", "", "entry", "[", "key", "]", "=", "v", "\n", "\n", "", "results", ".", "append", "(", "entry", ")", "\n", "\n", "", "", "return", "results", ",", "field", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.wrap_result": [[1084, 1118], ["result_dict.items", "field.insert", "results.append", "enumerate", "len", "results.append", "turn.get", "decode_fn"], "methods", ["None"], ["", "def", "wrap_result", "(", "self", ",", "result_dict", ",", "eos_syntax", "=", "None", ")", ":", "\n", "        ", "decode_fn", "=", "self", ".", "vocab", ".", "sentence_decode", "\n", "results", "=", "[", "]", "\n", "eos_syntax", "=", "ontology", ".", "eos_tokens", "if", "not", "eos_syntax", "else", "eos_syntax", "\n", "\n", "if", "cfg", ".", "bspn_mode", "==", "'bspn'", ":", "\n", "            ", "field", "=", "[", "'dial_id'", ",", "'turn_num'", ",", "'user'", ",", "'bspn_gen'", ",", "'bspn'", ",", "'resp_gen'", ",", "'resp'", ",", "'aspn_gen'", ",", "'aspn'", ",", "\n", "'dspn_gen'", ",", "'dspn'", ",", "'pointer'", "]", "\n", "", "elif", "not", "cfg", ".", "enable_dst", ":", "# this", "\n", "            ", "field", "=", "[", "'dial_id'", ",", "'turn_num'", ",", "'user'", ",", "'bsdx_gen'", ",", "'bsdx'", ",", "'resp_gen'", ",", "'resp'", ",", "'aspn_gen'", ",", "'aspn'", ",", "\n", "'dspn_gen'", ",", "'dspn'", ",", "'bspn'", ",", "'pointer'", "]", "\n", "", "else", ":", "\n", "            ", "field", "=", "[", "'dial_id'", ",", "'turn_num'", ",", "'user'", ",", "'bsdx_gen'", ",", "'bsdx'", ",", "'resp_gen'", ",", "'resp'", ",", "'aspn_gen'", ",", "'aspn'", ",", "\n", "'dspn_gen'", ",", "'dspn'", ",", "'bspn_gen'", ",", "'bspn'", ",", "'pointer'", "]", "\n", "", "if", "self", ".", "multi_acts_record", "is", "not", "None", ":", "\n", "            ", "field", ".", "insert", "(", "7", ",", "'multi_act_gen'", ")", "\n", "\n", "", "for", "dial_id", ",", "turns", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "            ", "entry", "=", "{", "'dial_id'", ":", "dial_id", ",", "'turn_num'", ":", "len", "(", "turns", ")", "}", "\n", "for", "prop", "in", "field", "[", "2", ":", "]", ":", "\n", "                ", "entry", "[", "prop", "]", "=", "''", "\n", "", "results", ".", "append", "(", "entry", ")", "\n", "for", "turn_no", ",", "turn", "in", "enumerate", "(", "turns", ")", ":", "\n", "                ", "entry", "=", "{", "'dial_id'", ":", "dial_id", "}", "\n", "for", "key", "in", "field", ":", "\n", "                    ", "if", "key", "in", "[", "'dial_id'", "]", ":", "\n", "                        ", "continue", "\n", "", "v", "=", "turn", ".", "get", "(", "key", ",", "''", ")", "\n", "if", "key", "==", "'turn_domain'", ":", "\n", "                        ", "v", "=", "' '", ".", "join", "(", "v", ")", "\n", "", "entry", "[", "key", "]", "=", "decode_fn", "(", "\n", "v", ",", "eos", "=", "eos_syntax", "[", "key", "]", ")", "if", "key", "in", "eos_syntax", "and", "v", "!=", "''", "else", "v", "\n", "", "results", ".", "append", "(", "entry", ")", "\n", "", "", "return", "results", ",", "field", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.restore": [[1119, 1195], ["restored.replace.replace.replace", "restored.replace.replace.replace", "restored.replace.replace.replace", "restored.replace.replace.replace", "restored.replace.replace.replace", "constraint_dict.get", "restored.replace.replace.replace", "mat_ents.get", "mat_ents.get", "restored.replace.replace.replace", "restored.replace.replace.split", "print", "print", "quit", "restored.replace.replace.replace", "restored.replace.replace.replace", "restored.replace.replace.replace", "restored.replace.replace.replace", "restored.replace.replace.replace", "str", "len", "len", "mat_ents.get.get", "restored.replace.replace.replace", "restored.replace.replace.replace", "restored.replace.replace.replace", "mat_ents.get.get", "restored.replace.replace.replace", "print"], "methods", ["None"], ["", "def", "restore", "(", "self", ",", "resp", ",", "domain", ",", "constraint_dict", ",", "mat_ents", ")", ":", "\n", "        ", "restored", "=", "resp", "\n", "\n", "restored", "=", "restored", ".", "replace", "(", "'[value_reference]'", ",", "'53022'", ")", "\n", "restored", "=", "restored", ".", "replace", "(", "'[value_car]'", ",", "'BMW'", ")", "\n", "\n", "# restored.replace('[value_phone]', '830-430-6666')", "\n", "for", "d", "in", "domain", ":", "\n", "            ", "constraint", "=", "constraint_dict", ".", "get", "(", "d", ",", "None", ")", "\n", "if", "constraint", ":", "\n", "                ", "if", "'stay'", "in", "constraint", ":", "\n", "                    ", "restored", "=", "restored", ".", "replace", "(", "\n", "'[value_stay]'", ",", "constraint", "[", "'stay'", "]", ")", "\n", "", "if", "'day'", "in", "constraint", ":", "\n", "                    ", "restored", "=", "restored", ".", "replace", "(", "\n", "'[value_day]'", ",", "constraint", "[", "'day'", "]", ")", "\n", "", "if", "'people'", "in", "constraint", ":", "\n", "                    ", "restored", "=", "restored", ".", "replace", "(", "\n", "'[value_people]'", ",", "constraint", "[", "'people'", "]", ")", "\n", "", "if", "'time'", "in", "constraint", ":", "\n", "                    ", "restored", "=", "restored", ".", "replace", "(", "\n", "'[value_time]'", ",", "constraint", "[", "'time'", "]", ")", "\n", "", "if", "'type'", "in", "constraint", ":", "\n", "                    ", "restored", "=", "restored", ".", "replace", "(", "\n", "'[value_type]'", ",", "constraint", "[", "'type'", "]", ")", "\n", "", "if", "d", "in", "mat_ents", "and", "len", "(", "mat_ents", "[", "d", "]", ")", "==", "0", ":", "\n", "                    ", "for", "s", "in", "constraint", ":", "\n", "                        ", "if", "s", "==", "'pricerange'", "and", "d", "in", "[", "'hotel'", ",", "'restaurant'", "]", "and", "'price]'", "in", "restored", ":", "\n", "                            ", "restored", "=", "restored", ".", "replace", "(", "\n", "'[value_price]'", ",", "constraint", "[", "'pricerange'", "]", ")", "\n", "", "if", "s", "+", "']'", "in", "restored", ":", "\n", "                            ", "restored", "=", "restored", ".", "replace", "(", "\n", "'[value_%s]'", "%", "s", ",", "constraint", "[", "s", "]", ")", "\n", "\n", "", "", "", "", "if", "'[value_choice'", "in", "restored", "and", "mat_ents", ".", "get", "(", "d", ")", ":", "\n", "                ", "restored", "=", "restored", ".", "replace", "(", "\n", "'[value_choice]'", ",", "str", "(", "len", "(", "mat_ents", "[", "d", "]", ")", ")", ")", "\n", "", "", "if", "'[value_choice'", "in", "restored", ":", "\n", "            ", "restored", "=", "restored", ".", "replace", "(", "'[value_choice]'", ",", "'3'", ")", "\n", "\n", "# restored.replace('[value_car]', 'BMW')", "\n", "\n", "", "try", ":", "\n", "            ", "ent", "=", "mat_ents", ".", "get", "(", "domain", "[", "-", "1", "]", ",", "[", "]", ")", "\n", "if", "ent", ":", "\n", "                ", "ent", "=", "ent", "[", "0", "]", "\n", "\n", "for", "t", "in", "restored", ".", "split", "(", ")", ":", "\n", "                    ", "if", "'[value'", "in", "t", ":", "\n", "                        ", "slot", "=", "t", "[", "7", ":", "-", "1", "]", "\n", "if", "ent", ".", "get", "(", "slot", ")", ":", "\n", "                            ", "if", "domain", "[", "-", "1", "]", "==", "'hotel'", "and", "slot", "==", "'price'", ":", "\n", "                                ", "slot", "=", "'pricerange'", "\n", "", "restored", "=", "restored", ".", "replace", "(", "t", ",", "ent", "[", "slot", "]", ")", "\n", "", "elif", "slot", "==", "'price'", ":", "\n", "                            ", "if", "ent", ".", "get", "(", "'pricerange'", ")", ":", "\n", "                                ", "restored", "=", "restored", ".", "replace", "(", "\n", "t", ",", "ent", "[", "'pricerange'", "]", ")", "\n", "", "else", ":", "\n", "                                ", "print", "(", "restored", ",", "domain", ")", "\n", "", "", "", "", "", "", "except", ":", "\n", "            ", "print", "(", "resp", ")", "\n", "print", "(", "restored", ")", "\n", "quit", "(", ")", "\n", "\n", "", "restored", "=", "restored", ".", "replace", "(", "'[value_phone]'", ",", "'62781111'", ")", "\n", "restored", "=", "restored", ".", "replace", "(", "'[value_postcode]'", ",", "'CG9566'", ")", "\n", "restored", "=", "restored", ".", "replace", "(", "'[value_address]'", ",", "'Parkside, Cambridge'", ")", "\n", "\n", "# if '[value_' in restored:", "\n", "\n", "#     print(domain)", "\n", "#     # print(mat_ents)", "\n", "#     print(resp)", "\n", "#     print(restored)", "\n", "return", "restored", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.record_utterance": [[1196, 1292], ["result_dict.items", "sorted", "enumerate", "sorted.keys", "open", "csv.writer", "range", "csv.writer.writerow", "enumerate", "decode_fn", "reader.MultiWozReader.aspan_to_act_list", "decode_fn", "decode_fn", "decode_fn", "decode_fn", "reader.MultiWozReader.bspan_to_constraint_dict", "reader.MultiWozReader.db.get_match_num", "reader.MultiWozReader.restore", "csv.writer.writerow", "range", "list", "list.sort", "list", "list", "list", "range", "dialog_record[].append", "act.split", "len", "decode_fn", "decode_fn", "reader.MultiWozReader.restore", "list.append", "list.append", "list.append", "zip", "csv.writer.writerow", "reader.MultiWozReader.dspan_to_domain().keys", "list", "list", "list", "len", "zip", "zip", "zip", "reader.MultiWozReader.dspan_to_domain"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.aspan_to_act_list", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.bspan_to_constraint_dict", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.get_match_num", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.restore", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.restore", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.reader.MultiWozReader.dspan_to_domain"], ["", "def", "record_utterance", "(", "self", ",", "result_dict", ")", ":", "\n", "        ", "decode_fn", "=", "self", ".", "vocab", ".", "sentence_decode", "\n", "\n", "ordered_dial", "=", "{", "}", "\n", "for", "dial_id", ",", "turns", "in", "result_dict", ".", "items", "(", ")", ":", "\n", "            ", "diverse", "=", "0", "\n", "turn_count", "=", "0", "\n", "for", "turn_no", ",", "turn", "in", "enumerate", "(", "turns", ")", ":", "\n", "                ", "act_collect", "=", "{", "}", "\n", "act_type_collect", "=", "{", "}", "\n", "slot_score", "=", "0", "\n", "for", "i", "in", "range", "(", "cfg", ".", "nbest", ")", ":", "\n", "                    ", "aspn", "=", "decode_fn", "(", "turn", "[", "'multi_act'", "]", "[", "i", "]", ",", "\n", "eos", "=", "ontology", ".", "eos_tokens", "[", "'aspn'", "]", ")", "\n", "pred_acts", "=", "self", ".", "aspan_to_act_list", "(", "' '", ".", "join", "(", "aspn", ")", ")", "\n", "act_type", "=", "''", "\n", "for", "act", "in", "pred_acts", ":", "\n", "                        ", "d", ",", "a", ",", "s", "=", "act", ".", "split", "(", "'-'", ")", "\n", "if", "d", "+", "'-'", "+", "a", "not", "in", "act_collect", ":", "\n", "                            ", "act_collect", "[", "d", "+", "'-'", "+", "a", "]", "=", "{", "s", ":", "1", "}", "\n", "slot_score", "+=", "1", "\n", "act_type", "+=", "d", "+", "'-'", "+", "a", "+", "';'", "\n", "", "elif", "s", "not", "in", "act_collect", ":", "\n", "                            ", "act_collect", "[", "d", "+", "'-'", "+", "a", "]", "[", "s", "]", "=", "1", "\n", "slot_score", "+=", "1", "\n", "", "", "act_type_collect", "[", "act_type", "]", "=", "1", "\n", "", "turn_count", "+=", "1", "\n", "diverse", "+=", "len", "(", "act_collect", ")", "*", "3", "+", "slot_score", "\n", "", "ordered_dial", "[", "dial_id", "]", "=", "diverse", "/", "turn_count", "\n", "\n", "", "ordered_dial", "=", "sorted", "(", "ordered_dial", ".", "keys", "(", ")", ",", "\n", "key", "=", "lambda", "x", ":", "-", "ordered_dial", "[", "x", "]", ")", "\n", "\n", "\n", "dialog_record", "=", "{", "}", "\n", "\n", "with", "open", "(", "cfg", ".", "eval_load_path", "+", "'/dialogue_record.csv'", ",", "'w'", ")", "as", "rf", ":", "\n", "            ", "writer", "=", "csv", ".", "writer", "(", "rf", ")", "\n", "\n", "for", "dial_id", "in", "ordered_dial", ":", "\n", "                ", "dialog_record", "[", "dial_id", "]", "=", "[", "]", "\n", "turns", "=", "result_dict", "[", "dial_id", "]", "\n", "writer", ".", "writerow", "(", "[", "dial_id", "]", ")", "\n", "for", "turn_no", ",", "turn", "in", "enumerate", "(", "turns", ")", ":", "\n", "                    ", "user", "=", "decode_fn", "(", "\n", "turn", "[", "'user'", "]", ",", "eos", "=", "ontology", ".", "eos_tokens", "[", "'user'", "]", ")", "\n", "bspn", "=", "decode_fn", "(", "\n", "turn", "[", "'bspn'", "]", ",", "eos", "=", "ontology", ".", "eos_tokens", "[", "'bspn'", "]", ")", "\n", "aspn", "=", "decode_fn", "(", "\n", "turn", "[", "'aspn'", "]", ",", "eos", "=", "ontology", ".", "eos_tokens", "[", "'aspn'", "]", ")", "\n", "resp", "=", "decode_fn", "(", "\n", "turn", "[", "'resp'", "]", ",", "eos", "=", "ontology", ".", "eos_tokens", "[", "'resp'", "]", ")", "\n", "constraint_dict", "=", "self", ".", "bspan_to_constraint_dict", "(", "bspn", ")", "\n", "# print(constraint_dict)", "\n", "mat_ents", "=", "self", ".", "db", ".", "get_match_num", "(", "constraint_dict", ",", "True", ")", "\n", "domain", "=", "[", "i", "[", "1", ":", "-", "1", "]", "\n", "for", "i", "in", "self", ".", "dspan_to_domain", "(", "turn", "[", "'dspn'", "]", ")", ".", "keys", "(", ")", "]", "\n", "restored", "=", "self", ".", "restore", "(", "\n", "resp", ",", "domain", ",", "constraint_dict", ",", "mat_ents", ")", "\n", "writer", ".", "writerow", "(", "\n", "[", "turn_no", ",", "user", ",", "turn", "[", "'pointer'", "]", ",", "domain", ",", "restored", ",", "resp", "]", ")", "\n", "turn_record", "=", "{", "'user'", ":", "user", ",", "'bspn'", ":", "bspn", ",", "'aspn'", ":", "aspn", ",", "\n", "'dom'", ":", "domain", ",", "'resp'", ":", "resp", ",", "'resp_res'", ":", "restored", "}", "\n", "\n", "resp_col", "=", "[", "]", "\n", "aspn_col", "=", "[", "]", "\n", "resp_restore_col", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "cfg", ".", "nbest", ")", ":", "\n", "                        ", "aspn", "=", "decode_fn", "(", "\n", "turn", "[", "'multi_act'", "]", "[", "i", "]", ",", "eos", "=", "ontology", ".", "eos_tokens", "[", "'aspn'", "]", ")", "\n", "resp", "=", "decode_fn", "(", "\n", "turn", "[", "'multi_resp'", "]", "[", "i", "]", ",", "eos", "=", "ontology", ".", "eos_tokens", "[", "'resp'", "]", ")", "\n", "\n", "restored", "=", "self", ".", "restore", "(", "\n", "resp", ",", "domain", ",", "constraint_dict", ",", "mat_ents", ")", "\n", "resp_col", ".", "append", "(", "resp", ")", "\n", "resp_restore_col", ".", "append", "(", "restored", ")", "\n", "aspn_col", ".", "append", "(", "aspn", ")", "\n", "\n", "", "zipped", "=", "list", "(", "zip", "(", "resp_restore_col", ",", "resp_col", ",", "aspn_col", ")", ")", "\n", "zipped", ".", "sort", "(", "key", "=", "lambda", "s", ":", "len", "(", "s", "[", "0", "]", ")", ")", "\n", "resp_restore_col", "=", "list", "(", "list", "(", "zip", "(", "*", "zipped", ")", ")", "[", "0", "]", ")", "\n", "aspn_col", "=", "list", "(", "list", "(", "zip", "(", "*", "zipped", ")", ")", "[", "2", "]", ")", "\n", "resp_col", "=", "list", "(", "list", "(", "zip", "(", "*", "zipped", ")", ")", "[", "1", "]", ")", "\n", "turn_record", "[", "'aspn_col'", "]", "=", "aspn_col", "\n", "turn_record", "[", "'resp_col'", "]", "=", "resp_col", "\n", "turn_record", "[", "'resp_res_col'", "]", "=", "resp_restore_col", "\n", "for", "i", "in", "range", "(", "cfg", ".", "nbest", ")", ":", "\n", "# aspn = decode_fn(turn['multi_act'][i], eos=ontology.eos_tokens['aspn'])", "\n", "                        ", "resp", "=", "resp_col", "[", "i", "]", "\n", "aspn", "=", "aspn_col", "[", "i", "]", "\n", "resp_restore", "=", "resp_restore_col", "[", "i", "]", "\n", "\n", "writer", ".", "writerow", "(", "[", "''", ",", "resp_restore", ",", "resp", ",", "aspn", "]", ")", "\n", "\n", "", "dialog_record", "[", "dial_id", "]", ".", "append", "(", "turn_record", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.__init__": [[104, 128], ["spacy.load", "db_ops.MultiWozDB", "zipfile.ZipFile", "json.loads", "json.loads", "utils.Vocab", "zipfile.ZipFile.open().read().lower", "open().read", "os.path.exists", "preprocess2.DataPreprocessor.get_delex_valdict", "json.loads", "json.loads", "json.loads", "open().read", "open().read", "open().read", "zipfile.ZipFile.open().read", "open", "open", "open", "open", "zipfile.ZipFile.open", "data_path.split"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.get_delex_valdict"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.delex_by_annotation": [[130, 154], ["dial_turn[].split", "u_delex.replace.replace.replace", "u_delex.replace.replace.replace", "u_delex.replace.replace.replace", "u_delex.replace.replace.replace", "ontology.da_abbr_to_slot_name.get", "range"], "methods", ["None"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.delex_by_valdict": [[156, 193], ["clean_dataset.clean_text", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "preprocess2.DataPreprocessor.delex_mt_valdict.items", "preprocess2.DataPreprocessor.delex_sg_valdict.items", "re.sub.replace", "re.sub.replace", "re.sub.split", "enumerate", "re.sub.find", "text[].split", "re.sub", "re.sub"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_text"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.get_delex_valdict": [[195, 263], ["preprocess2.DataPreprocessor.db.dbs.items", "set", "list.remove", "list", "entity_value_to_slot.items", "print", "entity_value_to_slot.pop", "open", "collections.OrderedDict", "json.dump", "print", "open", "collections.OrderedDict", "json.dump", "print", "open", "json.dump", "print", "db_entry.items", "len", "sorted", "sorted", "db_entry.items", "val.split", "collections.OrderedDict.items", "collections.OrderedDict.items", "len", "len", "type", "TypeError", "clean_dataset.clean_slot_values", "list.append", "preprocess2.DataPreprocessor.nlp"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.preprocess_main": [[265, 487], ["tqdm.tqdm.tqdm", "preprocess2.DataPreprocessor.vocab.construct", "preprocess2.DataPreprocessor.vocab.save_vocab", "list", "raw_dial[].items", "list", "collections.OrderedDict", "enumerate", "open", "json.dump", "open", "json.dump", "preprocess2.DataPreprocessor.convlab_data.items", "set", "g.get", "collections.OrderedDict.items", "set", "list", "dial_turn[].items", "copy.copy", "sys_act_dict.items", "preprocess2.DataPreprocessor.db.get_match_num", "preprocess2.DataPreprocessor.db.addDBPointer", "preprocess2.DataPreprocessor.db.addBookingPointer", "str", "len", "copy.deepcopy", "copy.deepcopy", "enumerate", "dial_domains.append", "clean_dataset.clean_text().split", "clean_dataset.clean_text", "preprocess2.DataPreprocessor.delex_by_valdict", "clean_dataset.clean_text", "preprocess2.DataPreprocessor.delex_by_valdict", "clean_dataset.clean_text().split", "info_sv.items", "book_sv.items", "act.split", "list.add", "list.remove", "list.remove", "turn_domain.remove", "len", "act.split", "sys_act.extend", "acts.items", "dial[].append", "single_turn[].split", "ontology.normlize_slot_names.get", "preprocess2.DataPreprocessor.nlp", "preprocess2.DataPreprocessor.delex_by_annotation", "preprocess2.DataPreprocessor.delex_by_annotation", "print", "collections.OrderedDict.get", "collections.OrderedDict", "clean_dataset.clean_slot_values", "clean_dataset.clean_slot_values", "constraints.append", "cons_delex.append", "info_slots.items", "len", "len", "turn_domain.append", "len", "booking_act_map.get", "add_to_last_collect.append", "len", "len", "str", "preprocess2.DataPreprocessor.vocab.add_word", "list.append", "clean_dataset.clean_text", "clean_dataset.clean_text", "len", "len", "constraints.append", "constraints.extend", "cons_delex.append", "turn_dom_bs.append", "len", "ontology.da_abbr_to_slot_name.get", "add_p.append", "[].append", "single_turn[].replace", "v.split", "v.split", "value.split", "turn_dom_bs.append", "single_turn[].split", "single_turn[].split", "t.startswith", "t.endswith", "preprocess2.DataPreprocessor.vocab.has_word", "preprocess2.DataPreprocessor.vocab.add_word", "t.index", "t.index", "preprocess2.DataPreprocessor.nlp", "preprocess2.DataPreprocessor.nlp"], "methods", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.construct", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.save_vocab", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.get_match_num", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.addDBPointer", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.db_ops.MultiWozDB.addBookingPointer", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_text", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.delex_by_valdict", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_text", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.delex_by_valdict", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.delex_by_annotation", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.DataPreprocessor.delex_by_annotation", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.add_word", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_text", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_text", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.has_word", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.utils.Vocab.add_word"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.get_db_values": [[11, 81], ["spacy.load", "json.loads.items", "json.loads.items", "json.loads.items", "print", "open", "json.loads", "open", "json.loads", "bspn_word.append", "slots.items", "slots.items", "domain_slot.split", "open", "json.dump", "open", "json.dump", "f.read().lower", "f.read().lower", "ontology.normlize_slot_names.get", "ontology.normlize_slot_names.get", "bspn_word.append", "clean_dataset.clean_slot_values", "value_set_path.replace", "bspn_word.append", "[].append", "v_p.split", "f.read", "f.read", "clean_dataset.clean_slot_values", "[].append", "v_p.split", "bspn_word.append", "bspn_word.append", "spacy.load.", "spacy.load."], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values", "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values"]], "home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.preprocess2.preprocess_db": [[82, 101], ["spacy.load", "print", "open", "json.loads", "enumerate", "open", "json.dump", "f.read().lower", "copy.deepcopy", "entry.items", "db_paths[].replace", "clean_dataset.clean_slot_values", "f.read", "type", "spacy.load."], "function", ["home.repos.pwc.inspect_result.TonyNemo_UBAR-MultiWOZ.None.clean_dataset.clean_slot_values"]]}