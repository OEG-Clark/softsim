{"home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.fixed_seed": [[9, 38], ["random.seed", "numpy.random.seed", "chainer.cuda.cupy.random.seed", "warnings.warn", "chainer.using_config"], "function", ["None"], ["from", ".", "import", "links", "# NOQA", "\n", "from", ".", "import", "models", "# NOQA", "\n", "from", ".", "import", "utils", "# NOQA", "\n", "from", ".", "import", "visualizer", "# NOQA", "\n", "from", ".", "import", "updaters", "# NOQA", "\n", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.find_latest_snapshot": [[39, 55], ["_find_latest_snapshot", "FileNotFoundError", "os.path.join", "os.path.join"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.get_git_revision": [[57, 70], ["os.path.join", "open", "[].strip", "open", "git_hash.readline().strip", "os.path.join", "os.path.join", "git_hash.readline", "head.readline().split", "head.readline"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.get_logstamp": [[72, 86], ["datetime.datetime.now", "logstamp.append", "logstamp.append", "delimiter.join", "datetime.datetime.now.strftime", "datetime.datetime.now.strftime", "logstamp.append", "__init__.get_git_revision"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.get_git_revision"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.crop.crop_2d": [[3, 14], ["None"], "function", ["None"], ["def", "crop_2d", "(", "x", ",", "shape", ")", ":", "\n", "    ", "left", "=", "(", "x", ".", "shape", "[", "2", "]", "-", "shape", "[", "2", "]", ")", "//", "2", "\n", "top", "=", "(", "x", ".", "shape", "[", "3", "]", "-", "shape", "[", "3", "]", ")", "//", "2", "\n", "right", "=", "left", "+", "shape", "[", "2", "]", "\n", "bottom", "=", "top", "+", "shape", "[", "3", "]", "\n", "assert", "left", ">=", "0", "and", "top", ">=", "0", "and", "right", "<=", "x", ".", "shape", "[", "2", "]", "and", "bottom", "<=", "x", ".", "shape", "[", "3", "]", ",", "'Cropping image is less shape than input shape.\\n'", "'Input shape:{}, Cropping shape:{}, (L,R,T,B):({},{},{},{})'", ".", "format", "(", "\n", "x", ".", "shape", ",", "shape", ",", "left", ",", "right", ",", "top", ",", "bottom", ")", "\n", "return", "x", "[", ":", ",", ":", ",", "left", ":", "right", ",", "top", ":", "bottom", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.crop.crop_3d": [[15, 28], ["None"], "function", ["None"], ["", "def", "crop_3d", "(", "x", ",", "shape", ")", ":", "\n", "    ", "left", "=", "(", "x", ".", "shape", "[", "2", "]", "-", "shape", "[", "2", "]", ")", "//", "2", "\n", "top", "=", "(", "x", ".", "shape", "[", "3", "]", "-", "shape", "[", "3", "]", ")", "//", "2", "\n", "near", "=", "(", "x", ".", "shape", "[", "4", "]", "-", "shape", "[", "4", "]", ")", "//", "2", "\n", "right", "=", "left", "+", "shape", "[", "2", "]", "\n", "bottom", "=", "top", "+", "shape", "[", "3", "]", "\n", "far", "=", "near", "+", "shape", "[", "4", "]", "\n", "assert", "left", ">=", "0", "and", "top", ">=", "0", "and", "near", ">=", "0", "and", "right", "<=", "x", ".", "shape", "[", "2", "]", "and", "bottom", "<=", "x", ".", "shape", "[", "3", "]", "and", "far", "<=", "x", ".", "shape", "[", "4", "]", ",", "'Cropping image is less shape than input shape.\\n'", "'Input shape:{}, Cropping shape:{}, (L,R,T,B,N,F):({},{},{},{},{},{})'", ".", "format", "(", "\n", "x", ".", "shape", ",", "shape", ",", "left", ",", "right", ",", "top", ",", "bottom", ",", "near", ",", "far", ")", "\n", "return", "x", "[", ":", ",", ":", ",", "left", ":", "right", ",", "top", ":", "bottom", ",", "near", ":", "far", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.crop.crop_nd": [[29, 40], ["range", "slice", "slice", "slices.append", "slice", "tuple"], "function", ["None"], ["", "def", "crop_nd", "(", "x", ",", "shape", ")", ":", "\n", "    ", "slices", "=", "[", "slice", "(", "0", ",", "x", ".", "shape", "[", "0", "]", ")", ",", "slice", "(", "0", ",", "x", ".", "shape", "[", "1", "]", ")", "]", "\n", "for", "n", "in", "range", "(", "2", ",", "x", ".", "ndim", ")", ":", "\n", "        ", "start", "=", "(", "x", ".", "shape", "[", "n", "]", "-", "shape", "[", "n", "]", ")", "//", "2", "\n", "end", "=", "start", "+", "shape", "[", "n", "]", "\n", "assert", "start", ">=", "0", "and", "end", "<=", "x", ".", "shape", "[", "n", "]", ",", "'Cropping image is less shape than input shape.\\n'", "'Dimension: {}, Cropping shape: {}, (Start, End): ({},{})'", ".", "format", "(", "\n", "n", ",", "x", ".", "shape", ",", "start", ",", "end", ")", "\n", "slices", ".", "append", "(", "slice", "(", "start", ",", "end", ")", ")", "\n", "", "return", "x", "[", "tuple", "(", "slices", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.crop.crop": [[41, 73], ["crop.crop_nd", "len", "crop.crop_2d", "tuple", "len", "ValueError", "crop.crop_3d"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.crop.crop_nd", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.crop.crop_2d", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.crop.crop_3d"], ["", "def", "crop", "(", "x", ",", "shape", ",", "ndim", "=", "None", ")", ":", "\n", "    ", "\"\"\" Spatial cropping x by given shape\n\n    Args:\n        x (ndarray or Variable): Input tensor\n        shape (tuple): Desired spatial shape\n        ndim (int, optional): Input dimensions. If None, this will be estimated automatically.\n                              Defaults to None.\n\n    Returns:\n        ndarray or Variable: Cropped tensor\n    \"\"\"", "\n", "\n", "if", "ndim", "is", "None", ":", "\n", "        ", "ndim", "=", "x", ".", "ndim", "-", "2", "\n", "\n", "", "if", "len", "(", "shape", ")", "==", "ndim", ":", "\n", "        ", "shape", "=", "(", "None", ",", "None", ",", ")", "+", "tuple", "(", "shape", ")", "\n", "", "elif", "len", "(", "shape", ")", "==", "(", "ndim", "+", "2", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'`len(shape)` must be equal to `x.dim` or `x.dim-2`..'", ")", "\n", "\n", "", "if", "x", ".", "shape", "[", "2", ":", "]", "==", "shape", "[", "2", ":", "]", ":", "\n", "        ", "return", "x", "\n", "\n", "", "if", "ndim", "==", "2", ":", "\n", "        ", "return", "crop_2d", "(", "x", ",", "shape", ")", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "        ", "return", "crop_3d", "(", "x", ",", "shape", ")", "\n", "\n", "", "return", "crop_nd", "(", "x", ",", "shape", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.mc_dropout.mc_dropout": [[6, 65], ["chainer.functions.noise.dropout.Dropout", "chainer.functions.noise.dropout.Dropout.apply", "chainer.utils.argument.parse_kwargs"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.apply"], ["def", "mc_dropout", "(", "x", ",", "ratio", "=", ".5", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"mc_dropout(x, ratio=.5)\n\n    Drops elements of input variable randomly.\n    This function drops input elements randomly with probability ``ratio`` and\n    scales the remaining elements by factor ``1 / (1 - ratio)``.\n    Args:\n        x (:class:`~chainer.Variable` or :ref:`ndarray`):\n            Input variable. A :math:`(s_1, s_2, ..., s_N)` -shaped float array.\n        ratio (float):\n            Dropout ratio. The ``ratio`` must be ``0.0 <= ratio < 1.0``.\n        mask (:ref:`ndarray` or None):\n            The mask to be used for dropout.\n            You do not have to specify this value, unless you need to make\n            results deterministic.\n            If ``mask`` is not specified or set to ``None``, a mask will be\n            generated randomly according to the given ``ratio``.\n            If ``mask`` is specified, ``ratio`` will be ignored.\n            The shape and dtype must be the same as ``x`` and should be on the\n            same device.\n            Note that iDeep and cuDNN will not be used for this function if\n            mask is specified, as iDeep and cuDNN do not support it.\n        return_mask (bool):\n            If ``True``, the mask used for dropout is returned together with\n            the output variable.\n            The returned mask can later be reused by passing it to ``mask``\n            argument.\n    Returns:\n        ~chainer.Variable or tuple:\n            When ``return_mask`` is ``False`` (default), returns the output\n            variable.\n            When ``True``, returns the tuple of the output variable and\n            mask (:ref:`ndarray`). The mask will be on the same device as the\n            input.\n\n    See the paper by Y. Gal, and G. Zoubin: `Dropout as a bayesian approximation: \\\n    Representing model uncertainty in deep learning .\\\n    <https://arxiv.org/abs/1506.02142>`\n\n    See also: A. Kendall: `Bayesian SegNet: Model Uncertainty \\\n    in Deep Convolutional Encoder-Decoder Architectures for Scene Understanding \\\n    <https://arxiv.org/abs/1511.02680>`_.\n    \"\"\"", "\n", "\n", "mask", "=", "None", "\n", "return_mask", "=", "False", "\n", "if", "kwargs", ":", "\n", "        ", "mask", ",", "return_mask", "=", "argument", ".", "parse_kwargs", "(", "\n", "kwargs", ",", "(", "'mask'", ",", "mask", ")", ",", "(", "'return_mask'", ",", "return_mask", ")", ",", "\n", "train", "=", "'train argument is not supported anymore. '", "\n", "'Use chainer.using_config'", ")", "\n", "\n", "", "func", "=", "Dropout", "(", "ratio", ",", "mask", ",", "return_mask", ")", "\n", "out", ",", "=", "func", ".", "apply", "(", "(", "x", ",", ")", ")", "\n", "mask", "=", "func", ".", "mask", "\n", "\n", "if", "return_mask", ":", "\n", "        ", "return", "out", ",", "mask", "\n", "", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.stride_pooling._pair": [[3, 7], ["hasattr"], "function", ["None"], ["def", "_pair", "(", "x", ",", "ndim", "=", "2", ")", ":", "\n", "    ", "if", "hasattr", "(", "x", ",", "'__getitem__'", ")", ":", "\n", "        ", "return", "x", "\n", "", "return", "[", "x", "]", "*", "ndim", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.stride_pooling.stride_pooling_2d": [[9, 12], ["stride_pooling._pair"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution._pair"], ["", "def", "stride_pooling_2d", "(", "x", ",", "stride", ")", ":", "\n", "    ", "stride", "=", "_pair", "(", "stride", ",", "2", ")", "\n", "return", "x", "[", ":", ",", ":", ",", ":", ":", "stride", "[", "0", "]", ",", ":", ":", "stride", "[", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.stride_pooling.stride_pooling_3d": [[14, 17], ["stride_pooling._pair"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution._pair"], ["", "def", "stride_pooling_3d", "(", "x", ",", "stride", ")", ":", "\n", "    ", "stride", "=", "_pair", "(", "stride", ",", "3", ")", "\n", "return", "x", "[", ":", ",", ":", ",", ":", ":", "stride", "[", "0", "]", ",", ":", ":", "stride", "[", "1", "]", ",", ":", ":", "stride", "[", "2", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.stride_pooling.stride_pooling_nd": [[19, 38], ["stride_pooling.stride_pooling_2d", "stride_pooling.stride_pooling_3d", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.stride_pooling.stride_pooling_2d", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.stride_pooling.stride_pooling_3d"], ["", "def", "stride_pooling_nd", "(", "x", ",", "stride", ")", ":", "\n", "    ", "\"\"\" Spatial pooling by stride.\n\n    Args:\n        x (ndarray or Variable): Input tensor\n        stride (tuple or int): Stride length\n\n    Returns:\n        ndarray or Variable: Output tensor\n    \"\"\"", "\n", "\n", "ndim", "=", "x", ".", "ndim", "-", "2", "\n", "\n", "if", "ndim", "==", "2", ":", "\n", "        ", "return", "stride_pooling_2d", "(", "x", ",", "stride", ")", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "        ", "return", "stride_pooling_3d", "(", "x", ",", "stride", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'unsupported nd pooling..'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.accuracy.discrete_dice.DiscreteDice.__init__": [[17, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "n_class", ",", "\n", "normalize", "=", "True", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "eps", "=", "1e-08", ",", "\n", "dtype", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_class", "=", "n_class", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.accuracy.discrete_dice.DiscreteDice.check_type_forward": [[29, 40], ["chainer.utils.type_check.expect", "chainer.utils.type_check.expect", "chainer.utils.type_check.expect", "in_types.size"], "methods", ["None"], ["", "def", "check_type_forward", "(", "self", ",", "in_types", ")", ":", "\n", "        ", "type_check", ".", "expect", "(", "in_types", ".", "size", "(", ")", "==", "2", ")", "\n", "x_type", ",", "t_type", "=", "in_types", "\n", "\n", "type_check", ".", "expect", "(", "\n", "x_type", ".", "dtype", ".", "kind", "==", "'i'", ",", "\n", "t_type", ".", "dtype", ".", "kind", "==", "'i'", "\n", ")", "\n", "\n", "type_check", ".", "expect", "(", "\n", "x_type", ".", "shape", "==", "t_type", ".", "shape", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.accuracy.discrete_dice.DiscreteDice.forward": [[42, 74], ["chainer.backends.cuda.get_array_module", "loss._helper.to_onehot", "cuda.get_array_module.concatenate.reshape", "loss._helper.to_onehot", "cuda.get_array_module.concatenate.reshape", "chainer.backends.cuda.get_array_module.concatenate", "chainer.backends.cuda.get_array_module.concatenate", "chainer.backends.cuda.get_array_module.sum", "chainer.backends.cuda.get_array_module.sum", "chainer.backends.cuda.get_array_module.mean", "chainer.backends.cuda.get_array_module.sum", "chainer.backends.cuda.get_array_module.sum", "chainer.backends.cuda.get_array_module.mean"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss._helper.to_onehot", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss._helper.to_onehot"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "xp", "=", "cuda", ".", "get_array_module", "(", "*", "inputs", ")", "\n", "y", ",", "t", "=", "inputs", "\n", "\n", "b", "=", "y", ".", "shape", "[", "0", "]", "\n", "c", "=", "self", ".", "n_class", "\n", "\n", "t_onehot", "=", "to_onehot", "(", "t", ",", "n_class", "=", "c", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "t_onehot", "=", "t_onehot", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "\n", "y_onehot", "=", "to_onehot", "(", "y", ",", "n_class", "=", "c", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "y_onehot", "=", "y_onehot", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "ignore_label", "!=", "-", "1", ":", "\n", "            ", "t_onehot", "=", "xp", ".", "concatenate", "(", "(", "t_onehot", "[", ":", ",", ":", "self", ".", "ignore_label", "]", ",", "t_onehot", "[", ":", ",", "self", ".", "ignore_label", "+", "1", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "y_onehot", "=", "xp", ".", "concatenate", "(", "(", "y_onehot", "[", ":", ",", ":", "self", ".", "ignore_label", "]", ",", "y_onehot", "[", ":", ",", "self", ".", "ignore_label", "+", "1", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "intersection", "=", "y_onehot", "*", "t_onehot", "\n", "cardinality", "=", "y_onehot", "+", "t_onehot", "\n", "\n", "if", "self", ".", "normalize", ":", "# NOTE: channel-wise", "\n", "            ", "intersection", "=", "xp", ".", "sum", "(", "intersection", ",", "axis", "=", "-", "1", ")", "\n", "cardinality", "=", "xp", ".", "sum", "(", "cardinality", ",", "axis", "=", "-", "1", ")", "\n", "ret", "=", "(", "2.", "*", "intersection", "/", "(", "cardinality", "+", "self", ".", "eps", ")", ")", "\n", "ret", "=", "xp", ".", "mean", "(", "ret", ",", "axis", "=", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "intersection", "=", "xp", ".", "sum", "(", "intersection", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "cardinality", "=", "xp", ".", "sum", "(", "cardinality", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "ret", "=", "(", "2.", "*", "intersection", "/", "(", "cardinality", "+", "self", ".", "eps", ")", ")", "\n", "\n", "", "return", "xp", ".", "mean", "(", "ret", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.accuracy.discrete_dice.softmax_discrete_dice": [[76, 95], ["chainer.functions.argmax", "discrete_dice.DiscreteDice"], "function", ["None"], ["", "", "def", "softmax_discrete_dice", "(", "y", ",", "t", ",", "normalize", "=", "True", ",", "ignore_label", "=", "-", "1", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "\"\"\" Dice coefficient with Softmax pre-activates.\n\n    Args:\n        y (~chainer.Variable): Logits\n        t (~numpy.ndarray or ~cupy.ndarray): Ground-truth label\n        normalize (bool, optional): If True, calculate the dice coefficients for each class and take the average. Defaults to True.\n        ignore_label (int, optional): Defaults to -1.\n        eps (float, optional): Defaults to 1e-08.\n\n    NOTE: This is not a differentiable function.\n          See also: ~chainer_bcnn.functions.loss.dice\n    \"\"\"", "\n", "dtype", "=", "y", ".", "dtype", "\n", "n_class", "=", "y", ".", "shape", "[", "1", "]", "\n", "y", "=", "chainer", ".", "functions", ".", "argmax", "(", "y", ",", "axis", "=", "1", ")", "\n", "return", "DiscreteDice", "(", "n_class", ",", "normalize", "=", "normalize", ",", "\n", "ignore_label", "=", "ignore_label", ",", "\n", "eps", "=", "eps", ",", "dtype", "=", "dtype", ")", "(", "y", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.accuracy.discrete_dice.sigmoid_discrete_dice": [[96, 98], ["NotImplementedError"], "function", ["None"], ["", "def", "sigmoid_discrete_dice", "(", "y", ",", "t", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.accuracy.discrete_jaccard.DiscreteJaccard.__init__": [[17, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "n_class", ",", "\n", "normalize", "=", "True", ",", "\n", "ignore_label", "=", "-", "1", ",", "\n", "eps", "=", "1e-08", ",", "\n", "dtype", "=", "None", ")", ":", "\n", "        ", "self", ".", "n_class", "=", "n_class", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.accuracy.discrete_jaccard.DiscreteJaccard.check_type_forward": [[29, 40], ["chainer.utils.type_check.expect", "chainer.utils.type_check.expect", "chainer.utils.type_check.expect", "in_types.size"], "methods", ["None"], ["", "def", "check_type_forward", "(", "self", ",", "in_types", ")", ":", "\n", "        ", "type_check", ".", "expect", "(", "in_types", ".", "size", "(", ")", "==", "2", ")", "\n", "x_type", ",", "t_type", "=", "in_types", "\n", "\n", "type_check", ".", "expect", "(", "\n", "x_type", ".", "dtype", ".", "kind", "==", "'i'", ",", "\n", "t_type", ".", "dtype", ".", "kind", "==", "'i'", "\n", ")", "\n", "\n", "type_check", ".", "expect", "(", "\n", "x_type", ".", "shape", "==", "t_type", ".", "shape", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.accuracy.discrete_jaccard.DiscreteJaccard.forward": [[42, 76], ["chainer.backends.cuda.get_array_module", "loss._helper.to_onehot", "cuda.get_array_module.concatenate.reshape", "loss._helper.to_onehot", "cuda.get_array_module.concatenate.reshape", "chainer.backends.cuda.get_array_module.concatenate", "chainer.backends.cuda.get_array_module.concatenate", "chainer.backends.cuda.get_array_module.sum", "chainer.backends.cuda.get_array_module.sum", "chainer.backends.cuda.get_array_module.mean", "chainer.backends.cuda.get_array_module.sum", "chainer.backends.cuda.get_array_module.sum", "chainer.backends.cuda.get_array_module.mean"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss._helper.to_onehot", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss._helper.to_onehot"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "xp", "=", "cuda", ".", "get_array_module", "(", "*", "inputs", ")", "\n", "y", ",", "t", "=", "inputs", "\n", "\n", "b", "=", "y", ".", "shape", "[", "0", "]", "\n", "c", "=", "self", ".", "n_class", "\n", "\n", "t_onehot", "=", "to_onehot", "(", "t", ",", "n_class", "=", "c", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "t_onehot", "=", "t_onehot", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "\n", "y_onehot", "=", "to_onehot", "(", "y", ",", "n_class", "=", "c", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "y_onehot", "=", "y_onehot", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "ignore_label", "!=", "-", "1", ":", "\n", "            ", "t_onehot", "=", "xp", ".", "concatenate", "(", "(", "t_onehot", "[", ":", ",", ":", "self", ".", "ignore_label", "]", ",", "t_onehot", "[", ":", ",", "self", ".", "ignore_label", "+", "1", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "y_onehot", "=", "xp", ".", "concatenate", "(", "(", "y_onehot", "[", ":", ",", ":", "self", ".", "ignore_label", "]", ",", "y_onehot", "[", ":", ",", "self", ".", "ignore_label", "+", "1", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "intersection", "=", "y_onehot", "*", "t_onehot", "\n", "cardinality", "=", "y_onehot", "+", "t_onehot", "\n", "\n", "if", "self", ".", "normalize", ":", "# NOTE: channel-wise", "\n", "            ", "intersection", "=", "xp", ".", "sum", "(", "intersection", ",", "axis", "=", "-", "1", ")", "\n", "cardinality", "=", "xp", ".", "sum", "(", "cardinality", ",", "axis", "=", "-", "1", ")", "\n", "union", "=", "cardinality", "-", "intersection", "\n", "ret", "=", "(", "2.", "*", "intersection", "/", "(", "union", "+", "eps", ")", ")", "\n", "ret", "=", "xp", ".", "mean", "(", "ret", ",", "axis", "=", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "intersection", "=", "xp", ".", "sum", "(", "intersection", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "cardinality", "=", "xp", ".", "sum", "(", "cardinality", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "union", "=", "cardinality", "-", "intersection", "\n", "ret", "=", "(", "2.", "*", "intersection", "/", "(", "union", "+", "eps", ")", ")", "\n", "\n", "", "return", "xp", ".", "mean", "(", "ret", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.accuracy.discrete_jaccard.softmax_discrete_jaccard": [[78, 97], ["chainer.functions.argmax", "discrete_jaccard.DiscreteJaccard"], "function", ["None"], ["", "", "def", "softmax_discrete_jaccard", "(", "y", ",", "t", ",", "normalize", "=", "True", ",", "ignore_label", "=", "-", "1", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "\"\"\" Jaccard index with Softmax pre-activates.\n\n    Args:\n        y (~chainer.Variable): Logits\n        t (~numpy.ndarray or ~cupy.ndarray): Ground-truth label\n        normalize (bool, optional): If True, calculate the jaccard indices for each class and take the average. Defaults to True.\n        ignore_label (int, optional): Defaults to -1.\n        eps (float, optional): Defaults to 1e-08.\n\n    NOTE: This is not a differentiable function.\n          See also: ~chainer_bcnn.functions.loss.jaccard\n    \"\"\"", "\n", "dtype", "=", "y", ".", "dtype", "\n", "n_class", "=", "y", ".", "shape", "[", "1", "]", "\n", "y", "=", "chainer", ".", "functions", ".", "argmax", "(", "y", ",", "axis", "=", "1", ")", "\n", "return", "DiscreteJaccard", "(", "n_class", ",", "normalize", "=", "normalize", ",", "\n", "ignore_label", "=", "ignore_label", ",", "\n", "eps", "=", "eps", ",", "dtype", "=", "dtype", ")", "(", "y", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.accuracy.discrete_jaccard.sigmoid_discrete_jaccard": [[98, 100], ["NotImplementedError"], "function", ["None"], ["", "def", "sigmoid_discrete_jaccard", "(", "y", ",", "t", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.sigmoid_soft_cross_entropy.SigmoidSoftCrossEntropy.check_type_forward": [[10, 18], ["chainer.utils.type_check.expect", "chainer.utils.type_check.expect", "in_types.size"], "methods", ["None"], ["    ", "def", "check_type_forward", "(", "self", ",", "in_types", ")", ":", "\n", "        ", "type_check", ".", "expect", "(", "in_types", ".", "size", "(", ")", "==", "2", ")", "\n", "\n", "x_type", ",", "t_type", "=", "in_types", "\n", "type_check", ".", "expect", "(", "\n", "x_type", ".", "dtype", "==", "np", ".", "float32", ",", "\n", "t_type", ".", "dtype", "==", "np", ".", "float32", ",", "\n", "x_type", ".", "shape", "==", "t_type", ".", "shape", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.sigmoid_soft_cross_entropy.sigmoid_soft_cross_entropy": [[21, 23], ["SigmoidSoftCrossEntropy().apply", "sigmoid_soft_cross_entropy.SigmoidSoftCrossEntropy"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.apply"], ["", "", "def", "sigmoid_soft_cross_entropy", "(", "x", ",", "t", ",", "normalize", "=", "True", ",", "reduce", "=", "'mean'", ")", ":", "\n", "    ", "return", "SigmoidSoftCrossEntropy", "(", "normalize", ",", "reduce", ")", ".", "apply", "(", "(", "x", ",", "t", ")", ")", "[", "0", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.jaccard.jaccard": [[9, 71], ["chainer.backends.cuda.get_array_module", "_helper.to_onehot", "functions.concat.reshape", "functions.concat.reshape", "backends.cuda.get_array_module.asarray", "chainer.functions.concat", "chainer.functions.concat", "chainer.functions.sum", "chainer.functions.sum", "backends.cuda.get_array_module.mean", "chainer.functions.sum", "chainer.functions.sum", "chainer.functions.mean", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss._helper.to_onehot"], ["def", "jaccard", "(", "y", ",", "t", ",", "normalize", "=", "True", ",", "class_weight", "=", "None", ",", "\n", "ignore_label", "=", "-", "1", ",", "reduce", "=", "'mean'", ",", "eps", "=", "1e-08", ")", ":", "\n", "    ", "\"\"\" Differentable Jaccard index.\n\n    Args:\n        y (~chainer.Variable): Probability\n        t (~numpy.ndarray or ~cupy.ndarray): Ground-truth label\n        normalize (bool, optional): If True, calculate the jaccard indices for each class and take the average. Defaults to True.\n        class_weight (list or ndarray, optional): Defaults to None.\n        ignore_label (int, optional): Defaults to -1.\n        reduce (str, optional): Defaults to 'mean'.\n        eps (float, optional): Defaults to 1e-08.\n    \"\"\"", "\n", "xp", "=", "backends", ".", "cuda", ".", "get_array_module", "(", "y", ")", "\n", "\n", "if", "class_weight", "is", "not", "None", ":", "\n", "        ", "class_weight", "=", "xp", ".", "asarray", "(", "class_weight", ",", "y", ".", "dtype", ")", "\n", "\n", "", "b", ",", "c", "=", "y", ".", "shape", "[", ":", "2", "]", "\n", "t_onehot", "=", "to_onehot", "(", "t", ",", "n_class", "=", "c", ")", "\n", "\n", "y", "=", "y", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "t_onehot", "=", "t_onehot", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "\n", "if", "ignore_label", "!=", "-", "1", ":", "\n", "        ", "t_onehot", "=", "functions", ".", "concat", "(", "(", "t_onehot", "[", ":", ",", ":", "ignore_label", "]", ",", "t_onehot", "[", ":", ",", "ignore_label", "+", "1", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "y", "=", "functions", ".", "concat", "(", "(", "y", "[", ":", ",", ":", "ignore_label", "]", ",", "y", "[", ":", ",", "ignore_label", "+", "1", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "intersection", "=", "y", "*", "t_onehot", "\n", "cardinality", "=", "y", "+", "t_onehot", "\n", "\n", "# NOTE: Another masking way", "\n", "# mask = (t != ignore_label).astype(y.dtype)", "\n", "# mask = xp.tile(xp.expand_dims(mask, axis=1), (1, c, 1))", "\n", "# mask = mask.reshape(b, c, -1)", "\n", "\n", "# intersection *= mask", "\n", "# cardinality *= mask", "\n", "\n", "if", "normalize", ":", "# NOTE: channel-wise", "\n", "        ", "intersection", "=", "functions", ".", "sum", "(", "intersection", ",", "axis", "=", "-", "1", ")", "\n", "cardinality", "=", "functions", ".", "sum", "(", "cardinality", ",", "axis", "=", "-", "1", ")", "\n", "union", "=", "cardinality", "-", "intersection", "\n", "ret", "=", "(", "2.", "*", "intersection", "/", "(", "union", "+", "eps", ")", ")", "\n", "if", "class_weight", "is", "not", "None", ":", "\n", "            ", "ret", "*=", "class_weight", "\n", "", "ret", "=", "xp", ".", "mean", "(", "ret", ",", "axis", "=", "1", ")", "\n", "\n", "", "else", ":", "\n", "        ", "intersection", "=", "functions", ".", "sum", "(", "intersection", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "cardinality", "=", "functions", ".", "sum", "(", "cardinality", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "union", "=", "cardinality", "-", "intersection", "\n", "ret", "=", "(", "2.", "*", "intersection", "/", "(", "union", "+", "eps", ")", ")", "\n", "if", "class_weight", "is", "not", "None", ":", "\n", "            ", "ret", "*=", "class_weight", "\n", "\n", "", "", "if", "reduce", "==", "'mean'", ":", "\n", "        ", "ret", "=", "functions", ".", "mean", "(", "ret", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'unsupported reduce type..'", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.jaccard.softmax_jaccard": [[73, 89], ["chainer.functions.softmax", "jaccard.jaccard"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.jaccard.jaccard"], ["", "def", "softmax_jaccard", "(", "y", ",", "t", ",", "normalize", "=", "True", ",", "class_weight", "=", "None", ",", "\n", "ignore_label", "=", "-", "1", ",", "reduce", "=", "'mean'", ",", "eps", "=", "1e-08", ")", ":", "\n", "    ", "\"\"\" Differentable Jaccard index with Softmax pre-activates.\n\n    Args:\n        y (~chainer.Variable): Logits\n        t (~numpy.ndarray or ~cupy.ndarray): Ground-truth label\n        normalize (bool, optional): If True, calculate the jaccard indices for each class and take the average. Defaults to True.\n        class_weight (list or ndarray, optional): Defaults to None.\n        ignore_label (int, optional): Defaults to -1.\n        reduce (str, optional): Defaults to 'mean'.\n        eps (float, optional): Defaults to 1e-08.\n    \"\"\"", "\n", "y", "=", "functions", ".", "softmax", "(", "y", ",", "axis", "=", "1", ")", "\n", "return", "jaccard", "(", "y", ",", "t", ",", "normalize", ",", "class_weight", ",", "\n", "ignore_label", ",", "reduce", ",", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.jaccard.softmax_jaccard_loss": [[91, 106], ["jaccard.softmax_jaccard"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.jaccard.softmax_jaccard"], ["", "def", "softmax_jaccard_loss", "(", "y", ",", "t", ",", "normalize", "=", "True", ",", "class_weight", "=", "None", ",", "\n", "ignore_label", "=", "-", "1", ",", "reduce", "=", "'mean'", ",", "eps", "=", "1e-08", ")", ":", "\n", "    ", "\"\"\" Differentable Jaccard-index loss with Softmax pre-activates.\n\n    Args:\n        y (~chainer.Variable): Logits\n        t (~numpy.ndarray or ~cupy.ndarray): Ground-truth label\n        normalize (bool, optional): If True, calculate the jaccard indices for each class and take the average. Defaults to True.\n        class_weight (list or ndarray, optional): Defaults to None.\n        ignore_label (int, optional): Defaults to -1.\n        reduce (str, optional): Defaults to 'mean'.\n        eps (float, optional): Defaults to 1e-08.\n    \"\"\"", "\n", "return", "1.0", "-", "softmax_jaccard", "(", "y", ",", "t", ",", "normalize", ",", "class_weight", ",", "\n", "ignore_label", ",", "reduce", ",", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.jaccard.sigmoid_jaccard": [[108, 110], ["NotImplementedError"], "function", ["None"], ["", "def", "sigmoid_jaccard", "(", "y", ",", "t", ",", "*", "args", ",", "**", "kwards", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.jaccard.sigmoid_jaccard_loss": [[112, 114], ["NotImplementedError"], "function", ["None"], ["", "def", "sigmoid_jaccard_loss", "(", "y", ",", "t", ",", "*", "args", ",", "**", "kwards", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.dice.dice": [[9, 70], ["chainer.backends.cuda.get_array_module", "_helper.to_onehot", "functions.concat.reshape", "functions.concat.reshape", "backends.cuda.get_array_module.asarray", "chainer.functions.concat", "chainer.functions.concat", "chainer.functions.sum", "chainer.functions.sum", "chainer.functions.mean", "chainer.functions.sum", "chainer.functions.sum", "chainer.functions.mean", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss._helper.to_onehot"], ["def", "dice", "(", "y", ",", "t", ",", "normalize", "=", "True", ",", "class_weight", "=", "None", ",", "\n", "ignore_label", "=", "-", "1", ",", "reduce", "=", "'mean'", ",", "eps", "=", "1e-08", ")", ":", "\n", "    ", "\"\"\" Differentable Dice coefficient.\n    See: https://arxiv.org/pdf/1606.04797.pdf\n\n    Args:\n        y (~chainer.Variable): Probability\n        t (~numpy.ndarray or ~cupy.ndarray): Ground-truth label\n        normalize (bool, optional): If True, calculate the dice coefficients for each class and take the average. Defaults to True.\n        class_weight (list or ndarray, optional): Defaults to None.\n        ignore_label (int, optional): Defaults to -1.\n        reduce (str, optional): Defaults to 'mean'.\n        eps (float, optional): Defaults to 1e-08.\n    \"\"\"", "\n", "xp", "=", "backends", ".", "cuda", ".", "get_array_module", "(", "y", ")", "\n", "\n", "if", "class_weight", "is", "not", "None", ":", "\n", "        ", "class_weight", "=", "xp", ".", "asarray", "(", "class_weight", ",", "y", ".", "dtype", ")", "\n", "\n", "", "b", ",", "c", "=", "y", ".", "shape", "[", ":", "2", "]", "\n", "t_onehot", "=", "to_onehot", "(", "t", ",", "n_class", "=", "c", ",", "dtype", "=", "y", ".", "dtype", ")", "\n", "\n", "y", "=", "y", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "t_onehot", "=", "t_onehot", ".", "reshape", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "\n", "if", "ignore_label", "!=", "-", "1", ":", "\n", "        ", "t_onehot", "=", "functions", ".", "concat", "(", "(", "t_onehot", "[", ":", ",", ":", "ignore_label", "]", ",", "t_onehot", "[", ":", ",", "ignore_label", "+", "1", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "y", "=", "functions", ".", "concat", "(", "(", "y", "[", ":", ",", ":", "ignore_label", "]", ",", "y", "[", ":", ",", "ignore_label", "+", "1", ":", "]", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "intersection", "=", "y", "*", "t_onehot", "\n", "cardinality", "=", "y", "+", "t_onehot", "\n", "\n", "# NOTE: Another masking way", "\n", "# mask = (t != ignore_label).astype(y.dtype)", "\n", "# mask = xp.tile(xp.expand_dims(mask, axis=1), (1, c, 1))", "\n", "# mask = mask.reshape(b, c, -1)", "\n", "\n", "# intersection *= mask", "\n", "# cardinality *= mask", "\n", "\n", "if", "normalize", ":", "# NOTE: channel-wise", "\n", "        ", "intersection", "=", "functions", ".", "sum", "(", "intersection", ",", "axis", "=", "-", "1", ")", "\n", "cardinality", "=", "functions", ".", "sum", "(", "cardinality", ",", "axis", "=", "-", "1", ")", "\n", "ret", "=", "(", "2.", "*", "intersection", "/", "(", "cardinality", "+", "eps", ")", ")", "\n", "if", "class_weight", "is", "not", "None", ":", "\n", "            ", "ret", "*=", "class_weight", "\n", "", "ret", "=", "functions", ".", "mean", "(", "ret", ",", "axis", "=", "1", ")", "\n", "\n", "", "else", ":", "\n", "        ", "intersection", "=", "functions", ".", "sum", "(", "intersection", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "cardinality", "=", "functions", ".", "sum", "(", "cardinality", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "ret", "=", "(", "2.", "*", "intersection", "/", "(", "cardinality", "+", "eps", ")", ")", "\n", "if", "class_weight", "is", "not", "None", ":", "\n", "            ", "ret", "*=", "class_weight", "\n", "\n", "", "", "if", "reduce", "==", "'mean'", ":", "\n", "        ", "ret", "=", "functions", ".", "mean", "(", "ret", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'unsupported reduce type..'", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.dice.softmax_dice": [[72, 89], ["chainer.functions.softmax", "dice.dice"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.dice.dice"], ["", "def", "softmax_dice", "(", "y", ",", "t", ",", "normalize", "=", "True", ",", "class_weight", "=", "None", ",", "\n", "ignore_label", "=", "-", "1", ",", "reduce", "=", "'mean'", ",", "eps", "=", "1e-08", ")", ":", "\n", "    ", "\"\"\" Differentable Dice coefficient with Softmax pre-activates.\n    See: https://arxiv.org/pdf/1606.04797.pdf\n\n    Args:\n        y (~chainer.Variable): Logits\n        t (~numpy.ndarray or ~cupy.ndarray): Ground-truth label\n        normalize (bool, optional): If True, calculate the dice coefficients for each class and take the average. Defaults to True.\n        class_weight (list or ndarray, optional): Defaults to None.\n        ignore_label (int, optional): Defaults to -1.\n        reduce (str, optional): Defaults to 'mean'.\n        eps (float, optional): Defaults to 1e-08.\n    \"\"\"", "\n", "y", "=", "functions", ".", "softmax", "(", "y", ",", "axis", "=", "1", ")", "\n", "return", "dice", "(", "y", ",", "t", ",", "normalize", ",", "class_weight", ",", "\n", "ignore_label", ",", "reduce", ",", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.dice.softmax_dice_loss": [[91, 107], ["dice.softmax_dice"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.dice.softmax_dice"], ["", "def", "softmax_dice_loss", "(", "y", ",", "t", ",", "normalize", "=", "True", ",", "class_weight", "=", "None", ",", "\n", "ignore_label", "=", "-", "1", ",", "reduce", "=", "'mean'", ",", "eps", "=", "1e-08", ")", ":", "\n", "    ", "\"\"\" Differentable Dice-coefficient loss with Softmax pre-activates.\n    See: https://arxiv.org/pdf/1606.04797.pdf\n\n    Args:\n        y (~chainer.Variable): Logits\n        t (~numpy.ndarray or ~cupy.ndarray): Ground-truth label\n        normalize (bool, optional): If True, calculate the dice coefficients for each class and take the average. Defaults to True.\n        class_weight (list or ndarray, optional): Defaults to None.\n        ignore_label (int, optional): Defaults to -1.\n        reduce (str, optional): Defaults to 'mean'.\n        eps (float, optional): Defaults to 1e-08.\n    \"\"\"", "\n", "return", "1.0", "-", "softmax_dice", "(", "y", ",", "t", ",", "normalize", ",", "class_weight", ",", "\n", "ignore_label", ",", "reduce", ",", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.dice.sigmoid_dice": [[109, 111], ["NotImplementedError"], "function", ["None"], ["", "def", "sigmoid_dice", "(", "y", ",", "t", ",", "*", "args", ",", "**", "kwards", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.dice.sigmoid_dice_loss": [[113, 115], ["NotImplementedError"], "function", ["None"], ["", "def", "sigmoid_dice_loss", "(", "y", ",", "t", ",", "*", "args", ",", "**", "kwards", ")", ":", "\n", "    ", "raise", "NotImplementedError", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss._helper.to_onehot": [[5, 17], ["chainer.backends.cuda.get_array_module", "backends.cuda.get_array_module.rollaxis", "t_onehot.astype.astype", "backends.cuda.get_array_module.eye"], "function", ["None"], ["def", "to_onehot", "(", "t", ",", "n_class", ",", "dtype", "=", "None", ")", ":", "\n", "\n", "    ", "xp", "=", "backends", ".", "cuda", ".", "get_array_module", "(", "t", ")", "\n", "\n", "if", "dtype", "is", "None", ":", "\n", "        ", "dtype", "=", "t", ".", "dtype", "\n", "\n", "", "t_onehot", "=", "xp", ".", "eye", "(", "n_class", ")", "[", "t", "]", "\n", "t_onehot", "=", "xp", ".", "rollaxis", "(", "t_onehot", ",", "axis", "=", "-", "1", ",", "start", "=", "1", ")", "\n", "t_onehot", "=", "t_onehot", ".", "astype", "(", "dtype", ")", "\n", "\n", "return", "t_onehot", "\n", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.noised_cross_entropy.noised_softmax_cross_entropy": [[10, 61], ["isinstance", "chainer.backend.get_array_module", "chainer.functions.exp", "range", "chainer.functions.softmax_cross_entropy", "chainer.functions.sum", "backend.get_array_module.random.normal", "max", "len"], "function", ["None"], ["def", "noised_softmax_cross_entropy", "(", "y", ",", "t", ",", "mc_iteration", ",", "\n", "normalize", "=", "True", ",", "cache_score", "=", "True", ",", "class_weight", "=", "None", ",", "\n", "ignore_label", "=", "-", "1", ",", "reduce", "=", "'mean'", ",", "enable_double_backprop", "=", "False", ")", ":", "\n", "    ", "\"\"\" Softmax Cross-entropy for aleatoric uncertainty estimates.\n    See: https://arxiv.org/pdf/1703.04977.pdf\n\n    Args:\n        y (list of ~chainer.Variable): logits and sigma\n        t (~numpy.ndarray or ~cupy.ndarray): ground-truth\n        mc_iteration (int): number of iteration of MCMC.\n        normalize (bool, optional): Defaults to True.\n        reduce (str, optional): Defaults to 'mean'.\n\n    Returns:\n        [~chainer.Variable]: Loss value.\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "y", ",", "(", "list", ",", "tuple", ")", ")", "\n", "\n", "logits", ",", "log_std", "=", "y", "\n", "\n", "assert", "logits", ".", "shape", "[", "0", "]", "==", "log_std", ".", "shape", "[", "0", "]", "\n", "assert", "log_std", ".", "shape", "[", "1", "]", "in", "(", "logits", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "assert", "logits", ".", "shape", "[", "2", ":", "]", "==", "log_std", ".", "shape", "[", "2", ":", "]", "\n", "\n", "xp", "=", "backend", ".", "get_array_module", "(", "t", ")", "\n", "\n", "# std = F.sqrt(F.exp(log_var))", "\n", "std", "=", "F", ".", "exp", "(", "log_std", ")", "\n", "\n", "loss", "=", "0.", "\n", "\n", "for", "_", "in", "range", "(", "mc_iteration", ")", ":", "\n", "        ", "noise", "=", "std", "*", "xp", ".", "random", ".", "normal", "(", "0.", ",", "1.", ",", "std", ".", "shape", ")", "\n", "loss", "+=", "softmax_cross_entropy", "(", "logits", "+", "noise", ",", "t", ",", "\n", "normalize", "=", "False", ",", "\n", "cache_score", "=", "cache_score", ",", "\n", "class_weight", "=", "class_weight", ",", "\n", "ignore_label", "=", "ignore_label", ",", "\n", "reduce", "=", "'no'", ",", "\n", "enable_double_backprop", "=", "enable_double_backprop", ")", "\n", "\n", "", "if", "not", "reduce", "==", "'mean'", ":", "\n", "        ", "return", "loss", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "count", "=", "loss", ".", "size", "*", "mc_iteration", "\n", "", "else", ":", "\n", "        ", "count", "=", "max", "(", "1", ",", "len", "(", "loss", ")", ")", "*", "mc_iteration", "\n", "\n", "", "return", "F", ".", "sum", "(", "loss", ")", "/", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.noised_cross_entropy.noised_sigmoid_cross_entropy": [[63, 107], ["isinstance", "chainer.backend.get_array_module", "chainer.functions.exp", "range", "chainer.functions.sigmoid_cross_entropy", "chainer.functions.sum", "backend.get_array_module.random.normal", "max", "len"], "function", ["None"], ["", "def", "noised_sigmoid_cross_entropy", "(", "y", ",", "t", ",", "mc_iteration", ",", "normalize", "=", "True", ",", "reduce", "=", "'mean'", ")", ":", "\n", "    ", "\"\"\" Sigmoid Cross-entropy for aleatoric uncertainty estimates.\n\n    Args:\n        y (list of ~chainer.Variable): logits and sigma\n        t (~numpy.ndarray or ~cupy.ndarray): ground-truth\n        mc_iteration (int): number of iteration of MCMC.\n        normalize (bool, optional): Defaults to True.\n        reduce (str, optional): Defaults to 'mean'.\n\n    Returns:\n        [~chainer.Variable]: Loss value.\n    \"\"\"", "\n", "assert", "isinstance", "(", "y", ",", "(", "list", ",", "tuple", ")", ")", "\n", "\n", "logits", ",", "log_std", "=", "y", "\n", "\n", "assert", "logits", ".", "shape", "[", "0", "]", "==", "log_std", ".", "shape", "[", "0", "]", "\n", "assert", "log_std", ".", "shape", "[", "1", "]", "in", "(", "logits", ".", "shape", "[", "1", "]", ",", "1", ")", "\n", "assert", "logits", ".", "shape", "[", "2", ":", "]", "==", "log_std", ".", "shape", "[", "2", ":", "]", "\n", "assert", "logits", ".", "shape", "==", "t", ".", "shape", "\n", "\n", "xp", "=", "backend", ".", "get_array_module", "(", "t", ")", "\n", "\n", "# std = F.sqrt(F.exp(log_var))", "\n", "std", "=", "F", ".", "exp", "(", "log_std", ")", "\n", "\n", "loss", "=", "0.", "\n", "\n", "for", "_", "in", "range", "(", "mc_iteration", ")", ":", "\n", "        ", "noise", "=", "std", "*", "xp", ".", "random", ".", "normal", "(", "0.", ",", "1.", ",", "std", ".", "shape", ")", "\n", "loss", "+=", "sigmoid_cross_entropy", "(", "logits", "+", "noise", ",", "t", ",", "\n", "normalize", "=", "False", ",", "\n", "reduce", "=", "'no'", ")", "\n", "\n", "", "if", "not", "reduce", "==", "'mean'", ":", "\n", "        ", "return", "loss", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "count", "=", "loss", ".", "size", "*", "mc_iteration", "\n", "", "else", ":", "\n", "        ", "count", "=", "max", "(", "1", ",", "len", "(", "loss", ")", ")", "*", "mc_iteration", "\n", "\n", "", "return", "F", ".", "sum", "(", "loss", ")", "/", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.noised_cross_entropy.noised_sigmoid_soft_cross_entropy": [[109, 151], ["isinstance", "chainer.backend.get_array_module", "chainer.functions.exp", "range", "sigmoid_soft_cross_entropy.sigmoid_soft_cross_entropy", "chainer.functions.sum", "backend.get_array_module.random.normal", "max", "len"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.sigmoid_soft_cross_entropy.sigmoid_soft_cross_entropy"], ["", "def", "noised_sigmoid_soft_cross_entropy", "(", "y", ",", "t", ",", "mc_iteration", ",", "normalize", "=", "True", ",", "reduce", "=", "'mean'", ")", ":", "\n", "    ", "\"\"\" Sigmoid Soft Cross-entropy for aleatoric uncertainty estimates.\n\n    Args:\n        y (list of ~chainer.Variable): logits and sigma\n        t (~numpy.ndarray or ~cupy.ndarray): ground-truth\n        mc_iteration (int): number of iteration of MCMC.\n        normalize (bool, optional): Defaults to True.\n        reduce (str, optional): Defaults to 'mean'.\n\n    Returns:\n        [~chainer.Variable]: Loss value.\n    \"\"\"", "\n", "assert", "isinstance", "(", "y", ",", "(", "list", ",", "tuple", ")", ")", "\n", "\n", "logits", ",", "log_std", "=", "y", "\n", "\n", "assert", "logits", ".", "shape", "==", "log_std", ".", "shape", "\n", "assert", "logits", ".", "shape", "==", "t", ".", "shape", "\n", "\n", "xp", "=", "backend", ".", "get_array_module", "(", "t", ")", "\n", "\n", "# std = F.sqrt(F.exp(log_var))", "\n", "std", "=", "F", ".", "exp", "(", "log_std", ")", "\n", "\n", "loss", "=", "0.", "\n", "\n", "for", "_", "in", "range", "(", "mc_iteration", ")", ":", "\n", "        ", "noise", "=", "std", "*", "xp", ".", "random", ".", "normal", "(", "0.", ",", "1.", ",", "std", ".", "shape", ")", "\n", "loss", "+=", "sigmoid_soft_cross_entropy", "(", "logits", "+", "noise", ",", "t", ",", "\n", "normalize", "=", "False", ",", "\n", "reduce", "=", "'no'", ")", "\n", "\n", "", "if", "not", "reduce", "==", "'mean'", ":", "\n", "        ", "return", "loss", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "count", "=", "loss", ".", "size", "*", "mc_iteration", "\n", "", "else", ":", "\n", "        ", "count", "=", "max", "(", "1", ",", "len", "(", "loss", ")", ")", "*", "mc_iteration", "\n", "\n", "", "return", "F", ".", "sum", "(", "loss", ")", "/", "count", "\n", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.noised_mean_squared_error.noised_squared_error": [[5, 20], ["isinstance", "chainer.functions.sum", "len", "chainer.functions.exp"], "function", ["None"], ["def", "noised_squared_error", "(", "y", ",", "t", ",", "normalize", "=", "False", ")", ":", "\n", "\n", "    ", "assert", "isinstance", "(", "y", ",", "(", "list", ",", "tuple", ")", ")", "\n", "logits", ",", "log_var", "=", "y", "\n", "\n", "loss", "=", "F", ".", "exp", "(", "-", "log_var", ")", "*", "(", "logits", "-", "t", ")", "**", "2.", "+", "log_var", "\n", "\n", "if", "normalize", ":", "\n", "        ", "count", "=", "loss", ".", "size", "\n", "", "else", ":", "\n", "        ", "count", "=", "len", "(", "loss", ")", "\n", "\n", "", "loss", "=", "F", ".", "sum", "(", "loss", "/", "count", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.noised_mean_squared_error.noised_mean_squared_error": [[21, 33], ["noised_mean_squared_error.noised_squared_error"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.noised_mean_squared_error.noised_squared_error"], ["", "def", "noised_mean_squared_error", "(", "y", ",", "t", ")", ":", "\n", "    ", "\"\"\" Mean squared error for aleatoric uncertainty estimates.\n    See: https://arxiv.org/pdf/1703.04977.pdf\n\n    Args:\n        y (list of ~chainer.Variable): logits and sigma\n        t (~numpy.ndarray or ~cupy.ndarray): ground-truth\n\n    Returns:\n        [~chainer.Variable]: Loss value.\n    \"\"\"", "\n", "return", "noised_squared_error", "(", "y", ",", "t", ",", "normalize", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.volume.VolumeDataset.normalize": [[27, 62], ["numpy.transpose", "image._inspect_n_args", "volume.VolumeDataset.normalizer", "volume.VolumeDataset.normalizer", "NotImplementedError", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image._inspect_n_args", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.normalizer", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.normalizer"], ["def", "normalize", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "\n", "# reshape", "\n", "        ", "if", "x", ".", "ndim", "==", "3", ":", "\n", "            ", "x", "=", "x", "[", "np", ".", "newaxis", "]", "\n", "", "elif", "x", ".", "ndim", "==", "4", ":", "\n", "            ", "x", "=", "np", ".", "transpose", "(", "x", ",", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "# [c, w, h, d]", "\n", "\n", "", "if", "y", "is", "not", "None", ":", "\n", "# NOTE: assume that `y` is categorical label", "\n", "            ", "if", "y", ".", "dtype", "in", "[", "np", ".", "int32", ",", "np", ".", "int64", "]", ":", "\n", "                ", "if", "y", ".", "ndim", "==", "4", ":", "\n", "                    ", "if", "y", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "                        ", "y", "=", "y", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "\n", "# NOTE: assume that `y` is continuous label (e.g., heatmap)", "\n", "", "", "", "elif", "y", ".", "dtype", "in", "[", "np", ".", "float32", ",", "np", ".", "float64", "]", ":", "\n", "                ", "if", "y", ".", "ndim", "==", "3", ":", "\n", "                    ", "y", "=", "y", "[", "np", ".", "newaxis", "]", "\n", "", "elif", "y", ".", "ndim", "==", "4", ":", "\n", "                    ", "y", "=", "np", ".", "transpose", "(", "y", ",", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "# [c, w, h, d]", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'unsupported dtype..'", ")", "\n", "\n", "# normalizer", "\n", "", "", "if", "self", ".", "normalizer", "is", "not", "None", ":", "\n", "            ", "if", "_inspect_n_args", "(", "self", ".", "normalizer", ")", "==", "2", ":", "\n", "                ", "x", ",", "y", "=", "self", ".", "normalizer", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "normalizer", "(", "x", ")", "\n", "\n", "", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.volume.VolumeDataset.denormalize": [[63, 65], ["NotImplementedError"], "methods", ["None"], ["", "def", "denormalize", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.__init__": [[26, 79], ["super().__init__", "isinstance", "isinstance", "isinstance", "collections.OrderedDict", "filenames.keys", "all", "isinstance", "isinstance", "callable", "callable", "tqdm.tqdm", "file_sizes.append", "numpy.asarray", "files[].extend", "len", "warnings.warn", "len", "glob.glob", "filenames[].format"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.__len__": [[80, 83], ["len", "list", "__init__.BaseDataset._files.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.classes": [[84, 87], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.n_classes": [[88, 93], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.files": [[94, 97], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.dtypes": [[98, 101], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.normalizer": [[102, 105], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.augmentor": [[110, 113], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.normalize": [[114, 118], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.denormalize": [[119, 123], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.get_example": [[124, 128], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.__copy__": [[129, 134], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.train_valid_split": [[138, 172], ["isinstance", "np.delete.__copy__", "len", "numpy.random.choice", "files.keys", "isinstance", "numpy.arange", "int", "numpy.delete", "numpy.asarray", "len", "numpy.random.choice", "numpy.delete", "len", "len", "numpy.asarray", "numpy.asarray", "numpy.arange", "int"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image.ImageDataset.__copy__"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.load_crossval_list": [[174, 188], ["df[].dropna().tolist", "df[].dropna().tolist", "df[].dropna().tolist", "LooseVersion", "LooseVersion", "pd.read_excel", "pd.read_excel", "df[].dropna", "df[].dropna", "df[].dropna"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image.ImageDataset.__init__": [[59, 78], ["filenames.keys", "BaseDataset.__init__", "KeyError"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "patients", "=", "[", "]", ",", "\n", "classes", "=", "None", ",", "\n", "dtypes", "=", "_default_dtypes", ",", "\n", "filenames", "=", "_default_filenames", ",", "\n", "normalizer", "=", "None", ",", "\n", "augmentor", "=", "None", ",", "\n", "mask_cvals", "=", "_default_mask_cvals", ")", ":", "\n", "\n", "        ", "for", "key", "in", "filenames", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "_supported_filetypes", ":", "\n", "                ", "raise", "KeyError", "(", "'unsupported filetype.. <%s>'", "%", "key", ")", "\n", "\n", "", "", "super", "(", "ImageDataset", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "patients", ",", "classes", ",", "dtypes", ",", "\n", "filenames", ",", "normalizer", ",", "augmentor", ")", "\n", "\n", "self", ".", "_mask_cvals", "=", "mask_cvals", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image.ImageDataset.normalize": [[79, 114], ["numpy.transpose", "image._inspect_n_args", "image.ImageDataset.normalizer", "image.ImageDataset.normalizer", "NotImplementedError", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image._inspect_n_args", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.normalizer", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.normalizer"], ["", "def", "normalize", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "\n", "# reshape", "\n", "        ", "if", "x", ".", "ndim", "==", "2", ":", "\n", "            ", "x", "=", "x", "[", "np", ".", "newaxis", "]", "\n", "", "elif", "x", ".", "ndim", "==", "3", ":", "\n", "            ", "x", "=", "np", ".", "transpose", "(", "x", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# [c, w, h]", "\n", "\n", "", "if", "y", "is", "not", "None", ":", "\n", "# NOTE: assume that `y` is categorical label", "\n", "            ", "if", "y", ".", "dtype", "in", "[", "np", ".", "int32", ",", "np", ".", "int64", "]", ":", "\n", "                ", "if", "y", ".", "ndim", "==", "3", ":", "\n", "                    ", "if", "y", ".", "shape", "[", "-", "1", "]", "in", "[", "1", ",", "3", "]", ":", "\n", "                        ", "y", "=", "y", "[", ":", ",", ":", ",", "0", "]", "# NOTE: ad-hoc", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "\n", "# NOTE: assume that `y` is continuous label (e.g., heatmap)", "\n", "", "", "", "elif", "y", ".", "dtype", "in", "[", "np", ".", "float32", ",", "np", ".", "float64", "]", ":", "\n", "                ", "if", "y", ".", "ndim", "==", "2", ":", "\n", "                    ", "y", "=", "y", "[", "np", ".", "newaxis", "]", "\n", "", "elif", "y", ".", "ndim", "==", "3", ":", "\n", "                    ", "y", "=", "np", ".", "transpose", "(", "y", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# [c, w, h]", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'unsupported dtype..'", ")", "\n", "\n", "# normalizer", "\n", "", "", "if", "self", ".", "normalizer", "is", "not", "None", ":", "\n", "            ", "if", "_inspect_n_args", "(", "self", ".", "normalizer", ")", "==", "2", ":", "\n", "                ", "x", ",", "y", "=", "self", ".", "normalizer", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "normalizer", "(", "x", ")", "\n", "\n", "", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image.ImageDataset.denormalize": [[115, 117], ["NotImplementedError"], "methods", ["None"], ["", "def", "denormalize", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image.ImageDataset.masking": [[118, 128], ["numpy.squeeze"], "methods", ["None"], ["", "def", "masking", "(", "self", ",", "x", ",", "y", ",", "mask", ")", ":", "\n", "\n", "        ", "if", "x", ".", "ndim", "-", "1", "!=", "mask", ".", "ndim", ":", "\n", "            ", "mask", "=", "np", ".", "squeeze", "(", "mask", ",", "-", "1", ")", "\n", "\n", "", "x", "[", ":", ",", "mask", "==", "0", "]", "=", "self", ".", "_mask_cvals", "[", "'image'", "]", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "y", "[", "mask", "==", "0", "]", "=", "self", ".", "_mask_cvals", "[", "'label'", "]", "\n", "\n", "", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image.ImageDataset.load_images": [[129, 141], ["image.ImageDataset.files.keys", "data.load_image", "images[].astype"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.load_image"], ["", "def", "load_images", "(", "self", ",", "i", ")", ":", "\n", "\n", "        ", "images", ",", "spacings", "=", "{", "}", ",", "{", "}", "\n", "\n", "for", "key", "in", "self", ".", "files", ".", "keys", "(", ")", ":", "\n", "\n", "            ", "images", "[", "key", "]", ",", "spacings", "[", "key", "]", "=", "load_image", "(", "self", ".", "files", "[", "key", "]", "[", "i", "]", ")", "\n", "\n", "images", "[", "key", "]", "=", "images", "[", "key", "]", ".", "astype", "(", "self", ".", "dtypes", "[", "key", "]", ")", "\n", "\n", "", "return", "images", ",", "spacings", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image.ImageDataset.get_example": [[142, 170], ["image.ImageDataset.ImageDataset.load_images", "images.get", "images.get", "image.ImageDataset.ImageDataset.normalize", "image.ImageDataset.ImageDataset.masking", "image._inspect_n_args", "image.ImageDataset.ImageDataset.augmentor", "image.ImageDataset.ImageDataset.augmentor"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image.ImageDataset.load_images", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image.ImageDataset.normalize", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image.ImageDataset.masking", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image._inspect_n_args", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.augmentor", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.BaseDataset.augmentor"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "\n", "# load", "\n", "        ", "images", ",", "_", "=", "self", ".", "load_images", "(", "i", ")", "\n", "\n", "image", "=", "images", "[", "'image'", "]", "\n", "label", "=", "images", ".", "get", "(", "'label'", ")", "\n", "mask", "=", "images", ".", "get", "(", "'mask'", ")", "\n", "\n", "# transfrom", "\n", "image", ",", "label", "=", "self", ".", "normalize", "(", "image", ",", "label", ")", "\n", "\n", "# masking", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "masking", "(", "image", ",", "label", ",", "mask", ")", "\n", "\n", "# augment", "\n", "", "if", "self", ".", "augmentor", "is", "not", "None", ":", "\n", "            ", "if", "_inspect_n_args", "(", "self", ".", "augmentor", ")", "==", "2", ":", "\n", "                ", "image", ",", "label", "=", "self", ".", "augmentor", "(", "image", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "image", "=", "self", ".", "augmentor", "(", "image", ")", "\n", "\n", "# return", "\n", "", "", "if", "label", "is", "None", ":", "\n", "            ", "return", "image", "\n", "\n", "", "return", "image", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image.ImageDataset.__copy__": [[171, 182], ["image.ImageDataset"], "methods", ["None"], ["", "def", "__copy__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "ImageDataset", "(", "\n", "self", ".", "_root", ",", "\n", "self", ".", "_patients", ",", "\n", "self", ".", "_classes", ",", "\n", "self", ".", "_dtypes", ",", "\n", "self", ".", "_filenames", ",", "\n", "self", ".", "_normalizer", ",", "\n", "self", ".", "_augmentor", ",", "\n", "self", ".", "_mask_cvals", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.image._inspect_n_args": [[36, 39], ["inspect.signature", "len"], "function", ["None"], ["def", "_inspect_n_args", "(", "func", ")", ":", "\n", "    ", "sig", "=", "signature", "(", "func", ")", "\n", "return", "len", "(", "sig", ".", "parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.initializers.bilinear_upsample.BilinearUpsample.__init__": [[80, 83], ["chainer.initializer.Initializer.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "scale", "=", "1.", ",", "dtype", "=", "None", ")", ":", "\n", "        ", "self", ".", "scale", "=", "scale", "\n", "super", "(", "BilinearUpsample", ",", "self", ")", ".", "__init__", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.initializers.bilinear_upsample.BilinearUpsample.__call__": [[84, 100], ["numpy.zeros", "chainer.backends.cuda.get_array_module", "chainer.backends.cuda.get_array_module.asarray", "ValueError", "bilinear_upsample._bilinear_kernel_nd", "range", "range"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.initializers.bilinear_upsample._bilinear_kernel_nd"], ["", "def", "__call__", "(", "self", ",", "array", ")", ":", "\n", "        ", "if", "self", ".", "dtype", "is", "None", ":", "\n", "            ", "dtype", "=", "array", ".", "dtype", "\n", "\n", "", "if", "array", ".", "shape", "[", "0", "]", "!=", "array", ".", "shape", "[", "1", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'The number of input and output channels are NOT same..'", ")", "\n", "\n", "", "ksize", "=", "array", ".", "shape", "[", "2", ":", "]", "\n", "kernel", "=", "self", ".", "scale", "*", "_bilinear_kernel_nd", "(", "ksize", ",", "dtype", ")", "\n", "\n", "weight", "=", "np", ".", "zeros", "(", "array", ".", "shape", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "weight", "[", "range", "(", "array", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "array", ".", "shape", "[", "1", "]", ")", ",", "...", "]", "=", "kernel", "\n", "\n", "xp", "=", "cuda", ".", "get_array_module", "(", "array", ")", "\n", "array", "[", "...", "]", "=", "xp", ".", "asarray", "(", "weight", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.initializers.bilinear_upsample._kernel_center": [[8, 22], ["enumerate", "len", "len"], "function", ["None"], ["def", "_kernel_center", "(", "ksize", ")", ":", "\n", "\n", "    ", "center", "=", "[", "None", "]", "*", "len", "(", "ksize", ")", "\n", "factor", "=", "[", "None", "]", "*", "len", "(", "ksize", ")", "\n", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "ksize", ")", ":", "\n", "\n", "        ", "factor", "[", "i", "]", "=", "(", "s", "+", "1", ")", "//", "2", "\n", "if", "s", "%", "2", "==", "1", ":", "\n", "            ", "center", "[", "i", "]", "=", "factor", "[", "i", "]", "-", "1", "\n", "", "else", ":", "\n", "            ", "center", "[", "i", "]", "=", "factor", "[", "i", "]", "-", "0.5", "\n", "\n", "", "", "return", "center", ",", "factor", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.initializers.bilinear_upsample._bilinear_kernel_2d": [[24, 47], ["bilinear_upsample._kernel_center", "len", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.initializers.bilinear_upsample._kernel_center"], ["", "def", "_bilinear_kernel_2d", "(", "ksize", ")", ":", "\n", "    ", "\"\"\" Get a kernel upsampling by bilinear interpolation\n\n    Args:\n        ksize (list of int): Kernel size.\n\n    Returns:\n        numpy.ndarray: A kernel.\n\n    See also:\n        https://arxiv.org/pdf/1411.4038.pdf\n        https://github.com/d2l-ai/d2l-en/blob/master/chapter_computer-vision/fcn.md#initialize-the-transposed-convolution-layer\n    \"\"\"", "\n", "\n", "assert", "len", "(", "ksize", ")", "==", "2", "\n", "\n", "og", "=", "np", ".", "ogrid", "[", ":", "ksize", "[", "0", "]", ",", ":", "ksize", "[", "1", "]", "]", "\n", "center", ",", "factor", "=", "_kernel_center", "(", "ksize", ")", "\n", "\n", "kernel", "=", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", "[", "0", "]", ")", "/", "factor", "[", "0", "]", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", "[", "1", "]", ")", "/", "factor", "[", "1", "]", ")", "\n", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.initializers.bilinear_upsample._bilinear_kernel_3d": [[49, 61], ["bilinear_upsample._kernel_center", "len", "abs", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.initializers.bilinear_upsample._kernel_center"], ["", "def", "_bilinear_kernel_3d", "(", "ksize", ")", ":", "\n", "\n", "    ", "assert", "len", "(", "ksize", ")", "==", "3", "\n", "\n", "og", "=", "np", ".", "ogrid", "[", ":", "ksize", "[", "0", "]", ",", ":", "ksize", "[", "1", "]", ",", ":", "ksize", "[", "2", "]", "]", "\n", "center", ",", "factor", "=", "_kernel_center", "(", "ksize", ")", "\n", "\n", "kernel", "=", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", "[", "0", "]", ")", "/", "factor", "[", "0", "]", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", "[", "1", "]", ")", "/", "factor", "[", "1", "]", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "2", "]", "-", "center", "[", "2", "]", ")", "/", "factor", "[", "2", "]", ")", "\n", "\n", "return", "kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.initializers.bilinear_upsample._bilinear_kernel_nd": [[63, 73], ["_bilinear_kernel_3d.astype", "len", "bilinear_upsample._bilinear_kernel_2d", "len", "bilinear_upsample._bilinear_kernel_3d", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.initializers.bilinear_upsample._bilinear_kernel_2d", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.initializers.bilinear_upsample._bilinear_kernel_3d"], ["", "def", "_bilinear_kernel_nd", "(", "ksize", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "\n", "    ", "if", "len", "(", "ksize", ")", "==", "2", ":", "\n", "        ", "kernel", "=", "_bilinear_kernel_2d", "(", "ksize", ")", "\n", "", "elif", "len", "(", "ksize", ")", "==", "3", ":", "\n", "        ", "kernel", "=", "_bilinear_kernel_3d", "(", "ksize", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "return", "kernel", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.log_report.LogReport.__init__": [[51, 59], ["chainer.training.extensions.LogReport.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "keys", "=", "None", ",", "trigger", "=", "(", "1", ",", "'iteration'", ")", ",", "postprocess", "=", "None", ",", "\n", "json_name", "=", "'log'", ",", "csv_name", "=", "'log.csv'", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "LogReport", ",", "self", ")", ".", "__init__", "(", "\n", "keys", ",", "trigger", ",", "postprocess", ",", "json_name", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "_log_json_name", "=", "self", ".", "_log_name", "\n", "self", ".", "_log_csv_name", "=", "csv_name", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.log_report.LogReport._write_json_log": [[60, 89], ["open", "fp.seek", "fp.tell", "json.dumps", "new_ending.split.split.split", "fp.write", "fp.seek", "fp.truncate", "json.dumps", "new_ending.split.split.split", "fp.write", "new_ending.split.split.encode", "new_ending.split.split.encode"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write"], ["", "def", "_write_json_log", "(", "self", ",", "path", ",", "_dict", ",", "indent", "=", "4", ")", ":", "\n", "        ", "\"\"\" Append data in JSON format to the end of a JSON file.\n        In the original implementation, if you save it for each iteration,\n        you will write out more of it at once and it will be slower.\n        NOTE: In the original implementation, saving per each iteration might slow down the computation time.\n        NOTE: Assumes file contains a JSON object (like a Python\n        dict) ending in '}'.\n        \"\"\"", "\n", "\n", "with", "open", "(", "path", ",", "'ab'", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "seek", "(", "0", ",", "2", ")", "# Go to the end of file", "\n", "if", "fp", ".", "tell", "(", ")", "==", "0", ":", "# Check if file is empty", "\n", "                ", "new_ending", "=", "json", ".", "dumps", "(", "_dict", ",", "indent", "=", "indent", ")", "\n", "new_ending", "=", "new_ending", ".", "split", "(", "'\\n'", ")", "\n", "new_ending", "=", "[", "' '", "*", "indent", "+", "x", "for", "x", "in", "new_ending", "]", "\n", "new_ending", "=", "'\\n'", ".", "join", "(", "new_ending", ")", "\n", "new_ending", "=", "'[\\n'", "+", "new_ending", "+", "'\\n]'", "\n", "fp", ".", "write", "(", "new_ending", ".", "encode", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "fp", ".", "seek", "(", "-", "2", ",", "2", ")", "\n", "fp", ".", "truncate", "(", ")", "# Remove the last two character", "\n", "\n", "new_ending", "=", "json", ".", "dumps", "(", "_dict", ",", "indent", "=", "indent", ")", "\n", "new_ending", "=", "new_ending", ".", "split", "(", "'\\n'", ")", "\n", "new_ending", "=", "[", "' '", "*", "indent", "+", "x", "for", "x", "in", "new_ending", "]", "\n", "new_ending", "=", "'\\n'", ".", "join", "(", "new_ending", ")", "\n", "new_ending", "=", "',\\n'", "+", "new_ending", "+", "'\\n]'", "\n", "fp", ".", "write", "(", "new_ending", ".", "encode", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.log_report.LogReport._accumulate_observations": [[90, 102], ["summary.add", "summary.add"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add"], ["", "", "", "def", "_accumulate_observations", "(", "self", ",", "trainer", ")", ":", "\n", "\n", "        ", "keys", "=", "self", ".", "_keys", "\n", "observation", "=", "trainer", ".", "observation", "\n", "summary", "=", "self", ".", "_summary", "\n", "\n", "if", "keys", "is", "None", ":", "\n", "            ", "summary", ".", "add", "(", "observation", ")", "\n", "", "else", ":", "\n", "            ", "summary", ".", "add", "(", "{", "k", ":", "observation", "[", "k", "]", "for", "k", "in", "keys", "if", "k", "in", "observation", "}", ")", "\n", "\n", "", "return", "summary", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.log_report.LogReport.initialize": [[103, 128], ["log_report.LogReport._accumulate_observations", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "log_report.LogReport.__call__", "log_report.LogReport._keys.extend", "os.path.dirname", "os.path.dirname", "open", "fp.write", "sorted", "log_report.LogReport._summaries.keys", "log_report.LogReport._keys.append"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.log_report.LogReport._accumulate_observations", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.pixel_shuffle_upsampler.PixelShuffleUpsamplerND.__call__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write"], ["", "def", "initialize", "(", "self", ",", "trainer", ")", ":", "\n", "\n", "        ", "keys", "=", "self", ".", "_keys", "\n", "summary", "=", "self", ".", "_accumulate_observations", "(", "trainer", ")", "\n", "\n", "# make header", "\n", "if", "keys", "is", "None", ":", "\n", "            ", "self", ".", "_keys", "=", "[", "'epoch'", ",", "'iteration'", ",", "'elapsed_time'", "]", "\n", "self", ".", "_keys", ".", "extend", "(", "sorted", "(", "summary", ".", "_summaries", ".", "keys", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_keys", "=", "[", "'epoch'", ",", "'iteration'", ",", "'elapsed_time'", "]", "\n", "for", "k", "in", "keys", ":", "\n", "                ", "if", "k", "not", "in", "self", ".", "_keys", ":", "\n", "                    ", "self", ".", "_keys", ".", "append", "(", "k", ")", "\n", "\n", "", "", "", "self", ".", "_log_csv_name", "=", "os", ".", "path", ".", "join", "(", "trainer", ".", "out", ",", "self", ".", "_log_csv_name", ")", "\n", "self", ".", "_log_json_name", "=", "os", ".", "path", ".", "join", "(", "trainer", ".", "out", ",", "self", ".", "_log_json_name", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "_log_csv_name", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "_log_json_name", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "with", "open", "(", "self", ".", "_log_csv_name", ",", "'w+'", ")", "as", "fp", ":", "\n", "            ", "fp", ".", "write", "(", "','", ".", "join", "(", "self", ".", "_keys", ")", "+", "'\\n'", ")", "\n", "\n", "", "self", ".", "__call__", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.log_report.LogReport._update": [[129, 144], ["log_report.LogReport._write_json_log", "open", "fp.write", "data.keys", "temp_list.append", "temp_list.append", "str"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.log_report.LogReport._write_json_log", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write"], ["", "def", "_update", "(", "self", ",", "data", ")", ":", "\n", "        ", "entry", "=", "{", "key", ":", "data", "[", "key", "]", "if", "key", "in", "data", "else", "None", "for", "key", "in", "self", ".", "_keys", "}", "\n", "\n", "# write CSV file", "\n", "with", "open", "(", "self", ".", "_log_csv_name", ",", "'a'", ")", "as", "fp", ":", "\n", "            ", "temp_list", "=", "[", "]", "\n", "for", "h", "in", "self", ".", "_keys", ":", "\n", "                ", "if", "h", "in", "data", ".", "keys", "(", ")", ":", "\n", "                    ", "temp_list", ".", "append", "(", "str", "(", "data", "[", "h", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "temp_list", ".", "append", "(", "','", ".", "join", "(", "' '", ")", ")", "\n", "", "", "fp", ".", "write", "(", "','", ".", "join", "(", "temp_list", ")", "+", "'\\n'", ")", "\n", "\n", "# write JSON file", "\n", "", "self", ".", "_write_json_log", "(", "self", ".", "_log_json_name", ",", "entry", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.log_report.LogReport._init_trigger": [[145, 147], ["None"], "methods", ["None"], ["", "def", "_init_trigger", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "return", "trainer", ".", "updater", ".", "iteration", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.log_report.LogReport.__call__": [[148, 176], ["log_report.LogReport._accumulate_observations", "log_report.LogReport._trigger", "log_report.LogReport._init_trigger", "log_report.LogReport.compute_mean", "six.iteritems", "log_report.LogReport._log.append", "log_report.LogReport._update", "log_report.LogReport._init_summary", "float", "log_report.LogReport._postprocess"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.log_report.LogReport._accumulate_observations", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.log_report.LogReport._init_trigger", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__._update", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan._replay_buffer.ReplayBuffer._postprocess"], ["", "def", "__call__", "(", "self", ",", "trainer", ")", ":", "\n", "\n", "        ", "summary", "=", "self", ".", "_accumulate_observations", "(", "trainer", ")", "\n", "updater", "=", "trainer", ".", "updater", "\n", "\n", "if", "self", ".", "_trigger", "(", "trainer", ")", "or", "self", ".", "_init_trigger", "(", "trainer", ")", ":", "\n", "\n", "# output the result", "\n", "            ", "stats", "=", "summary", ".", "compute_mean", "(", ")", "\n", "stats_cpu", "=", "{", "}", "\n", "for", "name", ",", "value", "in", "six", ".", "iteritems", "(", "stats", ")", ":", "\n", "                ", "stats_cpu", "[", "name", "]", "=", "float", "(", "value", ")", "# copy to CPU", "\n", "\n", "", "stats_cpu", "[", "'epoch'", "]", "=", "updater", ".", "epoch", "\n", "stats_cpu", "[", "'iteration'", "]", "=", "updater", ".", "iteration", "\n", "stats_cpu", "[", "'elapsed_time'", "]", "=", "trainer", ".", "elapsed_time", "\n", "\n", "if", "self", ".", "_postprocess", "is", "not", "None", ":", "\n", "                ", "self", ".", "_postprocess", "(", "stats_cpu", ")", "\n", "\n", "", "self", ".", "_log", ".", "append", "(", "stats_cpu", ")", "\n", "\n", "# write to the log file", "\n", "self", ".", "_update", "(", "stats_cpu", ")", "\n", "\n", "# reset the summary for the next output", "\n", "self", ".", "_init_summary", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.parameter_statistics_x.ParameterStatisticsX.__init__": [[84, 98], ["chainer.training.extensions.ParameterStatistics.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "links", ",", "statistics", "=", "'default'", ",", "\n", "report_params", "=", "True", ",", "report_grads", "=", "True", ",", "prefix", "=", "None", ",", "\n", "histogram", "=", "True", ",", "trigger", "=", "(", "1", ",", "'epoch'", ")", ",", "skip_nan_params", "=", "False", ",", "\n", "log_dir", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "ParameterStatisticsX", ",", "self", ")", ".", "__init__", "(", "\n", "links", ",", "statistics", ",", "\n", "report_params", ",", "report_grads", ",", "prefix", ",", "\n", "trigger", ",", "skip_nan_params", ")", "\n", "\n", "self", ".", "_histogram", "=", "histogram", "\n", "self", ".", "_log_dir", "=", "log_dir", "\n", "self", ".", "_logger", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.parameter_statistics_x.ParameterStatisticsX.initialize": [[99, 105], ["os.path.join", "tensorboardX.SummaryWriter"], "methods", ["None"], ["", "def", "initialize", "(", "self", ",", "trainer", ")", ":", "\n", "# setup log_dir and logger", "\n", "        ", "if", "self", ".", "_log_dir", "is", "None", ":", "\n", "            ", "self", ".", "_log_dir", "=", "'.tensorboard'", "\n", "", "self", ".", "_log_dir", "=", "os", ".", "path", ".", "join", "(", "trainer", ".", "out", ",", "self", ".", "_log_dir", ")", "\n", "self", ".", "_logger", "=", "SummaryWriter", "(", "log_dir", "=", "self", ".", "_log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.parameter_statistics_x.ParameterStatisticsX.__call__": [[106, 173], ["statistics.items", "parameter_statistics_x.ParameterStatisticsX._trigger", "getattr", "link.namedparams", "parameter_statistics_x.ParameterStatisticsX._logger.add_scalar", "parameter_statistics_x._to_cpu", "six.iteritems", "getattr().ravel", "parameter_statistics_x.ParameterStatisticsX.scalar_report_key_template.format", "chainer.backend.get_array_module().isnan().any", "function", "isinstance", "statistics.update", "parameter_statistics_x.ParameterStatisticsX.histgram_report_key_template.format", "parameter_statistics_x.ParameterStatisticsX._logger.add_histogram", "getattr", "chainer.get_array_types", "parameter_statistics_x._to_cpu", "chainer.backend.get_array_module().isnan", "enumerate", "chainer.backend.get_array_module"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.parameter_statistics_x._to_cpu", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.parameter_statistics_x._to_cpu"], ["", "def", "__call__", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "\"\"\"Execute the statistics extension.\n\n        Collect statistics for the current state of parameters.\n\n        Note that this method will merely update its statistic summary, unless\n        the internal trigger is fired. If the trigger is fired, the summary\n        will also be reported and then reset for the next accumulation.\n\n        Args:\n            trainer (~chainer.training.Trainer): Associated trainer that\n                invoked this extension.\n        \"\"\"", "\n", "\n", "if", "not", "self", ".", "_trigger", "(", "trainer", ")", ":", "\n", "            ", "return", "\n", "\n", "", "statistics", "=", "{", "}", "\n", "\n", "for", "link", "in", "self", ".", "_links", ":", "\n", "            ", "link_name", "=", "getattr", "(", "link", ",", "'name'", ",", "'None'", ")", "\n", "for", "param_name", ",", "param", "in", "link", ".", "namedparams", "(", ")", ":", "\n", "                ", "for", "attr_name", "in", "self", ".", "_attrs", ":", "\n", "                    ", "for", "function_name", ",", "function", "in", "six", ".", "iteritems", "(", "self", ".", "_statistics", ")", ":", "\n", "# Get parameters as a flattend one-dimensional array", "\n", "# since the statistics function should make no", "\n", "# assumption about the axes", "\n", "                        ", "params", "=", "getattr", "(", "param", ",", "attr_name", ")", ".", "ravel", "(", ")", "\n", "\n", "# save as scalar", "\n", "if", "(", "self", ".", "_skip_nan_params", "and", "\n", "(", "backend", ".", "get_array_module", "(", "params", ")", ".", "isnan", "(", "params", ")", ".", "any", "(", ")", ")", ")", ":", "\n", "                            ", "value", "=", "numpy", ".", "nan", "\n", "", "else", ":", "\n", "                            ", "value", "=", "function", "(", "params", ")", "\n", "", "key", "=", "self", ".", "scalar_report_key_template", ".", "format", "(", "\n", "prefix", "=", "self", ".", "_prefix", "+", "'/'", "if", "self", ".", "_prefix", "else", "''", ",", "\n", "link_name", "=", "link_name", ",", "\n", "param_name", "=", "param_name", ",", "\n", "attr_name", "=", "attr_name", ",", "\n", "function_name", "=", "function_name", "\n", ")", "\n", "\n", "if", "(", "isinstance", "(", "value", ",", "chainer", ".", "get_array_types", "(", ")", ")", "\n", "and", "value", ".", "size", ">", "1", ")", ":", "\n", "# Append integer indices to the keys if the", "\n", "# statistic function return multiple values", "\n", "                            ", "statistics", ".", "update", "(", "{", "'{}/{}'", ".", "format", "(", "key", ",", "i", ")", ":", "v", "for", "\n", "i", ",", "v", "in", "enumerate", "(", "value", ")", "}", ")", "\n", "", "else", ":", "\n", "                            ", "statistics", "[", "key", "]", "=", "value", "\n", "\n", "# save as histogram", "\n", "", "if", "self", ".", "_histogram", ":", "\n", "                            ", "key", "=", "self", ".", "histgram_report_key_template", ".", "format", "(", "\n", "prefix", "=", "self", ".", "_prefix", "+", "'/'", "if", "self", ".", "_prefix", "else", "''", ",", "\n", "link_name", "=", "link_name", ",", "\n", "param_name", "=", "param_name", ",", "\n", "attr_name", "=", "attr_name", ",", "\n", ")", "\n", "self", ".", "_logger", ".", "add_histogram", "(", "\n", "key", ",", "_to_cpu", "(", "params", ")", ",", "\n", "trainer", ".", "updater", ".", "iteration", ")", "\n", "\n", "", "", "", "", "", "for", "k", ",", "v", "in", "statistics", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_logger", ".", "add_scalar", "(", "k", ",", "_to_cpu", "(", "v", ")", ",", "trainer", ".", "updater", ".", "iteration", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.parameter_statistics_x._to_cpu": [[16, 20], ["isinstance", "chainer.backends.cuda.to_cpu"], "function", ["None"], ["def", "_to_cpu", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "cupy", ".", "ndarray", ")", ":", "\n", "        ", "x", "=", "cuda", ".", "to_cpu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.__init__": [[81, 100], ["chainer.training.extensions.Evaluator.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "iterator", ",", "target", ",", "\n", "filename", "=", "'validation_iter_{.updater.iteration}'", ",", "\n", "visualizer", "=", "_default_visualizer", ",", "n_vis", "=", "None", ",", "\n", "converter", "=", "convert", ".", "concat_examples", ",", "\n", "device", "=", "None", ",", "\n", "eval_hook", "=", "None", ",", "eval_func", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "Validator", ",", "self", ")", ".", "__init__", "(", "iterator", ",", "target", ",", "\n", "converter", ",", "\n", "device", ",", "eval_hook", ",", "eval_func", ")", "\n", "\n", "assert", "isinstance", "(", "visualizer", ",", "Visualizer", ")", "\n", "\n", "if", "n_vis", "is", "None", ":", "\n", "            ", "n_vis", "=", "np", ".", "inf", "\n", "\n", "", "self", ".", "filename", "=", "filename", "\n", "self", ".", "visualizer", "=", "visualizer", "\n", "self", ".", "n_vis", "=", "n_vis", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.initialize": [[101, 106], ["chainer.reporter.Reporter", "chainer.reporter.Reporter.scope", "validator.Validator.report"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report"], ["", "def", "initialize", "(", "self", ",", "trainer", ")", ":", "\n", "# NOTE: visualize the activations of a model with initial weights", "\n", "        ", "reporter", "=", "reporter_module", ".", "Reporter", "(", ")", "\n", "with", "reporter", ".", "scope", "(", "trainer", ".", "observation", ")", ":", "\n", "            ", "self", ".", "report", "(", "trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.evaluate": [[107, 191], ["hasattr", "chainer.reporter.DictSummary", "validator.Validator.visualizer.reset", "tqdm.tqdm", "callable", "os.path.join", "validator.Validator.visualizer.save", "chainer.reporter.DictSummary.compute_mean", "validator.Validator.eval_hook", "iterator.reset", "copy.copy", "len", "chainer.reporter.DictSummary.add", "filename.format.format.", "filename.format.format.format", "chainer.reporter.report_scope", "validator.Validator.converter", "chainer.function.no_backprop_mode", "isinstance", "hasattr", "hasattr", "hasattr", "validator.Validator.visualizer.add_batch", "warnings.warn", "eval_func", "isinstance", "eval_func", "eval_func"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.__init__.Visualizer.reset", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer.save", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.__init__.Visualizer.reset", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer.add_batch"], ["", "", "def", "evaluate", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "\"\"\"Evaluates the model and returns a result dictionary.\n\n        This method runs the evaluation loop over the validation dataset. It\n        accumulates the reported values to :class:`~chainer.DictSummary` and\n        returns a dictionary whose values are means computed by the summary.\n\n        Note that this function assumes that the main iterator raises\n        ``StopIteration`` or code in the evaluation loop raises an exception.\n        So, if this assumption is not held, the function could be caught in\n        an infinite loop.\n\n        Users can override this method to customize the evaluation routine.\n\n        .. note::\n\n            This method encloses :attr:`eval_func` calls with\n            :func:`function.no_backprop_mode` context, so all calculations\n            using :class:`~chainer.FunctionNode`\\\\s inside\n            :attr:`eval_func` do not make computational graphs. It is for\n            reducing the memory consumption.\n\n        Returns:\n            dict: Result dictionary. This dictionary is further reported via\n            :func:`~chainer.report` without specifying any observer.\n\n        \"\"\"", "\n", "iterator", "=", "self", ".", "_iterators", "[", "'main'", "]", "\n", "eval_func", "=", "self", ".", "eval_func", "or", "self", ".", "_targets", "[", "'main'", "]", "\n", "\n", "if", "self", ".", "eval_hook", ":", "\n", "            ", "self", ".", "eval_hook", "(", "self", ")", "\n", "\n", "", "if", "hasattr", "(", "iterator", ",", "'reset'", ")", ":", "\n", "            ", "iterator", ".", "reset", "(", ")", "\n", "it", "=", "iterator", "\n", "", "else", ":", "\n", "            ", "it", "=", "copy", ".", "copy", "(", "iterator", ")", "\n", "\n", "", "summary", "=", "reporter_module", ".", "DictSummary", "(", ")", "\n", "\n", "self", ".", "visualizer", ".", "reset", "(", ")", "\n", "\n", "desc", "=", "'valid (iter=%08d)'", "%", "trainer", ".", "updater", ".", "iteration", "\n", "total", "=", "len", "(", "it", ".", "dataset", ")", "//", "it", ".", "batch_size", "\n", "\n", "for", "batch", "in", "tqdm", ".", "tqdm", "(", "it", ",", "total", "=", "total", ",", "desc", "=", "desc", ",", "ncols", "=", "80", ",", "leave", "=", "False", ")", ":", "\n", "            ", "observation", "=", "{", "}", "\n", "with", "reporter_module", ".", "report_scope", "(", "observation", ")", ":", "\n", "                ", "in_arrays", "=", "self", ".", "converter", "(", "batch", ",", "self", ".", "device", ")", "\n", "\n", "with", "function", ".", "no_backprop_mode", "(", ")", ":", "\n", "                    ", "if", "isinstance", "(", "in_arrays", ",", "tuple", ")", ":", "\n", "                        ", "eval_func", "(", "*", "in_arrays", ")", "\n", "", "elif", "isinstance", "(", "in_arrays", ",", "dict", ")", ":", "\n", "                        ", "eval_func", "(", "**", "in_arrays", ")", "\n", "", "else", ":", "\n", "                        ", "eval_func", "(", "in_arrays", ")", "\n", "\n", "", "", "", "if", "self", ".", "visualizer", ".", "n_examples", "<", "self", ".", "n_vis", ":", "\n", "                ", "if", "hasattr", "(", "eval_func", ",", "'x'", ")", "and", "hasattr", "(", "eval_func", ",", "'y'", ")", "and", "hasattr", "(", "eval_func", ",", "'t'", ")", ":", "\n", "\n", "                    ", "self", ".", "visualizer", ".", "add_batch", "(", "eval_func", ".", "x", ",", "\n", "eval_func", ".", "y", ",", "\n", "eval_func", ".", "t", ")", "\n", "", "else", ":", "\n", "                    ", "warnings", ".", "warn", "(", "'`eval_func` should have attributes'", "\n", "'`x`, `y` and `t` for visualization..'", ")", "\n", "\n", "", "", "summary", ".", "add", "(", "observation", ")", "\n", "\n", "# save", "\n", "", "filename", "=", "self", ".", "filename", "\n", "if", "callable", "(", "filename", ")", ":", "\n", "            ", "filename", "=", "filename", "(", "trainer", ")", "\n", "", "else", ":", "\n", "            ", "filename", "=", "filename", ".", "format", "(", "trainer", ")", "\n", "\n", "", "out", "=", "os", ".", "path", ".", "join", "(", "trainer", ".", "out", ",", "filename", ")", "\n", "self", ".", "visualizer", ".", "save", "(", "out", ")", "\n", "\n", "return", "summary", ".", "compute_mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report": [[192, 212], ["chainer.reporter.Reporter", "six.iteritems", "chainer.reporter.report", "chainer.reporter.Reporter.add_observer", "chainer.reporter.Reporter.add_observers", "target.namedlinks", "chainer.configuration.using_config", "validator.Validator.evaluate"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.evaluate"], ["", "def", "report", "(", "self", ",", "trainer", ")", ":", "\n", "\n", "# set up a reporter", "\n", "        ", "reporter", "=", "reporter_module", ".", "Reporter", "(", ")", "\n", "if", "self", ".", "name", "is", "not", "None", ":", "\n", "            ", "prefix", "=", "self", ".", "name", "+", "'/'", "\n", "", "else", ":", "\n", "            ", "prefix", "=", "''", "\n", "", "for", "name", ",", "target", "in", "six", ".", "iteritems", "(", "self", ".", "_targets", ")", ":", "\n", "            ", "reporter", ".", "add_observer", "(", "prefix", "+", "name", ",", "target", ")", "\n", "reporter", ".", "add_observers", "(", "prefix", "+", "name", ",", "\n", "target", ".", "namedlinks", "(", "skipself", "=", "True", ")", ")", "\n", "\n", "", "with", "reporter", ":", "\n", "            ", "with", "configuration", ".", "using_config", "(", "'train'", ",", "False", ")", ":", "\n", "                ", "result", "=", "self", ".", "evaluate", "(", "trainer", ")", "\n", "\n", "", "", "reporter_module", ".", "report", "(", "result", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.__call__": [[213, 215], ["validator.Validator.report"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report"], ["", "def", "__call__", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "return", "self", ".", "report", "(", "trainer", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.print_report.PrintReport.__init__": [[28, 34], ["chainer.training.extensions.PrintReport.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "entries", ",", "n_step", "=", "1", ",", "log_report", "=", "'LogReport'", ",", "out", "=", "sys", ".", "stdout", ")", ":", "\n", "\n", "        ", "super", "(", "PrintReport", ",", "self", ")", ".", "__init__", "(", "\n", "entries", ",", "log_report", ",", "out", ")", "\n", "\n", "self", ".", "_n_step", "=", "n_step", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.print_report.PrintReport.__call__": [[35, 62], ["isinstance", "out.write", "trainer.get_extension", "isinstance", "len", "print_report.PrintReport._print", "trainer.get_extension.", "TypeError", "chainer.training.extensions.util.erase_console", "out.write", "type"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write"], ["", "def", "__call__", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "out", "=", "self", ".", "_out", "\n", "\n", "if", "self", ".", "_header", ":", "\n", "            ", "out", ".", "write", "(", "self", ".", "_header", ")", "\n", "self", ".", "_header", "=", "None", "\n", "\n", "", "log_report", "=", "self", ".", "_log_report", "\n", "if", "isinstance", "(", "log_report", ",", "str", ")", ":", "\n", "            ", "log_report", "=", "trainer", ".", "get_extension", "(", "log_report", ")", "\n", "", "elif", "isinstance", "(", "log_report", ",", "log_report_module", ".", "LogReport", ")", ":", "\n", "            ", "log_report", "(", "trainer", ")", "# update the log report", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'log report has a wrong type %s'", "%", "\n", "type", "(", "log_report", ")", ")", "\n", "\n", "", "log", "=", "log_report", ".", "log", "\n", "log_len", "=", "self", ".", "_log_len", "\n", "while", "len", "(", "log", ")", ">", "log_len", ":", "\n", "# delete the printed contents from the current cursor", "\n", "            ", "if", "os", ".", "name", "==", "'nt'", ":", "\n", "                ", "util", ".", "erase_console", "(", "0", ",", "0", ")", "\n", "", "else", ":", "\n", "                ", "out", ".", "write", "(", "'\\033[J'", ")", "\n", "", "self", ".", "_print", "(", "log", "[", "log_len", "]", ")", "\n", "log_len", "+=", "self", ".", "_n_step", "\n", "", "self", ".", "_log_len", "=", "log_len", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.freeze_layers": [[80, 86], ["__init__._freeze_layers"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__._freeze_layers"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.show_statistics": [[87, 89], ["__init__._show_statistics"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__._show_statistics"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.save_args": [[90, 99], ["__init__.Model._args.copy", "open", "json.dump", "__init__.Model.keys", "__init__.Model.pop"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.forward": [[100, 110], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__._len_children": [[7, 11], ["len", "hasattr", "chain.children"], "function", ["None"], ["from", ".", "import", "inference", "# NOQA", "\n", "from", ".", "import", "initializers", "# NOQA", "\n", "from", ".", "import", "links", "# NOQA", "\n", "from", ".", "import", "models", "# NOQA", "\n", "from", ".", "import", "utils", "# NOQA", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__._freeze_layers": [[12, 35], ["chain.children", "getattr", "getattr.disable_update", "hasattr", "__init__._freeze_layers", "getattr.name.startswith", "getattr.name.endswith", "print"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__._freeze_layers"], ["from", ".", "import", "visualizer", "# NOQA", "\n", "from", ".", "import", "updaters", "# NOQA", "\n", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__._show_statistics": [[36, 75], ["chain.children", "chain.children", "print", "__init__._show_statistics._show_statistics_depth"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.discriminators.discriminator_base.DiscriminatorBase.__init__": [[56, 119], ["Model.__init__", "locals", "isinstance", "isinstance", "isinstance", "unet._helper.pool", "unet._helper.activation", "unet._helper.dropout", "len", "len", "discriminator_base.DiscriminatorBase.init_scope", "range", "discriminator_base.DiscriminatorBase.add_link", "range", "discriminator_base.Block"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.pool", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.activation", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.dropout"], ["def", "__init__", "(", "self", ",", "\n", "ndim", ",", "\n", "nlayer", "=", "4", ",", "\n", "nfilter", "=", "64", ",", "\n", "ninner", "=", "1", ",", "\n", "conv_param", "=", "_default_conv_param", ",", "\n", "pool_param", "=", "_default_pool_param", ",", "\n", "norm_param", "=", "_default_norm_param", ",", "\n", "activation_param", "=", "_default_activation_param", ",", "\n", "dropout_param", "=", "_default_dropout_param", ",", "\n", "dropout_enables", "=", "None", ",", "\n", "residual", "=", "False", ",", "\n", "preserve_color", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "DiscriminatorBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_args", "=", "locals", "(", ")", "\n", "\n", "self", ".", "_ndim", "=", "ndim", "\n", "self", ".", "_nlayer", "=", "nlayer", "\n", "\n", "if", "isinstance", "(", "nfilter", ",", "int", ")", ":", "\n", "            ", "nfilter", "=", "[", "nfilter", "*", "(", "2", "**", "i", ")", "for", "i", "in", "range", "(", "nlayer", ")", "]", "\n", "", "assert", "len", "(", "nfilter", ")", "==", "nlayer", "\n", "self", ".", "_nfilter", "=", "nfilter", "\n", "\n", "if", "isinstance", "(", "ninner", ",", "int", ")", ":", "\n", "            ", "ninner", "=", "[", "ninner", "]", "*", "nlayer", "\n", "", "assert", "len", "(", "ninner", ")", "==", "nlayer", "\n", "self", ".", "_ninner", "=", "ninner", "\n", "\n", "self", ".", "_conv_param", "=", "conv_param", "\n", "self", ".", "_pool_param", "=", "pool_param", "\n", "self", ".", "_norm_param", "=", "norm_param", "\n", "self", ".", "_activation_param", "=", "activation_param", ",", "\n", "self", ".", "_dropout_param", "=", "dropout_param", "\n", "\n", "if", "dropout_enables", "is", "None", ":", "\n", "            ", "dropout_enables", "=", "[", "True", "]", "*", "nlayer", "\n", "", "assert", "isinstance", "(", "dropout_enables", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "_dropout_enables", "=", "dropout_enables", "\n", "\n", "self", ".", "_residual", "=", "residual", "\n", "self", ".", "_preserve_color", "=", "preserve_color", "\n", "\n", "self", ".", "_pool", "=", "pool", "(", "pool_param", ")", "\n", "self", ".", "_activation", "=", "activation", "(", "activation_param", ")", "\n", "self", ".", "_dropout", "=", "dropout", "(", "dropout_param", ")", "\n", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "\n", "# down", "\n", "            ", "for", "i", "in", "range", "(", "nlayer", ")", ":", "\n", "\n", "                ", "self", ".", "add_link", "(", "'block_%d'", "%", "i", ",", "\n", "Block", "(", "ndim", ",", "\n", "nfilter", "[", "i", "]", ",", "\n", "conv_param", ",", "\n", "None", "if", "preserve_color", "and", "i", "==", "0", "else", "norm_param", ",", "\n", "activation_param", ",", "\n", "ninner", "[", "i", "]", ",", "\n", "residual", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.discriminators.discriminator_base.DiscriminatorBase.forward": [[120, 136], ["range", "discriminator_base.DiscriminatorBase._pool", "discriminator_base.DiscriminatorBase._dropout"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "h", "=", "x", "\n", "\n", "# down", "\n", "for", "i", "in", "range", "(", "self", ".", "_nlayer", ")", ":", "\n", "\n", "            ", "if", "i", "!=", "0", ":", "\n", "                ", "h", "=", "self", ".", "_pool", "(", "h", ")", "\n", "\n", "", "h", "=", "self", "[", "'block_%d'", "%", "(", "i", ")", "]", "(", "h", ")", "\n", "\n", "if", "self", ".", "_dropout_enables", "[", "i", "]", ":", "\n", "                ", "h", "=", "self", ".", "_dropout", "(", "h", ")", "\n", "\n", "", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.discriminators.patch_discriminator.PatchDiscriminator.__init__": [[44, 90], ["discriminator_base.DiscriminatorBase.__init__", "locals", "conv_param.get", "conv_param.get", "conv_param.get", "conv_param.get", "patch_discriminator.PatchDiscriminator.init_scope", "patch_discriminator.PatchDiscriminator.add_link", "discriminator_base.conv"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.conv"], ["def", "__init__", "(", "self", ",", "\n", "ndim", ",", "\n", "out_channels", ",", "\n", "nlayer", "=", "4", ",", "\n", "nfilter", "=", "64", ",", "\n", "ninner", "=", "1", ",", "\n", "conv_param", "=", "_default_conv_param", ",", "\n", "pool_param", "=", "_default_pool_param", ",", "\n", "norm_param", "=", "_default_norm_param", ",", "\n", "activation_param", "=", "_default_activation_param", ",", "\n", "dropout_param", "=", "_default_dropout_param", ",", "\n", "dropout_enables", "=", "None", ",", "\n", "residual", "=", "False", ",", "\n", "preserve_color", "=", "False", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "PatchDiscriminator", ",", "self", ")", ".", "__init__", "(", "\n", "ndim", ",", "\n", "nlayer", ",", "\n", "nfilter", ",", "\n", "ninner", ",", "\n", "conv_param", ",", "\n", "pool_param", ",", "\n", "norm_param", ",", "\n", "activation_param", ",", "\n", "dropout_param", ",", "\n", "dropout_enables", ",", "\n", "residual", ",", "\n", "preserve_color", ")", "\n", "self", ".", "_args", "=", "locals", "(", ")", "\n", "\n", "self", ".", "_out_channels", "=", "out_channels", "\n", "\n", "conv_out_param", "=", "{", "\n", "'name'", ":", "'conv'", ",", "\n", "'ksize'", ":", "3", ",", "\n", "'stride'", ":", "1", ",", "\n", "'pad'", ":", "1", ",", "\n", "'nobias'", ":", "conv_param", ".", "get", "(", "'nobias'", ",", "False", ")", ",", "\n", "'initialW'", ":", "conv_param", ".", "get", "(", "'initialW'", ",", "None", ")", ",", "\n", "'initial_bias'", ":", "conv_param", ".", "get", "(", "'initial_bias'", ",", "None", ")", ",", "\n", "'hook'", ":", "conv_param", ".", "get", "(", "'hook'", ",", "None", ")", ",", "\n", "}", "\n", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "add_link", "(", "'conv_out'", ",", "conv", "(", "ndim", ",", "None", ",", "out_channels", ",", "conv_out_param", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.discriminators.patch_discriminator.PatchDiscriminator.forward": [[92, 100], ["super().forward", "discriminator_base.crop"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.BayesianConvNet.forward", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.crop"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "h", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "\n", "out", "=", "self", "[", "'conv_out'", "]", "(", "h", ")", "\n", "out", "=", "crop", "(", "out", ",", "h", ".", "shape", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.unet.UNet.__init__": [[66, 125], ["unet_base.UNetBase.__init__", "locals", "conv_param.get", "conv_param.get", "conv_param.get", "conv_param.get", "unet.UNet.init_scope", "unet.UNet.add_link", "_helper.conv"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.conv"], ["def", "__init__", "(", "self", ",", "\n", "ndim", ",", "\n", "out_channels", ",", "\n", "nlayer", "=", "5", ",", "\n", "nfilter", "=", "32", ",", "\n", "ninner", "=", "2", ",", "\n", "conv_param", "=", "_default_conv_param", ",", "\n", "pool_param", "=", "_default_pool_param", ",", "\n", "upconv_param", "=", "_default_upconv_param", ",", "\n", "norm_param", "=", "_default_norm_param", ",", "\n", "activation_param", "=", "_default_activation_param", ",", "\n", "dropout_param", "=", "_default_dropout_param", ",", "\n", "dropout_enables", "=", "None", ",", "\n", "residual", "=", "False", ",", "\n", "preserve_color", "=", "False", ",", "\n", "exp_ninner", "=", "'same'", ",", "\n", "exp_norm_param", "=", "'same'", ",", "\n", "exp_activation_param", "=", "'same'", ",", "\n", "exp_dropout_param", "=", "'same'", ",", "\n", ")", ":", "\n", "\n", "        ", "return_all_latent", "=", "False", "\n", "\n", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", "\n", "ndim", ",", "\n", "nlayer", ",", "\n", "nfilter", ",", "\n", "ninner", ",", "\n", "conv_param", ",", "\n", "pool_param", ",", "\n", "upconv_param", ",", "\n", "norm_param", ",", "\n", "activation_param", ",", "\n", "dropout_param", ",", "\n", "dropout_enables", ",", "\n", "residual", ",", "\n", "preserve_color", ",", "\n", "exp_ninner", ",", "\n", "exp_norm_param", ",", "\n", "exp_activation_param", ",", "\n", "exp_dropout_param", ",", "\n", "return_all_latent", ")", "\n", "self", ".", "_args", "=", "locals", "(", ")", "\n", "\n", "self", ".", "_out_channels", "=", "out_channels", "\n", "\n", "conv_out_param", "=", "{", "\n", "'name'", ":", "'conv'", ",", "\n", "'ksize'", ":", "3", ",", "\n", "'stride'", ":", "1", ",", "\n", "'pad'", ":", "1", ",", "\n", "'nobias'", ":", "conv_param", ".", "get", "(", "'nobias'", ",", "False", ")", ",", "\n", "'initialW'", ":", "conv_param", ".", "get", "(", "'initialW'", ",", "None", ")", ",", "\n", "'initial_bias'", ":", "conv_param", ".", "get", "(", "'initial_bias'", ",", "None", ")", ",", "\n", "'hook'", ":", "conv_param", ".", "get", "(", "'hook'", ",", "None", ")", ",", "\n", "}", "\n", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "add_link", "(", "'conv_out'", ",", "conv", "(", "ndim", ",", "None", ",", "out_channels", ",", "conv_out_param", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.unet.UNet.forward": [[126, 133], ["super().forward", "functions.crop"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.BayesianConvNet.forward", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.crop"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "h", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "out", "=", "self", "[", "'conv_out'", "]", "(", "h", ")", "\n", "out", "=", "crop", "(", "out", ",", "x", ".", "shape", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.bayesian_unet.BayesianUNet.__init__": [[83, 168], ["bayesian_unet._check_dropout_param", "unet_base.UNetBase.__init__", "locals", "bayesian_unet._check_dropout_param", "conv_param.get", "conv_param.get", "conv_param.get", "conv_param.get", "bayesian_unet.BayesianUNet.init_scope", "bayesian_unet.BayesianUNet.add_link", "_helper.conv", "conv_param.get", "bayesian_unet.BayesianUNet.init_scope", "bayesian_unet.BayesianUNet.add_link", "_helper.conv"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.bayesian_unet._check_dropout_param", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.bayesian_unet._check_dropout_param", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.conv", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.conv"], ["def", "__init__", "(", "self", ",", "\n", "ndim", ",", "\n", "out_channels", ",", "\n", "nlayer", "=", "5", ",", "\n", "nfilter", "=", "32", ",", "\n", "ninner", "=", "2", ",", "\n", "sigma", "=", "False", ",", "\n", "sigma_channels", "=", "None", ",", "\n", "conv_param", "=", "_default_conv_param", ",", "\n", "pool_param", "=", "_default_pool_param", ",", "\n", "upconv_param", "=", "_default_upconv_param", ",", "\n", "norm_param", "=", "_default_norm_param", ",", "\n", "activation_param", "=", "_default_activation_param", ",", "\n", "dropout_param", "=", "{", "'name'", ":", "'mc_dropout'", ",", "'ratio'", ":", ".5", ",", "}", ",", "\n", "dropout_enables", "=", "None", ",", "\n", "residual", "=", "False", ",", "\n", "preserve_color", "=", "False", ",", "\n", "exp_ninner", "=", "'same'", ",", "\n", "exp_norm_param", "=", "'same'", ",", "\n", "exp_activation_param", "=", "'same'", ",", "\n", "exp_dropout_param", "=", "'same'", ",", "\n", ")", ":", "\n", "\n", "        ", "_check_dropout_param", "(", "dropout_param", ")", "\n", "if", "exp_dropout_param", "!=", "'same'", ":", "\n", "            ", "_check_dropout_param", "(", "exp_dropout_param", ")", "\n", "\n", "", "return_all_latent", "=", "False", "\n", "\n", "super", "(", "BayesianUNet", ",", "self", ")", ".", "__init__", "(", "\n", "ndim", ",", "\n", "nlayer", ",", "\n", "nfilter", ",", "\n", "ninner", ",", "\n", "conv_param", ",", "\n", "pool_param", ",", "\n", "upconv_param", ",", "\n", "norm_param", ",", "\n", "activation_param", ",", "\n", "dropout_param", ",", "\n", "dropout_enables", ",", "\n", "residual", ",", "\n", "preserve_color", ",", "\n", "exp_ninner", ",", "\n", "exp_norm_param", ",", "\n", "exp_activation_param", ",", "\n", "exp_dropout_param", ",", "\n", "return_all_latent", ")", "\n", "self", ".", "_args", "=", "locals", "(", ")", "\n", "\n", "if", "sigma_channels", "is", "None", ":", "\n", "            ", "sigma_channels", "=", "out_channels", "\n", "\n", "", "self", ".", "_out_channels", "=", "out_channels", "\n", "self", ".", "_sigma", "=", "sigma", "\n", "self", ".", "_sigma_channels", "=", "sigma_channels", "\n", "\n", "conv_out_param", "=", "{", "\n", "'name'", ":", "'conv'", ",", "\n", "'ksize'", ":", "3", ",", "\n", "'stride'", ":", "1", ",", "\n", "'pad'", ":", "1", ",", "\n", "'nobias'", ":", "conv_param", ".", "get", "(", "'nobias'", ",", "False", ")", ",", "\n", "'initialW'", ":", "conv_param", ".", "get", "(", "'initialW'", ",", "None", ")", ",", "\n", "'initial_bias'", ":", "conv_param", ".", "get", "(", "'initial_bias'", ",", "None", ")", ",", "\n", "'hook'", ":", "conv_param", ".", "get", "(", "'hook'", ",", "None", ")", ",", "\n", "}", "\n", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "add_link", "(", "'conv_out'", ",", "conv", "(", "ndim", ",", "None", ",", "out_channels", ",", "conv_out_param", ")", ")", "\n", "\n", "\n", "", "if", "sigma", ":", "\n", "            ", "conv_sigma_param", "=", "{", "\n", "'name'", ":", "'conv'", ",", "\n", "'ksize'", ":", "3", ",", "\n", "'stride'", ":", "1", ",", "\n", "'pad'", ":", "1", ",", "\n", "'nobias'", ":", "True", ",", "\n", "'initialW'", ":", "{", "'name'", ":", "'zero'", "}", ",", "\n", "'hook'", ":", "conv_param", ".", "get", "(", "'hook'", ",", "None", ")", ",", "\n", "}", "\n", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "                ", "self", ".", "add_link", "(", "'conv_sigma'", ",", "conv", "(", "ndim", ",", "None", ",", "sigma_channels", ",", "conv_sigma_param", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.bayesian_unet.BayesianUNet.forward": [[169, 185], ["super().forward", "functions.crop", "functions.crop", "chainer.reporter.report", "chainer.reporter.report", "chainer.mean", "chainer.mean"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.BayesianConvNet.forward", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.crop", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.crop", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "h", "=", "super", "(", ")", ".", "forward", "(", "x", ")", "\n", "\n", "out", "=", "self", "[", "'conv_out'", "]", "(", "h", ")", "\n", "out", "=", "crop", "(", "out", ",", "x", ".", "shape", ")", "\n", "\n", "if", "not", "self", ".", "_sigma", ":", "\n", "            ", "return", "out", "\n", "\n", "", "sigma", "=", "self", "[", "'conv_sigma'", "]", "(", "h", ")", "\n", "sigma", "=", "crop", "(", "sigma", ",", "x", ".", "shape", ")", "\n", "\n", "reporter", ".", "report", "(", "{", "'sigma'", ":", "F", ".", "mean", "(", "sigma", ")", "}", ",", "self", ")", "\n", "\n", "return", "out", ",", "sigma", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.bayesian_unet._check_dropout_param": [[19, 26], ["warnings.warn"], "function", ["None"], ["def", "_check_dropout_param", "(", "param", ")", ":", "\n", "\n", "    ", "name", "=", "param", "[", "'name'", "]", "\n", "if", "name", "==", "'dropout'", ":", "\n", "        ", "warnings", ".", "warn", "(", "'`%s` is not supported in BayesianUNet.. \\\n                        Use ``mc_dropout`` instead.'", "%", "name", ")", "\n", "param", "[", "'name'", "]", "=", "'mc_dropout'", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.unet_base.UNetBaseBlock.__init__": [[27, 57], ["chainer.Chain.__init__", "chainer.Chain.__init__", "_helper.activation", "unet_base.UNetBaseBlock.init_scope", "range", "unet_base.UNetBaseBlock.add_link", "_helper.conv", "unet_base.UNetBaseBlock.add_link", "_helper.norm"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.activation", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.conv", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.norm"], ["def", "__init__", "(", "self", ",", "\n", "ndim", ",", "\n", "nfilter", ",", "\n", "conv_param", ",", "\n", "norm_param", ",", "\n", "activation_param", ",", "\n", "ninner", "=", "2", ",", "\n", "residual", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "UNetBaseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_ndim", "=", "ndim", "\n", "self", ".", "_nfilter", "=", "nfilter", "\n", "\n", "self", ".", "_conv_param", "=", "conv_param", "\n", "self", ".", "_norm_param", "=", "norm_param", "\n", "self", ".", "_activation_param", "=", "activation_param", "\n", "\n", "self", ".", "_ninner", "=", "ninner", "\n", "self", ".", "_residual", "=", "residual", "\n", "\n", "self", ".", "_activation", "=", "activation", "(", "activation_param", ")", "\n", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "\n", "            ", "for", "i", "in", "range", "(", "ninner", ")", ":", "\n", "                ", "self", ".", "add_link", "(", "'conv_%d'", "%", "i", ",", "conv", "(", "ndim", ",", "None", ",", "nfilter", ",", "conv_param", ")", ")", "\n", "\n", "if", "norm_param", "is", "not", "None", ":", "\n", "                    ", "self", ".", "add_link", "(", "'conv_norm_%d'", "%", "i", ",", "norm", "(", "nfilter", ",", "norm_param", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.unet_base.UNetBaseBlock.__call__": [[58, 93], ["range", "range", "unet_base.UNetBaseBlock._activation", "unet_base.UNetBaseBlock._activation", "chainer.identity", "chainer.identity", "unet_base.UNetBaseBlock._activation", "unet_base._n_spatial_unit", "unet_base._n_spatial_unit"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.unet_base._n_spatial_unit", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.unet_base._n_spatial_unit"], ["", "", "", "", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "not", "self", ".", "_residual", ":", "\n", "\n", "            ", "h", "=", "x", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_ninner", ")", ":", "\n", "                ", "h", "=", "self", "[", "'conv_%d'", "%", "i", "]", "(", "h", ")", "\n", "\n", "if", "self", ".", "_norm_param", "is", "not", "None", "and", "_n_spatial_unit", "(", "h", ")", "!=", "1", ":", "# NOTE: if spatial unit is 1, activations could be always", "\n", "                    ", "h", "=", "self", "[", "'conv_norm_%d'", "%", "i", "]", "(", "h", ")", "#        zeroed by the batch normalization", "\n", "\n", "", "h", "=", "self", ".", "_activation", "(", "h", ")", "\n", "\n", "", "return", "h", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "h", "=", "x", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "_ninner", ")", ":", "\n", "                ", "h", "=", "self", "[", "'conv_%d'", "%", "i", "]", "(", "h", ")", "\n", "\n", "if", "self", ".", "_norm_param", "is", "not", "None", "and", "_n_spatial_unit", "(", "h", ")", "!=", "1", ":", "\n", "                    ", "h", "=", "self", "[", "'conv_norm_%d'", "%", "i", "]", "(", "h", ")", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "g", "=", "F", ".", "identity", "(", "h", ")", "# TODO: order should be checked", "\n", "\n", "", "if", "i", "!=", "(", "self", ".", "_ninner", "-", "1", ")", ":", "\n", "                    ", "h", "=", "self", ".", "_activation", "(", "h", ")", "\n", "\n", "", "", "return", "self", ".", "_activation", "(", "g", "+", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.unet_base.UNetExpansionBlock.__init__": [[100, 130], ["unet_base.UNetBaseBlock.__init__", "unet_base.UNetExpansionBlock.init_scope", "unet_base.UNetExpansionBlock.add_link", "_helper.upconv", "unet_base.UNetExpansionBlock.add_link", "_helper.norm"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.upconv", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.norm"], ["    ", "def", "__init__", "(", "self", ",", "\n", "ndim", ",", "\n", "conv_nfilter", ",", "\n", "conv_param", ",", "\n", "upconv_nfilter", ",", "\n", "upconv_param", ",", "\n", "norm_param", ",", "\n", "activation_param", ",", "\n", "ninner", "=", "2", ",", "\n", "residual", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "UNetExpansionBlock", ",", "self", ")", ".", "__init__", "(", "\n", "ndim", ",", "\n", "conv_nfilter", ",", "\n", "conv_param", ",", "\n", "norm_param", ",", "\n", "activation_param", ",", "\n", "ninner", ",", "\n", "residual", ")", "\n", "\n", "self", ".", "_upconv_param", "=", "upconv_param", "\n", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "\n", "            ", "self", ".", "add_link", "(", "'upconv'", ",", "\n", "upconv", "(", "ndim", ",", "None", ",", "upconv_nfilter", ",", "upconv_param", ")", ")", "\n", "\n", "if", "norm_param", "is", "not", "None", ":", "\n", "                ", "self", ".", "add_link", "(", "'upconv_norm'", ",", "\n", "norm", "(", "upconv_nfilter", ",", "norm_param", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.unet_base.UNetExpansionBlock.__call__": [[132, 146], ["unet_base.UNetExpansionBlock._activation", "functions.crop", "chainer.concat", "chainer.concat", "unet_base.UNetBaseBlock.__call__", "unet_base._n_spatial_unit"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.crop", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.pixel_shuffle_upsampler.PixelShuffleUpsamplerND.__call__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.unet_base._n_spatial_unit"], ["", "", "", "def", "__call__", "(", "self", ",", "low", ",", "high", ")", ":", "\n", "\n", "        ", "h", "=", "self", "[", "'upconv'", "]", "(", "low", ")", "\n", "if", "self", ".", "_norm_param", "is", "not", "None", "and", "_n_spatial_unit", "(", "h", ")", "!=", "1", ":", "\n", "            ", "h", "=", "self", "[", "'upconv_norm'", "]", "(", "h", ")", "\n", "", "h", "=", "self", ".", "_activation", "(", "h", ")", "\n", "\n", "h", "=", "crop", "(", "h", ",", "high", ".", "shape", ")", "\n", "h", "=", "F", ".", "concat", "(", "[", "h", ",", "high", "]", ",", "axis", "=", "1", ")", "# NOTE: fuse", "\n", "\n", "h", "=", "super", "(", ")", ".", "__call__", "(", "h", ")", "\n", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.unet_base.UNetBase.__init__": [[197, 307], ["Model.__init__", "locals", "isinstance", "isinstance", "isinstance", "isinstance", "_helper.pool", "_helper.activation", "_helper.dropout", "_helper.activation", "_helper.dropout", "len", "len", "len", "unet_base.UNetBase.init_scope", "range", "range", "unet_base.UNetBase.add_link", "unet_base.UNetBase.add_link", "range", "unet_base.UNetContractionBlock", "unet_base.UNetExpansionBlock"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.pool", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.activation", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.dropout", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.activation", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.dropout"], ["def", "__init__", "(", "self", ",", "\n", "ndim", ",", "\n", "nlayer", "=", "5", ",", "\n", "nfilter", "=", "32", ",", "\n", "ninner", "=", "2", ",", "\n", "conv_param", "=", "_default_conv_param", ",", "\n", "pool_param", "=", "_default_pool_param", ",", "\n", "upconv_param", "=", "_default_upconv_param", ",", "\n", "norm_param", "=", "_default_norm_param", ",", "\n", "activation_param", "=", "_default_activation_param", ",", "\n", "dropout_param", "=", "_default_dropout_param", ",", "\n", "dropout_enables", "=", "None", ",", "\n", "residual", "=", "False", ",", "\n", "preserve_color", "=", "False", ",", "\n", "exp_ninner", "=", "'same'", ",", "\n", "exp_norm_param", "=", "'same'", ",", "\n", "exp_activation_param", "=", "'same'", ",", "\n", "exp_dropout_param", "=", "'same'", ",", "\n", "return_all_latent", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "UNetBase", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_args", "=", "locals", "(", ")", "\n", "\n", "self", ".", "_ndim", "=", "ndim", "\n", "self", ".", "_nlayer", "=", "nlayer", "\n", "\n", "if", "isinstance", "(", "nfilter", ",", "int", ")", ":", "\n", "            ", "nfilter", "=", "[", "nfilter", "*", "(", "2", "**", "i", ")", "for", "i", "in", "range", "(", "nlayer", ")", "]", "\n", "", "assert", "len", "(", "nfilter", ")", "==", "nlayer", "\n", "self", ".", "_nfilter", "=", "nfilter", "\n", "\n", "if", "isinstance", "(", "ninner", ",", "int", ")", ":", "\n", "            ", "ninner", "=", "[", "ninner", "]", "*", "nlayer", "\n", "", "assert", "len", "(", "ninner", ")", "==", "nlayer", "\n", "self", ".", "_ninner", "=", "ninner", "\n", "\n", "self", ".", "_conv_param", "=", "conv_param", "\n", "self", ".", "_pool_param", "=", "pool_param", "\n", "self", ".", "_upconv_param", "=", "upconv_param", "\n", "\n", "self", ".", "_norm_param", "=", "norm_param", "\n", "self", ".", "_activation_param", "=", "activation_param", ",", "\n", "self", ".", "_dropout_param", "=", "dropout_param", "\n", "\n", "if", "dropout_enables", "is", "None", ":", "\n", "            ", "dropout_enables", "=", "[", "True", "]", "*", "nlayer", "\n", "", "assert", "isinstance", "(", "dropout_enables", ",", "(", "list", ",", "tuple", ")", ")", "\n", "self", ".", "_dropout_enables", "=", "dropout_enables", "\n", "\n", "if", "exp_ninner", "==", "'same'", ":", "\n", "            ", "exp_ninner", "=", "ninner", "\n", "", "if", "isinstance", "(", "exp_ninner", ",", "int", ")", ":", "\n", "            ", "exp_ninner", "=", "[", "exp_ninner", "]", "*", "nlayer", "\n", "", "assert", "len", "(", "exp_ninner", ")", "==", "nlayer", "\n", "self", ".", "_exp_ninner", "=", "exp_ninner", "\n", "\n", "if", "exp_norm_param", "==", "'same'", ":", "\n", "            ", "exp_norm_param", "=", "norm_param", "\n", "\n", "", "if", "exp_activation_param", "==", "'same'", ":", "\n", "            ", "exp_activation_param", "=", "activation_param", "\n", "\n", "", "if", "exp_dropout_param", "==", "'same'", ":", "\n", "            ", "exp_dropout_param", "=", "dropout_param", "\n", "\n", "", "self", ".", "_exp_norm_param", "=", "exp_norm_param", "\n", "self", ".", "_exp_activation_param", "=", "exp_activation_param", ",", "\n", "self", ".", "_exp_dropout_param", "=", "exp_dropout_param", "\n", "\n", "self", ".", "_residual", "=", "residual", "\n", "self", ".", "_preserve_color", "=", "preserve_color", "\n", "self", ".", "_return_all_latent", "=", "return_all_latent", "\n", "\n", "self", ".", "_pool", "=", "pool", "(", "pool_param", ")", "\n", "\n", "self", ".", "_activation", "=", "activation", "(", "activation_param", ")", "\n", "self", ".", "_dropout", "=", "dropout", "(", "dropout_param", ")", "\n", "\n", "self", ".", "_exp_activation", "=", "activation", "(", "exp_activation_param", ")", "\n", "self", ".", "_exp_dropout", "=", "dropout", "(", "exp_dropout_param", ")", "\n", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "\n", "# down", "\n", "            ", "for", "i", "in", "range", "(", "nlayer", ")", ":", "\n", "\n", "                ", "self", ".", "add_link", "(", "'contraction_block_%d'", "%", "i", ",", "\n", "UNetContractionBlock", "(", "ndim", ",", "\n", "nfilter", "[", "i", "]", ",", "\n", "conv_param", ",", "\n", "None", "if", "preserve_color", "and", "i", "==", "0", "else", "norm_param", ",", "\n", "activation_param", ",", "\n", "ninner", "[", "i", "]", ",", "\n", "residual", ")", ")", "\n", "\n", "# up", "\n", "", "for", "i", "in", "range", "(", "nlayer", "-", "1", ")", ":", "\n", "\n", "                ", "self", ".", "add_link", "(", "'expansion_block_%d'", "%", "i", ",", "\n", "UNetExpansionBlock", "(", "ndim", ",", "\n", "nfilter", "[", "i", "]", ",", "\n", "conv_param", ",", "\n", "nfilter", "[", "i", "+", "1", "]", ",", "\n", "upconv_param", ",", "\n", "exp_norm_param", ",", "\n", "exp_activation_param", ",", "\n", "exp_ninner", "[", "i", "]", ",", "\n", "residual", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.unet_base.UNetBase.forward": [[308, 343], ["range", "reversed", "range", "unet_base.UNetBase._pool", "unet_base.UNetBase._dropout", "unet_base.UNetBase._exp_dropout"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "stored_activations", "=", "{", "}", "\n", "\n", "h", "=", "x", "\n", "\n", "# down", "\n", "for", "i", "in", "range", "(", "self", ".", "_nlayer", ")", ":", "\n", "\n", "            ", "if", "i", "!=", "0", ":", "\n", "                ", "h", "=", "self", ".", "_pool", "(", "h", ")", "\n", "\n", "", "h", "=", "self", "[", "'contraction_block_%d'", "%", "(", "i", ")", "]", "(", "h", ")", "\n", "\n", "if", "self", ".", "_dropout_enables", "[", "i", "]", ":", "\n", "                ", "h", "=", "self", ".", "_dropout", "(", "h", ")", "\n", "\n", "", "stored_activations", "[", "'contraction_block_%d'", "%", "(", "i", ")", "]", "=", "h", "\n", "\n", "# up", "\n", "", "for", "i", "in", "reversed", "(", "range", "(", "self", ".", "_nlayer", "-", "1", ")", ")", ":", "\n", "\n", "            ", "l", "=", "stored_activations", "[", "'contraction_block_%d'", "%", "(", "i", ")", "]", "\n", "\n", "h", "=", "self", "[", "'expansion_block_%d'", "%", "i", "]", "(", "h", ",", "l", ")", "\n", "\n", "if", "self", ".", "_dropout_enables", "[", "i", "]", ":", "\n", "                ", "h", "=", "self", ".", "_exp_dropout", "(", "h", ")", "\n", "\n", "", "stored_activations", "[", "'expansion_block_%d'", "%", "(", "i", ")", "]", "=", "h", "\n", "\n", "", "if", "self", ".", "_return_all_latent", ":", "# TODO: memory usage should be checked", "\n", "            ", "return", "h", ",", "stored_activations", "\n", "\n", "", "return", "h", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet.unet_base._n_spatial_unit": [[20, 22], ["numpy.prod"], "function", ["None"], ["def", "_n_spatial_unit", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "prod", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper._mapper": [[158, 185], ["isinstance", "isinstance", "copy.deepcopy", "copy.deepcopy.pop", "inspect.isfunction", "copy.deepcopy.keys", "ValueError", "supported.keys", "KeyError", "functools.partial", "issubclass", "func", "issubclass", "func", "issubclass", "supported.keys", "func", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.pool": [[187, 190], ["_helper._mapper"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper._mapper"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.activation": [[191, 194], ["_helper._mapper"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper._mapper"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.dropout": [[195, 198], ["_helper._mapper"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper._mapper"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.initializer": [[199, 202], ["_helper._mapper"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper._mapper"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.norm": [[203, 208], ["copy.deepcopy", "_helper._mapper"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper._mapper"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.link_hook": [[209, 212], ["_helper._mapper"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper._mapper"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.conv": [[213, 244], ["copy.deepcopy", "copy.deepcopy.get", "copy.deepcopy.get", "copy.deepcopy.pop", "_helper._mapper", "_helper.initializer", "_helper.initializer", "_helper.link_hook", "_mapper.add_hook"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper._mapper", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.initializer", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.initializer", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.link_hook"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.upconv": [[245, 276], ["copy.deepcopy", "copy.deepcopy.get", "copy.deepcopy.get", "copy.deepcopy.pop", "_helper._mapper", "_helper.initializer", "_helper.initializer", "_helper.link_hook", "_mapper.add_hook"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper._mapper", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.initializer", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.initializer", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.link_hook"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.lsgan.LSGANUpdater.discriminative_lossfun": [[33, 41], ["chainer.backend.get_array_module", "chainer.backend.get_array_module.ones", "chainer.backend.get_array_module.zeros", "chainer.reporter.report", "chainer.mean_squared_error", "chainer.mean_squared_error"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report"], ["def", "discriminative_lossfun", "(", "self", ",", "p_real", ",", "p_fake", ")", ":", "\n", "        ", "xp", "=", "backend", ".", "get_array_module", "(", "p_fake", ".", "array", ")", "\n", "t_1", "=", "xp", ".", "ones", "(", "p_real", ".", "array", ".", "shape", ",", "dtype", "=", "p_real", ".", "array", ".", "dtype", ")", "\n", "t_0", "=", "xp", ".", "zeros", "(", "p_fake", ".", "array", ".", "shape", ",", "dtype", "=", "p_fake", ".", "array", ".", "dtype", ")", "\n", "loss", "=", "(", "F", ".", "mean_squared_error", "(", "p_real", ",", "t_1", ")", "+", "F", ".", "mean_squared_error", "(", "p_fake", ",", "t_0", ")", ")", "*", "0.5", "\n", "reporter", ".", "report", "(", "{", "'loss_dis'", ":", "loss", "}", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.lsgan.LSGANUpdater.generative_lossfun": [[42, 48], ["chainer.backend.get_array_module", "chainer.backend.get_array_module.ones", "chainer.mean_squared_error", "chainer.reporter.report"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report"], ["", "def", "generative_lossfun", "(", "self", ",", "p_fake", ")", ":", "\n", "        ", "xp", "=", "backend", ".", "get_array_module", "(", "p_fake", ".", "array", ")", "\n", "t_1", "=", "xp", ".", "ones", "(", "p_fake", ".", "array", ".", "shape", ",", "dtype", "=", "p_fake", ".", "array", ".", "dtype", ")", "\n", "loss", "=", "F", ".", "mean_squared_error", "(", "p_fake", ",", "t_1", ")", "\n", "reporter", ".", "report", "(", "{", "'loss_gen'", ":", "loss", "}", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.dcgan.DCGANUpdater.__init__": [[33, 43], ["CGANUpdater.__init__", "_replay_buffer.ReplayBuffer"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "iterator", ",", "optimizer", ",", "alpha", ",", "buffer_size", "=", "0", ",", "\n", "converter", "=", "convert", ".", "concat_examples", ",", "\n", "device", "=", "None", ",", "loss_func", "=", "None", ",", "auto_new_epoch", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", "DCGANUpdater", ",", "self", ")", ".", "__init__", "(", "\n", "iterator", ",", "optimizer", ",", "alpha", ",", "converter", ",", "\n", "device", ",", "loss_func", ",", "auto_new_epoch", ")", "\n", "\n", "self", ".", "_buffer", "=", "ReplayBuffer", "(", "buffer_size", ")", "\n", "self", ".", "_buffer_size", "=", "buffer_size", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.dcgan.DCGANUpdater.discriminative_lossfun": [[44, 50], ["chainer.reporter.report", "chainer.sum", "chainer.sum", "chainer.softplus", "chainer.softplus"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report"], ["", "def", "discriminative_lossfun", "(", "self", ",", "p_real", ",", "p_fake", ")", ":", "\n", "        ", "size", "=", "p_real", ".", "size", "//", "p_real", ".", "shape", "[", "1", "]", "\n", "loss", "=", "(", "F", ".", "sum", "(", "F", ".", "softplus", "(", "-", "p_real", ")", ")", "/", "size", "+", "F", ".", "sum", "(", "F", ".", "softplus", "(", "p_fake", ")", ")", "/", "size", ")", "*", "0.5", "# NOTE: equivalent to binary cross entropy", "\n", "reporter", ".", "report", "(", "{", "'loss_dis'", ":", "loss", "}", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.dcgan.DCGANUpdater.generative_lossfun": [[51, 56], ["chainer.reporter.report", "chainer.sum", "chainer.softplus"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report"], ["", "def", "generative_lossfun", "(", "self", ",", "p_fake", ")", ":", "\n", "        ", "size", "=", "p_fake", ".", "size", "//", "p_fake", ".", "shape", "[", "1", "]", "\n", "loss", "=", "F", ".", "sum", "(", "F", ".", "softplus", "(", "-", "p_fake", ")", ")", "/", "size", "\n", "reporter", ".", "report", "(", "{", "'loss_gen'", ":", "loss", "}", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.dcgan.DCGANUpdater.update_core": [[57, 100], ["iterator.next", "chainer.dataset.convert._call_converter", "dcgan.DCGANUpdater.generator", "chainer.concat", "dcgan.DCGANUpdater.discriminator", "dcgan.DCGANUpdater.generator.cleargrads", "loss_gen.backward", "opt_gen.update", "dcgan.DCGANUpdater._buffer", "chainer.concat", "dcgan.DCGANUpdater.discriminator", "chainer.concat", "dcgan.DCGANUpdater.discriminator", "dcgan.DCGANUpdater.discriminative_lossfun", "dcgan.DCGANUpdater.discriminator.cleargrads", "dcgan.DCGANUpdater.backward", "opt_dis.update", "dcgan.DCGANUpdater.generative_lossfun", "opt_gen.new_epoch", "opt_dis.new_epoch", "dcgan.DCGANUpdater.conditional_lossfun"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.generator", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.discriminator", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.discriminator", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.discriminator", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.discriminative_lossfun", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.generative_lossfun", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.conditional_lossfun"], ["", "def", "update_core", "(", "self", ")", ":", "\n", "\n", "        ", "iterator", "=", "self", ".", "_iterators", "[", "'main'", "]", "\n", "batch", "=", "iterator", ".", "next", "(", ")", "\n", "in_arrays", "=", "convert", ".", "_call_converter", "(", "self", ".", "converter", ",", "batch", ",", "self", ".", "device", ")", "\n", "\n", "opt_dis", "=", "self", ".", "_optimizers", "[", "'dis'", "]", "\n", "opt_gen", "=", "self", ".", "_optimizers", "[", "'gen'", "]", "\n", "\n", "x_real", ",", "y_real", "=", "in_arrays", "\n", "\n", "# generative", "\n", "y_fake", "=", "self", ".", "generator", "(", "x_real", ")", "\n", "xy_fake", "=", "F", ".", "concat", "(", "(", "x_real", ",", "y_fake", ")", ")", "\n", "p_fake", "=", "self", ".", "discriminator", "(", "xy_fake", ")", "\n", "\n", "loss_gen", "=", "self", ".", "generative_lossfun", "(", "p_fake", ")", "+", "self", ".", "alpha", "*", "self", ".", "conditional_lossfun", "(", "y_fake", ",", "y_real", ")", "\n", "\n", "self", ".", "generator", ".", "cleargrads", "(", ")", "\n", "loss_gen", ".", "backward", "(", ")", "\n", "opt_gen", ".", "update", "(", ")", "\n", "\n", "# discriminative", "\n", "# NOTE: deallocate intermediate variable nodes related to the generator", "\n", "#       with `array` method instead of `unchain_backward`", "\n", "y_fake_old", "=", "self", ".", "_buffer", "(", "y_fake", ".", "array", ")", "\n", "\n", "xy_fake", "=", "F", ".", "concat", "(", "(", "x_real", ",", "y_fake_old", ")", ")", "\n", "p_fake", "=", "self", ".", "discriminator", "(", "xy_fake", ")", "\n", "\n", "xy_real", "=", "F", ".", "concat", "(", "(", "x_real", ",", "y_real", ")", ")", "\n", "p_real", "=", "self", ".", "discriminator", "(", "xy_real", ")", "\n", "\n", "loss_dis", "=", "self", ".", "discriminative_lossfun", "(", "p_real", ",", "p_fake", ")", "\n", "\n", "self", ".", "discriminator", ".", "cleargrads", "(", ")", "\n", "loss_dis", ".", "backward", "(", ")", "\n", "opt_dis", ".", "update", "(", ")", "\n", "\n", "if", "self", ".", "auto_new_epoch", "and", "iterator", ".", "is_new_epoch", ":", "\n", "            ", "opt_gen", ".", "new_epoch", "(", "auto", "=", "True", ")", "\n", "opt_dis", ".", "new_epoch", "(", "auto", "=", "True", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan._replay_buffer.ReplayBuffer.__init__": [[20, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "p", "=", "0.5", ",", "return_variable", "=", "True", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "return_variable", "=", "return_variable", "\n", "self", ".", "_buffer", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan._replay_buffer.ReplayBuffer.buffer": [[27, 32], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "buffer", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_buffer", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "return", "self", ".", "_buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan._replay_buffer.ReplayBuffer._preprocess": [[33, 37], ["isinstance"], "methods", ["None"], ["", "def", "_preprocess", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "isinstance", "(", "x", ",", "Variable", ")", ":", "\n", "            ", "x", "=", "x", ".", "array", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan._replay_buffer.ReplayBuffer._postprocess": [[38, 42], ["chainer.Variable"], "methods", ["None"], ["", "def", "_postprocess", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "return_variable", ":", "\n", "            ", "return", "x", "\n", "", "return", "Variable", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan._replay_buffer.ReplayBuffer.__call__": [[43, 67], ["_replay_buffer.ReplayBuffer._preprocess", "chainer.backend.get_array_module", "len", "_replay_buffer.ReplayBuffer._postprocess", "len", "len", "chainer.backend.get_array_module.vstack", "numpy.random.rand", "numpy.random.randint", "numpy.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan._replay_buffer.ReplayBuffer._preprocess", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan._replay_buffer.ReplayBuffer._postprocess"], ["", "def", "__call__", "(", "self", ",", "samples", ")", ":", "\n", "\n", "        ", "samples", "=", "self", ".", "_preprocess", "(", "samples", ")", "\n", "\n", "xp", "=", "backend", ".", "get_array_module", "(", "samples", ")", "\n", "\n", "n_samples", "=", "len", "(", "samples", ")", "\n", "\n", "if", "self", ".", "size", "==", "0", ":", "\n", "            ", "pass", "\n", "", "elif", "len", "(", "self", ".", "_buffer", ")", "==", "0", ":", "\n", "            ", "self", ".", "_buffer", "=", "samples", "\n", "", "elif", "len", "(", "self", ".", "_buffer", ")", "<", "self", ".", "size", ":", "\n", "            ", "self", ".", "_buffer", "=", "xp", ".", "vstack", "(", "(", "self", ".", "_buffer", ",", "samples", ")", ")", "\n", "", "else", ":", "\n", "# evoke the memory", "\n", "            ", "random_bool", "=", "np", ".", "random", ".", "rand", "(", "n_samples", ")", "<", "self", ".", "p", "\n", "replay_indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "_buffer", ")", ",", "size", "=", "n_samples", ")", "[", "random_bool", "]", "\n", "sample_indices", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "n_samples", ",", "size", "=", "n_samples", ")", "[", "random_bool", "]", "\n", "\n", "self", ".", "_buffer", "[", "replay_indices", "]", ",", "samples", "[", "sample_indices", "]", "=", "samples", "[", "sample_indices", "]", ",", "self", ".", "_buffer", "[", "replay_indices", "]", "# swap", "\n", "\n", "", "return", "self", ".", "_postprocess", "(", "samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.__init__": [[42, 55], ["isinstance", "chainer.training.StandardUpdater.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.discriminator": [[56, 60], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.generator": [[61, 65], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.conditional_lossfun": [[66, 79], ["hasattr", "lossfun", "chainer.reporter.report"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.discriminative_lossfun": [[81, 84], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.generative_lossfun": [[85, 88], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__.CGANUpdater.update_core": [[89, 92], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.cgan.__init__._update": [[10, 18], ["isinstance", "optimizer.update", "isinstance", "optimizer.update", "optimizer.update"], "function", ["None"], ["from", ".", "import", "models", "# NOQA", "\n", "from", ".", "import", "utils", "# NOQA", "\n", "from", ".", "import", "visualizer", "# NOQA", "\n", "from", ".", "import", "updaters", "# NOQA", "\n", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.__init__": [[118, 141], ["isinstance", "chainer.reporter.Reporter", "six.iteritems", "isinstance", "chainer.reporter.Reporter.add_observer", "chainer.reporter.Reporter.add_observers", "target.namedlinks"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "iterator", ",", "model", ",", "\n", "converter", "=", "convert", ".", "concat_examples", ",", "\n", "device", "=", "None", ",", "to_cpu", "=", "True", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "iterator", ",", "iterator_module", ".", "Iterator", ")", ":", "\n", "            ", "iterator", "=", "{", "'main'", ":", "iterator", "}", "\n", "", "self", ".", "_iterators", "=", "iterator", "\n", "\n", "if", "not", "isinstance", "(", "model", ",", "dict", ")", ":", "\n", "            ", "model", "=", "{", "'main'", ":", "model", "}", "\n", "", "self", ".", "_model", "=", "model", "\n", "\n", "self", ".", "observation", "=", "{", "}", "\n", "reporter", "=", "reporter_module", ".", "Reporter", "(", ")", "\n", "for", "name", ",", "target", "in", "six", ".", "iteritems", "(", "self", ".", "_model", ")", ":", "\n", "            ", "reporter", ".", "add_observer", "(", "name", ",", "target", ")", "\n", "reporter", ".", "add_observers", "(", "\n", "name", ",", "target", ".", "namedlinks", "(", "skipself", "=", "True", ")", ")", "\n", "", "self", ".", "reporter", "=", "reporter", "\n", "\n", "self", ".", "converter", "=", "converter", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "to_cpu", "=", "to_cpu", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.get_model": [[142, 144], ["None"], "methods", ["None"], ["", "def", "get_model", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_model", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.get_iterator": [[145, 147], ["None"], "methods", ["None"], ["", "def", "get_iterator", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_iterators", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.predict": [[148, 151], ["inferencer.Inferencer.predict_core"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.predict_core"], ["", "def", "predict", "(", "self", ",", "model", ",", "batch", ")", ":", "\n", "        ", "ret", "=", "self", ".", "predict_core", "(", "model", ",", "batch", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.predict_core": [[152, 166], ["inferencer.Inferencer.converter", "inferencer._variable_to_array", "chainer.function.no_backprop_mode", "chainer.configuration.using_config", "isinstance", "model", "isinstance", "model", "model"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer._variable_to_array"], ["", "def", "predict_core", "(", "self", ",", "model", ",", "batch", ")", ":", "\n", "        ", "in_arrays", "=", "self", ".", "converter", "(", "batch", ",", "self", ".", "device", ")", "\n", "\n", "with", "function", ".", "no_backprop_mode", "(", ")", ":", "\n", "            ", "with", "configuration", ".", "using_config", "(", "'train'", ",", "False", ")", ":", "\n", "\n", "                ", "if", "isinstance", "(", "in_arrays", ",", "tuple", ")", ":", "\n", "                    ", "y", "=", "model", "(", "*", "in_arrays", ")", "\n", "", "elif", "isinstance", "(", "in_arrays", ",", "dict", ")", ":", "\n", "                    ", "y", "=", "model", "(", "**", "in_arrays", ")", "\n", "", "else", ":", "\n", "                    ", "y", "=", "model", "(", "in_arrays", ")", "\n", "\n", "", "", "", "return", "_variable_to_array", "(", "y", ",", "to_cpu", "=", "self", ".", "to_cpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.finalize": [[167, 170], ["six.itervalues", "chainer.dataset.iterator.finalize"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.finalize"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "for", "iterator", "in", "six", ".", "itervalues", "(", "self", ".", "_iterators", ")", ":", "\n", "            ", "iterator", ".", "finalize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.run": [[171, 204], ["hasattr", "inferencer._split_predictions", "chainer.dataset.iterator.reset", "copy.copy", "tqdm.tqdm", "print", "print", "traceback.print_tb", "six.reraise", "chainer.reporter.scope", "inferencer.Inferencer.predict", "rets.append", "len", "sys.exc_info", "sys.exc_info"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer._split_predictions", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.__init__.Visualizer.reset", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.predict"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "reporter", "=", "self", ".", "reporter", "\n", "\n", "iterator", "=", "self", ".", "_iterators", "[", "'main'", "]", "\n", "model", "=", "self", ".", "_model", "[", "'main'", "]", "\n", "\n", "if", "hasattr", "(", "iterator", ",", "'reset'", ")", ":", "\n", "            ", "iterator", ".", "reset", "(", ")", "\n", "it", "=", "iterator", "\n", "", "else", ":", "\n", "            ", "it", "=", "copy", ".", "copy", "(", "iterator", ")", "\n", "\n", "", "rets", "=", "[", "]", "\n", "\n", "try", ":", "\n", "            ", "for", "batch", "in", "tqdm", ".", "tqdm", "(", "it", ",", "desc", "=", "'inference'", ",", "\n", "total", "=", "len", "(", "it", ".", "dataset", ")", "//", "it", ".", "batch_size", ",", "\n", "ncols", "=", "80", ",", "leave", "=", "False", ")", ":", "\n", "                ", "with", "reporter", ".", "scope", "(", "self", ".", "observation", ")", ":", "\n", "                    ", "pred", "=", "self", ".", "predict", "(", "model", ",", "batch", ")", "\n", "rets", ".", "append", "(", "pred", ")", "\n", "\n", "", "", "", "except", "Exception", "as", "e", ":", "\n", "            ", "print", "(", "'Exception in main inference loop: {}'", ".", "format", "(", "e", ")", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "'Traceback (most recent call last):'", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "traceback", ".", "print_tb", "(", "sys", ".", "exc_info", "(", ")", "[", "2", "]", ")", "\n", "six", ".", "reraise", "(", "*", "sys", ".", "exc_info", "(", ")", ")", "\n", "\n", "", "finally", ":", "\n", "            ", "pass", "\n", "\n", "", "return", "_split_predictions", "(", "rets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.__del__": [[205, 207], ["inferencer.Inferencer.finalize"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.finalize"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "finalize", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer._concat_arrays": [[19, 34], ["isinstance", "numpy.concatenate", "cupy.concatenate", "isinstance", "numpy.asarray"], "function", ["None"], ["def", "_concat_arrays", "(", "arrays", ")", ":", "\n", "    ", "\"\"\"Concat CPU and GPU array\n\n    Args:\n        arrays (numpy.array or cupy.array): CPU or GPU array\n    \"\"\"", "\n", "# cupy", "\n", "if", "isinstance", "(", "arrays", "[", "0", "]", ",", "cupy", ".", "ndarray", ")", ":", "\n", "        ", "return", "cupy", ".", "concatenate", "(", "arrays", ")", "\n", "\n", "# numpy", "\n", "", "if", "not", "isinstance", "(", "arrays", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "arrays", "=", "np", ".", "asarray", "(", "arrays", ")", "\n", "\n", "", "return", "np", ".", "concatenate", "(", "arrays", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer._split_predictions": [[36, 67], ["isinstance", "len", "ValueError", "six.moves.range", "tuple", "isinstance", "len", "result.append", "inferencer._concat_arrays", "inferencer._concat_arrays", "inferencer._concat_arrays"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer._concat_arrays", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer._concat_arrays", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer._concat_arrays"], ["", "def", "_split_predictions", "(", "pred", ")", ":", "\n", "    ", "\"\"\"split preditions into list of array(s).\n    Args:\n        pred (list): A list of preditions.\n\n    Returns:\n        List of array(s)\n    \"\"\"", "\n", "if", "len", "(", "pred", ")", "==", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'prediction is empty'", ")", "\n", "\n", "", "first_elem", "=", "pred", "[", "0", "]", "\n", "\n", "if", "isinstance", "(", "first_elem", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "\n", "for", "i", "in", "six", ".", "moves", ".", "range", "(", "len", "(", "first_elem", ")", ")", ":", "\n", "            ", "result", ".", "append", "(", "_concat_arrays", "(", "[", "example", "[", "i", "]", "for", "example", "in", "pred", "]", ")", ")", "\n", "\n", "", "return", "tuple", "(", "result", ")", "\n", "\n", "", "elif", "isinstance", "(", "first_elem", ",", "dict", ")", ":", "\n", "        ", "result", "=", "{", "}", "\n", "\n", "for", "key", "in", "first_elem", ":", "\n", "            ", "result", "[", "key", "]", "=", "_concat_arrays", "(", "[", "example", "[", "key", "]", "for", "example", "in", "pred", "]", ")", "\n", "\n", "", "return", "result", "\n", "\n", "", "else", ":", "\n", "        ", "return", "_concat_arrays", "(", "pred", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer._variable_to_array": [[69, 95], ["isinstance", "tuple", "isinstance", "var.items", "isinstance", "isinstance", "chainer.cuda.to_cpu", "chainer.cuda.to_cpu", "isinstance", "chainer.cuda.to_cpu"], "function", ["None"], ["", "", "def", "_variable_to_array", "(", "var", ",", "to_cpu", "=", "True", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "var", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "array", "=", "[", "v", ".", "data", "if", "isinstance", "(", "v", ",", "chainer", ".", "Variable", ")", "else", "v", "for", "v", "in", "var", "]", "\n", "if", "to_cpu", ":", "\n", "            ", "array", "=", "[", "cuda", ".", "to_cpu", "(", "v", ")", "for", "v", "in", "array", "]", "\n", "\n", "", "return", "tuple", "(", "array", ")", "\n", "\n", "", "elif", "isinstance", "(", "var", ",", "dict", ")", ":", "\n", "        ", "array", "=", "{", "}", "\n", "for", "key", ",", "v", "in", "var", ".", "items", "(", ")", ":", "\n", "            ", "arr", "=", "v", ".", "data", "if", "isinstance", "(", "v", ",", "chainer", ".", "Variable", ")", "else", "v", "\n", "if", "to_cpu", ":", "\n", "                ", "arr", "=", "cuda", ".", "to_cpu", "(", "arr", ")", "\n", "", "array", "[", "key", "]", "=", "arr", "\n", "\n", "", "return", "array", "\n", "", "else", ":", "\n", "        ", "array", "=", "var", "\n", "if", "isinstance", "(", "array", ",", "chainer", ".", "Variable", ")", ":", "\n", "            ", "array", "=", "array", ".", "data", "\n", "", "if", "to_cpu", ":", "\n", "            ", "array", "=", "cuda", ".", "to_cpu", "(", "array", ")", "\n", "\n", "", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._str2bool": [[37, 43], ["ValueError"], "function", ["None"], ["def", "_str2bool", "(", "s", ")", ":", "\n", "    ", "if", "s", "==", "'True'", ":", "\n", "        ", "return", "True", "\n", "", "elif", "s", "==", "'False'", ":", "\n", "        ", "return", "False", "\n", "", "raise", "ValueError", "(", "'Non boolean string'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._str2array": [[44, 55], ["t", "len", "string.split"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.Dataset.t"], ["", "def", "_str2array", "(", "string", ")", ":", "\n", "    ", "for", "t", "in", "[", "int", ",", "float", ",", "_str2bool", "]", ":", "\n", "        ", "try", ":", "\n", "            ", "l", "=", "[", "t", "(", "e", ")", "for", "e", "in", "string", ".", "split", "(", ")", "]", "\n", "if", "len", "(", "l", ")", ">", "1", ":", "\n", "                ", "return", "l", "\n", "", "else", ":", "\n", "                ", "return", "l", "[", "0", "]", "\n", "", "", "except", ":", "\n", "            ", "continue", "\n", "", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._array2str": [[56, 63], ["isinstance", "isinstance", "str", "str"], "function", ["None"], ["", "def", "_array2str", "(", "array", ")", ":", "\n", "    ", "if", "isinstance", "(", "array", ",", "str", ")", ":", "\n", "        ", "return", "array", "\n", "", "elif", "isinstance", "(", "array", ",", "int", ")", ":", "\n", "        ", "return", "str", "(", "array", ")", "\n", "", "else", ":", "\n", "        ", "return", "' '", ".", "join", "(", "[", "str", "(", "e", ")", "for", "e", "in", "array", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.read_header": [[65, 88], ["open", "re.compile", "mhd._str2array", "line.decode.decode", "re.compile.match", "header.items", "meta_regex.match.group().rstrip", "RuntimeError", "meta_regex.match.group", "meta_regex.match.group", "meta_regex.match.group"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._str2array"], ["", "", "def", "read_header", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Read meta image header.\n\n    :param str filename: Image filename with extension mhd or mha.\n    :return: meta data dictionary.\n    :rtype: dict\n    \"\"\"", "\n", "header", "=", "{", "}", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "meta_regex", "=", "re", ".", "compile", "(", "'(.+) = (.*)'", ")", "\n", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "decode", "(", "'ascii'", ")", "\n", "if", "line", "==", "'\\n'", ":", "# empty line", "\n", "                ", "continue", "\n", "", "match", "=", "meta_regex", ".", "match", "(", "line", ")", "\n", "if", "match", ":", "\n", "                ", "header", "[", "match", ".", "group", "(", "1", ")", "]", "=", "match", ".", "group", "(", "2", ")", ".", "rstrip", "(", ")", "\n", "if", "match", ".", "group", "(", "1", ")", "==", "'ElementDataFile'", ":", "\n", "                    ", "break", "\n", "", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Bad meta header line : '", "+", "line", ")", "\n", "", "", "", "header", "=", "{", "key", ":", "_str2array", "(", "value", ")", "for", "(", "key", ",", "value", ")", "in", "header", ".", "items", "(", ")", "}", "#convert string into array if possible", "\n", "return", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._get_dim": [[89, 96], ["hasattr"], "function", ["None"], ["", "def", "_get_dim", "(", "header", ")", ":", "\n", "    ", "dim", "=", "header", "[", "'DimSize'", "]", "\n", "if", "(", "'ElementNumberOfChannels'", "in", "header", ")", ":", "\n", "        ", "dim", "=", "[", "header", "[", "'ElementNumberOfChannels'", "]", "]", "+", "dim", "\n", "", "if", "not", "hasattr", "(", "dim", ",", "'__len__'", ")", ":", "\n", "        ", "dim", "=", "[", "dim", "]", "\n", "", "return", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.read_memmap": [[97, 122], ["mhd.read_header", "numpy.dtype", "mhd._get_dim", "RuntimeError", "numpy.prod", "numpy.memmap", "numpy.array", "os.path.getsize", "os.path.isabs", "os.path.join", "mhd._get_dim", "os.path.dirname", "tuple"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.read_header", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._get_dim", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._get_dim"], ["", "def", "read_memmap", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Read Meta Image as a memory-map.\n\n    :param str filename: Image filename with extension mhd or mha.\n    :return: ND image and meta data.\n    :rtype: (numpy.memmap, dict)\n    :raises: RuntimeError if image data is compressed\n    \"\"\"", "\n", "header", "=", "read_header", "(", "filename", ")", "\n", "data_is_compressed", "=", "'CompressedData'", "in", "header", "and", "header", "[", "'CompressedData'", "]", "\n", "if", "data_is_compressed", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Memory-map cannot be created for compressed data.'", ")", "\n", "", "dtype", "=", "np", ".", "dtype", "(", "_metatype2dtype_table", "[", "header", "[", "'ElementType'", "]", "]", ")", "\n", "data_filename", "=", "header", "[", "'ElementDataFile'", "]", "\n", "if", "data_filename", "==", "'LOCAL'", ":", "#mha", "\n", "        ", "numel", "=", "np", ".", "prod", "(", "np", ".", "array", "(", "_get_dim", "(", "header", ")", ")", ")", "\n", "data_size", "=", "numel", "*", "dtype", ".", "itemsize", "\n", "offset", "=", "os", ".", "path", ".", "getsize", "(", "filename", ")", "-", "data_size", "\n", "data_filename", "=", "filename", "\n", "", "else", ":", "\n", "        ", "offset", "=", "0", "\n", "if", "not", "os", ".", "path", ".", "isabs", "(", "data_filename", ")", ":", "# data_filename is relative", "\n", "            ", "data_filename", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "data_filename", ")", "\n", "", "", "dim", "=", "_get_dim", "(", "header", ")", "\n", "return", "np", ".", "memmap", "(", "data_filename", ",", "dtype", "=", "dtype", ",", "mode", "=", "'r'", ",", "shape", "=", "tuple", "(", "dim", "[", ":", ":", "-", "1", "]", ")", ",", "offset", "=", "offset", ")", ",", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.read": [[123, 163], ["mhd.read_header", "numpy.frombuffer", "mhd._get_dim", "numpy.reshape", "np.reshape.copy", "image.copy.setflags", "list", "numpy.prod", "os.path.getsize", "open", "f.seek", "f.read", "os.path.isabs", "os.path.join", "open", "fimage.read", "numpy.prod", "pylibdeflate.zlib_decompress", "numpy.dtype", "reversed", "numpy.array", "os.path.dirname", "numpy.array", "zlib.decompressobj().decompress", "mhd._get_dim", "numpy.dtype", "mhd._get_dim", "numpy.dtype", "zlib.decompressobj"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.read_header", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._get_dim", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.read", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.read", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._get_dim", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._get_dim"], ["", "def", "read", "(", "filename", ")", ":", "\n", "    ", "\"\"\"Read Meta Image.\n\n    :param str filename: Image filename with extension mhd or mha.\n    :return: ND image and meta data.\n    :rtype: (numpy.ndarray, dict)\n    \"\"\"", "\n", "header", "=", "read_header", "(", "filename", ")", "\n", "data_is_compressed", "=", "'CompressedData'", "in", "header", "and", "header", "[", "'CompressedData'", "]", "\n", "data_filename", "=", "header", "[", "'ElementDataFile'", "]", "\n", "if", "data_filename", "==", "'LOCAL'", ":", "#mha", "\n", "        ", "if", "data_is_compressed", ":", "\n", "            ", "data_size", "=", "header", "[", "'CompressedDataSize'", "]", "\n", "", "else", ":", "\n", "            ", "numel", "=", "np", ".", "prod", "(", "np", ".", "array", "(", "_get_dim", "(", "header", ")", ")", ")", "\n", "data_size", "=", "numel", "*", "np", ".", "dtype", "(", "_metatype2dtype_table", "[", "header", "[", "'ElementType'", "]", "]", ")", ".", "itemsize", "\n", "", "seek_size", "=", "os", ".", "path", ".", "getsize", "(", "filename", ")", "-", "data_size", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "f", ".", "seek", "(", "seek_size", ")", "\n", "data", "=", "f", ".", "read", "(", ")", "\n", "", "", "else", ":", "#mhd", "\n", "        ", "if", "not", "os", ".", "path", ".", "isabs", "(", "data_filename", ")", ":", "# data_filename is relative", "\n", "            ", "data_filename", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "filename", ")", ",", "data_filename", ")", "\n", "", "with", "open", "(", "data_filename", ",", "'rb'", ")", "as", "fimage", ":", "\n", "            ", "data", "=", "fimage", ".", "read", "(", ")", "\n", "", "", "if", "data_is_compressed", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "pylibdeflate", "\n", "numel", "=", "np", ".", "prod", "(", "np", ".", "array", "(", "_get_dim", "(", "header", ")", ")", ")", "\n", "decompressed_size", "=", "numel", "*", "np", ".", "dtype", "(", "_metatype2dtype_table", "[", "header", "[", "'ElementType'", "]", "]", ")", ".", "itemsize", "\n", "data", "=", "pylibdeflate", ".", "zlib_decompress", "(", "data", ",", "decompressed_size", ")", "\n", "", "except", ":", "\n", "            ", "data", "=", "zlib", ".", "decompressobj", "(", ")", ".", "decompress", "(", "data", ")", "\n", "", "", "data", "=", "np", ".", "frombuffer", "(", "data", ",", "dtype", "=", "np", ".", "dtype", "(", "_metatype2dtype_table", "[", "header", "[", "'ElementType'", "]", "]", ")", ")", "\n", "dim", "=", "_get_dim", "(", "header", ")", "\n", "image", "=", "np", ".", "reshape", "(", "data", ",", "list", "(", "reversed", "(", "dim", ")", ")", ",", "order", "=", "'C'", ")", "\n", "ret", "=", "image", ".", "copy", "(", ")", "\n", "ret", ".", "setflags", "(", "write", "=", "1", ")", "\n", "del", "image", "\n", "return", "ret", ",", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._is_compression_preferable": [[171, 173], ["None"], "function", ["None"], ["def", "_is_compression_preferable", "(", "np_dtype", ")", ":", "\n", "    ", "return", "not", "(", "np_dtype", "in", "_no_compression_types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._check_header_sanity": [[174, 182], ["mhd._str2array", "hasattr", "len", "int", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._str2array"], ["", "def", "_check_header_sanity", "(", "header", ")", ":", "\n", "    ", "spacing", "=", "_str2array", "(", "header", "[", "'ElementSpacing'", "]", ")", "\n", "if", "hasattr", "(", "spacing", ",", "'__len__'", ")", ":", "\n", "        ", "n_dims_spacing", "=", "len", "(", "spacing", ")", "\n", "", "else", ":", "\n", "        ", "n_dims_spacing", "=", "1", "\n", "", "if", "n_dims_spacing", "!=", "int", "(", "header", "[", "'NDims'", "]", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "'The number of elements of \"ElementSpacing\" doesn\\'t match \"NDims\". {0} vs {1}'", ".", "format", "(", "n_dims_spacing", ",", "header", "[", "'NDims'", "]", ")", ",", "stacklevel", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write": [[183, 245], ["copy.deepcopy", "mhd._is_compression_preferable", "copy.deepcopy.update", "len", "copy.deepcopy.pop", "copy.deepcopy.pop", "os.path.splitext", "numpy.ascontiguousarray", "mhd._check_header_sanity", "image.astype.astype", "numpy.ones", "numpy.ones", "reversed", "reversed", "mhd._array2str", "str", "open", "f.write", "f.write", "copy.deepcopy.items", "f.write", "copy.deepcopy.items", "warnings.warn", "pylibdeflate.zlib_compress", "len", "f.write", "f.close", "zlib.compress", "open", "fdata.write", "open", "fdata.write", "copy.deepcopy.pop", "copy.deepcopy.pop", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._is_compression_preferable", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._check_header_sanity", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd._array2str", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write"], ["", "", "def", "write", "(", "filename", ",", "image", ",", "header", "=", "{", "}", ")", ":", "\n", "    ", "\"\"\"Write Meta Image.\n\n    :param str filename: Image filename with extension mhd or mha.\n    :param numpy.ndarray image: Image to be written.\n    :param dict [header]: (optional) Meta data for the image.\n    \"\"\"", "\n", "if", "image", ".", "dtype", "==", "np", ".", "bool", ":", "\n", "        ", "image", "=", "image", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# Construct header", "\n", "", "h", "=", "copy", ".", "deepcopy", "(", "_default_header", ")", "\n", "h", "[", "'ElementSpacing'", "]", "=", "np", ".", "ones", "(", "image", ".", "ndim", "-", "1", ")", "if", "(", "'ElementNumberOfChannels'", ")", "in", "header", "else", "np", ".", "ones", "(", "image", ".", "ndim", ")", "# default spacing", "\n", "h", "[", "'CompressedData'", "]", "=", "_is_compression_preferable", "(", "image", ".", "dtype", ".", "name", ")", "#default compression option", "\n", "# Merge default and given headers", "\n", "h", ".", "update", "(", "header", ")", "\n", "# Set image dependent meta data", "\n", "h", "[", "'NDims'", "]", "=", "len", "(", "image", ".", "shape", ")", "\n", "h", "[", "'ElementType'", "]", "=", "_dtype2metatype_table", "[", "image", ".", "dtype", ".", "name", "]", "\n", "if", "(", "'ElementNumberOfChannels'", ")", "in", "h", ":", "\n", "        ", "h", "[", "'ElementNumberOfChannels'", "]", "=", "image", ".", "shape", "[", "-", "1", "]", "\n", "h", "[", "'DimSize'", "]", "=", "reversed", "(", "image", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "h", "[", "'NDims'", "]", "-=", "1", "\n", "", "else", ":", "\n", "        ", "h", "[", "'DimSize'", "]", "=", "reversed", "(", "image", ".", "shape", ")", "\n", "", "h", ".", "pop", "(", "'ElementDataFile'", ",", "None", ")", "#delete 'ElementDataFile'", "\n", "h", ".", "pop", "(", "'CompressedDataSize'", ",", "None", ")", "\n", "h", "=", "{", "key", ":", "_array2str", "(", "value", ")", "for", "(", "key", ",", "value", ")", "in", "h", ".", "items", "(", ")", "}", "#convert array into string if possible", "\n", "filename_base", ",", "file_extension", "=", "os", ".", "path", ".", "splitext", "(", "filename", ")", "\n", "compress_data", "=", "(", "h", "[", "'CompressedData'", "]", "==", "'True'", ")", "#boolean variable for convenience", "\n", "if", "(", "file_extension", "==", "'.mhd'", ")", ":", "\n", "        ", "if", "(", "compress_data", ")", ":", "\n", "            ", "data_filename", "=", "filename_base", "+", "'.zraw'", "\n", "", "else", ":", "\n", "            ", "data_filename", "=", "filename_base", "+", "'.raw'", "\n", "", "", "else", ":", "\n", "        ", "if", "(", "file_extension", "!=", "'.mha'", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "'Unknown file extension \"{0}\". Saving as a .mha file.'", ".", "format", "(", "file_extension", ")", ",", "stacklevel", "=", "2", ")", "\n", "", "data_filename", "=", "'LOCAL'", "\n", "", "data", "=", "np", ".", "ascontiguousarray", "(", "image", ")", "\n", "if", "(", "compress_data", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "pylibdeflate", "\n", "data", "=", "pylibdeflate", ".", "zlib_compress", "(", "data", ")", "\n", "", "except", ":", "\n", "            ", "data", "=", "zlib", ".", "compress", "(", "data", ")", "\n", "", "h", "[", "'CompressedDataSize'", "]", "=", "str", "(", "len", "(", "data", ")", ")", "\n", "", "_check_header_sanity", "(", "h", ")", "\n", "with", "open", "(", "filename", ",", "'w'", ")", "as", "f", ":", "\n", "#write first two meta data", "\n", "        ", "f", ".", "write", "(", "'ObjectType = '", "+", "h", ".", "pop", "(", "'ObjectType'", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'NDims = '", "+", "h", ".", "pop", "(", "'NDims'", ")", "+", "'\\n'", ")", "\n", "for", "key", ",", "value", "in", "h", ".", "items", "(", ")", ":", "#write other meta data", "\n", "            ", "f", ".", "write", "(", "key", "+", "' = '", "+", "value", "+", "'\\n'", ")", "\n", "", "f", ".", "write", "(", "'ElementDataFile = '", "+", "os", ".", "path", ".", "basename", "(", "data_filename", ")", "+", "'\\n'", ")", "#write last meta data", "\n", "if", "data_filename", "==", "'LOCAL'", ":", "\n", "# reopen file in binary mode", "\n", "            ", "f", ".", "close", "(", ")", "\n", "with", "open", "(", "filename", ",", "'ab'", ")", "as", "fdata", ":", "\n", "                ", "fdata", ".", "write", "(", "data", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "open", "(", "data_filename", ",", "'wb'", ")", "as", "fdata", ":", "\n", "                ", "fdata", ".", "write", "(", "data", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.load_image": [[10, 38], ["os.path.splitext", "os.path.basename", "mhd.read", "numpy.transpose", "cv2.imread", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.read"], ["from", ".", "import", "models", "# NOQA", "\n", "from", ".", "import", "utils", "# NOQA", "\n", "from", ".", "import", "visualizer", "# NOQA", "\n", "from", ".", "import", "updaters", "# NOQA", "\n", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.save_image": [[40, 76], ["os.path.dirname", "os.path.splitext", "os.makedirs", "os.path.basename", "mhd.write", "cv2.imwrite", "NotImplementedError", "image.transpose.transpose", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.volume.Quantize.__init__": [[25, 28], ["image.Quantize.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["\n", "\n", "def", "normalize", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.volume.Clip.__init__": [[37, 40], ["image.Clip.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["            ", "if", "y", ".", "dtype", "in", "[", "np", ".", "int32", ",", "np", ".", "int64", "]", ":", "\n", "                ", "if", "y", ".", "ndim", "==", "4", ":", "\n", "                    ", "if", "y", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "                        ", "y", "=", "y", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.volume.Subtract.__init__": [[49, 52], ["image.Subtract.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["                    ", "y", "=", "np", ".", "transpose", "(", "y", ",", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "# [c, w, h, d]", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'unsupported dtype..'", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.volume.Divide.__init__": [[61, 64], ["image.Divide.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["", "", "return", "x", ",", "y", "\n", "\n", "", "def", "denormalize", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.__init__.Normalizer.apply": [[9, 19], ["__init__.Normalizer.preprocess", "__init__.Normalizer.postprocess", "op.apply"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.preprocess", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.postprocess", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.apply"], ["from", ".", "import", "links", "# NOQA", "\n", "from", ".", "import", "models", "# NOQA", "\n", "from", ".", "import", "utils", "# NOQA", "\n", "from", ".", "import", "visualizer", "# NOQA", "\n", "from", ".", "import", "updaters", "# NOQA", "\n", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.__init__.Normalizer.__call__": [[20, 22], ["__init__.Normalizer.apply"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.apply"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.__init__.Operation.preprocess": [[25, 28], ["__init__.Operation.preprocess_core"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.preprocess_core"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.__init__.Operation.postprocess": [[29, 32], ["__init__.Operation.postprocess_core"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.postprocess_core"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.__init__.Operation.apply_core": [[33, 36], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.__init__.Operation.apply": [[37, 42], ["__init__.Operation.preprocess", "__init__.Operation.apply_core", "__init__.Operation.postprocess"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.preprocess", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.GaussNoise.apply_core", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.postprocess"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.Quantize.__init__": [[36, 43], ["locals"], "methods", ["None"], ["def", "_inspect_n_args", "(", "func", ")", ":", "\n", "    ", "sig", "=", "signature", "(", "func", ")", "\n", "return", "len", "(", "sig", ".", "parameters", ")", "\n", "\n", "\n", "", "class", "ImageDataset", "(", "BaseDataset", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.Quantize.ndim": [[44, 47], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.Quantize.apply_core": [[48, 53], ["image.quantize"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.quantize"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.Clip.__init__": [[83, 87], ["locals"], "methods", ["None"], ["            ", "x", "=", "x", "[", "np", ".", "newaxis", "]", "\n", "", "elif", "x", ".", "ndim", "==", "3", ":", "\n", "            ", "x", "=", "np", ".", "transpose", "(", "x", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# [c, w, h]", "\n", "\n", "", "if", "y", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.Clip.ndim": [[88, 91], ["None"], "methods", ["None"], ["# NOTE: assume that `y` is categorical label", "\n", "            ", "if", "y", ".", "dtype", "in", "[", "np", ".", "int32", ",", "np", ".", "int64", "]", ":", "\n", "                ", "if", "y", ".", "ndim", "==", "3", ":", "\n", "                    ", "if", "y", ".", "shape", "[", "-", "1", "]", "in", "[", "1", ",", "3", "]", ":", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.Clip.apply_core": [[92, 95], ["image.clip"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.clip"], ["                        ", "y", "=", "y", "[", ":", ",", ":", ",", "0", "]", "# NOTE: ad-hoc", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.Subtract.__init__": [[122, 126], ["locals"], "methods", ["None"], ["\n", "", "x", "[", ":", ",", "mask", "==", "0", "]", "=", "self", ".", "_mask_cvals", "[", "'image'", "]", "\n", "if", "y", "is", "not", "None", ":", "\n", "            ", "y", "[", "mask", "==", "0", "]", "=", "self", ".", "_mask_cvals", "[", "'label'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.Subtract.ndim": [[127, 130], ["None"], "methods", ["None"], ["", "return", "x", ",", "y", "\n", "\n", "", "def", "load_images", "(", "self", ",", "i", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.Subtract.apply_core": [[131, 134], ["image.subtract"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.subtract"], ["        ", "images", ",", "spacings", "=", "{", "}", ",", "{", "}", "\n", "\n", "for", "key", "in", "self", ".", "files", ".", "keys", "(", ")", ":", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.Divide.__init__": [[161, 165], ["locals"], "methods", ["None"], ["                ", "image", ",", "label", "=", "self", ".", "augmentor", "(", "image", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "image", "=", "self", ".", "augmentor", "(", "image", ")", "\n", "\n", "# return", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.Divide.ndim": [[166, 169], ["None"], "methods", ["None"], ["", "", "if", "label", "is", "None", ":", "\n", "            ", "return", "image", "\n", "\n", "", "return", "image", ",", "label", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.Divide.apply_core": [[170, 173], ["image.divide"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.divide"], ["\n", "", "def", "__copy__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "ImageDataset", "(", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.quantize": [[10, 22], ["numpy.clip", "numpy.round", "numpy.round"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.clip"], ["_supported_filetypes", "=", "[", "\n", "'image'", ",", "\n", "'label'", ",", "\n", "'mask'", ",", "\n", "]", "\n", "\n", "_default_dtypes", "=", "OrderedDict", "(", "{", "\n", "'image'", ":", "np", ".", "float32", ",", "\n", "'label'", ":", "np", ".", "int32", ",", "\n", "'mask'", ":", "np", ".", "uint8", ",", "\n", "}", ")", "\n", "\n", "_default_filenames", "=", "OrderedDict", "(", "{", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.clip": [[55, 74], ["isinstance", "isinstance", "numpy.clip", "numpy.min", "numpy.max", "numpy.swapaxes", "numpy.reshape", "NotImplementedError", "numpy.min().reshape", "numpy.max().reshape", "len", "len", "numpy.min", "numpy.max"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.clip"], ["\n", "def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "patients", "=", "[", "]", ",", "\n", "classes", "=", "None", ",", "\n", "dtypes", "=", "_default_dtypes", ",", "\n", "filenames", "=", "_default_filenames", ",", "\n", "normalizer", "=", "None", ",", "\n", "augmentor", "=", "None", ",", "\n", "mask_cvals", "=", "_default_mask_cvals", ")", ":", "\n", "\n", "        ", "for", "key", "in", "filenames", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "_supported_filetypes", ":", "\n", "                ", "raise", "KeyError", "(", "'unsupported filetype.. <%s>'", "%", "key", ")", "\n", "\n", "", "", "super", "(", "ImageDataset", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "patients", ",", "classes", ",", "dtypes", ",", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.subtract": [[97, 113], ["isinstance", "numpy.mean", "numpy.swapaxes", "numpy.reshape", "numpy.mean().reshape", "NotImplementedError", "len", "len", "numpy.mean"], "function", ["None"], ["", "", "", "elif", "y", ".", "dtype", "in", "[", "np", ".", "float32", ",", "np", ".", "float64", "]", ":", "\n", "                ", "if", "y", ".", "ndim", "==", "2", ":", "\n", "                    ", "y", "=", "y", "[", "np", ".", "newaxis", "]", "\n", "", "elif", "y", ".", "ndim", "==", "3", ":", "\n", "                    ", "y", "=", "np", ".", "transpose", "(", "y", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# [c, w, h]", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'unsupported dtype..'", ")", "\n", "\n", "# normalizer", "\n", "", "", "if", "self", ".", "normalizer", "is", "not", "None", ":", "\n", "            ", "if", "_inspect_n_args", "(", "self", ".", "normalizer", ")", "==", "2", ":", "\n", "                ", "x", ",", "y", "=", "self", ".", "normalizer", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "normalizer", "(", "x", ")", "\n", "\n", "", "", "return", "x", ",", "y", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalizer.image.divide": [[136, 152], ["isinstance", "numpy.std", "numpy.swapaxes", "numpy.reshape", "numpy.std().reshape", "NotImplementedError", "len", "len", "numpy.std"], "function", ["None"], ["load_image", "(", "self", ".", "files", "[", "key", "]", "[", "i", "]", ")", "\n", "\n", "images", "[", "key", "]", "=", "images", "[", "key", "]", ".", "astype", "(", "self", ".", "dtypes", "[", "key", "]", ")", "\n", "\n", "", "return", "images", ",", "spacings", "\n", "\n", "", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "\n", "# load", "\n", "        ", "images", ",", "_", "=", "self", ".", "load_images", "(", "i", ")", "\n", "\n", "image", "=", "images", "[", "'image'", "]", "\n", "label", "=", "images", ".", "get", "(", "'label'", ")", "\n", "mask", "=", "images", ".", "get", "(", "'mask'", ")", "\n", "\n", "# transfrom", "\n", "image", ",", "label", "=", "self", ".", "normalize", "(", "image", ",", "label", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.Flip.__init__": [[32, 36], ["locals"], "methods", ["None"], ["", "elif", "x", ".", "ndim", "==", "4", ":", "\n", "            ", "x", "=", "np", ".", "transpose", "(", "x", ",", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "# [c, w, h, d]", "\n", "\n", "", "if", "y", "is", "not", "None", ":", "\n", "# NOTE: assume that `y` is categorical label", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.Flip.ndim": [[37, 40], ["None"], "methods", ["None"], ["            ", "if", "y", ".", "dtype", "in", "[", "np", ".", "int32", ",", "np", ".", "int64", "]", ":", "\n", "                ", "if", "y", ".", "ndim", "==", "4", ":", "\n", "                    ", "if", "y", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "                        ", "y", "=", "y", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.Flip.apply_core": [[41, 49], ["numpy.random.random", "volume.flip", "volume.flip"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.flip", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.flip"], ["", "else", ":", "\n", "                        ", "pass", "\n", "\n", "# NOTE: assume that `y` is continuous label (e.g., heatmap)", "\n", "", "", "", "elif", "y", ".", "dtype", "in", "[", "np", ".", "float32", ",", "np", ".", "float64", "]", ":", "\n", "                ", "if", "y", ".", "ndim", "==", "3", ":", "\n", "                    ", "y", "=", "y", "[", "np", ".", "newaxis", "]", "\n", "", "elif", "y", ".", "ndim", "==", "4", ":", "\n", "                    ", "y", "=", "np", ".", "transpose", "(", "y", ",", "(", "3", ",", "0", ",", "1", ",", "2", ")", ")", "# [c, w, h, d]", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.Crop.__init__": [[66, 71], ["locals", "isinstance"], "methods", ["None"], ["\n", "", "", "class", "VolumeSliceDataset", "(", "ImageDataset", ")", ":", "\n", "    ", "pass", "\n", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.Crop.ndim": [[72, 75], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.Crop.apply_core": [[76, 99], ["numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "volume.crop", "volume.crop"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.crop", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.crop"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.ResizeCrop.__init__": [[128, 143], ["volume.Crop.__init__", "locals", "isinstance", "all", "isinstance", "zip"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.ResizeCrop.apply_core": [[144, 156], ["volume.Crop.apply_core", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "volume.resize", "volume.resize"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.GaussNoise.apply_core", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.resize", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.resize"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.Affine.__init__": [[301, 338], ["locals", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.Affine.ndim": [[339, 342], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.Affine.apply_core": [[343, 414], ["numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "volume.affine", "volume.affine"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.affine", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.affine"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.GaussNoise.__init__": [[424, 427], ["image.GaussNoise.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.SpeckleNoise.__init__": [[436, 439], ["image.SpeckleNoise.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.SaltNoise.__init__": [[448, 451], ["image.SaltNoise.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.PepperNoise.__init__": [[460, 463], ["image.PepperNoise.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.PoissonNoise.__init__": [[471, 474], ["volume.GaussNoise.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.flip": [[17, 24], ["numpy.asarray().swapaxes", "x.swapaxes.swapaxes", "numpy.asarray"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.crop": [[51, 58], ["numpy.asarray().swapaxes", "x.swapaxes.swapaxes", "numpy.asarray"], "function", ["None"], ["", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'unsupported dtype..'", ")", "\n", "\n", "# normalizer", "\n", "", "", "if", "self", ".", "normalizer", "is", "not", "None", ":", "\n", "            ", "if", "_inspect_n_args", "(", "self", ".", "normalizer", ")", "==", "2", ":", "\n", "                ", "x", ",", "y", "=", "self", ".", "normalizer", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.resize": [[101, 118], ["numpy.asarray().swapaxes", "ndi.interpolation.zoom.swapaxes", "warnings.catch_warnings", "warnings.simplefilter", "scipy.interpolation.zoom", "numpy.asarray", "float", "zip"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.apply_transform": [[158, 192], ["numpy.rollaxis", "numpy.stack", "numpy.rollaxis", "scipy.interpolation.affine_transform"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.transform_matrix_offset_center": [[194, 204], ["numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "float", "float", "float"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.zoom_matrix": [[206, 212], ["numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.rotation_matrix": [[214, 229], ["numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "np.array.dot().dot", "np.array.dot", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.translate_matrix": [[231, 237], ["numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.shear_matrix": [[239, 256], ["numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "np.array.dot().dot", "np.array.dot", "numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.volume.affine": [[258, 285], ["numpy.eye", "numpy.any", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "volume.transform_matrix_offset_center", "volume.apply_transform", "volume.rotation_matrix", "volume.translate_matrix", "volume.shear_matrix", "volume.zoom_matrix", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.transform_matrix_offset_center", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.apply_transform", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.rotation_matrix", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.translate_matrix", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.shear_matrix", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.zoom_matrix"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.__init__": [[16, 22], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add": [[23, 29], ["isinstance", "__init__.DataAugmentor._operations.append"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get": [[30, 32], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.preprocess": [[33, 50], ["isinstance", "numpy.expand_dims", "numpy.expand_dims"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.postprocess": [[51, 62], ["isinstance", "numpy.rollaxis", "numpy.rollaxis"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.apply": [[63, 80], ["__init__.DataAugmentor.preprocess", "__init__.DataAugmentor.preprocess", "__init__.DataAugmentor.postprocess", "__init__.DataAugmentor.postprocess", "op.apply"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.preprocess", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.preprocess", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.postprocess", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.postprocess", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.apply"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.__call__": [[81, 83], ["__init__.DataAugmentor.apply"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.apply"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.summary": [[84, 114], ["collections.OrderedDict", "op.summary().copy", "open", "json.dump", "collections.OrderedDict.keys", "op.summary", "op.summary().copy.keys", "op.summary().copy.pop", "collections.OrderedDict.keys"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.summary"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.__init__": [[119, 121], ["locals"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.preprocess_core": [[122, 129], ["isinstance"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.preprocess": [[130, 134], ["__init__.Operation.preprocess_core", "__init__.Operation.preprocess_core"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.preprocess_core", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.preprocess_core"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.postprocess_core": [[135, 142], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.postprocess": [[143, 147], ["__init__.Operation.postprocess_core", "__init__.Operation.postprocess_core"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.postprocess_core", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.postprocess_core"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.apply_core": [[148, 151], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.apply": [[152, 157], ["__init__.Operation.preprocess", "__init__.Operation.apply_core", "__init__.Operation.postprocess"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.preprocess", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.GaussNoise.apply_core", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.postprocess"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.ndim": [[158, 162], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.summary": [[163, 165], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.Flip.__init__": [[31, 35], ["locals"], "methods", ["None"], ["}", ")", "\n", "\n", "_channel_axis", "=", "0", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.Flip.ndim": [[36, 39], ["None"], "methods", ["None"], ["def", "_inspect_n_args", "(", "func", ")", ":", "\n", "    ", "sig", "=", "signature", "(", "func", ")", "\n", "return", "len", "(", "sig", ".", "parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.Flip.apply_core": [[40, 48], ["numpy.random.random", "image.flip", "image.flip"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.flip", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.flip"], ["\n", "", "class", "ImageDataset", "(", "BaseDataset", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.Crop.__init__": [[65, 70], ["locals", "isinstance"], "methods", ["None"], ["normalizer", "=", "None", ",", "\n", "augmentor", "=", "None", ",", "\n", "mask_cvals", "=", "_default_mask_cvals", ")", ":", "\n", "\n", "        ", "for", "key", "in", "filenames", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "_supported_filetypes", ":", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.Crop.ndim": [[71, 74], ["None"], "methods", ["None"], ["                ", "raise", "KeyError", "(", "'unsupported filetype.. <%s>'", "%", "key", ")", "\n", "\n", "", "", "super", "(", "ImageDataset", ",", "self", ")", ".", "__init__", "(", "\n", "root", ",", "patients", ",", "classes", ",", "dtypes", ",", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.Crop.apply_core": [[75, 94], ["numpy.random.randint", "numpy.random.randint", "image.crop", "image.crop"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.crop", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.crop"], ["filenames", ",", "normalizer", ",", "augmentor", ")", "\n", "\n", "self", ".", "_mask_cvals", "=", "mask_cvals", "\n", "\n", "", "def", "normalize", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "\n", "# reshape", "\n", "        ", "if", "x", ".", "ndim", "==", "2", ":", "\n", "            ", "x", "=", "x", "[", "np", ".", "newaxis", "]", "\n", "", "elif", "x", ".", "ndim", "==", "3", ":", "\n", "            ", "x", "=", "np", ".", "transpose", "(", "x", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# [c, w, h]", "\n", "\n", "", "if", "y", "is", "not", "None", ":", "\n", "# NOTE: assume that `y` is categorical label", "\n", "            ", "if", "y", ".", "dtype", "in", "[", "np", ".", "int32", ",", "np", ".", "int64", "]", ":", "\n", "                ", "if", "y", ".", "ndim", "==", "3", ":", "\n", "                    ", "if", "y", ".", "shape", "[", "-", "1", "]", "in", "[", "1", ",", "3", "]", ":", "\n", "                        ", "y", "=", "y", "[", ":", ",", ":", ",", "0", "]", "# NOTE: ad-hoc", "\n", "", "else", ":", "\n", "                        ", "pass", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.ResizeCrop.__init__": [[125, 140], ["image.Crop.__init__", "locals", "isinstance", "all", "isinstance", "zip"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["            ", "y", "[", "mask", "==", "0", "]", "=", "self", ".", "_mask_cvals", "[", "'label'", "]", "\n", "\n", "", "return", "x", ",", "y", "\n", "\n", "", "def", "load_images", "(", "self", ",", "i", ")", ":", "\n", "\n", "        ", "images", ",", "spacings", "=", "{", "}", ",", "{", "}", "\n", "\n", "for", "key", "in", "self", ".", "files", ".", "keys", "(", ")", ":", "\n", "\n", "            ", "images", "[", "key", "]", ",", "spacings", "[", "key", "]", "=", "load_image", "(", "self", ".", "files", "[", "key", "]", "[", "i", "]", ")", "\n", "\n", "images", "[", "key", "]", "=", "images", "[", "key", "]", ".", "astype", "(", "self", ".", "dtypes", "[", "key", "]", ")", "\n", "\n", "", "return", "images", ",", "spacings", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.ResizeCrop.apply_core": [[141, 152], ["image.Crop.apply_core", "numpy.random.randint", "numpy.random.randint", "image.resize", "image.resize"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.GaussNoise.apply_core", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.resize", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.resize"], ["\n", "", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "\n", "# load", "\n", "        ", "images", ",", "_", "=", "self", ".", "load_images", "(", "i", ")", "\n", "\n", "image", "=", "images", "[", "'image'", "]", "\n", "label", "=", "images", ".", "get", "(", "'label'", ")", "\n", "mask", "=", "images", ".", "get", "(", "'mask'", ")", "\n", "\n", "# transfrom", "\n", "image", ",", "label", "=", "self", ".", "normalize", "(", "image", ",", "label", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.Affine.__init__": [[267, 300], ["locals", "isinstance", "isinstance", "isinstance", "isinstance", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.Affine.ndim": [[301, 304], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.Affine.apply_core": [[305, 348], ["numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "image.affine", "image.affine"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.affine", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.affine"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.GaussNoise.__init__": [[414, 421], ["locals", "functools.partial"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.GaussNoise.ndim": [[422, 425], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.GaussNoise.apply_core": [[426, 436], ["image.GaussNoise._func", "image.GaussNoise._func"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.SpeckleNoise.__init__": [[445, 452], ["locals", "functools.partial"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.SaltNoise.__init__": [[461, 468], ["locals", "functools.partial"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.PepperNoise.__init__": [[477, 484], ["locals", "functools.partial"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.PoissonNoise.__init__": [[492, 498], ["locals", "functools.partial"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.flip": [[16, 23], ["numpy.asarray().swapaxes", "x.swapaxes.swapaxes", "numpy.asarray"], "function", ["None"], ["_default_dtypes", "=", "OrderedDict", "(", "{", "\n", "'image'", ":", "np", ".", "float32", ",", "\n", "'label'", ":", "np", ".", "int32", ",", "\n", "'mask'", ":", "np", ".", "uint8", ",", "\n", "}", ")", "\n", "\n", "_default_filenames", "=", "OrderedDict", "(", "{", "\n", "'image'", ":", "'{root}/{patient}/image.mha'", ",", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.crop": [[50, 57], ["numpy.asarray().swapaxes", "x.swapaxes.swapaxes", "numpy.asarray"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.resize": [[96, 115], ["numpy.asarray().swapaxes", "cv2.resize", "x.swapaxes.swapaxes", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.resize"], ["# NOTE: assume that `y` is continuous label (e.g., heatmap)", "\n", "", "", "", "elif", "y", ".", "dtype", "in", "[", "np", ".", "float32", ",", "np", ".", "float64", "]", ":", "\n", "                ", "if", "y", ".", "ndim", "==", "2", ":", "\n", "                    ", "y", "=", "y", "[", "np", ".", "newaxis", "]", "\n", "", "elif", "y", ".", "ndim", "==", "3", ":", "\n", "                    ", "y", "=", "np", ".", "transpose", "(", "y", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# [c, w, h]", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'unsupported dtype..'", ")", "\n", "\n", "# normalizer", "\n", "", "", "if", "self", ".", "normalizer", "is", "not", "None", ":", "\n", "            ", "if", "_inspect_n_args", "(", "self", ".", "normalizer", ")", "==", "2", ":", "\n", "                ", "x", ",", "y", "=", "self", ".", "normalizer", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "normalizer", "(", "x", ")", "\n", "\n", "", "", "return", "x", ",", "y", "\n", "\n", "", "def", "denormalize", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.apply_transform": [[154, 191], ["numpy.rollaxis", "numpy.stack", "numpy.rollaxis", "scipy.interpolation.affine_transform"], "function", ["None"], ["# masking", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "masking", "(", "image", ",", "label", ",", "mask", ")", "\n", "\n", "# augment", "\n", "", "if", "self", ".", "augmentor", "is", "not", "None", ":", "\n", "            ", "if", "_inspect_n_args", "(", "self", ".", "augmentor", ")", "==", "2", ":", "\n", "                ", "image", ",", "label", "=", "self", ".", "augmentor", "(", "image", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "image", "=", "self", ".", "augmentor", "(", "image", ")", "\n", "\n", "# return", "\n", "", "", "if", "label", "is", "None", ":", "\n", "            ", "return", "image", "\n", "\n", "", "return", "image", ",", "label", "\n", "\n", "", "def", "__copy__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "ImageDataset", "(", "\n", "self", ".", "_root", ",", "\n", "self", ".", "_patients", ",", "\n", "self", ".", "_classes", ",", "\n", "self", ".", "_dtypes", ",", "\n", "self", ".", "_filenames", ",", "\n", "self", ".", "_normalizer", ",", "\n", "self", ".", "_augmentor", ",", "\n", "self", ".", "_mask_cvals", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.transform_matrix_offset_center": [[193, 200], ["numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "float", "float"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.zoom_matrix": [[202, 207], ["numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.rotation_matrix": [[209, 214], ["numpy.array", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.translate_matrix": [[216, 221], ["numpy.array"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.shear_matrix": [[223, 228], ["numpy.array", "numpy.cos", "numpy.sin"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.affine": [[230, 251], ["numpy.eye", "numpy.any", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "image.transform_matrix_offset_center", "image.apply_transform", "image.rotation_matrix", "image.translate_matrix", "image.shear_matrix", "image.zoom_matrix", "numpy.eye"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.transform_matrix_offset_center", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.apply_transform", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.rotation_matrix", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.translate_matrix", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.shear_matrix", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.zoom_matrix"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.clip": [[350, 357], ["functools.wraps", "func", "numpy.clip", "numpy.min", "numpy.max"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.clip"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.gauss_noise": [[358, 361], ["numpy.random.normal().astype", "numpy.random.normal"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.speckle_noise": [[362, 365], ["numpy.random.normal().astype", "numpy.random.normal"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.salt_noise": [[366, 377], ["int", "numpy.max", "numpy.ceil", "numpy.random.randint", "tuple"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.pepper_noise": [[378, 389], ["int", "numpy.min", "numpy.ceil", "numpy.random.randint", "tuple"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.poisson_noise": [[390, 404], ["numpy.min", "numpy.max", "numpy.random.poisson().astype", "float", "numpy.random.poisson"], "function", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.regressor.Regressor.__init__": [[70, 79], ["classifier.Classifier.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "predictor", ",", "\n", "lossfun", "=", "mean_squared_error", ".", "mean_squared_error", ",", "\n", "accfun", "=", "mean_absolute_error", ".", "mean_absolute_error", ",", "\n", "activation", "=", "None", ",", "\n", "x_keys", "=", "(", "0", ")", ",", "t_keys", "=", "(", "-", "1", ")", ")", ":", "\n", "\n", "        ", "super", "(", "Regressor", ",", "self", ")", ".", "__init__", "(", "\n", "predictor", ",", "lossfun", ",", "accfun", ",", "activation", ",", "\n", "x_keys", ",", "t_keys", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.mc_sampler.MCSampler.__init__": [[83, 108], ["functools.partial", "functools.partial", "functools.partial", "chainer.link.Chain.__init__", "callable", "mc_sampler.MCSampler.init_scope"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "\n", "predictor", ",", "\n", "mc_iteration", ",", "\n", "activation", "=", "partial", "(", "F", ".", "softmax", ",", "axis", "=", "1", ")", ",", "\n", "reduce_mean", "=", "partial", "(", "F", ".", "argmax", ",", "axis", "=", "1", ")", ",", "\n", "reduce_var", "=", "partial", "(", "F", ".", "mean", ",", "axis", "=", "1", ")", ",", "\n", "mode", "=", "'variance'", ",", "\n", "eps", "=", "1e-8", ",", "\n", "x_keys", "=", "(", "0", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MCSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "callable", "(", "predictor", ")", ",", "'predictor should be callable..'", "\n", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "predictor", "=", "predictor", "\n", "\n", "", "self", ".", "activation", "=", "activation", "\n", "self", ".", "mc_iteration", "=", "mc_iteration", "\n", "self", ".", "reduce_mean", "=", "reduce_mean", "\n", "self", ".", "reduce_var", "=", "reduce_var", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "self", ".", "x_keys", "=", "x_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.mc_sampler.MCSampler.forward": [[110, 170], ["classifier.get_values", "range", "mc_sampler._concat_samples", "isinstance", "warnings.warn", "mc_sampler.MCSampler.predictor", "mc_sampler.MCSampler.predictor", "_concat_samples.append", "isinstance", "isinstance", "list", "list", "mc_sampler._predict", "isinstance", "itertools.starmap", "itertools.chain.from_iterable", "isinstance", "list", "activation", "len", "len", "zip", "len", "len", "itertools.starmap", "mc_sampler._predict", "zip", "f"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.classifier.get_values", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.mc_sampler._concat_samples", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.mc_sampler._predict", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.activation", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.mc_sampler._predict"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "configuration", ".", "config", ".", "train", ":", "\n", "            ", "warnings", ".", "warn", "(", "'During the training phase, MCMC sampling is not executed..'", ")", "\n", "return", "self", ".", "predictor", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "\n", "", "x", "=", "get_values", "(", "args", ",", "kwargs", ",", "self", ".", "x_keys", ")", "\n", "\n", "# MCMC sampling", "\n", "mc_samples", "=", "[", "]", "\n", "activation", "=", "self", ".", "activation", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "mc_iteration", ")", ":", "\n", "\n", "            ", "logits", "=", "self", ".", "predictor", "(", "x", ")", "\n", "\n", "if", "activation", "is", "None", ":", "\n", "                ", "y", "=", "logits", "\n", "", "elif", "isinstance", "(", "logits", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "assert", "isinstance", "(", "activation", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "logits", ")", "==", "len", "(", "activation", ")", "\n", "\n", "y", "=", "list", "(", "starmap", "(", "lambda", "f", ",", "x", ":", "f", "(", "x", ")", ",", "zip", "(", "activation", ",", "logits", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "y", "=", "activation", "(", "logits", ")", "\n", "\n", "", "mc_samples", ".", "append", "(", "y", ")", "\n", "\n", "", "mc_samples", "=", "_concat_samples", "(", "mc_samples", ")", "\n", "\n", "\n", "# uncertainty estimates", "\n", "reduce_mean", "=", "self", ".", "reduce_mean", "\n", "reduce_var", "=", "self", ".", "reduce_var", "\n", "\n", "if", "isinstance", "(", "mc_samples", ",", "list", ")", ":", "\n", "            ", "if", "reduce_mean", "is", "None", ":", "\n", "                ", "reduce_mean", "=", "[", "None", "]", "*", "len", "(", "mc_samples", ")", "\n", "", "if", "reduce_var", "is", "None", ":", "\n", "                ", "reduce_var", "=", "[", "None", "]", "*", "len", "(", "mc_samples", ")", "\n", "\n", "", "assert", "isinstance", "(", "reduce_mean", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "isinstance", "(", "reduce_var", ",", "(", "list", ",", "tuple", ")", ")", "\n", "\n", "ret", "=", "list", "(", "starmap", "(", "lambda", "_samples", ",", "_reduce_m", ",", "_reduce_v", ":", "\n", "_predict", "(", "_samples", ",", "self", ".", "mode", ",", "\n", "_reduce_m", ",", "_reduce_v", ",", "\n", "self", ".", "eps", ")", ",", "\n", "zip", "(", "mc_samples", ",", "reduce_mean", ",", "reduce_var", ")", ")", ")", "\n", "\n", "ret", "=", "list", "(", "chain", ".", "from_iterable", "(", "ret", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "ret", "=", "_predict", "(", "mc_samples", ",", "self", ".", "mode", ",", "\n", "self", ".", "reduce_mean", ",", "self", ".", "reduce_var", ",", "\n", "self", ".", "eps", ")", "\n", "\n", "", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.mc_sampler._concat_variables": [[15, 19], ["chainer.concat"], "function", ["None"], ["def", "_concat_variables", "(", "arrays", ")", ":", "\n", "\n", "    ", "return", "F", ".", "concat", "(", "[", "array", "[", "None", "]", "for", "array", "in", "arrays", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.mc_sampler._concat_samples": [[20, 35], ["isinstance", "six.moves.range", "list", "mc_sampler._concat_variables", "len", "result.append", "mc_sampler._concat_variables"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.mc_sampler._concat_variables", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.mc_sampler._concat_variables"], ["", "def", "_concat_samples", "(", "samples", ")", ":", "\n", "\n", "    ", "first_elem", "=", "samples", "[", "0", "]", "\n", "\n", "if", "isinstance", "(", "first_elem", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "\n", "for", "i", "in", "six", ".", "moves", ".", "range", "(", "len", "(", "first_elem", ")", ")", ":", "\n", "            ", "result", ".", "append", "(", "_concat_variables", "(", "\n", "[", "example", "[", "i", "]", "for", "example", "in", "samples", "]", ")", ")", "\n", "\n", "", "return", "list", "(", "result", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "_concat_variables", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.mc_sampler._predict": [[37, 58], ["chainer.mean", "chainer.mean", "reduce_mean", "reduce_var", "chainer.square", "NotImplementedError", "chainer.log2"], "function", ["None"], ["", "", "def", "_predict", "(", "samples", ",", "mode", "=", "'variance'", ",", "\n", "reduce_mean", "=", "None", ",", "reduce_var", "=", "None", ",", "\n", "eps", "=", "1e-8", ")", ":", "\n", "\n", "    ", "mean", "=", "F", ".", "mean", "(", "samples", ",", "axis", "=", "0", ")", "\n", "\n", "if", "mode", "==", "'variance'", ":", "\n", "        ", "var", "=", "samples", "-", "mean", "\n", "var", "=", "F", ".", "mean", "(", "F", ".", "square", "(", "var", ")", ",", "axis", "=", "0", ")", "\n", "", "elif", "mode", "==", "'entropy'", ":", "\n", "        ", "var", "=", "-", "mean", "*", "F", ".", "log2", "(", "mean", "+", "eps", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'unsupported mode..'", ")", "\n", "\n", "", "if", "reduce_mean", "is", "not", "None", ":", "\n", "        ", "mean", "=", "reduce_mean", "(", "mean", ")", "\n", "\n", "", "if", "reduce_var", "is", "not", "None", ":", "\n", "        ", "var", "=", "reduce_var", "(", "var", ")", "\n", "\n", "", "return", "mean", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.classifier.Classifier.__init__": [[116, 144], ["chainer.link.Chain.__init__", "callable", "classifier.Classifier._reset", "callable", "callable", "callable", "classifier.Classifier.init_scope"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.classifier.Classifier._reset"], ["def", "__init__", "(", "self", ",", "predictor", ",", "\n", "lossfun", "=", "softmax_cross_entropy", ".", "softmax_cross_entropy", ",", "\n", "accfun", "=", "accuracy", ".", "accuracy", ",", "\n", "activation", "=", "None", ",", "\n", "x_keys", "=", "(", "0", ")", ",", "t_keys", "=", "(", "-", "1", ")", ")", ":", "\n", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "callable", "(", "predictor", ")", ",", "'predictor should be callable..'", "\n", "if", "lossfun", "is", "not", "None", ":", "\n", "            ", "assert", "callable", "(", "lossfun", ")", ",", "'lossfun should be callable..'", "\n", "", "if", "accfun", "is", "not", "None", ":", "\n", "            ", "assert", "callable", "(", "accfun", ")", ",", "'accfun should be callable..'", "\n", "", "if", "activation", "is", "not", "None", ":", "\n", "            ", "assert", "callable", "(", "activation", ")", ",", "'activation should be callable..'", "\n", "\n", "\n", "", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "predictor", "=", "predictor", "\n", "\n", "", "self", ".", "lossfun", "=", "lossfun", "\n", "self", ".", "accfun", "=", "accfun", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "x_keys", "=", "x_keys", "\n", "self", ".", "t_keys", "=", "t_keys", "\n", "\n", "self", ".", "_reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.classifier.Classifier._reset": [[145, 153], ["None"], "methods", ["None"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "x", "=", "None", "\n", "self", ".", "y", "=", "None", "\n", "self", ".", "t", "=", "None", "\n", "\n", "self", ".", "loss", "=", "None", "\n", "self", ".", "accuracy", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.classifier.Classifier.forward": [[154, 219], ["classifier.Classifier._reset", "classifier.get_values", "classifier.Classifier.predictor", "len", "len", "classifier.get_values", "classifier.Classifier.activation", "classifier.Classifier.lossfun", "chainer.reporter.report", "classifier.Classifier.accfun", "chainer.reporter.report", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.classifier.Classifier._reset", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.classifier.get_values", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.classifier.get_values", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.activation", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Computes the loss value for input and label pair.\n        It also computes accuracy and stores it to the attribute.\n        Args:\n            args (list of ~chainer.Variable): Input minibatch.\n            kwargs (dict of ~chainer.Variable): Input minibatch.\n        When ``label_key`` is ``int``, the corresponding element in ``args``\n        is treated as ground truth labels. And when it is ``str``, the\n        element in ``kwargs`` is used.\n        The all elements of ``args`` and ``kwargs`` except the ground truth\n        labels are features.\n        It feeds features to the predictor and compare the result\n        with ground truth labels.\n        .. note::\n            We set ``None`` to the attributes ``y``, ``loss`` and ``accuracy``\n            each time before running the predictor, to avoid unnecessary memory\n            consumption. Note that the variables set on those attributes hold\n            the whole computation graph when they are computed. The graph\n            stores interim values on memory required for back-propagation.\n            We need to clear the attributes to free those values.\n        Returns:\n            ~chainer.Variable: Loss value.\n        \"\"\"", "\n", "\n", "self", ".", "_reset", "(", ")", "\n", "\n", "n_args", "=", "len", "(", "args", ")", "+", "len", "(", "kwargs", ")", "\n", "x", "=", "get_values", "(", "args", ",", "kwargs", ",", "self", ".", "x_keys", ")", "\n", "t", "=", "get_values", "(", "args", ",", "kwargs", ",", "self", ".", "t_keys", ")", "if", "n_args", ">", "1", "else", "None", "\n", "\n", "# predict, and then apply final activation", "\n", "y", "=", "self", ".", "predictor", "(", "x", ")", "\n", "\n", "if", "self", ".", "activation", "is", "not", "None", ":", "\n", "            ", "y", "=", "self", ".", "activation", "(", "y", ")", "\n", "\n", "# preserve", "\n", "", "self", ".", "x", "=", "x", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "t", "=", "t", "\n", "\n", "\n", "# if only input `x` is exist, return the predictions", "\n", "if", "t", "is", "None", ":", "\n", "            ", "return", "y", "\n", "\n", "# if ground-truth label `t` is exist, evaluate the loss and accuracy.", "\n", "# return the loss during training, otherwise return the predictions.", "\n", "", "if", "self", ".", "lossfun", "is", "not", "None", ":", "\n", "            ", "self", ".", "loss", "=", "self", ".", "lossfun", "(", "y", ",", "t", ")", "\n", "reporter", ".", "report", "(", "{", "'loss'", ":", "self", ".", "loss", "}", ",", "self", ")", "\n", "\n", "", "if", "self", ".", "accfun", "is", "not", "None", ":", "\n", "            ", "self", ".", "accuracy", "=", "self", ".", "accfun", "(", "y", ",", "t", ")", "\n", "reporter", ".", "report", "(", "{", "'accuracy'", ":", "self", ".", "accuracy", "}", ",", "self", ")", "\n", "\n", "", "if", "configuration", ".", "config", ".", "train", ":", "\n", "\n", "            ", "if", "self", ".", "loss", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'loss is None..'", ")", "\n", "\n", "", "return", "self", ".", "loss", "\n", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "y", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.classifier._get_value": [[11, 30], ["isinstance", "isinstance", "TypeError", "isinstance", "ValueError", "type", "len", "ValueError", "len"], "function", ["None"], ["def", "_get_value", "(", "args", ",", "kwargs", ",", "key", ")", ":", "\n", "\n", "    ", "if", "not", "(", "isinstance", "(", "key", ",", "(", "int", ",", "str", ")", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'key must be int or str, but is %s'", "%", "\n", "type", "(", "key", ")", ")", "\n", "\n", "", "if", "isinstance", "(", "key", ",", "int", ")", ":", "\n", "        ", "if", "not", "(", "-", "len", "(", "args", ")", "<=", "key", "<", "len", "(", "args", ")", ")", ":", "\n", "            ", "msg", "=", "'key %d is out of bounds'", "%", "key", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "", "value", "=", "args", "[", "key", "]", "\n", "\n", "", "elif", "isinstance", "(", "key", ",", "str", ")", ":", "\n", "        ", "if", "key", "not", "in", "kwargs", ":", "\n", "            ", "msg", "=", "'key \"%s\" is not found'", "%", "key", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "", "value", "=", "kwargs", "[", "key", "]", "\n", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.links.classifier.get_values": [[31, 40], ["functools.partial", "isinstance", "functools.partial.", "functools.partial."], "function", ["None"], ["", "def", "get_values", "(", "args", ",", "kwargs", ",", "keys", ")", ":", "\n", "\n", "    ", "getter", "=", "partial", "(", "_get_value", ",", "\n", "args", "=", "args", ",", "kwargs", "=", "kwargs", ")", "\n", "\n", "if", "isinstance", "(", "keys", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "return", "[", "getter", "(", "key", "=", "key", ")", "for", "key", "in", "keys", "]", "\n", "\n", "", "return", "getter", "(", "key", "=", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalization.instance_normalization.InstanceNormalization.__init__": [[85, 95], ["chainer.links.BatchNormalization.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "size", "=", "None", ",", "decay", "=", "0.9", ",", "eps", "=", "2e-5", ",", "dtype", "=", "None", ",", "\n", "use_gamma", "=", "False", ",", "use_beta", "=", "False", ",", "\n", "initial_gamma", "=", "None", ",", "initial_beta", "=", "None", ",", "axis", "=", "None", ",", "\n", "initial_avg_mean", "=", "None", ",", "initial_avg_var", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "InstanceNormalization", ",", "self", ")", ".", "__init__", "(", "\n", "size", ",", "decay", ",", "eps", ",", "dtype", ",", "\n", "use_gamma", ",", "use_beta", ",", "\n", "initial_gamma", ",", "initial_beta", ",", "axis", ",", "\n", "initial_avg_mean", ",", "initial_avg_var", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.normalization.instance_normalization.InstanceNormalization.forward": [[97, 177], ["chainer.utils.argument.parse_kwargs", "chainer.functions.reshape", "instance_normalization.InstanceNormalization.xp.tile", "instance_normalization.InstanceNormalization.xp.tile", "instance_normalization.InstanceNormalization.xp.tile", "instance_normalization.InstanceNormalization.xp.tile", "chainer.functions.batch_normalization", "chainer.functions.reshape", "tuple", "instance_normalization.InstanceNormalization._initialize_params", "instance_normalization.InstanceNormalization.reshape().mean", "instance_normalization.InstanceNormalization.reshape().mean", "chainer.using_device", "instance_normalization.InstanceNormalization.xp.ones", "chainer.using_device", "instance_normalization.InstanceNormalization.xp.zeros", "instance_normalization.InstanceNormalization.reshape", "instance_normalization.InstanceNormalization.reshape", "enumerate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"forward(self, x, finetune=False)\n\n        Invokes the forward propagation of InstanceNormalization.\n\n        The InstanceNormalization computes moving averages of\n        mean and variance for evaluation, and normalizes the\n        input using batch statistics.\n\n        Args:\n            x (~chainer.Variable): Input variable.\n            finetune (bool): If it is in the training mode and ``finetune`` is\n                ``True``, InstanceNormalization runs in fine-tuning mode; it\n                accumulates the input array to compute population statistics\n                for normalization, and normalizes the input using batch\n                statistics.\n\n        \"\"\"", "\n", "finetune", ",", "=", "argument", ".", "parse_kwargs", "(", "\n", "kwargs", ",", "(", "'finetune'", ",", "False", ")", ",", "\n", "test", "=", "'test argument is not supported anymore. '", "\n", "'Use chainer.using_config'", ")", "\n", "\n", "if", "self", ".", "avg_mean", "is", "None", ":", "\n", "            ", "param_shape", "=", "tuple", "(", "[", "\n", "d", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "x", ".", "shape", ")", "\n", "if", "i", "not", "in", "self", ".", "axis", "]", ")", "\n", "self", ".", "_initialize_params", "(", "param_shape", ")", "\n", "\n", "", "gamma", "=", "self", ".", "gamma", "\n", "if", "gamma", "is", "None", ":", "\n", "            ", "with", "chainer", ".", "using_device", "(", "self", ".", "device", ")", ":", "\n", "                ", "gamma", "=", "self", ".", "xp", ".", "ones", "(", "\n", "self", ".", "avg_mean", ".", "shape", ",", "dtype", "=", "self", ".", "_highprec_dtype", ")", "\n", "\n", "", "", "beta", "=", "self", ".", "beta", "\n", "if", "beta", "is", "None", ":", "\n", "            ", "with", "chainer", ".", "using_device", "(", "self", ".", "device", ")", ":", "\n", "                ", "beta", "=", "self", ".", "xp", ".", "zeros", "(", "\n", "self", ".", "avg_mean", ".", "shape", ",", "dtype", "=", "self", ".", "_highprec_dtype", ")", "\n", "\n", "# reshape", "\n", "", "", "b", ",", "ch", "=", "x", ".", "shape", "[", ":", "2", "]", "\n", "reshaped", "=", "functions", ".", "reshape", "(", "x", ",", "(", "1", ",", "b", "*", "ch", ",", ")", "+", "x", ".", "shape", "[", "2", ":", "]", ")", "\n", "\n", "gamma", "=", "self", ".", "xp", ".", "tile", "(", "gamma", ",", "(", "b", ",", ")", ")", "\n", "beta", "=", "self", ".", "xp", ".", "tile", "(", "beta", ",", "(", "b", ",", ")", ")", "\n", "\n", "avg_mean", "=", "self", ".", "xp", ".", "tile", "(", "self", ".", "avg_mean", ",", "(", "b", ",", ")", ")", "\n", "avg_var", "=", "self", ".", "xp", ".", "tile", "(", "self", ".", "avg_var", ",", "(", "b", ",", ")", ")", "\n", "\n", "if", "finetune", ":", "\n", "            ", "self", ".", "N", "+=", "1", "\n", "decay", "=", "1.", "-", "1.", "/", "self", ".", "N", "\n", "", "else", ":", "\n", "            ", "decay", "=", "self", ".", "decay", "\n", "\n", "", "if", "chainer", ".", "config", ".", "in_recomputing", ":", "\n", "# Do not update statistics when extra forward computation is", "\n", "# called.", "\n", "            ", "if", "finetune", ":", "\n", "                ", "self", ".", "N", "-=", "1", "# Revert the count", "\n", "", "avg_mean", "=", "None", "\n", "avg_var", "=", "None", "\n", "\n", "", "ret", "=", "functions", ".", "batch_normalization", "(", "\n", "reshaped", ",", "gamma", ",", "beta", ",", "eps", "=", "self", ".", "eps", ",", "running_mean", "=", "avg_mean", ",", "\n", "running_var", "=", "avg_var", ",", "decay", "=", "decay", ",", "axis", "=", "self", ".", "axis", ")", "\n", "\n", "# reshape back", "\n", "self", ".", "avg_mean", ",", "self", ".", "avg_var", "=", "None", ",", "None", "\n", "if", "avg_mean", "is", "not", "None", ":", "\n", "            ", "self", ".", "avg_mean", "=", "avg_mean", ".", "reshape", "(", "b", ",", "ch", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "", "if", "avg_var", "is", "not", "None", ":", "\n", "            ", "self", ".", "avg_var", "=", "avg_var", ".", "reshape", "(", "b", ",", "ch", ")", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "", "ret", "=", "functions", ".", "reshape", "(", "ret", ",", "x", ".", "shape", ")", "\n", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.deconvolution.Deconvolution2D.__init__": [[18, 27], ["chainer.Deconvolution2D.__init__", "deconvolution._pair"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution._pair"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "ksize", "=", "None", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "pad_mode", "=", "'reflect'", ",", "\n", "nobias", "=", "False", ",", "initialW", "=", "None", ",", "initial_bias", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "outsize", "=", "(", "None", ",", "None", ")", "\n", "\n", "super", "(", "Deconvolution2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", ",", "0", ",", "\n", "nobias", ",", "outsize", ",", "initialW", ",", "initial_bias", ",", "**", "kwargs", ")", "\n", "self", ".", "pad", "=", "_pair", "(", "pad", ")", "\n", "self", ".", "pad_mode", "=", "pad_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.deconvolution.Deconvolution2D.forward": [[28, 41], ["chainer.pad", "chainer.pad", "chainer.pad", "chainer.deconvolution_2d", "chainer.deconvolution_2d", "chainer.deconvolution_2d", "deconvolution.Deconvolution2D._initialize_params", "list", "map"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "self", ".", "W", ".", "array", "is", "None", ":", "\n", "            ", "self", ".", "_initialize_params", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "pad_width", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", "]", "+", "list", "(", "map", "(", "lambda", "x", ":", "(", "x", ",", "x", ")", ",", "self", ".", "pad", ")", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "pad_width", ",", "self", ".", "pad_mode", ")", "\n", "\n", "y", "=", "F", ".", "deconvolution_2d", "(", "\n", "x", ",", "self", ".", "W", ",", "self", ".", "b", ",", "self", ".", "stride", ",", "0", ",", "self", ".", "outsize", ",", "\n", "dilate", "=", "self", ".", "dilate", ",", "groups", "=", "self", ".", "groups", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.deconvolution.DeconvolutionND.__init__": [[45, 58], ["chainer.DeconvolutionND.__init__", "deconvolution._pair"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution._pair"], ["def", "__init__", "(", "self", ",", "ndim", ",", "in_channels", ",", "out_channels", ",", "ksize", "=", "None", ",", "stride", "=", "1", ",", "\n", "pad", "=", "0", ",", "pad_mode", "=", "'reflect'", ",", "nobias", "=", "False", ",", "initialW", "=", "None", ",", "\n", "initial_bias", "=", "None", ",", "dilate", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "\n", "        ", "outsize", "=", "None", "\n", "\n", "super", "(", "DeconvolutionND", ",", "self", ")", ".", "__init__", "(", "ndim", ",", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", ",", "\n", "0", ",", "nobias", ",", "outsize", ",", "initialW", ",", "\n", "initial_bias", ",", "dilate", ",", "groups", ")", "\n", "\n", "self", ".", "ndim", "=", "ndim", "\n", "self", ".", "pad", "=", "_pair", "(", "pad", ",", "ndim", ")", "\n", "self", ".", "pad_mode", "=", "pad_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.deconvolution.DeconvolutionND.forward": [[59, 70], ["chainer.pad", "chainer.pad", "chainer.pad", "chainer.deconvolution_nd", "chainer.deconvolution_nd", "chainer.deconvolution_nd", "deconvolution.DeconvolutionND._initialize_params", "list", "map"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "self", ".", "W", ".", "array", "is", "None", ":", "\n", "            ", "self", ".", "_initialize_params", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "pad_width", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", "]", "+", "list", "(", "map", "(", "lambda", "x", ":", "(", "x", ",", "x", ")", ",", "self", ".", "pad", ")", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "pad_width", ",", "self", ".", "pad_mode", ")", "\n", "\n", "return", "F", ".", "deconvolution_nd", "(", "\n", "x", ",", "self", ".", "W", ",", "b", "=", "self", ".", "b", ",", "stride", "=", "self", ".", "stride", ",", "pad", "=", "0", ",", "\n", "outsize", "=", "self", ".", "outsize", ",", "dilate", "=", "self", ".", "dilate", ",", "groups", "=", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.deconvolution.Deconvolution3D.__init__": [[74, 80], ["deconvolution.DeconvolutionND.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "pad_mode", "=", "'reflect'", ",", "\n", "nobias", "=", "False", ",", "outsize", "=", "None", ",", "initialW", "=", "None", ",", "initial_bias", "=", "None", ",", "\n", "dilate", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "Deconvolution3D", ",", "self", ")", ".", "__init__", "(", "\n", "3", ",", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", ",", "pad", ",", "pad_mode", ",", "nobias", ",", "\n", "initialW", ",", "initial_bias", ",", "dilate", ",", "groups", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.deconvolution._pair": [[8, 12], ["hasattr"], "function", ["None"], ["def", "_pair", "(", "x", ",", "ndim", "=", "2", ")", ":", "\n", "    ", "if", "hasattr", "(", "x", ",", "'__getitem__'", ")", ":", "\n", "        ", "return", "x", "\n", "", "return", "[", "x", "]", "*", "ndim", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.pixel_shuffle_upsampler.PixelShuffleUpsamplerND.__init__": [[24, 43], ["chainer.Chain.__init__", "chainer.Chain.__init__", "pixel_shuffle_upsampler._pair", "pixel_shuffle_upsampler.PixelShuffleUpsamplerND.init_scope", "convolution.ConvolutionND"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution._pair"], ["def", "__init__", "(", "self", ",", "ndim", ",", "in_channels", ",", "out_channels", ",", "resolution", ",", "\n", "ksize", "=", "None", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "pad_mode", "=", "'reflect'", ",", "nobias", "=", "False", ",", "\n", "initialW", "=", "None", ",", "initial_bias", "=", "None", ")", ":", "\n", "        ", "super", "(", "PixelShuffleUpsamplerND", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ndim", "=", "ndim", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "\n", "self", ".", "pad", "=", "_pair", "(", "pad", ",", "self", ".", "ndim", ")", "\n", "self", ".", "pad_mode", "=", "pad_mode", "\n", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "m", "=", "self", ".", "resolution", "**", "self", ".", "ndim", "\n", "self", ".", "conv", "=", "ConvolutionND", "(", "\n", "ndim", ",", "in_channels", ",", "out_channels", "*", "m", ",", "\n", "ksize", ",", "stride", ",", "self", ".", "pad", ",", "self", ".", "pad_mode", ",", "nobias", ",", "\n", "initialW", ",", "initial_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.pixel_shuffle_upsampler.PixelShuffleUpsamplerND.__call__": [[44, 59], ["pixel_shuffle_upsampler.PixelShuffleUpsamplerND.conv", "tuple", "tuple", "chainer.reshape", "chainer.reshape", "chainer.transpose", "chainer.transpose", "chainer.reshape", "chainer.reshape", "pixel_shuffle_upsampler.PixelShuffleUpsamplerND.make_transpose_indices", "range"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.unet._helper.conv", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.pixel_shuffle_upsampler.PixelShuffleUpsamplerND.make_transpose_indices"], ["", "", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "r", "=", "self", ".", "resolution", "\n", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "batchsize", "=", "out", ".", "shape", "[", "0", "]", "\n", "in_channels", "=", "out", ".", "shape", "[", "1", "]", "\n", "out_channels", "=", "self", ".", "out_channels", "\n", "\n", "in_shape", "=", "out", ".", "shape", "[", "2", ":", "]", "\n", "out_shape", "=", "tuple", "(", "s", "*", "r", "for", "s", "in", "in_shape", ")", "\n", "\n", "r_tuple", "=", "tuple", "(", "self", ".", "resolution", "for", "_", "in", "range", "(", "self", ".", "ndim", ")", ")", "\n", "out", "=", "F", ".", "reshape", "(", "out", ",", "(", "batchsize", ",", "out_channels", ",", ")", "+", "r_tuple", "+", "in_shape", ")", "\n", "out", "=", "F", ".", "transpose", "(", "out", ",", "self", ".", "make_transpose_indices", "(", ")", ")", "\n", "out", "=", "F", ".", "reshape", "(", "out", ",", "(", "batchsize", ",", "out_channels", ",", ")", "+", "out_shape", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.pixel_shuffle_upsampler.PixelShuffleUpsamplerND.make_transpose_indices": [[60, 65], ["si.extend", "si.extend", "range", "range"], "methods", ["None"], ["", "def", "make_transpose_indices", "(", "self", ")", ":", "\n", "        ", "si", "=", "[", "0", ",", "1", "]", "\n", "si", ".", "extend", "(", "[", "2", "*", "(", "i", "+", "1", ")", "+", "1", "for", "i", "in", "range", "(", "self", ".", "ndim", ")", "]", ")", "\n", "si", ".", "extend", "(", "[", "2", "*", "(", "i", "+", "1", ")", "for", "i", "in", "range", "(", "self", ".", "ndim", ")", "]", ")", "\n", "return", "si", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.pixel_shuffle_upsampler.PixelShuffleUpsampler2D.__init__": [[68, 76], ["pixel_shuffle_upsampler.PixelShuffleUpsamplerND.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "resolution", ",", "\n", "ksize", "=", "None", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "pad_mode", "=", "'reflect'", ",", "nobias", "=", "False", ",", "\n", "initialW", "=", "None", ",", "initial_bias", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "PixelShuffleUpsampler2D", ",", "self", ")", ".", "__init__", "(", "\n", "2", ",", "in_channels", ",", "out_channels", ",", "resolution", ",", "\n", "ksize", ",", "stride", ",", "pad", ",", "pad_mode", ",", "nobias", ",", "\n", "initialW", ",", "initial_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.pixel_shuffle_upsampler.PixelShuffleUpsampler3D.__init__": [[79, 87], ["pixel_shuffle_upsampler.PixelShuffleUpsamplerND.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "resolution", ",", "\n", "ksize", "=", "None", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "pad_mode", "=", "'reflect'", ",", "nobias", "=", "False", ",", "\n", "initialW", "=", "None", ",", "initial_bias", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "PixelShuffleUpsampler3D", ",", "self", ")", ".", "__init__", "(", "\n", "3", ",", "in_channels", ",", "out_channels", ",", "resolution", ",", "\n", "ksize", ",", "stride", ",", "pad", ",", "pad_mode", ",", "nobias", ",", "\n", "initialW", ",", "initial_bias", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.pixel_shuffle_upsampler._pair": [[8, 12], ["hasattr"], "function", ["None"], ["def", "_pair", "(", "x", ",", "ndim", "=", "2", ")", ":", "\n", "    ", "if", "hasattr", "(", "x", ",", "'__getitem__'", ")", ":", "\n", "        ", "return", "x", "\n", "", "return", "[", "x", "]", "*", "ndim", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution.Convolution2D.__init__": [[16, 23], ["chainer.Convolution2D.__init__", "convolution._pair"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution._pair"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "ksize", "=", "None", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "pad_mode", "=", "'reflect'", ",", "\n", "nobias", "=", "False", ",", "initialW", "=", "None", ",", "initial_bias", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "Convolution2D", ",", "self", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", ",", "0", ",", "\n", "nobias", ",", "initialW", ",", "initial_bias", ",", "**", "kwargs", ")", "\n", "self", ".", "pad", "=", "_pair", "(", "pad", ")", "\n", "self", ".", "pad_mode", "=", "pad_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution.Convolution2D.forward": [[24, 35], ["chainer.pad", "chainer.pad", "chainer.pad", "chainer.convolution_2d", "chainer.convolution_2d", "chainer.convolution_2d", "convolution.Convolution2D._initialize_params", "list", "map"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "self", ".", "W", ".", "array", "is", "None", ":", "\n", "            ", "self", ".", "_initialize_params", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "pad_width", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", "]", "+", "list", "(", "map", "(", "lambda", "x", ":", "(", "x", ",", "x", ")", ",", "self", ".", "pad", ")", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "pad_width", ",", "self", ".", "pad_mode", ")", "\n", "\n", "return", "F", ".", "convolution_2d", "(", "\n", "x", ",", "self", ".", "W", ",", "self", ".", "b", ",", "self", ".", "stride", ",", "0", ",", "dilate", "=", "self", ".", "dilate", ",", "\n", "groups", "=", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution.ConvolutionND.__init__": [[39, 48], ["chainer.ConvolutionND.__init__", "convolution._pair"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution._pair"], ["def", "__init__", "(", "self", ",", "ndim", ",", "in_channels", ",", "out_channels", ",", "ksize", "=", "None", ",", "stride", "=", "1", ",", "\n", "pad", "=", "0", ",", "pad_mode", "=", "'reflect'", ",", "nobias", "=", "False", ",", "initialW", "=", "None", ",", "initial_bias", "=", "None", ",", "\n", "cover_all", "=", "False", ",", "dilate", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "\n", "        ", "super", "(", "ConvolutionND", ",", "self", ")", ".", "__init__", "(", "ndim", ",", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", ",", "0", ",", "\n", "nobias", ",", "initialW", ",", "initial_bias", ",", "cover_all", ",", "dilate", ",", "groups", ")", "\n", "self", ".", "ndim", "=", "ndim", "\n", "self", ".", "pad", "=", "_pair", "(", "pad", ",", "ndim", ")", "\n", "self", ".", "pad_mode", "=", "pad_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution.ConvolutionND.forward": [[49, 60], ["chainer.pad", "chainer.pad", "chainer.pad", "chainer.convolution_nd", "chainer.convolution_nd", "chainer.convolution_nd", "convolution.ConvolutionND._initialize_params", "list", "map"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "self", ".", "W", ".", "array", "is", "None", ":", "\n", "            ", "self", ".", "_initialize_params", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "pad_width", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", "]", "+", "list", "(", "map", "(", "lambda", "x", ":", "(", "x", ",", "x", ")", ",", "self", ".", "pad", ")", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "pad_width", ",", "self", ".", "pad_mode", ")", "\n", "\n", "return", "F", ".", "convolution_nd", "(", "\n", "x", ",", "self", ".", "W", ",", "self", ".", "b", ",", "self", ".", "stride", ",", "0", ",", "cover_all", "=", "self", ".", "cover_all", ",", "\n", "dilate", "=", "self", ".", "dilate", ",", "groups", "=", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution.Convolution3D.__init__": [[64, 71], ["convolution.ConvolutionND.__init__"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "pad_mode", "=", "'reflect'", ",", "\n", "nobias", "=", "False", ",", "initialW", "=", "None", ",", "initial_bias", "=", "None", ",", "\n", "cover_all", "=", "False", ",", "dilate", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "\n", "        ", "super", "(", "Convolution3D", ",", "self", ")", ".", "__init__", "(", "\n", "3", ",", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", ",", "pad", ",", "pad_mode", ",", "nobias", ",", "initialW", ",", "\n", "initial_bias", ",", "cover_all", ",", "dilate", ",", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution.DeformableConvolution2DSampler.__init__": [[75, 84], ["super().__init__", "convolution._pair"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution._pair"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "pad_mode", "=", "'reflect'", ",", "\n", "nobias", "=", "False", ",", "initialW", "=", "None", ",", "initial_bias", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "DeformableConvolution2DSampler", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", ",", "0", ",", "\n", "nobias", ",", "initialW", ",", "initial_bias", ")", "\n", "\n", "self", ".", "pad", "=", "_pair", "(", "pad", ")", "\n", "self", ".", "pad_mode", "=", "pad_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution.DeformableConvolution2DSampler.forward": [[85, 94], ["chainer.pad", "chainer.pad", "chainer.pad", "chainer.deformable_convolution_2d_sampler", "chainer.deformable_convolution_2d_sampler", "chainer.deformable_convolution_2d_sampler", "convolution.DeformableConvolution2DSampler._initialize_params", "list", "map"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "offset", ")", ":", "\n", "        ", "if", "self", ".", "W", ".", "array", "is", "None", ":", "\n", "            ", "self", ".", "_initialize_params", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "pad_width", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", "]", "+", "list", "(", "map", "(", "lambda", "x", ":", "(", "x", ",", "x", ")", ",", "self", ".", "pad", ")", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "pad_width", ",", "self", ".", "pad_mode", ")", "\n", "\n", "return", "F", ".", "deformable_convolution_2d_sampler", "(", "\n", "x", ",", "offset", ",", "self", ".", "W", ",", "self", ".", "b", ",", "self", ".", "stride", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution.DeformableConvolution2D.__init__": [[98, 118], ["chainer.link.Chain.__init__", "convolution._pair", "convolution._pair", "convolution.DeformableConvolution2D.init_scope", "convolution.Convolution2D", "convolution.DeformableConvolution2DSampler"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution._pair", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution._pair"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "pad_mode", "=", "'reflect'", ",", "\n", "offset_nobias", "=", "False", ",", "offset_initialW", "=", "None", ",", "\n", "offset_initial_bias", "=", "None", ",", "\n", "deform_nobias", "=", "False", ",", "\n", "deform_initialW", "=", "None", ",", "deform_initial_bias", "=", "None", ")", ":", "# TODO: merge argment", "\n", "\n", "        ", "super", "(", "DeformableConvolution2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pad", "=", "_pair", "(", "pad", ")", "\n", "self", ".", "pad_mode", "=", "pad_mode", "\n", "\n", "kh", ",", "kw", "=", "_pair", "(", "ksize", ")", "\n", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "offset_conv", "=", "Convolution2D", "(", "\n", "in_channels", ",", "2", "*", "kh", "*", "kw", ",", "ksize", ",", "stride", ",", "self", ".", "pad", ",", "self", ".", "pad_mode", ",", "\n", "offset_nobias", ",", "offset_initialW", ",", "offset_initial_bias", ")", "\n", "self", ".", "deform_conv", "=", "DeformableConvolution2DSampler", "(", "\n", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", ",", "self", ".", "pad", ",", "self", ".", "pad_mode", ",", "\n", "deform_nobias", ",", "deform_initialW", ",", "deform_initial_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution.DeformableConvolution2D.forward": [[119, 122], ["convolution.DeformableConvolution2D.offset_conv", "convolution.DeformableConvolution2D.deform_conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "offset", "=", "self", ".", "offset_conv", "(", "x", ")", "\n", "return", "self", ".", "deform_conv", "(", "x", ",", "offset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution.DilatedConvolution2D.__init__": [[127, 137], ["chainer.DilatedConvolution2D.__init__", "convolution._pair"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution._pair"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "ksize", "=", "None", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "pad_mode", "=", "'reflect'", ",", "\n", "dilate", "=", "1", ",", "nobias", "=", "False", ",", "initialW", "=", "None", ",", "initial_bias", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "DilatedConvolution2D", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "out_channels", ",", "ksize", ",", "stride", ",", "0", ",", "\n", "dilate", ",", "nobias", ",", "initialW", ",", "initial_bias", "\n", ")", "\n", "\n", "self", ".", "pad", "=", "_pair", "(", "pad", ")", "\n", "self", ".", "pad_mode", "=", "pad_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution.DilatedConvolution2D.forward": [[138, 148], ["chainer.pad", "chainer.pad", "chainer.pad", "chainer.dilated_convolution_2d", "chainer.dilated_convolution_2d", "chainer.dilated_convolution_2d", "convolution.DilatedConvolution2D._initialize_params", "list", "map"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "self", ".", "W", ".", "array", "is", "None", ":", "\n", "            ", "self", ".", "_initialize_params", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "pad_width", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", "]", "+", "list", "(", "map", "(", "lambda", "x", ":", "(", "x", ",", "x", ")", ",", "self", ".", "pad", ")", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "pad_width", ",", "self", ".", "pad_mode", ")", "\n", "\n", "return", "F", ".", "dilated_convolution_2d", "(", "\n", "x", ",", "self", ".", "W", ",", "self", ".", "b", ",", "self", ".", "stride", ",", "0", ",", "self", ".", "dilate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution.DepthwiseConvolution2D.__init__": [[152, 162], ["chainer.DepthwiseConvolution2D.__init__", "convolution._pair"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution._pair"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channel_multiplier", ",", "ksize", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "pad_mode", "=", "'reflect'", ",", "\n", "nobias", "=", "False", ",", "initialW", "=", "None", ",", "initial_bias", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "DepthwiseConvolution2D", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "channel_multiplier", ",", "ksize", ",", "stride", ",", "0", ",", "\n", "nobias", ",", "initialW", ",", "initial_bias", "\n", ")", "\n", "\n", "self", ".", "pad", "=", "_pair", "(", "pad", ")", "\n", "self", ".", "pad_mode", "=", "pad_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution.DepthwiseConvolution2D.forward": [[163, 172], ["chainer.pad", "chainer.pad", "chainer.pad", "chainer.depthwise_convolution_2d", "chainer.depthwise_convolution_2d", "chainer.depthwise_convolution_2d", "convolution.DepthwiseConvolution2D._initialize_params", "list", "map"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "W", ".", "array", "is", "None", ":", "\n", "            ", "self", ".", "_initialize_params", "(", "x", ".", "shape", "[", "1", "]", ")", "\n", "\n", "", "pad_width", "=", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", "]", "+", "list", "(", "map", "(", "lambda", "x", ":", "(", "x", ",", "x", ")", ",", "self", ".", "pad", ")", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "pad_width", ",", "self", ".", "pad_mode", ")", "\n", "\n", "return", "F", ".", "depthwise_convolution_2d", "(", "\n", "x", ",", "self", ".", "W", ",", "self", ".", "b", ",", "self", ".", "stride", ",", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.connection.convolution._pair": [[8, 12], ["hasattr"], "function", ["None"], ["def", "_pair", "(", "x", ",", "ndim", "=", "2", ")", ":", "\n", "    ", "if", "hasattr", "(", "x", ",", "'__getitem__'", ")", ":", "\n", "        ", "return", "x", "\n", "", "return", "[", "x", "]", "*", "ndim", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.__init__.Visualizer.__init__": [[10, 13], ["__init__.Visualizer.reset"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.__init__.Visualizer.reset"], ["from", ".", "import", "models", "# NOQA", "\n", "from", ".", "import", "utils", "# NOQA", "\n", "from", ".", "import", "visualizer", "# NOQA", "\n", "from", ".", "import", "updaters", "# NOQA", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.__init__.Visualizer.reset": [[14, 16], ["None"], "methods", ["None"], [""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.__init__.Visualizer.n_examples": [[17, 20], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.__init__.Visualizer.add_example": [[21, 24], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.__init__.Visualizer.add_batch": [[25, 28], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.__init__.Visualizer.save": [[29, 32], ["NotImplementedError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer.__init__": [[150, 178], ["Visualizer.__init__", "isinstance", "isinstance", "isinstance", "image.ImageVisualizer.reset"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.__init__.Visualizer.reset"], ["\n", "# transfrom", "\n", "image", ",", "label", "=", "self", ".", "normalize", "(", "image", ",", "label", ")", "\n", "\n", "# masking", "\n", "if", "mask", "is", "not", "None", ":", "\n", "            ", "image", ",", "label", "=", "self", ".", "masking", "(", "image", ",", "label", ",", "mask", ")", "\n", "\n", "# augment", "\n", "", "if", "self", ".", "augmentor", "is", "not", "None", ":", "\n", "            ", "if", "_inspect_n_args", "(", "self", ".", "augmentor", ")", "==", "2", ":", "\n", "                ", "image", ",", "label", "=", "self", ".", "augmentor", "(", "image", ",", "label", ")", "\n", "", "else", ":", "\n", "                ", "image", "=", "self", ".", "augmentor", "(", "image", ")", "\n", "\n", "# return", "\n", "", "", "if", "label", "is", "None", ":", "\n", "            ", "return", "image", "\n", "\n", "", "return", "image", ",", "label", "\n", "\n", "", "def", "__copy__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "ImageDataset", "(", "\n", "self", ".", "_root", ",", "\n", "self", ".", "_patients", ",", "\n", "self", ".", "_classes", ",", "\n", "self", ".", "_dtypes", ",", "\n", "self", ".", "_filenames", ",", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer.add_example": [[179, 184], ["inference.inferencer._variable_to_array", "inference.inferencer._variable_to_array", "inference.inferencer._variable_to_array", "image.ImageVisualizer._examples.append"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer._variable_to_array", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer._variable_to_array", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer._variable_to_array"], ["self", ".", "_normalizer", ",", "\n", "self", ".", "_augmentor", ",", "\n", "self", ".", "_mask_cvals", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer.add_batch": [[185, 195], ["isinstance", "isinstance", "isinstance", "range", "list", "list", "list", "image.ImageVisualizer.add_example", "map", "map", "map", "zip", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer.add_example"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer.save": [[196, 204], ["image.ImageVisualizer.ImageVisualizer._make_catalog", "os.path.dirname", "cv2.imwrite", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer._make_catalog"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer._make_x": [[205, 237], ["image.ImageVisualizer._transforms.get", "image.ImageVisualizer.transpose", "image.ImageVisualizer._cmaps.get", "image.ImageVisualizer._clims.get", "image.cast", "callable", "ValueError", "image.clim", "numpy.mean", "numpy.repeat", "image.ImageVisualizer.", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.cast", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.clim"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer._make_y": [[238, 273], ["image.ImageVisualizer._transforms.get", "image.ImageVisualizer._cmaps.get", "callable", "image.lut", "image.ImageVisualizer._clims.get", "image.cast", "image.ImageVisualizer.", "ValueError", "image.cast", "image.clim", "numpy.expand_dims", "numpy.mean", "numpy.repeat", "y.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.lut", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.cast", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.cast", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.clim"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer._make_t": [[274, 309], ["image.ImageVisualizer._transforms.get", "image.ImageVisualizer._cmaps.get", "callable", "image.lut", "image.ImageVisualizer._clims.get", "image.cast", "image.ImageVisualizer.", "ValueError", "image.cast", "image.clim", "numpy.expand_dims", "numpy.mean", "numpy.repeat", "t.transpose.transpose.transpose"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.lut", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.get", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.cast", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.cast", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.clim"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer._make_catalog": [[310, 341], ["numpy.concatenate", "image.ImageVisualizer._make_x", "image.ImageVisualizer._make_y", "image.ImageVisualizer._make_t", "range", "catalog.append", "len", "image.boundary", "cv2.addWeighted", "cv2.addWeighted", "page.append", "page.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer._make_x", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer._make_y", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer._make_t", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.boundary"], []], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.lut": [[35, 46], ["cmap.astype.astype", "numpy.zeros", "cv2.LUT", "cv2.LUT", "cv2.LUT", "cv2.merge", "numpy.max", "len", "cmap.astype.copy", "len"], "function", ["None"], ["\n", "def", "_inspect_n_args", "(", "func", ")", ":", "\n", "    ", "sig", "=", "signature", "(", "func", ")", "\n", "return", "len", "(", "sig", ".", "parameters", ")", "\n", "\n", "\n", "", "class", "ImageDataset", "(", "BaseDataset", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.clim": [[48, 59], ["isinstance", "isinstance", "numpy.clip", "NotImplementedError", "x.astype", "numpy.min", "numpy.max"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.clip"], ["\n", "def", "__init__", "(", "self", ",", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.cast": [[61, 63], ["x.astype"], "function", ["None"], ["patients", "=", "[", "]", ",", "\n", "classes", "=", "None", ",", "\n", "dtypes", "=", "_default_dtypes", ",", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.boundary": [[65, 71], ["None"], "function", ["None"], ["normalizer", "=", "None", ",", "\n", "augmentor", "=", "None", ",", "\n", "mask_cvals", "=", "_default_mask_cvals", ")", ":", "\n", "\n", "        ", "for", "key", "in", "filenames", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "_supported_filetypes", ":", "\n", "                ", "raise", "KeyError", "(", "'unsupported filetype.. <%s>'", "%", "key", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.train_and_test_epistemic.eval_metric": [[38, 44], ["train_and_test_epistemic.eval_metric.dice"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.loss.dice.dice"], ["def", "eval_metric", "(", "y", ",", "t", ")", ":", "\n", "    ", "def", "dice", "(", "y", ",", "t", ")", ":", "\n", "        ", "y", "=", "y", ".", "astype", "(", "np", ".", "bool", ")", "\n", "t", "=", "t", ".", "astype", "(", "np", ".", "bool", ")", "\n", "return", "2.", "*", "np", ".", "logical_and", "(", "y", ",", "t", ")", ".", "sum", "(", ")", "/", "(", "y", ".", "sum", "(", ")", "+", "t", ".", "sum", "(", ")", ")", "\n", "", "return", "dice", "(", "y", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.train_and_test_epistemic.train_phase": [[46, 150], ["print", "print", "print", "print", "min", "chainer.iterators.MultiprocessIterator", "chainer.iterators.MultiprocessIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "functools.partial", "chainer_bcnn.links.Classifier", "chainer.optimizers.Adam", "chainer.optimizers.Adam", "chainer.optimizers.Adam.setup", "chainer.training.triggers.EarlyStoppingTrigger", "chainer.training.Trainer", "numpy.array", "chainer_bcnn.visualizer.ImageVisualizer", "os.path.join", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "chainer.training.extensions.PlotReport.available", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.run", "len", "len", "len", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer.optimizers.Adam.add_hook", "len", "chainer.training.updaters.StandardUpdater", "enumerate", "chainer.training.updaters.ParallelUpdater", "max", "max", "chainer_bcnn.extensions.Validator", "chainer.training.extensions.dump_graph", "chainer.training.extensions.snapshot", "chainer.training.extensions.snapshot_object", "chainer_bcnn.extensions.LogReport", "chainer_bcnn.extensions.PrintReport", "chainer.training.extensions.ProgressBar", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "len", "len", "chainer_bcnn.links.Classifier.to_gpu", "chainer.optimizer_hooks.WeightDecay", "chainer.optimizer_hooks.WeightDecay", "numpy.argmax", "training.Trainer.extend", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id", "max", "chainer.training.extensions.PlotReport", "[].startswith", "key.split"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.run", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_discriminator.dump_graph"], ["", "def", "train_phase", "(", "predictor", ",", "train", ",", "valid", ",", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'# classes:'", ",", "train", ".", "n_classes", ")", "\n", "print", "(", "'# samples:'", ")", "\n", "print", "(", "'-- train:'", ",", "len", "(", "train", ")", ")", "\n", "print", "(", "'-- valid:'", ",", "len", "(", "valid", ")", ")", "\n", "\n", "# setup dataset iterators", "\n", "train_batchsize", "=", "min", "(", "args", ".", "batchsize", "*", "len", "(", "args", ".", "gpu", ")", ",", "len", "(", "train", ")", ")", "\n", "valid_batchsize", "=", "args", ".", "batchsize", "\n", "train_iter", "=", "chainer", ".", "iterators", ".", "MultiprocessIterator", "(", "train", ",", "train_batchsize", ")", "\n", "valid_iter", "=", "chainer", ".", "iterators", ".", "SerialIterator", "(", "valid", ",", "valid_batchsize", ",", "\n", "repeat", "=", "False", ",", "shuffle", "=", "True", ")", "\n", "\n", "# setup a model", "\n", "class_weight", "=", "None", "# NOTE: please set if you have..", "\n", "\n", "lossfun", "=", "partial", "(", "softmax_cross_entropy", ",", "\n", "normalize", "=", "False", ",", "class_weight", "=", "class_weight", ")", "\n", "\n", "model", "=", "Classifier", "(", "predictor", ",", "lossfun", "=", "lossfun", ")", "\n", "\n", "if", "args", ".", "gpu", "[", "0", "]", ">=", "0", ":", "\n", "        ", "chainer", ".", "backends", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", "[", "0", "]", ")", ".", "use", "(", ")", "\n", "if", "len", "(", "args", ".", "gpu", ")", "==", "1", ":", "model", ".", "to_gpu", "(", ")", "\n", "\n", "# setup an optimizer", "\n", "", "optimizer", "=", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "args", ".", "lr", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "eps", "=", "1e-08", ",", "amsgrad", "=", "False", ")", "\n", "optimizer", ".", "setup", "(", "model", ")", "\n", "if", "args", ".", "decay", ">", "0", ":", "\n", "        ", "optimizer", ".", "add_hook", "(", "chainer", ".", "optimizer_hooks", ".", "WeightDecay", "(", "args", ".", "decay", ")", ")", "\n", "\n", "\n", "# setup a trainer", "\n", "", "if", "len", "(", "args", ".", "gpu", ")", "==", "1", ":", "\n", "        ", "updater", "=", "training", ".", "updaters", ".", "StandardUpdater", "(", "\n", "train_iter", ",", "optimizer", ",", "device", "=", "args", ".", "gpu", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "devices", "=", "{", "'main'", ":", "args", ".", "gpu", "[", "0", "]", "}", "\n", "for", "idx", ",", "g", "in", "enumerate", "(", "args", ".", "gpu", "[", "1", ":", "]", ")", ":", "\n", "            ", "devices", "[", "'slave_%d'", "%", "idx", "]", "=", "g", "\n", "", "updater", "=", "training", ".", "updaters", ".", "ParallelUpdater", "(", "\n", "train_iter", ",", "optimizer", ",", "devices", "=", "devices", ")", "\n", "\n", "\n", "", "frequency", "=", "max", "(", "args", ".", "iteration", "//", "20", ",", "1", ")", "if", "args", ".", "frequency", "==", "-", "1", "else", "max", "(", "1", ",", "args", ".", "frequency", ")", "\n", "\n", "stop_trigger", "=", "triggers", ".", "EarlyStoppingTrigger", "(", "monitor", "=", "'validation/main/loss'", ",", "\n", "max_trigger", "=", "(", "args", ".", "iteration", ",", "'iteration'", ")", ",", "\n", "check_trigger", "=", "(", "frequency", ",", "'iteration'", ")", ",", "\n", "patients", "=", "np", ".", "inf", "if", "args", ".", "pinfall", "==", "-", "1", "else", "max", "(", "1", ",", "args", ".", "pinfall", ")", ")", "\n", "\n", "trainer", "=", "training", ".", "Trainer", "(", "updater", ",", "stop_trigger", ",", "out", "=", "args", ".", "out", ")", "\n", "\n", "\n", "# setup a visualizer", "\n", "transforms", "=", "{", "'x'", ":", "lambda", "x", ":", "x", ",", "'y'", ":", "lambda", "x", ":", "np", ".", "argmax", "(", "x", ",", "axis", "=", "0", ")", ",", "'t'", ":", "lambda", "x", ":", "x", "}", "\n", "\n", "cmap", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "cmaps", "=", "{", "'x'", ":", "None", ",", "'y'", ":", "cmap", ",", "'t'", ":", "cmap", "}", "\n", "\n", "clims", "=", "{", "'x'", ":", "'minmax'", ",", "'y'", ":", "None", ",", "'t'", ":", "None", "}", "\n", "\n", "visualizer", "=", "ImageVisualizer", "(", "transforms", "=", "transforms", ",", "\n", "cmaps", "=", "cmaps", ",", "clims", "=", "clims", ")", "\n", "\n", "# setup a validator", "\n", "valid_file", "=", "os", ".", "path", ".", "join", "(", "'validation'", ",", "'iter_{.updater.iteration:08}.png'", ")", "\n", "trainer", ".", "extend", "(", "Validator", "(", "valid_iter", ",", "model", ",", "valid_file", ",", "\n", "visualizer", "=", "visualizer", ",", "n_vis", "=", "20", ",", "\n", "device", "=", "args", ".", "gpu", "[", "0", "]", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "dump_graph", "(", "'main/loss'", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot", "(", "filename", "=", "'snapshot_iter_{.updater.iteration:08}.npz'", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot_object", "(", "predictor", ",", "'predictor_iter_{.updater.iteration:08}.npz'", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "\n", "log_keys", "=", "[", "'main/loss'", ",", "'validation/main/loss'", ",", "\n", "'main/accuracy'", ",", "'validation/main/accuracy'", "]", "\n", "\n", "trainer", ".", "extend", "(", "LogReport", "(", "keys", "=", "log_keys", ")", ")", "\n", "\n", "# setup log ploter", "\n", "if", "extensions", ".", "PlotReport", ".", "available", "(", ")", ":", "\n", "        ", "for", "plot_key", "in", "[", "'loss'", ",", "'accuracy'", "]", ":", "\n", "            ", "plot_keys", "=", "[", "key", "for", "key", "in", "log_keys", "if", "key", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "startswith", "(", "plot_key", ")", "]", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "plot_keys", ",", "\n", "'iteration'", ",", "file_name", "=", "plot_key", "+", "'.png'", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", ")", "\n", "\n", "", "", "trainer", ".", "extend", "(", "PrintReport", "(", "[", "'iteration'", "]", "+", "log_keys", "+", "[", "'elapsed_time'", "]", ",", "n_step", "=", "100", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "ProgressBar", "(", ")", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "chainer", ".", "serializers", ".", "load_npz", "(", "args", ".", "resume", ",", "trainer", ")", "\n", "\n", "\n", "# train", "\n", "", "trainer", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.train_and_test_epistemic.test_phase": [[152, 240], ["print", "print", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer_bcnn.utils.find_latest_snapshot", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "print", "chainer_bcnn.links.MCSampler", "chainer_bcnn.inference.Inferencer", "chainer_bcnn.inference.Inferencer.run", "os.makedirs", "isinstance", "os.path.commonpath", "enumerate", "scipy.stats.pearsonr", "matplotlib.figure", "seaborn.scatterplot", "sns.scatterplot.set_xlabel", "sns.scatterplot.set_ylabel", "matplotlib.grid", "matplotlib.title", "matplotlib.savefig", "matplotlib.close", "len", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer_bcnn.links.MCSampler.to_gpu", "os.path.join", "numpy.percentile", "files.tolist.tolist", "zip", "chainer_bcnn.data.load_image", "chainer_bcnn.data.load_image", "acc_values.append", "uncert_values.append", "matplotlib.figure", "enumerate", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "os.path.join", "functools.partial", "functools.partial", "functools.partial", "train_and_test_epistemic.eval_metric", "numpy.mean", "zip", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.title", "matplotlib.clim", "os.path.join", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id", "os.path.relpath"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.find_latest_snapshot", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.run", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.load_image", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.load_image", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.eval_metric", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.clim"], ["", "def", "test_phase", "(", "predictor", ",", "test", ",", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'# samples:'", ")", "\n", "print", "(", "'-- test:'", ",", "len", "(", "test", ")", ")", "\n", "\n", "test_iter", "=", "chainer", ".", "iterators", ".", "SerialIterator", "(", "test", ",", "args", ".", "batchsize", ",", "repeat", "=", "False", ",", "shuffle", "=", "False", ")", "\n", "\n", "# setup a inferencer", "\n", "snapshot_file", "=", "find_latest_snapshot", "(", "'predictor_iter_{.updater.iteration:08}.npz'", ",", "args", ".", "out", ")", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "snapshot_file", ",", "predictor", ")", "\n", "print", "(", "'Loaded a snapshot:'", ",", "snapshot_file", ")", "\n", "\n", "model", "=", "MCSampler", "(", "predictor", ",", "\n", "mc_iteration", "=", "args", ".", "mc_iteration", ",", "\n", "activation", "=", "partial", "(", "F", ".", "softmax", ",", "axis", "=", "1", ")", ",", "\n", "reduce_mean", "=", "partial", "(", "F", ".", "argmax", ",", "axis", "=", "1", ")", ",", "\n", "reduce_var", "=", "partial", "(", "F", ".", "mean", ",", "axis", "=", "1", ")", ")", "\n", "\n", "if", "args", ".", "gpu", "[", "0", "]", ">=", "0", ":", "\n", "        ", "chainer", ".", "backends", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", "[", "0", "]", ")", ".", "use", "(", ")", "\n", "model", ".", "to_gpu", "(", ")", "\n", "\n", "", "infer", "=", "Inferencer", "(", "test_iter", ",", "model", ",", "device", "=", "args", ".", "gpu", "[", "0", "]", ")", "\n", "\n", "pred", ",", "uncert", "=", "infer", ".", "run", "(", ")", "\n", "\n", "\n", "# evaluate", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'test'", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "acc_values", "=", "[", "]", "\n", "uncert_values", "=", "[", "]", "\n", "\n", "uncert_clim", "=", "(", "0", ",", "np", ".", "percentile", "(", "uncert", ",", "95", ")", ")", "\n", "\n", "\n", "files", "=", "test", ".", "files", "[", "'image'", "]", "\n", "if", "isinstance", "(", "files", ",", "np", ".", "ndarray", ")", ":", "files", "=", "files", ".", "tolist", "(", ")", "\n", "commonpath", "=", "os", ".", "path", ".", "commonpath", "(", "files", ")", "\n", "\n", "plt", ".", "rcParams", "[", "'font.size'", "]", "=", "14", "\n", "\n", "for", "i", ",", "(", "p", ",", "u", ",", "imf", ",", "lbf", ")", "in", "enumerate", "(", "zip", "(", "pred", ",", "uncert", ",", "\n", "test", ".", "files", "[", "'image'", "]", ",", "\n", "test", ".", "files", "[", "'label'", "]", ")", ")", ":", "\n", "        ", "im", ",", "_", "=", "load_image", "(", "imf", ")", "\n", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "lb", ",", "_", "=", "load_image", "(", "lbf", ")", "\n", "if", "lb", ".", "ndim", "==", "3", ":", "lb", "=", "lb", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "acc_values", ".", "append", "(", "eval_metric", "(", "p", ",", "lb", ")", ")", "\n", "uncert_values", ".", "append", "(", "np", ".", "mean", "(", "u", "[", "p", "==", "1", "]", ")", ")", "# NOTE: instrument class", "\n", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "4", ")", ")", "\n", "\n", "for", "j", ",", "(", "pic", ",", "cmap", ",", "clim", ",", "title", ")", "in", "enumerate", "(", "zip", "(", "\n", "[", "im", ",", "p", ",", "lb", ",", "u", ",", "(", "p", "!=", "lb", ")", ".", "astype", "(", "np", ".", "uint8", ")", "]", ",", "\n", "[", "None", ",", "None", ",", "None", ",", "'jet'", ",", "'jet'", "]", ",", "\n", "[", "None", ",", "None", ",", "None", ",", "uncert_clim", ",", "None", "]", ",", "\n", "[", "'Input image\\n%s'", "%", "os", ".", "path", ".", "relpath", "(", "imf", ",", "commonpath", ")", ",", "\n", "'Predicted label\\n(DC=%.3f)'", "%", "acc_values", "[", "-", "1", "]", ",", "\n", "'Ground-truth label'", ",", "\n", "'Predicted variance\\n(PV=%.4f)'", "%", "uncert_values", "[", "-", "1", "]", ",", "\n", "'Error'", "]", ")", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "1", ",", "5", ",", "j", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "pic", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "clim", "(", "clim", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'test/%03d.png'", "%", "i", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "\n", "", "c", "=", "pearsonr", "(", "uncert_values", ",", "acc_values", ")", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "11", ",", "11", ")", ")", "\n", "ax", "=", "sns", ".", "scatterplot", "(", "x", "=", "uncert_values", ",", "\n", "y", "=", "acc_values", ",", "color", "=", "'blue'", ",", "s", "=", "50", ")", "\n", "ax", ".", "set_xlabel", "(", "'Predicted variance'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Dice coefficient'", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "title", "(", "'r=%.3f'", "%", "c", "[", "0", "]", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'eval.png'", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.train_and_test_epistemic.get_dataset": [[242, 289], ["collections.OrderedDict", "functools.partial", "collections.OrderedDict", "collections.OrderedDict", "functools.partial.", "functools.partial.", "chainer_bcnn.datasets.train_valid_split", "chainer_bcnn.datasets.train_valid_split", "functools.partial.", "functools.partial.", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.train_valid_split", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.train_valid_split"], ["", "def", "get_dataset", "(", "data_root", ",", "\n", "valid_split_type", ",", "\n", "valid_split_ratio", ",", "\n", "valid_augment", ",", "\n", "normalizer", "=", "None", ",", "\n", "augmentor", "=", "None", ")", ":", "\n", "\n", "    ", "class_list", "=", "[", "'background'", ",", "'instrument'", "]", "\n", "dtypes", "=", "OrderedDict", "(", "{", "'image'", ":", "np", ".", "float32", ",", "'label'", ":", "np", ".", "int32", "}", ")", "\n", "\n", "getter", "=", "partial", "(", "ImageDataset", ",", "root", "=", "data_root", ",", "classes", "=", "class_list", ",", "\n", "dtypes", "=", "dtypes", ",", "normalizer", "=", "normalizer", ")", "\n", "\n", "# train and valid dataset", "\n", "train_patients", "=", "[", "'OP1'", ",", "'OP2'", ",", "'OP3'", ",", "'OP4'", "]", "\n", "\n", "train_filenames", "=", "OrderedDict", "(", "{", "\n", "'image'", ":", "'{root}/train/{patient}/Raw/*_raw.png'", ",", "\n", "'label'", ":", "'{root}/train/{patient}/Masks/*_class.png'", ",", "\n", "}", ")", "\n", "\n", "if", "valid_split_type", "==", "'slice'", ":", "\n", "        ", "dataset", "=", "getter", "(", "patients", "=", "train_patients", ",", "filenames", "=", "train_filenames", ",", "augmentor", "=", "augmentor", ")", "\n", "train", ",", "valid", "=", "train_valid_split", "(", "dataset", ",", "valid_split_ratio", ")", "\n", "\n", "", "elif", "valid_split_type", "==", "'patient'", ":", "\n", "        ", "train_patients", ",", "valid_patients", "=", "train_valid_split", "(", "train_patients", ",", "valid_split_ratio", ")", "\n", "train", "=", "getter", "(", "patients", "=", "train_patients", ",", "filenames", "=", "train_filenames", ",", "augmentor", "=", "augmentor", ")", "\n", "valid", "=", "getter", "(", "patients", "=", "valid_patients", ",", "filenames", "=", "train_filenames", ",", "augmentor", "=", "augmentor", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'unsupported validation split type..'", ")", "\n", "\n", "", "if", "not", "valid_augment", ":", "\n", "        ", "del", "valid", ".", "augmentor", "\n", "\n", "# test dataset", "\n", "", "test_filenames", "=", "OrderedDict", "(", "{", "\n", "'image'", ":", "'{root}/test/{patient}/*_raw.png'", ",", "\n", "'label'", ":", "'{root}/test/{patient}/*_class.png'", ",", "\n", "}", ")", "\n", "\n", "test_patients", "=", "[", "'OP*'", "]", "# NOTE: wildcard", "\n", "\n", "test", "=", "getter", "(", "patients", "=", "test_patients", ",", "filenames", "=", "test_filenames", ",", "augmentor", "=", "None", ")", "\n", "\n", "return", "train", ",", "valid", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.train_and_test_epistemic.main": [[292, 418], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print", "print", "os.makedirs", "chainer_bcnn.data.normalizer.Normalizer", "chainer_bcnn.data.normalizer.Normalizer.add", "chainer_bcnn.data.normalizer.Normalizer.add", "chainer_bcnn.data.normalizer.Normalizer.add", "chainer_bcnn.data.augmentor.DataAugmentor", "chainer_bcnn.data.augmentor.DataAugmentor.add", "chainer_bcnn.data.augmentor.DataAugmentor.add", "chainer_bcnn.data.normalizer.Clip2D", "chainer_bcnn.data.normalizer.Subtract2D", "chainer_bcnn.data.normalizer.Divide2D", "chainer_bcnn.data.augmentor.Flip2D", "chainer_bcnn.data.augmentor.Affine2D", "chainer_bcnn.utils.fixed_seed", "chainer_bcnn.models.BayesianUNet", "train_and_test_epistemic.get_dataset", "chainer_bcnn.models.BayesianUNet.freeze_layers", "train_and_test_epistemic.test_phase", "train_and_test_epistemic.test_phase", "chainerui.utils.save_args", "chainer_bcnn.models.BayesianUNet.save_args", "chainer_bcnn.data.normalizer.Normalizer.summary", "chainer_bcnn.data.augmentor.DataAugmentor.summary", "train_and_test_epistemic.train_phase", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.fixed_seed", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.get_dataset", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.freeze_layers", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.test_phase", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.test_phase", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.save_args", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.save_args", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.summary", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.summary", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.train_phase"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Example: Uncertainty estimates in segmentation'", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "'-d'", ",", "type", "=", "str", ",", "default", "=", "'./preprocessed'", ",", "\n", "help", "=", "'Directory to dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--batchsize'", ",", "'-b'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'Number of images in each mini-batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--iteration'", ",", "'-i'", ",", "type", "=", "int", ",", "default", "=", "50000", ",", "\n", "help", "=", "'Number of sweeps over the dataset to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--frequency'", ",", "'-f'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Frequency of taking a snapshot'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "'-g'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "0", "]", ",", "\n", "help", "=", "'GPU ID (negative value indicates CPU)'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "'-o'", ",", "default", "=", "'logs'", ",", "\n", "help", "=", "'Directory to output the result'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "'-r'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Resume the training from snapshot'", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_augment'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Enable data augmentation during validation'", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_split_ratio'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'Ratio of validation data to training data'", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_split_type'", ",", "type", "=", "str", ",", "default", "=", "'slice'", ",", "choices", "=", "[", "'slice'", ",", "'patient'", "]", ",", "\n", "help", "=", "'How to choice validation data from training data'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "\n", "help", "=", "'Learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay'", ",", "type", "=", "float", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Weight of L2 regularization'", ")", "\n", "parser", ".", "add_argument", "(", "'--mc_iteration'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "'Number of iteration of MCMC'", ")", "\n", "parser", ".", "add_argument", "(", "'--pinfall'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Countdown for early stopping of training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_upconv'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Disables updating the up-convolutional weights. If weights are initialized with \\\n                            bilinear kernels, up-conv acts as bilinear upsampler.'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_on_test'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Switch to the testing phase on test dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_on_valid'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Switch to the testing phase on valid dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Fix the random seed'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "'GPU: {}'", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "print", "(", "'# Minibatch-size: {}'", ".", "format", "(", "args", ".", "batchsize", ")", ")", "\n", "print", "(", "''", ")", "\n", "\n", "# setup output directory", "\n", "os", ".", "makedirs", "(", "args", ".", "out", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# NOTE: ad-hoc", "\n", "# setup a normalizer", "\n", "normalizer", "=", "Normalizer", "(", ")", "\n", "normalizer", ".", "add", "(", "Clip2D", "(", "'minmax'", ")", ")", "\n", "normalizer", ".", "add", "(", "Subtract2D", "(", "0.5", ")", ")", "\n", "normalizer", ".", "add", "(", "Divide2D", "(", "1.", "/", "255.", ")", ")", "\n", "\n", "# setup an augmentor", "\n", "augmentor", "=", "DataAugmentor", "(", "n_dim", "=", "2", ")", "\n", "augmentor", ".", "add", "(", "Flip2D", "(", "axis", "=", "2", ")", ")", "\n", "augmentor", ".", "add", "(", "Affine2D", "(", "rotation", "=", "15.", ",", "\n", "translate", "=", "(", "10.", ",", "10.", ")", ",", "\n", "shear", "=", "0.25", ",", "\n", "zoom", "=", "(", "0.8", ",", "1.2", ")", ",", "\n", "keep_aspect_ratio", "=", "True", ",", "\n", "fill_mode", "=", "(", "'reflect'", ",", "'reflect'", ")", ",", "\n", "cval", "=", "(", "0.", ",", "0.", ")", ",", "\n", "interp_order", "=", "(", "1", ",", "0", ")", ")", ")", "\n", "\n", "\n", "with", "fixed_seed", "(", "args", ".", "seed", ",", "strict", "=", "False", ")", ":", "\n", "\n", "# setup a predictor", "\n", "        ", "conv_param", "=", "{", "# NOTE: you can change layer type if you want..", "\n", "'name'", ":", "'dilated'", ",", "\n", "'ksize'", ":", "3", ",", "\n", "'stride'", ":", "1", ",", "\n", "'pad'", ":", "2", ",", "\n", "'dilate'", ":", "2", ",", "\n", "'initialW'", ":", "{", "'name'", ":", "'he_normal'", ",", "'scale'", ":", "1.0", "}", ",", "\n", "'initial_bias'", ":", "{", "'name'", ":", "'zero'", "}", ",", "\n", "}", "\n", "\n", "upconv_param", "=", "{", "# NOTE: you can change layer type if you want..", "\n", "'name'", ":", "'deconv'", ",", "\n", "'ksize'", ":", "3", ",", "\n", "'stride'", ":", "2", ",", "\n", "'pad'", ":", "0", ",", "\n", "'initialW'", ":", "{", "'name'", ":", "'bilinear'", ",", "'scale'", ":", "1.0", "}", ",", "\n", "'initial_bias'", ":", "{", "'name'", ":", "'zero'", "}", ",", "\n", "}", "\n", "\n", "norm_param", "=", "{", "'name'", ":", "'batch'", "}", "\n", "\n", "predictor", "=", "BayesianUNet", "(", "ndim", "=", "2", ",", "\n", "out_channels", "=", "2", ",", "\n", "nlayer", "=", "4", ",", "\n", "nfilter", "=", "32", ",", "\n", "conv_param", "=", "conv_param", ",", "\n", "upconv_param", "=", "upconv_param", ",", "\n", "norm_param", "=", "norm_param", ")", "\n", "\n", "if", "args", ".", "freeze_upconv", ":", "\n", "            ", "predictor", ".", "freeze_layers", "(", "name", "=", "'upconv'", ",", "\n", "recursive", "=", "True", ",", "\n", "verbose", "=", "True", ")", "\n", "\n", "# setup dataset", "\n", "", "train", ",", "valid", ",", "test", "=", "get_dataset", "(", "args", ".", "data_root", ",", "\n", "args", ".", "valid_split_type", ",", "\n", "args", ".", "valid_split_ratio", ",", "\n", "args", ".", "valid_augment", ",", "\n", "normalizer", ",", "augmentor", ")", "\n", "\n", "# run", "\n", "if", "args", ".", "test_on_test", ":", "\n", "            ", "test_phase", "(", "predictor", ",", "test", ",", "args", ")", "\n", "", "elif", "args", ".", "test_on_valid", ":", "\n", "            ", "test_phase", "(", "predictor", ",", "valid", ",", "args", ")", "\n", "", "else", ":", "\n", "            ", "save_args", "(", "args", ",", "args", ".", "out", ")", "\n", "predictor", ".", "save_args", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'model.json'", ")", ")", "\n", "normalizer", ".", "summary", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'norm.json'", ")", ")", "\n", "augmentor", ".", "summary", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'augment.json'", ")", ")", "\n", "\n", "train_phase", "(", "predictor", ",", "train", ",", "valid", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.my_hook": [[10, 37], ["t.update"], "function", ["None"], ["def", "my_hook", "(", "t", ")", ":", "# https://github.com/tqdm/tqdm/blob/master/examples/tqdm_wget.py", "\n", "    ", "\"\"\"Wraps tqdm instance.\n    Don't forget to close() or __exit__()\n    the tqdm instance once you're done with it (easiest using `with` syntax).\n    Example\n    -------\n    >>> with tqdm(...) as t:\n    ...     reporthook = my_hook(t)\n    ...     urllib.urlretrieve(..., reporthook=reporthook)\n    \"\"\"", "\n", "last_b", "=", "[", "0", "]", "\n", "\n", "def", "update_to", "(", "b", "=", "1", ",", "bsize", "=", "1", ",", "tsize", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        b  : int, optional\n            Number of blocks transferred so far [default: 1].\n        bsize  : int, optional\n            Size of each block (in tqdm units) [default: 1].\n        tsize  : int, optional\n            Total size (in tqdm units). If [default: None] remains unchanged.\n        \"\"\"", "\n", "if", "tsize", "is", "not", "None", ":", "\n", "            ", "t", ".", "total", "=", "tsize", "\n", "", "t", ".", "update", "(", "(", "b", "-", "last_b", "[", "0", "]", ")", "*", "bsize", ")", "\n", "last_b", "[", "0", "]", "=", "b", "\n", "\n", "", "return", "update_to", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.download": [[38, 45], ["os.makedirs", "os.path.dirname", "os.path.exists", "tqdm.tqdm", "urllib.request.urlretrieve", "preprocess.my_hook"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.preprocess.my_hook"], ["", "def", "download", "(", "url", ",", "out", ")", ":", "\n", "\n", "    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "out", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out", ")", ":", "\n", "        ", "with", "tqdm", ".", "tqdm", "(", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ",", "miniters", "=", "1", ",", "ncols", "=", "80", ")", "as", "t", ":", "\n", "            ", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "out", ",", "reporthook", "=", "my_hook", "(", "t", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.unzip": [[46, 52], ["os.makedirs", "os.path.dirname", "zipfile.ZipFile", "existing_zip.extractall"], "function", ["None"], ["", "", "", "def", "unzip", "(", "zip_file", ",", "out", ")", ":", "\n", "\n", "    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "out", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "with", "zipfile", ".", "ZipFile", "(", "zip_file", ")", "as", "existing_zip", ":", "\n", "        ", "existing_zip", ".", "extractall", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.preprocess_images": [[53, 61], ["os.path.commonpath", "tqdm.tqdm", "os.path.join", "os.makedirs", "shutil.copyfile", "os.path.relpath", "os.path.dirname"], "function", ["None"], ["", "", "def", "preprocess_images", "(", "files", ",", "out_dir", ")", ":", "\n", "\n", "    ", "commonpath", "=", "os", ".", "path", ".", "commonpath", "(", "files", ")", "\n", "\n", "for", "f", "in", "tqdm", ".", "tqdm", "(", "files", ")", ":", "\n", "        ", "out", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "os", ".", "path", ".", "relpath", "(", "f", ",", "commonpath", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "out", ")", ",", "exist_ok", "=", "True", ")", "\n", "copyfile", "(", "f", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.preprocess_labels": [[62, 82], ["os.path.commonpath", "tqdm.tqdm", "os.path.join", "os.makedirs", "cv2.imread", "numpy.zeros", "cv2.imwrite", "os.path.relpath", "os.path.dirname"], "function", ["None"], ["", "", "def", "preprocess_labels", "(", "files", ",", "out_dir", ",", "binary", "=", "True", ")", ":", "\n", "\n", "    ", "commonpath", "=", "os", ".", "path", ".", "commonpath", "(", "files", ")", "\n", "\n", "for", "f", "in", "tqdm", ".", "tqdm", "(", "files", ")", ":", "\n", "        ", "out", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "os", ".", "path", ".", "relpath", "(", "f", ",", "commonpath", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "out", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "src", "=", "cv2", ".", "imread", "(", "f", ")", "\n", "src", "=", "src", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "dst", "=", "np", ".", "zeros", "(", "src", ".", "shape", ",", "src", ".", "dtype", ")", "\n", "\n", "if", "binary", ":", "\n", "            ", "dst", "[", "src", "!=", "0", "]", "=", "1", "\n", "", "else", ":", "\n", "            ", "dst", "[", "src", "==", "70", "]", "=", "1", "\n", "dst", "[", "src", "==", "160", "]", "=", "2", "\n", "\n", "", "cv2", ".", "imwrite", "(", "out", ",", "dst", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.preprocess_train": [[83, 102], ["os.path.join", "os.path.join", "preprocess.download", "preprocess.unzip", "glob.glob", "print", "preprocess.preprocess_images", "glob.glob", "print", "preprocess.preprocess_labels", "os.path.join", "os.path.basename", "os.path.join", "len", "os.path.join", "os.path.join", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.preprocess.download", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.unzip", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.preprocess_images", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.preprocess_labels"], ["", "", "def", "preprocess_train", "(", "out_dir", ",", "temp_dir", "=", "None", ")", ":", "\n", "\n", "    ", "if", "temp_dir", "is", "None", ":", "\n", "        ", "temp_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'temp'", ")", "\n", "\n", "", "train_url", "=", "'http://opencas.webarchiv.kit.edu/data/endovis15_ins/Segmentation_Rigid_Training.zip'", "\n", "train_zip", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "os", ".", "path", ".", "basename", "(", "train_url", ")", ")", "\n", "train_dir", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'train'", ",", "'image_and_label'", ")", "\n", "\n", "download", "(", "train_url", ",", "train_zip", ")", "\n", "unzip", "(", "train_zip", ",", "train_dir", ")", "\n", "\n", "train_image_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "train_dir", ",", "'**'", ",", "'*_raw.png'", ")", ",", "recursive", "=", "True", ")", "\n", "print", "(", "'# train images:'", ",", "len", "(", "train_image_files", ")", ")", "\n", "preprocess_images", "(", "train_image_files", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'train'", ")", ")", "\n", "\n", "train_label_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "train_dir", ",", "'**'", ",", "'*_class.png'", ")", ",", "recursive", "=", "True", ")", "\n", "print", "(", "'# train labels:'", ",", "len", "(", "train_label_files", ")", ")", "\n", "preprocess_labels", "(", "train_label_files", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'train'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.preprocess_test": [[103, 129], ["os.path.join", "os.path.join", "preprocess.download", "preprocess.unzip", "os.path.join", "os.path.join", "preprocess.download", "preprocess.unzip", "glob.glob", "print", "preprocess.preprocess_images", "glob.glob", "print", "preprocess.preprocess_labels", "os.path.join", "os.path.basename", "os.path.basename", "os.path.join", "len", "os.path.join", "os.path.join", "len", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.preprocess.download", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.unzip", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.preprocess.download", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.unzip", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.preprocess_images", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.miccai_endovis_segmentation.preprocess.preprocess_labels"], ["", "def", "preprocess_test", "(", "out_dir", ",", "temp_dir", "=", "None", ")", ":", "\n", "\n", "    ", "if", "temp_dir", "is", "None", ":", "\n", "        ", "temp_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'temp'", ")", "\n", "\n", "", "test_image_url", "=", "'http://opencas.webarchiv.kit.edu/data/endovis15_ins/Segmentation_Rigid_Testing_Revision.zip'", "\n", "test_image_zip", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "os", ".", "path", ".", "basename", "(", "test_image_url", ")", ")", "\n", "test_image_dir", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'test'", ",", "'image'", ")", "\n", "\n", "download", "(", "test_image_url", ",", "test_image_zip", ")", "\n", "unzip", "(", "test_image_zip", ",", "test_image_dir", ")", "\n", "\n", "test_label_url", "=", "'http://opencas.webarchiv.kit.edu/data/endovis15_ins/Segmentation_Rigid_Testing_GT.zip'", "\n", "test_label_zip", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "os", ".", "path", ".", "basename", "(", "test_label_url", ")", ")", "\n", "test_label_dir", "=", "os", ".", "path", ".", "join", "(", "temp_dir", ",", "'test'", ",", "'label'", ")", "\n", "\n", "download", "(", "test_label_url", ",", "test_label_zip", ")", "\n", "unzip", "(", "test_label_zip", ",", "test_label_dir", ")", "\n", "\n", "test_image_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "test_image_dir", ",", "'**'", ",", "'*_raw.png'", ")", ",", "recursive", "=", "True", ")", "\n", "print", "(", "'# test images:'", ",", "len", "(", "test_image_files", ")", ")", "\n", "preprocess_images", "(", "test_image_files", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'test'", ")", ")", "\n", "\n", "test_label_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "test_label_dir", ",", "'**'", ",", "'*_class.png'", ")", ",", "recursive", "=", "True", ")", "\n", "print", "(", "'# test labels:'", ",", "len", "(", "test_label_files", ")", ")", "\n", "preprocess_labels", "(", "test_label_files", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "'test'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic.Dataset.__init__": [[21, 38], ["callable", "isinstance", "numpy.sort", "func", "numpy.sort.astype", "func.astype", "numpy.sin", "numpy.random.rand"], "methods", ["None"], ["from", "chainer_bcnn", ".", "datasets", "import", "ImageDataset", "\n", "from", "chainer_bcnn", ".", "data", ".", "augmentor", "import", "DataAugmentor", ",", "Flip2D", ",", "Affine2D", "\n", "from", "chainer_bcnn", ".", "data", ".", "normalizer", "import", "Normalizer", ",", "Clip2D", ",", "Subtract2D", ",", "Divide2D", "\n", "from", "chainer_bcnn", ".", "models", "import", "BayesianUNet", "\n", "from", "chainer_bcnn", ".", "links", "import", "Classifier", "\n", "from", "chainer_bcnn", ".", "extensions", "import", "LogReport", "\n", "from", "chainer_bcnn", ".", "extensions", "import", "PrintReport", "\n", "from", "chainer_bcnn", ".", "extensions", "import", "Validator", "\n", "from", "chainer_bcnn", ".", "visualizer", "import", "ImageVisualizer", "\n", "from", "chainer_bcnn", ".", "links", "import", "MCSampler", "\n", "from", "chainer_bcnn", ".", "inference", "import", "Inferencer", "\n", "from", "chainer_bcnn", ".", "data", "import", "load_image", ",", "save_image", "\n", "from", "chainer_bcnn", ".", "datasets", "import", "train_valid_split", "\n", "from", "chainer_bcnn", ".", "utils", "import", "fixed_seed", "\n", "from", "chainer_bcnn", ".", "utils", "import", "find_latest_snapshot", "\n", "from", "scipy", ".", "stats", "import", "pearsonr", "\n", "\n", "def", "eval_metric", "(", "y", ",", "t", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic.Dataset.x": [[39, 42], ["None"], "methods", ["None"], ["    ", "def", "dice", "(", "y", ",", "t", ")", ":", "\n", "        ", "y", "=", "y", ".", "astype", "(", "np", ".", "bool", ")", "\n", "t", "=", "t", ".", "astype", "(", "np", ".", "bool", ")", "\n", "return", "2.", "*", "np", ".", "logical_and", "(", "y", ",", "t", ")", ".", "sum", "(", ")", "/", "(", "y", ".", "sum", "(", ")", "+", "t", ".", "sum", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic.Dataset.y": [[43, 46], ["None"], "methods", ["None"], ["", "return", "dice", "(", "y", ",", "t", ")", "\n", "\n", "\n", "", "def", "train_phase", "(", "predictor", ",", "train", ",", "valid", ",", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic.Dataset.t": [[47, 50], ["None"], "methods", ["None"], ["\n", "    ", "print", "(", "'# classes:'", ",", "train", ".", "n_classes", ")", "\n", "print", "(", "'# samples:'", ")", "\n", "print", "(", "'-- train:'", ",", "len", "(", "train", ")", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic.Dataset.__len__": [[51, 53], ["len"], "methods", ["None"], ["print", "(", "'-- valid:'", ",", "len", "(", "valid", ")", ")", "\n", "\n", "# setup dataset iterators", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic.Dataset.get_example": [[54, 56], ["None"], "methods", ["None"], ["train_batchsize", "=", "min", "(", "args", ".", "batchsize", "*", "len", "(", "args", ".", "gpu", ")", ",", "len", "(", "train", ")", ")", "\n", "valid_batchsize", "=", "args", ".", "batchsize", "\n", "train_iter", "=", "chainer", ".", "iterators", ".", "MultiprocessIterator", "(", "train", ",", "train_batchsize", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic.BayesianMLP.__init__": [[60, 71], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.Chain.__init__", "train_and_test_epistemic.BayesianMLP.init_scope", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["# setup a model", "\n", "class_weight", "=", "None", "# NOTE: please set if you have..", "\n", "\n", "lossfun", "=", "partial", "(", "softmax_cross_entropy", ",", "\n", "normalize", "=", "False", ",", "class_weight", "=", "class_weight", ")", "\n", "\n", "model", "=", "Classifier", "(", "predictor", ",", "lossfun", "=", "lossfun", ")", "\n", "\n", "if", "args", ".", "gpu", "[", "0", "]", ">=", "0", ":", "\n", "        ", "chainer", ".", "backends", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", "[", "0", "]", ")", ".", "use", "(", ")", "\n", "if", "len", "(", "args", ".", "gpu", ")", "==", "1", ":", "model", ".", "to_gpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic.BayesianMLP.forward": [[72, 78], ["chainer.relu", "chainer.relu", "chainer.relu", "chainer_bcnn.functions.mc_dropout", "chainer.relu", "chainer.relu", "chainer.relu", "chainer_bcnn.functions.mc_dropout", "train_and_test_epistemic.BayesianMLP.l3", "train_and_test_epistemic.BayesianMLP.l1", "train_and_test_epistemic.BayesianMLP.l2"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.mc_dropout.mc_dropout", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.mc_dropout.mc_dropout"], ["# setup an optimizer", "\n", "", "optimizer", "=", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "args", ".", "lr", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "eps", "=", "1e-08", ",", "amsgrad", "=", "False", ")", "\n", "optimizer", ".", "setup", "(", "model", ")", "\n", "if", "args", ".", "decay", ">", "0", ":", "\n", "        ", "optimizer", ".", "add_hook", "(", "chainer", ".", "optimizer_hooks", ".", "WeightDecay", "(", "args", ".", "decay", ")", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic.train_phase": [[80, 149], ["matplotlib.figure", "seaborn.scatterplot", "sns.scatterplot.plot", "sns.scatterplot.set_xlabel", "sns.scatterplot.set_ylabel", "sns.scatterplot.set_xlim", "sns.scatterplot.set_ylim", "matplotlib.legend", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer_bcnn.links.Regressor", "chainer.optimizers.Adam", "chainer.optimizers.Adam", "chainer.optimizers.Adam", "chainer.optimizers.Adam.setup", "chainer.training.updaters.StandardUpdater", "chainer.training.Trainer", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.run", "chainer.serializers.save_npz", "chainer.serializers.save_npz", "chainer.serializers.save_npz", "train.x.ravel", "train.t.ravel", "os.path.join", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer_bcnn.links.Regressor.to_gpu", "chainer.optimizers.Adam.add_hook", "chainer.training.extensions.Evaluator", "chainer.training.extensions.dump_graph", "max", "chainer.training.extensions.snapshot", "chainer.training.extensions.LogReport", "chainer.training.extensions.PlotReport.available", "training.Trainer.extend", "training.Trainer.extend", "chainer.training.extensions.PrintReport", "chainer.training.extensions.ProgressBar", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "os.path.join", "train.x.ravel", "train.y.ravel", "chainer.optimizer_hooks.WeightDecay", "chainer.optimizer_hooks.WeightDecay", "chainer.optimizer_hooks.WeightDecay", "chainer.training.extensions.PlotReport", "chainer.training.extensions.PlotReport", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.run", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_discriminator.dump_graph"], ["", "if", "len", "(", "args", ".", "gpu", ")", "==", "1", ":", "\n", "        ", "updater", "=", "training", ".", "updaters", ".", "StandardUpdater", "(", "\n", "train_iter", ",", "optimizer", ",", "device", "=", "args", ".", "gpu", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "devices", "=", "{", "'main'", ":", "args", ".", "gpu", "[", "0", "]", "}", "\n", "for", "idx", ",", "g", "in", "enumerate", "(", "args", ".", "gpu", "[", "1", ":", "]", ")", ":", "\n", "            ", "devices", "[", "'slave_%d'", "%", "idx", "]", "=", "g", "\n", "", "updater", "=", "training", ".", "updaters", ".", "ParallelUpdater", "(", "\n", "train_iter", ",", "optimizer", ",", "devices", "=", "devices", ")", "\n", "\n", "\n", "", "frequency", "=", "max", "(", "args", ".", "iteration", "//", "20", ",", "1", ")", "if", "args", ".", "frequency", "==", "-", "1", "else", "max", "(", "1", ",", "args", ".", "frequency", ")", "\n", "\n", "stop_trigger", "=", "triggers", ".", "EarlyStoppingTrigger", "(", "monitor", "=", "'validation/main/loss'", ",", "\n", "max_trigger", "=", "(", "args", ".", "iteration", ",", "'iteration'", ")", ",", "\n", "check_trigger", "=", "(", "frequency", ",", "'iteration'", ")", ",", "\n", "patients", "=", "np", ".", "inf", "if", "args", ".", "pinfall", "==", "-", "1", "else", "max", "(", "1", ",", "args", ".", "pinfall", ")", ")", "\n", "\n", "trainer", "=", "training", ".", "Trainer", "(", "updater", ",", "stop_trigger", ",", "out", "=", "args", ".", "out", ")", "\n", "\n", "\n", "# setup a visualizer", "\n", "transforms", "=", "{", "'x'", ":", "lambda", "x", ":", "x", ",", "'y'", ":", "lambda", "x", ":", "np", ".", "argmax", "(", "x", ",", "axis", "=", "0", ")", ",", "'t'", ":", "lambda", "x", ":", "x", "}", "\n", "\n", "cmap", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "cmaps", "=", "{", "'x'", ":", "None", ",", "'y'", ":", "cmap", ",", "'t'", ":", "cmap", "}", "\n", "\n", "clims", "=", "{", "'x'", ":", "'minmax'", ",", "'y'", ":", "None", ",", "'t'", ":", "None", "}", "\n", "\n", "visualizer", "=", "ImageVisualizer", "(", "transforms", "=", "transforms", ",", "\n", "cmaps", "=", "cmaps", ",", "clims", "=", "clims", ")", "\n", "\n", "# setup a validator", "\n", "valid_file", "=", "os", ".", "path", ".", "join", "(", "'validation'", ",", "'iter_{.updater.iteration:08}.png'", ")", "\n", "trainer", ".", "extend", "(", "Validator", "(", "valid_iter", ",", "model", ",", "valid_file", ",", "\n", "visualizer", "=", "visualizer", ",", "n_vis", "=", "20", ",", "\n", "device", "=", "args", ".", "gpu", "[", "0", "]", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "dump_graph", "(", "'main/loss'", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot", "(", "filename", "=", "'snapshot_iter_{.updater.iteration:08}.npz'", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot_object", "(", "predictor", ",", "'predictor_iter_{.updater.iteration:08}.npz'", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "\n", "log_keys", "=", "[", "'main/loss'", ",", "'validation/main/loss'", ",", "\n", "'main/accuracy'", ",", "'validation/main/accuracy'", "]", "\n", "\n", "trainer", ".", "extend", "(", "LogReport", "(", "keys", "=", "log_keys", ")", ")", "\n", "\n", "# setup log ploter", "\n", "if", "extensions", ".", "PlotReport", ".", "available", "(", ")", ":", "\n", "        ", "for", "plot_key", "in", "[", "'loss'", ",", "'accuracy'", "]", ":", "\n", "            ", "plot_keys", "=", "[", "key", "for", "key", "in", "log_keys", "if", "key", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "startswith", "(", "plot_key", ")", "]", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "plot_keys", ",", "\n", "'iteration'", ",", "file_name", "=", "plot_key", "+", "'.png'", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", ")", "\n", "\n", "", "", "trainer", ".", "extend", "(", "PrintReport", "(", "[", "'iteration'", "]", "+", "log_keys", "+", "[", "'elapsed_time'", "]", ",", "n_step", "=", "100", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "ProgressBar", "(", ")", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "chainer", ".", "serializers", ".", "load_npz", "(", "args", ".", "resume", ",", "trainer", ")", "\n", "\n", "\n", "# train", "\n", "", "trainer", ".", "run", "(", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic.test_phase": [[151, 194], ["chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "chainer_bcnn.links.MCSampler", "chainer_bcnn.inference.Inferencer", "chainer_bcnn.inference.Inferencer.run", "test.x.ravel", "test.t.ravel", "pred.ravel.ravel", "uncert.ravel.ravel", "matplotlib.figure", "seaborn.scatterplot", "sns.scatterplot.errorbar", "sns.scatterplot.plot", "sns.scatterplot.set_xlabel", "sns.scatterplot.set_ylabel", "sns.scatterplot.set_xlim", "sns.scatterplot.set_ylim", "matplotlib.legend", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "os.path.join", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer_bcnn.links.MCSampler.to_gpu", "os.path.join", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.run"], ["\n", "", "def", "test_phase", "(", "predictor", ",", "test", ",", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'# samples:'", ")", "\n", "print", "(", "'-- test:'", ",", "len", "(", "test", ")", ")", "\n", "\n", "test_iter", "=", "chainer", ".", "iterators", ".", "SerialIterator", "(", "test", ",", "args", ".", "batchsize", ",", "repeat", "=", "False", ",", "shuffle", "=", "False", ")", "\n", "\n", "# setup a inferencer", "\n", "snapshot_file", "=", "find_latest_snapshot", "(", "'predictor_iter_{.updater.iteration:08}.npz'", ",", "args", ".", "out", ")", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "snapshot_file", ",", "predictor", ")", "\n", "print", "(", "'Loaded a snapshot:'", ",", "snapshot_file", ")", "\n", "\n", "model", "=", "MCSampler", "(", "predictor", ",", "\n", "mc_iteration", "=", "args", ".", "mc_iteration", ",", "\n", "activation", "=", "partial", "(", "F", ".", "softmax", ",", "axis", "=", "1", ")", ",", "\n", "reduce_mean", "=", "partial", "(", "F", ".", "argmax", ",", "axis", "=", "1", ")", ",", "\n", "reduce_var", "=", "partial", "(", "F", ".", "mean", ",", "axis", "=", "1", ")", ")", "\n", "\n", "if", "args", ".", "gpu", "[", "0", "]", ">=", "0", ":", "\n", "        ", "chainer", ".", "backends", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", "[", "0", "]", ")", ".", "use", "(", ")", "\n", "model", ".", "to_gpu", "(", ")", "\n", "\n", "", "infer", "=", "Inferencer", "(", "test_iter", ",", "model", ",", "device", "=", "args", ".", "gpu", "[", "0", "]", ")", "\n", "\n", "pred", ",", "uncert", "=", "infer", ".", "run", "(", ")", "\n", "\n", "\n", "# evaluate", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'test'", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "acc_values", "=", "[", "]", "\n", "uncert_values", "=", "[", "]", "\n", "\n", "uncert_clim", "=", "(", "0", ",", "np", ".", "percentile", "(", "uncert", ",", "95", ")", ")", "\n", "\n", "\n", "files", "=", "test", ".", "files", "[", "'image'", "]", "\n", "if", "isinstance", "(", "files", ",", "np", ".", "ndarray", ")", ":", "files", "=", "files", ".", "tolist", "(", ")", "\n", "commonpath", "=", "os", ".", "path", ".", "commonpath", "(", "files", ")", "\n", "\n", "plt", ".", "rcParams", "[", "'font.size'", "]", "=", "14", "\n", "\n", "for", "i", ",", "(", "p", ",", "u", ",", "imf", ",", "lbf", ")", "in", "enumerate", "(", "zip", "(", "pred", ",", "uncert", ",", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic.main": [[196, 246], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.makedirs", "chainer_bcnn.utils.fixed_seed", "train_and_test_epistemic.BayesianMLP", "train_and_test_epistemic.Dataset", "train_and_test_epistemic.Dataset", "train_and_test_epistemic.Dataset", "train_and_test_epistemic.test_phase", "train_and_test_epistemic.test_phase", "train_and_test_epistemic.train_phase"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.fixed_seed", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.test_phase", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.test_phase", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.train_phase"], ["test", ".", "files", "[", "'label'", "]", ")", ")", ":", "\n", "        ", "im", ",", "_", "=", "load_image", "(", "imf", ")", "\n", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "lb", ",", "_", "=", "load_image", "(", "lbf", ")", "\n", "if", "lb", ".", "ndim", "==", "3", ":", "lb", "=", "lb", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "acc_values", ".", "append", "(", "eval_metric", "(", "p", ",", "lb", ")", ")", "\n", "uncert_values", ".", "append", "(", "np", ".", "mean", "(", "u", "[", "p", "==", "1", "]", ")", ")", "# NOTE: instrument class", "\n", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "4", ")", ")", "\n", "\n", "for", "j", ",", "(", "pic", ",", "cmap", ",", "clim", ",", "title", ")", "in", "enumerate", "(", "zip", "(", "\n", "[", "im", ",", "p", ",", "lb", ",", "u", ",", "(", "p", "!=", "lb", ")", ".", "astype", "(", "np", ".", "uint8", ")", "]", ",", "\n", "[", "None", ",", "None", ",", "None", ",", "'jet'", ",", "'jet'", "]", ",", "\n", "[", "None", ",", "None", ",", "None", ",", "uncert_clim", ",", "None", "]", ",", "\n", "[", "'Input image\\n%s'", "%", "os", ".", "path", ".", "relpath", "(", "imf", ",", "commonpath", ")", ",", "\n", "'Predicted label\\n(DC=%.3f)'", "%", "acc_values", "[", "-", "1", "]", ",", "\n", "'Ground-truth label'", ",", "\n", "'Predicted variance\\n(PV=%.4f)'", "%", "uncert_values", "[", "-", "1", "]", ",", "\n", "'Error'", "]", ")", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "1", ",", "5", ",", "j", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "pic", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "clim", "(", "clim", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'test/%03d.png'", "%", "i", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "\n", "", "c", "=", "pearsonr", "(", "uncert_values", ",", "acc_values", ")", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "11", ",", "11", ")", ")", "\n", "ax", "=", "sns", ".", "scatterplot", "(", "x", "=", "uncert_values", ",", "\n", "y", "=", "acc_values", ",", "color", "=", "'blue'", ",", "s", "=", "50", ")", "\n", "ax", ".", "set_xlabel", "(", "'Predicted variance'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Dice coefficient'", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "title", "(", "'r=%.3f'", "%", "c", "[", "0", "]", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'eval.png'", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "get_dataset", "(", "data_root", ",", "\n", "valid_split_type", ",", "\n", "valid_split_ratio", ",", "\n", "valid_augment", ",", "\n", "normalizer", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.Dataset.__init__": [[28, 49], ["callable", "isinstance", "numpy.sort", "func", "numpy.logical_and", "numpy.sort.astype", "y.astype", "func.astype", "train_and_test_epistemic_aleatoric.noise", "numpy.sin", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.noise"], ["    ", "def", "__init__", "(", "self", ",", "\n", "func", "=", "lambda", "x", ":", "x", "*", "np", ".", "sin", "(", "x", ")", ",", "\n", "n_samples", "=", "100", ",", "\n", "x_lim", "=", "(", "-", "5", ",", "5", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "\n", "        ", "assert", "callable", "(", "func", ")", "\n", "assert", "isinstance", "(", "x_lim", ",", "(", "list", ",", "tuple", ")", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "rand", "(", "n_samples", ",", "1", ")", "*", "(", "x_lim", "[", "1", "]", "-", "x_lim", "[", "0", "]", ")", "+", "x_lim", "[", "0", "]", "\n", "x", "=", "np", ".", "sort", "(", "x", ",", "axis", "=", "0", ")", "\n", "t", "=", "func", "(", "x", ")", "\n", "\n", "mask", "=", "np", ".", "logical_and", "(", "-", "3", "<", "x", ",", "x", "<", "-", "1", ")", "\n", "y", "=", "t", "+", "noise", "(", "mask", ",", "scale", "=", "2", ")", "\n", "\n", "self", ".", "_func", "=", "func", "\n", "self", ".", "_x_lim", "=", "x_lim", "\n", "self", ".", "_x", "=", "x", ".", "astype", "(", "dtype", ")", "\n", "self", ".", "_y", "=", "y", ".", "astype", "(", "dtype", ")", "\n", "self", ".", "_t", "=", "t", ".", "astype", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.Dataset.x": [[50, 53], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "x", "(", "self", ")", ":", "# NOTE: input", "\n", "        ", "return", "self", ".", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.Dataset.y": [[54, 57], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "y", "(", "self", ")", ":", "# NOTE: observation", "\n", "        ", "return", "self", ".", "_y", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.Dataset.t": [[58, 61], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "t", "(", "self", ")", ":", "# NOTE: ground-truth", "\n", "        ", "return", "self", ".", "_t", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.Dataset.__len__": [[62, 64], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.Dataset.get_example": [[65, 67], ["None"], "methods", ["None"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "x", "[", "i", "]", ",", "self", ".", "y", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.BayesianMLP.__init__": [[71, 83], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.Chain.__init__", "train_and_test_epistemic_aleatoric.BayesianMLP.init_scope", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.initializers.Zero", "chainer.initializers.Zero", "chainer.initializers.Zero", "chainer.initializers.Zero", "chainer.initializers.Zero", "chainer.initializers.Zero", "chainer.initializers.Zero", "chainer.initializers.Zero", "chainer.initializers.Zero"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_units", ",", "n_out", ",", "drop_ratio", ")", ":", "\n", "        ", "super", "(", "BayesianMLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_units", "=", "n_units", "\n", "self", ".", "n_out", "=", "n_out", "\n", "self", ".", "drop_ratio", "=", "drop_ratio", "\n", "\n", "with", "self", ".", "init_scope", "(", ")", ":", "\n", "            ", "self", ".", "l1", "=", "L", ".", "Linear", "(", "None", ",", "n_units", ")", "\n", "self", ".", "l2", "=", "L", ".", "Linear", "(", "None", ",", "n_units", ")", "\n", "self", ".", "l3", "=", "L", ".", "Linear", "(", "None", ",", "n_out", ")", "\n", "self", ".", "l3_sigma", "=", "L", ".", "Linear", "(", "None", ",", "n_out", ",", "nobias", "=", "True", ",", "initialW", "=", "chainer", ".", "initializers", ".", "Zero", "(", ")", ")", "# NOTE: log_sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.BayesianMLP.forward": [[84, 96], ["chainer.relu", "chainer.relu", "chainer.relu", "chainer_bcnn.functions.mc_dropout", "chainer.relu", "chainer.relu", "chainer.relu", "chainer_bcnn.functions.mc_dropout", "train_and_test_epistemic_aleatoric.BayesianMLP.l3", "train_and_test_epistemic_aleatoric.BayesianMLP.l3_sigma", "chainer.reporter.report", "chainer.reporter.report", "chainer.reporter.report", "train_and_test_epistemic_aleatoric.BayesianMLP.l1", "train_and_test_epistemic_aleatoric.BayesianMLP.l2", "chainer.mean", "chainer.mean", "chainer.mean"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.mc_dropout.mc_dropout", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.mc_dropout.mc_dropout", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.extensions.validator.Validator.report"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "F", ".", "relu", "(", "self", ".", "l1", "(", "x", ")", ")", "\n", "h", "=", "mc_dropout", "(", "h", ",", "self", ".", "drop_ratio", ")", "\n", "h", "=", "F", ".", "relu", "(", "self", ".", "l2", "(", "h", ")", ")", "\n", "h", "=", "mc_dropout", "(", "h", ",", "self", ".", "drop_ratio", ")", "\n", "\n", "out", "=", "self", ".", "l3", "(", "h", ")", "\n", "sigma", "=", "self", ".", "l3_sigma", "(", "h", ")", "\n", "\n", "reporter", ".", "report", "(", "{", "'sigma'", ":", "F", ".", "mean", "(", "sigma", ")", "}", ",", "self", ")", "\n", "\n", "return", "out", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.noise": [[21, 25], ["numpy.random.rand"], "function", ["None"], ["def", "noise", "(", "mask", ",", "scale", ")", ":", "\n", "    ", "ret", "=", "np", ".", "random", ".", "rand", "(", "*", "mask", ".", "shape", ")", "-", "0.5", "\n", "ret", "*=", "(", "2.", "*", "scale", "*", "mask", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.train_phase": [[98, 177], ["matplotlib.figure", "seaborn.scatterplot", "sns.scatterplot.plot", "sns.scatterplot.set_xlabel", "sns.scatterplot.set_ylabel", "sns.scatterplot.set_xlim", "sns.scatterplot.set_ylim", "matplotlib.legend", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer_bcnn.links.Regressor", "chainer.optimizers.Adam", "chainer.optimizers.Adam", "chainer.optimizers.Adam", "chainer.optimizers.Adam.setup", "chainer.training.updaters.StandardUpdater", "chainer.training.Trainer", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.run", "chainer.serializers.save_npz", "chainer.serializers.save_npz", "chainer.serializers.save_npz", "train.x.ravel", "train.t.ravel", "os.path.join", "chainer.mean_absolute_error", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer_bcnn.links.Regressor.to_gpu", "chainer.optimizers.Adam.add_hook", "chainer.training.extensions.Evaluator", "chainer.training.extensions.dump_graph", "max", "chainer.training.extensions.snapshot", "chainer.training.extensions.LogReport", "chainer.training.extensions.PlotReport.available", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "chainer.training.extensions.PrintReport", "chainer.training.extensions.ProgressBar", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "os.path.join", "train.x.ravel", "train.y.ravel", "chainer.optimizer_hooks.WeightDecay", "chainer.optimizer_hooks.WeightDecay", "chainer.optimizer_hooks.WeightDecay", "chainer.training.extensions.PlotReport", "chainer.training.extensions.PlotReport", "chainer.training.extensions.PlotReport", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.run", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_discriminator.dump_graph"], ["", "", "def", "train_phase", "(", "predictor", ",", "train", ",", "valid", ",", "args", ")", ":", "\n", "\n", "# visualize", "\n", "    ", "plt", ".", "rcParams", "[", "'font.size'", "]", "=", "18", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "13", ",", "5", ")", ")", "\n", "ax", "=", "sns", ".", "scatterplot", "(", "x", "=", "train", ".", "x", ".", "ravel", "(", ")", ",", "y", "=", "train", ".", "y", ".", "ravel", "(", ")", ",", "color", "=", "'blue'", ",", "s", "=", "55", ",", "alpha", "=", "0.3", ")", "\n", "ax", ".", "plot", "(", "train", ".", "x", ".", "ravel", "(", ")", ",", "train", ".", "t", ".", "ravel", "(", ")", ",", "color", "=", "'red'", ",", "linewidth", "=", "2", ")", "\n", "ax", ".", "set_xlabel", "(", "'x'", ")", "\n", "ax", ".", "set_ylabel", "(", "'y'", ")", "\n", "ax", ".", "set_xlim", "(", "-", "10", ",", "10", ")", "\n", "ax", ".", "set_ylim", "(", "-", "15", ",", "15", ")", "\n", "plt", ".", "legend", "(", "[", "'Ground-truth'", ",", "'Observation'", "]", ")", "\n", "plt", ".", "title", "(", "'Training data set'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'train_dataset.png'", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "# setup iterators", "\n", "train_iter", "=", "chainer", ".", "iterators", ".", "SerialIterator", "(", "train", ",", "args", ".", "batchsize", ",", "shuffle", "=", "True", ")", "\n", "valid_iter", "=", "chainer", ".", "iterators", ".", "SerialIterator", "(", "valid", ",", "args", ".", "batchsize", ",", "repeat", "=", "False", ",", "shuffle", "=", "False", ")", "\n", "\n", "# setup a model", "\n", "lossfun", "=", "noised_mean_squared_error", "\n", "accfun", "=", "lambda", "y", ",", "t", ":", "F", ".", "mean_absolute_error", "(", "y", "[", "0", "]", ",", "t", ")", "\n", "\n", "model", "=", "Regressor", "(", "predictor", ",", "lossfun", "=", "lossfun", ",", "accfun", "=", "accfun", ")", "\n", "\n", "if", "args", ".", "gpu", ">=", "0", ":", "\n", "        ", "chainer", ".", "backends", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", ")", ".", "use", "(", ")", "\n", "model", ".", "to_gpu", "(", ")", "\n", "\n", "# setup an optimizer", "\n", "", "optimizer", "=", "chainer", ".", "optimizers", ".", "Adam", "(", ")", "\n", "optimizer", ".", "setup", "(", "model", ")", "\n", "if", "args", ".", "decay", ">", "0", ":", "\n", "        ", "optimizer", ".", "add_hook", "(", "chainer", ".", "optimizer_hooks", ".", "WeightDecay", "(", "args", ".", "decay", ")", ")", "\n", "\n", "# setup a trainer", "\n", "", "updater", "=", "training", ".", "updaters", ".", "StandardUpdater", "(", "\n", "train_iter", ",", "optimizer", ",", "device", "=", "args", ".", "gpu", ")", "\n", "trainer", "=", "training", ".", "Trainer", "(", "updater", ",", "(", "args", ".", "epoch", ",", "'epoch'", ")", ",", "out", "=", "args", ".", "out", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "Evaluator", "(", "valid_iter", ",", "model", ",", "device", "=", "args", ".", "gpu", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "dump_graph", "(", "'main/loss'", ")", ")", "\n", "\n", "frequency", "=", "args", ".", "epoch", "if", "args", ".", "frequency", "==", "-", "1", "else", "max", "(", "1", ",", "args", ".", "frequency", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot", "(", ")", ",", "trigger", "=", "(", "frequency", ",", "'epoch'", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "LogReport", "(", ")", ")", "\n", "\n", "if", "args", ".", "plot", "and", "extensions", ".", "PlotReport", ".", "available", "(", ")", ":", "\n", "        ", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "[", "'main/loss'", ",", "'validation/main/loss'", "]", ",", "\n", "'epoch'", ",", "file_name", "=", "'loss.png'", ")", ")", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "\n", "[", "'main/accuracy'", ",", "'validation/main/accuracy'", "]", ",", "\n", "'epoch'", ",", "file_name", "=", "'accuracy.png'", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "\n", "[", "'main/predictor/sigma'", ",", "'validation/main/predictor/sigma'", "]", ",", "\n", "'epoch'", ",", "file_name", "=", "'sigma.png'", ")", ")", "\n", "\n", "", "trainer", ".", "extend", "(", "extensions", ".", "PrintReport", "(", "\n", "[", "'epoch'", ",", "'iteration'", ",", "'main/loss'", ",", "'validation/main/loss'", ",", "\n", "'main/accuracy'", ",", "'validation/main/accuracy'", ",", "\n", "'main/predictor/sigma'", ",", "'validation/main/predictor/sigma'", ",", "\n", "'elapsed_time'", "]", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "ProgressBar", "(", ")", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "chainer", ".", "serializers", ".", "load_npz", "(", "args", ".", "resume", ",", "trainer", ")", "\n", "\n", "", "trainer", ".", "run", "(", ")", "\n", "\n", "chainer", ".", "serializers", ".", "save_npz", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'predictor.npz'", ")", ",", "predictor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.test_phase": [[179, 237], ["chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "chainer_bcnn.links.MCSampler", "chainer_bcnn.inference.Inferencer", "chainer_bcnn.inference.Inferencer.run", "test.x.ravel", "test.t.ravel", "pred.ravel.ravel", "epistemic_uncert.ravel.ravel", "aleatory_uncert.ravel.ravel", "matplotlib.figure", "seaborn.scatterplot", "sns.scatterplot.errorbar", "sns.scatterplot.plot", "sns.scatterplot.set_xlabel", "sns.scatterplot.set_ylabel", "sns.scatterplot.set_xlim", "sns.scatterplot.set_ylim", "matplotlib.legend", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "matplotlib.figure", "seaborn.scatterplot", "sns.scatterplot.errorbar", "sns.scatterplot.plot", "sns.scatterplot.set_xlabel", "sns.scatterplot.set_ylabel", "sns.scatterplot.set_xlim", "sns.scatterplot.set_ylim", "matplotlib.legend", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "os.path.join", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer_bcnn.links.MCSampler.to_gpu", "os.path.join", "os.path.join", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.run"], ["", "def", "test_phase", "(", "predictor", ",", "test", ",", "args", ")", ":", "\n", "\n", "# setup an iterator", "\n", "    ", "test_iter", "=", "chainer", ".", "iterators", ".", "SerialIterator", "(", "test", ",", "args", ".", "batchsize", ",", "repeat", "=", "False", ",", "shuffle", "=", "False", ")", "\n", "\n", "# setup an inferencer", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'predictor.npz'", ")", ",", "predictor", ")", "\n", "\n", "model", "=", "MCSampler", "(", "predictor", ",", "\n", "mc_iteration", "=", "args", ".", "mc_iteration", ",", "\n", "activation", "=", "[", "F", ".", "identity", ",", "F", ".", "exp", "]", ",", "\n", "reduce_mean", "=", "None", ",", "\n", "reduce_var", "=", "None", ")", "\n", "\n", "if", "args", ".", "gpu", ">=", "0", ":", "\n", "        ", "chainer", ".", "backends", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", ")", ".", "use", "(", ")", "\n", "model", ".", "to_gpu", "(", ")", "\n", "\n", "", "infer", "=", "Inferencer", "(", "test_iter", ",", "model", ",", "device", "=", "args", ".", "gpu", ")", "\n", "\n", "pred", ",", "epistemic_uncert", ",", "aleatory_uncert", ",", "_", "=", "infer", ".", "run", "(", ")", "\n", "\n", "# visualize", "\n", "x", "=", "test", ".", "x", ".", "ravel", "(", ")", "\n", "t", "=", "test", ".", "t", ".", "ravel", "(", ")", "\n", "pred", "=", "pred", ".", "ravel", "(", ")", "\n", "epistemic_uncert", "=", "epistemic_uncert", ".", "ravel", "(", ")", "\n", "aleatory_uncert", "=", "aleatory_uncert", ".", "ravel", "(", ")", "\n", "\n", "plt", ".", "rcParams", "[", "'font.size'", "]", "=", "18", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "13", ",", "5", ")", ")", "\n", "ax", "=", "sns", ".", "scatterplot", "(", "x", "=", "x", ",", "y", "=", "pred", ",", "color", "=", "'blue'", ",", "s", "=", "75", ")", "\n", "ax", ".", "errorbar", "(", "x", ",", "pred", ",", "yerr", "=", "epistemic_uncert", ",", "fmt", "=", "'none'", ",", "capsize", "=", "10", ",", "ecolor", "=", "'gray'", ",", "linewidth", "=", "1.5", ")", "\n", "ax", ".", "plot", "(", "x", ",", "t", ",", "color", "=", "'red'", ",", "linewidth", "=", "1.5", ")", "\n", "ax", ".", "set_xlabel", "(", "'x'", ")", "\n", "ax", ".", "set_ylabel", "(", "'y'", ")", "\n", "ax", ".", "set_xlim", "(", "-", "10", ",", "10", ")", "\n", "ax", ".", "set_ylim", "(", "-", "15", ",", "15", ")", "\n", "plt", ".", "legend", "(", "[", "'Ground-truth'", ",", "'Prediction'", ",", "'Epistemic uncertainty'", "]", ")", "\n", "plt", ".", "title", "(", "'Result on testing data set'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'eval_epistemic.png'", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "plt", ".", "rcParams", "[", "'font.size'", "]", "=", "18", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "13", ",", "5", ")", ")", "\n", "ax", "=", "sns", ".", "scatterplot", "(", "x", "=", "x", ",", "y", "=", "pred", ",", "color", "=", "'blue'", ",", "s", "=", "75", ")", "\n", "ax", ".", "errorbar", "(", "x", ",", "pred", ",", "yerr", "=", "aleatory_uncert", ",", "fmt", "=", "'none'", ",", "capsize", "=", "10", ",", "ecolor", "=", "'gray'", ",", "linewidth", "=", "1.5", ")", "\n", "ax", ".", "plot", "(", "x", ",", "t", ",", "color", "=", "'red'", ",", "linewidth", "=", "1.5", ")", "\n", "ax", ".", "set_xlabel", "(", "'x'", ")", "\n", "ax", ".", "set_ylabel", "(", "'y'", ")", "\n", "ax", ".", "set_xlim", "(", "-", "10", ",", "10", ")", "\n", "ax", ".", "set_ylim", "(", "-", "15", ",", "15", ")", "\n", "plt", ".", "legend", "(", "[", "'Ground-truth'", ",", "'Prediction'", ",", "'Aleatoric uncertainty'", "]", ")", "\n", "plt", ".", "title", "(", "'Result on testing data set'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'eval_aleatoric.png'", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.curve_regression.train_and_test_epistemic_aleatoric.main": [[239, 289], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.makedirs", "chainer_bcnn.utils.fixed_seed", "train_and_test_epistemic_aleatoric.BayesianMLP", "train_and_test_epistemic_aleatoric.Dataset", "train_and_test_epistemic_aleatoric.Dataset", "train_and_test_epistemic_aleatoric.Dataset", "train_and_test_epistemic_aleatoric.test_phase", "train_and_test_epistemic_aleatoric.test_phase", "train_and_test_epistemic_aleatoric.train_phase"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.fixed_seed", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.test_phase", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.test_phase", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.train_phase"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Example: Uncertainty estimates in regression'", ")", "\n", "parser", ".", "add_argument", "(", "'--batchsize'", ",", "'-b'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'Number of images in each mini-batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch'", ",", "'-e'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "\n", "help", "=", "'Number of sweeps over the dataset to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--frequency'", ",", "'-f'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Frequency of taking a snapshot'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "'-g'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'GPU ID (negative value indicates CPU)'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "'-o'", ",", "default", "=", "'logs'", ",", "\n", "help", "=", "'Directory to output the log files'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "'-r'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Resume the training from snapshot'", ")", "\n", "parser", ".", "add_argument", "(", "'--unit'", ",", "'-u'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "\n", "help", "=", "'Number of units'", ")", "\n", "parser", ".", "add_argument", "(", "'--noplot'", ",", "dest", "=", "'plot'", ",", "action", "=", "'store_false'", ",", "\n", "help", "=", "'Disable PlotReport extension'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_on_test'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Switch to the testing phase on test dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_on_valid'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Switch to the testing phase on valid dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--mc_iteration'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'Number of iteration of MCMC'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay'", ",", "type", "=", "float", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Weight of L2 regularization'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Fix the random seed'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "os", ".", "makedirs", "(", "args", ".", "out", ",", "exist_ok", "=", "True", ")", "\n", "\n", "with", "fixed_seed", "(", "args", ".", "seed", ",", "strict", "=", "False", ")", ":", "\n", "\n", "# setup a predictor", "\n", "        ", "predictor", "=", "BayesianMLP", "(", "n_units", "=", "args", ".", "unit", ",", "n_out", "=", "1", ",", "drop_ratio", "=", "0.1", ")", "\n", "\n", "# setup dataset", "\n", "train", "=", "Dataset", "(", "x_lim", "=", "(", "-", "5", ",", "5", ")", ",", "n_samples", "=", "1000", ")", "\n", "valid", "=", "Dataset", "(", "x_lim", "=", "(", "-", "5", ",", "5", ")", ",", "n_samples", "=", "1000", ")", "\n", "test", "=", "Dataset", "(", "x_lim", "=", "(", "-", "10", ",", "10", ")", ",", "n_samples", "=", "500", ")", "\n", "\n", "# run", "\n", "if", "args", ".", "test_on_test", ":", "\n", "            ", "test_phase", "(", "predictor", ",", "test", ",", "args", ")", "\n", "", "elif", "args", ".", "test_on_valid", ":", "\n", "            ", "test_phase", "(", "predictor", ",", "valid", ",", "args", ")", "\n", "", "else", ":", "\n", "            ", "train_phase", "(", "predictor", ",", "train", ",", "valid", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.Dataset.__init__": [[23, 62], ["super().__init__", "chainer.datasets.get_mnist", "chainer.datasets.get_mnist", "chainer.datasets.get_mnist", "isinstance", "numpy.arange", "len", "len", "KeyError", "numpy.asarray", "len"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["from", "chainer_bcnn", ".", "data", ".", "normalizer", "import", "Normalizer", ",", "Clip2D", ",", "Subtract2D", ",", "Divide2D", "\n", "from", "chainer_bcnn", ".", "models", "import", "BayesianUNet", "\n", "from", "chainer_bcnn", ".", "links", "import", "Classifier", "\n", "from", "chainer_bcnn", ".", "extensions", "import", "LogReport", "\n", "from", "chainer_bcnn", ".", "extensions", "import", "PrintReport", "\n", "from", "chainer_bcnn", ".", "extensions", "import", "Validator", "\n", "from", "chainer_bcnn", ".", "visualizer", "import", "ImageVisualizer", "\n", "from", "chainer_bcnn", ".", "links", "import", "MCSampler", "\n", "from", "chainer_bcnn", ".", "inference", "import", "Inferencer", "\n", "from", "chainer_bcnn", ".", "data", "import", "load_image", ",", "save_image", "\n", "from", "chainer_bcnn", ".", "datasets", "import", "train_valid_split", "\n", "from", "chainer_bcnn", ".", "utils", "import", "fixed_seed", "\n", "from", "chainer_bcnn", ".", "utils", "import", "find_latest_snapshot", "\n", "from", "scipy", ".", "stats", "import", "pearsonr", "\n", "\n", "def", "eval_metric", "(", "y", ",", "t", ")", ":", "\n", "    ", "def", "dice", "(", "y", ",", "t", ")", ":", "\n", "        ", "y", "=", "y", ".", "astype", "(", "np", ".", "bool", ")", "\n", "t", "=", "t", ".", "astype", "(", "np", ".", "bool", ")", "\n", "return", "2.", "*", "np", ".", "logical_and", "(", "y", ",", "t", ")", ".", "sum", "(", ")", "/", "(", "y", ".", "sum", "(", ")", "+", "t", ".", "sum", "(", ")", ")", "\n", "", "return", "dice", "(", "y", ",", "t", ")", "\n", "\n", "\n", "", "def", "train_phase", "(", "predictor", ",", "train", ",", "valid", ",", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'# classes:'", ",", "train", ".", "n_classes", ")", "\n", "print", "(", "'# samples:'", ")", "\n", "print", "(", "'-- train:'", ",", "len", "(", "train", ")", ")", "\n", "print", "(", "'-- valid:'", ",", "len", "(", "valid", ")", ")", "\n", "\n", "# setup dataset iterators", "\n", "train_batchsize", "=", "min", "(", "args", ".", "batchsize", "*", "len", "(", "args", ".", "gpu", ")", ",", "len", "(", "train", ")", ")", "\n", "valid_batchsize", "=", "args", ".", "batchsize", "\n", "train_iter", "=", "chainer", ".", "iterators", ".", "MultiprocessIterator", "(", "train", ",", "train_batchsize", ")", "\n", "valid_iter", "=", "chainer", ".", "iterators", ".", "SerialIterator", "(", "valid", ",", "valid_batchsize", ",", "\n", "repeat", "=", "False", ",", "shuffle", "=", "True", ")", "\n", "\n", "# setup a model", "\n", "class_weight", "=", "None", "# NOTE: please set if you have..", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.Dataset.indices": [[63, 66], ["None"], "methods", ["None"], ["lossfun", "=", "partial", "(", "softmax_cross_entropy", ",", "\n", "normalize", "=", "False", ",", "class_weight", "=", "class_weight", ")", "\n", "\n", "model", "=", "Classifier", "(", "predictor", ",", "lossfun", "=", "lossfun", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.Dataset.images": [[67, 70], ["None"], "methods", ["None"], ["\n", "if", "args", ".", "gpu", "[", "0", "]", ">=", "0", ":", "\n", "        ", "chainer", ".", "backends", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", "[", "0", "]", ")", ".", "use", "(", ")", "\n", "if", "len", "(", "args", ".", "gpu", ")", "==", "1", ":", "model", ".", "to_gpu", "(", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.Dataset.labels": [[71, 74], ["None"], "methods", ["None"], ["\n", "# setup an optimizer", "\n", "", "optimizer", "=", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "args", ".", "lr", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.999", ",", "eps", "=", "1e-08", ",", "amsgrad", "=", "False", ")", "\n", "optimizer", ".", "setup", "(", "model", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.Dataset.__len__": [[75, 77], ["len"], "methods", ["None"], ["if", "args", ".", "decay", ">", "0", ":", "\n", "        ", "optimizer", ".", "add_hook", "(", "chainer", ".", "optimizer_hooks", ".", "WeightDecay", "(", "args", ".", "decay", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.Dataset.get_example": [[78, 84], ["None"], "methods", ["None"], ["\n", "# setup a trainer", "\n", "", "if", "len", "(", "args", ".", "gpu", ")", "==", "1", ":", "\n", "        ", "updater", "=", "training", ".", "updaters", ".", "StandardUpdater", "(", "\n", "train_iter", ",", "optimizer", ",", "device", "=", "args", ".", "gpu", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "devices", "=", "{", "'main'", ":", "args", ".", "gpu", "[", "0", "]", "}", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.BayesianConvNet.__init__": [[88, 109], ["chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.Chain.__init__", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "chainer.initializers.HeNormal", "train_and_test_epistemic.BayesianConvNet.init_scope", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Convolution2D", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear", "chainer.Linear"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__"], ["train_iter", ",", "optimizer", ",", "devices", "=", "devices", ")", "\n", "\n", "\n", "", "frequency", "=", "max", "(", "args", ".", "iteration", "//", "20", ",", "1", ")", "if", "args", ".", "frequency", "==", "-", "1", "else", "max", "(", "1", ",", "args", ".", "frequency", ")", "\n", "\n", "stop_trigger", "=", "triggers", ".", "EarlyStoppingTrigger", "(", "monitor", "=", "'validation/main/loss'", ",", "\n", "max_trigger", "=", "(", "args", ".", "iteration", ",", "'iteration'", ")", ",", "\n", "check_trigger", "=", "(", "frequency", ",", "'iteration'", ")", ",", "\n", "patients", "=", "np", ".", "inf", "if", "args", ".", "pinfall", "==", "-", "1", "else", "max", "(", "1", ",", "args", ".", "pinfall", ")", ")", "\n", "\n", "trainer", "=", "training", ".", "Trainer", "(", "updater", ",", "stop_trigger", ",", "out", "=", "args", ".", "out", ")", "\n", "\n", "\n", "# setup a visualizer", "\n", "transforms", "=", "{", "'x'", ":", "lambda", "x", ":", "x", ",", "'y'", ":", "lambda", "x", ":", "np", ".", "argmax", "(", "x", ",", "axis", "=", "0", ")", ",", "'t'", ":", "lambda", "x", ":", "x", "}", "\n", "\n", "cmap", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "cmaps", "=", "{", "'x'", ":", "None", ",", "'y'", ":", "cmap", ",", "'t'", ":", "cmap", "}", "\n", "\n", "clims", "=", "{", "'x'", ":", "'minmax'", ",", "'y'", ":", "None", ",", "'t'", ":", "None", "}", "\n", "\n", "visualizer", "=", "ImageVisualizer", "(", "transforms", "=", "transforms", ",", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.BayesianConvNet.forward": [[110, 122], ["chainer.relu", "chainer.relu", "chainer.relu", "chainer.relu", "chainer.relu", "chainer.relu", "chainer.max_pooling_2d", "chainer.max_pooling_2d", "chainer.max_pooling_2d", "chainer_bcnn.functions.mc_dropout", "chainer.relu", "chainer.relu", "chainer.relu", "chainer_bcnn.functions.mc_dropout", "train_and_test_epistemic.BayesianConvNet.l2", "train_and_test_epistemic.BayesianConvNet.conv_1", "train_and_test_epistemic.BayesianConvNet.conv_2", "train_and_test_epistemic.BayesianConvNet.l1"], "methods", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.mc_dropout.mc_dropout", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.functions.mc_dropout.mc_dropout"], ["cmaps", "=", "cmaps", ",", "clims", "=", "clims", ")", "\n", "\n", "# setup a validator", "\n", "valid_file", "=", "os", ".", "path", ".", "join", "(", "'validation'", ",", "'iter_{.updater.iteration:08}.png'", ")", "\n", "trainer", ".", "extend", "(", "Validator", "(", "valid_iter", ",", "model", ",", "valid_file", ",", "\n", "visualizer", "=", "visualizer", ",", "n_vis", "=", "20", ",", "\n", "device", "=", "args", ".", "gpu", "[", "0", "]", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "dump_graph", "(", "'main/loss'", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot", "(", "filename", "=", "'snapshot_iter_{.updater.iteration:08}.npz'", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.train_phase": [[124, 177], ["chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer_bcnn.links.Classifier", "chainer.optimizers.Adam", "chainer.optimizers.Adam", "chainer.optimizers.Adam", "chainer.optimizers.Adam.setup", "chainer.training.updaters.StandardUpdater", "chainer.training.Trainer", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.run", "chainer.serializers.save_npz", "chainer.serializers.save_npz", "chainer.serializers.save_npz", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer_bcnn.links.Classifier.to_gpu", "chainer.optimizers.Adam.add_hook", "chainer.training.extensions.Evaluator", "chainer.training.extensions.dump_graph", "max", "chainer.training.extensions.snapshot", "chainer.training.extensions.LogReport", "chainer.training.extensions.PlotReport.available", "training.Trainer.extend", "training.Trainer.extend", "chainer.training.extensions.PrintReport", "chainer.training.extensions.ProgressBar", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "os.path.join", "chainer.optimizer_hooks.WeightDecay", "chainer.optimizer_hooks.WeightDecay", "chainer.optimizer_hooks.WeightDecay", "chainer.training.extensions.PlotReport", "chainer.training.extensions.PlotReport", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.run", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_discriminator.dump_graph"], ["trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "\n", "log_keys", "=", "[", "'main/loss'", ",", "'validation/main/loss'", ",", "\n", "'main/accuracy'", ",", "'validation/main/accuracy'", "]", "\n", "\n", "trainer", ".", "extend", "(", "LogReport", "(", "keys", "=", "log_keys", ")", ")", "\n", "\n", "# setup log ploter", "\n", "if", "extensions", ".", "PlotReport", ".", "available", "(", ")", ":", "\n", "        ", "for", "plot_key", "in", "[", "'loss'", ",", "'accuracy'", "]", ":", "\n", "            ", "plot_keys", "=", "[", "key", "for", "key", "in", "log_keys", "if", "key", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "startswith", "(", "plot_key", ")", "]", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "plot_keys", ",", "\n", "'iteration'", ",", "file_name", "=", "plot_key", "+", "'.png'", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", ")", "\n", "\n", "", "", "trainer", ".", "extend", "(", "PrintReport", "(", "[", "'iteration'", "]", "+", "log_keys", "+", "[", "'elapsed_time'", "]", ",", "n_step", "=", "100", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "ProgressBar", "(", ")", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "chainer", ".", "serializers", ".", "load_npz", "(", "args", ".", "resume", ",", "trainer", ")", "\n", "\n", "\n", "# train", "\n", "", "trainer", ".", "run", "(", ")", "\n", "\n", "\n", "", "def", "test_phase", "(", "predictor", ",", "test", ",", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'# samples:'", ")", "\n", "print", "(", "'-- test:'", ",", "len", "(", "test", ")", ")", "\n", "\n", "test_iter", "=", "chainer", ".", "iterators", ".", "SerialIterator", "(", "test", ",", "args", ".", "batchsize", ",", "repeat", "=", "False", ",", "shuffle", "=", "False", ")", "\n", "\n", "# setup a inferencer", "\n", "snapshot_file", "=", "find_latest_snapshot", "(", "'predictor_iter_{.updater.iteration:08}.npz'", ",", "args", ".", "out", ")", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "snapshot_file", ",", "predictor", ")", "\n", "print", "(", "'Loaded a snapshot:'", ",", "snapshot_file", ")", "\n", "\n", "model", "=", "MCSampler", "(", "predictor", ",", "\n", "mc_iteration", "=", "args", ".", "mc_iteration", ",", "\n", "activation", "=", "partial", "(", "F", ".", "softmax", ",", "axis", "=", "1", ")", ",", "\n", "reduce_mean", "=", "partial", "(", "F", ".", "argmax", ",", "axis", "=", "1", ")", ",", "\n", "reduce_var", "=", "partial", "(", "F", ".", "mean", ",", "axis", "=", "1", ")", ")", "\n", "\n", "if", "args", ".", "gpu", "[", "0", "]", ">=", "0", ":", "\n", "        ", "chainer", ".", "backends", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", "[", "0", "]", ")", ".", "use", "(", ")", "\n", "model", ".", "to_gpu", "(", ")", "\n", "\n", "", "infer", "=", "Inferencer", "(", "test_iter", ",", "model", ",", "device", "=", "args", ".", "gpu", "[", "0", "]", ")", "\n", "\n", "pred", ",", "uncert", "=", "infer", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.test_phase": [[179, 219], ["chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "chainer_bcnn.links.MCSampler", "chainer_bcnn.inference.Inferencer", "chainer_bcnn.inference.Inferencer.run", "os.makedirs", "matplotlib.figure", "seaborn.violinplot", "sns.violinplot.set_xlabel", "sns.violinplot.set_yticklabels", "matplotlib.title", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "os.path.join", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer_bcnn.links.MCSampler.to_gpu", "numpy.sum", "len", "os.path.join", "functools.partial", "functools.partial", "functools.partial", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id", "numpy.logical_not", "len", "len"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.run"], ["# evaluate", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'test'", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "acc_values", "=", "[", "]", "\n", "uncert_values", "=", "[", "]", "\n", "\n", "uncert_clim", "=", "(", "0", ",", "np", ".", "percentile", "(", "uncert", ",", "95", ")", ")", "\n", "\n", "\n", "files", "=", "test", ".", "files", "[", "'image'", "]", "\n", "if", "isinstance", "(", "files", ",", "np", ".", "ndarray", ")", ":", "files", "=", "files", ".", "tolist", "(", ")", "\n", "commonpath", "=", "os", ".", "path", ".", "commonpath", "(", "files", ")", "\n", "\n", "plt", ".", "rcParams", "[", "'font.size'", "]", "=", "14", "\n", "\n", "for", "i", ",", "(", "p", ",", "u", ",", "imf", ",", "lbf", ")", "in", "enumerate", "(", "zip", "(", "pred", ",", "uncert", ",", "\n", "test", ".", "files", "[", "'image'", "]", ",", "\n", "test", ".", "files", "[", "'label'", "]", ")", ")", ":", "\n", "        ", "im", ",", "_", "=", "load_image", "(", "imf", ")", "\n", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "lb", ",", "_", "=", "load_image", "(", "lbf", ")", "\n", "if", "lb", ".", "ndim", "==", "3", ":", "lb", "=", "lb", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "acc_values", ".", "append", "(", "eval_metric", "(", "p", ",", "lb", ")", ")", "\n", "uncert_values", ".", "append", "(", "np", ".", "mean", "(", "u", "[", "p", "==", "1", "]", ")", ")", "# NOTE: instrument class", "\n", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "4", ")", ")", "\n", "\n", "for", "j", ",", "(", "pic", ",", "cmap", ",", "clim", ",", "title", ")", "in", "enumerate", "(", "zip", "(", "\n", "[", "im", ",", "p", ",", "lb", ",", "u", ",", "(", "p", "!=", "lb", ")", ".", "astype", "(", "np", ".", "uint8", ")", "]", ",", "\n", "[", "None", ",", "None", ",", "None", ",", "'jet'", ",", "'jet'", "]", ",", "\n", "[", "None", ",", "None", ",", "None", ",", "uncert_clim", ",", "None", "]", ",", "\n", "[", "'Input image\\n%s'", "%", "os", ".", "path", ".", "relpath", "(", "imf", ",", "commonpath", ")", ",", "\n", "'Predicted label\\n(DC=%.3f)'", "%", "acc_values", "[", "-", "1", "]", ",", "\n", "'Ground-truth label'", ",", "\n", "'Predicted variance\\n(PV=%.4f)'", "%", "uncert_values", "[", "-", "1", "]", ",", "\n", "'Error'", "]", ")", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "1", ",", "5", ",", "j", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "pic", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ",", "[", "]", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.mnist_classification.train_and_test_epistemic.main": [[221, 271], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.makedirs", "chainer_bcnn.utils.fixed_seed", "train_and_test_epistemic.BayesianConvNet", "train_and_test_epistemic.Dataset", "train_and_test_epistemic.Dataset", "train_and_test_epistemic.Dataset", "train_and_test_epistemic.test_phase", "numpy.arange", "numpy.arange", "train_and_test_epistemic.test_phase", "train_and_test_epistemic.train_phase"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.fixed_seed", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.test_phase", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.test_phase", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.train_phase"], ["plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "clim", "(", "clim", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'test/%03d.png'", "%", "i", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "\n", "", "c", "=", "pearsonr", "(", "uncert_values", ",", "acc_values", ")", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "11", ",", "11", ")", ")", "\n", "ax", "=", "sns", ".", "scatterplot", "(", "x", "=", "uncert_values", ",", "\n", "y", "=", "acc_values", ",", "color", "=", "'blue'", ",", "s", "=", "50", ")", "\n", "ax", ".", "set_xlabel", "(", "'Predicted variance'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Dice coefficient'", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "title", "(", "'r=%.3f'", "%", "c", "[", "0", "]", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'eval.png'", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "get_dataset", "(", "data_root", ",", "\n", "valid_split_type", ",", "\n", "valid_split_ratio", ",", "\n", "valid_augment", ",", "\n", "normalizer", "=", "None", ",", "\n", "augmentor", "=", "None", ")", ":", "\n", "\n", "    ", "class_list", "=", "[", "'background'", ",", "'instrument'", "]", "\n", "dtypes", "=", "OrderedDict", "(", "{", "'image'", ":", "np", ".", "float32", ",", "'label'", ":", "np", ".", "int32", "}", ")", "\n", "\n", "getter", "=", "partial", "(", "ImageDataset", ",", "root", "=", "data_root", ",", "classes", "=", "class_list", ",", "\n", "dtypes", "=", "dtypes", ",", "normalizer", "=", "normalizer", ")", "\n", "\n", "# train and valid dataset", "\n", "train_patients", "=", "[", "'OP1'", ",", "'OP2'", ",", "'OP3'", ",", "'OP4'", "]", "\n", "\n", "train_filenames", "=", "OrderedDict", "(", "{", "\n", "'image'", ":", "'{root}/train/{patient}/Raw/*_raw.png'", ",", "\n", "'label'", ":", "'{root}/train/{patient}/Masks/*_class.png'", ",", "\n", "}", ")", "\n", "\n", "if", "valid_split_type", "==", "'slice'", ":", "\n", "        ", "dataset", "=", "getter", "(", "patients", "=", "train_patients", ",", "filenames", "=", "train_filenames", ",", "augmentor", "=", "augmentor", ")", "\n", "train", ",", "valid", "=", "train_valid_split", "(", "dataset", ",", "valid_split_ratio", ")", "\n", "\n", "", "elif", "valid_split_type", "==", "'patient'", ":", "\n", "        ", "train_patients", ",", "valid_patients", "=", "train_valid_split", "(", "train_patients", ",", "valid_split_ratio", ")", "\n", "train", "=", "getter", "(", "patients", "=", "train_patients", ",", "filenames", "=", "train_filenames", ",", "augmentor", "=", "augmentor", ")", "\n", "valid", "=", "getter", "(", "patients", "=", "valid_patients", ",", "filenames", "=", "train_filenames", ",", "augmentor", "=", "augmentor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_baseline.train_phase": [[40, 145], ["print", "print", "print", "min", "chainer.iterators.MultiprocessIterator", "chainer.iterators.MultiprocessIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer_bcnn.links.Regressor", "chainer.optimizers.Adam", "chainer.optimizers.Adam", "chainer.optimizers.Adam.setup", "chainer.training.triggers.EarlyStoppingTrigger", "chainer.training.Trainer", "training.Trainer.extend", "chainer_bcnn.visualizer.ImageVisualizer", "os.path.join", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "chainer.training.extensions.PlotReport.available", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.run", "len", "len", "len", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer.optimizers.Adam.add_hook", "len", "chainer.training.updaters.StandardUpdater", "enumerate", "chainer.training.updaters.ParallelUpdater", "max", "max", "chainer.training.extensions.LinearShift", "chainer_bcnn.extensions.Validator", "chainer.training.extensions.dump_graph", "chainer.training.extensions.snapshot", "chainer.training.extensions.snapshot_object", "chainer_bcnn.extensions.LogReport", "chainer_bcnn.extensions.PrintReport", "chainer.training.extensions.ProgressBar", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "len", "len", "chainer_bcnn.links.Regressor.to_gpu", "chainer.optimizer_hooks.WeightDecay", "chainer.optimizer_hooks.WeightDecay", "training.Trainer.extend", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id", "max", "chainer.training.extensions.PlotReport", "[].startswith", "key.split"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.run", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_discriminator.dump_graph"], ["def", "train_phase", "(", "generator", ",", "train", ",", "valid", ",", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'# samples:'", ")", "\n", "print", "(", "'-- train:'", ",", "len", "(", "train", ")", ")", "\n", "print", "(", "'-- valid:'", ",", "len", "(", "valid", ")", ")", "\n", "\n", "# setup dataset iterators", "\n", "train_batchsize", "=", "min", "(", "args", ".", "batchsize", "*", "len", "(", "args", ".", "gpu", ")", ",", "len", "(", "train", ")", ")", "\n", "valid_batchsize", "=", "args", ".", "batchsize", "\n", "train_iter", "=", "chainer", ".", "iterators", ".", "MultiprocessIterator", "(", "train", ",", "train_batchsize", ")", "\n", "valid_iter", "=", "chainer", ".", "iterators", ".", "SerialIterator", "(", "valid", ",", "valid_batchsize", ",", "\n", "repeat", "=", "False", ",", "shuffle", "=", "True", ")", "\n", "\n", "# setup a model", "\n", "model", "=", "Regressor", "(", "generator", ",", "\n", "activation", "=", "F", ".", "tanh", ",", "\n", "lossfun", "=", "F", ".", "mean_absolute_error", ",", "\n", "accfun", "=", "F", ".", "mean_absolute_error", ")", "\n", "\n", "if", "args", ".", "gpu", "[", "0", "]", ">=", "0", ":", "\n", "        ", "chainer", ".", "backends", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", "[", "0", "]", ")", ".", "use", "(", ")", "\n", "if", "len", "(", "args", ".", "gpu", ")", "==", "1", ":", "model", ".", "to_gpu", "(", ")", "\n", "\n", "# setup an optimizer", "\n", "", "optimizer", "=", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "args", ".", "lr", ",", "beta1", "=", "args", ".", "beta", ",", "beta2", "=", "0.999", ",", "eps", "=", "1e-08", ",", "amsgrad", "=", "False", ")", "\n", "optimizer", ".", "setup", "(", "model", ")", "\n", "if", "args", ".", "decay", ">", "0", ":", "\n", "        ", "optimizer", ".", "add_hook", "(", "chainer", ".", "optimizer_hooks", ".", "WeightDecay", "(", "args", ".", "decay", ")", ")", "\n", "\n", "\n", "# setup a trainer", "\n", "", "if", "len", "(", "args", ".", "gpu", ")", "==", "1", ":", "\n", "        ", "updater", "=", "training", ".", "updaters", ".", "StandardUpdater", "(", "\n", "train_iter", ",", "optimizer", ",", "device", "=", "args", ".", "gpu", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "devices", "=", "{", "'main'", ":", "args", ".", "gpu", "[", "0", "]", "}", "\n", "for", "idx", ",", "g", "in", "enumerate", "(", "args", ".", "gpu", "[", "1", ":", "]", ")", ":", "\n", "            ", "devices", "[", "'slave_%d'", "%", "idx", "]", "=", "g", "\n", "", "updater", "=", "training", ".", "updaters", ".", "ParallelUpdater", "(", "\n", "train_iter", ",", "optimizer", ",", "devices", "=", "devices", ")", "\n", "\n", "\n", "", "frequency", "=", "max", "(", "args", ".", "iteration", "//", "80", ",", "1", ")", "if", "args", ".", "frequency", "==", "-", "1", "else", "max", "(", "1", ",", "args", ".", "frequency", ")", "\n", "\n", "stop_trigger", "=", "triggers", ".", "EarlyStoppingTrigger", "(", "monitor", "=", "'validation/main/loss'", ",", "\n", "max_trigger", "=", "(", "args", ".", "iteration", ",", "'iteration'", ")", ",", "\n", "check_trigger", "=", "(", "frequency", ",", "'iteration'", ")", ",", "\n", "patients", "=", "np", ".", "inf", "if", "args", ".", "pinfall", "==", "-", "1", "else", "max", "(", "1", ",", "args", ".", "pinfall", ")", ")", "\n", "\n", "trainer", "=", "training", ".", "Trainer", "(", "updater", ",", "stop_trigger", ",", "out", "=", "args", ".", "out", ")", "\n", "\n", "\n", "# shift lr", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "LinearShift", "(", "'alpha'", ",", "(", "args", ".", "lr", ",", "0.0", ")", ",", "\n", "(", "args", ".", "iteration", "//", "2", ",", "args", ".", "iteration", ")", ",", "\n", "optimizer", "=", "optimizer", ")", ")", "\n", "\n", "# setup a visualizer", "\n", "\n", "transforms", "=", "{", "'x'", ":", "lambda", "x", ":", "x", ",", "'y'", ":", "lambda", "x", ":", "x", ",", "'t'", ":", "lambda", "x", ":", "x", "}", "\n", "clims", "=", "{", "'x'", ":", "(", "-", "1.", ",", "1.", ")", ",", "'y'", ":", "(", "-", "1.", ",", "1.", ")", ",", "'t'", ":", "(", "-", "1.", ",", "1.", ")", "}", "\n", "\n", "visualizer", "=", "ImageVisualizer", "(", "transforms", "=", "transforms", ",", "\n", "cmaps", "=", "None", ",", "\n", "clims", "=", "clims", ")", "\n", "\n", "# setup a validator", "\n", "valid_file", "=", "os", ".", "path", ".", "join", "(", "'validation'", ",", "'iter_{.updater.iteration:08}.png'", ")", "\n", "trainer", ".", "extend", "(", "Validator", "(", "valid_iter", ",", "model", ",", "valid_file", ",", "\n", "visualizer", "=", "visualizer", ",", "n_vis", "=", "20", ",", "\n", "device", "=", "args", ".", "gpu", "[", "0", "]", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "dump_graph", "(", "'main/loss'", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot", "(", "filename", "=", "'snapshot_iter_{.updater.iteration:08}.npz'", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot_object", "(", "generator", ",", "'generator_iter_{.updater.iteration:08}.npz'", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "\n", "log_keys", "=", "[", "'main/loss'", ",", "'validation/main/loss'", ",", "\n", "'main/accuracy'", ",", "'validation/main/accuracy'", "]", "\n", "\n", "trainer", ".", "extend", "(", "LogReport", "(", "keys", "=", "log_keys", ")", ")", "\n", "\n", "# setup log ploter", "\n", "if", "extensions", ".", "PlotReport", ".", "available", "(", ")", ":", "\n", "        ", "for", "plot_key", "in", "[", "'loss'", ",", "'accuracy'", "]", ":", "\n", "            ", "plot_keys", "=", "[", "key", "for", "key", "in", "log_keys", "if", "key", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "startswith", "(", "plot_key", ")", "]", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "plot_keys", ",", "\n", "'iteration'", ",", "file_name", "=", "plot_key", "+", "'.png'", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", ")", "\n", "\n", "", "", "trainer", ".", "extend", "(", "PrintReport", "(", "[", "'iteration'", "]", "+", "log_keys", "+", "[", "'elapsed_time'", "]", ",", "n_step", "=", "100", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "ProgressBar", "(", ")", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "chainer", ".", "serializers", ".", "load_npz", "(", "args", ".", "resume", ",", "trainer", ")", "\n", "\n", "\n", "# train", "\n", "", "trainer", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_baseline.main": [[147, 230], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print", "print", "os.makedirs", "train_and_test_pix2pix.get_normalizer", "train_and_test_pix2pix.get_augmentor", "chainer_bcnn.utils.fixed_seed", "train_and_test_pix2pix.build_generator", "train_and_test_pix2pix.get_dataset", "train_and_test_pix2pix.build_generator.freeze_layers", "RuntimeError", "train_and_test_pix2pix.test_phase", "train_and_test_pix2pix.test_phase", "chainerui.utils.save_args", "train_and_test_pix2pix.build_generator.save_args", "train_and_test_pix2pix.get_normalizer.summary", "train_and_test_pix2pix.get_augmentor.summary", "train_and_test_baseline.train_phase", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.get_normalizer", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.get_augmentor", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.fixed_seed", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.build_generator", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.get_dataset", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.freeze_layers", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.test_phase", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.test_phase", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.save_args", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.save_args", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.summary", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.summary", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.train_phase"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Example: Uncertainty estimates in image synthesis'", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "'-d'", ",", "type", "=", "str", ",", "default", "=", "'./preprocessed'", ",", "\n", "help", "=", "'Directory to dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--batchsize'", ",", "'-b'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'Number of images in each mini-batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--iteration'", ",", "'-i'", ",", "type", "=", "int", ",", "default", "=", "200000", ",", "\n", "help", "=", "'Number of sweeps over the dataset to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--frequency'", ",", "'-f'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Frequency of taking a snapshot'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "'-g'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "0", "]", ",", "\n", "help", "=", "'GPU ID (negative value indicates CPU)'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "'-o'", ",", "default", "=", "'logs'", ",", "\n", "help", "=", "'Directory to output the result'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "'-r'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Resume the training from snapshot'", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_augment'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Enable data augmentation during validation'", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_split_ratio'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'Ratio of validation data to training data'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "\n", "help", "=", "'Learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "'Exponential decay rate of the first order moment in Adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay'", ",", "type", "=", "float", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Weight of L2 regularization'", ")", "\n", "parser", ".", "add_argument", "(", "'--mc_iteration'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "'Number of iteration of MCMC'", ")", "\n", "parser", ".", "add_argument", "(", "'--pinfall'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Countdown for early stopping of training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_upconv'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Disables updating the up-convolutional weights. If weights are initialized with \\\n                            bilinear kernels, up-conv acts as bilinear upsampler.'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_on_test'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Switch to the testing phase on test dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_on_valid'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Switch to the testing phase on valid dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Fix the random seed'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "'GPU: {}'", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "print", "(", "'# Minibatch-size: {}'", ".", "format", "(", "args", ".", "batchsize", ")", ")", "\n", "print", "(", "''", ")", "\n", "\n", "# setup output directory", "\n", "os", ".", "makedirs", "(", "args", ".", "out", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# NOTE: ad-hoc", "\n", "normalizer", "=", "get_normalizer", "(", ")", "\n", "augmentor", "=", "get_augmentor", "(", ")", "\n", "\n", "# setup a generator", "\n", "with", "fixed_seed", "(", "args", ".", "seed", ",", "strict", "=", "False", ")", ":", "\n", "\n", "        ", "generator", "=", "build_generator", "(", ")", "\n", "\n", "if", "args", ".", "freeze_upconv", ":", "\n", "            ", "generator", ".", "freeze_layers", "(", "name", "=", "'upconv'", ",", "\n", "recursive", "=", "True", ",", "\n", "verbose", "=", "True", ")", "\n", "\n", "# setup dataset", "\n", "", "train", ",", "valid", ",", "test", "=", "get_dataset", "(", "args", ".", "data_root", ",", "\n", "args", ".", "valid_split_ratio", ",", "\n", "args", ".", "valid_augment", ",", "\n", "normalizer", ",", "augmentor", ")", "\n", "\n", "# run", "\n", "if", "args", ".", "test_on_test", ":", "\n", "            ", "raise", "RuntimeError", "(", "'This example is under construction. Please tune the hyperparameters first..'", ")", "\n", "test_phase", "(", "generator", ",", "test", ",", "args", ")", "\n", "", "elif", "args", ".", "test_on_valid", ":", "\n", "            ", "test_phase", "(", "generator", ",", "valid", ",", "args", ")", "\n", "", "else", ":", "\n", "            ", "save_args", "(", "args", ",", "args", ".", "out", ")", "\n", "generator", ".", "save_args", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'model.json'", ")", ")", "\n", "normalizer", ".", "summary", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'norm.json'", ")", ")", "\n", "augmentor", ".", "summary", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'augment.json'", ")", ")", "\n", "\n", "train_phase", "(", "generator", ",", "train", ",", "valid", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.build_discriminator": [[36, 77], ["chainer_bcnn.models.PatchDiscriminator"], "function", ["None"], ["def", "build_discriminator", "(", ")", ":", "\n", "\n", "    ", "conv_param", "=", "{", "\n", "'name'", ":", "'conv'", ",", "\n", "'ksize'", ":", "4", ",", "\n", "'stride'", ":", "2", ",", "\n", "'pad'", ":", "2", ",", "\n", "'pad_mode'", ":", "'constant'", ",", "\n", "'initialW'", ":", "{", "'name'", ":", "'normal'", ",", "'scale'", ":", "0.02", "}", ",", "\n", "'initial_bias'", ":", "{", "'name'", ":", "'zero'", "}", ",", "\n", "'hook'", ":", "{", "'name'", ":", "'spectral_normalization'", "}", "\n", "}", "\n", "\n", "pool_param", "=", "{", "\n", "'name'", ":", "'none'", ",", "\n", "}", "\n", "\n", "norm_param", "=", "None", "\n", "\n", "activation_param", "=", "{", "\n", "'name'", ":", "'leaky_relu'", "\n", "}", "\n", "\n", "dropout_param", "=", "{", "\n", "'name'", ":", "'none'", "\n", "}", "\n", "\n", "discriminator", "=", "PatchDiscriminator", "(", "\n", "ndim", "=", "2", ",", "\n", "out_channels", "=", "1", ",", "\n", "nlayer", "=", "4", ",", "\n", "nfilter", "=", "64", ",", "\n", "ninner", "=", "1", ",", "\n", "conv_param", "=", "conv_param", ",", "\n", "pool_param", "=", "pool_param", ",", "\n", "norm_param", "=", "norm_param", ",", "\n", "activation_param", "=", "activation_param", ",", "\n", "dropout_param", "=", "dropout_param", ",", "\n", "preserve_color", "=", "True", ")", "\n", "\n", "return", "discriminator", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.build_generator": [[79, 145], ["chainer_bcnn.models.BayesianUNet"], "function", ["None"], ["", "def", "build_generator", "(", ")", ":", "\n", "\n", "    ", "conv_param", "=", "{", "\n", "'name'", ":", "'conv'", ",", "\n", "'ksize'", ":", "4", ",", "\n", "'stride'", ":", "1", ",", "\n", "'pad'", ":", "2", ",", "\n", "'pad_mode'", ":", "'reflect'", ",", "\n", "'initialW'", ":", "{", "'name'", ":", "'normal'", ",", "'scale'", ":", "0.02", "}", ",", "\n", "'nobias'", ":", "True", ",", "\n", "}", "\n", "\n", "pool_param", "=", "{", "\n", "'name'", ":", "'stride'", ",", "\n", "'stride'", ":", "2", ",", "\n", "}", "\n", "\n", "upconv_param", "=", "{", "\n", "'name'", ":", "'deconv'", ",", "\n", "'ksize'", ":", "4", ",", "\n", "'stride'", ":", "2", ",", "\n", "'pad'", ":", "0", ",", "\n", "'pad_mode'", ":", "'reflect'", ",", "\n", "'initialW'", ":", "{", "'name'", ":", "'normal'", ",", "'scale'", ":", "0.02", "}", ",", "\n", "'nobias'", ":", "True", ",", "\n", "}", "\n", "\n", "norm_param", "=", "{", "\n", "'name'", ":", "'batch'", "\n", "}", "\n", "\n", "activation_param", "=", "{", "\n", "'name'", ":", "'leaky_relu'", "\n", "}", "\n", "\n", "exp_activation_param", "=", "{", "\n", "'name'", ":", "'relu'", "\n", "}", "\n", "\n", "dropout_param", "=", "{", "\n", "'name'", ":", "'none'", ",", "\n", "}", "\n", "\n", "exp_dropout_param", "=", "{", "\n", "'name'", ":", "'mc_dropout'", ",", "\n", "}", "\n", "\n", "generator", "=", "BayesianUNet", "(", "\n", "ndim", "=", "2", ",", "\n", "out_channels", "=", "3", ",", "\n", "nlayer", "=", "8", ",", "\n", "nfilter", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", "]", ",", "\n", "ninner", "=", "1", ",", "\n", "conv_param", "=", "conv_param", ",", "\n", "pool_param", "=", "pool_param", ",", "\n", "upconv_param", "=", "upconv_param", ",", "\n", "norm_param", "=", "norm_param", ",", "\n", "activation_param", "=", "activation_param", ",", "\n", "dropout_param", "=", "dropout_param", ",", "\n", "dropout_enables", "=", "[", "False", ",", "False", ",", "False", ",", "False", ",", "True", ",", "True", ",", "True", ",", "False", "]", ",", "\n", "preserve_color", "=", "True", ",", "\n", "exp_ninner", "=", "0", ",", "\n", "exp_activation_param", "=", "exp_activation_param", ",", "\n", "exp_dropout_param", "=", "exp_dropout_param", ")", "\n", "\n", "return", "generator", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.eval_metric": [[147, 153], ["train_and_test_pix2pix.eval_metric.mean_absolute_error"], "function", ["None"], ["", "def", "eval_metric", "(", "y", ",", "t", ")", ":", "\n", "    ", "def", "mean_absolute_error", "(", "y", ",", "t", ")", ":", "\n", "        ", "y", "=", "y", ".", "astype", "(", "np", ".", "float32", ")", "\n", "t", "=", "t", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "np", ".", "mean", "(", "np", ".", "abs", "(", "y", "-", "t", ")", ")", "\n", "", "return", "mean_absolute_error", "(", "y", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.train_phase": [[155, 283], ["print", "print", "print", "min", "chainer.iterators.MultiprocessIterator", "chainer.iterators.MultiprocessIterator", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer_bcnn.links.Regressor", "train_and_test_pix2pix.build_discriminator", "build_discriminator.save_args", "chainer.optimizers.Adam", "chainer.optimizers.Adam", "chainer.optimizers.Adam.setup", "chainer.optimizers.Adam", "chainer.optimizers.Adam", "chainer.optimizers.Adam.setup", "chainer.training.triggers.EarlyStoppingTrigger", "chainer.training.Trainer", "training.Trainer.extend", "training.Trainer.extend", "chainer_bcnn.visualizer.ImageVisualizer", "os.path.join", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.extend", "chainer.training.extensions.PlotReport.available", "training.Trainer.extend", "training.Trainer.extend", "training.Trainer.run", "len", "len", "len", "os.path.join", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer.optimizers.Adam.add_hook", "chainer.optimizers.Adam.add_hook", "len", "chainer_bcnn.updaters.DCGANUpdater", "enumerate", "NotImplementedError", "max", "max", "chainer.training.extensions.LinearShift", "chainer.training.extensions.LinearShift", "chainer_bcnn.extensions.Validator", "chainer.training.extensions.dump_graph", "chainer.training.extensions.dump_graph", "chainer.training.extensions.dump_graph", "chainer.training.extensions.snapshot", "chainer.training.extensions.snapshot_object", "chainer.training.extensions.snapshot_object", "chainer_bcnn.extensions.LogReport", "chainer_bcnn.extensions.PrintReport", "chainer.training.extensions.ProgressBar", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "len", "len", "chainer_bcnn.links.Regressor.to_gpu", "build_discriminator.to_gpu", "chainer.optimizer_hooks.WeightDecay", "chainer.optimizer_hooks.WeightDecay", "chainer.optimizer_hooks.WeightDecay", "chainer.optimizer_hooks.WeightDecay", "training.Trainer.extend", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id", "max", "chainer.training.extensions.PlotReport", "[].startswith", "key.split"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.build_discriminator", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.save_args", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.run", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_discriminator.dump_graph", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_discriminator.dump_graph", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_discriminator.dump_graph"], ["", "def", "train_phase", "(", "generator", ",", "train", ",", "valid", ",", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'# samples:'", ")", "\n", "print", "(", "'-- train:'", ",", "len", "(", "train", ")", ")", "\n", "print", "(", "'-- valid:'", ",", "len", "(", "valid", ")", ")", "\n", "\n", "# setup dataset iterators", "\n", "train_batchsize", "=", "min", "(", "args", ".", "batchsize", "*", "len", "(", "args", ".", "gpu", ")", ",", "len", "(", "train", ")", ")", "\n", "valid_batchsize", "=", "args", ".", "batchsize", "\n", "train_iter", "=", "chainer", ".", "iterators", ".", "MultiprocessIterator", "(", "train", ",", "train_batchsize", ")", "\n", "valid_iter", "=", "chainer", ".", "iterators", ".", "SerialIterator", "(", "valid", ",", "valid_batchsize", ",", "\n", "repeat", "=", "False", ",", "shuffle", "=", "True", ")", "\n", "\n", "# setup a model", "\n", "model", "=", "Regressor", "(", "generator", ",", "\n", "activation", "=", "F", ".", "tanh", ",", "\n", "lossfun", "=", "F", ".", "mean_absolute_error", ",", "\n", "accfun", "=", "F", ".", "mean_absolute_error", ")", "\n", "\n", "discriminator", "=", "build_discriminator", "(", ")", "\n", "discriminator", ".", "save_args", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'discriminator.json'", ")", ")", "\n", "\n", "if", "args", ".", "gpu", "[", "0", "]", ">=", "0", ":", "\n", "        ", "chainer", ".", "backends", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", "[", "0", "]", ")", ".", "use", "(", ")", "\n", "if", "len", "(", "args", ".", "gpu", ")", "==", "1", ":", "\n", "            ", "model", ".", "to_gpu", "(", ")", "\n", "discriminator", ".", "to_gpu", "(", ")", "\n", "\n", "# setup an optimizer", "\n", "", "", "optimizer_G", "=", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "args", ".", "lr", ",", "beta1", "=", "args", ".", "beta", ",", "beta2", "=", "0.999", ",", "eps", "=", "1e-08", ",", "amsgrad", "=", "False", ")", "\n", "optimizer_G", ".", "setup", "(", "model", ")", "\n", "optimizer_D", "=", "chainer", ".", "optimizers", ".", "Adam", "(", "alpha", "=", "args", ".", "lr", ",", "beta1", "=", "args", ".", "beta", ",", "beta2", "=", "0.999", ",", "eps", "=", "1e-08", ",", "amsgrad", "=", "False", ")", "\n", "optimizer_D", ".", "setup", "(", "discriminator", ")", "\n", "\n", "if", "args", ".", "decay", ">", "0", ":", "\n", "        ", "optimizer_G", ".", "add_hook", "(", "chainer", ".", "optimizer_hooks", ".", "WeightDecay", "(", "args", ".", "decay", ")", ")", "\n", "optimizer_D", ".", "add_hook", "(", "chainer", ".", "optimizer_hooks", ".", "WeightDecay", "(", "args", ".", "decay", ")", ")", "\n", "\n", "# setup a trainer", "\n", "", "if", "len", "(", "args", ".", "gpu", ")", "==", "1", ":", "\n", "        ", "updater", "=", "DCGANUpdater", "(", "\n", "iterator", "=", "train_iter", ",", "\n", "optimizer", "=", "{", "\n", "'gen'", ":", "optimizer_G", ",", "\n", "'dis'", ":", "optimizer_D", ",", "\n", "}", ",", "\n", "alpha", "=", "args", ".", "alpha", ",", "\n", "device", "=", "args", ".", "gpu", "[", "0", "]", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "devices", "=", "{", "'main'", ":", "args", ".", "gpu", "[", "0", "]", "}", "\n", "for", "idx", ",", "g", "in", "enumerate", "(", "args", ".", "gpu", "[", "1", ":", "]", ")", ":", "\n", "            ", "devices", "[", "'slave_%d'", "%", "idx", "]", "=", "g", "\n", "\n", "", "raise", "NotImplementedError", "(", "'The parallel updater is not supported..'", ")", "\n", "\n", "\n", "", "frequency", "=", "max", "(", "args", ".", "iteration", "//", "80", ",", "1", ")", "if", "args", ".", "frequency", "==", "-", "1", "else", "max", "(", "1", ",", "args", ".", "frequency", ")", "\n", "\n", "stop_trigger", "=", "triggers", ".", "EarlyStoppingTrigger", "(", "monitor", "=", "'validation/main/loss'", ",", "\n", "max_trigger", "=", "(", "args", ".", "iteration", ",", "'iteration'", ")", ",", "\n", "check_trigger", "=", "(", "frequency", ",", "'iteration'", ")", ",", "\n", "patients", "=", "np", ".", "inf", "if", "args", ".", "pinfall", "==", "-", "1", "else", "max", "(", "1", ",", "args", ".", "pinfall", ")", ")", "\n", "\n", "trainer", "=", "training", ".", "Trainer", "(", "updater", ",", "stop_trigger", ",", "out", "=", "args", ".", "out", ")", "\n", "\n", "# shift lr", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "LinearShift", "(", "'alpha'", ",", "(", "args", ".", "lr", ",", "0.0", ")", ",", "\n", "(", "args", ".", "iteration", "//", "2", ",", "args", ".", "iteration", ")", ",", "\n", "optimizer", "=", "optimizer_G", ")", ")", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "LinearShift", "(", "'alpha'", ",", "(", "args", ".", "lr", ",", "0.0", ")", ",", "\n", "(", "args", ".", "iteration", "//", "2", ",", "args", ".", "iteration", ")", ",", "\n", "optimizer", "=", "optimizer_D", ")", ")", "\n", "\n", "# setup a visualizer", "\n", "\n", "transforms", "=", "{", "'x'", ":", "lambda", "x", ":", "x", ",", "'y'", ":", "lambda", "x", ":", "x", ",", "'t'", ":", "lambda", "x", ":", "x", "}", "\n", "clims", "=", "{", "'x'", ":", "(", "-", "1.", ",", "1.", ")", ",", "'y'", ":", "(", "-", "1.", ",", "1.", ")", ",", "'t'", ":", "(", "-", "1.", ",", "1.", ")", "}", "\n", "\n", "visualizer", "=", "ImageVisualizer", "(", "transforms", "=", "transforms", ",", "\n", "cmaps", "=", "None", ",", "\n", "clims", "=", "clims", ")", "\n", "\n", "# setup a validator", "\n", "valid_file", "=", "os", ".", "path", ".", "join", "(", "'validation'", ",", "'iter_{.updater.iteration:08}.png'", ")", "\n", "trainer", ".", "extend", "(", "Validator", "(", "valid_iter", ",", "model", ",", "valid_file", ",", "\n", "visualizer", "=", "visualizer", ",", "n_vis", "=", "20", ",", "\n", "device", "=", "args", ".", "gpu", "[", "0", "]", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "dump_graph", "(", "'loss_gen'", ",", "filename", "=", "'generative_loss.dot'", ")", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "dump_graph", "(", "'loss_cond'", ",", "filename", "=", "'conditional_loss.dot'", ")", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "dump_graph", "(", "'loss_dis'", ",", "filename", "=", "'discriminative_loss.dot'", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot", "(", "filename", "=", "'snapshot_iter_{.updater.iteration:08}.npz'", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot_object", "(", "generator", ",", "'generator_iter_{.updater.iteration:08}.npz'", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "trainer", ".", "extend", "(", "extensions", ".", "snapshot_object", "(", "discriminator", ",", "'discriminator_iter_{.updater.iteration:08}.npz'", ")", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", "\n", "\n", "log_keys", "=", "[", "'loss_gen'", ",", "'loss_cond'", ",", "'loss_dis'", ",", "\n", "'validation/main/accuracy'", "]", "\n", "\n", "trainer", ".", "extend", "(", "LogReport", "(", "keys", "=", "log_keys", ",", "trigger", "=", "(", "100", ",", "'iteration'", ")", ")", ")", "\n", "\n", "# setup log ploter", "\n", "if", "extensions", ".", "PlotReport", ".", "available", "(", ")", ":", "\n", "        ", "for", "plot_key", "in", "[", "'loss'", ",", "'accuracy'", "]", ":", "\n", "            ", "plot_keys", "=", "[", "key", "for", "key", "in", "log_keys", "if", "key", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "startswith", "(", "plot_key", ")", "]", "\n", "trainer", ".", "extend", "(", "\n", "extensions", ".", "PlotReport", "(", "plot_keys", ",", "\n", "'iteration'", ",", "file_name", "=", "plot_key", "+", "'.png'", ",", "\n", "trigger", "=", "(", "frequency", ",", "'iteration'", ")", ")", ")", "\n", "\n", "", "", "trainer", ".", "extend", "(", "PrintReport", "(", "[", "'iteration'", "]", "+", "log_keys", "+", "[", "'elapsed_time'", "]", ",", "n_step", "=", "1", ")", ")", "\n", "\n", "trainer", ".", "extend", "(", "extensions", ".", "ProgressBar", "(", ")", ")", "\n", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "chainer", ".", "serializers", ".", "load_npz", "(", "args", ".", "resume", ",", "trainer", ")", "\n", "\n", "\n", "# train", "\n", "", "trainer", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.test_phase": [[285, 368], ["print", "print", "chainer.iterators.SerialIterator", "chainer.iterators.SerialIterator", "chainer_bcnn.utils.find_latest_snapshot", "chainer.serializers.load_npz", "chainer.serializers.load_npz", "print", "chainer_bcnn.links.MCSampler", "chainer_bcnn.inference.Inferencer", "chainer_bcnn.inference.Inferencer.run", "os.makedirs", "isinstance", "os.path.commonpath", "enumerate", "len", "chainer.backends.cuda.get_device_from_id().use", "chainer.backends.cuda.get_device_from_id().use", "chainer_bcnn.links.MCSampler.to_gpu", "os.path.join", "numpy.percentile", "files.tolist.tolist", "zip", "chainer_bcnn.data.load_image", "chainer_bcnn.data.load_image", "im.astype.astype", "lb.astype.astype", "p.transpose.transpose", "numpy.mean", "acc_values.append", "uncert_values.append", "matplotlib.figure", "enumerate", "matplotlib.tight_layout", "matplotlib.savefig", "matplotlib.close", "functools.partial", "numpy.abs", "train_and_test_pix2pix.eval_metric", "numpy.mean", "zip", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.title", "matplotlib.clim", "os.path.join", "chainer.backends.cuda.get_device_from_id", "chainer.backends.cuda.get_device_from_id", "os.path.relpath"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.find_latest_snapshot", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.run", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.load_image", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.load_image", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.eval_metric", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.clim"], ["", "def", "test_phase", "(", "generator", ",", "test", ",", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'# samples:'", ")", "\n", "print", "(", "'-- test:'", ",", "len", "(", "test", ")", ")", "\n", "\n", "test_iter", "=", "chainer", ".", "iterators", ".", "SerialIterator", "(", "test", ",", "args", ".", "batchsize", ",", "repeat", "=", "False", ",", "shuffle", "=", "False", ")", "\n", "\n", "# setup a inferencer", "\n", "snapshot_file", "=", "find_latest_snapshot", "(", "'generator_iter_{.updater.iteration:08}.npz'", ",", "args", ".", "out", ")", "\n", "chainer", ".", "serializers", ".", "load_npz", "(", "snapshot_file", ",", "generator", ")", "\n", "print", "(", "'Loaded a snapshot:'", ",", "snapshot_file", ")", "\n", "\n", "model", "=", "MCSampler", "(", "generator", ",", "\n", "mc_iteration", "=", "args", ".", "mc_iteration", ",", "\n", "activation", "=", "F", ".", "tanh", ",", "\n", "reduce_mean", "=", "None", ",", "\n", "reduce_var", "=", "partial", "(", "F", ".", "mean", ",", "axis", "=", "1", ")", ")", "\n", "\n", "if", "args", ".", "gpu", "[", "0", "]", ">=", "0", ":", "\n", "        ", "chainer", ".", "backends", ".", "cuda", ".", "get_device_from_id", "(", "args", ".", "gpu", "[", "0", "]", ")", ".", "use", "(", ")", "\n", "model", ".", "to_gpu", "(", ")", "\n", "\n", "", "infer", "=", "Inferencer", "(", "test_iter", ",", "model", ",", "device", "=", "args", ".", "gpu", "[", "0", "]", ")", "\n", "\n", "pred", ",", "uncert", "=", "infer", ".", "run", "(", ")", "\n", "\n", "\n", "# evaluate", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'test'", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "acc_values", "=", "[", "]", "\n", "uncert_values", "=", "[", "]", "\n", "\n", "uncert_clim", "=", "(", "0", ",", "np", ".", "percentile", "(", "uncert", ",", "95", ")", ")", "\n", "error_clim", "=", "(", "0", ",", "1", ")", "\n", "\n", "files", "=", "test", ".", "files", "[", "'image'", "]", "\n", "if", "isinstance", "(", "files", ",", "np", ".", "ndarray", ")", ":", "files", "=", "files", ".", "tolist", "(", ")", "\n", "commonpath", "=", "os", ".", "path", ".", "commonpath", "(", "files", ")", "\n", "\n", "plt", ".", "rcParams", "[", "'font.size'", "]", "=", "14", "\n", "\n", "for", "i", ",", "(", "p", ",", "u", ",", "imf", ",", "lbf", ")", "in", "enumerate", "(", "zip", "(", "pred", ",", "uncert", ",", "\n", "test", ".", "files", "[", "'image'", "]", ",", "\n", "test", ".", "files", "[", "'label'", "]", ")", ")", ":", "\n", "        ", "im", ",", "_", "=", "load_image", "(", "imf", ")", "\n", "lb", ",", "_", "=", "load_image", "(", "lbf", ")", "\n", "im", "=", "im", ".", "astype", "(", "np", ".", "float32", ")", "\n", "lb", "=", "lb", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "p", "=", "p", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "im", "=", "(", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "+", "1.", ")", "/", "2.", "\n", "lb", "=", "(", "lb", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "+", "1.", ")", "/", "2.", "\n", "p", "=", "(", "p", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "+", "1.", ")", "/", "2.", "\n", "\n", "error", "=", "np", ".", "mean", "(", "np", ".", "abs", "(", "p", "-", "lb", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n", "acc_values", ".", "append", "(", "eval_metric", "(", "p", ",", "lb", ")", ")", "\n", "uncert_values", ".", "append", "(", "np", ".", "mean", "(", "u", ")", ")", "\n", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "4", ")", ")", "\n", "\n", "for", "j", ",", "(", "pic", ",", "cmap", ",", "clim", ",", "title", ")", "in", "enumerate", "(", "zip", "(", "\n", "[", "im", ",", "p", ",", "lb", ",", "u", ",", "error", "]", ",", "\n", "[", "None", ",", "None", ",", "None", ",", "'jet'", ",", "'jet'", "]", ",", "\n", "[", "None", ",", "None", ",", "None", ",", "uncert_clim", ",", "error_clim", "]", ",", "\n", "[", "'Input image\\n%s'", "%", "os", ".", "path", ".", "relpath", "(", "imf", ",", "commonpath", ")", ",", "\n", "'Predicted label\\n(MAE=%.3f)'", "%", "acc_values", "[", "-", "1", "]", ",", "\n", "'Ground-truth label'", ",", "\n", "'Predicted variance\\n(PV=%.4f)'", "%", "uncert_values", "[", "-", "1", "]", ",", "\n", "'Error'", "]", ")", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "1", ",", "5", ",", "j", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "pic", ",", "cmap", "=", "cmap", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ",", "[", "]", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "clim", "(", "clim", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'test/%03d.png'", "%", "i", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.get_dataset": [[370, 407], ["collections.OrderedDict", "functools.partial", "collections.OrderedDict", "functools.partial.", "chainer_bcnn.datasets.train_valid_split", "collections.OrderedDict", "functools.partial."], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.datasets.__init__.train_valid_split"], ["", "", "def", "get_dataset", "(", "data_root", ",", "\n", "valid_split_ratio", ",", "\n", "valid_augment", ",", "\n", "normalizer", "=", "None", ",", "\n", "augmentor", "=", "None", ")", ":", "\n", "\n", "    ", "class_list", "=", "None", "\n", "dtypes", "=", "OrderedDict", "(", "{", "'image'", ":", "np", ".", "float32", ",", "'label'", ":", "np", ".", "float32", "}", ")", "\n", "\n", "getter", "=", "partial", "(", "ImageDataset", ",", "root", "=", "data_root", ",", "classes", "=", "class_list", ",", "\n", "dtypes", "=", "dtypes", ",", "normalizer", "=", "normalizer", ")", "\n", "\n", "# train and valid dataset", "\n", "train_patients", "=", "[", "'*'", "]", "\n", "\n", "train_filenames", "=", "OrderedDict", "(", "{", "\n", "'image'", ":", "'{root}/train/{patient}_a.mha'", ",", "\n", "'label'", ":", "'{root}/train/{patient}_b.mha'", ",", "\n", "}", ")", "\n", "\n", "dataset", "=", "getter", "(", "patients", "=", "train_patients", ",", "filenames", "=", "train_filenames", ",", "augmentor", "=", "augmentor", ")", "\n", "train", ",", "valid", "=", "train_valid_split", "(", "dataset", ",", "valid_split_ratio", ")", "\n", "\n", "if", "not", "valid_augment", ":", "\n", "        ", "del", "valid", ".", "augmentor", "\n", "\n", "# test dataset", "\n", "", "test_patients", "=", "[", "'*'", "]", "\n", "\n", "test_filenames", "=", "OrderedDict", "(", "{", "\n", "'image'", ":", "'{root}/val/{patient}_a.mha'", ",", "\n", "'label'", ":", "'{root}/val/{patient}_b.mha'", ",", "\n", "}", ")", "\n", "\n", "test", "=", "getter", "(", "patients", "=", "test_patients", ",", "filenames", "=", "test_filenames", ",", "augmentor", "=", "None", ")", "\n", "\n", "return", "train", ",", "valid", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.get_normalizer": [[409, 415], ["chainer_bcnn.data.normalizer.Normalizer", "chainer_bcnn.data.normalizer.Normalizer.add", "chainer_bcnn.data.normalizer.Subtract2D"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add"], ["", "def", "get_normalizer", "(", ")", ":", "\n", "\n", "    ", "normalizer", "=", "Normalizer", "(", ")", "\n", "normalizer", ".", "add", "(", "Subtract2D", "(", "0.", ")", ")", "\n", "\n", "return", "normalizer", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.get_augmentor": [[417, 426], ["chainer_bcnn.data.augmentor.DataAugmentor", "chainer_bcnn.data.augmentor.DataAugmentor.add", "chainer_bcnn.data.augmentor.DataAugmentor.add", "chainer_bcnn.data.augmentor.DataAugmentor.add", "chainer_bcnn.data.augmentor.ResizeCrop2D", "chainer_bcnn.data.augmentor.Flip2D", "chainer_bcnn.data.augmentor.Flip2D"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add"], ["", "def", "get_augmentor", "(", ")", ":", "\n", "\n", "    ", "augmentor", "=", "DataAugmentor", "(", ")", "\n", "augmentor", ".", "add", "(", "ResizeCrop2D", "(", "resize_size", "=", "(", "286", ",", "286", ")", ",", "\n", "crop_size", "=", "(", "256", ",", "256", ")", ")", ")", "\n", "augmentor", ".", "add", "(", "Flip2D", "(", "1", ")", ")", "\n", "augmentor", ".", "add", "(", "Flip2D", "(", "2", ")", ")", "\n", "\n", "return", "augmentor", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.main": [[428, 513], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print", "print", "os.makedirs", "train_and_test_pix2pix.get_normalizer", "train_and_test_pix2pix.get_augmentor", "chainer_bcnn.utils.fixed_seed", "train_and_test_pix2pix.build_generator", "train_and_test_pix2pix.get_dataset", "build_generator.freeze_layers", "RuntimeError", "train_and_test_pix2pix.test_phase", "train_and_test_pix2pix.test_phase", "chainerui.utils.save_args", "build_generator.save_args", "get_normalizer.summary", "get_augmentor.summary", "train_and_test_pix2pix.train_phase", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.get_normalizer", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.get_augmentor", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.fixed_seed", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.build_generator", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.get_dataset", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.freeze_layers", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.test_phase", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.test_phase", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.save_args", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.save_args", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.summary", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.summary", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.train_and_test_pix2pix.train_phase"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Example: Uncertainty estimates with adversarial training in image synthesis'", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "'-d'", ",", "type", "=", "str", ",", "default", "=", "'./preprocessed'", ",", "\n", "help", "=", "'Directory to dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--batchsize'", ",", "'-b'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'Number of images in each mini-batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--iteration'", ",", "'-i'", ",", "type", "=", "int", ",", "default", "=", "200000", ",", "\n", "help", "=", "'Number of sweeps over the dataset to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--frequency'", ",", "'-f'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Frequency of taking a snapshot'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "'-g'", ",", "type", "=", "int", ",", "nargs", "=", "'+'", ",", "default", "=", "[", "0", "]", ",", "\n", "help", "=", "'GPU ID (negative value indicates CPU)'", ")", "\n", "parser", ".", "add_argument", "(", "'--out'", ",", "'-o'", ",", "default", "=", "'logs'", ",", "\n", "help", "=", "'Directory to output the result'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "'-r'", ",", "default", "=", "''", ",", "\n", "help", "=", "'Resume the training from snapshot'", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_augment'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Enable data augmentation during validation'", ")", "\n", "parser", ".", "add_argument", "(", "'--valid_split_ratio'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'Ratio of validation data to training data'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "4e-4", ",", "\n", "help", "=", "'Learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "type", "=", "float", ",", "default", "=", "50.", ",", "\n", "help", "=", "'Weight of conditional loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'Exponential decay rate of the first order moment in Adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay'", ",", "type", "=", "float", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Weight of L2 regularization'", ")", "\n", "parser", ".", "add_argument", "(", "'--mc_iteration'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "'Number of iteration of MCMC'", ")", "\n", "parser", ".", "add_argument", "(", "'--pinfall'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'Countdown for early stopping of training.'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze_upconv'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Disables updating the up-convolutional weights. If weights are initialized with \\\n                            bilinear kernels, up-conv acts as bilinear upsampler.'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_on_test'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Switch to the testing phase on test dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_on_valid'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Switch to the testing phase on valid dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Fix the random seed'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "print", "(", "'GPU: {}'", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "print", "(", "'# Minibatch-size: {}'", ".", "format", "(", "args", ".", "batchsize", ")", ")", "\n", "print", "(", "''", ")", "\n", "\n", "# setup output directory", "\n", "os", ".", "makedirs", "(", "args", ".", "out", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# NOTE: ad-hoc", "\n", "normalizer", "=", "get_normalizer", "(", ")", "\n", "augmentor", "=", "get_augmentor", "(", ")", "\n", "\n", "# setup a generator", "\n", "with", "fixed_seed", "(", "args", ".", "seed", ",", "strict", "=", "False", ")", ":", "\n", "\n", "        ", "generator", "=", "build_generator", "(", ")", "\n", "\n", "if", "args", ".", "freeze_upconv", ":", "\n", "            ", "generator", ".", "freeze_layers", "(", "name", "=", "'upconv'", ",", "\n", "recursive", "=", "True", ",", "\n", "verbose", "=", "True", ")", "\n", "\n", "# setup dataset", "\n", "", "train", ",", "valid", ",", "test", "=", "get_dataset", "(", "args", ".", "data_root", ",", "\n", "args", ".", "valid_split_ratio", ",", "\n", "args", ".", "valid_augment", ",", "\n", "normalizer", ",", "augmentor", ")", "\n", "\n", "# run", "\n", "if", "args", ".", "test_on_test", ":", "\n", "            ", "raise", "RuntimeError", "(", "'This example is under construction. Please tune the hyperparameters first..'", ")", "\n", "test_phase", "(", "generator", ",", "test", ",", "args", ")", "\n", "", "elif", "args", ".", "test_on_valid", ":", "\n", "            ", "test_phase", "(", "generator", ",", "valid", ",", "args", ")", "\n", "", "else", ":", "\n", "            ", "save_args", "(", "args", ",", "args", ".", "out", ")", "\n", "generator", ".", "save_args", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'model.json'", ")", ")", "\n", "normalizer", ".", "summary", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'norm.json'", ")", ")", "\n", "augmentor", ".", "summary", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out", ",", "'augment.json'", ")", ")", "\n", "\n", "train_phase", "(", "generator", ",", "train", ",", "valid", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.preprocess.my_hook": [[13, 40], ["t.update"], "function", ["None"], ["\n", "last_b", "=", "[", "0", "]", "\n", "\n", "def", "update_to", "(", "b", "=", "1", ",", "bsize", "=", "1", ",", "tsize", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        b  : int, optional\n            Number of blocks transferred so far [default: 1].\n        bsize  : int, optional\n            Size of each block (in tqdm units) [default: 1].\n        tsize  : int, optional\n            Total size (in tqdm units). If [default: None] remains unchanged.\n        \"\"\"", "\n", "if", "tsize", "is", "not", "None", ":", "\n", "            ", "t", ".", "total", "=", "tsize", "\n", "", "t", ".", "update", "(", "(", "b", "-", "last_b", "[", "0", "]", ")", "*", "bsize", ")", "\n", "last_b", "[", "0", "]", "=", "b", "\n", "\n", "", "return", "update_to", "\n", "\n", "", "def", "download", "(", "url", ",", "out", ")", ":", "\n", "\n", "    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "out", ")", ",", "exist_ok", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.preprocess.download": [[41, 48], ["os.makedirs", "os.path.dirname", "os.path.exists", "tqdm.tqdm", "urllib.request.urlretrieve", "preprocess.my_hook"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.preprocess.my_hook"], ["\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out", ")", ":", "\n", "        ", "with", "tqdm", ".", "tqdm", "(", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ",", "miniters", "=", "1", ",", "ncols", "=", "80", ")", "as", "t", ":", "\n", "            ", "urllib", ".", "request", ".", "urlretrieve", "(", "url", ",", "out", ",", "reporthook", "=", "my_hook", "(", "t", ")", ")", "\n", "\n", "", "", "", "def", "unzip", "(", "zip_file", ",", "out", ")", ":", "\n", "\n", "    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "out", ")", ",", "exist_ok", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.map_synthesis.preprocess.preprocess_map": [[50, 75], ["os.makedirs", "glob.glob", "enumerate", "os.path.join", "chainer_bcnn.data.load_image", "img[].astype", "img[].astype", "cv2.resize", "cv2.resize", "chainer_bcnn.data.save_image", "chainer_bcnn.data.save_image", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.load_image", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.resize", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.resize", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.save_image", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.save_image"], ["with", "zipfile", ".", "ZipFile", "(", "zip_file", ")", "as", "existing_zip", ":", "\n", "        ", "existing_zip", ".", "extractall", "(", "out", ")", "\n", "\n", "", "", "def", "preprocess_images", "(", "files", ",", "out_dir", ")", ":", "\n", "\n", "    ", "commonpath", "=", "os", ".", "path", ".", "commonpath", "(", "files", ")", "\n", "\n", "for", "f", "in", "tqdm", ".", "tqdm", "(", "files", ")", ":", "\n", "        ", "out", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "os", ".", "path", ".", "relpath", "(", "f", ",", "commonpath", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "out", ")", ",", "exist_ok", "=", "True", ")", "\n", "copyfile", "(", "f", ",", "out", ")", "\n", "\n", "", "", "def", "preprocess_labels", "(", "files", ",", "out_dir", ",", "binary", "=", "True", ")", ":", "\n", "\n", "    ", "commonpath", "=", "os", ".", "path", ".", "commonpath", "(", "files", ")", "\n", "\n", "for", "f", "in", "tqdm", ".", "tqdm", "(", "files", ")", ":", "\n", "        ", "out", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "os", ".", "path", ".", "relpath", "(", "f", ",", "commonpath", ")", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "out", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "src", "=", "cv2", ".", "imread", "(", "f", ")", "\n", "src", "=", "src", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "dst", "=", "np", ".", "zeros", "(", "src", ".", "shape", ",", "src", ".", "dtype", ")", "\n", "\n", "if", "binary", ":", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_augmentator_2d.main": [[10, 63], ["chainer_bcnn.data.augmentor.DataAugmentor", "chainer_bcnn.data.augmentor.DataAugmentor.add", "chainer_bcnn.data.augmentor.DataAugmentor.add", "chainer_bcnn.data.augmentor.DataAugmentor.add", "chainer_bcnn.data.augmentor.DataAugmentor.add", "chainer_bcnn.data.augmentor.DataAugmentor.summary", "numpy.transpose", "print", "print", "time.time", "chainer_bcnn.data.augmentor.DataAugmentor.apply", "print", "print", "print", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.show", "chainer_bcnn.data.augmentor.ResizeCrop2D", "chainer_bcnn.data.augmentor.Flip2D", "chainer_bcnn.data.augmentor.Affine2D", "chainer_bcnn.data.augmentor.SpeckleNoise2D", "cv2.imread().astype", "numpy.transpose", "numpy.transpose", "cv2.imread", "time.time"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.summary", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.apply"], ["def", "main", "(", ")", ":", "\n", "    ", "augmentor", "=", "DataAugmentor", "(", ")", "\n", "augmentor", ".", "add", "(", "ResizeCrop2D", "(", "resize_size", "=", "(", "400", ",", "500", ")", ",", "\n", "crop_size", "=", "(", "300", ",", "400", ")", ")", ")", "\n", "augmentor", ".", "add", "(", "Flip2D", "(", "axis", "=", "2", ")", ")", "\n", "augmentor", ".", "add", "(", "Affine2D", "(", "rotation", "=", "15.", ",", "\n", "translate", "=", "(", "10.", ",", "10.", ")", ",", "\n", "shear", "=", "0.25", ",", "\n", "zoom", "=", "(", "0.8", ",", "1.2", ")", ",", "\n", "keep_aspect_ratio", "=", "True", ",", "\n", "fill_mode", "=", "(", "'nearest'", ",", "'constant'", ")", ",", "\n", "cval", "=", "(", "0.", ",", "0.", ")", ",", "\n", "interp_order", "=", "(", "3", ",", "0", ")", ")", ")", "\n", "# augmentor.add(GaussNoise2D(mean=0, std=0.1))", "\n", "augmentor", ".", "add", "(", "SpeckleNoise2D", "(", "mean", "=", "0", ",", "std", "=", "0.1", ")", ")", "\n", "# augmentor.add(PoissonNoise2D(255.))", "\n", "# augmentor.add(SaltNoise2D(0.05))", "\n", "# augmentor.add(PepperNoise2D(0.05))", "\n", "\n", "\n", "augmentor", ".", "summary", "(", "'augment.json'", ")", "\n", "\n", "x_in", "=", "cv2", ".", "imread", "(", "'lenna.png'", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255.", "\n", "x_in", "=", "x_in", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "x_in", "=", "np", ".", "transpose", "(", "x_in", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "y_in", "=", "x_in", "[", "0", ",", "...", "]", "\n", "print", "(", "x_in", ".", "shape", ")", "\n", "print", "(", "y_in", ".", "shape", ")", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "x_out", ",", "y_out", "=", "augmentor", ".", "apply", "(", "x_in", ",", "y_in", ")", "\n", "print", "(", "'time: %f [sec]'", "%", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n", "print", "(", "x_out", ".", "shape", ")", "\n", "print", "(", "y_out", ".", "shape", ")", "\n", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "x_in", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "plt", ".", "xlabel", "(", "'x'", ")", "\n", "plt", ".", "ylabel", "(", "'y'", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "x_out", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "plt", ".", "xlabel", "(", "'x'", ")", "\n", "plt", ".", "ylabel", "(", "'y'", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "y_in", ")", "\n", "plt", ".", "xlabel", "(", "'x'", ")", "\n", "plt", ".", "ylabel", "(", "'y'", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "4", ")", "\n", "plt", ".", "imshow", "(", "y_out", ")", "\n", "plt", ".", "xlabel", "(", "'x'", ")", "\n", "plt", ".", "ylabel", "(", "'y'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_dice_loss._dice": [[9, 14], ["y.astype.astype", "t.astype.astype", "cupy.logical_and().sum", "y.astype.sum", "t.astype.sum", "cupy.logical_and"], "function", ["None"], ["def", "_dice", "(", "y", ",", "t", ")", ":", "\n", "    ", "y", "=", "y", ".", "astype", "(", "cp", ".", "bool", ")", "\n", "t", "=", "t", ".", "astype", "(", "cp", ".", "bool", ")", "\n", "\n", "return", "2.", "*", "cp", ".", "logical_and", "(", "y", ",", "t", ")", ".", "sum", "(", ")", "/", "(", "y", ".", "sum", "(", ")", "+", "t", ".", "sum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_augmentator_3d.main": [[8, 42], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "chainer_bcnn.data.augmentor.DataAugmentor", "chainer_bcnn.data.augmentor.DataAugmentor.add", "chainer_bcnn.data.augmentor.DataAugmentor.add", "chainer_bcnn.data.augmentor.DataAugmentor.add", "chainer_bcnn.data.augmentor.DataAugmentor.summary", "chainer_bcnn.data.load_image", "numpy.expand_dims", "x_in.astype.astype", "chainer_bcnn.data.load_image", "y_in.astype.astype", "time.time", "chainer_bcnn.data.augmentor.DataAugmentor.apply", "print", "chainer_bcnn.data.save_image", "chainer_bcnn.data.save_image", "chainer_bcnn.data.augmentor.Crop3D", "chainer_bcnn.data.augmentor.Flip3D", "chainer_bcnn.data.augmentor.Affine3D", "time.time"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.summary", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.load_image", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.load_image", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.apply", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.save_image", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.__init__.save_image"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--image'", ",", "type", "=", "str", ",", "default", "=", "'image.mhd'", ")", "\n", "parser", ".", "add_argument", "(", "'--label'", ",", "type", "=", "str", ",", "default", "=", "'label.mhd'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "augmentor", "=", "DataAugmentor", "(", ")", "\n", "augmentor", ".", "add", "(", "Crop3D", "(", "size", "=", "(", "100", ",", "200", ",", "300", ")", ")", ")", "\n", "augmentor", ".", "add", "(", "Flip3D", "(", "axis", "=", "2", ")", ")", "\n", "augmentor", ".", "add", "(", "Affine3D", "(", "\n", "rotation", "=", "(", "15.", ",", "15.", ",", "15.", ")", ",", "\n", "translate", "=", "(", "10.", ",", "10.", ",", "10.", ")", ",", "\n", "shear", "=", "(", "np", ".", "pi", "/", "8", ",", "np", ".", "pi", "/", "8", ",", "np", ".", "pi", "/", "8", ")", ",", "\n", "zoom", "=", "(", "0.8", ",", "1.2", ")", ",", "\n", "keep_aspect_ratio", "=", "True", ",", "\n", "fill_mode", "=", "(", "'constant'", ",", "'constant'", ")", ",", "\n", "cval", "=", "(", "-", "3000.", ",", "-", "1.", ")", ",", "\n", "interp_order", "=", "(", "0", ",", "0", ")", ")", ")", "\n", "\n", "augmentor", ".", "summary", "(", "'augment.json'", ")", "\n", "\n", "x_in", ",", "spacing", "=", "load_image", "(", "args", ".", "image", ")", "\n", "x_in", "=", "np", ".", "expand_dims", "(", "x_in", ",", "axis", "=", "0", ")", "# add channel-axis", "\n", "x_in", "=", "x_in", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "y_in", ",", "_", "=", "load_image", "(", "args", ".", "label", ")", "\n", "y_in", "=", "y_in", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "x_out", ",", "y_out", "=", "augmentor", ".", "apply", "(", "x_in", ",", "y_in", ")", "\n", "print", "(", "'time: %f [sec]'", "%", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n", "save_image", "(", "'x_out.mha'", ",", "x_out", "[", "0", ",", ":", ",", ":", ",", ":", "]", ",", "spacing", ")", "\n", "save_image", "(", "'y_out.mha'", ",", "y_out", ",", "spacing", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_normalizer.main": [[9, 35], ["chainer_bcnn.data.normalizer.Normalizer", "chainer_bcnn.data.normalizer.Normalizer.add", "chainer_bcnn.data.normalizer.Normalizer.add", "chainer_bcnn.data.normalizer.Normalizer.add", "chainer_bcnn.data.normalizer.Normalizer.summary", "cv2.imread().astype", "numpy.transpose", "print", "time.time", "chainer_bcnn.data.normalizer.Normalizer.apply", "print", "print", "matplotlib.imshow", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.colorbar", "matplotlib.show", "chainer_bcnn.data.normalizer.Clip2D", "chainer_bcnn.data.normalizer.Subtract2D", "chainer_bcnn.data.normalizer.Divide2D", "cv2.imread", "numpy.transpose", "time.time"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.DataAugmentor.add", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.summary", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.__init__.Operation.apply"], ["def", "main", "(", ")", ":", "\n", "    ", "normalizer", "=", "Normalizer", "(", ")", "\n", "normalizer", ".", "add", "(", "Clip2D", "(", "'ch_minmax'", ")", ")", "\n", "# normalizer.add(Quantize2D(n_bit=3))", "\n", "# normalizer.add(Subtract2D('ch_mean'))", "\n", "# normalizer.add(Divide2D('ch_std'))", "\n", "normalizer", ".", "add", "(", "Subtract2D", "(", "0.5", ")", ")", "\n", "normalizer", ".", "add", "(", "Divide2D", "(", "0.5", ")", ")", "\n", "normalizer", ".", "summary", "(", "'norm.json'", ")", "\n", "\n", "x_in", "=", "cv2", ".", "imread", "(", "'lenna.png'", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "x_in", "=", "x_in", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "x_in", "=", "np", ".", "transpose", "(", "x_in", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "print", "(", "x_in", ".", "shape", ")", "\n", "\n", "tic", "=", "time", ".", "time", "(", ")", "\n", "x_out", "=", "normalizer", ".", "apply", "(", "x_in", ")", "\n", "print", "(", "'time: %f [sec]'", "%", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n", "print", "(", "x_out", ".", "shape", ")", "\n", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "x_out", ",", "(", "1", ",", "2", ",", "0", ")", ")", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "plt", ".", "xlabel", "(", "'x'", ")", "\n", "plt", ".", "ylabel", "(", "'y'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_model.dump_graph": [[10, 22], ["chainer.build_computational_graph", "open", "o.write", "os.path.splitext", "subprocess.call", "c.build_computational_graph.dump", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write"], ["def", "dump_graph", "(", "variable", ",", "out", ")", ":", "\n", "\n", "    ", "g", "=", "c", ".", "build_computational_graph", "(", "variable", ")", "\n", "with", "open", "(", "out", ",", "'w'", ")", "as", "o", ":", "\n", "        ", "o", ".", "write", "(", "g", ".", "dump", "(", ")", ")", "\n", "\n", "", "try", ":", "\n", "        ", "out_png", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "out", ")", "\n", "out_png", "+=", "'.png'", "\n", "subprocess", ".", "call", "(", "'dot -T png %s -o %s'", "%", "(", "out", ",", "out_png", ")", ",", "shell", "=", "False", ")", "\n", "", "except", ":", "\n", "        ", "warnings", ".", "warn", "(", "'please install graphviz and set your environment.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_model.main": [[24, 54], ["chainer_bcnn.models.BayesianUNet", "numpy.random.rand().astype", "chainer_bcnn.models.BayesianUNet.", "print", "test_model.dump_graph", "chainer_bcnn.models.BayesianUNet.save_args", "chainer_bcnn.models.BayesianUNet.show_statistics", "print", "print", "chainer_bcnn.models.BayesianUNet", "numpy.random.rand().astype", "chainer_bcnn.models.BayesianUNet.", "print", "test_model.dump_graph", "chainer_bcnn.models.BayesianUNet.save_args", "chainer_bcnn.models.BayesianUNet.show_statistics", "print", "print", "chainer_bcnn.models.BayesianUNet.freeze_layers", "print", "chainer_bcnn.models.BayesianUNet.freeze_layers", "print", "chainer_bcnn.models.BayesianUNet.freeze_layers", "print", "chainer_bcnn.models.BayesianUNet.freeze_layers", "chainer_bcnn.models.BayesianUNet.count_params", "chainer_bcnn.models.BayesianUNet.count_params", "numpy.random.rand", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_discriminator.dump_graph", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.save_args", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.show_statistics", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_discriminator.dump_graph", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.save_args", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.show_statistics", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.freeze_layers", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.freeze_layers", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.freeze_layers", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.freeze_layers"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "model", "=", "BayesianUNet", "(", "ndim", "=", "2", ",", "out_channels", "=", "10", ")", "\n", "x", "=", "np", ".", "random", ".", "rand", "(", "2", ",", "1", ",", "200", ",", "300", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y", "=", "model", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "dump_graph", "(", "y", ",", "'graph_2d_unet.dot'", ")", "\n", "model", ".", "save_args", "(", "'2d_unet.json'", ")", "\n", "model", ".", "show_statistics", "(", ")", "\n", "print", "(", "model", ".", "count_params", "(", ")", ")", "\n", "\n", "print", "(", "'-----'", ")", "\n", "\n", "model", "=", "BayesianUNet", "(", "ndim", "=", "3", ",", "out_channels", "=", "10", ",", "nlayer", "=", "3", ")", "\n", "x", "=", "np", ".", "random", ".", "rand", "(", "2", ",", "1", ",", "20", ",", "30", ",", "10", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y", "=", "model", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "dump_graph", "(", "y", ",", "'graph_3d_unet.dot'", ")", "\n", "model", ".", "save_args", "(", "'3d_unet.json'", ")", "\n", "model", ".", "show_statistics", "(", ")", "\n", "print", "(", "model", ".", "count_params", "(", ")", ")", "\n", "\n", "print", "(", "'-----'", ")", "\n", "\n", "model", ".", "freeze_layers", "(", "'upconv'", ",", "verbose", "=", "True", ")", "\n", "print", "(", "'-----'", ")", "\n", "model", ".", "freeze_layers", "(", "'upconv'", ",", "recursive", "=", "False", ",", "verbose", "=", "True", ")", "\n", "print", "(", "'-----'", ")", "\n", "model", ".", "freeze_layers", "(", "startwith", "=", "'upconv'", ",", "verbose", "=", "True", ")", "\n", "print", "(", "'-----'", ")", "\n", "model", ".", "freeze_layers", "(", "endwith", "=", "'norm'", ",", "verbose", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__init__": [[12, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_samples", ",", "shape", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "        ", "self", ".", "_n_samples", "=", "n_samples", "\n", "self", ".", "_shape", "=", "shape", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.__len__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_n_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.get_example": [[20, 22], ["numpy.random.rand().astype", "numpy.random.rand"], "methods", ["None"], ["", "def", "get_example", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "rand", "(", "*", "self", ".", "_shape", ")", ".", "astype", "(", "self", ".", "_dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.test": [[24, 50], ["print", "test_inferencer.Dataset", "chainer_bcnn.links.MCSampler", "chainer.iterators.SerialIterator", "chainer_bcnn.inference.Inferencer", "chainer_bcnn.inference.Inferencer.run", "isinstance", "chainer.backends.cuda.get_device_from_id().use", "chainer_bcnn.links.MCSampler.to_gpu", "print", "print", "print", "print", "chainer.backends.cuda.get_device_from_id"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.inference.inferencer.Inferencer.run"], ["", "", "def", "test", "(", "predictor", ",", "shape", ",", "batch_size", ",", "gpu", ",", "to_cpu", ")", ":", "\n", "\n", "    ", "print", "(", "'------'", ")", "\n", "\n", "n_samples", "=", "10", "\n", "dataset", "=", "Dataset", "(", "n_samples", ",", "shape", ")", "\n", "\n", "model", "=", "MCSampler", "(", "predictor", ",", "mc_iteration", "=", "5", ")", "\n", "\n", "if", "gpu", ">=", "0", ":", "\n", "        ", "chainer", ".", "backends", ".", "cuda", ".", "get_device_from_id", "(", "gpu", ")", ".", "use", "(", ")", "\n", "model", ".", "to_gpu", "(", ")", "\n", "\n", "", "iterator", "=", "SerialIterator", "(", "dataset", ",", "batch_size", ",", "repeat", "=", "False", ")", "\n", "\n", "infer", "=", "Inferencer", "(", "iterator", ",", "model", ",", "device", "=", "gpu", ",", "to_cpu", "=", "to_cpu", ")", "\n", "\n", "ret", "=", "infer", ".", "run", "(", ")", "\n", "\n", "if", "isinstance", "(", "ret", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "for", "r", "in", "ret", ":", "\n", "            ", "print", "(", "r", ".", "shape", ")", "\n", "print", "(", "r", ".", "__class__", ")", "\n", "", "", "else", ":", "\n", "        ", "print", "(", "ret", ".", "shape", ")", "\n", "print", "(", "ret", ".", "__class__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.main": [[52, 64], ["test_inferencer.test", "test_inferencer.test", "chainer_bcnn.models.BayesianUNet", "chainer_bcnn.models.BayesianUNet"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.test", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.test"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "test", "(", "BayesianUNet", "(", "ndim", "=", "2", ",", "out_channels", "=", "5", ")", ",", "\n", "(", "1", ",", "200", ",", "300", ")", ",", "\n", "batch_size", "=", "2", ",", "\n", "gpu", "=", "0", ",", "\n", "to_cpu", "=", "True", ")", "\n", "\n", "test", "(", "BayesianUNet", "(", "ndim", "=", "3", ",", "out_channels", "=", "5", ",", "nlayer", "=", "3", ")", ",", "\n", "(", "1", ",", "64", ",", "64", ",", "64", ")", ",", "\n", "batch_size", "=", "2", ",", "\n", "gpu", "=", "0", ",", "\n", "to_cpu", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_initializer.test_compare_model": [[10, 34], ["print", "chainer_bcnn.functions.crop", "print", "print", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.colorbar", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.colorbar", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.colorbar", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.colorbar", "matplotlib.show", "model_1", "model_2", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.crop"], ["def", "test_compare_model", "(", "x", ",", "model_1", ",", "model_2", ")", ":", "\n", "\n", "    ", "print", "(", "'x.shape:'", ",", "x", ".", "shape", ")", "\n", "y_1", "=", "model_1", "(", "x", ")", ".", "data", "\n", "y_2", "=", "model_2", "(", "x", ")", ".", "data", "\n", "\n", "y_2", "=", "crop", "(", "y_2", ",", "y_1", ".", "shape", ",", "ndim", "=", "2", ")", "\n", "\n", "print", "(", "'y_1.shape:'", ",", "y_1", ".", "shape", ")", "\n", "print", "(", "'y_2.shape:'", ",", "y_2", ".", "shape", ")", "\n", "\n", "plt", ".", "subplot", "(", "141", ")", "\n", "plt", ".", "imshow", "(", "x", "[", "0", ",", "0", ",", ":", ",", ":", "]", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "subplot", "(", "142", ")", "\n", "plt", ".", "imshow", "(", "y_1", "[", "0", ",", "0", ",", ":", ",", ":", "]", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "subplot", "(", "143", ")", "\n", "plt", ".", "imshow", "(", "y_2", "[", "0", ",", "0", ",", ":", ",", ":", "]", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "subplot", "(", "144", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "abs", "(", "y_2", "[", "0", ",", "0", ",", ":", ",", ":", "]", "-", "y_1", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ",", "cmap", "=", "'jet'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_initializer.main": [[35, 51], ["cv2.imread", "cv2.resize", "numpy.transpose", "numpy.expand_dims().astype", "chainer.Convolution2D", "chainer_bcnn.links.connection.Convolution2D", "chainer.Deconvolution2D", "chainer_bcnn.links.connection.Deconvolution2D", "test_initializer.test_compare_model", "test_initializer.test_compare_model", "numpy.expand_dims", "chainer_bcnn.initializers.BilinearUpsample", "chainer_bcnn.initializers.BilinearUpsample", "chainer_bcnn.initializers.BilinearUpsample", "chainer_bcnn.initializers.BilinearUpsample"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.augmentor.image.resize", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_initializer.test_compare_model", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_initializer.test_compare_model"], ["", "def", "main", "(", ")", ":", "\n", "    ", "x", "=", "cv2", ".", "imread", "(", "'lenna.png'", ")", "\n", "x", "=", "cv2", ".", "resize", "(", "x", ",", "(", "64", ",", "64", ")", ")", "\n", "x", "=", "np", ".", "transpose", "(", "x", ",", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "x", "=", "np", ".", "expand_dims", "(", "x", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "c", "=", "x", ".", "shape", "[", "1", "]", "\n", "\n", "conv_default", "=", "L", ".", "Convolution2D", "(", "c", ",", "c", ",", "ksize", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "initialW", "=", "BilinearUpsample", "(", ")", ",", "nobias", "=", "True", ")", "\n", "conv_reflect", "=", "Convolution2D", "(", "c", ",", "c", ",", "ksize", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "1", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "initialW", "=", "BilinearUpsample", "(", ")", ",", "nobias", "=", "True", ")", "\n", "\n", "deconv_default", "=", "L", ".", "Deconvolution2D", "(", "c", ",", "c", ",", "ksize", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "pad", "=", "(", "0", ",", "0", ")", ",", "initialW", "=", "BilinearUpsample", "(", ")", ",", "nobias", "=", "True", ")", "\n", "deconv_reflect", "=", "Deconvolution2D", "(", "c", ",", "c", ",", "ksize", "=", "(", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "pad", "=", "(", "1", ",", "1", ")", ",", "initialW", "=", "BilinearUpsample", "(", ")", ",", "nobias", "=", "True", ")", "\n", "\n", "test_compare_model", "(", "x", ",", "conv_default", ",", "conv_reflect", ")", "\n", "test_compare_model", "(", "x", ",", "deconv_default", ",", "deconv_reflect", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_mc_sampler._calc_uncertanty_from_mc_samples": [[7, 13], ["samples.mean", "samples.var"], "function", ["None"], ["def", "_calc_uncertanty_from_mc_samples", "(", "samples", ")", ":", "\n", "\n", "    ", "mean_pred", "=", "samples", ".", "mean", "(", "axis", "=", "0", ",", "keepdims", "=", "False", ")", "\n", "var_pred", "=", "samples", ".", "var", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "return", "mean_pred", ",", "var_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_mc_sampler.main": [[15, 53], ["numpy.random.rand().astype", "numpy.repeat", "test_mc_sampler._calc_uncertanty_from_mc_samples", "print", "print", "print", "print", "chainer.functions.mean", "chainer.functions.mean", "print", "print", "print", "print", "print", "print", "chainer_bcnn.links.MCSampler", "print", "print", "print", "print", "print", "print", "chainer.functions.square", "numpy.abs", "numpy.abs", "chainer.configuration.using_config", "chainer_bcnn.links.MCSampler.", "numpy.abs", "numpy.abs", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_mc_sampler._calc_uncertanty_from_mc_samples"], ["", "def", "main", "(", ")", ":", "\n", "    ", "mc_iteration", "=", "10", "\n", "mc_samples", "=", "np", ".", "random", ".", "rand", "(", "1", ",", "10", ",", "2", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mc_samples", "=", "np", ".", "repeat", "(", "mc_samples", ",", "mc_iteration", ",", "axis", "=", "0", ")", "\n", "\n", "_mean", ",", "_var", "=", "_calc_uncertanty_from_mc_samples", "(", "mc_samples", ")", "\n", "\n", "print", "(", "'numpy'", ")", "\n", "print", "(", "_mean", ")", "\n", "print", "(", "_var", ")", "\n", "print", "(", "'------'", ")", "\n", "\n", "mean", "=", "chainer", ".", "functions", ".", "mean", "(", "mc_samples", ",", "axis", "=", "0", ")", "\n", "var", "=", "mc_samples", "-", "mean", "\n", "var", "=", "chainer", ".", "functions", ".", "mean", "(", "chainer", ".", "functions", ".", "square", "(", "var", ")", ",", "axis", "=", "0", ")", "\n", "\n", "mean", "=", "mean", ".", "data", "\n", "var", "=", "var", ".", "data", "\n", "\n", "print", "(", "'chainer'", ")", "\n", "print", "(", "mean", ")", "\n", "print", "(", "var", ")", "\n", "\n", "print", "(", "(", "np", ".", "abs", "(", "mean", "-", "_mean", ")", ")", ")", "\n", "print", "(", "(", "np", ".", "abs", "(", "var", "-", "_var", ")", ")", ")", "\n", "print", "(", "'------'", ")", "\n", "\n", "sampler", "=", "MCSampler", "(", "lambda", "x", ":", "x", ",", "mc_iteration", ",", "lambda", "x", ":", "x", ",", "None", ",", "None", ")", "\n", "with", "configuration", ".", "using_config", "(", "'train'", ",", "False", ")", ":", "\n", "        ", "mean", ",", "var", "=", "sampler", "(", "mc_samples", "[", "0", "]", ")", "\n", "\n", "", "print", "(", "'mc_sampler'", ")", "\n", "print", "(", "mean", ")", "\n", "print", "(", "var", ")", "\n", "\n", "print", "(", "(", "np", ".", "abs", "(", "mean", "-", "_mean", ")", ")", ")", "\n", "print", "(", "(", "np", ".", "abs", "(", "var", "-", "_var", ")", ")", ")", "\n", "print", "(", "'------'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_dataset.test_2d": [[34, 62], ["collections.OrderedDict", "chainer_bcnn.datasets.ImageDataset", "print", "print", "chainer_bcnn.datasets.ImageDataset.get_example", "print", "print", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.colorbar", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.colorbar", "matplotlib.show", "len"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.get_example"], ["def", "test_2d", "(", "root", ")", ":", "\n", "\n", "    ", "filenames", "=", "OrderedDict", "(", "{", "\n", "'image'", ":", "'{root}/{patient}/slice/*image*.mhd'", ",", "\n", "'label'", ":", "'{root}/{patient}/slice/*mask*.mhd'", ",", "\n", "'mask'", ":", "'{root}/{patient}/slice/*skin*.mhd'", ",", "\n", "}", ")", "\n", "\n", "dataset", "=", "ImageDataset", "(", "root", ",", "\n", "patients", "=", "patient_list", ",", "classes", "=", "class_list", ",", "\n", "dtypes", "=", "dtypes", ",", "filenames", "=", "filenames", ",", "\n", "mask_cvals", "=", "mask_cvals", ")", "\n", "\n", "print", "(", "'# dataset:'", ",", "len", "(", "dataset", ")", ")", "\n", "print", "(", "'# classes:'", ",", "dataset", ".", "n_classes", ")", "\n", "\n", "sample", "=", "dataset", ".", "get_example", "(", "0", ")", "\n", "\n", "print", "(", "sample", "[", "0", "]", ".", "shape", ")", "\n", "print", "(", "sample", "[", "1", "]", ".", "shape", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "sample", "[", "0", "]", "[", "0", ",", ":", ",", ":", "]", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "sample", "[", "1", "]", "[", ":", ",", ":", "]", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_dataset.test_3d": [[64, 92], ["collections.OrderedDict", "chainer_bcnn.datasets.VolumeDataset", "print", "print", "chainer_bcnn.datasets.VolumeDataset.get_example", "print", "print", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.colorbar", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.colorbar", "matplotlib.show", "len"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_inferencer.Dataset.get_example"], ["", "def", "test_3d", "(", "root", ")", ":", "\n", "\n", "    ", "filenames", "=", "OrderedDict", "(", "{", "\n", "'image'", ":", "'{root}/{patient}/*image*.mhd'", ",", "\n", "'label'", ":", "'{root}/{patient}/*mask*.mhd'", ",", "\n", "'mask'", ":", "'{root}/{patient}/*skin*.mhd'", ",", "\n", "}", ")", "\n", "\n", "dataset", "=", "VolumeDataset", "(", "root", ",", "\n", "patients", "=", "patient_list", ",", "classes", "=", "class_list", ",", "\n", "dtypes", "=", "dtypes", ",", "filenames", "=", "filenames", ",", "\n", "mask_cvals", "=", "mask_cvals", ")", "\n", "\n", "print", "(", "'# dataset:'", ",", "len", "(", "dataset", ")", ")", "\n", "print", "(", "'# classes:'", ",", "dataset", ".", "n_classes", ")", "\n", "\n", "sample", "=", "dataset", ".", "get_example", "(", "0", ")", "\n", "\n", "print", "(", "sample", "[", "0", "]", ".", "shape", ")", "\n", "print", "(", "sample", "[", "1", "]", ".", "shape", ")", "\n", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "sample", "[", "0", "]", "[", "0", ",", ":", ",", ":", ",", "100", "]", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "sample", "[", "1", "]", "[", ":", ",", ":", ",", "100", "]", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_dataset.main": [[94, 102], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "test_dataset.test_2d", "test_dataset.test_3d"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_dataset.test_2d", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_dataset.test_3d"], ["", "def", "main", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "test_2d", "(", "args", ".", "root", ")", "\n", "test_3d", "(", "args", ".", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_seed.main": [[4, 24], ["print", "print", "print", "print", "print", "print", "np.random.rand", "cp.random.rand", "random.random", "chainer_bcnn.utils.fixed_seed", "print", "print", "print", "print", "print", "np.random.rand", "cp.random.rand", "random.random", "chainer.links.Convolution2D", "chainer.links.Convolution2D"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.utils.__init__.fixed_seed"], ["def", "main", "(", ")", ":", "\n", "    ", "import", "random", "\n", "import", "numpy", "as", "np", "\n", "import", "cupy", "as", "cp", "\n", "import", "chainer", "\n", "\n", "print", "(", "np", ".", "random", ".", "rand", "(", "10", ")", ")", "\n", "print", "(", "cp", ".", "random", ".", "rand", "(", "10", ")", ")", "\n", "print", "(", "random", ".", "random", "(", ")", ")", "\n", "print", "(", "chainer", ".", "links", ".", "Convolution2D", "(", "2", ",", "2", ",", "3", ",", "1", ",", "0", ")", ".", "W", ".", "data", ")", "\n", "print", "(", "chainer", ".", "config", ".", "cudnn_deterministic", ")", "\n", "\n", "print", "(", "'------'", ")", "\n", "\n", "with", "fixed_seed", "(", "0", ",", "True", ")", ":", "\n", "        ", "print", "(", "np", ".", "random", ".", "rand", "(", "10", ")", ")", "\n", "print", "(", "cp", ".", "random", ".", "rand", "(", "10", ")", ")", "\n", "print", "(", "random", ".", "random", "(", ")", ")", "\n", "print", "(", "chainer", ".", "links", ".", "Convolution2D", "(", "2", ",", "2", ",", "3", ",", "1", ",", "0", ")", ".", "W", ".", "data", ")", "\n", "print", "(", "chainer", ".", "config", ".", "cudnn_deterministic", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_discriminator.dump_graph": [[10, 22], ["chainer.build_computational_graph", "open", "o.write", "os.path.splitext", "subprocess.call", "c.build_computational_graph.dump", "warnings.warn"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.io.mhd.write"], ["def", "dump_graph", "(", "variable", ",", "out", ")", ":", "\n", "\n", "    ", "g", "=", "c", ".", "build_computational_graph", "(", "variable", ")", "\n", "with", "open", "(", "out", ",", "'w'", ")", "as", "o", ":", "\n", "        ", "o", ".", "write", "(", "g", ".", "dump", "(", ")", ")", "\n", "\n", "", "try", ":", "\n", "        ", "out_png", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "out", ")", "\n", "out_png", "+=", "'.png'", "\n", "subprocess", ".", "call", "(", "'dot -T png %s -o %s'", "%", "(", "out", ",", "out_png", ")", ",", "shell", "=", "False", ")", "\n", "", "except", ":", "\n", "        ", "warnings", ".", "warn", "(", "'please install graphviz and set your environment.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_discriminator.main": [[24, 80], ["chainer_bcnn.models.PatchDiscriminator", "numpy.random.rand().astype", "chainer_bcnn.models.PatchDiscriminator.", "print", "test_discriminator.dump_graph", "chainer_bcnn.models.PatchDiscriminator.save_args", "chainer_bcnn.models.PatchDiscriminator.show_statistics", "print", "print", "print", "print", "print", "print", "chainer_bcnn.models.PatchDiscriminator.count_params", "numpy.random.rand", "getattr"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_discriminator.dump_graph", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.save_args", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.models.__init__.Model.show_statistics"], ["", "", "def", "main", "(", ")", ":", "\n", "\n", "    ", "conv_param", "=", "{", "\n", "'name'", ":", "'conv'", ",", "\n", "'ksize'", ":", "3", ",", "\n", "'stride'", ":", "1", ",", "\n", "'pad'", ":", "1", ",", "\n", "'initialW'", ":", "{", "'name'", ":", "'normal'", ",", "'scale'", ":", "0.02", "}", ",", "\n", "'initial_bias'", ":", "{", "'name'", ":", "'zero'", "}", ",", "\n", "'hook'", ":", "{", "'name'", ":", "'spectral_normalization'", "}", "\n", "}", "\n", "\n", "pool_param", "=", "{", "\n", "'name'", ":", "'stride'", ",", "\n", "'stride'", ":", "2", "\n", "}", "\n", "\n", "norm_param", "=", "{", "\n", "'name'", ":", "'batch'", "\n", "}", "\n", "\n", "activation_param", "=", "{", "\n", "'name'", ":", "'leaky_relu'", "\n", "}", "\n", "\n", "dropout_param", "=", "{", "\n", "'name'", ":", "'none'", "\n", "}", "\n", "\n", "model", "=", "PatchDiscriminator", "(", "\n", "ndim", "=", "2", ",", "\n", "out_channels", "=", "1", ",", "\n", "nlayer", "=", "5", ",", "\n", "nfilter", "=", "32", ",", "\n", "conv_param", "=", "conv_param", ",", "\n", "pool_param", "=", "pool_param", ",", "\n", "norm_param", "=", "norm_param", ",", "\n", "activation_param", "=", "activation_param", ",", "\n", "dropout_param", "=", "dropout_param", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "rand", "(", "2", ",", "1", ",", "256", ",", "256", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y", "=", "model", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "dump_graph", "(", "y", ",", "'graph_2d_discriminator.dot'", ")", "\n", "model", ".", "save_args", "(", "'2d_discriminator.json'", ")", "\n", "model", ".", "show_statistics", "(", ")", "\n", "print", "(", "'-----'", ")", "\n", "\n", "print", "(", "model", ".", "count_params", "(", ")", ")", "\n", "print", "(", "'-----'", ")", "\n", "\n", "# check the shape of the first left singular vector.", "\n", "vector_name", "=", "'W_u'", "\n", "print", "(", "vector_name", ")", "\n", "print", "(", "getattr", "(", "model", ".", "block_0", ".", "conv_0", ",", "vector_name", ")", ".", "shape", ")", "\n", "print", "(", "'-----'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_visualizer.test_classification_sparse": [[6, 35], ["chainer_bcnn.visualizer.ImageVisualizer", "numpy.random.rand", "numpy.random.randint", "numpy.random.randint", "range", "chainer_bcnn.visualizer.ImageVisualizer.save", "chainer_bcnn.visualizer.ImageVisualizer.add_example"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer.save", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer.add_example"], ["def", "test_classification_sparse", "(", ")", ":", "\n", "\n", "    ", "_categorical_cmaps", "=", "{", "\n", "'y'", ":", "_default_cmap", ",", "\n", "'t'", ":", "_default_cmap", ",", "\n", "}", "\n", "\n", "_categorical_clims", "=", "{", "\n", "'x'", ":", "(", "0.", ",", "1.", ")", ",", "\n", "}", "\n", "\n", "_categorical_transforms", "=", "{", "\n", "'x'", ":", "lambda", "x", ":", "x", ",", "\n", "'y'", ":", "lambda", "x", ":", "x", ",", "\n", "'t'", ":", "lambda", "x", ":", "x", ",", "\n", "}", "\n", "\n", "# NOTE: out is an unexpected argument.", "\n", "visualizer", "=", "ImageVisualizer", "(", "transforms", "=", "_categorical_transforms", ",", "\n", "cmaps", "=", "_categorical_cmaps", ",", "\n", "clims", "=", "_categorical_clims", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "rand", "(", "3", ",", "100", ",", "200", ")", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "10", ",", "(", "100", ",", "200", ")", ")", "\n", "t", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "10", ",", "(", "100", ",", "200", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "        ", "visualizer", ".", "add_example", "(", "x", ",", "y", ",", "t", ")", "\n", "", "visualizer", ".", "save", "(", "'test_classification_sparse.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_visualizer.test_classification": [[37, 66], ["chainer_bcnn.visualizer.ImageVisualizer", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "range", "chainer_bcnn.visualizer.ImageVisualizer.save", "chainer_bcnn.visualizer.ImageVisualizer.add_example", "numpy.argmax", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer.save", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer.add_example"], ["", "def", "test_classification", "(", ")", ":", "\n", "\n", "    ", "_categorical_cmaps", "=", "{", "\n", "'y'", ":", "_default_cmap", ",", "\n", "'t'", ":", "_default_cmap", ",", "\n", "}", "\n", "\n", "_categorical_clims", "=", "{", "\n", "'x'", ":", "(", "0.", ",", "1.", ")", ",", "\n", "}", "\n", "\n", "_categorical_transforms", "=", "{", "\n", "'x'", ":", "lambda", "x", ":", "x", ",", "\n", "'y'", ":", "lambda", "x", ":", "np", ".", "argmax", "(", "x", ",", "axis", "=", "0", ")", ",", "\n", "'t'", ":", "lambda", "x", ":", "np", ".", "argmax", "(", "x", ",", "axis", "=", "0", ")", ",", "\n", "}", "\n", "\n", "# NOTE: out is an unexpected argument.", "\n", "visualizer", "=", "ImageVisualizer", "(", "transforms", "=", "_categorical_transforms", ",", "\n", "cmaps", "=", "_categorical_cmaps", ",", "\n", "clims", "=", "_categorical_clims", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "rand", "(", "3", ",", "100", ",", "200", ")", "\n", "y", "=", "np", ".", "random", ".", "rand", "(", "10", ",", "100", ",", "200", ")", "\n", "t", "=", "np", ".", "random", ".", "rand", "(", "10", ",", "100", ",", "200", ")", "\n", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "        ", "visualizer", ".", "add_example", "(", "x", ",", "y", ",", "t", ")", "\n", "", "visualizer", ".", "save", "(", "'test_classification.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_visualizer.test_regression": [[68, 91], ["chainer_bcnn.visualizer.ImageVisualizer", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "range", "chainer_bcnn.visualizer.ImageVisualizer.save", "chainer_bcnn.visualizer.ImageVisualizer.add_example"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer.save", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.visualizer.image.ImageVisualizer.add_example"], ["", "def", "test_regression", "(", ")", ":", "\n", "\n", "    ", "_regression_cmaps", "=", "None", "\n", "\n", "_regression_clims", "=", "{", "\n", "'x'", ":", "(", "0.", ",", "1.", ")", ",", "\n", "'y'", ":", "(", "0.", ",", "1.", ")", ",", "\n", "'t'", ":", "(", "0.", ",", "1.", ")", ",", "\n", "}", "\n", "\n", "_regression_transforms", "=", "None", "\n", "\n", "visualizer", "=", "ImageVisualizer", "(", "transforms", "=", "_regression_transforms", ",", "\n", "cmaps", "=", "_regression_cmaps", ",", "\n", "clims", "=", "_regression_clims", ")", "\n", "\n", "x", "=", "np", ".", "random", ".", "rand", "(", "3", ",", "100", ",", "200", ")", "\n", "y", "=", "np", ".", "random", ".", "rand", "(", "5", ",", "100", ",", "200", ")", "\n", "t", "=", "np", ".", "random", ".", "rand", "(", "5", ",", "100", ",", "200", ")", "\n", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "        ", "visualizer", ".", "add_example", "(", "x", ",", "y", ",", "t", ")", "\n", "", "visualizer", ".", "save", "(", "'test_regression.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_visualizer.main": [[93, 97], ["test_visualizer.test_classification_sparse", "test_visualizer.test_classification", "test_visualizer.test_regression"], "function", ["home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_visualizer.test_classification_sparse", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_visualizer.test_classification", "home.repos.pwc.inspect_result.yuta-hi_bayesian_unet.tests.test_visualizer.test_regression"], ["", "def", "main", "(", ")", ":", "\n", "    ", "test_classification_sparse", "(", ")", "\n", "test_classification", "(", ")", "\n", "test_regression", "(", ")", "\n", "\n"]]}