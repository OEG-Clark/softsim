{"home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.img_trans.find_closest_img": [[31, 69], ["logging.getLogger", "generate_latent.evalu", "logging.getLogger.info", "torch.load", "torch.load", "range", "torch.from_numpy", "torch.from_numpy", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "float", "logging.getLogger.info", "mnist.evalu.max", "len", "numpy.array", "PIL.Image.fromarray", "torchvision.Compose", "trans.Compose.", "transform.to", "torch.dist", "torch.dist", "generate_latent.evalu", "torch.from_numpy.append", "transform.numpy", "x.cpu", "torch.unsqueeze", "torch.unsqueeze", "mnist.evalu.max", "torchvision.ToTensor"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu"], ["def", "find_closest_img", "(", "x", ",", "modelname", ",", "target_class", ",", "test_set", ",", "device", ",", "gpu_ids", ",", "classifier", ")", ":", "\n", "    ", "'''\n    @Description: Find the closest data point in test dataset with a different class label than input x\n    @param {type}: {x: input image, type: tensor}\n                   {modelname: the name of classifier, type: model object}\n                   {target_class: the target class label, type: int}\n                   {test_set: the dir of test dataset, type: string} \n    @return: the closest data point, type: tensor \n    '''", "\n", "mylogger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "if", "modelname", "==", "'lenet'", ":", "\n", "        ", "modelfile", "=", "'./generate_latent/mnist_cnn.pt'", "\n", "output", "=", "mnist", ".", "evalu", "(", "x", ",", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "mylogger", ".", "info", "(", "'Finding the closest image in the test set with target class label.'", ")", "\n", "test_img", "=", "torch", ".", "load", "(", "test_set", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "# load all test data in mnist test dataset", "\n", "target_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "test_img", "[", "1", "]", ")", ")", ":", "\n", "            ", "if", "test_img", "[", "1", "]", "[", "i", "]", "==", "target_class", ":", "\n", "                ", "target_index", ".", "append", "(", "i", ")", "\n", "", "", "target_index", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "target_index", ")", ")", "\n", "test_labels", "=", "torch", ".", "index_select", "(", "test_img", "[", "1", "]", ",", "0", ",", "target_index", ")", "\n", "test_imgs", "=", "torch", ".", "index_select", "(", "test_img", "[", "0", "]", ",", "0", ",", "target_index", ")", "\n", "min_dist", "=", "float", "(", "'inf'", ")", "\n", "target_img", "=", "[", "]", "\n", "for", "img", "in", "test_imgs", ":", "\n", "            ", "img", "=", "Image", ".", "fromarray", "(", "img", ".", "numpy", "(", ")", ",", "mode", "=", "'L'", ")", "\n", "transform", "=", "trans", ".", "Compose", "(", "[", "trans", ".", "ToTensor", "(", ")", "]", ")", "\n", "img", "=", "transform", "(", "img", ")", "\n", "img", ".", "to", "(", "device", ")", "\n", "dist", "=", "torch", ".", "dist", "(", "img", ",", "x", ".", "cpu", "(", ")", ")", "\n", "output", "=", "mnist", ".", "evalu", "(", "torch", ".", "unsqueeze", "(", "img", ",", "dim", "=", "0", ")", ",", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ")", "\n", "target_pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                ", "min_dist", "=", "dist", "\n", "target_img", "=", "img", "\n", "", "", "mylogger", ".", "info", "(", "'The predicted label of input image is {}; the targetsedly predicted label is {}'", ".", "format", "(", "pred", ",", "target_pred", ")", ")", "\n", "return", "target_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.img_trans.get_direction": [[73, 249], ["logging.getLogger", "img_trans.find_closest_img", "torch.unsqueeze.shape.__len__", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze.shape.__len__", "torch.unsqueeze", "torch.unsqueeze", "feaExtractor.get_activation", "feaExtractor.get_activation", "torch.dist", "torch.dist", "feaExtractor.get_activation", "torch.randn", "torch.randn", "dict", "os.path.join", "torch.unsqueeze", "torch.unsqueeze", "logging.getLogger.error", "ValueError", "os.path.exists", "logging.getLogger.info", "range", "torch.from_numpy", "torch.from_numpy", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.from_numpy", "torch.from_numpy", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "range", "numpy.empty", "logging.getLogger.info", "range", "numpy.empty", "logging.getLogger.info", "np.append.astype", "np.append.astype", "dict", "dict", "cav.get_or_train_cav", "cav.CAV.load_cav", "CAV.load_cav.get_direction", "CAV.load_cav.get_direction", "len", "torch.from_numpy.type", "torch.from_numpy.type", "cav.CAV.cav_key().replace", "torch.load", "torch.load", "len", "numpy.array", "numpy.array", "len", "torch.unsqueeze.type", "torch.unsqueeze.type", "torch.unsqueeze.type", "torch.unsqueeze.type", "torch.unsqueeze.shape.__len__", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze.shape.__len__", "torch.unsqueeze", "torch.unsqueeze", "int", "feaExtractor.get_activation", "src_acts.extend", "numpy.append", "int", "feaExtractor.get_activation", "tgt_acts.extend", "numpy.append", "torch.is_tensor", "torch.is_tensor", "torch.from_numpy", "torch.from_numpy", "attention.type.type", "torch.from_numpy.squeeze", "act_input.squeeze", "torchvision.CIFAR10", "torch.load.append", "torch.load.append", "torch.from_numpy.append", "numpy.ceil", "feaExtractor.get_activation.detach().cpu().numpy", "numpy.ceil", "feaExtractor.get_activation.detach().cpu().numpy", "torch.randn", "torch.randn", "cav.CAV.cav_key", "torch.randperm().tolist", "torch.randperm().tolist", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.empty", "numpy.empty", "generate_latent.celebA_classify.celebA_dataset", "torchvision.ToTensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.load.append", "torch.load.append", "torch.from_numpy.append", "torchvision.Compose", "int", "PIL.Image.open", "numpy.append", "int", "labelLine.split.rstrip", "labelLine.split.split", "int", "numpy.append", "feaExtractor.get_activation.detach().cpu", "feaExtractor.get_activation.detach().cpu", "torch.randperm", "torch.randperm", "datasets.SVHN.data[].transpose", "numpy.array", "numpy.array", "torchvision.SVHN", "torch.load.append", "torch.load.append", "torchvision.SVHN", "torch.load.append", "torch.load.append", "torch.from_numpy.squeeze", "torchvision.ToTensor", "len", "len", "numpy.array", "[].split", "torch.randperm().tolist", "torch.randperm().tolist", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "feaExtractor.get_activation.detach", "feaExtractor.get_activation.detach", "torchvision.ToTensor", "int", "torchvision.ToTensor", "torch.randperm", "torch.randperm", "filename.split", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.img_trans.find_closest_img", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.feaExtract.FeatureExtractor.get_activation", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.feaExtract.FeatureExtractor.get_activation", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.feaExtract.FeatureExtractor.get_activation", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.get_or_train_cav", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.load_cav", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.get_direction", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.get_direction", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.feaExtract.FeatureExtractor.get_activation", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.feaExtract.FeatureExtractor.get_activation", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.cav_key"], ["", "", "def", "get_direction", "(", "args", ",", "input_img", ",", "cav_imgnum", ",", "source_class", ",", "target_class", ",", "train_set", ",", "device", ",", "classifier", ",", "feaExtractor", ",", "cav_dir", ",", "source_target", ")", ":", "\n", "    ", "'''\n    @Description: This function is used for getting feature transform directions\n    @param {type} \n        direction_type: \n        input_img: img for getting diretions\n        train_set: training dataset for getting cav\n    @return: \n    '''", "\n", "mylogger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "if", "args", ".", "direction_type", "==", "'closest'", ":", "\n", "        ", "target_img", "=", "find_closest_img", "(", "input_img", ",", "args", ".", "DNN", ",", "target_class", ",", "train_set", ",", "device", ",", "args", ".", "gpu_ids", ",", "classifier", ")", "\n", "if", "input_img", ".", "shape", ".", "__len__", "(", ")", "!=", "4", ":", "\n", "            ", "input_img", "=", "torch", ".", "unsqueeze", "(", "input_img", ",", "dim", "=", "0", ")", "\n", "", "if", "target_img", ".", "shape", ".", "__len__", "(", ")", "!=", "4", ":", "\n", "            ", "target_img", "=", "torch", ".", "unsqueeze", "(", "target_img", ",", "dim", "=", "0", ")", "\n", "", "act_input", "=", "feaExtractor", ".", "get_activation", "(", "layer", "=", "0", ",", "x", "=", "input_img", ")", "[", "0", "]", "# get activation of input image    ", "\n", "act_target", "=", "feaExtractor", ".", "get_activation", "(", "layer", "=", "0", ",", "x", "=", "target_img", ")", "[", "0", "]", "\n", "direction", "=", "(", "act_input", "-", "act_target", ")", "/", "torch", ".", "dist", "(", "act_input", ",", "act_target", ")", "# the direction of image transform", "\n", "", "elif", "args", ".", "direction_type", "==", "'random'", ":", "\n", "        ", "act_input", "=", "feaExtractor", ".", "get_activation", "(", "layer", "=", "0", ",", "x", "=", "input_img", ")", "[", "0", "]", "# get activation of input image", "\n", "direction", "=", "torch", ".", "randn", "(", "act_input", ".", "squeeze", "(", ")", ".", "shape", "[", "0", "]", ")", "/", "10.0", "\n", "#print(direction)", "\n", "direction", "=", "[", "direction", "]", "\n", "", "elif", "args", ".", "direction_type", "==", "'cav'", "or", "args", ".", "direction_type", "==", "'cavRandom'", ":", "\n", "        ", "alpha", "=", "0.1", "\n", "cav_hapram", "=", "dict", "(", ")", "\n", "cav_hapram", "[", "'alpha'", "]", "=", "alpha", "\n", "cav_hapram", "[", "'model_type'", "]", "=", "args", ".", "direction_model", "\n", "cav_hapram", "[", "'input_dim'", "]", "=", "args", ".", "dim", "\n", "cav_path", "=", "os", ".", "path", ".", "join", "(", "\n", "cav_dir", ",", "CAV", ".", "cav_key", "(", "[", "source_class", ",", "target_class", "]", ",", "args", ".", "layer", ",", "args", ".", "direction_model", ",", "\n", "alpha", ")", ".", "replace", "(", "'/'", ",", "'.'", ")", "+", "'.pkl'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cav_path", ")", ":", "\n", "            ", "mylogger", ".", "info", "(", "'CAV {} does not exist. Start training.'", ".", "format", "(", "cav_path", ")", ")", "\n", "train_img", "=", "[", "]", "\n", "if", "args", ".", "dataset", "==", "'mnist'", "or", "args", ".", "dataset", "==", "'mnist_part'", ":", "\n", "                ", "train_img", "=", "torch", ".", "load", "(", "train_set", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "# load all train data in mnist train dataset", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar'", ":", "\n", "                ", "train_data", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./datasets/cifar/'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "trans", ".", "Compose", "(", "[", "trans", ".", "ToTensor", "(", ")", ",", "]", ")", ")", "\n", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "train_data", ")", ")", ".", "tolist", "(", ")", "[", "0", ":", "int", "(", "args", ".", "percent", "*", "len", "(", "train_data", ")", ")", "]", "\n", "train_img", ".", "append", "(", "torch", ".", "from_numpy", "(", "(", "train_data", ".", "data", "[", "indices", "]", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "/", "255.0", ")", ")", "\n", "train_img", ".", "append", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "train_data", ".", "targets", ")", "[", "indices", "]", ")", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'celebA_post'", ":", "\n", "                ", "train_imgTmp", "=", "np", ".", "empty", "(", "shape", "=", "[", "0", ",", "128", ",", "128", ",", "3", "]", ")", "\n", "train_labelTmp", "=", "np", ".", "empty", "(", "shape", "=", "[", "0", ",", "1", "]", ")", "\n", "imgset", "=", "celebA_dataset", "(", "train_set", ",", "train", "=", "False", ")", "\n", "imgTrans", "=", "trans", ".", "ToTensor", "(", ")", "\n", "img_names", "=", "imgset", ".", "filenames", "\n", "labels", "=", "imgset", ".", "labelsList", "\n", "for", "filename", "in", "img_names", ":", "\n", "                    ", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "train_imgTmp", "=", "np", ".", "append", "(", "train_imgTmp", ",", "np", ".", "array", "(", "img", ")", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "idx", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "labelLine", "=", "labels", "[", "idx", "-", "1", "]", "\n", "labelLine", "=", "labelLine", ".", "rstrip", "(", "'\\n'", ")", "\n", "labelLine", "=", "labelLine", ".", "split", "(", ")", "\n", "label", "=", "int", "(", "labelLine", "[", "32", "]", ")", "\n", "if", "label", "==", "-", "1", ":", "\n", "                        ", "label", "=", "0", "\n", "", "train_labelTmp", "=", "np", ".", "append", "(", "train_labelTmp", ",", "np", ".", "array", "(", "[", "[", "label", "]", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "train_imgTmp", "=", "torch", ".", "from_numpy", "(", "(", "train_imgTmp", "/", "255", ")", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", ")", "# change to [-1, 3,128,128]", "\n", "train_labelTmp", "=", "torch", ".", "from_numpy", "(", "train_labelTmp", ")", "\n", "train_img", ".", "append", "(", "train_imgTmp", ")", "\n", "train_img", ".", "append", "(", "train_labelTmp", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'SVHN'", ":", "\n", "                ", "if", "args", ".", "dataAug", "==", "'True'", ":", "\n", "                   ", "train_data", "=", "datasets", ".", "SVHN", "(", "'./datasets/SVHN/'", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "transform", "=", "trans", ".", "ToTensor", "(", ")", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "train_data", ")", ")", ".", "tolist", "(", ")", "[", "0", ":", "int", "(", "args", ".", "percent", "*", "len", "(", "train_data", ")", ")", "]", "\n", "train_img", ".", "append", "(", "torch", ".", "from_numpy", "(", "train_data", ".", "data", "[", "indices", "]", ")", ")", "\n", "train_img", ".", "append", "(", "torch", ".", "from_numpy", "(", "train_data", ".", "labels", "[", "indices", "]", ")", ")", "\n", "", "else", ":", "\n", "                   ", "train_data", "=", "datasets", ".", "SVHN", "(", "'./datasets/SVHN/'", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "\n", "transform", "=", "trans", ".", "ToTensor", "(", ")", ")", "\n", "train_img", ".", "append", "(", "torch", ".", "from_numpy", "(", "train_data", ".", "data", ")", ")", "\n", "train_img", ".", "append", "(", "torch", ".", "from_numpy", "(", "train_data", ".", "labels", ")", ")", "\n", "\n", "", "", "get_act_batch", "=", "args", ".", "cav_imgnum", "\n", "target_index", "=", "[", "]", "\n", "source_index", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "train_img", "[", "1", "]", ")", ")", ":", "\n", "                ", "if", "train_img", "[", "1", "]", "[", "i", "]", "==", "target_class", ":", "\n", "                    ", "target_index", ".", "append", "(", "i", ")", "# get index of source image", "\n", "", "elif", "train_img", "[", "1", "]", "[", "i", "]", "==", "source_class", ":", "\n", "                    ", "source_index", ".", "append", "(", "i", ")", "# get index of source image", "\n", "", "", "target_index", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "target_index", "[", ":", "cav_imgnum", "]", ")", ")", "# get specific number of target images", "\n", "train_target_labels", "=", "torch", ".", "index_select", "(", "train_img", "[", "1", "]", ",", "0", ",", "target_index", ")", "\n", "train_target_imgs", "=", "torch", ".", "index_select", "(", "train_img", "[", "0", "]", ",", "0", ",", "target_index", ")", "# shape: [num_img, channels, weight, height]", "\n", "source_index", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "source_index", "[", ":", "cav_imgnum", "]", ")", ")", "# get specific number of source images", "\n", "train_source_labels", "=", "torch", ".", "index_select", "(", "train_img", "[", "1", "]", ",", "0", ",", "source_index", ")", "\n", "train_source_imgs", "=", "torch", ".", "index_select", "(", "train_img", "[", "0", "]", ",", "0", ",", "source_index", ")", "\n", "\n", "if", "len", "(", "args", ".", "gpu_ids", ")", "==", "0", ":", "\n", "                ", "train_target_imgs", "=", "train_target_imgs", ".", "type", "(", "'torch.FloatTensor'", ")", "\n", "train_source_imgs", "=", "train_source_imgs", ".", "type", "(", "'torch.FloatTensor'", ")", "\n", "", "else", ":", "\n", "                ", "train_target_imgs", "=", "train_target_imgs", ".", "type", "(", "'torch.cuda.FloatTensor'", ")", "\n", "train_source_imgs", "=", "train_source_imgs", ".", "type", "(", "'torch.cuda.FloatTensor'", ")", "\n", "", "if", "train_source_imgs", ".", "shape", ".", "__len__", "(", ")", "!=", "4", ":", "\n", "                ", "train_source_imgs", "=", "torch", ".", "unsqueeze", "(", "train_source_imgs", ",", "dim", "=", "1", ")", "\n", "", "if", "train_target_imgs", ".", "shape", ".", "__len__", "(", ")", "!=", "4", ":", "\n", "                ", "train_target_imgs", "=", "torch", ".", "unsqueeze", "(", "train_target_imgs", ",", "dim", "=", "1", ")", "\n", "", "src_acts", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "np", ".", "ceil", "(", "args", ".", "cav_imgnum", "//", "get_act_batch", ")", ")", ")", ":", "# choose the upper number of batch", "\n", "                ", "src_act", "=", "feaExtractor", ".", "get_activation", "(", "layer", "=", "0", ",", "x", "=", "train_source_imgs", "[", "i", "*", "get_act_batch", ":", "(", "i", "+", "1", ")", "*", "get_act_batch", ",", ":", "]", ")", "# get activation of source images within the batch; type: list", "\n", "#print(src_act.__len__())", "\n", "src_acts", ".", "extend", "(", "src_act", ")", "\n", "#print(i, cav_imgnum, args.cav_imgnum, train_source_imgs[i*get_act_batch:(i+1)*get_act_batch,:].shape, src_acts.__len__())", "\n", "\n", "", "source_acts", "=", "np", ".", "empty", "(", "shape", "=", "[", "0", ",", "args", ".", "dim", "]", ")", "\n", "for", "src_act", "in", "src_acts", ":", "\n", "               ", "source_acts", "=", "np", ".", "append", "(", "source_acts", ",", "src_act", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", "\n", "", "mylogger", ".", "info", "(", "'Shape of source images activations:{}'", ".", "format", "(", "source_acts", ".", "shape", ")", ")", "\n", "del", "src_acts", ",", "src_act", "\n", "\n", "tgt_acts", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "np", ".", "ceil", "(", "args", ".", "cav_imgnum", "//", "get_act_batch", ")", ")", ")", ":", "# choose the upper number of batch", "\n", "                ", "tgt_act", "=", "feaExtractor", ".", "get_activation", "(", "layer", "=", "0", ",", "x", "=", "train_target_imgs", "[", "i", "*", "get_act_batch", ":", "(", "i", "+", "1", ")", "*", "get_act_batch", ",", ":", "]", ")", "# get activation of target images within the batch: type list", "\n", "tgt_acts", ".", "extend", "(", "tgt_act", ")", "\n", "", "target_acts", "=", "np", ".", "empty", "(", "shape", "=", "[", "0", ",", "args", ".", "dim", "]", ")", "\n", "for", "tgt_act", "in", "tgt_acts", ":", "\n", "              ", "target_acts", "=", "np", ".", "append", "(", "target_acts", ",", "tgt_act", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", ")", "\n", "", "mylogger", ".", "info", "(", "'Shape of target images activations:{}'", ".", "format", "(", "target_acts", ".", "shape", ")", ")", "\n", "del", "tgt_act", ",", "tgt_acts", "\n", "\n", "source_acts", "=", "source_acts", ".", "astype", "(", "np", ".", "float32", ")", "\n", "target_acts", "=", "target_acts", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "source_acts_dit", "=", "dict", "(", ")", "\n", "target_acts_dit", "=", "dict", "(", ")", "\n", "source_acts_dit", "[", "args", ".", "layer", "]", "=", "source_acts", "# save source activations (array type) to dictionary", "\n", "target_acts_dit", "[", "args", ".", "layer", "]", "=", "target_acts", "# save target activations (array type) to dictionary", "\n", "# print(source_acts.dtype, target_acts.dtype)", "\n", "'''\n            save activations into a dit: acts[class][bottleneck]  acts takes for of\n                {'source_class':{'bottleneck name1':[...act array...],\n                            'bottleneck name2':[...act array...],...\n                'target_class':{'bottleneck name1':[...act array...],\n            '''", "\n", "acts", "=", "{", "source_class", ":", "source_acts_dit", ",", "target_class", ":", "target_acts_dit", "}", "# Save in this structure for using code in TCAV directly", "\n", "cav_instance", "=", "get_or_train_cav", "(", "[", "source_class", ",", "target_class", "]", ",", "args", ".", "layer", ",", "acts", ",", "args", ".", "gpu_ids", ",", "cav_dir", ",", "cav_hapram", ")", "\n", "", "else", ":", "\n", "# mylogger.info('CAV already exists: {}'.format(cav_path))", "\n", "            ", "cav_instance", "=", "CAV", ".", "load_cav", "(", "cav_path", ")", "\n", "\n", "", "if", "source_target", "==", "'source'", ":", "\n", "            ", "direction_class", "=", "target_class", "\n", "", "elif", "source_target", "==", "'target'", ":", "\n", "            ", "direction_class", "=", "source_class", "\n", "\n", "", "if", "cav_hapram", "[", "'model_type'", "]", "==", "'att_svm'", ":", "\n", "            ", "direction", ",", "attention", "=", "cav_instance", ".", "get_direction", "(", "direction_class", ")", "# If the parameter is source_class, the direction is target class to source class. If it is target_class, the direction is source class to target class.", "\n", "", "else", ":", "\n", "            ", "direction", "=", "cav_instance", ".", "get_direction", "(", "direction_class", ")", "# If the parameter is source_class, the direction is target class to source class. If it is target_class, the direction is source class to target class.", "\n", "if", "not", "torch", ".", "is_tensor", "(", "direction", ")", ":", "\n", "                ", "direction", "=", "torch", ".", "from_numpy", "(", "direction", ")", "\n", "", "", "direction", "=", "torch", ".", "unsqueeze", "(", "direction", ",", "dim", "=", "0", ")", "\n", "if", "len", "(", "args", ".", "gpu_ids", ")", "==", "0", ":", "\n", "            ", "direction", "=", "direction", ".", "type", "(", "'torch.FloatTensor'", ")", "\n", "", "else", ":", "\n", "            ", "direction", "=", "direction", ".", "type", "(", "'torch.cuda.FloatTensor'", ")", "\n", "if", "cav_hapram", "[", "'model_type'", "]", "==", "'att_svm'", ":", "\n", "              ", "attention", "=", "attention", ".", "type", "(", "'torch.cuda.FloatTensor'", ")", "\n", "", "", "if", "args", ".", "direction_type", "==", "'cavRandom'", ":", "\n", "            ", "direction", "=", "direction", ".", "squeeze", "(", ")", "+", "torch", ".", "randn", "(", "direction", ".", "squeeze", "(", ")", ".", "shape", "[", "0", "]", ",", "device", "=", "args", ".", "device", ")", "/", "100.0", "\n", "#print(direction)", "\n", "", "if", "cav_hapram", "[", "'model_type'", "]", "==", "'att_svm'", ":", "\n", "            ", "direction", "=", "[", "direction", ",", "attention", "]", "\n", "", "else", ":", "\n", "            ", "direction", "=", "[", "direction", "]", "\n", "", "", "else", ":", "\n", "        ", "mylogger", ".", "error", "(", "'Unknown direction type. Please check the parameter direction_type.'", ")", "\n", "raise", "ValueError", "(", "'Unknown direction type: {}'", ".", "format", "(", "args", ".", "direction_type", ")", ")", "\n", "# sys.exit()", "\n", "", "return", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.img_trans.compute_eps_generate_img": [[251, 435], ["os.path.join", "os.path.exists", "generate_latent.GSN.GSN.mnist_untransform", "torch.squeeze", "torch.squeeze", "float", "numpy.array", "enumerate", "torch.unsqueeze.shape.__len__", "torch.unsqueeze", "torch.unsqueeze", "feaExtractor.get_activation", "len", "torch.unsqueeze", "torch.unsqueeze", "generate_latent.evalu", "PIL.Image.fromarray().save", "generator.restore_model", "os.path.join", "svm_atten.svm_attention", "generator.generate_from_feature", "os.path.join", "round", "mylogger.debug", "mylogger.debug", "torch.squeeze", "torch.squeeze", "svhn.evalu.max", "generate_latent.evalu", "svhn.evalu.max", "PIL.Image.fromarray().save", "img_dir.split", "int", "int", "generator.generate_from_feature", "round", "os.path.join", "svm_atten.svm_attention", "generate_latent.evalu", "generate_latent.evalu", "mylogger.debug", "generate_latent.evalu", "PIL.Image.fromarray", "generate_latent.evalu", "pred.cpu().numpy", "print", "img_dir.split", "int", "int", "svhn.evalu.max", "generate_latent.evalu", "svhn.evalu.max", "torch.unsqueeze", "torch.unsqueeze", "svhn.evalu.max", "int", "int", "generate_latent.evalu", "svhn.evalu.max", "os.path.exists", "numpy.array", "PIL.Image.fromarray().save", "float", "generate_latent.evalu", "svhn.evalu.max", "numpy.uint8", "PIL.Image.fromarray", "str", "str", "svm_atten.svm_attention.get_attention", "torch.squeeze().to", "torch.squeeze().to", "torch.unsqueeze", "torch.unsqueeze", "svhn.evalu.max", "generate_latent.evalu", "svhn.evalu.max", "svm_atten.svm_attention.get_attention", "torch.squeeze().to", "torch.squeeze().to", "generate_latent.evalu", "torch.unsqueeze", "torch.unsqueeze", "pred.cpu().numpy", "trans_label.cpu().numpy", "torch.unsqueeze", "torch.unsqueeze", "int", "int", "generate_latent.evalu", "PIL.Image.fromarray().save", "torch.unsqueeze.cpu().numpy", "numpy.uint8", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "generate_latent.evalu", "pred.cpu", "input_label.cpu().numpy", "str", "str", "torch.squeeze", "torch.squeeze", "generate_latent.evalu", "svhn.evalu.max", "pred.cpu().numpy", "trans_label.cpu().numpy", "torch.unsqueeze", "torch.unsqueeze", "int", "int", "generate_latent.evalu", "svhn.evalu.max", "int", "int", "PIL.Image.fromarray", "torch.unsqueeze.cpu().numpy().transpose", "torch.squeeze", "torch.squeeze", "torch.unsqueeze", "torch.unsqueeze", "generate_latent.evalu", "svhn.evalu.max", "img_dir.split", "torch.squeeze", "torch.squeeze", "pred.cpu", "trans_label.cpu", "pred.cpu().numpy", "trans_label.cpu().numpy", "torch.unsqueeze", "torch.unsqueeze", "int", "int", "pred.cpu().numpy", "trans_label.cpu().numpy", "numpy.array", "numpy.uint8", "PIL.Image.fromarray", "torch.unsqueeze.cpu", "torch.unsqueeze", "torch.unsqueeze", "input_label.cpu", "pred.cpu", "trans_label.cpu", "pred.cpu().numpy", "trans_label.cpu().numpy", "generator.generate_from_feature.detach().cpu().numpy", "numpy.uint8", "torch.unsqueeze.cpu().numpy", "pred.cpu", "trans_label.cpu", "pred.cpu", "trans_label.cpu", "int", "int", "generator.generate_from_feature.detach().cpu().numpy().transpose", "pred.cpu", "trans_label.cpu", "pred.cpu().numpy", "trans_label.cpu().numpy", "generator.generate_from_feature.detach().cpu", "torch.unsqueeze.cpu", "generator.generate_from_feature.detach().cpu().numpy", "pred.cpu", "trans_label.cpu", "generator.generate_from_feature.detach", "generator.generate_from_feature.detach().cpu", "generator.generate_from_feature.detach"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.mnist_untransform", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.feaExtract.FeatureExtractor.get_activation", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.restore_model", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.generate_from_feature", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.generate_from_feature", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.svm_attention.get_attention", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.svm_attention.get_attention", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu"], ["", "def", "compute_eps_generate_img", "(", "args", ",", "generator", ",", "input_img", ",", "direction", ",", "targetlabel", ",", "img_dir", ",", "img_idx", ",", "device", ",", "classifier", ",", "feaExtractor", ",", "eps_list", ",", "g", ")", ":", "\n", "    ", "mylogger", "=", "args", ".", "logger", "\n", "if", "input_img", ".", "shape", ".", "__len__", "(", ")", "!=", "4", ":", "\n", "        ", "input_img", "=", "torch", ".", "unsqueeze", "(", "input_img", ",", "dim", "=", "0", ")", "\n", "", "act_input", "=", "feaExtractor", ".", "get_activation", "(", "layer", "=", "0", ",", "x", "=", "input_img", ")", "[", "0", "]", "# get activation of input image;shape:1 X input_dim", "\n", "if", "len", "(", "act_input", ".", "shape", ")", "!=", "2", ":", "\n", "        ", "act_input", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "squeeze", "(", "act_input", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# --initialize the model, to check whether the target class label is equal to original label--", "\n", "", "if", "args", ".", "DNN", "==", "'lenet'", ":", "\n", "        ", "modelfile", "=", "'./generate_latent/mnist_cnn.pt'", "\n", "output", "=", "mnist", ".", "evalu", "(", "act_input", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ",", "wholemodel", "=", "False", ")", "\n", "input_label", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "filename", "=", "'mnist_{0:06d}_ori.png'", ".", "format", "(", "img_idx", ")", "\n", "", "elif", "args", ".", "DNN", "==", "'cifarnet'", ":", "\n", "        ", "modelfile", "=", "'./generate_latent/pytorch_cifar/checkpoint/cifar_cnn.pt'", "\n", "output", "=", "cifar", ".", "evalu", "(", "act_input", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ",", "wholemodel", "=", "False", ")", "\n", "_", ",", "input_label", "=", "output", ".", "max", "(", "1", ")", "\n", "filename", "=", "'cifar_{0:06d}_ori.png'", ".", "format", "(", "img_idx", ")", "\n", "", "elif", "args", ".", "DNN", "==", "'celebANet'", ":", "\n", "        ", "modelfile", "=", "'./generate_latent/celebA_cnn.pt'", "\n", "output", "=", "celebA", ".", "evalu", "(", "act_input", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ",", "wholemodel", "=", "False", ")", "\n", "input_label", "=", "output", ">=", "0.5", "\n", "filename", "=", "'celebA_{0:06d}_ori.png'", ".", "format", "(", "img_idx", ")", "\n", "", "elif", "args", ".", "DNN", "==", "'svhnNet'", ":", "\n", "        ", "modelfile", "=", "'./generate_latent/svhn_cnn.pt'", "\n", "output", "=", "svhn", ".", "evalu", "(", "act_input", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ",", "wholemodel", "=", "False", ")", "\n", "_", ",", "input_label", "=", "output", ".", "max", "(", "1", ")", "\n", "filename", "=", "'svhn_{0:06d}_ori.png'", ".", "format", "(", "img_idx", ")", "\n", "\n", "", "filename_images", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "filename", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "filename_images", ")", ":", "\n", "        ", "return", "0", ",", "0", ",", "0", "\n", "", "input_img", "=", "GSN", ".", "mnist_untransform", "(", "input_img", ")", "\n", "input_img", "=", "torch", ".", "squeeze", "(", "input_img", ")", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "input_img", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "mode", "=", "'L'", ")", ".", "save", "(", "filename_images", ")", "\n", "", "elif", "args", ".", "dataset", "in", "[", "'cifar'", ",", "'celebA_post'", ",", "'SVHN'", "]", ":", "\n", "        ", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "input_img", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", ")", ".", "save", "(", "filename_images", ")", "\n", "\n", "", "if", "args", ".", "phase", "==", "'test'", ":", "\n", "        ", "g", "=", "generator", ".", "restore_model", "(", "args", ".", "iteration", ")", "\n", "", "eps", "=", "args", ".", "eps_init", "\n", "# if len(args.gpu_ids) != 0:", "\n", "#   eps = eps.cuda()", "\n", "success", "=", "False", "\n", "min_eps", "=", "float", "(", "'inf'", ")", "\n", "label_arr", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "if", "args", ".", "direction_model", "==", "'att_svm'", "and", "-", "1", "in", "args", ".", "eps_list", ":", "\n", "#print((torch.squeeze(torch.matmul(eps * direction[1], direction[0].permute(0,2,1)), dim = -1)).device)", "\n", "        ", "concept", "=", "img_dir", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "if", "int", "(", "concept", "[", "0", "]", ")", "<", "int", "(", "concept", "[", "1", "]", ")", ":", "\n", "            ", "concept1", "=", "concept", "[", "0", "]", "\n", "concept2", "=", "concept", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "concept1", "=", "concept", "[", "1", "]", "\n", "concept2", "=", "concept", "[", "0", "]", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "cav_dir", ",", "'-{}-{}-{}'", ".", "format", "(", "str", "(", "concept1", ")", "+", "str", "(", "concept2", ")", ",", "args", ".", "layer", ",", "'svm_model_weight.pkl'", ")", ")", "\n", "#model_path = 'att_svm.pkl'", "\n", "att_svm", "=", "svm_attention", "(", "args", ".", "dim", ",", "model_path", ")", "\n", "eps", "=", "args", ".", "eps_init", "\n", "eps_step", "=", "args", ".", "eps_step", "\n", "tmp_ite_max_eps", "=", "args", ".", "ite_max_eps", "\n", "eps_list", "=", "[", "0", "]", "\n", "while", "tmp_ite_max_eps", ">=", "0", ":", "\n", "            ", "fea_change", "=", "eps", "*", "(", "att_svm", ".", "get_attention", "(", "act_input", ")", "*", "torch", ".", "squeeze", "(", "direction", "[", "0", "]", ",", "dim", "=", "0", ")", ".", "to", "(", "device", ")", ")", "\n", "# print(fea_change.max())", "\n", "act_trans_update", "=", "act_input", "+", "fea_change", "\n", "\n", "g_z", "=", "generator", ".", "generate_from_feature", "(", "g", ",", "act_trans_update", ")", "\n", "\n", "if", "args", ".", "DNN", "==", "'lenet'", ":", "\n", "                ", "output", "=", "mnist", ".", "evalu", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "g_z", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the label of generated images                ", "\n", "", "elif", "args", ".", "DNN", "==", "'cifarnet'", ":", "\n", "                ", "output", "=", "cifar", ".", "evalu", "(", "torch", ".", "unsqueeze", "(", "g_z", "/", "255.", ",", "dim", "=", "0", ")", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ")", "\n", "_", ",", "pred", "=", "output", ".", "max", "(", "1", ")", "\n", "", "elif", "args", ".", "DNN", "==", "'celebANet'", ":", "\n", "                ", "output", "=", "celebA", ".", "evalu", "(", "torch", ".", "unsqueeze", "(", "g_z", ",", "dim", "=", "0", ")", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ")", "\n", "pred", "=", "output", ">=", "0.5", "\n", "", "elif", "args", ".", "DNN", "==", "'svhnNet'", ":", "\n", "                ", "output", "=", "svhn", ".", "evalu", "(", "torch", ".", "unsqueeze", "(", "g_z", ",", "dim", "=", "0", ")", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ")", "\n", "_", ",", "pred", "=", "output", ".", "max", "(", "1", ")", "\n", "", "pred", "=", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", "\n", "if", "pred", "!=", "input_label", "or", "eps", ">=", "args", ".", "eps_max", "or", "tmp_ite_max_eps", "==", "0", ":", "\n", "#or pred != img_dir.split('/')[-2][0]:", "\n", "                ", "print", "(", "eps", ",", "pred", ",", "targetlabel", ",", "input_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "0", "]", ",", "img_dir", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "eps_list", "=", "[", "eps", "]", "\n", "break", "\n", "", "else", ":", "\n", "                ", "tmp_ite_max_eps", "-=", "1", "\n", "if", "eps", ">=", "1.0", ":", "\n", "                    ", "eps", "=", "eps", "+", "eps_step", "*", "10", "\n", "", "else", ":", "\n", "                    ", "eps", "=", "eps", "+", "eps_step", "\n", "\n", "#   for i in range(args.ite_max_eps):", "\n", "", "", "", "", "for", "i", ",", "eps", "in", "enumerate", "(", "eps_list", ")", ":", "\n", "        ", "if", "eps", "not", "in", "eps_list", ":", "\n", "            ", "eps", "+=", "args", ".", "eps_step", "# the default update step size is 0.05", "\n", "eps", "=", "round", "(", "eps", ",", "6", ")", "\n", "continue", "\n", "", "if", "args", ".", "direction_model", "==", "'att_svm'", ":", "\n", "#print((torch.squeeze(torch.matmul(eps * direction[1], direction[0].permute(0,2,1)), dim = -1)).device)", "\n", "            ", "concept", "=", "img_dir", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "if", "int", "(", "concept", "[", "0", "]", ")", "<", "int", "(", "concept", "[", "1", "]", ")", ":", "\n", "                ", "concept1", "=", "concept", "[", "0", "]", "\n", "concept2", "=", "concept", "[", "1", "]", "\n", "", "else", ":", "\n", "                ", "concept1", "=", "concept", "[", "1", "]", "\n", "concept2", "=", "concept", "[", "0", "]", "\n", "", "model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "cav_dir", ",", "'-{}-{}-{}'", ".", "format", "(", "str", "(", "concept1", ")", "+", "str", "(", "concept2", ")", ",", "args", ".", "layer", ",", "'svm_model_weight.pkl'", ")", ")", "\n", "#model_path = 'att_svm.pkl'", "\n", "att_svm", "=", "svm_attention", "(", "args", ".", "dim", ",", "model_path", ")", "\n", "fea_change", "=", "eps", "*", "(", "att_svm", ".", "get_attention", "(", "act_input", ")", "*", "torch", ".", "squeeze", "(", "direction", "[", "0", "]", ",", "dim", "=", "0", ")", ".", "to", "(", "device", ")", ")", "\n", "# print(fea_change.max())", "\n", "#act_trans_update = act_input + fea_change", "\n", "act_trans_update", "=", "act_input", "+", "fea_change", "\n", "", "elif", "args", ".", "direction_model", "==", "'max_dis_svm'", ":", "\n", "            ", "act_trans_update", "=", "act_input", "+", "eps", "*", "torch", ".", "squeeze", "(", "direction", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "act_trans_update", "=", "act_input", "+", "eps", "*", "direction", "[", "0", "]", "\n", "# check whether the features have became another class (in other words, whether we have crossed the decision boundary)", "\n", "", "if", "args", ".", "DNN", "==", "'lenet'", ":", "\n", "            ", "output", "=", "mnist", ".", "evalu", "(", "act_trans_update", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ",", "wholemodel", "=", "False", ")", "\n", "trans_label", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the label of changed features", "\n", "", "elif", "args", ".", "DNN", "==", "'cifarnet'", ":", "\n", "            ", "output", "=", "cifar", ".", "evalu", "(", "act_trans_update", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ",", "wholemodel", "=", "False", ")", "\n", "_", ",", "trans_label", "=", "output", ".", "max", "(", "1", ")", "\n", "", "elif", "args", ".", "DNN", "==", "'celebANet'", ":", "\n", "            ", "output", "=", "celebA", ".", "evalu", "(", "act_trans_update", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ",", "wholemodel", "=", "False", ")", "\n", "trans_label", "=", "output", ">=", "0.5", "\n", "", "elif", "args", ".", "DNN", "==", "'svhnNet'", ":", "\n", "            ", "output", "=", "svhn", ".", "evalu", "(", "act_trans_update", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ",", "wholemodel", "=", "False", ")", "\n", "_", ",", "trans_label", "=", "output", ".", "max", "(", "1", ")", "\n", "\n", "", "g_z", "=", "generator", ".", "generate_from_feature", "(", "g", ",", "act_trans_update", ")", "\n", "\n", "if", "args", ".", "DNN", "==", "'lenet'", ":", "\n", "            ", "output", "=", "mnist", ".", "evalu", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "g_z", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ")", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the label of generated images", "\n", "filename", "=", "'mnist_{0:02d}_{1}_img{2}_fea{3}_{4:02f}.png'", ".", "format", "(", "img_idx", ",", "i", ",", "int", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "int", "(", "trans_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "eps", ")", "\n", "", "elif", "args", ".", "DNN", "==", "'cifarnet'", ":", "\n", "            ", "output", "=", "cifar", ".", "evalu", "(", "torch", ".", "unsqueeze", "(", "g_z", "/", "255.", ",", "dim", "=", "0", ")", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ")", "\n", "_", ",", "pred", "=", "output", ".", "max", "(", "1", ")", "\n", "# print(pred, targetlabel)", "\n", "filename", "=", "'cifar_{0:02d}_{1}_img{2}_fea{3}_{4:02f}.png'", ".", "format", "(", "img_idx", ",", "i", ",", "int", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "int", "(", "trans_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "eps", ")", "\n", "", "elif", "args", ".", "DNN", "==", "'celebANet'", ":", "\n", "            ", "output", "=", "celebA", ".", "evalu", "(", "torch", ".", "unsqueeze", "(", "g_z", ",", "dim", "=", "0", ")", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ")", "\n", "pred", "=", "output", ">=", "0.5", "\n", "filename", "=", "'celebA_{0:02d}_{1}_img{2}_fea{3}_{4:02f}.png'", ".", "format", "(", "img_idx", ",", "i", ",", "int", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "int", "(", "trans_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "eps", ")", "\n", "", "elif", "args", ".", "DNN", "==", "'svhnNet'", ":", "\n", "            ", "output", "=", "svhn", ".", "evalu", "(", "torch", ".", "unsqueeze", "(", "g_z", ",", "dim", "=", "0", ")", ",", "args", ".", "gpu_ids", ",", "modelfile", ",", "classifier", ",", "device", ")", "\n", "_", ",", "pred", "=", "output", ".", "max", "(", "1", ")", "\n", "filename", "=", "'svhn_{0:02d}_{1}_img{2}_fea{3}_{4:02f}.png'", ".", "format", "(", "img_idx", ",", "i", ",", "int", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "int", "(", "trans_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "eps", ")", "\n", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "img_dir", ",", "filename", ")", "\n", "if", "eps", "in", "eps_list", "and", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "if", "label_arr", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "                ", "label_arr", "=", "np", ".", "array", "(", "[", "img_idx", ",", "i", ",", "int", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "int", "(", "trans_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "eps", ",", "targetlabel", "]", ")", "\n", "", "else", ":", "\n", "                ", "label_arr", "=", "np", ".", "r_", "[", "'0,2,1'", ",", "label_arr", ",", "np", ".", "array", "(", "[", "img_idx", ",", "i", ",", "int", "(", "pred", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "int", "(", "trans_label", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "eps", ",", "targetlabel", "]", ")", "]", "# record the labels of changed features", "\n", "", "if", "args", ".", "DNN", "==", "'lenet'", ":", "\n", "                ", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "g_z", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "mode", "=", "'L'", ")", ".", "save", "(", "filename", ")", "\n", "", "elif", "args", ".", "DNN", "in", "[", "'cifarnet'", ",", "'celebANet'", ",", "'svhnNet'", "]", ":", "\n", "                ", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "g_z", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ")", ")", ".", "save", "(", "filename", ")", "\n", "\n", "", "", "if", "eps", ">=", "args", ".", "eps_max", ":", "\n", "            ", "break", "\n", "", "if", "eps", ">", "0", "and", "pred", "==", "targetlabel", ":", "# the output label is equal to targetlabel", "\n", "            ", "success", "=", "True", "\n", "if", "min_eps", "==", "float", "(", "'inf'", ")", ":", "\n", "                ", "min_eps", "=", "eps", "\n", "", "mylogger", ".", "debug", "(", "\"After {} iteration, the minimum of epsilon for image {} is {}\"", ".", "format", "(", "i", ",", "img_idx", ",", "eps", ")", ")", "\n", "", "eps", "+=", "args", ".", "eps_step", "# the default update step size is 0.05", "\n", "eps", "=", "round", "(", "eps", ",", "6", ")", "\n", "\n", "", "if", "eps", ">=", "args", ".", "eps_max", ":", "\n", "        ", "mylogger", ".", "debug", "(", "\"After {} iteration, the value of epsilon ({}) for image {} is bigger than the maximum of epsilon ({})\"", ".", "format", "(", "i", ",", "eps", ",", "img_idx", ",", "args", ".", "eps_max", ")", ")", "\n", "", "if", "i", "==", "args", ".", "ite_max_eps", ":", "\n", "        ", "mylogger", ".", "debug", "(", "\"After {} iteration, the minimum of epsilon for image {} is {}\"", ".", "format", "(", "i", ",", "img_idx", ",", "eps", ")", ")", "\n", "\n", "", "return", "min_eps", ",", "success", ",", "label_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.myutils.mylogger": [[19, 36], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.info", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler"], "function", ["None"], ["def", "mylogger", "(", "logpath", "=", "'./param.log'", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "logger", ".", "setLevel", "(", "'DEBUG'", ")", "\n", "BASIC_FORMAT", "=", "\"%(asctime)s:%(levelname)s:%(message)s\"", "\n", "DATE_FORMAT", "=", "'%Y-%m-%d %H:%M:%S'", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "BASIC_FORMAT", ",", "DATE_FORMAT", ")", "\n", "fhlr", "=", "logging", ".", "FileHandler", "(", "logpath", ")", "# ", "\n", "fhlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fhlr", ")", "\n", "str_sharp", "=", "'#####################################################################'", "\n", "logger", ".", "info", "(", "'Record Experiment Information and Conditions\\n'", "+", "str_sharp", "+", "'\\n\\n\\n'", "+", "str_sharp", ")", "\n", "# logger.info('  Experiment Setting and Running Logs\\n\\n')", "\n", "\n", "chlr", "=", "logging", ".", "StreamHandler", "(", ")", "# ", "\n", "chlr", ".", "setFormatter", "(", "formatter", ")", "\n", "chlr", ".", "setLevel", "(", "'DEBUG'", ")", "# ", "\n", "logger", ".", "addHandler", "(", "chlr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.myutils.parseArg": [[37, 83], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "parseArg", "(", ")", ":", "\n", "    ", "parseArgs", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Arguments for project.'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--att'", ",", "type", "=", "ast", ".", "literal_eval", ",", "default", "=", "'False'", ",", "help", "=", "'add attention layer or not'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--batch'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'Number of batch size'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'cifar'", ",", "help", "=", "'specify the training dataset'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--dataAug'", ",", "type", "=", "str", ",", "default", "=", "'True'", ",", "help", "=", "'True for data autmentation, false for defence'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--dim'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'the dimension of z'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--DNN'", ",", "type", "=", "str", ",", "default", "=", "'cifarnet'", ",", "help", "=", "'the name of DNN for extracting features'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'the num of training epoch for restore,0 means training from scrach'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--restore_file'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'the path/file for restore models'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--eps_step'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'the step size for updating epsilon'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--eps_init'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'the step size for updating epsilon'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--eps_max'", ",", "type", "=", "int", ",", "default", "=", "100.0", ",", "help", "=", "'the maximum of epsilon'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'the ids of GPUs'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--generator'", ",", "type", "=", "str", ",", "default", "=", "'autoencoder'", ",", "help", "=", "'name of generator: autoencoder or VAEGAN'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--iteration'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'the num of max iteration'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--layer'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'the layer of extracting features in classifier module'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--ori_lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'the original learing rate'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--lam'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "help", "=", "'the weight importance for mse loss and gan loss'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--nb_channels_first_layer'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'the num of channels in first layer'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the num of classes in celebA dataset'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "'the num of process when load data'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--norm'", ",", "type", "=", "str", ",", "default", "=", "'l2'", ",", "help", "=", "'type of loss function: l1 or l2'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--percent'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'the percentage of dataset for training classifier and generator'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--phase'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'train or test'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--save_freq'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'the num of training epoch for restore'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'the seed for random selection'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--train_attribute'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'the name of training path'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--test_attribute'", ",", "type", "=", "str", ",", "default", "=", "'test'", ",", "help", "=", "'the name of test path'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--ite_max_eps'", ",", "type", "=", "int", ",", "default", "=", "300", ",", "help", "=", "'the num of iteration for finding epsilon'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--img_num'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'the maximum of images to generate adversatial images'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--direction_type'", ",", "type", "=", "str", ",", "default", "=", "'cav'", ",", "help", "=", "'the name of direction type'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--direction_model'", ",", "type", "=", "str", ",", "default", "=", "'att_svm'", ",", "choices", "=", "[", "'linear'", ",", "'att_svm'", ",", "'logistic'", ",", "'max_dis_svm'", ",", "'att_neighbor_svm'", "]", ",", "help", "=", "'the name of model for training direction'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--cav_imgnum'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'the num of examples for training svm'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--v'", ",", "type", "=", "ast", ".", "literal_eval", ",", "default", "=", "True", ",", "help", "=", "'display the debug info or not'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--info'", ",", "'-I'", ",", "type", "=", "str", ",", "default", "=", "'Info for running program'", ",", "\n", "help", "=", "'This info is used to record the running conditions for the current program, which is stored in param.log'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--res_dir'", ",", "type", "=", "str", ",", "default", "=", "'./experiments'", ",", "help", "=", "'the path for saving results'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--exp_att'", ",", "type", "=", "str", ",", "default", "=", "'mnist_512_Norm2'", ",", "help", "=", "'the name of current experiment'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--logfile'", ",", "type", "=", "str", ",", "default", "=", "'./param.log'", ",", "help", "=", "'the name of log file'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--d_filename'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'the path for discriminator weight file'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--decay'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'True for decay of optimizer'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--testdata'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'True for generating adv example from testdata, false for generating adv example from traindata'", ")", "\n", "parseArgs", ".", "add_argument", "(", "'--eps_list'", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "help", "=", "'the eps list for generating several adversarial examples'", ")", "\n", "\n", "return", "parseArgs", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.myutils.time_stamp": [[84, 87], ["datetime.datetime.now"], "function", ["None"], ["", "def", "time_stamp", "(", ")", ":", "\n", "  ", "TIMESTAMP", "=", "\"{0:%Y-%m-%dT%H-%M-%S}\"", ".", "format", "(", "datetime", ".", "now", "(", ")", ")", "\n", "return", "TIMESTAMP", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.myutils.create_name_experiment": [[88, 94], ["print"], "function", ["None"], ["", "def", "create_name_experiment", "(", "parameters", ",", "attribute_experiment", ")", ":", "\n", "    ", "name_experiment", "=", "'{}/{}'", ".", "format", "(", "parameters", "[", "'dataset'", "]", ",", "attribute_experiment", ")", "\n", "\n", "print", "(", "'Name experiment: {}'", ".", "format", "(", "name_experiment", ")", ")", "\n", "\n", "return", "name_experiment", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.myutils.create_folder": [[95, 98], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "create_folder", "(", "folder", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.myutils.write2file": [[99, 108], ["open", "open.close", "open.writelines", "open.writelines", "open.writelines", "myutils.time_stamp"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.time_stamp"], ["", "", "def", "write2file", "(", "filename", ",", "textList", ",", "options", "=", "[", "1", ",", "1", "]", ")", ":", "\n", "    ", "fw", "=", "open", "(", "filename", ",", "'a'", ")", "\n", "if", "options", "[", "0", "]", "==", "1", ":", "\n", "        ", "fw", ".", "writelines", "(", "time_stamp", "(", ")", "+", "'\\n'", ")", "\n", "", "for", "text", "in", "textList", ":", "\n", "        ", "fw", ".", "writelines", "(", "text", "+", "'\\t'", ")", "\n", "", "if", "options", "[", "1", "]", "==", "1", ":", "\n", "        ", "fw", ".", "writelines", "(", "'\\n'", ")", "\n", "", "fw", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.myutils.loadweights": [[109, 145], ["len", "torch.load", "collections.OrderedDict", "torch.load.items", "k.replace", "len", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.load", "torch.nn.DataParallel", "collections.OrderedDict", "torch.load.items", "k.replace"], "function", ["None"], ["", "def", "loadweights", "(", "model", ",", "filename_model", ",", "gpu_ids", "=", "''", ")", ":", "\n", "    ", "'''\n    @Description: Load weights for pytorch model in different hardware environments\n    @param {type} : {model: pytorch model, model that waits for loading weights\n                     filename_model: str, name of pretrained weights\n                     gpu_ids: list, available gpu list}\n    @return: \n    '''", "\n", "if", "len", "(", "gpu_ids", ")", "==", "0", ":", "\n", "# load weights to cpu", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "# create new OrderedDict that does not contain `module.`", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "", "elif", "len", "(", "gpu_ids", ")", "==", "1", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ")", "\n", "# create new OrderedDict that does not contain `module.`", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "gpu_ids", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'module'", "not", "in", "k", ":", "\n", "                ", "name", "=", "''", ".", "join", "(", "[", "'module.'", ",", "k", "]", ")", "# add `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "", "if", "new_state_dict", ":", "\n", "            ", "state_dict", "=", "new_state_dict", "\n", "", "", "return", "model", ",", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.myutils.cover_pytorch_tf": [[146, 175], ["tf_v.name.split", "tf_py_weights_name.get", "match_dict.get", "pytorch_weights.get", "tf.assign", "sess.run", "len", "py_w.permute.permute", "py_w.permute.cpu().detach().numpy", "tf_names[].split", "py_w.permute.dim", "py_w.permute.permute", "py_w.permute.cpu().detach", "py_w.permute.cpu"], "function", ["None"], ["", "def", "cover_pytorch_tf", "(", "pytorch_weights", ",", "tf_model_var", ",", "sess", ",", "match_dict", ")", ":", "\n", "    ", "'''\n    @Description: This function is used to copy trained weights from pytorch to tensorflow.\n    @param {type} : {pytorch_weights: OrderDict, save the weights of one model\n                     tf_model_var: tf variable list, save the variable list in tf model\n                     sess: tf.Session()\n                     match_dict: dic, the match relationship between pytorch weights and tf weiths}\n    @return: copied weights file name for tf\n    '''", "\n", "import", "tensorflow", "as", "tf", "\n", "# py_weights_name = ['num_batches_tracked']", "\n", "tf_py_weights_name", "=", "{", "'kernel'", ":", "'weight'", ",", "'bias'", ":", "'bias'", ",", "'gamma'", ":", "'weight'", ",", "'beta'", ":", "'bias'", ",", "'moving_mean'", ":", "'running_mean'", ",", "'moving_variance'", ":", "'running_var'", "}", "\n", "for", "tf_v", "in", "tf_model_var", ":", "\n", "        ", "tf_names", "=", "tf_v", ".", "name", ".", "split", "(", "'/'", ")", "\n", "tf_layer_name", "=", "'/'", ".", "join", "(", "tf_names", "[", "1", ":", "3", "]", ")", "# used for confirm the layer relationship", "\n", "\n", "py_weight_name", "=", "tf_py_weights_name", ".", "get", "(", "tf_names", "[", "3", "]", ".", "split", "(", "':'", ")", "[", "0", "]", ")", "# used for confirming the weight or bias relationship", "\n", "py_layer_name", "=", "match_dict", ".", "get", "(", "tf_layer_name", ")", "\n", "if", "py_layer_name", "==", "None", ":", "\n", "            ", "continue", "\n", "", "py_name", "=", "'.'", ".", "join", "(", "[", "py_layer_name", ",", "py_weight_name", "]", ")", "\n", "py_w", "=", "pytorch_weights", ".", "get", "(", "py_name", ")", "\n", "if", "len", "(", "py_w", ".", "shape", ")", "==", "4", ":", "\n", "            ", "py_w", "=", "py_w", ".", "permute", "(", "3", ",", "2", ",", "1", ",", "0", ")", "# [64, 3, 3, 3] => [3, 3, 3, 64]", "\n", "", "elif", "py_w", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "py_w", "=", "py_w", ".", "permute", "(", "1", ",", "0", ")", "\n", "", "assign_op", "=", "tf", ".", "assign", "(", "tf_v", ",", "py_w", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "sess", ".", "run", "(", "assign_op", ")", "\n", "", "return", "tf_model_var", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svhn_defence.defense_dataset.__init__": [[21, 57], ["numpy.zeros", "os.walk", "print", "len", "numpy.zeros.sum", "numpy.zeros.sum", "filename.split", "os.path.join", "filename.split", "svhn_defence.defense_dataset.filenames.append", "svhn_defence.defense_dataset.ori_filenames.append", "int", "int", "filename.split", "float", "os.path.join", "int", "os.path.join", "len", "svhn_defence.defense_dataset.filenames.append", "svhn_defence.defense_dataset.ori_filenames.append", "float", "os.path.join", "int", "os.path.join", "os.path.join.split", "os.path.join.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "eps", ",", "img_num", ",", "fgsm", "=", "False", ",", "transform", "=", "None", ",", "dataAug", "=", "False", ")", ":", "\n", "        ", "self", ".", "filenames", "=", "[", "]", "\n", "self", ".", "ori_filenames", "=", "[", "]", "\n", "self", ".", "fgsm", "=", "fgsm", "\n", "img_filter", "=", "[", "'png'", ",", "'jpg'", "]", "\n", "label_list", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", "]", "\n", "label_arr", "=", "np", ".", "zeros", "(", "len", "(", "label_list", ")", ")", "\n", "\n", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "filename", "[", "-", "3", ":", "]", "in", "img_filter", "and", "filename", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "!=", "'ori.png'", ":", "\n", "                    ", "if", "img_num", "==", "0", ":", "\n", "                        ", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                            ", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "ori_filename", "=", "'{0}_{1:06d}_ori.png'", ".", "format", "(", "tmp_filename", "[", "0", "]", ",", "int", "(", "tmp_filename", "[", "1", "]", ")", ")", "\n", "self", ".", "ori_filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "ori_filename", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "if", "self", ".", "fgsm", ":", "# True for that adversarial samples are from fgsm or jsma", "\n", "                            ", "label", "=", "int", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                            ", "label", "=", "int", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "", "if", "label_arr", "[", "label", "]", ">=", "img_num", "/", "len", "(", "label_list", ")", ":", "# if the number of images for one class is enough, just continue", "\n", "                            ", "continue", "\n", "", "else", ":", "\n", "                            ", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                                ", "label_arr", "[", "label", "]", "+=", "1", "\n", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "ori_filename", "=", "'{0}_{1:06d}_ori.png'", ".", "format", "(", "tmp_filename", "[", "0", "]", ",", "int", "(", "tmp_filename", "[", "1", "]", ")", ")", "\n", "self", ".", "ori_filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "ori_filename", ")", ")", "\n", "", "", "", "", "", "", "print", "(", "label_arr", ".", "sum", "(", ")", ")", "\n", "assert", "img_num", "==", "label_arr", ".", "sum", "(", ")", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svhn_defence.defense_dataset.__getitem__": [[58, 77], ["PIL.open", "os.path.exists", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "PIL.open", "svhn_defence.defense_dataset.transform", "svhn_defence.defense_dataset.transform", "numpy.array", "numpy.array", "int", "int", "filename.split", "filename.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "filenames", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "ori_filename", "=", "self", ".", "ori_filenames", "[", "index", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "ori_filename", ")", ":", "\n", "            ", "ori_img", "=", "Image", ".", "open", "(", "ori_filename", ")", "\n", "", "else", ":", "\n", "            ", "ori_img", "=", "img", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "ori_img", "=", "self", ".", "transform", "(", "ori_img", ")", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ")", "\n", "ori_img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "ori_img", ")", ")", "\n", "if", "self", ".", "fgsm", ":", "\n", "            ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "\n", "", "return", "img", ",", "label", ",", "ori_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svhn_defence.defense_dataset.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svhn_defence.defense_test_dataset.__init__": [[82, 111], ["numpy.zeros", "os.walk", "len", "numpy.zeros.sum", "filename.split", "os.path.join", "filename.split", "svhn_defence.defense_test_dataset.filenames.append", "int", "int", "filename.split", "float", "os.path.join", "len", "svhn_defence.defense_test_dataset.filenames.append", "float", "os.path.join", "os.path.join.split", "os.path.join.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "eps", ",", "img_num", "=", "0", ",", "ohter_attack", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "filenames", "=", "[", "]", "\n", "self", ".", "attack", "=", "ohter_attack", "# True for data from other attack", "\n", "img_filter", "=", "[", "'png'", ",", "'jpg'", "]", "\n", "label_list", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", "]", "\n", "label_arr", "=", "np", ".", "zeros", "(", "len", "(", "label_list", ")", ")", "\n", "\n", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "filename", "[", "-", "3", ":", "]", "in", "img_filter", "and", "filename", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "!=", "'ori.png'", ":", "\n", "                    ", "if", "img_num", "==", "0", ":", "\n", "                        ", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                            ", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "if", "self", ".", "attack", ":", "# True for that adversarial samples are from fgsm or jsma", "\n", "                            ", "label", "=", "int", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                            ", "label", "=", "int", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "", "if", "label_arr", "[", "label", "]", ">=", "img_num", "/", "len", "(", "label_list", ")", ":", "# if the number of images for one class is enough, just continue", "\n", "                            ", "continue", "\n", "", "else", ":", "\n", "                            ", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                                ", "label_arr", "[", "label", "]", "+=", "1", "\n", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "", "", "", "", "", "", "assert", "img_num", "==", "label_arr", ".", "sum", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svhn_defence.defense_test_dataset.__getitem__": [[112, 123], ["PIL.open", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "svhn_defence.defense_test_dataset.transform", "numpy.array", "int", "int", "filename.split", "filename.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "filenames", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ")", "\n", "if", "self", ".", "attack", ":", "\n", "          ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "          ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svhn_defence.defense_test_dataset.__len__": [[124, 126], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svhn_defence.train": [[127, 143], ["logging.getLogger", "torch.CrossEntropyLoss", "model.train", "enumerate", "optimizer.zero_grad", "model", "model", "loss.backward", "optimizer.step", "torch.to", "target.to", "ori_data.to", "logging.getLogger.info", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "len", "loss.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "ori_data", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", ",", "ori_data", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", ",", "ori_data", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "ori_output", "=", "model", "(", "ori_data", ")", "\n", "loss", "=", "0.5", "*", "criterion", "(", "output", ",", "target", ")", "+", "0.5", "*", "criterion", "(", "ori_output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svhn_defence.test": [[144, 163], ["logging.getLogger", "model.eval", "len", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "float", "model", "torch.nll_loss().item", "pred.eq().sum().item", "len", "torch.to", "target.to", "model.max", "len", "len", "torch.nll_loss", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "logger", ".", "info", "(", "'Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "100", "*", "float", "(", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svhn_defence.evalu": [[164, 176], ["myutils.loadweights", "g.load_state_dict", "g.to", "g.eval", "len", "g", "g.classify"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet.classify"], ["", "def", "evalu", "(", "x", ",", "gpu_ids", ",", "filename_model", ",", "g", ",", "device", ",", "wholemodel", "=", "True", ")", ":", "\n", "    ", "state_dict", "=", "loadweights", "(", "g", ",", "filename_model", ",", "gpu_ids", ")", "\n", "g", ".", "load_state_dict", "(", "state_dict", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "1", ":", "\n", "        ", "g", "=", "g", ".", "module", "\n", "", "g", ".", "to", "(", "device", ")", "\n", "g", ".", "eval", "(", ")", "\n", "if", "wholemodel", ":", "\n", "        ", "output", "=", "g", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "g", ".", "classify", "(", "x", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svhn_defence.main": [[177, 315], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "myutils.mylogger", "logging.getLogger", "logging.getLogger.info", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.exists", "os.makedirs", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "svhn_defence.defense_test_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "generate_latent.svhn_clssifier.svhnVGG().to", "os.path.join", "myutils.loadweights", "svhnVGG().to.load_state_dict", "logging.getLogger.info", "svhn_defence.test", "myutils.loadweights", "svhnVGG().to.load_state_dict", "logging.getLogger.info", "svhn_defence.test", "open", "open.writelines", "open.close", "logging.getLogger.info", "svhn_defence.test", "svhn_defence.defense_dataset", "logging.getLogger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "generate_latent.svhn_clssifier.svhnVGG().to", "torch.SGD", "logging.getLogger.info", "svhn_defence.test", "range", "logging.getLogger.info", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.datasets.SVHN", "torchvision.datasets.SVHN", "svhnVGG().to.parameters", "os.path.join", "myutils.loadweights", "svhnVGG().to.load_state_dict", "logging.getLogger.info", "logging.getLogger.info", "svhn_defence.train", "svhn_defence.test", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "generate_latent.svhn_clssifier.svhnVGG", "svhn_defence.defense_dataset.__len__", "generate_latent.svhn_clssifier.svhnVGG", "svhnVGG().to.state_dict", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.mylogger", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch MNIST Example'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_num'", ",", "type", "=", "int", ",", "default", "=", "4500", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of samples to train. 0 means loading all samples (default: 4500)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_to_restore'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to restore to continue to train (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'the ids of GPUs'", ")", "\n", "parser", ".", "add_argument", "(", "'--i'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Saved information'", ")", "\n", "parser", ".", "add_argument", "(", "'--adversarial_samples'", ",", "type", "=", "str", ",", "default", "=", "'.experiments/gsn_hf/SVHN/svhn_4096_norm1/eps_diff/'", ",", "help", "=", "'dir of adversarail samples'", ")", "\n", "parser", ".", "add_argument", "(", "'--eps'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "''", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--exp_dir'", ",", "type", "=", "str", ",", "default", "=", "'./'", ",", "help", "=", "'the dir for saving the results'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'defence'", ",", "help", "=", "'the name of the experiments'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--defence_module'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "help", "=", "'train or test model:False for train and test, True for test.'", ")", "\n", "parser", ".", "add_argument", "(", "'--model4defence'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'dir of defence model weithgs'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataAug'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'Data augmentation mode or adversrial mode:False for adversarial, True for data augmentation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--attack_dataset'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'when defend, dataset from other attack methods or our attack:False for our, True for other.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "exp_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "exp_dir", ")", "\n", "", "if", "args", ".", "defence_module", ":", "\n", "        ", "defence_str", "=", "'_defence_'", "\n", "", "else", ":", "\n", "        ", "defence_str", "=", "'_advTrain_'", "\n", "\n", "#    mylogger(args.exp_dir+'svhn_'+defence_str+'-'+str(args.img_num)+'-'+str(args.eps)+args.exp_name+'.log')", "\n", "", "mylogger", "(", "args", ".", "exp_dir", "+", "'svhn'", "+", "defence_str", "+", "'.log'", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "args", ".", "gpu_ids", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "kwargs", "=", "{", "'num_workers'", ":", "8", ",", "'pin_memory'", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "# transforms.RandomCrop(32, padding=4),", "\n", "# transforms.RandomHorizontalFlip(),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "# transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),", "\n", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "# transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),", "\n", "]", ")", "\n", "if", "args", ".", "defence_module", ":", "\n", "        ", "test_attack_dataset", "=", "defense_test_dataset", "(", "args", ".", "adversarial_samples", ",", "args", ".", "eps", ",", "args", ".", "img_num", ",", "args", ".", "attack_dataset", ",", "transform", "=", "transform_test", ")", "\n", "test_attack_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_attack_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "SVHN", "(", "root", "=", "'./datasets/SVHN/'", ",", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "# attack our original model", "\n", "model", "=", "svhnVGG", "(", "'VGG8'", ")", ".", "to", "(", "device", ")", "\n", "filename_model", "=", "os", ".", "path", ".", "join", "(", "'./generate_latent/svhn_cnn.pt'", ")", "\n", "model", ",", "state_dict", "=", "loadweights", "(", "model", ",", "filename_model", ",", "args", ".", "gpu_ids", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "logger", ".", "info", "(", "'Accuracy on adversarial samples using original model.'", ")", "\n", "test", "(", "args", ",", "model", ",", "device", ",", "test_attack_dataloader", ")", "\n", "\n", "# attack our finetuned model", "\n", "filename_model", "=", "args", ".", "model4defence", "\n", "model", ",", "state_dict", "=", "loadweights", "(", "model", ",", "filename_model", ",", "args", ".", "gpu_ids", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "logger", ".", "info", "(", "'Accuracy on adversarial samples using finetuned model: {}'", ".", "format", "(", "args", ".", "model4defence", ")", ")", "\n", "adv_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "test_attack_dataloader", ")", "\n", "fw", "=", "open", "(", "args", ".", "exp_dir", "+", "'logacc.txt'", ",", "'a'", ")", "\n", "fw", ".", "writelines", "(", "args", ".", "model4defence", "+", "' on '", "+", "args", ".", "adversarial_samples", "+", "' is: '", "+", "str", "(", "adv_acc", ")", "+", "'\\n'", ")", "\n", "fw", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Accuracy on svhn Test dataset using finetuned model: {}'", ".", "format", "(", "args", ".", "model4defence", ")", ")", "\n", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "", "else", ":", "\n", "        ", "train_dataset", "=", "defense_dataset", "(", "args", ".", "adversarial_samples", ",", "\n", "args", ".", "eps", ",", "\n", "args", ".", "img_num", ",", "\n", "args", ".", "attack_dataset", ",", "\n", "transform", "=", "transform_train", ",", "dataAug", "=", "args", ".", "dataAug", ")", "\n", "logger", ".", "info", "(", "'The number of training images are {}; use {} for training.'", ".", "format", "(", "train_dataset", ".", "__len__", "(", ")", ",", "args", ".", "img_num", ")", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "SVHN", "(", "root", "=", "'./datasets/SVHN/'", ",", "split", "=", "'test'", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "model", "=", "svhnVGG", "(", "'VGG8'", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "5e-4", ")", "\n", "\n", "if", "args", ".", "epoch_to_restore", ">", "0", ":", "\n", "            ", "filename_model", "=", "os", ".", "path", ".", "join", "(", "'./generate_latent/svhn_cnn.pt'", ")", "\n", "model", ",", "state_dict", "=", "loadweights", "(", "model", ",", "filename_model", ",", "args", ".", "gpu_ids", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "logger", ".", "info", "(", "'Load weights from the pre-trained model on clean dataset.'", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'Initialize the svhnnet model with random weights.'", ")", "\n", "\n", "", "logger", ".", "info", "(", "'This is the test result before retraining svhnnet.'", ")", "\n", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "\n", "best_acc", "=", "0", "\n", "best_epoch", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch_to_restore", "+", "1", ",", "args", ".", "epoch_to_restore", "+", "args", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", "\n", "acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "if", "(", "args", ".", "save_model", ")", "and", "acc", ">", "best_acc", ":", "\n", "# torch.save(model.state_dict(), args.exp_dir+'svhn_cnn_'+args.exp_name+'_'+str(epoch)+'best.pt')", "\n", "                ", "best_epoch", "=", "epoch", "\n", "best_acc", "=", "acc", "\n", "\n", "", "", "if", "(", "args", ".", "save_model", ")", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "exp_dir", "+", "\"svhn_cnn_defence_\"", "+", "args", ".", "exp_name", "+", "'_'", "+", "str", "(", "args", ".", "img_num", ")", "+", "'_'", "+", "str", "(", "args", ".", "eps", ")", "+", "\".pt\"", ")", "\n", "", "logger", ".", "info", "(", "'The best classification is the epoch:{}, acc is: {}.'", ".", "format", "(", "best_epoch", ",", "best_acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.cav_key": [[41, 54], ["str", "str"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "cav_key", "(", "concepts", ",", "bottleneck", ",", "model_type", ",", "alpha", ")", ":", "\n", "    ", "\"\"\"A key of this cav (useful for saving files).\n    Args:\n      concepts: set of concepts used for CAV\n      bottleneck: the bottleneck used for CAV\n      model_type: the name of model for CAV\n      alpha: a parameter used to learn CAV\n    Returns:\n      a string cav_key\n    \"\"\"", "\n", "return", "'-{}-{}-{}-{}'", ".", "format", "(", "''", ".", "join", "(", "[", "str", "(", "c", ")", "for", "c", "in", "concepts", "\n", "]", ")", ",", "bottleneck", ",", "model_type", ",", "str", "(", "alpha", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.check_cav_exists": [[55, 71], ["os.path.join", "os.path.exists", "CAV.cav_key"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.cav_key"], ["", "@", "staticmethod", "\n", "def", "check_cav_exists", "(", "cav_dir", ",", "concepts", ",", "bottleneck", ",", "cav_hparams", ")", ":", "\n", "    ", "\"\"\"Check if a CAV is saved in cav_dir.\n    Args:\n      cav_dir: where cav pickles might be saved\n      concepts: set of concepts used for CAV\n      bottleneck: the bottleneck used for CAV\n      cav_hparams: a parameter used to learn CAV\n    Returns:\n      True if exists, False otherwise.\n    \"\"\"", "\n", "cav_path", "=", "os", ".", "path", ".", "join", "(", "\n", "cav_dir", ",", "\n", "CAV", ".", "cav_key", "(", "concepts", ",", "bottleneck", ",", "cav_hparams", "[", "'model_type'", "]", ",", "\n", "cav_hparams", "[", "'alpha'", "]", ")", "+", "'.pkl'", ")", "\n", "return", "os", ".", "path", ".", "exists", "(", "cav_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.load_cav": [[72, 88], ["CAV.CAV", "open", "pickle.load"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "load_cav", "(", "cav_path", ")", ":", "\n", "    ", "\"\"\"Make a CAV instance from a saved CAV (pickle file).\n    Args:\n      cav_path: the location of the saved CAV\n    Returns:\n      CAV instance.\n    \"\"\"", "\n", "with", "open", "(", "cav_path", ",", "'rb'", ")", "as", "pkl_file", ":", "\n", "      ", "save_dict", "=", "pickle", ".", "load", "(", "pkl_file", ")", "\n", "\n", "", "cav", "=", "CAV", "(", "save_dict", "[", "'concepts'", "]", ",", "save_dict", "[", "'bottleneck'", "]", ",", "\n", "save_dict", "[", "'hparams'", "]", ",", "save_dict", "[", "'saved_path'", "]", ")", "\n", "cav", ".", "accuracies", "=", "save_dict", "[", "'accuracies'", "]", "\n", "cav", ".", "cavs", "=", "save_dict", "[", "'cavs'", "]", "\n", "return", "cav", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV._create_cav_training_set": [[89, 121], ["numpy.min", "enumerate", "numpy.array", "numpy.array", "numpy.array.extend", "numpy.array.extend", "[].reshape", "acts.keys"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_create_cav_training_set", "(", "concepts", ",", "bottleneck", ",", "acts", ")", ":", "\n", "    ", "\"\"\"Flattens acts, make mock-labels and returns the info.\n    Labels are assigned in the order that concepts exists.\n    Args:\n        concepts: names of concepts\n        bottleneck: the name of bottleneck where acts come from\n        acts: a dictionary that contains activations\n    Returns:\n        x -  flattened acts\n        labels - corresponding labels (integer)\n        labels2text -  map between labels and text.\n    \"\"\"", "\n", "\n", "x", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "labels2text", "=", "{", "}", "\n", "# to make sure postiive and negative examples are balanced,", "\n", "# truncate all examples to the size of the smallest concept.", "\n", "min_data_points", "=", "np", ".", "min", "(", "\n", "[", "acts", "[", "concept", "]", "[", "bottleneck", "]", ".", "shape", "[", "0", "]", "for", "concept", "in", "acts", ".", "keys", "(", ")", "]", ")", "\n", "\n", "for", "i", ",", "concept", "in", "enumerate", "(", "concepts", ")", ":", "\n", "      ", "x", ".", "extend", "(", "acts", "[", "concept", "]", "[", "bottleneck", "]", "[", ":", "min_data_points", "]", ".", "reshape", "(", "\n", "min_data_points", ",", "-", "1", ")", ")", "\n", "labels", ".", "extend", "(", "[", "i", "]", "*", "min_data_points", ")", "\n", "labels2text", "[", "i", "]", "=", "concept", "\n", "#tf.logging.info('the dimensions of x is: {}, the value of x is: {}'.format(x.shape(),x))", "\n", "", "x", "=", "np", ".", "array", "(", "x", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "\n", "return", "x", ",", "labels", ",", "labels2text", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.__init__": [[122, 149], ["logging.getLogger", "save_path.split", "len", "int", "int", "os.path.join", "str", "str"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "concepts", ",", "bottleneck", ",", "hparams", ",", "gpu_ids", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initialize CAV class.\n    Args:\n      concepts: set of concepts used for CAV\n      bottleneck: the bottleneck used for CAV\n      hparams: a parameter used to learn CAV\n      save_path: where to save this CAV\n    \"\"\"", "\n", "self", ".", "concepts", "=", "concepts", "\n", "self", ".", "bottleneck", "=", "bottleneck", "\n", "self", ".", "hparams", "=", "hparams", "\n", "self", ".", "save_path", "=", "save_path", "\n", "if", "save_path", ":", "\n", "       ", "if", "int", "(", "concepts", "[", "0", "]", ")", "<", "int", "(", "concepts", "[", "1", "]", ")", ":", "\n", "           ", "concept1", "=", "concepts", "[", "0", "]", "\n", "concept2", "=", "concepts", "[", "1", "]", "\n", "", "else", ":", "\n", "           ", "concept1", "=", "concepts", "[", "1", "]", "\n", "concept2", "=", "concepts", "[", "0", "]", "\n", "", "path_tmp", "=", "save_path", ".", "split", "(", "'/'", ")", "\n", "self", ".", "model_path", "=", "os", ".", "path", ".", "join", "(", "*", "path_tmp", "[", ":", "-", "1", "]", ")", "+", "'/-{}-{}-{}'", ".", "format", "(", "str", "(", "concept1", ")", "+", "str", "(", "concept2", ")", ",", "bottleneck", ",", "'svm_model_weight.pkl'", ")", "\n", "", "else", ":", "\n", "       ", "self", ".", "model_path", "=", "''", "\n", "", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "self", ".", "use_gpu", "=", "False", "\n", "if", "len", "(", "gpu_ids", ")", "!=", "0", ":", "\n", "        ", "self", ".", "use_gpu", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.train": [[150, 188], ["cav.CAV.logger.info", "CAV._create_cav_training_set", "cav.CAV._train_lm", "cav.CAV._save_cavs", "sklearn.linear_model.SGDClassifier", "len", "sklearn.linear_model.LogisticRegression", "svm_atten.svm_attention", "ValueError"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV._create_cav_training_set", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV._train_lm", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV._save_cavs"], ["", "", "def", "train", "(", "self", ",", "acts", ")", ":", "\n", "    ", "\"\"\"Train the CAVs from the activations.\n    Args:\n      acts: is a dictionary of activations. In particular, acts takes for of\n            {'concept1':{'bottleneck name1':[...act array...],\n                         'bottleneck name2':[...act array...],...\n             'concept2':{'bottleneck name1':[...act array...],\n    Raises:\n      ValueError: if the model_type in hparam is not compatible.\n    \"\"\"", "\n", "\n", "self", ".", "logger", ".", "info", "(", "'training with alpha={}'", ".", "format", "(", "self", ".", "hparams", "[", "'alpha'", "]", ")", ")", "\n", "x", ",", "labels", ",", "labels2text", "=", "CAV", ".", "_create_cav_training_set", "(", "\n", "self", ".", "concepts", ",", "self", ".", "bottleneck", ",", "acts", ")", "\n", "\n", "if", "self", ".", "hparams", "[", "'model_type'", "]", "==", "'linear'", ":", "\n", "      ", "lm", "=", "linear_model", ".", "SGDClassifier", "(", "alpha", "=", "self", ".", "hparams", "[", "'alpha'", "]", ")", "\n", "", "elif", "self", ".", "hparams", "[", "'model_type'", "]", "==", "'logistic'", ":", "\n", "      ", "lm", "=", "linear_model", ".", "LogisticRegression", "(", ")", "\n", "", "elif", "self", ".", "hparams", "[", "'model_type'", "]", "==", "'att_svm'", ":", "\n", "      ", "lm", "=", "svm_attention", "(", "self", ".", "hparams", "[", "'input_dim'", "]", ",", "self", ".", "model_path", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "'Invalid hparams.model_type: {}'", ".", "format", "(", "\n", "self", ".", "hparams", "[", "'model_type'", "]", ")", ")", "\n", "", "if", "self", ".", "use_gpu", "==", "True", ":", "\n", "# lm.cuda()", "\n", "      ", "pass", "\n", "", "self", ".", "accuracies", "=", "self", ".", "_train_lm", "(", "lm", ",", "x", ",", "labels", ",", "labels2text", ")", "\n", "if", "len", "(", "lm", ".", "coef_", ")", "==", "1", ":", "\n", "# if there were only two labels, the concept is assigned to label 0 by", "\n", "# default. So we flip the coef_ to reflect this.", "\n", "      ", "self", ".", "cavs", "=", "[", "-", "1", "*", "lm", ".", "coef_", "[", "0", "]", ",", "lm", ".", "coef_", "[", "0", "]", "]", "\n", "# if self.hparams['model_type'] == 'att_svm':", "\n", "# self.cavs.append(lm.get_attention())", "\n", "# print (len(self.cavs))", "\n", "", "else", ":", "\n", "      ", "self", ".", "cavs", "=", "[", "c", "for", "c", "in", "lm", ".", "coef_", "]", "\n", "", "self", ".", "_save_cavs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.perturb_act": [[189, 202], ["numpy.reshape", "operation", "numpy.reshape", "cav.CAV.get_direction"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.get_direction"], ["", "def", "perturb_act", "(", "self", ",", "act", ",", "concept", ",", "operation", "=", "np", ".", "add", ",", "alpha", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Make a perturbation of act with a direction of this CAV.\n    Args:\n      act: activations to be perturbed\n      concept: the concept to perturb act with.\n      operation: the operation will be ran to perturb.\n      alpha: size of the step.\n    Returns:\n      perturbed activation: same shape as act\n    \"\"\"", "\n", "flat_act", "=", "np", ".", "reshape", "(", "act", ",", "-", "1", ")", "\n", "pert", "=", "operation", "(", "flat_act", ",", "alpha", "*", "self", ".", "get_direction", "(", "concept", ")", ")", "\n", "return", "np", ".", "reshape", "(", "pert", ",", "act", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.get_key": [[203, 208], ["CAV.cav_key"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.cav_key"], ["", "def", "get_key", "(", "self", ")", ":", "\n", "    ", "\"\"\"Returns cav_key.\"\"\"", "\n", "\n", "return", "CAV", ".", "cav_key", "(", "self", ".", "concepts", ",", "self", ".", "bottleneck", ",", "self", ".", "hparams", "[", "'model_type'", "]", ",", "\n", "self", ".", "hparams", "[", "'alpha'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.get_direction": [[209, 220], ["cav.CAV.concepts.index", "cav.CAV.concepts.index"], "methods", ["None"], ["", "def", "get_direction", "(", "self", ",", "concept", ")", ":", "\n", "    ", "\"\"\"Get CAV direction.\n    Args:\n      concept: the conept of interest\n    Returns:\n      CAV vector.\n    \"\"\"", "\n", "if", "self", ".", "hparams", "[", "'model_type'", "]", "==", "'att_svm'", ":", "\n", "      ", "return", "self", ".", "cavs", "[", "self", ".", "concepts", ".", "index", "(", "concept", ")", "]", ",", "self", ".", "cavs", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "      ", "return", "self", ".", "cavs", "[", "self", ".", "concepts", ".", "index", "(", "concept", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV._save_cavs": [[221, 236], ["cav.CAV.logger.info", "open", "pickle.dump"], "methods", ["None"], ["", "", "def", "_save_cavs", "(", "self", ")", ":", "\n", "    ", "\"\"\"Save a dictionary of this CAV to a pickle.\"\"\"", "\n", "save_dict", "=", "{", "\n", "'concepts'", ":", "self", ".", "concepts", ",", "\n", "'bottleneck'", ":", "self", ".", "bottleneck", ",", "\n", "'hparams'", ":", "self", ".", "hparams", ",", "\n", "'accuracies'", ":", "self", ".", "accuracies", ",", "\n", "'cavs'", ":", "self", ".", "cavs", ",", "\n", "'saved_path'", ":", "self", ".", "save_path", "\n", "}", "\n", "if", "self", ".", "save_path", "is", "not", "None", ":", "\n", "      ", "with", "open", "(", "self", ".", "save_path", ",", "'wb'", ")", "as", "pkl_file", ":", "\n", "        ", "pickle", ".", "dump", "(", "save_dict", ",", "pkl_file", ")", "\n", "", "", "else", ":", "\n", "      ", "self", ".", "logger", ".", "info", "(", "'save_path is None. Not saving anything'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV._train_lm": [[237, 276], ["sklearn.model_selection.train_test_split", "lm.fit", "lm.predict", "range", "cav.CAV.logger.info", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "max", "sklearn.metrics.accuracy_score", "float", "float", "sum", "len", "str", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.svm_attention.fit", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.svm_attention.predict"], ["", "", "def", "_train_lm", "(", "self", ",", "lm", ",", "x", ",", "y", ",", "labels2text", ")", ":", "\n", "    ", "\"\"\"Train a model to get CAVs.\n    Modifies lm by calling the lm.fit functions. The cav coefficients are then\n    in lm._coefs.\n    Args:\n      lm: An sklearn linear_model object. Can be linear regression or\n        logistic regression. Must support .fit and ._coef.\n      x: An array of training data of shape [num_data, data_dim]\n      y: An array of integer labels of shape [num_data]\n      labels2text: Dictionary of text for each label.\n    Returns:\n      Dictionary of accuracies of the CAVs.\n    \"\"\"", "\n", "x_train", ",", "x_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "\n", "x", ",", "y", ",", "test_size", "=", "0.33", ",", "stratify", "=", "y", ")", "\n", "if", "self", ".", "use_gpu", ":", "\n", "      ", "x_train", "=", "torch", ".", "from_numpy", "(", "x_train", ")", ".", "cuda", "(", ")", "\n", "x_test", "=", "torch", ".", "from_numpy", "(", "x_test", ")", ".", "cuda", "(", ")", "\n", "y_train", "=", "torch", ".", "from_numpy", "(", "y_train", ")", ".", "cuda", "(", ")", "\n", "# if you get setting an array element with a sequence, chances are that your", "\n", "# each of your activation had different shape - make sure they are all from", "\n", "# the same layer, and input image size was the same", "\n", "", "lm", ".", "fit", "(", "x_train", ",", "y_train", ")", "\n", "y_pred", "=", "lm", ".", "predict", "(", "x_test", ")", "\n", "\n", "# get acc for each class.", "\n", "num_classes", "=", "max", "(", "y", ")", "+", "1", "\n", "acc", "=", "{", "}", "\n", "num_correct", "=", "0", "\n", "for", "class_id", "in", "range", "(", "num_classes", ")", ":", "\n", "# get indices of all test data that has this class.", "\n", "      ", "idx", "=", "(", "y_test", "==", "class_id", ")", "\n", "acc", "[", "labels2text", "[", "class_id", "]", "]", "=", "metrics", ".", "accuracy_score", "(", "\n", "y_pred", "[", "idx", "]", ",", "y_test", "[", "idx", "]", ")", "\n", "# overall correctness is weighted by the number of examples in this class.", "\n", "num_correct", "+=", "(", "sum", "(", "idx", ")", "*", "acc", "[", "labels2text", "[", "class_id", "]", "]", ")", "\n", "", "acc", "[", "'overall'", "]", "=", "float", "(", "num_correct", ")", "/", "float", "(", "len", "(", "y_test", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'acc per class %s'", "%", "(", "str", "(", "acc", ")", ")", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.get_or_train_cav": [[278, 325], ["logging.getLogger", "logging.getLogger.info", "cav.CAV", "CAV.load_cav.train", "dict", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "logging.getLogger.info", "CAV.load_cav", "CAV.cav_key().replace", "CAV.cav_key"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.load_cav", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cav.CAV.cav_key"], ["", "", "def", "get_or_train_cav", "(", "concepts", ",", "\n", "bottleneck", ",", "\n", "acts", ",", "\n", "gpu_ids", ",", "\n", "cav_dir", "=", "None", ",", "\n", "cav_hparams", "=", "None", ",", "\n", "overwrite", "=", "False", ")", ":", "\n", "  ", "\"\"\"Gets, creating and training if necessary, the specified CAV.\n  Assumes the activations already exists.\n  Args:\n    concepts: set of concepts used for CAV\n            Note: if there are two concepts, provide the positive concept\n                  first, then negative concept (e.g., ['striped', 'random500_1']\n    bottleneck: the bottleneck used for CAV\n    acts: dictionary contains activations of concepts in each bottlenecks\n          e.g., acts[concept][bottleneck]\n    cav_dir: a directory to store the results.\n    cav_hparams: a parameter used to learn CAV\n    overwrite: if set to True overwrite any saved CAV files.\n  Returns:\n    returns a CAV instance\n  \"\"\"", "\n", "mylogger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "if", "cav_hparams", "is", "None", ":", "\n", "    ", "cav_hparams", "=", "dict", "(", ")", "\n", "cav_hparams", "[", "'model_type'", "]", "=", "'linear'", "\n", "cav_hparams", "[", "'alpha'", "]", "=", "0.01", "\n", "\n", "", "cav_path", "=", "None", "\n", "if", "cav_dir", "is", "not", "None", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "cav_dir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "cav_dir", ")", "\n", "", "cav_path", "=", "os", ".", "path", ".", "join", "(", "\n", "cav_dir", ",", "\n", "CAV", ".", "cav_key", "(", "concepts", ",", "bottleneck", ",", "cav_hparams", "[", "'model_type'", "]", ",", "\n", "cav_hparams", "[", "'alpha'", "]", ")", ".", "replace", "(", "'/'", ",", "'.'", ")", "+", "'.pkl'", ")", "\n", "\n", "if", "not", "overwrite", "and", "os", ".", "path", ".", "exists", "(", "cav_path", ")", ":", "\n", "      ", "mylogger", ".", "info", "(", "'CAV already exists: {}'", ".", "format", "(", "cav_path", ")", ")", "\n", "cav_instance", "=", "CAV", ".", "load_cav", "(", "cav_path", ")", "\n", "return", "cav_instance", "\n", "\n", "", "", "mylogger", ".", "info", "(", "'Training CAV {} - {} alpha {}'", ".", "format", "(", "\n", "concepts", ",", "bottleneck", ",", "cav_hparams", "[", "'alpha'", "]", ")", ")", "\n", "cav_instance", "=", "CAV", "(", "concepts", ",", "bottleneck", ",", "cav_hparams", ",", "gpu_ids", ",", "cav_path", ")", "\n", "cav_instance", ".", "train", "(", "{", "c", ":", "acts", "[", "c", "]", "for", "c", "in", "concepts", "}", ")", "\n", "return", "cav_instance", "\n", "", ""]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cifar10_defence.defense_dataset.__init__": [[22, 60], ["numpy.zeros", "os.walk", "len", "numpy.zeros.sum", "filename.split", "os.path.join", "filename.split", "cifar10_defence.defense_dataset.filenames.append", "cifar10_defence.defense_dataset.ori_filenames.append", "int", "int", "filename.split", "float", "os.path.join", "os.path.join", "len", "cifar10_defence.defense_dataset.filenames.append", "cifar10_defence.defense_dataset.ori_filenames.append", "int", "float", "os.path.join", "int", "os.path.join", "os.path.join.split", "os.path.join.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "eps", ",", "img_num", ",", "fgsm", "=", "False", ",", "transform", "=", "None", ",", "GA", "=", "False", ")", ":", "\n", "        ", "self", ".", "filenames", "=", "[", "]", "\n", "self", ".", "ori_filenames", "=", "[", "]", "\n", "self", ".", "fgsm", "=", "fgsm", "\n", "img_filter", "=", "[", "'png'", ",", "'jpg'", "]", "\n", "label_list", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", "]", "\n", "label_arr", "=", "np", ".", "zeros", "(", "len", "(", "label_list", ")", ")", "\n", "\n", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "filename", "[", "-", "3", ":", "]", "in", "img_filter", "and", "filename", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "!=", "'ori.png'", ":", "\n", "                    ", "if", "img_num", "==", "0", ":", "\n", "                        ", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                            ", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "if", "not", "GA", ":", "\n", "                                ", "ori_filename", "=", "'{0}_{1:06d}_ori.png'", ".", "format", "(", "tmp_filename", "[", "0", "]", ",", "int", "(", "tmp_filename", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "                                ", "ori_filename", "=", "filename", "\n", "", "self", ".", "ori_filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "ori_filename", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "if", "self", ".", "fgsm", ":", "# True for that adversarial samples are from fgsm or jsma", "\n", "                            ", "label", "=", "int", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                            ", "label", "=", "int", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "", "if", "label_arr", "[", "label", "]", ">=", "img_num", "/", "len", "(", "label_list", ")", ":", "# if the number of images for one class is enough, just continue", "\n", "                            ", "continue", "\n", "", "else", ":", "\n", "                            ", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                                ", "label_arr", "[", "label", "]", "+=", "1", "\n", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "ori_filename", "=", "'{0}_{1:06d}_ori.png'", ".", "format", "(", "tmp_filename", "[", "0", "]", ",", "int", "(", "tmp_filename", "[", "1", "]", ")", ")", "\n", "self", ".", "ori_filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "ori_filename", ")", ")", "\n", "", "", "", "", "", "", "assert", "img_num", "==", "label_arr", ".", "sum", "(", ")", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cifar10_defence.defense_dataset.__getitem__": [[61, 77], ["PIL.open", "PIL.open", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "cifar10_defence.defense_dataset.transform", "cifar10_defence.defense_dataset.transform", "numpy.array", "numpy.array", "int", "int", "filename.split", "filename.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "filenames", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "ori_filename", "=", "self", ".", "ori_filenames", "[", "index", "]", "\n", "ori_img", "=", "Image", ".", "open", "(", "ori_filename", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "ori_img", "=", "self", ".", "transform", "(", "ori_img", ")", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ")", "\n", "ori_img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "ori_img", ")", ")", "\n", "if", "self", ".", "fgsm", ":", "\n", "            ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "\n", "", "return", "img", ",", "label", ",", "ori_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cifar10_defence.defense_dataset.__len__": [[78, 80], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cifar10_defence.defense_test_dataset.__init__": [[82, 111], ["numpy.zeros", "os.walk", "len", "numpy.zeros.sum", "filename.split", "os.path.join", "filename.split", "cifar10_defence.defense_test_dataset.filenames.append", "int", "int", "filename.split", "float", "os.path.join", "len", "cifar10_defence.defense_test_dataset.filenames.append", "float", "os.path.join", "os.path.join.split", "os.path.join.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "eps", ",", "img_num", "=", "0", ",", "ohter_attack", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "filenames", "=", "[", "]", "\n", "self", ".", "attack", "=", "ohter_attack", "# True for data from other attack", "\n", "img_filter", "=", "[", "'png'", ",", "'jpg'", "]", "\n", "label_list", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", "]", "\n", "label_arr", "=", "np", ".", "zeros", "(", "len", "(", "label_list", ")", ")", "\n", "\n", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "filename", "[", "-", "3", ":", "]", "in", "img_filter", "and", "filename", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "!=", "'ori.png'", ":", "\n", "                    ", "if", "img_num", "==", "0", ":", "\n", "                        ", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                            ", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "if", "self", ".", "attack", ":", "# True for that adversarial samples are from fgsm or jsma", "\n", "                            ", "label", "=", "int", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                            ", "label", "=", "int", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "", "if", "label_arr", "[", "label", "]", ">=", "img_num", "/", "len", "(", "label_list", ")", ":", "# if the number of images for one class is enough, just continue", "\n", "                            ", "continue", "\n", "", "else", ":", "\n", "                            ", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                                ", "label_arr", "[", "label", "]", "+=", "1", "\n", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "", "", "", "", "", "", "assert", "img_num", "==", "label_arr", ".", "sum", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cifar10_defence.defense_test_dataset.__getitem__": [[112, 123], ["PIL.open", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "cifar10_defence.defense_test_dataset.transform", "numpy.array", "int", "int", "filename.split", "filename.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "filenames", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ")", "\n", "if", "self", ".", "attack", ":", "\n", "          ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "          ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cifar10_defence.defense_test_dataset.__len__": [[124, 126], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cifar10_defence.train": [[127, 143], ["logging.getLogger", "torch.CrossEntropyLoss", "model.train", "enumerate", "optimizer.zero_grad", "model", "model", "loss.backward", "optimizer.step", "torch.to", "target.to", "ori_data.to", "logging.getLogger.info", "nn.CrossEntropyLoss.", "nn.CrossEntropyLoss.", "len", "loss.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "ori_data", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", ",", "ori_data", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", ",", "ori_data", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "ori_output", "=", "model", "(", "ori_data", ")", "\n", "loss", "=", "0.5", "*", "criterion", "(", "output", ",", "target", ")", "+", "0.5", "*", "criterion", "(", "ori_output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cifar10_defence.test": [[144, 163], ["logging.getLogger", "model.eval", "len", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.nll_loss().item", "pred.eq().sum().item", "len", "torch.to", "target.to", "model.max", "len", "torch.nll_loss", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "logger", ".", "info", "(", "'Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cifar10_defence.evalu": [[164, 176], ["myutils.loadweights", "g.load_state_dict", "g.to", "g.eval", "len", "g", "g.classify"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet.classify"], ["", "def", "evalu", "(", "x", ",", "gpu_ids", ",", "filename_model", ",", "g", ",", "device", ",", "wholemodel", "=", "True", ")", ":", "\n", "    ", "state_dict", "=", "loadweights", "(", "g", ",", "filename_model", ",", "gpu_ids", ")", "\n", "g", ".", "load_state_dict", "(", "state_dict", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "1", ":", "\n", "        ", "g", "=", "g", ".", "module", "\n", "", "g", ".", "to", "(", "device", ")", "\n", "g", ".", "eval", "(", ")", "\n", "if", "wholemodel", ":", "\n", "        ", "output", "=", "g", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "g", ".", "classify", "(", "x", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.cifar10_defence.main": [[177, 306], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "myutils.mylogger", "logging.getLogger", "logging.getLogger.info", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.exists", "os.makedirs", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "cifar10_defence.defense_test_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "generate_latent.pytorch_cifar.models.ResNet18().to", "os.path.join", "myutils.loadweights", "ResNet18().to.load_state_dict", "logging.getLogger.info", "cifar10_defence.test", "myutils.loadweights", "ResNet18().to.load_state_dict", "logging.getLogger.info", "cifar10_defence.test", "logging.getLogger.info", "cifar10_defence.test", "open", "open.writelines", "open.close", "cifar10_defence.defense_dataset", "logging.getLogger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "generate_latent.pytorch_cifar.models.ResNet18().to", "torch.SGD", "logging.getLogger.info", "cifar10_defence.test", "range", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "ResNet18().to.parameters", "os.path.join", "myutils.loadweights", "ResNet18().to.load_state_dict", "logging.getLogger.info", "cifar10_defence.train", "cifar10_defence.test", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "generate_latent.pytorch_cifar.models.ResNet18", "cifar10_defence.defense_dataset.__len__", "generate_latent.pytorch_cifar.models.ResNet18", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "ResNet18().to.state_dict", "str", "str", "ResNet18().to.state_dict", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.mylogger", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet18", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet18"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch MNIST Example'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_num'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of samples to train. 0 means loading all samples (default: 1800)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_to_restore'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to restore to continue to train (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'the ids of GPUs'", ")", "\n", "parser", ".", "add_argument", "(", "'--i'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Saved information'", ")", "\n", "parser", ".", "add_argument", "(", "'--adversarial_samples'", ",", "type", "=", "str", ",", "default", "=", "'./experiments/gsn_hf/cifar_train_test_cifarnet_3_1norm_ncfl512_NormL1/eps_diff/att_svm/'", ",", "help", "=", "'dir of adversarail samples'", ")", "\n", "parser", ".", "add_argument", "(", "'--eps'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_dir'", ",", "type", "=", "str", ",", "default", "=", "'./'", ",", "help", "=", "'the dir for saving the results'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'defence'", ",", "help", "=", "'the name of the experiments'", ")", "\n", "parser", ".", "add_argument", "(", "'--model4defence'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'dir of defence model weithgs'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--defence_module'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'train or test model:False for train and test, True for test.'", ")", "\n", "parser", ".", "add_argument", "(", "'--attack_dataset'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'when defend, dataset from other attack methods or our attack:False for our, True for other.'", ")", "\n", "parser", ".", "add_argument", "(", "'--GA'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'when adversarial training with GA generated adversarial examples, set as true'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "exp_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "exp_dir", ")", "\n", "", "if", "args", ".", "defence_module", ":", "\n", "        ", "defence_str", "=", "'_defence_'", "\n", "", "else", ":", "\n", "        ", "defence_str", "=", "'_advTrain_'", "\n", "\n", "", "mylogger", "(", "args", ".", "exp_dir", "+", "'cifar10'", "+", "defence_str", "+", "'-'", "+", "str", "(", "args", ".", "img_num", ")", "+", "'-'", "+", "str", "(", "args", ".", "eps", ")", "+", "args", ".", "exp_name", "+", "'.log'", ")", "\n", "# mylogger(args.exp_dir+'cifar10'+defence_str+'.log')", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "kwargs", "=", "{", "'num_workers'", ":", "1", ",", "'pin_memory'", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "transform_train", "=", "trans", ".", "Compose", "(", "[", "\n", "trans", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "trans", ".", "Compose", "(", "[", "\n", "trans", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "if", "args", ".", "defence_module", ":", "\n", "        ", "test_attack_dataset", "=", "defense_test_dataset", "(", "args", ".", "adversarial_samples", ",", "args", ".", "eps", ",", "args", ".", "img_num", ",", "args", ".", "attack_dataset", ",", "transform", "=", "transform_test", ")", "\n", "test_attack_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_attack_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./datasets/cifar/'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "# attack our original model", "\n", "model", "=", "ResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "filename_model", "=", "os", ".", "path", ".", "join", "(", "'./generate_latent/pytorch_cifar/checkpoint/cifar_cnn.pt'", ")", "\n", "model", ",", "state_dict", "=", "loadweights", "(", "model", ",", "filename_model", ",", "args", ".", "gpu_ids", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "logger", ".", "info", "(", "'Accuracy on adversarial samples using original model.'", ")", "\n", "acc1", "=", "test", "(", "args", ",", "model", ",", "device", ",", "test_attack_dataloader", ")", "\n", "\n", "# attack our finetuned model", "\n", "filename_model", "=", "args", ".", "model4defence", "\n", "model", ",", "state_dict", "=", "loadweights", "(", "model", ",", "filename_model", ",", "args", ".", "gpu_ids", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "logger", ".", "info", "(", "'Accuracy on adversarial samples using finetuned model.'", ")", "\n", "acc2", "=", "test", "(", "args", ",", "model", ",", "device", ",", "test_attack_dataloader", ")", "\n", "logger", ".", "info", "(", "'Accuracy on Cifar Test dataset using finetuned model.'", ")", "\n", "acc3", "=", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "fw", "=", "open", "(", "args", ".", "exp_dir", "+", "'logacc.txt'", ",", "'a'", ")", "\n", "fw", ".", "writelines", "(", "'original model accuracy on adv examples: '", "+", "str", "(", "acc1", ")", "+", "' accuracy of '", "+", "args", ".", "model4defence", "+", "' on '", "+", "args", ".", "adversarial_samples", "+", "' is: '", "+", "str", "(", "acc2", ")", "+", "' accuracy of defence model on clean test set is: '", "+", "str", "(", "acc3", ")", "+", "'\\n'", ")", "\n", "fw", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "train_dataset", "=", "defense_dataset", "(", "args", ".", "adversarial_samples", ",", "\n", "args", ".", "eps", ",", "\n", "args", ".", "img_num", ",", "\n", "args", ".", "attack_dataset", ",", "\n", "transform", "=", "transform_train", ",", "GA", "=", "args", ".", "GA", ")", "\n", "logger", ".", "info", "(", "'The number of training images are {}.'", ".", "format", "(", "train_dataset", ".", "__len__", "(", ")", ")", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "root", "=", "'./datasets/cifar/'", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "model", "=", "ResNet18", "(", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "5e-4", ")", "\n", "\n", "if", "args", ".", "epoch_to_restore", ">", "0", ":", "\n", "            ", "filename_model", "=", "os", ".", "path", ".", "join", "(", "'./generate_latent/pytorch_cifar/checkpoint/cifar_cnn.pt'", ")", "\n", "model", ",", "state_dict", "=", "loadweights", "(", "model", ",", "filename_model", ",", "args", ".", "gpu_ids", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'Initialize the cifarnet model with random weights.'", ")", "\n", "\n", "", "logger", ".", "info", "(", "'This is the test result before retraining cifarnet.'", ")", "\n", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "\n", "bestacc", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch_to_restore", "+", "1", ",", "args", ".", "epoch_to_restore", "+", "args", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", "\n", "testacc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "if", "(", "args", ".", "save_model", ")", "and", "testacc", ">=", "bestacc", ":", "\n", "                ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "exp_dir", "+", "\"cifar_cnn_defence_\"", "+", "args", ".", "exp_name", "+", "'_'", "+", "str", "(", "args", ".", "eps", ")", "+", "'_best.pt'", ")", "\n", "bestacc", "=", "testacc", "\n", "\n", "", "", "if", "(", "args", ".", "save_model", ")", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "exp_dir", "+", "\"cifar_cnn_defence_\"", "+", "args", ".", "exp_name", "+", "'_'", "+", "str", "(", "args", ".", "eps", ")", "+", "\".pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.celebA_defence.defense_dataset.__init__": [[22, 56], ["numpy.zeros", "os.walk", "len", "numpy.zeros.sum", "filename.split", "os.path.join", "filename.split", "celebA_defence.defense_dataset.filenames.append", "celebA_defence.defense_dataset.ori_filenames.append", "int", "int", "filename.split", "float", "os.path.join", "int", "os.path.join", "len", "celebA_defence.defense_dataset.filenames.append", "celebA_defence.defense_dataset.ori_filenames.append", "float", "os.path.join", "int", "os.path.join", "os.path.join.split", "os.path.join.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "eps", ",", "img_num", ",", "fgsm", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "filenames", "=", "[", "]", "\n", "self", ".", "ori_filenames", "=", "[", "]", "\n", "self", ".", "fgsm", "=", "fgsm", "\n", "img_filter", "=", "[", "'.png'", ",", "'.jpg'", "]", "\n", "label_list", "=", "[", "0", ",", "1", "]", "\n", "label_arr", "=", "np", ".", "zeros", "(", "len", "(", "label_list", ")", ")", "\n", "\n", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "filename", "[", "-", "4", ":", "]", "in", "img_filter", "and", "filename", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "!=", "'ori.png'", ":", "\n", "                    ", "if", "img_num", "==", "0", ":", "\n", "                        ", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                            ", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "ori_filename", "=", "'{0}_{1:06d}_ori.png'", ".", "format", "(", "tmp_filename", "[", "0", "]", ",", "int", "(", "tmp_filename", "[", "1", "]", ")", ")", "\n", "self", ".", "ori_filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "ori_filename", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "if", "self", ".", "fgsm", ":", "# True for that adversarial samples are from fgsm or jsma", "\n", "                            ", "label", "=", "int", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                            ", "label", "=", "int", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "", "if", "label_arr", "[", "label", "]", ">=", "img_num", "/", "len", "(", "label_list", ")", ":", "# if the number of images for one class is enough, just continue", "\n", "                            ", "continue", "\n", "", "else", ":", "\n", "                            ", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                                ", "label_arr", "[", "label", "]", "+=", "1", "\n", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "ori_filename", "=", "'{0}_{1:06d}_ori.png'", ".", "format", "(", "tmp_filename", "[", "0", "]", ",", "int", "(", "tmp_filename", "[", "1", "]", ")", ")", "\n", "self", ".", "ori_filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "ori_filename", ")", ")", "\n", "", "", "", "", "", "", "assert", "img_num", "==", "label_arr", ".", "sum", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.celebA_defence.defense_dataset.__getitem__": [[57, 76], ["PIL.open", "os.path.exists", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "PIL.open", "celebA_defence.defense_dataset.transform", "celebA_defence.defense_dataset.transform", "numpy.array", "numpy.array", "int", "int", "filename.split", "filename.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "filenames", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "ori_filename", "=", "self", ".", "ori_filenames", "[", "index", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "ori_filename", ")", ":", "\n", "            ", "ori_img", "=", "Image", ".", "open", "(", "ori_filename", ")", "\n", "", "else", ":", "\n", "            ", "ori_img", "=", "img", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "ori_img", "=", "self", ".", "transform", "(", "ori_img", ")", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ")", "\n", "ori_img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "ori_img", ")", ")", "\n", "if", "self", ".", "fgsm", ":", "\n", "            ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "\n", "", "return", "img", ",", "label", ",", "ori_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.celebA_defence.defense_dataset.__len__": [[77, 79], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.celebA_defence.defense_test_dataset.__init__": [[81, 110], ["numpy.zeros", "os.walk", "len", "numpy.zeros.sum", "filename.split", "os.path.join", "filename.split", "celebA_defence.defense_test_dataset.filenames.append", "int", "int", "filename.split", "float", "os.path.join", "len", "celebA_defence.defense_test_dataset.filenames.append", "float", "os.path.join", "os.path.join.split", "os.path.join.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "eps", ",", "img_num", "=", "0", ",", "ohter_attack", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "filenames", "=", "[", "]", "\n", "self", ".", "attack", "=", "ohter_attack", "# True for data from other attack", "\n", "img_filter", "=", "[", "'.png'", ",", "'.jpg'", "]", "\n", "label_list", "=", "[", "0", ",", "1", "]", "\n", "label_arr", "=", "np", ".", "zeros", "(", "len", "(", "label_list", ")", ")", "\n", "\n", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "filename", "[", "-", "4", ":", "]", "in", "img_filter", "and", "filename", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "!=", "'ori.png'", ":", "\n", "                    ", "if", "img_num", "==", "0", ":", "\n", "                        ", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                            ", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "", "", "else", ":", "\n", "                        ", "img_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "if", "self", ".", "attack", ":", "# True for that adversarial samples are from fgsm or jsma", "\n", "                            ", "label", "=", "int", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                            ", "label", "=", "int", "(", "img_path", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "", "if", "label_arr", "[", "label", "]", ">=", "img_num", "/", "len", "(", "label_list", ")", ":", "# if the number of images for one class is enough, just continue", "\n", "                            ", "continue", "\n", "", "else", ":", "\n", "                            ", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                                ", "label_arr", "[", "label", "]", "+=", "1", "\n", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "", "", "", "", "", "", "assert", "img_num", "==", "label_arr", ".", "sum", "(", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.celebA_defence.defense_test_dataset.__getitem__": [[111, 122], ["PIL.open", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "celebA_defence.defense_test_dataset.transform", "numpy.array", "int", "int", "filename.split", "filename.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "filenames", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ")", "\n", "if", "self", ".", "attack", ":", "\n", "          ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "          ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.celebA_defence.defense_test_dataset.__len__": [[123, 125], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.celebA_defence.train": [[126, 143], ["logging.getLogger", "torch.BCEWithLogitsLoss", "model.train", "enumerate", "torch.unsqueeze().type", "torch.unsqueeze().type", "torch.unsqueeze().type", "torch.unsqueeze().type", "torch.unsqueeze().type", "optimizer.zero_grad", "model", "model", "loss.backward", "optimizer.step", "torch.to", "torch.unsqueeze().type.to", "ori_data.to", "logging.getLogger.info", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "nn.BCEWithLogitsLoss.", "nn.BCEWithLogitsLoss.", "len", "loss.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "ori_data", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "target", "=", "torch", ".", "unsqueeze", "(", "target", ",", "1", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "data", ",", "target", ",", "ori_data", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", ",", "ori_data", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "ori_output", "=", "model", "(", "ori_data", ")", "\n", "loss", "=", "0.5", "*", "criterion", "(", "output", ",", "target", ")", "+", "0.5", "*", "criterion", "(", "ori_output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.celebA_defence.test": [[144, 165], ["logging.getLogger", "model.eval", "torch.BCEWithLogitsLoss", "len", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "torch.unsqueeze().type", "torch.unsqueeze().type", "torch.unsqueeze().type", "torch.unsqueeze().type", "torch.unsqueeze().type", "model", "nn.BCEWithLogitsLoss.item", "pred.eq().sum().item", "len", "torch.to", "torch.unsqueeze().type.to", "len", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "nn.BCEWithLogitsLoss.", "pred.eq().sum", "pred.eq", "torch.unsqueeze().type.view_as"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'sum'", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "target", "=", "torch", ".", "unsqueeze", "(", "target", ",", "1", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "loss", "(", "output", ",", "target", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "(", "(", "output", ">=", "0.5", ")", ".", "type", "(", "torch", ".", "float32", ")", ")", ".", "to", "(", "device", ")", "# get the label", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "logger", ".", "info", "(", "'Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.celebA_defence.main": [[166, 300], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "myutils.mylogger", "logging.getLogger", "logging.getLogger.info", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.exists", "os.makedirs", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "celebA_defence.defense_test_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "generate_latent.celebA_classify.celebANet().to", "myutils.loadweights", "celebANet().to.load_state_dict", "logging.getLogger.info", "celebA_defence.test", "myutils.loadweights", "celebANet().to.load_state_dict", "logging.getLogger.info", "celebA_defence.test", "accList.append", "open", "open.writelines", "open.close", "logging.getLogger.info", "celebA_defence.test", "accList.append", "celebA_defence.defense_dataset", "logging.getLogger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "generate_latent.celebA_classify.celebANet().to", "torch.SGD", "logging.getLogger.info", "celebA_defence.test", "range", "myutils.write2file", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "generate_latent.celebA_classify.celebA_dataset", "str", "str", "generate_latent.celebA_classify.celebA_dataset", "celebANet().to.parameters", "myutils.loadweights", "celebANet().to.load_state_dict", "logging.getLogger.info", "celebA_defence.train", "celebA_defence.test", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "generate_latent.celebA_classify.celebANet", "celebA_defence.defense_dataset.__len__", "generate_latent.celebA_classify.celebANet", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "celebANet().to.state_dict", "str", "celebANet().to.state_dict", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.mylogger", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.myutils.write2file", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch CelebA Example'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 128)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_num'", ",", "type", "=", "int", ",", "default", "=", "1800", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of samples to train. 0 means loading all samples (default: 1800)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_to_restore'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to restore to continue to train (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'the ids of GPUs'", ")", "\n", "parser", ".", "add_argument", "(", "'--i'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Saved information'", ")", "\n", "parser", ".", "add_argument", "(", "'--adversarial_samples'", ",", "type", "=", "str", ",", "default", "=", "'./experiments/gsn_hf/celebA_post_train_test_celebANet_0_1norm_ncfl512_NormL1/eps_diff/att_svm/'", ",", "help", "=", "'dir of adversarail samples'", ")", "\n", "parser", ".", "add_argument", "(", "'--eps'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_dir'", ",", "type", "=", "str", ",", "default", "=", "'./'", ",", "help", "=", "'the dir for saving the results'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'defence'", ",", "help", "=", "'the name of the experiments'", ")", "\n", "parser", ".", "add_argument", "(", "'--model4defence'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'dir of defence model weithgs'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--defence_module'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'train or test model:False for train and test, True for test.'", ")", "\n", "parser", ".", "add_argument", "(", "'--attack_dataset'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'when defend, dataset from other attack methods or our attack:False for our, True for other.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "accList", "=", "[", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "exp_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "exp_dir", ")", "\n", "", "if", "args", ".", "defence_module", ":", "\n", "        ", "defence_str", "=", "'_defence_'", "\n", "", "else", ":", "\n", "        ", "defence_str", "=", "'_advTrain_'", "\n", "\n", "#    mylogger(args.exp_dir+'celebA'+defence_str+str(args.eps)+'_'+str(args.img_num)+'_'+args.exp_name+'.log')", "\n", "", "mylogger", "(", "args", ".", "exp_dir", "+", "'celebA'", "+", "defence_str", "+", "'.log'", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "kwargs", "=", "{", "'num_workers'", ":", "1", ",", "'pin_memory'", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "128", ",", "128", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "128", ",", "128", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", ")", "\n", "if", "args", ".", "defence_module", ":", "\n", "        ", "test_attack_dataset", "=", "defense_test_dataset", "(", "args", ".", "adversarial_samples", ",", "args", ".", "eps", ",", "args", ".", "img_num", ",", "args", ".", "attack_dataset", ",", "transform", "=", "transform_test", ")", "\n", "test_attack_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_attack_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "celebA_dataset", "(", "'./datasets/celebA_post/'", ",", "train", "=", "False", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "# attack our original model", "\n", "model", "=", "celebANet", "(", "'vgg11_bn'", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "filename_model", "=", "'./generate_latent/celebA_cnn.pt'", "\n", "model", ",", "state_dict", "=", "loadweights", "(", "model", ",", "filename_model", ",", "args", ".", "gpu_ids", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "logger", ".", "info", "(", "'Accuracy on adversarial samples using original model.'", ")", "\n", "acc1", "=", "test", "(", "args", ",", "model", ",", "device", ",", "test_attack_dataloader", ")", "\n", "\n", "# attack our finetuned model", "\n", "filename_model", "=", "args", ".", "model4defence", "\n", "model", ",", "state_dict", "=", "loadweights", "(", "model", ",", "filename_model", ",", "args", ".", "gpu_ids", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "logger", ".", "info", "(", "'Accuracy on adversarial samples using finetuned model.'", ")", "\n", "acc2", "=", "test", "(", "args", ",", "model", ",", "device", ",", "test_attack_dataloader", ")", "\n", "accList", ".", "append", "(", "str", "(", "acc2", ")", ")", "\n", "fw", "=", "open", "(", "args", ".", "exp_dir", "+", "'logacc.txt'", ",", "'a'", ")", "\n", "fw", ".", "writelines", "(", "args", ".", "model4defence", "+", "' on '", "+", "args", ".", "adversarial_samples", "+", "' is: '", "+", "str", "(", "acc2", ")", "+", "'\\n'", ")", "\n", "fw", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Accuracy on CelebA Test dataset using finetuned model.'", ")", "\n", "acc3", "=", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "accList", ".", "append", "(", "str", "(", "acc3", ")", ")", "\n", "", "else", ":", "\n", "        ", "train_dataset", "=", "defense_dataset", "(", "args", ".", "adversarial_samples", ",", "\n", "args", ".", "eps", ",", "\n", "args", ".", "img_num", ",", "\n", "args", ".", "attack_dataset", ",", "\n", "transform", "=", "transform_train", ")", "\n", "logger", ".", "info", "(", "'The number of training images are {}; use {} for training.'", ".", "format", "(", "train_dataset", ".", "__len__", "(", ")", ",", "args", ".", "img_num", ")", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "celebA_dataset", "(", "'./datasets/celebA_post/'", ",", "train", "=", "False", ",", "transform", "=", "transform_test", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "model", "=", "celebANet", "(", "'vgg11_bn'", ",", "1", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "5e-4", ")", "\n", "\n", "if", "args", ".", "epoch_to_restore", ">", "0", ":", "\n", "            ", "filename_model", "=", "'./generate_latent/celebA_cnn.pt'", "\n", "model", ",", "state_dict", "=", "loadweights", "(", "model", ",", "filename_model", ",", "args", ".", "gpu_ids", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'Initialize the celebANet model with random weights.'", ")", "\n", "\n", "", "logger", ".", "info", "(", "'This is the test result before retraining celebANet on clean examples.'", ")", "\n", "acc4", "=", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch_to_restore", "+", "1", ",", "args", ".", "epoch_to_restore", "+", "args", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", "\n", "acc5", "=", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "if", "(", "args", ".", "save_model", ")", "and", "epoch", "%", "100", "==", "0", ":", "\n", "                ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "exp_dir", "+", "'celebA_cnn_'", "+", "args", ".", "exp_name", "+", "'_'", "+", "str", "(", "epoch", ")", "+", "'.pt'", ")", "\n", "\n", "", "", "if", "(", "args", ".", "save_model", ")", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "exp_dir", "+", "\"celebA_cnn_defence_\"", "+", "args", ".", "exp_name", "+", "'_'", "+", "str", "(", "args", ".", "img_num", ")", "+", "'_'", "+", "str", "(", "args", ".", "eps", ")", "+", "\".pt\"", ")", "\n", "", "", "if", "accList", "is", "not", "None", ":", "\n", "        ", "write2file", "(", "args", ".", "exp_dir", "+", "'accLog.txt'", ",", "accList", ",", "[", "0", ",", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.Self_Attn.__init__": [[12, 22], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "svm_atten.Self_Attn.softmax.cuda", "svm_atten.Self_Attn.conv.cuda", "svm_atten.Self_Attn.activate.cuda"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "Self_Attn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", ",", "kernel_size", "=", "1", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "#", "\n", "self", ".", "activate", "=", "nn", ".", "Tanh", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "softmax", ".", "cuda", "(", ")", "\n", "self", ".", "conv", ".", "cuda", "(", ")", "\n", "self", ".", "activate", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.Self_Attn.forward": [[23, 47], ["svm_atten.Self_Attn.conv", "svm_atten.Self_Attn.softmax", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "svm_atten.Self_Attn.activate", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "x.cuda.cuda.cuda", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X channel)\n            returns :\n                out : self attention value \n                attention: B X channel(channel is dim of latenr features)\n        \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "            ", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "", "if", "len", "(", "x", ".", "shape", ")", "!=", "4", ":", "\n", "            ", "x", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "x", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "# B X channel X 1 X 1", "\n", "", "proj_query", "=", "self", ".", "conv", "(", "x", ")", "# B X channel X 1 X 1", "\n", "# proj_key = torch.squeeze(self.conv(x), dim=-1) # channel", "\n", "# energy =  torch.bmm(torch.squeeze(proj_query, dim=-1), proj_key.permute(0,2,1)) # transpose check", "\n", "attention", "=", "self", ".", "softmax", "(", "self", ".", "activate", "(", "torch", ".", "squeeze", "(", "torch", ".", "squeeze", "(", "proj_query", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", ")", ")", "# BX (channel) ", "\n", "# proj_value = torch.unsqueeze(self.value_conv(x), dim=2) # B X channel X 1", "\n", "attention", "=", "torch", ".", "exp", "(", "attention", ")", "\n", "out", "=", "torch", ".", "squeeze", "(", "torch", ".", "squeeze", "(", "x", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "*", "attention", "\n", "# out = self.gamma*out + x", "\n", "# out = torch.squeeze(out, dim = -1)", "\n", "return", "out", ",", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.LinearSVM.__init__": [[51, 57], ["torch.Module.__init__", "svm_atten.Self_Attn", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.Linear", "torch.Linear", "torch.Linear", "svm_atten.LinearSVM.attention_layer.cuda"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ")", ":", "\n", "        ", "super", "(", "LinearSVM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention_layer", "=", "Self_Attn", "(", "input_dim", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "attention_layer", ".", "cuda", "(", ")", "\n", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_dim", ",", "1", ")", "# input_dim is 500 for mnist.", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.LinearSVM.forward": [[58, 63], ["svm_atten.LinearSVM.attention_layer", "svm_atten.LinearSVM.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", ",", "attetion", "=", "self", ".", "attention_layer", "(", "x", ")", "\n", "# attetion = torch.ones([1,500])", "\n", "h", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "h", ",", "attetion", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.LinearSVM.predict": [[64, 73], ["svm_atten.LinearSVM.attention_layer", "svm_atten.LinearSVM.fc", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "x.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "# predict labels of input x", "\n", "        ", "if", "not", "torch", ".", "is_tensor", "(", "x", ")", ":", "\n", "            ", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "", "x", ",", "attetion", "=", "self", ".", "attention_layer", "(", "x", ")", "\n", "h", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.svm_attention.__init__": [[81, 92], ["svm_atten.LinearSVM", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "svm_atten.svm_attention.model.cuda"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "save_path", "=", "'att_svm.pkl'", ",", "batch_size", "=", "1", ",", "c", "=", "0.01", ",", "learning_rate", "=", "0.01", ",", "epoch", "=", "10", ")", ":", "\n", "#super(svm_attention, self).__init__()", "\n", "        ", "self", ".", "model", "=", "LinearSVM", "(", "input_dim", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "           ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "", "self", ".", "lr", "=", "learning_rate", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "batchsize", "=", "batch_size", "\n", "self", ".", "c", "=", "c", "\n", "self", ".", "coef_", "=", "[", "]", "\n", "self", ".", "save_path", "=", "save_path", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.svm_attention.fit": [[93, 133], ["len", "torch.SGD", "torch.SGD", "torch.SGD", "svm_atten.svm_attention.model.train", "range", "svm_atten.svm_attention.coef_.append", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "X.float.float.float", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "Y.float.float.float", "svm_atten.svm_attention.model.parameters", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "range", "print", "svm_atten.svm_attention.model.state_dict", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.SGD.zero_grad", "svm_atten.svm_attention.model", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss.backward", "torch.SGD.step", "loss.data.cpu().numpy", "x.cuda.cuda.cuda", "y.cuda.cuda.cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "loss.data.cpu", "output.t"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train"], ["", "def", "fit", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "Y", "[", "Y", "==", "0", "]", "=", "-", "1", "\n", "if", "not", "torch", ".", "is_tensor", "(", "X", ")", ":", "\n", "           ", "X", "=", "torch", ".", "FloatTensor", "(", "X", ")", "\n", "", "else", ":", "\n", "           ", "X", "=", "X", ".", "float", "(", ")", "\n", "", "if", "not", "torch", ".", "is_tensor", "(", "Y", ")", ":", "\n", "           ", "Y", "=", "torch", ".", "FloatTensor", "(", "Y", ")", "\n", "", "else", ":", "\n", "           ", "Y", "=", "Y", ".", "float", "(", ")", "\n", "", "N", "=", "len", "(", "Y", ")", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "self", ".", "epoch", ")", ":", "\n", "            ", "perm", "=", "torch", ".", "randperm", "(", "N", ")", "\n", "sum_loss", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "N", ",", "self", ".", "batchsize", ")", ":", "\n", "                ", "x", "=", "X", "[", "perm", "[", "i", ":", "i", "+", "self", ".", "batchsize", "]", "]", "\n", "y", "=", "Y", "[", "perm", "[", "i", ":", "i", "+", "self", ".", "batchsize", "]", "]", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "x", "=", "x", ".", "cuda", "(", ")", "\n", "y", "=", "y", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", ",", "self", ".", "attention", "=", "self", ".", "model", "(", "x", ")", "\n", "\n", "loss", "=", "self", ".", "c", "*", "torch", ".", "mean", "(", "torch", ".", "clamp", "(", "1", "-", "output", ".", "t", "(", ")", "*", "y", ",", "min", "=", "0", ")", ")", "# hinge loss", "\n", "loss", "+=", "torch", ".", "mean", "(", "self", ".", "model", ".", "fc", ".", "weight", "**", "2", ")", "# l2 penalty", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "sum_loss", "+=", "loss", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "print", "(", "\"Epoch:{:4d}\\tloss:{}\"", ".", "format", "(", "epoch", ",", "sum_loss", "/", "N", ")", ")", "\n", "# self.coef_.append(torch.matmul(self.attention, self.model.fc.weight))", "\n", "", "self", ".", "coef_", ".", "append", "(", "self", ".", "model", ".", "fc", ".", "weight", ")", "\n", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "self", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.svm_attention.predict": [[134, 142], ["svm_atten.svm_attention.model.eval", "torch.squeeze().data.cpu", "torch.squeeze().data.cpu", "torch.squeeze().data.cpu", "torch.squeeze().data.cpu", "torch.squeeze().data.cpu", "torch.squeeze().data.cpu", "torch.squeeze().data.cpu", "torch.squeeze().data.cpu", "torch.squeeze().data.cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "pred.data.cpu().numpy.data.cpu().numpy.data.cpu().numpy", "pred.data.cpu().numpy.data.cpu().numpy.data.cpu", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "svm_atten.svm_attention.model.predict"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.svm_attention.predict"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "pred", "=", "torch", ".", "squeeze", "(", "self", ".", "model", ".", "predict", "(", "x", ")", ")", ".", "data", ".", "cpu", "(", ")", "\n", "label_zero", "=", "torch", ".", "zeros", "(", "pred", ".", "shape", ")", "\n", "label_ones", "=", "torch", ".", "ones", "(", "pred", ".", "shape", ")", "\n", "pred", "=", "torch", ".", "where", "(", "pred", ">", "0", ",", "label_ones", ",", "label_zero", ")", "\n", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.svm_atten.svm_attention.get_attention": [[143, 147], ["svm_atten.svm_attention.model.load_state_dict", "svm_atten.svm_attention.model", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["None"], ["", "def", "get_attention", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "save_path", ")", ")", "\n", "output", ",", "attention", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "attention", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.mnist_defence.Net.__init__": [[26, 32], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "20", ",", "5", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "20", ",", "50", ",", "5", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "4", "*", "4", "*", "50", ",", "500", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "500", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.mnist_defence.Net.forward": [[33, 42], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "mnist_defence.Net.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mnist_defence.Net.fc2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "mnist_defence.Net.conv1", "mnist_defence.Net.conv2", "mnist_defence.Net.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "4", "*", "4", "*", "50", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.mnist_defence.Net.classify": [[43, 46], ["mnist_defence.Net.fc2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "classify", "(", "self", ",", "feature", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc2", "(", "feature", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.mnist_defence.defense_dataset.__init__": [[48, 63], ["os.walk", "filename.split", "mnist_defence.defense_dataset.filenames.append", "mnist_defence.defense_dataset.ori_filenames.append", "float", "os.path.join", "int", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "eps", ",", "fgsm", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "filenames", "=", "[", "]", "\n", "self", ".", "ori_filenames", "=", "[", "]", "\n", "self", ".", "fgsm", "=", "fgsm", "\n", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "filename", "[", "-", "4", ":", "]", "not", "in", "[", "'.png'", ",", "'.jpg'", "]", ":", "\n", "                    ", "continue", "\n", "", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", "!=", "'ori'", ":", "\n", "                    ", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                        ", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "ori_filename", "=", "'{0}_{1:06d}_ori.png'", ".", "format", "(", "tmp_filename", "[", "0", "]", ",", "int", "(", "tmp_filename", "[", "1", "]", ")", ")", "\n", "self", ".", "ori_filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "ori_filename", ")", ")", "\n", "", "", "", "", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.mnist_defence.defense_dataset.__getitem__": [[64, 83], ["PIL.open", "os.path.exists", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "PIL.open", "mnist_defence.defense_dataset.transform", "mnist_defence.defense_dataset.transform", "numpy.array", "numpy.array", "int", "int", "filename.split", "filename.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "filenames", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "ori_filename", "=", "self", ".", "ori_filenames", "[", "index", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "ori_filename", ")", ":", "\n", "            ", "ori_img", "=", "Image", ".", "open", "(", "ori_filename", ")", "\n", "", "else", ":", "\n", "            ", "ori_img", "=", "img", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "ori_img", "=", "self", ".", "transform", "(", "ori_img", ")", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ")", "\n", "ori_img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "ori_img", ")", ")", "\n", "if", "self", ".", "fgsm", ":", "\n", "            ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "\n", "", "return", "img", ",", "label", ",", "ori_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.mnist_defence.defense_dataset.__len__": [[84, 86], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.mnist_defence.defense_test_dataset.__init__": [[88, 100], ["os.walk", "filename.split", "mnist_defence.defense_test_dataset.filenames.append", "float", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "eps", ",", "ohter_attack", "=", "False", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "filenames", "=", "[", "]", "\n", "self", ".", "attack", "=", "ohter_attack", "# True for data from other attack", "\n", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "filename", "[", "-", "4", ":", "]", "not", "in", "[", "'.png'", ",", "'.jpg'", "]", ":", "\n", "                    ", "continue", "\n", "", "tmp_filename", "=", "filename", ".", "split", "(", "'_'", ")", "\n", "if", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", "!=", "'ori'", ":", "\n", "                    ", "if", "eps", "==", "-", "1", "or", "float", "(", "tmp_filename", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "==", "eps", ":", "\n", "                        ", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "", "", "", "", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.mnist_defence.defense_test_dataset.__getitem__": [[101, 112], ["PIL.open", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "mnist_defence.defense_test_dataset.transform", "numpy.array", "int", "int", "filename.split", "filename.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "filenames", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ")", "\n", "if", "self", ".", "attack", ":", "\n", "          ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "          ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.mnist_defence.defense_test_dataset.__len__": [[113, 115], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.mnist_defence.train": [[116, 131], ["logging.getLogger", "model.train", "enumerate", "optimizer.zero_grad", "model", "model", "loss.backward", "optimizer.step", "torch.to", "target.to", "ori_data.to", "logging.getLogger.info", "torch.nll_loss", "torch.nll_loss", "len", "loss.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ",", "ori_data", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", ",", "ori_data", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", ",", "ori_data", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "ori_output", "=", "model", "(", "ori_data", ")", "\n", "loss", "=", "0.5", "*", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "+", "0.5", "*", "F", ".", "nll_loss", "(", "ori_output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.mnist_defence.test": [[132, 151], ["logging.getLogger", "model.eval", "len", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "model", "torch.nll_loss().item", "pred.eq().sum().item", "len", "torch.to", "target.to", "model.max", "len", "torch.nll_loss", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "logger", ".", "info", "(", "'Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.mnist_defence.evalu": [[152, 164], ["myutils.loadweights", "g.load_state_dict", "g.to", "g.eval", "len", "g", "g.classify"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet.classify"], ["", "def", "evalu", "(", "x", ",", "gpu_ids", ",", "filename_model", ",", "g", ",", "device", ",", "wholemodel", "=", "True", ")", ":", "\n", "    ", "state_dict", "=", "loadweights", "(", "g", ",", "filename_model", ",", "gpu_ids", ")", "\n", "g", ".", "load_state_dict", "(", "state_dict", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "1", ":", "\n", "        ", "g", "=", "g", ".", "module", "\n", "", "g", ".", "to", "(", "device", ")", "\n", "g", ".", "eval", "(", ")", "\n", "if", "wholemodel", ":", "\n", "        ", "output", "=", "g", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "g", ".", "classify", "(", "x", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.None.mnist_defence.main": [[165, 299], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "myutils.mylogger", "logging.getLogger", "logging.getLogger.info", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "os.path.exists", "os.makedirs", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "mnist_defence.defense_test_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Net().to", "os.path.join", "myutils.loadweights", "Net().to.load_state_dict", "logging.getLogger.info", "mnist_defence.test", "myutils.loadweights", "Net().to.load_state_dict", "logging.getLogger.info", "mnist_defence.test", "open", "open.writelines", "open.close", "logging.getLogger.info", "mnist_defence.test", "mnist_defence.defense_dataset", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Net().to", "torch.SGD", "logging.getLogger.info", "mnist_defence.test", "range", "torchvision.datasets.MNIST", "logging.getLogger.info", "logging.getLogger.info", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torchvision.datasets.MNIST", "Net().to.parameters", "os.path.join", "myutils.loadweights", "Net().to.load_state_dict", "logging.getLogger.info", "mnist_defence.train", "mnist_defence.test", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torchvision.transforms.Compose", "mnist_defence.Net", "torchvision.transforms.Compose", "mnist_defence.Net", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "Net().to.state_dict", "torchvision.transforms.Compose", "str", "torch.utils.data.Subset.__len__", "torch.utils.data.Subset.__len__", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torchvision.transforms.Compose", "Net().to.state_dict", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torch.utils.data.Subset.__len__", "str", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "str", "str"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.mylogger", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch MNIST Example'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_num'", ",", "type", "=", "int", ",", "default", "=", "4500", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of images to train (default: 4500)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_to_restore'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to restore to continue to train (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_ids'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'the ids of GPUs'", ")", "\n", "parser", ".", "add_argument", "(", "'--i'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Saved information'", ")", "\n", "parser", ".", "add_argument", "(", "'--adversarial_samples'", ",", "type", "=", "str", ",", "default", "=", "'./experiments/gsn_hf/mnist_train_test_lenet_3_1norm_ncfl50_NormL2/eps_diff/att_svm/'", ",", "help", "=", "'dir of adversarail samples'", ")", "\n", "parser", ".", "add_argument", "(", "'--eps'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_dir'", ",", "type", "=", "str", ",", "default", "=", "'./'", ",", "help", "=", "'the dir for saving the results'", ")", "\n", "parser", ".", "add_argument", "(", "'--exp_name'", ",", "type", "=", "str", ",", "default", "=", "'defence'", ",", "help", "=", "'the name of the experiments'", ")", "\n", "parser", ".", "add_argument", "(", "'--model4defence'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'dir of defence model weithgs'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--defence_module'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'train or test model:False for train and test, True for test.'", ")", "\n", "parser", ".", "add_argument", "(", "'--attack_dataset'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'when defend, dataset from other attack methods or our attack:False for our, True for other.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "exp_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "exp_dir", ")", "\n", "", "if", "args", ".", "defence_module", ":", "\n", "        ", "defence_str", "=", "'_defence_'", "\n", "", "else", ":", "\n", "        ", "defence_str", "=", "'_advTrain_'", "\n", "\n", "#mylogger(args.exp_dir+'mnist'+defence_str+'-'+str(args.img_num)+'-'+str(args.eps)+args.exp_name+'.log')", "\n", "", "mylogger", "(", "args", ".", "exp_dir", "+", "'mnist'", "+", "defence_str", "+", "'.log'", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "logger", ".", "info", "(", "args", ")", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "kwargs", "=", "{", "'num_workers'", ":", "1", ",", "'pin_memory'", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "if", "args", ".", "defence_module", ":", "\n", "        ", "test_attack_dataset", "=", "defense_test_dataset", "(", "args", ".", "adversarial_samples", ",", "args", ".", "eps", ",", "args", ".", "attack_dataset", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", "\n", "test_attack_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_attack_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "'./datasets/mnist/'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "# attack our original model", "\n", "model", "=", "Net", "(", ")", ".", "to", "(", "device", ")", "\n", "filename_model", "=", "os", ".", "path", ".", "join", "(", "'./generate_latent/mnist_cnn.pt'", ")", "\n", "model", ",", "state_dict", "=", "loadweights", "(", "model", ",", "filename_model", ",", "args", ".", "gpu_ids", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "logger", ".", "info", "(", "'Accuracy on adversarial samples using original model.'", ")", "\n", "test", "(", "args", ",", "model", ",", "device", ",", "test_attack_dataloader", ")", "\n", "\n", "# attack our finetuned model", "\n", "filename_model", "=", "args", ".", "model4defence", "\n", "model", ",", "state_dict", "=", "loadweights", "(", "model", ",", "filename_model", ",", "args", ".", "gpu_ids", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "logger", ".", "info", "(", "'Accuracy on adversarial samples using finetuned model.'", ")", "\n", "adv_acc", "=", "test", "(", "args", ",", "model", ",", "device", ",", "test_attack_dataloader", ")", "\n", "fw", "=", "open", "(", "args", ".", "exp_dir", "+", "'logacc.txt'", ",", "'a'", ")", "\n", "fw", ".", "writelines", "(", "args", ".", "model4defence", "+", "' on '", "+", "args", ".", "adversarial_samples", "+", "' is: '", "+", "str", "(", "adv_acc", ")", "+", "'\\n'", ")", "\n", "fw", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "'Accuracy on Mnist Test dataset using finetuned model.'", ")", "\n", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "", "else", ":", "\n", "        ", "train_dataset", "=", "defense_dataset", "(", "args", ".", "adversarial_samples", ",", "\n", "args", ".", "eps", ",", "\n", "args", ".", "attack_dataset", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", "\n", "if", "args", ".", "img_num", "!=", "-", "1", ":", "\n", "            ", "logger", ".", "info", "(", "'The number of training images are {}; use {} for training.'", ".", "format", "(", "train_dataset", ".", "__len__", "(", ")", ",", "args", ".", "img_num", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'The number of training images are {}; use all for training.'", ".", "format", "(", "train_dataset", ".", "__len__", "(", ")", ")", ")", "\n", "", "indexs", "=", "torch", ".", "randperm", "(", "train_dataset", ".", "__len__", "(", ")", ")", ".", "tolist", "(", ")", "[", "0", ":", "args", ".", "img_num", "]", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "train_dataset", ",", "indexs", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "'./datasets/mnist/'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "model", "=", "Net", "(", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ")", "\n", "\n", "if", "args", ".", "epoch_to_restore", ">", "0", ":", "\n", "            ", "filename_model", "=", "os", ".", "path", ".", "join", "(", "'./generate_latent/mnist_cnn.pt'", ")", "\n", "model", ",", "state_dict", "=", "loadweights", "(", "model", ",", "filename_model", ",", "args", ".", "gpu_ids", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'Initialize the lenet model with random weights.'", ")", "\n", "\n", "", "logger", ".", "info", "(", "'This is the test result before retraining lenet.'", ")", "\n", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch_to_restore", "+", "1", ",", "args", ".", "epoch_to_restore", "+", "args", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", "\n", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "if", "(", "args", ".", "save_model", ")", "and", "epoch", "%", "100", "==", "0", ":", "\n", "                ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "exp_dir", "+", "'mnist_cnn_'", "+", "str", "(", "epoch", ")", "+", "'.pt'", ")", "\n", "\n", "", "", "if", "(", "args", ".", "save_model", ")", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "args", ".", "exp_dir", "+", "\"mnist_\"", "+", "args", ".", "exp_name", "+", "\"_cnn_defence_\"", "+", "str", "(", "args", ".", "img_num", ")", "+", "'_'", "+", "str", "(", "args", ".", "eps", ")", "+", "\".pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.crop_face_update.getface": [[22, 38], ["dlib.get_frontal_face_detector", "dlib.shape_predictor", "dlib.get_frontal_face_detector.", "len", "max", "dlib.shape_predictor.", "max.left", "max.right", "max.top", "max.bottom", "rect.width", "rect.height"], "function", ["None"], ["def", "getface", "(", "rgbImg", ")", ":", "\n", "# print (rgbImg.mode)", "\n", "    ", "facefound", "=", "True", "\n", "detector", "=", "dlib", ".", "get_frontal_face_detector", "(", ")", "\n", "landmark_predictor", "=", "dlib", ".", "shape_predictor", "(", "'shape_predictor_68_face_landmarks.dat'", ")", "\n", "#img = io.imread('1.jpg')", "\n", "faces", "=", "detector", "(", "rgbImg", ",", "1", ")", "\n", "if", "len", "(", "faces", ")", ">", "0", ":", "\n", "        ", "face", "=", "max", "(", "faces", ",", "key", "=", "lambda", "rect", ":", "rect", ".", "width", "(", ")", "*", "rect", ".", "height", "(", ")", ")", "\n", "[", "x1", ",", "x2", ",", "y1", ",", "y2", "]", "=", "[", "face", ".", "left", "(", ")", ",", "face", ".", "right", "(", ")", ",", "face", ".", "top", "(", ")", ",", "face", ".", "bottom", "(", ")", "]", "\n", "fshape", "=", "landmark_predictor", "(", "rgbImg", ",", "face", ")", "\n", "", "else", ":", "\n", "        ", "x1", "=", "x2", "=", "y1", "=", "y2", "=", "0", "\n", "fshape", "=", "0", "\n", "facefound", "=", "False", "\n", "", "return", "[", "facefound", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ",", "fshape", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.crop_face_update.work": [[40, 84], ["os.path.join", "os.path.exists", "imname.split", "print", "PIL.Image.open", "im_tmp.convert.convert", "numpy.array", "crop_face_update.getface", "imname.split", "filename.split", "os.path.exists", "os.makedirs", "print", "numpy.array", "int", "PIL.Image.fromarray", "rect.resize.save", "print", "min", "max", "min", "max", "rect.resize.resize", "numpy.linalg.norm", "range", "max", "max", "fshape.part", "fshape.part"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.crop_face_update.getface"], ["", "def", "work", "(", "imname", ")", ":", "\n", "    ", "filename", "=", "imname", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "path_post", "=", "'./datasets/celebA_post1/'", "\n", "w_max", "=", "128", "\n", "h_max", "=", "128", "\n", "post_dir", "=", "path_post", "+", "imname", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "\n", "filename", "=", "filename", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'.png'", "\n", "postprocess_name", "=", "os", ".", "path", ".", "join", "(", "post_dir", ",", "filename", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "postprocess_name", ")", ":", "\n", "        ", "print", "(", "\"File exists! Skipping image:{}\"", ".", "format", "(", "imname", ")", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "post_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "post_dir", ")", "\n", "# print (\"Processing image:{}\".format(os.path.join(root,imname)))", "\n", "", "im_tmp", "=", "Image", ".", "open", "(", "imname", ")", "\n", "(", "x", ",", "y", ")", "=", "im_tmp", ".", "size", "\n", "im_tmp", "=", "im_tmp", ".", "convert", "(", "'RGB'", ")", "\n", "im", "=", "np", ".", "array", "(", "im_tmp", ")", "\n", "\n", "facefound", ",", "x1", ",", "x2", ",", "y1", ",", "y2", ",", "fshape", "=", "getface", "(", "im", ")", "# get landmarks and face locations", "\n", "if", "facefound", "==", "False", ":", "\n", "            ", "print", "(", "\"No faces found in image{}.\"", ".", "format", "(", "imname", ")", ")", "\n", "", "else", ":", "\n", "            ", "landmarks", "=", "np", ".", "array", "(", "[", "[", "fshape", ".", "part", "(", "i", ")", ".", "x", ",", "fshape", ".", "part", "(", "i", ")", ".", "y", "]", "for", "i", "in", "range", "(", "68", ")", "]", ")", "\n", "#print (landmarks)", "\n", "eye_dis", "=", "int", "(", "np", ".", "linalg", ".", "norm", "(", "landmarks", "[", "42", "]", "-", "landmarks", "[", "39", "]", ")", "/", "2", ")", "\n", "pad_dis", "=", "2", "*", "(", "landmarks", "[", "33", "]", "-", "landmarks", "[", "27", "]", ")", "\n", "landmarks", "[", "19", "]", "=", "landmarks", "[", "19", "]", "-", "pad_dis", "\n", "landmarks", "[", "24", "]", "=", "landmarks", "[", "24", "]", "+", "pad_dis", "\n", "# print (\"eye_dis:{}, pad_dis:{}\".format(eye_dis,pad_dis))", "\n", "left", "=", "min", "(", "landmarks", "[", "...", ",", "1", "]", ")", "-", "eye_dis", "\n", "right", "=", "max", "(", "landmarks", "[", "...", ",", "1", "]", ")", "+", "eye_dis", "\n", "up", "=", "min", "(", "landmarks", "[", "...", ",", "0", "]", ")", "-", "eye_dis", "\n", "down", "=", "max", "(", "landmarks", "[", "...", ",", "0", "]", ")", "+", "eye_dis", "\n", "#print(im.shape)", "\n", "rect", "=", "im", "[", "max", "(", "0", ",", "left", ")", ":", "right", ",", "max", "(", "0", ",", "up", ")", ":", "down", "]", "\n", "#print (rect.shape)", "\n", "rect", "=", "Image", ".", "fromarray", "(", "rect", ")", "\n", "\n", "if", "rect", ".", "size", "[", "0", "]", "!=", "w_max", "and", "rect", ".", "size", "[", "1", "]", "!=", "h_max", ":", "\n", "# rect = rect / 255.0", "\n", "                ", "rect", "=", "rect", ".", "resize", "(", "(", "w_max", ",", "h_max", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "", "rect", ".", "save", "(", "postprocess_name", ")", "\n", "print", "(", "\"Saving image as:{}\"", ".", "format", "(", "postprocess_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.crop_face_update.work1": [[85, 88], ["print", "print"], "function", ["None"], ["", "", "", "def", "work1", "(", "im", ")", ":", "\n", "    ", "print", "(", "'Processor {}'", ".", "format", "(", "im", ")", ")", "\n", "print", "(", "im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.feaExtract.FeatureExtractor.__init__": [[24, 62], ["torch.Module.__init__", "logging.getLogger", "feaExtract.FeatureExtractor.mymodel.eval", "logging.getLogger.info", "logging.getLogger.info", "logging.getLogger.info", "len", "feaExtract.FeatureExtractor.mymodel.cuda", "logging.getLogger.info", "torchvision.vgg19_bn", "logging.getLogger.error", "sys.exit", "torchvision.vgg19", "mnist_main.Net", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "feaExtract.FeatureExtractor.mymodel.load_state_dict", "ResNet18", "utils.loadweights", "feaExtract.FeatureExtractor.mymodel.load_state_dict", "celebA_classify.celebANet", "utils.loadweights", "feaExtract.FeatureExtractor.mymodel.load_state_dict", "svhn_clssifier.svhnVGG", "utils.loadweights", "feaExtract.FeatureExtractor.mymodel.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet18", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights"], ["    ", "def", "__init__", "(", "self", ",", "modelname", ",", "gpu_ids", ")", ":", "\n", "        ", "super", "(", "FeatureExtractor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "modelname", "=", "modelname", "\n", "self", ".", "gpu_ids", "=", "gpu_ids", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "try", ":", "\n", "            ", "if", "modelname", "==", "'vgg19_bn'", ":", "\n", "                ", "self", ".", "mymodel", "=", "models", ".", "vgg19_bn", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "modelname", "==", "'vgg19'", ":", "\n", "                ", "self", ".", "mymodel", "=", "models", ".", "vgg19", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "modelname", "==", "'lenet'", ":", "\n", "                ", "self", ".", "mymodel", "=", "Net", "(", ")", "\n", "state_dic", "=", "torch", ".", "load", "(", "'./generate_latent/mnist_cnn.pt'", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "self", ".", "mymodel", ".", "load_state_dict", "(", "state_dic", ")", "\n", "", "elif", "modelname", "==", "'cifarnet'", ":", "\n", "                ", "self", ".", "mymodel", "=", "ResNet18", "(", ")", "\n", "self", ".", "mymodel", ",", "state_dic", "=", "loadweights", "(", "self", ".", "mymodel", ",", "'./generate_latent/pytorch_cifar/checkpoint/cifar_cnn.pt'", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "mymodel", ".", "load_state_dict", "(", "state_dic", ")", "\n", "# self.mymodel = self.mymodel.module", "\n", "", "elif", "modelname", "==", "'celebANet'", ":", "\n", "                ", "self", ".", "mymodel", "=", "celebANet", "(", "'vgg11_bn'", ",", "1", ")", "\n", "self", ".", "mymodel", ",", "state_dic", "=", "loadweights", "(", "self", ".", "mymodel", ",", "'./generate_latent/celebA_cnn.pt'", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "mymodel", ".", "load_state_dict", "(", "state_dic", ")", "\n", "", "elif", "modelname", "==", "'svhnNet'", ":", "\n", "                ", "self", ".", "mymodel", "=", "svhnVGG", "(", "'VGG8'", ")", "\n", "self", ".", "mymodel", ",", "state_dic", "=", "loadweights", "(", "self", ".", "mymodel", ",", "'./generate_latent/svhn_cnn.pt'", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "mymodel", ".", "load_state_dict", "(", "state_dic", ")", "\n", "", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "logger", ".", "error", "(", "\"Error in feaExtract!{}\"", ".", "format", "(", "e", ")", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "", "if", "len", "(", "self", ".", "gpu_ids", ")", ">=", "1", ":", "\n", "           ", "self", ".", "mymodel", ".", "cuda", "(", ")", "\n", "logger", ".", "info", "(", "\"Use gpu {}.\"", ".", "format", "(", "self", ".", "gpu_ids", ")", ")", "\n", "", "self", ".", "mymodel", ".", "eval", "(", ")", "\n", "logger", ".", "info", "(", "'Initialize the model:{}'", ".", "format", "(", "modelname", ")", ")", "\n", "logger", ".", "info", "(", "self", ".", "mymodel", ".", "modules", ")", "\n", "logger", ".", "info", "(", "'#################################################'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.feaExtract.FeatureExtractor.get_activation": [[63, 102], ["feaExtract.FeatureExtractor.remove", "activation.append", "len", "len", "feaExtract.FeatureExtractor.mymodel", "feaExtract.FeatureExtractor.mymodel", "torch.avg_pool2d().squeeze().detach", "torch.avg_pool2d().squeeze().detach", "torch.avg_pool2d().squeeze().detach", "feaExtract.FeatureExtractor.mymodel.module.fc1.register_forward_hook", "feaExtract.FeatureExtractor.mymodel.fc1.register_forward_hook", "x.cuda", "feaExtract.FeatureExtractor.mymodel.module.layer4.register_forward_hook", "feaExtract.FeatureExtractor.mymodel.layer4.register_forward_hook", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "torch.avg_pool2d().squeeze", "feaExtract.FeatureExtractor.mymodel.module.features.register_forward_hook", "feaExtract.FeatureExtractor.mymodel.features.register_forward_hook", "feaExtract.FeatureExtractor.mymodel.module.model.classifier[].register_forward_hook", "feaExtract.FeatureExtractor.mymodel.module.classifier[].register_forward_hook", "feaExtract.FeatureExtractor.mymodel.model.classifier[].register_forward_hook", "feaExtract.FeatureExtractor.mymodel.classifier[].register_forward_hook", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "get_activation", "(", "self", ",", "layer", ",", "x", ")", ":", "\n", "        ", "activation", "=", "[", "]", "\n", "def", "hook", "(", "model", ",", "input", ",", "output", ")", ":", "\n", "            ", "if", "self", ".", "modelname", "==", "'cifarnet'", ":", "\n", "#               print(output.shape)", "\n", "#               output = output.view(output.shape[0], -1)", "\n", "#print(output.shape)", "\n", "                ", "output", "=", "F", ".", "avg_pool2d", "(", "output", ",", "4", ")", ".", "squeeze", "(", ")", ".", "detach", "(", ")", "\n", "", "activation", ".", "append", "(", "output", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "1", ":", "\n", "            ", "if", "self", ".", "modelname", "==", "'lenet'", ":", "\n", "                ", "fea_handle", "=", "self", ".", "mymodel", ".", "module", ".", "fc1", ".", "register_forward_hook", "(", "hook", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'cifarnet'", ":", "\n", "                ", "fea_handle", "=", "self", ".", "mymodel", ".", "module", ".", "layer4", ".", "register_forward_hook", "(", "hook", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'svhnNet'", ":", "\n", "                ", "fea_handle", "=", "self", ".", "mymodel", ".", "module", ".", "features", ".", "register_forward_hook", "(", "hook", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'celebANet'", ":", "\n", "                ", "fea_handle", "=", "self", ".", "mymodel", ".", "module", ".", "model", ".", "classifier", "[", "layer", "]", ".", "register_forward_hook", "(", "hook", ")", "# layer=0, when it is celebANet", "\n", "", "else", ":", "\n", "                ", "fea_handle", "=", "self", ".", "mymodel", ".", "module", ".", "classifier", "[", "layer", "]", ".", "register_forward_hook", "(", "hook", ")", "# layer=0, when it is celebANet", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "modelname", "==", "'lenet'", ":", "\n", "                ", "fea_handle", "=", "self", ".", "mymodel", ".", "fc1", ".", "register_forward_hook", "(", "hook", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'cifarnet'", ":", "\n", "                ", "fea_handle", "=", "self", ".", "mymodel", ".", "layer4", ".", "register_forward_hook", "(", "hook", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'svhnNet'", ":", "\n", "                ", "fea_handle", "=", "self", ".", "mymodel", ".", "features", ".", "register_forward_hook", "(", "hook", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'celebANet'", ":", "\n", "                ", "fea_handle", "=", "self", ".", "mymodel", ".", "model", ".", "classifier", "[", "layer", "]", ".", "register_forward_hook", "(", "hook", ")", "# layer=0, when it is celebANet; mymodel.model, please refer to generator_architecture for the reason", "\n", "", "else", ":", "\n", "                ", "fea_handle", "=", "self", ".", "mymodel", ".", "classifier", "[", "layer", "]", ".", "register_forward_hook", "(", "hook", ")", "\n", "\n", "", "", "if", "len", "(", "self", ".", "gpu_ids", ")", ">=", "1", ":", "\n", "            ", "outputs", "=", "self", ".", "mymodel", "(", "x", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "self", ".", "mymodel", "(", "x", ")", "\n", "", "fea_handle", ".", "remove", "(", ")", "\n", "return", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.wideresnet.BasicBlock.__init__": [[8, 22], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.wideresnet.BasicBlock.forward": [[22, 32], ["wideresnet.BasicBlock.relu2", "wideresnet.BasicBlock.conv2", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wideresnet.BasicBlock.relu1", "wideresnet.BasicBlock.relu1", "wideresnet.BasicBlock.bn2", "torch.dropout", "torch.dropout", "torch.dropout", "wideresnet.BasicBlock.bn1", "wideresnet.BasicBlock.bn1", "wideresnet.BasicBlock.conv1", "wideresnet.BasicBlock.convShortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", "if", "self", ".", "equalInOut", "else", "x", ")", ")", ")", "\n", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "return", "torch", ".", "add", "(", "x", "if", "self", ".", "equalInOut", "else", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.wideresnet.NetworkBlock.__init__": [[34, 37], ["torch.Module.__init__", "wideresnet.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", "\n", "", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.wideresnet.NetworkBlock._make_layer": [[37, 42], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "int", "(", "nb_layers", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.wideresnet.NetworkBlock.forward": [[42, 44], ["wideresnet.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.wideresnet.WideResNet.__init__": [[46, 75], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wideresnet.NetworkBlock", "wideresnet.NetworkBlock", "wideresnet.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wideresnet.WideResNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.wideresnet.WideResNet.forward": [[75, 84], ["wideresnet.WideResNet.conv1", "wideresnet.WideResNet.block1", "wideresnet.WideResNet.block2", "wideresnet.WideResNet.block3", "wideresnet.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wideresnet.WideResNet.fc", "wideresnet.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "return", "self", ".", "fc", "(", "out", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.__init__": [[31, 108], ["os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "feaExtract.FeatureExtractor", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.MNIST", "torchvision.datasets.CIFAR10", "torchvision.transforms.Compose", "celebA_classify.celebA_dataset", "torchvision.transforms.Compose", "torchvision.datasets.SVHN", "Exception", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "parameters", ",", "args", ")", ":", "\n", "        ", "dir_datasets", "=", "os", ".", "path", ".", "expanduser", "(", "'./datasets'", ")", "\n", "dir_experiments", "=", "os", ".", "path", ".", "expanduser", "(", "parameters", "[", "'res_dir'", "]", ")", "\n", "\n", "dataset_name", "=", "parameters", "[", "'dataset'", "]", "\n", "self", ".", "dataset_name", "=", "dataset_name", "\n", "train_attribute", "=", "parameters", "[", "'train_attribute'", "]", "\n", "test_attribute", "=", "parameters", "[", "'test_attribute'", "]", "\n", "embedding_attribute", "=", "parameters", "[", "'embedding_attribute'", "]", "\n", "self", ".", "modelname", "=", "parameters", "[", "'DNN'", "]", "\n", "self", ".", "layer", "=", "parameters", "[", "'layer'", "]", "\n", "self", ".", "attention", "=", "parameters", "[", "'attention'", "]", "\n", "self", ".", "device", "=", "parameters", "[", "'device'", "]", "\n", "self", ".", "gpuNum", "=", "parameters", "[", "'GpuNum'", "]", "\n", "self", ".", "ori_lr", "=", "parameters", "[", "'ori_lr'", "]", "\n", "self", ".", "dim", "=", "parameters", "[", "'dim'", "]", "\n", "self", ".", "nb_channels_first_layer", "=", "parameters", "[", "'nb_channels_first_layer'", "]", "\n", "name_experiment", "=", "parameters", "[", "'name_experiment'", "]", "\n", "\n", "if", "self", ".", "modelname", "==", "'other'", ":", "\n", "            ", "self", ".", "dir_x_train", "=", "os", ".", "path", ".", "join", "(", "dir_datasets", ",", "dataset_name", ",", "'{0}'", ".", "format", "(", "train_attribute", ")", ")", "\n", "self", ".", "dir_x_test", "=", "os", ".", "path", ".", "join", "(", "dir_datasets", ",", "dataset_name", ",", "'{0}'", ".", "format", "(", "test_attribute", ")", ")", "\n", "", "else", ":", "# lenet cifarnet celebANet svhnNet", "\n", "            ", "self", ".", "dir_x_train", "=", "os", ".", "path", ".", "join", "(", "dir_datasets", ",", "dataset_name", ")", "# not useful for lenet and cifarnet", "\n", "self", ".", "dir_x_test", "=", "os", ".", "path", ".", "join", "(", "dir_datasets", ",", "dataset_name", ")", "\n", "", "self", ".", "dir_z_train", "=", "os", ".", "path", ".", "join", "(", "dir_datasets", ",", "dataset_name", ",", "'{0}_{1}'", ".", "format", "(", "train_attribute", ",", "embedding_attribute", ")", ")", "\n", "self", ".", "dir_z_test", "=", "os", ".", "path", ".", "join", "(", "dir_datasets", ",", "dataset_name", ",", "'{0}_{1}'", ".", "format", "(", "test_attribute", ",", "embedding_attribute", ")", ")", "\n", "\n", "self", ".", "dir_experiment", "=", "os", ".", "path", ".", "join", "(", "dir_experiments", ",", "'gsn_hf'", ",", "name_experiment", ")", "\n", "timestamp", "=", "parameters", "[", "'time_stamp'", "]", "\n", "self", ".", "dir_models", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_experiment", ",", "'models'", ",", "timestamp", ")", "\n", "self", ".", "dir_logs", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_experiment", ",", "'logs'", ",", "timestamp", ")", "\n", "\n", "self", ".", "batch_size", "=", "parameters", "[", "'batch_size'", "]", "\n", "self", ".", "nb_epochs_to_save", "=", "1", "\n", "self", ".", "iter", "=", "parameters", "[", "'iteration'", "]", "\n", "self", ".", "save_freq", "=", "parameters", "[", "'save_freq'", "]", "\n", "self", ".", "gpu_ids", "=", "parameters", "[", "'gpu_ids'", "]", "\n", "self", ".", "feaExtractor", "=", "FeatureExtractor", "(", "self", ".", "modelname", ",", "self", ".", "gpu_ids", ")", "\n", "self", ".", "restore_file", "=", "parameters", "[", "'restore_file'", "]", "\n", "self", ".", "d_filename", "=", "args", ".", "d_filename", "\n", "self", ".", "logger", "=", "args", ".", "logger", "\n", "self", ".", "decayLr", "=", "args", ".", "decay", "\n", "self", ".", "generator", "=", "args", ".", "generator", "\n", "self", ".", "percent", "=", "args", ".", "percent", "\n", "self", ".", "num_workers", "=", "args", ".", "num_workers", "\n", "self", ".", "lam", "=", "args", ".", "lam", "\n", "self", ".", "norm", "=", "args", ".", "norm", "\n", "self", ".", "phase", "=", "args", ".", "phase", "\n", "if", "self", ".", "logger", ".", "level", "==", "10", ":", "\n", "            ", "if", "self", ".", "modelname", "==", "'celebANet'", ":", "\n", "                ", "input_size", "=", "(", "3", ",", "128", ",", "128", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'cifarnet'", "or", "self", ".", "modelname", "==", "'svhnNet'", ":", "\n", "                ", "input_size", "=", "(", "3", ",", "32", ",", "32", ")", "\n", "#summary(self.feaExtractor.mymodel,input_size)        ", "\n", "#        if dataset == 'cifar':", "\n", "#            if not os.path.exists(os.path.join(self.dir_x_train, dataset+'_x_y_z_train.pt')):", "\n", "#                pre_save_embeddings(os.path.join(self.dir_x_train, dataset+'_x_y_z_'), self.feaExtractor, dataset, self.device, self.layer)", "\n", "", "", "if", "dataset_name", "==", "'mnist'", ":", "\n", "            ", "self", ".", "dataset", "=", "datasets", ".", "MNIST", "(", "'./datasets/mnist/'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ")", "\n", "", "elif", "dataset_name", "==", "'cifar'", ":", "\n", "            ", "self", ".", "dataset", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "'./datasets/cifar/'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ")", "\n", "", "elif", "dataset_name", "==", "'celebA_post'", ":", "\n", "            ", "self", ".", "dataset", "=", "celebA_dataset", "(", "'./datasets/celebA_post/'", ",", "train", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", ")", "\n", "", "elif", "dataset_name", "==", "'SVHN'", ":", "\n", "            ", "self", ".", "dataset", "=", "datasets", ".", "SVHN", "(", "'./datasets/SVHN/'", ",", "split", "=", "'train'", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unknow dataset.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.img_untransform": [[109, 120], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.Lambda"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "img_untransform", "(", "img", ")", ":", "\n", "#mean=[0.485, 0.456, 0.406]", "\n", "#std=[0.229, 0.224, 0.225]", "\n", "        ", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "std", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", "\n", "for", "i", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "            ", "img", "[", "i", ",", ":", ",", ":", "]", "=", "img", "[", "i", ",", ":", ",", ":", "]", "*", "std", "[", "i", "]", "+", "mean", "[", "i", "]", "\n", "", "Img_untrans", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "img", "*", "255", ")", "]", ")", "\n", "img", "=", "Img_untrans", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.mnist_untransform": [[121, 130], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.Lambda"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "mnist_untransform", "(", "img", ")", ":", "\n", "        ", "mean", "=", "[", "]", "\n", "std", "=", "[", "]", "\n", "#for i in [0,1,2]:", "\n", "#   img[i,:,:] = img[i,:,:] * std[i] + mean[i]", "\n", "Img_untrans", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Lambda", "(", "lambda", "img", ":", "img", "*", "255", ")", "]", ")", "\n", "img", "=", "Img_untrans", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.train": [[131, 337], ["utils.create_folder", "utils.create_folder", "generator_architecture.Generator.to", "GSN.GSN.logger.info", "GSN.GSN.logger.info", "GSN.GSN.logger.info", "GSN.GSN.logger.info", "GSN.GSN.logger.debug", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.Subset", "GSN.GSN.logger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "next", "tensorboardX.SummaryWriter", "generator_architecture.mnist_generator", "os.path.join", "myutils.loadweights", "generator_architecture.Generator.load_state_dict", "GSN.GSN.logger.info", "generator_architecture.cifar_Discriminator", "generator_architecture.cifar_Discriminator.to", "generator_architecture.cifar_Discriminator.apply", "generator_architecture.cifar_Discriminator.train", "GSN.GSN.logger.info", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss", "torch.Adam", "torch.Adam", "summary", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "iter", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "GSN.GSN.logger.info", "GSN.GSN.logger.info", "tensorboardX.SummaryWriter.close", "len", "torch.nn.DataParallel", "torch.nn.DataParallel", "generator_architecture.Generator.module.apply", "generator_architecture.Generator.apply", "os.path.join", "myutils.loadweights", "generator_architecture.cifar_Discriminator.load_state_dict", "generator_architecture.cifar_Discriminator.parameters", "int", "torch.utils.data.Subset.__len__", "torch.utils.data.Subset.__len__", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "torch.nn.L1Loss", "generator_architecture.Generator.parameters", "generator_architecture.Generator.parameters", "torch.lr_scheduler.ReduceLROnPlateau", "torch.lr_scheduler.ReduceLROnPlateau", "generator_architecture.Generator.train", "range", "fixed_batch[].to", "generator_architecture.Generator.eval", "generator_architecture.Generator.forward", "tensorboardX.SummaryWriter.add_image", "tensorboardX.SummaryWriter.add_image", "tensorboardX.SummaryWriter.add_histogram", "tensorboardX.SummaryWriter.add_histogram", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "GSN.GSN.logger.info", "generator_architecture.cifar_generator", "generator_architecture.cifar_generator", "generator_architecture.celebA_generator", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "GSN.GSN.logger.info", "time.time.time", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "fixed_batch[].to", "GSN.GSN.feaExtractor.get_activation", "utils.make_single_grid", "utils.make_single_grid", "generator_architecture.Generator.state_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "generator_architecture.svhn_generator", "generator_architecture.Generator", "len", "len", "time.time.time", "torch.Adam.zero_grad", "current_batch[].to", "generator_architecture.Generator.forward", "GSN.GSN.logger.debug", "GSN.GSN.logger.debug", "torch.nn.L1Loss.", "torch.nn.L1Loss.", "g_loss.backward", "torch.Adam.step", "current_batch[].to.size", "time.time.time", "torch.lr_scheduler.ReduceLROnPlateau.step", "tensorboardX.SummaryWriter.add_scalar", "tensorboardX.SummaryWriter.add_scalar", "GSN.GSN.logger.info", "GSN.GSN.logger.info", "GSN.GSN.logger.info", "utils.make_single_grid", "utils.make_single_grid", "generator_architecture.cifar_Discriminator.state_dict", "generator_architecture.Generator.state_dict", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.Adam.zero_grad", "current_batch[].to", "GSN.GSN.feaExtractor.get_activation", "z.detach", "generator_architecture.cifar_Discriminator.", "torch.nn.BCEWithLogitsLoss.", "generator_architecture.cifar_Discriminator.", "torch.nn.BCEWithLogitsLoss.", "torch.sigmoid().mean().item", "torch.sigmoid().mean().item", "torch.sigmoid().mean().item", "torch.sigmoid().mean().item", "torch.sigmoid().mean().item", "torch.sigmoid().mean().item", "torch.sigmoid().mean().item", "torch.sigmoid().mean().item", "d_loss.backward", "torch.Adam.step", "generator_architecture.cifar_Discriminator.", "torch.nn.BCEWithLogitsLoss.", "torch.sigmoid().mean().item", "torch.sigmoid().mean().item", "torch.sigmoid().mean().item", "torch.sigmoid().mean().item", "g_loss.item", "current_batch[].to.size", "torch.nn.L1Loss.item", "current_batch[].to.size", "time.time.time", "torch.lr_scheduler.ReduceLROnPlateau.step", "fixed_batch[].to", "utils.make_single_grid", "utils.make_single_grid", "torchvision.utils.make_grid", "torchvision.utils.make_grid", "generator_architecture.cifar_Discriminator.state_dict", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "generator_architecture.Generator.forward.detach", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "torch.zeros_like().float", "d_loss.item", "current_batch[].to.size", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "type", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "current_batch[].to", "torch.sigmoid().mean", "torch.sigmoid().mean", "torch.sigmoid().mean", "torch.sigmoid().mean", "torch.sigmoid().mean", "torch.sigmoid().mean", "torch.sigmoid().mean", "torch.sigmoid().mean", "torch.sigmoid().mean", "torch.sigmoid().mean", "torch.sigmoid().mean", "torch.sigmoid().mean", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.create_folder", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.create_folder", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.forward", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.feaExtract.FeatureExtractor.get_activation", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.make_single_grid", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.make_single_grid", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.forward", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.make_single_grid", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.make_single_grid", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.feaExtract.FeatureExtractor.get_activation", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.make_single_grid", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.make_single_grid"], ["", "def", "train", "(", "self", ",", "epoch_to_restore", "=", "0", ")", ":", "\n", "        ", "create_folder", "(", "self", ".", "dir_models", ")", "\n", "create_folder", "(", "self", ".", "dir_logs", ")", "\n", "if", "self", ".", "modelname", "==", "'lenet'", ":", "\n", "            ", "g", "=", "mnist_generator", "(", "self", ".", "dim", ",", "self", ".", "nb_channels_first_layer", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'cifarnet'", ":", "\n", "            ", "if", "self", ".", "generator", "==", "'VAEGAN'", ":", "\n", "#g = cifarGenerator(0)", "\n", "                ", "g", "=", "cifar_generator", "(", "self", ".", "dim", ",", "self", ".", "nb_channels_first_layer", ")", "\n", "", "else", ":", "\n", "                ", "g", "=", "cifar_generator", "(", "self", ".", "dim", ",", "self", ".", "nb_channels_first_layer", ")", "\n", "", "", "elif", "self", ".", "modelname", "==", "'celebANet'", ":", "\n", "            ", "g", "=", "celebA_generator", "(", "self", ".", "dim", ",", "self", ".", "nb_channels_first_layer", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'svhnNet'", ":", "\n", "            ", "g", "=", "svhn_generator", "(", "self", ".", "dim", ",", "self", ".", "nb_channels_first_layer", ")", "\n", "", "else", ":", "\n", "            ", "g", "=", "Generator", "(", "self", ".", "nb_channels_first_layer", ",", "self", ".", "dim", ")", "\n", "\n", "", "if", "epoch_to_restore", ">", "0", ":", "\n", "            ", "filename_model", "=", "os", ".", "path", ".", "join", "(", "self", ".", "restore_file", ")", "\n", "g", ",", "state_dict", "=", "loadweights", "(", "g", ",", "filename_model", ",", "self", ".", "gpu_ids", ")", "\n", "g", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "else", ":", "\n", "            ", "if", "len", "(", "self", ".", "gpu_ids", ")", ">", "1", ":", "\n", "                ", "g", "=", "nn", ".", "DataParallel", "(", "g", ",", "device_ids", "=", "self", ".", "gpu_ids", ")", "\n", "g", ".", "module", ".", "apply", "(", "weights_init", ")", "\n", "", "else", ":", "\n", "                ", "g", ".", "apply", "(", "weights_init", ")", "\n", "\n", "", "", "g", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "logger", ".", "info", "(", "'Use device:{}'", ".", "format", "(", "self", ".", "device", ")", ")", "\n", "\n", "if", "self", ".", "generator", "==", "'VAEGAN'", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Use GAN as the generator. This is the sturcture of discriminator'", ")", "\n", "d", "=", "cifar_Discriminator", "(", "0", ")", "\n", "#d = discriminator()", "\n", "d", ".", "to", "(", "self", ".", "device", ")", "\n", "d", ".", "apply", "(", "weights_init", ")", "\n", "if", "epoch_to_restore", ">", "0", ":", "\n", "                ", "filename_model", "=", "os", ".", "path", ".", "join", "(", "self", ".", "d_filename", ")", "\n", "d", ",", "state_dict", "=", "loadweights", "(", "d", ",", "filename_model", ",", "self", ".", "gpu_ids", ")", "\n", "d", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "d", ".", "train", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "d", ".", "modules", ")", "\n", "d_criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "d_optimizer", "=", "optim", ".", "Adam", "(", "d", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "ori_lr", "*", "0.1", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'This is the structure of generator'", ")", "\n", "self", ".", "logger", ".", "info", "(", "g", ".", "modules", ")", "\n", "if", "self", ".", "logger", ".", "level", "==", "10", ":", "\n", "            ", "summary", "(", "g", ",", "(", "self", ".", "dim", ",", ")", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "'#####################################'", ")", "\n", "self", ".", "logger", ".", "debug", "(", "'Before GetEmbedding is ok.'", ")", "\n", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "[", "0", ":", "int", "(", "self", ".", "percent", "*", "len", "(", "self", ".", "dataset", ")", ")", "]", "\n", "dataset", "=", "torch", ".", "utils", ".", "data", ".", "Subset", "(", "self", ".", "dataset", ",", "indices", ")", "\n", "self", ".", "logger", ".", "info", "(", "'The number of images for training is {}.'", ".", "format", "(", "dataset", ".", "__len__", "(", ")", ")", ")", "\n", "dataloader", "=", "DataLoader", "(", "dataset", ",", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "self", ".", "num_workers", ",", "pin_memory", "=", "False", ")", "\n", "fixed_batch_size", "=", "FIXBATCH", "\n", "fixed_dataloader", "=", "DataLoader", "(", "dataset", ",", "fixed_batch_size", ")", "\n", "fixed_batch", "=", "next", "(", "iter", "(", "fixed_dataloader", ")", ")", "\n", "\n", "if", "self", ".", "norm", "==", "'l2'", ":", "#or self.modelname=='cifarnet':", "\n", "            ", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "self", ".", "norm", "==", "'l1'", ":", "\n", "            ", "criterion", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "", "if", "self", ".", "modelname", "==", "'cifarnet'", ":", "\n", "            ", "g_optimizer", "=", "optim", ".", "Adam", "(", "g", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "ori_lr", ",", "betas", "=", "(", "0.5", ",", "0.999", ")", ")", "\n", "", "else", ":", "\n", "            ", "g_optimizer", "=", "optim", ".", "Adam", "(", "g", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "ori_lr", ")", "\n", "", "writer", "=", "SummaryWriter", "(", "self", ".", "dir_logs", ")", "\n", "\n", "if", "self", ".", "decayLr", "==", "True", ":", "\n", "#g_optimizer = optim.lr_scheduler.MultiStepLR(optimizer, milestones=[10*287, 80*287, 200*287]) # decrease lr", "\n", "             ", "g_scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "g_optimizer", ",", "factor", "=", "0.8", ",", "patience", "=", "30", ",", "verbose", "=", "True", ")", "# decrease lr", "\n", "if", "self", ".", "generator", "==", "'VAEGAN'", ":", "\n", "                 ", "d_scheduler", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "d_optimizer", ",", "factor", "=", "0.8", ",", "patience", "=", "30", ",", "verbose", "=", "True", ")", "# decrease lr", "\n", "#            g_scheduler = optim.lr_scheduler.CosineAnnealingLR(g_optimizer, T_max=200) # decrease lr", "\n", "\n", "", "", "total_time", "=", "0", "\n", "try", ":", "\n", "            ", "epoch", "=", "epoch_to_restore", "\n", "while", "epoch", "<", "self", ".", "iter", ":", "\n", "                ", "g", ".", "train", "(", ")", "\n", "g_train_loss", "=", "0", "\n", "d_train_loss", "=", "0", "\n", "g_ae_loss", "=", "0", "\n", "total_num", "=", "0", "\n", "for", "_", "in", "range", "(", "self", ".", "nb_epochs_to_save", ")", ":", "\n", "                    ", "epoch", "+=", "1", "\n", "self", ".", "logger", ".", "info", "(", "'This is the iteration {}.'", ".", "format", "(", "epoch", ")", ")", "\n", "startT", "=", "time", "(", ")", "\n", "for", "current_batch", "in", "dataloader", ":", "\n", "                        ", "batch_time", "=", "time", "(", ")", "\n", "g_optimizer", ".", "zero_grad", "(", ")", "\n", "if", "self", ".", "generator", "==", "'VAEGAN'", ":", "\n", "                           ", "d_optimizer", ".", "zero_grad", "(", ")", "\n", "", "if", "self", ".", "dataset_name", "==", "'cifar'", ":", "\n", "                            ", "x", "=", "(", "current_batch", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "-", "0.5", ")", "*", "2", "\n", "", "else", ":", "\n", "                            ", "x", "=", "(", "current_batch", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "", "y", "=", "current_batch", "[", "1", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "z", "=", "self", ".", "feaExtractor", ".", "get_activation", "(", "self", ".", "layer", ",", "x", ")", "[", "0", "]", "\n", "g_z", "=", "g", ".", "forward", "(", "z", ".", "detach", "(", ")", ")", "\n", "#print(x.min(), x.max(), g_z.min(), g_z.max())", "\n", "#self.logger.debug(type(g_z),g_z.shape)", "\n", "if", "self", ".", "generator", "==", "'VAEGAN'", ":", "\n", "                            ", "real_pre", "=", "d", "(", "x", ")", "\n", "d_real_loss", "=", "d_criterion", "(", "real_pre", ",", "torch", ".", "ones_like", "(", "y", ")", ".", "float", "(", ")", ")", "\n", "fake_pre", "=", "d", "(", "g_z", ".", "detach", "(", ")", ")", "#.squeeze()", "\n", "d_fake_loss", "=", "d_criterion", "(", "fake_pre", ",", "torch", ".", "zeros_like", "(", "y", ")", ".", "float", "(", ")", ")", "\n", "d_loss", "=", "d_real_loss", "+", "d_fake_loss", "\n", "d_train_loss", "+=", "d_loss", ".", "item", "(", ")", "*", "y", ".", "size", "(", "0", ")", "\n", "\n", "D_x", "=", "torch", ".", "sigmoid", "(", "real_pre", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "D_fake", "=", "torch", ".", "sigmoid", "(", "fake_pre", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "d_loss", ".", "backward", "(", ")", "\n", "d_optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "self", ".", "generator", "==", "'VAEGAN'", ":", "\n", "                           ", "g_fake_pre", "=", "d", "(", "g_z", ")", "\n", "g_loss1", "=", "d_criterion", "(", "g_fake_pre", ",", "torch", ".", "ones_like", "(", "y", ")", ".", "float", "(", ")", ")", "\n", "g_D_fake", "=", "torch", ".", "sigmoid", "(", "g_fake_pre", ")", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                           ", "g_loss1", "=", "0", "\n", "", "if", "self", ".", "modelname", "==", "'other'", ":", "\n", "# g_z = g_z[:,:,16:240,16:240]", "\n", "                            ", "g_z", "=", "g_z", "[", "0", "]", "\n", "", "self", ".", "logger", ".", "debug", "(", "'type g_z:{}, shape g_z:{}, max and min:{}, {}'", ".", "format", "(", "type", "(", "g_z", ")", ",", "g_z", ".", "shape", ",", "torch", ".", "max", "(", "g_z", ")", ",", "torch", ".", "min", "(", "g_z", ")", ")", ")", "\n", "self", ".", "logger", ".", "debug", "(", "'shape x:{}, max and min:{}, {}'", ".", "format", "(", "x", ".", "shape", ",", "torch", ".", "max", "(", "x", ")", ",", "torch", ".", "min", "(", "x", ")", ")", ")", "\n", "\n", "g_loss2", "=", "criterion", "(", "g_z", ",", "x", ")", "\n", "g_loss", "=", "self", ".", "lam", "*", "g_loss1", "+", "g_loss2", "\n", "g_train_loss", "+=", "g_loss", ".", "item", "(", ")", "*", "y", ".", "size", "(", "0", ")", "\n", "g_ae_loss", "+=", "g_loss2", ".", "item", "(", ")", "*", "y", ".", "size", "(", "0", ")", "\n", "\n", "g_loss", ".", "backward", "(", ")", "\n", "g_optimizer", ".", "step", "(", ")", "\n", "\n", "batch_time_end", "=", "time", "(", ")", "-", "batch_time", "\n", "total_num", "+=", "y", ".", "size", "(", "0", ")", "\n", "", "endT", "=", "time", "(", ")", "-", "startT", "\n", "total_time", "+=", "endT", "\n", "if", "self", ".", "decayLr", "==", "True", ":", "\n", "                        ", "g_scheduler", ".", "step", "(", "g_train_loss", "/", "total_num", ")", "\n", "if", "self", ".", "generator", "==", "'VAEGAN'", ":", "\n", "                            ", "d_scheduler", ".", "step", "(", "g_train_loss", "/", "total_num", ")", "\n", "", "", "writer", ".", "add_scalar", "(", "'generator train_loss'", ",", "g_train_loss", "/", "total_num", ",", "epoch", ")", "\n", "if", "self", ".", "generator", "==", "'VAEGAN'", ":", "\n", "                        ", "writer", ".", "add_scalar", "(", "'discriminator train_loss'", ",", "d_train_loss", "/", "total_num", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'generator train_loss/AE loss'", ",", "g_ae_loss", "/", "total_num", ",", "epoch", ")", "\n", "self", ".", "logger", ".", "info", "(", "'epoch: {}, D(x): {:.4f} D(G(z)): {:.4f} / {:.4f}'", ".", "format", "(", "epoch", ",", "D_x", ",", "D_fake", ",", "g_D_fake", ")", ")", "\n", "", "writer", ".", "add_scalar", "(", "'Learning rate'", ",", "g_optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "epoch", ")", "\n", "if", "self", ".", "generator", "==", "'VAEGAN'", ":", "\n", "                        ", "self", ".", "logger", ".", "info", "(", "'epoch: {}, generator train_loss: {}, g_aeLoss: {}, discriminator loss: {},  running time: {}s, lr: {}'", ".", "format", "(", "epoch", ",", "g_train_loss", "/", "total_num", ",", "g_ae_loss", "/", "total_num", ",", "d_train_loss", "/", "total_num", ",", "endT", ",", "g_optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "", "else", ":", "\n", "                        ", "self", ".", "logger", ".", "info", "(", "'epoch: {}, generator train_loss: {}, running time: {}s, lr: {}'", ".", "format", "(", "epoch", ",", "g_train_loss", "/", "total_num", ",", "endT", ",", "g_optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ")", ")", "\n", "", "", "if", "self", ".", "dataset_name", "==", "'cifar'", ":", "\n", "                    ", "x", "=", "(", "fixed_batch", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "-", "0.5", ")", "*", "2", "\n", "", "else", ":", "\n", "                    ", "x", "=", "fixed_batch", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "", "y", "=", "fixed_batch", "[", "1", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "z", "=", "self", ".", "feaExtractor", ".", "get_activation", "(", "self", ".", "layer", ",", "x", ")", "[", "0", "]", "\n", "\n", "g", ".", "eval", "(", ")", "\n", "g_z", "=", "g", ".", "forward", "(", "z", ")", "\n", "if", "self", ".", "modelname", "==", "'lenet'", ":", "\n", "                    ", "input_images", "=", "make_single_grid", "(", "x", ".", "data", "[", ":", "fixed_batch_size", "]", ",", "nrow", "=", "4", ")", "\n", "images", "=", "make_single_grid", "(", "g_z", ".", "data", "[", ":", "fixed_batch_size", "]", ",", "nrow", "=", "4", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'celebANet'", "or", "self", ".", "modelname", "==", "'svhnNet'", ":", "\n", "                    ", "input_images", "=", "make_single_grid", "(", "x", ".", "data", "[", ":", "fixed_batch_size", "]", ",", "nrow", "=", "4", ",", "range", "=", "(", "0.0", ",", "1.0", ")", ")", "\n", "images", "=", "make_single_grid", "(", "g_z", ".", "data", "[", ":", "fixed_batch_size", "]", ",", "nrow", "=", "4", ",", "range", "=", "(", "0.0", ",", "1.0", ")", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'cifarnet'", ":", "\n", "                    ", "input_images", "=", "make_single_grid", "(", "x", ".", "data", "[", ":", "fixed_batch_size", "]", ",", "nrow", "=", "4", ",", "normalize", "=", "True", ",", "range", "=", "(", "-", "1.0", ",", "1.0", ")", ")", "\n", "images", "=", "make_single_grid", "(", "g_z", ".", "data", "[", ":", "fixed_batch_size", "]", ",", "nrow", "=", "4", ",", "normalize", "=", "True", ",", "range", "=", "(", "-", "1.0", ",", "1.0", ")", ")", "\n", "", "else", ":", "\n", "                    ", "g_z", "=", "g_z", "[", "0", "]", "\n", "input_images", "=", "make_grid", "(", "x", ".", "data", "[", ":", "fixed_batch_size", "]", ",", "nrow", "=", "4", ",", "normalize", "=", "True", ")", "\n", "images", "=", "make_grid", "(", "g_z", ".", "data", "[", ":", "fixed_batch_size", "]", ",", "nrow", "=", "4", ",", "normalize", "=", "True", ")", "\n", "# att_images = make_grid(att1.data[:fixed_batch_size], nrow=4, normalize=True)", "\n", "", "writer", ".", "add_image", "(", "'input images'", ",", "input_images", ",", "epoch", ")", "\n", "writer", ".", "add_image", "(", "'generations'", ",", "images", ",", "epoch", ")", "\n", "writer", ".", "add_histogram", "(", "'generated images histgram'", ",", "g_z", ".", "data", "[", "0", "]", ",", "epoch", ")", "\n", "writer", ".", "add_histogram", "(", "'input images histgram'", ",", "x", ".", "data", "[", "0", "]", ",", "epoch", ")", "\n", "# writer.add_image('attention images', att_images, epoch)", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_models", ",", "'epoch_latest.pth'", ")", "\n", "torch", ".", "save", "(", "g", ".", "state_dict", "(", ")", ",", "filename", ")", "\n", "if", "self", ".", "generator", "==", "'VAEGAN'", ":", "\n", "                    ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_models", ",", "'epoch_latest_d.pth'", ")", "\n", "torch", ".", "save", "(", "d", ".", "state_dict", "(", ")", ",", "filename", ")", "\n", "", "if", "epoch", "%", "self", ".", "save_freq", "==", "0", ":", "\n", "                    ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_models", ",", "'epoch_{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "g", ".", "state_dict", "(", ")", ",", "filename", ")", "\n", "if", "self", ".", "generator", "==", "'VAEGAN'", ":", "\n", "                        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_models", ",", "'epoch_{}_d.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "d", ".", "state_dict", "(", ")", ",", "filename", ")", "\n", "", "", "del", "z", ",", "x", "# This is used to relase the gpu memory", "\n", "del", "g_z", ",", "images", ",", "input_images", "\n", "", "", "finally", ":", "\n", "            ", "if", "self", ".", "device", ".", "type", "==", "'cuda'", ":", "\n", "                ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Empty the cuda cache\"", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Total training time: {}s\"", ".", "format", "(", "total_time", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "'[*] Closing Writer.'", ")", "\n", "writer", ".", "close", "(", ")", "\n", "", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.save_originals": [[338, 362], ["GSN.GSN.logger.info", "GSN.GSN.save_originals._save_originals"], "methods", ["None"], ["", "def", "save_originals", "(", "self", ")", ":", "\n", "        ", "def", "_save_originals", "(", "dir_z", ",", "dir_x", ",", "train_test", ")", ":", "\n", "            ", "fixed_dataloader", "=", "DataLoader", "(", "self", ".", "dataset", ",", "16", ")", "\n", "fixed_batch", "=", "next", "(", "iter", "(", "fixed_dataloader", ")", ")", "\n", "\n", "filename_images", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_experiment", ",", "'originals_{}.png'", ".", "format", "(", "train_test", ")", ")", "\n", "if", "self", ".", "modelname", "==", "'lenet'", ":", "\n", "                ", "x", "=", "fixed_batch", "[", "0", "]", "\n", "temp", "=", "make_single_grid", "(", "x", ",", "nrow", "=", "4", ")", "\n", "temp", "=", "GSN", ".", "mnist_untransform", "(", "temp", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'celebANet'", "or", "self", ".", "modelname", "==", "'svhnNet'", ":", "\n", "                ", "x", "=", "fixed_batch", "[", "0", "]", "\n", "temp", "=", "make_single_grid", "(", "x", ",", "nrow", "=", "4", ")", "\n", "temp", "=", "GSN", ".", "mnist_untransform", "(", "temp", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'cifarnet'", ":", "\n", "                ", "x", "=", "fixed_batch", "[", "0", "]", "\n", "temp", "=", "make_grid", "(", "fixed_batch", "[", "0", "]", ",", "nrow", "=", "4", ")", "\n", "temp", "=", "GSN", ".", "img_untransform", "(", "temp", ")", "\n", "#temp = make_grid(fixed_batch['x'], nrow=4).numpy().transpose((1, 2, 0))", "\n", "", "temp", "=", "np", ".", "uint8", "(", "temp", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "Image", ".", "fromarray", "(", "temp", ")", ".", "save", "(", "filename_images", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'Running in save_originals'", ")", "\n", "_save_originals", "(", "self", ".", "dir_z_train", ",", "self", ".", "dir_x_train", ",", "'train'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.compute_errors": [[363, 409], ["os.path.join", "myutils.loadweights", "generator_architecture.Generator.load_state_dict", "generator_architecture.Generator.to", "generator_architecture.Generator.eval", "GSN.GSN.logger.info", "GSN.GSN.compute_errors._compute_error"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights"], ["", "def", "compute_errors", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "filename_model", "=", "os", ".", "path", ".", "join", "(", "self", ".", "restore_file", ")", "\n", "if", "self", ".", "modelname", "==", "'lenet'", ":", "\n", "            ", "g", "=", "mnist_generator", "(", "self", ".", "dim", ",", "self", ".", "nb_channels_first_layer", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'cifarnet'", ":", "\n", "            ", "g", "=", "cifar_generator", "(", "self", ".", "dim", ",", "self", ".", "nb_channels_first_layer", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'celebANet'", ":", "\n", "            ", "g", "=", "celebA_generator", "(", "self", ".", "dim", ",", "self", ".", "nb_channels_first_layer", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'svhnNet'", ":", "\n", "            ", "g", "=", "svhn_generator", "(", "self", ".", "dim", ",", "self", ".", "nb_channels_first_layer", ")", "\n", "", "else", ":", "\n", "            ", "g", "=", "Generator", "(", "self", ".", "nb_channels_first_layer", ",", "self", ".", "dim", ")", "\n", "\n", "", "g", ",", "state_dict", "=", "loadweights", "(", "g", ",", "filename_model", ",", "self", ".", "gpu_ids", ")", "\n", "g", ".", "load_state_dict", "(", "state_dict", ")", "\n", "g", ".", "to", "(", "self", ".", "device", ")", "\n", "g", ".", "eval", "(", ")", "\n", "\n", "if", "self", ".", "modelname", "==", "'lenet'", ":", "\n", "            ", "criterion", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "", "else", ":", "\n", "            ", "criterion", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "\n", "", "def", "_compute_error", "(", "dir_z", ",", "dir_x", ",", "train_test", ")", ":", "\n", "            ", "dataloader", "=", "DataLoader", "(", "self", ".", "dataset", ",", "batch_size", "=", "512", ",", "num_workers", "=", "0", ",", "pin_memory", "=", "False", ")", "\n", "\n", "error", "=", "0", "\n", "\n", "for", "current_batch", "in", "dataloader", ":", "\n", "                ", "x", "=", "fixed_batch", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "fixed_batch", "[", "1", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "z", "=", "self", ".", "feaExtractor", ".", "get_activation", "(", "self", ".", "layer", ",", "x", ")", "[", "0", "]", "\n", "g_z", "=", "g", ".", "forward", "(", "z", ")", "\n", "\n", "if", "self", ".", "modelname", "==", "'other'", ":", "\n", "# g_z = g_z[:,:,16:240,16:240]", "\n", "                    ", "g_z", "=", "g_z", "[", "0", "]", "\n", "", "g_z", "=", "g_z", ".", "squeeze", "(", ")", "\n", "error", "+=", "criterion", "(", "g_z", ",", "x", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "error", "/=", "len", "(", "dataloader", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "'Error for {}: {}'", ".", "format", "(", "train_test", ",", "error", ")", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'Running in compute_erro'", ")", "\n", "_compute_error", "(", "self", ".", "dir_z_train", ",", "self", ".", "dir_x_train", ",", "'train'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.restore_model": [[410, 429], ["os.path.join", "myutils.loadweights", "generator_architecture.Generator.load_state_dict", "generator_architecture.Generator.to", "generator_architecture.Generator.eval", "generator_architecture.mnist_generator", "generator_architecture.cifar_generator", "generator_architecture.celebA_generator", "generator_architecture.svhn_generator", "generator_architecture.Generator"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights"], ["", "def", "restore_model", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "filename_model", "=", "os", ".", "path", ".", "join", "(", "self", ".", "restore_file", ")", "\n", "if", "self", ".", "modelname", "==", "'lenet'", ":", "\n", "            ", "g", "=", "mnist_generator", "(", "self", ".", "dim", ",", "self", ".", "nb_channels_first_layer", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'cifarnet'", ":", "\n", "            ", "g", "=", "cifar_generator", "(", "self", ".", "dim", ",", "self", ".", "nb_channels_first_layer", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'celebANet'", ":", "\n", "            ", "g", "=", "celebA_generator", "(", "self", ".", "dim", ",", "self", ".", "nb_channels_first_layer", ")", "\n", "", "elif", "self", ".", "modelname", "==", "'svhnNet'", ":", "\n", "            ", "g", "=", "svhn_generator", "(", "self", ".", "dim", ",", "self", ".", "nb_channels_first_layer", ")", "\n", "", "else", ":", "\n", "            ", "g", "=", "Generator", "(", "self", ".", "nb_channels_first_layer", ",", "self", ".", "dim", ")", "\n", "\n", "", "g", ",", "state_dict", "=", "loadweights", "(", "g", ",", "filename_model", ",", "self", ".", "gpu_ids", ")", "\n", "\n", "g", ".", "load_state_dict", "(", "state_dict", ")", "\n", "g", ".", "to", "(", "self", ".", "device", ")", "\n", "g", ".", "eval", "(", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.generate_from_feature": [[430, 446], ["time.time.time", "g.forward", "GSN.GSN.logger.debug", "GSN.GSN.logger.debug", "time.time.time", "GSN.mnist_untransform", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "GSN.img_untransform", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "GSN.img_untransform"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.forward", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.mnist_untransform", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.img_untransform", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.img_untransform"], ["", "def", "generate_from_feature", "(", "self", ",", "g", ",", "feature", ")", ":", "\n", "        ", "start_t", "=", "time", "(", ")", "\n", "g_z", "=", "g", ".", "forward", "(", "feature", ")", "\n", "end_t", "=", "time", "(", ")", "-", "start_t", "\n", "self", ".", "logger", ".", "debug", "(", "'Generating time: {}s'", ".", "format", "(", "end_t", ")", ")", "\n", "self", ".", "logger", ".", "debug", "(", "'shape of g_z:{}'", ".", "format", "(", "g_z", ".", "shape", ")", ")", "\n", "if", "self", ".", "modelname", "in", "[", "'lenet'", ",", "'celebANet'", ",", "'svhnNet'", "]", ":", "\n", "            ", "g_z", "=", "GSN", ".", "mnist_untransform", "(", "g_z", ")", "\n", "g_z", "=", "torch", ".", "squeeze", "(", "g_z", ")", "\n", "", "elif", "self", ".", "modelname", "in", "[", "'cifarnet'", "]", ":", "\n", "            ", "g_z", "=", "GSN", ".", "img_untransform", "(", "g_z", ")", "\n", "g_z", "=", "torch", ".", "squeeze", "(", "g_z", ")", "\n", "", "else", ":", "\n", "            ", "g_z", "=", "GSN", ".", "img_untransform", "(", "g_z", ")", "\n", "#temp = make_grid(fixed_batch['x'], nrow=4).numpy().transpose((1, 2, 0))", "\n", "", "return", "g_z", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.generate_from_model": [[447, 488], ["GSN.GSN.logger.info", "GSN.GSN.generate_from_model._generate_from_model"], "methods", ["None"], ["", "def", "generate_from_model", "(", "self", ",", "epoch", ",", "g", ")", ":", "\n", "        ", "if", "self", ".", "phase", "==", "'test'", ":", "\n", "           ", "g", "=", "self", ".", "restore_model", "(", "epoch", ")", "\n", "\n", "", "def", "_generate_from_model", "(", "dir_z", ",", "dir_x", ",", "train_test", ")", ":", "\n", "            ", "fixed_dataloader", "=", "DataLoader", "(", "self", ".", "dataset", ",", "16", ")", "\n", "fixed_batch", "=", "next", "(", "iter", "(", "fixed_dataloader", ")", ")", "\n", "\n", "x", "=", "fixed_batch", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "y", "=", "fixed_batch", "[", "1", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "z", "=", "self", ".", "feaExtractor", ".", "get_activation", "(", "self", ".", "layer", ",", "x", ")", "[", "0", "]", "\n", "start_t", "=", "time", "(", ")", "\n", "g_z", "=", "g", ".", "forward", "(", "z", ")", "\n", "if", "self", ".", "modelname", "==", "'other'", ":", "\n", "                ", "g_z", "=", "g_z", "[", "0", "]", "\n", "", "end_t", "=", "time", "(", ")", "-", "start_t", "\n", "self", ".", "logger", ".", "info", "(", "'Total test(model) time: {}s'", ".", "format", "(", "end_t", ")", ")", "\n", "self", ".", "logger", ".", "debug", "(", "'shape of g_z:{}'", ".", "format", "(", "g_z", ".", "shape", ")", ")", "\n", "filename_images", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_experiment", ",", "'epoch_{}_{}.png'", ".", "format", "(", "epoch", ",", "train_test", ")", ")", "\n", "\n", "if", "self", ".", "modelname", "in", "[", "'lenet'", ",", "'celebANet'", ",", "'svhnNet'", "]", ":", "\n", "                ", "temp", "=", "make_single_grid", "(", "g_z", ".", "data", "[", ":", "16", "]", ",", "nrow", "=", "4", ")", ".", "cpu", "(", ")", "\n", "temp", "=", "GSN", ".", "mnist_untransform", "(", "temp", ")", "\n", "", "elif", "self", ".", "modelname", "in", "[", "'cifarnet'", "]", ":", "\n", "                ", "temp", "=", "make_grid", "(", "g_z", ".", "data", "[", ":", "16", "]", ",", "nrow", "=", "4", ")", ".", "cpu", "(", ")", "\n", "temp", "=", "GSN", ".", "img_untransform", "(", "temp", ")", "\n", "", "else", ":", "\n", "                ", "temp", "=", "make_grid", "(", "g_z", ".", "data", "[", ":", "16", "]", ",", "nrow", "=", "4", ")", ".", "cpu", "(", ")", "\n", "temp", "=", "GSN", ".", "img_untransform", "(", "temp", ")", "\n", "\n", "", "self", ".", "logger", ".", "debug", "(", "'shape of temp:{}'", ".", "format", "(", "temp", ".", "shape", ")", ")", "\n", "\n", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "temp", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ")", ")", ".", "save", "(", "filename_images", ")", "\n", "#temp = make_grid(g_z.data[:16], nrow=4).cpu().numpy().transpose((1, 2, 0))", "\n", "#Image.fromarray(np.uint8((temp + 1) * 127.5)).save(filename_images)", "\n", "del", "g_z", ",", "z", ",", "temp", ",", "fixed_batch", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "'Running in generate_from_model'", ")", "\n", "_generate_from_model", "(", "self", ".", "dir_z_train", ",", "self", ".", "dir_x_train", ",", "'train'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "'Generation finished.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.GSN.analyze_model": [[489, 525], ["os.path.join", "generator_architecture.Generator", "torch.nn.DataParallel.to", "torch.nn.DataParallel.to", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.eval", "torch.nn.DataParallel.eval", "numpy.zeros", "range", "numpy.maximum", "torch.autograd.Variable().type().to", "torch.autograd.Variable().type().to", "torch.nn.DataParallel.main._modules[].forward", "torch.nn.DataParallel.main._modules[].forward", "range", "torch.nn.DataParallel.main._modules[].forward.data.cpu().numpy().transpose", "os.path.join", "utils.create_folder", "range", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "range", "torch.nn.DataParallel.main._modules[].forward", "torch.nn.DataParallel.main._modules[].forward", "os.path.join", "PIL.Image.fromarray().save", "GSN.create_path", "torch.autograd.Variable().type", "torch.autograd.Variable().type", "torch.nn.DataParallel.main._modules[].forward.data.cpu().numpy", "PIL.Image.fromarray", "torch.autograd.Variable", "torch.autograd.Variable", "torch.nn.DataParallel.main._modules[].forward.data.cpu", "numpy.uint8", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.forward", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.forward", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.create_folder", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.forward", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.forward", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.create_path"], ["", "def", "analyze_model", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "filename_model", "=", "os", ".", "path", ".", "join", "(", "self", ".", "restore_file", ")", "\n", "g", "=", "Generator", "(", "self", ".", "nb_channels_first_layer", ",", "self", ".", "dim", ")", "\n", "if", "self", ".", "gpuNum", ">", "1", ":", "\n", "            ", "g", "=", "torch", ".", "nn", ".", "DataParallel", "(", "g", ",", "device_ids", "=", "self", ".", "gpu_ids", ")", "\n", "", "g", ".", "to", "(", "self", ".", "device", ")", "\n", "g", ".", "load_state_dict", "(", "torch", ".", "load", "(", "filename_model", ")", ")", "\n", "g", ".", "eval", "(", ")", "\n", "\n", "nb_samples", "=", "50", "\n", "batch_z", "=", "np", ".", "zeros", "(", "(", "nb_samples", ",", "32", "*", "self", ".", "nb_channels_first_layer", ",", "4", ",", "4", ")", ")", "\n", "# batch_z = np.maximum(5*np.random.randn(nb_samples, 32 * self.nb_channels_first_layer, 4, 4), 0)", "\n", "# batch_z = 5 * np.random.randn(nb_samples, 32 * self.nb_channels_first_layer, 4, 4)", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "                ", "batch_z", "[", ":", ",", ":", ",", "i", ",", "j", "]", "=", "create_path", "(", "nb_samples", ")", "\n", "# batch_z[:, :, 0, 0] = create_path(nb_samples)", "\n", "# batch_z[:, :, 0, 1] = create_path(nb_samples)", "\n", "# batch_z[:, :, 1, 0] = create_path(nb_samples)", "\n", "# batch_z[:, :, 1, 1] = create_path(nb_samples)", "\n", "", "", "batch_z", "=", "np", ".", "maximum", "(", "batch_z", ",", "0", ")", "\n", "\n", "z", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "batch_z", ")", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "temp", "=", "g", ".", "main", ".", "_modules", "[", "'4'", "]", ".", "forward", "(", "z", ")", "\n", "for", "i", "in", "range", "(", "5", ",", "10", ")", ":", "\n", "            ", "temp", "=", "g", ".", "main", ".", "_modules", "[", "'{}'", ".", "format", "(", "i", ")", "]", ".", "forward", "(", "temp", ")", "\n", "\n", "", "g_z", "=", "temp", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n", "folder_to_save", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_experiment", ",", "'epoch_{}_path_after_linear_only00_path'", ".", "format", "(", "epoch", ")", ")", "\n", "create_folder", "(", "folder_to_save", ")", "\n", "\n", "for", "idx", "in", "range", "(", "nb_samples", ")", ":", "\n", "            ", "filename_image", "=", "os", ".", "path", ".", "join", "(", "folder_to_save", ",", "'{}.png'", ".", "format", "(", "idx", ")", ")", "\n", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "(", "g_z", "[", "idx", "]", "+", "1", ")", "*", "127.5", ")", ")", ".", "save", "(", "filename_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.GSN.create_path": [[527, 546], ["numpy.copy", "numpy.linspace", "numpy.random.randn", "numpy.random.randn", "numpy.vstack"], "function", ["None"], ["", "", "", "def", "create_path", "(", "nb_samples", ")", ":", "\n", "    ", "z0", "=", "5", "*", "np", ".", "random", ".", "randn", "(", "1", ",", "32", "*", "32", ")", "\n", "z1", "=", "5", "*", "np", ".", "random", ".", "randn", "(", "1", ",", "32", "*", "32", ")", "\n", "\n", "# z0 = np.zeros((1, 32 * 32))", "\n", "# z1 = np.zeros((1, 32 * 32))", "\n", "\n", "# z0[0, 0] = -20", "\n", "# z1[0, 0] = 20", "\n", "\n", "batch_z", "=", "np", ".", "copy", "(", "z0", ")", "\n", "\n", "interval", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "nb_samples", ")", "\n", "for", "t", "in", "interval", ":", "\n", "        ", "if", "t", ">", "0", ":", "\n", "            ", "zt", "=", "(", "1", "-", "t", ")", "*", "z0", "+", "t", "*", "z1", "\n", "batch_z", "=", "np", ".", "vstack", "(", "(", "batch_z", ",", "zt", ")", ")", "\n", "\n", "", "", "return", "batch_z", "\n", "", ""]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.View.__init__": [[16, 19], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "shape", ")", ":", "\n", "        ", "super", "(", "View", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.View.forward": [[20, 22], ["input_tensor.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "return", "input_tensor", ".", "view", "(", "*", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.discriminator.__init__": [[32, 44], ["torch.Module.__init__", "generator_architecture.discriminator._make_layers", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", "=", "'VGG8'", ")", ":", "\n", "        ", "super", "(", "discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4096", ",", "2048", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# nn.Dropout(),", "\n", "nn", ".", "Linear", "(", "2048", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "128", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.discriminator.forward": [[46, 51], ["generator_architecture.discriminator.features", "generator_architecture.discriminator.view", "generator_architecture.discriminator.classifier", "generator_architecture.discriminator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.discriminator.classify": [[52, 56], ["feature.view", "generator_architecture.discriminator.classifier", "feature.size"], "methods", ["None"], ["", "def", "classify", "(", "self", ",", "feature", ")", ":", "\n", "        ", "out", "=", "feature", ".", "view", "(", "feature", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.discriminator._make_layers": [[57, 74], ["torch.Sequential", "torch.Sequential", "generator_architecture.View", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "# layers += [nn.AvgPool2d(kernel_size=1, stride=1)]", "\n", "", "", "layers", "+=", "[", "View", "(", "-", "1", ",", "512", "*", "2", "*", "2", ")", ",", "\n", "nn", ".", "Linear", "(", "512", "*", "2", "*", "2", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.mnist_generator.__init__": [[76, 97], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "generator_architecture.View", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "nb_channels_first_layer", "=", "50", ",", "size_first_layer", "=", "4", ")", ":", "\n", "        ", "super", "(", "mnist_generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "nb_channels_input", "=", "nb_channels_first_layer", "*", "1", "\n", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "z_dim", ",", "\n", "out_features", "=", "size_first_layer", "*", "size_first_layer", "*", "nb_channels_input", ",", "\n", "bias", "=", "False", ")", ",", "\n", "View", "(", "-", "1", ",", "nb_channels_input", ",", "size_first_layer", ",", "size_first_layer", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "# [50, 4,4]", "\n", "nn", ".", "ConvTranspose2d", "(", "nb_channels_input", ",", "nb_channels_input", ",", "2", ",", "4", ")", ",", "# [50,14,14]", "\n", "# nn.ReLU(inplace=True)", "\n", "nn", ".", "Conv2d", "(", "50", ",", "20", ",", "3", ",", "1", ")", ",", "# [20,12,12]", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "# self.atnn = Self_Attn(20, 'relu') # attention layer", "\n", "self", ".", "l2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "20", ",", "20", ",", "2", ",", "3", ")", ",", "# [20, 35,35]", "\n", "nn", ".", "Conv2d", "(", "20", ",", "20", ",", "4", ",", "1", ")", ",", "# [50,32,32]", "\n", "nn", ".", "Conv2d", "(", "20", ",", "1", ",", "5", ",", "1", ")", ",", "# [50,28,28]", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.mnist_generator.forward": [[99, 104], ["generator_architecture.mnist_generator.l1", "generator_architecture.mnist_generator.l2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "latent_fea", ")", ":", "\n", "        ", "x", "=", "self", ".", "l1", "(", "latent_fea", ")", "\n", "# x, att1 = self.atnn(x)", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.BasicBlock.__init__": [[109, 124], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Dropout", "torch.Dropout", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "d1", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "lrl1", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "lrl2", "=", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.BasicBlock.forward": [[126, 133], ["generator_architecture.BasicBlock.lrl1", "generator_architecture.BasicBlock.d1", "generator_architecture.BasicBlock.bn2", "generator_architecture.BasicBlock.shortcut", "generator_architecture.BasicBlock.lrl2", "generator_architecture.BasicBlock.d1", "generator_architecture.BasicBlock.bn1", "generator_architecture.BasicBlock.conv2", "generator_architecture.BasicBlock.bn1", "generator_architecture.BasicBlock.conv1", "generator_architecture.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "lrl1", "(", "self", ".", "d1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "(", "self", ".", "d1", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "self", ".", "lrl2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.ResGenBlock.__init__": [[136, 150], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Upsample", "torch.Upsample", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "residual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "out_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.ResGenBlock.forward": [[152, 154], ["generator_architecture.ResGenBlock.residual", "generator_architecture.ResGenBlock.shortcut"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "residual", "(", "x", ")", "+", "self", ".", "shortcut", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.cifarGenerator.__init__": [[157, 182], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "generator_architecture.View", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "generator_architecture.ResGenBlock", "generator_architecture.ResGenBlock", "generator_architecture.ResGenBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ngpu", ",", "nc", "=", "3", ",", "nz", "=", "512", ",", "ngf", "=", "64", ")", ":", "\n", "        ", "super", "(", "cifarGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "nz", ",", "\n", "out_features", "=", "512", "*", "1", "*", "1", ",", "\n", "bias", "=", "True", ")", ",", "\n", "View", "(", "-", "1", ",", "512", ",", "1", ",", "1", ")", ",", "#[512,2,2] ", "\n", "# input is Z, going into a convolution", "\n", "nn", ".", "ConvTranspose2d", "(", "nz", ",", "ngf", "*", "8", ",", "4", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "8", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# state size. (ngf*8) x 4 x 4", "\n", "ResGenBlock", "(", "ngf", "*", "8", ",", "ngf", "*", "4", ")", ",", "\n", "#BasicBlock(ngf*4, ngf*4),", "\n", "# state size. (ngf*4) x 8 x 8", "\n", "ResGenBlock", "(", "ngf", "*", "4", ",", "ngf", "*", "2", ")", ",", "\n", "#BasicBlock(ngf*2, ngf*2),", "\n", "# state size. (ngf*2) x 16 x 16", "\n", "ResGenBlock", "(", "ngf", "*", "2", ",", "ngf", "*", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ngf", "*", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "ngf", "*", "1", ",", "3", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "#            nn.Sigmoid()", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.cifarGenerator.forward": [[184, 190], ["torch.parallel.data_parallel", "torch.parallel.data_parallel", "generator_architecture.cifarGenerator.main", "range"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.mnist_main.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "is_cuda", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.cifar_Discriminator.__init__": [[193, 211], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "generator_architecture.BasicBlock", "generator_architecture.BasicBlock", "generator_architecture.BasicBlock", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ngpu", ",", "nc", "=", "3", ",", "ndf", "=", "64", ")", ":", "\n", "        ", "super", "(", "cifar_Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ngpu", "=", "ngpu", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "\n", "# input is (nc) x 64 x 64", "\n", "nn", ".", "Conv2d", "(", "nc", ",", "ndf", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# state size. (ndf) x 32 x 32", "\n", "BasicBlock", "(", "ndf", ",", "ndf", "*", "2", ",", "2", ")", ",", "\n", "#BasicBlock(ndf*2, ndf*2),", "\n", "# state size. (ndf*2) x 16 x 16", "\n", "BasicBlock", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "2", ")", ",", "\n", "#BasicBlock(ndf*4, ndf*4),", "\n", "# state size. (ndf*4) x 8 x 8", "\n", "BasicBlock", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "2", ")", ",", "\n", "#BasicBlock(ndf*8, ndf*8),", "\n", "# state size. (ndf*8) x 4 x 4", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "4", ",", "2", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "#            nn.Sigmoid()", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.cifar_Discriminator.forward": [[214, 221], ["generator_architecture.cifar_Discriminator.view().squeeze", "torch.parallel.data_parallel", "torch.parallel.data_parallel", "generator_architecture.cifar_Discriminator.main", "range", "generator_architecture.cifar_Discriminator.view"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.mnist_main.main"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "is_cuda", "and", "self", ".", "ngpu", ">", "1", ":", "\n", "            ", "output", "=", "nn", ".", "parallel", ".", "data_parallel", "(", "self", ".", "main", ",", "input", ",", "range", "(", "self", ".", "ngpu", ")", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "main", "(", "input", ")", "\n", "\n", "", "return", "output", ".", "view", "(", "-", "1", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.cifar_generator.__init__": [[226, 242], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "generator_architecture.cifar_generator._make_layers", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "generator_architecture.View", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "nb_channels_first_layer", "=", "512", ",", "size_first_layer", "=", "4", ",", "archi", "=", "[", "512", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "128", ",", "128", ",", "128", ",", "128", ",", "64", ",", "64", ",", "32", ",", "32", ",", "8", ",", "8", "]", ")", ":", "\n", "        ", "super", "(", "cifar_generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "archi", "=", "archi", "\n", "self", ".", "nb_channels_first_layer", "=", "nb_channels_first_layer", "\n", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "z_dim", ",", "\n", "out_features", "=", "nb_channels_first_layer", "*", "size_first_layer", "*", "size_first_layer", ",", "\n", "bias", "=", "True", ")", ",", "\n", "View", "(", "-", "1", ",", "nb_channels_first_layer", ",", "size_first_layer", ",", "size_first_layer", ")", "#[512,2,2] ", "\n", ")", "\n", "self", ".", "l2", "=", "self", ".", "_make_layers", "(", "self", ".", "archi", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Sequential", "(", "\n", "# nn.ConvTranspose2d(nb_channels_input//4,3,2,2), #[3,32,32]", "\n", "# nn.Conv2d(nb_channels_input, 3, 1, 1),", "\n", "nn", ".", "Tanh", "(", ")", "\n", "#    nn.Sigmoid()", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.cifar_generator.forward": [[245, 252], ["generator_architecture.cifar_generator.l1", "generator_architecture.cifar_generator.l2", "generator_architecture.cifar_generator.l3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "latent_fea", ")", ":", "\n", "#        x = nn.functional.interpolate(latent_fea.view(-1, self.nb_channels_first_layer, 1, 1), scale_factor=4)", "\n", "        ", "x", "=", "self", ".", "l1", "(", "latent_fea", ")", "\n", "# x, att1 = self.atnn(x)", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "x", "=", "self", ".", "l3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.cifar_generator._make_layers": [[253, 268], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "self", ".", "nb_channels_first_layer", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "in_channels", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "3", ",", "1", ",", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.svhn_generator.__init__": [[271, 287], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "generator_architecture.svhn_generator._make_layers", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "generator_architecture.View", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "nb_channels_first_layer", "=", "512", ",", "size_first_layer", "=", "2", ",", "archi", "=", "[", "512", ",", "'M'", ",", "512", ",", "'M'", ",", "256", ",", "'M'", ",", "128", ",", "'M'", ",", "64", "]", ")", ":", "\n", "        ", "super", "(", "svhn_generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "archi", "=", "archi", "\n", "self", ".", "nb_channels_first_layer", "=", "nb_channels_first_layer", "\n", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "z_dim", ",", "\n", "out_features", "=", "nb_channels_first_layer", "*", "size_first_layer", "*", "size_first_layer", ",", "\n", "bias", "=", "False", ")", ",", "\n", "View", "(", "-", "1", ",", "nb_channels_first_layer", ",", "size_first_layer", ",", "size_first_layer", ")", "#[512,2,2] ", "\n", ")", "\n", "self", ".", "l2", "=", "self", ".", "_make_layers", "(", "self", ".", "archi", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Sequential", "(", "\n", "# nn.ConvTranspose2d(nb_channels_input//4,3,2,2), #[3,32,32]", "\n", "# nn.Conv2d(nb_channels_input, 3, 1, 1),", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.svhn_generator.forward": [[289, 295], ["generator_architecture.svhn_generator.l1", "generator_architecture.svhn_generator.l2", "generator_architecture.svhn_generator.l3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "latent_fea", ")", ":", "\n", "        ", "x", "=", "self", ".", "l1", "(", "latent_fea", ")", "\n", "# x, att1 = self.atnn(x)", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "x", "=", "self", ".", "l3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.svhn_generator._make_layers": [[296, 310], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "self", ".", "nb_channels_first_layer", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "in_channels", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "3", ",", "1", ",", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.celebA_generator.__init__": [[312, 328], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "generator_architecture.celebA_generator._make_layers", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "generator_architecture.View", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "z_dim", ",", "nb_channels_first_layer", "=", "512", ",", "size_first_layer", "=", "4", ",", "archi", "=", "[", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "512", ",", "512", ",", "512", ",", "'M'", ",", "256", ",", "256", ",", "256", ",", "'M'", ",", "128", ",", "128", ",", "'M'", ",", "64", ",", "64", "]", ")", ":", "\n", "        ", "super", "(", "celebA_generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "archi", "=", "archi", "\n", "self", ".", "nb_channels_first_layer", "=", "nb_channels_first_layer", "\n", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "z_dim", ",", "\n", "out_features", "=", "nb_channels_first_layer", "*", "size_first_layer", "*", "size_first_layer", ",", "\n", "bias", "=", "False", ")", ",", "\n", "View", "(", "-", "1", ",", "nb_channels_first_layer", ",", "size_first_layer", ",", "size_first_layer", ")", "#[512,4,4] ", "\n", ")", "\n", "self", ".", "l2", "=", "self", ".", "_make_layers", "(", "self", ".", "archi", ")", "\n", "self", ".", "l3", "=", "nn", ".", "Sequential", "(", "\n", "# nn.ConvTranspose2d(nb_channels_input//4,3,2,2), #[3,32,32]", "\n", "# nn.Conv2d(nb_channels_input, 3, 1, 1),", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.celebA_generator.forward": [[330, 336], ["generator_architecture.celebA_generator.l1", "generator_architecture.celebA_generator.l2", "generator_architecture.celebA_generator.l3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "latent_fea", ")", ":", "\n", "        ", "x", "=", "self", ".", "l1", "(", "latent_fea", ")", "\n", "# x, att1 = self.atnn(x)", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "x", "=", "self", ".", "l3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.celebA_generator._make_layers": [[337, 351], ["torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "self", ".", "nb_channels_first_layer", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "in_channels", ",", "2", ",", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "3", ",", "1", ",", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.Generator.__init__": [[353, 377], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "generator_architecture.Self_Attn", "torch.Sequential", "torch.Sequential", "generator_architecture.ConvBlock", "torch.Linear", "torch.Linear", "generator_architecture.View", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "generator_architecture.ConvBlock", "generator_architecture.ConvBlock", "generator_architecture.ConvBlock", "generator_architecture.ConvBlock", "generator_architecture.ConvBlock"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nb_channels_first_layer", ",", "z_dim", ",", "size_first_layer", "=", "7", ")", ":", "\n", "        ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "nb_channels_input", "=", "nb_channels_first_layer", "*", "32", "\n", "# self.att = att", "\n", "\n", "self", ".", "l1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "z_dim", ",", "\n", "out_features", "=", "size_first_layer", "*", "size_first_layer", "*", "nb_channels_input", ",", "\n", "bias", "=", "False", ")", ",", "\n", "View", "(", "-", "1", ",", "nb_channels_input", ",", "size_first_layer", ",", "size_first_layer", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "nb_channels_input", ",", "eps", "=", "0.001", ",", "momentum", "=", "0.9", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "ConvBlock", "(", "nb_channels_input", ",", "nb_channels_first_layer", "*", "16", ",", "upsampling", "=", "True", ")", ",", "\n", "ConvBlock", "(", "nb_channels_first_layer", "*", "16", ",", "nb_channels_first_layer", "*", "8", ",", "upsampling", "=", "True", ")", ",", "\n", "ConvBlock", "(", "nb_channels_first_layer", "*", "8", ",", "nb_channels_first_layer", "*", "4", ",", "upsampling", "=", "True", ")", ")", "\n", "self", ".", "attn1", "=", "Self_Attn", "(", "nb_channels_first_layer", "*", "4", ",", "'relu'", ")", "# attention layer", "\n", "self", ".", "l2", "=", "nn", ".", "Sequential", "(", "\n", "ConvBlock", "(", "nb_channels_first_layer", "*", "4", ",", "nb_channels_first_layer", "*", "2", ",", "upsampling", "=", "True", ")", ",", "\n", "# ConvBlock(nb_channels_first_layer * 2, nb_channels_first_layer * 2, upsampling=True),", "\n", "ConvBlock", "(", "nb_channels_first_layer", "*", "2", ",", "nb_channels_first_layer", ",", "upsampling", "=", "True", ")", ")", "\n", "# self.attn2 = Self_Attn(nb_channels_first_layer, 'relu') # attention layer", "\n", "self", ".", "l3", "=", "ConvBlock", "(", "nb_channels_first_layer", ",", "nb_channels_output", "=", "3", ",", "relu", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.Generator.forward": [[378, 386], ["generator_architecture.Generator.l1", "generator_architecture.Generator.attn1", "generator_architecture.Generator.l2", "generator_architecture.Generator.l3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "out", "=", "self", ".", "l1", "(", "input_tensor", ")", "\n", "out", ",", "att1", "=", "self", ".", "attn1", "(", "out", ")", "\n", "out", "=", "self", ".", "l2", "(", "out", ")", "\n", "#out, att2 = self.attn2(out)", "\n", "out", "=", "self", ".", "l3", "(", "out", ")", "\n", "\n", "return", "out", ",", "att1", "#, att2", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.Self_Attn.__init__": [[389, 400], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Softmax", "torch.Softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "activation", ")", ":", "\n", "        ", "super", "(", "Self_Attn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "chanel_in", "=", "in_dim", "\n", "self", ".", "activation", "=", "activation", "\n", "\n", "self", ".", "query_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "4", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "key_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", "//", "4", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "value_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_dim", ",", "out_channels", "=", "in_dim", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "#", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.Self_Attn.forward": [[400, 420], ["x.size", "generator_architecture.Self_Attn.query_conv().view().permute", "generator_architecture.Self_Attn.key_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "generator_architecture.Self_Attn.softmax", "generator_architecture.Self_Attn.value_conv().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "out.view.view.view", "generator_architecture.Self_Attn.permute", "generator_architecture.Self_Attn.query_conv().view", "generator_architecture.Self_Attn.key_conv", "generator_architecture.Self_Attn.value_conv", "generator_architecture.Self_Attn.query_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n            inputs :\n                x : input feature maps( B X C X W X H)\n            returns :\n                out : self attention value + input feature \n                attention: B X N X N (N is Width*Height)\n        \"\"\"", "\n", "m_batchsize", ",", "C", ",", "width", ",", "height", "=", "x", ".", "size", "(", ")", "\n", "proj_query", "=", "self", ".", "query_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# B X CX(N) transpose the tensor", "\n", "proj_key", "=", "self", ".", "key_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "# B X C x (*W*H)", "\n", "energy", "=", "torch", ".", "bmm", "(", "proj_query", ",", "proj_key", ")", "# transpose check", "\n", "attention", "=", "self", ".", "softmax", "(", "energy", ")", "# BX (N) X (N) ", "\n", "proj_value", "=", "self", ".", "value_conv", "(", "x", ")", ".", "view", "(", "m_batchsize", ",", "-", "1", ",", "width", "*", "height", ")", "# B X C X N", "\n", "\n", "out", "=", "torch", ".", "bmm", "(", "proj_value", ",", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "m_batchsize", ",", "C", ",", "width", ",", "height", ")", "\n", "\n", "out", "=", "self", ".", "gamma", "*", "out", "+", "x", "\n", "return", "out", ",", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.ConvBlock.__init__": [[422, 436], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nb_channels_input", ",", "nb_channels_output", ",", "upsampling", "=", "False", ",", "relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "relu", "=", "relu", "\n", "self", ".", "upsampling", "=", "upsampling", "\n", "\n", "filter_size", "=", "3", "\n", "padding", "=", "(", "filter_size", "-", "1", ")", "//", "2", "\n", "\n", "if", "self", ".", "upsampling", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "nb_channels_input", ",", "nb_channels_input", ",", "2", ",", "2", ")", "\n", "", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "padding", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "nb_channels_input", ",", "nb_channels_output", ",", "filter_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn_layer", "=", "nn", ".", "BatchNorm2d", "(", "nb_channels_output", ",", "eps", "=", "0.001", ",", "momentum", "=", "0.9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.ConvBlock.forward": [[437, 454], ["generator_architecture.ConvBlock.pad", "generator_architecture.ConvBlock.conv", "generator_architecture.ConvBlock.bn_layer", "generator_architecture.ConvBlock.up", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "if", "self", ".", "upsampling", ":", "\n", "            ", "output", "=", "self", ".", "up", "(", "input_tensor", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "input_tensor", "\n", "\n", "", "output", "=", "self", ".", "pad", "(", "output", ")", "\n", "output", "=", "self", ".", "conv", "(", "output", ")", "\n", "output", "=", "self", ".", "bn_layer", "(", "output", ")", "\n", "\n", "if", "self", ".", "relu", ":", "\n", "            ", "output", "=", "torch", ".", "relu", "(", "output", ")", "\n", "", "else", ":", "\n", "#output = F.relu(output) ", "\n", "            ", "output", "=", "torch", ".", "sigmoid", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.generator_architecture.weights_init": [[456, 467], ["isinstance", "layer.weight.data.normal_", "isinstance", "layer.weight.data.normal_", "isinstance", "layer.weight.data.normal_", "layer.bias.data.fill_", "isinstance", "layer.weight.data.normal_", "layer.bias.data.fill_"], "function", ["None"], ["", "", "def", "weights_init", "(", "layer", ")", ":", "\n", "    ", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "layer", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "layer", ".", "weight", ".", "data", ".", "normal_", "(", "0.0", ",", "0.02", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "layer", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "layer", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "        ", "layer", ".", "weight", ".", "data", ".", "normal_", "(", "1.0", ",", "0.02", ")", "\n", "layer", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.mnist_main.Net.__init__": [[13, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1", ",", "20", ",", "5", ",", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "20", ",", "50", ",", "5", ",", "1", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "4", "*", "4", "*", "50", ",", "500", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "500", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.mnist_main.Net.forward": [[20, 29], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "mnist_main.Net.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mnist_main.Net.fc2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "mnist_main.Net.conv1", "mnist_main.Net.conv2", "mnist_main.Net.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "2", ",", "2", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "4", "*", "4", "*", "50", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.mnist_main.Net.classify": [[30, 33], ["mnist_main.Net.fc2", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "classify", "(", "self", ",", "feature", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc2", "(", "F", ".", "relu", "(", "feature", ")", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.mnist_main.train": [[34, 47], ["model.train", "enumerate", "optimizer.zero_grad", "model", "torch.nll_loss", "F.nll_loss.backward", "optimizer.step", "data.to", "target.to", "print", "len", "F.nll_loss.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.mnist_main.test": [[48, 65], ["model.eval", "len", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "torch.nll_loss().item", "pred.eq().sum().item", "len", "data.to", "target.to", "model.max", "len", "torch.nll_loss", "pred.eq().sum", "pred.eq", "target.view_as"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "F", ".", "nll_loss", "(", "output", ",", "target", ",", "reduction", "=", "'sum'", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "print", "(", "'\\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.mnist_main.evalu": [[66, 104], ["torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.to", "torch.nn.DataParallel.eval", "len", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "len", "torch.nn.DataParallel.", "torch.nn.DataParallel.classify", "k.replace", "len", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "k.replace"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet.classify"], ["", "def", "evalu", "(", "x", ",", "gpu_ids", ",", "filename_model", ",", "g", ",", "device", ",", "wholemodel", "=", "True", ")", ":", "\n", "    ", "if", "len", "(", "gpu_ids", ")", "==", "0", ":", "\n", "# load weights to cpu", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "# create new OrderedDict that does not contain `module.`", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "", "elif", "len", "(", "gpu_ids", ")", "==", "1", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ")", "\n", "# create new OrderedDict that does not contain `module.`", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "", "else", ":", "\n", "        ", "g", "=", "torch", ".", "nn", ".", "DataParallel", "(", "g", ",", "device_ids", "=", "gpu_ids", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'module'", "not", "in", "k", ":", "\n", "                ", "name", "=", "''", ".", "join", "(", "[", "'module.'", ",", "k", "]", ")", "# add `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "", "if", "new_state_dict", ":", "\n", "            ", "state_dict", "=", "new_state_dict", "\n", "", "", "g", ".", "load_state_dict", "(", "state_dict", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "1", ":", "\n", "        ", "g", "=", "g", ".", "module", "\n", "", "g", ".", "to", "(", "device", ")", "\n", "g", ".", "eval", "(", ")", "\n", "if", "wholemodel", ":", "\n", "        ", "output", "=", "g", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "g", ".", "classify", "(", "x", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.mnist_main.main": [[105, 159], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.device", "torch.device", "torch.device", "torch.device", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "Net().to", "torch.SGD", "range", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "Net().to.parameters", "mnist_main.train", "mnist_main.test", "torch.save", "torch.save", "torch.save", "torch.save", "mnist_main.Net", "Net().to.state_dict", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test"], ["", "def", "main", "(", ")", ":", "\n", "# Training settings", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'PyTorch MNIST Example'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for training (default: 64)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'input batch size for testing (default: 1000)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 0.01)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.5)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many batches to wait before logging training status'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--save-model'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'For Saving the current Model'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "use_cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "\n", "kwargs", "=", "{", "'num_workers'", ":", "1", ",", "'pin_memory'", ":", "True", "}", "if", "use_cuda", "else", "{", "}", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "'../datasets/mnist/'", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "'../datasets/mnist/'", ",", "train", "=", "False", ",", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "\n", "model", "=", "Net", "(", ")", ".", "to", "(", "device", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "        ", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", "\n", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", "\n", "\n", "", "if", "(", "args", ".", "save_model", ")", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\"mnist_cnn.pt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.celebANet.__init__": [[51, 54], ["torch.Module.__init__", "celebA_classify.initialize_model"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.initialize_model"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ",", "num_classes", ",", "feature_extract", "=", "False", ",", "use_pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "celebANet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", ",", "input_size", "=", "initialize_model", "(", "model_name", ",", "num_classes", ",", "feature_extract", ",", "use_pretrained", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.celebANet.forward": [[55, 58], ["celebA_classify.celebANet.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.celebANet.classify": [[59, 65], ["range"], "methods", ["None"], ["", "def", "classify", "(", "self", ",", "features", ")", ":", "\n", "        ", "x", "=", "features", "\n", "for", "i", "in", "range", "(", "6", ")", ":", "\n", "            ", "x", "=", "self", ".", "model", ".", "classifier", "[", "i", "+", "1", "]", "(", "x", ")", "\n", "", "output", "=", "x", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.celebA_dataset.__init__": [[68, 84], ["os.walk", "os.path.join", "os.path.join", "open", "labels.readlines", "celebA_classify.celebA_dataset.filenames.append", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "train", "=", "True", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "filenames", "=", "[", "]", "\n", "self", ".", "train", "=", "train", "\n", "if", "train", "==", "True", ":", "\n", "            ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'train'", ")", "\n", "", "else", ":", "\n", "            ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'test'", ")", "\n", "", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "if", "filename", "[", "-", "4", ":", "]", "not", "in", "[", "'.png'", ",", "'.jpg'", "]", ":", "\n", "                    ", "continue", "\n", "", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "", "", "self", ".", "transform", "=", "transform", "\n", "with", "open", "(", "'./datasets/celebA/labels/list_attr_celeba.txt'", ")", "as", "labels", ":", "\n", "            ", "self", ".", "labelsList", "=", "labels", ".", "readlines", "(", ")", "\n", "", "self", ".", "labelsList", "=", "self", ".", "labelsList", "[", "2", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.celebA_dataset.__getitem__": [[85, 101], ["PIL.Image.open", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "int", "labelLine.split.split.rstrip", "labelLine.split.split.split", "int", "celebA_classify.celebA_dataset.transform", "numpy.array", "[].split", "filename.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "filenames", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ")", "\n", "\n", "idx", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "labelLine", "=", "self", ".", "labelsList", "[", "idx", "-", "1", "]", "\n", "labelLine", "=", "labelLine", ".", "rstrip", "(", "'\\n'", ")", "\n", "labelLine", "=", "labelLine", ".", "split", "(", ")", "\n", "label", "=", "int", "(", "labelLine", "[", "32", "]", ")", "# 32 is used for smile and non-smile; 16 is used for eyeglasses and non-eyeglasses", "\n", "if", "label", "==", "-", "1", ":", "\n", "            ", "label", "=", "0", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.celebA_dataset.__len__": [[102, 104], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.initialize_model": [[24, 49], ["torch.Sequential", "torchvision.models.vgg11_bn", "print", "exit", "torch.Linear", "torch.ReLU", "torch.Dropout", "torch.Linear", "torch.ReLU", "torch.Dropout", "torch.Linear"], "function", ["None"], ["def", "initialize_model", "(", "model_name", ",", "num_classes", ",", "feature_extract", "=", "False", ",", "use_pretrained", "=", "True", ")", ":", "\n", "# Initialize these variables which will be set in this if statement. Each of these", "\n", "#   variables is model specific.", "\n", "    ", "model_ft", "=", "None", "\n", "input_size", "=", "0", "\n", "\"\"\" VGG11_bn 'A': [64, 'M', 128, 'M', 256, 256, 'M', 512, 512, 'M', 512, 512, 'M']\n    \"\"\"", "\n", "if", "model_name", "==", "'vgg11_bn'", ":", "\n", "        ", "model_ft", "=", "models", ".", "vgg11_bn", "(", "pretrained", "=", "use_pretrained", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Unknown type of network: {}'", ".", "format", "(", "model_name", ")", ")", "\n", "exit", "(", "0", ")", "\n", "# set_parameter_requires_grad(model_ft, feature_extract)", "\n", "", "model_ft", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "4", "*", "4", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "2048", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "2048", ",", "num_classes", ")", ",", "\n", ")", "\n", "input_size", "=", "128", "\n", "\n", "return", "model_ft", ",", "input_size", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train": [[105, 121], ["logging.getLogger", "torch.BCEWithLogitsLoss", "model.train", "enumerate", "torch.unsqueeze().type", "torch.unsqueeze().type", "torch.unsqueeze().type", "torch.unsqueeze().type", "optimizer.zero_grad", "model", "nn.BCEWithLogitsLoss.", "criterion.backward", "optimizer.step", "torch.to", "torch.unsqueeze().type.to", "logging.getLogger.info", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "len", "criterion.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.train"], ["", "", "def", "train", "(", "args", ",", "model", ",", "device", ",", "train_loader", ",", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "target", "=", "torch", ".", "unsqueeze", "(", "target", ",", "1", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Train Epoch: {} [{}/{} ({:.0f}%)]\\tLoss: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "train_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.test": [[122, 143], ["logging.getLogger", "model.eval", "torch.BCEWithLogitsLoss", "len", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "torch.unsqueeze().type", "torch.unsqueeze().type", "torch.unsqueeze().type", "torch.unsqueeze().type", "model", "nn.BCEWithLogitsLoss.item", "pred.eq().sum().item", "len", "torch.to", "torch.unsqueeze().type.to", "len", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "nn.BCEWithLogitsLoss.", "pred.eq().sum", "pred.eq", "torch.unsqueeze().type.view_as"], "function", ["None"], ["", "", "", "def", "test", "(", "args", ",", "model", ",", "device", ",", "test_loader", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "model", ".", "eval", "(", ")", "\n", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", "reduction", "=", "'sum'", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "data", ",", "target", "in", "test_loader", ":", "\n", "            ", "target", "=", "torch", ".", "unsqueeze", "(", "target", ",", "1", ")", ".", "type", "(", "torch", ".", "float32", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "test_loss", "+=", "loss", "(", "output", ",", "target", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "(", "(", "output", ">=", "0.5", ")", ".", "type", "(", "torch", ".", "float32", ")", ")", ".", "to", "(", "device", ")", "# get the label", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "test_loss", "/=", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n", "logger", ".", "info", "(", "'Test set: Average loss: {:.4f}, Accuracy: {}/{} ({:.2f}%)\\n'", ".", "format", "(", "\n", "test_loss", ",", "correct", ",", "len", "(", "test_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", ")", ")", "\n", "return", "correct", "/", "len", "(", "test_loader", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.celebA_classify.evalu": [[144, 156], ["myutils.loadweights", "g.load_state_dict", "g.to", "g.eval", "len", "g", "g.classify"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet.classify"], ["", "def", "evalu", "(", "x", ",", "gpu_ids", ",", "filename_model", ",", "g", ",", "device", ",", "wholemodel", "=", "True", ")", ":", "\n", "    ", "g", ",", "state_dict", "=", "loadweights", "(", "g", ",", "filename_model", ",", "gpu_ids", ")", "\n", "g", ".", "load_state_dict", "(", "state_dict", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "1", ":", "\n", "        ", "g", "=", "g", ".", "module", "\n", "", "g", ".", "to", "(", "device", ")", "\n", "g", ".", "eval", "(", ")", "\n", "if", "wholemodel", ":", "\n", "        ", "output", "=", "g", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "g", ".", "classify", "(", "x", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__init__": [[36, 49], ["numpy.zeros", "os.walk", "len", "svhn_clssifier.defense_dataset.filenames.append", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "eps", ",", "img_num", ",", "fgsm", "=", "False", ",", "transform", "=", "None", ",", "dataAug", "=", "True", ")", ":", "\n", "        ", "self", ".", "filenames", "=", "[", "]", "\n", "self", ".", "ori_filenames", "=", "[", "]", "\n", "self", ".", "fgsm", "=", "fgsm", "\n", "img_filter", "=", "[", "'png'", ",", "'jpg'", "]", "\n", "label_list", "=", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", "]", "\n", "label_arr", "=", "np", ".", "zeros", "(", "len", "(", "label_list", ")", ")", "\n", "\n", "for", "root", ",", "dirs", ",", "filenames", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "for", "filename", "in", "filenames", ":", "\n", "                ", "self", ".", "filenames", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", ")", "\n", "\n", "", "", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__getitem__": [[50, 62], ["PIL.Image.open", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "svhn_clssifier.defense_dataset.transform", "numpy.array", "int", "int", "filename.split", "filename.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "filenames", "[", "index", "]", "\n", "img", "=", "Image", ".", "open", "(", "filename", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ")", "\n", "if", "self", ".", "fgsm", ":", "\n", "            ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "2", "]", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "label", "=", "int", "(", "filename", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "[", "0", "]", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.defense_dataset.__len__": [[63, 65], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "filenames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.View.__init__": [[76, 79], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "shape", ")", ":", "\n", "        ", "super", "(", "View", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "shape", "=", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.View.forward": [[80, 82], ["input_tensor.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "return", "input_tensor", ".", "view", "(", "*", "self", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.svhnVGG.__init__": [[85, 95], ["torch.Module.__init__", "svhn_clssifier.svhnVGG._make_layers", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ")", ":", "\n", "        ", "super", "(", "svhnVGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4096", ",", "2048", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "# nn.Dropout(),", "\n", "nn", ".", "Linear", "(", "2048", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "10", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.svhnVGG.forward": [[97, 102], ["svhn_clssifier.svhnVGG.features", "svhn_clssifier.svhnVGG.view", "svhn_clssifier.svhnVGG.classifier", "svhn_clssifier.svhnVGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.svhnVGG.classify": [[103, 107], ["feature.view", "svhn_clssifier.svhnVGG.classifier", "feature.size"], "methods", ["None"], ["", "def", "classify", "(", "self", ",", "feature", ")", ":", "\n", "        ", "out", "=", "feature", ".", "view", "(", "feature", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.svhnVGG._make_layers": [[108, 125], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "svhn_clssifier.View", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "# layers += [nn.AvgPool2d(kernel_size=1, stride=1)]", "\n", "", "", "layers", "+=", "[", "View", "(", "-", "1", ",", "512", "*", "2", "*", "2", ")", ",", "\n", "nn", ".", "Linear", "(", "512", "*", "2", "*", "2", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.svhn_clssifier.evalu": [[126, 164], ["torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.to", "torch.nn.DataParallel.eval", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "len", "torch.nn.DataParallel.", "torch.nn.DataParallel.classify", "k.replace", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "k.replace"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet.classify"], ["", "", "def", "evalu", "(", "x", ",", "gpu_ids", ",", "filename_model", ",", "g", ",", "device", ",", "wholemodel", "=", "True", ")", ":", "\n", "    ", "if", "len", "(", "gpu_ids", ")", "==", "0", ":", "\n", "# load weights to cpu", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "# create new OrderedDict that does not contain `module.`", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "", "elif", "len", "(", "gpu_ids", ")", "==", "1", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ")", "\n", "# create new OrderedDict that does not contain `module.`", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "", "else", ":", "\n", "        ", "g", "=", "torch", ".", "nn", ".", "DataParallel", "(", "g", ",", "device_ids", "=", "gpu_ids", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'module'", "not", "in", "k", ":", "\n", "                ", "name", "=", "''", ".", "join", "(", "[", "'module.'", ",", "k", "]", ")", "# add `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "", "if", "new_state_dict", ":", "\n", "            ", "state_dict", "=", "new_state_dict", "\n", "", "", "g", ".", "load_state_dict", "(", "state_dict", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "1", ":", "\n", "        ", "g", "=", "g", ".", "module", "\n", "", "g", ".", "to", "(", "device", ")", "\n", "g", ".", "eval", "(", ")", "\n", "if", "wholemodel", ":", "\n", "        ", "output", "=", "g", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "g", ".", "classify", "(", "x", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.time_stamp": [[24, 27], ["datetime.datetime.now"], "function", ["None"], ["def", "time_stamp", "(", ")", ":", "\n", "    ", "TIMESTAMP", "=", "\"{0:%Y-%m-%dT%H-%M-%S}\"", ".", "format", "(", "datetime", ".", "now", "(", ")", ")", "\n", "return", "TIMESTAMP", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.mylogger": [[29, 42], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "mylogger", "(", "logpath", "=", "'./param.log'", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "logger", ".", "setLevel", "(", "'DEBUG'", ")", "\n", "BASIC_FORMAT", "=", "\"%(asctime)s:%(levelname)s:%(message)s\"", "\n", "DATE_FORMAT", "=", "'%Y-%m-%d %H:%M:%S'", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "BASIC_FORMAT", ",", "DATE_FORMAT", ")", "\n", "chlr", "=", "logging", ".", "StreamHandler", "(", ")", "# ", "\n", "chlr", ".", "setFormatter", "(", "formatter", ")", "\n", "chlr", ".", "setLevel", "(", "'DEBUG'", ")", "# ", "\n", "fhlr", "=", "logging", ".", "FileHandler", "(", "logpath", ")", "# ", "\n", "fhlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "chlr", ")", "\n", "logger", ".", "addHandler", "(", "fhlr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.loadweights": [[43, 72], ["len", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "k.replace", "len", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.load", "torch.load", "torch.nn.DataParallel", "torch.nn.DataParallel", "collections.OrderedDict", "torch.load.items", "k.replace"], "function", ["None"], ["", "def", "loadweights", "(", "model", ",", "filename_model", ",", "gpu_ids", "=", "''", ")", ":", "\n", "    ", "if", "len", "(", "gpu_ids", ")", "==", "0", ":", "\n", "# load weights to cpu", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "# create new OrderedDict that does not contain `module.`", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "", "elif", "len", "(", "gpu_ids", ")", "==", "1", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ")", "\n", "# create new OrderedDict that does not contain `module.`", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "gpu_ids", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'module'", "not", "in", "k", ":", "\n", "                ", "name", "=", "''", ".", "join", "(", "[", "'module.'", ",", "k", "]", ")", "# add `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "", "if", "new_state_dict", ":", "\n", "            ", "state_dict", "=", "new_state_dict", "\n", "", "", "return", "model", ",", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.normalize": [[73, 76], ["numpy.sqrt", "numpy.sum"], "function", ["None"], ["", "def", "normalize", "(", "vector", ")", ":", "\n", "    ", "norm", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "vector", "**", "2", ")", ")", "\n", "return", "vector", "/", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.get_nb_files": [[78, 81], ["len", "os.listdir", "os.path.isfile", "os.path.join"], "function", ["None"], ["", "def", "get_nb_files", "(", "input_dir", ")", ":", "\n", "    ", "list_files", "=", "[", "file", "for", "file", "in", "os", ".", "listdir", "(", "input_dir", ")", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "file", ")", ")", "]", "\n", "return", "len", "(", "list_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.create_folder": [[83, 86], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "create_folder", "(", "folder", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.create_name_experiment": [[88, 99], ["print"], "function", ["None"], ["", "", "def", "create_name_experiment", "(", "parameters", ",", "attribute_experiment", ")", ":", "\n", "    ", "name_experiment", "=", "'{}_{}_{}_{}_ncfl{}_{}'", ".", "format", "(", "parameters", "[", "'dataset'", "]", ",", "\n", "parameters", "[", "'train_attribute'", "]", ",", "\n", "parameters", "[", "'test_attribute'", "]", ",", "\n", "parameters", "[", "'embedding_attribute'", "]", ",", "\n", "parameters", "[", "'nb_channels_first_layer'", "]", ",", "\n", "attribute_experiment", ")", "\n", "\n", "print", "(", "'Name experiment: {}'", ".", "format", "(", "name_experiment", ")", ")", "\n", "\n", "return", "name_experiment", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.make_single_grid": [[101, 174], ["isinstance", "tensor.clone.size", "min", "int", "tensor.clone.new().fill_", "irange", "TypeError", "torch.stack", "torch.stack", "tensor.clone.dim", "tensor.clone.view", "tensor.clone.dim", "tensor.clone.view", "tensor.clone.clone", "tensor.clone.size", "tensor.clone.squeeze", "math.ceil", "int", "int", "irange", "torch.is_tensor", "torch.is_tensor", "tensor.clone.size", "tensor.clone.size", "tensor.clone.size", "tensor.clone.size", "tensor.clone.size", "isinstance", "img.clamp_", "img.add_().div_", "utils.make_single_grid.norm_range"], "function", ["None"], ["", "def", "make_single_grid", "(", "tensor", ",", "nrow", "=", "8", ",", "padding", "=", "2", ",", "\n", "normalize", "=", "False", ",", "range", "=", "None", ",", "scale_each", "=", "False", ",", "pad_value", "=", "0", ")", ":", "\n", "    ", "\"\"\"Make a grid of images.\n\n    Args:\n        tensor (Tensor or list): 4D mini-batch Tensor of shape (B x 1 x H x W)\n            or a list of images all of the same size.\n        nrow (int, optional): Number of images displayed in each row of the grid.\n            The Final grid size is (B / nrow, nrow). Default is 8.\n        padding (int, optional): amount of padding. Default is 2.\n        normalize (bool, optional): If True, shift the image to the range (0, 1),\n            by subtracting the minimum and dividing by the maximum pixel value.\n        range (tuple, optional): tuple (min, max) where min and max are numbers,\n            then these numbers are used to normalize the image. By default, min and max\n            are computed from the tensor.\n        scale_each (bool, optional): If True, scale each image in the batch of\n            images separately rather than the (min, max) over all images.\n        pad_value (float, optional): Value for the padded pixels.\n    \"\"\"", "\n", "if", "not", "(", "torch", ".", "is_tensor", "(", "tensor", ")", "or", "\n", "(", "isinstance", "(", "tensor", ",", "list", ")", "and", "all", "(", "torch", ".", "is_tensor", "(", "t", ")", "for", "t", "in", "tensor", ")", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'tensor or list of tensors expected, got {}'", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", "\n", "\n", "# if list of tensors, convert to a 4D mini-batch Tensor", "\n", "", "if", "isinstance", "(", "tensor", ",", "list", ")", ":", "\n", "        ", "tensor", "=", "torch", ".", "stack", "(", "tensor", ",", "dim", "=", "0", ")", "\n", "\n", "", "if", "tensor", ".", "dim", "(", ")", "==", "2", ":", "# single image H x W", "\n", "        ", "tensor", "=", "tensor", ".", "view", "(", "1", ",", "tensor", ".", "size", "(", "0", ")", ",", "tensor", ".", "size", "(", "1", ")", ")", "\n", "", "if", "tensor", ".", "dim", "(", ")", "==", "3", ":", "# single image", "\n", "        ", "tensor", "=", "tensor", ".", "view", "(", "1", ",", "tensor", ".", "size", "(", "0", ")", ",", "tensor", ".", "size", "(", "1", ")", ",", "tensor", ".", "size", "(", "2", ")", ")", "\n", "\n", "", "if", "normalize", "is", "True", ":", "\n", "        ", "tensor", "=", "tensor", ".", "clone", "(", ")", "# avoid modifying tensor in-place", "\n", "if", "range", "is", "not", "None", ":", "\n", "            ", "assert", "isinstance", "(", "range", ",", "tuple", ")", ",", "\"range has to be a tuple (min, max) if specified. min and max are numbers\"", "\n", "\n", "", "def", "norm_ip", "(", "img", ",", "min", ",", "max", ")", ":", "\n", "            ", "img", ".", "clamp_", "(", "min", "=", "min", ",", "max", "=", "max", ")", "\n", "img", ".", "add_", "(", "-", "min", ")", ".", "div_", "(", "max", "-", "min", "+", "1e-5", ")", "\n", "\n", "", "def", "norm_range", "(", "t", ",", "range", ")", ":", "\n", "            ", "if", "range", "is", "not", "None", ":", "\n", "                ", "norm_ip", "(", "t", ",", "range", "[", "0", "]", ",", "range", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                ", "norm_ip", "(", "t", ",", "float", "(", "t", ".", "min", "(", ")", ")", ",", "float", "(", "t", ".", "max", "(", ")", ")", ")", "\n", "\n", "", "", "if", "scale_each", "is", "True", ":", "\n", "            ", "for", "t", "in", "tensor", ":", "# loop over mini-batch dimension", "\n", "                ", "norm_range", "(", "t", ",", "range", ")", "\n", "", "", "else", ":", "\n", "            ", "norm_range", "(", "tensor", ",", "range", ")", "\n", "\n", "", "", "if", "tensor", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "        ", "return", "tensor", ".", "squeeze", "(", ")", "\n", "\n", "# make the mini-batch of images into a grid", "\n", "", "nmaps", "=", "tensor", ".", "size", "(", "0", ")", "\n", "xmaps", "=", "min", "(", "nrow", ",", "nmaps", ")", "\n", "ymaps", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "nmaps", ")", "/", "xmaps", ")", ")", "\n", "height", ",", "width", "=", "int", "(", "tensor", ".", "size", "(", "2", ")", "+", "padding", ")", ",", "int", "(", "tensor", ".", "size", "(", "3", ")", "+", "padding", ")", "\n", "grid", "=", "tensor", ".", "new", "(", "3", ",", "height", "*", "ymaps", "+", "padding", ",", "width", "*", "xmaps", "+", "padding", ")", ".", "fill_", "(", "pad_value", ")", "\n", "k", "=", "0", "\n", "for", "y", "in", "irange", "(", "ymaps", ")", ":", "\n", "        ", "for", "x", "in", "irange", "(", "xmaps", ")", ":", "\n", "            ", "if", "k", ">=", "nmaps", ":", "\n", "                ", "break", "\n", "", "grid", ".", "narrow", "(", "1", ",", "y", "*", "height", "+", "padding", ",", "height", "-", "padding", ")", ".", "narrow", "(", "2", ",", "x", "*", "width", "+", "padding", ",", "width", "-", "padding", ")", ".", "copy_", "(", "tensor", "[", "k", "]", ")", "\n", "k", "=", "k", "+", "1", "\n", "", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.progress_bar": [[179, 223], ["os.popen().read().split", "int", "int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "os.popen().read", "utils.format_time", "utils.format_time", "len", "int", "os.popen", "int"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.utils.format_time", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.utils.format_time"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "_", ",", "term_width", "=", "os", ".", "popen", "(", "'stty size'", ",", "'r'", ")", ".", "read", "(", ")", ".", "split", "(", ")", "\n", "term_width", "=", "int", "(", "term_width", ")", "\n", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.generate_latent.utils.format_time": [[224, 255], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "", ""]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_test.evalu": [[27, 65], ["torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.to", "torch.nn.DataParallel.eval", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "len", "torch.nn.DataParallel.", "torch.nn.DataParallel.linear", "k.replace", "len", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "collections.OrderedDict", "torch.load.items", "k.replace"], "function", ["None"], ["def", "evalu", "(", "x", ",", "gpu_ids", ",", "filename_model", ",", "g", ",", "device", ",", "wholemodel", "=", "True", ")", ":", "\n", "    ", "if", "len", "(", "gpu_ids", ")", "==", "0", ":", "\n", "# load weights to cpu", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "# create new OrderedDict that does not contain `module.`", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "", "elif", "len", "(", "gpu_ids", ")", "==", "1", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ")", "\n", "# create new OrderedDict that does not contain `module.`", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "", "else", ":", "\n", "        ", "g", "=", "torch", ".", "nn", ".", "DataParallel", "(", "g", ",", "device_ids", "=", "gpu_ids", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'module'", "not", "in", "k", ":", "\n", "                ", "name", "=", "''", ".", "join", "(", "[", "'module.'", ",", "k", "]", ")", "# add `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "", "if", "new_state_dict", ":", "\n", "            ", "state_dict", "=", "new_state_dict", "\n", "", "", "g", ".", "load_state_dict", "(", "state_dict", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "1", ":", "\n", "        ", "g", "=", "g", ".", "module", "\n", "", "g", ".", "to", "(", "device", ")", "\n", "g", ".", "eval", "(", ")", "\n", "if", "wholemodel", ":", "\n", "        ", "output", "=", "g", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "output", "=", "g", ".", "linear", "(", "x", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.cifar_main.evalu": [[27, 37], ["g.eval", "g", "x.view.view", "g.linear", "x.view.size"], "function", ["None"], ["def", "evalu", "(", "x", ",", "gpu_ids", ",", "filename_model", ",", "g", ",", "device", ",", "wholemodel", "=", "True", ")", ":", "\n", "    ", "g", ".", "eval", "(", ")", "\n", "if", "wholemodel", ":", "\n", "        ", "output", "=", "g", "(", "x", ")", "\n", "", "else", ":", "\n", "# x = x.view(-1, 512, 4, 4)", "\n", "#       x = F.avg_pool2d(x, 4)", "\n", "        ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "output", "=", "g", ".", "linear", "(", "x", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.utils.get_mean_and_std": [[15, 28], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["from", "collections", "import", "OrderedDict", "\n", "\n", "import", "logging", "\n", "import", "argparse", "\n", "import", "ast", "\n", "from", "collections", "import", "OrderedDict", "\n", "import", "torch", "\n", "from", "datetime", "import", "datetime", "\n", "\n", "def", "time_stamp", "(", ")", ":", "\n", "    ", "TIMESTAMP", "=", "\"{0:%Y-%m-%dT%H-%M-%S}\"", ".", "format", "(", "datetime", ".", "now", "(", ")", ")", "\n", "return", "TIMESTAMP", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.utils.init_params": [[29, 43], ["net.modules", "isinstance", "torch.kaiming_normal", "isinstance", "torch.constant", "torch.constant", "torch.constant", "isinstance", "torch.normal", "torch.constant"], "function", ["None"], ["", "def", "mylogger", "(", "logpath", "=", "'./param.log'", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "'mylogger'", ")", "\n", "logger", ".", "setLevel", "(", "'DEBUG'", ")", "\n", "BASIC_FORMAT", "=", "\"%(asctime)s:%(levelname)s:%(message)s\"", "\n", "DATE_FORMAT", "=", "'%Y-%m-%d %H:%M:%S'", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "BASIC_FORMAT", ",", "DATE_FORMAT", ")", "\n", "chlr", "=", "logging", ".", "StreamHandler", "(", ")", "# ", "\n", "chlr", ".", "setFormatter", "(", "formatter", ")", "\n", "chlr", ".", "setLevel", "(", "'DEBUG'", ")", "# ", "\n", "fhlr", "=", "logging", ".", "FileHandler", "(", "logpath", ")", "# ", "\n", "fhlr", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "chlr", ")", "\n", "logger", ".", "addHandler", "(", "fhlr", ")", "\n", "\n", "", "def", "loadweights", "(", "model", ",", "filename_model", ",", "gpu_ids", "=", "''", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.utils.progress_bar": [[49, 93], ["os.popen().read().split", "int", "int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "os.popen().read", "utils.format_time", "utils.format_time", "len", "int", "os.popen", "int"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.utils.format_time", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.utils.format_time"], ["for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "", "elif", "len", "(", "gpu_ids", ")", "==", "1", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ")", "\n", "# create new OrderedDict that does not contain `module.`", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "name", "=", "k", ".", "replace", "(", "'module.'", ",", "''", ")", "# remove `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "state_dict", "=", "new_state_dict", "\n", "", "else", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "filename_model", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "gpu_ids", ")", "\n", "new_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "'module'", "not", "in", "k", ":", "\n", "                ", "name", "=", "''", ".", "join", "(", "[", "'module.'", ",", "k", "]", ")", "# add `module.`", "\n", "new_state_dict", "[", "name", "]", "=", "v", "\n", "", "", "if", "new_state_dict", ":", "\n", "            ", "state_dict", "=", "new_state_dict", "\n", "", "", "return", "model", ",", "state_dict", "\n", "\n", "", "def", "normalize", "(", "vector", ")", ":", "\n", "    ", "norm", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "vector", "**", "2", ")", ")", "\n", "return", "vector", "/", "norm", "\n", "\n", "\n", "", "def", "get_nb_files", "(", "input_dir", ")", ":", "\n", "    ", "list_files", "=", "[", "file", "for", "file", "in", "os", ".", "listdir", "(", "input_dir", ")", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "input_dir", ",", "file", ")", ")", "]", "\n", "return", "len", "(", "list_files", ")", "\n", "\n", "\n", "", "def", "create_folder", "(", "folder", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder", ")", "\n", "\n", "\n", "", "", "def", "create_name_experiment", "(", "parameters", ",", "attribute_experiment", ")", ":", "\n", "    ", "name_experiment", "=", "'{}_{}_{}_{}_ncfl{}_{}'", ".", "format", "(", "parameters", "[", "'dataset'", "]", ",", "\n", "parameters", "[", "'train_attribute'", "]", ",", "\n", "parameters", "[", "'test_attribute'", "]", ",", "\n", "parameters", "[", "'embedding_attribute'", "]", ",", "\n", "parameters", "[", "'nb_channels_first_layer'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.pytorch_cifar.utils.format_time": [[94, 125], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["attribute_experiment", ")", "\n", "\n", "print", "(", "'Name experiment: {}'", ".", "format", "(", "name_experiment", ")", ")", "\n", "\n", "return", "name_experiment", "\n", "\n", "\n", "", "def", "make_single_grid", "(", "tensor", ",", "nrow", "=", "8", ",", "padding", "=", "2", ",", "\n", "normalize", "=", "False", ",", "range", "=", "None", ",", "scale_each", "=", "False", ",", "pad_value", "=", "0", ")", ":", "\n", "    ", "\"\"\"Make a grid of images.\n\n    Args:\n        tensor (Tensor or list): 4D mini-batch Tensor of shape (B x 1 x H x W)\n            or a list of images all of the same size.\n        nrow (int, optional): Number of images displayed in each row of the grid.\n            The Final grid size is (B / nrow, nrow). Default is 8.\n        padding (int, optional): amount of padding. Default is 2.\n        normalize (bool, optional): If True, shift the image to the range (0, 1),\n            by subtracting the minimum and dividing by the maximum pixel value.\n        range (tuple, optional): tuple (min, max) where min and max are numbers,\n            then these numbers are used to normalize the image. By default, min and max\n            are computed from the tensor.\n        scale_each (bool, optional): If True, scale each image in the batch of\n            images separately rather than the (min, max) over all images.\n        pad_value (float, optional): Value for the padded pixels.\n    \"\"\"", "\n", "if", "not", "(", "torch", ".", "is_tensor", "(", "tensor", ")", "or", "\n", "(", "isinstance", "(", "tensor", ",", "list", ")", "and", "all", "(", "torch", ".", "is_tensor", "(", "t", ")", "for", "t", "in", "tensor", ")", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'tensor or list of tensors expected, got {}'", ".", "format", "(", "type", "(", "tensor", ")", ")", ")", "\n", "\n", "# if list of tensors, convert to a 4D mini-batch Tensor", "\n", "", "if", "isinstance", "(", "tensor", ",", "list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenet.Block.__init__": [[13, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenet.Block.forward": [[20, 24], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenet.Block.bn1", "mobilenet.Block.bn2", "mobilenet.Block.conv1", "mobilenet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenet.MobileNet.__init__": [[30, 36], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenet.MobileNet._make_layers", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenet.MobileNet._make_layers": [[37, 45], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "mobilenet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenet.MobileNet.forward": [[46, 53], ["torch.relu", "torch.relu", "torch.relu", "mobilenet.MobileNet.layers", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenet.MobileNet.view", "mobilenet.MobileNet.linear", "mobilenet.MobileNet.bn1", "mobilenet.MobileNet.size", "mobilenet.MobileNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenet.test": [[55, 60], ["mobilenet.MobileNet", "torch.randn", "torch.randn", "torch.randn", "MobileNet.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.vgg.VGG.__init__": [[15, 19], ["torch.Module.__init__", "vgg.VGG._make_layers", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.MobileNetV2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "vgg_name", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "self", ".", "_make_layers", "(", "cfg", "[", "vgg_name", "]", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.vgg.VGG.forward": [[20, 25], ["vgg.VGG.features", "vgg.VGG.view", "vgg.VGG.classifier", "vgg.VGG.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.vgg.VGG._make_layers": [[26, 39], ["torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "x", "in", "cfg", ":", "\n", "            ", "if", "x", "==", "'M'", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "nn", ".", "Conv2d", "(", "in_channels", ",", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "x", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "in_channels", "=", "x", "\n", "", "", "layers", "+=", "[", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.vgg.test": [[41, 46], ["vgg.VGG", "torch.randn", "torch.randn", "VGG.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "VGG", "(", "'VGG11'", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.Block.__init__": [[13, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "planes", "=", "expansion", "*", "in_planes", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "1", "and", "in_planes", "!=", "out_planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.Block.forward": [[32, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mobilenetv2.Block.bn3", "mobilenetv2.Block.bn1", "mobilenetv2.Block.bn2", "mobilenetv2.Block.conv3", "mobilenetv2.Block.conv1", "mobilenetv2.Block.conv2", "mobilenetv2.Block.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "=", "out", "+", "self", ".", "shortcut", "(", "x", ")", "if", "self", ".", "stride", "==", "1", "else", "out", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.MobileNetV2.__init__": [[50, 59], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "mobilenetv2.MobileNetV2._make_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.MobileNetV2._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# NOTE: change conv1 stride 2 -> 1 for CIFAR10", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "320", ",", "1280", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "1280", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1280", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.MobileNetV2._make_layers": [[60, 68], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "mobilenetv2.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "expansion", ",", "out_planes", ",", "num_blocks", ",", "stride", "in", "self", ".", "cfg", ":", "\n", "            ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "for", "stride", "in", "strides", ":", "\n", "                ", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "expansion", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.MobileNetV2.forward": [[69, 78], ["torch.relu", "torch.relu", "torch.relu", "mobilenetv2.MobileNetV2.layers", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "mobilenetv2.MobileNetV2.view", "mobilenetv2.MobileNetV2.linear", "mobilenetv2.MobileNetV2.bn1", "mobilenetv2.MobileNetV2.bn2", "mobilenetv2.MobileNetV2.size", "mobilenetv2.MobileNetV2.conv1", "mobilenetv2.MobileNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "# NOTE: change pooling kernel_size 7 -> 4 for CIFAR10", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.mobilenetv2.test": [[80, 85], ["mobilenetv2.MobileNetV2", "torch.randn", "torch.randn", "torch.randn", "MobileNetV2.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "MobileNetV2", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "2", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.SepConv.__init__": [[12, 19], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", ")", ":", "\n", "        ", "super", "(", "SepConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "\n", "kernel_size", ",", "stride", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", "bias", "=", "False", ",", "groups", "=", "in_planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.SepConv.forward": [[20, 22], ["pnasnet.SepConv.bn1", "pnasnet.SepConv.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.CellA.__init__": [[25, 32], ["torch.Module.__init__", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellA", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.CellA.forward": [[33, 39], ["pnasnet.CellA.sep_conv1", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellA.bn1", "pnasnet.CellA.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y2", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y2", ")", ")", "\n", "", "return", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.CellB.__init__": [[41, 55], ["torch.Module.__init__", "pnasnet.SepConv", "pnasnet.SepConv", "pnasnet.SepConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "CellB", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "# Left branch", "\n", "self", ".", "sep_conv1", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ")", "\n", "self", ".", "sep_conv2", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ")", "\n", "# Right branch", "\n", "self", ".", "sep_conv3", "=", "SepConv", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "# Reduce channels", "\n", "", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "2", "*", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.CellB.forward": [[56, 70], ["pnasnet.CellB.sep_conv1", "pnasnet.CellB.sep_conv2", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "pnasnet.CellB.sep_conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "pnasnet.CellB.bn1", "pnasnet.CellB.bn2", "pnasnet.CellB.conv1", "pnasnet.CellB.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Left branch", "\n", "        ", "y1", "=", "self", ".", "sep_conv1", "(", "x", ")", "\n", "y2", "=", "self", ".", "sep_conv2", "(", "x", ")", "\n", "# Right branch", "\n", "y3", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "stride", "=", "self", ".", "stride", ",", "padding", "=", "1", ")", "\n", "if", "self", ".", "stride", "==", "2", ":", "\n", "            ", "y3", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "y3", ")", ")", "\n", "", "y4", "=", "self", ".", "sep_conv3", "(", "x", ")", "\n", "# Concat & reduce channels", "\n", "b1", "=", "F", ".", "relu", "(", "y1", "+", "y2", ")", "\n", "b2", "=", "F", ".", "relu", "(", "y3", "+", "y4", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "b1", ",", "b2", "]", ",", "1", ")", "\n", "return", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.PNASNet.__init__": [[72, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "pnasnet.PNASNet._downsample", "pnasnet.PNASNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.PNASNet._downsample", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cell_type", ",", "num_cells", ",", "num_planes", ")", ":", "\n", "        ", "super", "(", "PNASNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "num_planes", "\n", "self", ".", "cell_type", "=", "cell_type", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_planes", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_downsample", "(", "num_planes", "*", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "2", ",", "num_cells", "=", "6", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_downsample", "(", "num_planes", "*", "4", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "num_planes", "*", "4", ",", "num_cells", "=", "6", ")", "\n", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", "*", "4", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.PNASNet._make_layer": [[88, 94], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "num_cells", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "num_cells", ")", ":", "\n", "            ", "layers", ".", "append", "(", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.PNASNet._downsample": [[95, 99], ["pnasnet.PNASNet.cell_type"], "methods", ["None"], ["", "def", "_downsample", "(", "self", ",", "planes", ")", ":", "\n", "        ", "layer", "=", "self", ".", "cell_type", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", "=", "2", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "return", "layer", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.PNASNet.forward": [[100, 110], ["torch.relu", "torch.relu", "torch.relu", "pnasnet.PNASNet.layer1", "pnasnet.PNASNet.layer2", "pnasnet.PNASNet.layer3", "pnasnet.PNASNet.layer4", "pnasnet.PNASNet.layer5", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "pnasnet.PNASNet.linear", "pnasnet.PNASNet.bn1", "pnasnet.PNASNet.view", "pnasnet.PNASNet.conv1", "pnasnet.PNASNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.PNASNetA": [[112, 114], ["pnasnet.PNASNet"], "function", ["None"], ["", "", "def", "PNASNetA", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellA", ",", "num_cells", "=", "6", ",", "num_planes", "=", "44", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.PNASNetB": [[115, 117], ["pnasnet.PNASNet"], "function", ["None"], ["", "def", "PNASNetB", "(", ")", ":", "\n", "    ", "return", "PNASNet", "(", "CellB", ",", "num_cells", "=", "6", ",", "num_planes", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.test": [[119, 124], ["pnasnet.PNASNetB", "torch.randn", "torch.randn", "torch.randn", "PNASNetB.", "print"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.pnasnet.PNASNetB"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PNASNetB", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.lenet.LeNet.__init__": [[6, 13], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "5", "*", "5", ",", "120", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.lenet.LeNet.forward": [[14, 24], ["torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "torch.relu", "torch.relu", "torch.max_pool2d", "torch.max_pool2d", "lenet.LeNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "lenet.LeNet.fc3", "lenet.LeNet.conv1", "lenet.LeNet.conv2", "lenet.LeNet.size", "lenet.LeNet.fc1", "lenet.LeNet.fc2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "max_pool2d", "(", "out", ",", "2", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "fc2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "fc3", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.dpn.Bottleneck.__init__": [[8, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "first_layer", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_planes", "=", "out_planes", "\n", "self", ".", "dense_depth", "=", "dense_depth", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "last_planes", ",", "in_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "32", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "first_layer", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "last_planes", ",", "out_planes", "+", "dense_depth", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "+", "dense_depth", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.dpn.Bottleneck.forward": [[27, 36], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn3", "dpn.Bottleneck.shortcut", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "dpn.Bottleneck.bn1", "dpn.Bottleneck.bn2", "dpn.Bottleneck.conv3", "dpn.Bottleneck.conv1", "dpn.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "x", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "d", "=", "self", ".", "out_planes", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", "+", "out", "[", ":", ",", ":", "d", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", ",", "out", "[", ":", ",", "d", ":", ",", ":", ",", ":", "]", "]", ",", "1", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.dpn.DPN.__init__": [[39, 52], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "dpn.DPN._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "DPN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "in_planes", ",", "out_planes", "=", "cfg", "[", "'in_planes'", "]", ",", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", ",", "dense_depth", "=", "cfg", "[", "'num_blocks'", "]", ",", "cfg", "[", "'dense_depth'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "last_planes", "=", "64", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "0", "]", ",", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "dense_depth", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "1", "]", ",", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "dense_depth", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "2", "]", ",", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "dense_depth", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "in_planes", "[", "3", "]", ",", "out_planes", "[", "3", "]", ",", "num_blocks", "[", "3", "]", ",", "dense_depth", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "3", "]", "+", "(", "num_blocks", "[", "3", "]", "+", "1", ")", "*", "dense_depth", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.dpn.DPN._make_layer": [[53, 60], ["enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "dpn.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "in_planes", ",", "out_planes", ",", "num_blocks", ",", "dense_depth", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", ",", "stride", "in", "enumerate", "(", "strides", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "last_planes", ",", "in_planes", ",", "out_planes", ",", "dense_depth", ",", "stride", ",", "i", "==", "0", ")", ")", "\n", "self", ".", "last_planes", "=", "out_planes", "+", "(", "i", "+", "2", ")", "*", "dense_depth", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.dpn.DPN.forward": [[61, 71], ["torch.relu", "torch.relu", "torch.relu", "dpn.DPN.layer1", "dpn.DPN.layer2", "dpn.DPN.layer3", "dpn.DPN.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "dpn.DPN.view", "dpn.DPN.linear", "dpn.DPN.bn1", "dpn.DPN.size", "dpn.DPN.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.dpn.DPN26": [[73, 81], ["dpn.DPN"], "function", ["None"], ["", "", "def", "DPN26", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "2", ",", "2", ",", "2", ",", "2", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.dpn.DPN92": [[82, 90], ["dpn.DPN"], "function", ["None"], ["", "def", "DPN92", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'in_planes'", ":", "(", "96", ",", "192", ",", "384", ",", "768", ")", ",", "\n", "'out_planes'", ":", "(", "256", ",", "512", ",", "1024", ",", "2048", ")", ",", "\n", "'num_blocks'", ":", "(", "3", ",", "4", ",", "20", ",", "3", ")", ",", "\n", "'dense_depth'", ":", "(", "16", ",", "32", ",", "24", ",", "128", ")", "\n", "}", "\n", "return", "DPN", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.dpn.test": [[92, 97], ["dpn.DPN92", "torch.randn", "torch.randn", "torch.randn", "DPN92.", "print"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.dpn.DPN92"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "DPN92", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenet.ShuffleBlock.__init__": [[11, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenet.ShuffleBlock.forward": [[15, 20], ["x.size", "x.view().permute().contiguous().view", "x.view().permute().contiguous", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "/", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenet.Bottleneck.__init__": [[23, 40], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleBlock", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "groups", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "mid_planes", "=", "out_planes", "/", "4", "\n", "g", "=", "1", "if", "in_planes", "==", "24", "else", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "g", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "shuffle1", "=", "ShuffleBlock", "(", "groups", "=", "g", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "mid_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "mid_planes", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "mid_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "==", "2", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenet.Bottleneck.forward": [[41, 49], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.shuffle1", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.bn3", "shufflenet.Bottleneck.shortcut", "shufflenet.Bottleneck.bn1", "shufflenet.Bottleneck.bn2", "shufflenet.Bottleneck.conv3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenet.Bottleneck.conv1", "shufflenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "shuffle1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "res", "=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "[", "out", ",", "res", "]", ",", "1", ")", ")", "if", "self", ".", "stride", "==", "2", "else", "F", ".", "relu", "(", "out", "+", "res", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenet.ShuffleNet.__init__": [[52, 65], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "shufflenet.ShuffleNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "ShuffleNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_planes", "=", "cfg", "[", "'out_planes'", "]", "\n", "num_blocks", "=", "cfg", "[", "'num_blocks'", "]", "\n", "groups", "=", "cfg", "[", "'groups'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_planes", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ",", "groups", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ",", "groups", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_planes", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ",", "groups", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_planes", "[", "2", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenet.ShuffleNet._make_layer": [[66, 74], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "shufflenet.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_planes", ",", "num_blocks", ",", "groups", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "2", "if", "i", "==", "0", "else", "1", "\n", "cat_planes", "=", "self", ".", "in_planes", "if", "i", "==", "0", "else", "0", "\n", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "in_planes", ",", "out_planes", "-", "cat_planes", ",", "stride", "=", "stride", ",", "groups", "=", "groups", ")", ")", "\n", "self", ".", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenet.ShuffleNet.forward": [[75, 84], ["torch.relu", "torch.relu", "torch.relu", "shufflenet.ShuffleNet.layer1", "shufflenet.ShuffleNet.layer2", "shufflenet.ShuffleNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenet.ShuffleNet.view", "shufflenet.ShuffleNet.linear", "shufflenet.ShuffleNet.bn1", "shufflenet.ShuffleNet.size", "shufflenet.ShuffleNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenet.ShuffleNetG2": [[86, 93], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "", "def", "ShuffleNetG2", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "200", ",", "400", ",", "800", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "2", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenet.ShuffleNetG3": [[94, 101], ["shufflenet.ShuffleNet"], "function", ["None"], ["", "def", "ShuffleNetG3", "(", ")", ":", "\n", "    ", "cfg", "=", "{", "\n", "'out_planes'", ":", "[", "240", ",", "480", ",", "960", "]", ",", "\n", "'num_blocks'", ":", "[", "4", ",", "8", ",", "4", "]", ",", "\n", "'groups'", ":", "3", "\n", "}", "\n", "return", "ShuffleNet", "(", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenet.test": [[103, 108], ["shufflenet.ShuffleNetG2", "torch.randn", "torch.randn", "torch.randn", "ShuffleNetG2.", "print"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenet.ShuffleNetG2"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetG2", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenetv2.ShuffleBlock.__init__": [[11, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "groups", "=", "2", ")", ":", "\n", "        ", "super", "(", "ShuffleBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "groups", "=", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenetv2.ShuffleBlock.forward": [[15, 20], ["x.size", "x.view().permute().reshape", "x.view().permute", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "'''Channel shuffle: [N,C,H,W] -> [N,g,C/g,H,W] -> [N,C/g,g,H,w] -> [N,C,H,W]'''", "\n", "N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "size", "(", ")", "\n", "g", "=", "self", ".", "groups", "\n", "return", "x", ".", "view", "(", "N", ",", "g", ",", "C", "/", "g", ",", "H", ",", "W", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ",", "4", ")", ".", "reshape", "(", "N", ",", "C", ",", "H", ",", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenetv2.SplitBlock.__init__": [[23, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ratio", ")", ":", "\n", "        ", "super", "(", "SplitBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenetv2.SplitBlock.forward": [[27, 30], ["int", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "c", "=", "int", "(", "x", ".", "size", "(", "1", ")", "*", "self", ".", "ratio", ")", "\n", "return", "x", "[", ":", ",", ":", "c", ",", ":", ",", ":", "]", ",", "x", "[", ":", ",", "c", ":", ",", ":", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenetv2.BasicBlock.__init__": [[33, 47], ["torch.Module.__init__", "shufflenetv2.SplitBlock", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "split_ratio", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "split", "=", "SplitBlock", "(", "split_ratio", ")", "\n", "in_channels", "=", "int", "(", "in_channels", "*", "split_ratio", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenetv2.BasicBlock.forward": [[48, 56], ["shufflenetv2.BasicBlock.split", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.BasicBlock.bn2", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.BasicBlock.shuffle", "shufflenetv2.BasicBlock.bn1", "shufflenetv2.BasicBlock.conv2", "shufflenetv2.BasicBlock.bn3", "shufflenetv2.BasicBlock.conv1", "shufflenetv2.BasicBlock.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", ",", "x2", "=", "self", ".", "split", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x2", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x1", ",", "out", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenetv2.DownBlock.__init__": [[59, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleBlock"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ")", ":", "\n", "        ", "super", "(", "DownBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_channels", "=", "out_channels", "//", "2", "\n", "# left", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "in_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "groups", "=", "in_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_channels", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "# right", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "groups", "=", "mid_channels", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "mid_channels", ",", "mid_channels", ",", "\n", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", "\n", "\n", "self", ".", "shuffle", "=", "ShuffleBlock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenetv2.DownBlock.forward": [[82, 94], ["shufflenetv2.DownBlock.bn1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shufflenetv2.DownBlock.bn4", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "shufflenetv2.DownBlock.shuffle", "shufflenetv2.DownBlock.conv1", "shufflenetv2.DownBlock.bn2", "shufflenetv2.DownBlock.bn3", "shufflenetv2.DownBlock.conv4", "shufflenetv2.DownBlock.bn5", "shufflenetv2.DownBlock.conv2", "shufflenetv2.DownBlock.conv3", "shufflenetv2.DownBlock.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# left", "\n", "        ", "out1", "=", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "out1", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out1", ")", ")", ")", "\n", "# right", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "x", ")", ")", ")", "\n", "out2", "=", "self", ".", "bn4", "(", "self", ".", "conv4", "(", "out2", ")", ")", "\n", "out2", "=", "F", ".", "relu", "(", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "out2", ")", ")", ")", "\n", "# concat", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out1", ",", "out2", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "shuffle", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenetv2.ShuffleNetV2.__init__": [[97, 113], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "shufflenetv2.ShuffleNetV2._make_layer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "net_size", ")", ":", "\n", "        ", "super", "(", "ShuffleNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "out_channels", "=", "configs", "[", "net_size", "]", "[", "'out_channels'", "]", "\n", "num_blocks", "=", "configs", "[", "net_size", "]", "[", "'num_blocks'", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "24", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "24", ")", "\n", "self", ".", "in_channels", "=", "24", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "0", "]", ",", "num_blocks", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "1", "]", ",", "num_blocks", "[", "1", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "out_channels", "[", "2", "]", ",", "num_blocks", "[", "2", "]", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_channels", "[", "2", "]", ",", "out_channels", "[", "3", "]", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", "[", "3", "]", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "out_channels", "[", "3", "]", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenetv2.ShuffleNetV2._make_layer": [[114, 120], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "shufflenetv2.DownBlock", "layers.append", "shufflenetv2.BasicBlock"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "out_channels", ",", "num_blocks", ")", ":", "\n", "        ", "layers", "=", "[", "DownBlock", "(", "self", ".", "in_channels", ",", "out_channels", ")", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "BasicBlock", "(", "out_channels", ")", ")", "\n", "self", ".", "in_channels", "=", "out_channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenetv2.ShuffleNetV2.forward": [[121, 132], ["torch.relu", "torch.relu", "torch.relu", "shufflenetv2.ShuffleNetV2.layer1", "shufflenetv2.ShuffleNetV2.layer2", "shufflenetv2.ShuffleNetV2.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "shufflenetv2.ShuffleNetV2.view", "shufflenetv2.ShuffleNetV2.linear", "shufflenetv2.ShuffleNetV2.bn1", "shufflenetv2.ShuffleNetV2.bn2", "shufflenetv2.ShuffleNetV2.size", "shufflenetv2.ShuffleNetV2.conv1", "shufflenetv2.ShuffleNetV2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "# out = F.max_pool2d(out, 3, stride=2, padding=1)", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.shufflenetv2.test": [[155, 160], ["shufflenetv2.ShuffleNetV2", "torch.randn", "torch.randn", "torch.randn", "ShuffleNetV2.", "print"], "function", ["None"], ["def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ShuffleNetV2", "(", "net_size", "=", "0.5", ")", "\n", "x", "=", "torch", ".", "randn", "(", "3", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.BasicBlock.__init__": [[17, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.BasicBlock.forward": [[31, 37], ["torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.Bottleneck.__init__": [[42, 56], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.Bottleneck.forward": [[58, 65], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet.__init__": [[68, 80], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "ae", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "self", ".", "ae", "=", "ae", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet._make_layer": [[81, 88], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet.forward": [[89, 101], ["torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out_tmp", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out_tmp", ")", "\n", "if", "self", ".", "ae", ":", "\n", "            ", "return", "out", ",", "out_tmp", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet.classify": [[102, 106], ["feature.view", "resnet.ResNet.linear", "feature.size"], "methods", ["None"], ["", "def", "classify", "(", "self", ",", "feature", ")", ":", "\n", "        ", "out_tmp", "=", "feature", ".", "view", "(", "feature", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out_tmp", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet18": [[108, 110], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet18", "(", "ae", "=", "False", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "ae", "=", "ae", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet34": [[111, 113], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet34", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet50": [[114, 116], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet50", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet101": [[117, 119], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet101", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet152": [[120, 122], ["resnet.ResNet"], "function", ["None"], ["", "def", "ResNet152", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.test": [[124, 128], ["resnet.ResNet18", "ResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnet.ResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "ResNet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.senet.BasicBlock.__init__": [[11, 28], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "# Use nn.Conv2d instead of nn.Linear", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.senet.BasicBlock.forward": [[29, 43], ["torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.BasicBlock.bn1", "senet.BasicBlock.conv2", "torch.relu.size", "senet.BasicBlock.fc1", "senet.BasicBlock.fc2", "senet.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "# New broadcasting feature from v0.2!", "\n", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.senet.PreActBlock.__init__": [[46, 61], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n", "\n", "# SE layers", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "//", "16", ",", "kernel_size", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv2d", "(", "planes", "//", "16", ",", "planes", ",", "kernel_size", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.senet.PreActBlock.forward": [[62, 77], ["torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.conv1", "senet.PreActBlock.conv2", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "senet.PreActBlock.bn1", "hasattr", "senet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "senet.PreActBlock.size", "senet.PreActBlock.fc1", "senet.PreActBlock.fc2", "senet.PreActBlock.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "\n", "# Squeeze", "\n", "w", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", "2", ")", ")", "\n", "w", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "w", ")", ")", "\n", "w", "=", "F", ".", "sigmoid", "(", "self", ".", "fc2", "(", "w", ")", ")", "\n", "# Excitation", "\n", "out", "=", "out", "*", "w", "\n", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.senet.SENet.__init__": [[80, 91], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "senet.SENet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "SENet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.senet.SENet._make_layer": [[92, 99], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.senet.SENet.forward": [[100, 110], ["torch.relu", "torch.relu", "torch.relu", "senet.SENet.layer1", "senet.SENet.layer2", "senet.SENet.layer3", "senet.SENet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "senet.SENet.view", "senet.SENet.linear", "senet.SENet.bn1", "senet.SENet.size", "senet.SENet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.senet.SENet18": [[112, 114], ["senet.SENet"], "function", ["None"], ["", "", "def", "SENet18", "(", ")", ":", "\n", "    ", "return", "SENet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.senet.test": [[116, 120], ["senet.SENet18", "SENet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.senet.SENet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "SENet18", "(", ")", "\n", "y", "=", "net", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.Bottleneck.__init__": [[10, 16], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "growth_rate", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "4", "*", "growth_rate", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "4", "*", "growth_rate", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "4", "*", "growth_rate", ",", "growth_rate", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.Bottleneck.forward": [[17, 22], ["densenet.Bottleneck.conv1", "densenet.Bottleneck.conv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "densenet.Bottleneck.bn1", "densenet.Bottleneck.bn2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out", ",", "x", "]", ",", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.Transition.__init__": [[25, 29], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ")", ":", "\n", "        ", "super", "(", "Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.Transition.forward": [[30, 34], ["densenet.Transition.conv", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.relu", "torch.relu", "torch.relu", "densenet.Transition.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.DenseNet.__init__": [[37, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "int", "densenet.Transition", "densenet.DenseNet._make_dense_layers", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "math.floor", "math.floor", "math.floor"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.DenseNet._make_dense_layers", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.DenseNet._make_dense_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "nblocks", ",", "growth_rate", "=", "12", ",", "reduction", "=", "0.5", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "growth_rate", "=", "growth_rate", "\n", "\n", "num_planes", "=", "2", "*", "growth_rate", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "num_planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "dense1", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "0", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "0", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans1", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense2", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "1", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "1", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans2", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense3", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "2", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "2", "]", "*", "growth_rate", "\n", "out_planes", "=", "int", "(", "math", ".", "floor", "(", "num_planes", "*", "reduction", ")", ")", "\n", "self", ".", "trans3", "=", "Transition", "(", "num_planes", ",", "out_planes", ")", "\n", "num_planes", "=", "out_planes", "\n", "\n", "self", ".", "dense4", "=", "self", ".", "_make_dense_layers", "(", "block", ",", "num_planes", ",", "nblocks", "[", "3", "]", ")", "\n", "num_planes", "+=", "nblocks", "[", "3", "]", "*", "growth_rate", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_planes", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_planes", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.DenseNet._make_dense_layers": [[68, 74], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_dense_layers", "(", "self", ",", "block", ",", "in_planes", ",", "nblock", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nblock", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "in_planes", ",", "self", ".", "growth_rate", ")", ")", "\n", "in_planes", "+=", "self", ".", "growth_rate", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.DenseNet.forward": [[75, 85], ["densenet.DenseNet.conv1", "densenet.DenseNet.trans1", "densenet.DenseNet.trans2", "densenet.DenseNet.trans3", "densenet.DenseNet.dense4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "densenet.DenseNet.view", "densenet.DenseNet.linear", "densenet.DenseNet.dense1", "densenet.DenseNet.dense2", "densenet.DenseNet.dense3", "torch.relu", "torch.relu", "torch.relu", "densenet.DenseNet.size", "densenet.DenseNet.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "trans1", "(", "self", ".", "dense1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans2", "(", "self", ".", "dense2", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "trans3", "(", "self", ".", "dense3", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "dense4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "F", ".", "relu", "(", "self", ".", "bn", "(", "out", ")", ")", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.DenseNet121": [[86, 88], ["densenet.DenseNet"], "function", ["None"], ["", "", "def", "DenseNet121", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.DenseNet169": [[89, 91], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet169", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "32", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.DenseNet201": [[92, 94], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet201", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "48", ",", "32", "]", ",", "growth_rate", "=", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.DenseNet161": [[95, 97], ["densenet.DenseNet"], "function", ["None"], ["", "def", "DenseNet161", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "36", ",", "24", "]", ",", "growth_rate", "=", "48", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.densenet_cifar": [[98, 100], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet_cifar", "(", ")", ":", "\n", "    ", "return", "DenseNet", "(", "Bottleneck", ",", "[", "6", ",", "12", ",", "24", ",", "16", "]", ",", "growth_rate", "=", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.test": [[101, 106], ["densenet.densenet_cifar", "torch.randn", "torch.randn", "torch.randn", "densenet_cifar.", "print"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.densenet.densenet_cifar"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "densenet_cifar", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnext.Block.__init__": [[14, 29], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "group_width", "=", "cardinality", "*", "bottleneck_width", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "group_width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "cardinality", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "group_width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "group_width", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "group_width", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "group_width", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "group_width", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnext.Block.forward": [[31, 38], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn3", "resnext.Block.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnext.Block.bn1", "resnext.Block.bn2", "resnext.Block.conv3", "resnext.Block.conv1", "resnext.Block.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnext.ResNeXt.__init__": [[41, 54], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "num_blocks", ",", "cardinality", ",", "bottleneck_width", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "cardinality", "=", "cardinality", "\n", "self", ".", "bottleneck_width", "=", "bottleneck_width", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "# self.layer4 = self._make_layer(num_blocks[3], 2)", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "cardinality", "*", "bottleneck_width", "*", "8", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnext.ResNeXt._make_layer": [[55, 64], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "resnext.Block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "Block", "(", "self", ".", "in_planes", ",", "self", ".", "cardinality", ",", "self", ".", "bottleneck_width", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "Block", ".", "expansion", "*", "self", ".", "cardinality", "*", "self", ".", "bottleneck_width", "\n", "# Increase bottleneck_width by 2 after each stage.", "\n", "", "self", ".", "bottleneck_width", "*=", "2", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnext.ResNeXt.forward": [[65, 75], ["torch.relu", "torch.relu", "torch.relu", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnext.ResNeXt.view", "resnext.ResNeXt.linear", "resnext.ResNeXt.bn1", "resnext.ResNeXt.size", "resnext.ResNeXt.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "# out = self.layer4(out)", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnext.ResNeXt29_2x64d": [[77, 79], ["resnext.ResNeXt"], "function", ["None"], ["", "", "def", "ResNeXt29_2x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "2", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnext.ResNeXt29_4x64d": [[80, 82], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_4x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "4", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnext.ResNeXt29_8x64d": [[83, 85], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_8x64d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "8", ",", "bottleneck_width", "=", "64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnext.ResNeXt29_32x4d": [[86, 88], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "ResNeXt29_32x4d", "(", ")", ":", "\n", "    ", "return", "ResNeXt", "(", "num_blocks", "=", "[", "3", ",", "3", ",", "3", "]", ",", "cardinality", "=", "32", ",", "bottleneck_width", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnext.test_resnext": [[89, 94], ["resnext.ResNeXt29_2x64d", "torch.randn", "torch.randn", "torch.randn", "ResNeXt29_2x64d.", "print", "net.size"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.resnext.ResNeXt29_2x64d"], ["", "def", "test_resnext", "(", ")", ":", "\n", "    ", "net", "=", "ResNeXt29_2x64d", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.googlenet.Inception.__init__": [[8, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "n1x1", ",", "n3x3red", ",", "n3x3", ",", "n5x5red", ",", "n5x5", ",", "pool_planes", ")", ":", "\n", "        ", "super", "(", "Inception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# 1x1 conv branch", "\n", "self", ".", "b1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n1x1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n1x1", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 3x3 conv branch", "\n", "self", ".", "b2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n3x3red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n3x3red", ",", "n3x3", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n3x3", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 1x1 conv -> 5x5 conv branch", "\n", "self", ".", "b3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "n5x5red", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5red", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5red", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "n5x5", ",", "n5x5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "n5x5", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "# 3x3 pool -> 1x1 conv branch", "\n", "self", ".", "b4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "pool_planes", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "pool_planes", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.googlenet.Inception.forward": [[48, 54], ["googlenet.Inception.b1", "googlenet.Inception.b2", "googlenet.Inception.b3", "googlenet.Inception.b4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y1", "=", "self", ".", "b1", "(", "x", ")", "\n", "y2", "=", "self", ".", "b2", "(", "x", ")", "\n", "y3", "=", "self", ".", "b3", "(", "x", ")", "\n", "y4", "=", "self", ".", "b4", "(", "x", ")", "\n", "return", "torch", ".", "cat", "(", "[", "y1", ",", "y2", ",", "y3", ",", "y4", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.googlenet.GoogLeNet.__init__": [[57, 81], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "googlenet.Inception", "googlenet.Inception", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "googlenet.Inception", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GoogLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pre_layers", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "192", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "192", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "a3", "=", "Inception", "(", "192", ",", "64", ",", "96", ",", "128", ",", "16", ",", "32", ",", "32", ")", "\n", "self", ".", "b3", "=", "Inception", "(", "256", ",", "128", ",", "128", ",", "192", ",", "32", ",", "96", ",", "64", ")", "\n", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "a4", "=", "Inception", "(", "480", ",", "192", ",", "96", ",", "208", ",", "16", ",", "48", ",", "64", ")", "\n", "self", ".", "b4", "=", "Inception", "(", "512", ",", "160", ",", "112", ",", "224", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "c4", "=", "Inception", "(", "512", ",", "128", ",", "128", ",", "256", ",", "24", ",", "64", ",", "64", ")", "\n", "self", ".", "d4", "=", "Inception", "(", "512", ",", "112", ",", "144", ",", "288", ",", "32", ",", "64", ",", "64", ")", "\n", "self", ".", "e4", "=", "Inception", "(", "528", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "a5", "=", "Inception", "(", "832", ",", "256", ",", "160", ",", "320", ",", "32", ",", "128", ",", "128", ")", "\n", "self", ".", "b5", "=", "Inception", "(", "832", ",", "384", ",", "192", ",", "384", ",", "48", ",", "128", ",", "128", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.googlenet.GoogLeNet.forward": [[82, 99], ["googlenet.GoogLeNet.pre_layers", "googlenet.GoogLeNet.a3", "googlenet.GoogLeNet.b3", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a4", "googlenet.GoogLeNet.b4", "googlenet.GoogLeNet.c4", "googlenet.GoogLeNet.d4", "googlenet.GoogLeNet.e4", "googlenet.GoogLeNet.maxpool", "googlenet.GoogLeNet.a5", "googlenet.GoogLeNet.b5", "googlenet.GoogLeNet.avgpool", "googlenet.GoogLeNet.view", "googlenet.GoogLeNet.linear", "googlenet.GoogLeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "pre_layers", "(", "x", ")", "\n", "out", "=", "self", ".", "a3", "(", "out", ")", "\n", "out", "=", "self", ".", "b3", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a4", "(", "out", ")", "\n", "out", "=", "self", ".", "b4", "(", "out", ")", "\n", "out", "=", "self", ".", "c4", "(", "out", ")", "\n", "out", "=", "self", ".", "d4", "(", "out", ")", "\n", "out", "=", "self", ".", "e4", "(", "out", ")", "\n", "out", "=", "self", ".", "maxpool", "(", "out", ")", "\n", "out", "=", "self", ".", "a5", "(", "out", ")", "\n", "out", "=", "self", ".", "b5", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.googlenet.test": [[101, 106], ["googlenet.GoogLeNet", "torch.randn", "torch.randn", "torch.randn", "GoogLeNet.", "print", "net.size"], "function", ["None"], ["", "", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "GoogLeNet", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "y", "=", "net", "(", "x", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActBlock.__init__": [[16, 26], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActBlock.forward": [[28, 35], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.conv1", "preact_resnet.PreActBlock.conv2", "preact_resnet.PreActBlock.bn1", "hasattr", "preact_resnet.PreActBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBlock.bn2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActBottleneck.__init__": [[41, 53], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "PreActBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActBottleneck.forward": [[55, 63], ["torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.conv1", "preact_resnet.PreActBottleneck.conv2", "preact_resnet.PreActBottleneck.conv3", "preact_resnet.PreActBottleneck.bn1", "hasattr", "preact_resnet.PreActBottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "preact_resnet.PreActBottleneck.bn2", "preact_resnet.PreActBottleneck.bn3"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "if", "hasattr", "(", "self", ",", "'shortcut'", ")", "else", "x", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "conv3", "(", "F", ".", "relu", "(", "self", ".", "bn3", "(", "out", ")", ")", ")", "\n", "out", "+=", "shortcut", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__": [[66, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "preact_resnet.PreActResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.__init__", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer", "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "PreActResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet._make_layer": [[77, 84], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet.forward": [[85, 95], ["preact_resnet.PreActResNet.conv1", "preact_resnet.PreActResNet.layer1", "preact_resnet.PreActResNet.layer2", "preact_resnet.PreActResNet.layer3", "preact_resnet.PreActResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "preact_resnet.PreActResNet.view", "preact_resnet.PreActResNet.linear", "preact_resnet.PreActResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet18": [[97, 99], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "", "def", "PreActResNet18", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet34": [[100, 102], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet34", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet50": [[103, 105], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet50", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet101": [[106, 108], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet101", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet152": [[109, 111], ["preact_resnet.PreActResNet"], "function", ["None"], ["", "def", "PreActResNet152", "(", ")", ":", "\n", "    ", "return", "PreActResNet", "(", "PreActBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.test": [[113, 117], ["preact_resnet.PreActResNet18", "PreActResNet18.", "print", "torch.randn", "torch.randn", "torch.randn", "net.size"], "function", ["home.repos.pwc.inspect_result.zhouxiaowei1120_ladder.models.preact_resnet.PreActResNet18"], ["", "def", "test", "(", ")", ":", "\n", "    ", "net", "=", "PreActResNet18", "(", ")", "\n", "y", "=", "net", "(", "(", "torch", ".", "randn", "(", "1", ",", "3", ",", "32", ",", "32", ")", ")", ")", "\n", "print", "(", "y", ".", "size", "(", ")", ")", "\n", "\n"]]}