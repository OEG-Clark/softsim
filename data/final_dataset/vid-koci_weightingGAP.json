{"home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.compute_weights.compare": [[67, 73], ["None"], "function", ["None"], ["def", "compare", "(", "span_a", ",", "span_b", ")", ":", "\n", "    ", "if", "span_a", "[", "0", "]", ">", "span_b", "[", "1", "]", ":", "\n", "        ", "return", "False", "\n", "", "if", "span_a", "[", "1", "]", "<", "span_b", "[", "0", "]", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.data_reader.InputExample.__init__": [[8, 22], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "guid", ",", "text_a", ",", "candidate_a", ",", "candidate_b", ",", "ex_true", "=", "True", ")", ":", "\n", "        ", "\"\"\"Constructs a InputExample.\n\n        Args:\n            guid: Unique id for the example.\n            text_a: string. Sentence analysed with pronoun replaced for _\n            candidate_a: string, correct candidate\n            candidate_b: string, incorrect candidate\n        \"\"\"", "\n", "self", ".", "guid", "=", "guid", "\n", "self", ".", "text_a", "=", "text_a", "\n", "self", ".", "candidate_a", "=", "candidate_a", "\n", "self", ".", "candidate_b", "=", "candidate_b", "#only used for train", "\n", "self", ".", "ex_true", "=", "ex_true", "\n", "#ex_true only matters for testing and has following string values:", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.data_reader.DataProcessor.gap_train": [[32, 48], ["tqdm.tqdm.tqdm", "line.strip().split", "int", "list", "tokens[].lower", "examples.append", "tokens[].lower", "examples.append", "open", "line.strip", "data_reader.InputExample", "data_reader.InputExample", "len"], "methods", ["None"], ["def", "gap_train", "(", "self", ",", "source", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "line", "in", "tqdm", "(", "list", "(", "open", "(", "source", ",", "'r'", ")", ")", "[", "1", ":", "]", ",", "desc", "=", "\"Reading and pre-processing data\"", ")", ":", "\n", "            ", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "guid", "=", "tokens", "[", "0", "]", "\n", "sentence", "=", "tokens", "[", "1", "]", "\n", "pronoun", "=", "tokens", "[", "2", "]", "\n", "pronoun_offset", "=", "int", "(", "tokens", "[", "3", "]", ")", "\n", "sentence", "=", "sentence", "[", ":", "pronoun_offset", "]", "+", "\"_\"", "+", "sentence", "[", "pronoun_offset", "+", "len", "(", "pronoun", ")", ":", "]", "\n", "candidate_a", "=", "tokens", "[", "4", "]", "\n", "candidate_b", "=", "tokens", "[", "7", "]", "\n", "if", "tokens", "[", "6", "]", ".", "lower", "(", ")", "==", "\"true\"", ":", "\n", "                ", "examples", ".", "append", "(", "InputExample", "(", "guid", ",", "sentence", ",", "candidate_a", ",", "candidate_b", ")", ")", "\n", "", "if", "tokens", "[", "9", "]", ".", "lower", "(", ")", "==", "\"true\"", ":", "\n", "                ", "examples", ".", "append", "(", "InputExample", "(", "guid", ",", "sentence", ",", "candidate_b", ",", "candidate_a", ")", ")", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.data_reader.DataProcessor.gap_test": [[49, 79], ["tqdm.tqdm.tqdm", "line.strip().split", "int", "gap_utils.get_candidates", "list", "pronoun.casefold", "range", "candidate_a.casefold", "examples.append", "list", "examples.append", "candidate_b.casefold", "examples.append", "list", "examples.append", "open", "line.strip", "len", "cand.casefold", "data_reader.InputExample", "filter", "examples.append", "data_reader.InputExample", "cand.casefold", "data_reader.InputExample", "filter", "examples.append", "data_reader.InputExample", "data_reader.InputExample", "data_reader.InputExample", "len", "tokens[].lower", "tokens[].lower", "a.casefold", "candidate_a.casefold", "tokens[].lower", "a.casefold", "candidate_b.casefold", "tokens[].lower"], "methods", ["None"], ["", "def", "gap_test", "(", "self", ",", "source", ")", ":", "\n", "        ", "examples", "=", "[", "]", "\n", "for", "line", "in", "tqdm", "(", "list", "(", "open", "(", "source", ",", "'r'", ")", ")", "[", "1", ":", "]", ",", "desc", "=", "\"Reading and pre-processing data\"", ")", ":", "\n", "            ", "tokens", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "guid", "=", "tokens", "[", "0", "]", "\n", "sentence", "=", "tokens", "[", "1", "]", "\n", "pronoun", "=", "tokens", "[", "2", "]", "\n", "pronoun_offset", "=", "int", "(", "tokens", "[", "3", "]", ")", "\n", "sentence", "=", "sentence", "[", ":", "pronoun_offset", "]", "+", "\"_\"", "+", "sentence", "[", "pronoun_offset", "+", "len", "(", "pronoun", ")", ":", "]", "\n", "candidate_a", "=", "tokens", "[", "4", "]", "\n", "candidate_b", "=", "tokens", "[", "7", "]", "\n", "other_candidates", "=", "gap_utils", ".", "get_candidates", "(", "sentence", ")", "\n", "if", "pronoun", ".", "casefold", "(", ")", "==", "\"his\"", ":", "#due to the abiguity of English language, the same cannot be done for \"her\"", "\n", "                ", "candidate_a", "=", "candidate_a", "+", "\"\\'s\"", "\n", "candidate_b", "=", "candidate_b", "+", "\"\\'s\"", "\n", "for", "i", "in", "range", "(", "len", "(", "other_candidates", ")", ")", ":", "\n", "                    ", "other_candidates", "[", "i", "]", "=", "other_candidates", "[", "i", "]", "+", "\"\\'s\"", "\n", "", "", "if", "candidate_a", ".", "casefold", "(", ")", "in", "[", "cand", ".", "casefold", "(", ")", "for", "cand", "in", "other_candidates", "]", ":", "#candidate_a was detected by NER", "\n", "                ", "examples", ".", "append", "(", "InputExample", "(", "guid", "+", "\"A\"", ",", "sentence", ",", "candidate_a", ",", "None", ",", "ex_true", "=", "tokens", "[", "6", "]", ".", "lower", "(", ")", ")", ")", "\n", "for", "other", "in", "list", "(", "filter", "(", "lambda", "a", ":", "a", ".", "casefold", "(", ")", "!=", "candidate_a", ".", "casefold", "(", ")", ",", "other_candidates", ")", ")", ":", "\n", "                    ", "examples", ".", "append", "(", "InputExample", "(", "guid", "+", "\"A\"", ",", "sentence", ",", "other", ",", "None", ",", "ex_true", "=", "\"other\"", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "examples", ".", "append", "(", "InputExample", "(", "guid", "+", "\"A\"", ",", "sentence", ",", "candidate_a", ",", "None", ",", "ex_true", "=", "\"err_\"", "+", "tokens", "[", "6", "]", ".", "lower", "(", ")", ")", ")", "\n", "", "if", "candidate_b", ".", "casefold", "(", ")", "in", "[", "cand", ".", "casefold", "(", ")", "for", "cand", "in", "other_candidates", "]", ":", "\n", "                ", "examples", ".", "append", "(", "InputExample", "(", "guid", "+", "\"B\"", ",", "sentence", ",", "candidate_b", ",", "None", ",", "ex_true", "=", "tokens", "[", "9", "]", ".", "lower", "(", ")", ")", ")", "\n", "for", "other", "in", "list", "(", "filter", "(", "lambda", "a", ":", "a", ".", "casefold", "(", ")", "!=", "candidate_b", ".", "casefold", "(", ")", ",", "other_candidates", ")", ")", ":", "\n", "                    ", "examples", ".", "append", "(", "InputExample", "(", "guid", "+", "\"B\"", ",", "sentence", ",", "other", ",", "None", ",", "ex_true", "=", "\"other\"", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "examples", ".", "append", "(", "InputExample", "(", "guid", "+", "\"B\"", ",", "sentence", ",", "candidate_b", ",", "None", ",", "ex_true", "=", "\"err_\"", "+", "tokens", "[", "9", "]", ".", "lower", "(", ")", ")", ")", "\n", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.data_reader.DataProcessor.get_examples": [[81, 95], ["os.path.join", "data_reader.DataProcessor.gap_train", "data_reader.DataProcessor.gap_test", "print"], "methods", ["home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.data_reader.DataProcessor.gap_train", "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.data_reader.DataProcessor.gap_test"], ["", "def", "get_examples", "(", "self", ",", "data_dir", ",", "set_name", ")", ":", "#works for differently for train!", "\n", "        ", "\"\"\"See base class.\"\"\"", "\n", "file_names", "=", "{", "\n", "\"gap-train\"", ":", "\"gap-development.tsv\"", ",", "\n", "\"gap-dev\"", ":", "\"gap-validation.tsv\"", ",", "\n", "\"gap-test\"", ":", "\"gap-test.tsv\"", ",", "\n", "}", "\n", "source", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "file_names", "[", "set_name", "]", ")", "\n", "if", "set_name", "==", "\"gap-train\"", ":", "\n", "            ", "return", "self", ".", "gap_train", "(", "source", ")", "\n", "", "elif", "set_name", "in", "[", "\"gap-dev\"", ",", "\"gap-test\"", "]", ":", "\n", "            ", "return", "self", ".", "gap_test", "(", "source", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Unknown set_name: \"", ",", "set_name", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.Annotation.__init__": [[46, 50], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "gender", "=", "None", "\n", "self", ".", "name_a_coref", "=", "None", "\n", "self", ".", "name_b_coref", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.Scores.__init__": [[62, 69], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "true_positives", "=", "0", "\n", "self", ".", "false_positives", "=", "0", "\n", "self", ".", "true_negatives", "=", "0", "\n", "self", ".", "false_negatives", "=", "0", "\n", "self", ".", "weighted_correct", "=", "0", "\n", "self", ".", "sample_cnt", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.Scores.weighted_accuracy": [[70, 77], ["None"], "methods", ["None"], ["", "def", "weighted_accuracy", "(", "self", ")", ":", "\n", "        ", "\"\"\" Calculates accuracy based on the observed scores. To be used for bias measure only.\n\n        Returns: \n            float the weighted accuracy\n        \"\"\"", "\n", "return", "self", ".", "weighted_correct", "/", "self", ".", "sample_cnt", "\n", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.Scores.recall": [[79, 88], ["None"], "methods", ["None"], ["", "def", "recall", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculates recall based on the observed scores.\n\n        Returns:\n            float, the recall.\n        \"\"\"", "\n", "numerator", "=", "self", ".", "true_positives", "\n", "denominator", "=", "self", ".", "true_positives", "+", "self", ".", "false_negatives", "\n", "return", "100.0", "*", "numerator", "/", "denominator", "if", "denominator", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.Scores.precision": [[89, 98], ["None"], "methods", ["None"], ["", "def", "precision", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculates precision based on the observed scores.\n\n        Returns:\n            float, the precision.\n        \"\"\"", "\n", "numerator", "=", "self", ".", "true_positives", "\n", "denominator", "=", "self", ".", "true_positives", "+", "self", ".", "false_positives", "\n", "return", "100.0", "*", "numerator", "/", "denominator", "if", "denominator", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.Scores.f1": [[99, 111], ["gap_scorer.Scores.recall", "gap_scorer.Scores.precision"], "methods", ["home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.Scores.recall", "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.Scores.precision"], ["", "def", "f1", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculates F1 based on the observed scores.\n\n        Returns:\n            float, the F1 score.\n        \"\"\"", "\n", "recall", "=", "self", ".", "recall", "(", ")", "\n", "precision", "=", "self", ".", "precision", "(", ")", "\n", "\n", "numerator", "=", "2", "*", "precision", "*", "recall", "\n", "denominator", "=", "precision", "+", "recall", "\n", "return", "numerator", "/", "denominator", "if", "denominator", "else", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.read_annotations": [[113, 161], ["collections.defaultdict", "open", "csv.DictReader", "value.lower", "next", "gap_scorer.read_annotations.is_true"], "function", ["None"], ["", "", "def", "read_annotations", "(", "filename", ",", "is_gold", ",", "id_list", "=", "None", ")", ":", "\n", "    ", "\"\"\"Reads coreference annotations for the examples in the given file.\n\n    Args:\n        filename: Path to .tsv file to read.\n        is_gold: Whether or not we are reading the gold annotations.\n\n    Returns:\n        A dict mapping example ID strings to their Annotation representation. If\n        reading gold, 'Pronoun' field is used to determine gender.\n    \"\"\"", "\n", "\n", "def", "is_true", "(", "value", ")", ":", "\n", "        ", "if", "value", ".", "lower", "(", ")", "==", "'true'", ":", "\n", "            ", "return", "True", "\n", "", "elif", "value", ".", "lower", "(", ")", "==", "'false'", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Unexpected label!'", ",", "value", ")", "\n", "return", "None", "\n", "\n", "", "", "fieldnames", "=", "GOLD_FIELDNAMES", "if", "is_gold", "else", "SYSTEM_FIELDNAMES", "\n", "\n", "annotations", "=", "defaultdict", "(", "Annotation", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "f", ",", "fieldnames", "=", "fieldnames", ",", "delimiter", "=", "'\\t'", ")", "\n", "\n", "# Skip the header line in the gold data", "\n", "if", "is_gold", ":", "\n", "            ", "next", "(", "reader", ",", "None", ")", "\n", "\n", "", "for", "row", "in", "reader", ":", "\n", "            ", "example_id", "=", "row", "[", "'ID'", "]", "\n", "#if there is id_list, only use samples in the id_list", "\n", "if", "not", "id_list", "is", "None", ":", "\n", "                ", "if", "example_id", "in", "id_list", ":", "\n", "                    ", "continue", "\n", "", "", "if", "example_id", "in", "annotations", ":", "\n", "                ", "print", "(", "'Multiple annotations for'", ",", "example_id", ")", "\n", "continue", "\n", "\n", "", "annotations", "[", "example_id", "]", ".", "name_a_coref", "=", "is_true", "(", "row", "[", "'A-coref'", "]", ")", "\n", "annotations", "[", "example_id", "]", ".", "name_b_coref", "=", "is_true", "(", "row", "[", "'B-coref'", "]", ")", "\n", "if", "is_gold", ":", "\n", "                ", "gender", "=", "PRONOUNS", ".", "get", "(", "row", "[", "'Pronoun'", "]", ".", "lower", "(", ")", ",", "Gender", ".", "UNKNOWN", ")", "\n", "assert", "gender", "!=", "Gender", ".", "UNKNOWN", ",", "row", "\n", "annotations", "[", "example_id", "]", ".", "gender", "=", "gender", "\n", "", "", "", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.calculate_scores": [[163, 206], ["json.load", "gold_annotations.items", "open", "gap_scorer.Scores", "print"], "function", ["None"], ["", "def", "calculate_scores", "(", "gold_annotations", ",", "system_annotations", ",", "weights_path", ")", ":", "\n", "    ", "\"\"\"Score the system annotations against gold.\n\n    Args:\n        gold_annotations: dict from example ID to its gold Annotation.\n        system_annotations: dict from example ID to its system Annotation.\n\n    Returns:\n        A dict from gender to a Scores object for that gender. None is used to\n            denote no specific gender, i.e. overall scores.\n    \"\"\"", "\n", "scores", "=", "{", "}", "\n", "weights", "=", "json", ".", "load", "(", "open", "(", "weights_path", ",", "'r'", ")", ")", "\n", "for", "example_id", ",", "gold_annotation", "in", "gold_annotations", ".", "items", "(", ")", ":", "\n", "        ", "system_annotation", "=", "system_annotations", "[", "example_id", "]", "\n", "\n", "name_a_annotations", "=", "[", "\n", "gold_annotation", ".", "name_a_coref", ",", "system_annotation", ".", "name_a_coref", "\n", "]", "\n", "name_b_annotations", "=", "[", "\n", "gold_annotation", ".", "name_b_coref", ",", "system_annotation", ".", "name_b_coref", "\n", "]", "\n", "for", "gender", "in", "[", "None", ",", "gold_annotation", ".", "gender", "]", ":", "\n", "            ", "if", "gender", "not", "in", "scores", ":", "\n", "                ", "scores", "[", "gender", "]", "=", "Scores", "(", ")", "\n", "", "scores", "[", "gender", "]", ".", "sample_cnt", "+=", "2", "\n", "if", "name_a_annotations", "[", "0", "]", "==", "name_a_annotations", "[", "1", "]", ":", "\n", "                ", "scores", "[", "gender", "]", ".", "weighted_correct", "+=", "weights", "[", "example_id", "+", "\"a\"", "]", "\n", "", "if", "name_b_annotations", "[", "0", "]", "==", "name_b_annotations", "[", "1", "]", ":", "\n", "                ", "scores", "[", "gender", "]", ".", "weighted_correct", "+=", "weights", "[", "example_id", "+", "\"b\"", "]", "\n", "", "for", "(", "gold", ",", "system", ")", "in", "[", "name_a_annotations", ",", "name_b_annotations", "]", ":", "\n", "                ", "if", "system", "is", "None", ":", "\n", "                    ", "print", "(", "'Missing output for'", ",", "example_id", ")", "\n", "scores", "[", "gender", "]", ".", "false_negatives", "+=", "1", "\n", "", "elif", "gold", "and", "system", ":", "\n", "                    ", "scores", "[", "gender", "]", ".", "true_positives", "+=", "1", "\n", "", "elif", "not", "gold", "and", "system", ":", "\n", "                    ", "scores", "[", "gender", "]", ".", "false_positives", "+=", "1", "\n", "", "elif", "not", "gold", "and", "not", "system", ":", "\n", "                    ", "scores", "[", "gender", "]", ".", "true_negatives", "+=", "1", "\n", "", "elif", "gold", "and", "not", "system", ":", "\n", "                    ", "scores", "[", "gender", "]", ".", "false_negatives", "+=", "1", "\n", "", "", "", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.make_scorecard": [[208, 252], ["scorecard.append", "scorecard.append", "scores.get", "scores.get.recall", "scores.get.precision", "scores.get.f1", "scores.get.weighted_accuracy", "scorecard.append", "scorecard.append", "scorecard.append", "gap_scorer.Scores"], "function", ["home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.Scores.recall", "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.Scores.precision", "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.Scores.f1", "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.Scores.weighted_accuracy"], ["", "def", "make_scorecard", "(", "scores", ")", ":", "\n", "    ", "\"\"\"Returns a human-readable scorecard of the given scores.\n\n    Args:\n        scores: dict from gender to its Scores object. None is used to denote no\n            specific gender, i.e. overall scores.\n\n    Returns:\n        A string, the scorecard.\n    \"\"\"", "\n", "scorecard", "=", "[", "]", "\n", "\n", "display_names", "=", "[", "(", "None", ",", "'Overall'", ")", ",", "(", "Gender", ".", "MASCULINE", ",", "'Masculine'", ")", ",", "\n", "(", "Gender", ".", "FEMININE", ",", "'Feminine'", ")", "]", "\n", "\n", "bias_terms", "=", "{", "}", "\n", "weighted_bias_terms", "=", "{", "}", "\n", "for", "gender", ",", "display_name", "in", "display_names", ":", "\n", "        ", "gender_scores", "=", "scores", ".", "get", "(", "gender", ",", "Scores", "(", ")", ")", "\n", "\n", "recall", "=", "gender_scores", ".", "recall", "(", ")", "\n", "precision", "=", "gender_scores", ".", "precision", "(", ")", "\n", "f1", "=", "gender_scores", ".", "f1", "(", ")", "\n", "bias_terms", "[", "gender", "]", "=", "f1", "\n", "weighted_bias_terms", "[", "gender", "]", "=", "gender_scores", ".", "weighted_accuracy", "(", ")", "\n", "\n", "scorecard", ".", "append", "(", "'{} recall: {:.1f} precision: {:.1f} f1: {:.1f}'", ".", "format", "(", "\n", "display_name", ",", "recall", ",", "precision", ",", "f1", ")", ")", "\n", "scorecard", ".", "append", "(", "'\\t\\ttp {:d}\\tfp {:d}'", ".", "format", "(", "\n", "gender_scores", ".", "true_positives", ",", "gender_scores", ".", "false_positives", ")", ")", "\n", "scorecard", ".", "append", "(", "'\\t\\tfn {:d}\\ttn {:d}'", ".", "format", "(", "\n", "gender_scores", ".", "false_negatives", ",", "gender_scores", ".", "true_negatives", ")", ")", "\n", "\n", "", "bias", "=", "'-'", "\n", "if", "bias_terms", "[", "Gender", ".", "MASCULINE", "]", "and", "bias_terms", "[", "Gender", ".", "FEMININE", "]", ":", "\n", "        ", "bias", "=", "'{:.2f}'", ".", "format", "(", "\n", "bias_terms", "[", "Gender", ".", "FEMININE", "]", "/", "bias_terms", "[", "Gender", ".", "MASCULINE", "]", ")", "\n", "", "scorecard", ".", "append", "(", "'Bias (F/M): {}\\n'", ".", "format", "(", "bias", ")", ")", "\n", "weighted_bias", "=", "'-'", "\n", "if", "weighted_bias_terms", "[", "Gender", ".", "MASCULINE", "]", "and", "weighted_bias_terms", "[", "Gender", ".", "FEMININE", "]", ":", "\n", "        ", "weighted_bias", "=", "'{:.2f}'", ".", "format", "(", "\n", "weighted_bias_terms", "[", "Gender", ".", "FEMININE", "]", "/", "weighted_bias_terms", "[", "Gender", ".", "MASCULINE", "]", ")", "\n", "", "scorecard", ".", "append", "(", "'Weighted Bias (F/M): {}\\n'", ".", "format", "(", "weighted_bias", ")", ")", "\n", "return", "'\\n'", ".", "join", "(", "scorecard", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.run_scorer": [[255, 274], ["gap_scorer.read_annotations", "gap_scorer.read_annotations", "gap_scorer.calculate_scores", "gap_scorer.make_scorecard"], "function", ["home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.read_annotations", "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.read_annotations", "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.calculate_scores", "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.make_scorecard"], ["", "def", "run_scorer", "(", "gold_tsv", ",", "system_tsv", ",", "weights", ")", ":", "\n", "    ", "\"\"\"Run the scorer.\n\n    Args:\n        gold_tsv: Gold annotations to score against.\n        system_tsv: System output to score.\n\n    Returns:\n        A string, the scorecard.\n    \"\"\"", "\n", "\n", "gold_annotations", "=", "read_annotations", "(", "gold_tsv", ",", "is_gold", "=", "True", ")", "\n", "assert", "gold_annotations", ",", "'No gold annotations read!'", "\n", "\n", "system_annotations", "=", "read_annotations", "(", "system_tsv", ",", "is_gold", "=", "False", ")", "\n", "assert", "system_annotations", ",", "'No system annotations read!'", "\n", "\n", "scores", "=", "calculate_scores", "(", "gold_annotations", ",", "system_annotations", ",", "weights", ")", "\n", "return", "make_scorecard", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.main": [[276, 284], ["gap_scorer.run_scorer", "print"], "function", ["home.repos.pwc.inspect_result.vid-koci_weightingGAP.None.gap_scorer.run_scorer"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "\"\"\"Score system output against gold and display the scorecard.\n\n    Args:\n        args: argparse namespace containing gold_tsv and system_tsv.\n    \"\"\"", "\n", "scorecard", "=", "run_scorer", "(", "args", ".", "gold_tsv", ",", "args", ".", "system_tsv", ",", "args", ".", "weights", ")", "\n", "print", "(", "scorecard", ")", "\n", "\n"]]}